void std::vector<cricket::VideoReceiverInfo>::__assign_with_size[abi:sn180100]<cricket::VideoReceiverInfo*,cricket::VideoReceiverInfo*>(uint64_t *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0x2FD2FD2FD2FD2FD3 * ((v8 - *a1) >> 3) >= a4)
  {
    v17 = a1[1];
    if (0x2FD2FD2FD2FD2FD3 * ((v17 - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        v22 = v9;
      }
      else
      {
        v22 = v9;
        do
        {
          cricket::VideoReceiverInfo::operator=(v9, v6);
          v6 = (__int128 *)((char *)v6 + 728);
          v9 += 728;
          v22 += 728;
        }
        while (v6 != a3);
        v17 = a1[1];
      }
      while (v17 != v22)
        cricket::VideoReceiverInfo::~VideoReceiverInfo((void **)(v17 - 728));
      a1[1] = v22;
    }
    else
    {
      v18 = (uint64_t)a2 + 8 * ((v17 - v9) >> 3);
      if (v17 != v9)
      {
        v19 = 8 * ((v17 - v9) >> 3);
        do
        {
          cricket::VideoReceiverInfo::operator=(v9, v6);
          v6 = (__int128 *)((char *)v6 + 728);
          v9 += 728;
          v19 -= 728;
        }
        while (v19);
        v9 = a1[1];
      }
      v20 = v9;
      if ((__int128 *)v18 != a3)
      {
        v20 = v9;
        v21 = v9;
        do
        {
          std::construct_at[abi:sn180100]<cricket::VideoReceiverInfo,cricket::VideoReceiverInfo&,cricket::VideoReceiverInfo*>(v21, v18);
          v18 += 728;
          v21 += 728;
          v20 += 728;
        }
        while ((__int128 *)v18 != a3);
      }
      a1[1] = v20;
    }
  }
  else
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          cricket::VideoReceiverInfo::~VideoReceiverInfo((void **)(v10 - 728));
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x5A05A05A05A05ALL)
      goto LABEL_34;
    v12 = 0x2FD2FD2FD2FD2FD3 * (v8 >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x2D02D02D02D02DLL ? 0x5A05A05A05A05ALL : v13;
    if (v14 > 0x5A05A05A05A05ALL)
LABEL_34:
      abort();
    v15 = 728 * v14;
    v16 = (char *)operator new(728 * v14);
    *a1 = (uint64_t)v16;
    a1[1] = (uint64_t)v16;
    for (a1[2] = (uint64_t)&v16[v15]; v6 != a3; v16 += 728)
    {
      std::construct_at[abi:sn180100]<cricket::VideoReceiverInfo,cricket::VideoReceiverInfo&,cricket::VideoReceiverInfo*>((uint64_t)v16, (uint64_t)v6);
      v6 = (__int128 *)((char *)v6 + 728);
    }
    a1[1] = (uint64_t)v16;
  }
}

uint64_t std::construct_at[abi:sn180100]<cricket::VideoReceiverInfo,cricket::VideoReceiverInfo&,cricket::VideoReceiverInfo*>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 *v11;
  std::string *v12;
  __int128 v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  std::string *v20;
  __int128 v21;

  if (!a1)
  {
    __break(1u);
    goto LABEL_20;
  }
  v4 = (_QWORD *)cricket::MediaReceiverInfo::MediaReceiverInfo(a1, (__int128 *)a2);
  v4[43] = 0;
  v4[44] = 0;
  v4[45] = 0;
  v5 = *(_QWORD *)(a2 + 344);
  v6 = *(_QWORD *)(a2 + 352);
  v7 = v6 - v5;
  if (v6 == v5)
    goto LABEL_13;
  v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 4);
  if (v8 >= 0x555555555555556)
LABEL_20:
    abort();
  v9 = (char *)operator new(v7);
  v10 = 0;
  *(_QWORD *)(a1 + 344) = v9;
  *(_QWORD *)(a1 + 352) = v9;
  *(_QWORD *)(a1 + 360) = &v9[48 * v8];
  do
  {
    v11 = (__int128 *)(v5 + v10);
    v12 = (std::string *)&v9[v10];
    if (*(char *)(v5 + v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    }
    else
    {
      v13 = *v11;
      v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v14 = &v9[v10];
    *((_QWORD *)v14 + 3) = 0;
    *((_QWORD *)v14 + 4) = 0;
    *((_QWORD *)v14 + 5) = 0;
    v16 = *(_BYTE **)(v5 + v10 + 24);
    v15 = *(_BYTE **)(v5 + v10 + 32);
    v17 = v15 - v16;
    if (v15 != v16)
    {
      if (v17 < 0)
        goto LABEL_20;
      v18 = (char *)operator new(v15 - v16);
      *((_QWORD *)v14 + 3) = v18;
      *((_QWORD *)v14 + 4) = v18;
      v19 = &v18[4 * (v17 >> 2)];
      *((_QWORD *)v14 + 5) = v19;
      memcpy(v18, v16, v17);
      *((_QWORD *)v14 + 4) = v19;
    }
    v10 += 48;
  }
  while (v5 + v10 != v6);
  *(_QWORD *)(a1 + 352) = &v9[v10];
LABEL_13:
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  if (*(_BYTE *)(a2 + 392))
  {
    v20 = (std::string *)(a1 + 368);
    if (*(char *)(a2 + 391) < 0)
    {
      std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)(a2 + 368), *(_QWORD *)(a2 + 376));
    }
    else
    {
      v21 = *(_OWORD *)(a2 + 368);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
    }
    *(_BYTE *)(a1 + 392) = 1;
  }
  memcpy((void *)(a1 + 400), (const void *)(a2 + 400), 0x141uLL);
  return a1;
}

uint64_t cricket::VideoReceiverInfo::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::string *v10;
  char v11;
  __int128 v12;
  const std::string::value_type *v13;
  size_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  if ((__int128 *)a1 != a2)
  {
    v10 = (std::string *)(a1 + 128);
    v11 = *((_BYTE *)a2 + 151);
    if (*(char *)(a1 + 151) < 0)
    {
      if (v11 >= 0)
        v13 = (const std::string::value_type *)(a2 + 8);
      else
        v13 = (const std::string::value_type *)*((_QWORD *)a2 + 16);
      if (v11 >= 0)
        v14 = *((unsigned __int8 *)a2 + 151);
      else
        v14 = *((_QWORD *)a2 + 17);
      std::string::__assign_no_alias<false>(v10, v13, v14);
    }
    else if ((*((_BYTE *)a2 + 151) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v10, *((char **)a2 + 16), *((_QWORD *)a2 + 17));
    }
    else
    {
      v12 = a2[8];
      *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
    }
    v15 = *((_DWORD *)a2 + 38);
    *(_BYTE *)(a1 + 156) = *((_BYTE *)a2 + 156);
    *(_DWORD *)(a1 + 152) = v15;
    std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits>::__assign_with_size[abi:sn180100]<webrtc::VideoEncoder::ResolutionBitrateLimits*,webrtc::VideoEncoder::ResolutionBitrateLimits*>((_QWORD *)(a1 + 160), *((char **)a2 + 20), *((char **)a2 + 21), (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 4);
    std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits>::__assign_with_size[abi:sn180100]<webrtc::VideoEncoder::ResolutionBitrateLimits*,webrtc::VideoEncoder::ResolutionBitrateLimits*>((_QWORD *)(a1 + 184), *((char **)a2 + 23), *((char **)a2 + 24), (uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 4);
    *(_OWORD *)(a1 + 208) = a2[13];
    v16 = a2[14];
    v17 = a2[15];
    v18 = a2[17];
    *(_OWORD *)(a1 + 256) = a2[16];
    *(_OWORD *)(a1 + 272) = v18;
    *(_OWORD *)(a1 + 224) = v16;
    *(_OWORD *)(a1 + 240) = v17;
    v19 = a2[18];
    v20 = a2[19];
    v21 = a2[20];
    *(_DWORD *)(a1 + 336) = *((_DWORD *)a2 + 84);
    *(_OWORD *)(a1 + 304) = v20;
    *(_OWORD *)(a1 + 320) = v21;
    *(_OWORD *)(a1 + 288) = v19;
    std::vector<cricket::SsrcGroup>::__assign_with_size[abi:sn180100]<cricket::SsrcGroup*,cricket::SsrcGroup*>((std::string **)(a1 + 344), *((_QWORD *)a2 + 43), *((_QWORD *)a2 + 44), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 44) - *((_QWORD *)a2 + 43)) >> 4));
  }
  std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 368), (std::string *)(a2 + 23));
  memcpy((void *)(a1 + 400), a2 + 25, 0x141uLL);
  return a1;
}

void std::optional<std::string>::value_or[abi:sn180100]<char const(&)[8]>(std::string *__s@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  std::string *v3;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  char *v10;

  v3 = a3;
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
    return;
  }
  v5 = strlen((const char *)__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
LABEL_19:
    abort();
  v6 = v5;
  if (v5 > 0x16)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v9 = (std::string *)operator new(v7 + 1);
    v3->__r_.__value_.__l.__size_ = v6;
    v3->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v3->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    v3 = v9;
  }
  else
  {
    *((_BYTE *)&v3->__r_.__value_.__s + 23) = v5;
  }
  v10 = (char *)v3 + v6;
  if (v3 <= __s && v10 > (char *)__s)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v6)
    memcpy(v3, __s, v6);
  *v10 = 0;
}

void std::__tree<std::__value_type<std::string,webrtc::StatsReport *>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::StatsReport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::StatsReport *>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,webrtc::StatsReport *>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::StatsReport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::StatsReport *>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,webrtc::StatsReport *>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::StatsReport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::StatsReport *>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::LegacyStatsCollector::ExtractSessionAndDataInfo(void)::$_1>(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t i;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::string::size_type v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  void **v23;
  size_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  _OWORD *v31;
  _QWORD *v32;
  void **v33;
  void **v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  rtc::SSLCertificateStats *v54;
  rtc::SSLCertificateStats *v55;
  void **v56;
  void **v57;
  void *v58;
  void **v59;
  void **v60;
  void **v61;
  void **v62;
  void **v63;
  void **v64;
  void **v65;
  void *v66;
  char v67;
  void *v68;
  __int128 v69;
  void *v70;
  rtc::SSLCertChain *v71;
  rtc::SSLCertificateStats *v72;
  rtc::SSLCertificateStats *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  std::string::size_type v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  _QWORD *v86;
  void **v87;
  void **v88;
  void **v89;
  void **v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  rtc::Thread *v98;
  char *v99;
  char *v100;
  char *v101;
  void **v102;
  void **v103;
  void *v104;
  _BYTE *v105;
  char v106;
  std::string::size_type v107;
  std::string::size_type size;
  int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  _QWORD *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  std::string::size_type v120;
  void *v121;
  void *v122;
  std::string::size_type *v123;
  _QWORD **v124;
  uint64_t v125;
  std::string::size_type v126;
  std::string *v127;
  std::string *v128;
  std::string::size_type v129;
  std::string::size_type v130;
  std::string *v131;
  std::string::size_type v132;
  __int128 v133;
  uint64_t v134;
  std::string::size_type v135;
  void **j;
  _QWORD *v137;
  void **v138;
  _QWORD **v139;
  uint64_t v140;
  void **v141;
  char v142;
  _BYTE *v143;
  uint64_t v145;
  void *v146[2];
  uint64_t v147;
  char v148;
  void *v149[2];
  uint64_t v150;
  char v151;
  void *__p[2];
  void *v153[4];
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159[2];
  char **v160;
  char *v161[2];
  std::string v162;
  _BYTE v163[15];
  uint64_t v164;

  v164 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)a1 + 9);
  v1 = (uint64_t *)*((_QWORD *)a1 + 10);
  LOBYTE(v149[0]) = 0;
  v151 = 0;
  if (*((_BYTE *)a1 + 24))
  {
    v3 = *a1;
    v150 = *((_QWORD *)a1 + 2);
    *(_OWORD *)v149 = v3;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    *(_QWORD *)a1 = 0;
    v151 = 1;
  }
  LOBYTE(v146[0]) = 0;
  v148 = 0;
  if (*((_BYTE *)a1 + 56))
  {
    *(_OWORD *)v146 = a1[2];
    v147 = *((_QWORD *)a1 + 6);
    *((_QWORD *)a1 + 5) = 0;
    *((_QWORD *)a1 + 6) = 0;
    *((_QWORD *)a1 + 4) = 0;
    v148 = 1;
  }
  v4 = rtc::Thread::Current((rtc::Thread *)a1);
  v142 = v4[217];
  v143 = v4;
  v4[217] = 0;
  v155 = 0;
  v156 = 0;
  *(_OWORD *)__p = 0u;
  memset(v153, 0, sizeof(v153));
  v154 = &v155;
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v2 + 64) + 568))(&v162);
  *(_OWORD *)__p = *(_OWORD *)&v162.__r_.__value_.__l.__data_;
  v153[0] = (void *)v162.__r_.__value_.__r.__words[2];
  v5 = *v1;
  for (i = v1[1]; v5 != i; v5 += 8)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 160);
    if (v8)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8);
      if (v10 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_203;
      v11 = (char *)v9;
      v12 = v10;
      if (v10 > 0x16)
      {
        v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v14 = v10 | 7;
        v15 = v14 + 1;
        v13 = (char *)operator new(v14 + 1);
        v162.__r_.__value_.__l.__size_ = v12;
        v162.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
        v162.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
      }
      else
      {
        *((_BYTE *)&v162.__r_.__value_.__s + 23) = v10;
        v13 = (char *)&v162;
      }
      v16 = &v13[v12];
      if (v13 <= v11 && v16 > v11)
        goto LABEL_202;
      if (v12)
        memmove(v13, v11, v12);
      *v16 = 0;
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
      v19 = std::map<std::string,std::string>::operator[]((uint64_t)&v154, v18);
      v20 = v19;
      if (*(char *)(v19 + 23) < 0)
        operator delete(*(void **)v19);
      v7 = *(_OWORD *)&v162.__r_.__value_.__l.__data_;
      *(_QWORD *)(v20 + 16) = *((_QWORD *)&v162.__r_.__value_.__l + 2);
      *(_OWORD *)v20 = v7;
    }
  }
  if (v151)
  {
    if (!v148)
    {
LABEL_202:
      __break(1u);
LABEL_203:
      abort();
    }
    v21 = std::map<std::string,std::string>::operator[]((uint64_t)&v154, (uint64_t)v146);
    if ((void **)v21 != v149)
    {
      if (*(char *)(v21 + 23) < 0)
      {
        if (v150 >= 0)
          v23 = v149;
        else
          v23 = (void **)v149[0];
        if (v150 >= 0)
          v24 = HIBYTE(v150);
        else
          v24 = (size_t)v149[1];
        std::string::__assign_no_alias<false>((std::string *)v21, (const std::string::value_type *)v23, v24);
      }
      else if (v150 < 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)v21, (char *)v149[0], (size_t)v149[1]);
      }
      else
      {
        v22 = *(_OWORD *)v149;
        *(_QWORD *)(v21 + 16) = v150;
        *(_OWORD *)v21 = v22;
      }
    }
  }
  v161[0] = 0;
  v161[1] = 0;
  v160 = v161;
  v25 = v154;
  if (v154 != &v155)
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v160, (const void **)v25 + 7, (uint64_t)(v25 + 7));
      v28 = (uint64_t *)v25[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (uint64_t *)v25[2];
          v30 = *v29 == (_QWORD)v25;
          v25 = v29;
        }
        while (!v30);
      }
      v25 = v29;
    }
    while (v29 != &v155);
  }
  (*(void (**)(uint64_t **__return_ptr, _QWORD, char ***))(**(_QWORD **)(v2 + 64) + 576))(&v158, *(_QWORD *)(v2 + 64), &v160);
  v26 = v158;
  v27 = v159;
  if (v158 != v159)
  {
    v145 = v2;
    while (1)
    {
      v31 = v26 + 4;
      v32 = v26 + 7;
      v33 = (void **)v153[2];
      if (v153[2] < v153[3])
      {
        if (!v153[2])
          goto LABEL_202;
        if (*((char *)v26 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&v162, (const std::string::value_type *)v26[4], v26[5]);
        }
        else
        {
          *(_OWORD *)&v162.__r_.__value_.__l.__data_ = *v31;
          v162.__r_.__value_.__r.__words[2] = v26[6];
        }
        v66 = (void *)v26[7];
        *(_QWORD *)v163 = v26[8];
        *(_QWORD *)&v163[7] = *(uint64_t *)((char *)v26 + 71);
        v67 = *((_BYTE *)v26 + 79);
        v26[8] = 0;
        v26[9] = 0;
        *v32 = 0;
        v68 = (void *)v26[12];
        v69 = *((_OWORD *)v26 + 5);
        v26[11] = 0;
        v26[12] = 0;
        v26[10] = 0;
        v70 = (void *)v162.__r_.__value_.__r.__words[2];
        *(_OWORD *)v33 = *(_OWORD *)&v162.__r_.__value_.__l.__data_;
        v33[2] = v70;
        v33[3] = v66;
        v33[4] = *(void **)v163;
        *(void **)((char *)v33 + 39) = *(void **)&v163[7];
        *((_BYTE *)v33 + 47) = v67;
        *((_OWORD *)v33 + 3) = v69;
        v33[8] = v68;
        v33[9] = 0;
        v48 = v33 + 11;
        v33[10] = 0;
        goto LABEL_103;
      }
      v34 = (void **)v153[1];
      v35 = 0x2E8BA2E8BA2E8BA3 * (((char *)v153[2] - (char *)v153[1]) >> 3);
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) > 0x2E8BA2E8BA2E8BALL)
        goto LABEL_203;
      if (0x5D1745D1745D1746 * (((char *)v153[3] - (char *)v153[1]) >> 3) > v36)
        v36 = 0x5D1745D1745D1746 * (((char *)v153[3] - (char *)v153[1]) >> 3);
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((char *)v153[3] - (char *)v153[1]) >> 3)) >= 0x1745D1745D1745DLL)
        v37 = 0x2E8BA2E8BA2E8BALL;
      else
        v37 = v36;
      if (!v37)
        goto LABEL_202;
      if (v37 > 0x2E8BA2E8BA2E8BALL)
        goto LABEL_205;
      v38 = v27;
      v39 = 88 * v37;
      v40 = (char *)operator new(88 * v37);
      if (*((char *)v26 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v162, (const std::string::value_type *)v26[4], v26[5]);
        v34 = (void **)v153[1];
        v33 = (void **)v153[2];
      }
      else
      {
        *(_OWORD *)&v162.__r_.__value_.__l.__data_ = *v31;
        v162.__r_.__value_.__r.__words[2] = v26[6];
      }
      v41 = v26[7];
      v42 = &v40[88 * v35];
      v43 = &v40[v39];
      *(_QWORD *)v163 = v26[8];
      *(_QWORD *)&v163[7] = *(uint64_t *)((char *)v26 + 71);
      v44 = *((_BYTE *)v26 + 79);
      v26[8] = 0;
      v26[9] = 0;
      *v32 = 0;
      v45 = v26[12];
      v46 = *((_OWORD *)v26 + 5);
      v26[11] = 0;
      v26[12] = 0;
      v26[10] = 0;
      *(std::string *)v42 = v162;
      *(_QWORD *)(v42 + 39) = *(_QWORD *)&v163[7];
      v47 = *(_QWORD *)v163;
      *((_QWORD *)v42 + 3) = v41;
      *((_QWORD *)v42 + 4) = v47;
      v42[47] = v44;
      *((_OWORD *)v42 + 3) = v46;
      *((_QWORD *)v42 + 8) = v45;
      *((_QWORD *)v42 + 9) = 0;
      v48 = v42 + 88;
      *((_QWORD *)v42 + 10) = 0;
      if (v33 != v34)
        break;
      v153[1] = v42;
      v153[2] = v42 + 88;
      v153[3] = v43;
LABEL_98:
      v27 = v38;
      if (v34)
        operator delete(v34);
      v2 = v145;
LABEL_103:
      v153[2] = v48;
      if (v153[1] == v48)
        goto LABEL_202;
      v162.__r_.__value_.__r.__words[0] = 0;
      if ((*(unsigned int (**)(_QWORD, uint64_t, std::string *))(**(_QWORD **)(v2 + 64) + 600))(*(_QWORD *)(v2 + 64), (uint64_t)v48 - 88, &v162))
      {
        v71 = (rtc::SSLCertChain *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v162.__r_.__value_.__r.__words[0]
                                                                                   + 8)
                                                                     + 24))(*(_QWORD *)(v162.__r_.__value_.__r.__words[0]
                                                                                        + 8));
        rtc::SSLCertChain::GetStats(v71, (uint64_t *)v163);
        v72 = (rtc::SSLCertificateStats *)*((_QWORD *)v48 - 2);
        *((_QWORD *)v48 - 2) = *(_QWORD *)v163;
        if (v72)
        {
          rtc::SSLCertificateStats::~SSLCertificateStats(v72);
          MEMORY[0x20BD0ADEC]();
        }
      }
      (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v2 + 64) + 608))(v163, *(_QWORD *)(v2 + 64), (uint64_t)v48 - 88);
      if (*(_QWORD *)v163)
      {
        rtc::SSLCertChain::GetStats(*(rtc::SSLCertChain **)v163, &v157);
        v73 = (rtc::SSLCertificateStats *)*((_QWORD *)v48 - 1);
        *((_QWORD *)v48 - 1) = v157;
        if (v73)
        {
          rtc::SSLCertificateStats::~SSLCertificateStats(v73);
          MEMORY[0x20BD0ADEC]();
        }
        v74 = *(_QWORD **)v163;
        *(_QWORD *)v163 = 0;
        if (v74)
        {
          v75 = (_QWORD *)*v74;
          if (*v74)
          {
            v76 = (_QWORD *)v74[1];
            v77 = (_QWORD *)*v74;
            if (v76 != v75)
            {
              do
              {
                v79 = *--v76;
                v78 = v79;
                *v76 = 0;
                if (v79)
                  (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
              }
              while (v76 != v75);
              v77 = (_QWORD *)*v74;
            }
            v74[1] = v75;
            operator delete(v77);
          }
          MEMORY[0x20BD0ADEC](v74, 0x20C40960023A9);
        }
      }
      v80 = v162.__r_.__value_.__r.__words[0];
      if (v162.__r_.__value_.__r.__words[0])
      {
        do
        {
          v81 = __ldaxr((unsigned int *)v80);
          v82 = v81 - 1;
        }
        while (__stlxr(v82, (unsigned int *)v80));
        if (!v82)
        {
          v83 = *(_QWORD *)(v80 + 8);
          *(_QWORD *)(v80 + 8) = 0;
          if (v83)
            (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
          MEMORY[0x20BD0ADEC](v80, 0x1020C40D5A9D86FLL);
        }
      }
      v84 = (uint64_t *)v26[1];
      if (v84)
      {
        do
        {
          v85 = v84;
          v84 = (uint64_t *)*v84;
        }
        while (v84);
      }
      else
      {
        do
        {
          v85 = (uint64_t *)v26[2];
          v30 = *v85 == (_QWORD)v26;
          v26 = v85;
        }
        while (!v30);
      }
      v26 = v85;
      if (v85 == v27)
        goto LABEL_132;
    }
    do
    {
      v49 = *(_OWORD *)(v33 - 11);
      *((_QWORD *)v42 - 9) = *(v33 - 9);
      *(_OWORD *)(v42 - 88) = v49;
      *((_OWORD *)v33 - 5) = 0uLL;
      *(v33 - 11) = 0;
      v50 = *((_OWORD *)v33 - 4);
      *((_QWORD *)v42 - 6) = *(v33 - 6);
      *((_OWORD *)v42 - 4) = v50;
      *(_OWORD *)(v33 - 7) = 0uLL;
      *(v33 - 8) = 0;
      *(_OWORD *)(v42 - 40) = *(_OWORD *)(v33 - 5);
      *((_QWORD *)v42 - 3) = *(v33 - 3);
      *(_OWORD *)(v33 - 5) = 0uLL;
      v51 = (uint64_t)*(v33 - 2);
      *(_OWORD *)(v33 - 3) = 0uLL;
      *((_QWORD *)v42 - 2) = v51;
      v52 = (uint64_t)*(v33 - 1);
      *(v33 - 1) = 0;
      *((_QWORD *)v42 - 1) = v52;
      v42 -= 88;
      v33 -= 11;
    }
    while (v33 != v34);
    v34 = (void **)v153[1];
    v53 = (void **)v153[2];
    v153[1] = v42;
    v153[2] = v48;
    v153[3] = v43;
    if (v53 == v34)
      goto LABEL_98;
    while (1)
    {
      v54 = (rtc::SSLCertificateStats *)*(v53 - 1);
      *(v53 - 1) = 0;
      if (v54)
      {
        rtc::SSLCertificateStats::~SSLCertificateStats(v54);
        MEMORY[0x20BD0ADEC]();
      }
      v55 = (rtc::SSLCertificateStats *)*(v53 - 2);
      *(v53 - 2) = 0;
      if (v55)
      {
        rtc::SSLCertificateStats::~SSLCertificateStats(v55);
        MEMORY[0x20BD0ADEC]();
      }
      v56 = (void **)*(v53 - 5);
      if (v56)
        break;
LABEL_92:
      if (*((char *)v53 - 41) < 0)
      {
        operator delete(*(v53 - 8));
        v65 = v53 - 11;
        if (*((char *)v53 - 65) < 0)
LABEL_96:
          operator delete(*v65);
      }
      else
      {
        v65 = v53 - 11;
        if (*((char *)v53 - 65) < 0)
          goto LABEL_96;
      }
      v53 = v65;
      if (v65 == v34)
        goto LABEL_98;
    }
    v57 = (void **)*(v53 - 4);
    v58 = *(v53 - 5);
    if (v57 == v56)
    {
LABEL_91:
      *(v53 - 4) = v56;
      operator delete(v58);
      goto LABEL_92;
    }
    while (1)
    {
      if (*((char *)v57 - 17) < 0)
      {
        operator delete(*(v57 - 5));
        v59 = (void **)*(v57 - 14);
        if (v59)
        {
LABEL_83:
          v61 = (void **)*(v57 - 13);
          v62 = v59;
          if (v61 != v59)
          {
            do
            {
              cricket::Candidate::~Candidate(v61 - 64);
              cricket::Candidate::~Candidate(v61 - 118);
              v61 -= 133;
            }
            while (v61 != v59);
            v62 = (void **)*(v57 - 14);
          }
          *(v57 - 13) = v59;
          operator delete(v62);
          v60 = (void **)*(v57 - 17);
          if (!v60)
            goto LABEL_77;
LABEL_87:
          v63 = (void **)*(v57 - 16);
          v64 = v60;
          if (v63 != v60)
          {
            do
              cricket::Candidate::~Candidate(v63 - 58);
            while (v63 != v60);
            v64 = (void **)*(v57 - 17);
          }
          *(v57 - 16) = v60;
          operator delete(v64);
          goto LABEL_77;
        }
      }
      else
      {
        v59 = (void **)*(v57 - 14);
        if (v59)
          goto LABEL_83;
      }
      v60 = (void **)*(v57 - 17);
      if (v60)
        goto LABEL_87;
LABEL_77:
      v57 -= 21;
      if (v57 == v56)
      {
        v58 = *(v53 - 5);
        goto LABEL_91;
      }
    }
  }
LABEL_132:
  std::__tree<std::__value_type<std::string,cricket::TransportStats>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::TransportStats>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::TransportStats>>>::destroy((uint64_t)&v158, v159[0]);
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)&v160, v161[0]);
  v143[217] = v142;
  v86 = (_QWORD *)*((_QWORD *)a1 + 8);
  v87 = (void **)*v86;
  if (*v86)
  {
    v88 = (void **)v86[1];
    v89 = (void **)*v86;
    if (v88 != v87)
    {
      do
        cricket::Candidate::~Candidate(v88 - 58);
      while (v88 != v87);
      v89 = (void **)*v86;
    }
    v86[1] = v87;
    operator delete(v89);
    *v86 = 0;
    v86[1] = 0;
    v86[2] = 0;
  }
  *(_OWORD *)v86 = *(_OWORD *)__p;
  v86[2] = v153[0];
  __p[0] = 0;
  __p[1] = 0;
  v153[0] = 0;
  v90 = (void **)(v86 + 3);
  v91 = v86[3];
  if (v91)
  {
    v92 = v86[4];
    v93 = (void *)v86[3];
    if (v92 != v91)
    {
      do
        webrtc::LegacyStatsCollector::TransportStats::~TransportStats((webrtc::LegacyStatsCollector::TransportStats *)(v92 - 88));
      while (v92 != v91);
      v93 = *v90;
    }
    v86[4] = v91;
    operator delete(v93);
    *v90 = 0;
    v86[4] = 0;
    v86[5] = 0;
  }
  v95 = v86[7];
  v94 = v86 + 7;
  *((_OWORD *)v94 - 2) = *(_OWORD *)&v153[1];
  *(v94 - 2) = v153[3];
  memset(&v153[1], 0, 24);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v94 - 1), v95);
  *(v94 - 1) = v154;
  v96 = v155;
  *v94 = v155;
  v97 = v156;
  v94[1] = v156;
  if (v97)
  {
    *(_QWORD *)(v96 + 16) = v94;
    v154 = &v155;
    v155 = 0;
    v156 = 0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v154, 0);
    v99 = (char *)v153[1];
    if (!v153[1])
      goto LABEL_150;
  }
  else
  {
    *(v94 - 1) = v94;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v154, v155);
    v99 = (char *)v153[1];
    if (!v153[1])
      goto LABEL_150;
  }
  v100 = (char *)v153[2];
  v101 = v99;
  if (v153[2] != v99)
  {
    do
      webrtc::LegacyStatsCollector::TransportStats::~TransportStats((webrtc::LegacyStatsCollector::TransportStats *)(v100 - 88));
    while (v100 != v99);
    v101 = (char *)v153[1];
  }
  v153[2] = v99;
  operator delete(v101);
LABEL_150:
  v102 = (void **)__p[0];
  if (__p[0])
  {
    v103 = (void **)__p[1];
    v104 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        cricket::Candidate::~Candidate(v103 - 58);
      while (v103 != v102);
      v104 = __p[0];
    }
    __p[1] = v102;
    operator delete(v104);
  }
  if (v148 && SHIBYTE(v147) < 0)
    operator delete(v146[0]);
  if (v151 && SHIBYTE(v150) < 0)
    operator delete(v149[0]);
  __p[0] = __p;
  __p[1] = __p;
  v153[0] = 0;
  v105 = rtc::Thread::Current(v98);
  v106 = v105[217];
  v105[217] = 0;
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v2 + 64) + 552))(&v162);
  size = v162.__r_.__value_.__l.__size_;
  v107 = v162.__r_.__value_.__r.__words[0];
  if (v162.__r_.__value_.__r.__words[0] != v162.__r_.__value_.__l.__size_)
  {
    while (1)
    {
      v109 = *(_DWORD *)(v107 + 4);
      v110 = operator new();
      *(_DWORD *)(v110 + 8) = 11;
      *(_DWORD *)(v110 + 12) = v109;
      *(_QWORD *)v110 = off_24C0B5BB0;
      *(_DWORD *)(v110 + 16) = 0;
      v111 = (unsigned int *)(v110 + 16);
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 1, v111));
      v160 = (char **)v110;
      v113 = webrtc::StatsCollection::ReplaceOrAddNew((uint64_t *)__p, &v160);
      v113[1] = *(_QWORD *)(v2 + 80);
      webrtc::StatsReport::AddString((uint64_t)v113, 98, v107 + 8);
      v114 = *(_DWORD *)(v107 + 4);
      if ((v114 & 0x80000000) == 0)
        webrtc::StatsReport::AddInt(v113, 9, v114);
      webrtc::StatsReport::AddString((uint64_t)v113, 17, v107 + 32);
      v119 = *(int *)(v107 + 56);
      if (v119 >= 4)
        break;
      webrtc::StatsReport::AddString((uint64_t)v113, 22, off_24C0B5AB0[v119]);
      if (v160)
        (*((void (**)(char **))*v160 + 1))(v160);
      v107 += 88;
      if (v107 == size)
      {
        v107 = v162.__r_.__value_.__r.__words[0];
        goto LABEL_172;
      }
    }
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/api/data_channel_interface.h", 142, "false", rtc::webrtc_checks_impl::LogStreamer<>::Call<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, v115, v116, v117, v118, (uint64_t)"Unknown DataChannel state: ");
LABEL_205:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
LABEL_172:
  if (v107)
  {
    v120 = v162.__r_.__value_.__l.__size_;
    v121 = (void *)v107;
    if (v162.__r_.__value_.__l.__size_ == v107)
    {
LABEL_182:
      v162.__r_.__value_.__l.__size_ = v107;
      operator delete(v121);
      goto LABEL_183;
    }
    while (1)
    {
      if (*(char *)(v120 - 33) < 0)
      {
        operator delete(*(void **)(v120 - 56));
        if (*(char *)(v120 - 57) < 0)
LABEL_180:
          operator delete(*(void **)(v120 - 80));
      }
      else if (*(char *)(v120 - 57) < 0)
      {
        goto LABEL_180;
      }
      v120 -= 88;
      if (v120 == v107)
      {
        v121 = (void *)v162.__r_.__value_.__r.__words[0];
        goto LABEL_182;
      }
    }
  }
LABEL_183:
  v105[217] = v106;
  v162.__r_.__value_.__r.__words[0] = (std::string::size_type)&v162;
  v162.__r_.__value_.__l.__size_ = (std::string::size_type)&v162;
  v162.__r_.__value_.__r.__words[2] = 0;
  v122 = v153[0];
  if (v153[0])
  {
    v124 = (_QWORD **)__p[0];
    v123 = (std::string::size_type *)__p[1];
    v125 = *(_QWORD *)__p[1];
    *(_QWORD *)(v125 + 8) = *((_QWORD *)__p[0] + 1);
    *v124[1] = v125;
    v126 = v162.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v162.__r_.__value_.__r.__words[0] + 8) = v123;
    *v123 = v126;
    v124[1] = &v162;
    v162.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
    v162.__r_.__value_.__r.__words[2] = (std::string::size_type)v122;
    v153[0] = 0;
  }
  v127 = (std::string *)*((_QWORD *)a1 + 11);
  if (v127->__r_.__value_.__r.__words[2])
  {
    v129 = v127->__r_.__value_.__r.__words[0];
    v128 = (std::string *)v127->__r_.__value_.__l.__size_;
    v130 = v128->__r_.__value_.__r.__words[0];
    *(_QWORD *)(v130 + 8) = *(_QWORD *)(v127->__r_.__value_.__r.__words[0] + 8);
    **(_QWORD **)(v129 + 8) = v130;
    v127->__r_.__value_.__r.__words[2] = 0;
    if (v128 != v127)
    {
      do
      {
        v131 = (std::string *)v128->__r_.__value_.__l.__size_;
        operator delete(v128);
        v128 = v131;
      }
      while (v131 != v127);
    }
  }
  if (v127 == &v162)
    goto LABEL_202;
  v132 = v162.__r_.__value_.__r.__words[2];
  if (v162.__r_.__value_.__r.__words[2])
  {
    v133 = *(_OWORD *)&v162.__r_.__value_.__l.__data_;
    v134 = *(_QWORD *)v162.__r_.__value_.__l.__size_;
    *(_QWORD *)(v134 + 8) = *(_QWORD *)(v162.__r_.__value_.__r.__words[0] + 8);
    **(_QWORD **)(v133 + 8) = v134;
    v135 = v127->__r_.__value_.__r.__words[0];
    *(_QWORD *)(v135 + 8) = *((_QWORD *)&v133 + 1);
    **((_QWORD **)&v133 + 1) = v135;
    v127->__r_.__value_.__r.__words[0] = v133;
    *(_QWORD *)(v133 + 8) = v127;
    v127->__r_.__value_.__r.__words[2] += v132;
  }
  for (j = (void **)__p[1]; j != __p; j = (void **)j[1])
  {
    v137 = j[2];
    if (v137)
    {
      std::__tree<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::__map_value_compare<webrtc::StatsReport::StatsValueName,std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::less<webrtc::StatsReport::StatsValueName>,true>,std::allocator<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>>>::destroy((uint64_t)(v137 + 2), (_QWORD *)v137[3]);
      if (*v137)
        (*(void (**)(_QWORD))(*(_QWORD *)*v137 + 8))(*v137);
      MEMORY[0x20BD0ADEC](v137, 0x1020C40FF594A20);
    }
  }
  if (v153[0])
  {
    v139 = (_QWORD **)__p[0];
    v138 = (void **)__p[1];
    v140 = *(_QWORD *)__p[1];
    *(_QWORD *)(v140 + 8) = *((_QWORD *)__p[0] + 1);
    *v139[1] = v140;
    v153[0] = 0;
    if (v138 != __p)
    {
      do
      {
        v141 = (void **)v138[1];
        operator delete(v138);
        v138 = v141;
      }
      while (v141 != __p);
    }
  }
}

void std::__tree<std::__value_type<std::string,cricket::TransportStats>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::TransportStats>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::TransportStats>>>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,cricket::TransportStats>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::TransportStats>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::TransportStats>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,cricket::TransportStats>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::TransportStats>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::TransportStats>>>::destroy(a1, *(_QWORD *)(a2 + 8));
    v4 = *(_QWORD *)(a2 + 80);
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 88);
      v6 = *(void **)(a2 + 80);
      if (v5 != v4)
      {
        do
          cricket::TransportChannelStats::~TransportChannelStats((void **)(v5 - 168));
        while (v5 != v4);
        v6 = *(void **)(a2 + 80);
      }
      *(_QWORD *)(a2 + 88) = v4;
      operator delete(v6);
    }
    if (*(char *)(a2 + 79) < 0)
    {
      operator delete(*(void **)(a2 + 56));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_9;
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_9:
      operator delete((void *)a2);
      return;
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

uint64_t ***rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::LegacyStatsCollector::ExtractBweInfo(void)::$_1>(uint64_t ***result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t ***v3;
  uint64_t v4;

  v1 = **result;
  v2 = (*result)[1];
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *v1++;
      result = (uint64_t ***)(*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v4 + 224))(v4, v3[1]);
    }
    while (v1 != v2);
  }
  return result;
}

void rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::LegacyStatsCollector::ExtractMediaInfo(std::map<std::string,std::string> const&)::$_1>(rtc::Thread *a1)
{
  _BYTE *v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (***v15)(_QWORD);
  void **v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  void *v20;
  int v21;
  char *v22;
  char **v23;
  char **v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  BOOL v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  _BYTE *v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  rtc::Thread *v68;
  char *v69;
  uint64_t v70;
  void *__p;
  __int128 v72;
  _QWORD v73[4];

  v73[2] = *MEMORY[0x24BDAC8D0];
  v2 = rtc::Thread::Current(a1);
  v62 = v2[217];
  v63 = v2;
  v2[217] = 0;
  v68 = a1;
  v3 = **(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v3 != v4)
  {
    v5 = 0;
    v64 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    do
    {
      v6 = *(_QWORD **)(*(_QWORD *)v3 + 16);
      if (v6[20])
      {
        v7 = (_QWORD *)*((_QWORD *)v68 + 1);
        v8 = v5;
        if (v5 >= (unint64_t)((uint64_t)(v7[1] - *v7) >> 3))
          goto LABEL_87;
        ++v5;
        v9 = v6[7];
        v10 = v6[8];
        v11 = v10 - v9;
        if (v10 != v9)
        {
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_88;
          v12 = *(_QWORD *)(*v7 + 8 * v8);
          v13 = (char *)operator new(v11);
          v14 = 0;
          do
          {
            v15 = *(void (****)(_QWORD))(v9 + v14);
            *(_QWORD *)&v13[v14] = v15;
            if (v15)
              (**v15)(v15);
            v14 += 8;
          }
          while (v9 + v14 != v10);
          if (v14)
          {
            v66 = v5;
            v67 = v3;
            v65 = v14 >> 3;
            v69 = &v13[v14 & 0xFFFFFFFFFFFFFFF8];
            v16 = (void **)(v12 + 88);
            v17 = v13;
            while (1)
            {
              v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v17 + 32) + 200))(*(_QWORD *)(*(_QWORD *)v17 + 32));
              if ((v18 & 0xFF00000000) != 0)
                v19 = v18;
              else
                v19 = 0;
              (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v17 + 32))(&v70);
              (*(void (**)(void **__return_ptr))(*(_QWORD *)v70 + 40))(&__p);
              v20 = __p;
              v73[0] = v72;
              *(_QWORD *)((char *)v73 + 7) = *(_QWORD *)((char *)&v72 + 7);
              v21 = SHIBYTE(v72);
              v72 = 0uLL;
              __p = 0;
              v22 = (char *)*v16;
              v23 = (char **)(v12 + 88);
              v24 = (char **)(v12 + 88);
              if (*v16)
              {
                while (1)
                {
                  while (1)
                  {
                    v24 = (char **)v22;
                    v25 = *((_DWORD *)v22 + 8);
                    if (v19 >= v25)
                      break;
                    v22 = *v24;
                    v23 = v24;
                    if (!*v24)
                      goto LABEL_26;
                  }
                  if (v25 >= v19)
                    break;
                  v22 = v24[1];
                  if (!v22)
                  {
                    v23 = v24 + 1;
                    goto LABEL_26;
                  }
                }
                if (v21 < 0)
                {
                  operator delete(v20);
                  if ((SHIBYTE(v72) & 0x80000000) == 0)
                    goto LABEL_47;
                }
                else if ((SHIBYTE(v72) & 0x80000000) == 0)
                {
                  goto LABEL_47;
                }
              }
              else
              {
LABEL_26:
                v26 = (char *)operator new(0x40uLL);
                *((_DWORD *)v26 + 8) = v19;
                v27 = v73[0];
                *((_QWORD *)v26 + 5) = v20;
                *((_QWORD *)v26 + 6) = v27;
                *(_QWORD *)(v26 + 55) = *(_QWORD *)((char *)v73 + 7);
                v26[63] = v21;
                v73[0] = 0;
                *(_QWORD *)((char *)v73 + 7) = 0;
                *(_QWORD *)v26 = 0;
                *((_QWORD *)v26 + 1) = 0;
                *((_QWORD *)v26 + 2) = v24;
                *v23 = v26;
                v28 = **(_QWORD **)(v12 + 80);
                if (v28)
                {
                  *(_QWORD *)(v12 + 80) = v28;
                  v26 = *v23;
                }
                v29 = *v16;
                v30 = v26 == *v16;
                v26[24] = v30;
                if (!v30)
                {
                  do
                  {
                    v31 = *((_QWORD *)v26 + 2);
                    if (*(_BYTE *)(v31 + 24))
                      break;
                    v32 = *(_BYTE **)(v31 + 16);
                    v33 = *(_QWORD *)v32;
                    if (*(_QWORD *)v32 == v31)
                    {
                      v36 = *((_QWORD *)v32 + 1);
                      if (!v36 || (v37 = *(unsigned __int8 *)(v36 + 24), v34 = (_BYTE *)(v36 + 24), v37))
                      {
                        if (*(char **)v31 == v26)
                        {
                          *(_BYTE *)(v31 + 24) = 1;
                          v32[24] = 0;
                          v40 = *(_QWORD *)(v31 + 8);
                          *(_QWORD *)v32 = v40;
                          if (v40)
                            goto LABEL_43;
                        }
                        else
                        {
                          v38 = *(uint64_t **)(v31 + 8);
                          v39 = *v38;
                          *(_QWORD *)(v31 + 8) = *v38;
                          if (v39)
                          {
                            *(_QWORD *)(v39 + 16) = v31;
                            v32 = *(_BYTE **)(v31 + 16);
                          }
                          v38[2] = (uint64_t)v32;
                          *(_QWORD *)(*(_QWORD *)(v31 + 16) + 8 * (**(_QWORD **)(v31 + 16) != v31)) = v38;
                          *v38 = v31;
                          *(_QWORD *)(v31 + 16) = v38;
                          v32 = (_BYTE *)v38[2];
                          v31 = *(_QWORD *)v32;
                          *((_BYTE *)v38 + 24) = 1;
                          v32[24] = 0;
                          v40 = *(_QWORD *)(v31 + 8);
                          *(_QWORD *)v32 = v40;
                          if (v40)
LABEL_43:
                            *(_QWORD *)(v40 + 16) = v32;
                        }
                        *(_QWORD *)(v31 + 16) = *((_QWORD *)v32 + 2);
                        *(_QWORD *)(*((_QWORD *)v32 + 2) + 8 * (**((_QWORD **)v32 + 2) != (_QWORD)v32)) = v31;
                        *(_QWORD *)(v31 + 8) = v32;
LABEL_53:
                        *((_QWORD *)v32 + 2) = v31;
                        break;
                      }
                    }
                    else if (!v33 || (v35 = *(unsigned __int8 *)(v33 + 24), v34 = (_BYTE *)(v33 + 24), v35))
                    {
                      if (*(char **)v31 == v26)
                      {
                        v43 = *((_QWORD *)v26 + 1);
                        *(_QWORD *)v31 = v43;
                        if (v43)
                        {
                          *(_QWORD *)(v43 + 16) = v31;
                          v32 = *(_BYTE **)(v31 + 16);
                        }
                        *((_QWORD *)v26 + 2) = v32;
                        *(_QWORD *)(*(_QWORD *)(v31 + 16) + 8 * (**(_QWORD **)(v31 + 16) != v31)) = v26;
                        *((_QWORD *)v26 + 1) = v31;
                        *(_QWORD *)(v31 + 16) = v26;
                        v32 = (_BYTE *)*((_QWORD *)v26 + 2);
                        v26[24] = 1;
                        v32[24] = 0;
                        v31 = *((_QWORD *)v32 + 1);
                        v42 = *(char **)v31;
                        *((_QWORD *)v32 + 1) = *(_QWORD *)v31;
                        if (v42)
LABEL_51:
                          *((_QWORD *)v42 + 2) = v32;
                      }
                      else
                      {
                        *(_BYTE *)(v31 + 24) = 1;
                        v32[24] = 0;
                        v31 = *((_QWORD *)v32 + 1);
                        v42 = *(char **)v31;
                        *((_QWORD *)v32 + 1) = *(_QWORD *)v31;
                        if (v42)
                          goto LABEL_51;
                      }
                      *(_QWORD *)(v31 + 16) = *((_QWORD *)v32 + 2);
                      *(_QWORD *)(*((_QWORD *)v32 + 2) + 8 * (**((_QWORD **)v32 + 2) != (_QWORD)v32)) = v31;
                      *(_QWORD *)v31 = v32;
                      goto LABEL_53;
                    }
                    *(_BYTE *)(v31 + 24) = 1;
                    v26 = v32;
                    v32[24] = v32 == v29;
                    *v34 = 1;
                  }
                  while (v32 != v29);
                }
                ++*(_QWORD *)(v12 + 96);
                if ((SHIBYTE(v72) & 0x80000000) == 0)
                {
LABEL_47:
                  v41 = v70;
                  if (!v70)
                    goto LABEL_15;
LABEL_56:
                  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
                  goto LABEL_15;
                }
              }
              operator delete(__p);
              v41 = v70;
              if (v70)
                goto LABEL_56;
LABEL_15:
              v17 += 8;
              if (v17 == v69)
              {
                v4 = v64;
                v44 = 8 * v65;
                v5 = v66;
                v3 = v67;
                do
                {
                  v45 = *(_QWORD *)&v13[v44 - 8];
                  if (v45)
                    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
                  v44 -= 8;
                }
                while (v44);
                break;
              }
            }
          }
          operator delete(v13);
        }
      }
      v3 += 8;
    }
    while (v3 != v4);
  }
  v46 = *((_QWORD *)v68 + 1);
  v47 = *(_QWORD **)v46;
  if (*(_QWORD *)v46 != *(_QWORD *)(v46 + 8))
  {
    while (1)
    {
      while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v47 + 16))(*v47) & 1) != 0)
      {
        if (++v47 == *(_QWORD **)(*((_QWORD *)v68 + 1) + 8))
          goto LABEL_86;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v4 = v4 & 0xFFFFFFFF00000000 | 0x279B;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v48, v49, v50, v51, v52, v53, v54, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/legacy_stats_collector.cc");
      }
      v55 = *((_QWORD *)v68 + 1);
      v56 = *(_QWORD **)(v55 + 8);
      if (v56 == v47)
        break;
      v57 = v47 + 1;
      if (v47 + 1 == v56)
      {
        v58 = v47;
      }
      else
      {
        do
        {
          v59 = *(v57 - 1);
          *(v57 - 1) = *v57;
          *v57 = 0;
          if (v59)
            (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
          ++v57;
        }
        while (v57 != v56);
        v56 = *(_QWORD **)(v55 + 8);
        v58 = v57 - 1;
      }
      while (v56 != v58)
      {
        v61 = *--v56;
        v60 = v61;
        *v56 = 0;
        if (v61)
          (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
      }
      *(_QWORD *)(v55 + 8) = v58;
      if (v47 == *(_QWORD **)(*((_QWORD *)v68 + 1) + 8))
        goto LABEL_86;
    }
LABEL_87:
    __break(1u);
LABEL_88:
    abort();
  }
LABEL_86:
  v63[217] = v62;
}

BOOL webrtc::StatsReport::IdBase::Equals(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8);
}

webrtc::StatsReport::Value *webrtc::StatsReport::AddString(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  const void **v14;
  size_t v15;
  const std::string::value_type *v16;
  const void *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  const std::string::value_type *v21;
  size_t v22;
  size_t v23;
  webrtc::StatsReport::Value *result;
  BOOL v25;
  size_t v26;
  BOOL v27;
  const void *v28;
  size_t v29;
  size_t v30;
  BOOL v31;
  uint64_t v32;
  std::string *v33;
  std::string *v34;
  _DWORD *v35;
  _QWORD *v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;

  v7 = (_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    goto LABEL_51;
  v8 = a1 + 24;
  do
  {
    v9 = *(_DWORD *)(v6 + 32);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v6;
    else
      v11 = (uint64_t *)(v6 + 8);
    if (!v10)
      v8 = v6;
    v6 = *v11;
  }
  while (*v11);
  if ((_QWORD *)v8 == v7)
    goto LABEL_51;
  if (*(_DWORD *)(v8 + 32) > a2)
    goto LABEL_51;
  v12 = *(_QWORD *)(v8 + 40);
  if (!v12)
    goto LABEL_51;
  v13 = *(_DWORD *)(v12 + 12);
  if (v13 == 4)
  {
    v17 = *(const void **)(v12 + 16);
    if (v17)
    {
      v18 = strlen(*(const char **)(v12 + 16));
      v19 = v18;
      if (*(char *)(a3 + 23) < 0)
      {
        if (v18 == -1)
          goto LABEL_68;
        v21 = *(const std::string::value_type **)a3;
        v20 = *(_QWORD *)(a3 + 8);
      }
      else
      {
        if (v18 == -1)
          goto LABEL_68;
        v20 = *(unsigned __int8 *)(a3 + 23);
        v21 = (const std::string::value_type *)a3;
      }
      if (v20 >= v19)
        v26 = v19;
      else
        v26 = v20;
      result = (webrtc::StatsReport::Value *)memcmp(v21, v17, v26);
      if ((_DWORD)result)
        v27 = 0;
      else
        v27 = v20 == v19;
      if (v27)
        return result;
LABEL_51:
      v32 = operator new();
      *(_DWORD *)v32 = a2;
      *(_DWORD *)(v32 + 12) = 3;
      v33 = (std::string *)operator new();
      v34 = v33;
      if (*(char *)(a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
        *(_QWORD *)(v32 + 16) = v34;
        *(_DWORD *)(v32 + 8) = 1;
        v35 = *(_DWORD **)(a1 + 24);
        v36 = v7;
        if (v35)
        {
          while (1)
          {
LABEL_57:
            while (1)
            {
              v36 = v35;
              v37 = v35[8];
              if (v37 <= a2)
                break;
              v35 = (_DWORD *)*v36;
              v7 = v36;
              if (!*v36)
                goto LABEL_61;
            }
            if (v37 >= a2)
              goto LABEL_64;
            v35 = (_DWORD *)v36[1];
            if (!v35)
            {
              v7 = v36 + 1;
              break;
            }
          }
        }
      }
      else
      {
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
        v33->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(v32 + 16) = v33;
        *(_DWORD *)(v32 + 8) = 1;
        v35 = *(_DWORD **)(a1 + 24);
        v36 = v7;
        if (v35)
          goto LABEL_57;
      }
LABEL_61:
      v38 = v36;
      v36 = operator new(0x30uLL);
      *((_DWORD *)v36 + 8) = a2;
      v36[5] = 0;
      *v36 = 0;
      v36[1] = 0;
      v36[2] = v38;
      *v7 = v36;
      v39 = **(_QWORD **)(a1 + 16);
      v40 = v36;
      if (v39)
      {
        *(_QWORD *)(a1 + 16) = v39;
        v40 = (uint64_t *)*v7;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 24), v40);
      ++*(_QWORD *)(a1 + 32);
LABEL_64:
      result = (webrtc::StatsReport::Value *)v36[5];
      v36[5] = v32;
      if (result)
        return (webrtc::StatsReport::Value *)webrtc::StatsReport::Value::Release(result);
      return result;
    }
LABEL_67:
    __break(1u);
LABEL_68:
    abort();
  }
  if (v13 != 3)
    goto LABEL_51;
  v14 = *(const void ***)(v12 + 16);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    v15 = *(unsigned __int8 *)(a3 + 23);
    v16 = (const std::string::value_type *)a3;
    goto LABEL_23;
  }
  v15 = *(_QWORD *)(a3 + 8);
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_67;
  v16 = *(const std::string::value_type **)a3;
  if (v15)
  {
    if (!v16)
      goto LABEL_67;
  }
LABEL_23:
  if (*((char *)v14 + 23) < 0)
  {
    v28 = *v14;
    v29 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8);
    if (v15 >= v29)
      v30 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8);
    else
      v30 = v15;
    result = (webrtc::StatsReport::Value *)memcmp(v28, v16, v30);
    if ((_DWORD)result)
      v31 = 0;
    else
      v31 = v15 == v29;
    if (v31)
      return result;
    goto LABEL_51;
  }
  v22 = *((unsigned __int8 *)v14 + 23);
  if (v15 >= v22)
    v23 = *((unsigned __int8 *)v14 + 23);
  else
    v23 = v15;
  result = (webrtc::StatsReport::Value *)memcmp(v14, v16, v23);
  if ((_DWORD)result)
    v25 = 0;
  else
    v25 = v15 == v22;
  if (!v25)
    goto LABEL_51;
  return result;
}

uint64_t webrtc::StatsReport::AddString(uint64_t result, int a2, char *__s)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  size_t v15;
  size_t v16;
  size_t v17;
  unsigned __int8 *v18;
  size_t v19;
  BOOL v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;

  v5 = result;
  v7 = (_QWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 24);
  if (v6)
  {
    v8 = result + 24;
    do
    {
      v9 = *(_DWORD *)(v6 + 32);
      v10 = v9 < a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v6;
      else
        v11 = (uint64_t *)(v6 + 8);
      if (!v10)
        v8 = v6;
      v6 = *v11;
    }
    while (*v11);
    if ((_QWORD *)v8 != v7 && *(_DWORD *)(v8 + 32) <= a2)
    {
      v12 = *(_QWORD *)(v8 + 40);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 12);
        if (v13 == 4)
        {
          if (*(char **)(v12 + 16) == __s)
            return result;
        }
        else if (v13 == 3)
        {
          if (__s)
          {
            v14 = *(unsigned __int8 **)(v12 + 16);
            v15 = strlen(__s);
            v16 = v15;
            if ((char)v14[23] < 0)
            {
              if (v15 != -1)
              {
                v18 = v14;
                v14 = *(unsigned __int8 **)v14;
                v17 = *((_QWORD *)v18 + 1);
LABEL_22:
                if (v17 >= v15)
                  v19 = v15;
                else
                  v19 = v17;
                result = memcmp(v14, __s, v19);
                if ((_DWORD)result)
                  v20 = 0;
                else
                  v20 = v17 == v16;
                if (v20)
                  return result;
                goto LABEL_29;
              }
            }
            else if (v15 != -1)
            {
              v17 = v14[23];
              goto LABEL_22;
            }
          }
          else
          {
            __break(1u);
          }
          abort();
        }
      }
    }
  }
LABEL_29:
  v21 = operator new();
  *(_DWORD *)v21 = a2;
  *(_QWORD *)(v21 + 16) = __s;
  *(_QWORD *)(v21 + 8) = 0x400000001;
  v22 = *(_DWORD **)(v5 + 24);
  v23 = v7;
  if (v22)
  {
    while (1)
    {
      while (1)
      {
        v23 = v22;
        v24 = v22[8];
        if (v24 <= a2)
          break;
        v22 = (_DWORD *)*v23;
        v7 = v23;
        if (!*v23)
          goto LABEL_36;
      }
      if (v24 >= a2)
        break;
      v22 = (_DWORD *)v23[1];
      if (!v22)
      {
        v7 = v23 + 1;
        goto LABEL_36;
      }
    }
  }
  else
  {
LABEL_36:
    v25 = v23;
    v23 = operator new(0x30uLL);
    *((_DWORD *)v23 + 8) = a2;
    v23[5] = 0;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = v25;
    *v7 = v23;
    v26 = **(_QWORD **)(v5 + 16);
    v27 = v23;
    if (v26)
    {
      *(_QWORD *)(v5 + 16) = v26;
      v27 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 24), v27);
    ++*(_QWORD *)(v5 + 32);
  }
  result = v23[5];
  v23[5] = v21;
  if (result)
    return webrtc::StatsReport::Value::Release((webrtc::StatsReport::Value *)result);
  return result;
}

_QWORD *webrtc::StatsReport::AddInt64(_QWORD *result, int a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;

  v5 = result;
  v7 = result + 3;
  v6 = result[3];
  if (v6)
  {
    v8 = result + 3;
    do
    {
      v9 = *(_DWORD *)(v6 + 32);
      v10 = v9 < a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v6;
      else
        v11 = (uint64_t *)(v6 + 8);
      if (!v10)
        v8 = (_QWORD *)v6;
      v6 = *v11;
    }
    while (*v11);
    if (v8 != v7 && *((_DWORD *)v8 + 8) <= a2)
    {
      v12 = v8[5];
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 12);
        if (v13 == 1)
        {
          if (*(_QWORD *)(v12 + 16) == a3)
            return result;
        }
        else if (!v13 && *(_DWORD *)(v12 + 16) == (_DWORD)a3)
        {
          return result;
        }
      }
    }
  }
  v14 = operator new();
  *(_DWORD *)v14 = a2;
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 8) = 0x100000001;
  v15 = (_DWORD *)v5[3];
  v16 = v7;
  if (v15)
  {
    while (1)
    {
      while (1)
      {
        v16 = v15;
        v17 = v15[8];
        if (v17 <= a2)
          break;
        v15 = (_DWORD *)*v16;
        v7 = v16;
        if (!*v16)
          goto LABEL_24;
      }
      if (v17 >= a2)
        break;
      v15 = (_DWORD *)v16[1];
      if (!v15)
      {
        v7 = v16 + 1;
        goto LABEL_24;
      }
    }
  }
  else
  {
LABEL_24:
    v18 = v16;
    v16 = operator new(0x30uLL);
    *((_DWORD *)v16 + 8) = a2;
    v16[5] = 0;
    *v16 = 0;
    v16[1] = 0;
    v16[2] = v18;
    *v7 = v16;
    v19 = *(_QWORD *)v5[2];
    v20 = v16;
    if (v19)
    {
      v5[2] = v19;
      v20 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[3], v20);
    ++v5[4];
  }
  result = (_QWORD *)v16[5];
  v16[5] = v14;
  if (result)
    return (_QWORD *)webrtc::StatsReport::Value::Release((webrtc::StatsReport::Value *)result);
  return result;
}

_QWORD *webrtc::StatsReport::AddInt(_QWORD *result, int a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;

  v5 = result;
  v7 = result + 3;
  v6 = result[3];
  if (v6)
  {
    v8 = result + 3;
    do
    {
      v9 = *(_DWORD *)(v6 + 32);
      v10 = v9 < a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v6;
      else
        v11 = (uint64_t *)(v6 + 8);
      if (!v10)
        v8 = (_QWORD *)v6;
      v6 = *v11;
    }
    while (*v11);
    if (v8 != v7 && *((_DWORD *)v8 + 8) <= a2)
    {
      v12 = v8[5];
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 12);
        if (v13 == 1)
        {
          if (*(_QWORD *)(v12 + 16) == a3)
            return result;
        }
        else if (!v13 && *(_DWORD *)(v12 + 16) == a3)
        {
          return result;
        }
      }
    }
  }
  v14 = operator new();
  *(_DWORD *)v14 = a2;
  *(_DWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 8) = 1;
  v15 = (_DWORD *)v5[3];
  v16 = v7;
  if (v15)
  {
    while (1)
    {
      while (1)
      {
        v16 = v15;
        v17 = v15[8];
        if (v17 <= a2)
          break;
        v15 = (_DWORD *)*v16;
        v7 = v16;
        if (!*v16)
          goto LABEL_24;
      }
      if (v17 >= a2)
        break;
      v15 = (_DWORD *)v16[1];
      if (!v15)
      {
        v7 = v16 + 1;
        goto LABEL_24;
      }
    }
  }
  else
  {
LABEL_24:
    v18 = v16;
    v16 = operator new(0x30uLL);
    *((_DWORD *)v16 + 8) = a2;
    v16[5] = 0;
    *v16 = 0;
    v16[1] = 0;
    v16[2] = v18;
    *v7 = v16;
    v19 = *(_QWORD *)v5[2];
    v20 = v16;
    if (v19)
    {
      v5[2] = v19;
      v20 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[3], v20);
    ++v5[4];
  }
  result = (_QWORD *)v16[5];
  v16[5] = v14;
  if (result)
    return (_QWORD *)webrtc::StatsReport::Value::Release((webrtc::StatsReport::Value *)result);
  return result;
}

_QWORD *webrtc::StatsReport::AddFloat(_QWORD *result, int a2, float a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;

  v5 = result;
  v7 = result + 3;
  v6 = result[3];
  if (!v6)
    goto LABEL_14;
  v8 = result + 3;
  do
  {
    v9 = *(_DWORD *)(v6 + 32);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v6;
    else
      v11 = (uint64_t *)(v6 + 8);
    if (!v10)
      v8 = (_QWORD *)v6;
    v6 = *v11;
  }
  while (*v11);
  if (v8 == v7
    || *((_DWORD *)v8 + 8) > a2
    || (v12 = v8[5]) == 0
    || *(_DWORD *)(v12 + 12) != 2
    || *(float *)(v12 + 16) != a3)
  {
LABEL_14:
    v13 = operator new();
    *(_DWORD *)v13 = a2;
    *(float *)(v13 + 16) = a3;
    *(_QWORD *)(v13 + 8) = 0x200000001;
    v14 = (_DWORD *)v5[3];
    v15 = v7;
    if (v14)
    {
      while (1)
      {
        while (1)
        {
          v15 = v14;
          v16 = v14[8];
          if (v16 <= a2)
            break;
          v14 = (_DWORD *)*v15;
          v7 = v15;
          if (!*v15)
            goto LABEL_21;
        }
        if (v16 >= a2)
          break;
        v14 = (_DWORD *)v15[1];
        if (!v14)
        {
          v7 = v15 + 1;
          goto LABEL_21;
        }
      }
    }
    else
    {
LABEL_21:
      v17 = v15;
      v15 = operator new(0x30uLL);
      *((_DWORD *)v15 + 8) = a2;
      v15[5] = 0;
      *v15 = 0;
      v15[1] = 0;
      v15[2] = v17;
      *v7 = v15;
      v18 = *(_QWORD *)v5[2];
      v19 = v15;
      if (v18)
      {
        v5[2] = v18;
        v19 = (uint64_t *)*v7;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[3], v19);
      ++v5[4];
    }
    result = (_QWORD *)v15[5];
    v15[5] = v13;
    if (result)
      return (_QWORD *)webrtc::StatsReport::Value::Release((webrtc::StatsReport::Value *)result);
  }
  return result;
}

_QWORD *webrtc::StatsReport::AddBoolean(_QWORD *result, int a2, int a3)
{
  char v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = a3;
  v5 = result;
  v7 = result + 3;
  v6 = result[3];
  if (!v6)
    goto LABEL_14;
  v8 = result + 3;
  do
  {
    v9 = *(_DWORD *)(v6 + 32);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v6;
    else
      v11 = (uint64_t *)(v6 + 8);
    if (!v10)
      v8 = (_QWORD *)v6;
    v6 = *v11;
  }
  while (*v11);
  if (v8 == v7
    || *((_DWORD *)v8 + 8) > a2
    || (v12 = v8[5]) == 0
    || *(_DWORD *)(v12 + 12) != 5
    || *(unsigned __int8 *)(v12 + 16) != a3)
  {
LABEL_14:
    v13 = operator new();
    *(_DWORD *)v13 = a2;
    *(_BYTE *)(v13 + 16) = v3;
    *(_QWORD *)(v13 + 8) = 0x500000001;
    v14 = (_DWORD *)v5[3];
    v15 = v7;
    if (v14)
    {
      while (1)
      {
        while (1)
        {
          v15 = v14;
          v16 = v14[8];
          if (v16 <= a2)
            break;
          v14 = (_DWORD *)*v15;
          v7 = v15;
          if (!*v15)
            goto LABEL_21;
        }
        if (v16 >= a2)
          break;
        v14 = (_DWORD *)v15[1];
        if (!v14)
        {
          v7 = v15 + 1;
          goto LABEL_21;
        }
      }
    }
    else
    {
LABEL_21:
      v17 = v15;
      v15 = operator new(0x30uLL);
      *((_DWORD *)v15 + 8) = a2;
      v15[5] = 0;
      *v15 = 0;
      v15[1] = 0;
      v15[2] = v17;
      *v7 = v15;
      v18 = *(_QWORD *)v5[2];
      v19 = v15;
      if (v18)
      {
        v5[2] = v18;
        v19 = (uint64_t *)*v7;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[3], v19);
      ++v5[4];
    }
    result = (_QWORD *)v15[5];
    v15[5] = v13;
    if (result)
      return (_QWORD *)webrtc::StatsReport::Value::Release((webrtc::StatsReport::Value *)result);
  }
  return result;
}

uint64_t webrtc::StatsReport::AddId(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  void (***v16)(_QWORD);
  _DWORD *v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;

  v7 = (_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    goto LABEL_14;
  v8 = a1 + 24;
  do
  {
    v9 = *(_DWORD *)(v6 + 32);
    v10 = v9 < a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v6;
    else
      v11 = (uint64_t *)(v6 + 8);
    if (!v10)
      v8 = v6;
    v6 = *v11;
  }
  while (*v11);
  if ((_QWORD *)v8 == v7
    || *(_DWORD *)(v8 + 32) > a2
    || (v12 = *(_QWORD *)(v8 + 40)) == 0
    || *(_DWORD *)(v12 + 12) != 6
    || (result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v12 + 16) + 40))(**(_QWORD **)(v12 + 16), *a3), (result & 1) == 0))
  {
LABEL_14:
    v14 = operator new();
    *(_DWORD *)v14 = a2;
    *(_DWORD *)(v14 + 12) = 6;
    v15 = (_QWORD *)operator new();
    v16 = (void (***)(_QWORD))*a3;
    *v15 = *a3;
    if (v16)
      (**v16)(v16);
    *(_QWORD *)(v14 + 16) = v15;
    *(_DWORD *)(v14 + 8) = 1;
    v17 = *(_DWORD **)(a1 + 24);
    v18 = v7;
    if (v17)
    {
      while (1)
      {
        while (1)
        {
          v18 = v17;
          v19 = v17[8];
          if (v19 <= a2)
            break;
          v17 = (_DWORD *)*v18;
          v7 = v18;
          if (!*v18)
            goto LABEL_23;
        }
        if (v19 >= a2)
          break;
        v17 = (_DWORD *)v18[1];
        if (!v17)
        {
          v7 = v18 + 1;
          goto LABEL_23;
        }
      }
    }
    else
    {
LABEL_23:
      v20 = v18;
      v18 = operator new(0x30uLL);
      *((_DWORD *)v18 + 8) = a2;
      v18[5] = 0;
      *v18 = 0;
      v18[1] = 0;
      v18[2] = v20;
      *v7 = v18;
      v21 = **(_QWORD **)(a1 + 16);
      v22 = v18;
      if (v21)
      {
        *(_QWORD *)(a1 + 16) = v21;
        v22 = (uint64_t *)*v7;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 24), v22);
      ++*(_QWORD *)(a1 + 32);
    }
    result = v18[5];
    v18[5] = v14;
    if (result)
      return webrtc::StatsReport::Value::Release((webrtc::StatsReport::Value *)result);
  }
  return result;
}

_QWORD *webrtc::StatsCollection::ReplaceOrAddNew(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  _QWORD *v10;
  void (***v11)(_QWORD);
  _QWORD *v12;
  uint64_t v13;

  v4 = a1[1];
  if ((uint64_t *)v4 != a1)
  {
    while (((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v4 + 16) + 40))(**(_QWORD **)(v4 + 16), *a2) & 1) == 0)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if ((uint64_t *)v4 == a1)
        goto LABEL_12;
    }
    if ((uint64_t *)v4 != a1)
    {
      v5 = (_QWORD *)operator new();
      v6 = *(_QWORD *)(v4 + 16);
      v7 = *(void (****)(_QWORD))v6;
      *v5 = *(_QWORD *)v6;
      if (v7)
      {
        (**v7)(v7);
        v6 = *(_QWORD *)(v4 + 16);
        v5[3] = 0;
        v5[4] = 0;
        v5[1] = 0;
        v5[2] = v5 + 3;
        if (!v6)
        {
LABEL_11:
          *(_QWORD *)(v4 + 16) = v5;
          return v5;
        }
        std::__tree<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::__map_value_compare<webrtc::StatsReport::StatsValueName,std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::less<webrtc::StatsReport::StatsValueName>,true>,std::allocator<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>>>::destroy(v6 + 16, *(_QWORD **)(v6 + 24));
        v8 = *(void (****)(_QWORD))v6;
        if (!*(_QWORD *)v6)
        {
LABEL_10:
          MEMORY[0x20BD0ADEC](v6, 0x1020C40FF594A20);
          goto LABEL_11;
        }
      }
      else
      {
        v5[3] = 0;
        v5[4] = 0;
        v5[1] = 0;
        v5[2] = v5 + 3;
        std::__tree<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::__map_value_compare<webrtc::StatsReport::StatsValueName,std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::less<webrtc::StatsReport::StatsValueName>,true>,std::allocator<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>>>::destroy(v6 + 16, *(_QWORD **)(v6 + 24));
        v8 = *(void (****)(_QWORD))v6;
        if (!*(_QWORD *)v6)
          goto LABEL_10;
      }
      (*v8)[1](v8);
      goto LABEL_10;
    }
  }
LABEL_12:
  v10 = (_QWORD *)operator new();
  v11 = (void (***)(_QWORD))*a2;
  *v10 = *a2;
  if (v11)
    (**v11)(v11);
  v10[4] = 0;
  v10[3] = 0;
  v10[1] = 0;
  v10[2] = v10 + 3;
  v12 = operator new(0x18uLL);
  v12[1] = a1;
  v12[2] = v10;
  v13 = *a1;
  *v12 = *a1;
  *(_QWORD *)(v13 + 8) = v12;
  *a1 = (uint64_t)v12;
  ++a1[2];
  return v10;
}

uint64_t webrtc::StatsCollection::MergeCollection(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v4 = (uint64_t *)result;
    v5 = *(_QWORD **)(v2 + 16);
    v6 = *(_QWORD *)(result + 8);
    if (v6 != result)
      goto LABEL_5;
LABEL_3:
    while (1)
    {
      result = (uint64_t)operator new(0x18uLL);
      *(_QWORD *)(result + 8) = v4;
      *(_QWORD *)(result + 16) = v5;
      v7 = *v4;
      *(_QWORD *)result = *v4;
      *(_QWORD *)(v7 + 8) = result;
      *v4 = result;
      ++v4[2];
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == a2)
        break;
      while (1)
      {
        v5 = *(_QWORD **)(v2 + 16);
        v6 = v4[1];
        if ((uint64_t *)v6 == v4)
          break;
LABEL_5:
        while (1)
        {
          result = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(v6 + 16) + 40))(**(_QWORD **)(v6 + 16), *v5);
          if ((result & 1) != 0)
            break;
          v6 = *(_QWORD *)(v6 + 8);
          if ((uint64_t *)v6 == v4)
            goto LABEL_3;
        }
        if ((uint64_t *)v6 == v4)
          goto LABEL_3;
        v8 = *(_QWORD **)(v6 + 16);
        if (v8)
        {
          std::__tree<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::__map_value_compare<webrtc::StatsReport::StatsValueName,std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::less<webrtc::StatsReport::StatsValueName>,true>,std::allocator<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>>>::destroy((uint64_t)(v8 + 2), (_QWORD *)v8[3]);
          if (*v8)
            (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 8))(*v8);
          result = MEMORY[0x20BD0ADEC](v8, 0x1020C40FF594A20);
        }
        *(_QWORD *)(v6 + 16) = v5;
        v2 = *(_QWORD *)(v2 + 8);
        if (v2 == a2)
          return result;
      }
    }
  }
  return result;
}

void std::__tree<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::__map_value_compare<webrtc::StatsReport::StatsValueName,std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::less<webrtc::StatsReport::StatsValueName>,true>,std::allocator<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  webrtc::StatsReport::Value *v4;

  if (a2)
  {
    std::__tree<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::__map_value_compare<webrtc::StatsReport::StatsValueName,std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::less<webrtc::StatsReport::StatsValueName>,true>,std::allocator<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::__map_value_compare<webrtc::StatsReport::StatsValueName,std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>,std::less<webrtc::StatsReport::StatsValueName>,true>,std::allocator<std::__value_type<webrtc::StatsReport::StatsValueName,webrtc::scoped_refptr<webrtc::StatsReport::Value>>>>::destroy(a1, a2[1]);
    v4 = (webrtc::StatsReport::Value *)a2[5];
    if (v4)
      webrtc::StatsReport::Value::Release(v4);
    operator delete(a2);
  }
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::BandwidthEstimationId>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 12);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::BandwidthEstimationId>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 3;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::`anonymous namespace'::BandwidthEstimationId>::~RefCountedObject()
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::`anonymous namespace'::BandwidthEstimationId::ToString(char *a1@<X8>)
{
  a1[23] = 11;
  if (a1 <= "bweforvideo" && a1 + 11 > "bweforvideo")
    __break(1u);
  else
    strcpy(a1, "bweforvideo");
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::BandwidthEstimationId>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 12));
  return v1 == 1;
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::TypedId>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 40);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::TypedId>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 10;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::TypedId>::~RefCountedObject(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = &unk_24C0B5B70;
  if (*(char *)(result + 39) < 0)
  {
    operator delete(*(void **)(result + 16));
    return v1;
  }
  return result;
}

void rtc::RefCountedObject<webrtc::`anonymous namespace'::TypedId>::~RefCountedObject(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0B5B70;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::`anonymous namespace'::TypedId::ToString(webrtc::_anonymous_namespace_::TypedId *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  const char *v5;
  size_t v6;
  std::string::size_type v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  BOOL v16;
  std::string::size_type v17;
  std::string::size_type size;
  std::string *v19;
  char *v20;
  std::string::size_type v21;
  std::string v22;
  std::string v23;

  v3 = *((int *)this + 2);
  if (v3 >= 0xC)
    goto LABEL_38;
  v5 = off_24C0B5D48[v3];
  v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_39;
  v7 = v6;
  if (v6 > 0x16)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (char *)operator new(v9 + 1);
    v22.__r_.__value_.__l.__size_ = v7;
    v22.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  }
  else
  {
    *((_BYTE *)&v22.__r_.__value_.__s + 23) = v6;
    v8 = (char *)&v22;
  }
  v11 = &v8[v7];
  if (v8 <= v5 && v11 > v5)
    goto LABEL_38;
  if (v7)
    memcpy(v8, v5, v7);
  *v11 = 0;
  std::string::push_back(&v22, 95);
  v23 = v22;
  memset(&v22, 0, sizeof(v22));
  v13 = *((char *)this + 39);
  if (v13 < 0)
  {
    v14 = (const std::string::value_type *)*((_QWORD *)this + 2);
    v15 = *((_QWORD *)this + 3);
    v16 = v15 == 0;
    if (v14 || !v15)
      goto LABEL_18;
LABEL_38:
    __break(1u);
LABEL_39:
    abort();
  }
  v14 = (char *)this + 16;
  v15 = *((unsigned __int8 *)this + 39);
  v16 = v13 == 0;
LABEL_18:
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = 22;
  else
    v17 = (v23.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  if (v17 - size < v15)
  {
    std::string::__grow_by_and_replace(&v23, v17, size + v15 - v17, size, size, 0, v15, v14);
    goto LABEL_36;
  }
  if (!v16)
  {
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v23;
    else
      v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
    v20 = (char *)v19 + size;
    if ((char *)v19 + size > v14 || &v20[v15] <= v14)
    {
      memmove(v20, v14, v15);
      v21 = size + v15;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        v23.__r_.__value_.__l.__size_ = size + v15;
      else
        *((_BYTE *)&v23.__r_.__value_.__s + 23) = v21 & 0x7F;
      v19->__r_.__value_.__s.__data_[v21] = 0;
      goto LABEL_36;
    }
    goto LABEL_38;
  }
LABEL_36:
  *a2 = v23;
  memset(&v23, 0, sizeof(v23));
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

uint64_t webrtc::`anonymous namespace'::TypedId::Equals(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const void **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  uint64_t result;

  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 8))
    return 0;
  v2 = *(unsigned __int8 *)(a2 + 39);
  v3 = *(_QWORD *)(a2 + 24);
  if ((v2 & 0x80u) == 0)
    v4 = *(unsigned __int8 *)(a2 + 39);
  else
    v4 = *(_QWORD *)(a2 + 24);
  v5 = *(unsigned __int8 *)(a1 + 39);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 24);
  if (v4 != v5)
    return 0;
  v7 = (const void **)(a2 + 16);
  v10 = *(unsigned __int8 **)(a1 + 16);
  v8 = (unsigned __int8 *)(a1 + 16);
  v9 = v10;
  if (v6 >= 0)
    v11 = v8;
  else
    v11 = v9;
  if ((v2 & 0x80) != 0)
    return memcmp(*v7, v11, v3) == 0;
  if (!(_DWORD)v2)
    return 1;
  v12 = v2 - 1;
  do
  {
    v14 = *(unsigned __int8 *)v7;
    v7 = (const void **)((char *)v7 + 1);
    v13 = v14;
    v16 = *v11++;
    v15 = v16;
    v18 = v12-- != 0;
    result = v13 == v15;
  }
  while (v13 == v15 && v18);
  return result;
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::TypedId>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 40));
  return v1 == 1;
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::TypedIntId>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 16);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::TypedIntId>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 4;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::`anonymous namespace'::TypedIntId>::~RefCountedObject()
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::`anonymous namespace'::TypedIntId::ToString(webrtc::_anonymous_namespace_::TypedIntId *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  const char *v5;
  size_t v6;
  std::string::size_type v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int v13;
  size_t v14;
  void **p_src;
  _BYTE *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  BOOL v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string::size_type size;
  std::string *v25;
  char *v26;
  std::string::size_type v27;
  void **__src;
  size_t v29;
  unint64_t v30;
  std::string v31;
  std::string v32;
  char __str[32];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = *((int *)this + 2);
  if (v3 >= 0xC)
    goto LABEL_53;
  v5 = off_24C0B5D48[v3];
  v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_54;
  v7 = v6;
  if (v6 > 0x16)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (char *)operator new(v9 + 1);
    v31.__r_.__value_.__l.__size_ = v7;
    v31.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  }
  else
  {
    *((_BYTE *)&v31.__r_.__value_.__s + 23) = v6;
    v8 = (char *)&v31;
  }
  v11 = &v8[v7];
  if (v8 <= v5 && v11 > v5)
    goto LABEL_53;
  if (v7)
    memcpy(v8, v5, v7);
  *v11 = 0;
  std::string::push_back(&v31, 95);
  v32 = v31;
  memset(&v31, 0, sizeof(v31));
  v13 = snprintf(__str, 0x20uLL, "%d", *((_DWORD *)this + 3));
  if (v13 < 0)
LABEL_54:
    abort();
  v14 = v13;
  if (v13 > 0x16)
  {
    v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v18 = v13 | 7;
    v19 = v18 + 1;
    p_src = (void **)operator new(v18 + 1);
    v29 = v14;
    v30 = v19 | 0x8000000000000000;
    __src = p_src;
    v16 = (char *)p_src + v14;
    v17 = (char *)p_src + v14 > __str;
    if (p_src > (void **)__str)
      goto LABEL_22;
  }
  else
  {
    HIBYTE(v30) = v13;
    p_src = (void **)&__src;
    v16 = (char *)&__src + v14;
    v17 = (char *)&__src + v14 > __str;
    if (&__src > (void ***)__str)
      goto LABEL_22;
  }
  if (v17)
    goto LABEL_53;
LABEL_22:
  if ((_DWORD)v14)
    memcpy(p_src, __str, v14);
  *v16 = 0;
  if (SHIBYTE(v30) < 0)
  {
    v22 = (const std::string::value_type *)__src;
    v20 = v29;
    v21 = v29 == 0;
    if (__src || !v29)
      goto LABEL_28;
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v20 = HIBYTE(v30);
  v21 = HIBYTE(v30) == 0;
  v22 = (const std::string::value_type *)&__src;
LABEL_28:
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = 22;
  else
    v23 = (v32.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  if (v23 - size < v20)
  {
    std::string::__grow_by_and_replace(&v32, v23, size + v20 - v23, size, size, 0, v20, v22);
    goto LABEL_46;
  }
  if (v21)
    goto LABEL_46;
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v32;
  else
    v25 = (std::string *)v32.__r_.__value_.__r.__words[0];
  v26 = (char *)v25 + size;
  if ((char *)v25 + size <= v22 && &v26[v20] > v22)
    goto LABEL_53;
  memmove(v26, v22, v20);
  v27 = size + v20;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    v32.__r_.__value_.__l.__size_ = size + v20;
  else
    *((_BYTE *)&v32.__r_.__value_.__s + 23) = v27 & 0x7F;
  v25->__r_.__value_.__s.__data_[v27] = 0;
LABEL_46:
  *a2 = v32;
  memset(&v32, 0, sizeof(v32));
  if ((SHIBYTE(v30) & 0x80000000) == 0
    || (operator delete(__src), (SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0))
  {
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_49;
  }
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
LABEL_49:
    operator delete(v31.__r_.__value_.__l.__data_);
}

BOOL webrtc::`anonymous namespace'::TypedIntId::Equals(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8) && *(_DWORD *)(a2 + 12) == *(_DWORD *)(a1 + 12);
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::TypedIntId>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 16));
  return v1 == 1;
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::IdWithDirection>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 44);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::IdWithDirection>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 11;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::IdWithDirection>::~RefCountedObject(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = &unk_24C0B5B70;
  if (*(char *)(result + 39) < 0)
  {
    operator delete(*(void **)(result + 16));
    return v1;
  }
  return result;
}

void rtc::RefCountedObject<webrtc::`anonymous namespace'::IdWithDirection>::~RefCountedObject(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0B5B70;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::`anonymous namespace'::IdWithDirection::ToString(webrtc::_anonymous_namespace_::IdWithDirection *this@<X0>, std::string *a2@<X8>)
{
  const char *v4;
  int v5;
  std::string::size_type v6;
  std::string::size_type size;
  std::string *v8;
  std::string::size_type v10;

  std::string::push_back(a2, 95);
  if (*((_DWORD *)this + 10))
    v4 = "recv";
  else
    v4 = "send";
  v5 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v5 >= 0)
    v6 = 22;
  else
    v6 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v5 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (v6 - size >= 4)
  {
    if (v5 >= 0)
      v8 = a2;
    else
      v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if ((char *)v8 + size <= v4 && (char *)v8->__r_.__value_.__r.__words + size + 4 > v4)
    {
      __break(1u);
    }
    else
    {
      *(_DWORD *)((char *)&v8->__r_.__value_.__l.__data_ + size) = *(_DWORD *)v4;
      v10 = size + 4;
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        a2->__r_.__value_.__l.__size_ = v10;
      else
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = v10 & 0x7F;
      v8->__r_.__value_.__s.__data_[v10] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(a2, v6, size - v6 + 4, size, size, 0, 4uLL, v4);
  }
}

BOOL webrtc::`anonymous namespace'::IdWithDirection::Equals(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;

  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 8))
    return 0;
  v4 = *(unsigned __int8 *)(a2 + 39);
  v5 = *(_QWORD *)(a2 + 24);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a2 + 39);
  else
    v6 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned __int8 *)(a1 + 39);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 24);
  if (v6 != v7)
    return 0;
  v9 = (const void **)(a2 + 16);
  if (v8 >= 0)
    v10 = (unsigned __int8 *)(a1 + 16);
  else
    v10 = *(unsigned __int8 **)(a1 + 16);
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v9, v10, v5))
      return *(_DWORD *)(a2 + 40) == *(_DWORD *)(a1 + 40);
    return 0;
  }
  if ((_DWORD)v4)
  {
    while (*(unsigned __int8 *)v9 == *v10)
    {
      v9 = (const void **)((char *)v9 + 1);
      ++v10;
      if (!--v4)
        return *(_DWORD *)(a2 + 40) == *(_DWORD *)(a1 + 40);
    }
    return 0;
  }
  return *(_DWORD *)(a2 + 40) == *(_DWORD *)(a1 + 40);
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::IdWithDirection>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 44));
  return v1 == 1;
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::CandidateId>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 40);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::CandidateId>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 10;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::CandidateId>::~RefCountedObject(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = &unk_24C0B5B70;
  if (*(char *)(result + 39) < 0)
  {
    operator delete(*(void **)(result + 16));
    return v1;
  }
  return result;
}

void rtc::RefCountedObject<webrtc::`anonymous namespace'::CandidateId>::~RefCountedObject(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0B5B70;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::CandidateId::ToString(webrtc::_anonymous_namespace_::CandidateId *this)
{
  return std::operator+<char>();
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::CandidateId>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 40));
  return v1 == 1;
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::ComponentId>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 44);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::ComponentId>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 11;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::ComponentId>::~RefCountedObject(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = &unk_24C0B5CD0;
  if (*(char *)(result + 39) < 0)
  {
    operator delete(*(void **)(result + 16));
    return v1;
  }
  return result;
}

void rtc::RefCountedObject<webrtc::`anonymous namespace'::ComponentId>::~RefCountedObject(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0B5CD0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::`anonymous namespace'::ComponentId::ToString(webrtc::_anonymous_namespace_::ComponentId *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t webrtc::`anonymous namespace'::ComponentId::Equals(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const void **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  uint64_t result;

  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 8) || *(_DWORD *)(a2 + 40) != *(_DWORD *)(a1 + 40))
    return 0;
  v2 = *(unsigned __int8 *)(a2 + 39);
  v3 = *(_QWORD *)(a2 + 24);
  if ((v2 & 0x80u) == 0)
    v4 = *(unsigned __int8 *)(a2 + 39);
  else
    v4 = *(_QWORD *)(a2 + 24);
  v5 = *(unsigned __int8 *)(a1 + 39);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 24);
  if (v4 != v5)
    return 0;
  v7 = (const void **)(a2 + 16);
  v10 = *(unsigned __int8 **)(a1 + 16);
  v8 = (unsigned __int8 *)(a1 + 16);
  v9 = v10;
  if (v6 >= 0)
    v11 = v8;
  else
    v11 = v9;
  if ((v2 & 0x80) != 0)
    return memcmp(*v7, v11, v3) == 0;
  if (!(_DWORD)v2)
    return 1;
  v12 = v2 - 1;
  do
  {
    v14 = *(unsigned __int8 *)v7;
    v7 = (const void **)((char *)v7 + 1);
    v13 = v14;
    v16 = *v11++;
    v15 = v16;
    v18 = v12-- != 0;
    result = v13 == v15;
  }
  while (v13 == v15 && v18);
  return result;
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::ComponentId>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 44));
  return v1 == 1;
}

void webrtc::`anonymous namespace'::ComponentId::ToString(std::string *this, const char *a2, const char *a3)
{
  size_t v6;
  size_t v7;
  webrtc::_anonymous_namespace_::ComponentId *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const std::string::value_type *v13;
  std::string::size_type v14;
  BOOL v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string::size_type size;
  std::string *v19;
  std::string::value_type *v20;
  std::string::size_type v21;
  int v22;
  size_t v23;
  char *p_p;
  char *v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  BOOL v30;
  char *v31;
  uint64_t v32;
  std::string::size_type v33;
  std::string::size_type v34;
  std::string *v35;
  char *v36;
  std::string::size_type v37;
  void *__p;
  size_t v39;
  unint64_t v40;
  char __str[32];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    goto LABEL_63;
  v6 = strlen(a3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_64;
  v7 = v6;
  if (v6 > 0x16)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (webrtc::_anonymous_namespace_::ComponentId *)operator new(v9 + 1);
    this->__r_.__value_.__l.__size_ = v7;
    this->__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v6;
    v8 = (webrtc::_anonymous_namespace_::ComponentId *)this;
  }
  v11 = (char *)v8 + v7;
  if (v8 <= (webrtc::_anonymous_namespace_::ComponentId *)a3 && v11 > a3)
    goto LABEL_63;
  if (v7)
    memcpy(v8, a3, v7);
  *v11 = 0;
  if (a2[39] < 0)
  {
    v13 = (const std::string::value_type *)*((_QWORD *)a2 + 2);
    v14 = *((_QWORD *)a2 + 3);
    v15 = v14 == 0;
    if (!v13 && v14)
      goto LABEL_63;
  }
  else
  {
    v13 = a2 + 16;
    v14 = *((unsigned __int8 *)a2 + 39);
    v15 = a2[39] == 0;
  }
  v16 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v17 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v17 - size < v14)
      goto LABEL_20;
  }
  else
  {
    v17 = 22;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (22 - v16 < v14)
    {
LABEL_20:
      std::string::__grow_by_and_replace(this, v17, v14 - v17 + size, size, size, 0, v14, v13);
      goto LABEL_32;
    }
  }
  if (!v15)
  {
    v19 = this;
    if ((v16 & 0x80) != 0)
    {
      v19 = (std::string *)this->__r_.__value_.__r.__words[0];
      v20 = (std::string::value_type *)(this->__r_.__value_.__r.__words[0] + size);
      if (v20 > v13)
      {
LABEL_28:
        memmove(v20, v13, v14);
        v21 = size + v14;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          this->__r_.__value_.__l.__size_ = v21;
        else
          *((_BYTE *)&this->__r_.__value_.__s + 23) = v21 & 0x7F;
        v19->__r_.__value_.__s.__data_[v21] = 0;
        goto LABEL_32;
      }
    }
    else
    {
      v20 = (char *)this + size;
      if ((char *)this + size > v13)
        goto LABEL_28;
    }
    if (&v20[v14] > v13)
      goto LABEL_63;
    goto LABEL_28;
  }
LABEL_32:
  std::string::push_back(this, 45);
  v22 = snprintf(__str, 0x20uLL, "%d", *((_DWORD *)a2 + 10));
  if (v22 < 0)
    goto LABEL_64;
  v23 = v22;
  if (v22 > 0x16)
  {
    v27 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v27 = v22 | 7;
    v28 = v27 + 1;
    p_p = (char *)operator new(v27 + 1);
    v39 = v23;
    v40 = v28 | 0x8000000000000000;
    __p = p_p;
    v25 = &p_p[v23];
    v26 = &p_p[v23] > __str;
    if (p_p > __str)
      goto LABEL_40;
  }
  else
  {
    HIBYTE(v40) = v22;
    p_p = (char *)&__p;
    v25 = (char *)&__p + v23;
    v26 = (char *)&__p + v23 > __str;
    if (&__p > (void **)__str)
      goto LABEL_40;
  }
  if (v26)
    goto LABEL_63;
LABEL_40:
  if ((_DWORD)v23)
    memcpy(p_p, __str, v23);
  *v25 = 0;
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    v29 = HIBYTE(v40);
    v30 = HIBYTE(v40) == 0;
    v31 = (char *)&__p;
    goto LABEL_46;
  }
  v31 = (char *)__p;
  v29 = v39;
  v30 = v39 == 0;
  if (!__p && v39)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    abort();
  }
LABEL_46:
  v32 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v33 = 22;
    v34 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (22 - v32 < v29)
      goto LABEL_48;
    goto LABEL_51;
  }
  v34 = this->__r_.__value_.__l.__size_;
  v33 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v33 - v34 >= v29)
  {
LABEL_51:
    if (v30)
    {
LABEL_59:
      if (SHIBYTE(v40) < 0)
        goto LABEL_49;
      return;
    }
    v35 = this;
    if ((v32 & 0x80) != 0)
    {
      v35 = (std::string *)this->__r_.__value_.__r.__words[0];
      v36 = (char *)(this->__r_.__value_.__r.__words[0] + v34);
      if (v36 > v31)
      {
LABEL_57:
        memmove(v36, v31, v29);
        v37 = v34 + v29;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          this->__r_.__value_.__l.__size_ = v37;
          v35->__r_.__value_.__s.__data_[v37] = 0;
          if (SHIBYTE(v40) < 0)
            goto LABEL_49;
          return;
        }
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v37 & 0x7F;
        v35->__r_.__value_.__s.__data_[v37] = 0;
        goto LABEL_59;
      }
    }
    else
    {
      v36 = (char *)this + v34;
      if ((char *)this + v34 > v31)
        goto LABEL_57;
    }
    if (&v36[v29] <= v31)
      goto LABEL_57;
    goto LABEL_63;
  }
LABEL_48:
  std::string::__grow_by_and_replace(this, v33, v29 - v33 + v34, v34, v34, 0, v29, v31);
  if (SHIBYTE(v40) < 0)
LABEL_49:
    operator delete(__p);
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::CandidatePairId>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 48);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::CandidatePairId>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 12;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::`anonymous namespace'::CandidatePairId>::~RefCountedObject(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  *(_QWORD *)result = &unk_24C0B5CD0;
  if (*(char *)(result + 39) < 0)
  {
    operator delete(*(void **)(result + 16));
    return v1;
  }
  return result;
}

void rtc::RefCountedObject<webrtc::`anonymous namespace'::CandidatePairId>::~RefCountedObject(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0B5CD0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::`anonymous namespace'::CandidatePairId::ToString(webrtc::_anonymous_namespace_::CandidatePairId *this@<X0>, std::string *a2@<X8>)
{
  int v4;
  size_t v5;
  void **p_src;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  std::string::size_type v11;
  BOOL v12;
  const std::string::value_type *v13;
  int v14;
  std::string::size_type v15;
  std::string::size_type size;
  std::string *v17;
  char *v18;
  std::string::size_type v19;
  void **__src;
  size_t v21;
  unint64_t v22;
  char __str[32];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  std::string::push_back(a2, 45);
  v4 = snprintf(__str, 0x20uLL, "%d", *((_DWORD *)this + 11));
  if (v4 < 0)
LABEL_41:
    abort();
  v5 = v4;
  if (v4 > 0x16)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_src = (void **)operator new(v7 + 1);
    v21 = v5;
    v22 = v8 | 0x8000000000000000;
    __src = p_src;
  }
  else
  {
    HIBYTE(v22) = v4;
    p_src = (void **)&__src;
  }
  v9 = (char *)p_src + v5;
  if (p_src <= (void **)__str && (char *)p_src + v5 > __str)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if ((_DWORD)v5)
    memcpy(p_src, __str, v5);
  *v9 = 0;
  if (SHIBYTE(v22) < 0)
  {
    v13 = (const std::string::value_type *)__src;
    v11 = v21;
    v12 = v21 == 0;
    if (!__src && v21)
      goto LABEL_40;
  }
  else
  {
    v11 = HIBYTE(v22);
    v12 = HIBYTE(v22) == 0;
    v13 = (const std::string::value_type *)&__src;
  }
  v14 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v14 >= 0)
    v15 = 22;
  else
    v15 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v14 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (v15 - size < v11)
  {
    std::string::__grow_by_and_replace(a2, v15, size + v11 - v15, size, size, 0, v11, v13);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return;
    goto LABEL_36;
  }
  if (v12)
  {
LABEL_35:
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      return;
    goto LABEL_36;
  }
  if (v14 >= 0)
    v17 = a2;
  else
    v17 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v18 = (char *)v17 + size;
  if ((char *)v17 + size <= v13 && &v18[v11] > v13)
    goto LABEL_40;
  memmove(v18, v13, v11);
  v19 = size + v11;
  if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v19 & 0x7F;
    v17->__r_.__value_.__s.__data_[v19] = 0;
    goto LABEL_35;
  }
  a2->__r_.__value_.__l.__size_ = v19;
  v17->__r_.__value_.__s.__data_[v19] = 0;
  if (SHIBYTE(v22) < 0)
LABEL_36:
    operator delete(__src);
}

BOOL webrtc::`anonymous namespace'::CandidatePairId::Equals(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;

  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 8) || *(_DWORD *)(a2 + 40) != *(_DWORD *)(a1 + 40))
    return 0;
  v4 = *(unsigned __int8 *)(a2 + 39);
  v5 = *(_QWORD *)(a2 + 24);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a2 + 39);
  else
    v6 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned __int8 *)(a1 + 39);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 24);
  if (v6 != v7)
    return 0;
  v9 = (const void **)(a2 + 16);
  if (v8 >= 0)
    v10 = (unsigned __int8 *)(a1 + 16);
  else
    v10 = *(unsigned __int8 **)(a1 + 16);
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v9, v10, v5))
      return *(_DWORD *)(a2 + 44) == *(_DWORD *)(a1 + 44);
    return 0;
  }
  if ((_DWORD)v4)
  {
    while (*(unsigned __int8 *)v9 == *v10)
    {
      v9 = (const void **)((char *)v9 + 1);
      ++v10;
      if (!--v4)
        return *(_DWORD *)(a2 + 44) == *(_DWORD *)(a1 + 44);
    }
    return 0;
  }
  return *(_DWORD *)(a2 + 44) == *(_DWORD *)(a1 + 44);
}

BOOL rtc::RefCountedObject<webrtc::`anonymous namespace'::CandidatePairId>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 48));
  return v1 == 1;
}

uint64_t webrtc::StatsReport::Value::Release(webrtc::StatsReport::Value *this)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (*((_DWORD *)this + 2) - 1);
  *((_DWORD *)this + 2) = v1;
  if (this && !(_DWORD)v1)
  {
    v3 = *((_DWORD *)this + 3);
    if (v3 == 6)
    {
      v7 = (_QWORD *)*((_QWORD *)this + 2);
      if (!v7)
      {
LABEL_14:
        MEMORY[0x20BD0ADEC](this, 0x1072C40C6644164);
        return v1;
      }
      if (*v7)
        (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 8))(*v7);
      v5 = v7;
      v6 = 0x20C4093837F09;
    }
    else
    {
      if (v3 != 3)
        goto LABEL_14;
      v4 = *((_QWORD *)this + 2);
      if (!v4)
        goto LABEL_14;
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v5 = (_QWORD *)v4;
      v6 = 0x1012C40EC159624;
    }
    MEMORY[0x20BD0ADEC](v5, v6);
    goto LABEL_14;
  }
  return v1;
}

uint64_t WebRtcSpl_LevinsonDurbin(uint32x4_t *a1, _WORD *a2, _WORD *a3, unint64_t a4)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint32x4_t v8;
  uint32x4_t *v9;
  int16x8_t *v10;
  uint16x8_t *v11;
  unint64_t v12;
  uint32x4_t v13;
  uint32x4_t v14;
  uint32x4_t v15;
  uint32x4_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  unint64_t v21;
  _WORD *v22;
  _WORD *v23;
  __int32 *v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  signed int v40;
  unsigned int v41;
  __int16 v42;
  int v43;
  int *v44;
  int16x8_t *v45;
  int *v46;
  __int16 *v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  int v51;
  signed int v52;
  unsigned int v53;
  int *v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  int32x4_t v61;
  int16x8_t *v62;
  int16x8_t *v63;
  int16x8_t *v64;
  int16x4_t *v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int16x8_t v69;
  int8x16_t v70;
  int16x8_t v71;
  int8x16_t v72;
  int16x8_t v73;
  int8x16_t v74;
  int16x8_t v75;
  int8x16_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  __int16 *v85;
  __int16 *v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  signed int v103;
  unsigned int v104;
  BOOL v105;
  int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int32x4_t v114;
  int32x4_t v115;
  uint16x8_t *v116;
  int16x8_t *v117;
  int16x8_t *v118;
  int16x8_t *v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int8x16_t v123;
  int16x8_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int8x16_t v127;
  int16x8_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int16x8_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  _BYTE *v136;
  __int16 *v137;
  __int16 *v138;
  _BYTE *v139;
  _BYTE *v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  unint64_t v147;
  uint16x8_t *v148;
  int16x8_t *v149;
  int16x8_t *v150;
  unint64_t v151;
  uint16x8_t v152;
  uint16x4_t v153;
  int32x4_t v154;
  int16x8_t v155;
  unint64_t v156;
  uint64_t v157;
  _WORD *v158;
  __int16 *v159;
  unsigned __int16 *v160;
  int v161;
  int v162;
  int v163;
  unint64_t v164;
  unint64_t v167;
  uint64_t v169;
  _WORD v170[1];
  _BYTE v171[42];
  _BYTE v172[28];
  int v173;
  _BYTE v174[2];
  __int16 v175;
  int v176;
  __int16 v177;
  _BYTE v178[2];
  __int16 v179;
  __int16 v180;
  _WORD v181[8];
  int v182;
  _WORD v183[8];
  __int16 v184;
  _QWORD v185[5];

  v185[3] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int16)(__clz(a1->i32[0] ^ (a1->i32[0] >> 31)) - 1);
  if (a1->i32[0])
    v5 = v4;
  else
    v5 = 0;
  v164 = a4 + 1;
  if (a4 + 1 > 1)
    v6 = a4 + 1;
  else
    v6 = 1;
  if (v6 >= 0x10)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFF0;
    v8 = (uint32x4_t)vdupq_n_s32(v5);
    v9 = a1 + 2;
    v10 = (int16x8_t *)&v184;
    v11 = (uint16x8_t *)&v182;
    v12 = v6 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v13 = v9[-2];
      v14 = v9[-1];
      v15 = *v9;
      v16 = v9[1];
      v9 += 4;
      v17 = (int16x8_t)vshlq_u32(v14, v8);
      v18 = (int16x8_t)vshlq_u32(v13, v8);
      v19 = (int16x8_t)vshlq_u32(v16, v8);
      v20 = (int16x8_t)vshlq_u32(v15, v8);
      v10[-1] = vuzp2q_s16(v18, v17);
      *v10 = vuzp2q_s16(v20, v19);
      v11[-1] = vshrq_n_u16((uint16x8_t)vuzp1q_s16(v18, v17), 1uLL);
      *v11 = vshrq_n_u16((uint16x8_t)vuzp1q_s16(v20, v19), 1uLL);
      v10 += 2;
      v11 += 2;
      v12 -= 16;
    }
    while (v12);
    if (v6 == v7)
      goto LABEL_14;
  }
  else
  {
    v7 = 0;
  }
  v21 = v6 - v7;
  v22 = &v181[v7];
  v23 = &v183[v7];
  v24 = &a1->i32[v7];
  do
  {
    v25 = *v24++;
    *v23++ = (v25 << v5) >> 16;
    *v22++ = (unsigned __int16)(v25 << v5) >> 1;
    --v21;
  }
  while (v21);
LABEL_14:
  v26 = a1->i32[1] << v5;
  if (v26 >= 0)
    v27 = a1->i32[1] << v5;
  else
    v27 = -v26;
  v28 = v183[0];
  v29 = v181[0];
  if (v183[0])
  {
    v30 = 0x1FFFFFFF / v183[0];
    v31 = -2 * v183[0];
  }
  else
  {
    v31 = 0;
    v30 = -1;
  }
  v32 = v30 * v31 - 2 * ((v30 * v181[0]) >> 15) + 0x7FFFFFFF;
  v33 = (v32 >> 16) * v30 + ((((unsigned __int16)v32 >> 1) * v30) >> 15);
  v34 = 8
      * ((__int16)(v33 >> 15) * HIWORD(v27)
       + (((v33 & 0x7FFF) * HIWORD(v27)) >> 15)
       + (((__int16)(v33 >> 15) * ((unsigned __int16)v27 >> 1)) >> 15));
  if (v26 <= 0)
    v35 = v34;
  else
    v35 = -v34;
  *a3 = HIWORD(v35);
  v179 = v35 >> 20;
  v175 = ((v35 >> 4) - (v35 >> 20 << 16)) >> 1;
  v167 = a4 - 2;
  if (a4 >= 2)
  {
    v38 = 0;
    v39 = 2 * ((v35 >> 16) * (v35 >> 16) + ((int)(((v35 >> 1) & 0x7FFC) * (v35 >> 16)) >> 14));
    if (v39 < 0)
      v39 = -v39;
    v40 = 2
        * (((v39 ^ 0x7FFFFFFFu) >> 16) * v28
         + ((int)(((v39 ^ 0x7FFFFFFFu) >> 16) * v29) >> 15)
         + ((((unsigned __int16)~(_WORD)v39 >> 1) * v28) >> 15));
    v41 = __clz(v40 ^ (v40 >> 31)) - 1;
    if (v40)
      v42 = v41;
    else
      v42 = 0;
    v43 = v40 << v42;
    v44 = &v173;
    v45 = (int16x8_t *)&v177;
    v46 = &v176;
    v47 = &v180;
    v48 = 1;
    v49 = 2;
    do
    {
      v56 = v38 + 1;
      v57 = v38 + 3;
      if ((unint64_t)(v38 + 3) <= 2)
        v57 = 2;
      if (v56 >= 0x10)
      {
        v60 = v48 & 0xFFFFFFFFFFFFFFF0;
        v59 = v56 & 0xFFFFFFFFFFFFFFF0 | 1;
        v61 = 0uLL;
        v62 = v45;
        v63 = (int16x8_t *)v44;
        v64 = (int16x8_t *)((char *)&v182 + 2);
        v65 = (int16x4_t *)v185;
        v66 = 0uLL;
        v67 = 0uLL;
        v68 = 0uLL;
        do
        {
          v69 = *(int16x8_t *)v65[-2].i8;
          v70 = (int8x16_t)vrev64q_s16(*v62);
          v71 = (int16x8_t)vextq_s8(v70, v70, 8uLL);
          v72 = (int8x16_t)vrev64q_s16(v62[-1]);
          v73 = (int16x8_t)vextq_s8(v72, v72, 8uLL);
          v74 = (int8x16_t)vrev64q_s16(*v63);
          v75 = (int16x8_t)vextq_s8(v74, v74, 8uLL);
          v76 = (int8x16_t)vrev64q_s16(v63[-1]);
          v77 = (int16x8_t)vextq_s8(v76, v76, 8uLL);
          v78 = vmull_s16(*(int16x4_t *)v75.i8, *(int16x4_t *)v69.i8);
          v79 = vmull_s16(*(int16x4_t *)v77.i8, *v65);
          v80 = v64[-1];
          v81 = vsraq_n_s32(vmlal_high_s16(vshrq_n_s32(vmull_high_s16(v75, v69), 0xFuLL), v71, v69), vmull_high_s16(v80, v71), 0xFuLL);
          v82 = vsraq_n_s32(vsraq_n_s32(vmull_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v69.i8), v78, 0xFuLL), vmull_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v71.i8), 0xFuLL);
          v83 = vsraq_n_s32(vmlal_high_s16(vshrq_n_s32(vmull_high_s16(v77, *(int16x8_t *)v65->i8), 0xFuLL), v73, *(int16x8_t *)v65->i8), vmull_high_s16(*v64, v73), 0xFuLL);
          v84 = vsraq_n_s32(vsraq_n_s32(vmull_s16(*(int16x4_t *)v73.i8, *v65), v79, 0xFuLL), vmull_s16(*(int16x4_t *)v64->i8, *(int16x4_t *)v73.i8), 0xFuLL);
          v66 = vaddq_s32(vaddq_s32(v81, v81), v66);
          v61 = vaddq_s32(vaddq_s32(v82, v82), v61);
          v68 = vaddq_s32(vaddq_s32(v83, v83), v68);
          v65 += 4;
          v67 = vaddq_s32(vaddq_s32(v84, v84), v67);
          v64 += 2;
          v63 -= 2;
          v62 -= 2;
          v60 -= 16;
        }
        while (v60);
        v58 = vaddvq_s32(vaddq_s32(vaddq_s32(v67, v61), vaddq_s32(v68, v66)));
        if (v56 == (v56 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_50;
      }
      else
      {
        v58 = 0;
        v59 = 1;
      }
      v85 = &v181[v59];
      v86 = &v183[v59];
      v87 = v49;
      do
      {
        v88 = *v86++;
        v89 = *(__int16 *)&v178[2 * v87 + -2 * v59];
        v90 = v89 * v88;
        v91 = *(__int16 *)&v174[2 * v87 + -2 * v59] * v88;
        v92 = *v85++;
        v58 += 2 * (v90 + (v91 >> 15) + ((v92 * v89) >> 15));
        --v87;
      }
      while (v59 != v87);
LABEL_50:
      v93 = ((unsigned __int16)v183[v49] << 16) + 16 * v58 + 2 * (__int16)v181[v49];
      if (v93 >= 0)
        v94 = ((unsigned __int16)v183[v49] << 16) + 16 * v58 + 2 * (__int16)v181[v49];
      else
        v94 = -v93;
      v95 = v43 >> 16;
      v96 = -2 * (v43 >> 16);
      if (v43 >= 0x10000)
      {
        v97 = 0x1FFFFFFF / (v43 >> 16);
      }
      else
      {
        v96 = 0;
        v97 = -1;
      }
      v98 = (unsigned __int16)v43 >> 1;
      v99 = v97 * v96 - 2 * ((v97 * v98) >> 15) + 0x7FFFFFFF;
      v100 = (v99 >> 16) * v97 + ((((unsigned __int16)v99 >> 1) * v97) >> 15);
      v101 = 8
           * ((__int16)(v100 >> 15) * HIWORD(v94)
            + (((v100 & 0x7FFF) * HIWORD(v94)) >> 15)
            + (((__int16)(v100 >> 15) * ((unsigned __int16)v94 >> 1)) >> 15));
      if (v93 <= 0)
        v102 = v101;
      else
        v102 = -v101;
      v103 = __clz(v102 ^ (v102 >> 31)) - 1;
      if (!v102)
        v103 = 0;
      if (v102 > 0)
        v104 = 0x7FFFFFFF;
      else
        v104 = 0x80000000;
      v105 = v42 <= v103 || v102 == 0;
      v106 = v102 << v42;
      if (v105)
        v107 = v106;
      else
        v107 = v104;
      v108 = v107 >> 16;
      a3[v49 - 1] = HIWORD(v107);
      if (v107 >> 16 >= 0)
        v109 = v107 >> 16;
      else
        v109 = -v108;
      if (v109 > 0x7FEE)
        return 0;
      v110 = (unsigned __int16)v107 >> 1;
      v169 = v48;
      if (v56 >= 8)
      {
        v112 = 0;
        v113 = v48 & 0xFFFFFFFFFFFFFFF8;
        v111 = v56 & 0xFFFFFFFFFFFFFFF8 | 1;
        v114 = vdupq_n_s32(v108);
        v115 = vdupq_n_s32(v110);
        v116 = (uint16x8_t *)v171;
        v117 = (int16x8_t *)v172;
        v118 = (int16x8_t *)&v175;
        v119 = (int16x8_t *)&v179;
        do
        {
          v120 = *v119++;
          v121 = v120;
          v122 = *v118++;
          v123 = (int8x16_t)vrev64q_s16(v45[v112 / 4]);
          v124 = (int16x8_t)vextq_s8(v123, v123, 8uLL);
          v125 = vmovl_high_s16(v124);
          v126 = vmovl_s16(*(int16x4_t *)v124.i8);
          v127 = (int8x16_t)vrev64q_s16(*(int16x8_t *)&v44[v112]);
          v128 = (int16x8_t)vextq_s8(v127, v127, 8uLL);
          v129 = vsraq_n_s32(vsraq_n_s32(vaddw_high_s16(vmulq_s32(v114, v125), v122), vmulq_s32(v115, v125), 0xFuLL), vmulq_s32(v114, vmovl_high_s16(v128)), 0xFuLL);
          v130 = vsraq_n_s32(vsraq_n_s32(vaddw_s16(vmulq_s32(v114, v126), *(int16x4_t *)v122.i8), vmulq_s32(v115, v126), 0xFuLL), vmulq_s32(v114, vmovl_s16(*(int16x4_t *)v128.i8)), 0xFuLL);
          *(int16x4_t *)v125.i8 = vmovn_s32(v129);
          v131 = vaddq_s16(v121, vshrn_high_n_s32(vshrn_n_s32(v130, 0xFuLL), v129, 0xFuLL));
          *(int16x4_t *)v130.i8 = vmovn_s32(v130);
          *(int16x4_t *)v130.i8 = vadd_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v130.i8);
          v130.u64[1] = (unint64_t)vadd_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v125.i8);
          *v117++ = v131;
          *v116++ = vshrq_n_u16((uint16x8_t)v130, 1uLL);
          v112 -= 4;
          v113 -= 8;
        }
        while (v113);
        if (v56 == (v56 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_35;
      }
      else
      {
        v111 = 1;
      }
      v132 = 0;
      v133 = v49 - v111;
      v134 = 2 * v111;
      v135 = &v170[v111];
      v136 = &v171[v134 + 40];
      v137 = (__int16 *)((char *)v46 - v134);
      v138 = &v47[v134 / 0xFFFFFFFFFFFFFFFELL];
      v139 = &v174[v134];
      v140 = &v178[v134];
      do
      {
        v141 = 2 * v132;
        v143 = *v138--;
        v142 = v143;
        v144 = *v137--;
        v145 = *(__int16 *)&v139[2 * v132] + v108 * v142 + ((int)(v110 * v142) >> 15) + ((int)(v108 * v144) >> 15);
        *(_WORD *)&v136[v141] = *(_WORD *)&v140[2 * v132] + (v145 >> 15);
        *(_WORD *)&v135[v141] = v145 & 0x7FFF;
        ++v132;
      }
      while (v133 != v132);
LABEL_35:
      v50 = 2 * v57 - 2;
      *(_WORD *)&v171[2 * v49 + 40] = v107 >> 20;
      v170[v49] = ((v107 >> 4) - (v107 >> 20 << 16)) >> 1;
      v51 = 2 * (v108 * v108 + ((int)(v110 * v108) >> 14));
      if (((v108 * v108 + ((int)(v110 * v108) >> 14)) & 0x40000000) != 0)
        v51 = -2 * (v108 * v108 + ((int)(v110 * v108) >> 14));
      v52 = ((v51 ^ 0x7FFFFFFFu) >> 16) * v95
          + ((((v51 ^ 0x7FFFFFFFu) >> 16) * v98) >> 15)
          + ((((unsigned __int16)~(_WORD)v51 >> 1) * v95) >> 15);
      v53 = __clz((2 * v52) ^ (v52 >> 30)) - 1;
      v54 = v46;
      if (v52)
        v55 = v53;
      else
        v55 = 0;
      v43 = (2 * v52) << v55;
      memcpy(&v179, v172, v50);
      memcpy(&v175, v171, v50);
      v42 += v55;
      ++v49;
      v48 = v169 + 1;
      v44 = (int *)((char *)v44 + 2);
      v45 = (int16x8_t *)((char *)v45 + 2);
      v46 = (int *)((char *)v54 + 2);
      ++v47;
      v105 = v38++ == v167;
    }
    while (!v105);
  }
  *a2 = 4096;
  if (a4)
  {
    v36 = 2;
    if (v164 > 2)
      v36 = v164;
    if (v36 >= 9)
    {
      v147 = (v36 - 1) & 0xFFFFFFFFFFFFFFF8;
      v37 = v147 | 1;
      v148 = (uint16x8_t *)&v179;
      v149 = (int16x8_t *)&v175;
      v150 = (int16x8_t *)(a2 + 1);
      v151 = v147;
      do
      {
        v152 = *v148++;
        v153 = *(uint16x4_t *)v152.i8;
        v154 = (int32x4_t)vmovl_high_u16(v152);
        v155 = *v149++;
        *v150++ = vraddhn_high_s32(vraddhn_s32(vaddq_s32(vshll_n_s16(*(int16x4_t *)v155.i8, 2uLL), vshlq_n_s32((int32x4_t)vmovl_u16(v153), 0x11uLL)), (int32x4_t)0), vaddq_s32(vshll_high_n_s16(v155, 2uLL), vshlq_n_s32(v154, 0x11uLL)), (int32x4_t)0);
        v151 -= 8;
      }
      while (v151);
      if (v36 - 1 == v147)
        return 1;
    }
    else
    {
      v37 = 1;
    }
    v156 = v36 - v37;
    v157 = 2 * v37;
    v158 = &a2[v37];
    v159 = (__int16 *)&v174[v157];
    v160 = (unsigned __int16 *)&v178[v157];
    do
    {
      v162 = *v160++;
      v161 = v162;
      v163 = *v159++;
      *v158++ = ((v161 << 17) + 4 * v163 + 0x8000) >> 16;
      --v156;
    }
    while (v156);
  }
  return 1;
}

void webrtc::`anonymous namespace'::LibaomAv1Decoder::~LibaomAv1Decoder(webrtc::_anonymous_namespace_::LibaomAv1Decoder *this)
{
  uint64_t v2;
  uint64_t v3;
  webrtc::_anonymous_namespace_::LibaomAv1Decoder *v4;
  uint64_t v5;
  uint64_t v6;
  webrtc::_anonymous_namespace_::LibaomAv1Decoder *v7;
  uint64_t v8;
  webrtc::_anonymous_namespace_::LibaomAv1Decoder *v9;
  uint64_t v10;
  uint64_t v11;
  webrtc::_anonymous_namespace_::LibaomAv1Decoder *v12;

  v2 = *((_QWORD *)this + 2);
  if (!v2 || !*((_QWORD *)this + 7))
  {
    *((_DWORD *)this + 6) = 1;
    if (!*((_QWORD *)this + 13))
      return;
    goto LABEL_11;
  }
  (*(void (**)(void))(v2 + 32))();
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  if (*((_QWORD *)this + 13))
  {
    v3 = *((_QWORD *)this + 11);
    v4 = (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)*((_QWORD *)this + 12);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 13) = 0;
    if (v4 != (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)((char *)this + 88))
    {
      do
      {
        v7 = (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)((char *)this + 88));
    }
  }
  *((_BYTE *)this + 64) = 0;
  if (*((_QWORD *)this + 13))
  {
LABEL_11:
    v8 = *((_QWORD *)this + 11);
    v9 = (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)*((_QWORD *)this + 12);
    v10 = *(_QWORD *)v9;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v10;
    *((_QWORD *)this + 13) = 0;
    if (v9 != (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)((char *)this + 88))
    {
      do
      {
        v12 = (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)*((_QWORD *)v9 + 1);
        v11 = *((_QWORD *)v9 + 2);
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)((char *)this + 88));
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  webrtc::_anonymous_namespace_::LibaomAv1Decoder *v4;
  uint64_t v5;
  uint64_t v6;
  webrtc::_anonymous_namespace_::LibaomAv1Decoder *v7;
  uint64_t v8;
  webrtc::_anonymous_namespace_::LibaomAv1Decoder *v9;
  uint64_t v10;
  uint64_t v11;
  webrtc::_anonymous_namespace_::LibaomAv1Decoder *v12;

  v2 = *((_QWORD *)this + 2);
  if (v2 && *((_QWORD *)this + 7))
  {
    (*(void (**)(void))(v2 + 32))();
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    if (*((_QWORD *)this + 13))
    {
      v3 = *((_QWORD *)this + 11);
      v4 = (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)*((_QWORD *)this + 12);
      v5 = *(_QWORD *)v4;
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
      **(_QWORD **)(v3 + 8) = v5;
      *((_QWORD *)this + 13) = 0;
      if (v4 != (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)((char *)this + 88))
      {
        do
        {
          v7 = (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)*((_QWORD *)v4 + 1);
          v6 = *((_QWORD *)v4 + 2);
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          operator delete(v4);
          v4 = v7;
        }
        while (v7 != (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)((char *)this + 88));
      }
    }
    *((_BYTE *)this + 64) = 0;
    if (!*((_QWORD *)this + 13))
LABEL_16:
      JUMPOUT(0x20BD0ADECLL);
  }
  else
  {
    *((_DWORD *)this + 6) = 1;
    if (!*((_QWORD *)this + 13))
      goto LABEL_16;
  }
  v8 = *((_QWORD *)this + 11);
  v9 = (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)*((_QWORD *)this + 12);
  v10 = *(_QWORD *)v9;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v8 + 8);
  **(_QWORD **)(v8 + 8) = v10;
  *((_QWORD *)this + 13) = 0;
  if (v9 != (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)((char *)this + 88))
  {
    do
    {
      v12 = (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)*((_QWORD *)v9 + 1);
      v11 = *((_QWORD *)v9 + 2);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      operator delete(v9);
      v9 = v12;
    }
    while (v12 != (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)((char *)this + 88));
  }
  goto LABEL_16;
}

BOOL webrtc::`anonymous namespace'::LibaomAv1Decoder::Configure(webrtc::_anonymous_namespace_::LibaomAv1Decoder *this, const webrtc::VideoDecoder::Settings *a2)
{
  _QWORD *v3;
  int inited;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  int v17;

  v16 = 0;
  v15 = *((_DWORD *)a2 + 4);
  v17 = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  v3 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 1) = "AOMedia Project AV1 Decoder 3.9.0-112-g77665fee93";
  *((_QWORD *)this + 2) = &aom_codec_av1_dx_algo;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &v15;
  inited = decoder_init_0((_QWORD *)this + 1);
  if (!inited)
  {
    *((_DWORD *)this + 6) = 0;
    *((_BYTE *)this + 64) = 1;
    return inited == 0;
  }
  v5 = (_QWORD *)*((_QWORD *)this + 7);
  if (!v5)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 6) = inited;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return inited == 0;
LABEL_9:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_decoder.cc");
    return inited == 0;
  }
  *((_QWORD *)this + 4) = *v5;
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    (*(void (**)(void))(v6 + 32))();
    *((_QWORD *)this + 7) = 0;
    *v3 = 0;
    v3[1] = 0;
  }
  *((_DWORD *)this + 6) = inited;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    goto LABEL_9;
  return inited == 0;
}

uint64_t webrtc::VideoDecoder::Decode(webrtc::VideoDecoder *this, const webrtc::EncodedImage *a2, uint64_t a3)
{
  return (*(uint64_t (**)(webrtc::VideoDecoder *, const webrtc::EncodedImage *, _QWORD, uint64_t))(*(_QWORD *)this + 32))(this, a2, 0, a3);
}

uint64_t webrtc::`anonymous namespace'::LibaomAv1Decoder::Decode(webrtc::_anonymous_namespace_::LibaomAv1Decoder *this, const webrtc::EncodedImage *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  char *v39;
  int v40;
  int v41;
  char v42;
  __int128 v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  char *v63;
  int v64;
  char *v65;
  char *v66;
  __int16 v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  int v76;
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  uint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 64) || !*((_QWORD *)this + 16))
    return 4294967289;
  v4 = *((_QWORD *)a2 + 17);
  if (v4)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v6 = *((_QWORD *)this + 2);
    if (!v6)
    {
LABEL_12:
      *((_DWORD *)this + 6) = 1;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        goto LABEL_13;
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v5 = 0;
    v6 = *((_QWORD *)this + 2);
    if (!v6)
      goto LABEL_12;
  }
  v8 = *((_QWORD *)this + 7);
  if (!v8)
    goto LABEL_12;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v6 + 64))(v8, v5, *((_QWORD *)a2 + 18), 0);
  *((_DWORD *)this + 6) = v9;
  if (!v9)
  {
    v17 = (char *)this + 8;
    v94 = 0;
    v93 = 0;
    while (1)
    {
      v18 = *((_QWORD *)this + 2);
      if (!v18)
        return 0;
      result = *((_QWORD *)this + 7);
      if (!result)
        return result;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(v18 + 72))(result, &v93);
      if (!result)
        return result;
      v25 = result;
      if (aom_codec_control((uint64_t)v17, 257, v19, v20, v21, v22, v23, v24, (uint64_t)&v94)
        && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      {
        v61 = v61 & 0xFFFFFFFF00000000 | 0x3AA;
        rtc::webrtc_logging_impl::Log("\r\t", v32, v26, v27, v28, v29, v30, v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_decoder.cc");
      }
      if (*(_DWORD *)v25 != 258)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          return 0xFFFFFFFFLL;
LABEL_53:
        rtc::webrtc_logging_impl::Log("\r\t", v54, v55, v56, v57, v58, v59, v60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_decoder.cc");
        return 0xFFFFFFFFLL;
      }
      v92 = 0;
      if (aom_codec_control((uint64_t)v17, 269, v26, v27, v28, v29, v30, v31, (uint64_t)&v92))
        break;
      webrtc::VideoFrameBufferPool::CreateI420Buffer((webrtc::_anonymous_namespace_::LibaomAv1Decoder *)((char *)this + 72), *(_DWORD *)(v25 + 40), *(_DWORD *)(v25 + 44), &v91);
      v33 = v91;
      if (!v91)
      {
        if (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>())
          return 0xFFFFFFFFLL;
        goto LABEL_53;
      }
      v65 = *(char **)(v25 + 72);
      v66 = *(char **)(v25 + 64);
      v34 = *(_DWORD *)(v25 + 88);
      v64 = *(_DWORD *)(v25 + 92);
      v63 = *(char **)(v25 + 80);
      v62 = *(_DWORD *)(v25 + 96);
      v35 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 136))(v91);
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 112))(v33);
      v37 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 144))(v33);
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 120))(v33);
      v39 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 152))(v33);
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 128))(v33);
      I420Copy(v66, v34, v65, v64, v63, v62, v35, v36, v37, v38, v39, v40, *(_DWORD *)(v25 + 40), *(_DWORD *)(v25 + 44));
      (**(void (***)(uint64_t))v33)(v33);
      (**(void (***)(uint64_t))v33)(v33);
      v41 = *((unsigned __int8 *)a2 + 292);
      if (*((_BYTE *)a2 + 292))
      {
        v42 = *((_BYTE *)a2 + 224);
        v43 = *(_OWORD *)((char *)a2 + 241);
        v95 = *(_OWORD *)((char *)a2 + 225);
        v96 = v43;
        v44 = *(_OWORD *)((char *)a2 + 273);
        v97 = *(_OWORD *)((char *)a2 + 257);
        v98 = v44;
      }
      else
      {
        v42 = 0;
      }
      v45 = *((_DWORD *)a2 + 38);
      v46 = *((_QWORD *)a2 + 1);
      v67 = 0;
      v68 = v33;
      (**(void (***)(uint64_t))v33)(v33);
      v69 = v45;
      v71 = 0;
      v72 = 0;
      v70 = v46;
      v73 = 0;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v77 = 0;
      v82 = 0;
      if (v41)
      {
        v77 = v42;
        v78 = v95;
        v79 = v96;
        v80 = v97;
        v81 = v98;
        v82 = 1;
      }
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      (*(void (**)(_QWORD, __int16 *, _QWORD, _QWORD))(**((_QWORD **)this + 16) + 32))(*((_QWORD *)this + 16), &v67, 0, 0);
      v47 = v88;
      v17 = (char *)this + 8;
      if (v88)
      {
        do
        {
          v48 = __ldaxr((unsigned int *)v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, (unsigned int *)v47));
        if (!v49)
        {
          v50 = *(_QWORD *)(v47 + 8);
          if (v50)
          {
            v51 = *(_QWORD *)(v47 + 16);
            v52 = *(void **)(v47 + 8);
            if (v51 != v50)
            {
              do
              {
                v53 = *(void **)(v51 - 96);
                if (v53)
                {
                  *(_QWORD *)(v51 - 88) = v53;
                  operator delete(v53);
                }
                v51 -= 104;
              }
              while (v51 != v50);
              v52 = *(void **)(v47 + 8);
            }
            *(_QWORD *)(v47 + 16) = v50;
            operator delete(v52);
          }
          MEMORY[0x20BD0ADEC](v47, 0x1020C40E72D6CFBLL);
        }
      }
      if (v68)
        (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
      if (v91)
        (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_13:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_decoder.cc");
  return 0xFFFFFFFFLL;
}

uint64_t webrtc::`anonymous namespace'::LibaomAv1Decoder::RegisterDecodeCompleteCallback(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 128) = a2;
  return 0;
}

uint64_t webrtc::`anonymous namespace'::LibaomAv1Decoder::Release(webrtc::_anonymous_namespace_::LibaomAv1Decoder *this)
{
  uint64_t v2;
  uint64_t v3;
  webrtc::_anonymous_namespace_::LibaomAv1Decoder *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  webrtc::_anonymous_namespace_::LibaomAv1Decoder *v8;

  v2 = *((_QWORD *)this + 2);
  if (v2 && *((_QWORD *)this + 7))
  {
    (*(void (**)(void))(v2 + 32))();
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    if (*((_QWORD *)this + 13))
    {
      v3 = *((_QWORD *)this + 11);
      v4 = (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)*((_QWORD *)this + 12);
      v5 = *(_QWORD *)v4;
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
      **(_QWORD **)(v3 + 8) = v5;
      *((_QWORD *)this + 13) = 0;
      if (v4 != (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)((char *)this + 88))
      {
        do
        {
          v8 = (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)*((_QWORD *)v4 + 1);
          v7 = *((_QWORD *)v4 + 2);
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          operator delete(v4);
          v4 = v8;
        }
        while (v8 != (webrtc::_anonymous_namespace_::LibaomAv1Decoder *)((char *)this + 88));
      }
    }
    result = 0;
    *((_BYTE *)this + 64) = 0;
  }
  else
  {
    *((_DWORD *)this + 6) = 1;
    return 4294967293;
  }
  return result;
}

void webrtc::`anonymous namespace'::LibaomAv1Decoder::GetDecoderInfo(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 23) = 6;
  *(_WORD *)(a1 + 4) = 28015;
  *(_DWORD *)a1 = 1633839468;
  *(_BYTE *)(a1 + 24) = 0;
}

const char *webrtc::`anonymous namespace'::LibaomAv1Decoder::ImplementationName(webrtc::_anonymous_namespace_::LibaomAv1Decoder *this)
{
  return "libaom";
}

void webrtc::CreateLibaomAv1Encoder(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  void *v17;
  _QWORD **v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  void (**v24)(webrtc::FieldTrialParameterInterface *__hidden);
  void *__p;
  void *v26;
  uint64_t v27;
  void *v28[2];
  char v29;
  char v30;
  int v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  v7 = v6;
  v8 = (_QWORD **)*a2;
  v10 = a2 + 1;
  v9 = (_QWORD *)a2[1];
  v18 = (_QWORD **)*a2;
  v19 = v9;
  v20 = a2[2];
  if (v20)
  {
    v9[2] = &v19;
    *a2 = v10;
    *v10 = 0;
    a2[2] = 0;
    v11 = v20;
  }
  else
  {
    v11 = 0;
    v18 = &v19;
    v8 = &v19;
  }
  *(_BYTE *)(v6 + 476) = 0;
  *(_QWORD *)v6 = &off_24C0B5E10;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 13) = 0;
  *(_QWORD *)(v6 + 488) = 0;
  *(_QWORD *)(v6 + 496) = 0;
  *(_QWORD *)(v6 + 480) = 0;
  *(_BYTE *)(v6 + 504) = 1;
  *(_DWORD *)(v6 + 508) = 0;
  *(_BYTE *)(v6 + 512) = 0;
  *(_OWORD *)(v6 + 516) = 0u;
  *(_OWORD *)(v6 + 532) = 0u;
  *(_OWORD *)(v6 + 548) = 0u;
  *(_OWORD *)(v6 + 564) = 0u;
  *(_OWORD *)(v6 + 580) = 0u;
  *(_OWORD *)(v6 + 608) = 0u;
  *(_OWORD *)(v6 + 624) = 0u;
  *(_OWORD *)(v6 + 596) = 0u;
  *(_BYTE *)(v6 + 528) = 1;
  *(_QWORD *)(v6 + 540) = 0;
  *(_QWORD *)(v6 + 532) = 0;
  *(_BYTE *)(v6 + 548) = 0;
  *(_BYTE *)(v6 + 564) = 1;
  *(_QWORD *)(v6 + 568) = 0;
  *(_QWORD *)(v6 + 576) = 0;
  *(_BYTE *)(v6 + 584) = 0;
  *(_BYTE *)(v6 + 600) = 1;
  *(_QWORD *)(v6 + 604) = 0;
  *(_QWORD *)(v6 + 612) = 0;
  *(_BYTE *)(v6 + 620) = 0;
  *(_OWORD *)(v6 + 640) = 0u;
  *(_OWORD *)(v6 + 656) = 0u;
  *(_OWORD *)(v6 + 672) = 0u;
  *(_OWORD *)(v6 + 688) = 0u;
  *(_OWORD *)(v6 + 704) = 0u;
  *(_OWORD *)(v6 + 720) = 0u;
  *(_OWORD *)(v6 + 736) = 0u;
  *(_OWORD *)(v6 + 752) = 0u;
  *(_OWORD *)(v6 + 768) = 0u;
  *(_OWORD *)(v6 + 784) = 0u;
  *(_DWORD *)(v6 + 800) = 0;
  *(_BYTE *)(v6 + 636) = 1;
  *(_QWORD *)(v6 + 648) = 0;
  *(_QWORD *)(v6 + 640) = 0;
  *(_BYTE *)(v6 + 656) = 0;
  *(_BYTE *)(v6 + 672) = 1;
  *(_BYTE *)(v6 + 692) = 0;
  *(_QWORD *)(v6 + 676) = 0;
  *(_QWORD *)(v6 + 684) = 0;
  *(_BYTE *)(v6 + 708) = 1;
  *(_BYTE *)(v6 + 728) = 0;
  *(_QWORD *)(v6 + 712) = 0;
  *(_QWORD *)(v6 + 720) = 0;
  *(_BYTE *)(v6 + 744) = 1;
  *(_BYTE *)(v6 + 764) = 0;
  *(_QWORD *)(v6 + 748) = 0;
  *(_QWORD *)(v6 + 756) = 0;
  *(_BYTE *)(v6 + 780) = 1;
  *(_QWORD *)(v6 + 792) = 0;
  *(_QWORD *)(v6 + 784) = 0;
  *(_BYTE *)(v6 + 800) = 0;
  *(_DWORD *)(v6 + 804) = 0;
  *(_BYTE *)(v6 + 808) = 0;
  *(_QWORD *)(v6 + 816) = 0;
  *(_WORD *)(v6 + 824) = 0;
  *(_BYTE *)(v6 + 832) = 0;
  *(_DWORD *)(v6 + 856) = 0;
  *(_BYTE *)(v6 + 860) = 0;
  *(_QWORD *)(v6 + 844) = 0;
  *(_QWORD *)(v6 + 836) = 0;
  *(_WORD *)(v6 + 852) = 0;
  *(_QWORD *)(v6 + 864) = v8;
  v12 = v6 + 872;
  *(_QWORD *)(v6 + 872) = v9;
  *(_QWORD *)(v6 + 880) = v11;
  if (v11)
  {
    v9[2] = v12;
    v18 = &v19;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    *(_QWORD *)(v6 + 864) = v12;
  }
  *(_QWORD *)(v6 + 888) = 0;
  *(_OWORD *)(v6 + 1856) = 0uLL;
  webrtc::EncoderInfoSettings::EncoderInfoSettings(v6 + 1872, *(_QWORD *)(a1 + 8), (uint64_t)"WebRTC-Av1-GetEncoderInfoOverride", 33);
  *(_QWORD *)(v7 + 1872) = &unk_24C0B3B10;
  v13 = *(_QWORD *)(a1 + 8);
  v24 = off_24C0B4170;
  __p = 0;
  v26 = 0;
  v27 = 0;
  v29 = 7;
  if (v28 <= (void **)"maxdrop" && (char *)v28 + 7 > "maxdrop")
    goto LABEL_22;
  strcpy((char *)v28, "maxdrop");
  v30 = 0;
  v24 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4020;
  v31 = 0;
  v32[0] = &v24;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v13 + 16))(&v21, v13, "WebRTC-LibaomAv1Encoder-MaxConsecFrameDrop", 42);
  if (((char)v23 & 0x80000000) == 0)
  {
    v14 = v23;
    v15 = (char *)&v21;
    goto LABEL_14;
  }
  v14 = v22;
  if (v22 < 0 || (v15 = (char *)v21, v22) && !v21)
LABEL_22:
    __break(1u);
LABEL_14:
  webrtc::ParseFieldTrial(v32, 1, v15, v14);
  if (((char)v23 & 0x80000000) == 0)
  {
    v16 = v31;
    v24 = off_24C0B4170;
    if ((v29 & 0x80000000) == 0)
      goto LABEL_16;
LABEL_20:
    operator delete(v28[0]);
    v17 = __p;
    if (!__p)
      goto LABEL_18;
    goto LABEL_17;
  }
  operator delete(v21);
  v16 = v31;
  v24 = off_24C0B4170;
  if (v29 < 0)
    goto LABEL_20;
LABEL_16:
  v17 = __p;
  if (__p)
  {
LABEL_17:
    v26 = v17;
    operator delete(v17);
  }
LABEL_18:
  *(_DWORD *)(v7 + 2040) = v16;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v18, v19);
  *a3 = v7;
}

void webrtc::`anonymous namespace'::LibaomAv1Encoder::~LibaomAv1Encoder(webrtc::_anonymous_namespace_::LibaomAv1Encoder *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)*((_QWORD *)this + 111);
  if (v2)
  {
    aom_img_free(v2);
    *((_QWORD *)this + 111) = 0;
  }
  if (!*((_BYTE *)this + 18))
    goto LABEL_7;
  v3 = *((_QWORD *)this + 113);
  if (v3 && *((_QWORD *)this + 118))
  {
    (*(void (**)(void))(v3 + 32))();
    *((_QWORD *)this + 118) = 0;
    *((_QWORD *)this + 112) = 0;
    *((_QWORD *)this + 113) = 0;
    *((_DWORD *)this + 228) = 0;
    *((_BYTE *)this + 18) = 0;
LABEL_7:
    *((_BYTE *)this + 19) = 0;
    goto LABEL_9;
  }
  *((_DWORD *)this + 228) = 1;
LABEL_9:
  webrtc::EncoderInfoSettings::~EncoderInfoSettings((webrtc::_anonymous_namespace_::LibaomAv1Encoder *)((char *)this + 1872));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 864, *((_QWORD **)this + 109));
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)*((_QWORD *)this + 111);
  if (v2)
  {
    aom_img_free(v2);
    *((_QWORD *)this + 111) = 0;
  }
  if (*((_BYTE *)this + 18))
  {
    v3 = *((_QWORD *)this + 113);
    if (!v3 || !*((_QWORD *)this + 118))
    {
      *((_DWORD *)this + 228) = 1;
LABEL_9:
      webrtc::EncoderInfoSettings::~EncoderInfoSettings((webrtc::_anonymous_namespace_::LibaomAv1Encoder *)((char *)this + 1872));
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 864, *((_QWORD **)this + 109));
      v4 = *((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      JUMPOUT(0x20BD0ADECLL);
    }
    (*(void (**)(void))(v3 + 32))();
    *((_QWORD *)this + 118) = 0;
    *((_QWORD *)this + 112) = 0;
    *((_QWORD *)this + 113) = 0;
    *((_DWORD *)this + 228) = 0;
    *((_BYTE *)this + 18) = 0;
  }
  *((_BYTE *)this + 19) = 0;
  goto LABEL_9;
}

uint64_t webrtc::`anonymous namespace'::LibaomAv1Encoder::InitEncode(uint64_t a1, void *__src, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v74;
  int v76;
  int v78;
  int v79;
  _QWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  uint64x2_t v83;
  uint64_t v84;
  int32x2_t v85;
  uint64_t v86;
  uint64_t CpuSpeed;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int32x2_t v150;
  int32x2_t v151;
  int32x2_t v152;
  uint64_t v153;
  __int128 *v154;
  uint64_t v155;
  _OWORD *v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  int *v161;
  int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  long double v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  BOOL v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD v326[3];
  uint64_t v327;
  uint64_t v328;

  if (!__src)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 4294967292;
LABEL_30:
    rtc::webrtc_logging_impl::Log("\r\t", v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
    return 4294967292;
  }
  if (*(int *)(a3 + 4) < 1)
    return 4294967292;
  if (!*(_BYTE *)(a1 + 18))
  {
LABEL_13:
    memcpy((void *)(a1 + 480), __src, 0x17DuLL);
    if (!*(_WORD *)(a1 + 484))
      goto LABEL_29;
    goto LABEL_14;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
  v13 = *(_QWORD **)(a1 + 888);
  if (v13)
  {
    aom_img_free(v13);
    *(_QWORD *)(a1 + 888) = 0;
  }
  if (!*(_BYTE *)(a1 + 18))
  {
LABEL_12:
    *(_BYTE *)(a1 + 19) = 0;
    goto LABEL_13;
  }
  v14 = *(_QWORD *)(a1 + 904);
  if (v14 && *(_QWORD *)(a1 + 944))
  {
    (*(void (**)(void))(v14 + 32))();
    *(_QWORD *)(a1 + 944) = 0;
    *(_QWORD *)(a1 + 896) = 0;
    *(_QWORD *)(a1 + 904) = 0;
    *(_DWORD *)(a1 + 912) = 0;
    *(_BYTE *)(a1 + 18) = 0;
    goto LABEL_12;
  }
  *(_DWORD *)(a1 + 912) = 1;
  memcpy((void *)(a1 + 480), __src, 0x17DuLL);
  if (!*(_WORD *)(a1 + 484))
    goto LABEL_29;
LABEL_14:
  if (!*(_WORD *)(a1 + 486)
    || (v15 = *(_DWORD *)(a1 + 492), v16 = *(_DWORD *)(a1 + 496), v15) && v16 > v15
    || (v17 = *(_DWORD *)(a1 + 488), v15) && v17 > v15
    || v17 < v16
    || !*(_DWORD *)(a1 + 500)
    || (*(_DWORD *)(a1 + 508) - 64) <= 0xFFFFFFC9)
  {
LABEL_29:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 4294967292;
    goto LABEL_30;
  }
  if (*(unsigned __int8 *)(a1 + 512) < 2u)
  {
    v33 = *(unsigned __int16 *)(a1 + 852);
    *(_WORD *)(a1 + 16) = v33;
    if (v33 < 0x100)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v34, v35, v36, v37, v38, v39, v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
      LOBYTE(v33) = 0;
      *(_WORD *)(a1 + 16) = 256;
    }
    webrtc::CreateScalabilityStructure(v33, &v328);
    v41 = v328;
    v328 = 0;
    v42 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v41;
    if (v42)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      v43 = v328;
      v328 = 0;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      v41 = *(_QWORD *)(a1 + 8);
    }
    if (v41)
    {
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v41 + 16))(v326);
      v44 = LODWORD(v326[0]);
      v45 = HIDWORD(v326[0]);
      if (SLODWORD(v326[0]) <= 1 && SHIDWORD(v326[0]) <= 1)
      {
        if (*(_BYTE *)(a1 + 476))
          *(_BYTE *)(a1 + 476) = 0;
LABEL_45:
        aom_codec_enc_config_default((uint64_t)&aom_codec_av1_cx_algo, (char *)(a1 + 952), 1);
        if (v46)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            goto LABEL_82;
          return 0xFFFFFFFFLL;
        }
        v69 = *(unsigned __int16 *)(a1 + 484);
        *(_DWORD *)(a1 + 964) = v69;
        v70 = *(unsigned __int16 *)(a1 + 486);
        *(_DWORD *)(a1 + 968) = v70;
        v71 = *(_DWORD *)(a3 + 4);
        v72 = v70 * v69;
        if (v71 > 2 && v72 >> 8 > 0xE0)
          v74 = 2;
        else
          v74 = 1;
        if (v72 >> 10 < 0xE1 || v71 <= 4)
          v76 = v74;
        else
          v76 = 4;
        if (v72 <= 0xE1000 || v71 <= 8)
          v78 = v76;
        else
          v78 = 8;
        *(_DWORD *)(a1 + 956) = v78;
        *(_DWORD *)(a1 + 1088) = *(_DWORD *)(a1 + 488);
        if (*(_BYTE *)(a1 + 860))
          v79 = 30;
        else
          v79 = 0;
        *(_DWORD *)(a1 + 1012) = v79;
        *(_DWORD *)(a1 + 1136) = 0;
        *(_DWORD *)(a1 + 1092) = 10;
        *(_DWORD *)(a1 + 1096) = *(_DWORD *)(a1 + 508);
        *(_DWORD *)(a1 + 1116) = 600;
        *(_OWORD *)(a1 + 1100) = xmmword_208F0B530;
        *(_DWORD *)(a1 + 952) = 1;
        *(_OWORD *)(a1 + 988) = xmmword_208F0B540;
        *(_DWORD *)(a1 + 1048) = 1;
        *(_QWORD *)(a1 + 1004) = 0;
        v80 = *(_QWORD **)(a1 + 888);
        if (v80)
        {
          aom_img_free(v80);
          *(_QWORD *)(a1 + 888) = 0;
        }
        if (aom_codec_enc_init_ver(a1 + 896, (uint64_t)&aom_codec_av1_cx_algo, a1 + 952, 0, 29))
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
LABEL_82:
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v47, v48, v49, v50, v51, v52, v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
            return 0xFFFFFFFFLL;
          }
          return 0xFFFFFFFFLL;
        }
        *(_BYTE *)(a1 + 18) = 1;
                35,
                0,
                v98,
                v99,
                v100,
                v101,
                v102)
                40,
                3,
                v113,
                v114,
                v115,
                v116,
                v117)
                127,
                3,
                v128,
                v129,
                v130,
                v131,
                v132)
        {
          return 0xFFFFFFFFLL;
        }
        v54 = a1;
        if (*((_DWORD *)__src + 81) == 1)
        {
          {
            return 0xFFFFFFFFLL;
          }
          goto LABEL_134;
        }
LABEL_133:
LABEL_134:
        if (!*((_DWORD *)__src + 81))
        {
          if (*(_BYTE *)(a1 + 860))
          {
            v174 = *(unsigned int *)(a1 + 2040);
            if ((int)v174 >= 1
            {
              return 0xFFFFFFFFLL;
            }
          }
        }
        v163 = *(_DWORD *)(a1 + 956);
        if (v163 == 4)
        {
          {
            return 0xFFFFFFFFLL;
          }
        }
        else if (v163 == 8)
        {
          {
            return 0xFFFFFFFFLL;
          }
        }
        else
        {
          v180 = log2((double)v163);
        }
               42,
               0,
               v191,
               v192,
               v193,
               v194,
               v195)
               84,
               0,
               v206,
               v207,
               v208,
               v209,
               v210))
        {
          v217 = *(_DWORD *)(a1 + 968) * *(_DWORD *)(a1 + 964);
          v218 = v217 >= 2073600 || v217 <= 518399;
          v219 = v218 || *(_DWORD *)(a1 + 956) <= 3;
          v220 = v219 ? 2 : 0;
                 99,
                 0,
                 v226,
                 v227,
                 v228,
                 v229,
                 v230)
                 121,
                 1,
                 v241,
                 v242,
                 v243,
                 v244,
                 v245)
                 92,
                 0,
                 v256,
                 v257,
                 v258,
                 v259,
                 v260)
                 94,
                 0,
                 v271,
                 v272,
                 v273,
                 v274,
                 v275)
                 88,
                 0,
                 v286,
                 v287,
                 v288,
                 v289,
                 v290)
                 73,
                 0,
                 v301,
                 v302,
                 v303,
                 v304,
                 v305)
                 80,
                 0,
                 v316,
                 v317,
                 v318,
                 v319,
                 v320))
          {
          }
        }
        return 0xFFFFFFFFLL;
      }
      if ((LODWORD(v326[0]) - 5) <= 0xFFFFFFFB)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          return 0xFFFFFFFFLL;
LABEL_56:
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v62, v63, v64, v65, v66, v67, v68, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
        return 0xFFFFFFFFLL;
      }
      if ((HIDWORD(v326[0]) - 9) <= 0xFFFFFFF7)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          return 0xFFFFFFFFLL;
        goto LABEL_56;
      }
      *(_OWORD *)(a1 + 156) = 0u;
      v81 = (_DWORD *)(a1 + 156);
      *(_OWORD *)(a1 + 444) = 0u;
      *(_OWORD *)(a1 + 460) = 0u;
      *(_OWORD *)(a1 + 412) = 0u;
      *(_OWORD *)(a1 + 428) = 0u;
      *(_OWORD *)(a1 + 380) = 0u;
      *(_OWORD *)(a1 + 396) = 0u;
      *(_OWORD *)(a1 + 348) = 0u;
      *(_OWORD *)(a1 + 364) = 0u;
      *(_OWORD *)(a1 + 316) = 0u;
      *(_OWORD *)(a1 + 332) = 0u;
      *(_OWORD *)(a1 + 284) = 0u;
      *(_OWORD *)(a1 + 300) = 0u;
      *(_OWORD *)(a1 + 236) = 0u;
      *(_OWORD *)(a1 + 252) = 0u;
      *(_OWORD *)(a1 + 204) = 0u;
      *(_OWORD *)(a1 + 220) = 0u;
      *(_OWORD *)(a1 + 172) = 0u;
      *(_OWORD *)(a1 + 188) = 0u;
      *(_OWORD *)(a1 + 124) = 0u;
      *(_OWORD *)(a1 + 140) = 0u;
      *(_OWORD *)(a1 + 92) = 0u;
      *(_OWORD *)(a1 + 108) = 0u;
      *(_OWORD *)(a1 + 60) = 0u;
      *(_OWORD *)(a1 + 76) = 0u;
      *(_OWORD *)(a1 + 28) = 0u;
      *(_OWORD *)(a1 + 44) = 0u;
      *(_OWORD *)(a1 + 268) = 0u;
      *(_BYTE *)(a1 + 476) = 1;
      v82 = (v45 * v44);
      *(_DWORD *)(a1 + 20) = v44;
      *(_DWORD *)(a1 + 24) = v45;
      do
      {
        *v81 = 10;
        *(v81 - 32) = *(_DWORD *)(a1 + 508);
        ++v81;
        --v82;
      }
      while (v82);
      if ((int)v45 < 1)
      {
LABEL_123:
        if ((int)v44 < 1)
          goto LABEL_45;
        if (v44 >= 4)
        {
          v153 = v44 & 0x7FFFFFFC;
          v154 = (__int128 *)&v327;
          v155 = v44 & 0xFFFFFFFC;
          v156 = (_OWORD *)(a1 + 284);
          do
          {
            *v156 = *(v154 - 1);
            v157 = *v154++;
            v156[1] = v157;
            ++v156;
            v155 -= 4;
          }
          while (v155);
          if (v153 == v44)
            goto LABEL_45;
        }
        else
        {
          v153 = 0;
        }
        v158 = v44 - v153;
        v159 = 4 * v153;
        v160 = (_DWORD *)(4 * v153 + a1 + 300);
        v161 = (int *)((char *)&v326[3] + v159 + 4);
        do
        {
          *(v160 - 4) = *(v161 - 4);
          v162 = *v161++;
          *v160++ = v162;
          --v158;
        }
        while (v158);
        goto LABEL_45;
      }
      v83 = (uint64x2_t)vdupq_n_s64(v45 - 1);
      v84 = v45 + 1;
      v85 = vmovn_s64((int64x2_t)vcgeq_u64(v83, (uint64x2_t)xmmword_208F05120));
      if ((v85.i8[0] & 1) != 0)
      {
        *(_DWORD *)(a1 + 444) = 1 << (v45 - 1);
        v86 = v84 & 0x1FFFFFFFELL;
        if ((v85.i8[4] & 1) == 0)
          goto LABEL_89;
      }
      else
      {
        v86 = v84 & 0x1FFFFFFFELL;
        if ((v85.i8[4] & 1) == 0)
        {
LABEL_89:
          if (v86 == 2)
            goto LABEL_123;
LABEL_107:
          v150 = vmovn_s64((int64x2_t)vcgtq_u64(v83, (uint64x2_t)xmmword_208F08A50));
          if ((v150.i8[0] & 1) != 0)
          {
            *(_DWORD *)(a1 + 452) = 1 << (v45 - 3);
            if ((v150.i8[4] & 1) == 0)
              goto LABEL_109;
          }
          else if ((v150.i8[4] & 1) == 0)
          {
LABEL_109:
            if (v86 == 4)
              goto LABEL_123;
LABEL_113:
            v151 = vmovn_s64((int64x2_t)vcgtq_u64(v83, (uint64x2_t)xmmword_208F0B510));
            if ((v151.i8[0] & 1) != 0)
            {
              *(_DWORD *)(a1 + 460) = 1 << (v45 - 5);
              if ((v151.i8[4] & 1) == 0)
                goto LABEL_115;
            }
            else if ((v151.i8[4] & 1) == 0)
            {
LABEL_115:
              if (v86 == 6)
                goto LABEL_123;
              goto LABEL_119;
            }
            *(_DWORD *)(a1 + 464) = 1 << (v45 - 6);
            if (v86 == 6)
              goto LABEL_123;
LABEL_119:
            v152 = vmovn_s64((int64x2_t)vcgtq_u64(v83, (uint64x2_t)xmmword_208F0B520));
            if ((v152.i8[0] & 1) != 0)
              *(_DWORD *)(a1 + 468) = 1 << (v45 - 7);
            if ((v152.i8[4] & 1) != 0)
              *(_DWORD *)(a1 + 472) = 1 << (v45 - 8);
            goto LABEL_123;
          }
          *(_DWORD *)(a1 + 456) = 1 << (v45 - 4);
          if (v86 == 4)
            goto LABEL_123;
          goto LABEL_113;
        }
      }
      *(_DWORD *)(a1 + 448) = 1 << (v45 - 2);
      if (v86 == 2)
        goto LABEL_123;
      goto LABEL_107;
    }
    v54 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
    if ((v54 & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 17))
      {
        __break(1u);
        goto LABEL_133;
      }
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v55, v56, v57, v58, v59, v60, v61, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
    }
    return 4294967292;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
  return 0;
}

uint64_t webrtc::`anonymous namespace'::LibaomAv1Encoder::RegisterEncodeCompleteCallback(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 1856) = a2;
  return 0;
}

uint64_t webrtc::`anonymous namespace'::LibaomAv1Encoder::Release(webrtc::_anonymous_namespace_::LibaomAv1Encoder *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (_QWORD *)*((_QWORD *)this + 111);
  if (v2)
  {
    aom_img_free(v2);
    *((_QWORD *)this + 111) = 0;
  }
  if (!*((_BYTE *)this + 18))
    goto LABEL_7;
  v3 = *((_QWORD *)this + 113);
  if (v3 && *((_QWORD *)this + 118))
  {
    (*(void (**)(void))(v3 + 32))();
    *((_QWORD *)this + 118) = 0;
    *((_QWORD *)this + 112) = 0;
    *((_QWORD *)this + 113) = 0;
    *((_DWORD *)this + 228) = 0;
    *((_BYTE *)this + 18) = 0;
LABEL_7:
    result = 0;
    *((_BYTE *)this + 19) = 0;
    return result;
  }
  *((_DWORD *)this + 228) = 1;
  return 4294967293;
}

uint64_t webrtc::`anonymous namespace'::LibaomAv1Encoder::Encode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  int v19;
  void **v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  void **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  unsigned int *v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  unsigned int *v94;
  _BYTE *v95;
  _BYTE *v96;
  unsigned int *v97;
  _BYTE *v98;
  _BYTE *v99;
  unsigned int *v100;
  _BYTE *v101;
  _BYTE *v102;
  unsigned int *v103;
  _BYTE *v104;
  _BYTE *v105;
  unsigned int *v106;
  _BYTE *v107;
  _BYTE *v108;
  _DWORD *v109;
  _BYTE *v110;
  _BYTE *v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t cx_data;
  uint64_t v126;
  int v127;
  __int128 v128;
  __int128 v129;
  size_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  const void *v141;
  uint64_t v142;
  void *v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  int v160;
  __int128 v161;
  __int128 v162;
  int v163;
  unsigned int *v164;
  void **v165;
  uint64_t v166;
  void **v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  int *v185;
  uint64_t v186;
  _OWORD *v187;
  __int128 *v188;
  uint64_t v189;
  __int128 v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  void **v194;
  uint64_t v195;
  void **v196;
  void *v197;
  unint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  char *v204;
  void **v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  __int128 *v232;
  int v233;
  char *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  _QWORD v243[2];
  uint64_t v244;
  unint64_t v245;
  char v246;
  int v247;
  char v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  char v253;
  char v254;
  uint64_t v255;
  _QWORD v256[2];
  char v257;
  uint64_t v258;
  char v259;
  int v260;
  char v261;
  int v262;
  char v263;
  _QWORD *v264;
  _QWORD v265[2];
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  char v270;
  char v271;
  char v272;
  char v273;
  uint64_t v274;
  __int16 v275;
  void *v276;
  void **v277;
  uint64_t v278;
  char v279;
  void *v280;
  void *v281;
  char v282;
  void *v283;
  void *v284;
  char v285;
  void *v286;
  void *v287;
  void *v288;
  void *__p;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  _OWORD v293[2];
  uint64_t v294;
  char v295;
  unint64_t v296;
  char v297;
  void *v298;
  char v299;
  void *v300;
  char v301;
  void *v302;
  char v303;
  void *v304;
  void *v305;
  char v306;
  _BYTE v307[24];
  void *v308;
  unint64_t v309;
  void *v310;
  unint64_t v311;
  void *v312;
  void **v313;
  char v314;
  __int16 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  uint64_t v321;
  char v322;
  unint64_t v323;
  void *v324[5];

  v324[3] = *(void **)MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 18) || !*(_QWORD *)(a1 + 1856) || !*(_BYTE *)(a1 + 19))
    return 4294967289;
  if (a3)
  {
    v5 = *(_DWORD **)a3;
    v6 = *(_DWORD **)(a3 + 8);
    if (*(_DWORD **)a3 != v6)
    {
      do
      {
        if (*v5 == 3)
          break;
        ++v5;
      }
      while (v5 != v6);
    }
  }
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 40))(&v276);
  if (v276 != v277)
  {
    v9 = *(_QWORD *)(a2 + 8);
    if (v9)
      (**(void (***)(_QWORD))v9)(*(_QWORD *)(a2 + 8));
    v324[0] = (void *)0x800000001;
    v323 = 4;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
    {
      (**(void (***)(uint64_t))v9)(v9);
      v7 = v9;
    }
    else
    {
      v17 = (void **)v324[0];
      if ((v323 & 1) == 0)
        v17 = v324;
      if (v323 >= 2)
        v18 = v17;
      else
        v18 = 0;
      (*(void (**)(__int128 *__return_ptr, uint64_t, void **, unint64_t))(*(_QWORD *)v9 + 80))(&v290, v9, v18, v323 >> 1);
      v7 = v290;
      if (!(_QWORD)v290)
        goto LABEL_35;
    }
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v20 = (void **)v324[0];
    if ((v323 & 1) == 0)
      v20 = v324;
    v21 = v323 >> 1;
    if (v323 >= 2)
    {
      v23 = 4 * v21;
      v22 = (char *)v20;
      do
      {
        if (*(_DWORD *)v22 == v19)
          goto LABEL_33;
        v22 += 4;
        v23 -= 4;
      }
      while (v23);
      v22 = (char *)v20 + 4 * v21;
    }
    else
    {
      v22 = (char *)v20;
    }
LABEL_33:
    if (v21 != (v22 - (char *)v20) >> 2 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7) == 2)
    {
LABEL_51:
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      if ((v37 - 1) < 2)
      {
        v38 = *(_DWORD **)(a1 + 888);
        if (v38)
        {
          if (*v38 == 258)
          {
LABEL_58:
            v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
            v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
            v48 = *(_QWORD *)v46;
            if (v47 != (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 888) + 40))
            {
LABEL_374:
              v207 = (*(uint64_t (**)(uint64_t))(v48 + 40))(v46);
              rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc", 623, "i420_buffer->width() == frame_for_encode_->d_w", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, v208, v209, v210, v211, v207);
              goto LABEL_375;
            }
            v49 = (*(uint64_t (**)(uint64_t))(v48 + 48))(v46);
            v50 = *(_QWORD *)v46;
            if (v49 != (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 888) + 44))
            {
LABEL_375:
              v212 = (*(uint64_t (**)(uint64_t))(v50 + 48))(v46);
              rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc", 624, "i420_buffer->height() == frame_for_encode_->d_h", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, v213, v214, v215, v216, v212);
              goto LABEL_376;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 888) + 64) = (*(uint64_t (**)(uint64_t))(v50 + 136))(v46);
            *(_QWORD *)(*(_QWORD *)(a1 + 888) + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 144))(v46);
            *(_QWORD *)(*(_QWORD *)(a1 + 888) + 80) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 152))(v46);
            *(_DWORD *)(*(_QWORD *)(a1 + 888) + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 112))(v46);
            *(_DWORD *)(*(_QWORD *)(a1 + 888) + 92) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 120))(v46);
            v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 128))(v46);
            v58 = *(_QWORD *)(a1 + 888);
LABEL_72:
            *(_DWORD *)(v58 + 96) = v51;
            v240 = (float)(90000.0 / (float)*(unsigned int *)(a1 + 500));
            *(_QWORD *)(a1 + 1864) += v240;
            v237 = v7;
            if (*(_BYTE *)(a1 + 476))
            {
              v239 = *(int *)(a1 + 20);
              if (!(_DWORD)v239)
              {
                v7 = 0;
                v76 = v237;
                goto LABEL_359;
              }
            }
            else
            {
              v239 = 1;
            }
            v236 = v9;
            v77 = 0;
            v241 = (_QWORD *)(a1 + 896);
            v78 = (void **)v276;
            v235 = (uint64_t *)(a2 + 40);
            v232 = (__int128 *)(a2 + 76);
            v7 = 4294967280;
LABEL_78:
            LOBYTE(v316) = 0;
            v322 = 0;
            if (v78 == v277 || *((_DWORD *)v78 + 2) != (_DWORD)v77)
            {
              v321 = 0;
              v319 = 0u;
              v320 = 0u;
              v317 = 0u;
              v318 = 0u;
              v316 = 0u;
              v322 = 1;
              v79 = v78;
              v78 = (void **)&v316;
              DWORD2(v316) = v77;
              v46 = v79 == v277;
              if (!*(_BYTE *)(a1 + 476))
                goto LABEL_184;
            }
            else
            {
              v79 = v78 + 11;
              v46 = v78 + 11 == v277;
              if (!*(_BYTE *)(a1 + 476))
                goto LABEL_184;
            }
            *(_QWORD *)&v290 = v78[1];
            if (aom_codec_control((uint64_t)v241, 131, v52, v53, v54, v55, v56, v57, (uint64_t)&v290)
              && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            {
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v86, v80, v81, v82, v83, v84, v85, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
            }
            v294 = 0;
            memset(v293, 0, sizeof(v293));
            v291 = 0u;
            v292 = 0u;
            v290 = 0u;
            v87 = (unint64_t)v78[2];
            v88 = v87 >> 1;
            if (v87 > 0xF)
              rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc", 511, "layer_frame.Buffers().size() <= (sizeof(::absl::macros_internal::ArraySizeHelper(kPreferedSlotName)))", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v82, v83, v84, v85, v88);
            if (v87 < 2)
            {
LABEL_181:
              if (aom_codec_control((uint64_t)v241, 133, v80, v81, v82, v83, v84, v85, (uint64_t)&v290)
                && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
              {
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v113, v114, v115, v116, v117, v118, v119, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
              }
LABEL_184:
              v120 = *(_DWORD **)(a1 + 888);
              if (!(_DWORD)v240 && v120)
                goto LABEL_186;
              v121 = *(_QWORD *)(a1 + 904);
              if (v121 && *(_QWORD *)(a1 + 944))
              {
                if ((*(_BYTE *)(v121 + 16) & 2) == 0)
                {
                  *(_DWORD *)(a1 + 912) = 4;
                  goto LABEL_192;
                }
                if (v120 && (((*(_DWORD *)(a1 + 928) >> 18) ^ (*v120 >> 11)) & 1) != 0)
                {
LABEL_186:
                  *(_DWORD *)(a1 + 912) = 8;
                  goto LABEL_192;
                }
                v124 = (*(uint64_t (**)(void))(v121 + 104))();
                *(_DWORD *)(a1 + 912) = v124;
                if (!v124)
                {
                  if (v322)
                  {
                    v123 = 5;
                    if ((v317 & 1) == 0)
                      goto LABEL_197;
                    goto LABEL_196;
                  }
                  v243[0] = 0;
                  v243[1] = 0;
                  v244 = 0;
                  v245 = 4;
                  v246 = 0;
                  v247 = -1;
                  v248 = -1;
                  v254 = 0;
                  v257 = 0;
                  LOBYTE(v258) = 0;
                  v259 = 0;
                  LOBYTE(v260) = 0;
                  v261 = 0;
                  LOBYTE(v262) = 0;
                  v263 = 0;
                  v265[0] = 0;
                  v265[1] = 0;
                  v249 = 0u;
                  v250 = 0u;
                  v251 = 0u;
                  v252 = 0u;
                  v253 = 0;
                  v255 = 0;
                  memset(v256, 0, 13);
                  v264 = v265;
                  LOBYTE(v266) = 0;
                  v271 = 0;
                  v272 = 0;
                  v273 = 0;
                  v274 = 0;
                  v275 = 1;
                  v242 = 0;
                  cx_data = aom_codec_get_cx_data((uint64_t)v241, (uint64_t)&v242);
                  if (cx_data)
                  {
                    v126 = cx_data;
                    v127 = 0;
                    v230 = a2;
                    while (1)
                    {
                      if (*(_DWORD *)v126)
                        goto LABEL_210;
                      v130 = *(_QWORD *)(v126 + 16);
                      if (!v130)
                        goto LABEL_210;
                      v233 = v127;
                      if (v127 >= 1)
                        break;
LABEL_226:
                      v141 = *(const void **)(v126 + 8);
                      v142 = operator new();
                      *(_QWORD *)(v142 + 8) = v130;
                      v143 = malloc_type_malloc(v130, 0xB64CC8DFuLL);
                      *(_QWORD *)(v142 + 16) = v143;
                      if (v130)
                        memmove(v143, v141, v130);
                      *(_QWORD *)v142 = &unk_24C0B3A40;
                      *(_DWORD *)(v142 + 24) = 0;
                      v144 = (unsigned int *)(v142 + 24);
                      do
                        v145 = __ldxr(v144);
                      while (__stxr(v145 + 1, v144));
                      rtc::RefCountedObject<webrtc::EncodedImageBuffer>::AddRef(v142);
                      a2 = v230;
                      if (v255)
                        (*(void (**)(uint64_t))(*(_QWORD *)v255 + 8))(v255);
                      v255 = v142;
                      v256[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 48))(v142);
                      (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
                      if ((*(_BYTE *)(v126 + 40) & 1) != 0)
                      {
                        *((_BYTE *)v78 + 4) = 1;
                        v152 = 3;
                      }
                      else if (*((_BYTE *)v78 + 4))
                      {
                        v152 = 3;
                      }
                      else
                      {
                        v152 = 4;
                      }
                      LODWORD(v256[1]) = *(_DWORD *)(v230 + 16);
                      v258 = *v235;
                      v259 = *((_BYTE *)v235 + 8);
                      v244 = *(_QWORD *)(v230 + 32) / 1000;
                      v245 = __PAIR64__(*(_DWORD *)(v230 + 72), v152);
                      v246 = 0;
                      if (*(_BYTE *)(a1 + 476))
                      {
                        v153 = *((_DWORD *)v78 + 2);
                        v154 = a1 + 20 + 4 * v153;
                        v155 = *(_DWORD *)(v154 + 264);
                        v156 = *(_DWORD *)(v154 + 280);
                        v157 = *(_DWORD *)(a1 + 964) * v155 / v156;
                        v158 = *(_DWORD *)(a1 + 968) * v155;
                        v261 = 1;
                        v260 = v153;
                        v159 = *((_DWORD *)v78 + 3);
                        v263 = 1;
                        v262 = v159;
                        v160 = v158 / v156;
                      }
                      else
                      {
                        v157 = *(_DWORD *)(a1 + 964);
                        v160 = *(_DWORD *)(a1 + 968);
                      }
                      v243[0] = __PAIR64__(v160, v157);
                      v248 = -1;
                      LODWORD(v290) = -1;
                      if (aom_codec_control((uint64_t)v241, 19, v146, v147, v148, v149, v150, v151, (uint64_t)&v290))
                      {
                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v169, v170, v171, v172, v173, v174, v175, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
                        v123 = 1;
                        v7 = 0xFFFFFFFFLL;
LABEL_337:
                        webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)v243);
                        if (!v322)
                        {
LABEL_197:
                          if (v123 != 5 && v123)
                          {
LABEL_355:
                            v9 = v236;
                            v76 = v237;
                            if (!v237)
                            {
LABEL_360:
                              if ((v323 & 1) != 0)
                                operator delete(v324[0]);
                              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
                              goto LABEL_363;
                            }
LABEL_359:
                            (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
                            goto LABEL_360;
                          }
                          ++v77;
                          v78 = v79;
                          if (v77 != v239)
                            goto LABEL_78;
LABEL_354:
                          v7 = 0;
                          goto LABEL_355;
                        }
LABEL_195:
                        if ((v317 & 1) == 0)
                          goto LABEL_197;
LABEL_196:
                        operator delete(*((void **)&v317 + 1));
                        goto LABEL_197;
                      }
                      v247 = v290;
                      if (v271 == *(_BYTE *)(v230 + 144))
                      {
                        if (v271)
                        {
                          v161 = v232[3];
                          v268 = v232[2];
                          v269 = v161;
                          v270 = *((_BYTE *)v232 + 64);
                          v162 = v232[1];
                          v266 = *v232;
                          v267 = v162;
                        }
                      }
                      else if (v271)
                      {
                        v271 = 0;
                      }
                      else
                      {
                        v128 = v232[3];
                        v268 = v232[2];
                        v269 = v128;
                        v270 = *((_BYTE *)v232 + 64);
                        v129 = v232[1];
                        v266 = *v232;
                        v267 = v129;
                        v271 = 1;
                      }
                      v127 = v233 + 1;
LABEL_210:
                      v126 = aom_codec_get_cx_data((uint64_t)v241, (uint64_t)&v242);
                      if (!v126)
                        goto LABEL_246;
                    }
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                    {
                      v138 = v231;
                    }
                    else
                    {
                      v138 = v231 & 0xFFFFFFFF00000000 | 0x1642;
                      rtc::webrtc_logging_impl::Log("\r\t", v131, v132, v133, v134, v135, v136, v137, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
                    }
                    v139 = *(_QWORD **)(a1 + 888);
                    if (v139)
                    {
                      aom_img_free(v139);
                      *(_QWORD *)(a1 + 888) = 0;
                    }
                    v231 = v138;
                    if (*(_BYTE *)(a1 + 18))
                    {
                      v140 = *(_QWORD *)(a1 + 904);
                      if (!v140 || !*(_QWORD *)(a1 + 944))
                      {
                        *(_DWORD *)(a1 + 912) = 1;
                        goto LABEL_225;
                      }
                      (*(void (**)(void))(v140 + 32))();
                      *(_QWORD *)(a1 + 944) = 0;
                      *v241 = 0;
                      *(_QWORD *)(a1 + 904) = 0;
                      *(_DWORD *)(a1 + 912) = 0;
                      *(_BYTE *)(a1 + 18) = 0;
                    }
                    *(_BYTE *)(a1 + 19) = 0;
LABEL_225:
                    v130 = *(_QWORD *)(v126 + 16);
                    goto LABEL_226;
                  }
LABEL_246:
                  if (!v256[0])
                    goto LABEL_336;
                  LOBYTE(v296) = 0;
                  v306 = 0;
                  v307[0] = 0;
                  v314 = 0;
                  bzero((char *)&v290 + 8, 0x658uLL);
                  LODWORD(v290) = 3;
                  v295 = v46;
                  v315 = *(_WORD *)(a1 + 16);
                  v163 = *((unsigned __int8 *)v78 + 4);
                  (*(void (**)(uint64_t *__return_ptr, _QWORD, void **))(**(_QWORD **)(a1 + 8) + 48))(&v278, *(_QWORD *)(a1 + 8), v78);
                  if (v306)
                  {
                    webrtc::GenericFrameInfo::operator=(&v296, (uint64_t)&v278);
                  }
                  else
                  {
                    webrtc::GenericFrameInfo::GenericFrameInfo((webrtc::GenericFrameInfo *)&v296, (const webrtc::GenericFrameInfo *)&v278);
                    v306 = 1;
                  }
                  v164 = (unsigned int *)(a1 + 20);
                  if (__p)
                    operator delete(__p);
                  if ((v287 & 1) != 0)
                  {
                    operator delete(v288);
                    if ((v285 & 1) == 0)
                    {
LABEL_254:
                      if ((v282 & 1) == 0)
                        goto LABEL_255;
                      goto LABEL_260;
                    }
                  }
                  else if ((v285 & 1) == 0)
                  {
                    goto LABEL_254;
                  }
                  operator delete(v286);
                  if ((v282 & 1) == 0)
                  {
LABEL_255:
                    if ((v279 & 1) == 0)
                      goto LABEL_256;
                    goto LABEL_261;
                  }
LABEL_260:
                  operator delete(v283);
                  if ((v279 & 1) == 0)
                  {
LABEL_256:
                    if (!v163)
                      goto LABEL_310;
LABEL_262:
                    if (!v306)
                      goto LABEL_310;
                    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 8) + 24))(&v278);
                    std::optional<webrtc::FrameDependencyStructure>::operator=[abi:sn180100]<webrtc::FrameDependencyStructure,void>((uint64_t)v307, (uint64_t)&v278);
                    v165 = (void **)v287;
                    if (!v287)
                    {
LABEL_279:
                      if ((v283 & 1) != 0)
                      {
                        operator delete(v284);
                        if ((v280 & 1) == 0)
                        {
LABEL_281:
                          if (!v314)
                            goto LABEL_353;
LABEL_285:
                          if (*(_BYTE *)(a1 + 476))
                          {
                            v176 = *v164;
                            if ((v176 & 0x80000000) != 0)
                              goto LABEL_353;
                            v177 = a2;
                            v178 = v309;
                            v179 = v311;
                            if ((v309 & 1) != 0)
                              v180 = (uint64_t *)v310;
                            else
                              v180 = (uint64_t *)&v310;
                            if ((v309 & 1) == 0)
                              v179 = 4;
                            v181 = v309 >> 1;
                            v182 = v176 - (v309 >> 1);
                            if (v176 > v309 >> 1)
                            {
                              if (v179 < v176)
                              {
                                v228 = v310;
                                v183 = 2 * v179;
                                if (v183 <= v176)
                                  v184 = v176;
                                else
                                  v184 = v183;
                                if (!(v184 >> 61))
                                {
                                  v229 = v184;
                                  v234 = (char *)operator new(8 * v184);
                                  bzero(&v234[8 * v181], 8 * v182);
                                  v185 = (int *)(a1 + 20);
                                  if (v178 >= 2)
                                  {
                                    v186 = 0;
                                    if (v178 < 8)
                                      goto LABEL_304;
                                    if ((unint64_t)(v234 - (char *)v180) < 0x20)
                                      goto LABEL_304;
                                    v186 = v181 & 0x7FFFFFFFFFFFFFFCLL;
                                    v187 = v234 + 16;
                                    v188 = (__int128 *)(v180 + 2);
                                    v189 = v181 & 0x7FFFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      v190 = *v188;
                                      *(v187 - 1) = *(v188 - 1);
                                      *v187 = v190;
                                      v187 += 2;
                                      v188 += 2;
                                      v189 -= 4;
                                    }
                                    while (v189);
                                    v180 += v181 & 0x7FFFFFFFFFFFFFFCLL;
                                    if (v181 != v186)
                                    {
LABEL_304:
                                      v191 = v181 - v186;
                                      v192 = &v234[8 * v186];
                                      do
                                      {
                                        v193 = *v180++;
                                        *(_QWORD *)v192 = v193;
                                        v192 += 8;
                                        --v191;
                                      }
                                      while (v191);
                                    }
                                  }
                                  if ((v178 & 1) != 0)
                                    operator delete(v228);
                                  v310 = v234;
                                  v311 = v229;
                                  LOBYTE(v178) = 1;
LABEL_346:
                                  v309 = v178 & 1 | (2 * v176);
                                  if (*(_BYTE *)(a1 + 476))
                                  {
                                    a2 = v177;
                                    v198 = 0;
                                    while ((uint64_t)v198 < *v185)
                                    {
                                      if (v198 < v309 >> 1)
                                      {
                                        v199 = a1 + 4 * v198;
                                        v200 = *(_DWORD *)(v199 + 284);
                                        LODWORD(v199) = *(_DWORD *)(v199 + 300);
                                        v201 = v200 * *(_DWORD *)(a1 + 968) / v199;
                                        v202 = *(_DWORD *)(a1 + 964) * v200 / v199;
                                        v203 = &v310;
                                        if ((v309 & 1) != 0)
                                          v203 = v310;
                                        v203[v198++] = v202 | (v201 << 32);
                                        if (*(_BYTE *)(a1 + 476))
                                          continue;
                                      }
                                      goto LABEL_353;
                                    }
                                    goto LABEL_310;
                                  }
LABEL_353:
                                  __break(1u);
                                  goto LABEL_354;
                                }
LABEL_380:
                                std::__throw_bad_array_new_length[abi:sn180100]();
                              }
                              if (!v180)
                                goto LABEL_353;
                              bzero(&v180[v181], 8 * v182);
                              LOBYTE(v178) = v309;
                            }
                            v185 = (int *)(a1 + 20);
                            goto LABEL_346;
                          }
                          v278 = *(_QWORD *)(a1 + 964);
                          absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::RenderResolution>,webrtc::RenderResolution const*>>(&v309, (uint64_t)&v278, 1uLL);
LABEL_310:
                          (*(void (**)(_QWORD, _QWORD *, __int128 *))(**(_QWORD **)(a1 + 1856) + 16))(*(_QWORD *)(a1 + 1856), v243, &v290);
                          if (!v314)
                            goto LABEL_328;
                          v194 = (void **)v312;
                          if (!v312)
                          {
LABEL_324:
                            if ((v309 & 1) != 0)
                              operator delete(v310);
                            if ((v307[16] & 1) != 0)
                              operator delete(v308);
LABEL_328:
                            if (!v306)
                              goto LABEL_336;
                            if (v305)
                              operator delete(v305);
                            if ((v303 & 1) != 0)
                            {
                              operator delete(v304);
                              if ((v301 & 1) == 0)
                              {
LABEL_333:
                                if ((v299 & 1) == 0)
                                  goto LABEL_334;
                                goto LABEL_341;
                              }
                            }
                            else if ((v301 & 1) == 0)
                            {
                              goto LABEL_333;
                            }
                            operator delete(v302);
                            if ((v299 & 1) == 0)
                            {
LABEL_334:
                              if ((v297 & 1) != 0)
LABEL_335:
                                operator delete(v298);
LABEL_336:
                              v123 = 0;
                              goto LABEL_337;
                            }
LABEL_341:
                            operator delete(v300);
                            if ((v297 & 1) == 0)
                              goto LABEL_336;
                            goto LABEL_335;
                          }
                          v195 = a2;
                          v196 = v313;
                          v197 = v312;
                          if (v313 == v312)
                          {
LABEL_323:
                            v313 = v194;
                            operator delete(v197);
                            a2 = v195;
                            goto LABEL_324;
                          }
                          while (1)
                          {
                            if ((*(_BYTE *)(v196 - 3) & 1) != 0)
                            {
                              operator delete(*(v196 - 2));
                              if ((*(_BYTE *)(v196 - 6) & 1) == 0)
                              {
LABEL_317:
                                if ((*(_BYTE *)(v196 - 12) & 1) != 0)
                                  goto LABEL_321;
                                goto LABEL_314;
                              }
                            }
                            else if ((*(_BYTE *)(v196 - 6) & 1) == 0)
                            {
                              goto LABEL_317;
                            }
                            operator delete(*(v196 - 5));
                            if ((*(_BYTE *)(v196 - 12) & 1) != 0)
LABEL_321:
                              operator delete(*(v196 - 11));
LABEL_314:
                            v196 -= 13;
                            if (v196 == v194)
                            {
                              v197 = v312;
                              goto LABEL_323;
                            }
                          }
                        }
                      }
                      else if ((v280 & 1) == 0)
                      {
                        goto LABEL_281;
                      }
                      operator delete(v281);
                      if (!v314)
                        goto LABEL_353;
                      goto LABEL_285;
                    }
                    v166 = a2;
                    v167 = (void **)v288;
                    v168 = v287;
                    if (v288 == v287)
                    {
LABEL_278:
                      v288 = v165;
                      operator delete(v168);
                      a2 = v166;
                      v164 = (unsigned int *)(a1 + 20);
                      goto LABEL_279;
                    }
                    while (1)
                    {
                      if ((*(_BYTE *)(v167 - 3) & 1) != 0)
                      {
                        operator delete(*(v167 - 2));
                        if ((*(_BYTE *)(v167 - 6) & 1) == 0)
                        {
LABEL_269:
                          if ((*(_BYTE *)(v167 - 12) & 1) != 0)
                            goto LABEL_273;
                          goto LABEL_266;
                        }
                      }
                      else if ((*(_BYTE *)(v167 - 6) & 1) == 0)
                      {
                        goto LABEL_269;
                      }
                      operator delete(*(v167 - 5));
                      if ((*(_BYTE *)(v167 - 12) & 1) != 0)
LABEL_273:
                        operator delete(*(v167 - 11));
LABEL_266:
                      v167 -= 13;
                      if (v167 == v165)
                      {
                        v168 = v287;
                        goto LABEL_278;
                      }
                    }
                  }
LABEL_261:
                  operator delete(v280);
                  if (!v163)
                    goto LABEL_310;
                  goto LABEL_262;
                }
              }
              else
              {
                *(_DWORD *)(a1 + 912) = 1;
              }
LABEL_192:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
              {
                v238 = v238 & 0xFFFFFFFF00000000 | 0x15BA;
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v122, v52, v53, v54, v55, v56, v57, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
              }
              v7 = 0xFFFFFFFFLL;
              v123 = 1;
              if (!v322)
                goto LABEL_197;
              goto LABEL_195;
            }
            v90 = (unsigned int *)(v78 + 3);
            v89 = (char *)v78[3];
            if (v88 <= 1)
              v88 = 1;
            if ((v87 & 1) != 0)
              v90 = (unsigned int *)v78[3];
            v91 = *v90;
            if ((v91 & 0x80000000) == 0)
            {
              if (v91 >= 8)
                goto LABEL_373;
              HIDWORD(v291) = v91;
              v92 = (char *)v78 + 28;
              if ((v87 & 1) != 0)
                v92 = v89 + 4;
              if (*v92)
                LODWORD(v290) = 1;
              v93 = (char *)v78 + 29;
              if ((v87 & 1) != 0)
                v93 = v89 + 5;
              if (*v93)
                *((_DWORD *)v293 + v91 + 2) = 1;
              if (v87 < 4)
                goto LABEL_181;
              v94 = (unsigned int *)(v78 + 4);
              if ((v87 & 1) != 0)
                v94 = (unsigned int *)(v89 + 8);
              v91 = *v94;
              if ((v91 & 0x80000000) == 0)
              {
                if (v91 > 7)
                  goto LABEL_373;
                DWORD2(v292) = v91;
                v95 = (char *)v78 + 36;
                if ((v87 & 1) != 0)
                  v95 = v89 + 12;
                if (*v95)
                  HIDWORD(v290) = 1;
                v96 = (char *)v78 + 37;
                if ((v87 & 1) != 0)
                  v96 = v89 + 13;
                if (*v96)
                  *((_DWORD *)v293 + v91 + 2) = 1;
                if (v88 == 2)
                  goto LABEL_181;
                v97 = (unsigned int *)(v78 + 5);
                if ((v87 & 1) != 0)
                  v97 = (unsigned int *)(v89 + 16);
                v91 = *v97;
                if ((v91 & 0x80000000) == 0)
                {
                  if (v91 > 7)
                    goto LABEL_373;
                  LODWORD(v292) = v91;
                  v98 = (char *)v78 + 44;
                  if ((v87 & 1) != 0)
                    v98 = v89 + 20;
                  if (*v98)
                    DWORD1(v290) = 1;
                  v99 = (char *)v78 + 45;
                  if ((v87 & 1) != 0)
                    v99 = v89 + 21;
                  if (*v99)
                    *((_DWORD *)v293 + v91 + 2) = 1;
                  if (v88 == 3)
                    goto LABEL_181;
                  v100 = (unsigned int *)(v78 + 6);
                  if ((v87 & 1) != 0)
                    v100 = (unsigned int *)(v89 + 24);
                  v91 = *v100;
                  if ((v91 & 0x80000000) == 0)
                  {
                    if (v91 > 7)
                      goto LABEL_373;
                    DWORD1(v292) = v91;
                    v101 = (char *)v78 + 52;
                    if ((v87 & 1) != 0)
                      v101 = v89 + 28;
                    if (*v101)
                      DWORD2(v290) = 1;
                    v102 = (char *)v78 + 53;
                    if ((v87 & 1) != 0)
                      v102 = v89 + 29;
                    if (*v102)
                      *((_DWORD *)v293 + v91 + 2) = 1;
                    if (v88 == 4)
                      goto LABEL_181;
                    v103 = (unsigned int *)(v78 + 7);
                    if ((v87 & 1) != 0)
                      v103 = (unsigned int *)(v89 + 32);
                    v91 = *v103;
                    if ((v91 & 0x80000000) == 0)
                    {
                      if (v91 > 7)
                        goto LABEL_373;
                      HIDWORD(v292) = v91;
                      v104 = (char *)v78 + 60;
                      if ((v87 & 1) != 0)
                        v104 = v89 + 36;
                      if (*v104)
                        LODWORD(v291) = 1;
                      v105 = (char *)v78 + 61;
                      if ((v87 & 1) != 0)
                        v105 = v89 + 37;
                      if (*v105)
                        *((_DWORD *)v293 + v91 + 2) = 1;
                      if (v88 == 5)
                        goto LABEL_181;
                      v106 = (unsigned int *)(v78 + 8);
                      if ((v87 & 1) != 0)
                        v106 = (unsigned int *)(v89 + 40);
                      v91 = *v106;
                      if ((v91 & 0x80000000) == 0)
                      {
                        if (v91 <= 7)
                        {
                          LODWORD(v293[0]) = v91;
                          v107 = (char *)v78 + 68;
                          if ((v87 & 1) != 0)
                            v107 = v89 + 44;
                          if (*v107)
                            DWORD1(v291) = 1;
                          v108 = (char *)v78 + 69;
                          if ((v87 & 1) != 0)
                            v108 = v89 + 45;
                          if (*v108)
                            *((_DWORD *)v293 + v91 + 2) = 1;
                          if (v88 == 6)
                            goto LABEL_181;
                          v109 = v78 + 9;
                          if ((v87 & 1) != 0)
                            v109 = v89 + 48;
                          v91 = *v109;
                          if ((v91 & 0x80000000) == 0)
                          {
                            if (v91 <= 7)
                            {
                              DWORD1(v293[0]) = *v109;
                              v110 = (char *)v78 + 76;
                              if ((v87 & 1) != 0)
                                v110 = v89 + 52;
                              if (*v110)
                                DWORD2(v291) = 1;
                              v111 = v89 + 53;
                              if ((v87 & 1) != 0)
                                v112 = v111;
                              else
                                v112 = (char *)v78 + 77;
                              if (*v112)
                                *((_DWORD *)v293 + v91 + 2) = 1;
                              goto LABEL_181;
                            }
                            goto LABEL_373;
                          }
                          goto LABEL_372;
                        }
LABEL_373:
                        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc", 516, "buffer.id < kAv1NumBuffers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v82, v83, v84, v85, v91);
                        goto LABEL_374;
                      }
                    }
                  }
                }
              }
            }
LABEL_372:
            rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc", 515, "buffer.id >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v82, v83, v84, v85, v91);
            goto LABEL_373;
          }
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t\t", v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
          aom_img_free(*(_QWORD **)(a1 + 888));
        }
        *(_QWORD *)(a1 + 888) = img_alloc_helper_0(0, 258, *(_DWORD *)(a1 + 964), *(_DWORD *)(a1 + 968), 1u, 1u, 1u, 0, 0, 0, 0);
        goto LABEL_58;
      }
      if (v37 != 8)
      {
        v76 = v7;
        v7 = 4294967280;
        goto LABEL_359;
      }
      v59 = *(_DWORD **)(a1 + 888);
      if (v59)
      {
        if (*v59 == 263)
        {
LABEL_68:
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7) != 8)
          {
LABEL_376:
            rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_frame_buffer.cc", 74, "type() == Type::kNV12", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v67, v68, v69, v70, v227);
            goto LABEL_377;
          }
          v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          v72 = *(_QWORD *)v7;
          if (v71 != (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 888) + 40))
          {
LABEL_377:
            v217 = (*(uint64_t (**)(uint64_t))(v72 + 40))(v7);
            rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc", 640, "nv12_buffer->width() == frame_for_encode_->d_w", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, v218, v219, v220, v221, v217);
            goto LABEL_378;
          }
          v73 = (*(uint64_t (**)(uint64_t))(v72 + 48))(v7);
          v74 = *(_QWORD *)v7;
          if (v73 != (unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 888) + 44))
          {
LABEL_378:
            v222 = (*(uint64_t (**)(uint64_t))(v74 + 48))(v7);
            rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc", 641, "nv12_buffer->height() == frame_for_encode_->d_h", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, v223, v224, v225, v226, v222);
LABEL_379:
            rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc", 611, "converted_buffer->type() == VideoFrameBuffer::Type::kI420 || converted_buffer->type() == VideoFrameBuffer::Type::kI420A", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v25, v26, v27, v28, v227);
            goto LABEL_380;
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 888) + 64) = (*(uint64_t (**)(uint64_t))(v74 + 128))(v7);
          *(_QWORD *)(*(_QWORD *)(a1 + 888) + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 136))(v7);
          *(_QWORD *)(*(_QWORD *)(a1 + 888) + 80) = 0;
          *(_DWORD *)(*(_QWORD *)(a1 + 888) + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 112))(v7);
          v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7);
          v51 = 0;
          v58 = *(_QWORD *)(a1 + 888);
          *(_DWORD *)(v58 + 92) = v75;
          goto LABEL_72;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t\t", v60, v61, v62, v63, v64, v65, v66, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
        aom_img_free(*(_QWORD **)(a1 + 888));
      }
      *(_QWORD *)(a1 + 888) = img_alloc_helper_0(0, 263, *(_DWORD *)(a1 + 964), *(_DWORD *)(a1 + 968), 1u, 1u, 1u, 0, 0, 0, 0);
      goto LABEL_68;
    }
LABEL_35:
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v9 + 56))(&v290, v9);
    v24 = v290;
    if ((_QWORD)v290)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v290 + 32))(v290) != 1
        && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v290 + 32))(v290) != 2)
      {
        goto LABEL_379;
      }
      v29 = v290;
      if ((_QWORD)v290)
        (**(void (***)(_QWORD))v290)(v290);
      if (!v7)
        goto LABEL_47;
    }
    else
    {
      v29 = v7;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      {
LABEL_47:
        if ((_QWORD)v290)
          (*(void (**)(_QWORD))(*(_QWORD *)v290 + 8))(v290);
        if (!v24)
        {
          v7 = 4294967280;
          v76 = v29;
          if (!v29)
            goto LABEL_360;
          goto LABEL_359;
        }
        v7 = v29;
        goto LABEL_51;
      }
      v7 = *(_QWORD *)(a2 + 8);
      if (v7)
        (**(void (***)(_QWORD))v7)(*(_QWORD *)(a2 + 8));
      (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      rtc::webrtc_logging_impl::Log("\r\t\t\t", v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    goto LABEL_47;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
  v7 = 0xFFFFFFFFLL;
LABEL_363:
  v204 = (char *)v276;
  if (v276)
  {
    v205 = v277;
    v206 = v276;
    if (v277 != v276)
    {
      do
      {
        if ((*(_BYTE *)(v205 - 9) & 1) != 0)
          operator delete(*(v205 - 8));
        v205 -= 11;
      }
      while (v205 != (void **)v204);
      v206 = v276;
    }
    v277 = (void **)v204;
    operator delete(v206);
  }
  return v7;
}

void webrtc::`anonymous namespace'::LibaomAv1Encoder::SetRates(webrtc::_anonymous_namespace_::LibaomAv1Encoder *this, const webrtc::VideoEncoder::RateControlParameters *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::string *v46;

  if (!*((_BYTE *)this + 18))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
    goto LABEL_40;
  }
  if (*((double *)a2 + 43) < 1.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\a\t\a", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
    return;
  }
  v17 = (_DWORD *)((char *)a2 + 176);
  if (!*((_DWORD *)a2 + 44))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
LABEL_40:
    rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
    return;
  }
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), (char *)a2 + 176);
  *((_DWORD *)this + 272) = *v17 / 0x3E8u;
  v19 = *((_QWORD *)this + 113);
  if (v19 && *((_QWORD *)this + 118))
  {
    if ((*(_BYTE *)(v19 + 16) & 2) != 0)
    {
      v45 = (*(uint64_t (**)(void))(v19 + 120))();
      *((_DWORD *)this + 228) = v45;
      if (!v45)
        goto LABEL_15;
    }
    else
    {
      *((_DWORD *)this + 228) = 4;
    }
  }
  else
  {
    *((_DWORD *)this + 228) = 8;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
LABEL_15:
  if (!*((_BYTE *)this + 476))
  {
LABEL_37:
    *((_BYTE *)this + 19) = 1;
    *((_DWORD *)this + 125) = (*((double *)a2 + 43) + 0.5);
    return;
  }
  v27 = (int *)((char *)this + 20);
  v28 = *((_DWORD *)this + 5);
  if (v28 < 1)
  {
LABEL_34:
    if (aom_codec_control((uint64_t)this + 896, 132, v21, v22, v23, v24, v25, v26, (uint64_t)this + 20)
      && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
    }
    goto LABEL_37;
  }
  v29 = 0;
  v30 = *((_DWORD *)this + 6);
  v31 = (char *)a2 + 208;
  while (1)
  {
    if (v30 < 1)
      goto LABEL_20;
    if ((unint64_t)v29 > 4)
      break;
    v32 = *(v31 - 24);
    if (*(v31 - 24))
      v32 = *((_DWORD *)v31 - 7);
    v27[v30 * (int)v29 + 74] = v32 / 1000;
    v30 = *((_DWORD *)this + 6);
    if (v30 >= 2)
    {
      v33 = *(v31 - 16);
      if (*(v31 - 16))
        v33 = *((_DWORD *)v31 - 5);
      v34 = v33 + v32;
      v27[v30 * (int)v29 + 75] = v34 / 1000;
      v30 = *((_DWORD *)this + 6);
      if (v30 >= 3)
      {
        v35 = *(v31 - 8);
        if (*(v31 - 8))
          v35 = *((_DWORD *)v31 - 3);
        v36 = v35 + v34;
        v27[v30 * (int)v29 + 76] = v36 / 1000;
        v30 = *((_DWORD *)this + 6);
        if (v30 >= 4)
        {
          v37 = *v31;
          if (*v31)
            v37 = *((_DWORD *)v31 - 1);
          v27[v30 * (int)v29 + 77] = (v37 + v36) / 1000;
          v30 = *((_DWORD *)this + 6);
          if (v30 > 4)
            goto LABEL_44;
        }
      }
    }
    v28 = *v27;
LABEL_20:
    ++v29;
    v31 += 32;
    if (v29 >= v28)
      goto LABEL_34;
  }
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 54, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v23, v24, v25, v26, v29);
LABEL_44:
  v46 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 55, "temporal_index < kMaxTemporalStreams", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v23, v24, v25, v26, 4);
}

void webrtc::`anonymous namespace'::LibaomAv1Encoder::GetEncoderInfo(webrtc::_anonymous_namespace_::LibaomAv1Encoder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char v33;
  unint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  size_t v38;
  char *v39;
  char *v40;
  void *v41;
  void **v42;
  _QWORD *v43;
  size_t v44;
  char *v45;
  uint64_t v46;
  _QWORD v47[2];

  v3 = a2;
  v47[1] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 12) = 0x10000E100;
  *(_WORD *)(a2 + 20) = 0;
  v4 = a2 + 24;
  *(_BYTE *)(v3 + 47) = 7;
  if (v4 <= (unint64_t)"unknown" && v3 + 31 > (unint64_t)"unknown")
LABEL_57:
    __break(1u);
  *(_QWORD *)(v3 + 176) = 0;
  *(_BYTE *)(v3 + 31) = 0;
  *(_BYTE *)(v3 + 64) = -1;
  *(_QWORD *)(v3 + 56) = 2;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 208) = 2;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_BYTE *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 216) = 1;
  *(_WORD *)(v3 + 240) = 0;
  *(_BYTE *)(v3 + 21) = 0;
  *(_BYTE *)(v3 + 47) = 6;
  *(_DWORD *)v4 = 1633839468;
  *(_WORD *)(v4 + 4) = 28015;
  *(_BYTE *)(v3 + 30) = 0;
  v42 = (void **)(v3 + 176);
  *(_WORD *)(v3 + 48) = 1;
  if (*((_BYTE *)this + 18) && (v5 = *((_BYTE *)this + 836)) == 0)
  {
    v6 = 0xCD00000000;
  }
  else
  {
    v5 = 1;
    v6 = 0xCD00000091;
  }
  *(_QWORD *)v3 = v6;
  *(_BYTE *)(v3 + 8) = v5;
  *(_DWORD *)(v3 + 12) = 57600;
  v47[0] = 0x800000001;
  absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type,5ul,std::allocator<webrtc::VideoFrameBuffer::Type>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::VideoFrameBuffer::Type>,webrtc::VideoFrameBuffer::Type const*>>((unint64_t *)(v3 + 208), (uint64_t)v47, 2uLL);
  if (*((_BYTE *)this + 476) && *((int *)this + 5) >= 1)
  {
    v7 = 0;
    v8 = *((_DWORD *)this + 6);
    v46 = v3;
    do
    {
      if (v8 < 0)
        goto LABEL_57;
      v9 = (_QWORD *)(v3 + 24 * v7);
      v10 = v9 + 7;
      v12 = (void **)(v9 + 8);
      v11 = v9[7];
      if ((v11 & 1) != 0)
      {
        v13 = (_QWORD *)v9[8];
        v14 = v9[9];
        v15 = v8;
        v16 = v11 >> 1;
        v17 = v8 - (v11 >> 1);
        if (v8 > v11 >> 1)
        {
LABEL_16:
          if (v14 >= v15)
          {
            if (!v13)
              goto LABEL_57;
            bzero((char *)v13 + v16, v17);
            v11 = *v10;
            goto LABEL_44;
          }
          if (2 * v14 <= v15)
            v18 = v15;
          else
            v18 = 2 * v14;
          v43 = v13;
          v44 = v18;
          v45 = (char *)operator new(v18);
          bzero(&v45[v16], v17);
          if (v11 < 2)
            goto LABEL_41;
          v19 = 0;
          if (v11 < 0x10)
          {
            v21 = (char *)v43;
          }
          else
          {
            v20 = v43;
            if ((unint64_t)(v45 - (char *)v43) < 0x20)
            {
              v21 = (char *)v43;
            }
            else if (v11 >= 0x40)
            {
              v19 = v16 & 0x7FFFFFFFFFFFFFE0;
              v22 = v45 + 16;
              v23 = (__int128 *)(v43 + 2);
              v24 = v16 & 0x7FFFFFFFFFFFFFE0;
              do
              {
                v25 = *v23;
                *(v22 - 1) = *(v23 - 1);
                *v22 = v25;
                v22 += 2;
                v23 += 2;
                v24 -= 32;
              }
              while (v24);
              if (v16 == v19)
                goto LABEL_41;
              if ((v11 & 0x30) != 0)
              {
                v20 = v43;
                goto LABEL_34;
              }
              v21 = (char *)v43 + v19;
            }
            else
            {
              v19 = 0;
LABEL_34:
              v26 = v19;
              v19 = v16 & 0x7FFFFFFFFFFFFFF8;
              v21 = (char *)v20 + (v16 & 0x7FFFFFFFFFFFFFF8);
              v27 = &v45[v26];
              v28 = (_QWORD *)((char *)v20 + v26);
              v29 = v26 - (v16 & 0x7FFFFFFFFFFFFFF8);
              do
              {
                v30 = *v28++;
                *(_QWORD *)v27 = v30;
                v27 += 8;
                v29 += 8;
              }
              while (v29);
              if (v16 == v19)
              {
LABEL_41:
                if ((v11 & 1) != 0)
                  operator delete(*v12);
                v10[1] = (unint64_t)v45;
                v10[2] = v44;
                LOBYTE(v11) = 1;
                goto LABEL_44;
              }
            }
          }
          v31 = v16 - v19;
          v32 = &v45[v19];
          do
          {
            v33 = *v21++;
            *v32++ = v33;
            --v31;
          }
          while (v31);
          goto LABEL_41;
        }
      }
      else
      {
        v13 = v9 + 8;
        v14 = 16;
        v15 = v8;
        v16 = v11 >> 1;
        v17 = v8 - (v11 >> 1);
        if (v8 > v11 >> 1)
          goto LABEL_16;
      }
LABEL_44:
      *v10 = v11 & 1 | (2 * v15);
      if (!*((_BYTE *)this + 476))
        goto LABEL_57;
      v34 = 0;
      while ((uint64_t)v34 < *((int *)this + 6))
      {
        if (v34 < *v10 >> 1)
        {
          v35 = v12;
          if ((*v10 & 1) != 0)
            v35 = *v12;
          v35[v34] = 255 / *((_DWORD *)this + v34 + 111);
          ++v34;
          if (*((_BYTE *)this + 476))
            continue;
        }
        goto LABEL_57;
      }
      ++v7;
      v8 = *((_DWORD *)this + 6);
      v3 = v46;
    }
    while (v7 < *((int *)this + 5));
  }
  v36 = (_BYTE *)*((_QWORD *)this + 252);
  v37 = (_BYTE *)*((_QWORD *)this + 253);
  v38 = v37 - v36;
  if (v37 != v36)
  {
    if (v37 - v36 < 0)
      abort();
    v39 = (char *)operator new(v37 - v36);
    v40 = &v39[v38];
    memcpy(v39, v36, v38);
    v41 = *v42;
    if (*v42)
    {
      *(_QWORD *)(v3 + 184) = v41;
      operator delete(v41);
    }
    *(_QWORD *)(v3 + 176) = v39;
    *(_QWORD *)(v3 + 184) = v40;
    *(_QWORD *)(v3 + 192) = v40;
  }
}

BOOL webrtc::`anonymous namespace'::LibaomAv1Encoder::SetEncoderControlParameters<int>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = aom_codec_control(a1 + 896, a2, a3, a4, a5, a6, a7, a8, a3);
  if (v8 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
  return v8 == 0;
}

uint64_t webrtc::`anonymous namespace'::LibaomAv1Encoder::GetCpuSpeed(webrtc::_anonymous_namespace_::LibaomAv1Encoder *this, int a2, int a3)
{
  uint64_t v3;
  int v4;
  unsigned int *v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;

  if (*((_QWORD *)this + 110))
  {
    v3 = *((_QWORD *)this + 109);
    if (!v3)
      return 10;
    v4 = a3 * a2;
    v5 = (unsigned int *)((char *)this + 872);
    do
    {
      v6 = *(_DWORD *)(v3 + 28);
      v7 = v6 < v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (!v7)
        v5 = (unsigned int *)v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 == (unsigned int *)((char *)this + 872))
      return 10;
    else
      return v5[8];
  }
  else if (*((_DWORD *)this + 201) == 1)
  {
    return 11;
  }
  else
  {
    v10 = *((_DWORD *)this + 214);
    if (v10 == 3)
    {
      v18 = a3 * a2;
      if ((a3 * a2) <= 0xE1000)
        v19 = 8;
      else
        v19 = 9;
      if (v18 >= 0x38401)
        v20 = v19;
      else
        v20 = 7;
      if (v18 >= 57601)
        return v20;
      else
        return 6;
    }
    else
    {
      v11 = a3 * a2;
      if ((a3 * a2) <= 0xE1000)
        v12 = 9;
      else
        v12 = 10;
      if (v11 >= 0x38401)
        v13 = v12;
      else
        v13 = 8;
      if (v11 >= 57601)
        v14 = v13;
      else
        v14 = 7;
      if (v11 < 0x38401)
        v15 = 9;
      else
        v15 = 10;
      if (v11 >= 57601)
        v16 = v15;
      else
        v16 = 8;
      if (v10 == 1)
        v17 = v16;
      else
        v17 = 10;
      if (v10 == 2)
        return v14;
      else
        return v17;
    }
  }
}

BOOL webrtc::`anonymous namespace'::LibaomAv1Encoder::SetEncoderControlParameters<aom_tune_content>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = aom_codec_control(a1 + 896, 43, a3, a4, a5, a6, a7, a8, 1);
  if (v8 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
  return v8 == 0;
}

BOOL webrtc::`anonymous namespace'::LibaomAv1Encoder::SetEncoderControlParameters<aom_superblock_size>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = aom_codec_control(a1 + 896, 56, a3, a4, a5, a6, a7, a8, a2);
  if (v8 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/libaom_av1_encoder.cc");
  return v8 == 0;
}

unint64_t *webrtc::GenericFrameInfo::operator=(unint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;

  *a1 = *(_QWORD *)a2;
  if (a1 != (unint64_t *)a2)
  {
    v4 = a1 + 1;
    v5 = *(_QWORD *)(a2 + 8);
    if ((v5 & 1) != 0)
      v6 = *(_QWORD *)(a2 + 16);
    else
      v6 = a2 + 16;
    absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>(v4, v6, v5 >> 1);
    v7 = *(_QWORD *)(a2 + 56);
    if ((v7 & 1) != 0)
      v8 = *(_QWORD *)(a2 + 64);
    else
      v8 = a2 + 64;
    absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>(a1 + 7, v8, v7 >> 1);
    v9 = *(_QWORD *)(a2 + 80);
    if ((v9 & 1) != 0)
      v10 = *(_QWORD *)(a2 + 88);
    else
      v10 = a2 + 88;
    absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>(a1 + 10, v10, v9 >> 1);
    v11 = *(_QWORD *)(a2 + 104);
    if ((v11 & 1) != 0)
      v12 = *(_QWORD *)(a2 + 112);
    else
      v12 = a2 + 112;
    absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::CodecBufferUsage>,webrtc::CodecBufferUsage const*>>(a1 + 13, v12, v11 >> 1);
    v13 = *(_QWORD *)(a2 + 184);
    if (v13)
    {
      v14 = (void *)a1[22];
      if (v13 > a1[24] << 6)
      {
        if (v14)
        {
          operator delete(v14);
          a1[22] = 0;
          a1[23] = 0;
          a1[24] = 0;
          v13 = *(_QWORD *)(a2 + 184);
        }
        if ((v13 & 0x8000000000000000) != 0)
          abort();
        v15 = ((v13 - 1) >> 6) + 1;
        v14 = operator new(8 * v15);
        a1[22] = (unint64_t)v14;
        a1[23] = 0;
        a1[24] = v15;
        v13 = *(_QWORD *)(a2 + 184);
      }
      memmove(v14, *(const void **)(a2 + 176), (((v13 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v13 = *(_QWORD *)(a2 + 184);
    }
    a1[23] = v13;
  }
  a1[25] = *(_QWORD *)(a2 + 200);
  return a1;
}

void absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage,8ul,std::allocator<webrtc::CodecBufferUsage>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::CodecBufferUsage>,webrtc::CodecBufferUsage const*>>(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  void **v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  _OWORD *v21;
  __int128 *v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;

  v7 = (void **)(a1 + 1);
  v6 = *a1;
  if ((*a1 & 1) != 0)
  {
    v9 = (_QWORD *)a1[1];
    v8 = a1[2];
    if (v8 >= a3)
      goto LABEL_3;
  }
  else
  {
    v8 = 8;
    v9 = a1 + 1;
    if (a3 <= 8)
    {
LABEL_3:
      v10 = v6 >> 1;
      v11 = a3 >= v6 >> 1;
      v12 = a3 - (v6 >> 1);
      if (!v11)
        v12 = 0;
      if (v10 >= a3)
        v13 = a3;
      else
        v13 = v10;
      if (v13)
      {
        v14 = v9;
        do
        {
          v15 = *(_DWORD *)a2;
          *((_WORD *)v14 + 2) = *(_WORD *)(a2 + 4);
          *(_DWORD *)v14++ = v15;
          a2 += 8;
          --v13;
        }
        while (v13);
      }
      if (v10 >= a3)
      {
        v28 = *a1;
        goto LABEL_34;
      }
      if (v9)
      {
        v16 = 0;
        v17 = 0;
        v18 = (char *)&v9[v10];
        v19 = 0;
        if (v12 < 4)
          goto LABEL_26;
        goto LABEL_21;
      }
      __break(1u);
LABEL_36:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
  }
  if (2 * v8 <= a3)
    v17 = a3;
  else
    v17 = 2 * v8;
  if (v17 >> 61)
    goto LABEL_36;
  v16 = (char *)operator new(8 * v17);
  v18 = v16;
  v12 = a3;
  v19 = 0;
  if (a3 < 4)
  {
LABEL_26:
    v20 = (uint64_t *)a2;
LABEL_27:
    v25 = v12 - v19;
    v26 = &v18[8 * v19];
    do
    {
      v27 = *v20++;
      *(_QWORD *)v26 = v27;
      v26 += 8;
      --v25;
    }
    while (v25);
    goto LABEL_29;
  }
LABEL_21:
  if ((unint64_t)&v18[-a2] < 0x20)
    goto LABEL_26;
  v19 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  v20 = (uint64_t *)(a2 + 8 * (v12 & 0xFFFFFFFFFFFFFFFCLL));
  v21 = v18 + 16;
  v22 = (__int128 *)(a2 + 16);
  v23 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *v22;
    *(v21 - 1) = *(v22 - 1);
    *v21 = v24;
    v21 += 2;
    v22 += 2;
    v23 -= 4;
  }
  while (v23);
  if (v12 != v19)
    goto LABEL_27;
LABEL_29:
  v28 = *a1;
  if (v16)
  {
    if ((v28 & 1) != 0)
      operator delete(*v7);
    a1[1] = (unint64_t)v16;
    a1[2] = v17;
    LOBYTE(v28) = 1;
  }
LABEL_34:
  *a1 = v28 & 1 | (2 * a3);
}

void webrtc::FrameDependencyStructure::~FrameDependencyStructure(webrtc::FrameDependencyStructure *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = *((_QWORD *)this + 14);
    v4 = (void *)*((_QWORD *)this + 13);
    if (v3 == v2)
    {
LABEL_13:
      *((_QWORD *)this + 14) = v2;
      operator delete(v4);
      goto LABEL_14;
    }
    while (1)
    {
      if ((*(_BYTE *)(v3 - 24) & 1) != 0)
      {
        operator delete(*(void **)(v3 - 16));
        if ((*(_BYTE *)(v3 - 48) & 1) == 0)
        {
LABEL_7:
          if ((*(_BYTE *)(v3 - 96) & 1) != 0)
            goto LABEL_11;
          goto LABEL_4;
        }
      }
      else if ((*(_BYTE *)(v3 - 48) & 1) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(void **)(v3 - 40));
      if ((*(_BYTE *)(v3 - 96) & 1) != 0)
LABEL_11:
        operator delete(*(void **)(v3 - 88));
LABEL_4:
      v3 -= 104;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 13);
        goto LABEL_13;
      }
    }
  }
LABEL_14:
  if ((*((_BYTE *)this + 64) & 1) == 0)
  {
    if ((*((_BYTE *)this + 16) & 1) == 0)
      return;
LABEL_18:
    operator delete(*((void **)this + 3));
    return;
  }
  operator delete(*((void **)this + 9));
  if ((*((_BYTE *)this + 16) & 1) != 0)
    goto LABEL_18;
}

void absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::Resize<absl::inlined_vector_internal::DefaultValueAdapter<std::allocator<webrtc::RenderResolution>>>(unint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  void **v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  _OWORD *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;

  v5 = (void **)(a1 + 1);
  v4 = *a1;
  if ((*a1 & 1) != 0)
  {
    v7 = (_QWORD *)a1[1];
    v6 = a1[2];
    v8 = v4 >> 1;
    v9 = a2 - (v4 >> 1);
    if (a2 <= v4 >> 1)
      goto LABEL_25;
  }
  else
  {
    v6 = 4;
    v7 = a1 + 1;
    v8 = v4 >> 1;
    v9 = a2 - (v4 >> 1);
    if (a2 <= v4 >> 1)
      goto LABEL_25;
  }
  if (v6 >= a2)
  {
    if (v7)
    {
      bzero(&v7[v8], 8 * v9);
      v4 = *a1;
      goto LABEL_25;
    }
    __break(1u);
LABEL_27:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v10 = 2 * v6;
  if (v10 <= a2)
    v11 = a2;
  else
    v11 = v10;
  if (v11 >> 61)
    goto LABEL_27;
  v12 = (char *)operator new(8 * v11);
  bzero(&v12[8 * v8], 8 * v9);
  if (v4 >= 2)
  {
    v13 = 0;
    if (v4 < 8 || (unint64_t)(v12 - (char *)v7) < 0x20)
    {
      v14 = v7;
    }
    else
    {
      v13 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      v14 = &v7[v8 & 0x7FFFFFFFFFFFFFFCLL];
      v15 = v12 + 16;
      v16 = (__int128 *)(v7 + 2);
      v17 = v8 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v18 = *v16;
        *(v15 - 1) = *(v16 - 1);
        *v15 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      if (v8 == v13)
        goto LABEL_22;
    }
    v19 = v8 - v13;
    v20 = &v12[8 * v13];
    do
    {
      v21 = *v14++;
      *(_QWORD *)v20 = v21;
      v20 += 8;
      --v19;
    }
    while (v19);
  }
LABEL_22:
  if ((v4 & 1) != 0)
    operator delete(*v5);
  a1[1] = (unint64_t)v12;
  a1[2] = v11;
  LOBYTE(v4) = 1;
LABEL_25:
  *a1 = v4 & 1 | (2 * a2);
}

void absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::RenderResolution>,webrtc::RenderResolution const*>>(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t *v27;
  _OWORD *v28;
  __int128 *v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;

  v4 = (uint64_t *)a2;
  v7 = (void **)(a1 + 1);
  v6 = *a1;
  if ((*a1 & 1) != 0)
  {
    v9 = (_QWORD *)a1[1];
    v8 = a1[2];
    if (v8 >= a3)
    {
LABEL_3:
      v10 = v6 >> 1;
      v11 = a3 >= v6 >> 1;
      v12 = a3 - (v6 >> 1);
      if (!v11)
        v12 = 0;
      if (v10 >= a3)
        v13 = a3;
      else
        v13 = v10;
      if (v13)
      {
        v14 = 0;
        if (v13 < 4)
          goto LABEL_14;
        if ((unint64_t)v9 - a2 < 0x20)
          goto LABEL_14;
        v14 = v13 & 0x7FFFFFFFFFFFFFFCLL;
        v15 = (uint64_t *)(a2 + 8 * (v13 & 0x7FFFFFFFFFFFFFFCLL));
        v16 = v9 + 2;
        v17 = (__int128 *)(a2 + 16);
        v18 = v13 & 0x7FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = *v17;
          *(v16 - 1) = *(v17 - 1);
          *v16 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 4;
        }
        while (v18);
        v4 = (uint64_t *)(a2 + 8 * (v13 & 0x7FFFFFFFFFFFFFFCLL));
        if (v13 != v14)
        {
LABEL_14:
          v20 = v13 - v14;
          v21 = &v9[v14];
          v15 = v4;
          do
          {
            v22 = *v15++;
            *v21++ = v22;
            --v20;
          }
          while (v20);
        }
        if (v10 < a3)
          goto LABEL_17;
      }
      else
      {
        v15 = (uint64_t *)a2;
        if (v10 < a3)
        {
LABEL_17:
          if (v9)
          {
            v23 = 0;
            v24 = 0;
            v25 = (char *)&v9[v10];
            v26 = 0;
            if (v12 < 4)
              goto LABEL_31;
            goto LABEL_26;
          }
          __break(1u);
LABEL_42:
          std::__throw_bad_array_new_length[abi:sn180100]();
        }
      }
      v35 = *a1;
      goto LABEL_40;
    }
  }
  else
  {
    v8 = 4;
    v9 = a1 + 1;
    if (a3 <= 4)
      goto LABEL_3;
  }
  if (2 * v8 <= a3)
    v24 = a3;
  else
    v24 = 2 * v8;
  if (v24 >> 61)
    goto LABEL_42;
  v23 = (char *)operator new(8 * v24);
  v25 = v23;
  v12 = a3;
  v15 = v4;
  v26 = 0;
  if (a3 < 4)
  {
LABEL_31:
    v27 = v15;
LABEL_32:
    v32 = v12 - v26;
    v33 = &v25[8 * v26];
    do
    {
      v34 = *v27++;
      *(_QWORD *)v33 = v34;
      v33 += 8;
      --v32;
    }
    while (v32);
    goto LABEL_34;
  }
LABEL_26:
  if ((unint64_t)(v25 - (char *)v15) < 0x20)
    goto LABEL_31;
  v26 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  v27 = &v15[v12 & 0xFFFFFFFFFFFFFFFCLL];
  v28 = v25 + 16;
  v29 = (__int128 *)(v15 + 2);
  v30 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v31 = *v29;
    *(v28 - 1) = *(v29 - 1);
    *v28 = v31;
    v28 += 2;
    v29 += 2;
    v30 -= 4;
  }
  while (v30);
  if (v12 != v26)
    goto LABEL_32;
LABEL_34:
  v35 = *a1;
  if (v23)
  {
    if ((v35 & 1) != 0)
      operator delete(*v7);
    a1[1] = (unint64_t)v23;
    a1[2] = v24;
    LOBYTE(v35) = 1;
  }
LABEL_40:
  *a1 = v35 & 1 | (2 * a3);
}

void webrtc::`anonymous namespace'::LibvpxFacade::~LibvpxFacade(webrtc::_anonymous_namespace_::LibvpxFacade *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

int *webrtc::`anonymous namespace'::LibvpxFacade::img_alloc(int a1, int *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  return img_alloc_helper(a2, a3, a4, a5, a6, a6, 0);
}

int *webrtc::`anonymous namespace'::LibvpxFacade::img_wrap(int a1, int *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  return img_alloc_helper(a2, a3, a4, a5, 1u, a6, a7);
}

void webrtc::`anonymous namespace'::LibvpxFacade::img_free(int a1, _QWORD *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = a2[14];
    if (v3 && *((_DWORD *)a2 + 30))
      free(*(void **)(v3 - 8));
    if (*((_DWORD *)a2 + 31))
      free(a2);
  }
}

uint64_t webrtc::`anonymous namespace'::LibvpxFacade::codec_enc_config_set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (!a2)
    return 8;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    result = 8;
    if (!a3 || !*(_QWORD *)(a2 + 48))
      goto LABEL_7;
    if ((*(_BYTE *)(v4 + 16) & 2) == 0)
    {
      result = 4;
LABEL_7:
      *(_DWORD *)(a2 + 16) = result;
      return result;
    }
    result = (*(uint64_t (**)(_QWORD, uint64_t))(v4 + 120))(*(_QWORD *)(a2 + 48), a3);
    *(_DWORD *)(a2 + 16) = result;
  }
  else
  {
    result = 8;
    *(_DWORD *)(a2 + 16) = 8;
  }
  return result;
}

uint64_t webrtc::`anonymous namespace'::LibvpxFacade::codec_enc_config_default(int a1, uint64_t a2, void *__dst, int a4)
{
  uint64_t result;

  result = 8;
  if (a2 && __dst && !a4)
  {
    if ((*(_BYTE *)(a2 + 16) & 2) != 0)
    {
      memcpy(__dst, (const void *)(*(_QWORD *)(a2 + 96) + 8), 0x1F8uLL);
      return 0;
    }
    else
    {
      return 4;
    }
  }
  return result;
}

uint64_t webrtc::`anonymous namespace'::LibvpxFacade::codec_enc_init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (!a2 || !a3 || !a4)
  {
    v8 = 8;
    if (!a2)
      return 8;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a3 + 8) != 5)
  {
    v8 = 3;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(a3 + 16);
  if ((v6 & 2) == 0)
  {
    *(_DWORD *)(a2 + 16) = 4;
    return 4;
  }
  if ((a5 & 0x10000) != 0 && (v6 & 0x10000) == 0)
  {
    *(_DWORD *)(a2 + 16) = 4;
    return 4;
  }
  if ((a5 & 0x20000) != 0 && (v6 & 0x20000) == 0)
  {
    *(_DWORD *)(a2 + 16) = 4;
    return 4;
  }
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 8) = a3;
  *(_QWORD *)(a2 + 40) = a4;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = a5;
  v8 = (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 24))(a2, 0);
  if (!(_DWORD)v8)
  {
LABEL_10:
    *(_DWORD *)(a2 + 16) = v8;
    return v8;
  }
  v9 = *(_QWORD **)(a2 + 48);
  if (v9)
  {
    *(_QWORD *)(a2 + 24) = *v9;
    v10 = *(_QWORD *)(a2 + 8);
    if (v10)
    {
      (*(void (**)(void))(v10 + 32))();
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = v8;
      return v8;
    }
    goto LABEL_10;
  }
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 16) = v8;
  return v8;
}

uint64_t webrtc::`anonymous namespace'::LibvpxFacade::codec_enc_init_multi(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int *a7)
{
  return vpx_codec_enc_init_multi_ver(a2, a3, a4, a5, a6, a7, 36);
}

uint64_t webrtc::`anonymous namespace'::LibvpxFacade::codec_destroy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  if (!a2)
    return 8;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 && *(_QWORD *)(a2 + 48))
  {
    (*(void (**)(void))(v3 + 32))();
    result = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }
  else
  {
    result = 1;
    *(_DWORD *)(a2 + 16) = 1;
  }
  return result;
}

uint64_t webrtc::`anonymous namespace'::LibvpxFacade::codec_control(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a3 - 14) <= 0x34 && ((1 << (a3 - 14)) & 0x12730C01E6D98FLL) != 0)
    return vpx_codec_control_(a2, a3, a3, a4, a5, a6, a7, a8, a4);
  else
    return 1;
}

{
  uint64_t result;

  switch((int)a3)
  {
    case 13:
      result = vpx_codec_control_(a2, 13, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 18:
      result = vpx_codec_control_(a2, 18, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 24:
      result = vpx_codec_control_(a2, 24, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 27:
      result = vpx_codec_control_(a2, 27, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 30:
      result = vpx_codec_control_(a2, 30, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 33:
      result = vpx_codec_control_(a2, 33, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 34:
      result = vpx_codec_control_(a2, 34, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 39:
      result = vpx_codec_control_(a2, 39, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 43:
      result = vpx_codec_control_(a2, 43, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 46:
      result = vpx_codec_control_(a2, 46, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 51:
      result = vpx_codec_control_(a2, 51, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 57:
      result = vpx_codec_control_(a2, 57, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 65:
      result = vpx_codec_control_(a2, 65, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 67:
      result = vpx_codec_control_(a2, 67, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 68:
      result = vpx_codec_control_(a2, 68, a3, a4, a5, a6, a7, a8, a4);
      break;
    case 69:
      result = vpx_codec_control_(a2, 69, a3, a4, a5, a6, a7, a8, a4);
      break;
    default:
      if ((a4 & 0x80000000) != 0)
        result = 1;
      else
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
      break;
  }
  return result;
}

{
  if (a3 <= 0x38 && ((1 << a3) & 0x120000000180000) != 0)
    return vpx_codec_control_(a2, a3, a3, a4, a5, a6, a7, a8, a4);
  else
    return 1;
}

{
  if ((a3 | 0x20) == 0x28)
    return vpx_codec_control_(a2, a3, a3, a4, a5, a6, a7, a8, a4);
  else
    return 1;
}

{
  if ((_DWORD)a3 == 50 || (_DWORD)a3 == 9)
    return vpx_codec_control_(a2, 9, a3, a4, a5, a6, a7, a8, a4);
  else
    return 1;
}

{
  if ((_DWORD)a3 == 11)
    return vpx_codec_control_(a2, 11, a3, a4, a5, a6, a7, a8, a4);
  else
    return 1;
}

{
  if ((_DWORD)a3 == 41)
    return vpx_codec_control_(a2, 41, a3, a4, a5, a6, a7, a8, a4);
  else
    return 1;
}

{
  if ((_DWORD)a3 == 61)
    return vpx_codec_control_(a2, 61, a3, a4, a5, a6, a7, a8, a4);
  else
    return 1;
}

{
  if ((a3 | 4) == 0x2D)
    return vpx_codec_control_(a2, a3, a3, a4, a5, a6, a7, a8, a4);
  else
    return 1;
}

{
  if ((_DWORD)a3 == 44 || (_DWORD)a3 == 42)
    return vpx_codec_control_(a2, a3, a3, a4, a5, a6, a7, a8, a4);
  else
    return 1;
}

{
  if ((_DWORD)a3 == 62 || (_DWORD)a3 == 52)
    return vpx_codec_control_(a2, a3, a3, a4, a5, a6, a7, a8, a4);
  else
    return 1;
}

{
  if ((_DWORD)a3 == 64)
    return vpx_codec_control_(a2, 64, a3, a4, a5, a6, a7, a8, a4);
  else
    return 1;
}

{
  if ((_DWORD)a3 == 70)
    return vpx_codec_control_(a2, 70, a3, a4, a5, a6, a7, a8, a4);
  else
    return 1;
}

uint64_t webrtc::`anonymous namespace'::LibvpxFacade::codec_encode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  if (!a2)
    return 8;
  v11 = a2;
  if (!a3 || a5)
  {
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13 || (v14 = *(_QWORD *)(a2 + 48)) == 0)
    {
      result = 1;
      goto LABEL_11;
    }
    if ((*(_BYTE *)(v13 + 16) & 2) == 0)
    {
      result = 4;
      goto LABEL_11;
    }
    if (!((a7 | a5) >> 32))
    {
      v15 = *(_DWORD *)(v14 + 208);
      v16 = v15 - 1;
      if (v15 == 1)
      {
        result = (*(uint64_t (**)(void))(v13 + 104))();
      }
      else
      {
        v17 = a2 + 56 * v16;
        if (v15 - 1 < 0)
        {
LABEL_24:
          result = 0;
        }
        else
        {
          if (a3)
            v18 = a3 + 136 * v16;
          else
            v18 = 0;
          while (1)
          {
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 + 8) + 104))(*(_QWORD *)(v17 + 48), v18, a4, a5, a6, a7);
            if ((_DWORD)result)
              break;
            v17 -= 56;
            if (v18)
              v18 -= 136;
            else
              v18 = 0;
            if (--v15 <= 0)
              goto LABEL_24;
          }
        }
        v11 = v17 + 56;
      }
      goto LABEL_11;
    }
  }
  result = 8;
LABEL_11:
  *(_DWORD *)(v11 + 16) = result;
  return result;
}

uint64_t webrtc::`anonymous namespace'::LibvpxFacade::codec_get_cx_data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return vpx_codec_get_cx_data(a2, a3);
}

uint64_t webrtc::`anonymous namespace'::LibvpxFacade::codec_error_detail(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (!a2 || !*(_DWORD *)(a2 + 16))
    return 0;
  v2 = *(_QWORD *)(a2 + 48);
  if (!v2)
    v2 = a2 + 24;
  return *(_QWORD *)v2;
}

const char *webrtc::`anonymous namespace'::LibvpxFacade::codec_error(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (!a2)
    return "Invalid parameter";
  v2 = *(int *)(a2 + 16);
  if (v2 > 9)
    return "Unrecognized error code";
  else
    return off_24C0B5FA8[v2];
}

const char *webrtc::`anonymous namespace'::LibvpxFacade::codec_err_to_string(uint64_t a1, unsigned int a2)
{
  if (a2 > 9)
    return "Unrecognized error code";
  else
    return off_24C0B5FA8[a2];
}

uint64_t webrtc::CreateVp8Decoder@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = webrtc::LibvpxVp8Decoder::LibvpxVp8Decoder(v4, a1);
  *a2 = result;
  return result;
}

uint64_t webrtc::LibvpxVp8Decoder::LibvpxVp8Decoder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  char *v11[2];
  char v12;

  v3 = 0x10000001ELL;
  *(_QWORD *)a1 = &off_24C0B6008;
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 300;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  (*(void (**)(char **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a2 + 8) + 16))(v11, *(_QWORD *)(a2 + 8), "WebRTC-VP8-Postproc-Config", 26);
  if (v12 < 0)
  {
    if (!v11[1])
    {
      v5 = 0x3C00000008;
      goto LABEL_22;
    }
    v9 = 0x100000006;
    v10 = 0;
    v4 = v11[0];
  }
  else
  {
    if (!v12)
    {
      v5 = 0x3C00000008;
      goto LABEL_14;
    }
    v9 = 0x100000006;
    v10 = 0;
    v4 = (const char *)v11;
  }
  v5 = 0x3C00000008;
  if (sscanf(v4, "Enabled-%d,%d,%d", &v9, &v10, (char *)&v9 + 4) == 3
    && v9 <= 0x10
    && (v10 & 0x80000000) == 0
    && SHIDWORD(v9) > v10)
  {
    v5 = v9;
    v3 = v10 | 0x100000000;
  }
  if (v12 < 0)
  {
LABEL_22:
    operator delete(v11[0]);
    *(_QWORD *)(a1 + 108) = v5;
    *(_QWORD *)(a1 + 116) = v3;
    if (!*(_BYTE *)(a1 + 8))
      goto LABEL_23;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(a1 + 108) = v5;
  *(_QWORD *)(a1 + 116) = v3;
  if (!*(_BYTE *)(a1 + 8))
  {
LABEL_23:
    v6 = 0;
    goto LABEL_24;
  }
LABEL_15:
  v6 = operator new();
  *(_DWORD *)v6 = 1064514355;
  if (rtc::g_clock)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v7 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  *(_QWORD *)(v6 + 8) = v7 / 1000000;
  *(_DWORD *)(v6 + 24) = -1082130432;
  *(_QWORD *)(v6 + 16) = 0xBF8000003F733333;
LABEL_24:
  *(_QWORD *)(a1 + 128) = v6;
  return a1;
}

void webrtc::LibvpxVp8Decoder::~LibvpxVp8Decoder(webrtc::LibvpxVp8Decoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;

  *(_QWORD *)this = &off_24C0B6008;
  *((_BYTE *)this + 80) = 1;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3 && *(_QWORD *)(v2 + 48))
    {
      (*(void (**)(void))(v3 + 32))();
      *(_QWORD *)(v2 + 48) = 0;
      *(_QWORD *)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      v4 = *((_QWORD *)this + 11);
      if (!v4)
        goto LABEL_8;
    }
    else
    {
      *(_DWORD *)(v2 + 16) = 1;
      v4 = *((_QWORD *)this + 11);
      if (!v4)
      {
LABEL_8:
        *((_QWORD *)this + 11) = 0;
        goto LABEL_9;
      }
    }
    MEMORY[0x20BD0ADEC](v4, 0x10F2C40209C4D79);
    goto LABEL_8;
  }
LABEL_9:
  v5 = (char *)this + 32;
  if (*((_QWORD *)this + 6))
  {
    v6 = *((_QWORD *)this + 4);
    v7 = (char *)*((_QWORD *)this + 5);
    v8 = *(_QWORD *)v7;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    *((_QWORD *)this + 6) = 0;
    if (v7 != v5)
    {
      do
      {
        v14 = (char *)*((_QWORD *)v7 + 1);
        v13 = *((_QWORD *)v7 + 2);
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        operator delete(v7);
        v7 = v14;
      }
      while (v14 != v5);
    }
  }
  *((_BYTE *)this + 80) = 0;
  v9 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v9)
    MEMORY[0x20BD0ADEC](v9, 0x1000C40361F1193);
  if (*((_QWORD *)this + 6))
  {
    v10 = *((_QWORD *)this + 4);
    v11 = (char *)*((_QWORD *)this + 5);
    v12 = *(_QWORD *)v11;
    *(_QWORD *)(v12 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v12;
    *((_QWORD *)this + 6) = 0;
    if (v11 != v5)
    {
      do
      {
        v16 = (char *)*((_QWORD *)v11 + 1);
        v15 = *((_QWORD *)v11 + 2);
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        operator delete(v11);
        v11 = v16;
      }
      while (v16 != v5);
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;

  *(_QWORD *)this = &off_24C0B6008;
  *((_BYTE *)this + 80) = 1;
  v2 = *((_QWORD *)this + 11);
  if (!v2)
  {
LABEL_9:
    v5 = (char *)this + 32;
    if (*((_QWORD *)this + 6))
    {
      v6 = *((_QWORD *)this + 4);
      v7 = (char *)*((_QWORD *)this + 5);
      v8 = *(_QWORD *)v7;
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v6 + 8);
      **(_QWORD **)(v6 + 8) = v8;
      *((_QWORD *)this + 6) = 0;
      if (v7 != v5)
      {
        do
        {
          v14 = (char *)*((_QWORD *)v7 + 1);
          v13 = *((_QWORD *)v7 + 2);
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          operator delete(v7);
          v7 = v14;
        }
        while (v14 != v5);
      }
    }
    *((_BYTE *)this + 80) = 0;
    v9 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    if (v9)
      MEMORY[0x20BD0ADEC](v9, 0x1000C40361F1193);
    if (*((_QWORD *)this + 6))
    {
      v10 = *((_QWORD *)this + 4);
      v11 = (char *)*((_QWORD *)this + 5);
      v12 = *(_QWORD *)v11;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)(v10 + 8);
      **(_QWORD **)(v10 + 8) = v12;
      *((_QWORD *)this + 6) = 0;
      if (v11 != v5)
      {
        do
        {
          v16 = (char *)*((_QWORD *)v11 + 1);
          v15 = *((_QWORD *)v11 + 2);
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          operator delete(v11);
          v11 = v16;
        }
        while (v16 != v5);
      }
    }
    JUMPOUT(0x20BD0ADECLL);
  }
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 && *(_QWORD *)(v2 + 48))
  {
    (*(void (**)(void))(v3 + 32))();
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    v4 = *((_QWORD *)this + 11);
    if (!v4)
      goto LABEL_8;
  }
  else
  {
    *(_DWORD *)(v2 + 16) = 1;
    v4 = *((_QWORD *)this + 11);
    if (!v4)
    {
LABEL_8:
      *((_QWORD *)this + 11) = 0;
      goto LABEL_9;
    }
  }
  MEMORY[0x20BD0ADEC](v4, 0x10F2C40209C4D79);
  goto LABEL_8;
}

uint64_t webrtc::LibvpxVp8Decoder::Configure(webrtc::LibvpxVp8Decoder *this, const webrtc::VideoDecoder::Settings *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;

  if (((*(uint64_t (**)(webrtc::LibvpxVp8Decoder *))(*(_QWORD *)this + 48))(this) & 0x80000000) != 0)
    return 0;
  v4 = *((_QWORD *)this + 11);
  if (!v4)
  {
    v4 = operator new();
    *((_QWORD *)this + 11) = v4;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_QWORD *)(v4 + 48) = 0;
  }
  v7 = 1;
  v8 = 0;
  if (vpx_codec_dec_init_ver(v4, (uint64_t)&vpx_codec_vp8_dx_algo, (uint64_t)&v7, (unint64_t)*((unsigned __int8 *)this + 8) << 16, 12))
  {
    v5 = *((_QWORD *)this + 11);
    if (v5)
      MEMORY[0x20BD0ADEC](v5, 0x10F2C40209C4D79);
    result = 0;
    *((_QWORD *)this + 11) = 0;
  }
  else
  {
    *((_BYTE *)this + 80) = 1;
    *((_BYTE *)this + 104) = 1;
    if ((*(_QWORD *)a2 & 0xFF00000000) == 0)
      return 1;
    result = webrtc::VideoFrameBufferPool::Resize((webrtc::LibvpxVp8Decoder *)((char *)this + 16), (int)*(_QWORD *)a2);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t webrtc::LibvpxVp8Decoder::Decode(webrtc::LibvpxVp8Decoder *this, const webrtc::EncodedImage *a2, uint64_t a3)
{
  return (*(uint64_t (**)(webrtc::LibvpxVp8Decoder *, const webrtc::EncodedImage *, _QWORD, uint64_t))(*(_QWORD *)this + 32))(this, a2, 0, a3);
}

uint64_t webrtc::LibvpxVp8Decoder::Decode(webrtc::LibvpxVp8Decoder *this, const webrtc::EncodedImage *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  BOOL v11;
  int v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  float v47;
  int v49;
  int v50;
  uint64_t v51;
  char *v52;
  int v53;
  int v54;
  char *v55;
  int v56;
  char *v57;
  int v58;
  char *v59;
  char v60;
  char v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  int v71;
  unsigned __int8 v72;
  int v73;
  int v74;
  char *v75;
  int v76;
  char *v77;
  char *v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  int v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  uint64_t v103;
  char v104;
  char v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 80) || !*((_QWORD *)this + 9))
    return 4294967289;
  v10 = *((_QWORD *)a2 + 17);
  if (v10)
  {
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10))
      v11 = 1;
    else
      v11 = *((_QWORD *)a2 + 18) == 0;
    if (!v11)
      return 4294967292;
  }
  else if (*((_QWORD *)a2 + 18))
  {
    return 4294967292;
  }
  if (*((_BYTE *)this + 8))
  {
    v81 = 8;
    v12 = *((_DWORD *)this + 25) * *((_DWORD *)this + 24);
    if (*((_BYTE *)this + 120))
    {
      if ((v12 - 1) >> 10 <= 0x4A)
      {
        v13 = *(float *)(*((_QWORD *)this + 16) + 20);
        v14 = v13 == -1.0 ? 0 : (int)v13;
        v15 = *((_DWORD *)this + 29);
        if (v14 > v15)
        {
          v16 = *((_DWORD *)this + 27);
          v17 = *((_DWORD *)this + 28);
          if (v14 < v17)
            v16 = v16 * (v14 - v15) / (v17 - v15);
          if (v16 <= 1)
            v18 = 1;
          else
            v18 = v16;
          v81 = 11;
          v82 = v18;
        }
      }
    }
    else
    {
      if (v12 >= 230401)
        v20 = 9;
      else
        v20 = 11;
      v81 = v20;
      v82 = 3;
    }
    vpx_codec_control_(*((_QWORD *)this + 11), 3, a3, a4, a5, a6, a7, a8, (uint64_t)&v81);
  }
  if (*((_BYTE *)this + 104))
  {
    if (*((_DWORD *)a2 + 6) != 3)
      return 0xFFFFFFFFLL;
    *((_BYTE *)this + 104) = 0;
  }
  v21 = *((_QWORD *)a2 + 17);
  if (v21)
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
  v22 = *((_QWORD *)a2 + 18);
  if (v22)
    v23 = v21;
  else
    v23 = 0;
  v24 = *((_QWORD *)this + 11);
  if (!v24)
    return 0xFFFFFFFFLL;
  if (((_DWORD)v22 != 0) == (v23 == 0))
  {
    v36 = 8;
LABEL_49:
    *(_DWORD *)(v24 + 16) = v36;
    return 0xFFFFFFFFLL;
  }
  v25 = *(_QWORD *)(v24 + 8);
  if (!v25 || !*(_QWORD *)(v24 + 48))
  {
    v36 = 1;
    goto LABEL_49;
  }
  v26 = (*(uint64_t (**)(void))(v25 + 64))();
  *(_DWORD *)(v24 + 16) = v26;
  if (v26)
    return 0xFFFFFFFFLL;
  v80 = 0;
  v33 = *((_QWORD *)this + 11);
  if (v33 && (v34 = *(_QWORD *)(v33 + 8)) != 0 && *(_QWORD *)(v33 + 48))
  {
    v35 = (*(uint64_t (**)(_QWORD, uint64_t *))(v34 + 72))(*(_QWORD *)(v33 + 48), &v80);
    v33 = *((_QWORD *)this + 11);
  }
  else
  {
    v35 = 0;
  }
  v79 = 0;
  vpx_codec_control_(v33, 267, v27, v28, v29, v30, v31, v32, (uint64_t)&v79);
  if (!v35)
    return 1;
  v37 = *((_DWORD *)a2 + 38);
  v38 = v79;
  v39 = *((unsigned __int8 *)a2 + 292);
  v40 = *((_QWORD *)this + 16);
  if (v40)
  {
    if (*((_DWORD *)this + 24) != *(_DWORD *)(v35 + 24) || *((_DWORD *)this + 25) != *(_DWORD *)(v35 + 28))
    {
      *(_DWORD *)(v40 + 16) = *(_DWORD *)v40;
      *(_DWORD *)(v40 + 20) = -1082130432;
    }
    if (rtc::g_clock)
    {
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v41 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    v42 = (float)v38;
    v43 = v41 / 1000000;
    v44 = *(float *)(v40 + 20);
    if (v44 != -1.0)
    {
      v45 = v43 - *(_QWORD *)(v40 + 8);
      v46 = *(float *)(v40 + 16);
      if (v45 != 1)
        v46 = powf(v46, (float)v45);
      v42 = (float)((float)(1.0 - v46) * v42) + (float)(v46 * v44);
    }
    v47 = *(float *)(v40 + 24);
    if (v42 <= v47 || v47 == -1.0)
      v47 = v42;
    *(float *)(v40 + 20) = v47;
    *(_QWORD *)(v40 + 8) = v43;
  }
  v49 = *(_DWORD *)(v35 + 24);
  *((_DWORD *)this + 24) = v49;
  v50 = *(_DWORD *)(v35 + 28);
  *((_DWORD *)this + 25) = v50;
  webrtc::VideoFrameBufferPool::CreateI420Buffer((webrtc::LibvpxVp8Decoder *)((char *)this + 16), v49, v50, &v106);
  v51 = v106;
  if (!v106)
    return 1;
  v71 = v37;
  v72 = v38;
  (**(void (***)(uint64_t))v106)(v106);
  v77 = *(char **)(v35 + 56);
  v78 = *(char **)(v35 + 48);
  v76 = *(_DWORD *)(v35 + 84);
  v75 = *(char **)(v35 + 64);
  v73 = *(_DWORD *)(v35 + 80);
  v74 = *(_DWORD *)(v35 + 88);
  v52 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 136))(v51);
  v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 112))(v51);
  v54 = v39;
  v55 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 144))(v51);
  v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 120))(v51);
  v57 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 152))(v51);
  v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 128))(v51);
  I420Copy(v78, v73, v77, v76, v75, v74, v52, v53, v55, v56, v57, v58, *(_DWORD *)(v35 + 24), *(_DWORD *)(v35 + 28));
  (**(void (***)(uint64_t))v51)(v51);
  if (v54)
  {
    v61 = *((_BYTE *)a2 + 224);
    v59 = (char *)a2 + 224;
    v60 = v61;
    v62 = *(_OWORD *)(v59 + 17);
    v107 = *(_OWORD *)(v59 + 1);
    v108 = v62;
    v63 = *(_OWORD *)(v59 + 49);
    v109 = *(_OWORD *)(v59 + 33);
    v110 = v63;
  }
  else
  {
    v60 = 0;
  }
  LOWORD(v81) = 0;
  v83 = v51;
  (**(void (***)(uint64_t))v51)(v51);
  v84 = v71;
  v86 = 0;
  v87 = 0;
  v85 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v97 = 0;
  if (v54)
  {
    v92 = v60;
    v93 = v107;
    v94 = v108;
    v95 = v109;
    v96 = v110;
    v97 = 1;
  }
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  (*(void (**)(_QWORD, int *, _QWORD, uint64_t))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9), &v81, 0, v72 | 0x100);
  v64 = v103;
  if (v103)
  {
    do
    {
      v65 = __ldaxr((unsigned int *)v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, (unsigned int *)v64));
    if (!v66)
    {
      v67 = *(_QWORD *)(v64 + 8);
      if (v67)
      {
        v68 = *(_QWORD *)(v64 + 16);
        v69 = *(void **)(v64 + 8);
        if (v68 != v67)
        {
          do
          {
            v70 = *(void **)(v68 - 96);
            if (v70)
            {
              *(_QWORD *)(v68 - 88) = v70;
              operator delete(v70);
            }
            v68 -= 104;
          }
          while (v68 != v67);
          v69 = *(void **)(v64 + 8);
        }
        *(_QWORD *)(v64 + 16) = v67;
        operator delete(v69);
      }
      MEMORY[0x20BD0ADEC](v64, 0x1020C40E72D6CFBLL);
    }
  }
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  return 0;
}

uint64_t webrtc::LibvpxVp8Decoder::RegisterDecodeCompleteCallback(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 72) = a2;
  return 0;
}

uint64_t webrtc::LibvpxVp8Decoder::Release(webrtc::LibvpxVp8Decoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  webrtc::LibvpxVp8Decoder *v6;
  uint64_t v7;
  uint64_t v9;
  webrtc::LibvpxVp8Decoder *v10;

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_BYTE *)this + 80))
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3 && *(_QWORD *)(v2 + 48))
      {
        (*(void (**)(void))(v3 + 32))();
        v4 = 0;
        *(_QWORD *)(v2 + 48) = 0;
        *(_QWORD *)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        v2 = *((_QWORD *)this + 11);
        if (!v2)
        {
LABEL_12:
          *((_QWORD *)this + 11) = 0;
          if (!*((_QWORD *)this + 6))
            goto LABEL_14;
          goto LABEL_13;
        }
      }
      else
      {
        *(_DWORD *)(v2 + 16) = 1;
        v4 = 4294967293;
        v2 = *((_QWORD *)this + 11);
        if (!v2)
          goto LABEL_12;
      }
    }
    else
    {
      v4 = 0;
    }
    MEMORY[0x20BD0ADEC](v2, 0x10F2C40209C4D79);
    goto LABEL_12;
  }
  v4 = 0;
  if (!*((_QWORD *)this + 6))
    goto LABEL_14;
LABEL_13:
  v5 = *((_QWORD *)this + 4);
  v6 = (webrtc::LibvpxVp8Decoder *)*((_QWORD *)this + 5);
  v7 = *(_QWORD *)v6;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(v5 + 8);
  **(_QWORD **)(v5 + 8) = v7;
  *((_QWORD *)this + 6) = 0;
  if (v6 != (webrtc::LibvpxVp8Decoder *)((char *)this + 32))
  {
    do
    {
      v10 = (webrtc::LibvpxVp8Decoder *)*((_QWORD *)v6 + 1);
      v9 = *((_QWORD *)v6 + 2);
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      operator delete(v6);
      v6 = v10;
    }
    while (v10 != (webrtc::LibvpxVp8Decoder *)((char *)this + 32));
  }
LABEL_14:
  *((_BYTE *)this + 80) = 0;
  return v4;
}

void webrtc::LibvpxVp8Decoder::GetDecoderInfo(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 23) = 6;
  *(_WORD *)(a1 + 4) = 30832;
  *(_DWORD *)a1 = 1986161004;
  *(_BYTE *)(a1 + 24) = 0;
}

const char *webrtc::LibvpxVp8Decoder::ImplementationName(webrtc::LibvpxVp8Decoder *this)
{
  return "libvpx";
}

void webrtc::CreateVp8Encoder(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void *__p[2];
  uint64_t v10;

  v6 = (_QWORD *)operator new();
  *v6 = &off_24C0B5EC8;
  v7 = operator new();
  *(_OWORD *)__p = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v8 = v6;
  webrtc::LibvpxVp8Encoder::LibvpxVp8Encoder(v7, a1, (uint64_t)__p, (uint64_t *)&v8);
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  if (__p[0])
    operator delete(__p[0]);
  *a3 = v7;
}

uint64_t webrtc::LibvpxVp8Encoder::LibvpxVp8Encoder(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  _OWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int *v22;
  unint64_t v23;
  BOOL v24;
  int v25;
  int v26;
  _BYTE *v28;
  _BYTE *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  _BYTE *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  uint64_t *v69;
  _QWORD *v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  int v75;
  _QWORD *v76;
  uint64_t *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  BOOL v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE *v102;
  _BYTE *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  _BYTE *v109;
  _BYTE *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _BYTE *v121;
  _BYTE *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  __int128 *v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  void *v137;
  uint64_t v138;
  unsigned __int8 v139;
  void *v140;
  void *__p;
  void *v142;
  uint64_t v143;
  void *v144[2];
  char v145;
  char v146;
  uint64_t v147;
  void (**v148)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v149;
  void *v150;
  uint64_t v151;
  void *v152[2];
  char v153;
  __int16 v154;
  _QWORD v155[3];

  v155[2] = *MEMORY[0x24BDAC8D0];
  v6 = (_OWORD *)(a1 + 552);
  *(_QWORD *)a1 = &off_24C0B6060;
  v7 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 32) = v10;
  v11 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 48) = v11;
  webrtc::RateControlSettings::RateControlSettings(a1 + 56, *(_QWORD *)(a1 + 16));
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_BYTE *)(a1 + 176) = 1;
  *(_DWORD *)(a1 + 180) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_BYTE *)(a1 + 200) = 1;
  *(_QWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 212) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(_BYTE *)(a1 + 236) = 1;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 272) = 1;
  *(_QWORD *)(a1 + 284) = 0;
  *(_QWORD *)(a1 + 276) = 0;
  *(_BYTE *)(a1 + 292) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_BYTE *)(a1 + 308) = 1;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 344) = 1;
  *(_QWORD *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 348) = 0;
  *(_BYTE *)(a1 + 364) = 0;
  *(_BYTE *)(a1 + 380) = 1;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 416) = 1;
  *(_QWORD *)(a1 + 428) = 0;
  *(_QWORD *)(a1 + 420) = 0;
  *(_BYTE *)(a1 + 436) = 0;
  *(_BYTE *)(a1 + 452) = 1;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 476) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_WORD *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 532) = 0;
  *(_QWORD *)(a1 + 516) = 0;
  *(_QWORD *)(a1 + 508) = 0;
  *(_WORD *)(a1 + 524) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *v6 = xmmword_208F0B5E0;
  *(_DWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  v6[2] = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v12 = operator new(8uLL);
  *(_QWORD *)(a1 + 608) = v12;
  *(_QWORD *)(a1 + 624) = 1;
  *(_QWORD *)(a1 + 616) = 3;
  *v12 = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  v13 = (char *)operator new(0x18uLL);
  *(_QWORD *)(a1 + 824) = v13;
  v14 = v13 + 24;
  *(_QWORD *)(a1 + 840) = v13 + 24;
  memset_pattern16(v13, &unk_208F0B600, 0x18uLL);
  *(_QWORD *)(a1 + 832) = v14;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 852) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 860) = 0;
  *(_DWORD *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_QWORD *)(a1 + 940) = 0x447A000000000000;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 928) = -1;
  *(_BYTE *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 952) = 1000;
  *(_QWORD *)(a1 + 960) = 1000;
  webrtc::RateStatistics::Reset((webrtc::RateStatistics *)(a1 + 872));
  if (*(_BYTE *)(a1 + 860))
    webrtc::RateStatistics::Update((webrtc::RateStatistics *)(a1 + 872), 1, *(unsigned int *)(a1 + 856));
  *(_DWORD *)(a1 + 848) = 1084227584;
  *(_BYTE *)(a1 + 852) = 1;
  *(_DWORD *)(a1 + 864) = 170;
  *(_DWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  webrtc::EncoderInfoSettings::EncoderInfoSettings(a1 + 984, *(_QWORD *)(a1 + 16), (uint64_t)"WebRTC-VP8-GetEncoderInfoOverride", 33);
  *(_QWORD *)(a1 + 984) = &unk_24C0B3AD0;
  v15 = *(_QWORD *)(a1 + 16);
  v148 = off_24C0B4170;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v153 = 8;
  if (v152 <= (void **)"Disabled" && &v152[1] > (void **)"Disabled")
    goto LABEL_136;
  v154 = 0;
  strcpy((char *)v152, "Disabled");
  v148 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B41A0;
  v140 = off_24C0B4170;
  __p = 0;
  v142 = 0;
  v143 = 0;
  v145 = 8;
  if (v144 <= (void **)"interval" && &v144[1] > (void **)"interval")
    goto LABEL_136;
  v146 = 0;
  strcpy((char *)v144, "interval");
  v140 = &unk_24C0B0268;
  v147 = 2000000;
  v155[0] = &v148;
  v155[1] = &v140;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v15 + 16))(&v137, v15, "WebRTC-VP8-MaxFrameInterval", 27);
  if ((char)v139 < 0)
  {
    v16 = v138;
    if (v138 < 0)
      goto LABEL_136;
    v17 = (char *)v137;
    if (v138)
    {
      if (!v137)
        goto LABEL_136;
    }
  }
  else
  {
    v16 = v139;
    v17 = (char *)&v137;
  }
  webrtc::ParseFieldTrial(v155, 2, v17, v16);
  if ((char)v139 < 0)
  {
    operator delete(v137);
    v18 = HIBYTE(v154);
    v19 = v147;
    v140 = off_24C0B4170;
    if ((v145 & 0x80000000) == 0)
    {
LABEL_17:
      v20 = __p;
      if (!__p)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else
  {
    v18 = HIBYTE(v154);
    v19 = v147;
    v140 = off_24C0B4170;
    if ((v145 & 0x80000000) == 0)
      goto LABEL_17;
  }
  operator delete(v144[0]);
  v20 = __p;
  if (__p)
  {
LABEL_18:
    v142 = v20;
    operator delete(v20);
  }
LABEL_19:
  v148 = off_24C0B4170;
  if (v153 < 0)
    operator delete(v152[0]);
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  if (v18)
    v21 = 0;
  else
    v21 = v19;
  *(_QWORD *)(a1 + 1152) = v21;
  *(_QWORD *)(a1 + 1160) = v18 == 0;
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(&v140, *(_QWORD *)(a1 + 16), "WebRTC-LibvpxVp8Encoder-AndroidSpecificThreadingSettings", 56);
  if ((SHIBYTE(v142) & 0x80000000) == 0)
  {
    v22 = (int *)&v140;
    v23 = HIBYTE(v142);
    goto LABEL_34;
  }
  v23 = (unint64_t)__p;
  if (((unint64_t)__p & 0x8000000000000000) != 0 || (v22 = (int *)v140, __p) && !v140)
LABEL_136:
    __break(1u);
LABEL_34:
  if (v23 < 7)
  {
    v24 = 0;
    if ((HIBYTE(v142) & 0x80) == 0)
      goto LABEL_45;
    goto LABEL_44;
  }
  v25 = *v22;
  v26 = *(int *)((char *)v22 + 3);
  v24 = v25 == 1650552389 && v26 == 1684368482;
  if ((HIBYTE(v142) & 0x80) != 0)
LABEL_44:
    operator delete(v140);
LABEL_45:
  *(_BYTE *)(a1 + 1168) = v24;
  v28 = *(_BYTE **)(a1 + 680);
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 696) - (_QWORD)v28) >> 3) <= 2)
  {
    v29 = *(_BYTE **)(a1 + 688);
    v30 = (char *)operator new(0x198uLL);
    v31 = &v30[136 * ((v29 - v28) / 136)];
    v32 = v31;
    if (v29 != v28)
    {
      v33 = &v30[136 * ((v29 - v28) / 136)];
      do
      {
        *(_OWORD *)(v33 - 136) = *(_OWORD *)(v29 - 136);
        v34 = *(_OWORD *)(v29 - 120);
        v35 = *(_OWORD *)(v29 - 104);
        v36 = *(_OWORD *)(v29 - 88);
        *(_OWORD *)(v33 - 72) = *(_OWORD *)(v29 - 72);
        *(_OWORD *)(v33 - 88) = v36;
        *(_OWORD *)(v33 - 104) = v35;
        *(_OWORD *)(v33 - 120) = v34;
        v37 = *(_OWORD *)(v29 - 56);
        v38 = *(_OWORD *)(v29 - 40);
        v39 = *(_OWORD *)(v29 - 24);
        v32 = v33 - 136;
        *((_QWORD *)v33 - 1) = *((_QWORD *)v29 - 1);
        *(_OWORD *)(v33 - 24) = v39;
        *(_OWORD *)(v33 - 40) = v38;
        *(_OWORD *)(v33 - 56) = v37;
        v29 -= 136;
        v33 -= 136;
      }
      while (v29 != v28);
    }
    *(_QWORD *)(a1 + 680) = v32;
    *(_QWORD *)(a1 + 688) = v31;
    *(_QWORD *)(a1 + 696) = v30 + 408;
    if (v28)
      operator delete(v28);
  }
  v40 = *(char **)(a1 + 704);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 720) - (_QWORD)v40) >> 6) <= 2)
  {
    v41 = *(_BYTE **)(a1 + 712);
    v42 = (char *)operator new(0x3C0uLL);
    v43 = v42 + 960;
    v44 = &v42[v41 - v40];
    if (v41 == v40)
    {
      *(_QWORD *)(a1 + 704) = v44;
      *(_QWORD *)(a1 + 712) = v44;
      *(_QWORD *)(a1 + 720) = v43;
      if (v40)
LABEL_63:
        operator delete(v40);
    }
    else
    {
      v45 = 0;
      do
      {
        v47 = &v44[v45];
        v48 = &v44[v45 - 320];
        v49 = *(_OWORD *)&v41[v45 - 240];
        v50 = *(_OWORD *)&v41[v45 - 224];
        v51 = *(_OWORD *)&v41[v45 - 208];
        *(v47 - 192) = v41[v45 - 192];
        *((_OWORD *)v47 - 14) = v50;
        *((_OWORD *)v47 - 13) = v51;
        *((_OWORD *)v47 - 15) = v49;
        *(_OWORD *)v48 = *(_OWORD *)&v41[v45 - 320];
        v52 = *(_OWORD *)&v41[v45 - 304];
        v53 = *(_OWORD *)&v41[v45 - 288];
        v54 = *(_OWORD *)&v41[v45 - 272];
        *((_OWORD *)v47 - 16) = *(_OWORD *)&v41[v45 - 256];
        *((_OWORD *)v48 + 2) = v53;
        *((_OWORD *)v48 + 3) = v54;
        *((_OWORD *)v48 + 1) = v52;
        v55 = *(_QWORD *)&v41[v45 - 184];
        *(_QWORD *)&v41[v45 - 184] = 0;
        *((_QWORD *)v47 - 23) = v55;
        v56 = *(_OWORD *)&v41[v45 - 176];
        v57 = *(_OWORD *)&v41[v45 - 160];
        v58 = *(_OWORD *)&v41[v45 - 144];
        *(_QWORD *)(v47 - 131) = *(_QWORD *)&v41[v45 - 131];
        *((_OWORD *)v47 - 10) = v57;
        *((_OWORD *)v47 - 9) = v58;
        *((_OWORD *)v47 - 11) = v56;
        *((_QWORD *)v47 - 15) = *(_QWORD *)&v41[v45 - 120];
        v59 = (uint64_t *)&v41[v45 - 112];
        v60 = *v59;
        *(_QWORD *)&v44[v45 - 112] = *v59;
        v61 = (uint64_t)&v44[v45 - 112];
        v62 = *(_QWORD *)&v41[v45 - 104];
        *((_QWORD *)v47 - 13) = v62;
        if (v62)
        {
          *(_QWORD *)(v60 + 16) = v61;
          *(_QWORD *)&v41[v45 - 120] = v59;
          *v59 = 0;
          *(_QWORD *)&v41[v45 - 104] = 0;
        }
        else
        {
          *((_QWORD *)v47 - 15) = v61;
        }
        v63 = &v44[v45];
        v44[v45 - 96] = 0;
        v44[v45 - 28] = 0;
        v64 = &v41[v45];
        if (v41[v45 - 28])
        {
          *(_OWORD *)&v44[v45 - 96] = *((_OWORD *)v64 - 6);
          v65 = *((_OWORD *)v64 - 5);
          v66 = *((_OWORD *)v64 - 4);
          v67 = *((_OWORD *)v64 - 3);
          v44[v45 - 32] = *(v64 - 32);
          *(_OWORD *)&v44[v45 - 64] = v66;
          *(_OWORD *)&v44[v45 - 48] = v67;
          *(_OWORD *)&v44[v45 - 80] = v65;
          *(v63 - 28) = 1;
        }
        *((_DWORD *)v63 - 6) = *((_DWORD *)v64 - 6);
        v46 = *((_QWORD *)v64 - 2);
        *((_QWORD *)v64 - 2) = 0;
        *((_QWORD *)v63 - 2) = v46;
        *((_WORD *)v63 - 4) = *((_WORD *)v64 - 4);
        v45 -= 320;
      }
      while (&v41[v45] != v40);
      v40 = *(char **)(a1 + 704);
      v68 = *(char **)(a1 + 712);
      *(_QWORD *)(a1 + 704) = &v44[v45];
      *(_QWORD *)(a1 + 712) = v44;
      *(_QWORD *)(a1 + 720) = v43;
      while (v68 != v40)
        webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)(v68 - 320));
      if (v40)
        goto LABEL_63;
    }
  }
  if ((*(_QWORD *)(a1 + 648) & 0x3FFFFFFFFFFFFFFLL) == 0)
  {
    v69 = (uint64_t *)operator new(8uLL);
    v70 = *(_QWORD **)(a1 + 632);
    v71 = *(_QWORD *)(a1 + 640);
    v72 = v71 & 0x3F;
    v73 = (v71 - 1) >> 6;
    if (v71 < 0x41)
      v73 = 0;
    v69[v73] = 0;
    if (v71 > 0x3F || (v71 & 0x3F) != 0)
    {
      v74 = 0;
      v75 = 0;
      v76 = &v70[v71 >> 6];
      v77 = v69;
      v78 = v70;
      do
      {
        v79 = 1 << v74;
        if (((*v78 >> v75) & 1) != 0)
          v80 = *v77 | v79;
        else
          v80 = *v77 & ~v79;
        *v77 = v80;
        v78 += v75 == 63;
        if (v75 == 63)
          v75 = 0;
        else
          ++v75;
        v77 += v74 == 63;
        if (v74 == 63)
          v74 = 0;
        else
          ++v74;
      }
      while (v75 != v72 || v78 != v76);
    }
    *(_QWORD *)(a1 + 632) = v69;
    *(_QWORD *)(a1 + 648) = 1;
    if (v70)
      operator delete(v70);
  }
  v81 = *(_QWORD *)(a1 + 672);
  v82 = *(_DWORD **)(a1 + 656);
  if ((unint64_t)(v81 - (_QWORD)v82) < 0xC)
  {
    if (v82)
    {
      *(_QWORD *)(a1 + 664) = v82;
      operator delete(v82);
      v81 = 0;
      *(_QWORD *)(a1 + 656) = 0;
      *(_QWORD *)(a1 + 664) = 0;
      *(_QWORD *)(a1 + 672) = 0;
    }
    v83 = v81 >> 1;
    if ((unint64_t)(v81 >> 1) <= 3)
      v83 = 3;
    v84 = (unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL;
    v85 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v84)
      v85 = v83;
    if (v85 >> 62)
      abort();
    v86 = v85;
    v82 = operator new(4 * v85);
    *(_QWORD *)(a1 + 656) = v82;
    *(_QWORD *)(a1 + 672) = &v82[v86];
    v87 = *(_DWORD *)(a1 + 556);
    *v82 = v87;
    v82[1] = v87;
    v82[2] = v87;
LABEL_103:
    *(_QWORD *)(a1 + 664) = v82 + 3;
    goto LABEL_104;
  }
  v88 = *(char **)(a1 + 664);
  v89 = (v88 - (char *)v82) >> 2;
  v90 = 3;
  if (v89 < 3)
    v90 = (v88 - (char *)v82) >> 2;
  if (v90)
  {
    *v82 = *(_DWORD *)(a1 + 556);
    if (v90 != 1)
    {
      v82[1] = *(_DWORD *)(a1 + 556);
      if (v90 != 2)
        v82[2] = *(_DWORD *)(a1 + 556);
    }
  }
  if ((unint64_t)(v88 - (char *)v82) > 0xB)
    goto LABEL_103;
  v91 = &v88[4 * (3 - v89)];
  v92 = 12 - 4 * v89;
  do
  {
    if (!v88)
      goto LABEL_136;
    *(_DWORD *)v88 = *(_DWORD *)(a1 + 556);
    v88 += 4;
    v92 -= 4;
  }
  while (v92);
  *(_QWORD *)(a1 + 664) = v91;
LABEL_104:
  v93 = *(_BYTE **)(a1 + 728);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 744) - (_QWORD)v93) >> 3)) <= 2)
  {
    v94 = *(_BYTE **)(a1 + 736);
    v95 = (char *)operator new(0xA8uLL);
    v96 = &v95[56 * ((v94 - v93) / 56)];
    v97 = v96;
    if (v94 != v93)
    {
      v98 = &v95[56 * ((v94 - v93) / 56)];
      do
      {
        v99 = *(_OWORD *)(v94 - 56);
        v100 = *(_OWORD *)(v94 - 40);
        v101 = *(_OWORD *)(v94 - 24);
        v97 = v98 - 56;
        *((_QWORD *)v98 - 1) = *((_QWORD *)v94 - 1);
        *(_OWORD *)(v98 - 24) = v101;
        *(_OWORD *)(v98 - 40) = v100;
        *(_OWORD *)(v98 - 56) = v99;
        v94 -= 56;
        v98 -= 56;
      }
      while (v94 != v93);
    }
    *(_QWORD *)(a1 + 728) = v97;
    *(_QWORD *)(a1 + 736) = v96;
    *(_QWORD *)(a1 + 744) = v95 + 168;
    if (v93)
      operator delete(v93);
  }
  v102 = *(_BYTE **)(a1 + 752);
  if (0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(a1 + 768) - (_QWORD)v102) >> 3) <= 2)
  {
    v103 = *(_BYTE **)(a1 + 760);
    v104 = (char *)operator new(0x5E8uLL);
    v105 = v104 + 1512;
    v106 = (v103 - v102) / 504;
    v107 = &v104[504 * v106];
    v108 = v107;
    if (v103 != v102)
    {
      v108 = &v104[504 * v106];
      do
      {
        v103 -= 504;
        v108 -= 504;
        memcpy(v108, v103, 0x1F8uLL);
      }
      while (v103 != v102);
    }
    *(_QWORD *)(a1 + 752) = v108;
    *(_QWORD *)(a1 + 760) = v107;
    *(_QWORD *)(a1 + 768) = v105;
    if (v102)
      operator delete(v102);
  }
  v109 = *(_BYTE **)(a1 + 776);
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 792) - (_QWORD)v109) >> 4) <= 2)
  {
    v110 = *(_BYTE **)(a1 + 784);
    v111 = (char *)operator new(0x1B0uLL);
    v112 = &v111[v110 - v109];
    v113 = v112;
    if (v110 != v109)
    {
      v114 = &v111[v110 - v109];
      do
      {
        *((_OWORD *)v114 - 9) = *((_OWORD *)v110 - 9);
        v115 = *((_OWORD *)v110 - 8);
        v116 = *((_OWORD *)v110 - 7);
        v117 = *((_OWORD *)v110 - 5);
        *((_OWORD *)v114 - 6) = *((_OWORD *)v110 - 6);
        *((_OWORD *)v114 - 5) = v117;
        *((_OWORD *)v114 - 8) = v115;
        *((_OWORD *)v114 - 7) = v116;
        v118 = *((_OWORD *)v110 - 4);
        v119 = *((_OWORD *)v110 - 3);
        v120 = *((_OWORD *)v110 - 2);
        v113 = v114 - 144;
        *(_OWORD *)(v114 - 19) = *(_OWORD *)(v110 - 19);
        *((_OWORD *)v114 - 3) = v119;
        *((_OWORD *)v114 - 2) = v120;
        *((_OWORD *)v114 - 4) = v118;
        v110 -= 144;
        v114 -= 144;
      }
      while (v110 != v109);
    }
    *(_QWORD *)(a1 + 776) = v113;
    *(_QWORD *)(a1 + 784) = v112;
    *(_QWORD *)(a1 + 792) = v111 + 432;
    if (v109)
      operator delete(v109);
  }
  v121 = *(_BYTE **)(a1 + 800);
  if (*(_QWORD *)(a1 + 816) - (_QWORD)v121 <= 0x17uLL)
  {
    v122 = *(_BYTE **)(a1 + 808);
    v123 = (char *)operator new(0x18uLL);
    v124 = v122 - v121;
    v125 = &v123[(v122 - v121) & 0xFFFFFFFFFFFFFFF8];
    v126 = v125;
    if (v122 == v121)
      goto LABEL_133;
    if ((unint64_t)(v124 - 8) >= 0x58)
    {
      v126 = &v123[(v122 - v121) & 0xFFFFFFFFFFFFFFF8];
      if (v122 - v123 - (v124 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
      {
        v127 = v124 >> 3;
        v128 = ((unint64_t)(v124 - 8) >> 3) + 1;
        v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
        v130 = &v122[-v129];
        v126 = &v125[-v129];
        v131 = &v123[8 * v127 - 16];
        v132 = (__int128 *)(v122 - 16);
        v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v134 = *v132;
          *((_OWORD *)v131 - 1) = *(v132 - 1);
          *(_OWORD *)v131 = v134;
          v131 -= 32;
          v132 -= 2;
          v133 -= 4;
        }
        while (v133);
        v122 = v130;
        if (v128 == (v128 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_133:
          *(_QWORD *)(a1 + 800) = v126;
          *(_QWORD *)(a1 + 808) = v125;
          *(_QWORD *)(a1 + 816) = v123 + 24;
          if (v121)
            operator delete(v121);
          return a1;
        }
      }
    }
    else
    {
      v126 = &v123[(v122 - v121) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v135 = *((_QWORD *)v122 - 1);
      v122 -= 8;
      *((_QWORD *)v126 - 1) = v135;
      v126 -= 8;
    }
    while (v122 != v121);
    goto LABEL_133;
  }
  return a1;
}

_QWORD *webrtc::FieldTrialsView::IsEnabled(uint64_t a1)
{
  _QWORD *result;
  int *p_p;
  unint64_t v3;
  _BOOL8 v4;
  int v5;
  int v6;
  void *__p;
  unint64_t v9;
  unsigned __int8 v10;

  result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(&__p, a1, "WebRTC-VP8-ForcePartitionResilience", 35);
  if (((char)v10 & 0x80000000) == 0)
  {
    p_p = (int *)&__p;
    v3 = v10;
    goto LABEL_6;
  }
  v3 = v9;
  if ((v9 & 0x8000000000000000) == 0)
  {
    p_p = (int *)__p;
    if (!v9 || __p)
    {
LABEL_6:
      if (v3 >= 7)
      {
        v5 = *p_p;
        v6 = *(int *)((char *)p_p + 3);
        v4 = v5 == 1650552389 && v6 == 1684368482;
        if ((v10 & 0x80) != 0)
          goto LABEL_17;
      }
      else
      {
        v4 = 0;
        if ((v10 & 0x80) != 0)
        {
LABEL_17:
          operator delete(__p);
          return (_QWORD *)v4;
        }
      }
      return (_QWORD *)v4;
    }
  }
  __break(1u);
  return result;
}

void webrtc::LibvpxVp8Encoder::~LibvpxVp8Encoder(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  *this = &off_24C0B6060;
  webrtc::LibvpxVp8Encoder::Release((webrtc::LibvpxVp8Encoder *)this);
  webrtc::EncoderInfoSettings::~EncoderInfoSettings((webrtc::EncoderInfoSettings *)(this + 123));
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 109);
  v2 = this[103];
  if (v2)
  {
    this[104] = v2;
    operator delete(v2);
  }
  v3 = this[100];
  if (v3)
  {
    this[101] = v3;
    operator delete(v3);
  }
  v4 = this[97];
  if (v4)
  {
    this[98] = v4;
    operator delete(v4);
  }
  v5 = this[94];
  if (v5)
  {
    this[95] = v5;
    operator delete(v5);
  }
  v6 = this[91];
  if (v6)
  {
    this[92] = v6;
    operator delete(v6);
  }
  v7 = (char *)this[88];
  if (v7)
  {
    v8 = (char *)this[89];
    v9 = this[88];
    if (v8 != v7)
    {
      do
        webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)(v8 - 320));
      while (v8 != v7);
      v9 = this[88];
    }
    this[89] = v7;
    operator delete(v9);
  }
  v10 = this[85];
  if (v10)
  {
    this[86] = v10;
    operator delete(v10);
  }
  v11 = this[82];
  if (v11)
  {
    this[83] = v11;
    operator delete(v11);
  }
  v12 = this[79];
  if (v12)
    operator delete(v12);
  v13 = this[76];
  if (v13)
    operator delete(v13);
  v14 = this[73];
  if (v14)
  {
    this[74] = v14;
    operator delete(v14);
  }
  v15 = this[72];
  this[72] = 0;
  if (v15)
    (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
  v16 = this[6];
  this[6] = 0;
  if (v16)
    (*(void (**)(void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = (unsigned int *)this[1];
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
  }
}

{
  webrtc::LibvpxVp8Encoder::~LibvpxVp8Encoder(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::LibvpxVp8Encoder::Release(webrtc::LibvpxVp8Encoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  v2 = *((_QWORD *)this + 89);
  v3 = *((_QWORD *)this + 88);
  while (v2 != v3)
    webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)(v2 - 320));
  *((_QWORD *)this + 89) = v3;
  if (*((_BYTE *)this + 536))
  {
    v4 = *((_QWORD *)this + 92);
    if (v4 == *((_QWORD *)this + 91))
    {
      v5 = 0;
    }
    else
    {
      LODWORD(v5) = 0;
      do
      {
        v4 -= 56;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 6) + 72))(*((_QWORD *)this + 6), v4))
        {
          v5 = 4294967293;
        }
        else
        {
          v5 = v5;
        }
      }
      while (v4 != *((_QWORD *)this + 91));
    }
  }
  else
  {
    v5 = 0;
    v4 = *((_QWORD *)this + 91);
  }
  *((_QWORD *)this + 92) = v4;
  *((_QWORD *)this + 95) = *((_QWORD *)this + 94);
  *((_QWORD *)this + 98) = *((_QWORD *)this + 97);
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 83) = *((_QWORD *)this + 82);
  for (i = *((_QWORD *)this + 86);
        i != *((_QWORD *)this + 85);
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), i))
  {
    i -= 136;
  }
  *((_QWORD *)this + 86) = i;
  v7 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_BYTE *)this + 536) = 0;
  return v5;
}

void webrtc::LibvpxVp8Encoder::SetRates(webrtc::LibvpxVp8Encoder *this, const webrtc::VideoEncoder::RateControlParameters *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  char *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  std::vector<unsigned int>::size_type v56;
  std::vector<unsigned int>::pointer begin;
  unint64_t v58;
  char *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::string *v72;
  uint64_t v73;
  char *v74;
  unint64_t v76;
  std::vector<unsigned int> v77;

  if (!*((_BYTE *)this + 536))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
    goto LABEL_7;
  }
  v10 = *((_QWORD *)this + 92);
  v11 = *((_QWORD *)this + 91);
  if (v10 != v11)
  {
    if (*(_DWORD *)(v11 + 16))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        return;
LABEL_7:
      rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc");
      return;
    }
    v19 = *((double *)a2 + 43);
    if (v19 < 1.0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t\a", v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc");
      return;
    }
    v27 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v11) >> 3);
    v28 = (char *)a2 + 176;
    if (!*((_DWORD *)a2 + 44))
    {
      if ((int)v27 >= 1)
      {
        v33 = 0;
        v34 = *((_QWORD *)this + 79);
        do
        {
          *(_QWORD *)(v34 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v33);
          ++v33;
        }
        while (v27 != v33);
      }
      return;
    }
    *((_DWORD *)this + 43) = (v19 + 0.5);
    if (v27 < 2)
    {
LABEL_25:
      v35 = 0;
      v74 = (char *)a2 + 184;
      for (i = -1; ; --i)
      {
        v8 = v27 + ~v35;
        if (v8 > 4)
          goto LABEL_69;
        v37 = &v28[32 * v8];
        v38 = v37[8];
        if (v37[8])
        {
          v39 = *((_DWORD *)v37 + 1);
          v40 = v37[16];
          if (v37[16])
            goto LABEL_30;
        }
        else
        {
          v39 = 0;
          v40 = v37[16];
          if (v37[16])
          {
LABEL_30:
            v41 = *((_DWORD *)v37 + 3);
            v42 = &v28[32 * v8];
            v43 = v42[24];
            if (v42[24])
              goto LABEL_31;
            goto LABEL_38;
          }
        }
        v41 = 0;
        v42 = &v28[32 * v8];
        v43 = v42[24];
        if (v42[24])
        {
LABEL_31:
          v44 = *((_DWORD *)v42 + 5);
          v45 = v42[32];
          if (v42[32])
            goto LABEL_32;
          goto LABEL_39;
        }
LABEL_38:
        v44 = 0;
        v45 = v42[32];
        if (v42[32])
        {
LABEL_32:
          v46 = v41 + v39 + v44 + *((_DWORD *)v42 + 7);
          if (v46 > 0x3E7)
            goto LABEL_33;
          goto LABEL_40;
        }
LABEL_39:
        v46 = v41 + v39 + v44;
        if (v46 > 0x3E7)
        {
LABEL_33:
          v47 = (uint64_t *)(*((_QWORD *)this + 79) + 8 * (v8 >> 6));
          v48 = 1 << v8;
          v49 = *v47;
          if ((*v47 & (1 << v8)) == 0)
          {
            *(_QWORD *)(*((_QWORD *)this + 76) + 8 * (v8 >> 6)) |= v48;
            v49 = *v47;
          }
          v50 = v49 | v48;
          goto LABEL_42;
        }
LABEL_40:
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v10 - v11) >> 3)) > 1)
        {
          v47 = (uint64_t *)(*((_QWORD *)this + 79) + 8 * (v8 >> 6));
          v50 = *v47 & ~(1 << v8);
LABEL_42:
          *v47 = v50;
        }
        v51 = *((_QWORD *)this + 94);
        if (0xEFBEFBEFBEFBEFBFLL * ((*((_QWORD *)this + 95) - v51) >> 3) <= v35)
          goto LABEL_68;
        *(_DWORD *)(v51 + 504 * v35 + 112) = v46 / 0x3E8;
        if (v46 >= 0x3E8)
        {
          v52 = *((_QWORD *)this + 72);
          memset(&v77, 0, sizeof(v77));
          v53 = v45 | v43 | v40;
          if (v53 | v38)
          {
            v54 = 3;
            if (v45)
              v54 = 4;
            v55 = 2;
            if (v45 | v43)
              v55 = v54;
            if (v53)
              v56 = v55;
            else
              v56 = 1;
            std::vector<int>::__append(&v77, v56);
            begin = v77.__begin_;
            if (v77.__end_ != v77.__begin_)
            {
              v58 = v77.__end_ - v77.__begin_;
              if (v58 <= 1)
                v58 = 1;
              v59 = &v74[32 * v27 + 32 * i];
              do
              {
                v60 = *v59;
                if (*v59)
                  v60 = *((_DWORD *)v59 - 1);
                *begin++ = v60;
                v59 += 8;
                --v58;
              }
              while (v58);
            }
          }
          (*(void (**)(uint64_t, unint64_t, std::vector<unsigned int> *, _QWORD))(*(_QWORD *)v52 + 40))(v52, v27 + ~v35, &v77, (int)(*((double *)a2 + 43) + 0.5));
          if (v77.__begin_)
          {
            v77.__end_ = v77.__begin_;
            operator delete(v77.__begin_);
          }
        }
        webrtc::LibvpxVp8Encoder::UpdateVpxConfiguration((uint64_t)this, v27 + ~v35);
        v61 = *((_QWORD *)this + 91);
        if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 92) - v61) >> 3) <= v35)
          goto LABEL_68;
        v62 = *((_QWORD *)this + 94);
        if (0xEFBEFBEFBEFBEFBFLL * ((*((_QWORD *)this + 95) - v62) >> 3) <= v35)
          goto LABEL_68;
        v63 = (*(uint64_t (**)(_QWORD, unint64_t, unint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v61 + 56 * v35, v62 + 504 * v35);
        if ((_DWORD)v63)
        {
          v8 = v63;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            v64 = *((_QWORD *)this + 91);
            if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 92) - v64) >> 3) <= v35)
              goto LABEL_68;
            (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)this + 6) + 200))(*((_QWORD *)this + 6), v64 + 56 * v35);
            v76 = v76 & 0xFFFFFFFF00000000 | 0xD7A;
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v65, v66, v67, v68, v69, v70, v71, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc");
          }
        }
        ++v35;
        v10 = *((_QWORD *)this + 92);
        v11 = *((_QWORD *)this + 91);
        v27 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v11) >> 3);
        if (v35 >= v27)
          return;
      }
    }
    v29 = v27 - 1;
    v30 = *((_QWORD *)this + 94);
    v31 = 0xEFBEFBEFBEFBEFBFLL * ((*((_QWORD *)this + 95) - v30) >> 3);
    if (*((_BYTE *)this + 136) && *((double *)a2 + 43) > 20.0)
    {
      if (v31 > v29)
      {
        v32 = 45;
LABEL_24:
        *(_DWORD *)(v30 + 504 * v29 + 120) = v32;
        goto LABEL_25;
      }
    }
    else if (v31 > v29)
    {
      v32 = *((_DWORD *)this + 138);
      goto LABEL_24;
    }
  }
LABEL_68:
  __break(1u);
LABEL_69:
  v72 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 73, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v8);
  webrtc::LibvpxVp8Encoder::UpdateVpxConfiguration((uint64_t)v72, v73);
}

uint64_t webrtc::LibvpxVp8Encoder::UpdateVpxConfiguration(uint64_t this, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  BOOL v13;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  int v47;
  uint64_t v48;
  _BYTE v49[32];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[29];

  v2 = ~a2 - 0x1041041041041041 * ((uint64_t)(*(_QWORD *)(this + 760) - *(_QWORD *)(this + 752)) >> 3);
  v3 = *(_QWORD *)(this + 776);
  if (0x8E38E38E38E38E39 * ((*(_QWORD *)(this + 784) - v3) >> 4) <= v2)
    goto LABEL_76;
  v4 = this;
  v5 = v3 + 144 * v2;
  this = (uint64_t)(*(_QWORD *(**)(_BYTE *__return_ptr))(**(_QWORD **)(this + 576) + 48))(v49);
  if (v55[28])
  {
    *(_OWORD *)v5 = *(_OWORD *)v49;
    v6 = *(_OWORD *)&v49[16];
    v7 = v50;
    v8 = v52;
    *(_OWORD *)(v5 + 48) = v51;
    *(_OWORD *)(v5 + 64) = v8;
    *(_OWORD *)(v5 + 16) = v6;
    *(_OWORD *)(v5 + 32) = v7;
    v9 = v53;
    v10 = v54;
    v11 = *(_OWORD *)v55;
    *(_OWORD *)(v5 + 125) = *(_OWORD *)&v55[13];
    *(_OWORD *)(v5 + 96) = v10;
    *(_OWORD *)(v5 + 112) = v11;
    *(_OWORD *)(v5 + 80) = v9;
    return 1;
  }
  v12 = v55[0];
  if (!v55[0])
  {
LABEL_48:
    v30 = v3 + 144 * v2 + 116;
    if (!v55[8])
      goto LABEL_51;
    goto LABEL_49;
  }
  if (!*(_BYTE *)(v5 + 112) || *(_DWORD *)v49 != *(_DWORD *)v5)
    goto LABEL_47;
  v13 = *(_QWORD *)&v49[4] == *(_QWORD *)(v5 + 4) && *(_QWORD *)&v49[12] == *(_QWORD *)(v5 + 12);
  if (!v13 || *(unsigned int *)&v49[20] != (unint64_t)*(unsigned int *)(v5 + 20))
    goto LABEL_47;
  v15 = *(_QWORD *)&v49[24] == *(_QWORD *)(v5 + 24) && (_QWORD)v50 == *(_QWORD *)(v5 + 32);
  v16 = v15 && DWORD2(v50) == (unint64_t)*(unsigned int *)(v5 + 40);
  if (!v16 || HIDWORD(v50) != *(_DWORD *)(v5 + 44))
    goto LABEL_47;
  this = *(_QWORD *)(v5 + 80);
  v17 = (_QWORD)v51 == *(_QWORD *)(v5 + 48) && *((_QWORD *)&v51 + 1) == *(_QWORD *)(v5 + 56);
  v18 = v17 && (_QWORD)v52 == *(_QWORD *)(v5 + 64);
  v19 = v18 && *((_QWORD *)&v52 + 1) == *(_QWORD *)(v5 + 72);
  v20 = v19 && (_QWORD)v53 == this;
  v21 = v20 && *((_QWORD *)&v53 + 1) == *(_QWORD *)(v5 + 88);
  v22 = v21 && (_QWORD)v54 == *(_QWORD *)(v5 + 96);
  if (!v22 || *((_QWORD *)&v54 + 1) != *(_QWORD *)(v5 + 104))
  {
LABEL_47:
    v24 = *(_OWORD *)v49;
    v25 = *(_OWORD *)&v49[16];
    v26 = v51;
    *(_OWORD *)(v5 + 32) = v50;
    *(_OWORD *)(v5 + 48) = v26;
    *(_OWORD *)v5 = v24;
    *(_OWORD *)(v5 + 16) = v25;
    v27 = v52;
    v28 = v53;
    v29 = v54;
    *(_BYTE *)(v5 + 112) = v55[0];
    *(_OWORD *)(v5 + 80) = v28;
    *(_OWORD *)(v5 + 96) = v29;
    *(_OWORD *)(v5 + 64) = v27;
    v12 = 1;
    goto LABEL_48;
  }
  v12 = 0;
  v30 = v3 + 144 * v2 + 116;
  if (!v55[8])
    goto LABEL_51;
LABEL_49:
  if (*(_BYTE *)(v3 + 144 * v2 + 120) && *(_DWORD *)&v55[4] == *(_DWORD *)v30)
  {
LABEL_51:
    v31 = 0;
    v32 = v3 + 144 * v2 + 124;
    v33 = v55[16];
    if (!v55[16])
      goto LABEL_52;
    goto LABEL_55;
  }
  v35 = *(_DWORD *)&v55[4];
  *(_BYTE *)(v30 + 4) = v55[8];
  *(_DWORD *)v30 = v35;
  v31 = 1;
  v32 = v3 + 144 * v2 + 124;
  v33 = v55[16];
  if (!v55[16])
  {
LABEL_52:
    v34 = v3 + 144 * v2 + 132;
    if (!v55[24])
      goto LABEL_62;
    goto LABEL_60;
  }
LABEL_55:
  if (*(_BYTE *)(v3 + 144 * v2 + 128) && *(_DWORD *)&v55[12] == *(_DWORD *)v32)
  {
    v33 = 0;
    v34 = v3 + 144 * v2 + 132;
    if (!v55[24])
      goto LABEL_62;
  }
  else
  {
    v36 = *(_DWORD *)&v55[12];
    *(_BYTE *)(v32 + 4) = v55[16];
    *(_DWORD *)v32 = v36;
    v33 = 1;
    v34 = v3 + 144 * v2 + 132;
    if (!v55[24])
    {
LABEL_62:
      v37 = 0;
      goto LABEL_64;
    }
  }
LABEL_60:
  if (*(_BYTE *)(v3 + 144 * v2 + 136) && *(_DWORD *)&v55[20] == *(_DWORD *)v34)
    goto LABEL_62;
  v38 = *(_DWORD *)&v55[20];
  *(_BYTE *)(v34 + 4) = v55[24];
  *(_DWORD *)v34 = v38;
  v37 = 1;
LABEL_64:
  v39 = *(_QWORD *)(v4 + 752);
  if (0xEFBEFBEFBEFBEFBFLL * ((*(_QWORD *)(v4 + 760) - v39) >> 3) <= v2)
  {
LABEL_76:
    __break(1u);
    return this;
  }
  if (!*(_BYTE *)(v5 + 112))
  {
    v48 = v39 + 504 * v2;
    *(_DWORD *)(v48 + 216) = 1;
    *(_DWORD *)(v48 + 240) = 1;
    *(_QWORD *)(v48 + 260) = 1;
    v46 = v12 | v31;
    v47 = v33 | v37;
    if (!*(_BYTE *)(v3 + 144 * v2 + 120))
      goto LABEL_68;
    goto LABEL_67;
  }
  v40 = v39 + 504 * v2;
  *(_DWORD *)(v40 + 216) = *(_DWORD *)v5;
  v41 = *(_OWORD *)(v5 + 4);
  *(_DWORD *)(v40 + 236) = *(_DWORD *)(v5 + 20);
  *(_OWORD *)(v40 + 220) = v41;
  v42 = *(_OWORD *)(v5 + 24);
  *(_DWORD *)(v40 + 256) = *(_DWORD *)(v5 + 40);
  *(_OWORD *)(v40 + 240) = v42;
  *(_DWORD *)(v40 + 260) = *(_DWORD *)(v5 + 44);
  v43 = *(_OWORD *)(v5 + 48);
  v44 = *(_OWORD *)(v5 + 64);
  v45 = *(_OWORD *)(v5 + 96);
  *(_OWORD *)(v40 + 296) = *(_OWORD *)(v5 + 80);
  *(_OWORD *)(v40 + 312) = v45;
  *(_OWORD *)(v40 + 264) = v43;
  *(_OWORD *)(v40 + 280) = v44;
  v46 = v12 | v31;
  v47 = v33 | v37;
  if (*(_BYTE *)(v3 + 144 * v2 + 120))
LABEL_67:
    *(_DWORD *)(v39 + 504 * v2 + 112) = *(_DWORD *)v30;
LABEL_68:
  this = v46 | v47;
  if (*(_BYTE *)(v3 + 144 * v2 + 128))
    *(_DWORD *)(v39 + 504 * v2 + 120) = *(_DWORD *)v32;
  if (*(_BYTE *)(v3 + 144 * v2 + 136))
    *(_DWORD *)(v39 + 504 * v2 + 36) = *(_DWORD *)v34;
  return this;
}

uint64_t webrtc::LibvpxVp8Encoder::OnPacketLossRateUpdate(webrtc::LibvpxVp8Encoder *this, float a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)result + 80))(result, a2);
  return result;
}

uint64_t webrtc::LibvpxVp8Encoder::OnRttUpdate(webrtc::LibvpxVp8Encoder *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  return result;
}

uint64_t webrtc::LibvpxVp8Encoder::OnLossNotification(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 576);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t webrtc::LibvpxVp8Encoder::SetFecControllerOverride(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 976) = a2;
  return result;
}

void webrtc::LibvpxVp8Encoder::InitEncode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int32 *v17;
  int32x4_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  _DWORD *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  int *v76;
  int *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  _DWORD *v84;
  int *v85;
  unint64_t v86;
  int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  _BYTE *v96;
  int v97;
  int v98;
  _BYTE *v99;
  int v100;
  int v101;
  unsigned int v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  unsigned int *v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  _DWORD *v119;
  _DWORD *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  std::vector<unsigned int>::size_type v145;
  _BYTE *v146;
  std::vector<unsigned int>::pointer begin;
  unint64_t v148;
  _BYTE *v149;
  unsigned int v150;
  void **v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  unsigned int v156;
  uint64_t v157;
  std::vector<unsigned int> __p;
  uint64_t v159[3];
  _BYTE v160[168];
  _QWORD v161[92];

  if (!a2)
    return;
  if (!*(_DWORD *)(a2 + 20))
    return;
  v6 = *(_DWORD *)(a2 + 12);
  if (v6)
  {
    if (*(_DWORD *)(a2 + 8) > v6)
      return;
  }
  if (!*(_WORD *)(a2 + 4)
    || !*(_WORD *)(a2 + 6)
    || *(int *)(a3 + 4) < 1
    || *(unsigned __int16 *)(a2 + 372) >= 0x100u && *(_WORD *)(a2 + 372) > 2u)
  {
    return;
  }
  *(_DWORD *)(a1 + 568) = 0;
  v7 = *(unsigned __int8 *)(a2 + 32);
  if (*(_BYTE *)(a2 + 32))
  {
    v8 = 0;
    v9 = (unsigned __int8 *)(a2 + 68);
    do
    {
      v10 = *v9;
      v9 += 36;
      if (v10)
        *(_DWORD *)(a1 + 568) = ++v8;
      --v7;
    }
    while (v7);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 24);
    if (*(_BYTE *)(a2 + 24))
    {
      v8 = 1;
      *(_DWORD *)(a1 + 568) = 1;
    }
  }
  if (*(_BYTE *)(a2 + 358) && v8 > 1)
    return;
  v12 = *(_DWORD **)(a1 + 680);
  v13 = v12 == *(_DWORD **)(a1 + 688) ? 258 : *v12;
  v156 = v13;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 0x80000000) != 0)
    return;
  if (*(unsigned __int8 *)(a2 + 32) <= 1u)
    v14 = 1;
  else
    v14 = *(unsigned __int8 *)(a2 + 32);
  if (v14 >= 8)
  {
    v15 = v14 & 0xF8;
    v17 = (__int32 *)(a2 + 160);
    v18 = 0uLL;
    v19 = v15;
    v20 = 0uLL;
    do
    {
      v21.i32[0] = *(v17 - 27);
      v21.i32[1] = *(v17 - 18);
      v21.i32[2] = *(v17 - 9);
      v21.i32[3] = *v17;
      v22.i32[0] = v17[9];
      v22.i32[1] = v17[18];
      v22.i32[2] = v17[27];
      v22.i32[3] = v17[36];
      v18 = vaddq_s32(v21, v18);
      v20 = vaddq_s32(v22, v20);
      v17 += 72;
      v19 -= 8;
    }
    while (v19);
    v16 = vaddvq_s32(vaddq_s32(v20, v18));
    if (v15 == v14)
      goto LABEL_38;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v23 = v14 - v15;
  v24 = (int *)(a2 + 36 * v15 + 52);
  do
  {
    v25 = *v24;
    v24 += 9;
    v16 += v25;
    --v23;
  }
  while (v23);
LABEL_38:
  if (v16)
    v26 = v14;
  else
    v26 = 1;
  if (v26 >= 2
    && !webrtc::SimulcastUtility::ValidSimulcastParameters((webrtc::SimulcastUtility *)a2, (const VideoCodec *)v26))
  {
    return;
  }
  v27 = a1 + 680;
  v161[90] = &off_24C0C55B0;
  webrtc::Vp8TemporalLayersFactory::Create((int *)a2, *(uint64_t (****)(_QWORD, uint64_t))(a1 + 976), v161);
  v28 = v161[0];
  v161[0] = 0;
  v29 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = v28;
  if (v29)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v161[0];
    v161[0] = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  *(_DWORD *)(a1 + 560) = *(_DWORD *)(a3 + 4);
  *(_QWORD *)(a1 + 544) = 0;
  memcpy((void *)(a1 + 152), (const void *)a2, 0x17DuLL);
  if (!*(_BYTE *)(a1 + 184))
  {
    v31 = *(unsigned __int16 *)(a1 + 158);
    *(_DWORD *)(a1 + 188) = *(unsigned __int16 *)(a1 + 156);
    *(_DWORD *)(a1 + 192) = v31;
  }
  std::vector<webrtc::EncodedImage>::resize((void **)(a1 + 704), v26);
  std::vector<vpx_codec_ctx>::resize((void **)(a1 + 728), v26);
  std::vector<vpx_codec_enc_cfg>::resize((void **)(a1 + 752), v26);
  std::vector<webrtc::Vp8EncoderConfig>::resize((char **)(a1 + 776), v26);
  std::vector<vpx_rational>::resize((char **)(a1 + 800), v26);
  std::vector<vpx_image>::resize((void **)(a1 + 680), v26);
  v32 = (uint64_t *)(a1 + 632);
  std::vector<BOOL>::resize(a1 + 632, v26, 0);
  **(_QWORD **)(a1 + 632) |= 1uLL;
  std::vector<int>::resize((std::vector<int> *)(a1 + 656), v26);
  std::fill[abi:sn180100]<std::vector<BOOL>>(*(char **)(a1 + 608), 0, *(_QWORD *)(a1 + 608) + 8 * (*(_QWORD *)(a1 + 616) >> 6), *(_DWORD *)(a1 + 616) & 0x3F);
  v37 = *(void **)(a1 + 824);
  v38 = *(_QWORD *)(a1 + 832) - (_QWORD)v37;
  if (v38 >= 1)
    memset_pattern16(v37, &unk_208F0B600, 8 * (((unint64_t)v38 >> 3) - ((unint64_t)v38 > 7)) + 8);
  v39 = (v26 - 1);
  if (v26 >= 2)
  {
    v40 = 0;
    v41 = *(_QWORD *)(a1 + 800);
    v42 = (*(_QWORD *)(a1 + 808) - v41) >> 3;
    v43 = v26 - 1;
    v44 = *(_DWORD *)(a2 + 36 * ((int)v26 - 1) + 36);
    do
    {
      --v43;
      v45 = *(_DWORD *)(a2 + 36 * v43 + 36);
      v46 = v44 % v45;
      v47 = v45;
      if (v44 % v45)
      {
        v48 = *(_DWORD *)(a2 + 36 * v43 + 36);
        do
        {
          v47 = v46;
          v46 = v48 % v46;
          v48 = v47;
        }
        while (v46);
      }
      if (v40 == v42)
        goto LABEL_228;
      v49 = (int *)(v41 + 8 * v40);
      *v49 = v44 / v47;
      v49[1] = v45 / v47;
      v50 = *v32;
      *(_QWORD *)(*v32 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v40);
      ++v40;
      v44 = v45;
    }
    while (v40 != v39);
    *(_QWORD *)(v50 + (((unint64_t)(v26 - 1) >> 3) & 0x1FFFFFF8)) &= ~(1 << (v26
                                                                                                  - 1));
    if (v42 <= v39)
      goto LABEL_228;
    *(_QWORD *)(v41 + 8 * v39) = 0x100000001;
  }
  if (*(_QWORD *)(a1 + 760) == *(_QWORD *)(a1 + 752))
    goto LABEL_228;
  if ((*(unsigned int (**)(_QWORD, char **))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48), &vpx_codec_vp8_cx_algo))
  {
    return;
  }
  v53 = *(_QWORD *)(a1 + 752);
  if (*(_QWORD *)(a1 + 760) == v53)
    goto LABEL_228;
  *(_QWORD *)(v53 + 28) = 0x15F9000000001;
  *(_DWORD *)(v53 + 44) = 0;
  webrtc::SimulcastUtility::NumberOfTemporalLayers((webrtc::SimulcastUtility *)a2, 0, v51, v52, v33, v34, v35, v36);
  v55 = *(_QWORD *)(a1 + 752);
  if (*(_QWORD *)(a1 + 760) == v55)
    goto LABEL_228;
  *(_DWORD *)(v55 + 36) = v54 > 1;
  v56 = webrtc::FieldTrialsView::IsEnabled(*(_QWORD *)(a1 + 16));
  if ((_DWORD)v26 == 1)
  {
    if (v56)
    {
      webrtc::SimulcastUtility::NumberOfTemporalLayers((webrtc::SimulcastUtility *)a2, 0, v57, v58, v33, v34, v35, v36);
      if (v59 >= 2)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        {
          if (*(_QWORD *)(a1 + 760) == *(_QWORD *)(a1 + 752))
            goto LABEL_228;
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v60, v61, v62, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc");
        }
        v63 = *(_QWORD *)(a1 + 752);
        if (*(_QWORD *)(a1 + 760) == v63)
          goto LABEL_228;
        *(_DWORD *)(v63 + 36) = 2;
      }
    }
  }
  v64 = *(unsigned __int8 *)(a1 + 532);
  if (*(_BYTE *)(a1 + 532))
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 576) + 32))(*(_QWORD *)(a1 + 576), 0))
      v64 = 30;
    else
      v64 = 0;
  }
  v65 = *(_DWORD **)(a1 + 752);
  if (*(_DWORD **)(a1 + 760) == v65)
    goto LABEL_228;
  v65[18] = 1;
  v65[10] = 0;
  v65[12] = v64;
  v65[13] = 0;
  if (*(_DWORD *)(a1 + 476) == 1)
    v66 = 12;
  else
    v66 = 2;
  v65[29] = v66;
  v67 = *(_DWORD *)(a2 + 28);
  if (v67 >= v66)
    *(_DWORD *)(a1 + 552) = v67;
  v157 = a1;
  if ((webrtc::RateControlSettings::LibvpxVp8QpMax((webrtc::RateControlSettings *)(a1 + 56)) & 0xFF00000000) != 0)
  {
    v68 = webrtc::RateControlSettings::LibvpxVp8QpMax((webrtc::RateControlSettings *)(a1 + 56));
    if ((v68 & 0xFF00000000) == 0)
      goto LABEL_233;
    v69 = a1;
    v70 = *(_QWORD *)(a1 + 760);
    v71 = *(_QWORD *)(a1 + 752);
    if (v70 == v71)
      goto LABEL_228;
    v72 = *(_DWORD *)(v71 + 116);
    if (v72 <= (int)v68)
      v72 = v68;
    *(_DWORD *)(a1 + 552) = v72;
  }
  else
  {
    v70 = *(_QWORD *)(a1 + 760);
    v71 = *(_QWORD *)(a1 + 752);
    v69 = a1;
  }
  if (v70 == v71)
    goto LABEL_228;
  *(_DWORD *)(v71 + 120) = *(_DWORD *)(v69 + 552);
  *(_DWORD *)(v71 + 140) = 600;
  *(_OWORD *)(v71 + 124) = xmmword_208F0B5F0;
  v73 = (float)((float)((float)*(unsigned int *)(v69 + 172) * 300.0) / 10.0);
  if (v73 <= 0x12C)
    v73 = 300;
  *(_DWORD *)(v69 + 564) = v73;
  v74 = *(_DWORD *)(a2 + 360);
  if (v74 < 1)
  {
    *(_DWORD *)(v71 + 160) = 0;
  }
  else
  {
    *(_DWORD *)(v71 + 160) = 1;
    *(_DWORD *)(v71 + 168) = v74;
  }
  v75 = *(_DWORD *)(a2 + 376);
  switch(v75)
  {
    case 3:
      v76 = *(int **)(v69 + 664);
      v77 = *(int **)(v69 + 656);
      if (v76 == v77)
        goto LABEL_228;
      v78 = -3;
      break;
    case 2:
      v76 = *(int **)(v69 + 664);
      v77 = *(int **)(v69 + 656);
      if (v76 == v77)
        goto LABEL_228;
      v78 = -4;
      break;
    case 1:
      v76 = *(int **)(v69 + 664);
      v77 = *(int **)(v69 + 656);
      if (v76 == v77)
        goto LABEL_228;
      v78 = -5;
      break;
    default:
      v76 = *(int **)(v69 + 664);
      v77 = *(int **)(v69 + 656);
      if (v76 == v77)
        goto LABEL_228;
      v78 = -6;
      break;
  }
  *v77 = v78;
  if (v76 == v77)
  {
LABEL_228:
    __break(1u);
LABEL_229:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 73, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v33, v34, v35, v36, v27);
LABEL_230:
    abort();
  }
  *(_DWORD *)(v69 + 556) = v78;
  v79 = *(unsigned __int16 *)(a2 + 4);
  v80 = *(unsigned __int16 *)(a2 + 6);
  if (v78 <= -4)
    v81 = -4;
  else
    v81 = v78;
  if ((v80 * v79) >> 10 < 0x63)
    v78 = v81;
  *v77 = v78;
  if (v26 >= 2)
  {
    v82 = v76 - v77;
    if (v82 <= 1)
      v82 = 1;
    v83 = v82 - 1;
    v84 = (_DWORD *)(a2 + 36 * v39 + 4);
    v85 = v77 + 1;
    v86 = v26 - 1;
    while (v83)
    {
      if (*(int *)(v69 + 556) <= -4)
        v87 = -4;
      else
        v87 = *(_DWORD *)(v69 + 556);
      if (*(v84 - 1) * *v84 >= 101376)
        v88 = *(_DWORD *)(v69 + 556);
      else
        v88 = v87;
      *v85++ = v88;
      --v83;
      v84 -= 9;
      if (!--v86)
        goto LABEL_124;
    }
    goto LABEL_228;
  }
LABEL_124:
  *(_DWORD *)(v71 + 12) = v79;
  *(_DWORD *)(v71 + 16) = v80;
  v89 = webrtc::LibvpxVp8Encoder::NumberOfThreads(*(webrtc::LibvpxVp8Encoder **)(v69 + 16), v79, v80, *(_DWORD *)(a3 + 4));
  v90 = *(_QWORD *)(v69 + 752);
  if (*(_QWORD *)(v69 + 760) == v90)
    goto LABEL_228;
  *(_DWORD *)(v90 + 4) = v89;
  if (*(_BYTE *)(a3 + 20))
  {
    v91 = *(_DWORD *)(a3 + 16);
    if (v91 >= v89)
      v91 = v89;
    *(_DWORD *)(v90 + 4) = v91;
  }
  v155 = (_QWORD *)(a1 + 632);
  if (*(_QWORD *)(v69 + 688) == *(_QWORD *)(v69 + 680))
    goto LABEL_228;
  (*(void (**)(_QWORD))(**(_QWORD **)(v69 + 48) + 24))(*(_QWORD *)(v69 + 48));
  v153 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v69 + 736) - *(_QWORD *)(v69 + 728)) >> 3) - 1;
  webrtc::SimulcastRateAllocator::SimulcastRateAllocator((webrtc::SimulcastRateAllocator *)v161, (const webrtc::VideoCodec *)(a1 + 152));
  v159[0] = (1000 * *(_DWORD *)(a2 + 8));
  v159[1] = v159[0];
  LODWORD(v92) = *(_DWORD *)(a2 + 20);
  *(double *)&v159[2] = (double)v92;
  webrtc::SimulcastRateAllocator::Allocate((webrtc::SimulcastRateAllocator *)v161, v159, (uint64_t)v160);
  v27 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  while (1)
  {
    if (!v27)
      goto LABEL_136;
    if (v27 >= *(unsigned __int8 *)(a2 + 32))
      break;
    if (v27 > 4)
      goto LABEL_229;
LABEL_136:
    v96 = &v160[32 * v27];
    v97 = v96[8];
    if (v96[8])
      v97 = *((_DWORD *)v96 + 1);
    if (v96[16])
    {
      v98 = *((_DWORD *)v96 + 3);
      v99 = &v160[32 * v27];
      v100 = v99[24];
      if (!v99[24])
        goto LABEL_141;
LABEL_140:
      v100 = *((_DWORD *)v99 + 5);
      goto LABEL_141;
    }
    v98 = 0;
    v99 = &v160[32 * v27];
    v100 = v99[24];
    if (v99[24])
      goto LABEL_140;
LABEL_141:
    if (v99[32])
      v101 = *((_DWORD *)v99 + 7);
    else
      v101 = 0;
    v102 = (v98 + v97 + v100 + v101) / 0x3E8u;
    if (v94 >= v95)
    {
      v104 = (v94 - v93) >> 2;
      v105 = v104 + 1;
      if ((unint64_t)(v104 + 1) >> 62)
        goto LABEL_230;
      if ((v95 - v93) >> 1 > v105)
        v105 = (v95 - v93) >> 1;
      if ((unint64_t)(v95 - v93) >= 0x7FFFFFFFFFFFFFFCLL)
        v105 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v105)
        goto LABEL_228;
      if (v105 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v106 = 4 * v105;
      v107 = operator new(4 * v105);
      v108 = (unsigned int *)&v107[4 * v104];
      *v108 = v102;
      v103 = (char *)(v108 + 1);
      if (v94 == v93)
      {
        v69 = v157;
        v95 = &v107[v106];
        if (!v93)
          goto LABEL_131;
      }
      else
      {
        v109 = v94 - v93 - 4;
        if (v109 < 0xBC
          || (v110 = (v94 - 4 - v93) & 0xFFFFFFFFFFFFFFFCLL, &v107[v94 - v93 - 4 - v110] > &v107[v94 - v93 - 4])
          || &v94[-v110 - 4] > v94 - 4
          || (unint64_t)(v93 - v107) < 0x20)
        {
          v111 = v94;
          v69 = v157;
          goto LABEL_162;
        }
        v113 = (v109 >> 2) + 1;
        v114 = 4 * (v113 & 0x7FFFFFFFFFFFFFF8);
        v111 = &v94[-v114];
        v108 = (unsigned int *)((char *)v108 - v114);
        v115 = &v107[4 * v104 - 16];
        v116 = v94 - 16;
        v117 = v113 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v118 = *(_OWORD *)v116;
          *(v115 - 1) = *((_OWORD *)v116 - 1);
          *v115 = v118;
          v115 -= 2;
          v116 -= 32;
          v117 -= 8;
        }
        while (v117);
        v69 = v157;
        if (v113 != (v113 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_162:
            v112 = *((_DWORD *)v111 - 1);
            v111 -= 4;
            *--v108 = v112;
          }
          while (v111 != v93);
        }
        v95 = &v107[v106];
        if (!v93)
        {
LABEL_131:
          v93 = (char *)v108;
          goto LABEL_132;
        }
      }
      operator delete(v93);
      goto LABEL_131;
    }
    if (!v94)
      goto LABEL_228;
    *(_DWORD *)v94 = v102;
    v103 = v94 + 4;
LABEL_132:
    ++v27;
    v94 = v103;
  }
  v154 = (v94 - v93) >> 2;
  if (v154 <= v153)
    goto LABEL_228;
  v119 = *(_DWORD **)(v69 + 760);
  v120 = *(_DWORD **)(v69 + 752);
  if (v119 == v120)
    goto LABEL_228;
  v120[28] = *(_DWORD *)&v93[4 * v153];
  if (*(_DWORD *)&v93[4 * v153])
  {
    v121 = *(float *)(a2 + 36 * v153 + 44);
    if (!(_DWORD)v121)
      v121 = *(unsigned int *)(a2 + 20);
    v122 = *(_QWORD *)(v69 + 576);
    webrtc::VideoBitrateAllocation::GetTemporalLayerAllocation((webrtc::VideoBitrateAllocation *)v160, v153, v33, v34, v35, v36, &__p);
    (*(void (**)(uint64_t, unint64_t, std::vector<unsigned int> *, uint64_t))(*(_QWORD *)v122 + 40))(v122, v153, &__p, v121);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    v69 = v157;
    v119 = *(_DWORD **)(v157 + 760);
    v120 = *(_DWORD **)(v157 + 752);
  }
  if (v119 == v120)
    goto LABEL_228;
  (*(void (**)(_QWORD, unint64_t, _QWORD, _QWORD))(**(_QWORD **)(v69 + 576) + 16))(*(_QWORD *)(v69 + 576), v153, v120[29], v120[30]);
  webrtc::LibvpxVp8Encoder::UpdateVpxConfiguration(v69, v153);
  v123 = *(unsigned __int8 *)(v69 + 532);
  if (*(_BYTE *)(v69 + 532))
  {
    if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(v69 + 576) + 32))(*(_QWORD *)(v69 + 576), v153))
    {
      v123 = 30;
    }
    else
    {
      v123 = 0;
    }
  }
  v124 = *(_QWORD *)(v69 + 752);
  if (*(_QWORD *)(v69 + 760) == v124)
    goto LABEL_228;
  *(_DWORD *)(v124 + 48) = v123;
  v125 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v69 + 736) - *(_QWORD *)(v69 + 728)) >> 3);
  if (v125 < 2)
  {
LABEL_227:
    webrtc::LibvpxVp8Encoder::InitAndSetControlSettings((webrtc::LibvpxVp8Encoder *)v69);
    operator delete(v93);
    webrtc::SimulcastRateAllocator::~SimulcastRateAllocator((webrtc::SimulcastRateAllocator *)v161);
    return;
  }
  v126 = -2;
  v27 = 1;
  while (2)
  {
    v127 = *(char **)(v69 + 752);
    if (0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(*(_QWORD *)(v69 + 760) - (_QWORD)v127) >> 3) <= v27)
      goto LABEL_228;
    memcpy(&v127[504 * v27], v127, 0x1F8uLL);
    v128 = *(_QWORD *)(v69 + 752);
    v129 = 0xEFBEFBEFBEFBEFBFLL * ((*(_QWORD *)(v69 + 760) - v128) >> 3);
    if (v129 <= v27)
      goto LABEL_228;
    v130 = v125 + ~v27;
    v131 = (_QWORD *)(a2 + 36 * v130 + 36);
    v132 = v128 + 504 * v27;
    *(_QWORD *)(v132 + 12) = *v131;
    *(_DWORD *)(v132 + 4) = 1;
    v133 = *(unsigned __int8 *)(v69 + 532);
    if (*(_BYTE *)(v69 + 532))
    {
      if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(v69 + 576) + 32))(*(_QWORD *)(v69 + 576), v125 + ~v27))
      {
        v133 = 30;
      }
      else
      {
        v133 = 0;
      }
      v128 = *(_QWORD *)(v69 + 752);
      v129 = 0xEFBEFBEFBEFBEFBFLL * ((*(_QWORD *)(v69 + 760) - v128) >> 3);
    }
    if (v129 <= v27)
      goto LABEL_228;
    *(_DWORD *)(v128 + 504 * v27 + 48) = v133;
    v134 = *(_QWORD *)(v69 + 680);
    if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v69 + 688) - v134) >> 3) <= v27)
      goto LABEL_228;
    (*(void (**)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v69 + 48) + 16))(*(_QWORD *)(v69 + 48), v134 + 136 * v27, v156, *(unsigned int *)v131, *(unsigned int *)(a2 + 36 * v130 + 40), 32);
    if (v154 <= v130)
      goto LABEL_228;
    v135 = *(_DWORD *)&v93[4 * v130];
    if (v135)
    {
      v136 = (uint64_t *)(*v155 + 8 * ((unint64_t)(int)v130 >> 6));
      v137 = 1 << v130;
      v138 = *v136;
      if ((*v136 & (1 << v130)) == 0)
      {
        *(_QWORD *)(*(_QWORD *)(v69 + 608) + 8 * ((unint64_t)(int)v130 >> 6)) |= v137;
        v138 = *v136;
      }
      v139 = v138 | v137;
    }
    else
    {
      v136 = (uint64_t *)(*v155 + 8 * ((unint64_t)(int)v130 >> 6));
      v139 = *v136 & ~(1 << v130);
    }
    *v136 = v139;
    v140 = *(_QWORD *)(v69 + 752);
    v141 = 0xEFBEFBEFBEFBEFBFLL * ((*(_QWORD *)(v69 + 760) - v140) >> 3);
    if (v141 <= v27)
      goto LABEL_228;
    *(_DWORD *)(v140 + 504 * v27 + 112) = v135;
    if (!*(_DWORD *)&v93[4 * v130])
      goto LABEL_225;
    v142 = *(float *)(a2 + 36 * v130 + 44);
    if (!(_DWORD)v142)
      v142 = *(unsigned int *)(a2 + 20);
    if (v130 < 5)
    {
      v143 = *(_QWORD *)(v69 + 576);
      memset(&__p, 0, sizeof(__p));
      v144 = &v160[32 * v130];
      if (v144[32])
      {
        v145 = 4;
LABEL_215:
        std::vector<int>::__append(&__p, v145);
        begin = __p.__begin_;
        if (__p.__end_ != __p.__begin_)
        {
          v148 = __p.__end_ - __p.__begin_;
          if (v148 <= 1)
            v148 = 1;
          v149 = &v160[32 * v125 + 8 + 32 * v126];
          do
          {
            v150 = *v149;
            if (*v149)
              v150 = *((_DWORD *)v149 - 1);
            *begin++ = v150;
            v149 += 8;
            --v148;
          }
          while (v148);
        }
      }
      else
      {
        if (v144[24])
        {
          v145 = 3;
          goto LABEL_215;
        }
        v146 = &v160[32 * v130];
        if (v146[16])
        {
          v145 = 2;
          goto LABEL_215;
        }
        if (v146[8])
        {
          v145 = 1;
          goto LABEL_215;
        }
      }
      (*(void (**)(uint64_t, unint64_t, std::vector<unsigned int> *, uint64_t))(*(_QWORD *)v143 + 40))(v143, v125 + ~v27, &__p, v142);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      v69 = v157;
      v140 = *(_QWORD *)(v157 + 752);
      v141 = 0xEFBEFBEFBEFBEFBFLL * ((*(_QWORD *)(v157 + 760) - v140) >> 3);
LABEL_225:
      if (v141 <= v27)
        goto LABEL_228;
      (*(void (**)(_QWORD, unint64_t, _QWORD, _QWORD))(**(_QWORD **)(v69 + 576) + 16))(*(_QWORD *)(v69 + 576), v125 + ~v27, *(unsigned int *)(v140 + 504 * v27 + 116), *(unsigned int *)(v140 + 504 * v27 + 120));
      webrtc::LibvpxVp8Encoder::UpdateVpxConfiguration(v69, v125 + ~v27++);
      v125 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v69 + 736) - *(_QWORD *)(v69 + 728)) >> 3);
      --v126;
      if (v27 >= v125)
        goto LABEL_227;
      continue;
    }
    break;
  }
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 91, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v33, v34, v35, v36, v125 + ~v27);
LABEL_233:
  std::__throw_bad_optional_access[abi:sn180100]();
  std::vector<webrtc::EncodedImage>::resize(v151, v152);
}

void std::vector<webrtc::EncodedImage>::resize(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  char *v41;
  char *v42;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 6);
  v7 = a2 - v6;
  if (a2 > v6)
  {
    v8 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v4) >> 6) >= v7)
    {
      v41 = &v4[320 * v7];
      while (v4)
      {
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
        *((_QWORD *)v4 + 3) = 4;
        v4[32] = 0;
        *((_DWORD *)v4 + 9) = -1;
        v4[40] = -1;
        v4[128] = 0;
        v4[160] = 0;
        v4[168] = 0;
        v4[176] = 0;
        v4[184] = 0;
        v4[188] = 0;
        v4[192] = 0;
        v4[196] = 0;
        *((_QWORD *)v4 + 26) = 0;
        *((_QWORD *)v4 + 27) = 0;
        v4[112] = 0;
        *((_OWORD *)v4 + 5) = 0uLL;
        *((_OWORD *)v4 + 6) = 0uLL;
        *((_OWORD *)v4 + 3) = 0uLL;
        *((_OWORD *)v4 + 4) = 0uLL;
        *(_QWORD *)(v4 + 149) = 0;
        *((_QWORD *)v4 + 17) = 0;
        *((_QWORD *)v4 + 18) = 0;
        *((_QWORD *)v4 + 25) = v4 + 208;
        v4[224] = 0;
        v4[292] = 0;
        v4[296] = 0;
        v4[298] = 0;
        *((_QWORD *)v4 + 38) = 0;
        *((_WORD *)v4 + 156) = 1;
        v4 += 320;
        if (v4 == v41)
        {
          a1[1] = v41;
          return;
        }
      }
      __break(1u);
    }
    else if (a2 <= 0xCCCCCCCCCCCCCCLL)
    {
      v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v5) >> 6);
      v10 = 2 * v9;
      if (2 * v9 <= a2)
        v10 = a2;
      if (v9 >= 0x66666666666666)
        v11 = 0xCCCCCCCCCCCCCCLL;
      else
        v11 = v10;
      if (v11 > 0xCCCCCCCCCCCCCCLL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v12 = (char *)operator new(320 * v11);
      v13 = &v12[320 * v6];
      v14 = &v12[320 * a2];
      v15 = v13;
      do
      {
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        *((_QWORD *)v15 + 3) = 4;
        v15[32] = 0;
        *((_DWORD *)v15 + 9) = -1;
        v15[40] = -1;
        v15[128] = 0;
        v15[160] = 0;
        v15[168] = 0;
        v15[176] = 0;
        v15[184] = 0;
        v15[188] = 0;
        v15[192] = 0;
        v15[196] = 0;
        *((_QWORD *)v15 + 26) = 0;
        *((_QWORD *)v15 + 27) = 0;
        v15[112] = 0;
        *((_OWORD *)v15 + 5) = 0uLL;
        *((_OWORD *)v15 + 6) = 0uLL;
        *((_OWORD *)v15 + 3) = 0uLL;
        *((_OWORD *)v15 + 4) = 0uLL;
        *(_QWORD *)(v15 + 149) = 0;
        *((_QWORD *)v15 + 17) = 0;
        *((_QWORD *)v15 + 18) = 0;
        *((_QWORD *)v15 + 25) = v15 + 208;
        v15[224] = 0;
        v15[292] = 0;
        v15[296] = 0;
        v15[298] = 0;
        *((_QWORD *)v15 + 38) = 0;
        *((_WORD *)v15 + 156) = 1;
        v15 += 320;
      }
      while (v15 != v14);
      v16 = &v12[320 * v11];
      if (v4 == v5)
      {
        *a1 = v13;
        a1[1] = v14;
        a1[2] = v16;
        if (!v4)
          return;
      }
      else
      {
        v17 = 0;
        do
        {
          v19 = &v13[v17];
          v20 = &v13[v17 - 320];
          v21 = *(_OWORD *)&v4[v17 - 240];
          v22 = *(_OWORD *)&v4[v17 - 224];
          v23 = *(_OWORD *)&v4[v17 - 208];
          *(v19 - 192) = v4[v17 - 192];
          *((_OWORD *)v19 - 14) = v22;
          *((_OWORD *)v19 - 13) = v23;
          *((_OWORD *)v19 - 15) = v21;
          *(_OWORD *)v20 = *(_OWORD *)&v4[v17 - 320];
          v24 = *(_OWORD *)&v4[v17 - 304];
          v25 = *(_OWORD *)&v4[v17 - 288];
          v26 = *(_OWORD *)&v4[v17 - 272];
          *((_OWORD *)v19 - 16) = *(_OWORD *)&v4[v17 - 256];
          *((_OWORD *)v20 + 2) = v25;
          *((_OWORD *)v20 + 3) = v26;
          *((_OWORD *)v20 + 1) = v24;
          v27 = *(_QWORD *)&v4[v17 - 184];
          *(_QWORD *)&v4[v17 - 184] = 0;
          *((_QWORD *)v19 - 23) = v27;
          v28 = *(_OWORD *)&v4[v17 - 176];
          v29 = *(_OWORD *)&v4[v17 - 160];
          v30 = *(_OWORD *)&v4[v17 - 144];
          *(_QWORD *)(v19 - 131) = *(_QWORD *)&v4[v17 - 131];
          *((_OWORD *)v19 - 10) = v29;
          *((_OWORD *)v19 - 9) = v30;
          *((_OWORD *)v19 - 11) = v28;
          *((_QWORD *)v19 - 15) = *(_QWORD *)&v4[v17 - 120];
          v31 = (uint64_t *)&v4[v17 - 112];
          v32 = *v31;
          *(_QWORD *)&v13[v17 - 112] = *v31;
          v33 = (uint64_t)&v13[v17 - 112];
          v34 = *(_QWORD *)&v4[v17 - 104];
          *((_QWORD *)v19 - 13) = v34;
          if (v34)
          {
            *(_QWORD *)(v32 + 16) = v33;
            *(_QWORD *)&v4[v17 - 120] = v31;
            *v31 = 0;
            *(_QWORD *)&v4[v17 - 104] = 0;
          }
          else
          {
            *((_QWORD *)v19 - 15) = v33;
          }
          v35 = &v13[v17];
          v13[v17 - 96] = 0;
          v13[v17 - 28] = 0;
          v36 = &v4[v17];
          if (v4[v17 - 28])
          {
            *(_OWORD *)&v13[v17 - 96] = *((_OWORD *)v36 - 6);
            v37 = *((_OWORD *)v36 - 5);
            v38 = *((_OWORD *)v36 - 4);
            v39 = *((_OWORD *)v36 - 3);
            v13[v17 - 32] = *(v36 - 32);
            *(_OWORD *)&v13[v17 - 64] = v38;
            *(_OWORD *)&v13[v17 - 48] = v39;
            *(_OWORD *)&v13[v17 - 80] = v37;
            *(v35 - 28) = 1;
          }
          *((_DWORD *)v35 - 6) = *((_DWORD *)v36 - 6);
          v18 = *((_QWORD *)v36 - 2);
          *((_QWORD *)v36 - 2) = 0;
          *((_QWORD *)v35 - 2) = v18;
          *((_WORD *)v35 - 4) = *((_WORD *)v36 - 4);
          v17 -= 320;
        }
        while (&v4[v17] != v5);
        v4 = (char *)*a1;
        v42 = (char *)a1[1];
        *a1 = &v13[v17];
        a1[1] = v14;
        a1[2] = v16;
        while (v42 != v4)
          webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)(v42 - 320));
        if (!v4)
          return;
      }
      operator delete(v4);
      return;
    }
    abort();
  }
  if (a2 < v6)
  {
    v40 = &v5[320 * a2];
    while (v4 != v40)
    {
      v4 -= 320;
      webrtc::EncodedImage::~EncodedImage((webrtc::EncodedImage *)v4);
    }
    a1[1] = v40;
  }
}

void std::vector<vpx_codec_ctx>::resize(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  uint64_t v22;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = v4 - (_BYTE *)*a1;
  v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 3);
  v8 = a2 - v7;
  if (a2 > v7)
  {
    v9 = a1[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v9 - v4) >> 3) >= v8)
    {
      v21 = &v4[56 * v8];
      v22 = 56 * a2 - 8 * (v6 >> 3);
      while (v4)
      {
        *((_QWORD *)v4 + 6) = 0;
        *((_OWORD *)v4 + 1) = 0uLL;
        *((_OWORD *)v4 + 2) = 0uLL;
        *(_OWORD *)v4 = 0uLL;
        v4 += 56;
        v22 -= 56;
        if (!v22)
          goto LABEL_20;
      }
      __break(1u);
    }
    else if (a2 <= 0x492492492492492)
    {
      v10 = 0x6DB6DB6DB6DB6DB7 * ((v9 - v5) >> 3);
      v11 = 2 * v10;
      if (2 * v10 <= a2)
        v11 = a2;
      if (v10 >= 0x249249249249249)
        v12 = 0x492492492492492;
      else
        v12 = v11;
      if (v12 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v13 = 56 * v12;
      v14 = (char *)operator new(56 * v12);
      v15 = &v14[8 * (v6 >> 3)];
      v16 = &v14[v13];
      v17 = 56 * a2;
      bzero(v15, 56 * ((v17 - v6 - 56) / 0x38uLL) + 56);
      if (v4 != v5)
      {
        do
        {
          v18 = *(_OWORD *)(v4 - 56);
          v19 = *(_OWORD *)(v4 - 40);
          v20 = *(_OWORD *)(v4 - 24);
          *((_QWORD *)v15 - 1) = *((_QWORD *)v4 - 1);
          *(_OWORD *)(v15 - 24) = v20;
          *(_OWORD *)(v15 - 40) = v19;
          *(_OWORD *)(v15 - 56) = v18;
          v15 -= 56;
          v4 -= 56;
        }
        while (v4 != v5);
        v4 = v5;
      }
      *a1 = v15;
      a1[1] = &v14[v17];
      a1[2] = v16;
      if (v4)
        operator delete(v4);
      return;
    }
    abort();
  }
  if (a2 < v7)
  {
    v21 = &v5[56 * a2];
LABEL_20:
    a1[1] = v21;
  }
}

void std::vector<vpx_codec_enc_cfg>::resize(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = v4 - (_BYTE *)*a1;
  v7 = 0xEFBEFBEFBEFBEFBFLL * (v6 >> 3);
  v8 = a2 - v7;
  if (a2 > v7)
  {
    v9 = a1[2];
    if (0xEFBEFBEFBEFBEFBFLL * ((v9 - v4) >> 3) >= v8)
    {
      v19 = &v4[504 * v8];
      v20 = 504 * a2 - 8 * (v6 >> 3);
      while (v4)
      {
        *((_QWORD *)v4 + 62) = 0;
        *((_OWORD *)v4 + 29) = 0uLL;
        *((_OWORD *)v4 + 30) = 0uLL;
        *((_OWORD *)v4 + 27) = 0uLL;
        *((_OWORD *)v4 + 28) = 0uLL;
        *((_OWORD *)v4 + 25) = 0uLL;
        *((_OWORD *)v4 + 26) = 0uLL;
        *((_OWORD *)v4 + 23) = 0uLL;
        *((_OWORD *)v4 + 24) = 0uLL;
        *((_OWORD *)v4 + 21) = 0uLL;
        *((_OWORD *)v4 + 22) = 0uLL;
        *((_OWORD *)v4 + 19) = 0uLL;
        *((_OWORD *)v4 + 20) = 0uLL;
        *((_OWORD *)v4 + 17) = 0uLL;
        *((_OWORD *)v4 + 18) = 0uLL;
        *((_OWORD *)v4 + 15) = 0uLL;
        *((_OWORD *)v4 + 16) = 0uLL;
        *((_OWORD *)v4 + 13) = 0uLL;
        *((_OWORD *)v4 + 14) = 0uLL;
        *((_OWORD *)v4 + 11) = 0uLL;
        *((_OWORD *)v4 + 12) = 0uLL;
        *((_OWORD *)v4 + 9) = 0uLL;
        *((_OWORD *)v4 + 10) = 0uLL;
        *((_OWORD *)v4 + 7) = 0uLL;
        *((_OWORD *)v4 + 8) = 0uLL;
        *((_OWORD *)v4 + 5) = 0uLL;
        *((_OWORD *)v4 + 6) = 0uLL;
        *((_OWORD *)v4 + 3) = 0uLL;
        *((_OWORD *)v4 + 4) = 0uLL;
        *((_OWORD *)v4 + 1) = 0uLL;
        *((_OWORD *)v4 + 2) = 0uLL;
        *(_OWORD *)v4 = 0uLL;
        v4 += 504;
        v20 -= 504;
        if (!v20)
          goto LABEL_20;
      }
      __break(1u);
    }
    else if (a2 <= 0x82082082082082)
    {
      v10 = 0xEFBEFBEFBEFBEFBFLL * ((v9 - v5) >> 3);
      v11 = 2 * v10;
      if (2 * v10 <= a2)
        v11 = a2;
      if (v10 >= 0x41041041041041)
        v12 = 0x82082082082082;
      else
        v12 = v11;
      if (v12 > 0x82082082082082)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v13 = 504 * v12;
      v14 = (char *)operator new(504 * v12);
      v15 = &v14[8 * (v6 >> 3)];
      v16 = &v14[v13];
      v17 = 504 * a2;
      bzero(v15, 504 * ((v17 - v6 - 504) / 0x1F8uLL) + 504);
      v18 = &v14[v17];
      if (v4 != v5)
      {
        do
        {
          v4 -= 504;
          v15 -= 504;
          memcpy(v15, v4, 0x1F8uLL);
        }
        while (v4 != v5);
        v4 = v5;
      }
      *a1 = v15;
      a1[1] = v18;
      a1[2] = v16;
      if (v4)
        operator delete(v4);
      return;
    }
    abort();
  }
  if (a2 < v7)
  {
    v19 = &v5[504 * a2];
LABEL_20:
    a1[1] = v19;
  }
}

void std::vector<webrtc::Vp8EncoderConfig>::resize(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  uint64_t v25;

  v5 = *a1;
  v4 = a1[1];
  v6 = v4 - *a1;
  v7 = 0x8E38E38E38E38E39 * (v6 >> 4);
  v8 = a2 - v7;
  if (a2 > v7)
  {
    v9 = a1[2];
    if (0x8E38E38E38E38E39 * ((v9 - v4) >> 4) >= v8)
    {
      v24 = &v4[144 * v8];
      v25 = 144 * a2 - 16 * (v6 >> 4);
      while (v4)
      {
        *((_OWORD *)v4 + 7) = 0uLL;
        *((_OWORD *)v4 + 8) = 0uLL;
        *((_OWORD *)v4 + 5) = 0uLL;
        *((_OWORD *)v4 + 6) = 0uLL;
        *((_OWORD *)v4 + 3) = 0uLL;
        *((_OWORD *)v4 + 4) = 0uLL;
        *((_OWORD *)v4 + 1) = 0uLL;
        *((_OWORD *)v4 + 2) = 0uLL;
        *(_OWORD *)v4 = 0uLL;
        v4 += 144;
        v25 -= 144;
        if (!v25)
          goto LABEL_20;
      }
      __break(1u);
    }
    else if (a2 <= 0x1C71C71C71C71C7)
    {
      v10 = 0x8E38E38E38E38E39 * ((v9 - v5) >> 4);
      v11 = 2 * v10;
      if (2 * v10 <= a2)
        v11 = a2;
      if (v10 >= 0xE38E38E38E38E3)
        v12 = 0x1C71C71C71C71C7;
      else
        v12 = v11;
      if (v12 > 0x1C71C71C71C71C7)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v13 = 144 * v12;
      v14 = (char *)operator new(144 * v12);
      v15 = &v14[16 * (v6 >> 4)];
      v16 = &v14[v13];
      v17 = 144 * a2;
      bzero(v15, 144 * ((v17 - v6 - 144) / 0x90uLL) + 144);
      if (v4 != v5)
      {
        do
        {
          *((_OWORD *)v15 - 9) = *((_OWORD *)v4 - 9);
          v18 = *((_OWORD *)v4 - 8);
          v19 = *((_OWORD *)v4 - 7);
          v20 = *((_OWORD *)v4 - 5);
          *((_OWORD *)v15 - 6) = *((_OWORD *)v4 - 6);
          *((_OWORD *)v15 - 5) = v20;
          *((_OWORD *)v15 - 8) = v18;
          *((_OWORD *)v15 - 7) = v19;
          v21 = *((_OWORD *)v4 - 4);
          v22 = *((_OWORD *)v4 - 3);
          v23 = *((_OWORD *)v4 - 2);
          *(_OWORD *)(v15 - 19) = *(_OWORD *)(v4 - 19);
          *((_OWORD *)v15 - 3) = v22;
          *((_OWORD *)v15 - 2) = v23;
          *((_OWORD *)v15 - 4) = v21;
          v15 -= 144;
          v4 -= 144;
        }
        while (v4 != v5);
        v4 = v5;
      }
      *a1 = v15;
      a1[1] = &v14[v17];
      a1[2] = v16;
      if (v4)
        operator delete(v4);
      return;
    }
    abort();
  }
  if (a2 < v7)
  {
    v24 = &v5[144 * a2];
LABEL_20:
    a1[1] = v24;
  }
}

void std::vector<vpx_rational>::resize(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v5 = *a1;
  v4 = a1[1];
  v6 = v4 - *a1;
  v7 = v6 >> 3;
  v8 = a2 - (v6 >> 3);
  if (a2 > v6 >> 3)
  {
    v9 = a1[2];
    if (v8 <= (v9 - v4) >> 3)
    {
      v28 = &v4[8 * v8];
      v29 = 8 * a2 - 8 * v7;
      while (v4)
      {
        *(_QWORD *)v4 = 0;
        v4 += 8;
        v29 -= 8;
        if (!v29)
          goto LABEL_24;
      }
      __break(1u);
    }
    else if (!(a2 >> 61))
    {
      v10 = v9 - v5;
      v11 = (v9 - v5) >> 2;
      if (v11 <= a2)
        v11 = a2;
      v12 = v10 >= 0x7FFFFFFFFFFFFFF8;
      v13 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v12)
        v13 = v11;
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v14 = 8 * v13;
      v15 = operator new(8 * v13);
      v16 = &v15[8 * v7];
      v17 = &v15[v14];
      v18 = 8 * a2;
      bzero(v16, ((v18 - v6 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v4 != v5)
      {
        v19 = v4 - v5 - 8;
        if (v19 < 0x58)
          goto LABEL_31;
        if ((unint64_t)(&v4[-v6] - v15) < 0x20)
          goto LABEL_31;
        v20 = (v19 >> 3) + 1;
        v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        v22 = &v4[-v21];
        v16 -= v21;
        v23 = &v15[8 * v7 - 16];
        v24 = v4 - 16;
        v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 4;
        }
        while (v25);
        v4 = v22;
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_31:
          do
          {
            v27 = *((_QWORD *)v4 - 1);
            v4 -= 8;
            *((_QWORD *)v16 - 1) = v27;
            v16 -= 8;
          }
          while (v4 != v5);
        }
        v4 = v5;
      }
      *a1 = v16;
      a1[1] = &v15[v18];
      a1[2] = v17;
      if (v4)
        operator delete(v4);
      return;
    }
    abort();
  }
  if (a2 < v6 >> 3)
  {
    v28 = &v5[8 * a2];
LABEL_24:
    a1[1] = v28;
  }
}

void std::vector<vpx_image>::resize(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  uint64_t v25;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = v4 - (_BYTE *)*a1;
  v7 = 0xF0F0F0F0F0F0F0F1 * (v6 >> 3);
  v8 = a2 - v7;
  if (a2 > v7)
  {
    v9 = a1[2];
    if (0xF0F0F0F0F0F0F0F1 * ((v9 - v4) >> 3) >= v8)
    {
      v24 = &v4[136 * v8];
      v25 = 136 * a2 - 8 * (v6 >> 3);
      while (v4)
      {
        *((_QWORD *)v4 + 16) = 0;
        *((_OWORD *)v4 + 6) = 0uLL;
        *((_OWORD *)v4 + 7) = 0uLL;
        *((_OWORD *)v4 + 4) = 0uLL;
        *((_OWORD *)v4 + 5) = 0uLL;
        *((_OWORD *)v4 + 2) = 0uLL;
        *((_OWORD *)v4 + 3) = 0uLL;
        *(_OWORD *)v4 = 0uLL;
        *((_OWORD *)v4 + 1) = 0uLL;
        v4 += 136;
        v25 -= 136;
        if (!v25)
          goto LABEL_20;
      }
      __break(1u);
    }
    else if (a2 <= 0x1E1E1E1E1E1E1E1)
    {
      v10 = 0xF0F0F0F0F0F0F0F1 * ((v9 - v5) >> 3);
      v11 = 2 * v10;
      if (2 * v10 <= a2)
        v11 = a2;
      if (v10 >= 0xF0F0F0F0F0F0F0)
        v12 = 0x1E1E1E1E1E1E1E1;
      else
        v12 = v11;
      if (v12 > 0x1E1E1E1E1E1E1E1)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v13 = 136 * v12;
      v14 = (char *)operator new(136 * v12);
      v15 = &v14[8 * (v6 >> 3)];
      v16 = &v14[v13];
      v17 = 136 * a2;
      bzero(v15, 136 * ((v17 - v6 - 136) / 0x88uLL) + 136);
      if (v4 != v5)
      {
        do
        {
          *(_OWORD *)(v15 - 136) = *(_OWORD *)(v4 - 136);
          v18 = *(_OWORD *)(v4 - 120);
          v19 = *(_OWORD *)(v4 - 104);
          v20 = *(_OWORD *)(v4 - 88);
          *(_OWORD *)(v15 - 72) = *(_OWORD *)(v4 - 72);
          *(_OWORD *)(v15 - 88) = v20;
          *(_OWORD *)(v15 - 104) = v19;
          *(_OWORD *)(v15 - 120) = v18;
          v21 = *(_OWORD *)(v4 - 56);
          v22 = *(_OWORD *)(v4 - 40);
          v23 = *(_OWORD *)(v4 - 24);
          *((_QWORD *)v15 - 1) = *((_QWORD *)v4 - 1);
          *(_OWORD *)(v15 - 24) = v23;
          *(_OWORD *)(v15 - 40) = v22;
          *(_OWORD *)(v15 - 56) = v21;
          v15 -= 136;
          v4 -= 136;
        }
        while (v4 != v5);
        v4 = v5;
      }
      *a1 = v15;
      a1[1] = &v14[v17];
      a1[2] = v16;
      if (v4)
        operator delete(v4);
      return;
    }
    abort();
  }
  if (a2 < v7)
  {
    v24 = &v5[136 * a2];
LABEL_20:
    a1[1] = v24;
  }
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;
  BOOL v3;
  std::vector<unsigned int>::size_type v4;

  v2 = this->__end_ - this->__begin_;
  v3 = __sz >= v2;
  v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<int>::__append((std::vector<unsigned int> *)this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::fill[abi:sn180100]<std::vector<BOOL>>(char *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;

  v4 = a4 - (unint64_t)a2;
  v5 = v4 + 8 * (a3 - (_QWORD)a1);
  if (v5)
  {
    v6 = a1;
    if (a2)
    {
      if (64 - a2 >= v5)
        v7 = v4 + 8 * (a3 - (_QWORD)a1);
      else
        v7 = 64 - a2;
      *(_QWORD *)a1 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v7)) & (-1 << a2));
      v6 = a1 + 8;
      v5 -= v7;
    }
    if (v5 >= 0x40)
      bzero(v6, 8 * (v5 >> 6));
    if ((v5 & 0x3F) != 0)
      *(_QWORD *)&v6[8 * (v5 >> 6)] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
  }
}

uint64_t webrtc::LibvpxVp8Encoder::NumberOfThreads(webrtc::LibvpxVp8Encoder *this, int a2, int a3, int a4)
{
  uint64_t v7;
  char *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  void (**v15)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v16;
  void *v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  char v21;
  int v22;
  void *v23;
  uint64_t v24;
  unsigned __int8 v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr, webrtc::LibvpxVp8Encoder *, const char *, uint64_t))(*(_QWORD *)this + 16))(&v23, this, "WebRTC-VP8IosMaxNumberOfThread", 30);
  v15 = off_24C0B4170;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v20 = 10;
  if (__p <= (void **)"max_thread" && (char *)&__p[1] + 2 > "max_thread")
    goto LABEL_40;
  strcpy((char *)__p, "max_thread");
  v21 = 0;
  v15 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4020;
  v22 = 0;
  v26[0] = &v15;
  if (((char)v25 & 0x80000000) == 0)
  {
    v7 = v25;
    v8 = (char *)&v23;
    goto LABEL_8;
  }
  v7 = v24;
  if (v24 < 0 || (v8 = (char *)v23, v24) && !v23)
LABEL_40:
    __break(1u);
LABEL_8:
  webrtc::ParseFieldTrial(v26, 1, v8, v7);
  v9 = v22;
  v10 = a3 * a2;
  if (v22 < 1)
  {
    if (v10 >= 2073600 && a4 > 8)
    {
      v11 = 8;
      v15 = off_24C0B4170;
      if ((v20 & 0x80000000) == 0)
        goto LABEL_35;
      goto LABEL_34;
    }
    if (v10 > 1228800 && a4 > 5)
    {
      v11 = 3;
      v15 = off_24C0B4170;
      if ((v20 & 0x80000000) == 0)
        goto LABEL_35;
      goto LABEL_34;
    }
    if (a4 <= 5)
      v12 = 2;
    else
      v12 = 3;
    if (a4 <= 2 || v10 <= 307200)
      v11 = 1;
    else
      v11 = v12;
    v15 = off_24C0B4170;
    if (v20 < 0)
LABEL_34:
      operator delete(__p[0]);
  }
  else
  {
    if (v22 >= a4)
      v9 = a4;
    if (v10 < 57600)
      v11 = 1;
    else
      v11 = v9;
    v15 = off_24C0B4170;
    if (v20 < 0)
      goto LABEL_34;
  }
LABEL_35:
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if ((char)v25 < 0)
    operator delete(v23);
  return v11;
}

uint64_t webrtc::LibvpxVp8Encoder::InitAndSetControlSettings(webrtc::LibvpxVp8Encoder *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 92) - *((_QWORD *)this + 91);
  result = *((_QWORD *)this + 6);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v2 >> 3)) < 2)
  {
    if (v2 != 56 || *((_QWORD *)this + 95) == *((_QWORD *)this + 94))
      goto LABEL_24;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
    if ((_DWORD)result)
      return 4294967289;
  }
  else
  {
    if (*((_QWORD *)this + 95) == *((_QWORD *)this + 94) || *((_QWORD *)this + 101) == *((_QWORD *)this + 100))
      goto LABEL_24;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
    if ((_DWORD)result)
      return 4294967289;
  }
  if (*((_QWORD *)this + 92) != *((_QWORD *)this + 91))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 80))(*((_QWORD *)this + 6));
    v4 = *((_QWORD *)this + 92);
    v5 = *((_QWORD *)this + 91);
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 3)) >= 3)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 6) + 80))(*((_QWORD *)this + 6), v5 + 56, 15, 4 * *((unsigned __int8 *)this + 509));
      v4 = *((_QWORD *)this + 92);
      v5 = *((_QWORD *)this + 91);
    }
    if (v4 == v5)
    {
LABEL_23:
      result = 0;
      *((_BYTE *)this + 536) = 1;
      return result;
    }
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = *((_DWORD *)this + 119) == 1 ? 100 : 1;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 80))(*((_QWORD *)this + 6), v5 + v6, 17, v8);
      v9 = *((_QWORD *)this + 91);
      if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 92) - v9) >> 3) <= v7)
        break;
      v10 = *((_QWORD *)this + 82);
      if (v7 >= (*((_QWORD *)this + 83) - v10) >> 2)
        break;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 6) + 88))(*((_QWORD *)this + 6), v9 + v6, 13, *(unsigned int *)(v10 + 4 * v7));
      v11 = *((_QWORD *)this + 91);
      if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 92) - v11) >> 3) <= v7)
        break;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 6) + 88))(*((_QWORD *)this + 6), v11 + v6, 18, 0);
      v12 = *((_QWORD *)this + 91);
      if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 92) - v12) >> 3) <= v7)
        break;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 6) + 80))(*((_QWORD *)this + 6), v12 + v6, 26, *((unsigned int *)this + 141));
      v13 = *((_QWORD *)this + 91);
      if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 92) - v13) >> 3) <= v7)
        break;
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**((_QWORD **)this + 6) + 80))(*((_QWORD *)this + 6), v13 + v6, 31, 2 * (*((_DWORD *)this + 119) == 1));
      ++v7;
      v5 = *((_QWORD *)this + 91);
      v6 += 56;
      if (v7 >= 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 92) - v5) >> 3))
        goto LABEL_23;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t webrtc::LibvpxVp8Encoder::Encode(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t EncodedPartitions;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  char v55;
  unsigned int v56;
  unint64_t v58;
  BOOL v59;
  char *v60;
  BOOL v61;
  char v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  int8x16_t *v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  unint64_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int32x4_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int32x4_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int32x4_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int32x4_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int32x4_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int16x8_t v133;
  int32x4_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int32x4_t v138;
  int8x16_t v139;
  unint64_t v140;
  uint64_t *v141;
  _QWORD *v142;
  int v143;
  uint64_t v144;
  void (***v145)(_QWORD);
  uint64_t v146;
  int v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (***v157)(_QWORD);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  unint64_t v185;
  void (***v186)(_QWORD);
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  int v204;
  BOOL v205;
  uint64_t v206;
  void (***v207)(_QWORD);
  uint64_t v208;
  int64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  void (***v215)(_QWORD);
  int64_t v216;
  unint64_t v217;
  int64_t v218;
  unint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unsigned int *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  std::string *v269;
  const webrtc::VideoFrame *v270;
  char v271;
  uint64_t v272;
  unint64_t v273;
  char v274;
  webrtc::VideoFrame *v275;
  char *v276;
  void (***v277)(_QWORD);
  char *v278;
  char *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  char v284;
  char v285;
  char *v286;
  uint64_t v287;
  char *v288;
  _QWORD *v289;
  char v290;
  uint64_t v291[3];
  void (***v292)(_QWORD);
  _QWORD __b[3];
  char v294;
  uint64_t v295;
  _QWORD v296[2];
  char v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  char v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char v307;
  uint64_t v308;
  void *v309;
  _BYTE v310[29];
  uint64_t v311;

  v311 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 536) || !*(_QWORD *)(a1 + 144))
    return 4294967289;
  v4 = a2;
  v5 = *(_QWORD *)(a1 + 616);
  if (!v5)
  {
LABEL_11:
    if (a3)
    {
      v8 = a3[1];
      v9 = v8 - *a3;
      if (v8 != *a3)
      {
        v10 = 0;
        v11 = v9 >> 2;
        if ((unint64_t)(v9 >> 2) <= 1)
          v11 = 1;
        while (*(_QWORD *)(a1 + 640) != v10)
        {
          if (*(_DWORD *)(*a3 + 4 * v10) == 3
            && ((*(_QWORD *)(*(_QWORD *)(a1 + 632) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
          {
            goto LABEL_20;
          }
          if (v11 == ++v10)
            break;
        }
      }
    }
    v12 = 0;
    if (!*(_BYTE *)(a1 + 1160))
      goto LABEL_25;
    goto LABEL_23;
  }
  v6 = 0;
  while (1)
  {
    if (*(_QWORD *)(a1 + 640) == v6)
      goto LABEL_11;
    if ((*(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * (v6 >> 6)) & (1 << v6)) != 0
      && (*(_QWORD *)(*(_QWORD *)(a1 + 632) + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      break;
    }
    if (v5 == ++v6)
      goto LABEL_11;
  }
LABEL_20:
  v12 = 1;
  if (*(_BYTE *)(a1 + 1160))
  {
LABEL_23:
    if (!*(_QWORD *)(a1 + 640))
      goto LABEL_25;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v286 = 0;
    v16 = *(_QWORD *)(a2 + 32);
    v284 = v12;
    v282 = v16;
    while (1)
    {
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 632) + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) == 0
        || !*(_BYTE *)(a1 + 532)
        || !(*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 576) + 32))(*(_QWORD *)(a1 + 576), v13))
      {
        goto LABEL_44;
      }
      v24 = *(_QWORD *)(a1 + 824);
      if (v13 >= (*(_QWORD *)(a1 + 832) - v24) >> 3)
        goto LABEL_307;
      v25 = *(_QWORD *)(v24 + 8 * v13);
      if ((unint64_t)(v25 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_44;
      if (!*(_BYTE *)(a1 + 1160))
        goto LABEL_307;
      v26 = v16 - v25;
      if (v16 == 0x8000000000000000)
        v26 = 0x8000000000000000;
      if (v16 != 0x7FFFFFFFFFFFFFFFLL && v26 < *(_QWORD *)(a1 + 1152))
        goto LABEL_44;
      v278 = v15;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        v280 = v280 & 0xFFFFFFFF00000000 | 0x1F69;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc");
      }
      v34 = *(_QWORD *)(a1 + 728);
      v35 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 736) - v34) >> 3);
      v36 = v35 + ~v13;
      if (!__CFADD__(v35, ~v13))
        goto LABEL_307;
      v37 = v4;
      v38 = *(_QWORD *)(a1 + 752);
      if (0xEFBEFBEFBEFBEFBFLL * ((*(_QWORD *)(a1 + 760) - v38) >> 3) <= v36)
        goto LABEL_307;
      v39 = v14;
      v40 = *(_QWORD *)(a1 + 48);
      v41 = v34 + 56 * v36;
      v42 = v38 + 504 * v36;
      if (v278 < v286)
      {
        if (!v278)
          goto LABEL_307;
        *(_QWORD *)v278 = v40;
        *((_QWORD *)v278 + 1) = v41;
        *((_QWORD *)v278 + 2) = v42;
        v43 = v38 + 504 * v36;
        *((_DWORD *)v278 + 6) = *(_DWORD *)(v43 + 48);
        *(_DWORD *)(v43 + 48) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40 + 40))(v40, v41, v43);
        v4 = v37;
        v15 = v278 + 32;
        v14 = v39;
        v12 = v284;
        v16 = v282;
        goto LABEL_44;
      }
      v44 = (v278 - v39) >> 5;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 59)
        std::__throw_bad_array_new_length[abi:sn180100]();
      if ((v286 - v39) >> 4 > v45)
        v45 = (v286 - v39) >> 4;
      if ((unint64_t)(v286 - v39) >= 0x7FFFFFFFFFFFFFE0)
        v45 = 0x7FFFFFFFFFFFFFFLL;
      if (!v45)
        goto LABEL_307;
      if (v45 >> 59)
LABEL_308:
        std::__throw_bad_array_new_length[abi:sn180100]();
      v287 = 32 * v45;
      v276 = (char *)operator new(32 * v45);
      v46 = &v276[32 * v44];
      *(_QWORD *)v46 = v40;
      *((_QWORD *)v46 + 1) = v41;
      *((_QWORD *)v46 + 2) = v42;
      v47 = v38 + 504 * v36;
      *((_DWORD *)v46 + 6) = *(_DWORD *)(v47 + 48);
      *(_DWORD *)(v47 + 48) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v40 + 40))(v40, v41, v47);
      v48 = v278;
      v49 = v46;
      v4 = v37;
      if (v278 != v39)
        break;
      v12 = v284;
      v286 = &v276[v287];
      v15 = v46 + 32;
      if (v39)
        goto LABEL_42;
LABEL_43:
      v14 = v49;
      v16 = v282;
LABEL_44:
      if (++v13 >= *(_QWORD *)(a1 + 640))
        goto LABEL_26;
    }
    do
    {
      v50 = *((_OWORD *)v48 - 1);
      *((_OWORD *)v49 - 2) = *((_OWORD *)v48 - 2);
      *((_OWORD *)v49 - 1) = v50;
      v49 -= 32;
      v48 -= 32;
    }
    while (v48 != v39);
    v51 = v278;
    v12 = v284;
    do
    {
      v52 = *((_QWORD *)v51 - 4);
      v51 -= 32;
      *(_DWORD *)(*((_QWORD *)v51 + 2) + 48) = *((_DWORD *)v51 + 6);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v52 + 40))(v52, *((_QWORD *)v51 + 1));
    }
    while (v51 != v39);
    v286 = &v276[v287];
    v15 = v46 + 32;
    if (!v39)
      goto LABEL_43;
LABEL_42:
    operator delete(v39);
    goto LABEL_43;
  }
LABEL_25:
  v15 = 0;
  v14 = 0;
LABEL_26:
  v17 = *(_QWORD *)(v4 + 8);
  if (v17)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
    v17 = *(_QWORD *)(v4 + 8);
    if (v17)
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
  }
  else
  {
    v18 = 0;
  }
  if (*(_BYTE *)(v4 + 176))
    v19 = *(_QWORD *)(v4 + 168);
  else
    v19 = v18 | (unint64_t)(v17 << 32);
  if (!v19)
  {
    v20 = *(int *)(a1 + 968) < 3 ? 1 : v12;
    if ((v20 & 1) == 0)
    {
      v21 = *(_DWORD *)(v4 + 16) / 0x5Au;
      if (!*(_BYTE *)(a1 + 860) || (LODWORD(v22) = *(_DWORD *)(a1 + 856), v22 <= v21))
      {
        v53 = v21;
        v54 = webrtc::RateStatistics::Rate((webrtc::RateStatistics *)(a1 + 872), v21);
        if (!*(_BYTE *)(a1 + 852))
          goto LABEL_307;
        if (v55 && *(float *)(a1 + 848) < (float)v54)
        {
          if (v14 == v15)
            goto LABEL_106;
          v23 = *(unsigned __int8 *)(a1 + 860);
          LODWORD(v22) = *(_DWORD *)(a1 + 856);
          goto LABEL_81;
        }
        if (!*(_BYTE *)(a1 + 860))
        {
          v56 = *(_DWORD *)(v4 + 16) / 0x5Au;
LABEL_92:
          webrtc::RateStatistics::Update((webrtc::RateStatistics *)(a1 + 872), 1, v56);
          *(_DWORD *)(a1 + 856) = v56;
          *(_BYTE *)(a1 + 860) = 1;
          goto LABEL_93;
        }
        v22 = *(unsigned int *)(a1 + 856);
        if (v53 - v22 < *(unsigned int *)(a1 + 864) && v14 == v15)
          goto LABEL_106;
      }
      v23 = 1;
LABEL_81:
      v56 = *(_DWORD *)(v4 + 16) / 0x5Au;
      if (v23)
      {
        if (v22 > v56)
        {
          webrtc::RateStatistics::Reset((webrtc::RateStatistics *)(a1 + 872));
          if (*(_BYTE *)(a1 + 860))
            *(_BYTE *)(a1 + 860) = 0;
        }
      }
      goto LABEL_92;
    }
  }
LABEL_93:
  v294 = 1;
  v296[0] = 0;
  v295 = 0;
  v296[1] = 255;
  v297 = 1;
  v298 = 1;
  v300 = 0;
  v299 = 0;
  v301 = 255;
  v302 = 1;
  v303 = 1;
  v305 = 0;
  v304 = 0;
  v306 = 255;
  v307 = 1;
  if (*(_QWORD *)(a1 + 736) == *(_QWORD *)(a1 + 728))
  {
    v274 = 1;
    goto LABEL_127;
  }
  v58 = 0;
  v59 = 0;
  v60 = &v294;
  do
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 576) + 56))(v310, *(_QWORD *)(a1 + 576), v58, *(unsigned int *)(v4 + 16));
    *(_OWORD *)v60 = *(_OWORD *)v310;
    *(_OWORD *)(v60 + 13) = *(_OWORD *)&v310[13];
    v61 = *((_DWORD *)v60 + 1) == 2 && *((_DWORD *)v60 + 2) == 2 && *((_DWORD *)v60 + 3) == 2;
    v62 = *v60;
    v60 += 32;
    v12 |= v61;
    v63 = v62 | v59;
    v59 = v63 != 0;
    ++v58;
    v64 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 728)) >> 3);
  }
  while (v58 < v64);
  if (!((v63 == 0) | v12 & 1))
  {
LABEL_106:
    EncodedPartitions = 0;
    if (!v14)
      return EncodedPartitions;
    goto LABEL_304;
  }
  v274 = *(v60 - 4) != 0;
  if (!v64)
    goto LABEL_127;
  if ((v12 & 1) != 0)
  {
    memset_pattern16(__b, &xmmword_208F08A60, 0x6DB6DB6DB6DB6DB8 * ((uint64_t)(*(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 728)) >> 3));
    goto LABEL_127;
  }
  if (v64 >= 8)
  {
    v65 = v64 & 0xFFFFFFFFFFFFFFF8;
    v66 = &v310[4];
    v67 = (int8x16_t *)__b;
    v68.i64[0] = 0x1000000010000;
    v68.i64[1] = 0x1000000010000;
    v69 = (int8x16_t)vdupq_n_s64(0x40000uLL);
    v70.i64[0] = 0x200000002;
    v70.i64[1] = 0x200000002;
    v71.i64[0] = 0x100000001;
    v71.i64[1] = 0x100000001;
    v72 = (int8x16_t)vdupq_n_s64(0x20000uLL);
    v73 = (int8x16_t)vdupq_n_s64(0x400000uLL);
    v74 = (int8x16_t)vdupq_n_s64(0x200000uLL);
    v75 = (int8x16_t)vdupq_n_s64(0x800000uLL);
    v76 = (int8x16_t)vdupq_n_s64(0x100000uLL);
    v77 = v64 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v78.i32[0] = *(_DWORD *)v66;
      v79.i32[0] = *((_DWORD *)v66 + 1);
      v78.i32[1] = *((_DWORD *)v66 + 8);
      v78.i32[2] = *((_DWORD *)v66 + 16);
      v80.i32[0] = *((_DWORD *)v66 - 32);
      v80.i32[1] = *((_DWORD *)v66 - 24);
      v78.i32[3] = *((_DWORD *)v66 + 24);
      v80.i32[2] = *((_DWORD *)v66 - 16);
      v80.i32[3] = *((_DWORD *)v66 - 8);
      v81 = vbicq_s8(v68, (int8x16_t)vshlq_n_s32(v78, 0x10uLL));
      v82 = vbicq_s8(v68, (int8x16_t)vshlq_n_s32(v80, 0x10uLL));
      v83.i64[0] = v81.u32[0];
      v83.i64[1] = v81.u32[1];
      v84 = v83;
      v83.i64[0] = v82.u32[0];
      v83.i64[1] = v82.u32[1];
      v85 = v83;
      v83.i64[0] = v81.u32[2];
      v83.i64[1] = v81.u32[3];
      v86 = v83;
      v87 = vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v78, v70));
      v83.i64[0] = v87.i32[2];
      v83.i64[1] = v87.i32[3];
      v88 = v83;
      v83.i64[0] = v82.u32[2];
      v83.i64[1] = v82.u32[3];
      v89 = v83;
      v83.i64[0] = v87.i32[0];
      v83.i64[1] = v87.i32[1];
      v90 = v83;
      v91 = vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v80, v70));
      v83.i64[0] = v91.i32[2];
      v83.i64[1] = v91.i32[3];
      v92 = v83;
      v83.i64[0] = v91.i32[0];
      v83.i64[1] = v91.i32[1];
      v93 = vbslq_s8(v90, vorrq_s8(v84, v69), v84);
      v94 = vbslq_s8(v88, vorrq_s8(v86, v69), v86);
      v79.i32[1] = *((_DWORD *)v66 + 9);
      v79.i32[2] = *((_DWORD *)v66 + 17);
      v79.i32[3] = *((_DWORD *)v66 + 25);
      v88.i32[0] = *((_DWORD *)v66 - 31);
      v88.i32[1] = *((_DWORD *)v66 - 23);
      v88.i32[2] = *((_DWORD *)v66 - 15);
      v88.i32[3] = *((_DWORD *)v66 - 7);
      v95 = vbslq_s8(v83, vorrq_s8(v85, v69), v85);
      v96 = vceqzq_s32((int32x4_t)vandq_s8(v79, v71));
      v83.i64[0] = v96.i32[2];
      v83.i64[1] = v96.i32[3];
      v97 = v83;
      v83.i64[0] = v96.i32[0];
      v83.i64[1] = v96.i32[1];
      v98 = v83;
      v99 = vbslq_s8(v92, vorrq_s8(v89, v69), v89);
      v100 = vceqzq_s32((int32x4_t)vandq_s8(v88, v71));
      v83.i64[0] = v100.i32[2];
      v83.i64[1] = v100.i32[3];
      v101 = v83;
      v83.i64[0] = v100.i32[0];
      v83.i64[1] = v100.i32[1];
      v102 = vbslq_s8(v98, vorrq_s8(v93, v72), v93);
      v103 = vbslq_s8(v97, vorrq_s8(v94, v72), v94);
      v104 = vbslq_s8(v83, vorrq_s8(v95, v72), v95);
      v105 = vceqzq_s32((int32x4_t)vandq_s8(v79, v70));
      v83.i64[0] = v105.i32[2];
      v83.i64[1] = v105.i32[3];
      v106 = v83;
      v83.i64[0] = v105.i32[0];
      v83.i64[1] = v105.i32[1];
      v107 = v83;
      v108 = (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v88, v70));
      v83.i64[0] = v108.i32[2];
      v83.i64[1] = v108.i32[3];
      v109 = v83;
      v110 = vbslq_s8(v101, vorrq_s8(v99, v72), v99);
      v83.i64[0] = v108.i32[0];
      v83.i64[1] = v108.i32[1];
      v111 = vbslq_s8(v107, vorrq_s8(v102, v73), v102);
      v112 = vbslq_s8(v106, vorrq_s8(v103, v73), v103);
      v103.i32[0] = *((_DWORD *)v66 + 2);
      v103.i32[1] = *((_DWORD *)v66 + 10);
      v103.i32[2] = *((_DWORD *)v66 + 18);
      v103.i32[3] = *((_DWORD *)v66 + 26);
      v108.i32[0] = *((_DWORD *)v66 - 30);
      v108.i32[1] = *((_DWORD *)v66 - 22);
      v108.i32[2] = *((_DWORD *)v66 - 14);
      v108.i32[3] = *((_DWORD *)v66 - 6);
      v113 = vbslq_s8(v83, vorrq_s8(v104, v73), v104);
      v114 = vceqzq_s32((int32x4_t)vandq_s8(v103, v71));
      v83.i64[0] = v114.i32[2];
      v83.i64[1] = v114.i32[3];
      v115 = v83;
      v83.i64[0] = v114.i32[0];
      v83.i64[1] = v114.i32[1];
      v116 = v83;
      v117 = vceqzq_s32((int32x4_t)vandq_s8(v108, v71));
      v118 = vbslq_s8(v109, vorrq_s8(v110, v73), v110);
      v83.i64[0] = v117.i32[2];
      v83.i64[1] = v117.i32[3];
      v119 = v83;
      v83.i64[0] = v117.i32[0];
      v83.i64[1] = v117.i32[1];
      v120 = vbslq_s8(v116, vorrq_s8(v111, v74), v111);
      v121 = vbslq_s8(v115, vorrq_s8(v112, v74), v112);
      v122 = (int32x4_t)vandq_s8(v108, v70);
      v123 = vceqzq_s32((int32x4_t)vandq_s8(v103, v70));
      v124 = vbslq_s8(v83, vorrq_s8(v113, v74), v113);
      v83.i64[0] = v123.i32[2];
      v83.i64[1] = v123.i32[3];
      v125 = v83;
      v83.i64[0] = v123.i32[0];
      v83.i64[1] = v123.i32[1];
      v126 = v83;
      v127 = vceqzq_s32(v122);
      v83.i64[0] = v127.i32[2];
      v83.i64[1] = v127.i32[3];
      v128 = v83;
      v83.i64[0] = v127.i32[0];
      v83.i64[1] = v127.i32[1];
      v129 = vbslq_s8(v119, vorrq_s8(v118, v74), v118);
      v130 = vbslq_s8(v126, vorrq_s8(v120, v75), v120);
      v126.i8[0] = *(v66 - 107);
      v126.i8[1] = *(v66 - 75);
      v131 = vbslq_s8(v125, vorrq_s8(v121, v75), v121);
      v126.i8[2] = *(v66 - 43);
      v126.i8[3] = *(v66 - 11);
      v126.i8[4] = v66[21];
      v126.i8[5] = v66[53];
      v126.i8[6] = v66[85];
      v126.i8[7] = v66[117];
      v132 = vbslq_s8(v83, vorrq_s8(v124, v75), v124);
      v133 = vmovl_s8(vceqz_s8(*(int8x8_t *)v126.i8));
      v134 = vmovl_high_s16(v133);
      v83.i64[0] = v134.i32[2];
      v83.i64[1] = v134.i32[3];
      v135 = v83;
      v83.i64[0] = v134.i32[0];
      v83.i64[1] = v134.i32[1];
      v136 = v83;
      v137 = vbslq_s8(v128, vorrq_s8(v129, v75), v129);
      v138 = vmovl_s16(*(int16x4_t *)v133.i8);
      v83.i64[0] = v138.i32[2];
      v83.i64[1] = v138.i32[3];
      v139 = v83;
      v83.i64[0] = v138.i32[0];
      v83.i64[1] = v138.i32[1];
      v67[2] = vbslq_s8(v136, v130, vorrq_s8(v130, v76));
      v67[3] = vbslq_s8(v135, v131, vorrq_s8(v131, v76));
      *v67 = vbslq_s8(v83, v132, vorrq_s8(v132, v76));
      v67[1] = vbslq_s8(v139, v137, vorrq_s8(v137, v76));
      v67 += 4;
      v66 += 256;
      v77 -= 8;
    }
    while (v77);
    if (v64 == v65)
      goto LABEL_127;
  }
  else
  {
    v65 = 0;
  }
  v140 = v64 - v65;
  v141 = &__b[v65];
  v142 = &v296[4 * v65];
  do
  {
    v143 = *((_DWORD *)v142 - 1);
    v144 = ~(*((_DWORD *)v142 - 2) << 16) & 0x10000 | 0x40000;
    if ((*(_DWORD *)(v142 - 1) & 2) != 0)
      v144 = ~(*((_DWORD *)v142 - 2) << 16) & 0x10000;
    if ((v143 & 1) == 0)
      v144 |= 0x20000uLL;
    if ((v143 & 2) == 0)
      v144 |= 0x400000uLL;
    if ((*(_DWORD *)v142 & 1) == 0)
      v144 |= 0x200000uLL;
    if ((*(_DWORD *)v142 & 2) == 0)
      v144 |= 0x800000uLL;
    if (*((_BYTE *)v142 + 13))
      v144 |= 0x100000uLL;
    *v141++ = v144;
    v142 += 4;
    --v140;
  }
  while (v140);
LABEL_127:
  v275 = (webrtc::VideoFrame *)v4;
  v145 = *(void (****)(_QWORD))(v4 + 8);
  if (v145)
    (**v145)(*(_QWORD *)(v4 + 8));
  *(_QWORD *)&v310[8] = 0x800000001;
  *(_QWORD *)v310 = 4;
  v283 = v14;
  v285 = v12;
  v279 = v15;
  if (((unsigned int (*)(_QWORD))(*v145)[4])(v145))
  {
    (**v145)(v145);
    v146 = (uint64_t)v145;
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void (***)(_QWORD), _BYTE *, uint64_t))(*v145)[10])(&v308, v145, &v310[8], 2);
    v146 = v308;
    if (!v308)
      goto LABEL_142;
  }
  v147 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v146 + 32))(v146);
  v148 = *(char **)&v310[8];
  if ((v310[0] & 1) == 0)
    v148 = &v310[8];
  v149 = *(_QWORD *)v310 >> 1;
  if (*(_QWORD *)v310 >= 2uLL)
  {
    v151 = 4 * v149;
    v150 = v148;
    while (*(_DWORD *)v150 != v147)
    {
      v150 += 4;
      v151 -= 4;
      if (!v151)
      {
        v150 = &v148[4 * v149];
        break;
      }
    }
  }
  else
  {
    v150 = v148;
  }
  if (v149 != (v150 - v148) >> 2 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v146 + 32))(v146) == 2)
  {
LABEL_157:
    v281 = v146;
    LODWORD(v309) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v146 + 32))(v146);
    v308 = 2;
    v165 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v146 + 32))(v146);
    v277 = v145;
    if ((v165 - 1) >= 2)
    {
      if (v165 != 8)
      {
        v167 = *(char **)(a1 + 688);
        v168 = *(char **)(a1 + 680);
LABEL_172:
        if (v167 == v168)
          goto LABEL_307;
        v184 = (char *)operator new(8uLL);
        *(_QWORD *)v184 = v146;
        v152 = v184 + 8;
        (**(void (***)(uint64_t))v146)(v146);
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 728)) >> 3)) < 2)
        {
LABEL_232:
          if ((v308 & 1) != 0)
            goto LABEL_245;
          goto LABEL_246;
        }
        v185 = 1;
        v288 = v184 + 8;
        while (1)
        {
          v186 = v145;
          if (((unsigned int (*)(_QWORD))(*v145)[4])(v145))
          {
            if (v184 == v152)
              goto LABEL_307;
            v186 = (void (***)(_QWORD))*((_QWORD *)v152 - 1);
          }
          v187 = *(_QWORD *)(a1 + 680);
          if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 688) - v187) >> 3) <= v185)
            goto LABEL_307;
          v188 = v187 + 136 * v185;
          v190 = *(unsigned int *)(v188 + 24);
          v189 = *(unsigned int *)(v188 + 28);
          v191 = ((uint64_t (*)(_QWORD))(*v186)[5])(v186);
          v192 = ((uint64_t (*)(_QWORD))(*v186)[6])(v186);
          ((void (*)(void (****__return_ptr)(_QWORD), void (***)(_QWORD), _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*v186)[9])(&v292, v186, 0, 0, v191, v192, v190, v189);
          v193 = ((uint64_t (*)(uint64_t))(*v292)[4])((uint64_t)v292);
          v194 = (uint64_t)v292;
          if (!v193)
          {
            ((void (**)(uint64_t *))*v292)[10](v291);
            v195 = v291[0];
            if (v291[0])
            {
              (**(void (***)(uint64_t))v291[0])(v291[0]);
              if (v292)
                (*v292)[1](v292);
              v292 = (void (***)(_QWORD))v195;
            }
            else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            {
              ((uint64_t (*)(uint64_t))(*v292)[4])((uint64_t)v292);
              (*(uint64_t (**)(uint64_t))(*(_QWORD *)v281 + 32))(v281);
              v273 = v273 & 0xFFFFFFFF00000000 | 0x2D9B;
              rtc::webrtc_logging_impl::Log("\r\t\t\t\t\t", v196, v197, v198, v199, v200, v201, v202, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc");
              v146 = v281;
            }
            if (v291[0])
              (*(void (**)(uint64_t))(*(_QWORD *)v291[0] + 8))(v291[0]);
            if (!v195)
              goto LABEL_237;
            v194 = (uint64_t)v292;
          }
          v203 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v194 + 32))(v194);
          v204 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v146 + 32))(v146);
          if ((v203 - 1) >= 2)
            v205 = v203 == v204;
          else
            v205 = (v204 - 1) < 2;
          if (!v205)
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            {
              v291[0] = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webr"
                                 "tc/modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc";
              v291[1] = 11763;
              v291[2] = (uint64_t)&v290;
              ((uint64_t (*)(_QWORD))(*v186)[4])(v186);
              ((uint64_t (*)(uint64_t))(*v292)[4])((uint64_t)v292);
              (*(uint64_t (**)(uint64_t))(*(_QWORD *)v281 + 32))(v281);
              rtc::webrtc_logging_impl::Log("\r\t\t\t\t\t\t\t", v233, v234, v235, v236, v237, v238, v239, v291[0]);
              v145 = v277;
              v146 = v281;
            }
LABEL_237:
            if (v292)
              (*v292)[1](v292);
            v14 = v283;
            v12 = v285;
            if (v184)
            {
              while (v152 != v184)
              {
                v241 = *((_QWORD *)v152 - 1);
                v152 -= 8;
                v240 = v241;
                if (v241)
                  (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
              }
              operator delete(v184);
              v184 = 0;
            }
            v152 = 0;
            if ((v308 & 1) != 0)
LABEL_245:
              operator delete(v309);
LABEL_246:
            if (v146)
              (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
            if ((v310[0] & 1) != 0)
              operator delete(*(void **)&v310[8]);
            if (v145)
              (*v145)[1](v145);
            if (v184 == v152)
            {
              if (v184)
                operator delete(v184);
              EncodedPartitions = 0xFFFFFFFFLL;
              goto LABEL_301;
            }
            v242 = *(_QWORD **)(a1 + 680);
            if (*(_QWORD **)(a1 + 688) != v242)
            {
              if ((v12 & 1) == 0)
                goto LABEL_265;
              v243 = *(_QWORD *)(a1 + 736);
              v244 = *(_QWORD *)(a1 + 728);
              if (v243 - v244 != 56 || *(_DWORD *)(a1 + 476) != 1 || *(unsigned __int8 *)(a1 + 508) > 1u)
                goto LABEL_260;
              if (v243 != v244)
              {
                (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 80))(*(_QWORD *)(a1 + 48));
LABEL_260:
                v245 = *(_QWORD *)(a1 + 616);
                if (v245)
                {
                  v246 = *(_QWORD *)(a1 + 608);
                  if (v245 >= 0x40)
                    bzero(*(void **)(a1 + 608), 8 * (v245 >> 6));
                  if ((v245 & 0x3F) != 0)
                    *(_QWORD *)(v246 + 8 * (v245 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v245 & 0x3F));
                }
LABEL_265:
                v289 = v242;
                v247 = *(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 728);
                if (v247)
                {
                  v248 = 0;
                  v249 = 0;
                  v250 = 0;
                  v251 = 0x6DB6DB6DB6DB6DB7 * (v247 >> 3);
                  v252 = (unsigned int *)v296 + 1;
                  v253 = -1;
                  do
                  {
                    v254 = v251 + v253;
                    if (webrtc::LibvpxVp8Encoder::UpdateVpxConfiguration(a1, v251 + v253))
                    {
                      v255 = *(_QWORD *)(a1 + 728);
                      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 736) - v255) >> 3) <= v250)
                        goto LABEL_307;
                      v256 = *(_QWORD *)(a1 + 752);
                      if (0xEFBEFBEFBEFBEFBFLL * ((*(_QWORD *)(a1 + 760) - v256) >> 3) <= v250)
                        goto LABEL_307;
                      if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), v255 + v249, v256 + v248))
                      {
                        EncodedPartitions = 0xFFFFFFFFLL;
                        v14 = v283;
                        v289[6] = 0;
                        v289[7] = 0;
                        v289[8] = 0;
                        if (v184)
                          goto LABEL_298;
                        goto LABEL_301;
                      }
                    }
                    v257 = *(_QWORD *)(a1 + 728);
                    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 736) - v257) >> 3) <= v250)
                      goto LABEL_307;
                    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), v257 + v249, 27, __b[v254]);
                    v258 = *(_QWORD *)(a1 + 728);
                    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 736) - v258) >> 3) <= v250)
                      goto LABEL_307;
                    v259 = *v252;
                    v252 += 8;
                    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), v258 + v249, 30, v259);
                    ++v250;
                    v260 = *(_QWORD *)(a1 + 736);
                    v261 = *(_QWORD *)(a1 + 728);
                    v251 = 0x6DB6DB6DB6DB6DB7 * ((v260 - v261) >> 3);
                    v249 += 56;
                    v248 += 504;
                    --v253;
                  }
                  while (v250 < v251);
                  v14 = v283;
                  if (v260 != v261 && *(_QWORD *)(a1 + 688) != *(_QWORD *)(a1 + 680))
                  {
                    v262 = 0x15F90u / *(_DWORD *)(a1 + 172);
                    v263 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 184))(*(_QWORD *)(a1 + 48));
                    if ((v285 & 1) == 0)
                      goto LABEL_279;
                    if (*(_QWORD *)(a1 + 736) != *(_QWORD *)(a1 + 728))
                    {
                      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 80))(*(_QWORD *)(a1 + 48));
LABEL_279:
                      if (v263)
                      {
LABEL_280:
                        EncodedPartitions = 0xFFFFFFFFLL;
                        v289[6] = 0;
                        v289[7] = 0;
                        v289[8] = 0;
                        if (!v184)
                          goto LABEL_301;
                        do
                        {
LABEL_298:
                          v266 = *((_QWORD *)v152 - 1);
                          v152 -= 8;
                          v265 = v266;
                          if (v266)
                            (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
                        }
                        while (v152 != v184);
                        operator delete(v184);
LABEL_301:
                        v15 = v279;
                        if (!v14)
                          return EncodedPartitions;
LABEL_304:
                        while (v15 != v14)
                        {
                          v267 = *((_QWORD *)v15 - 4);
                          v15 -= 32;
                          *(_DWORD *)(*((_QWORD *)v15 + 2) + 48) = *((_DWORD *)v15 + 6);
                          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v267 + 40))(v267, *((_QWORD *)v15 + 1));
                        }
                        operator delete(v14);
                        return EncodedPartitions;
                      }
                      EncodedPartitions = webrtc::LibvpxVp8Encoder::GetEncodedPartitions((webrtc::LibvpxVp8Encoder *)a1, v275, v274);
                      if ((_DWORD)EncodedPartitions != 5)
                        goto LABEL_295;
                      if (*(_QWORD *)(a1 + 736) != *(_QWORD *)(a1 + 728)
                        && *(_QWORD *)(a1 + 688) != *(_QWORD *)(a1 + 680))
                      {
                        v264 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 184))(*(_QWORD *)(a1 + 48));
                        if ((v285 & 1) == 0)
                          goto LABEL_293;
                        if (*(_QWORD *)(a1 + 736) != *(_QWORD *)(a1 + 728))
                        {
                          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 80))(*(_QWORD *)(a1 + 48));
LABEL_293:
                          if (v264)
                            goto LABEL_280;
                          EncodedPartitions = webrtc::LibvpxVp8Encoder::GetEncodedPartitions((webrtc::LibvpxVp8Encoder *)a1, v275, v274);
LABEL_295:
                          *(_QWORD *)(a1 + 544) += v262;
                          v289[6] = 0;
                          v289[7] = 0;
                          v289[8] = 0;
                          if (v184)
                            goto LABEL_298;
                          goto LABEL_301;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_307:
            __break(1u);
          }
          v206 = *(_QWORD *)(a1 + 680);
          if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 688) - v206) >> 3) <= v185)
            goto LABEL_307;
          if (v152 < v288)
          {
            v207 = v292;
            *(_QWORD *)v152 = v292;
            v14 = v283;
            v12 = v285;
            if (v207)
              (**v207)(v207);
            v152 += 8;
            v208 = (uint64_t)v292;
            if (!v292)
              goto LABEL_176;
            goto LABEL_175;
          }
          v209 = v152 - v184;
          v210 = (v152 - v184) >> 3;
          v211 = v210 + 1;
          if ((unint64_t)(v210 + 1) >> 61)
            abort();
          if ((v288 - v184) >> 2 > v211)
            v211 = (v288 - v184) >> 2;
          if ((unint64_t)(v288 - v184) >= 0x7FFFFFFFFFFFFFF8)
            v211 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v211)
            goto LABEL_307;
          if (v211 >> 61)
            goto LABEL_308;
          v212 = 8 * v211;
          v213 = (char *)operator new(8 * v211);
          v214 = &v213[8 * v210];
          v215 = v292;
          *(_QWORD *)v214 = v292;
          if (v215)
            (**v215)(v215);
          v216 = v152 - v184;
          if (v152 == v184)
          {
            v222 = &v213[8 * v210];
            v145 = v277;
            goto LABEL_228;
          }
          v217 = v216 - 8;
          if ((unint64_t)(v216 - 8) < 0x138)
            break;
          v218 = v152 - 8 - v184;
          if (&v152[-(v218 & 0xFFFFFFFFFFFFFFF8) - 8] > v152 - 8
            || &v213[v209 - 8 - (v218 & 0xFFFFFFFFFFFFFFF8)] > &v213[v209 - 8])
          {
            break;
          }
          v219 = v218 & 0xFFFFFFFFFFFFFFF8;
          if (&v152[-v219 - 8] < v214)
          {
            v220 = (unint64_t)&v213[v209 - v219 - 8];
            v221 = v152;
            v222 = &v213[8 * v210];
            if (v220 < (unint64_t)v152)
              goto LABEL_222;
          }
          v223 = (v217 >> 3) + 1;
          v224 = 8 * (v223 & 0x3FFFFFFFFFFFFFFCLL);
          v221 = &v152[-v224];
          v222 = &v214[-v224];
          v225 = &v213[8 * v210 - 16];
          v226 = v152 - 16;
          v227 = v223 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v229 = *((_OWORD *)v226 - 1);
            v228 = *(_OWORD *)v226;
            *((_OWORD *)v226 - 1) = 0uLL;
            *(_OWORD *)v226 = 0uLL;
            *((_OWORD *)v225 - 1) = v229;
            *(_OWORD *)v225 = v228;
            v225 -= 32;
            v226 -= 32;
            v227 -= 4;
          }
          while (v227);
          if (v223 != (v223 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_222;
LABEL_223:
          v145 = v277;
          do
          {
            v232 = *((_QWORD *)v152 - 1);
            v152 -= 8;
            v231 = v232;
            if (v232)
              (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
          }
          while (v152 != v184);
LABEL_228:
          v288 = &v213[v212];
          v152 = v214 + 8;
          if (v184)
            operator delete(v184);
          v184 = v222;
          v146 = v281;
          v14 = v283;
          v12 = v285;
          v208 = (uint64_t)v292;
          if (!v292)
            goto LABEL_176;
LABEL_175:
          (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
LABEL_176:
          if (++v185 >= 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 728)) >> 3))
            goto LABEL_232;
        }
        v221 = v152;
        v222 = &v213[8 * v210];
        do
        {
LABEL_222:
          v230 = *((_QWORD *)v221 - 1);
          v221 -= 8;
          *(_QWORD *)v221 = 0;
          *((_QWORD *)v222 - 1) = v230;
          v222 -= 8;
        }
        while (v221 != v184);
        goto LABEL_223;
      }
      v166 = 265;
      v167 = *(char **)(a1 + 688);
      v168 = *(char **)(a1 + 680);
      if (v167 == v168)
        goto LABEL_307;
    }
    else
    {
      v166 = 258;
      v167 = *(char **)(a1 + 688);
      v168 = *(char **)(a1 + 680);
      if (v167 == v168)
        goto LABEL_307;
    }
    if (*(_DWORD *)v168 != (_DWORD)v166)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t\t", v169, v170, v171, v172, v173, v174, v175, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc");
      v176 = *(_QWORD *)(a1 + 680);
      if (*(_QWORD *)(a1 + 688) == v176)
        goto LABEL_307;
      v177 = *(unsigned int *)(v176 + 24);
      v178 = *(unsigned int *)(v176 + 28);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 680));
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v176, v166, v177, v178, 1, 0);
      v168 = *(char **)(a1 + 680);
      v167 = *(char **)(a1 + 688);
      if (0xF0F0F0F0F0F0F0F1 * ((v167 - v168) >> 3) < 2)
      {
        v14 = v283;
        v12 = v285;
      }
      else
      {
        v179 = 0;
        v180 = 1;
        do
        {
          v181 = (uint64_t)&v168[v179 + 136];
          v182 = *(unsigned int *)&v168[v179 + 160];
          v183 = *(unsigned int *)&v168[v179 + 164];
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v181);
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v181, v166, v182, v183, 32);
          v168 = *(char **)(a1 + 680);
          v167 = *(char **)(a1 + 688);
          ++v180;
          v179 += 136;
        }
        while (v180 < 0xF0F0F0F0F0F0F0F1 * ((v167 - v168) >> 3));
        v14 = v283;
        v12 = v285;
        v145 = v277;
      }
    }
    goto LABEL_172;
  }
LABEL_142:
  ((void (*)(uint64_t *__return_ptr, void (***)(_QWORD)))(*v145)[7])(&v308, v145);
  v152 = (char *)v308;
  if (!v308)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      ((uint64_t (*)(_QWORD))(*v145)[4])(v145);
      rtc::webrtc_logging_impl::Log("\r\t\t\t", v158, v159, v160, v161, v162, v163, v164, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc");
    }
LABEL_154:
    if (v308)
      (*(void (**)(uint64_t))(*(_QWORD *)v308 + 8))(v308);
    if (!v152)
    {
      v184 = 0;
      goto LABEL_246;
    }
    goto LABEL_157;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v308 + 32))(v308) == 1
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v308 + 32))(v308) == 2)
  {
    v157 = (void (***)(_QWORD))v308;
    if (v308)
      (**(void (***)(uint64_t))v308)(v308);
    if (v146)
      (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
    if (v157)
      (**v157)(v157);
    (*v145)[1](v145);
    v145 = v157;
    v146 = (uint64_t)v157;
    goto LABEL_154;
  }
  v269 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc", 1417, "converted_buffer->type() == VideoFrameBuffer::Type::kI420 || converted_buffer->type() == VideoFrameBuffer::Type::kI420A", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v153, v154, v155, v156, v272);
  return webrtc::LibvpxVp8Encoder::GetEncodedPartitions((webrtc::LibvpxVp8Encoder *)v269, v270, v271);
}

uint64_t webrtc::LibvpxVp8Encoder::GetEncodedPartitions(webrtc::LibvpxVp8Encoder *this, const webrtc::VideoFrame *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  const webrtc::VideoFrame *v5;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  _QWORD *p_p;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float v78;
  unint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  void **v85;
  void *v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  char *v94;
  char *v95;
  uint64_t v98;
  unsigned int v99;
  int v100;
  BOOL v101;
  unsigned __int8 v102;
  char v103;
  char v104;
  char v105;
  char v106;
  void *v107;
  char v108;
  void *v109;
  char v110;
  void *v111;
  char v112;
  void *v113;
  void *v114;
  char v115;
  char v116;
  char v117;
  void *v118;
  unint64_t v119;
  void *__p;
  uint64_t v121;
  void *v122;
  void **v123;
  char v124;
  __int16 v125;
  _QWORD v126[3];

  v126[1] = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 92);
  v4 = *((_QWORD *)this + 91);
  if (v3 != v4)
  {
    v5 = a2;
    v93 = 0;
    v7 = 0;
    v94 = (char *)a2 + 76;
    v95 = (char *)a2 + 40;
    v8 = (int)(-1227133513 * ((unint64_t)(v3 - v4) >> 3));
    v9 = 320;
    while (1)
    {
      v98 = 0;
      v10 = *((_QWORD *)this + 88);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 89) - v10) >> 6) <= v7)
        goto LABEL_127;
      v11 = v10 + 320 * v7;
      *(_QWORD *)(v11 + 144) = 0;
      *(_DWORD *)(v11 + 24) = 4;
      v100 = 0;
      v104 = 1;
      v105 = 0;
      v115 = 0;
      v116 = 0;
      v124 = 0;
      v125 = 0;
      bzero(&v101, 0x658uLL);
      if (0x6DB6DB6DB6DB6DB7 * ((v3 - v4) >> 3) <= v7)
        goto LABEL_127;
      v9 = 0;
      --v8;
      while (1)
      {
        v12 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t *))(**((_QWORD **)this + 6) + 192))(*((_QWORD *)this + 6), v4 + 56 * v7, &v98);
        if (!v12)
          break;
        if (!*(_DWORD *)v12)
          v9 += *(_QWORD *)(v12 + 16);
        v4 = *((_QWORD *)this + 91);
        if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 92) - v4) >> 3) <= v7)
          goto LABEL_127;
      }
      v3 = operator new();
      *(_QWORD *)(v3 + 8) = v9;
      *(_QWORD *)(v3 + 16) = malloc_type_malloc(v9, 0xB64CC8DFuLL);
      *(_QWORD *)v3 = &unk_24C0B3A40;
      *(_DWORD *)(v3 + 24) = 0;
      v13 = (unsigned int *)(v3 + 24);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v4 = 0;
      v98 = 0;
      do
      {
        v17 = *((_QWORD *)this + 91);
        if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 92) - v17) >> 3) <= v7)
          goto LABEL_127;
        v18 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t *))(**((_QWORD **)this + 6) + 192))(*((_QWORD *)this + 6), v17 + 56 * v7, &v98);
        if (!v18)
          goto LABEL_54;
        v9 = v18;
        if (!*(_DWORD *)v18)
        {
          v19 = *(_QWORD *)(v18 + 16) + v4;
          if (v19 > (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3))
            goto LABEL_128;
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
          memcpy((void *)(v15 + v4), *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16));
          v4 += *(_QWORD *)(v9 + 16);
        }
        v16 = *(_DWORD *)(v9 + 40);
      }
      while ((v16 & 8) != 0);
      v20 = *((_QWORD *)this + 88);
      v21 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 89) - v20) >> 6);
      if ((v16 & 1) != 0)
      {
        if (v21 <= v7)
          goto LABEL_127;
        *(_DWORD *)(v20 + 320 * v7 + 24) = 3;
      }
      if (v21 <= v7)
        goto LABEL_127;
      (**(void (***)(uint64_t))v3)(v3);
      (**(void (***)(uint64_t))v3)(v3);
      v22 = v20 + 320 * v7;
      v25 = *(_QWORD *)(v22 + 136);
      v24 = (uint64_t *)(v22 + 136);
      v23 = v25;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      *v24 = v3;
      *(_QWORD *)(v20 + 320 * v7 + 144) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v32 = *((_QWORD *)this + 88);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 89) - v32) >> 6) <= v7)
        goto LABEL_127;
      v33 = v32 + 320 * v7;
      *(_QWORD *)(v33 + 144) = v4;
      *(_BYTE *)(v33 + 160) = 1;
      *(_DWORD *)(v33 + 156) = v8;
      v34 = *((unsigned int *)a2 + 4);
      v99 = 0;
      v100 = 1;
      v103 = -1;
      v101 = (*(_BYTE *)(v9 + 40) & 2) != 0;
      v4 = (int)v7;
      v35 = *((_QWORD *)this + 91);
      if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 92) - v35) >> 3) <= (unint64_t)(int)v7)
        goto LABEL_127;
      vpx_codec_control_(v35 + 56 * (int)v7, 20, v26, v27, v28, v29, v30, v31, (uint64_t)&v99);
      v36 = *((_QWORD *)this + 88);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 89) - v36) >> 6) <= (int)v7)
        goto LABEL_127;
      v37 = *(_DWORD *)(v9 + 40);
      (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, int *))(**((_QWORD **)this + 72) + 64))(*((_QWORD *)this + 72), (int)v8, v34, *(_QWORD *)(v36 + 320 * (int)v7 + 144), v37 & 1, v99, &v100);
      v5 = a2;
      if ((v37 & 1) != 0)
      {
        if (v124)
          break;
      }
LABEL_48:
      v46 = *((_QWORD *)this + 94);
      if (0xEFBEFBEFBEFBEFBFLL * ((*((_QWORD *)this + 95) - v46) >> 3) <= (int)v7)
        goto LABEL_127;
      v47 = *(_DWORD *)(v46 + 504 * (int)v7 + 216) - 1;
      if (v47 <= 2)
        v125 = v47 + 256;
      v48 = v102;
      if (v102 != 255)
      {
        v49 = *((_QWORD *)this + 88);
        if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 89) - v49) >> 6) <= v7)
          goto LABEL_127;
        v50 = v49 + 320 * v7;
        *(_BYTE *)(v50 + 196) = 1;
        *(_DWORD *)(v50 + 192) = v48;
      }
LABEL_54:
      v51 = *((_QWORD *)this + 88);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 89) - v51) >> 6) <= v7)
        goto LABEL_127;
      v9 = 320;
      v52 = v51 + 320 * v7;
      *(_DWORD *)(v52 + 152) = *((_DWORD *)v5 + 4);
      v53 = *(_QWORD *)v95;
      *(_BYTE *)(v52 + 176) = v95[8];
      *(_QWORD *)(v52 + 168) = v53;
      v54 = *((_QWORD *)this + 88);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 89) - v54) >> 6) <= v7)
        goto LABEL_127;
      v55 = v54 + 320 * v7;
      v56 = v55 + 224;
      v57 = *(unsigned __int8 *)(v55 + 292);
      if (v57 == *((unsigned __int8 *)v5 + 144))
      {
        v4 = 504;
        if (*(_BYTE *)(v55 + 292))
        {
          *(_OWORD *)v56 = *(_OWORD *)v94;
          v58 = *((_OWORD *)v94 + 1);
          v59 = *((_OWORD *)v94 + 2);
          v60 = *((_OWORD *)v94 + 3);
          *(_BYTE *)(v55 + 288) = v94[64];
          *(_OWORD *)(v55 + 256) = v59;
          *(_OWORD *)(v55 + 272) = v60;
          *(_OWORD *)(v55 + 240) = v58;
        }
      }
      else
      {
        v61 = (_BYTE *)(v55 + 292);
        v4 = 504;
        if (v57)
        {
          *v61 = 0;
        }
        else
        {
          *(_OWORD *)v56 = *(_OWORD *)v94;
          v62 = *((_OWORD *)v94 + 1);
          v63 = *((_OWORD *)v94 + 2);
          v64 = *((_OWORD *)v94 + 3);
          *(_BYTE *)(v56 + 64) = v94[64];
          *(_OWORD *)(v56 + 32) = v63;
          *(_OWORD *)(v56 + 48) = v64;
          *(_OWORD *)(v56 + 16) = v62;
          *v61 = 1;
        }
      }
      v65 = *((_QWORD *)this + 88);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 89) - v65) >> 6) <= v7)
        goto LABEL_127;
      v66 = v65 + 320 * v7;
      *(_BYTE *)(v66 + 312) = a3;
      if (((*(_QWORD *)(*((_QWORD *)this + 79) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_93;
      if (*(_QWORD *)(v65 + 320 * v7 + 144))
      {
        *(_QWORD *)v66 = *(_QWORD *)((char *)this + 36 * v8 + 188);
        LODWORD(v126[0]) = -1;
        v67 = *((_QWORD *)this + 91);
        if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 92) - v67) >> 3) <= v7
          || ((*(void (**)(_QWORD, unint64_t, uint64_t, _QWORD *))(**((_QWORD **)this + 6) + 96))(*((_QWORD *)this + 6), v67 + 56 * v7, 19, v126), v68 = *((_QWORD *)this + 88), 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 89) - v68) >> 6) <= v7)|| (*(_DWORD *)(v68 + 320 * v7 + 36) = v126[0], v69 = *((_QWORD *)this + 103), v8 >= (*((_QWORD *)this + 104) - v69) >> 3)|| (*(_QWORD *)(v69 + 8 * v8) = *((_QWORD *)v5 + 4), v70 = *((_QWORD *)this + 88), 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 89) - v70) >> 6) <= v7))
        {
LABEL_127:
          __break(1u);
LABEL_128:
          v88 = *(_QWORD *)(v9 + 16) + v4;
          (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc", 1213, "encoded_pos + pkt->data.frame.sz <= buffer->size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v89, v90, v91, v92, v88);
        }
        (*(void (**)(_QWORD, unint64_t, int *))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), v70 + 320 * v7, &v100);
        LODWORD(v73) = ~(_DWORD)v8 - 1227133513 * ((*((_QWORD *)this + 92) - *((_QWORD *)this + 91)) >> 3);
        if (!(_DWORD)v8 && *((_DWORD *)this + 119) == 1 && *((_BYTE *)this + 504))
        {
          v74 = *((_QWORD *)this + 94);
          v73 = (int)v73;
          v75 = 0xEFBEFBEFBEFBEFBFLL * ((*((_QWORD *)this + 95) - v74) >> 3);
          goto LABEL_81;
        }
        v73 = (int)v73;
        v74 = *((_QWORD *)this + 94);
        v75 = 0xEFBEFBEFBEFBEFBFLL * ((*((_QWORD *)this + 95) - v74) >> 3);
        if (v75 <= (int)v73)
          goto LABEL_127;
        if (*(_DWORD *)(v74 + 504 * (int)v73 + 216) > 1u)
        {
          v80 = v74 + 504 * (int)v73 + 4 * v102;
          v77 = (1000 * *(_DWORD *)(v80 + 220));
          LODWORD(v71) = *((_DWORD *)this + 43);
          v81 = (double)v71;
          if (v102)
          {
            v82 = v74 + 504 * (int)v73 + 4 * (v102 - 1);
            v77 -= (1000 * *(_DWORD *)(v82 + 220));
            LODWORD(v72) = *(_DWORD *)(v82 + 240);
          }
          else
          {
            LODWORD(v72) = *(_DWORD *)(v80 + 240);
          }
          v78 = v81 / fmax((double)v72, 1.0);
          if (v78 < 0.000000001)
            goto LABEL_83;
        }
        else
        {
LABEL_81:
          if (v75 <= v73)
            goto LABEL_127;
          v77 = (1000 * *(_DWORD *)(v74 + 504 * (int)v73 + 112));
          v78 = (float)*((unsigned int *)this + 43);
          if (v78 < 0.000000001)
          {
LABEL_83:
            v79 = 0;
            if (SLODWORD(v126[0]) <= 15)
            {
LABEL_90:
              v83 = *((_QWORD *)this + 88);
              if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 89) - v83) >> 6) <= v7)
                goto LABEL_127;
              if (*(_QWORD *)(v83 + 320 * v7 + 144) > v79)
                goto LABEL_92;
              ++*((_DWORD *)this + 242);
              (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
              if (!v124)
                goto LABEL_111;
LABEL_94:
              v84 = (void **)v122;
              if (!v122)
              {
LABEL_107:
                if ((v119 & 1) != 0)
                  operator delete(__p);
                if ((v117 & 1) != 0)
                  operator delete(v118);
                goto LABEL_111;
              }
              v85 = v123;
              v86 = v122;
              if (v123 == v122)
              {
LABEL_106:
                v123 = v84;
                operator delete(v86);
                goto LABEL_107;
              }
              while (2)
              {
                if ((*(_BYTE *)(v85 - 3) & 1) != 0)
                {
                  operator delete(*(v85 - 2));
                  if ((*(_BYTE *)(v85 - 6) & 1) != 0)
                    goto LABEL_103;
LABEL_100:
                  if ((*(_BYTE *)(v85 - 12) & 1) != 0)
LABEL_104:
                    operator delete(*(v85 - 11));
                }
                else
                {
                  if ((*(_BYTE *)(v85 - 6) & 1) == 0)
                    goto LABEL_100;
LABEL_103:
                  operator delete(*(v85 - 5));
                  if ((*(_BYTE *)(v85 - 12) & 1) != 0)
                    goto LABEL_104;
                }
                v85 -= 13;
                if (v85 == v84)
                {
                  v86 = v122;
                  goto LABEL_106;
                }
                continue;
              }
            }
LABEL_92:
            *((_DWORD *)this + 242) = 0;
LABEL_93:
            (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
            if (!v124)
              goto LABEL_111;
            goto LABEL_94;
          }
        }
        v79 = (unint64_t)((float)((float)((float)((float)v77 / (float)(v78 * 8.0)) * 70.0) / 100.0) + 0.5);
        if (SLODWORD(v126[0]) <= 15)
          goto LABEL_90;
        goto LABEL_92;
      }
      if (((*(uint64_t (**)(_QWORD, unint64_t))(**((_QWORD **)this + 72) + 32))(*((_QWORD *)this + 72), v8) & 1) != 0)goto LABEL_93;
      v76 = *((_QWORD *)this + 88);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 89) - v76) >> 6) <= v7)
        goto LABEL_127;
      if (!*(_QWORD *)(v76 + 320 * v7 + 144))
        (*(void (**)(_QWORD, unint64_t, _QWORD))(**((_QWORD **)this + 72) + 72))(*((_QWORD *)this + 72), v8, *((unsigned int *)v5 + 4));
      v93 = 5;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (v124)
        goto LABEL_94;
LABEL_111:
      if (!v115)
        goto LABEL_3;
      if (v114)
        operator delete(v114);
      if ((v112 & 1) != 0)
      {
        operator delete(v113);
        if ((v110 & 1) == 0)
        {
LABEL_116:
          if ((v108 & 1) == 0)
            goto LABEL_117;
          goto LABEL_121;
        }
      }
      else if ((v110 & 1) == 0)
      {
        goto LABEL_116;
      }
      operator delete(v111);
      if ((v108 & 1) == 0)
      {
LABEL_117:
        if ((v106 & 1) != 0)
          goto LABEL_122;
        goto LABEL_3;
      }
LABEL_121:
      operator delete(v109);
      if ((v106 & 1) != 0)
LABEL_122:
        operator delete(v107);
LABEL_3:
      ++v7;
      v3 = *((_QWORD *)this + 92);
      v4 = *((_QWORD *)this + 91);
      if (v7 >= 0x6DB6DB6DB6DB6DB7 * ((v3 - v4) >> 3))
        return v93;
    }
    v38 = *(_DWORD *)(v9 + 68);
    LODWORD(v126[0]) = *(_DWORD *)(v9 + 48);
    HIDWORD(v126[0]) = v38;
    p_p = &__p;
    if ((v119 & 1) != 0)
    {
      if (!v121)
      {
        v9 = (size_t)operator new(8uLL);
        v42 = 1;
        v43 = (_QWORD *)v9;
        v41 = 1;
        goto LABEL_40;
      }
      p_p = __p;
    }
    if (v119 >= 2)
    {
      *p_p = v126[0];
      v40 = v119;
LABEL_47:
      v119 = v40 & 1 | 2;
      goto LABEL_48;
    }
    v41 = v119 >> 1 == 0;
    if (!p_p)
      goto LABEL_127;
    v9 = 0;
    v42 = 0;
    v43 = &p_p[v119 >> 1];
LABEL_40:
    v44 = v126;
    do
    {
      v45 = *v44++;
      *v43++ = v45;
      --v41;
    }
    while (v41);
    v40 = v119;
    if (v9)
    {
      if ((v119 & 1) != 0)
        operator delete(__p);
      __p = (void *)v9;
      v121 = v42;
      v40 = 1;
    }
    v5 = a2;
    goto LABEL_47;
  }
  return 0;
}

void webrtc::LibvpxVp8Encoder::GetEncoderInfo(webrtc::LibvpxVp8Encoder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  webrtc::LibvpxVp8Encoder *v5;
  unint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  char *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD v50[2];

  v3 = (uint64_t *)a2;
  v50[1] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 12) = 0x10000E100;
  *(_WORD *)(a2 + 20) = 0;
  v4 = a2 + 24;
  *((_BYTE *)v3 + 47) = 7;
  if (v4 <= (unint64_t)"unknown" && (char *)v3 + 31 > "unknown")
    goto LABEL_60;
  v3[22] = 0;
  v5 = (webrtc::LibvpxVp8Encoder *)(v3 + 22);
  *((_BYTE *)v3 + 64) = -1;
  v3[7] = 2;
  v3[10] = 0;
  v3[13] = 0;
  v3[16] = 0;
  v3[19] = 0;
  v3[26] = 2;
  v6 = (unint64_t *)(v3 + 26);
  v3[23] = 0;
  v3[24] = 0;
  *((_DWORD *)v3 + 54) = 1;
  *((_WORD *)v3 + 120) = 0;
  *((_BYTE *)v3 + 21) = 0;
  *((_BYTE *)v3 + 47) = 6;
  *(_DWORD *)v4 = 1986161004;
  *(_WORD *)(v4 + 4) = 30832;
  *((_WORD *)v3 + 15) = 0;
  *((_WORD *)v3 + 24) = *((unsigned __int8 *)this + 132);
  *((_BYTE *)v3 + 200) = 1;
  v7 = (char *)*((_QWORD *)this + 73);
  v8 = (char *)*((_QWORD *)this + 74);
  v49 = v3;
  if (v7 != v8 && v5 != (webrtc::LibvpxVp8Encoder *)((char *)this + 584))
  {
    std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits>::__assign_with_size[abi:sn180100]<webrtc::VideoEncoder::ResolutionBitrateLimits*,webrtc::VideoEncoder::ResolutionBitrateLimits*>(v3 + 22, v7, v8, (v8 - v7) >> 4);
    v3 = v49;
  }
  if (!*((_BYTE *)this + 1056) || *((_DWORD *)this + 263))
  {
    v9 = *(_QWORD *)((char *)this + 1052);
    if ((v9 & 0xFF00000000) == 0)
      goto LABEL_11;
    if ((_DWORD)v9)
    {
      *((_DWORD *)v3 + 4) = v9;
      *((_BYTE *)v3 + 20) = *((_BYTE *)this + 1121);
      goto LABEL_11;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v42, v43, v44, v45, v46, v47, v48, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/encoder_info_settings.cc");
LABEL_60:
    __break(1u);
    return;
  }
  v34 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
  v3 = v49;
  if ((v34 & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/encoder_info_settings.cc");
    v3 = v49;
  }
LABEL_11:
  v10 = (_BYTE *)*((_QWORD *)this + 141);
  v11 = (_BYTE *)*((_QWORD *)this + 142);
  v12 = v11 - v10;
  if (v11 != v10)
  {
    if (v11 - v10 < 0)
      abort();
    v13 = (char *)operator new(v11 - v10);
    v14 = &v13[v12];
    memcpy(v13, v10, v12);
    v15 = *(void **)v5;
    if (*(_QWORD *)v5)
    {
      v49[23] = (uint64_t)v15;
      operator delete(v15);
    }
    v49[22] = (uint64_t)v13;
    v49[23] = (uint64_t)v14;
    v49[24] = (uint64_t)v14;
    v3 = v49;
  }
  if (*((_DWORD *)this + 142) == 1
    && ((v16 = *((_QWORD *)this + 94), v16 == *((_QWORD *)this + 95)) || *(_DWORD *)(v16 + 48))
    && *((_BYTE *)this + 510))
  {
    v17 = 1;
    v18 = 0x5F0000001DLL;
  }
  else
  {
    v17 = 0;
    v18 = 0x5F00000000;
  }
  *v3 = v18;
  *((_BYTE *)v3 + 8) = v17;
  *(_WORD *)((char *)v3 + 9) = v50[0];
  *((_BYTE *)v3 + 11) = BYTE2(v50[0]);
  *((_DWORD *)v3 + 3) = 57600;
  if (*((_BYTE *)this + 128))
  {
    if (*((int *)this + 31) < 1)
      goto LABEL_29;
    v19 = *(_QWORD *)((char *)this + 124);
    if ((v19 & 0xFF00000000) == 0)
      goto LABEL_29;
    if ((int)v19 > 0)
    {
LABEL_28:
      *((_DWORD *)v3 + 3) = v19;
      goto LABEL_29;
    }
    std::__throw_bad_optional_access[abi:sn180100]();
  }
  v19 = *(_QWORD *)((char *)this + 124);
  if ((v19 & 0xFF00000000) != 0)
    goto LABEL_28;
LABEL_29:
  v50[0] = 0x800000001;
  absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type,5ul,std::allocator<webrtc::VideoFrameBuffer::Type>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::VideoFrameBuffer::Type>,webrtc::VideoFrameBuffer::Type const*>>(v6, (uint64_t)v50, 2uLL);
  v20 = v49;
  if (*((_BYTE *)this + 536))
  {
    v21 = *((_QWORD *)this + 92) - *((_QWORD *)this + 91);
    if (v21)
    {
      v22 = 0;
      v23 = v21 / 56;
      v24 = 504 * (v21 / 56) - 264;
      do
      {
        v25 = &v20[3 * v22];
        v27 = *((_BYTE *)v25 + 56);
        v26 = (uint64_t)(v25 + 7);
        if ((v27 & 1) != 0)
        {
          operator delete(*(void **)(v26 + 8));
          v20 = v49;
        }
        --v23;
        *(_QWORD *)v26 = 0;
        if ((v22 >= *((unsigned __int8 *)this + 184) || *((_BYTE *)this + 36 * v22 + 220))
          && (v22 || *((_DWORD *)this + 119) != 1 || !*((_BYTE *)this + 504)))
        {
          v28 = *((_QWORD *)this + 94);
          if (0xEFBEFBEFBEFBEFBFLL * ((*((_QWORD *)this + 95) - v28) >> 3) <= v23)
            goto LABEL_60;
          if (*(_DWORD *)(v28 + 504 * v23 + 216) >= 2u)
          {
            v29 = 0;
            while (1)
            {
              if (v29 >= *(unsigned int *)(v28 + 504 * v23 + 216))
                goto LABEL_33;
              v30 = (int)fmin((double)(0xFFu / *(_DWORD *)(v28 + v24 + 4 * v29)) + 0.5, 255.0);
              LOBYTE(v50[0]) = v30;
              v31 = *(_QWORD *)v26;
              if ((*(_QWORD *)v26 & 1) != 0)
              {
                v32 = *(_QWORD *)(v26 + 8);
                v33 = v31 >> 1;
                if (v33 != *(_QWORD *)(v26 + 16))
                {
LABEL_45:
                  if (!v32)
                    goto LABEL_60;
                  *(_BYTE *)(v32 + v33) = v30;
                  *(_QWORD *)v26 += 2;
                  goto LABEL_47;
                }
              }
              else
              {
                v32 = v26 + 8;
                v33 = v31 >> 1;
                if (v33 != 16)
                  goto LABEL_45;
              }
              absl::inlined_vector_internal::Storage<unsigned char,4ul,std::allocator<unsigned char>>::EmplaceBackSlow<unsigned char>(v26, (char *)v50);
              v20 = v49;
LABEL_47:
              ++v29;
              v28 = *((_QWORD *)this + 94);
              if (0xEFBEFBEFBEFBEFBFLL * ((*((_QWORD *)this + 95) - v28) >> 3) <= v23)
                goto LABEL_60;
            }
          }
          *(_BYTE *)(v26 + 8) = -1;
          *(_QWORD *)v26 = 2;
        }
LABEL_33:
        ++v22;
        v24 -= 504;
      }
      while (v22 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 92) - *((_QWORD *)this + 91)) >> 3));
    }
  }
}

uint64_t webrtc::LibvpxVp8Encoder::RegisterEncodeCompleteCallback(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 144) = a2;
  return 0;
}

uint64_t webrtc::`anonymous namespace'::SetRawImagePlanes(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;

  v2 = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if ((result - 1) >= 2)
  {
    if ((_DWORD)result != 8)
      return result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2) != 8)
    {
      v12 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_frame_buffer.cc", 74, "type() == Type::kNV12", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v7, v8, v9, v10, v13);
      return absl::inlined_vector_internal::Storage<unsigned char,4ul,std::allocator<unsigned char>>::EmplaceBackSlow<unsigned char>(v12);
    }
    *(_QWORD *)(a1 + 48) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
    *(_QWORD *)(a1 + 56) = v11;
    v5 = v11 + 1;
    v6 = 15;
  }
  else
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
    *(_QWORD *)(a1 + 48) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
    *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 152))(v2);
    v6 = 16;
  }
  *(_QWORD *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 80) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
  *(_DWORD *)(a1 + 84) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 120))(v2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8 * v6))(v2);
  *(_DWORD *)(a1 + 88) = result;
  return result;
}

char *absl::inlined_vector_internal::Storage<unsigned char,4ul,std::allocator<unsigned char>>::EmplaceBackSlow<unsigned char>(uint64_t a1, char *a2)
{
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char v24;

  v5 = a1 + 8;
  v4 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = 2 * *(_QWORD *)(a1 + 16);
  }
  else
  {
    v6 = 32;
  }
  v7 = v4 >> 1;
  v8 = (char *)operator new(v6);
  v9 = v8;
  v10 = &v8[v7];
  v8[v7] = *a2;
  if (v4 >= 2)
  {
    v11 = 0;
    if (v4 < 0x10 || (unint64_t)&v8[-v5] < 0x20)
    {
      v12 = (char *)v5;
      goto LABEL_19;
    }
    if (v4 < 0x40)
    {
      v11 = 0;
      goto LABEL_14;
    }
    v11 = v7 & 0x7FFFFFFFFFFFFFE0;
    v13 = v8 + 16;
    v14 = (__int128 *)(v5 + 16);
    v15 = v7 & 0x7FFFFFFFFFFFFFE0;
    do
    {
      v16 = *v14;
      *(v13 - 1) = *(v14 - 1);
      *v13 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 32;
    }
    while (v15);
    if (v7 != v11)
    {
      if ((v4 & 0x30) == 0)
      {
        v12 = (char *)(v5 + v11);
        goto LABEL_19;
      }
LABEL_14:
      v17 = v11;
      v11 = v7 & 0x7FFFFFFFFFFFFFF8;
      v12 = (char *)(v5 + (v7 & 0x7FFFFFFFFFFFFFF8));
      v18 = &v8[v17];
      v19 = (uint64_t *)(v5 + v17);
      v20 = v17 - (v7 & 0x7FFFFFFFFFFFFFF8);
      do
      {
        v21 = *v19++;
        *(_QWORD *)v18 = v21;
        v18 += 8;
        v20 += 8;
      }
      while (v20);
      if (v7 == v11)
        goto LABEL_21;
LABEL_19:
      v22 = v7 - v11;
      v23 = &v8[v11];
      do
      {
        v24 = *v12++;
        *v23++ = v24;
        --v22;
      }
      while (v22);
    }
  }
LABEL_21:
  if ((v4 & 1) != 0)
  {
    operator delete(*(void **)(a1 + 8));
    v4 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)a1 = (v4 | 1) + 2;
  return v10;
}

void webrtc::LibvpxVp9Decoder::~LibvpxVp9Decoder(webrtc::LibvpxVp9Decoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;

  *(_QWORD *)this = &off_24C0B6118;
  *((_BYTE *)this + 112) = 1;
  v2 = *((_QWORD *)this + 15);
  if (!v2)
    goto LABEL_9;
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 && *(_QWORD *)(v2 + 48))
  {
    (*(void (**)(void))(v3 + 32))();
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    v4 = *((_QWORD *)this + 15);
    if (!v4)
      goto LABEL_8;
    goto LABEL_7;
  }
  *(_DWORD *)(v2 + 16) = 1;
  v4 = *((_QWORD *)this + 15);
  if (v4)
LABEL_7:
    MEMORY[0x20BD0ADEC](v4, 0x10F2C40209C4D79);
LABEL_8:
  *((_QWORD *)this + 15) = 0;
LABEL_9:
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v5 = *((_QWORD *)this + 9);
  for (i = *((_QWORD *)this + 10); i != v5; i -= 8)
  {
    v8 = *(_QWORD *)(i - 8);
    v7 = v8;
    if (v8)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v7);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v7));
      if (!v10)
      {
        v11 = *(_QWORD *)(v7 + 24);
        *(_QWORD *)(v7 + 24) = 0;
        if (v11)
          MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v7, 0x1010C40A70995B8);
      }
    }
  }
  *((_QWORD *)this + 10) = v5;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 8));
  *((_BYTE *)this + 112) = 0;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v12 = (unsigned int **)*((_QWORD *)this + 9);
  v13 = (unsigned int **)*((_QWORD *)this + 10);
  if (v12 == v13)
  {
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 8));
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *v12++;
      v16 = atomic_load(v15);
      if (v16 != 1)
        ++v14;
    }
    while (v12 != v13);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 8));
    if (v14 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_decoder.cc");
  }
  v24 = *((_QWORD *)this + 9);
  if (v24)
  {
    v25 = *((_QWORD *)this + 10);
    v26 = (void *)*((_QWORD *)this + 9);
    if (v25 != v24)
    {
      do
      {
        v28 = *(_QWORD *)(v25 - 8);
        v25 -= 8;
        v27 = v28;
        if (v28)
        {
          do
          {
            v29 = __ldaxr((unsigned int *)v27);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, (unsigned int *)v27));
          if (!v30)
          {
            v31 = *(_QWORD *)(v27 + 24);
            *(_QWORD *)(v27 + 24) = 0;
            if (v31)
              MEMORY[0x20BD0ADD4](v31, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v27, 0x1010C40A70995B8);
          }
        }
      }
      while (v25 != v24);
      v26 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v24;
    operator delete(v26);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

{
  webrtc::LibvpxVp9Decoder::~LibvpxVp9Decoder(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::LibvpxVp9Decoder::Configure(webrtc::LibvpxVp9Decoder *this, const webrtc::VideoDecoder::Settings *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v8;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unsigned int **v29;
  unsigned int **v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int **v34;
  unint64_t v35;
  BOOL v36;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;

  if (((*(uint64_t (**)(webrtc::LibvpxVp9Decoder *))(*(_QWORD *)this + 48))(this) & 0x80000000) != 0)
    return 0;
  v4 = *((_QWORD *)this + 15);
  if (!v4)
  {
    v4 = operator new();
    *((_QWORD *)this + 15) = v4;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_QWORD *)(v4 + 48) = 0;
    v47 = 0;
    v6 = *((_DWORD *)a2 + 2);
    v5 = *((_DWORD *)a2 + 3);
    if (v6 >= 1 && v5 >= 1)
      goto LABEL_13;
LABEL_8:
    v8 = 1;
    goto LABEL_17;
  }
  v47 = 0;
  v6 = *((_DWORD *)a2 + 2);
  v5 = *((_DWORD *)a2 + 3);
  if (v6 < 1 || v5 < 1)
    goto LABEL_8;
LABEL_13:
  v10 = (unint64_t)(4886718346 * v6 * v5) >> 32;
  v8 = (v10 >> 19) + (v10 >> 31);
  if (v8 <= 1)
    v8 = 1;
  if (v8 >= *((_DWORD *)a2 + 4))
    v8 = *((_DWORD *)a2 + 4);
LABEL_17:
  v46 = v8;
  v11 = *((_QWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 132) = *(_OWORD *)a2;
  *(_QWORD *)((char *)this + 148) = v11;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_QWORD *)v4 = "WebM Project VP9 Decoder v1.14.0-268-g108f5128e";
  *(_QWORD *)(v4 + 8) = &vpx_codec_vp9_dx_algo;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = &v46;
  *(_QWORD *)(v4 + 48) = 0;
  v12 = decoder_init((_QWORD *)v4);
  if (!v12)
  {
    *(_DWORD *)(v4 + 16) = 0;
    v16 = *((_QWORD *)this + 15);
    if (!v16)
      return 0;
    v17 = *(_QWORD *)(v16 + 8);
    if (!v17 || !*(_QWORD *)(v16 + 48))
    {
      v18 = 1;
      goto LABEL_29;
    }
    if ((*(_BYTE *)(v17 + 18) & 0x40) == 0)
    {
      v18 = 4;
LABEL_29:
      v19 = 0;
      *(_DWORD *)(v16 + 16) = v18;
      return v19;
    }
    v20 = (*(uint64_t (**)(void))(v17 + 80))();
    *(_DWORD *)(v16 + 16) = v20;
    if (v20)
      return 0;
    *((_BYTE *)this + 112) = 1;
    *((_BYTE *)this + 128) = 1;
    if ((*(_QWORD *)a2 & 0xFF00000000) != 0)
    {
      v28 = (int)*(_QWORD *)a2;
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
      v29 = (unsigned int **)*((_QWORD *)this + 9);
      v30 = (unsigned int **)*((_QWORD *)this + 10);
      if (v29 == v30)
      {
        v34 = (unsigned int **)*((_QWORD *)this + 9);
      }
      else
      {
        v31 = 0;
        do
        {
          v32 = *v29++;
          v33 = atomic_load(v32);
          if (v33 != 1)
            ++v31;
        }
        while (v29 != v30);
        if (v31 > v28)
        {
          pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 8));
          return 0;
        }
        v29 = (unsigned int **)*((_QWORD *)this + 9);
        v34 = (unsigned int **)*((_QWORD *)this + 10);
      }
      v35 = v34 - v29 - v28;
      v36 = v34 == v29;
      *((_QWORD *)this + 12) = v28;
      while (!v36 && v35 != 0)
      {
        v38 = atomic_load(*v29);
        if (v38 == 1)
        {
          v29 = (unsigned int **)std::vector<webrtc::scoped_refptr<webrtc::Vp9FrameBufferPool::Vp9FrameBuffer>>::erase[abi:sn180100]((uint64_t *)this + 9, (uint64_t *)v29);
          --v35;
        }
        else
        {
          ++v29;
        }
        v36 = v29 == *((unsigned int ***)this + 10);
      }
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 8));
    }
    v19 = 1;
    if (!vpx_codec_control_(*((_QWORD *)this + 15), 269, v21, v22, v23, v24, v25, v26, 1))
      return v19;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t", v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_decoder.cc");
    return 0;
  }
  v13 = v12;
  v14 = *(_QWORD **)(v4 + 48);
  if (v14)
  {
    *(_QWORD *)(v4 + 24) = *v14;
    v15 = *(_QWORD *)(v4 + 8);
    if (v15)
    {
      (*(void (**)(void))(v15 + 32))();
      *(_QWORD *)(v4 + 48) = 0;
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v4 + 24) = 0;
  }
  v19 = 0;
  *(_DWORD *)(v4 + 16) = v13;
  return v19;
}

uint64_t webrtc::LibvpxVp9Decoder::Decode(webrtc::LibvpxVp9Decoder *this, const webrtc::EncodedImage *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  unsigned int v101;
  _QWORD *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  _QWORD *v125;
  uint64_t (**v126)();
  unsigned int *v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  char v138;
  char v139;
  char v140;
  int v141;
  char v142;
  int v143;
  int v144;
  char v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  __int128 v167;
  uint64_t v168;
  char v169;
  char v170;
  char v171;
  int v172;
  char v173;
  char v174;
  char v175;
  char v176;
  int v177;
  uint64_t v178;
  char v179;
  __int128 v180;
  _BYTE v181[31];
  char v182;
  char v183;
  char v184;
  char v185;
  char v186;
  char v187;
  char v188;
  uint64_t v189;
  char v190;
  char v191;
  char v192;
  __int128 v193;
  _OWORD v194[2];
  uint64_t v195;
  char v196;
  _BYTE v197[24];
  _BYTE *v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 112) || !*((_QWORD *)this + 13))
    return 4294967289;
  if (*((_DWORD *)a2 + 6) == 3)
  {
    v10 = *((_QWORD *)a2 + 17);
    if (v10)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v11 = *((_QWORD *)a2 + 18);
    if (!v11)
      v10 = 0;
    webrtc::ParseUncompressedVp9Header(v10, v11, a5, a6, a7, a8, &v164);
    if (v192)
    {
      v12 = DWORD1(v167);
      v13 = DWORD2(v167);
      if (*(_QWORD *)((char *)&v167 + 4) != *(_QWORD *)((char *)this + 140))
      {
        (*(void (**)(webrtc::LibvpxVp9Decoder *))(*(_QWORD *)this + 48))(this);
        *(_QWORD *)((char *)this + 140) = v12 | (v13 << 32);
        if (((*(uint64_t (**)(webrtc::LibvpxVp9Decoder *, char *))(*(_QWORD *)this + 16))(this, (char *)this + 132) & 1) == 0)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_decoder.cc");
          return 4294967289;
        }
      }
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t", v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_decoder.cc");
    }
  }
  if (*((_BYTE *)this + 128))
  {
    if (*((_DWORD *)a2 + 6) != 3)
      return 0xFFFFFFFFLL;
    *((_BYTE *)this + 128) = 0;
  }
  v163 = 0;
  v29 = *((_QWORD *)a2 + 17);
  if (v29)
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  v30 = *((_QWORD *)a2 + 18);
  if (v30)
    v31 = v29;
  else
    v31 = 0;
  v32 = *((_QWORD *)this + 15);
  if (!v32)
    return 0xFFFFFFFFLL;
  if (((_DWORD)v30 != 0) == (v31 == 0))
  {
    v44 = 8;
LABEL_35:
    *(_DWORD *)(v32 + 16) = v44;
    return 0xFFFFFFFFLL;
  }
  v33 = *(_QWORD *)(v32 + 8);
  if (!v33 || !*(_QWORD *)(v32 + 48))
  {
    v44 = 1;
    goto LABEL_35;
  }
  v34 = (*(uint64_t (**)(void))(v33 + 64))();
  *(_DWORD *)(v32 + 16) = v34;
  if (v34)
    return 0xFFFFFFFFLL;
  v41 = *((_QWORD *)this + 15);
  if (v41 && (v42 = *(_QWORD *)(v41 + 8)) != 0 && *(_QWORD *)(v41 + 48))
  {
    v43 = (*(uint64_t (**)(_QWORD, uint64_t *))(v42 + 72))(*(_QWORD *)(v41 + 48), &v163);
    v41 = *((_QWORD *)this + 15);
  }
  else
  {
    v43 = 0;
  }
  v162 = 0;
  vpx_codec_control_(v41, 267, v35, v36, v37, v38, v39, v40, (uint64_t)&v162);
  if (!v43)
    return 1;
  v46 = *((_DWORD *)a2 + 38);
  v47 = v162;
  v48 = *((unsigned __int8 *)a2 + 292);
  v49 = *(_QWORD *)(v43 + 128);
  if (v49)
  {
    do
      v50 = __ldxr((unsigned int *)v49);
    while (__stxr(v50 + 1, (unsigned int *)v49));
  }
  v51 = *(_DWORD *)v43;
  if (*(int *)v43 > 2305)
  {
    if (v51 != 2306)
    {
      if (v51 != 2309)
      {
        if (v51 != 2310)
          goto LABEL_89;
        LOBYTE(v159) = v48;
        v160 = v46;
        v161 = v47;
        v60 = *(_QWORD *)(v43 + 24);
        v61 = *(_DWORD *)(v43 + 84);
        v62 = *(_DWORD *)(v43 + 80);
        v156 = *(_OWORD *)(v43 + 48);
        if (v61 >= 0)
          v63 = *(_DWORD *)(v43 + 84);
        else
          v63 = v61 + 1;
        v64 = v63 >> 1;
        v65 = *(_QWORD *)(v43 + 64);
        v66 = *(_DWORD *)(v43 + 88);
        if (v49)
        {
          do
            v67 = __ldxr((unsigned int *)v49);
          while (__stxr(v67 + 1, (unsigned int *)v49));
        }
        v68 = operator new(0x10uLL);
        *v68 = &off_24C0B62D8;
        v68[1] = v49;
        v198 = v68;
        v58 = operator new();
        v69 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v68 + 16))(v68);
        *(_QWORD *)&v167 = v69;
        *(_QWORD *)v58 = &unk_24C0C3D90;
        *(_QWORD *)(v58 + 8) = v60;
        *(_OWORD *)(v58 + 16) = v156;
        *(_QWORD *)(v58 + 32) = v65;
        *(_DWORD *)(v58 + 40) = v62 / 2;
        *(_DWORD *)(v58 + 44) = v64;
        *(_DWORD *)(v58 + 48) = v66 / 2;
        if (v69)
        {
          if (v69 == &v164)
          {
            *(_QWORD *)(v58 + 80) = v58 + 56;
            (*(void (**)(uint64_t *))(v164 + 24))(&v164);
          }
          else
          {
            *(_QWORD *)(v58 + 80) = (*(uint64_t (**)(uint64_t *))(*v69 + 16))(v69);
          }
          v113 = (uint64_t *)v167;
          if ((uint64_t *)v167 == &v164)
          {
            v114 = 4;
            v113 = &v164;
            goto LABEL_130;
          }
          if ((_QWORD)v167)
          {
            v114 = 5;
LABEL_130:
            (*(void (**)(void))(*v113 + 8 * v114))();
          }
        }
        else
        {
          *(_QWORD *)(v58 + 80) = 0;
        }
        *(_QWORD *)v58 = off_24C0C3CD8;
        *(_DWORD *)(v58 + 88) = 0;
        v127 = (unsigned int *)(v58 + 88);
        do
          v128 = __ldxr(v127);
        while (__stxr(v128 + 1, v127));
        v125 = v198;
        if (v198 != v197)
        {
          if (!v198)
          {
            v126 = off_24C0C3CD8;
            goto LABEL_166;
          }
          goto LABEL_163;
        }
        goto LABEL_164;
      }
      LOBYTE(v159) = v48;
      v160 = v46;
      v161 = v47;
      v94 = *(_QWORD *)(v43 + 24);
      v95 = *(_DWORD *)(v43 + 84);
      v96 = *(_DWORD *)(v43 + 80);
      v158 = *(_OWORD *)(v43 + 48);
      if (v95 >= 0)
        v97 = *(_DWORD *)(v43 + 84);
      else
        v97 = v95 + 1;
      v98 = v97 >> 1;
      v99 = *(_QWORD *)(v43 + 64);
      v100 = *(_DWORD *)(v43 + 88);
      if (v49)
      {
        do
          v101 = __ldxr((unsigned int *)v49);
        while (__stxr(v101 + 1, (unsigned int *)v49));
      }
      v102 = operator new(0x10uLL);
      *v102 = &off_24C0B6290;
      v102[1] = v49;
      v198 = v102;
      v58 = operator new();
      v103 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v102 + 16))(v102);
      *(_QWORD *)&v167 = v103;
      *(_QWORD *)v58 = &unk_24C0C3C28;
      *(_QWORD *)(v58 + 8) = v94;
      *(_OWORD *)(v58 + 16) = v158;
      *(_QWORD *)(v58 + 32) = v99;
      *(_DWORD *)(v58 + 40) = v96 / 2;
      *(_DWORD *)(v58 + 44) = v98;
      *(_DWORD *)(v58 + 48) = v100 / 2;
      if (v103)
      {
        if (v103 == &v164)
        {
          *(_QWORD *)(v58 + 80) = v58 + 56;
          (*(void (**)(uint64_t *))(v164 + 24))(&v164);
        }
        else
        {
          *(_QWORD *)(v58 + 80) = (*(uint64_t (**)(uint64_t *))(*v103 + 16))(v103);
        }
        v121 = (uint64_t *)v167;
        if ((uint64_t *)v167 == &v164)
        {
          v122 = 4;
          v121 = &v164;
          goto LABEL_158;
        }
        if ((_QWORD)v167)
        {
          v122 = 5;
LABEL_158:
          (*(void (**)(void))(*v121 + 8 * v122))();
        }
      }
      else
      {
        *(_QWORD *)(v58 + 80) = 0;
      }
      *(_QWORD *)v58 = off_24C0C3B70;
      *(_DWORD *)(v58 + 88) = 0;
      v135 = (unsigned int *)(v58 + 88);
      do
        v136 = __ldxr(v135);
      while (__stxr(v136 + 1, v135));
      v125 = v198;
      if (v198 != v197)
      {
        if (!v198)
        {
          v126 = off_24C0C3B70;
          goto LABEL_166;
        }
        goto LABEL_163;
      }
LABEL_164:
      v137 = 4;
      v125 = v197;
      goto LABEL_165;
    }
    LOBYTE(v159) = v48;
    v160 = v46;
    v161 = v47;
    v84 = *(_QWORD *)(v43 + 24);
    v85 = *(_DWORD *)(v43 + 84);
    v86 = *(_DWORD *)(v43 + 80);
    v157 = *(_OWORD *)(v43 + 48);
    if (v85 >= 0)
      v87 = *(_DWORD *)(v43 + 84);
    else
      v87 = v85 + 1;
    v88 = v87 >> 1;
    v89 = *(_QWORD *)(v43 + 64);
    v90 = *(_DWORD *)(v43 + 88);
    if (v49)
    {
      do
        v91 = __ldxr((unsigned int *)v49);
      while (__stxr(v91 + 1, (unsigned int *)v49));
    }
    v92 = operator new(0x10uLL);
    *v92 = &off_24C0B6248;
    v92[1] = v49;
    v198 = v92;
    v58 = operator new();
    v93 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v92 + 16))(v92);
    *(_QWORD *)&v167 = v93;
    *(_QWORD *)v58 = &unk_24C0C3AC0;
    *(_QWORD *)(v58 + 8) = v84;
    *(_OWORD *)(v58 + 16) = v157;
    *(_QWORD *)(v58 + 32) = v89;
    *(_DWORD *)(v58 + 40) = v86 / 2;
    *(_DWORD *)(v58 + 44) = v88;
    *(_DWORD *)(v58 + 48) = v90 / 2;
    if (v93)
    {
      if (v93 == &v164)
      {
        *(_QWORD *)(v58 + 80) = v58 + 56;
        (*(void (**)(uint64_t *))(v164 + 24))(&v164);
      }
      else
      {
        *(_QWORD *)(v58 + 80) = (*(uint64_t (**)(uint64_t *))(*v93 + 16))(v93);
      }
      v119 = (uint64_t *)v167;
      if ((uint64_t *)v167 == &v164)
      {
        v120 = 4;
        v119 = &v164;
        goto LABEL_151;
      }
      if ((_QWORD)v167)
      {
        v120 = 5;
LABEL_151:
        (*(void (**)(void))(*v119 + 8 * v120))();
      }
    }
    else
    {
      *(_QWORD *)(v58 + 80) = 0;
    }
    *(_QWORD *)v58 = off_24C0C3A08;
    *(_DWORD *)(v58 + 88) = 0;
    v133 = (unsigned int *)(v58 + 88);
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
    v125 = v198;
    if (v198 != v197)
    {
      if (!v198)
      {
        v126 = off_24C0C3A08;
        goto LABEL_166;
      }
      goto LABEL_163;
    }
    goto LABEL_164;
  }
  if (v51 == 258)
  {
    v160 = v46;
    v161 = v47;
    v70 = *(_QWORD *)(v43 + 24);
    v159 = *(_OWORD *)(v43 + 48);
    v71 = *(_QWORD *)(v43 + 80);
    v72 = *(_QWORD *)(v43 + 64);
    v73 = *(_DWORD *)(v43 + 88);
    if (v49)
    {
      do
        v74 = __ldxr((unsigned int *)v49);
      while (__stxr(v74 + 1, (unsigned int *)v49));
    }
    v75 = operator new(0x10uLL);
    *v75 = &off_24C0B6170;
    v75[1] = v49;
    v198 = v75;
    v58 = operator new();
    v76 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v75 + 16))(v75);
    *(_QWORD *)&v167 = v76;
    *(_QWORD *)v58 = &unk_24C0C3688;
    *(_QWORD *)(v58 + 8) = v70;
    *(_OWORD *)(v58 + 16) = v159;
    *(_QWORD *)(v58 + 32) = v72;
    *(_QWORD *)(v58 + 40) = v71;
    *(_DWORD *)(v58 + 48) = v73;
    if (v76)
    {
      if (v76 == &v164)
      {
        *(_QWORD *)(v58 + 80) = v58 + 56;
        (*(void (**)(uint64_t *))(v164 + 24))(&v164);
      }
      else
      {
        *(_QWORD *)(v58 + 80) = (*(uint64_t (**)(uint64_t *))(*v76 + 16))(v76);
      }
      v115 = (uint64_t *)v167;
      if ((uint64_t *)v167 == &v164)
      {
        v116 = 4;
        v115 = &v164;
        goto LABEL_137;
      }
      if ((_QWORD)v167)
      {
        v116 = 5;
LABEL_137:
        (*(void (**)(void))(*v115 + 8 * v116))();
      }
    }
    else
    {
      *(_QWORD *)(v58 + 80) = 0;
    }
    *(_QWORD *)v58 = off_24C0C35D0;
    *(_DWORD *)(v58 + 88) = 0;
    v129 = (unsigned int *)(v58 + 88);
    do
      v130 = __ldxr(v129);
    while (__stxr(v130 + 1, v129));
    v125 = v198;
    if (v198 != v197)
    {
      if (!v198)
      {
        v126 = off_24C0C35D0;
        goto LABEL_166;
      }
      goto LABEL_163;
    }
    goto LABEL_164;
  }
  if (v51 == 261)
  {
    v160 = v46;
    v161 = v47;
    v77 = *(_QWORD *)(v43 + 24);
    v159 = *(_OWORD *)(v43 + 48);
    v78 = *(_QWORD *)(v43 + 80);
    v79 = *(_QWORD *)(v43 + 64);
    v80 = *(_DWORD *)(v43 + 88);
    if (v49)
    {
      do
        v81 = __ldxr((unsigned int *)v49);
      while (__stxr(v81 + 1, (unsigned int *)v49));
    }
    v82 = operator new(0x10uLL);
    *v82 = &off_24C0B61B8;
    v82[1] = v49;
    v198 = v82;
    v58 = operator new();
    v83 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v82 + 16))(v82);
    *(_QWORD *)&v167 = v83;
    *(_QWORD *)v58 = &unk_24C0C37F0;
    *(_QWORD *)(v58 + 8) = v77;
    *(_OWORD *)(v58 + 16) = v159;
    *(_QWORD *)(v58 + 32) = v79;
    *(_QWORD *)(v58 + 40) = v78;
    *(_DWORD *)(v58 + 48) = v80;
    if (v83)
    {
      if (v83 == &v164)
      {
        *(_QWORD *)(v58 + 80) = v58 + 56;
        (*(void (**)(uint64_t *))(v164 + 24))(&v164);
      }
      else
      {
        *(_QWORD *)(v58 + 80) = (*(uint64_t (**)(uint64_t *))(*v83 + 16))(v83);
      }
      v117 = (uint64_t *)v167;
      if ((uint64_t *)v167 == &v164)
      {
        v118 = 4;
        v117 = &v164;
        goto LABEL_144;
      }
      if ((_QWORD)v167)
      {
        v118 = 5;
LABEL_144:
        (*(void (**)(void))(*v117 + 8 * v118))();
      }
    }
    else
    {
      *(_QWORD *)(v58 + 80) = 0;
    }
    *(_QWORD *)v58 = off_24C0C3738;
    *(_DWORD *)(v58 + 88) = 0;
    v131 = (unsigned int *)(v58 + 88);
    do
      v132 = __ldxr(v131);
    while (__stxr(v132 + 1, v131));
    v125 = v198;
    if (v198 != v197)
    {
      if (!v198)
      {
        v126 = off_24C0C3738;
        goto LABEL_166;
      }
      goto LABEL_163;
    }
    goto LABEL_164;
  }
  if (v51 != 262)
  {
LABEL_89:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v104, v105, v106, v107, v108, v109, v110, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_decoder.cc");
    v21 = 1;
    goto LABEL_201;
  }
  v160 = v46;
  v161 = v47;
  v52 = *(_QWORD *)(v43 + 24);
  v159 = *(_OWORD *)(v43 + 48);
  v53 = *(_QWORD *)(v43 + 80);
  v54 = *(_QWORD *)(v43 + 64);
  v55 = *(_DWORD *)(v43 + 88);
  if (v49)
  {
    do
      v56 = __ldxr((unsigned int *)v49);
    while (__stxr(v56 + 1, (unsigned int *)v49));
  }
  v57 = operator new(0x10uLL);
  *v57 = &off_24C0B6200;
  v57[1] = v49;
  v198 = v57;
  v58 = operator new();
  v59 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v57 + 16))(v57);
  *(_QWORD *)&v167 = v59;
  *(_QWORD *)v58 = &unk_24C0C3958;
  *(_QWORD *)(v58 + 8) = v52;
  *(_OWORD *)(v58 + 16) = v159;
  *(_QWORD *)(v58 + 32) = v54;
  *(_QWORD *)(v58 + 40) = v53;
  *(_DWORD *)(v58 + 48) = v55;
  if (v59)
  {
    if (v59 == &v164)
    {
      *(_QWORD *)(v58 + 80) = v58 + 56;
      (*(void (**)(uint64_t *))(v164 + 24))(&v164);
    }
    else
    {
      *(_QWORD *)(v58 + 80) = (*(uint64_t (**)(uint64_t *))(*v59 + 16))(v59);
    }
    v111 = (uint64_t *)v167;
    if ((uint64_t *)v167 == &v164)
    {
      v112 = 4;
      v111 = &v164;
      goto LABEL_123;
    }
    if ((_QWORD)v167)
    {
      v112 = 5;
LABEL_123:
      (*(void (**)(void))(*v111 + 8 * v112))();
    }
  }
  else
  {
    *(_QWORD *)(v58 + 80) = 0;
  }
  *(_QWORD *)v58 = off_24C0C38A0;
  *(_DWORD *)(v58 + 88) = 0;
  v123 = (unsigned int *)(v58 + 88);
  do
    v124 = __ldxr(v123);
  while (__stxr(v124 + 1, v123));
  v125 = v198;
  if (v198 == v197)
    goto LABEL_164;
  if (v198)
  {
LABEL_163:
    v137 = 5;
LABEL_165:
    (*(void (**)(void))(*v125 + 8 * v137))();
    v126 = *(uint64_t (***)())v58;
    goto LABEL_166;
  }
  v126 = off_24C0C38A0;
LABEL_166:
  ((void (*)(uint64_t))*v126)(v58);
  (**(void (***)(uint64_t))v58)(v58);
  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  if (v48)
  {
    v138 = *((_BYTE *)a2 + 224);
    v139 = *((_BYTE *)a2 + 225);
    v140 = *((_BYTE *)a2 + 226);
    LOBYTE(v159) = *((_BYTE *)a2 + 227);
    v141 = *((_DWORD *)a2 + 57);
    v195 = *((_QWORD *)a2 + 29);
    v196 = *((_BYTE *)a2 + 240);
    v193 = *(_OWORD *)((char *)a2 + 241);
    *(_OWORD *)((char *)v194 + 15) = *((_OWORD *)a2 + 17);
    v194[0] = *(_OWORD *)((char *)a2 + 257);
    v142 = *((_BYTE *)a2 + 288);
  }
  else
  {
    v143 = *(_DWORD *)(v43 + 8);
    v139 = 2;
    v138 = 2;
    switch(*(_DWORD *)(v43 + 4))
    {
      case 1:
      case 3:
        v139 = 6;
        v138 = 6;
        break;
      case 2:
        v139 = 1;
        v138 = 1;
        break;
      case 4:
        v139 = 7;
        v138 = 7;
        break;
      case 5:
        v144 = *(_DWORD *)(v43 + 20);
        if (v144 == 10)
          v145 = 14;
        else
          v145 = 2;
        if (v144 == 8)
          v139 = 1;
        else
          v139 = v145;
        v138 = 9;
        break;
      case 6:
        break;
      case 7:
        v138 = 1;
        v139 = 13;
        break;
      default:
        v138 = 2;
        break;
    }
    v142 = 0;
    if (v143)
      v141 = 2 * (v143 == 1);
    else
      v141 = 1;
    v196 = 0;
    v195 = 0;
    v140 = v138;
  }
  LOWORD(v164) = 0;
  v165 = v58;
  (**(void (***)(uint64_t))v58)(v58);
  v166 = v160;
  v168 = 0;
  v167 = 0uLL;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v173 = v138;
  v174 = v139;
  v175 = v140;
  v176 = v159;
  v177 = v141;
  v178 = v195;
  v179 = v196;
  *(_OWORD *)&v181[15] = *(_OWORD *)((char *)v194 + 15);
  *(_OWORD *)v181 = v194[0];
  v180 = v193;
  v182 = v142;
  v183 = 1;
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v188 = 0;
  v189 = 0;
  v190 = 0;
  v191 = 0;
  (*(void (**)(_QWORD, uint64_t *, _QWORD, uint64_t))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), &v164, 0, v161 | 0x100);
  v146 = v189;
  if (v189)
  {
    do
    {
      v147 = __ldaxr((unsigned int *)v146);
      v148 = v147 - 1;
    }
    while (__stlxr(v148, (unsigned int *)v146));
    if (!v148)
    {
      v149 = *(_QWORD *)(v146 + 8);
      if (v149)
      {
        v150 = *(_QWORD *)(v146 + 16);
        v151 = *(void **)(v146 + 8);
        if (v150 != v149)
        {
          do
          {
            v152 = *(void **)(v150 - 96);
            if (v152)
            {
              *(_QWORD *)(v150 - 88) = v152;
              operator delete(v152);
            }
            v150 -= 104;
          }
          while (v150 != v149);
          v151 = *(void **)(v146 + 8);
        }
        *(_QWORD *)(v146 + 16) = v149;
        operator delete(v151);
      }
      MEMORY[0x20BD0ADEC](v146, 0x1020C40E72D6CFBLL);
    }
  }
  if (v165)
    (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v21 = 0;
LABEL_201:
  if (v49)
  {
    do
    {
      v153 = __ldaxr((unsigned int *)v49);
      v154 = v153 - 1;
    }
    while (__stlxr(v154, (unsigned int *)v49));
    if (!v154)
    {
      v155 = *(_QWORD *)(v49 + 24);
      *(_QWORD *)(v49 + 24) = 0;
      if (v155)
        MEMORY[0x20BD0ADD4](v155, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v49, 0x1010C40A70995B8);
    }
  }
  return v21;
}

uint64_t webrtc::LibvpxVp9Decoder::RegisterDecodeCompleteCallback(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 104) = a2;
  return 0;
}

uint64_t webrtc::LibvpxVp9Decoder::Release(webrtc::LibvpxVp9Decoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_BYTE *)this + 112))
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3 && *(_QWORD *)(v2 + 48))
      {
        (*(void (**)(void))(v3 + 32))();
        v4 = 0;
        *(_QWORD *)(v2 + 48) = 0;
        *(_QWORD *)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(v2 + 16) = 0;
        v2 = *((_QWORD *)this + 15);
        if (!v2)
          goto LABEL_11;
      }
      else
      {
        *(_DWORD *)(v2 + 16) = 1;
        v4 = 4294967293;
        v2 = *((_QWORD *)this + 15);
        if (!v2)
        {
LABEL_11:
          *((_QWORD *)this + 15) = 0;
          goto LABEL_12;
        }
      }
    }
    else
    {
      v4 = 0;
    }
    MEMORY[0x20BD0ADEC](v2, 0x10F2C40209C4D79);
    goto LABEL_11;
  }
  v4 = 0;
LABEL_12:
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v5 = *((_QWORD *)this + 9);
  for (i = *((_QWORD *)this + 10); i != v5; i -= 8)
  {
    v8 = *(_QWORD *)(i - 8);
    v7 = v8;
    if (v8)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v7);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v7));
      if (!v10)
      {
        v11 = *(_QWORD *)(v7 + 24);
        *(_QWORD *)(v7 + 24) = 0;
        if (v11)
          MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v7, 0x1010C40A70995B8);
      }
    }
  }
  *((_QWORD *)this + 10) = v5;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 8));
  *((_BYTE *)this + 112) = 0;
  return v4;
}

void webrtc::LibvpxVp9Decoder::GetDecoderInfo(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 23) = 6;
  *(_WORD *)(a1 + 4) = 30832;
  *(_DWORD *)a1 = 1986161004;
  *(_BYTE *)(a1 + 24) = 0;
}

const char *webrtc::LibvpxVp9Decoder::ImplementationName(webrtc::LibvpxVp9Decoder *this)
{
  return "libvpx";
}

_QWORD *std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_0,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  *a1 = &off_24C0B6170;
  v2 = a1[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40A70995B8);
    }
  }
  return a1;
}

void std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_0,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_0>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  *a1 = &off_24C0B6170;
  v1 = a1[1];
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      v4 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v4)
        MEMORY[0x20BD0ADD4](v4, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v1, 0x1010C40A70995B8);
    }
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_0,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unsigned int *v3;
  unsigned int v4;

  result = operator new(0x10uLL);
  v3 = *(unsigned int **)(a1 + 8);
  *result = &off_24C0B6170;
  result[1] = v3;
  if (v3)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_0,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(result + 8);
  *a2 = &off_24C0B6170;
  a2[1] = v2;
  if (v2)
  {
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  return result;
}

uint64_t std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_0,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_0>,void ()(void)>::destroy(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      v4 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v4)
        MEMORY[0x20BD0ADD4](v4, 0x1000C8077774924);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  return result;
}

void std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_0,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_0>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v2 = __p[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40A70995B8);
    }
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_1,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  *a1 = &off_24C0B61B8;
  v2 = a1[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40A70995B8);
    }
  }
  return a1;
}

void std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_1,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  *a1 = &off_24C0B61B8;
  v1 = a1[1];
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      v4 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v4)
        MEMORY[0x20BD0ADD4](v4, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v1, 0x1010C40A70995B8);
    }
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_1,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unsigned int *v3;
  unsigned int v4;

  result = operator new(0x10uLL);
  v3 = *(unsigned int **)(a1 + 8);
  *result = &off_24C0B61B8;
  result[1] = v3;
  if (v3)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_1,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(result + 8);
  *a2 = &off_24C0B61B8;
  a2[1] = v2;
  if (v2)
  {
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  return result;
}

uint64_t std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_1,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_1>,void ()(void)>::destroy(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      v4 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v4)
        MEMORY[0x20BD0ADD4](v4, 0x1000C8077774924);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  return result;
}

void std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_1,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_1>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v2 = __p[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40A70995B8);
    }
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_2,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_2>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  *a1 = &off_24C0B6200;
  v2 = a1[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40A70995B8);
    }
  }
  return a1;
}

void std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_2,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_2>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  *a1 = &off_24C0B6200;
  v1 = a1[1];
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      v4 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v4)
        MEMORY[0x20BD0ADD4](v4, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v1, 0x1010C40A70995B8);
    }
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_2,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unsigned int *v3;
  unsigned int v4;

  result = operator new(0x10uLL);
  v3 = *(unsigned int **)(a1 + 8);
  *result = &off_24C0B6200;
  result[1] = v3;
  if (v3)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_2,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_2>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(result + 8);
  *a2 = &off_24C0B6200;
  a2[1] = v2;
  if (v2)
  {
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  return result;
}

uint64_t std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_2,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_2>,void ()(void)>::destroy(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      v4 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v4)
        MEMORY[0x20BD0ADD4](v4, 0x1000C8077774924);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  return result;
}

void std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_2,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_2>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v2 = __p[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40A70995B8);
    }
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_3,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_3>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  *a1 = &off_24C0B6248;
  v2 = a1[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40A70995B8);
    }
  }
  return a1;
}

void std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_3,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_3>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  *a1 = &off_24C0B6248;
  v1 = a1[1];
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      v4 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v4)
        MEMORY[0x20BD0ADD4](v4, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v1, 0x1010C40A70995B8);
    }
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_3,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_3>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unsigned int *v3;
  unsigned int v4;

  result = operator new(0x10uLL);
  v3 = *(unsigned int **)(a1 + 8);
  *result = &off_24C0B6248;
  result[1] = v3;
  if (v3)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_3,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_3>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(result + 8);
  *a2 = &off_24C0B6248;
  a2[1] = v2;
  if (v2)
  {
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  return result;
}

uint64_t std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_3,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_3>,void ()(void)>::destroy(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      v4 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v4)
        MEMORY[0x20BD0ADD4](v4, 0x1000C8077774924);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  return result;
}

void std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_3,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_3>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v2 = __p[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40A70995B8);
    }
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_4,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_4>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  *a1 = &off_24C0B6290;
  v2 = a1[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40A70995B8);
    }
  }
  return a1;
}

void std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_4,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_4>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  *a1 = &off_24C0B6290;
  v1 = a1[1];
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      v4 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v4)
        MEMORY[0x20BD0ADD4](v4, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v1, 0x1010C40A70995B8);
    }
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_4,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_4>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unsigned int *v3;
  unsigned int v4;

  result = operator new(0x10uLL);
  v3 = *(unsigned int **)(a1 + 8);
  *result = &off_24C0B6290;
  result[1] = v3;
  if (v3)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_4,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_4>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(result + 8);
  *a2 = &off_24C0B6290;
  a2[1] = v2;
  if (v2)
  {
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  return result;
}

uint64_t std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_4,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_4>,void ()(void)>::destroy(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      v4 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v4)
        MEMORY[0x20BD0ADD4](v4, 0x1000C8077774924);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  return result;
}

void std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_4,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_4>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v2 = __p[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40A70995B8);
    }
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_5,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_5>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  *a1 = &off_24C0B62D8;
  v2 = a1[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40A70995B8);
    }
  }
  return a1;
}

void std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_5,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_5>,void ()(void)>::~__func(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  *a1 = &off_24C0B62D8;
  v1 = a1[1];
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      v4 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v4)
        MEMORY[0x20BD0ADD4](v4, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v1, 0x1010C40A70995B8);
    }
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_5,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_5>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unsigned int *v3;
  unsigned int v4;

  result = operator new(0x10uLL);
  v3 = *(unsigned int **)(a1 + 8);
  *result = &off_24C0B62D8;
  result[1] = v3;
  if (v3)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_5,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_5>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(result + 8);
  *a2 = &off_24C0B62D8;
  a2[1] = v2;
  if (v2)
  {
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  return result;
}

uint64_t std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_5,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_5>,void ()(void)>::destroy(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      v4 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (v4)
        MEMORY[0x20BD0ADD4](v4, 0x1000C8077774924);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  return result;
}

void std::__function::__func<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_5,std::allocator<webrtc::LibvpxVp9Decoder::ReturnFrame(vpx_image const*,unsigned int,int,webrtc::ColorSpace const*)::$_5>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v2 = __p[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40A70995B8);
    }
  }
  operator delete(__p);
}

void webrtc::LibvpxVp9Encoder::EncoderOutputCodedPacketCallback(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _BYTE *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  void **v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  _BOOL4 v31;
  BOOL v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  int v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 *v90;
  uint64_t v91;
  __int128 v92;
  int v93;
  _OWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _WORD *v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  _WORD *v110;
  int v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  int v117;
  unint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  int v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  char v146;
  unint64_t v147;
  int v148;
  BOOL v149;
  int v150;
  unint64_t v151;
  char v152;
  BOOL v153;
  __int16 v154;
  int v155;
  unsigned __int8 v156;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  char *v161;
  unsigned int v162;
  __int16 v163;
  __int16 v164;
  int v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _OWORD *v177;
  _OWORD *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  BOOL v188;
  uint64_t v189;
  uint64_t v190;
  const float *v191;
  uint64_t v192;
  uint64_t v193;
  _DWORD *v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  BOOL v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  float v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  float v209;
  uint64_t v210;
  float32x4_t v211;
  float32x4_t *v212;
  uint64_t v213;
  std::string *v214;
  uint64_t v215;
  char *v216;
  unint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE *v220;
  _BYTE *v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  unsigned __int8 v226;
  int v227;
  uint64_t v228;
  _OWORD *v229;
  char v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD v235[3];
  int v236;
  const char *v237;
  uint64_t v238;
  char *v239;
  int v240;
  char v241;
  _QWORD v242[2];
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  _BYTE __src[1633];
  char v248;
  char v249;
  void *v250;
  char v251;
  void *v252;
  char v253;
  void *v254;
  char v255;
  void *v256;
  void *v257;
  char v258;
  _BYTE v259[24];
  void *v260;
  char v261;
  void *v262;
  void *__p;
  void **v264;
  char v265;
  __int16 v266;
  _QWORD v267[4];

  v267[2] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 16))
    return;
  v3 = a2;
  v5 = (_BYTE *)(a2 + 4624);
  v229 = (_OWORD *)(a2 + 378);
  memset(v235, 0, sizeof(v235));
  v236 = 0;
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD *))(**(_QWORD **)(a2 + 8) + 152))(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 2752), 44, v235);
  v219 = v3 + 16;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = operator new();
  *(_QWORD *)(v8 + 8) = v7;
  v9 = malloc_type_malloc(v7, 0xB64CC8DFuLL);
  *(_QWORD *)(v8 + 16) = v9;
  if (v7)
    memmove(v9, (const void *)v6, v7);
  *(_QWORD *)v8 = &unk_24C0B3A40;
  *(_DWORD *)(v8 + 24) = 0;
  v10 = (unsigned int *)(v8 + 24);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  rtc::RefCountedObject<webrtc::EncodedImageBuffer>::AddRef(v8);
  v12 = *(_QWORD *)(v3 + 152);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *(_QWORD *)(v3 + 152) = v8;
  *(_QWORD *)(v3 + 160) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *(_DWORD *)__src = 0;
  __src[1632] = 1;
  v248 = 0;
  v258 = 0;
  v259[0] = 0;
  v265 = 0;
  v266 = 0;
  bzero(&__src[8], 0x658uLL);
  v218 = v3 + 336;
  memcpy((void *)(v3 + 336), __src, 0x661uLL);
  v13 = (unint64_t *)(v3 + 1976);
  if (*(_BYTE *)(v3 + 2184))
  {
    webrtc::GenericFrameInfo::~GenericFrameInfo((webrtc::GenericFrameInfo *)(v3 + 1976));
    *(_BYTE *)(v3 + 2184) = 0;
  }
  v14 = v3 + 2192;
  std::__optional_storage_base<webrtc::FrameDependencyStructure,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<webrtc::FrameDependencyStructure,false> const&>((webrtc::FrameDependencyStructure *)(v3 + 2192), (webrtc::FrameDependencyStructure *)v259);
  *(_WORD *)(v3 + 2328) = v266;
  v234 = v3;
  if (v265)
  {
    v2 = (unint64_t)__p;
    if (!__p)
    {
LABEL_24:
      if ((v261 & 1) != 0)
        operator delete(v262);
      if ((v259[16] & 1) != 0)
        operator delete(v260);
      goto LABEL_28;
    }
    v15 = v264;
    v16 = __p;
    if (v264 == __p)
    {
LABEL_23:
      v264 = (void **)v2;
      operator delete(v16);
      v3 = v234;
      goto LABEL_24;
    }
    while (1)
    {
      if ((*(_BYTE *)(v15 - 3) & 1) != 0)
      {
        operator delete(*(v15 - 2));
        if ((*(_BYTE *)(v15 - 6) & 1) == 0)
        {
LABEL_17:
          if ((*(_BYTE *)(v15 - 12) & 1) != 0)
            goto LABEL_21;
          goto LABEL_14;
        }
      }
      else if ((*(_BYTE *)(v15 - 6) & 1) == 0)
      {
        goto LABEL_17;
      }
      operator delete(*(v15 - 5));
      if ((*(_BYTE *)(v15 - 12) & 1) != 0)
LABEL_21:
        operator delete(*(v15 - 11));
LABEL_14:
      v15 -= 13;
      if (v15 == (void **)v2)
      {
        v16 = __p;
        goto LABEL_23;
      }
    }
  }
LABEL_28:
  if (!v258)
    goto LABEL_36;
  if (v257)
    operator delete(v257);
  if ((v255 & 1) != 0)
  {
    operator delete(v256);
    if ((v253 & 1) == 0)
    {
LABEL_33:
      if ((v251 & 1) == 0)
        goto LABEL_34;
      goto LABEL_64;
    }
  }
  else if ((v253 & 1) == 0)
  {
    goto LABEL_33;
  }
  operator delete(v254);
  if ((v251 & 1) == 0)
  {
LABEL_34:
    if ((v249 & 1) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_64:
  operator delete(v252);
  if ((v249 & 1) != 0)
LABEL_35:
    operator delete(v250);
LABEL_36:
  *(_DWORD *)(v3 + 336) = 2;
  v17 = v5[60];
  *(_BYTE *)(v3 + 344) = v17;
  *(_BYTE *)(v3 + 346) = v5[280];
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    *(_QWORD *)(v3 + 4632) = 0;
  }
  else if (v17)
  {
    ++*(_QWORD *)(v3 + 4632);
  }
  v237 = 0;
  v238 = 0;
  v240 = 0;
  v239 = 0;
  (*(void (**)(_QWORD, _QWORD, uint64_t, const char **))(**(_QWORD **)(v3 + 8) + 152))(*(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 2752), 44, &v237);
  if (!v5[16])
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc", 1246, "num_temporal_layers_ > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v18, v19, v20, v21, 0);
    goto LABEL_394;
  }
  v217 = v13;
  v215 = v14;
  v22 = v5[18];
  if (!v5[18])
  {
LABEL_394:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc", 1247, "num_active_spatial_layers_ > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v18, v19, v20, v21, 0);
    goto LABEL_395;
  }
  v6 = HIDWORD(v237);
  if (v5[16] != 1)
  {
    *(_BYTE *)(v3 + 349) = BYTE4(v237);
    v23 = v6 & 0xFFFFFF00;
    v24 = 0x100000000;
    v25 = v237;
    if ((_DWORD)v22 != 1)
      goto LABEL_45;
    goto LABEL_47;
  }
  if (HIDWORD(v237))
  {
LABEL_395:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc", 1249, "layer_id.temporal_layer_id == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v18, v19, v20, v21, v6);
    goto LABEL_396;
  }
  v23 = 0;
  v24 = 0;
  *(_BYTE *)(v3 + 349) = -1;
  v25 = v237;
  if ((_DWORD)v22 != 1)
  {
LABEL_45:
    v26 = v25 & 0xFFFFFF00;
    v27 = 0x100000000;
    goto LABEL_49;
  }
LABEL_47:
  if ((_DWORD)v25)
  {
LABEL_396:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc", 1257, "layer_id.spatial_layer_id == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v18, v19, v20, v21, v25);
LABEL_397:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 54, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v199, v200, v201, v202, v2);
    goto LABEL_398;
  }
  v26 = 0;
  v27 = 0;
LABEL_49:
  v28 = *(_QWORD *)(v3 + 4632);
  v29 = *(_DWORD *)(v3 + 4648);
  v227 = v23;
  v225 = v27;
  v226 = v25;
  v224 = v26;
  if (v29 == 1)
  {
    *(_BYTE *)(v3 + 351) = v5[60] ^ 1;
LABEL_61:
    v33 = (_DWORD)v25 + 1 == v5[17];
    goto LABEL_67;
  }
  v31 = v29 == 2 && v28 == 0;
  if (v5[60])
    v32 = 0;
  else
    v32 = v31;
  *(_BYTE *)(v3 + 351) = v32;
  if (v31)
    goto LABEL_61;
  v33 = 1;
LABEL_67:
  *(_BYTE *)(v3 + 348) = v33;
  v34 = v5[19];
  *(_QWORD *)(v3 + 360) = v22;
  *(_QWORD *)(v3 + 368) = v34;
  *(_BYTE *)(v3 + 1960) = 0;
  v243 = 0;
  v244 = 0;
  v246 = 0;
  v245 = 0;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *))(**(_QWORD **)(v3 + 8) + 152))(*(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 2752), 44, &v243);
  v228 = a1;
  v230 = v6;
  if (!v5[22])
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      *(_BYTE *)(v3 + 1960) = 0;
      goto LABEL_154;
    }
    v40 = (char *)operator new(0x10uLL);
    *(_OWORD *)v40 = *(_OWORD *)(v3 + 4912);
    v44 = v40 + 16;
    *(_BYTE *)(v3 + 1960) = 0;
    goto LABEL_113;
  }
  memset(__src, 0, 240);
  (*(void (**)(_QWORD, _QWORD, uint64_t, _BYTE *))(**(_QWORD **)(v3 + 8) + 160))(*(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 2752), 62, __src);
  strcpy((char *)v267, "00000000");
  v35 = (int)v243;
  v36 = &__src[4 * (int)v243];
  if (!*((_DWORD *)v36 + 35))
  {
    v6 = v24;
    v39 = 0;
    v40 = 0;
    if (*((_DWORD *)v36 + 45))
      goto LABEL_71;
LABEL_82:
    v44 = v39;
    v3 = v234;
    v45 = &__src[4 * v35];
    if (!*((_DWORD *)v45 + 40))
      goto LABEL_110;
    goto LABEL_100;
  }
  v37 = *(unsigned int *)&__src[4 * (int)v243];
  if (v37 >= 8)
    goto LABEL_390;
  v6 = v24;
  v38 = (char *)operator new(0x10uLL);
  v39 = v38 + 16;
  v40 = v38;
  *(_OWORD *)v38 = *(_OWORD *)(v234 + 16 * v37 + 4912);
  *((_BYTE *)v267 + v37) = 49;
  if (!*((_DWORD *)v36 + 45))
    goto LABEL_82;
LABEL_71:
  v41 = *(int *)&__src[4 * v35 + 40];
  if (v41 >= 8)
    goto LABEL_390;
  v3 = v234;
  v42 = v234 + 4912 + 16 * v41;
  v43 = v39;
  if (v40 != v39)
  {
    v43 = v40;
    while (*(_QWORD *)v43 != *(_QWORD *)v42
         || *((_DWORD *)v43 + 2) != *(_DWORD *)(v42 + 8)
         || *((_DWORD *)v43 + 3) != *(_DWORD *)(v42 + 12))
    {
      v43 += 16;
      if (v43 == v39)
      {
        v43 = v39;
        break;
      }
    }
  }
  if (v43 == v39)
  {
    v232 = v28;
    v46 = v39 - v40;
    v47 = (v39 - v40) >> 4;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 60)
      goto LABEL_391;
    v222 = v6;
    if (v46 >> 3 > v48)
      v48 = v46 >> 3;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
      v48 = 0xFFFFFFFFFFFFFFFLL;
    if (!v48)
      goto LABEL_390;
    v220 = v5;
    if (v48 >> 60)
      goto LABEL_392;
    v49 = 16 * v48;
    v50 = (char *)operator new(16 * v48);
    v51 = v50;
    v52 = &v50[16 * v47];
    *(_OWORD *)v52 = *(_OWORD *)v42;
    if (v40 == v39)
    {
      v40 = v52;
      v55 = &v50[v49];
      v44 = v52 + 16;
      if (!v39)
      {
LABEL_99:
        *((_BYTE *)v267 + v41) = 49;
        v39 = v55;
        v28 = v232;
        v3 = v234;
        v5 = v220;
        v6 = v222;
        v45 = &__src[4 * v35];
        if (!*((_DWORD *)v45 + 40))
          goto LABEL_110;
        goto LABEL_100;
      }
    }
    else
    {
      v53 = (v46 - 16) & 0xFFFFFFFFFFFFFFF0;
      v54 = &v50[v46 - v53 - 16];
      memcpy(v54, &v39[-v53 - 16], v53 + 16);
      v39 = v40;
      v40 = v54;
      v55 = &v51[v49];
      v44 = v52 + 16;
      if (!v39)
        goto LABEL_99;
    }
    operator delete(v39);
    v35 = (int)v243;
    goto LABEL_99;
  }
  v44 = v39;
  v45 = &__src[4 * v35];
  if (!*((_DWORD *)v45 + 40))
    goto LABEL_110;
LABEL_100:
  v56 = *((int *)v45 + 5);
  if (v56 >= 8)
    goto LABEL_390;
  v57 = v3 + 4912 + 16 * v56;
  v58 = v44;
  if (v40 != v44)
  {
    v58 = v40;
    while (*(_QWORD *)v58 != *(_QWORD *)v57
         || *((_DWORD *)v58 + 2) != *(_DWORD *)(v57 + 8)
         || *((_DWORD *)v58 + 3) != *(_DWORD *)(v57 + 12))
    {
      v58 += 16;
      if (v58 == v44)
      {
        v58 = v44;
        break;
      }
    }
  }
  if (v58 != v44)
  {
LABEL_110:
    v24 = v6;
    LOBYTE(v6) = v230;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
      goto LABEL_112;
    goto LABEL_111;
  }
  if (v44 >= v39)
  {
    v133 = (v44 - v40) >> 4;
    v134 = v133 + 1;
    if ((unint64_t)(v133 + 1) >> 60)
      goto LABEL_391;
    if ((v39 - v40) >> 3 > v134)
      v134 = (v39 - v40) >> 3;
    if ((unint64_t)(v39 - v40) >= 0x7FFFFFFFFFFFFFF0)
      v134 = 0xFFFFFFFFFFFFFFFLL;
    if (!v134)
      goto LABEL_390;
    if (!(v134 >> 60))
    {
      v24 = v6;
      v135 = (char *)operator new(16 * v134);
      v136 = &v135[16 * v133];
      *(_OWORD *)v136 = *(_OWORD *)v57;
      v101 = v136 + 16;
      LOBYTE(v6) = v230;
      if (v40 == v44)
      {
        v40 = &v135[16 * v133];
        v3 = v234;
      }
      else
      {
        v3 = v234;
        do
        {
          *((_OWORD *)v136 - 1) = *((_OWORD *)v44 - 1);
          v136 -= 16;
          v44 -= 16;
        }
        while (v44 != v40);
        v44 = v40;
        v40 = v136;
      }
      if (v44)
        operator delete(v44);
      goto LABEL_385;
    }
LABEL_392:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (!v44)
    goto LABEL_390;
  *(_OWORD *)v44 = *(_OWORD *)v57;
  v101 = v44 + 16;
  v24 = v6;
  LOBYTE(v6) = v230;
LABEL_385:
  *((_BYTE *)v267 + v56) = 49;
  v44 = v101;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
LABEL_111:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v59, v60, v61, v62, v63, v64, v65, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
LABEL_112:
  *(_BYTE *)(v3 + 1960) = 0;
  if (v40 == v44)
    goto LABEL_152;
LABEL_113:
  v221 = v5;
  v223 = v24;
  v66 = v40;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v3 + 344;
  v216 = v66;
  v231 = v3 + 344;
  do
  {
    v72 = *(_QWORD *)v66;
    if (*(_QWORD *)v66 < v28)
    {
      v73 = v69;
      if (v70 != v69)
      {
        v73 = v70;
        while (*(_QWORD *)v73 != v72)
        {
          v73 += 8;
          if (v73 == v69)
          {
            v73 = v69;
            break;
          }
        }
      }
      if (v73 == v69)
      {
        if (v69 < v68)
        {
          if (!v69)
            goto LABEL_390;
          *(_QWORD *)v69 = v72;
          v74 = v69 + 8;
          goto LABEL_139;
        }
        v75 = v28;
        v76 = v69 - v70;
        v77 = (v69 - v70) >> 3;
        v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 61)
          goto LABEL_391;
        if ((v68 - v70) >> 2 > v78)
          v78 = (v68 - v70) >> 2;
        if ((unint64_t)(v68 - v70) >= 0x7FFFFFFFFFFFFFF8)
          v78 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v78)
          goto LABEL_390;
        if (v78 >> 61)
          goto LABEL_392;
        v233 = 8 * v78;
        v79 = operator new(8 * v78);
        v80 = &v79[8 * v77];
        *(_QWORD *)v80 = *(_QWORD *)v66;
        v74 = v80 + 8;
        if (v70 == v69)
        {
          v3 = v234;
          v28 = v75;
          v68 = &v79[v233];
          if (!v70)
            goto LABEL_138;
          goto LABEL_137;
        }
        if ((unint64_t)(v76 - 8) < 0x168
          || (v86 = (v69 - 8 - v70) & 0xFFFFFFFFFFFFFFF8, &v79[v76 - 8 - v86] > &v79[v76 - 8])
          || &v69[-v86 - 8] > v69 - 8
          || (unint64_t)(v70 - v79) < 0x20)
        {
          v81 = v69;
          v82 = v233;
          v3 = v234;
          v28 = v75;
        }
        else
        {
          v87 = ((unint64_t)(v76 - 8) >> 3) + 1;
          v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
          v81 = &v69[-v88];
          v80 -= v88;
          v89 = &v79[8 * v77 - 16];
          v90 = (__int128 *)(v69 - 16);
          v91 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          v3 = v234;
          do
          {
            v92 = *v90;
            *(v89 - 1) = *(v90 - 1);
            *v89 = v92;
            v89 -= 2;
            v90 -= 2;
            v91 -= 4;
          }
          while (v91);
          v28 = v75;
          v82 = v233;
          if (v87 == (v87 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_136:
            v68 = &v79[v82];
            if (!v70)
            {
LABEL_138:
              v70 = v80;
              v71 = v231;
LABEL_139:
              *(_BYTE *)(v71 + v67++ + 1617) = v28 - *v66;
              *(_BYTE *)(v3 + 1960) = v67;
              v69 = v74;
              goto LABEL_115;
            }
LABEL_137:
            v84 = v70;
            v85 = v68;
            operator delete(v84);
            v68 = v85;
            v67 = *(unsigned __int8 *)(v3 + 1960);
            goto LABEL_138;
          }
        }
        do
        {
          v83 = *((_QWORD *)v81 - 1);
          v81 -= 8;
          *((_QWORD *)v80 - 1) = v83;
          v80 -= 8;
        }
        while (v81 != v70);
        goto LABEL_136;
      }
    }
LABEL_115:
    v66 += 16;
  }
  while (v66 != v44);
  if (v70)
    operator delete(v70);
  v44 = v216;
  v5 = v221;
  v24 = v223;
  LOBYTE(v6) = v230;
LABEL_152:
  if (v44)
    operator delete(v44);
LABEL_154:
  v93 = *(unsigned __int8 *)(v3 + 346);
  if (!*(_BYTE *)(v3 + 346))
  {
    v96 = *(_QWORD *)(v3 + 4632) % *(_QWORD *)(v3 + 3080);
    *(_BYTE *)(v3 + 352) = v96;
    v94 = v229;
    goto LABEL_161;
  }
  *(_BYTE *)(v3 + 352) = -1;
  v94 = v229;
  if (!*(_QWORD *)(v3 + 4864))
  {
    LODWORD(v96) = v5[16];
    if ((_DWORD)v96 == 1)
    {
LABEL_162:
      *(_BYTE *)(v3 + 350) = v96;
      if (!v28)
        goto LABEL_163;
LABEL_157:
      *(_BYTE *)(v3 + 345) = *(_BYTE *)(v3 + 1960) != 0;
      v95 = v228;
LABEL_164:
      if (v5[232])
      {
        if (!HIDWORD(v237))
        {
          v97 = v5[19];
          if ((_DWORD)v237 == v97)
          {
            v98 = 0;
            *(_BYTE *)(v3 + 347) = 1;
            *(_BYTE *)(v3 + 376) = 1;
            v99 = v97;
            if (v97)
              goto LABEL_175;
            goto LABEL_182;
          }
        }
      }
      v98 = 0;
      *(_BYTE *)(v3 + 347) = 0;
      v5[60] = 0;
      v100 = *(_QWORD *)(v3 + 4864);
      if (v100)
        goto LABEL_196;
      goto LABEL_279;
    }
    v96 = *(_QWORD *)(v3 + 4632) % *(_QWORD *)(v3 + 3080);
    *(_BYTE *)(v3 + 352) = v96;
LABEL_161:
    LOBYTE(v96) = *(_BYTE *)(v3 + v96 + 3343);
    goto LABEL_162;
  }
  if (v28)
    goto LABEL_157;
LABEL_163:
  *(_BYTE *)(v3 + 345) = 0;
  v95 = v228;
  if (*(_BYTE *)(v3 + 351))
    goto LABEL_164;
  v102 = v5[19];
  v98 = 1;
  *(_BYTE *)(v3 + 347) = 1;
  *(_BYTE *)(v3 + 376) = 1;
  v99 = v102;
  if (v102)
  {
LABEL_175:
    if (v99 < 8)
    {
      v103 = 0;
      goto LABEL_180;
    }
    v103 = v99 & 0xF8;
    v104 = v103;
    do
    {
      *v94 = 0uLL;
      v94[1] = 0uLL;
      ++v94;
      v104 -= 8;
    }
    while (v104);
    if (v103 != v99)
    {
LABEL_180:
      v105 = v99 - v103;
      v106 = (_WORD *)(v3 + 2 * v103 + 394);
      do
      {
        *(v106 - 8) = 0;
        *v106++ = 0;
        --v105;
      }
      while (v105);
    }
  }
LABEL_182:
  v107 = v5[18];
  if (v99 < v107)
  {
    v108 = v107 - v99;
    v109 = (int *)(v3 + 4 * v99 + 2920);
    v110 = (_WORD *)(v3 + 2 * v99 + 394);
    do
    {
      v111 = *(v109 - 12);
      v112 = *v109++;
      *(v110 - 8) = v111 * *(unsigned __int16 *)(v3 + 2348) / v112;
      *v110++ = v111 * *(unsigned __int16 *)(v3 + 2350) / v112;
      --v108;
    }
    while (v108);
  }
  if (!v93)
  {
    v113 = *(_QWORD *)(v3 + 3080);
    *(_QWORD *)(v3 + 416) = v113;
    if (v113)
    {
      v114 = 0;
      v115 = v3;
      do
      {
        v116 = (_BYTE *)(v3 + v114);
        v116[424] = *(_BYTE *)(v3 + v114 + 3088);
        v116[679] = *(_BYTE *)(v3 + v114 + 3343);
        v117 = *(unsigned __int8 *)(v3 + v114 + 3598);
        v116[934] = v117;
        if (v117)
        {
          v118 = 0;
          v119 = v116 + 934;
          do
          {
            *(_BYTE *)(v115 + v118 + 1189) = *(_BYTE *)(v115 + v118 + 3853);
            ++v118;
          }
          while (v118 < *v119);
        }
        ++v114;
        v115 += 3;
      }
      while (v114 < *(_QWORD *)(v3 + 416));
    }
    v5[232] = 0;
    v5[60] = 0;
    v100 = *(_QWORD *)(v3 + 4864);
    if (v100)
      goto LABEL_196;
    goto LABEL_279;
  }
  *(_QWORD *)(v3 + 416) = 0;
  v5[232] = 0;
  v5[60] = 0;
  v100 = *(_QWORD *)(v3 + 4864);
  if (!v100)
    goto LABEL_279;
LABEL_196:
  v120 = *(_QWORD *)(v3 + 5040);
  v121 = *(_QWORD *)(v3 + 5048);
  if (v120 != v121)
  {
    while (*(_DWORD *)(v120 + 8) != (_DWORD)v237)
    {
      v120 += 88;
      if (v120 == v121)
        goto LABEL_210;
    }
  }
  if (v120 == v121)
  {
LABEL_210:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v123, v124, v125, v126, v127, v128, v129, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
    goto LABEL_388;
  }
  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v100 + 48))(__src);
  if (*(_BYTE *)(v3 + 2184))
  {
    webrtc::GenericFrameInfo::operator=(v217, (uint64_t)__src);
    v122 = *(void **)&__src[176];
    if (*(_QWORD *)&__src[176])
      goto LABEL_203;
  }
  else
  {
    webrtc::GenericFrameInfo::GenericFrameInfo((webrtc::GenericFrameInfo *)v217, (const webrtc::GenericFrameInfo *)__src);
    *(_BYTE *)(v3 + 2184) = 1;
    v122 = *(void **)&__src[176];
    if (*(_QWORD *)&__src[176])
LABEL_203:
      operator delete(v122);
  }
  if ((__src[104] & 1) != 0)
  {
    operator delete(*(void **)&__src[112]);
    if ((__src[80] & 1) != 0)
      goto LABEL_213;
LABEL_206:
    if ((__src[56] & 1) == 0)
      goto LABEL_207;
LABEL_214:
    operator delete(*(void **)&__src[64]);
    if ((__src[8] & 1) != 0)
      goto LABEL_215;
LABEL_208:
    if (!v98)
      goto LABEL_256;
LABEL_216:
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v3 + 4864) + 24))(__src);
    std::optional<webrtc::FrameDependencyStructure>::operator=[abi:sn180100]<webrtc::FrameDependencyStructure,void>(v215, (uint64_t)__src);
    v130 = *(_QWORD *)&__src[104];
    if (!*(_QWORD *)&__src[104])
    {
LABEL_244:
      if ((__src[64] & 1) != 0)
      {
        operator delete(*(void **)&__src[72]);
        if ((__src[16] & 1) == 0)
        {
LABEL_246:
          if (!*(_BYTE *)(v3 + 2320))
            goto LABEL_390;
LABEL_250:
          absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::Resize<absl::inlined_vector_internal::DefaultValueAdapter<std::allocator<webrtc::RenderResolution>>>((unint64_t *)(v3 + 2256), v5[17]);
          if (!v5[17])
            goto LABEL_256;
          v137 = 0;
          while (1)
          {
            v138 = *(_QWORD *)(v3 + 2256);
            if (v137 >= v138 >> 1)
              break;
            v139 = v3 + 2264;
            if ((v138 & 1) != 0)
              v139 = *(_QWORD *)(v3 + 2264);
            *(_QWORD *)(v139 + 8 * v137) = (*(_DWORD *)(v3 + 4 * v137 + 2872)
                                                        * *(unsigned __int16 *)(v3 + 2348)
                                                        / *(_DWORD *)(v3 + 4 * v137 + 2920)) | ((unint64_t)(*(_DWORD *)(v3 + 4 * v137 + 2872) * *(unsigned __int16 *)(v3 + 2350) / *(_DWORD *)(v3 + 4 * v137 + 2920)) << 32);
            if (++v137 >= v5[17])
              goto LABEL_256;
          }
LABEL_390:
          __break(1u);
LABEL_391:
          abort();
        }
      }
      else if ((__src[16] & 1) == 0)
      {
        goto LABEL_246;
      }
      operator delete(*(void **)&__src[24]);
      if (!*(_BYTE *)(v3 + 2320))
        goto LABEL_390;
      goto LABEL_250;
    }
    v131 = *(_QWORD *)&__src[112];
    v132 = *(void **)&__src[104];
    if (*(_QWORD *)&__src[112] == *(_QWORD *)&__src[104])
    {
LABEL_243:
      *(_QWORD *)&__src[112] = v130;
      operator delete(v132);
      v3 = v234;
      goto LABEL_244;
    }
    while (1)
    {
      if ((*(_BYTE *)(v131 - 24) & 1) != 0)
      {
        operator delete(*(void **)(v131 - 16));
        if ((*(_BYTE *)(v131 - 48) & 1) == 0)
        {
LABEL_222:
          if ((*(_BYTE *)(v131 - 96) & 1) != 0)
            goto LABEL_226;
          goto LABEL_219;
        }
      }
      else if ((*(_BYTE *)(v131 - 48) & 1) == 0)
      {
        goto LABEL_222;
      }
      operator delete(*(void **)(v131 - 40));
      if ((*(_BYTE *)(v131 - 96) & 1) != 0)
LABEL_226:
        operator delete(*(void **)(v131 - 88));
LABEL_219:
      v131 -= 104;
      if (v131 == v130)
      {
        v132 = *(void **)&__src[104];
        goto LABEL_243;
      }
    }
  }
  if ((__src[80] & 1) == 0)
    goto LABEL_206;
LABEL_213:
  operator delete(*(void **)&__src[88]);
  if ((__src[56] & 1) != 0)
    goto LABEL_214;
LABEL_207:
  if ((__src[8] & 1) == 0)
    goto LABEL_208;
LABEL_215:
  operator delete(*(void **)&__src[16]);
  if (v98)
    goto LABEL_216;
LABEL_256:
  if (v5[280])
  {
    *(_BYTE *)(v3 + 350) = 1;
    v140 = v5[16];
    if (HIDWORD(v237) + 1 < v140)
    {
      if (*(_BYTE *)(v3 + 2184))
      {
        v141 = (int)v237 * (unint64_t)v5[16];
        v142 = *(_QWORD *)(v3 + 1984);
        v143 = v142 >> 1;
        if ((v142 & 1) != 0)
        {
          v150 = ~HIDWORD(v237) + v140;
          v151 = SHIDWORD(v237) + v141 + 1;
          v152 = 1;
          while (v143 > v151)
          {
            if (v152)
              v153 = *(_DWORD *)(*(_QWORD *)(v3 + 1992) + 4 * v151) == 2;
            else
              v153 = 0;
            v152 = v153;
            *(_BYTE *)(v3 + 350) = v152;
            ++v151;
            if (!--v150)
              goto LABEL_279;
          }
        }
        else
        {
          v144 = ~HIDWORD(v237) + v140;
          v145 = SHIDWORD(v237) + v141;
          v146 = 1;
          while (1)
          {
            v147 = v145 + 1;
            if (v143 <= v145 + 1)
              break;
            v148 = *(_DWORD *)(v3 + 1996 + 4 * v145);
            if (v146)
              v149 = v148 == 2;
            else
              v149 = 0;
            v146 = v149;
            *(_BYTE *)(v3 + 350) = v146;
            v145 = v147;
            if (!--v144)
              goto LABEL_279;
          }
        }
      }
      goto LABEL_390;
    }
  }
LABEL_279:
  if (v5[249])
  {
    v154 = *(_WORD *)(v3 + 4872);
    v155 = v227;
    v156 = v226;
    goto LABEL_304;
  }
  v157 = v5[18];
  v158 = v5[16];
  v156 = v226;
  if (v157 == 1)
  {
    v162 = v158 - 1;
    if (v162 < 3)
    {
      v161 = (&off_24C0B6570)[(char)v162];
      goto LABEL_301;
    }
LABEL_302:
    v163 = 0;
    v164 = 0;
    v155 = v227;
  }
  else
  {
    v159 = *(_DWORD *)(v3 + 4648);
    v160 = 0;
    if (v5[18])
    {
      {
        v160 += 48;
        if (v160 == 1632)
          goto LABEL_302;
      }
    }
    else
    {
      while (1)
      {
        {
            break;
        }
        v160 += 48;
        if (v160 == 1632)
          goto LABEL_302;
      }
    }
LABEL_301:
    v155 = v227;
    v163 = *v161;
    v164 = 1;
  }
  v154 = v163 | (v164 << 8);
LABEL_304:
  *(_WORD *)(v3 + 2328) = v154;
  *(_DWORD *)(v3 + 200) = v225 | v224 | v156;
  *(_BYTE *)(v3 + 204) = BYTE4(v225);
  *(_DWORD *)(v3 + 208) = v24 | v155 | v6;
  *(_BYTE *)(v3 + 212) = BYTE4(v24);
  if ((*(_BYTE *)(v95 + 40) & 1) != 0)
  {
    v165 = *(unsigned __int8 *)(v3 + 351);
    *(_DWORD *)(v3 + 40) = 4;
    if (!v165)
    {
      *(_DWORD *)(v3 + 40) = 3;
      *v5 = 0;
    }
  }
  else
  {
    *(_DWORD *)(v3 + 40) = 4;
  }
  v166 = *(_QWORD *)(v3 + 4632);
  v243 = 0;
  v244 = 0;
  v246 = 0;
  v245 = 0;
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *))(**(_QWORD **)(v3 + 8) + 152))(*(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 2752), 44, &v243);
  v167 = v243;
  v168 = HIDWORD(v243);
  if (v5[22])
  {
    memset(__src, 0, 240);
    (*(void (**)(_QWORD, _QWORD, uint64_t, _BYTE *))(**(_QWORD **)(v3 + 8) + 160))(*(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 2752), 62, __src);
    v3 = v234;
    v169 = *(_DWORD *)&__src[4 * (int)v243 + 60];
    if ((v169 & 1) != 0)
    {
      *(_QWORD *)(v234 + 4912) = v166;
      *(_DWORD *)(v234 + 4920) = v167;
      *(_DWORD *)(v234 + 4924) = v168;
      if ((v169 & 2) != 0)
        goto LABEL_321;
LABEL_311:
      if ((v169 & 4) == 0)
        goto LABEL_312;
LABEL_322:
      *(_QWORD *)(v234 + 4944) = v166;
      *(_DWORD *)(v234 + 4952) = v167;
      *(_DWORD *)(v234 + 4956) = v168;
      if ((v169 & 8) != 0)
        goto LABEL_323;
LABEL_313:
      if ((v169 & 0x10) == 0)
        goto LABEL_314;
LABEL_324:
      *(_QWORD *)(v234 + 4976) = v166;
      *(_DWORD *)(v234 + 4984) = v167;
      *(_DWORD *)(v234 + 4988) = v168;
      if ((v169 & 0x20) != 0)
        goto LABEL_325;
LABEL_315:
      if ((v169 & 0x40) == 0)
        goto LABEL_316;
LABEL_326:
      *(_QWORD *)(v234 + 5008) = v166;
      *(_DWORD *)(v234 + 5016) = v167;
      *(_DWORD *)(v234 + 5020) = v168;
      if ((v169 & 0x80) != 0)
        goto LABEL_327;
LABEL_317:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      {
LABEL_328:
        v237 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_c"
               "oding/codecs/vp9/libvpx_vp9_encoder.cc";
        v238 = 12328;
        v239 = &v241;
        v242[0] = "Frame ";
        v242[1] = &v237;
        v267[0] = v166;
        v267[1] = v242;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v243, HIDWORD(v243), v170, v171, v172, v173, v174, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
      }
    }
    else
    {
      if ((v169 & 2) == 0)
        goto LABEL_311;
LABEL_321:
      *(_QWORD *)(v234 + 4928) = v166;
      *(_DWORD *)(v234 + 4936) = v167;
      *(_DWORD *)(v234 + 4940) = v168;
      if ((v169 & 4) != 0)
        goto LABEL_322;
LABEL_312:
      if ((v169 & 8) == 0)
        goto LABEL_313;
LABEL_323:
      *(_QWORD *)(v234 + 4960) = v166;
      *(_DWORD *)(v234 + 4968) = v167;
      *(_DWORD *)(v234 + 4972) = v168;
      if ((v169 & 0x10) != 0)
        goto LABEL_324;
LABEL_314:
      if ((v169 & 0x20) == 0)
        goto LABEL_315;
LABEL_325:
      *(_QWORD *)(v234 + 4992) = v166;
      *(_DWORD *)(v234 + 5000) = v167;
      *(_DWORD *)(v234 + 5004) = v168;
      if ((v169 & 0x40) != 0)
        goto LABEL_326;
LABEL_316:
      if ((v169 & 0x80) == 0)
        goto LABEL_317;
LABEL_327:
      *(_QWORD *)(v234 + 5024) = v166;
      *(_DWORD *)(v234 + 5032) = v167;
      *(_DWORD *)(v234 + 5036) = v168;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
        goto LABEL_328;
    }
  }
  else
  {
    *(_QWORD *)(v3 + 4912) = v166;
    *(_DWORD *)(v3 + 4920) = v167;
    *(_DWORD *)(v3 + 4924) = v168;
  }
  v175 = *(_QWORD *)(v3 + 3072);
  *(_DWORD *)(v3 + 168) = *(_DWORD *)(v175 + 16);
  v176 = *(_QWORD *)(v175 + 40);
  *(_BYTE *)(v3 + 192) = *(_BYTE *)(v175 + 48);
  *(_QWORD *)(v3 + 184) = v176;
  v177 = (_OWORD *)(v175 + 76);
  v178 = (_OWORD *)(v3 + 240);
  if (*(unsigned __int8 *)(v3 + 308) == *(unsigned __int8 *)(v175 + 144))
  {
    if (*(_BYTE *)(v3 + 308))
    {
      *v178 = *v177;
      v179 = *(_OWORD *)(v175 + 92);
      v180 = *(_OWORD *)(v175 + 108);
      v181 = *(_OWORD *)(v175 + 124);
      *(_BYTE *)(v3 + 304) = *(_BYTE *)(v175 + 140);
      *(_OWORD *)(v3 + 272) = v180;
      *(_OWORD *)(v3 + 288) = v181;
      *(_OWORD *)(v3 + 256) = v179;
    }
  }
  else if (*(_BYTE *)(v3 + 308))
  {
    *(_BYTE *)(v3 + 308) = 0;
  }
  else
  {
    *v178 = *v177;
    v182 = *(_OWORD *)(v175 + 92);
    v183 = *(_OWORD *)(v175 + 108);
    v184 = *(_OWORD *)(v175 + 124);
    *(_BYTE *)(v3 + 304) = *(_BYTE *)(v175 + 140);
    *(_OWORD *)(v3 + 272) = v183;
    *(_OWORD *)(v3 + 288) = v184;
    *(_OWORD *)(v3 + 256) = v182;
    *(_BYTE *)(v3 + 308) = 1;
  }
  v185 = v95 + 4 * SLODWORD(v235[0]);
  *(_DWORD *)(v3 + 20) = *(_DWORD *)(v185 + 68);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v185 + 48);
  *(_DWORD *)__src = -1;
  (*(void (**)(_QWORD, _QWORD, uint64_t, _BYTE *))(**(_QWORD **)(v3 + 8) + 96))(*(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 2752), 19, __src);
  *(_DWORD *)(v3 + 52) = *(_DWORD *)__src;
  v186 = *(_QWORD *)(v3 + 200);
  if ((v186 & 0xFF00000000) != 0)
    v187 = v186 + 1;
  else
    v187 = 1;
  v188 = v187 == v5[18];
  if (!*(_QWORD *)(v3 + 160))
    return;
  v189 = v5[17];
  if (v189 >= 2)
  {
    v190 = *(_QWORD *)(v3 + 2760);
    v191 = (const float *)(v190 + 48);
    if (v189 < 0xC
      || v3 + 4656 < (unint64_t)(v190 + 52) && (unint64_t)v191 < v3 + 4 * v189 + 4656)
    {
      v192 = 0;
      goto LABEL_344;
    }
    v192 = v189 & 0xF8;
    v211 = vld1q_dup_f32(v191);
    v212 = (float32x4_t *)(v3 + 4672);
    v213 = v192;
    do
    {
      v212[-1] = v211;
      *v212 = v211;
      v212 += 2;
      v213 -= 8;
    }
    while (v213);
    if (v192 != v189)
    {
LABEL_344:
      v193 = v189 - v192;
      v194 = (_DWORD *)(v3 + 4 * v192 + 4656);
      do
      {
        *v194++ = *(_DWORD *)v191;
        --v193;
      }
      while (v193);
    }
  }
  *(_BYTE *)(v3 + 1968) = v188;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 2336) + 16))(*(_QWORD *)(v3 + 2336), v219, v218);
  if (*(_DWORD *)(v3 + 2668) != 1)
    goto LABEL_388;
  if ((*(_QWORD *)(v3 + 200) & 0xFF00000000) != 0)
    v2 = *(_QWORD *)(v3 + 200);
  else
    v2 = 0;
  v195 = *(_QWORD *)(v3 + 4880);
  if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(v3 + 4888) - v195) >> 3) <= v2)
    goto LABEL_390;
  v196 = 1000 * *(_DWORD *)(v3 + 168) / 0x15F90u;
  v197 = v195 + 120 * v2;
  if (*(_BYTE *)(v197 + 12))
    v198 = *(_DWORD *)(v197 + 8) > v196;
  else
    v198 = 0;
  if (v198)
  {
    webrtc::RateStatistics::Reset((webrtc::RateStatistics *)(v197 + 24));
    if (*(_BYTE *)(v197 + 12))
      *(_BYTE *)(v197 + 12) = 0;
  }
  webrtc::RateStatistics::Update((webrtc::RateStatistics *)(v197 + 24), 1, v196);
  *(_DWORD *)(v197 + 8) = v196;
  *(_BYTE *)(v197 + 12) = 1;
  v3 = v234;
  if (*(unsigned __int8 *)(v234 + 349) == 255)
    v203 = 0;
  else
    v203 = *(unsigned __int8 *)(v234 + 349);
  if (v2 >= 5)
    goto LABEL_397;
  if (v203 >= 4)
  {
LABEL_398:
    v214 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 55, "temporal_index < kMaxTemporalStreams", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v199, v200, v201, v202, v203);
    webrtc::LibvpxVp9Encoder::LibvpxVp9Encoder(v214);
    return;
  }
  v204 = v234 + 32 * v2 + 8 * v203 + 4692;
  if (!*(_BYTE *)(v204 + 4))
  {
    v205 = 0.0;
    if (*(_DWORD *)(v234 + 2668) == 1)
      goto LABEL_365;
    goto LABEL_371;
  }
  v205 = (float)*(unsigned int *)v204;
  if (*(_DWORD *)(v234 + 2668) != 1)
  {
LABEL_371:
    v209 = (float)*(unsigned int *)(v234 + 2364);
    v206 = *(_QWORD *)(v234 + 4880);
    v207 = 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(v234 + 4888) - v206) >> 3);
    goto LABEL_372;
  }
LABEL_365:
  v206 = *(_QWORD *)(v234 + 4880);
  v207 = 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(v234 + 4888) - v206) >> 3);
  if (v207 <= v2)
    goto LABEL_390;
  v208 = v206 + 120 * v2;
  if (!*(_BYTE *)(v208 + 4))
    goto LABEL_390;
  v209 = (float)*(unsigned int *)(v234 + 2364);
  if (*(float *)v208 < v209)
    v209 = *(float *)v208;
LABEL_372:
  if (v207 <= v2)
    goto LABEL_390;
  v210 = v206 + 120 * v2;
  if (!*(_BYTE *)(v210 + 4))
    goto LABEL_390;
  if (*(float *)v210 > 5.0)
  {
    if (*(int *)(v234 + 52) <= 32
      && *(_QWORD *)(v234 + 160) <= (unint64_t)((float)((float)((float)(v205 / (float)(v209 * 8.0)) * 70.0)
                                                             / 100.0)
                                                     + 0.5))
    {
      ++*(_DWORD *)(v234 + 5256);
    }
    else
    {
      *(_DWORD *)(v234 + 5256) = 0;
    }
  }
LABEL_388:
  *(_QWORD *)(v3 + 160) = 0;
}

uint64_t webrtc::LibvpxVp9Encoder::LibvpxVp9Encoder(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  int *v9;
  unint64_t v10;
  _BYTE *v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  int64_t v43;
  uint64_t *v44;
  size_t v45;
  uint64_t *v46;
  char *v47;
  char *i;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  int v63;
  uint64_t v64;
  char *v65;
  int v66;
  char *v67;
  char *v68;
  __int128 v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  int *v89;
  int *v90;
  int *v91;
  unint64_t v92;
  int *v93;
  unint64_t v94;
  int *v95;
  int *v96;
  int v97;
  int *v98;
  unint64_t v99;
  unint64_t v100;
  int *v101;
  int *v102;
  int v103;
  int *v104;
  _QWORD *v105;
  _QWORD *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  _BYTE *v125;
  void *v126;
  uint64_t v127;
  __int128 v128;
  char v130;
  uint64_t *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  _BYTE __p[24];
  _BYTE *v139;
  void *v140[2];
  char v141;
  __int16 v142;
  void *v143;
  _QWORD *v144;
  void *v145;
  _BYTE *v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  unsigned __int8 v150;
  _BYTE *v151;
  __int128 *v152;
  __int128 *v153;
  __int128 v154;
  void *v155;
  uint64_t v156;
  void *v157[2];
  char v158;
  char v159;
  unsigned int v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  void *v164[3];
  __int16 v165;
  unsigned int v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0B6370;
  v7 = *a4;
  *a4 = 0;
  v8 = a1 + 2665;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 4;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = -1;
  *(_BYTE *)(a1 + 56) = -1;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 204) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_BYTE *)(a1 + 212) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 165) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 308) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 314) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_WORD *)(a1 + 328) = 1;
  *(_DWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 1968) = 1;
  *(_BYTE *)(a1 + 1976) = 0;
  *(_BYTE *)(a1 + 2184) = 0;
  *(_BYTE *)(a1 + 2192) = 0;
  *(_BYTE *)(a1 + 2320) = 0;
  *(_WORD *)(a1 + 2328) = 0;
  bzero((void *)(a1 + 344), 0x658uLL);
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_BYTE *)(a1 + 2368) = 1;
  *(_DWORD *)(a1 + 2372) = 0;
  *(_BYTE *)(a1 + 2376) = 0;
  *(_OWORD *)(a1 + 2380) = 0u;
  *(_OWORD *)(a1 + 2412) = 0u;
  *(_OWORD *)(a1 + 2428) = 0u;
  *(_OWORD *)(a1 + 2444) = 0u;
  *(_OWORD *)(a1 + 2460) = 0u;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_BYTE *)(a1 + 2392) = 1;
  *(_OWORD *)(a1 + 2396) = 0u;
  *(_BYTE *)(a1 + 2412) = 0;
  *(_BYTE *)(a1 + 2428) = 1;
  *(_QWORD *)(a1 + 2432) = 0;
  *(_QWORD *)(a1 + 2440) = 0;
  *(_BYTE *)(a1 + 2448) = 0;
  *(_BYTE *)(a1 + 2464) = 1;
  *(_OWORD *)(a1 + 2468) = 0u;
  *(_BYTE *)(a1 + 2484) = 0;
  *(_DWORD *)(a1 + 2664) = 0;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2632) = 0u;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  *(_BYTE *)(a1 + 2500) = 1;
  *(_BYTE *)(a1 + 2520) = 0;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_BYTE *)(a1 + 2536) = 1;
  *(_BYTE *)(a1 + 2556) = 0;
  *(_OWORD *)(a1 + 2540) = 0u;
  *(_BYTE *)(a1 + 2572) = 1;
  *(_BYTE *)(a1 + 2592) = 0;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_BYTE *)(a1 + 2608) = 1;
  *(_BYTE *)(a1 + 2628) = 0;
  *(_OWORD *)(a1 + 2612) = 0u;
  *(_BYTE *)(a1 + 2644) = 1;
  *(_BYTE *)(a1 + 2664) = 0;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_DWORD *)(a1 + 2668) = 0;
  *(_BYTE *)(a1 + 2672) = 0;
  *(_QWORD *)(a1 + 2680) = 0;
  *(_WORD *)(a1 + 2688) = 0;
  *(_BYTE *)(a1 + 2696) = 0;
  *(_DWORD *)(a1 + 2720) = 0;
  *(_BYTE *)(a1 + 2724) = 0;
  *(_WORD *)(a1 + 2716) = 0;
  *(_OWORD *)(a1 + 2700) = 0u;
  *(_DWORD *)(a1 + 2728) = a3;
  *(_BYTE *)(a1 + 2732) = 0;
  *(_QWORD *)(a1 + 2736) = 0;
  *(_DWORD *)(a1 + 2744) = 0;
  *(_QWORD *)(a1 + 3072) = 0;
  *(_QWORD *)(a1 + 2768) = 0;
  *(_OWORD *)(a1 + 2752) = 0u;
  *(_BYTE *)(v8 + 1959) = 1;
  *(_DWORD *)(a1 + 4640) = 0;
  *(_QWORD *)(a1 + 4632) = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a2 + 8) + 16))(__p, *(_QWORD *)(a2 + 8), "WebRTC-Vp9IssueKeyFrameOnLayerDeactivation", 42);
  if ((__p[23] & 0x80000000) != 0)
  {
    v10 = *(_QWORD *)&__p[8];
    if ((*(_QWORD *)&__p[8] & 0x8000000000000000) != 0)
      goto LABEL_211;
    v9 = *(int **)__p;
    if (*(_QWORD *)&__p[8])
    {
      if (!*(_QWORD *)__p)
        goto LABEL_211;
    }
  }
  else
  {
    v9 = (int *)__p;
    v10 = __p[23];
  }
  v11 = (_BYTE *)(a1 + 5072);
  if (v10 < 7)
  {
    v12 = 0;
    if ((__p[23] & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v13 = *v9;
  v14 = *(int *)((char *)v9 + 3);
  v12 = v13 == 1650552389 && v14 == 1684368482;
  if ((__p[23] & 0x80) != 0)
LABEL_16:
    operator delete(*(void **)__p);
LABEL_17:
  *(_BYTE *)(v8 + 1980) = v12;
  *(_BYTE *)(v8 + 1981) = 0;
  *(_DWORD *)(a1 + 4648) = 1;
  *(_BYTE *)(v8 + 1987) = 0;
  webrtc::RateControlSettings::RateControlSettings((uint64_t)__p, *(_QWORD *)(a2 + 8));
  *(_BYTE *)(v8 + 1988) = BYTE5(v144);
  *(_BYTE *)(v8 + 2019) = 1;
  *(_DWORD *)(a1 + 4688) = 0;
  *(_BYTE *)(a1 + 4692) = 0;
  *(_BYTE *)(a1 + 4696) = 0;
  *(_BYTE *)(a1 + 4700) = 0;
  *(_BYTE *)(a1 + 4704) = 0;
  *(_BYTE *)(a1 + 4708) = 0;
  *(_BYTE *)(a1 + 4712) = 0;
  *(_BYTE *)(a1 + 4716) = 0;
  *(_BYTE *)(a1 + 4720) = 0;
  *(_BYTE *)(a1 + 4724) = 0;
  *(_BYTE *)(a1 + 4728) = 0;
  *(_BYTE *)(a1 + 4732) = 0;
  *(_BYTE *)(a1 + 4736) = 0;
  *(_BYTE *)(a1 + 4740) = 0;
  *(_BYTE *)(a1 + 4744) = 0;
  *(_BYTE *)(a1 + 4748) = 0;
  *(_BYTE *)(a1 + 4752) = 0;
  *(_BYTE *)(a1 + 4756) = 0;
  *(_BYTE *)(a1 + 4760) = 0;
  *(_BYTE *)(a1 + 4764) = 0;
  *(_BYTE *)(a1 + 4768) = 0;
  *(_BYTE *)(a1 + 4772) = 0;
  *(_BYTE *)(a1 + 4776) = 0;
  *(_BYTE *)(a1 + 4780) = 0;
  *(_BYTE *)(a1 + 4784) = 0;
  *(_BYTE *)(a1 + 4788) = 0;
  *(_BYTE *)(a1 + 4792) = 0;
  *(_BYTE *)(a1 + 4796) = 0;
  *(_BYTE *)(a1 + 4800) = 0;
  *(_BYTE *)(a1 + 4804) = 0;
  *(_BYTE *)(a1 + 4808) = 0;
  *(_BYTE *)(a1 + 4812) = 0;
  *(_BYTE *)(a1 + 4816) = 0;
  *(_BYTE *)(a1 + 4820) = 0;
  *(_BYTE *)(a1 + 4824) = 0;
  *(_BYTE *)(a1 + 4828) = 0;
  *(_BYTE *)(a1 + 4832) = 0;
  *(_BYTE *)(a1 + 4836) = 0;
  *(_BYTE *)(a1 + 4840) = 0;
  *(_BYTE *)(a1 + 4844) = 0;
  *(_BYTE *)(a1 + 4848) = 0;
  *(_BYTE *)(a1 + 4852) = 0;
  *(_WORD *)(a1 + 4856) = 0;
  *(_QWORD *)(a1 + 4864) = 0;
  *(_WORD *)(a1 + 4872) = 0;
  *(_QWORD *)(a1 + 4896) = 0;
  *(_OWORD *)(a1 + 4880) = 0u;
  *(_BYTE *)(a1 + 4904) = 0;
  *(_BYTE *)(a1 + 5068) = 0;
  *v11 = 0;
  *(_BYTE *)(a1 + 5076) = 0;
  *(_DWORD *)(a1 + 5080) = 0;
  *(_OWORD *)(a1 + 5088) = 0u;
  *(_OWORD *)(a1 + 5104) = 0u;
  *(_OWORD *)(a1 + 5120) = 0u;
  *(_QWORD *)(a1 + 5136) = 0;
  *(_OWORD *)(a1 + 4912) = 0u;
  *(_OWORD *)(a1 + 4928) = 0u;
  *(_OWORD *)(a1 + 4944) = 0u;
  *(_OWORD *)(a1 + 4960) = 0u;
  *(_OWORD *)(a1 + 4976) = 0u;
  *(_OWORD *)(a1 + 4992) = 0u;
  *(_OWORD *)(a1 + 5008) = 0u;
  *(_OWORD *)(a1 + 5024) = 0u;
  *(_OWORD *)(a1 + 5040) = 0u;
  *(_OWORD *)(a1 + 5049) = 0u;
  *(_QWORD *)(a1 + 5144) = -1;
  *(_BYTE *)(a1 + 5152) = 0;
  *(_QWORD *)(a1 + 5156) = 0x447A000000000000;
  *(int64x2_t *)(a1 + 5168) = vdupq_n_s64(0x3E8uLL);
  webrtc::RateStatistics::Reset((webrtc::RateStatistics *)(a1 + 5088));
  if (*(_BYTE *)(a1 + 5076))
    webrtc::RateStatistics::Update((webrtc::RateStatistics *)(a1 + 5088), 1, *(unsigned int *)v11);
  *(_DWORD *)(a1 + 5064) = 1084227584;
  *(_BYTE *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5080) = 170;
  v16 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)__p = off_24C0B4170;
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)&__p[16] = 0;
  v139 = 0;
  v141 = 8;
  if (v140 <= (void **)"Disabled" && &v140[1] > (void **)"Disabled")
    goto LABEL_211;
  v142 = 0;
  strcpy((char *)v140, "Disabled");
  *(_QWORD *)__p = &unk_24C0B41A0;
  *(_QWORD *)&v161 = off_24C0B4170;
  *((_QWORD *)&v161 + 1) = 0;
  v162 = 0;
  v163 = 0;
  HIBYTE(v164[2]) = 6;
  if (v164 <= (void **)"low_qp" && (char *)v164 + 6 > "low_qp")
    goto LABEL_211;
  strcpy((char *)v164, "low_qp");
  LOBYTE(v165) = 0;
  *(_QWORD *)&v161 = &unk_24C0B4020;
  v166 = 149;
  *(_QWORD *)&v154 = off_24C0B4170;
  *((_QWORD *)&v154 + 1) = 0;
  v155 = 0;
  v156 = 0;
  v158 = 7;
  if (v157 <= (void **)"hihg_qp" && (char *)v157 + 7 > "hihg_qp")
    goto LABEL_211;
  strcpy((char *)v157, "hihg_qp");
  v159 = 0;
  *(_QWORD *)&v154 = &unk_24C0B4020;
  v160 = 205;
  v151 = __p;
  v152 = &v161;
  v153 = &v154;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v16 + 16))(&v148, v16, "WebRTC-VP9QualityScaler", 23);
  if ((char)v150 < 0)
  {
    v17 = v149;
    if (v149 < 0)
      goto LABEL_211;
    v18 = (char *)v148;
    if (v149)
    {
      if (!v148)
        goto LABEL_211;
    }
  }
  else
  {
    v17 = v150;
    v18 = (char *)&v148;
  }
  webrtc::ParseFieldTrial(&v151, 3, v18, v17);
  if ((char)v150 < 0)
  {
    operator delete(v148);
    v19 = HIBYTE(v142);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    {
LABEL_32:
      v27 = v166;
      v28 = v160;
      *(_QWORD *)&v154 = off_24C0B4170;
      if ((v158 & 0x80000000) == 0)
        goto LABEL_33;
      goto LABEL_47;
    }
  }
  else
  {
    v19 = HIBYTE(v142);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_32;
  }
  rtc::webrtc_logging_impl::Log("\r\t\t", v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
  v27 = v166;
  v28 = v160;
  *(_QWORD *)&v154 = off_24C0B4170;
  if ((v158 & 0x80000000) == 0)
  {
LABEL_33:
    v29 = (void *)*((_QWORD *)&v154 + 1);
    if (!*((_QWORD *)&v154 + 1))
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_47:
  operator delete(v157[0]);
  v29 = (void *)*((_QWORD *)&v154 + 1);
  if (*((_QWORD *)&v154 + 1))
  {
LABEL_34:
    v155 = v29;
    operator delete(v29);
  }
LABEL_35:
  *(_QWORD *)&v161 = off_24C0B4170;
  if (SHIBYTE(v164[2]) < 0)
    operator delete(v164[0]);
  if (*((_QWORD *)&v161 + 1))
  {
    v162 = *((_QWORD *)&v161 + 1);
    operator delete(*((void **)&v161 + 1));
  }
  *(_QWORD *)__p = off_24C0B4170;
  if (v141 < 0)
    operator delete(v140[0]);
  if (*(_QWORD *)&__p[8])
  {
    *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  *(_QWORD *)(a1 + 5184) = v27 | (v28 << 32);
  *(_DWORD *)(a1 + 5192) = v19 == 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a2 + 8) + 16))(__p, *(_QWORD *)(a2 + 8), "WebRTC-Vp9ExternalRefCtrl", 25);
  if ((__p[23] & 0x80000000) != 0)
  {
    v31 = *(_QWORD *)&__p[8];
    if ((*(_QWORD *)&__p[8] & 0x8000000000000000) != 0)
      goto LABEL_211;
    v30 = *(_QWORD **)__p;
    if (*(_QWORD *)&__p[8])
    {
      if (!*(_QWORD *)__p)
        goto LABEL_211;
    }
  }
  else
  {
    v30 = __p;
    v31 = __p[23];
  }
  if (v31 >= 8)
  {
    v32 = *v30 != 0x64656C6261736944;
    if ((__p[23] & 0x80) == 0)
      goto LABEL_57;
  }
  else
  {
    v32 = 1;
    if ((__p[23] & 0x80) == 0)
      goto LABEL_57;
  }
  operator delete(*(void **)__p);
LABEL_57:
  *(_BYTE *)(a1 + 5196) = v32;
  v33 = *(_QWORD *)(a2 + 8);
  v34 = operator new();
  *(_QWORD *)__p = &off_24C0B6418;
  __p[8] = 0;
  v139 = __p;
  *(_QWORD *)v34 = &unk_24C0AF318;
  *(_QWORD *)(v34 + 8) = off_24C0B4170;
  *(_QWORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 32) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  *(_BYTE *)(v34 + 63) = 15;
  if (v34 + 40 <= (unint64_t)"min_pixel_count" && v34 + 55 > (unint64_t)"min_pixel_count")
    goto LABEL_211;
  strcpy((char *)(v34 + 40), "min_pixel_count");
  *(_WORD *)(v34 + 64) = 0;
  *(_BYTE *)(v34 + 66) = 0;
  *(_QWORD *)(v34 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v34 + 80) = 0;
  *(_QWORD *)(v34 + 88) = 0;
  *(_QWORD *)(v34 + 72) = 0;
  *(_QWORD *)(v34 + 96) = &off_24C0B6418;
  *(_QWORD *)(v34 + 120) = v34 + 96;
  *(_BYTE *)(v34 + 104) = 0;
  *(_QWORD *)&v161 = v34;
  v35 = operator new();
  *(_QWORD *)__p = &off_24C0B6460;
  __p[8] = 0;
  v139 = __p;
  *(_QWORD *)v35 = &unk_24C0AF318;
  *(_QWORD *)(v35 + 8) = off_24C0B4170;
  *(_QWORD *)(v35 + 24) = 0;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  *(_BYTE *)(v35 + 63) = 16;
  if (v35 + 40 <= (unint64_t)"high_layer_speed" && v35 + 56 > (unint64_t)"high_layer_speed")
    goto LABEL_211;
  strcpy((char *)(v35 + 40), "high_layer_speed");
  *(_WORD *)(v35 + 64) = 0;
  *(_BYTE *)(v35 + 66) = 0;
  *(_QWORD *)(v35 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v35 + 80) = 0;
  *(_QWORD *)(v35 + 88) = 0;
  *(_QWORD *)(v35 + 72) = 0;
  *(_QWORD *)(v35 + 96) = &off_24C0B6460;
  *(_QWORD *)(v35 + 120) = v35 + 96;
  *(_BYTE *)(v35 + 104) = 0;
  *((_QWORD *)&v161 + 1) = v35;
  v36 = operator new();
  *(_QWORD *)__p = &off_24C0B64A8;
  __p[8] = 0;
  v139 = __p;
  *(_QWORD *)v36 = &unk_24C0AF318;
  *(_QWORD *)(v36 + 8) = off_24C0B4170;
  *(_QWORD *)(v36 + 24) = 0;
  *(_QWORD *)(v36 + 32) = 0;
  *(_BYTE *)(v36 + 63) = 16;
  *(_QWORD *)(v36 + 16) = 0;
  if (v36 + 40 <= (unint64_t)"base_layer_speed" && v36 + 56 > (unint64_t)"base_layer_speed")
    goto LABEL_211;
  strcpy((char *)(v36 + 40), "base_layer_speed");
  *(_WORD *)(v36 + 64) = 0;
  *(_BYTE *)(v36 + 66) = 0;
  *(_QWORD *)(v36 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v36 + 80) = 0;
  *(_QWORD *)(v36 + 88) = 0;
  *(_QWORD *)(v36 + 72) = 0;
  *(_QWORD *)(v36 + 96) = &off_24C0B64A8;
  *(_QWORD *)(v36 + 120) = v36 + 96;
  *(_BYTE *)(v36 + 104) = 0;
  v162 = v36;
  v37 = operator new();
  *(_QWORD *)__p = &off_24C0B64F0;
  __p[8] = 0;
  v139 = __p;
  *(_QWORD *)v37 = &unk_24C0AF318;
  *(_QWORD *)(v37 + 8) = off_24C0B4170;
  *(_QWORD *)(v37 + 24) = 0;
  *(_QWORD *)(v37 + 32) = 0;
  *(_QWORD *)(v37 + 16) = 0;
  *(_BYTE *)(v37 + 63) = 12;
  if (v37 + 40 <= (unint64_t)"deblock_mode" && v37 + 52 > (unint64_t)"deblock_mode")
    goto LABEL_211;
  strcpy((char *)(v37 + 40), "deblock_mode");
  *(_WORD *)(v37 + 64) = 0;
  *(_BYTE *)(v37 + 66) = 0;
  *(_QWORD *)(v37 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v37 + 80) = 0;
  *(_QWORD *)(v37 + 88) = 0;
  *(_QWORD *)(v37 + 72) = 0;
  *(_QWORD *)(v37 + 96) = &off_24C0B64F0;
  *(_QWORD *)(v37 + 120) = v37 + 96;
  *(_BYTE *)(v37 + 104) = 0;
  v163 = v37;
  v38 = (char *)operator new();
  *(_QWORD *)__p = &off_24C0B6538;
  __p[8] = 0;
  v139 = __p;
  *(_QWORD *)v38 = &unk_24C0B1A10;
  *((_QWORD *)v38 + 1) = off_24C0B4170;
  *((_QWORD *)v38 + 3) = 0;
  *((_QWORD *)v38 + 4) = 0;
  *((_QWORD *)v38 + 2) = 0;
  v38[63] = 8;
  if (v38 + 40 <= "denoiser" && v38 + 48 > "denoiser")
    goto LABEL_211;
  strcpy(v38 + 40, "denoiser");
  *((_WORD *)v38 + 32) = 0;
  v38[66] = 0;
  *((_QWORD *)v38 + 1) = &unk_24C0B1A40;
  *((_QWORD *)v38 + 10) = 0;
  *((_QWORD *)v38 + 11) = 0;
  *((_QWORD *)v38 + 9) = 0;
  *((_QWORD *)v38 + 12) = &off_24C0B6538;
  *((_QWORD *)v38 + 15) = v38 + 96;
  v38[104] = 0;
  v164[0] = v38;
  webrtc::FieldTrialStructListBase::FieldTrialStructListBase((uint64_t)__p, &v161, 5);
  *(_QWORD *)__p = off_24C0B63E8;
  v145 = 0;
  v146 = 0;
  v147 = 0;
  *(_QWORD *)&v161 = off_24C0B4170;
  *((_QWORD *)&v161 + 1) = 0;
  v162 = 0;
  v163 = 0;
  HIBYTE(v164[2]) = 19;
  if (v164 <= (void **)"use_per_layer_speed" && (char *)&v164[2] + 3 > "use_per_layer_speed")
    goto LABEL_211;
  strcpy((char *)v164, "use_per_layer_speed");
  v165 = 0;
  *(_QWORD *)&v161 = &unk_24C0B41A0;
  v151 = __p;
  v152 = &v161;
  (*(void (**)(__int128 *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v33 + 16))(&v154, v33, "WebRTC-VP9-PerformanceFlags", 27);
  if (SHIBYTE(v155) < 0)
  {
    v39 = *((_QWORD *)&v154 + 1);
    v41 = a1 + 5072;
    if ((*((_QWORD *)&v154 + 1) & 0x8000000000000000) != 0)
      goto LABEL_211;
    v40 = (char *)v154;
    if (*((_QWORD *)&v154 + 1))
    {
      if (!(_QWORD)v154)
        goto LABEL_211;
    }
  }
  else
  {
    v39 = HIBYTE(v155);
    v40 = (char *)&v154;
    v41 = a1 + 5072;
  }
  webrtc::ParseFieldTrial(&v151, 2, v40, v39);
  if (SHIBYTE(v155) < 0)
  {
    operator delete((void *)v154);
    v42 = v145;
    v43 = v146 - (_BYTE *)v145;
    if (v146 != v145)
      goto LABEL_76;
LABEL_140:
    v47 = 0;
    goto LABEL_142;
  }
  v42 = v145;
  v43 = v146 - (_BYTE *)v145;
  if (v146 == v145)
    goto LABEL_140;
LABEL_76:
  v132 = a2;
  v133 = v8;
  if (0xCCCCCCCCCCCCCCCDLL * (v43 >> 2) > 0xCCCCCCCCCCCCCCCLL)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v130 = HIBYTE(v165);
  v44 = (uint64_t *)operator new(v43);
  v45 = v43;
  v46 = (uint64_t *)((char *)v44 + 4 * (v43 >> 2));
  memcpy(v44, v42, v45);
  v135 = 0;
  v137 = 0;
  v47 = 0;
  v131 = v44;
  v134 = v46;
  do
  {
    if ((*(_DWORD *)v44 - 10) >= 0xFFFFFFF7
      && (*((_DWORD *)v44 + 1) - 10) >= 0xFFFFFFF7
      && *((_DWORD *)v44 + 2) < 3u)
    {
      v57 = v47 - v137;
      if (v47 == v137)
      {
        v59 = v47;
      }
      else
      {
        v58 = 0xCCCCCCCCCCCCCCCDLL * (v57 >> 2);
        v59 = v137;
        do
        {
          v60 = v58 >> 1;
          v61 = &v59[20 * (v58 >> 1)];
          v63 = *(_DWORD *)v61;
          v62 = v61 + 20;
          v58 += ~(v58 >> 1);
          if (v63 < *((_DWORD *)v44 + 4))
            v59 = v62;
          else
            v58 = v60;
        }
        while (v58);
      }
      v64 = (v59 - v137) / 20;
      v65 = &v137[20 * v64];
      if (v65 == v47)
      {
        if (v47 < v135)
        {
          if (!v137)
            goto LABEL_211;
          *(_DWORD *)v47 = *((_DWORD *)v44 + 4);
          i = v47 + 20;
          *(_OWORD *)&v137[20 * v64 + 4] = xmmword_208F0B6C0;
          v65 = v47;
          goto LABEL_79;
        }
      }
      else
      {
        v66 = *((_DWORD *)v44 + 4);
        if (v66 >= *(_DWORD *)v65)
        {
          i = v47;
LABEL_79:
          v49 = *v44;
          *(_QWORD *)(v65 + 9) = *(uint64_t *)((char *)v44 + 5);
          *(_QWORD *)(v65 + 4) = v49;
          v47 = i;
          v46 = v134;
          goto LABEL_80;
        }
        if (v47 < v135)
        {
          v67 = v47 - 20;
          i = v47;
          v68 = v47 - 20;
          if ((unint64_t)v47 >= 0x14)
          {
            do
            {
              v69 = *(_OWORD *)v68;
              *((_DWORD *)i + 4) = *((_DWORD *)v68 + 4);
              *(_OWORD *)i = v69;
              i += 20;
              v68 += 20;
            }
            while (v68 < v47);
          }
          if (v47 != v65 + 20)
          {
            v70 = (char *)(v47 - (v65 + 20));
            do
            {
              *(_DWORD *)v67 = *(_DWORD *)&v70[(_QWORD)v65 - 20];
              v71 = *(_QWORD *)&v70[(_QWORD)v65 - 16];
              *(_QWORD *)(v67 + 9) = *(_QWORD *)&v70[(_QWORD)v65 - 11];
              *(_QWORD *)(v67 + 4) = v71;
              v67 -= 20;
              v70 -= 20;
            }
            while (v70);
          }
          *(_DWORD *)v65 = v66;
          v72 = &v137[20 * v64];
          *(_QWORD *)(v72 + 4) = -1;
          *((_DWORD *)v72 + 3) = 0;
          v72[16] = 1;
          goto LABEL_79;
        }
      }
      v73 = 1 - 0x3333333333333333 * (v57 >> 2);
      if (v73 > 0xCCCCCCCCCCCCCCCLL)
        abort();
      if (0x999999999999999ALL * ((v135 - v137) >> 2) > v73)
        v73 = 0x999999999999999ALL * ((v135 - v137) >> 2);
      if (0xCCCCCCCCCCCCCCCDLL * ((v135 - v137) >> 2) >= 0x666666666666666)
        v74 = 0xCCCCCCCCCCCCCCCLL;
      else
        v74 = v73;
      if (v74)
      {
        if (v74 > 0xCCCCCCCCCCCCCCCLL)
          goto LABEL_214;
        v75 = (char *)operator new(20 * v74);
        v64 = (v59 - v137) / 20;
        v76 = (unint64_t)&v75[20 * v64];
        v135 = &v75[20 * v74];
        if ((char *)v76 == v135)
        {
LABEL_117:
          v77 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v76 - (_QWORD)v75) >> 2);
          if (v76 <= (unint64_t)v75)
          {
            v79 = 0x999999999999999ALL * ((uint64_t)(v76 - (_QWORD)v75) >> 2);
            if ((char *)v76 == v75)
              v79 = 1;
            if (v79 > 0xCCCCCCCCCCCCCCCLL)
LABEL_214:
              std::__throw_bad_array_new_length[abi:sn180100]();
            v80 = v64;
            v81 = v79 >> 2;
            v136 = 20 * v79;
            v82 = (char *)operator new(20 * v79);
            v76 = (unint64_t)&v82[20 * v81];
            v135 = &v82[v136];
            if (v75)
              operator delete(v75);
            v64 = v80;
          }
          else
          {
            if (v77 >= -1)
              v78 = v77 + 1;
            else
              v78 = v77 + 2;
            v135 = (char *)v76;
            v76 -= 20 * (v78 >> 1);
          }
        }
      }
      else
      {
        v75 = 0;
        v76 = 20 * v64;
        v135 = 0;
        if (!(20 * v64))
          goto LABEL_117;
      }
      if (!v76)
        goto LABEL_211;
      *(_DWORD *)v76 = *((_DWORD *)v44 + 4);
      *(_OWORD *)(v76 + 4) = xmmword_208F0B6C0;
      v83 = (char *)v76;
      if (v59 != v137)
      {
        v84 = 20 * v64;
        v85 = v137 - 20;
        v86 = v76;
        do
        {
          v83 = (char *)(v86 - 20);
          v87 = *(_OWORD *)&v85[v84];
          *(_DWORD *)(v86 - 4) = *(_DWORD *)&v85[v84 + 16];
          *(_OWORD *)(v86 - 20) = v87;
          v86 -= 20;
          v84 -= 20;
        }
        while (v84);
      }
      for (i = (char *)(v76 + 20); v65 != v47; v65 += 20)
      {
        v88 = *(_OWORD *)v65;
        *((_DWORD *)i + 4) = *((_DWORD *)v65 + 4);
        *(_OWORD *)i = v88;
        i += 20;
      }
      if (v137)
        operator delete(v137);
      v137 = v83;
      v65 = (char *)v76;
      v41 = a1 + 5072;
      goto LABEL_79;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      v8 = v8 & 0xFFFFFFFF00000000 | 0x3C82;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v50, v51, v52, v53, v54, v55, v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
    }
LABEL_80:
    v44 = (uint64_t *)((char *)v44 + 20);
  }
  while (v44 != v46);
  operator delete(v131);
  if (v137 != v47)
  {
    *(_BYTE *)(v41 + 128) = v130;
    *(_QWORD *)(a1 + 5208) = v137;
    *(_QWORD *)(a1 + 5216) = v47;
    *(_QWORD *)(a1 + 5224) = v135;
    a2 = v132;
    v8 = v133;
    goto LABEL_164;
  }
  a2 = v132;
  v8 = v133;
LABEL_142:
  *(_QWORD *)(a1 + 5216) = 0;
  *(_QWORD *)(a1 + 5208) = 0;
  *(_QWORD *)(a1 + 5224) = 0;
  *(_BYTE *)(v41 + 128) = 1;
  LODWORD(v151) = 0;
  v154 = xmmword_208F0B6C0;
  v89 = std::vector<std::pair<int,webrtc::LibvpxVp9Encoder::PerformanceFlags::ParameterSet>>::emplace<int,webrtc::LibvpxVp9Encoder::PerformanceFlags::ParameterSet>((unint64_t *)(a1 + 5208), 0, (int *)&v151, &v154);
  *(_QWORD *)(v89 + 1) = 0x800000005;
  v89[3] = 1;
  *((_BYTE *)v89 + 16) = 1;
  LODWORD(v151) = 101376;
  v90 = *(int **)(a1 + 5208);
  v91 = *(int **)(a1 + 5216);
  if (v91 == v90)
  {
    v93 = *(int **)(a1 + 5216);
    goto LABEL_152;
  }
  v92 = 0xCCCCCCCCCCCCCCCDLL * (v91 - v90);
  v93 = *(int **)(a1 + 5208);
  do
  {
    v94 = v92 >> 1;
    v95 = &v93[5 * (v92 >> 1)];
    v97 = *v95;
    v96 = v95 + 5;
    v92 += ~(v92 >> 1);
    if (v97 < 101376)
      v93 = v96;
    else
      v92 = v94;
  }
  while (v92);
  if (v93 == v91 || *v93 > 101376)
  {
LABEL_152:
    v154 = xmmword_208F0B6C0;
    v93 = std::vector<std::pair<int,webrtc::LibvpxVp9Encoder::PerformanceFlags::ParameterSet>>::emplace<int,webrtc::LibvpxVp9Encoder::PerformanceFlags::ParameterSet>((unint64_t *)(a1 + 5208), (uint64_t)v93, (int *)&v151, &v154);
    v90 = *(int **)(a1 + 5208);
    v91 = *(int **)(a1 + 5216);
  }
  v98 = v91;
  *(_QWORD *)(v93 + 1) = 0x800000007;
  v93[3] = 0;
  *((_BYTE *)v93 + 16) = 1;
  LODWORD(v151) = 2073600;
  if (v91 != v90)
  {
    v99 = 0xCCCCCCCCCCCCCCCDLL * (v91 - v90);
    v91 = v90;
    do
    {
      v100 = v99 >> 1;
      v101 = &v91[5 * (v99 >> 1)];
      v103 = *v101;
      v102 = v101 + 5;
      v99 += ~(v99 >> 1);
      if (v103 < 2073600)
        v91 = v102;
      else
        v99 = v100;
    }
    while (v99);
  }
  v104 = v91;
  if (v91 == v98 || *v91 > 2073600)
  {
    v154 = xmmword_208F0B6C0;
    v104 = std::vector<std::pair<int,webrtc::LibvpxVp9Encoder::PerformanceFlags::ParameterSet>>::emplace<int,webrtc::LibvpxVp9Encoder::PerformanceFlags::ParameterSet>((unint64_t *)(a1 + 5208), (uint64_t)v91, (int *)&v151, &v154);
  }
  *(_QWORD *)(v104 + 1) = 0x900000009;
  v104[3] = 0;
  *((_BYTE *)v104 + 16) = 0;
  if (v47)
    operator delete(v47);
LABEL_164:
  *(_QWORD *)&v161 = off_24C0B4170;
  if (SHIBYTE(v164[2]) < 0)
    operator delete(v164[0]);
  if (*((_QWORD *)&v161 + 1))
  {
    v162 = *((_QWORD *)&v161 + 1);
    operator delete(*((void **)&v161 + 1));
  }
  *(_QWORD *)__p = off_24C0B63E8;
  if (v145)
  {
    v146 = v145;
    operator delete(v145);
  }
  *(_QWORD *)__p = off_24C0B3F90;
  v105 = v143;
  if (v143)
  {
    v106 = v144;
    v107 = v143;
    if (v144 != v143)
    {
      do
      {
        v109 = *--v106;
        v108 = v109;
        *v106 = 0;
        if (v109)
          (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
      }
      while (v106 != v105);
      v107 = v143;
    }
    v144 = v105;
    operator delete(v107);
  }
  *(_QWORD *)__p = off_24C0B4170;
  if (v141 < 0)
    operator delete(v140[0]);
  if (*(_QWORD *)&__p[8])
  {
    *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  *(_DWORD *)(a1 + 5256) = 0;
  *(_QWORD *)(a1 + 5248) = 0;
  *(_OWORD *)(a1 + 5232) = 0u;
  *(_BYTE *)(v41 + 188) = 1;
  webrtc::EncoderInfoSettings::EncoderInfoSettings(a1 + 5264, *(_QWORD *)(a2 + 8), (uint64_t)"WebRTC-VP9-GetEncoderInfoOverride", 33);
  *(_QWORD *)(a1 + 5264) = &unk_24C0B3AF0;
  v110 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)__p = off_24C0B4170;
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)&__p[16] = 0;
  v139 = 0;
  v141 = 7;
  if (v140 <= (void **)"Enabled" && (char *)v140 + 7 > "Enabled")
    goto LABEL_211;
  strcpy((char *)v140, "Enabled");
  v142 = 0;
  *(_QWORD *)__p = &unk_24C0B41A0;
  *(_QWORD *)&v161 = off_24C0B4170;
  *((_QWORD *)&v161 + 1) = 0;
  v162 = 0;
  v163 = 0;
  HIBYTE(v164[2]) = 15;
  if (v164 <= (void **)"layer_drop_mode" && (char *)&v164[1] + 7 > "layer_drop_mode")
    goto LABEL_211;
  strcpy((char *)v164, "layer_drop_mode");
  LOBYTE(v165) = 0;
  *(_QWORD *)&v161 = &unk_24C0B4020;
  v166 = 2;
  *(_QWORD *)&v154 = off_24C0B4170;
  *((_QWORD *)&v154 + 1) = 0;
  v155 = 0;
  v156 = 0;
  v158 = 15;
  if (v157 <= (void **)"max_consec_drop" && (char *)&v157[1] + 7 > "max_consec_drop")
    goto LABEL_211;
  strcpy((char *)v157, "max_consec_drop");
  v159 = 0;
  *(_QWORD *)&v154 = &unk_24C0B4020;
  v160 = 0x7FFFFFFF;
  v151 = __p;
  v152 = &v161;
  v153 = &v154;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v110 + 16))(&v148, v110, "WebRTC-LibvpxVp9Encoder-SvcFrameDropConfig", 42);
  if (((char)v150 & 0x80000000) == 0)
  {
    v111 = v150;
    v112 = (char *)&v148;
    goto LABEL_193;
  }
  v111 = v149;
  if (v149 < 0 || (v112 = (char *)v148, v149) && !v148)
LABEL_211:
    __break(1u);
LABEL_193:
  webrtc::ParseFieldTrial(&v151, 3, v112, v111);
  if ((char)v150 < 0)
  {
    operator delete(v148);
    v113 = HIBYTE(v142);
    v114 = v166;
    v115 = v160;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      goto LABEL_208;
LABEL_195:
    *(_QWORD *)&v154 = off_24C0B4170;
    if ((v158 & 0x80000000) == 0)
      goto LABEL_196;
LABEL_209:
    operator delete(v157[0]);
    v123 = (void *)*((_QWORD *)&v154 + 1);
    if (*((_QWORD *)&v154 + 1))
    {
LABEL_197:
      v155 = v123;
      operator delete(v123);
    }
  }
  else
  {
    v113 = HIBYTE(v142);
    v114 = v166;
    v115 = v160;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_195;
LABEL_208:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v116, v117, v118, v119, v120, v121, v122, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
    *(_QWORD *)&v154 = off_24C0B4170;
    if (v158 < 0)
      goto LABEL_209;
LABEL_196:
    v123 = (void *)*((_QWORD *)&v154 + 1);
    if (*((_QWORD *)&v154 + 1))
      goto LABEL_197;
  }
  *(_QWORD *)&v161 = off_24C0B4170;
  if (SHIBYTE(v164[2]) < 0)
    operator delete(v164[0]);
  if (*((_QWORD *)&v161 + 1))
  {
    v162 = *((_QWORD *)&v161 + 1);
    operator delete(*((void **)&v161 + 1));
  }
  *(_QWORD *)__p = off_24C0B4170;
  if (v141 < 0)
    operator delete(v140[0]);
  if (*(_QWORD *)&__p[8])
  {
    *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  *(_QWORD *)(a1 + 5432) = v113 | (v114 << 32);
  *(_DWORD *)(a1 + 5440) = v115;
  *(_QWORD *)((char *)&v161 + 3) = 0;
  *(_DWORD *)((char *)&v161 + 11) = 0;
  LOWORD(v154) = 0;
  BYTE2(v154) = 0;
  v151 = 0;
  LODWORD(v152) = 0;
  v148 = 0;
  LODWORD(v149) = 0;
  *(_DWORD *)((char *)&v154 + 11) = 0;
  *(_QWORD *)((char *)&v154 + 3) = 0;
  memset(&__p[3], 0, 18);
  *(_QWORD *)(a1 + 2360) = 0;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_BYTE *)(a1 + 2368) = 1;
  *(_DWORD *)(a1 + 2372) = 0;
  *(_BYTE *)(a1 + 2376) = 0;
  v124 = v161;
  *(_QWORD *)(a1 + 2384) = *(_QWORD *)((char *)&v161 + 7);
  *(_QWORD *)(a1 + 2377) = v124;
  *(_BYTE *)(a1 + 2392) = 1;
  *(_QWORD *)(a1 + 2393) = 0;
  v125 = v151;
  *(_DWORD *)(a1 + 2409) = (_DWORD)v152;
  *(_QWORD *)(a1 + 2401) = v125;
  *(_QWORD *)(a1 + 2420) = 0;
  *(_QWORD *)(a1 + 2413) = 0;
  *(_BYTE *)(a1 + 2428) = 1;
  *(_QWORD *)(a1 + 2429) = 0;
  v126 = v148;
  *(_DWORD *)(a1 + 2445) = v149;
  *(_QWORD *)(a1 + 2437) = v126;
  *(_QWORD *)(a1 + 2456) = 0;
  *(_QWORD *)(a1 + 2449) = 0;
  *(_BYTE *)(a1 + 2464) = 1;
  *(_QWORD *)(a1 + 2465) = 0;
  *(_DWORD *)(a1 + 2481) = 0;
  *(_QWORD *)(a1 + 2473) = 0;
  v127 = v154;
  *(_QWORD *)(a1 + 2492) = *(_QWORD *)((char *)&v154 + 7);
  *(_QWORD *)(a1 + 2485) = v127;
  *(_BYTE *)(a1 + 2500) = 1;
  *(_QWORD *)(a1 + 2501) = 0;
  *(_DWORD *)(a1 + 2517) = 0;
  *(_QWORD *)(a1 + 2509) = 0;
  *(_QWORD *)(a1 + 2528) = 0;
  *(_QWORD *)(a1 + 2521) = 0;
  *(_BYTE *)(a1 + 2536) = 1;
  *(_QWORD *)(a1 + 2537) = 0;
  *(_DWORD *)(a1 + 2553) = 0;
  *(_QWORD *)(a1 + 2545) = 0;
  *(_QWORD *)(a1 + 2564) = 0;
  *(_QWORD *)(a1 + 2557) = 0;
  *(_BYTE *)(a1 + 2572) = 1;
  *(_QWORD *)(a1 + 2573) = 0;
  *(_DWORD *)(a1 + 2589) = 0;
  *(_QWORD *)(a1 + 2581) = 0;
  *(_QWORD *)(a1 + 2600) = 0;
  *(_QWORD *)(a1 + 2593) = 0;
  *(_BYTE *)(a1 + 2608) = 1;
  *(_QWORD *)(a1 + 2609) = 0;
  *(_DWORD *)(a1 + 2625) = 0;
  *(_QWORD *)(a1 + 2617) = 0;
  *(_QWORD *)(a1 + 2636) = 0;
  *(_QWORD *)(a1 + 2629) = 0;
  *(_BYTE *)(a1 + 2644) = 1;
  *(_QWORD *)(a1 + 2645) = 0;
  *(_DWORD *)(a1 + 2661) = 0;
  *(_QWORD *)(a1 + 2653) = 0;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(a1 + 2680) = 0;
  *(_WORD *)(a1 + 2688) = 0;
  *(_BYTE *)(a1 + 2696) = 0;
  v128 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 2710) = *(_QWORD *)&__p[13];
  *(_OWORD *)(a1 + 2697) = v128;
  *(_DWORD *)(a1 + 2720) = 0;
  *(_BYTE *)(a1 + 2724) = 0;
  *(_DWORD *)(a1 + 3064) = 0;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_OWORD *)(a1 + 2872) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  return a1;
}

void webrtc::LibvpxVp9Encoder::~LibvpxVp9Encoder(webrtc::LibvpxVp9Encoder *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_24C0B6370;
  v2 = *((_QWORD *)this + 344);
  if (v2)
  {
    if (!*((_BYTE *)this + 2732)
      || ((*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1)),
          (v2 = *((_QWORD *)this + 344)) != 0))
    {
      MEMORY[0x20BD0ADEC](v2, 0x10F2C40209C4D79);
    }
    *((_QWORD *)this + 344) = 0;
  }
  v3 = *((_QWORD *)this + 345);
  if (v3)
  {
    MEMORY[0x20BD0ADEC](v3, 0x1080C405D68748FLL);
    *((_QWORD *)this + 345) = 0;
  }
  if (*((_QWORD *)this + 346))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
    *((_QWORD *)this + 346) = 0;
  }
  *((_BYTE *)this + 2732) = 0;
  webrtc::EncoderInfoSettings::~EncoderInfoSettings((webrtc::LibvpxVp9Encoder *)((char *)this + 5264));
  v4 = (void *)*((_QWORD *)this + 654);
  if (v4)
  {
    *((_QWORD *)this + 655) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 651);
  if (v5)
  {
    *((_QWORD *)this + 652) = v5;
    operator delete(v5);
  }
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 636);
  v6 = *((_QWORD *)this + 630);
  if (v6)
  {
    v7 = *((_QWORD *)this + 631);
    v8 = (void *)*((_QWORD *)this + 630);
    if (v7 != v6)
    {
      do
      {
        if ((*(_BYTE *)(v7 - 72) & 1) != 0)
          operator delete(*(void **)(v7 - 64));
        v7 -= 88;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 630);
    }
    *((_QWORD *)this + 631) = v6;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 610);
  if (v9)
  {
    v10 = *((_QWORD *)this + 611);
    v11 = (void *)*((_QWORD *)this + 610);
    if (v10 != v9)
    {
      do
      {
        v12 = v10 - 120;
        std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)(v10 - 96));
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (void *)*((_QWORD *)this + 610);
    }
    *((_QWORD *)this + 611) = v9;
    operator delete(v11);
  }
  v13 = *((_QWORD *)this + 608);
  *((_QWORD *)this + 608) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (*((_BYTE *)this + 2320))
    webrtc::FrameDependencyStructure::~FrameDependencyStructure((webrtc::LibvpxVp9Encoder *)((char *)this + 2192));
  if (*((_BYTE *)this + 2184))
    webrtc::GenericFrameInfo::~GenericFrameInfo((webrtc::LibvpxVp9Encoder *)((char *)this + 1976));
  webrtc::EncodedImage::~EncodedImage((webrtc::LibvpxVp9Encoder *)((char *)this + 16));
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
}

{
  webrtc::LibvpxVp9Encoder::~LibvpxVp9Encoder(this);
  JUMPOUT(0x20BD0ADECLL);
}

void **std::vector<webrtc::FramerateControllerDeprecated>::~vector[abi:sn180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 15;
        std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](v3 - 12);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t webrtc::LibvpxVp9Encoder::Release(webrtc::LibvpxVp9Encoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 344);
  if (v2)
  {
    if (*((_BYTE *)this + 2732))
    {
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1)))
        v3 = 4294967293;
      else
        v3 = 0;
      v2 = *((_QWORD *)this + 344);
      if (!v2)
      {
LABEL_12:
        *((_QWORD *)this + 344) = 0;
        v4 = *((_QWORD *)this + 345);
        if (!v4)
          goto LABEL_14;
        goto LABEL_13;
      }
    }
    else
    {
      v3 = 0;
    }
    MEMORY[0x20BD0ADEC](v2, 0x10F2C40209C4D79);
    goto LABEL_12;
  }
  v3 = 0;
  v4 = *((_QWORD *)this + 345);
  if (v4)
  {
LABEL_13:
    MEMORY[0x20BD0ADEC](v4, 0x1080C405D68748FLL);
    *((_QWORD *)this + 345) = 0;
  }
LABEL_14:
  if (*((_QWORD *)this + 346))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
    *((_QWORD *)this + 346) = 0;
  }
  *((_BYTE *)this + 2732) = 0;
  return v3;
}

uint64_t webrtc::LibvpxVp9Encoder::SetSvcRates(webrtc::LibvpxVp9Encoder *this, const webrtc::VideoBitrateAllocation *a2)
{
  char *v4;
  unint64_t ActiveLayers;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL4 v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  _BYTE *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  std::string *v87;
  unint64_t v88;
  unint64_t v89;
  const webrtc::VideoBitrateAllocation *v90;
  char *v91;

  v4 = (char *)this + 4688;
  v7 = v6;
  v14 = v9;
  v15 = v8 > ActiveLayers;
  if (v9 < v7)
    v15 = 1;
  v16 = (char *)this + 4624;
  if (v8 < ActiveLayers || v9 > v7 && (*((_DWORD *)this + 1162) | 2) == 2 || v15 && *((_BYTE *)this + 4645))
    *v16 = 1;
  if (ActiveLayers != v8 || v7 != v9)
    *((_BYTE *)this + 4856) = 1;
  *(_DWORD *)(*((_QWORD *)this + 345) + 112) = *(_DWORD *)a2 / 0x3E8u;
  if (!*((_BYTE *)this + 4641))
  {
    *((_WORD *)this + 2321) = 0;
    goto LABEL_82;
  }
  v88 = v9;
  v89 = v7;
  v90 = a2;
  v91 = v4;
  v17 = 0;
  v18 = (char *)a2 + 32;
  v19 = (float *)((char *)this + 2496);
  v20 = 49;
  do
  {
    v23 = v20 - 49;
    if (!*(_DWORD *)(*((_QWORD *)this + 345) + 4 * v20))
    {
      v24 = *((_QWORD *)this + 610);
      if (0xEEEEEEEEEEEEEEEFLL * ((*((_QWORD *)this + 611) - v24) >> 3) <= v23)
        goto LABEL_121;
      v25 = v24 + v17;
      webrtc::RateStatistics::Reset((webrtc::RateStatistics *)(v24 + v17 + 24));
      if (*(_BYTE *)(v25 + 12))
        *(_BYTE *)(v25 + 12) = 0;
    }
    if (v17 == 600)
      goto LABEL_122;
    v26 = *(v18 - 24);
    if (*(v18 - 24))
    {
      v27 = *((_DWORD *)v18 - 7);
      v28 = *(v18 - 16);
      if (*(v18 - 16))
        goto LABEL_23;
    }
    else
    {
      v27 = 0;
      v28 = *(v18 - 16);
      if (*(v18 - 16))
      {
LABEL_23:
        v29 = *((_DWORD *)v18 - 5);
        v30 = *(v18 - 8);
        if (*(v18 - 8))
          goto LABEL_24;
        goto LABEL_28;
      }
    }
    v29 = 0;
    v30 = *(v18 - 8);
    if (*(v18 - 8))
    {
LABEL_24:
      v31 = *((_DWORD *)v18 - 3);
      v32 = *v18;
      if (*v18)
        goto LABEL_25;
      goto LABEL_29;
    }
LABEL_28:
    v31 = 0;
    v32 = *v18;
    if (*v18)
    {
LABEL_25:
      v33 = *((_DWORD *)v18 - 1);
      goto LABEL_30;
    }
LABEL_29:
    v33 = 0;
LABEL_30:
    v34 = (v29 + v27 + v31 + v33) / 0x3E8u;
    v35 = *((_QWORD *)this + 345);
    *(_DWORD *)(v35 + 4 * v20) = v34;
    v36 = *((unsigned __int8 *)this + 4640);
    if (!*((_BYTE *)this + 4640))
      goto LABEL_56;
    v37 = v23 * v36;
    if (v26)
    {
      *(_DWORD *)(v35 + 4 * v37 + 328) = *((_DWORD *)v18 - 7) / 0x3E8u;
      if ((_DWORD)v36 == 1)
        goto LABEL_56;
      v38 = *((_DWORD *)v18 - 7);
    }
    else
    {
      v38 = 0;
      *(_DWORD *)(v35 + 4 * v37 + 328) = 0;
      if ((_DWORD)v36 == 1)
        goto LABEL_56;
    }
    if (v28)
      v39 = *((_DWORD *)v18 - 5);
    else
      v39 = 0;
    *(_DWORD *)(v35 + 4 * v37 + 332) = (v39 + v38) / 0x3E8u;
    if ((_DWORD)v36 != 2)
    {
      if (v26)
      {
        v40 = *((_DWORD *)v18 - 7);
        if (v28)
          goto LABEL_41;
LABEL_44:
        v41 = 0;
        if (!v30)
          goto LABEL_45;
LABEL_42:
        v42 = *((_DWORD *)v18 - 3);
      }
      else
      {
        v40 = 0;
        if (!v28)
          goto LABEL_44;
LABEL_41:
        v41 = *((_DWORD *)v18 - 5);
        if (v30)
          goto LABEL_42;
LABEL_45:
        v42 = 0;
      }
      *(_DWORD *)(v35 + 4 * v37 + 336) = (v42 + v41 + v40) / 0x3E8u;
      if ((_DWORD)v36 != 3)
      {
        if (v26)
          v26 = *((_DWORD *)v18 - 7);
        if (v28)
          v28 = *((_DWORD *)v18 - 5);
        if (v30)
          v30 = *((_DWORD *)v18 - 3);
        if (v32)
          v32 = *((_DWORD *)v18 - 1);
        *(_DWORD *)(v35 + 4 * v37 + 340) = (v32 + v30 + v28 + v26) / 0x3E8u;
        if ((_DWORD)v36 != 4)
          goto LABEL_124;
      }
    }
LABEL_56:
    v43 = *((_QWORD *)this + 610);
    if (0xEEEEEEEEEEEEEEEFLL * ((*((_QWORD *)this + 611) - v43) >> 3) <= v23)
      goto LABEL_121;
    v22 = *((unsigned __int8 *)this + 4641);
    if (v22 <= 1)
    {
      v44 = (float)*((unsigned int *)this + 591);
      v45 = v43 + v17;
      if (*(_BYTE *)(v43 + v17 + 4))
      {
LABEL_61:
        if (*(float *)v45 == v44)
          goto LABEL_15;
      }
    }
    else
    {
      v44 = *v19;
      v45 = v43 + v17;
      if (*(_BYTE *)(v43 + v17 + 4))
        goto LABEL_61;
    }
    webrtc::RateStatistics::Reset((webrtc::RateStatistics *)(v45 + 24));
    if (*(_BYTE *)(v45 + 12))
      webrtc::RateStatistics::Update((webrtc::RateStatistics *)(v45 + 24), 1, *(unsigned int *)(v43 + v17 + 8));
    v21 = v43 + v17;
    *(float *)v21 = v44;
    *(_BYTE *)(v45 + 4) = 1;
    *(_DWORD *)(v21 + 16) = 85 * (unint64_t)(float)(1000.0 / v44) / 0x64;
    v22 = *((unsigned __int8 *)this + 4641);
LABEL_15:
    ++v20;
    v17 += 120;
    v18 += 32;
    v19 += 9;
  }
  while (v20 - 49 < (unint64_t)v22);
  *((_WORD *)this + 2321) = 0;
  a2 = v90;
  v4 = v91;
  v14 = v88;
  v7 = v89;
  if (!v22)
    goto LABEL_82;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = *((_QWORD *)this + 345) + 196;
  while (2)
  {
    v51 = 0;
    while (!*(_DWORD *)(v50 + 4 * v47 + 4 * v51))
    {
      if (v22 - v47 == ++v51)
      {
        if ((v49 & 1) == 0)
          goto LABEL_82;
        goto LABEL_76;
      }
    }
    v52 = v48 + v51;
    if ((v49 & 1) == 0)
      *((_BYTE *)this + 4643) = v52;
    v46 = v52 + 1;
    *((_BYTE *)this + 4642) = v46;
    v53 = ~v47 + v22;
    v48 += v51 + 1;
    v49 = 1;
    v47 += v51 + 1;
    if (v53 != v51)
      continue;
    break;
  }
LABEL_76:
  if (!*((_BYTE *)this + 5200))
  {
LABEL_82:
    if (v14 <= v7 || *v16)
    {
      result = *((_QWORD *)this + 608);
      if (result)
      {
LABEL_85:
        v58 = *((unsigned __int8 *)this + 4641);
        if (*((_BYTE *)this + 4641))
        {
          v59 = 0;
          v60 = *((unsigned __int8 *)this + 4640);
          v61 = (char *)this + 4720;
          v62 = 332;
          v63 = v60;
          do
          {
            if (v63)
            {
              if (v59 > 4)
                goto LABEL_123;
              v64 = *((unsigned int *)this + 1172);
              if (*(v61 - 24))
                v65 = v64 - *((unsigned int *)v61 - 7);
              else
                v65 = *((unsigned int *)this + 1172);
              v66 = *((_QWORD *)this + 345);
              v67 = *(_DWORD *)(v66 + 4 * v59 * v63 + 328);
              v10 = (1000 * v67);
              v68 = v65 + v10;
              if (v68 <= 0xFFFFFFFFLL)
              {
                *((_DWORD *)v61 - 7) = v10;
                *(v61 - 24) = 1;
                v64 = (v65 + v10);
                *(_DWORD *)v4 = v68;
              }
              v63 = v60;
              if (v60 >= 2)
              {
                v69 = v64;
                if (*(v61 - 16))
                  v69 = v64 - *((unsigned int *)v61 - 5);
                v70 = *(_DWORD *)(v66 + v62);
                v71 = 1000 * (v70 - v67);
                v72 = v69 + v71;
                if (v72 <= 0xFFFFFFFFLL)
                {
                  *((_DWORD *)v61 - 5) = v71;
                  *(v61 - 16) = 1;
                  v64 = v72;
                  *(_DWORD *)v4 = v72;
                }
                if (v60 < 3)
                {
                  v63 = 2;
                }
                else
                {
                  v73 = v64;
                  if (*(v61 - 8))
                    v73 = v64 - *((unsigned int *)v61 - 3);
                  v74 = *(_DWORD *)(v66 + v62 + 4);
                  v75 = 1000 * (v74 - v70);
                  v76 = v73 + v75;
                  if (v76 <= 0xFFFFFFFFLL)
                  {
                    *((_DWORD *)v61 - 3) = v75;
                    *(v61 - 8) = 1;
                    v64 = v76;
                    *(_DWORD *)v4 = v76;
                  }
                  if (v60 < 4)
                  {
                    v63 = 3;
                  }
                  else
                  {
                    if (*v61)
                      v64 -= *((unsigned int *)v61 - 1);
                    v77 = 1000 * (*(_DWORD *)(v66 + v62 + 8) - v74);
                    v78 = v64 + v77;
                    if (v78 <= 0xFFFFFFFFLL)
                    {
                      *((_DWORD *)v61 - 1) = v77;
                      *v61 = 1;
                      *(_DWORD *)v4 = v78;
                    }
                    if (v60 > 4)
                      goto LABEL_125;
                    v63 = 4;
                  }
                }
              }
            }
            ++v59;
            v61 += 32;
            v62 += 4 * v60;
          }
          while (v58 != v59);
          result = *((_QWORD *)this + 608);
        }
        result = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)result + 32))(result, v4);
        goto LABEL_120;
      }
    }
    else
    {
      if (*((_BYTE *)this + 4641))
        bzero((char *)this + 4656, 4 * *((unsigned __int8 *)this + 4641));
      *((_BYTE *)this + 4857) = 1;
      result = *((_QWORD *)this + 608);
      if (result)
        goto LABEL_85;
    }
    v79 = *(_OWORD *)a2;
    v80 = *((_OWORD *)a2 + 2);
    *((_OWORD *)v4 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)v4 + 2) = v80;
    *(_OWORD *)v4 = v79;
    v81 = *((_OWORD *)a2 + 3);
    v82 = *((_OWORD *)a2 + 4);
    v83 = *((_OWORD *)a2 + 6);
    *((_OWORD *)v4 + 5) = *((_OWORD *)a2 + 5);
    *((_OWORD *)v4 + 6) = v83;
    *((_OWORD *)v4 + 3) = v81;
    *((_OWORD *)v4 + 4) = v82;
    v84 = *((_OWORD *)a2 + 7);
    v85 = *((_OWORD *)a2 + 8);
    v86 = *((_OWORD *)a2 + 9);
    *(_QWORD *)(v4 + 157) = *(_QWORD *)((char *)a2 + 157);
    *((_OWORD *)v4 + 8) = v85;
    *((_OWORD *)v4 + 9) = v86;
    *((_OWORD *)v4 + 7) = v84;
LABEL_120:
    *((_BYTE *)this + 5260) = 1;
    return result;
  }
  if (!*((_BYTE *)this + 2701))
  {
    v56 = 0;
    goto LABEL_81;
  }
  v54 = v46 - 1;
  v55 = *((_QWORD *)this + 654);
  if (v54 < (*((_QWORD *)this + 655) - v55) >> 4)
  {
    v56 = *(unsigned __int8 *)(v55 + 16 * v54 + 12);
LABEL_81:
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 38, v56);
    goto LABEL_82;
  }
LABEL_121:
  __break(1u);
LABEL_122:
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 73, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v10, v11, v12, v13, 5);
LABEL_123:
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 27, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v10, v11, v12, v13, v59);
LABEL_124:
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 81, "temporal_index < kMaxTemporalStreams", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v10, v11, v12, v13, 4);
LABEL_125:
  v87 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 28, "temporal_index < kMaxTemporalStreams", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v10, v11, v12, v13, 4);
}

uint64_t webrtc::`anonymous namespace'::GetActiveLayers(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;

  if (*(_BYTE *)(a1 + 8))
    v1 = *(_DWORD *)(a1 + 4);
  else
    v1 = 0;
  if (*(_BYTE *)(a1 + 16))
    v2 = *(_DWORD *)(a1 + 12);
  else
    v2 = 0;
  v3 = *(_DWORD *)(a1 + 20);
  if (!*(_BYTE *)(a1 + 24))
    v3 = 0;
  if (*(_BYTE *)(a1 + 32))
    v4 = *(_DWORD *)(a1 + 28);
  else
    v4 = 0;
  if (v2 + v1 + v3 + v4)
  {
    v22 = 0;
    goto LABEL_71;
  }
  if (*(_BYTE *)(a1 + 40))
    v5 = *(_DWORD *)(a1 + 36);
  else
    v5 = 0;
  if (*(_BYTE *)(a1 + 48))
    v6 = *(_DWORD *)(a1 + 44);
  else
    v6 = 0;
  if (*(_BYTE *)(a1 + 56))
    v7 = *(_DWORD *)(a1 + 52);
  else
    v7 = 0;
  if (*(_BYTE *)(a1 + 64))
    v8 = *(_DWORD *)(a1 + 60);
  else
    v8 = 0;
  if (v6 + v5 + v7 + v8)
  {
    v22 = 1;
    goto LABEL_71;
  }
  if (*(_BYTE *)(a1 + 72))
    v9 = *(_DWORD *)(a1 + 68);
  else
    v9 = 0;
  if (*(_BYTE *)(a1 + 80))
    v10 = *(_DWORD *)(a1 + 76);
  else
    v10 = 0;
  if (*(_BYTE *)(a1 + 88))
    v11 = *(_DWORD *)(a1 + 84);
  else
    v11 = 0;
  if (*(_BYTE *)(a1 + 96))
    v12 = *(_DWORD *)(a1 + 92);
  else
    v12 = 0;
  if (v10 + v9 + v11 + v12)
  {
    v22 = 2;
    goto LABEL_71;
  }
  if (*(_BYTE *)(a1 + 104))
    v13 = *(_DWORD *)(a1 + 100);
  else
    v13 = 0;
  if (*(_BYTE *)(a1 + 112))
    v14 = *(_DWORD *)(a1 + 108);
  else
    v14 = 0;
  if (*(_BYTE *)(a1 + 120))
    v15 = *(_DWORD *)(a1 + 116);
  else
    v15 = 0;
  if (*(_BYTE *)(a1 + 128))
    v16 = *(_DWORD *)(a1 + 124);
  else
    v16 = 0;
  if (v14 + v13 + v15 + v16)
  {
    v22 = 3;
LABEL_71:
    v23 = v22 + 1;
    v24 = a1 + 32 * (v22 + 1);
    v25 = *(unsigned __int8 *)(v24 + 8);
    if (*(_BYTE *)(v24 + 8))
      v25 = *(_DWORD *)(v24 + 4);
    if (*(_BYTE *)(v24 + 16))
    {
      v26 = *(_DWORD *)(v24 + 12);
      v27 = a1 + 32 * v23;
      v28 = *(unsigned __int8 *)(v27 + 24);
      if (!*(_BYTE *)(v27 + 24))
        goto LABEL_76;
    }
    else
    {
      v26 = 0;
      v27 = a1 + 32 * v23;
      v28 = *(unsigned __int8 *)(v27 + 24);
      if (!*(_BYTE *)(v27 + 24))
      {
LABEL_76:
        if (*(_BYTE *)(v27 + 32))
        {
          if (!(v26 + v25 + v28 + *(_DWORD *)(v27 + 28)))
            return v22;
        }
        else if (!(v26 + v25 + v28))
        {
          return v22;
        }
        if (v22 == 3)
          return 3;
        v29 = v22 + 2;
        v30 = a1 + 32 * (v22 + 2);
        v31 = *(unsigned __int8 *)(v30 + 8);
        if (*(_BYTE *)(v30 + 8))
          v31 = *(_DWORD *)(v30 + 4);
        if (*(_BYTE *)(v30 + 16))
        {
          v32 = *(_DWORD *)(v30 + 12);
          v33 = a1 + 32 * v29;
          v34 = *(unsigned __int8 *)(v33 + 24);
          if (!*(_BYTE *)(v33 + 24))
          {
LABEL_89:
            if (*(_BYTE *)(v33 + 32))
            {
              if (!(v32 + v31 + v34 + *(_DWORD *)(v33 + 28)))
                return v22;
            }
            else if (!(v32 + v31 + v34))
            {
              return v22;
            }
            if (v22 == 2)
              return 2;
            v35 = a1 + 32 * (v22 + 3);
            v36 = *(unsigned __int8 *)(v35 + 8);
            if (*(_BYTE *)(v35 + 8))
              v36 = *(_DWORD *)(v35 + 4);
            if (*(_BYTE *)(v35 + 16))
              v37 = *(_DWORD *)(v35 + 12);
            else
              v37 = 0;
            v38 = a1 + 32 * (v22 + 3);
            v39 = *(unsigned __int8 *)(v38 + 24);
            if (*(_BYTE *)(v38 + 24))
              v39 = *(_DWORD *)(v38 + 20);
            if (*(_BYTE *)(v38 + 32))
              v40 = *(_DWORD *)(v38 + 28);
            else
              v40 = 0;
            if (v37 + v36 + v39 + v40)
            {
              if (v22 == 1)
                return 1;
              else
                return v22;
            }
            return v22;
          }
        }
        else
        {
          v32 = 0;
          v33 = a1 + 32 * v29;
          v34 = *(unsigned __int8 *)(v33 + 24);
          if (!*(_BYTE *)(v33 + 24))
            goto LABEL_89;
        }
        v34 = *(_DWORD *)(v33 + 20);
        goto LABEL_89;
      }
    }
    v28 = *(_DWORD *)(v27 + 20);
    goto LABEL_76;
  }
  if (*(_BYTE *)(a1 + 136))
    v17 = *(_DWORD *)(a1 + 132);
  else
    v17 = 0;
  if (*(_BYTE *)(a1 + 144))
    v18 = *(_DWORD *)(a1 + 140);
  else
    v18 = 0;
  if (*(_BYTE *)(a1 + 152))
    v19 = *(_DWORD *)(a1 + 148);
  else
    v19 = 0;
  if (*(_BYTE *)(a1 + 160))
    v20 = *(_DWORD *)(a1 + 156);
  else
    v20 = 0;
  if (v18 + v17 + v19 + v20)
    return 4;
  else
    return 0;
}

void webrtc::LibvpxVp9Encoder::SetRates(webrtc::LibvpxVp9Encoder *this, const webrtc::VideoEncoder::RateControlParameters *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (*((_BYTE *)this + 2732))
  {
    if (*(_DWORD *)(*((_QWORD *)this + 344) + 16))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
    }
    else
    {
      v17 = *((double *)a2 + 43);
      if (v17 >= 1.0)
      {
        *((_DWORD *)this + 591) = (v17 + 0.5);
        webrtc::LibvpxVp9Encoder::SetSvcRates(this, (const webrtc::VideoEncoder::RateControlParameters *)((char *)a2 + 176));
        *((_BYTE *)this + 5260) = 1;
      }
      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      {
        rtc::webrtc_logging_impl::Log("\r\t\a", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
      }
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
  }
}

void webrtc::LibvpxVp9Encoder::InitEncode(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int *v7;
  int v8;
  unsigned int v9;
  _BYTE *v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v72;
  int v74;
  int v75;
  int v76;
  _QWORD v77[3];
  void *v78;
  void *v79[3];

  if (!a2)
    return;
  if (!*(_DWORD *)(a2 + 20))
    return;
  v6 = *(_DWORD *)(a2 + 12);
  if (v6)
  {
    if (*(_DWORD *)(a2 + 8) > v6)
      return;
  }
  if (!*(_WORD *)(a2 + 4)
    || !*(_WORD *)(a2 + 6)
    || *(int *)(a3 + 4) < 1
    || *(unsigned __int8 *)(a2 + 356) > 3u
    || *(unsigned __int8 *)(a2 + 366) > 3u)
  {
    return;
  }
  v7 = (int *)*((_QWORD *)a1 + 346);
  if (v7)
  {
    v8 = *v7;
    v9 = *v7 & 0xFFFFFF00;
  }
  else
  {
    LOBYTE(v8) = 0;
    v9 = 0;
  }
  if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 48))(a1) & 0x80000000) != 0)
    return;
  if (*((_QWORD *)a1 + 344))
  {
    v10 = a1 + 1156;
    if (*((_QWORD *)a1 + 345))
      goto LABEL_17;
  }
  else
  {
    v37 = operator new();
    *((_QWORD *)a1 + 344) = v37;
    *(_OWORD *)v37 = 0u;
    *(_OWORD *)(v37 + 16) = 0u;
    *(_OWORD *)(v37 + 32) = 0u;
    *(_QWORD *)(v37 + 48) = 0;
    v10 = a1 + 1156;
    if (*((_QWORD *)a1 + 345))
    {
LABEL_17:
      *((_QWORD *)a1 + 342) = 0;
      v11 = a1 + 586;
      if (a1 + 586 == (_DWORD *)a2)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v38 = operator new();
  *((_QWORD *)a1 + 345) = v38;
  *(_OWORD *)v38 = 0u;
  *(_OWORD *)(v38 + 16) = 0u;
  *(_OWORD *)(v38 + 32) = 0u;
  *(_OWORD *)(v38 + 48) = 0u;
  *(_OWORD *)(v38 + 64) = 0u;
  *(_OWORD *)(v38 + 80) = 0u;
  *(_OWORD *)(v38 + 96) = 0u;
  *(_OWORD *)(v38 + 112) = 0u;
  *(_OWORD *)(v38 + 128) = 0u;
  *(_OWORD *)(v38 + 144) = 0u;
  *(_OWORD *)(v38 + 160) = 0u;
  *(_OWORD *)(v38 + 176) = 0u;
  *(_OWORD *)(v38 + 192) = 0u;
  *(_OWORD *)(v38 + 208) = 0u;
  *(_OWORD *)(v38 + 224) = 0u;
  *(_OWORD *)(v38 + 240) = 0u;
  *(_OWORD *)(v38 + 256) = 0u;
  *(_OWORD *)(v38 + 272) = 0u;
  *(_OWORD *)(v38 + 288) = 0u;
  *(_OWORD *)(v38 + 304) = 0u;
  *(_OWORD *)(v38 + 320) = 0u;
  *(_OWORD *)(v38 + 336) = 0u;
  *(_OWORD *)(v38 + 352) = 0u;
  *(_OWORD *)(v38 + 368) = 0u;
  *(_OWORD *)(v38 + 384) = 0u;
  *(_OWORD *)(v38 + 400) = 0u;
  *(_OWORD *)(v38 + 416) = 0u;
  *(_OWORD *)(v38 + 432) = 0u;
  *(_OWORD *)(v38 + 448) = 0u;
  *(_OWORD *)(v38 + 464) = 0u;
  *(_OWORD *)(v38 + 480) = 0u;
  *(_QWORD *)(v38 + 496) = 0;
  *((_QWORD *)a1 + 342) = 0;
  v11 = a1 + 586;
  if (a1 + 586 != (_DWORD *)a2)
LABEL_18:
    memcpy(v11, (const void *)a2, 0x17DuLL);
LABEL_19:
  a1[766] = 0;
  *(_OWORD *)(a1 + 758) = 0u;
  *(_OWORD *)(a1 + 762) = 0u;
  *(_OWORD *)(a1 + 750) = 0u;
  *(_OWORD *)(a1 + 754) = 0u;
  *(_OWORD *)(a1 + 742) = 0u;
  *(_OWORD *)(a1 + 746) = 0u;
  *(_OWORD *)(a1 + 734) = 0u;
  *(_OWORD *)(a1 + 738) = 0u;
  *(_OWORD *)(a1 + 726) = 0u;
  *(_OWORD *)(a1 + 730) = 0u;
  *(_OWORD *)(a1 + 718) = 0u;
  *(_OWORD *)(a1 + 722) = 0u;
  *(_OWORD *)(a1 + 710) = 0u;
  *(_OWORD *)(a1 + 714) = 0u;
  *(_OWORD *)(a1 + 702) = 0u;
  *(_OWORD *)(a1 + 706) = 0u;
  *(_OWORD *)(a1 + 694) = 0u;
  *(_OWORD *)(a1 + 698) = 0u;
  *v10 = 1;
  *((_QWORD *)a1 + 579) = 0;
  v12 = *(unsigned __int16 *)(a2 + 372);
  *((_WORD *)a1 + 2436) = v12;
  if (v12 >= 0x100)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      if (!v10[249])
        goto LABEL_97;
      v77[0] = webrtc::ScalabilityModeToString((rtc::webrtc_checks_impl *)v10[248]);
      v77[1] = v17;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
    }
    if (v10[249])
    {
      webrtc::CreateScalabilityStructure(v10[248], v77);
      v24 = v77[0];
      v77[0] = 0;
      v25 = *((_QWORD *)a1 + 608);
      *((_QWORD *)a1 + 608) = v24;
      if (v25)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        v26 = v77[0];
        v77[0] = 0;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        v24 = *((_QWORD *)a1 + 608);
      }
      if (!v24)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          return;
        goto LABEL_80;
      }
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v24 + 16))(v77);
      v34 = BYTE4(v77[0]);
      v10[17] = v77[0];
      v10[16] = v34;
      if (v10[249])
      {
        a1[1162] = webrtc::ScalabilityModeToInterLayerPredMode(v10[248], v27, v28, v29, v30, v31, v32, v33);
        goto LABEL_36;
      }
    }
LABEL_97:
    __break(1u);
    return;
  }
  v10[17] = *(_BYTE *)(a2 + 366);
  v13 = *(unsigned __int8 *)(a2 + 356);
  if (v13 <= 1)
    LOBYTE(v13) = 1;
  v10[16] = v13;
  a1[1162] = *(_DWORD *)(a2 + 368);
  v14 = v77[0];
  v77[0] = 0;
  v15 = *((_QWORD *)a1 + 608);
  *((_QWORD *)a1 + 608) = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v77[0];
    v77[0] = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
LABEL_36:
  v35 = v10[17];
  webrtc::FramerateControllerDeprecated::FramerateControllerDeprecated((webrtc::FramerateControllerDeprecated *)v77, (float)a1[591]);
  std::vector<webrtc::FramerateControllerDeprecated>::vector(v79, v35, (uint64_t)v77);
  std::vector<webrtc::FramerateControllerDeprecated>::operator=[abi:sn180100]((void **)a1 + 610, (uint64_t)v79);
  std::vector<webrtc::FramerateControllerDeprecated>::~vector[abi:sn180100](v79);
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](&v78);
  v36 = v10[17] > 1u || v10[16] > 1u;
  v10[22] = v36;
  if ((*(unsigned int (**)(_QWORD, char **, _QWORD, _QWORD))(**((_QWORD **)a1 + 1) + 48))(*((_QWORD *)a1 + 1), &vpx_codec_vp9_cx_algo, *((_QWORD *)a1 + 345), 0))
  {
    return;
  }
  v39 = a1[682];
  if (v39 == 2)
  {
    v42 = 16;
    v40 = 2306;
    v41 = 10;
LABEL_53:
    v50 = (_DWORD *)*((_QWORD *)a1 + 345);
    v50[2] = v39;
    v50[5] = v41;
    v50[6] = v41;
    goto LABEL_55;
  }
  if (!v39)
  {
    if (v7)
      v40 = v9 | v8;
    else
      v40 = 258;
    v41 = 8;
    v42 = 8;
    goto LABEL_53;
  }
  v40 = 0;
  v42 = 8;
LABEL_55:
  v51 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(**((_QWORD **)a1 + 1)
                                                                                            + 24))(*((_QWORD *)a1 + 1), 0, v40, *((unsigned __int16 *)a1 + 1174), *((unsigned __int16 *)a1 + 1175), 1, 0);
  v58 = 0;
  *((_QWORD *)a1 + 346) = v51;
  *(_DWORD *)(v51 + 20) = v42;
  v59 = *((unsigned __int16 *)a1 + 1174);
  v60 = *((_QWORD *)a1 + 345);
  *(_DWORD *)(v60 + 12) = v59;
  v61 = *((unsigned __int16 *)a1 + 1175);
  *(_DWORD *)(v60 + 16) = v61;
  *(_DWORD *)(v60 + 112) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v60 + 36) = v10[22];
  *(_QWORD *)(v60 + 28) = 0x15F9000000001;
  if (*(_BYTE *)(a2 + 380))
    v62 = 30;
  else
    v62 = 0;
  *(_DWORD *)(v60 + 48) = v62;
  *(_DWORD *)(v60 + 72) = 1;
  *(_QWORD *)(v60 + 40) = 0;
  v63 = a1[667];
  if (v63 == 1)
    v64 = 8;
  else
    v64 = 2;
  *(_DWORD *)(v60 + 116) = v64;
  *(_QWORD *)(v60 + 136) = 0x258000001F4;
  *(_OWORD *)(v60 + 120) = xmmword_208F0B6D0;
  v65 = (float)((float)((float)a1[591] * 300.0) / 10.0);
  if (v65 <= 0x12C)
    v65 = 300;
  a1[686] = v65;
  *(_DWORD *)(v60 + 160) = 0;
  v66 = *(_DWORD *)(a2 + 360);
  *(_DWORD *)(v60 + 164) = v66;
  *(_DWORD *)(v60 + 168) = v66;
  if (!v10[568])
    v58 = *(unsigned __int8 *)(a2 + 365);
  *(_DWORD *)(v60 + 52) = v58;
  v67 = *(_DWORD *)(a3 + 4);
  v68 = v61 * v59;
  v69 = v68 >> 12;
  v70 = v68 >> 10;
  if (v67 > 2 && v70 > 0xE0)
    v72 = 2;
  else
    v72 = 1;
  if (v67 > 4 && v69 > 0xE0)
    v72 = 4;
  *(_DWORD *)(v60 + 4) = v72;
  v74 = *(unsigned __int8 *)(a2 + 367);
  v10[280] = v74;
  if (v10[17] >= 2u)
  {
    if (v63 == 1 && !v74)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        return;
LABEL_80:
      rtc::webrtc_logging_impl::Log("\r\t", v43, v44, v45, v46, v47, v48, v49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
      return;
    }
    v75 = 1;
    if (v63 == 1 || v10[572])
      goto LABEL_86;
    goto LABEL_85;
  }
  if (!v10[572])
  {
LABEL_85:
    v75 = a1[1162] == 1;
    goto LABEL_86;
  }
  v75 = 1;
LABEL_86:
  v10[28] = v75;
  v76 = v10[16];
  switch(v76)
  {
    case 3:
      webrtc::GofInfoVP9::SetGofInfoVP9((uint64_t)(a1 + 770));
      v60 = *((_QWORD *)a1 + 345);
      *(_DWORD *)(v60 + 376) = 3;
      *(_DWORD *)(v60 + 216) = 3;
      *(_QWORD *)(v60 + 240) = 0x200000004;
      *(_DWORD *)(v60 + 248) = 1;
      *(_OWORD *)(v60 + 260) = xmmword_208F0B6E0;
      *(_DWORD *)(v60 + 276) = 2;
      v75 = v10[28];
      break;
    case 2:
      *((_QWORD *)a1 + 385) = 2;
      *((_WORD *)a1 + 1544) = 256;
      *(_WORD *)((char *)a1 + 3343) = 257;
      *((_WORD *)a1 + 1799) = 257;
      *((_BYTE *)a1 + 3853) = 2;
      *((_BYTE *)a1 + 3856) = 1;
      *(_DWORD *)(v60 + 376) = 2;
      *(_DWORD *)(v60 + 216) = 2;
      *(_QWORD *)(v60 + 240) = 0x100000002;
      *(_DWORD *)(v60 + 260) = 2;
      *(_QWORD *)(v60 + 264) = 0x100000000;
      break;
    case 1:
      *((_QWORD *)a1 + 385) = 1;
      *((_BYTE *)a1 + 3088) = 0;
      *((_BYTE *)a1 + 3343) = 1;
      *((_BYTE *)a1 + 3598) = 1;
      *((_BYTE *)a1 + 3853) = 1;
      *(_DWORD *)(v60 + 376) = 0;
      *(_DWORD *)(v60 + 216) = 1;
      *(_DWORD *)(v60 + 240) = 1;
      *(_QWORD *)(v60 + 260) = 1;
      break;
    default:
      return;
  }
  if (!v75
    || (*(_DWORD *)(v60 + 376) = 1, v10[16] < 2u)
    || v10[17] < 2u
    || a1[667] != 1)
  {
    *((_OWORD *)a1 + 314) = 0u;
    *((_OWORD *)a1 + 313) = 0u;
    *((_OWORD *)a1 + 312) = 0u;
    *((_OWORD *)a1 + 311) = 0u;
    *((_OWORD *)a1 + 310) = 0u;
    *((_OWORD *)a1 + 309) = 0u;
    *((_OWORD *)a1 + 308) = 0u;
    *((_OWORD *)a1 + 307) = 0u;
    webrtc::LibvpxVp9Encoder::InitAndSetControlSettings((webrtc::LibvpxVp9Encoder *)a1, (const webrtc::VideoCodec *)a2, (float32x4_t)0, v52, v53, v54, v55, v56, v57);
  }
}

void webrtc::`anonymous namespace'::CreateVp9ScalabilityStructure(webrtc::_anonymous_namespace_ *this, const webrtc::VideoCodec *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  _QWORD *v8;
  int v9;
  unsigned int v10;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  int v36;
  size_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char __s[20];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v3 = *((unsigned __int8 *)a2 + 366);
  v4 = *((unsigned __int8 *)a2 + 356);
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = *((unsigned __int8 *)a2 + 356);
  if ((_DWORD)v3 == 1 && v4 <= 1)
  {
    v8 = (_QWORD *)operator new();
    *v8 = &unk_24C0BFBC0;
    v8[1] = 0;
    *((_WORD *)v8 + 4) = 257;
    *(_QWORD *)this = v8;
    return;
  }
  v61 = __s;
  v62 = 20;
  if (*((_DWORD *)a2 + 81) == 1)
    goto LABEL_10;
  v9 = *((_DWORD *)a2 + 92);
  v10 = v3 - 1;
  if ((_DWORD)v3 == 1 || v9 == 1)
  {
    v12 = 76;
    goto LABEL_27;
  }
  if (v9 != 2)
  {
    v12 = 83;
LABEL_27:
    *(_WORD *)__s = v12;
    v63 = 1;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v61, "%d", v3);
    v17 = v62;
    v18 = v63 + 1;
    memcpy(&v61[v63], "T", v62 != v63 + 1);
    v19 = v63;
    if (v17 != v18)
      v19 = v63 + 1;
    v63 = v19;
    v61[v19] = 0;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v61, "%d", v5);
    if (v3 < 2)
      goto LABEL_44;
    goto LABEL_30;
  }
  strcpy(__s, "L");
  v63 = 1;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v61, "%d", v3);
  v13 = v62;
  v14 = v63 + 1;
  memcpy(&v61[v63], "T", v62 != v63 + 1);
  v15 = v63;
  if (v13 != v14)
    v15 = v63 + 1;
  v63 = v15;
  v61[v15] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v61, "%d", v5);
  if ((unint64_t)(v62 + ~v63) >= 4)
    v16 = 4;
  else
    v16 = v62 + ~v63;
  memcpy(&v61[v63], "_KEY", v16);
  v63 += v16;
  v61[v63] = 0;
  if (v3 < 2)
  {
LABEL_44:
    v37 = strlen(__s);
    v38 = 0;
    {
      v38 += 48;
      if (v38 == 1632)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t\t", v47, v48, v49, v50, v51, v52, v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
        goto LABEL_10;
      }
    }
    if (v39 >= 0x22)
    {
      *(_QWORD *)this = 0;
    }
    else
    {
      (*((void (**)(void))*(&off_24C0B6588 + v39) + 1))();
      if (*(_QWORD *)this)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
          return;
LABEL_58:
        rtc::webrtc_logging_impl::Log("\r\t\t", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
        return;
      }
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
    goto LABEL_58;
  }
LABEL_30:
  if (*((_DWORD *)a2 + 9 * v10 + 36) == *((unsigned __int16 *)a2 + 2)
    && *((_DWORD *)a2 + 9 * v10 + 37) == *((unsigned __int16 *)a2 + 3))
  {
    v20 = *((_DWORD *)a2 + 45);
    v21 = *((_DWORD *)a2 + 36);
    if (v20 == 2 * v21)
    {
      v22 = 2;
      v23 = 1;
    }
    else
    {
      if (3 * v21 != 2 * v20)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          goto LABEL_10;
        goto LABEL_55;
      }
      v31 = v62;
      v32 = v63 + 1;
      memcpy(&v61[v63], "h", v62 != v63 + 1);
      v33 = v63;
      if (v31 != v32)
        v33 = v63 + 1;
      v63 = v33;
      v61[v33] = 0;
      v21 = *((_DWORD *)a2 + 36);
      v22 = 3;
      v23 = 2;
    }
    v34 = (_DWORD *)((char *)a2 + 184);
    v35 = v3 - 1;
    while (1)
    {
      v36 = *(v34 - 1);
      if (v36 * v23 != v21 * v22 || *v34 * v23 != *(v34 - 9) * v22)
        break;
      v34 += 9;
      v21 = v36;
      if (!--v35)
        goto LABEL_44;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_10;
LABEL_55:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v54, v55, v56, v57, v58, v59, v60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
    goto LABEL_10;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
LABEL_10:
  *(_QWORD *)this = 0;
}

_QWORD *std::vector<webrtc::FramerateControllerDeprecated>::vector(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = 120 * a2;
    v6 = (char *)operator new(120 * a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[v5];
    a1[2] = v7;
    while (1)
    {
      *(_OWORD *)v6 = *(_OWORD *)a3;
      *((_DWORD *)v6 + 4) = *(_DWORD *)(a3 + 16);
      *(_OWORD *)(v6 + 24) = 0u;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_OWORD *)(v6 + 56) = 0u;
      v9 = *(_QWORD *)(a3 + 56);
      v10 = v9 / 0xAA;
      v11 = *(_QWORD *)(a3 + 32);
      if (*(_QWORD *)(a3 + 40) == v11)
        break;
      v12 = (__int128 *)(*(_QWORD *)(v11 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA));
      v13 = *(_QWORD *)(a3 + 64) + v9;
      v14 = (_QWORD *)(v11 + 8 * (v13 / 0xAA));
      v15 = *v14 + 24 * (v13 % 0xAA);
      v16 = (_QWORD *)(v11 + 8 * v10);
      if ((__int128 *)v15 == v12)
        goto LABEL_9;
      v8 = 170 * (v14 - v16)
         - 0x5555555555555555 * ((uint64_t)(v15 - *v14) >> 3)
         + 0x5555555555555555 * (((uint64_t)v12 - *v16) >> 3);
LABEL_4:
      std::deque<webrtc::RateStatistics::Bucket>::__append_with_size[abi:sn180100]<std::__deque_iterator<webrtc::RateStatistics::Bucket,webrtc::RateStatistics::Bucket const*,webrtc::RateStatistics::Bucket const&,webrtc::RateStatistics::Bucket const* const*,long,170l>>((uint64_t)(v6 + 24), v16, v12, v8);
      *(_OWORD *)(v6 + 72) = *(_OWORD *)(a3 + 72);
      v6[88] = *(_BYTE *)(a3 + 88);
      *((_DWORD *)v6 + 23) = *(_DWORD *)(a3 + 92);
      *((_DWORD *)v6 + 24) = *(_DWORD *)(a3 + 96);
      *(_OWORD *)(v6 + 104) = *(_OWORD *)(a3 + 104);
      v6 += 120;
      if (v6 == v7)
      {
        a1[1] = v7;
        return a1;
      }
    }
    v12 = 0;
    v16 = (_QWORD *)(v11 + 8 * v10);
LABEL_9:
    v8 = 0;
    goto LABEL_4;
  }
  return a1;
}

void **std::vector<webrtc::FramerateControllerDeprecated>::operator=[abi:sn180100](void **a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void *v6;
  void **v7;

  v4 = (void **)*a1;
  if (*a1)
  {
    v5 = (void **)a1[1];
    v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        v7 = v5 - 15;
        std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](v5 - 12);
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void **)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return a1;
}

double webrtc::GofInfoVP9::SetGofInfoVP9(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 4;
  *(_BYTE *)(a1 + 773) = 4;
  *(_BYTE *)(a1 + 776) = 1;
  *(_BYTE *)(a1 + 779) = 2;
  *(_DWORD *)(a1 + 8) = 33620480;
  result = 7.74860419e-304;
  *(_DWORD *)(a1 + 263) = 16843009;
  *(_DWORD *)(a1 + 518) = 16843009;
  *(_BYTE *)(a1 + 782) = 1;
  return result;
}

uint64_t webrtc::LibvpxVp9Encoder::InitAndSetControlSettings(webrtc::LibvpxVp9Encoder *this, const webrtc::VideoCodec *a2, float32x4_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  int *v47;
  char *v48;
  int v49;
  const webrtc::VideoCodec *v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int *v56;
  char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  const webrtc::VideoCodec *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  const float *v73;
  const float *v74;
  float32x4_t v75;
  uint64_t v76;
  float32x4_t *v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  int *v82;
  char *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  unint64_t v121;
  const float *v122;
  unint64_t v123;
  unint64_t v124;
  _DWORD *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  void (*v130)(void);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  const float *v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  float32x4_t v142;
  float32x4_t *v143;
  uint64_t v144;
  float32x4_t v145;
  float32x4_t *v146;
  uint64_t v147;
  const webrtc::VideoCodec *v148;
  uint64_t v149[3];
  __int128 v150[9];
  _OWORD v151[2];
  int v152;
  void *__p;
  char *v154;
  uint64_t v155;
  _BYTE v156[388];
  void *v157;
  void *v158;
  void *v159;
  char v160;
  void (**v161)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v162;
  void *v163;
  void *v164;
  char v165;
  void (**v166)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v167;
  void *v168;
  void *v169;
  char v170;
  char v171;
  void *v172;
  uint64_t v173;
  float32x4x4_t v174;

  v173 = *MEMORY[0x24BDAC8D0];
  v11 = (unsigned __int8 *)this + 2776;
  v12 = *((unsigned __int8 *)this + 4641);
  v13 = *((unsigned __int8 *)this + 4640) * v12;
  v14 = (_DWORD *)*((_QWORD *)this + 345);
  if ((_DWORD)v13)
  {
    if (v13 < 8
      || v11 < (unsigned __int8 *)v14 + 124
      && v14 + 29 < (_DWORD *)this
                  + *((unsigned __int8 *)this + 4640) * (unint64_t)*((unsigned __int8 *)this + 4641)
                  + 706)
    {
      v15 = 0;
LABEL_6:
      v16 = v13 - v15;
      v17 = (_DWORD *)((char *)this + 4 * v15 + 2824);
      do
      {
        *(v17 - 12) = v14[30];
        *v17++ = v14[29];
        --v16;
      }
      while (v16);
      goto LABEL_8;
    }
    v73 = (const float *)(v14 + 30);
    a3 = vld1q_dup_f32(v73);
    v15 = (unsigned __int16)(*((unsigned __int8 *)this + 4640) * (_WORD)v12) & 0xFFFC;
    v74 = (const float *)(v14 + 29);
    v75 = vld1q_dup_f32(v74);
    v76 = v15;
    v77 = (float32x4_t *)((char *)this + 2776);
    do
    {
      *v77 = a3;
      v77[3] = v75;
      ++v77;
      v76 -= 4;
    }
    while (v76);
    if (v15 != v13)
      goto LABEL_6;
  }
LABEL_8:
  v14[43] = v12;
  v18 = *((_QWORD *)this + 608);
  if (v18)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v18 + 16))(&__p);
    v19 = __p;
    if ((int)__p < 1)
      goto LABEL_27;
    if (__p >= 4)
    {
      v20 = __p & 0xFFFFFFFC;
      v27 = (__int128 *)v156;
      v28 = v11 + 96;
      v29 = v20;
      do
      {
        *v28 = *(v27 - 1);
        v30 = *v27++;
        v28[3] = v30;
        ++v28;
        v29 -= 4;
      }
      while (v29);
      if (v20 == v19)
      {
LABEL_27:
        __p = 0;
        v154 = 0;
        v155 = 0;
        if (*((_DWORD *)this + 680) != -1)
        {
          v36 = *((_QWORD *)this + 651);
          v37 = *((_QWORD *)this + 652);
          v38 = v37 - v36;
          if (v37 == v36)
          {
            v39 = 0;
          }
          else
          {
            if (0xCCCCCCCCCCCCCCCDLL * (v38 >> 2) >= 0xCCCCCCCCCCCCCCDLL)
LABEL_201:
              abort();
            v38 = (int64_t)operator new(v38);
            v39 = 0;
            __p = (void *)v38;
            do
            {
              v40 = v36 + v39;
              v41 = v38 + v39;
              *(_DWORD *)v41 = *(_DWORD *)(v36 + v39);
              *(_OWORD *)(v41 + 4) = *(_OWORD *)(v36 + v39 + 4);
              v39 += 20;
            }
            while (v40 + 20 != v37);
          }
          v154 = (char *)(v38 + v39);
          v50 = (const webrtc::VideoCodec *)*((_QWORD *)this + 654);
          *((_QWORD *)this + 655) = v50;
          v148 = a2;
          if (v11[1870])
          {
LABEL_43:
            if (v11[1865])
            {
              v51 = 0;
              while (1)
              {
                v52 = (char *)__p;
                v53 = (unint64_t)v154;
                if (v154 != __p)
                {
                  v54 = 0xCCCCCCCCCCCCCCCDLL * ((v154 - (_BYTE *)__p) >> 2);
                  do
                  {
                    v55 = v54 >> 1;
                    v56 = (int *)&v52[20 * (v54 >> 1)];
                    v58 = *v56;
                    v57 = (char *)(v56 + 5);
                    v54 += ~(v54 >> 1);
                    if (v58 > *((_DWORD *)this + 9 * v51 + 623) * *((_DWORD *)this + 9 * v51 + 622))
                      v54 = v55;
                    else
                      v52 = v57;
                  }
                  while (v54);
                  v53 = (unint64_t)v52;
                }
                v60 = *(_QWORD *)(v53 - 16);
                v59 = *(_QWORD *)(v53 - 8);
                v61 = *((_QWORD *)this + 656);
                if ((unint64_t)v50 >= v61)
                {
                  v62 = (const webrtc::VideoCodec *)*((_QWORD *)this + 654);
                  v63 = (v50 - v62) >> 4;
                  v53 = v63 + 1;
                  if ((unint64_t)(v63 + 1) >> 60)
                    goto LABEL_201;
                  v64 = v61 - (_QWORD)v62;
                  if (v64 >> 3 > v53)
                    v53 = v64 >> 3;
                  v65 = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0;
                  v61 = 0xFFFFFFFFFFFFFFFLL;
                  if (!v65)
                    v61 = v53;
                  if (!v61)
                    goto LABEL_196;
                  if (v61 >> 60)
                    goto LABEL_202;
                  v66 = 16 * v61;
                  v67 = (char *)operator new(16 * v61);
                  v68 = &v67[16 * v63];
                  *(_QWORD *)v68 = v60;
                  *((_QWORD *)v68 + 1) = v59;
                  v69 = v68;
                  if (v50 != v62)
                  {
                    do
                    {
                      v70 = *((_QWORD *)v50 - 2);
                      v50 = (const webrtc::VideoCodec *)((char *)v50 - 16);
                      v71 = *(_QWORD *)((char *)v50 + 5);
                      *(v69 - 2) = v70;
                      v69 -= 2;
                      *(_QWORD *)((char *)v69 + 5) = v71;
                    }
                    while (v50 != v62);
                    v50 = v62;
                  }
                  v72 = &v67[v66];
                  *((_QWORD *)this + 654) = v69;
                  a2 = (const webrtc::VideoCodec *)(v68 + 16);
                  *((_QWORD *)this + 655) = v68 + 16;
                  *((_QWORD *)this + 656) = v72;
                  if (v50)
                    operator delete(v50);
                }
                else
                {
                  if (!v50)
                    goto LABEL_196;
                  *(_QWORD *)v50 = v60;
                  *((_QWORD *)v50 + 1) = v59;
                  a2 = (const webrtc::VideoCodec *)((char *)v50 + 16);
                }
                *((_QWORD *)this + 655) = a2;
                ++v51;
                v50 = a2;
                if (v51 >= v11[1865])
                  goto LABEL_95;
              }
            }
            goto LABEL_95;
          }
LABEL_77:
          v79 = (char *)__p;
          v53 = (unint64_t)v154;
          if (v154 != __p)
          {
            v80 = 0xCCCCCCCCCCCCCCCDLL * ((v154 - (_BYTE *)__p) >> 2);
            do
            {
              v81 = v80 >> 1;
              v82 = (int *)&v79[20 * (v80 >> 1)];
              v84 = *v82;
              v83 = (char *)(v82 + 5);
              v80 += ~(v80 >> 1);
              if (v84 > *((unsigned __int16 *)this + 1175) * *((unsigned __int16 *)this + 1174))
                v80 = v81;
              else
                v79 = v83;
            }
            while (v80);
            v53 = (unint64_t)v79;
          }
          v86 = *(_QWORD *)(v53 - 16);
          v85 = *(_QWORD *)(v53 - 8);
          v61 = *((_QWORD *)this + 656);
          if ((unint64_t)v50 >= v61)
          {
            v88 = v61 - (_QWORD)v50;
            v89 = v88 >> 3;
            if ((unint64_t)(v88 >> 3) <= 1)
              v89 = 1;
            v65 = (unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0;
            v90 = 0xFFFFFFFFFFFFFFFLL;
            if (!v65)
              v90 = v89;
            if (v90 >> 60)
LABEL_202:
              std::__throw_bad_array_new_length[abi:sn180100]();
            v91 = 2 * v90;
            v92 = operator new(16 * v90);
            *v92 = v86;
            v92[1] = v85;
            v87 = v92 + 2;
            *((_QWORD *)this + 654) = v92;
            *((_QWORD *)this + 655) = v92 + 2;
            *((_QWORD *)this + 656) = &v92[v91];
            if (v50)
              operator delete(v50);
          }
          else
          {
            if (!v50)
              goto LABEL_196;
            *(_QWORD *)v50 = v86;
            *((_QWORD *)v50 + 1) = v85;
            v87 = (_QWORD *)((char *)v50 + 16);
          }
          *((_QWORD *)this + 655) = v87;
LABEL_95:
          if (__p)
            operator delete(__p);
          webrtc::SvcRateAllocator::SvcRateAllocator((webrtc::SvcRateAllocator *)&__p, (webrtc::LibvpxVp9Encoder *)((char *)this + 2344));
          a2 = v148;
          v149[0] = (1000 * *((_DWORD *)v148 + 2));
          v149[1] = v149[0];
          LODWORD(v93) = *((_DWORD *)v148 + 5);
          *(double *)&v149[2] = (double)v93;
          webrtc::SvcRateAllocator::Allocate((uint64_t)&__p, v149, v94, v95, v96, v97, (uint64_t)v150);
          v98 = v150[8];
          *((_OWORD *)this + 300) = v150[7];
          *((_OWORD *)this + 301) = v98;
          *((_OWORD *)this + 302) = v151[0];
          v99 = v150[2];
          *((_OWORD *)this + 296) = v150[3];
          v100 = v150[5];
          *((_OWORD *)this + 297) = v150[4];
          *((_OWORD *)this + 298) = v100;
          *((_OWORD *)this + 299) = v150[6];
          v101 = v150[1];
          *((_OWORD *)this + 293) = v150[0];
          *((_OWORD *)this + 294) = v101;
          *(_QWORD *)((char *)this + 4845) = *(_QWORD *)((char *)v151 + 13);
          *((_OWORD *)this + 295) = v99;
          webrtc::LibvpxVp9Encoder::SetSvcRates(this, (webrtc::LibvpxVp9Encoder *)((char *)this + 4688));
          v102 = (*(uint64_t (**)(_QWORD, _QWORD, char **))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), &vpx_codec_vp9_cx_algo);
          if ((_DWORD)v102)
          {
            v103 = v102;
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            {
              (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 216))(*((_QWORD *)this + 1), v103);
              rtc::webrtc_logging_impl::Log("\r\t\t", v104, v105, v106, v107, v108, v109, v110, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
            }
            v78 = 4294967289;
            __p = off_24C0C1DD8;
            if ((v171 & 1) != 0)
              goto LABEL_101;
            goto LABEL_102;
          }
          v50 = (webrtc::LibvpxVp9Encoder *)((char *)this + 5200);
          if (!*((_BYTE *)this + 5200))
          {
LABEL_139:
            (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 26, *((unsigned int *)this + 686));
            if (*((_BYTE *)v148 + 364))
              v128 = 3;
            else
              v128 = 0;
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 36, v128);
            (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 35, 0);
            (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 63, 0);
            if (!v11[1870]
              || ((*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 39, 1), (*(void (**)(_QWORD, _QWORD, uint64_t, char *))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 41, (char *)this + 2776), !v11[1870])|| !*(_BYTE *)v50)
            {
              (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 13, *(unsigned int *)(*((_QWORD *)this + 655) - 16));
            }
            if (v11[1865] < 2u)
            {
LABEL_183:
              *(_QWORD *)&v150[0] = webrtc::LibvpxVp9Encoder::EncoderOutputCodedPacketCallback;
              *((_QWORD *)&v150[0] + 1) = this;
              (*(void (**)(_QWORD, _QWORD, uint64_t, __int128 *))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 45, v150);
              (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 33, *(_DWORD *)(*((_QWORD *)this + 345) + 4) >> 1);
              (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 55, 1);
              if (*(_BYTE *)v50)
              {
                if (*((_DWORD *)this + 667) != 1)
                  goto LABEL_186;
              }
              else
              {
                (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 38, *((unsigned __int8 *)a2 + 357));
                if (*((_DWORD *)this + 667) != 1)
                {
LABEL_186:
                  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 17, 1);
                  v78 = 0;
                  *((_BYTE *)this + 2732) = 1;
                  *((_BYTE *)v50 + 60) = 1;
                  __p = off_24C0C1DD8;
                  if ((v171 & 1) != 0)
LABEL_101:
                    operator delete(v172);
LABEL_102:
                  v166 = off_24C0B4170;
                  if (v170 < 0)
                  {
                    operator delete(v169);
                    v111 = v167;
                    if (!v167)
                      goto LABEL_105;
                  }
                  else
                  {
                    v111 = v167;
                    if (!v167)
                    {
LABEL_105:
                      v161 = off_24C0B4170;
                      if (v165 < 0)
                        operator delete(v164);
                      if (v162)
                      {
                        v163 = v162;
                        operator delete(v162);
                      }
                      *(_QWORD *)&v156[380] = off_24C0B4170;
                      if (v160 < 0)
                        operator delete(v159);
                      if (v157)
                      {
                        v158 = v157;
                        operator delete(v157);
                      }
                      return v78;
                    }
                  }
                  v168 = v111;
                  operator delete(v111);
                  goto LABEL_105;
                }
              }
              (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 43, 1);
              goto LABEL_186;
            }
            v129 = *((_DWORD *)this + 1162);
            if (v129)
            {
              if (v129 == 1)
              {
                v130 = *(void (**)(void))(**((_QWORD **)this + 1) + 88);
              }
              else
              {
                if (v129 != 2)
                {
                  a5 = (char *)this + 4656;
                  *((_QWORD *)this + 584) = 0;
                  *((_OWORD *)this + 291) = 0u;
                  if (!*((_BYTE *)this + 5432))
                    goto LABEL_164;
                  goto LABEL_168;
                }
                v130 = *(void (**)(void))(**((_QWORD **)this + 1) + 88);
              }
            }
            else
            {
              v130 = *(void (**)(void))(**((_QWORD **)this + 1) + 88);
            }
            v130();
            v129 = *((_DWORD *)this + 1162);
            a5 = (char *)this + 4656;
            *((_QWORD *)this + 582) = 0;
            *((_QWORD *)this + 584) = 0;
            *((_QWORD *)this + 583) = 0;
            *((_DWORD *)this + 1170) = 0;
            if (v129 == 1)
            {
              if (*((_DWORD *)this + 667) == 1)
              {
                v53 = v11[1865];
                if (v53 >= 2)
                {
                  *(_QWORD *)((char *)this + 4676) = 0x500000003;
                  v131 = *((_QWORD *)this + 345);
                  v61 = v131 + 48;
                  if (v53 < 0xC
                    || (unint64_t)a5 < v131 + 52 && v61 < (unint64_t)this + 4 * v53 + 4656)
                  {
                    v132 = 0;
LABEL_160:
                    v133 = v53 - v132;
                    v134 = (_DWORD *)((char *)this + 4 * v132 + 4656);
                    do
                    {
                      *v134++ = *(_DWORD *)v61;
                      --v133;
                    }
                    while (v133);
                    goto LABEL_182;
                  }
LABEL_197:
                  v132 = v53 & 0xF8;
                  v145 = vld1q_dup_f32((const float *)v61);
                  v146 = (float32x4_t *)((char *)this + 4672);
                  v147 = v132;
                  do
                  {
                    v146[-1] = v145;
                    *v146 = v145;
                    v146 += 2;
                    v147 -= 8;
                  }
                  while (v147);
                  if (v132 == v53)
                    goto LABEL_182;
                  goto LABEL_160;
                }
                v129 = 1;
                if (!*((_BYTE *)this + 5432))
                {
LABEL_164:
                  *((_DWORD *)this + 1169) = 2;
                  *((_DWORD *)this + 1170) = 0x7FFFFFFF;
                  v135 = v11[1865];
                  if (!v11[1865])
                    goto LABEL_182;
                  goto LABEL_176;
                }
LABEL_168:
                if (*((_DWORD *)this + 1359) == 1 && v11[2128] && *((_QWORD *)this + 608))
                {
                  if ((v129 & 0xFFFFFFFD) != 0)
                    v136 = 2;
                  else
                    v136 = 1;
                }
                else
                {
                  v136 = 2;
                }
                *((_DWORD *)this + 1169) = v136;
                *((_DWORD *)this + 1170) = *((_DWORD *)this + 1360);
                v135 = v11[1865];
                if (!v11[1865])
                  goto LABEL_182;
LABEL_176:
                v137 = *((_QWORD *)this + 345);
                v138 = (const float *)(v137 + 48);
                if (v135 >= 0xC
                  && ((unint64_t)this + 4656 >= v137 + 52 || v138 >= (const float *)this + v135 + 1164))
                {
                  v139 = v135 & 0xF8;
                  v142 = vld1q_dup_f32(v138);
                  v143 = (float32x4_t *)((char *)this + 4672);
                  v144 = v139;
                  do
                  {
                    v143[-1] = v142;
                    *v143 = v142;
                    v143 += 2;
                    v144 -= 8;
                  }
                  while (v144);
                  if (v139 == v135)
                    goto LABEL_182;
                }
                else
                {
                  v139 = 0;
                }
                v140 = v135 - v139;
                v141 = (_DWORD *)((char *)this + 4 * v139 + 4656);
                do
                {
                  *v141++ = *(_DWORD *)v138;
                  --v140;
                }
                while (v140);
LABEL_182:
                (*(void (**)(_QWORD, _QWORD, uint64_t, char *))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 61, a5);
                goto LABEL_183;
              }
              v129 = 1;
            }
            if (!*((_BYTE *)this + 5432))
              goto LABEL_164;
            goto LABEL_168;
          }
          v61 = v11[1865];
          if (v11[1865])
          {
            v113 = *((_QWORD *)this + 654);
            v114 = (uint64_t)(*((_QWORD *)this + 655) - v113) >> 4;
            v115 = v61 - 1;
            if (v114 >= v61 - 1)
              v116 = v61 - 1;
            else
              v116 = (uint64_t)(*((_QWORD *)this + 655) - v113) >> 4;
            v117 = v116 + 1;
            if (v117 <= 0xC)
              goto LABEL_124;
            if (v114 < v115)
              v115 = (uint64_t)(*((_QWORD *)this + 655) - v113) >> 4;
            if ((unint64_t)this + 2968 >= v113 + 16 * v115 + 12
              || v113 >= (unint64_t)this + 4 * v115 + 3024)
            {
              v119 = v117 & 3;
              if ((v117 & 3) == 0)
                v119 = 4;
              v118 = v117 - v119;
              v120 = v11 + 192;
              v121 = v118;
              v122 = (const float *)*((_QWORD *)this + 654);
              do
              {
                v174 = vld4q_f32(v122);
                v122 += 16;
                *(float32x4_t *)v120 = v174.val[0];
                *(float32x4_t *)(v120 + 52) = v174.val[2];
                v120 += 16;
                v121 -= 4;
              }
              while (v121);
            }
            else
            {
LABEL_124:
              v118 = 0;
            }
            v123 = v114 - v118;
            v124 = v61 - v118;
            v53 = v113 + 16 * v118 + 8;
            v125 = (_DWORD *)((char *)this + 4 * v118 + 3020);
            while (v123)
            {
              *(v125 - 13) = *(_DWORD *)(v53 - 8);
              v126 = *(_DWORD *)v53;
              v53 += 16;
              *v125++ = v126;
              --v123;
              if (!--v124)
                goto LABEL_134;
            }
            goto LABEL_196;
          }
LABEL_134:
          if (!*((_BYTE *)v148 + 357))
          {
            v127 = 0;
            goto LABEL_138;
          }
          --v61;
          v53 = *((_QWORD *)this + 654);
          if (v61 < (uint64_t)(*((_QWORD *)this + 655) - v53) >> 4)
          {
            v127 = *(unsigned __int8 *)(v53 + 16 * v61 + 12);
LABEL_138:
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1), *((_QWORD *)this + 344), 38, v127);
            goto LABEL_139;
          }
LABEL_196:
          __break(1u);
          goto LABEL_197;
        }
        v152 = 0;
        v150[0] = xmmword_208F0B6C0;
        v42 = std::vector<std::pair<int,webrtc::LibvpxVp9Encoder::PerformanceFlags::ParameterSet>>::emplace<int,webrtc::LibvpxVp9Encoder::PerformanceFlags::ParameterSet>((unint64_t *)&__p, 0, &v152, v150);
        v43 = (char *)__p;
        v44 = v154;
        *(_QWORD *)(v42 + 1) = 0x900000009;
        v42[3] = 1;
        *((_BYTE *)v42 + 16) = 1;
        v152 = 101376;
        if (v44 == v43)
        {
          v43 = v44;
        }
        else
        {
          v45 = 0xCCCCCCCCCCCCCCCDLL * ((v44 - v43) >> 2);
          do
          {
            v46 = v45 >> 1;
            v47 = (int *)&v43[20 * (v45 >> 1)];
            v49 = *v47;
            v48 = (char *)(v47 + 5);
            v45 += ~(v45 >> 1);
            if (v49 < 101376)
              v43 = v48;
            else
              v45 = v46;
          }
          while (v45);
          if (v43 != v44 && *(int *)v43 <= 101376)
          {
LABEL_76:
            *(_QWORD *)(v43 + 4) = 0x900000009;
            *((_DWORD *)v43 + 3) = 0;
            v43[16] = 1;
            v50 = (const webrtc::VideoCodec *)*((_QWORD *)this + 654);
            *((_QWORD *)this + 655) = v50;
            v148 = a2;
            if (v11[1870])
              goto LABEL_43;
            goto LABEL_77;
          }
        }
        v150[0] = xmmword_208F0B6C0;
        v43 = (char *)std::vector<std::pair<int,webrtc::LibvpxVp9Encoder::PerformanceFlags::ParameterSet>>::emplace<int,webrtc::LibvpxVp9Encoder::PerformanceFlags::ParameterSet>((unint64_t *)&__p, (uint64_t)v43, &v152, v150);
        goto LABEL_76;
      }
    }
    else
    {
      v20 = 0;
    }
    v31 = v19 - v20;
    v32 = 4 * v20;
    v33 = (_DWORD *)((char *)this + 4 * v20 + 2872);
    v34 = (int *)((char *)&__p + v32 + 28);
    do
    {
      *v33 = *(v34 - 4);
      v35 = *v34++;
      v33[12] = v35;
      ++v33;
      --v31;
    }
    while (v31);
    goto LABEL_27;
  }
  if (v12 < 2)
    goto LABEL_27;
  v21 = (_DWORD *)((char *)this + 2492);
  v22 = (_DWORD *)((char *)this + 2872);
  while (1)
  {
    v23 = *(v21 - 1);
    if ((int)v23 <= 0)
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc", 743, "layer.width > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a6, a7, a8, a9, *(v21 - 1));
    v24 = *((unsigned __int16 *)this + 1174);
    v25 = v24 / v23;
    if (v24 / v23 * v23 != v24)
      return 4294967292;
    a3.i32[0] = v24 / v23;
    *(int8x8_t *)a3.f32 = vcnt_s8(*(int8x8_t *)a3.f32);
    a3.i16[0] = vaddlv_u8(*(uint8x8_t *)a3.f32);
    if (*v21 * v25 != *((unsigned __int16 *)this + 1175) || a3.i32[0] > 1u)
      return 4294967292;
    *v22 = 1;
    v22[12] = v25;
    v21 += 9;
    ++v22;
    if (!--v12)
      goto LABEL_27;
  }
}

uint64_t webrtc::LibvpxVp9Encoder::Encode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BYTE *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  char *v19;
  int v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  int32x4_t v24;
  int32x4_t *v25;
  const char *v26;
  const char *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  int *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  _DWORD *v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  int v66;
  char *v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  signed int v78;
  unint64_t v79;
  unint64_t v80;
  signed int *v81;
  _DWORD *v82;
  signed int v83;
  int v84;
  uint64_t v85;
  int v86;
  webrtc::VideoFrameBuffer *v87;
  webrtc::VideoFrameBuffer *I010;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  _DWORD *v98;
  int v99;
  _DWORD *v100;
  int v101;
  char *v102;
  int *v103;
  int v104;
  _DWORD *v105;
  int v106;
  _DWORD *v107;
  char *v108;
  uint64_t v109;
  const webrtc::I420BufferInterface *v110;
  void *v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  int64_t v122;
  int v123;
  void **v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  BOOL v138;
  int64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  float *v152;
  _QWORD *v153;
  float v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v168;
  uint64_t v169;
  _DWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _DWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  std::string *v194;
  uint64_t v195;
  int v196;
  signed int v197;
  uint64_t v198;
  _BOOL4 v199;
  char v200;
  const char *v201;
  uint64_t *v202;
  uint64_t v203;
  _QWORD v204[2];
  int v205;
  void *__p[4];
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;

  v220 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 2732) || !*(_QWORD *)(a1 + 2336))
    return 4294967289;
  v10 = (_BYTE *)(a1 + 4624);
  if (!*(_BYTE *)(a1 + 4642))
    return 0;
  v11 = (const char *)a2;
  if (a3 && *(_QWORD *)a3 != *(_QWORD *)(a3 + 8) && **(_DWORD **)a3 == 3)
    *v10 = 1;
  if (*(_QWORD *)(a1 + 4632) + 1 == *(_DWORD *)(a1 + 2704))
    *v10 = 1;
  v12 = *(_QWORD *)(a1 + 4864);
  if (v12)
  {
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(__p, v12, *v10);
    v13 = *(_QWORD *)(a1 + 5040);
    if (v13)
    {
      v8 = *(_QWORD *)(a1 + 5048);
      v14 = *(void **)(a1 + 5040);
      if (v8 != v13)
      {
        do
        {
          if ((*(_BYTE *)(v8 - 72) & 1) != 0)
            operator delete(*(void **)(v8 - 64));
          v8 -= 88;
        }
        while (v8 != v13);
        v14 = *(void **)(a1 + 5040);
      }
      *(_QWORD *)(a1 + 5048) = v13;
      operator delete(v14);
    }
    v16 = __p[0];
    *(void **)(a1 + 5040) = __p[0];
    v17 = __p[1];
    *(_OWORD *)(a1 + 5048) = *(_OWORD *)&__p[1];
    if (v16 == v17)
      return 0xFFFFFFFFLL;
    if (v16[4])
      *v10 = 1;
  }
  v18 = 0;
  v203 = 0;
  v204[0] = 0;
  v205 = 0;
  v204[1] = 0;
  if (!*v10)
  {
    HIDWORD(v203) = *(unsigned __int8 *)(a1
                                       + 3080
                                       + (unint64_t)(*(_QWORD *)(a1 + 4632) + 1) % *(_QWORD *)(a1 + 3080)
                                       + 8);
    if (*(_DWORD *)(a1 + 2668) == 1)
    {
      v22 = 97734367 * ((1000 * *((_DWORD *)v11 + 4)) >> 4);
      v23 = *((_QWORD *)v11 + 1);
      if (v23)
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
        v23 = *((_QWORD *)v11 + 1);
        if (v23)
          v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23);
      }
      else
      {
        v8 = 0;
      }
      v19 = (char *)(v22 >> 39);
      if (v11[176])
        v112 = *((_QWORD *)v11 + 21);
      else
        v112 = v8 | (unint64_t)(v23 << 32);
      if (v112)
        v199 = 0;
      else
        v199 = *(_DWORD *)(a1 + 5256) > 4;
      if (*(_BYTE *)(a1 + 4642))
      {
        v113 = v203;
        v8 = v19;
        if (v199)
        {
          v114 = 0;
          v115 = 0;
          while (1)
          {
            v116 = v113;
            v117 = *(_QWORD *)(a1 + 4880);
            v118 = 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 4888) - v117) >> 3);
            if (v118 <= v116)
              goto LABEL_292;
            v119 = v117 + 120 * (int)v116;
            if (!*(_BYTE *)(v119 + 4))
              goto LABEL_292;
            if (*(float *)v119 > 5.0)
              break;
            if (v118 <= v115)
              goto LABEL_292;
            v120 = v117 + v114;
            if (*(_BYTE *)(v117 + v114 + 12))
              v121 = *(_DWORD *)(v117 + v114 + 8) > v19;
            else
              v121 = 0;
            if (!v121)
            {
              v122 = webrtc::RateStatistics::Rate((webrtc::RateStatistics *)(v120 + 24), v19);
              if (!*(_BYTE *)(v120 + 4))
                goto LABEL_292;
              if ((_BYTE)a2 && *(float *)v120 < (float)v122
                || *(_BYTE *)(v120 + 12)
                && (uint64_t)(v19 - (unint64_t)*(unsigned int *)(v120 + 8)) < *(unsigned int *)(v117 + v114 + 16))
              {
                v113 = v203 + 1;
                LODWORD(v203) = v203 + 1;
                ++v115;
                v114 += 120;
                if (v115 < *(unsigned __int8 *)(a1 + 4642))
                  continue;
              }
            }
            goto LABEL_249;
          }
          if (webrtc::FramerateControllerDeprecated::DropFrame((webrtc::FramerateControllerDeprecated *)(a1 + 5064), v19))LODWORD(v203) = *(unsigned __int8 *)(a1 + 4642);
        }
        else
        {
          v133 = 0;
          v134 = 0;
          do
          {
            v135 = *(_QWORD *)(a1 + 4880);
            v136 = 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 4888) - v135) >> 3);
            if (v136 <= v113 || !*(_BYTE *)(v135 + 120 * v113 + 4) || v136 <= v134)
              goto LABEL_292;
            v137 = v135 + v133;
            if (*(_BYTE *)(v135 + v133 + 12))
              v138 = *(_DWORD *)(v135 + v133 + 8) > v19;
            else
              v138 = 0;
            if (v138)
              break;
            v139 = webrtc::RateStatistics::Rate((webrtc::RateStatistics *)(v137 + 24), v19);
            if (!*(_BYTE *)(v137 + 4))
              goto LABEL_292;
            if ((!(_BYTE)a2 || *(float *)v137 >= (float)v139)
              && (!*(_BYTE *)(v137 + 12)
               || (uint64_t)(v19 - (unint64_t)*(unsigned int *)(v137 + 8)) >= *(unsigned int *)(v135 + v133 + 16)))
            {
              break;
            }
            v113 = v203 + 1;
            LODWORD(v203) = v203 + 1;
            ++v134;
            v133 += 120;
          }
          while (v134 < *(unsigned __int8 *)(a1 + 4642));
        }
      }
LABEL_249:
      if (v199 && (int)v203 < *(unsigned __int8 *)(a1 + 4642))
        webrtc::FramerateControllerDeprecated::AddFrame((webrtc::FramerateControllerDeprecated *)(a1 + 5064), v19);
    }
    if (*(_BYTE *)(a1 + 4857))
    {
      v18 = *(unsigned __int8 *)(a1 + 4643);
      LODWORD(v203) = v18;
      *(_BYTE *)(a1 + 4857) = 0;
      if (v18 < *(unsigned __int8 *)(a1 + 4642))
        goto LABEL_24;
    }
    else
    {
      v18 = v203;
      if ((int)v203 < *(unsigned __int8 *)(a1 + 4642))
        goto LABEL_24;
    }
    return 0;
  }
LABEL_24:
  v19 = (char *)*(unsigned __int8 *)(a1 + 4641);
  if (*(_BYTE *)(a1 + 4641))
  {
    v20 = HIDWORD(v203);
    if (v19 >= 8)
    {
      v21 = (char *)(v19 & 0xF8);
      v24 = vdupq_n_s32(HIDWORD(v203));
      v25 = (int32x4_t *)&v205;
      v26 = v21;
      do
      {
        v25[-1] = v24;
        *v25 = v24;
        v25 += 2;
        v26 -= 8;
      }
      while (v26);
      if (v21 == v19)
        goto LABEL_36;
    }
    else
    {
      v21 = 0;
    }
    v27 = (const char *)(v19 - v21);
    v28 = (_DWORD *)v204 + (_QWORD)v21;
    do
    {
      *v28++ = v20;
      --v27;
    }
    while (v27);
  }
LABEL_36:
  if (v18 < *(unsigned __int8 *)(a1 + 4643))
    LODWORD(v203) = *(unsigned __int8 *)(a1 + 4643);
  if (!*(_QWORD *)(a1 + 4864))
    goto LABEL_102;
  v8 = *(_QWORD *)(a1 + 5040);
  v29 = *(_QWORD *)(a1 + 5048);
  if (v8 == v29)
    goto LABEL_292;
  v203 = *(_QWORD *)(v8 + 8);
  v30 = v8;
  do
  {
    *((_DWORD *)v204 + *(int *)(v30 + 8)) = *(_DWORD *)(v30 + 12);
    v30 += 88;
  }
  while (v30 != v29);
  if (!(_DWORD)v19)
  {
LABEL_102:
    if (*(_BYTE *)(a1 + 4646) && (_DWORD)v19 && *(_BYTE *)(a1 + 5200))
    {
      v67 = 0;
      v68 = 0;
      v69 = *(_QWORD *)(a1 + 5232);
      v70 = (*(_QWORD *)(a1 + 5240) - v69) >> 4;
      v71 = a1 + 2968;
LABEL_106:
      v72 = (int *)(v69 + 4 + 16 * (_QWORD)v67);
      do
      {
        if (*((_DWORD *)v204 + (_QWORD)v67))
        {
          if (v70 <= (unint64_t)v67)
            goto LABEL_292;
          v73 = *v72;
          if (*(_DWORD *)(v71 + 4 * (_QWORD)v67) != *v72)
          {
LABEL_115:
            *(_DWORD *)(v71 + 4 * (_QWORD)v67) = v73;
            v68 = 1;
            v91 = v19 - 1 == v67++;
            if (!v91)
              goto LABEL_106;
            goto LABEL_119;
          }
        }
        else
        {
          if (v70 <= (unint64_t)v67)
            goto LABEL_292;
          v73 = *(_DWORD *)(v69 + 16 * (_QWORD)v67);
          if (*(_DWORD *)(v71 + 4 * (_QWORD)v67) != v73)
            goto LABEL_115;
        }
        ++v67;
        v72 += 4;
      }
      while (v19 != v67);
      if ((v68 & 1) == 0)
        goto LABEL_120;
LABEL_119:
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 2752), 41, a1 + 2776);
    }
LABEL_120:
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 2752), 42, &v203);
    if (*(unsigned __int8 *)(a1 + 4641) >= 2u)
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 2752), 61, a1 + 4656);
    if (*(_BYTE *)(a1 + 5260))
    {
      if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 2752), *(_QWORD *)(a1 + 2760)))
      {
        return 0xFFFFFFFFLL;
      }
      if (!*(_BYTE *)(a1 + 5200))
      {
        v74 = *(unsigned __int8 *)(a1 + 4641);
        while (1)
        {
          v121 = v74-- < 1;
          if (v121)
            break;
          v75 = *(_QWORD *)(a1 + 2760);
          if (*(_DWORD *)(v75 + 4 * v74 + 196))
          {
            v76 = *(_DWORD **)(a1 + 5208);
            v77 = *(_QWORD *)(a1 + 5216) - (_QWORD)v76;
            if (v77)
            {
              v78 = (*(_DWORD *)(v75 + 16) * *(_DWORD *)(a1 + 4 * v74 + 2872))
                  / *(_DWORD *)(a1 + 4 * v74 + 2920)
                  * ((*(_DWORD *)(v75 + 12) * *(_DWORD *)(a1 + 4 * v74 + 2872))
                   / *(_DWORD *)(a1 + 4 * v74 + 2920));
              v79 = 0xCCCCCCCCCCCCCCCDLL * (v77 >> 2);
              do
              {
                v80 = v79 >> 1;
                v81 = &v76[5 * (v79 >> 1)];
                v83 = *v81;
                v82 = v81 + 5;
                v79 += ~(v79 >> 1);
                if (v83 < v78)
                  v76 = v82;
                else
                  v79 = v80;
              }
              while (v79);
            }
            (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 2752), 13, *(v76 - 4));
            break;
          }
        }
      }
      *(_BYTE *)(a1 + 5260) = 0;
    }
    *(_QWORD *)(a1 + 3072) = v11;
    v84 = *(_DWORD *)(a1 + 2728);
    if (v84 == 2)
    {
      v85 = *((_QWORD *)v11 + 1);
      if (v85)
        (**(void (***)(_QWORD))v85)(*((_QWORD *)v11 + 1));
      v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 32))(v85);
      (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
      if (v86 == 5)
      {
        v87 = (webrtc::VideoFrameBuffer *)*((_QWORD *)v11 + 1);
        if (v87)
        {
          (**(void (***)(webrtc::VideoFrameBuffer *))v87)(v87);
          I010 = webrtc::VideoFrameBuffer::GetI010(v87);
          (*(void (**)(webrtc::VideoFrameBuffer *))(*(_QWORD *)v87 + 8))(I010);
        }
        else
        {
          webrtc::VideoFrameBuffer::GetI010(0);
        }
        v19 = 0;
      }
      else
      {
        v109 = *((_QWORD *)v11 + 1);
        if (v109)
          (**(void (***)(_QWORD))v109)(*((_QWORD *)v11 + 1));
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v109 + 56))(__p, v109);
        (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
        v111 = __p[0];
        if (__p[0])
        {
          webrtc::I010Buffer::Copy((webrtc::I010Buffer *)__p[0], v110, (uint64_t *)&v201);
          v15 = 0;
          v19 = (char *)v201;
        }
        else
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
            v140 = *((_QWORD *)v11 + 1);
            if (v140)
              (**(void (***)(uint64_t))v140)(v140);
            (*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 32))(v140);
            rtc::webrtc_logging_impl::Log("\r\t\t\t", v141, v142, v143, v144, v145, v146, v147, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
            (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
          }
          v19 = 0;
          v15 = 0xFFFFFFFFLL;
        }
        if (__p[0])
          (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
        if (!v111)
        {
          v11 = 0;
          if (!v19)
            goto LABEL_285;
          goto LABEL_284;
        }
        v87 = (webrtc::VideoFrameBuffer *)v19;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 2768) + 48) = (*(uint64_t (**)(webrtc::VideoFrameBuffer *))(*(_QWORD *)v87 + 136))(v87);
      *(_QWORD *)(*(_QWORD *)(a1 + 2768) + 56) = (*(uint64_t (**)(webrtc::VideoFrameBuffer *))(*(_QWORD *)v87 + 144))(v87);
      *(_QWORD *)(*(_QWORD *)(a1 + 2768) + 64) = (*(uint64_t (**)(webrtc::VideoFrameBuffer *))(*(_QWORD *)v87 + 152))(v87);
      *(_DWORD *)(*(_QWORD *)(a1 + 2768) + 80) = 2
                                                 * (*(uint64_t (**)(webrtc::VideoFrameBuffer *))(*(_QWORD *)v87 + 112))(v87);
      *(_DWORD *)(*(_QWORD *)(a1 + 2768) + 84) = 2
                                                 * (*(uint64_t (**)(webrtc::VideoFrameBuffer *))(*(_QWORD *)v87 + 120))(v87);
      v148 = (*(uint64_t (**)(webrtc::VideoFrameBuffer *))(*(_QWORD *)v87 + 128))(v87);
      v11 = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 2768) + 88) = 2 * v148;
      v8 = *v10;
      if (*(_QWORD *)(a1 + 4864))
        goto LABEL_149;
      goto LABEL_263;
    }
    if (v84)
    {
      v19 = 0;
      v11 = 0;
      v8 = *v10;
      if (*(_QWORD *)(a1 + 4864))
        goto LABEL_149;
      goto LABEL_263;
    }
    v19 = (char *)*((_QWORD *)v11 + 1);
    if (v19)
      (**(void (***)(_QWORD))v19)(*((_QWORD *)v11 + 1));
    __p[1] = (void *)0x800000001;
    __p[0] = (void *)4;
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v19 + 32))(v19))
    {
      (**(void (***)(const char *))v19)(v19);
      v11 = v19;
    }
    else
    {
      (*(void (**)(const char **__return_ptr, char *, void **, uint64_t))(*(_QWORD *)v19 + 80))(&v201, v19, &__p[1], 2);
      v11 = v201;
      if (!v201)
      {
LABEL_214:
        (*(void (**)(const char **__return_ptr, char *))(*(_QWORD *)v19 + 56))(&v201, v19);
        v8 = (uint64_t)v201;
        if (v201)
        {
          if ((*(unsigned int (**)(const char *))(*(_QWORD *)v201 + 32))(v201) == 1
            || (*(unsigned int (**)(const char *))(*(_QWORD *)v201 + 32))(v201) == 2)
          {
            v132 = v201;
            if (v201)
              (**(void (***)(const char *))v201)(v201);
            if (v11)
              (*(void (**)(const char *))(*(_QWORD *)v11 + 8))(v11);
            if (v132)
              (**(void (***)(const char *))v132)(v132);
            (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
            v19 = (char *)v132;
            v11 = v132;
            goto LABEL_294;
          }
          goto LABEL_328;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          (*(uint64_t (**)(char *))(*(_QWORD *)v19 + 32))(v19);
          goto LABEL_293;
        }
        while (1)
        {
LABEL_294:
          if (v201)
            (*(void (**)(const char *))(*(_QWORD *)v201 + 8))(v201);
          if (v8)
            break;
          if (v11)
          {
            (*(void (**)(const char *))(*(_QWORD *)v11 + 8))(v11);
            v11 = 0;
          }
LABEL_315:
          if (((uint64_t)__p[0] & 1) != 0)
            operator delete(__p[1]);
          if (v19)
            (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
          if (!v11)
            return 0xFFFFFFFFLL;
          v19 = 0;
          v8 = *v10;
          if (*(_QWORD *)(a1 + 4864))
          {
LABEL_149:
            v89 = *(_QWORD *)(a1 + 5040);
            v90 = *(_QWORD *)(a1 + 5048);
            memset(__p, 0, sizeof(__p));
            v207 = 0u;
            v208 = 0u;
            v209 = 0u;
            v210 = 0u;
            v211 = 0u;
            v212 = 0u;
            v213 = 0u;
            v214 = 0u;
            v215 = 0u;
            v216 = 0u;
            v217 = 0u;
            v218 = 0u;
            v219 = 0u;
            v92 = v90 - v89;
            v91 = v90 == v89;
            if (v90 == v89)
              v93 = 0;
            else
              v93 = v89;
            if (v91)
              goto LABEL_272;
            v94 = v93 + v92;
            while (2)
            {
              v95 = *(_QWORD *)(v89 + 16);
              if (v95 >= 2)
              {
                v96 = *(int *)(v89 + 8);
                if ((v95 & 1) == 0)
                {
                  v97 = *(_DWORD *)(v89 + 24);
                  v98 = (_DWORD *)__p + v96;
                  *v98 = v97;
                  v98[35] = *(unsigned __int8 *)(v89 + 28);
                  if (*(_BYTE *)(v89 + 29))
                    v98[15] |= 1 << v97;
                  if (v95 <= 3)
                    goto LABEL_155;
                  v99 = *(_DWORD *)(v89 + 32);
                  v100 = (_DWORD *)__p + v96;
                  v100[5] = v99;
                  v100[40] = *(unsigned __int8 *)(v89 + 36);
                  if (*(_BYTE *)(v89 + 37))
                    v100[15] |= 1 << v99;
                  if (v95 <= 5)
                    goto LABEL_155;
                  v101 = *(_DWORD *)(v89 + 40);
                  v102 = (char *)__p + 4 * v96;
                  *((_DWORD *)v102 + 10) = v101;
                  *((_DWORD *)v102 + 45) = *(unsigned __int8 *)(v89 + 44);
                  if (!*(_BYTE *)(v89 + 45))
                    goto LABEL_155;
LABEL_154:
                  *((_DWORD *)&v208 + v96 + 3) |= 1 << v101;
                  goto LABEL_155;
                }
                v103 = *(int **)(v89 + 24);
                v104 = *v103;
                v105 = (_DWORD *)__p + v96;
                *v105 = *v103;
                v105[35] = *((unsigned __int8 *)v103 + 4);
                if (*((_BYTE *)v103 + 5))
                  *((_DWORD *)&v208 + v96 + 3) |= 1 << v104;
                if (v95 > 3)
                {
                  v106 = v103[2];
                  v107 = (_DWORD *)__p + v96;
                  v107[5] = v106;
                  v107[40] = *((unsigned __int8 *)v103 + 12);
                  if (*((_BYTE *)v103 + 13))
                    v107[15] |= 1 << v106;
                  if (v95 > 5)
                  {
                    v101 = v103[4];
                    v108 = (char *)__p + 4 * v96;
                    *((_DWORD *)v108 + 10) = v101;
                    *((_DWORD *)v108 + 45) = *((unsigned __int8 *)v103 + 20);
                    if (*((_BYTE *)v103 + 21))
                      goto LABEL_154;
                  }
                }
              }
LABEL_155:
              v89 += 88;
              if (v89 == v94)
                goto LABEL_272;
              continue;
            }
          }
LABEL_263:
          if (!*(_BYTE *)(a1 + 4652))
            goto LABEL_273;
          v218 = 0u;
          v219 = 0u;
          v216 = 0u;
          v217 = 0u;
          v214 = 0u;
          v215 = 0u;
          v212 = 0u;
          v213 = 0u;
          v210 = 0u;
          v211 = 0u;
          v208 = 0u;
          v209 = 0u;
          v207 = 0u;
          memset(__p, 0, sizeof(__p));
          webrtc::LibvpxVp9Encoder::SetReferences((uint64_t)__p, a1, v8 != 0, v203);
          if (*(_DWORD *)(a1 + 2668) == 1)
          {
            v149 = *(unsigned __int8 *)(a1 + 4642);
            if (*(_BYTE *)(a1 + 4642))
            {
              v150 = *(_QWORD *)(a1 + 4880);
              v151 = 0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 4888) - v150) >> 3);
              v152 = (float *)(v150 + 4);
              v153 = (_QWORD *)&v217 + 1;
              while (v151 && *(_BYTE *)v152)
              {
                v154 = (float)*(unsigned int *)(a1 + 2364);
                if (*(v152 - 1) < v154)
                  v154 = *(v152 - 1);
                *v153++ = (uint64_t)(float)(90000.0 / v154);
                --v151;
                v152 += 30;
                if (!--v149)
                  goto LABEL_272;
              }
              goto LABEL_292;
            }
          }
LABEL_272:
          (*(void (**)(_QWORD, _QWORD, uint64_t, void **))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 2752), 52, __p);
LABEL_273:
          *(_BYTE *)(a1 + 4684) = 1;
          if (*(_DWORD *)(a1 + 2668) != 1)
          {
            v158 = (float)*(unsigned int *)(a1 + 2364);
            goto LABEL_280;
          }
          v155 = *(unsigned __int8 *)(a1 + 4642) - 1;
          v156 = *(_QWORD *)(a1 + 4880);
          if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(a1 + 4888) - v156) >> 3) > v155)
          {
            v157 = v156 + 120 * (int)v155;
            if (*(_BYTE *)(v157 + 4))
            {
              v158 = (float)*(unsigned int *)(a1 + 2364);
              if (*(float *)v157 < v158)
                v158 = *(float *)v157;
LABEL_280:
              v159 = (float)(90000.0 / v158);
              v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 2752), *(_QWORD *)(a1 + 2768), *(_QWORD *)(a1 + 2736), v159, v8, 1);
              if ((_DWORD)v15)
              {
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                {
                  __p[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/mod"
                           "ules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc";
                  __p[1] = (void *)9691;
                  __p[2] = &v200;
                  v201 = "Encoding error: ";
                  v202 = (uint64_t *)__p;
                  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8), v15);
                  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 208))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 2752));
                  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 200))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 2752));
                  rtc::webrtc_logging_impl::Log("\r\t\t\t\t\t\t", v160, v161, v162, v163, v164, v165, v166, *v202);
                }
                v15 = 0xFFFFFFFFLL;
                if (!v19)
                  goto LABEL_285;
                goto LABEL_284;
              }
              *(_QWORD *)(a1 + 2736) += v159;
              if (!v19)
              {
LABEL_285:
                if (v11)
                  (*(void (**)(const char *))(*(_QWORD *)v11 + 8))(v11);
                return v15;
              }
LABEL_284:
              (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
              goto LABEL_285;
            }
          }
LABEL_292:
          __break(1u);
LABEL_293:
          rtc::webrtc_logging_impl::Log("\r\t\t\t", a2, a3, a4, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
        }
LABEL_297:
        v168 = (*(uint64_t (**)(const char *))(*(_QWORD *)v11 + 32))(v11);
        if ((v168 - 1) < 2)
        {
          v169 = a1 + 2768;
          v170 = *(_DWORD **)(a1 + 2768);
          if (v170)
          {
            if (*v170 == 258)
            {
LABEL_304:
              v178 = (*(uint64_t (**)(const char *))(*(_QWORD *)v11 + 64))(v11);
              *(_QWORD *)(*(_QWORD *)v169 + 48) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 136))(v178);
              *(_QWORD *)(*(_QWORD *)v169 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 144))(v178);
              v179 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 152))(v178);
              v180 = *(_QWORD *)v169;
              v181 = 16;
LABEL_314:
              *(_QWORD *)(v180 + 64) = v179;
              *(_DWORD *)(*(_QWORD *)v169 + 80) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 112))(v178);
              *(_DWORD *)(*(_QWORD *)v169 + 84) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 120))(v178);
              *(_DWORD *)(*(_QWORD *)v169 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 8 * v181))(v178);
              goto LABEL_315;
            }
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
              rtc::webrtc_logging_impl::Log("\r\t\t", v171, v172, v173, v174, v175, v176, v177, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 2768));
          }
          *(_QWORD *)(a1 + 2768) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), 0, 258, *(unsigned __int16 *)(a1 + 2348), *(unsigned __int16 *)(a1 + 2350), 1, 0);
          goto LABEL_304;
        }
        if (v168 != 8)
          goto LABEL_315;
        v182 = *(_DWORD **)(a1 + 2768);
        if (v182)
        {
          if (*v182 == 265)
          {
LABEL_312:
            if ((*(unsigned int (**)(const char *))(*(_QWORD *)v11 + 32))(v11) != 8)
              goto LABEL_327;
            v169 = a1 + 2768;
            *(_QWORD *)(*(_QWORD *)v169 + 48) = (*(uint64_t (**)(const char *))(*(_QWORD *)v11 + 128))(v11);
            *(_QWORD *)(*(_QWORD *)v169 + 56) = (*(uint64_t (**)(const char *))(*(_QWORD *)v11 + 136))(v11);
            v180 = *(_QWORD *)(a1 + 2768);
            v179 = *(_QWORD *)(v180 + 56) + 1;
            v181 = 15;
            v178 = (uint64_t)v11;
            goto LABEL_314;
          }
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t\t", v183, v184, v185, v186, v187, v188, v189, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc");
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 2768));
        }
        *(_QWORD *)(a1 + 2768) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), 0, 265, *(unsigned __int16 *)(a1 + 2348), *(unsigned __int16 *)(a1 + 2350), 1, 0);
        goto LABEL_312;
      }
    }
    v123 = (*(uint64_t (**)(const char *))(*(_QWORD *)v11 + 32))(v11);
    v124 = (void **)__p[1];
    if (((uint64_t)__p[0] & 1) == 0)
      v124 = &__p[1];
    v125 = (unint64_t)__p[0] >> 1;
    if (__p[0] >= (void *)2)
    {
      v127 = 4 * v125;
      v126 = (char *)v124;
      while (*(_DWORD *)v126 != v123)
      {
        v126 += 4;
        v127 -= 4;
        if (!v127)
        {
          v126 = (char *)v124 + 4 * v125;
          break;
        }
      }
    }
    else
    {
      v126 = (char *)v124;
    }
    if (v125 != (v126 - (char *)v124) >> 2
      || (*(unsigned int (**)(const char *))(*(_QWORD *)v11 + 32))(v11) == 2)
    {
      goto LABEL_297;
    }
    goto LABEL_214;
  }
  v31 = 0;
  while (v8 == v29)
  {
    v35 = *(_QWORD *)(a1 + 2760);
    v39 = v35 + 4 * v31;
    v40 = *(_DWORD *)(v39 + 196);
    v37 = (_DWORD *)(v39 + 196);
    if (v40)
    {
LABEL_52:
      *v37 = 0;
      if (*(_BYTE *)(a1 + 4640))
        bzero((void *)(4 * v31 * *(unsigned __int8 *)(a1 + 4640) + v35 + 328), 4 * *(unsigned __int8 *)(a1 + 4640));
      *(_BYTE *)(a1 + 5260) = 1;
    }
LABEL_46:
    if ((char *)++v31 == v19)
      goto LABEL_102;
  }
  v35 = *(_QWORD *)(a1 + 2760);
  if (v31 != *(_DWORD *)(v8 + 8))
  {
    v36 = v35 + 4 * v31;
    v38 = *(_DWORD *)(v36 + 196);
    v37 = (_DWORD *)(v36 + 196);
    if (v38)
      goto LABEL_52;
    goto LABEL_46;
  }
  v32 = v35 + 4 * v31;
  v34 = *(_DWORD *)(v32 + 196);
  v33 = (unsigned int *)(v32 + 196);
  if (v34)
  {
LABEL_45:
    v8 += 88;
    goto LABEL_46;
  }
  v41 = *(unsigned __int8 *)(a1 + 4640);
  if (!*(_BYTE *)(a1 + 4640))
  {
    if (v31 > 4)
      goto LABEL_325;
    v43 = *(unsigned __int8 *)(a1 + 32 * v31 + 4696);
    goto LABEL_90;
  }
  if (v31 <= 4)
  {
    v42 = (int *)(a1 + 32 * v31 + 4692);
    v43 = *(unsigned __int8 *)(a1 + 32 * v31 + 4696);
    v44 = (v31 * v41) << 32;
    if (*(_BYTE *)(a1 + 32 * v31 + 4696))
    {
      *(_DWORD *)(v35 + (v44 >> 30) + 328) = *v42 / 0x3E8u;
      if ((_DWORD)v41 == 1)
        goto LABEL_91;
      v45 = *v42;
LABEL_63:
      v47 = a1 + 32 * v31;
      v48 = (int *)(v47 + 4700);
      v49 = *(unsigned __int8 *)(v47 + 4704);
      if (v49)
        v50 = *v48;
      else
        v50 = 0;
      *(_DWORD *)(v35 + ((v44 + 0x100000000) >> 30) + 328) = (v50 + v45) / 0x3E8u;
      if ((_DWORD)v41 != 2)
      {
        v51 = v43 ? *v42 : 0;
        v52 = v49 ? *v48 : 0;
        v53 = a1 + 32 * v31;
        v54 = (_DWORD *)(v53 + 4708);
        v55 = *(unsigned __int8 *)(v53 + 4712);
        a3 = v55 ? *v54 : 0;
        v56 = (v52 + v51 + (int)a3) / 0x3E8u;
        a2 = v35 + ((v44 + 0x200000000) >> 30);
        *(_DWORD *)(a2 + 328) = v56;
        if ((_DWORD)v41 != 3)
        {
          v57 = v43 ? *v42 : 0;
          v58 = v49 ? *v48 : 0;
          v59 = v55 ? *v54 : 0;
          v60 = a1 + 32 * v31;
          v61 = *(_BYTE *)(v60 + 4720) ? *(_DWORD *)(v60 + 4716) : 0;
          *(_DWORD *)(v35 + ((v44 + 0x300000000) >> 30) + 328) = (v58 + v57 + v59 + v61) / 0x3E8u;
          if ((_DWORD)v41 != 4)
            goto LABEL_326;
        }
      }
LABEL_90:
      if (v43)
      {
LABEL_91:
        v46 = *(_DWORD *)(a1 + 32 * v31 + 4692);
        goto LABEL_92;
      }
      v46 = 0;
      v62 = a1 + 32 * v31;
      v63 = *(unsigned __int8 *)(v62 + 4704);
      if (!*(_BYTE *)(v62 + 4704))
      {
LABEL_94:
        if (*(_BYTE *)(v62 + 4712))
        {
          v64 = *(_DWORD *)(v62 + 4708);
          v65 = a1 + 32 * v31;
          if (*(_BYTE *)(v65 + 4720))
            goto LABEL_96;
LABEL_98:
          v66 = 0;
        }
        else
        {
          v64 = 0;
          v65 = a1 + 32 * v31;
          if (!*(_BYTE *)(v65 + 4720))
            goto LABEL_98;
LABEL_96:
          v66 = *(_DWORD *)(v65 + 4716);
        }
        *v33 = (v63 + v46 + v64 + v66) / 0x3E8u;
        *(_BYTE *)(a1 + 5260) = 1;
        goto LABEL_45;
      }
    }
    else
    {
      v46 = 0;
      v45 = 0;
      *(_DWORD *)(v35 + (v44 >> 30) + 328) = 0;
      if ((_DWORD)v41 != 1)
        goto LABEL_63;
LABEL_92:
      v62 = a1 + 32 * v31;
      v63 = *(unsigned __int8 *)(v62 + 4704);
      if (!*(_BYTE *)(v62 + 4704))
        goto LABEL_94;
    }
    v63 = *(_DWORD *)(v62 + 4700);
    goto LABEL_94;
  }
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 80, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v31);
LABEL_325:
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 73, "spatial_index < kMaxSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v31);
LABEL_326:
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_bitrate_allocation.cc", 81, "temporal_index < kMaxTemporalStreams", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, 4);
LABEL_327:
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/video/video_frame_buffer.cc", 74, "type() == Type::kNV12", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v190, v191, v192, v193, v198);
LABEL_328:
  v194 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc", 2038, "converted_buffer->type() == VideoFrameBuffer::Type::kI420 || converted_buffer->type() == VideoFrameBuffer::Type::kI420A", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v128, v129, v130, v131, v198);
  return webrtc::LibvpxVp9Encoder::SetReferences((uint64_t)v194, v195, v196, v197);
}

uint64_t webrtc::LibvpxVp9Encoder::SetReferences(uint64_t this, uint64_t a2, int a3, signed int a4)
{
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  unsigned int v7;
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  int v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _DWORD *v27;
  int v28;
  int v29;
  int v30;
  unsigned int *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  _DWORD *v39;
  int v40;
  _DWORD *v41;
  char v42;
  int v43;
  _BOOL4 v44;
  _BOOL4 v46;
  unint64_t v48;
  unint64_t v49;
  int32x4_t v50;
  int32x4_t v51;
  uint32x4_t *v52;
  int32x4_t v53;
  uint32x4_t v54;
  int32x4_t v55;
  unint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  int v59;
  int v60;
  _DWORD *v61;
  _DWORD *v62;
  int v63;
  _BOOL4 v64;
  _BOOL4 v66;
  BOOL v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  char v73;
  _DWORD *v74;
  _DWORD *v75;
  int v76;
  int v77;
  int v78;
  _BOOL4 v79;
  unsigned int *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _DWORD *v87;
  int v88;
  _DWORD *i;
  int v90;
  _BOOL4 v91;
  _BOOL4 v93;
  _BOOL4 v96;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  int v101;

  v4 = a2 + 4640;
  *(_OWORD *)(this + 208) = 0u;
  *(_OWORD *)(this + 224) = 0u;
  *(_OWORD *)(this + 176) = 0u;
  *(_OWORD *)(this + 192) = 0u;
  *(_OWORD *)(this + 144) = 0u;
  *(_OWORD *)(this + 160) = 0u;
  *(_OWORD *)(this + 112) = 0u;
  *(_OWORD *)(this + 128) = 0u;
  *(_OWORD *)(this + 80) = 0u;
  *(_OWORD *)(this + 96) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)this = 0u;
  v5 = *(_BYTE *)(a2 + 4640);
  v6 = v5 - 1;
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = *(unsigned __int8 *)(a2 + 4640) - 1;
  v8 = *(_DWORD *)(a2 + 4648);
  if (v8 == 2)
    v9 = a3;
  else
    v9 = 0;
  if (v8 == 1)
    v10 = 1;
  else
    v10 = v9;
  v11 = *(unsigned __int8 *)(a2 + 4642);
  v12 = v11 - a4;
  if ((int)v11 <= a4)
    return this;
  if (!a3)
  {
    v19 = *(_QWORD *)(a2 + 4632) + 1;
    v20 = v19 % *(_QWORD *)(a2 + 3080);
    v22 = (unsigned __int8 *)(a2 + 3080 + 3 * v20 + 773);
    v23 = (unsigned __int8 *)(a2 + 3080 + v20 + 8);
    if ((v10 & 1) != 0)
    {
      v24 = a2 + 4912;
      v25 = v7 * a4;
      v26 = v7 * a4 + v21;
      if (*(_BYTE *)(a2 + 4640) == 1)
      {
        if (v26 <= 7)
        {
          v27 = (_DWORD *)(v24 + 16 * v26);
          v28 = v19 - *v27;
          v29 = v27[2];
          v30 = *(unsigned __int8 *)(a2 + 4904);
          if (*(_BYTE *)(a2 + 4904))
          {
            if (v29 != a4 || (v28 - 1) >= 0x1D)
              goto LABEL_28;
          }
          else if (v29 != a4 || v28 != *v22)
          {
            goto LABEL_28;
          }
          v32 = (unsigned int *)(this + 4 * a4);
          *v32 = v26;
          v32[35] = 1;
LABEL_28:
          v34 = v25 + v33;
          v35 = this + 4 * a4;
          *(_DWORD *)(v35 + 60) = 1 << (v25 + v33);
          v36 = a4 + 1;
          if (a4 + 1 == (_DWORD)v11)
            return this;
          this = 0;
          v37 = 0;
          v38 = v7 * v36 + v21;
          v39 = (_DWORD *)(a2 + 16 * v38 + 4920);
          v40 = ~a4 + v11;
          v41 = (_DWORD *)(v35 + 144);
          v42 = v7 * v36 + v33;
          while (v38 + v37 <= 7)
          {
            v43 = v19 - *(v39 - 2);
            if (v30)
            {
              v44 = (v43 - 1) < 0x1D;
              if (a4 + (_DWORD)this + 1 != *v39 || !v44)
                goto LABEL_38;
            }
            else
            {
              v46 = v43 == *v22;
              if (a4 + (_DWORD)this + 1 != *v39 || !v46)
                goto LABEL_38;
            }
            *(v41 - 35) = v38 + v37;
            *v41 = 1;
LABEL_38:
            if (v36 + this > a4)
            {
              *(v41 - 30) = v34 + v37;
              v41[5] = 1;
            }
            *(v41 - 20) = 1 << (v42 + v37);
            v37 += v7;
            v39 += 4 * v7;
            ++this;
            ++v41;
            if (v40 == (_DWORD)this)
              return this;
          }
        }
LABEL_132:
        __break(1u);
        return this;
      }
      if (v26 > 7)
        goto LABEL_132;
      v75 = (_DWORD *)(v24 + 16 * v26);
      v76 = v19 - *v75;
      v77 = v75[2];
      v78 = *(unsigned __int8 *)(a2 + 4904);
      if (*(_BYTE *)(a2 + 4904))
      {
        v79 = (v76 - 1) < 0x1D;
        if (v77 != a4 || !v79)
          goto LABEL_89;
      }
      else
      {
        v96 = v76 == *v22;
        if (v77 != a4 || !v96)
          goto LABEL_89;
      }
      v81 = (unsigned int *)(this + 4 * a4);
      *v81 = v26;
      v81[35] = 1;
LABEL_89:
      v82 = *v23;
      if (v6 <= v82)
        v83 = 7;
      else
      v84 = this + 4 * a4;
      *(_DWORD *)(v84 + 60) = 1 << v83;
      this = a4 + 1;
      if (a4 + 1 == (_DWORD)v11)
        return this;
      v85 = 0;
      v86 = v7 * this;
      v87 = (_DWORD *)(a2 + 16 * (v7 * this + v21) + 4920);
      v88 = ~a4 + v11;
      for (i = (_DWORD *)(v84 + 144); ; ++i)
      {
        if ((v21 + v86) >= 8)
          goto LABEL_132;
        v90 = v19 - *(v87 - 2);
        if (v78)
        {
          v91 = (v90 - 1) < 0x1D;
          if (a4 + (_DWORD)v85 + 1 == *v87 && v91)
            goto LABEL_103;
        }
        else
        {
          v93 = v90 == *v22;
          if (a4 + (_DWORD)v85 + 1 == *v87 && v93)
          {
LABEL_103:
            *(i - 35) = v21 + v86;
            *i = 1;
          }
        }
        if (this + v85 > a4)
        {
          *(i - 30) = v83;
          i[5] = 1;
          if (v6 <= v82)
          {
LABEL_108:
            v83 = 7;
            goto LABEL_96;
          }
        }
        else if (v6 <= v82)
        {
          goto LABEL_108;
        }
LABEL_96:
        *(i - 20) = 1 << v83;
        v86 += v7;
        v87 += 4 * v7;
        if (v88 == (_DWORD)++v85)
          return this;
      }
    }
    v60 = a4 * v7;
    v61 = (_DWORD *)(a2 + 16 * (a4 * v7 + v21) + 4920);
    v62 = (_DWORD *)(this + 4 * a4);
    while (1)
    {
      if ((v21 + v60) > 7)
        goto LABEL_132;
      v63 = v19 - *(v61 - 2);
      if (*(_BYTE *)(v4 + 264))
      {
        v64 = (v63 - 1) < 0x1D;
        if (a4 != *v61 || !v64)
          goto LABEL_65;
      }
      else
      {
        v66 = v63 == *v22;
        if (a4 != *v61 || !v66)
          goto LABEL_65;
      }
      *v62 = v21 + v60;
      v62[35] = 1;
LABEL_65:
      if (v5 == 1 || v6 > *v23)
      ++a4;
      v60 += v7;
      v61 += 4 * v7;
      ++v62;
      if ((_DWORD)v11 == a4)
        return this;
    }
  }
  if ((v10 & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 4640) == 1)
    {
      v13 = this + 4 * a4;
      *(_DWORD *)(v13 + 60) = 1 << (v7 * a4);
      v14 = a4 + 1;
      if (a4 + 1 != (_DWORD)v11)
      {
        v15 = 0;
        v16 = (_DWORD *)(v13 + 164);
        v17 = ~a4 + v11;
        v18 = v7 * v14;
        do
        {
          if (v14 > a4)
          {
            *(v16 - 35) = v7 * a4 + v15;
            *v16 = 1;
          }
          *(v16 - 25) = 1 << (v18 + v15);
          ++v14;
          ++v16;
          v15 += v7;
          --v17;
        }
        while (v17);
      }
    }
    else
    {
      v68 = v6 > *(unsigned __int8 *)(a2 + 3088);
      v69 = 1 << (v7 * a4);
      if (!v68)
        v69 = 128;
      *(_DWORD *)(this + 4 * a4 + 60) = v69;
      v70 = a4 + 1;
      if (a4 + 1 != (_DWORD)v11)
      {
        if (v68)
        {
          v71 = 0;
          v72 = ~a4 + v11;
          v73 = v7 * v70;
          v74 = (_DWORD *)(this + 4 * a4 + 164);
          do
          {
            if (v70 > a4)
            {
              *(v74 - 35) = v7 * a4 + v71;
              *v74 = 1;
            }
            *(v74 - 25) = 1 << (v73 + v71);
            ++v70;
            v71 += v7;
            ++v74;
            --v72;
          }
          while (v72);
        }
        else
        {
          v98 = (_DWORD *)(this + 4 * v70);
          v98[5] = 7;
          v98[40] = 1;
          v98[15] = 128;
          v99 = a4 + 2;
          if (a4 + 2 != (_DWORD)v11)
          {
            v100 = (_DWORD *)(this + 4 * a4 + 168);
            v101 = v12 - 2;
            do
            {
              if (v99 > a4)
              {
                *(v100 - 35) = 7;
                *v100 = 1;
              }
              *(v100 - 25) = 128;
              ++v99;
              ++v100;
              --v101;
            }
            while (v101);
          }
        }
      }
    }
  }
  else if (*(_BYTE *)(a2 + 4640) == 1 || v6 > *(unsigned __int8 *)(a2 + 3088))
  {
    v48 = v11 - a4;
    v49 = a4;
    if (v48 < 8)
      goto LABEL_52;
    v49 = (v48 & 0xFFFFFFFFFFFFFFF8) + a4;
    v50 = vaddq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_208F071C0);
    v51 = vdupq_n_s32(v7);
    v52 = (uint32x4_t *)(this + 4 * a4 + 76);
    v53.i64[0] = 0x400000004;
    v53.i64[1] = 0x400000004;
    v54.i64[0] = 0x100000001;
    v54.i64[1] = 0x100000001;
    v55.i64[0] = 0x800000008;
    v55.i64[1] = 0x800000008;
    v56 = v48 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v52[-1] = vshlq_u32(v54, (uint32x4_t)vmulq_s32(v51, v50));
      *v52 = vshlq_u32(v54, (uint32x4_t)vmulq_s32(v51, vaddq_s32(v50, v53)));
      v50 = vaddq_s32(v50, v55);
      v52 += 2;
      v56 -= 8;
    }
    while (v56);
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_52:
      v57 = v11 - v49;
      v58 = (_DWORD *)(this + 4 * v49 + 60);
      v59 = v7 * v49;
      do
      {
        *v58++ = 1 << v59;
        v59 += v7;
        --v57;
      }
      while (v57);
    }
  }
  return this;
}

uint64_t webrtc::LibvpxVp9Encoder::RegisterEncodeCompleteCallback(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 2336) = a2;
  return 0;
}

void webrtc::LibvpxVp9Encoder::GetEncoderInfo(webrtc::LibvpxVp9Encoder *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  float *v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  float v16;
  _BYTE *v17;
  _BYTE *v18;
  BOOL v19;
  size_t v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 12) = 0x10000E100;
  *(_WORD *)(a2 + 20) = 0;
  v4 = a2 + 24;
  *(_BYTE *)(a2 + 47) = 7;
  if (v4 <= (unint64_t)"unknown" && a2 + 31 > (unint64_t)"unknown")
  {
    __break(1u);
    JUMPOUT(0x208644AC0);
  }
  *(_QWORD *)(a2 + 176) = 0;
  v5 = (void **)(a2 + 176);
  *(_BYTE *)(a2 + 31) = 0;
  v6 = (char *)this + 4640;
  *(_BYTE *)(a2 + 64) = -1;
  *(_QWORD *)(a2 + 56) = 2;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 208) = 2;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_BYTE *)(a2 + 200) = 0;
  *(_DWORD *)(a2 + 216) = 1;
  *(_WORD *)(a2 + 240) = 0;
  *(_BYTE *)(a2 + 21) = 0;
  *(_BYTE *)(a2 + 47) = 6;
  *(_DWORD *)v4 = 1986161004;
  *(_WORD *)(v4 + 4) = 30832;
  *(_BYTE *)(a2 + 30) = 0;
  v7 = *((unsigned __int8 *)this + 2732);
  if (*((_BYTE *)this + 5192) && *((_BYTE *)this + 2732) && (v7 = 1, *((_BYTE *)this + 2709)))
  {
    *(_QWORD *)a2 = *((_QWORD *)this + 648);
    *(_BYTE *)(a2 + 8) = 1;
    *(_DWORD *)(a2 + 12) = 57600;
    *(_WORD *)(a2 + 48) = *((unsigned __int8 *)this + 4653);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 12) = 57600;
    *(_WORD *)(a2 + 48) = *((unsigned __int8 *)this + 4653);
    if (!v7)
      goto LABEL_25;
  }
  v8 = *((unsigned __int8 *)this + 4641);
  if (*((_BYTE *)this + 4641))
  {
    v9 = (float *)((char *)this + 2496);
    v10 = 0.0;
    do
    {
      if (*((_BYTE *)v9 + 24) && *v9 > v10)
        v10 = *v9;
      v9 += 9;
      --v8;
    }
    while (v8);
    v11 = 0;
    do
    {
      v12 = a2 + 24 * v11;
      v14 = *(_BYTE *)(v12 + 56);
      v13 = v12 + 56;
      if ((v14 & 1) != 0)
        operator delete(*(void **)(v13 + 8));
      *(_QWORD *)v13 = 0;
      if (*((_BYTE *)this + 36 * v11 + 2520) && *v6)
      {
        if (*v6 >= 2u)
          v15 = *(_DWORD *)(*((_QWORD *)this + 345) + 240);
        else
          v15 = 1;
        v16 = (float)((float)(*((float *)this + 9 * v11 + 624) / v10) / (float)v15) * 255.0;
        __asm { BR              X10 }
      }
      ++v11;
    }
    while (v11 < *((unsigned __int8 *)this + 4641));
  }
  if (!*((_DWORD *)this + 682))
  {
    v25[0] = 0x800000001;
    absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type,5ul,std::allocator<webrtc::VideoFrameBuffer::Type>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::VideoFrameBuffer::Type>,webrtc::VideoFrameBuffer::Type const*>>((unint64_t *)(a2 + 208), (uint64_t)v25, 2uLL);
    v17 = (_BYTE *)*((_QWORD *)this + 676);
    v21 = (_BYTE *)*((_QWORD *)this + 677);
    v20 = v21 - v17;
    v19 = v21 - v17 < 0;
    if (v21 == v17)
      return;
    goto LABEL_28;
  }
LABEL_25:
  v17 = (_BYTE *)*((_QWORD *)this + 676);
  v18 = (_BYTE *)*((_QWORD *)this + 677);
  v20 = v18 - v17;
  v19 = v18 - v17 < 0;
  if (v18 == v17)
    return;
LABEL_28:
  if (v19)
    abort();
  v22 = (char *)operator new(v20);
  v23 = &v22[v20];
  memcpy(v22, v17, v20);
  v24 = *v5;
  if (*v5)
  {
    *(_QWORD *)(a2 + 184) = v24;
    operator delete(v24);
  }
  *(_QWORD *)(a2 + 176) = v22;
  *(_QWORD *)(a2 + 184) = v23;
  *(_QWORD *)(a2 + 192) = v23;
}

uint64_t webrtc::FieldTrialStructList<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::Params>::~FieldTrialStructList(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)a1 = off_24C0B63E8;
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_24C0B3F90;
  v3 = *(_QWORD **)(a1 + 64);
  if (v3)
  {
    v4 = *(_QWORD **)(a1 + 72);
    v5 = *(void **)(a1 + 64);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v5);
  }
  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v8 = *(void **)(a1 + 8);
    if (!v8)
      return a1;
    goto LABEL_13;
  }
  v8 = *(void **)(a1 + 8);
  if (v8)
  {
LABEL_13:
    *(_QWORD *)(a1 + 16) = v8;
    operator delete(v8);
  }
  return a1;
}

void std::__optional_storage_base<webrtc::FrameDependencyStructure,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<webrtc::FrameDependencyStructure,false> const&>(webrtc::FrameDependencyStructure *this, webrtc::FrameDependencyStructure *a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*((unsigned __int8 *)this + 128) == *((unsigned __int8 *)a2 + 128))
  {
    if (*((_BYTE *)this + 128))
    {
      v4 = *(_QWORD *)a2;
      *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
      *(_QWORD *)this = v4;
      if (this != a2)
      {
        v5 = (unint64_t *)((char *)this + 16);
        v6 = *((_QWORD *)a2 + 2);
        if ((v6 & 1) != 0)
          v7 = (char *)*((_QWORD *)a2 + 3);
        else
          v7 = (char *)a2 + 24;
        absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>(v5, (uint64_t)v7, v6 >> 1);
        v10 = *((_QWORD *)a2 + 9);
        v9 = (char *)a2 + 72;
        v8 = v10;
        v11 = *((_QWORD *)v9 - 1);
        if ((v11 & 1) != 0)
          v12 = v8;
        else
          v12 = (uint64_t)v9;
        absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::RenderResolution>,webrtc::RenderResolution const*>>((unint64_t *)this + 8, v12, v11 >> 1);
        std::vector<webrtc::FrameDependencyTemplate>::__assign_with_size[abi:sn180100]<webrtc::FrameDependencyTemplate*,webrtc::FrameDependencyTemplate*>((uint64_t *)this + 13, *((_QWORD *)v9 + 4), *((_QWORD *)v9 + 5), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)v9 + 5) - *((_QWORD *)v9 + 4)) >> 3));
      }
    }
  }
  else if (*((_BYTE *)this + 128))
  {
    webrtc::FrameDependencyStructure::~FrameDependencyStructure(this);
    *((_BYTE *)this + 128) = 0;
  }
  else
  {
    webrtc::FrameDependencyStructure::FrameDependencyStructure(this, a2);
    *((_BYTE *)this + 128) = 1;
  }
}

void std::vector<webrtc::FrameDependencyTemplate>::__assign_with_size[abi:sn180100]<webrtc::FrameDependencyTemplate*,webrtc::FrameDependencyTemplate*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = a1 + 2;
  v8 = a1[2];
  v10 = *a1;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *a1) >> 3) < a4)
  {
    if (!v10)
      goto LABEL_27;
    v11 = a1[1];
    v12 = (void *)*a1;
    if (v11 == v10)
    {
LABEL_26:
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
LABEL_27:
      if (a4 > 0x276276276276276)
        goto LABEL_36;
      v20 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
      v21 = 2 * v20;
      if (2 * v20 <= a4)
        v21 = a4;
      v22 = v20 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v21;
      if (v22 > 0x276276276276276)
LABEL_36:
        abort();
      v23 = 104 * v22;
      v14 = operator new(104 * v22);
      *a1 = (uint64_t)v14;
      a1[1] = (uint64_t)v14;
      a1[2] = (uint64_t)v14 + v23;
      v15 = (uint64_t)v9;
      v16 = a2;
      goto LABEL_35;
    }
    while (1)
    {
      if ((*(_BYTE *)(v11 - 24) & 1) != 0)
      {
        operator delete(*(void **)(v11 - 16));
        if ((*(_BYTE *)(v11 - 48) & 1) == 0)
        {
LABEL_8:
          if ((*(_BYTE *)(v11 - 96) & 1) != 0)
            goto LABEL_12;
          goto LABEL_5;
        }
      }
      else if ((*(_BYTE *)(v11 - 48) & 1) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(void **)(v11 - 40));
      if ((*(_BYTE *)(v11 - 96) & 1) != 0)
LABEL_12:
        operator delete(*(void **)(v11 - 88));
LABEL_5:
      v11 -= 104;
      if (v11 == v10)
      {
        v12 = (void *)*a1;
        goto LABEL_26;
      }
    }
  }
  if (0x4EC4EC4EC4EC4EC5 * ((a1[1] - v10) >> 3) >= a4)
  {
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,webrtc::FrameDependencyTemplate *,webrtc::FrameDependencyTemplate *,webrtc::FrameDependencyTemplate *,0>(a2, a3, v10);
    v18 = v17;
    v19 = a1[1];
    if (v19 == v17)
    {
LABEL_16:
      a1[1] = v18;
      return;
    }
    while (1)
    {
      if ((*(_BYTE *)(v19 - 24) & 1) != 0)
      {
        operator delete(*(void **)(v19 - 16));
        if ((*(_BYTE *)(v19 - 48) & 1) == 0)
        {
LABEL_20:
          if ((*(_BYTE *)(v19 - 96) & 1) != 0)
            goto LABEL_24;
          goto LABEL_17;
        }
      }
      else if ((*(_BYTE *)(v19 - 48) & 1) == 0)
      {
        goto LABEL_20;
      }
      operator delete(*(void **)(v19 - 40));
      if ((*(_BYTE *)(v19 - 96) & 1) != 0)
LABEL_24:
        operator delete(*(void **)(v19 - 88));
LABEL_17:
      v19 -= 104;
      if (v19 == v18)
        goto LABEL_16;
    }
  }
  v13 = a2 + 8 * ((a1[1] - v10) >> 3);
  std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,webrtc::FrameDependencyTemplate *,webrtc::FrameDependencyTemplate *,webrtc::FrameDependencyTemplate *,0>(a2, v13, v10);
  v14 = (void *)a1[1];
  v15 = (uint64_t)v9;
  v16 = v13;
LABEL_35:
  std::__uninitialized_allocator_copy_impl[abi:sn180100]<std::allocator<webrtc::FrameDependencyTemplate>,webrtc::FrameDependencyTemplate*,webrtc::FrameDependencyTemplate*,webrtc::FrameDependencyTemplate*>(v15, v16, a3, (uint64_t)v14);
  a1[1] = v24;
}

void std::__uninitialized_allocator_copy_impl[abi:sn180100]<std::allocator<webrtc::FrameDependencyTemplate>,webrtc::FrameDependencyTemplate*,webrtc::FrameDependencyTemplate*,webrtc::FrameDependencyTemplate*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;

  if (a2 != a3)
  {
    for (i = 0; a2 + i != a3; i += 104)
    {
      if (!(a4 + i))
      {
        __break(1u);
        return;
      }
      v8 = a2 + i;
      v9 = a4 + i;
      *(_QWORD *)(a4 + i) = *(_QWORD *)(a2 + i);
      *(_QWORD *)(a4 + i + 8) = 0;
      v10 = (unint64_t *)(a4 + i + 8);
      v11 = *(_QWORD *)(a2 + i + 8);
      if (v11 >= 2)
      {
        if ((v11 & 1) != 0)
        {
          absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::InitFrom(v10, (unint64_t *)(a2 + i + 8));
          *(_QWORD *)(v9 + 56) = 0;
          v12 = (unint64_t *)(v9 + 56);
          v23 = *(_QWORD *)(v8 + 56);
          v14 = (unint64_t *)(v8 + 56);
          v13 = v23;
          if (v23 < 2)
          {
LABEL_8:
            *(_QWORD *)(a4 + i + 80) = 0;
            v16 = (unint64_t *)(a4 + i + 80);
            v17 = (unint64_t *)(a2 + i + 80);
            v18 = *v17;
            if (*v17 >= 2)
              goto LABEL_9;
            continue;
          }
        }
        else
        {
          *v10 = v11;
          v19 = a4 + i;
          v20 = *(_OWORD *)(a2 + i + 16);
          v21 = *(_OWORD *)(a2 + i + 32);
          *(_QWORD *)(v19 + 48) = *(_QWORD *)(a2 + i + 48);
          *(_OWORD *)(v19 + 16) = v20;
          *(_OWORD *)(v19 + 32) = v21;
          *(_QWORD *)(v9 + 56) = 0;
          v12 = (unint64_t *)(v9 + 56);
          v22 = *(_QWORD *)(v8 + 56);
          v14 = (unint64_t *)(v8 + 56);
          v13 = v22;
          if (v22 < 2)
            goto LABEL_8;
        }
      }
      else
      {
        *(_QWORD *)(v9 + 56) = 0;
        v12 = (unint64_t *)(v9 + 56);
        v15 = *(_QWORD *)(v8 + 56);
        v14 = (unint64_t *)(v8 + 56);
        v13 = v15;
        if (v15 < 2)
          goto LABEL_8;
      }
      if ((v13 & 1) != 0)
      {
        absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(v12, v14);
        *(_QWORD *)(a4 + i + 80) = 0;
        v16 = (unint64_t *)(a4 + i + 80);
        v17 = (unint64_t *)(a2 + i + 80);
        v18 = *v17;
        if (*v17 >= 2)
        {
LABEL_9:
          if ((v18 & 1) != 0)
          {
            absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(v16, v17);
          }
          else
          {
            *v16 = v18;
            *(_OWORD *)(a4 + i + 88) = *(_OWORD *)(a2 + i + 88);
          }
        }
      }
      else
      {
        *v12 = v13;
        *(_OWORD *)(a4 + i + 64) = *(_OWORD *)(a2 + i + 64);
        *(_QWORD *)(a4 + i + 80) = 0;
        v16 = (unint64_t *)(a4 + i + 80);
        v17 = (unint64_t *)(a2 + i + 80);
        v18 = *v17;
        if (*v17 >= 2)
          goto LABEL_9;
      }
    }
  }
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,webrtc::FrameDependencyTemplate *,webrtc::FrameDependencyTemplate *,webrtc::FrameDependencyTemplate *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 == a2)
    return a1;
  v5 = a2;
  v6 = 0;
  do
  {
    *(_QWORD *)(a3 + v6) = *(_QWORD *)(a1 + v6);
    if (a1 != a3)
    {
      v7 = (_QWORD *)(a1 + v6);
      v8 = a3 + v6;
      v9 = *(_QWORD *)(a1 + v6 + 8);
      if ((v9 & 1) != 0)
        v10 = *(_QWORD *)(a1 + v6 + 16);
      else
        v10 = a1 + v6 + 16;
      absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(a3 + v6 + 8), v10, v9 >> 1);
      v11 = v7[7];
      if ((v11 & 1) != 0)
        v12 = v7[8];
      else
        v12 = (uint64_t)(v7 + 8);
      absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 56), v12, v11 >> 1);
      v15 = v7[11];
      v14 = v7 + 11;
      v13 = v15;
      v16 = *(v14 - 1);
      if ((v16 & 1) != 0)
        v17 = v13;
      else
        v17 = (uint64_t)v14;
      absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v8 + 80), v17, v16 >> 1);
    }
    v6 += 104;
  }
  while (a1 + v6 != v5);
  return v5;
}

webrtc::FrameDependencyStructure *webrtc::FrameDependencyStructure::FrameDependencyStructure(webrtc::FrameDependencyStructure *this, const webrtc::FrameDependencyStructure *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *(_QWORD *)a2;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *(_QWORD *)this = v4;
  *((_QWORD *)this + 2) = 0;
  v5 = (unint64_t *)((char *)this + 16);
  v8 = *((_QWORD *)a2 + 2);
  v6 = (unint64_t *)((char *)a2 + 16);
  v7 = v8;
  if (v8 >= 2)
  {
    if ((v7 & 1) != 0)
    {
      absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::InitFrom(v5, v6);
      *((_QWORD *)this + 8) = 0;
      v9 = (unint64_t *)((char *)this + 64);
      v10 = (unint64_t *)((char *)a2 + 64);
      v11 = *((_QWORD *)a2 + 8);
      if (v11 >= 2)
        goto LABEL_11;
    }
    else
    {
      *((_QWORD *)this + 2) = v7;
      v20 = *(_OWORD *)((char *)a2 + 24);
      v21 = *(_OWORD *)((char *)a2 + 40);
      *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
      *(_OWORD *)((char *)this + 40) = v21;
      *(_OWORD *)((char *)this + 24) = v20;
      *((_QWORD *)this + 8) = 0;
      v9 = (unint64_t *)((char *)this + 64);
      v10 = (unint64_t *)((char *)a2 + 64);
      v11 = *((_QWORD *)a2 + 8);
      if (v11 >= 2)
        goto LABEL_11;
    }
LABEL_3:
    *((_QWORD *)this + 15) = 0;
    v12 = (char *)this + 120;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    v14 = *((_QWORD *)a2 + 13);
    v13 = *((_QWORD *)a2 + 14);
    v15 = v13 - v14;
    if (v13 == v14)
      return this;
    goto LABEL_4;
  }
  *((_QWORD *)this + 8) = 0;
  v9 = (unint64_t *)((char *)this + 64);
  v10 = (unint64_t *)((char *)a2 + 64);
  v11 = *((_QWORD *)a2 + 8);
  if (v11 < 2)
    goto LABEL_3;
LABEL_11:
  if ((v11 & 1) != 0)
  {
    absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::InitFrom(v9, v10);
    *((_QWORD *)this + 15) = 0;
    v12 = (char *)this + 120;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    v14 = *((_QWORD *)a2 + 13);
    v13 = *((_QWORD *)a2 + 14);
    v15 = v13 - v14;
    if (v13 == v14)
      return this;
  }
  else
  {
    *((_QWORD *)this + 8) = v11;
    v22 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)this + 72) = v22;
    *((_QWORD *)this + 15) = 0;
    v12 = (char *)this + 120;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    v14 = *((_QWORD *)a2 + 13);
    v13 = *((_QWORD *)a2 + 14);
    v15 = v13 - v14;
    if (v13 == v14)
      return this;
  }
LABEL_4:
  v16 = 0x4EC4EC4EC4EC4EC5 * (v15 >> 3);
  if (v16 >= 0x276276276276277)
    abort();
  v17 = (char *)operator new(v15);
  *((_QWORD *)this + 13) = v17;
  *((_QWORD *)this + 14) = v17;
  *((_QWORD *)this + 15) = &v17[104 * v16];
  std::__uninitialized_allocator_copy_impl[abi:sn180100]<std::allocator<webrtc::FrameDependencyTemplate>,webrtc::FrameDependencyTemplate*,webrtc::FrameDependencyTemplate*,webrtc::FrameDependencyTemplate*>((uint64_t)v12, v14, v13, (uint64_t)v17);
  *((_QWORD *)this + 14) = v18;
  return this;
}

void *absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::InitFrom(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  void *v6;
  const void *v7;
  unint64_t v8;
  void *result;

  v2 = *a2;
  if (*a2 <= 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = v2 >> 1;
  if ((v2 & 1) != 0)
  {
    if (v5 <= 8)
      v8 = 8;
    else
      v8 = v2 >> 1;
    if (!(v8 >> 61))
    {
      v6 = operator new(8 * v8);
      a1[1] = (unint64_t)v6;
      a1[2] = v8;
      v7 = (const void *)a2[1];
      goto LABEL_9;
    }
LABEL_11:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v6 = a1 + 1;
  v7 = a2 + 1;
LABEL_9:
  result = memcpy(v6, v7, 8 * v5);
  *a1 = *a2;
  return result;
}

void webrtc::FieldTrialStructList<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::Params>::~FieldTrialStructList(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)a1 = off_24C0B63E8;
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_24C0B3F90;
  v3 = *(_QWORD **)(a1 + 64);
  if (v3)
  {
    v4 = *(_QWORD **)(a1 + 72);
    v5 = *(void **)(a1 + 64);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v5);
  }
  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v8 = *(void **)(a1 + 8);
    if (!v8)
      goto LABEL_16;
  }
  else
  {
    v8 = *(void **)(a1 + 8);
    if (!v8)
      goto LABEL_16;
  }
  *(_QWORD *)(a1 + 16) = v8;
  operator delete(v8);
LABEL_16:
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::FieldTrialStructList<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::Params>::ParseDone(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __n128 v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;

  v1 = (_QWORD *)a1[8];
  v2 = (_QWORD *)a1[9];
  if (v1 != v2)
  {
    v4 = -1;
    do
    {
      if (*(_BYTE *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1) + 57))
        return;
      if (*(_BYTE *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1) + 58))
      {
        v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
        if (v4 == -1)
        {
          v4 = v6;
        }
        else if (v4 != v6)
        {
          return;
        }
      }
      ++v1;
    }
    while (v1 != v2);
    if (v4 != -1)
    {
      if (v4)
      {
        if (v4 < 0)
          goto LABEL_30;
        v7 = v4;
        v8 = (char *)operator new(20 * v4);
        v9 = &v8[20 * v4];
        v10.n128_u64[0] = -1;
        v10.n128_u64[1] = -1;
        v11 = v8;
        do
        {
          *(_QWORD *)v11 = -1;
          *((_DWORD *)v11 + 2) = 0;
          v11[12] = 1;
          *(_DWORD *)(v11 + 13) = 0;
          *((_DWORD *)v11 + 4) = 0;
          v11 += 20;
        }
        while (v11 != v9);
        v12 = (_QWORD *)a1[8];
        v13 = (_QWORD *)a1[9];
        if (v12 != v13)
        {
          v14 = v4;
          while (!*(_BYTE *)((*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)*v12 + 24))(*v12, v10) + 58))
          {
LABEL_17:
            if (++v12 == v13)
              goto LABEL_26;
          }
          v15 = 0;
          v16 = v8;
          while (v7 != v15)
          {
            (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*v12 + 16))(*v12, v16, v15++);
            v16 += 20;
            if (v14 == v15)
              goto LABEL_17;
          }
          __break(1u);
LABEL_30:
          std::__throw_bad_array_new_length[abi:sn180100]();
        }
      }
      else
      {
        v17 = (uint64_t *)a1[8];
        v18 = (uint64_t *)a1[9];
        while (v17 != v18)
        {
          v19 = *v17++;
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        }
        v8 = 0;
        v9 = 0;
      }
LABEL_26:
      v20 = (void *)a1[11];
      a1[11] = v8;
      a1[12] = v9;
      a1[13] = v9;
      if (v20)
        operator delete(v20);
    }
  }
}

int *std::vector<std::pair<int,webrtc::LibvpxVp9Encoder::PerformanceFlags::ParameterSet>>::emplace<int,webrtc::LibvpxVp9Encoder::PerformanceFlags::ParameterSet>(unint64_t *a1, uint64_t a2, int *a3, __int128 *a4)
{
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  unint64_t v11;
  int v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  int *v35;
  unint64_t v36;
  int *v37;
  unint64_t v38;
  __int128 v39;
  int *i;
  __int128 v41;
  _DWORD *v42;
  __int128 v44;

  v7 = (_DWORD *)*a1;
  v8 = a1[1];
  v9 = (uint64_t)(a2 - *a1) / 20;
  v10 = (int *)(*a1 + 20 * v9);
  v11 = a1[2];
  if (v8 < v11)
  {
    if (v10 != (int *)v8)
    {
      v12 = *a3;
      v44 = *a4;
      v13 = v10 + 5;
      v14 = v8 - 20;
      if (v8 < 0x14)
      {
        a1[1] = v8;
        if ((_DWORD *)v8 == v13)
        {
LABEL_29:
          *v10 = v12;
          v29 = &v7[5 * v9];
          *(_QWORD *)(v29 + 1) = v44;
          *(_QWORD *)((char *)v29 + 9) = *(_QWORD *)((char *)&v44 + 5);
          return v10;
        }
      }
      else
      {
        v15 = v8 - 20;
        v16 = a1[1];
        do
        {
          v17 = *(_OWORD *)v15;
          *(_DWORD *)(v16 + 16) = *(_DWORD *)(v15 + 16);
          *(_OWORD *)v16 = v17;
          v16 += 20;
          v15 += 20;
        }
        while (v15 < v8);
        a1[1] = v16;
        if ((_DWORD *)v8 == v13)
          goto LABEL_29;
      }
      v27 = (uint64_t)(v8 - (_QWORD)v13) >> 2;
      do
      {
        *(_DWORD *)v14 = v10[v27 - 5];
        v28 = *(_QWORD *)&v10[v27 - 4];
        *(_QWORD *)(v14 + 9) = *(_QWORD *)((char *)&v10[v27 - 2] - 3);
        *(_QWORD *)(v14 + 4) = v28;
        v14 -= 20;
        v27 -= 5;
      }
      while (v27 * 4);
      goto LABEL_29;
    }
    if (v7)
    {
      *v10 = *a3;
      *(_OWORD *)&v7[5 * v9 + 1] = *a4;
      a1[1] = (unint64_t)(v10 + 5);
      return v10;
    }
    goto LABEL_45;
  }
  v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (_QWORD)v7) >> 2) + 1;
  if (v18 > 0xCCCCCCCCCCCCCCCLL)
    goto LABEL_46;
  v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - (_QWORD)v7) >> 2);
  v20 = 2 * v19;
  if (2 * v19 <= v18)
    v20 = v18;
  if (v19 >= 0x666666666666666)
    v21 = 0xCCCCCCCCCCCCCCCLL;
  else
    v21 = v20;
  if (v21)
  {
    if (v21 > 0xCCCCCCCCCCCCCCCLL)
      goto LABEL_47;
    v22 = (char *)operator new(20 * v21);
    v23 = (unint64_t)&v22[20 * v9];
    v24 = &v22[20 * v21];
    if ((char *)v23 != v24)
      goto LABEL_35;
  }
  else
  {
    v22 = 0;
    v23 = 20 * v9;
    v24 = 0;
    if (v23)
      goto LABEL_35;
  }
  v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - (_QWORD)v22) >> 2);
  if (v23 > (unint64_t)v22)
  {
    if (v25 >= -1)
      v26 = v25 + 1;
    else
      v26 = v25 + 2;
    v24 = (char *)v23;
    v23 -= 20 * (v26 >> 1);
    goto LABEL_35;
  }
  v30 = 0x999999999999999ALL * ((uint64_t)(v23 - (_QWORD)v22) >> 2);
  if ((char *)v23 == v22)
    v30 = 1;
  if (v30 > 0xCCCCCCCCCCCCCCCLL)
LABEL_47:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v31 = v30 >> 2;
  v32 = 20 * v30;
  v33 = (char *)operator new(20 * v30);
  v23 = (unint64_t)&v33[20 * v31];
  v24 = &v33[v32];
  if (v22)
    operator delete(v22);
LABEL_35:
  if (!v23)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    abort();
  }
  *(_DWORD *)v23 = *a3;
  *(_OWORD *)(v23 + 4) = *a4;
  v34 = v23 + 20;
  v35 = (int *)*a1;
  v36 = v23;
  if ((int *)*a1 != v10)
  {
    v37 = v10;
    v38 = v23;
    do
    {
      v36 = v38 - 20;
      v39 = *(_OWORD *)(v37 - 5);
      *(_DWORD *)(v38 - 4) = *(v37 - 1);
      *(_OWORD *)(v38 - 20) = v39;
      v37 -= 5;
      v38 -= 20;
    }
    while (v37 != v35);
  }
  for (i = (int *)a1[1]; v10 != i; v10 += 5)
  {
    v41 = *(_OWORD *)v10;
    *(_DWORD *)(v34 + 16) = v10[4];
    *(_OWORD *)v34 = v41;
    v34 += 20;
  }
  v42 = (_DWORD *)*a1;
  *a1 = v36;
  a1[1] = v34;
  a1[2] = (unint64_t)v24;
  if (v42)
    operator delete(v42);
  return (int *)v23;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0B6418;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0B6418;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 16) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0B6460;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0B6460;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 4) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0B64A8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0B64A8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, _DWORD **a2, _DWORD *a3)
{
  **a2 = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0B64F0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0B64F0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 8) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,BOOL)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,BOOL)#1}>,void ()(void *,BOOL)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,BOOL)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,BOOL)#1}>,void ()(void *,BOOL)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0B6538;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,BOOL)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,BOOL)#1}>,void ()(void *,BOOL)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0B6538;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,BOOL)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::LibvpxVp9Encoder::ParsePerformanceFlagsFromTrials(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,BOOL)#1}>,void ()(void *,BOOL)>::operator()(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *(_BYTE *)(*(_QWORD *)a2 + 12) = *a3;
}

void webrtc::Limiter::Process(float *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int32x2_t v30;
  int32x2_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  float v39;
  unint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float *v44;
  uint64_t v45;
  unint64_t v46;
  float32x4_t *v47;
  uint64_t v48;
  int32x4_t v49;
  int32x4_t v50;
  uint64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t *v55;
  int32x4_t v56;
  uint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  unint64_t v60;
  float32x4_t *v62;
  uint64_t v63;
  float32x4_t *v64;
  int8x16_t v65;
  int8x16_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float *v70;
  float *v71;
  float v72;
  float v73;
  float v74;
  float v75;
  std::string *v76;
  uint64_t v77;
  uint64_t v79[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;

  v3 = a2;
  v83 = 0u;
  v84 = 0u;
  v5 = HIDWORD(a3);
  v81 = 0u;
  v82 = 0u;
  v80 = 0u;
  v79[0] = a2;
  v79[1] = a3;
  webrtc::FixedDigitalLevelEstimator::ComputeLevel((uint64_t)(a1 + 22), v79, (uint64_t)&v80);
  a1[30] = a1[531];
  v6 = a1 + 30;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *(float *)&v80);
  *((_DWORD *)a1 + 31) = v7;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v80 + 1));
  *((_DWORD *)a1 + 32) = v8;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v80 + 2));
  *((_DWORD *)a1 + 33) = v9;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v80 + 3));
  *((_DWORD *)a1 + 34) = v10;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *(float *)&v81);
  *((_DWORD *)a1 + 35) = v11;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v81 + 1));
  *((_DWORD *)a1 + 36) = v12;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v81 + 2));
  *((_DWORD *)a1 + 37) = v13;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v81 + 3));
  *((_DWORD *)a1 + 38) = v14;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *(float *)&v82);
  *((_DWORD *)a1 + 39) = v15;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v82 + 1));
  *((_DWORD *)a1 + 40) = v16;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v82 + 2));
  *((_DWORD *)a1 + 41) = v17;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v82 + 3));
  *((_DWORD *)a1 + 42) = v18;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *(float *)&v83);
  *((_DWORD *)a1 + 43) = v19;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v83 + 1));
  *((_DWORD *)a1 + 44) = v20;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v83 + 2));
  *((_DWORD *)a1 + 45) = v21;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v83 + 3));
  *((_DWORD *)a1 + 46) = v22;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *(float *)&v84);
  *((_DWORD *)a1 + 47) = v23;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v84 + 1));
  *((_DWORD *)a1 + 48) = v24;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v84 + 2));
  *((_DWORD *)a1 + 49) = v25;
  webrtc::InterpolatedGainCurve::LookUpGainToApply((uint64_t)a1, *((float *)&v84 + 3));
  *((_DWORD *)a1 + 50) = v32;
  if (v5)
    v33 = (unint64_t)(a1 + 51);
  else
    v33 = 0;
  v34 = ((int)v5 / 20);
  if ((int)v5 % 20)
  {
    v76 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v26, v27, v28, v29, ((int)v5 % 20));
    rtc::RefCountedObject<webrtc::LocalAudioSource>::AddRef((uint64_t)v76);
    return;
  }
  v35 = a1[30];
  v36 = a1[31];
  if (v35 > v36 && v5)
  {
    v37 = a3 >> 32 >= (unint64_t)(int)v34 ? (int)v34 : a3 >> 32;
    v38 = v37 ? v33 : 0;
    if ((int)v37 >= 1)
    {
      v39 = v35 - v36;
      if (v37 >= 2uLL)
      {
        v77 = v3;
        v41 = 0;
        v40 = v37 - (unint64_t)(v37 & 1);
        do
        {
          v42 = powf(1.0 - (float)((int)v41 / (int)v37), 8.0);
          v43 = powf(1.0 - (float)(((int)v41 + 1) / (int)v37), 8.0);
          v44 = (float *)(v38 + 4 * v41);
          *v44 = v36 + (float)(v42 * v39);
          v44[1] = v36 + (float)(v43 * v39);
          v41 += 2;
        }
        while (v40 != v41);
        v3 = v77;
        if ((v37 & 1) == 0)
          goto LABEL_20;
      }
      else
      {
        v40 = 0;
      }
      do
      {
        *(float *)(v38 + 4 * v40) = v36 + (float)(powf(1.0 - (float)((int)v40 / (int)v37), 8.0) * v39);
        ++v40;
      }
      while (v37 != v40);
    }
  }
LABEL_20:
  if ((int)v5 >= 20)
  {
    v45 = v35 > v36;
    v46 = v33 + 4 * v45 * (int)v34;
    v47 = (float32x4_t *)(v46 + 16);
    v48 = 4 * (int)v34;
    v49.i64[0] = 0x400000004;
    v49.i64[1] = 0x400000004;
    v50.i64[0] = 0x800000008;
    v50.i64[1] = 0x800000008;
    do
    {
      v30.i32[0] = v6[v45++];
      *(float *)v31.i32 = (float)(*(float *)&v6[v45] - *(float *)v30.i32) / (float)(int)v34;
      if (v34 >= 8)
      {
        v52 = (float32x4_t)vdupq_lane_s32(v31, 0);
        v53 = (float32x4_t)vdupq_lane_s32(v30, 0);
        v54 = v34 & 0xFFFFFFF8;
        v55 = v47;
        v56 = (int32x4_t)xmmword_208F071C0;
        do
        {
          v55[-1] = vmlaq_f32(v53, vcvtq_f32_s32(v56), v52);
          *v55 = vmlaq_f32(v53, vcvtq_f32_s32(vaddq_s32(v56, v49)), v52);
          v56 = vaddq_s32(v56, v50);
          v55 += 2;
          v54 -= 8;
        }
        while (v54);
        v51 = v34 & 0xFFFFFFF8;
        if (v51 == v34)
          goto LABEL_22;
      }
      else
      {
        v51 = 0;
      }
      do
      {
        *(float *)(v46 + 4 * v51) = *(float *)v30.i32 + (float)(*(float *)v31.i32 * (float)(int)v51);
        ++v51;
      }
      while (v34 != v51);
LABEL_22:
      v47 = (float32x4_t *)((char *)v47 + v48);
      v46 += v48;
    }
    while (v45 != 20);
  }
  if ((int)a3 >= 1 && (int)v5 >= 1)
  {
    v57 = 0;
    v58.i64[0] = 0xC7000000C7000000;
    v58.i64[1] = 0xC7000000C7000000;
    v59 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
    while (1)
    {
      v60 = *(_QWORD *)(v3 + 8 * v57);
      if (!((unint64_t)a3 >> 35))
        break;
      if (v60 < v33 + 4 * v5 && v33 < v60 + 4 * v5)
        break;
      v62 = (float32x4_t *)(v60 + 16);
      v63 = v5 & 0xFFFFFFF8;
      v64 = (float32x4_t *)(v33 + 16);
      do
      {
        v65 = (int8x16_t)vmulq_f32(v62[-1], v64[-1]);
        v66 = (int8x16_t)vmulq_f32(*v62, *v64);
        v62[-1] = (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32((float32x4_t)v58, (float32x4_t)v65), v58, vbslq_s8((int8x16_t)vcgeq_f32((float32x4_t)v65, (float32x4_t)v59), v59, v65));
        *(int8x16_t *)v62 = vbslq_s8((int8x16_t)vcgeq_f32((float32x4_t)v58, (float32x4_t)v66), v58, vbslq_s8((int8x16_t)vcgeq_f32((float32x4_t)v66, (float32x4_t)v59), v59, v66));
        v62 += 2;
        v64 += 2;
        v63 -= 8;
      }
      while (v63);
      v67 = v5 & 0xFFFFFFF8;
      if (v5 != v67)
        goto LABEL_45;
LABEL_33:
      if (++v57 == a3)
        goto LABEL_53;
    }
    v67 = 0;
LABEL_45:
    v68 = v5 - v67;
    v69 = 4 * v67;
    v70 = (float *)(v33 + 4 * v67);
    v71 = (float *)(v60 + v69);
    do
    {
      v72 = *v70++;
      v73 = *v71 * v72;
      v74 = 32767.0;
      if (v73 < 32767.0)
        v74 = v73;
      if (v73 > -32768.0)
        v75 = v74;
      else
        v75 = -32768.0;
      *v71++ = v75;
      --v68;
    }
    while (v68);
    goto LABEL_33;
  }
LABEL_53:
  a1[531] = a1[50];
}

uint64_t rtc::RefCountedObject<webrtc::LocalAudioSource>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 120);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::LocalAudioSource>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 30;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::LocalAudioSource>::~RefCountedObject(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  *(_QWORD *)a1 = &unk_24C0B67A0;
  *(_QWORD *)(a1 + 8) = &unk_24C0B6820;
  if (*(_BYTE *)(a1 + 104) && *(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  *(_QWORD *)a1 = &unk_24C0B6850;
  *(_QWORD *)(a1 + 8) = &unk_24C0B68D0;
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v2 = *(uint64_t **)(a1 + 24);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 32) = 0;
    if (v2 != (uint64_t *)(a1 + 16))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 16));
    }
  }
  return a1;
}

void rtc::RefCountedObject<webrtc::LocalAudioSource>::~RefCountedObject(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  *(_QWORD *)a1 = &unk_24C0B67A0;
  *(_QWORD *)(a1 + 8) = &unk_24C0B6820;
  if (*(_BYTE *)(a1 + 104) && *(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  *(_QWORD *)a1 = &unk_24C0B6850;
  *(_QWORD *)(a1 + 8) = &unk_24C0B68D0;
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = *(_QWORD *)(a1 + 16);
    v2 = *(uint64_t **)(a1 + 24);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 32) = 0;
    if (v2 != (uint64_t *)(a1 + 16))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 16));
    }
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::LocalAudioSource::state(webrtc::LocalAudioSource *this)
{
  return 1;
}

uint64_t webrtc::LocalAudioSource::remote(webrtc::LocalAudioSource *this)
{
  return 0;
}

void webrtc::LocalAudioSource::options(webrtc::LocalAudioSource *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  std::string *v5;

  v4 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)(a2 + 16) = v4;
  *(_WORD *)(a2 + 32) = *((_WORD *)this + 36);
  *(_BYTE *)(a2 + 40) = 0;
  v5 = (std::string *)(a2 + 40);
  *(_BYTE *)(a2 + 64) = 0;
  if (*((_BYTE *)this + 104))
  {
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    }
    else
    {
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *((_OWORD *)this + 5);
      *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 12);
    }
    *(_BYTE *)(a2 + 64) = 1;
  }
  *(_WORD *)(a2 + 72) = *((_WORD *)this + 56);
}

BOOL rtc::RefCountedObject<webrtc::LocalAudioSource>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 120));
  return v1 == 1;
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::LocalAudioSource>::~RefCountedObject(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 - 8) = &unk_24C0B67A0;
  *(_QWORD *)a1 = &unk_24C0B6820;
  if (*(_BYTE *)(a1 + 96) && *(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  *(_QWORD *)(a1 - 8) = &unk_24C0B6850;
  *(_QWORD *)a1 = &unk_24C0B68D0;
  if (*(_QWORD *)(a1 + 24))
  {
    v2 = (uint64_t *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 8);
    v3 = *(uint64_t **)(a1 + 16);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 24) = 0;
    if (v3 != (uint64_t *)(a1 + 8))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 - 8) = &unk_24C0B67A0;
  *(_QWORD *)a1 = &unk_24C0B6820;
  if (*(_BYTE *)(a1 + 96) && *(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  *(_QWORD *)(a1 - 8) = &unk_24C0B6850;
  *(_QWORD *)a1 = &unk_24C0B68D0;
  if (*(_QWORD *)(a1 + 24))
  {
    v2 = (uint64_t *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 8);
    v3 = *(uint64_t **)(a1 + 16);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 24) = 0;
    if (v3 != (uint64_t *)(a1 + 8))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  JUMPOUT(0x20BD0ADECLL);
}

double rtc::LogLineRef::DefaultLogLine(std::string *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  BOOL v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  std::string::size_type v18;
  uint64_t v19;
  std::string::size_type size;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v24;
  size_t v25;
  std::string *v26;
  int v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  char *v35;
  size_t v36;
  std::string *v37;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string *v42;
  char *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string *v47;
  _BYTE *v48;
  std::string::size_type v49;
  std::string *v50;
  int v51;
  std::string::size_type v52;
  std::string::size_type v53;
  int v54;
  std::string::size_type v55;
  BOOL v56;
  std::string *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string *v62;
  char *v63;
  std::string::size_type v64;
  double result;
  std::string v66;
  char __str[50];
  uint64_t v68;

  v2 = a2;
  v68 = *MEMORY[0x24BDAC8D0];
  memset(&v66, 0, sizeof(v66));
  v4 = *(_QWORD *)(a2 + 56);
  if (v4 == 0x8000000000000000)
  {
LABEL_2:
    if (!*(_BYTE *)(v2 + 48))
      goto LABEL_64;
    goto LABEL_22;
  }
  v5 = v4 / 0x3E8uLL;
  if (v4 % 0x3E8uLL > 0x1F3)
    ++v5;
  v6 = -v4 / 0x3E8uLL;
  v7 = -v4 % 0x3E8uLL;
  v8 = v7 > 0x1F4;
  if (v7 <= 0x1F4)
    v9 = -v4 / 0x3E8uLL;
  else
    v9 = v6 + 1;
  v10 = (v9 * (unsigned __int128)0x10624DD2F1A9FBFuLL) >> 64;
  if (v8)
    v11 = -1;
  else
    v11 = 0;
  v12 = -(uint64_t)(v10 >> 2);
  v13 = v11 - v6;
  v14 = v4 >= 0;
  if (v4 < 0)
    v15 = v12;
  else
    v15 = (unint64_t)(((unint64_t)v5 * (unsigned __int128)0x10624DD2F1A9FBFuLL) >> 64) >> 2;
  if (!v14)
    v5 = v13;
  snprintf(__str, 0x32uLL, "[%03lld:%03lld]", v15, v5 % 1000);
  v16 = strlen(__str);
  v17 = v16;
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = 22;
  else
    v18 = (v66.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  v19 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  if (v18 - HIBYTE(v66.__r_.__value_.__r.__words[2]) >= v16)
  {
    if (v16)
    {
      if ((char *)&v66 + HIBYTE(v66.__r_.__value_.__r.__words[2]) <= __str
        && (char *)&v66 + HIBYTE(v66.__r_.__value_.__r.__words[2]) + v16 > __str)
      {
        goto LABEL_161;
      }
      memmove((char *)&v66 + HIBYTE(v66.__r_.__value_.__r.__words[2]), __str, v16);
      v25 = v19 + v17;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      {
        v66.__r_.__value_.__l.__size_ = v19 + v17;
        v66.__r_.__value_.__s.__data_[v25] = 0;
        if (!*(_BYTE *)(v2 + 48))
          goto LABEL_64;
        goto LABEL_22;
      }
      *((_BYTE *)&v66.__r_.__value_.__s + 23) = v25 & 0x7F;
      v66.__r_.__value_.__s.__data_[v25] = 0;
    }
    goto LABEL_2;
  }
  std::string::__grow_by_and_replace(&v66, v18, HIBYTE(v66.__r_.__value_.__r.__words[2]) + v16 - v18, HIBYTE(v66.__r_.__value_.__r.__words[2]), HIBYTE(v66.__r_.__value_.__r.__words[2]), 0, v16, __str);
  if (!*(_BYTE *)(v2 + 48))
    goto LABEL_64;
LABEL_22:
  size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = 22;
  else
    v21 = (v66.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v66.__r_.__value_.__l.__size_;
  if (v21 == size)
  {
    std::string::__grow_by_and_replace(&v66, v21, 1uLL, v21, v21, 0, 1uLL, "[");
    if (!*(_BYTE *)(v2 + 48))
      goto LABEL_161;
  }
  else
  {
    v22 = &v66;
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = (std::string *)v66.__r_.__value_.__r.__words[0];
    if ((char *)v22 + size <= "[" && (char *)&v22->__r_.__value_.__l.__data_ + size + 1 > "[")
      goto LABEL_161;
    v22->__r_.__value_.__s.__data_[size] = 91;
    v24 = size + 1;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    {
      v66.__r_.__value_.__l.__size_ = v24;
      v22->__r_.__value_.__s.__data_[v24] = 0;
      if (!*(_BYTE *)(v2 + 48))
        goto LABEL_161;
    }
    else
    {
      *((_BYTE *)&v66.__r_.__value_.__s + 23) = v24 & 0x7F;
      v22->__r_.__value_.__s.__data_[v24] = 0;
      if (!*(_BYTE *)(v2 + 48))
        goto LABEL_161;
    }
  }
  v26 = rtc::StringBuilder::operator<<(&v66, *(_DWORD *)(v2 + 44));
  v27 = SHIBYTE(v26->__r_.__value_.__r.__words[2]);
  if (v27 >= 0)
    v28 = 22;
  else
    v28 = (v26->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v27 >= 0)
    v29 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
  else
    v29 = v26->__r_.__value_.__l.__size_;
  if (v28 - v29 >= 2)
  {
    if (v27 >= 0)
      v30 = v26;
    else
      v30 = (std::string *)v26->__r_.__value_.__r.__words[0];
    if ((char *)v30 + v29 <= "] " && &v30->__r_.__value_.__s.__data_[v29 + 2] > "] ")
      goto LABEL_161;
    *(_WORD *)((char *)&v30->__r_.__value_.__l.__data_ + v29) = 8285;
    v32 = v29 + 2;
    if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0)
      v26->__r_.__value_.__l.__size_ = v32;
    else
      *((_BYTE *)&v26->__r_.__value_.__s + 23) = v32 & 0x7F;
    v30->__r_.__value_.__s.__data_[v32] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(v26, v28, v29 - v28 + 2, v29, v29, 0, 2uLL, "] ");
  }
LABEL_64:
  if (!*(_QWORD *)(v2 + 32))
    goto LABEL_136;
  v33 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = 22;
  else
    v34 = (v66.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v33 = v66.__r_.__value_.__l.__size_;
  if (v34 == v33)
  {
    std::string::__grow_by_and_replace(&v66, v34, 1uLL, v34, v34, 0, 1uLL, "(");
    v35 = *(char **)(v2 + 24);
    v36 = *(_QWORD *)(v2 + 32);
    if (v35)
      goto LABEL_84;
  }
  else
  {
    v37 = &v66;
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v37 = (std::string *)v66.__r_.__value_.__r.__words[0];
    if ((char *)v37 + v33 <= "(" && (char *)&v37->__r_.__value_.__l.__data_ + v33 + 1 > "(")
      goto LABEL_161;
    v37->__r_.__value_.__s.__data_[v33] = 40;
    v39 = v33 + 1;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    {
      v66.__r_.__value_.__l.__size_ = v39;
      v37->__r_.__value_.__s.__data_[v39] = 0;
      v35 = *(char **)(v2 + 24);
      v36 = *(_QWORD *)(v2 + 32);
      if (v35)
        goto LABEL_84;
    }
    else
    {
      *((_BYTE *)&v66.__r_.__value_.__s + 23) = v39 & 0x7F;
      v37->__r_.__value_.__s.__data_[v39] = 0;
      v35 = *(char **)(v2 + 24);
      v36 = *(_QWORD *)(v2 + 32);
      if (v35)
        goto LABEL_84;
    }
  }
  if (v36)
    goto LABEL_161;
LABEL_84:
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = 22;
  else
    v40 = (v66.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  else
    v41 = v66.__r_.__value_.__l.__size_;
  if (v40 - v41 >= v36)
  {
    if (v36)
    {
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v66;
      else
        v42 = (std::string *)v66.__r_.__value_.__r.__words[0];
      v43 = (char *)v42 + v41;
      if ((char *)v42 + v41 <= v35 && &v43[v36] > v35)
        goto LABEL_161;
      memmove(v43, v35, v36);
      v44 = v41 + v36;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        v66.__r_.__value_.__l.__size_ = v41 + v36;
      else
        *((_BYTE *)&v66.__r_.__value_.__s + 23) = v44 & 0x7F;
      v42->__r_.__value_.__s.__data_[v44] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v66, v40, v41 + v36 - v40, v41, v41, 0, v36, v35);
  }
  v45 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = 22;
  else
    v46 = (v66.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v45 = v66.__r_.__value_.__l.__size_;
  if (v46 == v45)
  {
    std::string::__grow_by_and_replace(&v66, v46, 1uLL, v46, v46, 0, 1uLL, ":");
  }
  else
  {
    v47 = &v66;
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v47 = (std::string *)v66.__r_.__value_.__r.__words[0];
    v48 = (char *)v47 + v45;
    if ((char *)v47 + v45 <= ":" && v48 + 1 > ":")
      goto LABEL_161;
    *v48 = 58;
    v49 = v45 + 1;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      v66.__r_.__value_.__l.__size_ = v49;
    else
      *((_BYTE *)&v66.__r_.__value_.__s + 23) = v49 & 0x7F;
    v47->__r_.__value_.__s.__data_[v49] = 0;
  }
  v50 = rtc::StringBuilder::operator<<(&v66, *(_DWORD *)(v2 + 40));
  v51 = SHIBYTE(v50->__r_.__value_.__r.__words[2]);
  if (v51 >= 0)
    v52 = 22;
  else
    v52 = (v50->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v51 >= 0)
    v53 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
  else
    v53 = v50->__r_.__value_.__l.__size_;
  if (v52 - v53 >= 3)
  {
    if (v51 >= 0)
      v57 = v50;
    else
      v57 = (std::string *)v50->__r_.__value_.__r.__words[0];
    v58 = (std::string::size_type)v57 + v53;
    if ((char *)v57 + v53 <= "): " && v58 + 3 > (unint64_t)"): ")
      goto LABEL_161;
    *(_BYTE *)(v58 + 2) = 32;
    *(_WORD *)v58 = 14889;
    v59 = v53 + 3;
    if (SHIBYTE(v50->__r_.__value_.__r.__words[2]) < 0)
    {
      v50->__r_.__value_.__l.__size_ = v59;
      v57->__r_.__value_.__s.__data_[v59] = 0;
      v54 = *(char *)(v2 + 23);
      if (v54 < 0)
        goto LABEL_125;
      goto LABEL_137;
    }
    *((_BYTE *)&v50->__r_.__value_.__s + 23) = v59 & 0x7F;
    v57->__r_.__value_.__s.__data_[v59] = 0;
LABEL_136:
    v54 = *(char *)(v2 + 23);
    if (v54 < 0)
      goto LABEL_125;
LABEL_137:
    v55 = v54;
    v56 = v54 == 0;
    goto LABEL_138;
  }
  std::string::__grow_by_and_replace(v50, v52, v53 - v52 + 3, v53, v53, 0, 3uLL, "): ");
  v54 = *(char *)(v2 + 23);
  if ((v54 & 0x80000000) == 0)
    goto LABEL_137;
LABEL_125:
  v55 = *(_QWORD *)(v2 + 8);
  if ((v55 & 0x8000000000000000) != 0)
    goto LABEL_161;
  v2 = *(_QWORD *)v2;
  v56 = v55 == 0;
  if (v55)
  {
    if (!v2)
      goto LABEL_161;
  }
LABEL_138:
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = 22;
  else
    v60 = (v66.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  else
    v61 = v66.__r_.__value_.__l.__size_;
  if (v60 - v61 < v55)
  {
    std::string::__grow_by_and_replace(&v66, v60, v61 + v55 - v60, v61, v61, 0, v55, (const std::string::value_type *)v2);
    goto LABEL_158;
  }
  if (v56)
    goto LABEL_158;
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = &v66;
  else
    v62 = (std::string *)v66.__r_.__value_.__r.__words[0];
  v63 = (char *)v62 + v61;
  if ((unint64_t)v62 + v61 <= v2 && (unint64_t)&v63[v55] > v2)
LABEL_161:
    __break(1u);
  memmove(v63, (const void *)v2, v55);
  v64 = v61 + v55;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    v66.__r_.__value_.__l.__size_ = v61 + v55;
  else
    *((_BYTE *)&v66.__r_.__value_.__s + 23) = v64 & 0x7F;
  v62->__r_.__value_.__s.__data_[v64] = 0;
LABEL_158:
  result = *(double *)&v66.__r_.__value_.__l.__data_;
  *this = v66;
  return result;
}

uint64_t rtc::LogMessage::LogToDebug(int a1)
{
  unsigned __int8 v1;
  pthread_mutex_t *v2;
  int v3;
  uint64_t i;
  uint64_t v6;
  pthread_mutexattr_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_253EA56B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_253EA56B0))
  {
    v6 = operator new();
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    pthread_mutexattr_init(&v7);
    pthread_mutexattr_setpolicy_np(&v7, 3);
    pthread_mutex_init((pthread_mutex_t *)v6, &v7);
    pthread_mutexattr_destroy(&v7);
    qword_253EA56A8 = v6;
    __cxa_guard_release(&qword_253EA56B0);
  }
  v2 = (pthread_mutex_t *)qword_253EA56A8;
  pthread_mutex_lock((pthread_mutex_t *)qword_253EA56A8);
  for (i = _MergedGlobals_12; i; i = *(_QWORD *)(i + 8))
  {
    if (*(_DWORD *)(i + 16) < v3)
      v3 = *(_DWORD *)(i + 16);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t rtc::LogMessage::AddLogToStream(uint64_t a1, int a2)
{
  unsigned __int8 v4;
  pthread_mutex_t *v5;
  int v6;
  uint64_t v8;
  pthread_mutexattr_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_253EA56B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_253EA56B0))
  {
    v8 = operator new();
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    pthread_mutexattr_init(&v9);
    pthread_mutexattr_setpolicy_np(&v9, 3);
    pthread_mutex_init((pthread_mutex_t *)v8, &v9);
    pthread_mutexattr_destroy(&v9);
    qword_253EA56A8 = v8;
    __cxa_guard_release(&qword_253EA56B0);
  }
  v5 = (pthread_mutex_t *)qword_253EA56A8;
  pthread_mutex_lock((pthread_mutex_t *)qword_253EA56A8);
  *(_DWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 8) = _MergedGlobals_12;
  _MergedGlobals_12 = a1;
  rtc::LogMessage::streams_empty_ = 0;
  do
  {
    if (*(_DWORD *)(a1 + 16) < v6)
      v6 = *(_DWORD *)(a1 + 16);
    a1 = *(_QWORD *)(a1 + 8);
  }
  while (a1);
  return pthread_mutex_unlock(v5);
}

uint64_t rtc::LogMessage::RemoveLogToStream(rtc::LogMessage *this, rtc::LogSink *a2)
{
  unsigned __int8 v3;
  pthread_mutex_t *v4;
  uint64_t v5;
  rtc::LogMessage *v6;
  rtc::LogMessage *v7;
  uint64_t *v8;
  int i;
  uint64_t v11;
  pthread_mutexattr_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_253EA56B0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_253EA56B0))
  {
    v11 = operator new();
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    pthread_mutexattr_init(&v12);
    pthread_mutexattr_setpolicy_np(&v12, 3);
    pthread_mutex_init((pthread_mutex_t *)v11, &v12);
    pthread_mutexattr_destroy(&v12);
    qword_253EA56A8 = v11;
    __cxa_guard_release(&qword_253EA56B0);
  }
  v4 = (pthread_mutex_t *)qword_253EA56A8;
  pthread_mutex_lock((pthread_mutex_t *)qword_253EA56A8);
  v5 = _MergedGlobals_12;
  if (_MergedGlobals_12)
  {
    if ((rtc::LogMessage *)_MergedGlobals_12 == this)
    {
      v8 = &_MergedGlobals_12;
LABEL_10:
      *v8 = *((_QWORD *)this + 1);
      v5 = _MergedGlobals_12;
    }
    else
    {
      v6 = (rtc::LogMessage *)_MergedGlobals_12;
      while (1)
      {
        v7 = v6;
        v6 = (rtc::LogMessage *)*((_QWORD *)v6 + 1);
        if (!v6)
          break;
        if (v6 == this)
        {
          v8 = (uint64_t *)((char *)v7 + 8);
          goto LABEL_10;
        }
      }
    }
    rtc::LogMessage::streams_empty_ = v5 == 0;
    {
      if (*(_DWORD *)(v5 + 16) < i)
        i = *(_DWORD *)(v5 + 16);
    }
  }
  else
  {
    rtc::LogMessage::streams_empty_ = 1;
  }
  return pthread_mutex_unlock(v4);
}

void rtc::webrtc_logging_impl::Log(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::string::value_type *v9;
  int v11;
  int v12;
  std::string *v13;
  uint64_t *v14;
  uint64_t **v15;
  char *v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  size_t v28;
  unsigned __int8 *v29;
  uint64_t *v30;
  int v31;
  int *v32;
  uint64_t *v33;
  size_t v34;
  size_t v35;
  std::string *v36;
  _BYTE *v37;
  uint64_t *v38;
  int v39;
  uint64_t *v40;
  int *v41;
  uint64_t *v42;
  double *v43;
  long double *v44;
  size_t v45;
  std::string *v46;
  const char **v47;
  const char *v48;
  const char *v49;
  size_t v50;
  size_t v51;
  std::string::size_type v52;
  std::string::size_type v53;
  uint64_t *v54;
  char *v55;
  size_t v56;
  void ***v57;
  BOOL v58;
  std::string::size_type v59;
  std::string::size_type v60;
  void **v61;
  std::string::size_type v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  char *v68;
  size_t v69;
  void **v70;
  std::string::size_type v72;
  uint64_t v73;
  uint64_t v74;
  std::string::size_type v75;
  std::string::size_type v76;
  void **v77;
  char *v78;
  std::string::size_type v79;
  void **v81;
  char *v82;
  std::string::size_type v83;
  void *v84;
  std::string::size_type v85;
  std::string::size_type v86;
  std::string::size_type v87;
  std::string::size_type v88;
  std::string::size_type v89;
  unsigned __int8 v90;
  std::string::size_type v91;
  _BYTE *v92;
  char *v93;
  std::string::size_type v94;
  __int128 *v95;
  _BYTE *v96;
  unint64_t v97;
  void *v98;
  char v99;
  FILE **v100;
  int v101;
  void *v102;
  std::string *v103;
  unsigned __int8 v104;
  pthread_mutex_t *v105;
  uint64_t i;
  uint64_t v107;
  __int128 *v108;
  void *__p[6];
  char v110;
  unint64_t v111;
  const char *v112;
  uint64_t v113;
  int v114;
  void *v115[2];
  void *v116[2];
  __int128 v117;
  uint64_t *v118;
  std::string __str[42];
  _BYTE __p_new_stuff[24];
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  v118 = &a9;
  v11 = *a1;
  if (v11 == 14)
  {
    v15 = (uint64_t **)v118++;
    v14 = *v15;
    v12 = *((_DWORD *)v14 + 4);
    v13 = (std::string *)*((unsigned int *)v14 + 5);
  }
  else
  {
    if (v11 != 13)
      return;
    v12 = 0;
    v13 = 0;
    v14 = v118;
    v118 += 2;
  }
  v16 = (char *)*v14;
  v17 = *((_DWORD *)v14 + 2);
  v110 = 0;
  memset(__p, 0, 45);
  v111 = 0x8000000000000000;
  v112 = "libjingle";
  v113 = 9;
  *(_OWORD *)v115 = 0u;
  *(_OWORD *)v116 = 0u;
  v117 = 0u;
  v114 = v17 & 7;
  if (v16)
  {
    v18 = v17 >> 3;
    v9 = strrchr(v16, 47);
    v19 = strrchr(v16, 92);
    if (v9 <= v19)
      v20 = v19;
    else
      v20 = v9;
    if ((unint64_t)v9 | (unint64_t)v19)
      v16 = v20 + 1;
    __p[3] = v16;
    __p[4] = (void *)strlen(v16);
    LODWORD(__p[5]) = v18;
  }
  if (!v12)
    goto LABEL_23;
  *(_QWORD *)__p_new_stuff = __str;
  *(_OWORD *)&__p_new_stuff[8] = xmmword_208F05840;
  __str[0].__r_.__value_.__s.__data_[0] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)__p_new_stuff, "[0x%08X]", (_DWORD)v13);
  if (v12 != 1)
  {
LABEL_21:
    if (!*(_QWORD *)__p_new_stuff)
      goto LABEL_225;
    std::string::__assign_external((std::string *)v115, *(const std::string::value_type **)__p_new_stuff);
LABEL_23:
    v13 = (std::string *)&v116[1];
    v108 = &v117;
    v29 = a1 + 1;
    v9 = "%x";
    while (2)
    {
      v31 = *v29++;
      switch(v31)
      {
        case 1:
          v32 = (int *)v118++;
          rtc::StringBuilder::operator<<((std::string *)&v116[1], *v32);
          continue;
        case 2:
          v38 = v118++;
          v39 = snprintf((char *)__str, 0x20uLL, "%ld", *v38);
          if (v39 < 0)
            goto LABEL_230;
          goto LABEL_38;
        case 3:
          v40 = v118++;
          rtc::StringBuilder::operator<<((std::string *)&v116[1], *v40);
          continue;
        case 4:
          v41 = (int *)v118++;
          rtc::StringBuilder::operator<<((std::string *)&v116[1], *v41);
          continue;
        case 5:
          v30 = v118++;
          rtc::StringBuilder::operator<<((std::string *)&v116[1], *v30);
          continue;
        case 6:
          v42 = v118++;
          rtc::StringBuilder::operator<<((std::string *)&v116[1], *v42);
          continue;
        case 7:
          v43 = (double *)v118++;
          rtc::StringBuilder::operator<<((std::string *)&v116[1], *v43);
          continue;
        case 8:
          v44 = (long double *)v118++;
          v39 = snprintf((char *)__str, 0x20uLL, "%Lg", *v44);
          if (v39 < 0)
            goto LABEL_230;
LABEL_38:
          v45 = v39;
          if (v39 > 0x16)
          {
            v64 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v39 | 7) != 0x17)
              v64 = v39 | 7;
            v65 = v64 + 1;
            v46 = (std::string *)operator new(v64 + 1);
            *(_QWORD *)&__p_new_stuff[8] = v45;
            *(_QWORD *)&__p_new_stuff[16] = v65 | 0x8000000000000000;
            *(_QWORD *)__p_new_stuff = v46;
          }
          else
          {
            __p_new_stuff[23] = v39;
            v46 = (std::string *)__p_new_stuff;
          }
          v66 = (char *)v46 + v45;
          v21 = (std::string *)((char *)v46 + v45) > __str;
          if (v46 <= __str && (std::string *)((char *)v46 + v45) > __str)
            goto LABEL_225;
          if ((_DWORD)v45)
            memcpy(v46, __str, v45);
          *v66 = 0;
          LOBYTE(v21) = __p_new_stuff[23];
          if ((__p_new_stuff[23] & 0x80000000) == 0)
            goto LABEL_108;
          v68 = *(char **)__p_new_stuff;
          v69 = *(_QWORD *)&__p_new_stuff[8];
          v21 = *(_QWORD *)&__p_new_stuff[8] == 0;
          if (!*(_QWORD *)__p_new_stuff && *(_QWORD *)&__p_new_stuff[8])
            goto LABEL_225;
          goto LABEL_109;
        case 9:
          v47 = (const char **)v118++;
          v48 = *v47;
          if (v48)
            v49 = v48;
          else
            v49 = "(null)";
          v50 = strlen(v49);
          v51 = v50;
          if (v117 >= 0)
            v52 = 22;
          else
            v52 = (*((_QWORD *)&v117 + 1) & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v117 >= 0)
            v53 = HIBYTE(v117);
          else
            v53 = v117;
          if (v52 - v53 >= v50)
          {
            if (v50)
            {
              v22 = (unint64_t)v116[1];
              if (v117 >= 0)
                v70 = &v116[1];
              else
                v70 = (void **)v116[1];
              v21 = (size_t)v70 + v53 + v50;
              if ((char *)v70 + v53 <= v49 && v21 > (unint64_t)v49)
                goto LABEL_225;
              memmove((char *)v70 + v53, v49, v50);
              v72 = v53 + v51;
              if (SHIBYTE(v117) < 0)
                *(_QWORD *)&v117 = v53 + v51;
              else
                HIBYTE(v117) = v72 & 0x7F;
              *((_BYTE *)v70 + v72) = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace((std::string *)&v116[1], v52, v53 + v50 - v52, v53, v53, 0, v50, v49);
          }
          continue;
        case 10:
          v54 = v118;
          v22 = (unint64_t)++v118;
          v55 = (char *)*v54;
          v21 = *(char *)(*v54 + 23);
          if ((v21 & 0x80000000) != 0)
          {
            v56 = *((_QWORD *)v55 + 1);
            if ((v56 & 0x8000000000000000) != 0)
              goto LABEL_225;
            v55 = *(char **)v55;
            v21 = v56 == 0;
            if (v56 && v55 == 0)
              goto LABEL_225;
          }
          else
          {
            v56 = v21;
            LOBYTE(v21) = v21 == 0;
          }
          v22 = SHIBYTE(v117);
          if ((v22 & 0x80000000) == 0)
            v59 = 22;
          else
            v59 = (*((_QWORD *)&v117 + 1) & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v22 & 0x80000000) == 0)
            v60 = HIBYTE(v117);
          else
            v60 = v117;
          if (v59 - v60 >= v56)
          {
            if ((v21 & 1) == 0)
            {
              if ((v22 & 0x80000000) == 0)
                v81 = &v116[1];
              else
                v81 = (void **)v116[1];
              v82 = (char *)v81 + v60;
              if ((char *)v81 + v60 <= v55)
              {
                v21 = (size_t)&v82[v56];
                if (&v82[v56] > v55)
                  goto LABEL_225;
              }
              memmove(v82, v55, v56);
              v83 = v60 + v56;
              if (SHIBYTE(v117) < 0)
                *(_QWORD *)&v117 = v60 + v56;
              else
                HIBYTE(v117) = v83 & 0x7F;
              *((_BYTE *)v81 + v83) = 0;
            }
          }
          else
          {
LABEL_140:
            std::string::__grow_by_and_replace((std::string *)&v116[1], v59, v60 + v56 - v59, v60, v60, 0, v56, v55);
          }
          continue;
        case 11:
          v57 = (void ***)v118;
          v22 = (unint64_t)++v118;
          v21 = (size_t)*v57;
          v55 = *(char **)v21;
          v56 = *(_QWORD *)(v21 + 8);
          if (*(_QWORD *)v21)
            v58 = 1;
          else
            v58 = v56 == 0;
          if (!v58)
            goto LABEL_225;
          if (v117 >= 0)
            v59 = 22;
          else
            v59 = (*((_QWORD *)&v117 + 1) & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v117 >= 0)
            v60 = HIBYTE(v117);
          else
            v60 = v117;
          if (v59 - v60 < v56)
            goto LABEL_140;
          if (!v56)
            continue;
          v22 = (unint64_t)v116[1];
          if (v117 >= 0)
            v61 = &v116[1];
          else
            v61 = (void **)v116[1];
          v21 = (size_t)v61 + v60 + v56;
          if ((char *)v61 + v60 <= v55 && v21 > (unint64_t)v55)
            goto LABEL_225;
          memmove((char *)v61 + v60, v55, v56);
          v63 = v60 + v56;
          if (SHIBYTE(v117) < 0)
            *(_QWORD *)&v117 = v60 + v56;
          else
            HIBYTE(v117) = v63 & 0x7F;
          *((_BYTE *)v61 + v63) = 0;
          continue;
        case 12:
          v33 = v118++;
          snprintf((char *)__str, 0x32uLL, "%x", *v33);
          v34 = strlen((const char *)__str);
          if (v34 >= 0x7FFFFFFFFFFFFFF8)
LABEL_230:
            abort();
          v35 = v34;
          if (v34 > 0x16)
          {
            v73 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v34 | 7) != 0x17)
              v73 = v34 | 7;
            v74 = v73 + 1;
            v36 = (std::string *)operator new(v73 + 1);
            *(_QWORD *)&__p_new_stuff[8] = v35;
            *(_QWORD *)&__p_new_stuff[16] = v74 | 0x8000000000000000;
            *(_QWORD *)__p_new_stuff = v36;
            v37 = (char *)v36 + v35;
            v21 = (std::string *)((char *)v36 + v35) > __str;
            if (v36 <= __str)
            {
LABEL_104:
              if ((_DWORD)v21)
                goto LABEL_225;
            }
          }
          else
          {
            __p_new_stuff[23] = v34;
            v36 = (std::string *)__p_new_stuff;
            v37 = &__p_new_stuff[v35];
            v21 = &__p_new_stuff[v35] > (_BYTE *)__str;
            if (__p_new_stuff <= (_BYTE *)__str)
              goto LABEL_104;
          }
          if (v35)
            memcpy(v36, __str, v35);
          *v37 = 0;
          v21 = __p_new_stuff[23];
          if ((v21 & 0x80000000) != 0)
          {
            v69 = *(_QWORD *)&__p_new_stuff[8];
            if ((*(_QWORD *)&__p_new_stuff[8] & 0x8000000000000000) != 0)
              goto LABEL_225;
            v68 = *(char **)__p_new_stuff;
            v21 = *(_QWORD *)&__p_new_stuff[8] == 0;
            if (*(_QWORD *)&__p_new_stuff[8])
            {
              if (!*(_QWORD *)__p_new_stuff)
                goto LABEL_225;
            }
          }
          else
          {
LABEL_108:
            v69 = v21;
            LOBYTE(v21) = v21 == 0;
            v68 = __p_new_stuff;
          }
LABEL_109:
          v22 = SHIBYTE(v117);
          if ((v22 & 0x80000000) == 0)
            v75 = 22;
          else
            v75 = (*((_QWORD *)&v117 + 1) & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v22 & 0x80000000) == 0)
            v76 = HIBYTE(v117);
          else
            v76 = v117;
          if (v75 - v76 >= v69)
          {
            if ((v21 & 1) != 0)
            {
LABEL_126:
              if ((__p_new_stuff[23] & 0x80000000) != 0)
                goto LABEL_127;
            }
            else
            {
              if ((v22 & 0x80000000) == 0)
                v77 = &v116[1];
              else
                v77 = (void **)v116[1];
              v78 = (char *)v77 + v76;
              if ((char *)v77 + v76 <= v68)
              {
                v21 = (size_t)&v78[v69];
                if (&v78[v69] > v68)
                  goto LABEL_225;
              }
              memmove(v78, v68, v69);
              v79 = v76 + v69;
              if ((SHIBYTE(v117) & 0x80000000) == 0)
              {
                HIBYTE(v117) = v79 & 0x7F;
                *((_BYTE *)v77 + v79) = 0;
                goto LABEL_126;
              }
              *(_QWORD *)&v117 = v76 + v69;
              *((_BYTE *)v77 + v79) = 0;
              if ((__p_new_stuff[23] & 0x80000000) != 0)
LABEL_127:
                operator delete(*(void **)__p_new_stuff);
            }
          }
          else
          {
            std::string::__grow_by_and_replace((std::string *)&v116[1], v75, v76 + v69 - v75, v76, v76, 0, v69, v68);
            if ((__p_new_stuff[23] & 0x80000000) != 0)
              goto LABEL_127;
          }
          continue;
        default:
          v84 = (void *)HIBYTE(v116[0]);
          if (SHIBYTE(v116[0]) < 0)
            v84 = v115[1];
          v9 = (std::string::value_type *)v115;
          if (!v84)
            goto LABEL_195;
          if (SHIBYTE(v117) < 0)
          {
            v85 = v117;
            v86 = (*((_QWORD *)&v117 + 1) & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (v86 - (unint64_t)v117 < 3)
            {
LABEL_166:
              std::string::__grow_by_and_replace((std::string *)&v116[1], v86, v85 - v86 + 3, v85, v85, 0, 3uLL, " : ");
              v21 = SHIBYTE(v116[0]);
              if ((v21 & 0x80000000) != 0)
                goto LABEL_174;
              goto LABEL_167;
            }
            v21 = (size_t)v116[1];
            v22 = (unint64_t)v116[1] + v117;
            if ((char *)v116[1] + (unint64_t)v117 > " : ")
            {
LABEL_172:
              *(_BYTE *)(v22 + 2) = 32;
              *(_WORD *)v22 = 14880;
              v22 = v85 + 3;
              if (SHIBYTE(v117) < 0)
                goto LABEL_226;
              HIBYTE(v117) = v22 & 0x7F;
              *(_BYTE *)(v21 + v22) = 0;
              v21 = SHIBYTE(v116[0]);
              if ((v21 & 0x80000000) != 0)
                goto LABEL_174;
              goto LABEL_167;
            }
          }
          else
          {
            v85 = HIBYTE(v117);
            if ((unint64_t)HIBYTE(v117) - 20 < 3)
            {
              v86 = 22;
              goto LABEL_166;
            }
            v21 = (size_t)&v116[1];
            v22 = (unint64_t)&v116[1] + HIBYTE(v117);
            if (v22 > (unint64_t)" : ")
              goto LABEL_172;
          }
          if (v22 + 3 > (unint64_t)" : ")
            goto LABEL_225;
          goto LABEL_172;
      }
    }
  }
  v23 = *(_QWORD *)&__p_new_stuff[8];
  v24 = *(_QWORD *)&__p_new_stuff[16] + 1;
  memcpy((void *)(*(_QWORD *)__p_new_stuff + *(_QWORD *)&__p_new_stuff[16]), " ", *(_QWORD *)&__p_new_stuff[8] != *(_QWORD *)&__p_new_stuff[16] + 1);
  v25 = *(_QWORD *)&__p_new_stuff[16];
  if (v23 != v24)
    v25 = *(_QWORD *)&__p_new_stuff[16] + 1;
  *(_QWORD *)&__p_new_stuff[16] = v25;
  *(_BYTE *)(*(_QWORD *)__p_new_stuff + v25) = 0;
  v26 = strerror((int)v13);
  if (v26)
  {
    v13 = (std::string *)v26;
    v27 = strlen(v26);
    if (v27 >= *(_QWORD *)&__p_new_stuff[8] + ~*(_QWORD *)&__p_new_stuff[16])
      v28 = *(_QWORD *)&__p_new_stuff[8] + ~*(_QWORD *)&__p_new_stuff[16];
    else
      v28 = v27;
    memcpy((void *)(*(_QWORD *)__p_new_stuff + *(_QWORD *)&__p_new_stuff[16]), v13, v28);
    v22 = *(_QWORD *)__p_new_stuff;
    v21 = *(_QWORD *)&__p_new_stuff[16] + v28;
    *(_QWORD *)&__p_new_stuff[16] = v21;
    *(_BYTE *)(*(_QWORD *)__p_new_stuff + v21) = 0;
    goto LABEL_21;
  }
  while (1)
  {
    while (1)
    {
LABEL_225:
      __break(1u);
LABEL_226:
      *(_QWORD *)&v117 = v22;
      *(_BYTE *)(v21 + v22) = 0;
      v21 = SHIBYTE(v116[0]);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_167:
        v87 = v21;
        LOBYTE(v21) = v21 == 0;
        break;
      }
LABEL_174:
      v87 = (std::string::size_type)v115[1];
      if (((unint64_t)v115[1] & 0x8000000000000000) == 0)
      {
        v9 = (std::string::value_type *)v115[0];
        v21 = v115[1] == 0;
        if (!v115[1] || v115[0])
          break;
      }
    }
    v22 = SHIBYTE(v117);
    if ((v22 & 0x80000000) == 0)
      v88 = 22;
    else
      v88 = (*((_QWORD *)&v117 + 1) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v22 & 0x80000000) == 0)
      v89 = HIBYTE(v117);
    else
      v89 = v117;
    if (v88 - v89 < v87)
    {
      std::string::__grow_by_and_replace(v13, v88, v89 + v87 - v88, v89, v89, 0, v87, v9);
      v90 = HIBYTE(v117);
      if (SHIBYTE(v117) < 0)
        goto LABEL_185;
      goto LABEL_196;
    }
    if ((v21 & 1) != 0)
      goto LABEL_195;
    if ((v22 & 0x80000000) == 0)
      v92 = v13;
    else
      v92 = v116[1];
    v93 = &v92[v89];
    if (&v92[v89] <= v9)
    {
      v21 = (size_t)&v93[v87];
      if (&v93[v87] > v9)
        continue;
    }
    memmove(v93, v9, v87);
    v94 = v89 + v87;
    if ((SHIBYTE(v117) & 0x80000000) == 0)
    {
      HIBYTE(v117) = v94 & 0x7F;
      v92[v94] = 0;
LABEL_195:
      v90 = HIBYTE(v117);
      if (SHIBYTE(v117) < 0)
        goto LABEL_185;
      goto LABEL_196;
    }
    *(_QWORD *)&v117 = v89 + v87;
    v92[v94] = 0;
    v90 = HIBYTE(v117);
    if (SHIBYTE(v117) < 0)
    {
LABEL_185:
      v22 = v117;
      v91 = (*((_QWORD *)&v117 + 1) & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v91 == (_QWORD)v117)
        goto LABEL_198;
      v21 = (size_t)v116[1];
      goto LABEL_199;
    }
LABEL_196:
    v22 = v90;
    v21 = (size_t)v13;
    if ((_DWORD)v22 == 22)
    {
      v91 = 22;
LABEL_198:
      std::string::__grow_by_and_replace(v13, v91, 1uLL, v91, v91, 0, 1uLL, "\n");
      v95 = v108;
      goto LABEL_205;
    }
LABEL_199:
    v96 = (_BYTE *)(v21 + v22);
    if (v21 + v22 > (unint64_t)"\n" || v96 + 1 <= "\n")
      break;
  }
  *v96 = 10;
  v97 = v22 + 1;
  if (SHIBYTE(v117) < 0)
    *(_QWORD *)&v117 = v97;
  else
    HIBYTE(v117) = v97 & 0x7F;
  v95 = v108;
  *(_BYTE *)(v21 + v97) = 0;
LABEL_205:
  v98 = v116[1];
  *(_QWORD *)__p_new_stuff = *(_QWORD *)v95;
  *(_QWORD *)&__p_new_stuff[7] = *(_QWORD *)((char *)v95 + 7);
  v99 = HIBYTE(v117);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = v98;
  __p[1] = *(void **)__p_new_stuff;
  *(void **)((char *)&__p[1] + 7) = *(void **)&__p_new_stuff[7];
  HIBYTE(__p[2]) = v99;
  {
    rtc::LogLineRef::DefaultLogLine(__str, (unint64_t)__p);
    v100 = (FILE **)MEMORY[0x24BDAC8D8];
    v101 = SHIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    v102 = (void *)__str[0].__r_.__value_.__r.__words[0];
    v103 = (__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? __str
         : (std::string *)__str[0].__r_.__value_.__r.__words[0];
    fputs((const char *)v103, (FILE *)*MEMORY[0x24BDAC8D8]);
    fflush(*v100);
    if (v101 < 0)
      operator delete(v102);
  }
  v104 = atomic_load((unsigned __int8 *)&qword_253EA56B0);
  if ((v104 & 1) == 0 && __cxa_guard_acquire(&qword_253EA56B0))
  {
    v107 = operator new();
    *(_OWORD *)v107 = 0u;
    *(_OWORD *)(v107 + 16) = 0u;
    *(_OWORD *)(v107 + 32) = 0u;
    *(_OWORD *)(v107 + 48) = 0u;
    pthread_mutexattr_init((pthread_mutexattr_t *)__str);
    pthread_mutexattr_setpolicy_np((pthread_mutexattr_t *)__str, 3);
    pthread_mutex_init((pthread_mutex_t *)v107, (const pthread_mutexattr_t *)__str);
    pthread_mutexattr_destroy((pthread_mutexattr_t *)__str);
    qword_253EA56A8 = v107;
    __cxa_guard_release(&qword_253EA56B0);
  }
  v105 = (pthread_mutex_t *)qword_253EA56A8;
  pthread_mutex_lock((pthread_mutex_t *)qword_253EA56A8);
  for (i = _MergedGlobals_12; i; i = *(_QWORD *)(i + 8))
  {
    if (v114 >= *(_DWORD *)(i + 16))
      (*(void (**)(uint64_t, void **))(*(_QWORD *)i + 64))(i, __p);
  }
  pthread_mutex_unlock(v105);
  if (SHIBYTE(v117) < 0)
  {
    operator delete(v116[1]);
    if (SHIBYTE(v116[0]) < 0)
      goto LABEL_223;
LABEL_217:
    if (SHIBYTE(__p[2]) < 0)
LABEL_224:
      operator delete(__p[0]);
  }
  else
  {
    if ((SHIBYTE(v116[0]) & 0x80000000) == 0)
      goto LABEL_217;
LABEL_223:
    operator delete(v115[0]);
    if (SHIBYTE(__p[2]) < 0)
      goto LABEL_224;
  }
}

std::string *rtc::StringBuilder::operator<<(std::string *a1, double a2)
{
  int v3;
  size_t v4;
  void **p_src;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  std::string::size_type v10;
  BOOL v11;
  const std::string::value_type *v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string::size_type size;
  std::string *v16;
  std::string::value_type *v17;
  std::string::size_type v18;
  void **__src;
  size_t v21;
  unint64_t v22;
  char __str[32];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = snprintf(__str, 0x20uLL, "%g", a2);
  if (v3 < 0)
LABEL_37:
    abort();
  v4 = v3;
  if (v3 > 0x16)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_src = (void **)operator new(v6 + 1);
    v21 = v4;
    v22 = v7 | 0x8000000000000000;
    __src = p_src;
  }
  else
  {
    HIBYTE(v22) = v3;
    p_src = (void **)&__src;
  }
  v8 = (char *)p_src + v4;
  if (p_src <= (void **)__str && (char *)p_src + v4 > __str)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((_DWORD)v4)
    memcpy(p_src, __str, v4);
  *v8 = 0;
  if (SHIBYTE(v22) < 0)
  {
    v12 = (const std::string::value_type *)__src;
    v10 = v21;
    v11 = v21 == 0;
    if (!__src && v21)
      goto LABEL_36;
  }
  else
  {
    v10 = HIBYTE(v22);
    v11 = HIBYTE(v22) == 0;
    v12 = (const std::string::value_type *)&__src;
  }
  v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a1->__r_.__value_.__l.__size_;
    v14 = (a1->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v14 - size < v10)
    {
LABEL_20:
      std::string::__grow_by_and_replace(a1, v14, v10 - v14 + size, size, size, 0, v10, v12);
      if (SHIBYTE(v22) < 0)
        goto LABEL_32;
      return a1;
    }
  }
  else
  {
    v14 = 22;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (22 - v13 < v10)
      goto LABEL_20;
  }
  if (!v11)
  {
    v16 = a1;
    if ((v13 & 0x80) != 0)
    {
      v16 = (std::string *)a1->__r_.__value_.__r.__words[0];
      v17 = (std::string::value_type *)(a1->__r_.__value_.__r.__words[0] + size);
      if (v17 > v12)
      {
LABEL_29:
        memmove(v17, v12, v10);
        v18 = size + v10;
        if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
        {
          a1->__r_.__value_.__l.__size_ = v18;
          v16->__r_.__value_.__s.__data_[v18] = 0;
          if ((SHIBYTE(v22) & 0x80000000) == 0)
            return a1;
          goto LABEL_32;
        }
        *((_BYTE *)&a1->__r_.__value_.__s + 23) = v18 & 0x7F;
        v16->__r_.__value_.__s.__data_[v18] = 0;
        goto LABEL_31;
      }
    }
    else
    {
      v17 = (char *)a1 + size;
      if ((char *)a1 + size > v12)
        goto LABEL_29;
    }
    if (&v17[v10] > v12)
      goto LABEL_36;
    goto LABEL_29;
  }
LABEL_31:
  if (SHIBYTE(v22) < 0)
LABEL_32:
    operator delete(__src);
  return a1;
}

void rtc::LogSink::OnLogMessage(rtc::LogSink *this, const rtc::LogLineRef *a2)
{
  double v4;
  std::string __p;

  v4 = rtc::LogLineRef::DefaultLogLine(&__p, (unint64_t)a2);
  (*(void (**)(rtc::LogSink *, std::string *, _QWORD, double))(*(_QWORD *)this + 24))(this, &__p, *((unsigned int *)a2 + 20), v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void rtc::LogSink::OnLogMessage(uint64_t a1, char **a2, uint64_t a3, std::string::value_type *__s)
{
  int v4;
  size_t v5;
  unint64_t v6;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  BOOL v18;
  std::string *v19;
  std::string::size_type v20;
  std::string v21;
  void *__p[2];
  std::string::size_type v23;

  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = v5 + 2;
  if (v5 + 2 >= 0x7FFFFFFFFFFFFFF8)
LABEL_29:
    abort();
  if (v6 > 0x16)
  {
    v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v12 = v6 | 7;
    v13 = v12 + 1;
    v11 = (char *)operator new(v12 + 1);
    v21.__r_.__value_.__l.__size_ = v5 + 2;
    v21.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  }
  else
  {
    memset(&v21, 0, sizeof(v21));
    v11 = (char *)&v21;
    *((_BYTE *)&v21.__r_.__value_.__s + 23) = v5 + 2;
  }
  v14 = v11 + 2;
  v15 = v11 <= ": " && v14 > ": ";
  if (v15
    || ((*(_WORD *)v11 = 8250, v4 >= 0) ? (v16 = (char *)a2) : (v16 = *a2),
        (v17 = &v14[v5], v16 >= v14) ? (v18 = v17 > v16) : (v18 = 0),
        v18))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v5)
    memmove(v14, v16, v5);
  *v17 = 0;
  v19 = std::string::insert(&v21, 0, __s);
  v20 = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v23 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 24))(a1, __p, a3);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete(v21.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_27;
}

uint64_t rtc::LogSink::OnLogMessage(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

void rtc::LogSink::OnLogMessage(uint64_t a1, char *__src, size_t __len, uint64_t a4, const std::string::value_type *a5)
{
  char *v10;
  size_t v11;
  size_t v12;
  char *v13;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  std::string v19;
  std::string v20;
  void *__p[2];
  std::string::size_type v22;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_21:
    abort();
  if (__len > 0x16)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    v10 = (char *)operator new(v11 + 1);
    v19.__r_.__value_.__l.__size_ = __len;
    v19.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  }
  else
  {
    *((_BYTE *)&v19.__r_.__value_.__s + 23) = __len;
    v10 = (char *)&v19;
  }
  v13 = &v10[__len];
  if (v10 <= __src && v13 > __src)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (__len)
    memmove(v10, __src, __len);
  *v13 = 0;
  v15 = std::string::insert(&v19, 0, ": ");
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::insert(&v20, 0, a5);
  v18 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v22 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 24))(a1, __p, a4);
  if (SHIBYTE(v22) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_19:
      operator delete(v19.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_19;
}

void rtc::LogSink::OnLogMessage(uint64_t a1, char *__src, size_t __len)
{
  char *v6;
  size_t v7;
  size_t v8;
  char *v9;
  void *__p[2];
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_16:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (char *)operator new(v7 + 1);
    __p[1] = (void *)__len;
    v12 = v8 | 0x8000000000000000;
    __p[0] = v6;
  }
  else
  {
    HIBYTE(v12) = __len;
    v6 = (char *)__p;
  }
  v9 = &v6[__len];
  if (v6 <= __src && v9 > __src)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (__len)
    memmove(v6, __src, __len);
  *v9 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, __p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

uint64_t webrtc::LossBasedControlConfig::LossBasedControlConfig(uint64_t a1, uint64_t a2)
{
  int *p_p;
  unint64_t v5;
  BOOL v6;
  int v7;
  int v8;
  uint64_t v10;
  char *v11;
  void *v13;
  uint64_t v14;
  unsigned __int8 v15;
  void *__p;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-Bwe-LossBasedControl", 27);
  if (SHIBYTE(v18) < 0)
  {
    v5 = v17;
    if ((v17 & 0x8000000000000000) != 0)
      goto LABEL_57;
    p_p = (int *)__p;
    if (v17)
    {
      if (!__p)
        goto LABEL_57;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v5 = HIBYTE(v18);
  }
  if (v5 >= 7)
  {
    v7 = *p_p;
    v8 = *(int *)((char *)p_p + 3);
    v6 = v7 == 1650552389 && v8 == 1684368482;
    if ((v18 & 0x8000000000000000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v6 = 0;
  if (v18 < 0)
LABEL_16:
    operator delete(__p);
LABEL_17:
  *(_BYTE *)a1 = v6;
  *(_QWORD *)(a1 + 8) = off_24C0B4170;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 63) = 8;
  if (a1 + 40 <= (unint64_t)"min_incr" && a1 + 48 > (unint64_t)"min_incr")
    goto LABEL_57;
  *(_QWORD *)(a1 + 80) = off_24C0B4170;
  strcpy((char *)(a1 + 40), "min_incr");
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 8) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 72) = 0x3FF051EB851EB852;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 135) = 8;
  if (a1 + 112 <= (unint64_t)"max_incr" && a1 + 120 > (unint64_t)"max_incr")
    goto LABEL_57;
  *(_QWORD *)(a1 + 152) = off_24C0B4170;
  strcpy((char *)(a1 + 112), "max_incr");
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 80) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 144) = 0x3FF147AE147AE148;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 207) = 12;
  *(_QWORD *)(a1 + 160) = 0;
  if (a1 + 184 <= (unint64_t)"incr_low_rtt" && a1 + 196 > (unint64_t)"incr_low_rtt")
    goto LABEL_57;
  *(_QWORD *)(a1 + 224) = off_24C0B4170;
  strcpy((char *)(a1 + 184), "incr_low_rtt");
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 152) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 216) = 200000;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 279) = 13;
  if (a1 + 256 <= (unint64_t)"incr_high_rtt" && a1 + 269 > (unint64_t)"incr_high_rtt")
    goto LABEL_57;
  strcpy((char *)(a1 + 256), "incr_high_rtt");
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 224) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 288) = 800000;
  *(_QWORD *)(a1 + 296) = off_24C0B4170;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 351) = 4;
  if (a1 + 328 <= (unint64_t)"decr" && a1 + 332 > (unint64_t)"decr")
    goto LABEL_57;
  strcpy((char *)(a1 + 328), "decr");
  *(_BYTE *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 296) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 360) = 0x3FEFAE147AE147AELL;
  *(_QWORD *)(a1 + 368) = off_24C0B4170;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 423) = 8;
  *(_QWORD *)(a1 + 376) = 0;
  if (a1 + 400 <= (unint64_t)"loss_win" && a1 + 408 > (unint64_t)"loss_win")
    goto LABEL_57;
  strcpy((char *)(a1 + 400), "loss_win");
  *(_BYTE *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 368) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 432) = 800000;
  *(_QWORD *)(a1 + 440) = off_24C0B4170;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 495) = 12;
  *(_QWORD *)(a1 + 448) = 0;
  if (a1 + 472 <= (unint64_t)"loss_max_win" && a1 + 484 > (unint64_t)"loss_max_win")
    goto LABEL_57;
  strcpy((char *)(a1 + 472), "loss_max_win");
  *(_BYTE *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 440) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 504) = 800000;
  *(_QWORD *)(a1 + 512) = off_24C0B4170;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 567) = 15;
  if (a1 + 544 <= (unint64_t)"ackrate_max_win" && a1 + 559 > (unint64_t)"ackrate_max_win")
    goto LABEL_57;
  strcpy((char *)(a1 + 544), "ackrate_max_win");
  *(_BYTE *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 512) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 576) = 800000;
  *(_QWORD *)(a1 + 584) = off_24C0B4170;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 639) = 11;
  if (a1 + 616 <= (unint64_t)"incr_offset" && a1 + 627 > (unint64_t)"incr_offset")
    goto LABEL_57;
  strcpy((char *)(a1 + 616), "incr_offset");
  *(_BYTE *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 584) = &unk_24C0B0208;
  *(_QWORD *)(a1 + 648) = 1000;
  *(_QWORD *)(a1 + 656) = off_24C0B4170;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_BYTE *)(a1 + 711) = 12;
  if (a1 + 688 <= (unint64_t)"balance_incr" && a1 + 700 > (unint64_t)"balance_incr")
    goto LABEL_57;
  strcpy((char *)(a1 + 688), "balance_incr");
  *(_BYTE *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 656) = &unk_24C0B0208;
  *(_QWORD *)(a1 + 720) = 500;
  *(_QWORD *)(a1 + 728) = off_24C0B4170;
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 783) = 12;
  if (a1 + 760 <= (unint64_t)"balance_decr" && a1 + 772 > (unint64_t)"balance_decr")
    goto LABEL_57;
  strcpy((char *)(a1 + 760), "balance_decr");
  *(_BYTE *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 728) = &unk_24C0B0208;
  *(_QWORD *)(a1 + 792) = 4000;
  *(_QWORD *)(a1 + 800) = off_24C0B4170;
  *(_QWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 816) = 0;
  *(_BYTE *)(a1 + 855) = 13;
  if (a1 + 832 <= (unint64_t)"balance_reset" && a1 + 845 > (unint64_t)"balance_reset")
    goto LABEL_57;
  strcpy((char *)(a1 + 832), "balance_reset");
  *(_BYTE *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 800) = &unk_24C0B0208;
  *(_QWORD *)(a1 + 864) = 100;
  *(_QWORD *)(a1 + 872) = off_24C0B4170;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_BYTE *)(a1 + 927) = 8;
  if (a1 + 904 <= (unint64_t)"exponent" && a1 + 912 > (unint64_t)"exponent")
    goto LABEL_57;
  strcpy((char *)(a1 + 904), "exponent");
  *(_BYTE *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 872) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 936) = 0x3FE0000000000000;
  *(_QWORD *)(a1 + 944) = off_24C0B4170;
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 960) = 0;
  *(_BYTE *)(a1 + 999) = 6;
  if (a1 + 976 <= (unint64_t)"resets" && a1 + 982 > (unint64_t)"resets")
    goto LABEL_57;
  strcpy((char *)(a1 + 976), "resets");
  *(_WORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 944) = &unk_24C0B3FC0;
  *(_QWORD *)(a1 + 1008) = off_24C0B4170;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_BYTE *)(a1 + 1063) = 10;
  if (a1 + 1040 <= (unint64_t)"decr_intvl" && a1 + 1050 > (unint64_t)"decr_intvl")
    goto LABEL_57;
  strcpy((char *)(a1 + 1040), "decr_intvl");
  *(_BYTE *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1008) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 1072) = 300000;
  *(_QWORD *)(a1 + 1080) = off_24C0B4170;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_QWORD *)(a1 + 1104) = 0;
  *(_QWORD *)(a1 + 1096) = 0;
  *(_BYTE *)(a1 + 1135) = 7;
  if (a1 + 1112 <= (unint64_t)"timeout" && a1 + 1119 > (unint64_t)"timeout")
    goto LABEL_57;
  strcpy((char *)(a1 + 1112), "timeout");
  *(_BYTE *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 1080) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 1144) = 6000000;
  __p = (void *)(a1 + 8);
  v17 = a1 + 80;
  v18 = a1 + 152;
  v19 = a1 + 224;
  v20 = a1 + 296;
  v21 = a1 + 368;
  v22 = a1 + 440;
  v23 = a1 + 512;
  v24 = a1 + 584;
  v25 = a1 + 656;
  v26 = a1 + 728;
  v27 = a1 + 800;
  v28 = a1 + 872;
  v29 = a1 + 944;
  v30 = a1 + 1008;
  v31 = a1 + 1080;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&v13, a2, "WebRTC-Bwe-LossBasedControl", 27);
  if (((char)v15 & 0x80000000) == 0)
  {
    v10 = v15;
    v11 = (char *)&v13;
    goto LABEL_54;
  }
  v10 = v14;
  if (v14 < 0 || (v11 = (char *)v13, v14) && !v13)
LABEL_57:
    __break(1u);
LABEL_54:
  webrtc::ParseFieldTrial(&__p, 16, v11, v10);
  if ((char)v15 < 0)
    operator delete(v13);
  return a1;
}

void webrtc::LossBasedControlConfig::~LossBasedControlConfig(webrtc::LossBasedControlConfig *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  *((_QWORD *)this + 135) = off_24C0B4170;
  if ((*((char *)this + 1135) & 0x80000000) == 0)
  {
    v2 = (void *)*((_QWORD *)this + 136);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*((void **)this + 139));
  v2 = (void *)*((_QWORD *)this + 136);
  if (v2)
  {
LABEL_3:
    *((_QWORD *)this + 137) = v2;
    operator delete(v2);
  }
LABEL_4:
  *((_QWORD *)this + 126) = off_24C0B4170;
  if ((*((char *)this + 1063) & 0x80000000) == 0)
  {
    v3 = (void *)*((_QWORD *)this + 127);
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(*((void **)this + 130));
  v3 = (void *)*((_QWORD *)this + 127);
  if (v3)
  {
LABEL_6:
    *((_QWORD *)this + 128) = v3;
    operator delete(v3);
  }
LABEL_7:
  *((_QWORD *)this + 118) = off_24C0B4170;
  if ((*((char *)this + 999) & 0x80000000) == 0)
  {
    v4 = (void *)*((_QWORD *)this + 119);
    if (!v4)
      goto LABEL_10;
    goto LABEL_9;
  }
  operator delete(*((void **)this + 122));
  v4 = (void *)*((_QWORD *)this + 119);
  if (v4)
  {
LABEL_9:
    *((_QWORD *)this + 120) = v4;
    operator delete(v4);
  }
LABEL_10:
  *((_QWORD *)this + 109) = off_24C0B4170;
  if ((*((char *)this + 927) & 0x80000000) == 0)
  {
    v5 = (void *)*((_QWORD *)this + 110);
    if (!v5)
      goto LABEL_13;
    goto LABEL_12;
  }
  operator delete(*((void **)this + 113));
  v5 = (void *)*((_QWORD *)this + 110);
  if (v5)
  {
LABEL_12:
    *((_QWORD *)this + 111) = v5;
    operator delete(v5);
  }
LABEL_13:
  *((_QWORD *)this + 100) = off_24C0B4170;
  if ((*((char *)this + 855) & 0x80000000) == 0)
  {
    v6 = (void *)*((_QWORD *)this + 101);
    if (!v6)
      goto LABEL_16;
    goto LABEL_15;
  }
  operator delete(*((void **)this + 104));
  v6 = (void *)*((_QWORD *)this + 101);
  if (v6)
  {
LABEL_15:
    *((_QWORD *)this + 102) = v6;
    operator delete(v6);
  }
LABEL_16:
  *((_QWORD *)this + 91) = off_24C0B4170;
  if ((*((char *)this + 783) & 0x80000000) == 0)
  {
    v7 = (void *)*((_QWORD *)this + 92);
    if (!v7)
      goto LABEL_19;
    goto LABEL_18;
  }
  operator delete(*((void **)this + 95));
  v7 = (void *)*((_QWORD *)this + 92);
  if (v7)
  {
LABEL_18:
    *((_QWORD *)this + 93) = v7;
    operator delete(v7);
  }
LABEL_19:
  *((_QWORD *)this + 82) = off_24C0B4170;
  if ((*((char *)this + 711) & 0x80000000) == 0)
  {
    v8 = (void *)*((_QWORD *)this + 83);
    if (!v8)
      goto LABEL_22;
    goto LABEL_21;
  }
  operator delete(*((void **)this + 86));
  v8 = (void *)*((_QWORD *)this + 83);
  if (v8)
  {
LABEL_21:
    *((_QWORD *)this + 84) = v8;
    operator delete(v8);
  }
LABEL_22:
  *((_QWORD *)this + 73) = off_24C0B4170;
  if ((*((char *)this + 639) & 0x80000000) == 0)
  {
    v9 = (void *)*((_QWORD *)this + 74);
    if (!v9)
      goto LABEL_25;
    goto LABEL_24;
  }
  operator delete(*((void **)this + 77));
  v9 = (void *)*((_QWORD *)this + 74);
  if (v9)
  {
LABEL_24:
    *((_QWORD *)this + 75) = v9;
    operator delete(v9);
  }
LABEL_25:
  *((_QWORD *)this + 64) = off_24C0B4170;
  if ((*((char *)this + 567) & 0x80000000) == 0)
  {
    v10 = (void *)*((_QWORD *)this + 65);
    if (!v10)
      goto LABEL_28;
    goto LABEL_27;
  }
  operator delete(*((void **)this + 68));
  v10 = (void *)*((_QWORD *)this + 65);
  if (v10)
  {
LABEL_27:
    *((_QWORD *)this + 66) = v10;
    operator delete(v10);
  }
LABEL_28:
  *((_QWORD *)this + 55) = off_24C0B4170;
  if ((*((char *)this + 495) & 0x80000000) == 0)
  {
    v11 = (void *)*((_QWORD *)this + 56);
    if (!v11)
      goto LABEL_31;
    goto LABEL_30;
  }
  operator delete(*((void **)this + 59));
  v11 = (void *)*((_QWORD *)this + 56);
  if (v11)
  {
LABEL_30:
    *((_QWORD *)this + 57) = v11;
    operator delete(v11);
  }
LABEL_31:
  *((_QWORD *)this + 46) = off_24C0B4170;
  if ((*((char *)this + 423) & 0x80000000) == 0)
  {
    v12 = (void *)*((_QWORD *)this + 47);
    if (!v12)
      goto LABEL_34;
    goto LABEL_33;
  }
  operator delete(*((void **)this + 50));
  v12 = (void *)*((_QWORD *)this + 47);
  if (v12)
  {
LABEL_33:
    *((_QWORD *)this + 48) = v12;
    operator delete(v12);
  }
LABEL_34:
  *((_QWORD *)this + 37) = off_24C0B4170;
  if ((*((char *)this + 351) & 0x80000000) == 0)
  {
    v13 = (void *)*((_QWORD *)this + 38);
    if (!v13)
      goto LABEL_37;
    goto LABEL_36;
  }
  operator delete(*((void **)this + 41));
  v13 = (void *)*((_QWORD *)this + 38);
  if (v13)
  {
LABEL_36:
    *((_QWORD *)this + 39) = v13;
    operator delete(v13);
  }
LABEL_37:
  *((_QWORD *)this + 28) = off_24C0B4170;
  if ((*((char *)this + 279) & 0x80000000) == 0)
  {
    v14 = (void *)*((_QWORD *)this + 29);
    if (!v14)
      goto LABEL_40;
    goto LABEL_39;
  }
  operator delete(*((void **)this + 32));
  v14 = (void *)*((_QWORD *)this + 29);
  if (v14)
  {
LABEL_39:
    *((_QWORD *)this + 30) = v14;
    operator delete(v14);
  }
LABEL_40:
  *((_QWORD *)this + 19) = off_24C0B4170;
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
    v15 = (void *)*((_QWORD *)this + 20);
    if (!v15)
      goto LABEL_43;
    goto LABEL_42;
  }
  operator delete(*((void **)this + 23));
  v15 = (void *)*((_QWORD *)this + 20);
  if (v15)
  {
LABEL_42:
    *((_QWORD *)this + 21) = v15;
    operator delete(v15);
  }
LABEL_43:
  *((_QWORD *)this + 10) = off_24C0B4170;
  if ((*((char *)this + 135) & 0x80000000) == 0)
  {
    v16 = (void *)*((_QWORD *)this + 11);
    if (!v16)
      goto LABEL_46;
    goto LABEL_45;
  }
  operator delete(*((void **)this + 14));
  v16 = (void *)*((_QWORD *)this + 11);
  if (v16)
  {
LABEL_45:
    *((_QWORD *)this + 12) = v16;
    operator delete(v16);
  }
LABEL_46:
  *((_QWORD *)this + 1) = off_24C0B4170;
  if (*((char *)this + 63) < 0)
  {
    operator delete(*((void **)this + 5));
    v17 = (void *)*((_QWORD *)this + 2);
    if (!v17)
      return;
  }
  else
  {
    v17 = (void *)*((_QWORD *)this + 2);
    if (!v17)
      return;
  }
  *((_QWORD *)this + 3) = v17;
  operator delete(v17);
}

void webrtc::LossBasedBandwidthEstimation::UpdateLossStatistics(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;

  v4 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return;
  v6 = v3 - v4;
  v7 = v3 - v4 - 80;
  if (v7 >= 0x50)
  {
    v10 = 0;
    v11 = 0;
    v12 = v7 / 0x50 + 1;
    v9 = v4 + 80 * (v12 & 0x7FFFFFFFFFFFFFELL);
    v13 = (uint64_t *)(v4 + 152);
    v14 = v12 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      v15 = *(v13 - 10);
      v17 = *v13;
      v13 += 20;
      v16 = v17;
      if (v15 == 0x7FFFFFFFFFFFFFFFLL)
        ++v10;
      if (v16 == 0x7FFFFFFFFFFFFFFFLL)
        ++v11;
      v14 -= 2;
    }
    while (v14);
    v8 = v11 + v10;
    if (v12 == (v12 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_14;
  }
  else
  {
    v8 = 0;
    v9 = *a2;
  }
  do
  {
    if (*(_QWORD *)(v9 + 72) == 0x7FFFFFFFFFFFFFFFLL)
      ++v8;
    v9 += 80;
  }
  while (v9 != v3);
LABEL_14:
  v18 = (double)v8 / (double)(0xCCCCCCCCCCCCCCCDLL * (v6 >> 4));
  *(double *)(a1 + 1216) = v18;
  v19 = *(_QWORD *)(a1 + 1208);
  v20 = v19 + 0x7FFFFFFFFFFFFFFFLL;
  v21 = a3 - v19;
  if (a3 == 0x8000000000000000)
    v21 = 0x8000000000000000;
  if (a3 == 0x7FFFFFFFFFFFFFFFLL)
    v21 = 0x7FFFFFFFFFFFFFFFLL;
  if (v20 >= 0xFFFFFFFFFFFFFFFELL)
    v22 = 1000000;
  else
    v22 = v21;
  *(_QWORD *)(a1 + 1208) = a3;
  *(_BYTE *)(a1 + 1200) = 0;
  v23 = *(_QWORD *)(a1 + 432);
  if (v23 < 1)
  {
    v26 = 1.0;
  }
  else
  {
    v24 = INFINITY;
    if (v22 != 0x7FFFFFFFFFFFFFFFLL)
      v24 = (double)v22;
    if (v22 == 0x8000000000000000)
      v24 = -INFINITY;
    v25 = (double)v23;
    if (v23 == 0x7FFFFFFFFFFFFFFFLL)
      v25 = INFINITY;
    v26 = 1.0 - exp(-v24 / v25);
  }
  v27 = *(double *)(a1 + 1152) + v26 * (v18 - *(double *)(a1 + 1152));
  *(double *)(a1 + 1152) = v27;
  v28 = *(double *)(a1 + 1160);
  if (v27 <= v28)
  {
    v29 = *(_QWORD *)(a1 + 504);
    if (v29 < 1)
    {
      v32 = 1.0;
    }
    else
    {
      v30 = INFINITY;
      if (v22 != 0x7FFFFFFFFFFFFFFFLL)
        v30 = (double)v22;
      if (v22 == 0x8000000000000000)
        v30 = -INFINITY;
      v31 = (double)v29;
      if (v29 == 0x7FFFFFFFFFFFFFFFLL)
        v31 = INFINITY;
      v32 = 1.0 - exp(-v30 / v31);
    }
    v27 = v28 + v32 * (v27 - v28);
  }
  *(double *)(a1 + 1160) = v27;
}

uint64_t webrtc::LossBasedBandwidthEstimation::Update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v10;
  long double v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int64_t v22;
  long double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  int64_t v44;
  double v45;
  int64_t v46;
  double v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  unint64_t v52;
  uint64_t v53;
  int64_t v54;
  BOOL v56;
  int64_t v57;
  int64_t v58;
  double v59;

  v6 = a4;
  v10 = *(_QWORD *)(a1 + 1168);
  if (v10)
  {
    if (*(double *)(a1 + 1216) >= *(double *)(a1 + 1152))
      v11 = *(double *)(a1 + 1152);
    else
      v11 = *(double *)(a1 + 1216);
    if (*(_BYTE *)(a1 + 1200))
      goto LABEL_6;
LABEL_12:
    v13 = *(_QWORD *)(a1 + 1192);
    v14 = 0x7FFFFFFFFFFFFFFFLL;
    v15 = 0x8000000000000000;
    v16 = a2 - v13;
    if (v13 == 0x7FFFFFFFFFFFFFFFLL || a2 == 0x8000000000000000)
      v16 = 0x8000000000000000;
    if (v13 == 0x8000000000000000)
      v18 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (a2 == 0x7FFFFFFFFFFFFFFFLL)
      v18 = 0x7FFFFFFFFFFFFFFFLL;
    v19 = *(_QWORD *)(a1 + 1072);
    if (v19 != 0x8000000000000000 && a5 != 0x8000000000000000)
      v15 = v19 + a5;
    if (v19 == 0x7FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    if (a5 != 0x7FFFFFFFFFFFFFFFLL)
      v14 = v15;
    v12 = v18 >= v14;
    if (a2 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_66;
    goto LABEL_32;
  }
  *(_QWORD *)(a1 + 1168) = a4;
  v10 = a4;
  if (*(double *)(a1 + 1216) >= *(double *)(a1 + 1152))
    v11 = *(double *)(a1 + 1152);
  else
    v11 = *(double *)(a1 + 1216);
  if (!*(_BYTE *)(a1 + 1200))
    goto LABEL_12;
LABEL_6:
  v12 = 0;
  if (a2 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_66;
LABEL_32:
  v21 = *(_QWORD *)(a1 + 1208);
  v22 = 0x8000000000000000;
  if (v21 != 0x8000000000000000)
  {
    if (v21 != 0x7FFFFFFFFFFFFFFFLL && a2 != 0x8000000000000000)
      v22 = a2 - v21;
    if (v22 < (uint64_t)llround(6000000.0))
    {
      v24 = *(double *)(a1 + 1160);
      if (*(_BYTE *)(a1 + 1001))
      {
        v25 = *(_QWORD *)(a1 + 864);
        v26 = 1.0;
        if (v25 < v10)
        {
          v27 = (double)v25;
          if (v25 == 0x8000000000000000)
            v27 = -INFINITY;
          v28 = (double)v10;
          if (v10 == 0x7FFFFFFFFFFFFFFFLL)
            v28 = INFINITY;
          v26 = pow(v27 / v28, *(long double *)(a1 + 936));
        }
        if (v24 < v26)
          goto LABEL_120;
      }
      v29 = *(_QWORD *)(a1 + 720);
      v30 = 1.0;
      if (v29 < v10)
      {
        v31 = (double)v29;
        if (v29 == 0x8000000000000000)
          v31 = -INFINITY;
        v32 = (double)v10;
        if (v10 == 0x7FFFFFFFFFFFFFFFLL)
          v32 = INFINITY;
        v30 = pow(v31 / v32, *(long double *)(a1 + 936));
      }
      if (v24 < v30)
      {
        v33 = *(_QWORD *)(a1 + 216);
        v34 = *(_QWORD *)(a1 + 288);
        if (v34 >= a5)
          v35 = a5;
        else
          v35 = *(_QWORD *)(a1 + 288);
        if (v33 <= a5)
          v36 = v35;
        else
          v36 = *(_QWORD *)(a1 + 216);
        if (v34 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v37 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v37 = 0x7FFFFFFFFFFFFFFFLL;
          if (v33 != 0x8000000000000000)
          {
            if (v34 == 0x8000000000000000 || v33 == 0x7FFFFFFFFFFFFFFFLL || (v37 = v34 - v33, v34 <= v33))
            {
              v38 = *(double *)(a1 + 72);
LABEL_102:
              v52 = llround(v38 * (double)a3);
              v53 = *(_QWORD *)(a1 + 648);
              v54 = 0x7FFFFFFFFFFFFFFFLL;
              if (v52 != 0x7FFFFFFFFFFFFFFFLL && v53 != 0x7FFFFFFFFFFFFFFFLL)
              {
                v56 = v53 == 0x8000000000000000 || v52 == 0x8000000000000000;
                v57 = v52 + v53;
                if (v56)
                  v54 = 0x8000000000000000;
                else
                  v54 = v57;
              }
              v58 = 0x7FFFFFFFFFFFFFFFLL;
              if (v24 >= 0.00001)
              {
                v59 = *(double *)(a1 + 936);
                if (v59 > 0.0)
                  v58 = llround(pow(v24, -1.0 / v59) * (double)v29);
              }
              if (v58 >= v54)
                v58 = v54;
              if (v58 <= v10)
                v6 = v10;
              else
                v6 = v58;
              goto LABEL_120;
            }
          }
        }
        v47 = INFINITY;
        if (v36 != 0x7FFFFFFFFFFFFFFFLL && v33 != 0x8000000000000000)
        {
          if (v36 == 0x8000000000000000
            || v33 == 0x7FFFFFFFFFFFFFFFLL
            || (v48 = v36 - v33, v48 == 0x8000000000000000))
          {
            v47 = -INFINITY;
          }
          else
          {
            v47 = INFINITY;
            if (v48 != 0x7FFFFFFFFFFFFFFFLL)
              v47 = (double)v48;
          }
        }
        v49 = (double)v37;
        if (v37 == 0x7FFFFFFFFFFFFFFFLL)
          v49 = INFINITY;
        v50 = v47 / v49;
        if (v50 > 1.0)
          v50 = 1.0;
        if (v50 <= 0.0)
          v51 = 1.0;
        else
          v51 = 1.0 - v50;
        v38 = *(double *)(a1 + 72) + v51 * (*(double *)(a1 + 144) - *(double *)(a1 + 72));
        goto LABEL_102;
      }
    }
  }
LABEL_66:
  v39 = *(_QWORD *)(a1 + 792);
  v40 = 1.0;
  if (v39 < v10)
  {
    v41 = (double)v39;
    if (v39 == 0x8000000000000000)
      v41 = -INFINITY;
    v42 = (double)v10;
    if (v10 == 0x7FFFFFFFFFFFFFFFLL)
      v42 = INFINITY;
    v40 = pow(v41 / v42, *(long double *)(a1 + 936));
  }
  if (v11 > v40 && v12)
  {
    v44 = 0x7FFFFFFFFFFFFFFFLL;
    if (v11 >= 0.00001)
    {
      v45 = *(double *)(a1 + 936);
      if (v45 > 0.0)
        v44 = llround(pow(v11, -1.0 / v45) * (double)v39);
    }
    v46 = llround(*(double *)(a1 + 360) * (double)*(uint64_t *)(a1 + 1176));
    v6 = v46 <= v44 ? v44 : v46;
    if (v6 < v10)
    {
      *(_QWORD *)(a1 + 1192) = a2;
      *(_BYTE *)(a1 + 1200) = 1;
LABEL_120:
      *(_QWORD *)(a1 + 1168) = v6;
      return v6;
    }
  }
  return v10;
}

uint64_t webrtc::LossBasedBweV2::LossBasedBweV2(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  double v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double *v65;
  double *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double *v98;
  double *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  double v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  TimeDelta v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  double v201;
  double v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  double v224;
  int v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  BOOL v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  void *v297;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  uint64_t v309;
  unsigned __int8 v310;
  void (**v311)(webrtc::FieldTrialParameterInterface *__hidden);
  void *__p;
  void *v313;
  uint64_t v314;
  void *v315;
  __int128 v316;
  __int16 v317;
  void (**v318)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v319;
  void *v320;
  uint64_t v321;
  void *v322[3];
  __int16 v323;
  void (**v324)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v325;
  void *v326;
  uint64_t v327;
  void *v328[2];
  char v329;
  char v330;
  uint64_t v331;
  void (**v332)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v333;
  void *v334;
  uint64_t v335;
  void *v336[2];
  char v337;
  __int16 v338;
  void (**v339)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v340;
  void *v341;
  uint64_t v342;
  void *v343[3];
  char v344;
  uint64_t v345;
  void (**v346)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v347;
  void *v348;
  uint64_t v349;
  void *v350;
  __int128 v351;
  char v352;
  uint64_t v353;
  void (**v354)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v355;
  void *v356;
  uint64_t v357;
  void *v358[3];
  char v359;
  int v360;
  void (**v361)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v362;
  void *v363;
  uint64_t v364;
  void *v365[2];
  char v366;
  __int16 v367;
  void (**v368)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v369;
  void *v370;
  uint64_t v371;
  void *v372[3];
  __int16 v373;
  void (**v374)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v375;
  void *v376;
  uint64_t v377;
  void *v378;
  __int128 v379;
  __int16 v380;
  void (**v381)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v382;
  void *v383;
  uint64_t v384;
  void *v385[3];
  char v386;
  uint64_t v387;
  void (**v388)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v389;
  void *v390;
  uint64_t v391;
  void *v392[3];
  char v393;
  uint64_t v394;
  void (**v395)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v396;
  void *v397;
  uint64_t v398;
  void *v399;
  __int128 v400;
  char v401;
  uint64_t v402;
  void (**v403)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v404;
  void *v405;
  uint64_t v406;
  void *v407[3];
  char v408;
  uint64_t v409;
  void (**v410)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v411;
  void *v412;
  uint64_t v413;
  void *v414;
  __int128 v415;
  char v416;
  uint64_t v417;
  void (**v418)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v419;
  void *v420;
  uint64_t v421;
  void *v422;
  __int128 v423;
  char v424;
  uint64_t v425;
  void (**v426)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v427;
  void *v428;
  uint64_t v429;
  void *v430;
  __int128 v431;
  char v432;
  uint64_t v433;
  void (**v434)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v435;
  void *v436;
  uint64_t v437;
  void *v438;
  __int128 v439;
  char v440;
  uint64_t v441;
  void (**v442)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v443;
  void *v444;
  uint64_t v445;
  void *v446[3];
  char v447;
  int v448;
  void (**v449)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v450;
  void *v451;
  uint64_t v452;
  void *v453;
  __int128 v454;
  char v455;
  uint64_t v456;
  void (**v457)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v458;
  void *v459;
  uint64_t v460;
  void *v461;
  __int128 v462;
  __int16 v463;
  void (**v464)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v465;
  void *v466;
  uint64_t v467;
  void *v468[3];
  __int16 v469;
  void (**v470)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v471;
  void *v472;
  uint64_t v473;
  void *v474[3];
  __int16 v475;
  void (**v476)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v477;
  void *v478;
  uint64_t v479;
  void *v480[2];
  char v481;
  char v482;
  uint64_t v483;
  void (**v484)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v485;
  void *v486;
  uint64_t v487;
  void *v488[3];
  char v489;
  int v490;
  void (**v491)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v492;
  void *v493;
  uint64_t v494;
  void *v495;
  __int128 v496;
  char v497;
  uint64_t v498;
  void (**v499)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v500;
  void *v501;
  uint64_t v502;
  void *v503;
  __int128 v504;
  char v505;
  uint64_t v506;
  void (**v507)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v508;
  void *v509;
  uint64_t v510;
  void *v511;
  __int128 v512;
  char v513;
  uint64_t v514;
  void (**v515)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v516;
  void *v517;
  uint64_t v518;
  void *v519;
  __int128 v520;
  char v521;
  uint64_t v522;
  void (**v523)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v524;
  void *v525;
  uint64_t v526;
  void *v527;
  __int128 v528;
  char v529;
  uint64_t v530;
  void (**v531)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v532;
  void *v533;
  uint64_t v534;
  void *v535[3];
  char v536;
  uint64_t v537;
  void (**v538)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v539;
  void *v540;
  uint64_t v541;
  void *v542[3];
  char v543;
  uint64_t v544;
  void (**v545)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v546;
  void *v547;
  uint64_t v548;
  void *v549[3];
  char v550;
  uint64_t v551;
  void (**v552)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v553;
  void *v554;
  uint64_t v555;
  void *v556[3];
  __int16 v557;
  char v558;
  void *v559;
  char *v560;
  char *v561;
  void (**v562)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v563;
  void *v564;
  uint64_t v565;
  void *v566;
  __int128 v567;
  char v568;
  uint64_t v569;
  void (**v570)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v571;
  void *v572;
  uint64_t v573;
  void *v574[3];
  char v575;
  uint64_t v576;
  void (**v577)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v578;
  void *v579;
  uint64_t v580;
  void *v581;
  __int128 v582;
  char v583;
  uint64_t v584;
  void (**v585)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v586;
  void *v587;
  uint64_t v588;
  void *v589;
  __int128 v590;
  char v591;
  uint64_t v592;
  void (**v593)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v594;
  void *v595;
  uint64_t v596;
  void *v597;
  __int128 v598;
  char v599;
  uint64_t v600;
  void (**v601)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v602;
  void *v603;
  uint64_t v604;
  void *v605[2];
  char v606;
  __int16 v607;
  void *v608[2];
  void (***v609)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v610)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v611)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v612)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v613)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v614)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v615)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v616)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v617)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v618)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v619)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v620)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v621)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v622)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v623)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v624)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v625)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v626)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v627)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v628)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v629)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v630)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v631)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v632)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v633)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v634)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v635)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v636)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v637)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v638)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v639)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v640)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v641)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v642)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v643)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v644)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v645)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v646)(webrtc::FieldTrialParameterInterface *__hidden);
  uint64_t v647;

  v647 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v601 = off_24C0B4170;
  v602 = 0;
  v604 = 0;
  v603 = 0;
  v606 = 7;
  if (v605 <= (void **)"Enabled" && (char *)v605 + 7 > "Enabled")
    goto LABEL_503;
  strcpy((char *)v605, "Enabled");
  v607 = 256;
  v601 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FC0;
  v593 = off_24C0B4170;
  v594 = 0;
  v596 = 0;
  v595 = 0;
  v4 = (char *)operator new(0x20uLL);
  v597 = v4;
  v598 = xmmword_208F08630;
  if (v4 <= "BwRampupUpperBoundFactor" && v4 + 24 > "BwRampupUpperBoundFactor")
    goto LABEL_503;
  strcpy(v4, "BwRampupUpperBoundFactor");
  v599 = 0;
  v593 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v600 = 0x412E848000000000;
  v585 = off_24C0B4170;
  v586 = 0;
  v588 = 0;
  v587 = 0;
  v5 = (char *)operator new(0x20uLL);
  v589 = v5;
  v590 = xmmword_208F05710;
  if (v5 <= "BwRampupUpperBoundInHoldFactor" && v5 + 30 > "BwRampupUpperBoundInHoldFactor")
    goto LABEL_503;
  strcpy(v5, "BwRampupUpperBoundInHoldFactor");
  v591 = 0;
  v585 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v592 = 0x412E848000000000;
  v577 = off_24C0B4170;
  v578 = 0;
  v580 = 0;
  v579 = 0;
  v6 = (char *)operator new(0x20uLL);
  v581 = v6;
  v582 = xmmword_208F05170;
  if (v6 <= "BwRampupUpperBoundHoldThreshold" && v6 + 31 > "BwRampupUpperBoundHoldThreshold")
    goto LABEL_503;
  strcpy(v6, "BwRampupUpperBoundHoldThreshold");
  v583 = 0;
  v577 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v584 = 0x3FF4CCCCCCCCCCCDLL;
  v570 = off_24C0B4170;
  v571 = 0;
  HIBYTE(v574[2]) = 22;
  v573 = 0;
  v572 = 0;
  if (v574 <= (void **)"BwRampupAccelMaxFactor" && (char *)&v574[2] + 6 > "BwRampupAccelMaxFactor")
    goto LABEL_503;
  strcpy((char *)v574, "BwRampupAccelMaxFactor");
  v575 = 0;
  v570 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v576 = 0;
  v562 = off_24C0B4170;
  v563 = 0;
  v565 = 0;
  v564 = 0;
  v7 = (char *)operator new(0x19uLL);
  v566 = v7;
  v567 = xmmword_208F05110;
  if (v7 <= "BwRampupAccelMaxoutTime" && v7 + 23 > "BwRampupAccelMaxoutTime")
    goto LABEL_503;
  strcpy(v7, "BwRampupAccelMaxoutTime");
  v568 = 0;
  v562 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B0268;
  v569 = 60000000;
  v552 = off_24C0B4170;
  v553 = 0;
  v555 = 0;
  v554 = 0;
  HIBYTE(v556[2]) = 16;
  if (v556 <= (void **)"CandidateFactors" && &v556[2] > (void **)"CandidateFactors")
    goto LABEL_503;
  strcpy((char *)v556, "CandidateFactors");
  v557 = 0;
  v558 = 0;
  v552 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B1990;
  v8 = (char *)operator new(0x18uLL);
  v9 = v8 + 24;
  v561 = v8 + 24;
  *(_OWORD *)v8 = xmmword_208F0B798;
  *((_QWORD *)v8 + 2) = 0x3FEE666666666666;
  v559 = v8;
  v560 = v8 + 24;
  v545 = off_24C0B4170;
  v546 = 0;
  v548 = 0;
  v547 = 0;
  HIBYTE(v549[2]) = 18;
  if (v549 <= (void **)"HigherBwBiasFactor" && (char *)&v549[2] + 2 > "HigherBwBiasFactor")
    goto LABEL_503;
  strcpy((char *)v549, "HigherBwBiasFactor");
  v550 = 0;
  v545 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v551 = 0x3F2A36E2EB1C432DLL;
  v538 = off_24C0B4170;
  v539 = 0;
  HIBYTE(v542[2]) = 21;
  v541 = 0;
  v540 = 0;
  if (v542 <= (void **)"HigherLogBwBiasFactor" && (char *)&v542[2] + 5 > "HigherLogBwBiasFactor")
    goto LABEL_503;
  strcpy((char *)v542, "HigherLogBwBiasFactor");
  v543 = 0;
  v538 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v544 = 0x3F947AE147AE147BLL;
  v531 = off_24C0B4170;
  v532 = 0;
  v534 = 0;
  v533 = 0;
  HIBYTE(v535[2]) = 22;
  if (v535 <= (void **)"InherentLossLowerBound" && (char *)&v535[2] + 6 > "InherentLossLowerBound")
    goto LABEL_503;
  strcpy((char *)v535, "InherentLossLowerBound");
  v536 = 0;
  v531 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v537 = 0x3F50624DD2F1A9FCLL;
  v523 = off_24C0B4170;
  v524 = 0;
  v526 = 0;
  v525 = 0;
  v10 = (char *)operator new(0x28uLL);
  v527 = v10;
  v528 = xmmword_208F08680;
  if (v10 <= "LossThresholdOfHighBandwidthPreference" && v10 + 38 > "LossThresholdOfHighBandwidthPreference")
    goto LABEL_503;
  strcpy(v10, "LossThresholdOfHighBandwidthPreference");
  v529 = 0;
  v523 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v530 = 0x3FC3333333333333;
  v515 = off_24C0B4170;
  v516 = 0;
  v518 = 0;
  v517 = 0;
  v11 = (char *)operator new(0x28uLL);
  v519 = v11;
  v520 = xmmword_208F094E0;
  if (v11 <= "BandwidthPreferenceSmoothingFactor" && v11 + 34 > "BandwidthPreferenceSmoothingFactor")
    goto LABEL_503;
  strcpy(v11, "BandwidthPreferenceSmoothingFactor");
  v521 = 0;
  v515 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v522 = 0x3F60624DD2F1A9FCLL;
  v507 = off_24C0B4170;
  v508 = 0;
  v510 = 0;
  v509 = 0;
  v12 = (char *)operator new(0x20uLL);
  v511 = v12;
  v512 = xmmword_208F05170;
  if (v12 <= "InherentLossUpperBoundBwBalance" && v12 + 31 > "InherentLossUpperBoundBwBalance")
    goto LABEL_503;
  strcpy(v12, "InherentLossUpperBoundBwBalance");
  v513 = 0;
  v507 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B0208;
  v514 = 75000;
  v499 = off_24C0B4170;
  v500 = 0;
  v502 = 0;
  v501 = 0;
  v13 = (char *)operator new(0x20uLL);
  v503 = v13;
  v504 = xmmword_208F05180;
  if (v13 <= "InherentLossUpperBoundOffset" && v13 + 28 > "InherentLossUpperBoundOffset")
    goto LABEL_503;
  strcpy(v13, "InherentLossUpperBoundOffset");
  v505 = 0;
  v499 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v506 = 0x3FA999999999999ALL;
  v491 = off_24C0B4170;
  v492 = 0;
  v494 = 0;
  v493 = 0;
  v14 = (char *)operator new(0x20uLL);
  v495 = v14;
  v496 = xmmword_208F051A0;
  if (v14 <= "InitialInherentLossEstimate" && v14 + 27 > "InitialInherentLossEstimate")
    goto LABEL_503;
  strcpy(v14, "InitialInherentLossEstimate");
  v497 = 0;
  v491 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v498 = 0x3F847AE147AE147BLL;
  v484 = off_24C0B4170;
  v485 = 0;
  v487 = 0;
  v486 = 0;
  HIBYTE(v488[2]) = 16;
  if (v488 <= (void **)"NewtonIterations" && &v488[2] > (void **)"NewtonIterations")
    goto LABEL_503;
  strcpy((char *)v488, "NewtonIterations");
  v489 = 0;
  v484 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4020;
  v490 = 1;
  v476 = off_24C0B4170;
  v477 = 0;
  v479 = 0;
  v478 = 0;
  v481 = 14;
  if (v480 <= (void **)"NewtonStepSize" && (char *)&v480[1] + 6 > "NewtonStepSize")
    goto LABEL_503;
  strcpy((char *)v480, "NewtonStepSize");
  v482 = 0;
  v476 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v483 = 0x3FE8000000000000;
  v470 = off_24C0B4170;
  v471 = 0;
  v473 = 0;
  v472 = 0;
  HIBYTE(v474[2]) = 18;
  if (v474 <= (void **)"AckedRateCandidate" && (char *)&v474[2] + 2 > "AckedRateCandidate")
    goto LABEL_503;
  strcpy((char *)v474, "AckedRateCandidate");
  v475 = 256;
  v470 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FC0;
  v464 = off_24C0B4170;
  v465 = 0;
  HIBYTE(v468[2]) = 19;
  v467 = 0;
  v466 = 0;
  if (v468 <= (void **)"DelayBasedCandidate" && (char *)&v468[2] + 3 > "DelayBasedCandidate")
    goto LABEL_503;
  strcpy((char *)v468, "DelayBasedCandidate");
  v469 = 256;
  v464 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FC0;
  v457 = off_24C0B4170;
  v458 = 0;
  v460 = 0;
  v459 = 0;
  v15 = (char *)operator new(0x20uLL);
  v461 = v15;
  v462 = xmmword_208F08630;
  if (v15 <= "UpperBoundCandidateInAlr" && v15 + 24 > "UpperBoundCandidateInAlr")
    goto LABEL_503;
  strcpy(v15, "UpperBoundCandidateInAlr");
  v463 = 0;
  v457 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FC0;
  v449 = off_24C0B4170;
  v450 = 0;
  v452 = 0;
  v451 = 0;
  v16 = (char *)operator new(0x20uLL);
  v453 = v16;
  v454 = xmmword_208F05190;
  if (v16 <= "ObservationDurationLowerBound" && v16 + 29 > "ObservationDurationLowerBound")
    goto LABEL_503;
  strcpy(v16, "ObservationDurationLowerBound");
  v455 = 0;
  v449 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B0268;
  v456 = 250000;
  v442 = off_24C0B4170;
  v443 = 0;
  HIBYTE(v446[2]) = 21;
  v445 = 0;
  v444 = 0;
  if (v446 <= (void **)"ObservationWindowSize" && (char *)&v446[2] + 5 > "ObservationWindowSize")
    goto LABEL_503;
  strcpy((char *)v446, "ObservationWindowSize");
  v447 = 0;
  v442 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4020;
  v448 = 20;
  v434 = off_24C0B4170;
  v435 = 0;
  v437 = 0;
  v436 = 0;
  v17 = (char *)operator new(0x20uLL);
  v438 = v17;
  v439 = xmmword_208F0AC80;
  if (v17 <= "SendingRateSmoothingFactor" && v17 + 26 > "SendingRateSmoothingFactor")
    goto LABEL_503;
  strcpy(v17, "SendingRateSmoothingFactor");
  v440 = 0;
  v434 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v441 = 0;
  v426 = off_24C0B4170;
  v427 = 0;
  v429 = 0;
  v428 = 0;
  v18 = (char *)operator new(0x28uLL);
  v430 = v18;
  v431 = xmmword_208F086E0;
  if (v18 <= "InstantUpperBoundTemporalWeightFactor" && v18 + 37 > "InstantUpperBoundTemporalWeightFactor")
    goto LABEL_503;
  strcpy(v18, "InstantUpperBoundTemporalWeightFactor");
  v432 = 0;
  v426 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v433 = 0x3FECCCCCCCCCCCCDLL;
  v418 = off_24C0B4170;
  v419 = 0;
  v421 = 0;
  v420 = 0;
  v19 = (char *)operator new(0x20uLL);
  v422 = v19;
  v423 = xmmword_208F0AC80;
  if (v19 <= "InstantUpperBoundBwBalance" && v19 + 26 > "InstantUpperBoundBwBalance")
    goto LABEL_503;
  strcpy(v19, "InstantUpperBoundBwBalance");
  v424 = 0;
  v418 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B0208;
  v425 = 75000;
  v410 = off_24C0B4170;
  v411 = 0;
  v413 = 0;
  v412 = 0;
  v20 = (char *)operator new(0x20uLL);
  v414 = v20;
  v415 = xmmword_208F051A0;
  if (v20 <= "InstantUpperBoundLossOffset" && v20 + 27 > "InstantUpperBoundLossOffset")
    goto LABEL_503;
  strcpy(v20, "InstantUpperBoundLossOffset");
  v416 = 0;
  v410 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v417 = 0x3FA999999999999ALL;
  v403 = off_24C0B4170;
  v404 = 0;
  HIBYTE(v407[2]) = 20;
  v406 = 0;
  v405 = 0;
  if (v407 <= (void **)"TemporalWeightFactor" && (char *)&v407[2] + 4 > "TemporalWeightFactor")
    goto LABEL_503;
  strcpy((char *)v407, "TemporalWeightFactor");
  v408 = 0;
  v403 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v409 = 0x3FECCCCCCCCCCCCDLL;
  v395 = off_24C0B4170;
  v396 = 0;
  v398 = 0;
  v397 = 0;
  v21 = (char *)operator new(0x20uLL);
  v399 = v21;
  v400 = xmmword_208F05150;
  if (v21 <= "BwBackoffLowerBoundFactor" && v21 + 25 > "BwBackoffLowerBoundFactor")
    goto LABEL_503;
  strcpy(v21, "BwBackoffLowerBoundFactor");
  v401 = 0;
  v395 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v402 = 0x3FF0000000000000;
  v388 = off_24C0B4170;
  v389 = 0;
  HIBYTE(v392[2]) = 17;
  v391 = 0;
  v390 = 0;
  if (v392 <= (void **)"MaxIncreaseFactor" && (char *)&v392[2] + 1 > "MaxIncreaseFactor")
    goto LABEL_503;
  strcpy((char *)v392, "MaxIncreaseFactor");
  v393 = 0;
  v388 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v394 = 0x3FF4CCCCCCCCCCCDLL;
  v381 = off_24C0B4170;
  v382 = 0;
  v384 = 0;
  v383 = 0;
  HIBYTE(v385[2]) = 21;
  if (v385 <= (void **)"DelayedIncreaseWindow" && (char *)&v385[2] + 5 > "DelayedIncreaseWindow")
    goto LABEL_503;
  strcpy((char *)v385, "DelayedIncreaseWindow");
  v386 = 0;
  v381 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B0268;
  v387 = 300000;
  v374 = off_24C0B4170;
  v375 = 0;
  v377 = 0;
  v376 = 0;
  v22 = (char *)operator new(0x30uLL);
  v378 = v22;
  v379 = xmmword_208F094F0;
  if (v22 <= "NotIncreaseIfInherentLossLessThanAverageLoss"
    && v22 + 44 > "NotIncreaseIfInherentLossLessThanAverageLoss")
  {
    goto LABEL_503;
  }
  strcpy(v22, "NotIncreaseIfInherentLossLessThanAverageLoss");
  v380 = 256;
  v374 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FC0;
  v368 = off_24C0B4170;
  v369 = 0;
  HIBYTE(v372[2]) = 20;
  v371 = 0;
  v370 = 0;
  if (v372 <= (void **)"NotUseAckedRateInAlr" && (char *)&v372[2] + 4 > "NotUseAckedRateInAlr")
    goto LABEL_503;
  strcpy((char *)v372, "NotUseAckedRateInAlr");
  v373 = 256;
  v368 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FC0;
  v361 = off_24C0B4170;
  v362 = 0;
  v364 = 0;
  v363 = 0;
  v366 = 15;
  if (v365 <= (void **)"UseInStartPhase" && (char *)&v365[1] + 7 > "UseInStartPhase")
    goto LABEL_503;
  strcpy((char *)v365, "UseInStartPhase");
  v367 = 0;
  v361 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FC0;
  v354 = off_24C0B4170;
  v355 = 0;
  v357 = 0;
  v356 = 0;
  HIBYTE(v358[2]) = 18;
  if (v358 <= (void **)"MinNumObservations" && (char *)&v358[2] + 2 > "MinNumObservations")
    goto LABEL_503;
  strcpy((char *)v358, "MinNumObservations");
  v359 = 0;
  v354 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4020;
  v360 = 3;
  v346 = off_24C0B4170;
  v347 = 0;
  v348 = 0;
  v349 = 0;
  v23 = (char *)operator new(0x20uLL);
  v350 = v23;
  v351 = xmmword_208F051A0;
  if (v23 <= "LowerBoundByAckedRateFactor" && v23 + 27 > "LowerBoundByAckedRateFactor")
    goto LABEL_503;
  strcpy(v23, "LowerBoundByAckedRateFactor");
  v352 = 0;
  v346 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v353 = 0;
  v339 = off_24C0B4170;
  v340 = 0;
  HIBYTE(v343[2]) = 18;
  v341 = 0;
  v342 = 0;
  if (v343 <= (void **)"HoldDurationFactor" && (char *)&v343[2] + 2 > "HoldDurationFactor")
    goto LABEL_503;
  strcpy((char *)v343, "HoldDurationFactor");
  v344 = 0;
  v339 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FF0;
  v345 = 0;
  v332 = off_24C0B4170;
  v333 = 0;
  v334 = 0;
  v335 = 0;
  v337 = 15;
  if (v336 <= (void **)"UseByteLossRate" && (char *)&v336[1] + 7 > "UseByteLossRate")
    goto LABEL_503;
  strcpy((char *)v336, "UseByteLossRate");
  v338 = 0;
  v332 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FC0;
  v324 = off_24C0B4170;
  v325 = 0;
  v326 = 0;
  v327 = 0;
  v329 = 15;
  if (v328 <= (void **)"PaddingDuration" && (char *)&v328[1] + 7 > "PaddingDuration")
    goto LABEL_503;
  strcpy((char *)v328, "PaddingDuration");
  v330 = 0;
  v324 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B0268;
  v331 = 0;
  v318 = off_24C0B4170;
  v319 = 0;
  HIBYTE(v322[2]) = 18;
  v320 = 0;
  v321 = 0;
  if (v322 <= (void **)"BoundBestCandidate" && (char *)&v322[2] + 2 > "BoundBestCandidate")
    goto LABEL_503;
  strcpy((char *)v322, "BoundBestCandidate");
  v323 = 0;
  v24 = (int64_t)&unk_24C0B3FC0;
  v318 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FC0;
  v311 = off_24C0B4170;
  __p = 0;
  v313 = 0;
  v314 = 0;
  v25 = (char *)operator new(0x19uLL);
  v315 = v25;
  v316 = xmmword_208F05110;
  if (v25 <= "PaceAtLossBasedEstimate" && v25 + 23 > "PaceAtLossBasedEstimate")
    goto LABEL_503;
  strcpy(v25, "PaceAtLossBasedEstimate");
  v317 = 0;
  v311 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FC0;
  if (a2)
  {
    v608[0] = &v601;
    v608[1] = &v593;
    v609 = &v585;
    v610 = &v577;
    v611 = &v570;
    v612 = &v562;
    v613 = &v552;
    v614 = &v545;
    v615 = &v538;
    v616 = &v531;
    v617 = &v523;
    v618 = &v515;
    v619 = &v507;
    v620 = &v499;
    v621 = &v491;
    v622 = &v484;
    v623 = &v476;
    v624 = &v470;
    v625 = &v464;
    v626 = &v457;
    v627 = &v449;
    v628 = &v442;
    v629 = &v434;
    v630 = &v426;
    v631 = &v418;
    v632 = &v410;
    v633 = &v403;
    v634 = &v395;
    v635 = &v388;
    v636 = &v381;
    v637 = &v374;
    v638 = &v368;
    v639 = &v361;
    v640 = &v354;
    v641 = &v346;
    v642 = &v339;
    v643 = &v332;
    v644 = &v324;
    v645 = &v318;
    v646 = &v311;
    (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&v308, a2, "WebRTC-Bwe-LossBasedBweV2", 25);
    if ((char)v310 < 0)
    {
      v26 = v309;
      if (v309 < 0)
        goto LABEL_503;
      v27 = (char *)v308;
      if (v309)
      {
        if (!v308)
          goto LABEL_503;
      }
    }
    else
    {
      v26 = v310;
      v27 = (char *)&v308;
    }
    webrtc::ParseFieldTrial(v608, 40, v27, v26);
    if ((char)v310 < 0)
    {
      operator delete(v308);
      v74 = HIBYTE(v607);
      *(_BYTE *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 296) = 0;
      if (!v74)
      {
LABEL_90:
        v311 = off_24C0B4170;
        if ((SHIBYTE(v316) & 0x80000000) == 0)
          goto LABEL_91;
        goto LABEL_287;
      }
    }
    else
    {
      v33 = HIBYTE(v607);
      *(_BYTE *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 296) = 0;
      if (!v33)
        goto LABEL_90;
    }
    v32 = v600;
    v29 = v592;
    v30 = v584;
    v28 = v576;
    v31 = v569;
    v8 = (char *)v559;
    v9 = v560;
  }
  else
  {
    v28 = 0;
    v29 = 0x412E848000000000;
    v30 = 0x3FF4CCCCCCCCCCCDLL;
    v31 = 60000000;
    v32 = 0x412E848000000000;
  }
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0x8000000000000000;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 160) = 1;
  *(_BYTE *)(a1 + 162) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0x8000000000000000;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 16) = v32;
  *(_OWORD *)(a1 + 235) = 0u;
  *(_QWORD *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 252) = 0;
  *(_QWORD *)(a1 + 265) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 1;
  *(_QWORD *)(a1 + 24) = v29;
  *(_QWORD *)(a1 + 32) = v30;
  *(_QWORD *)(a1 + 40) = v28;
  *(_QWORD *)(a1 + 48) = v31;
  v24 = v9 - v8;
  if (v9 == v8)
  {
    v75 = 0;
    v76 = 0;
  }
  else
  {
    if (v24 < 0)
      goto LABEL_504;
    v75 = (char *)operator new(v9 - v8);
    v76 = &v75[8 * (v24 >> 3)];
    memcpy(v75, v8, v9 - v8);
  }
  *(_QWORD *)(a1 + 56) = v75;
  *(_QWORD *)(a1 + 64) = v76;
  *(_QWORD *)(a1 + 72) = v76;
  v77 = v544;
  *(_QWORD *)(a1 + 80) = v551;
  *(_QWORD *)(a1 + 88) = v77;
  v78 = v530;
  *(_QWORD *)(a1 + 96) = v537;
  *(_QWORD *)(a1 + 104) = v78;
  *(_QWORD *)(a1 + 112) = v522;
  *(_QWORD *)(a1 + 120) = v514;
  v79 = v498;
  *(_QWORD *)(a1 + 128) = v506;
  *(_QWORD *)(a1 + 136) = v79;
  *(_DWORD *)(a1 + 144) = v490;
  *(_QWORD *)(a1 + 152) = v483;
  *(_BYTE *)(a1 + 160) = HIBYTE(v475);
  *(_BYTE *)(a1 + 161) = HIBYTE(v469);
  *(_BYTE *)(a1 + 162) = HIBYTE(v463);
  *(_QWORD *)(a1 + 168) = v456;
  *(_DWORD *)(a1 + 176) = v448;
  v80 = v433;
  *(_QWORD *)(a1 + 184) = v441;
  *(_QWORD *)(a1 + 192) = v80;
  *(_QWORD *)(a1 + 200) = v425;
  v81 = v409;
  *(_QWORD *)(a1 + 208) = v417;
  *(_QWORD *)(a1 + 216) = v81;
  v82 = v394;
  *(_QWORD *)(a1 + 224) = v402;
  *(_QWORD *)(a1 + 232) = v82;
  *(_QWORD *)(a1 + 240) = v387;
  *(_BYTE *)(a1 + 248) = HIBYTE(v380);
  *(_BYTE *)(a1 + 249) = HIBYTE(v373);
  *(_BYTE *)(a1 + 250) = HIBYTE(v367);
  *(_DWORD *)(a1 + 252) = v360;
  v83 = v345;
  *(_QWORD *)(a1 + 256) = v353;
  *(_QWORD *)(a1 + 264) = v83;
  *(_BYTE *)(a1 + 272) = HIBYTE(v338);
  *(_QWORD *)(a1 + 280) = v331;
  *(_BYTE *)(a1 + 288) = HIBYTE(v323);
  *(_BYTE *)(a1 + 289) = HIBYTE(v317);
  v311 = off_24C0B4170;
  if ((SHIBYTE(v316) & 0x80000000) == 0)
  {
LABEL_91:
    v34 = __p;
    if (!__p)
      goto LABEL_93;
    goto LABEL_92;
  }
LABEL_287:
  operator delete(v315);
  v34 = __p;
  if (__p)
  {
LABEL_92:
    v313 = v34;
    operator delete(v34);
  }
LABEL_93:
  v318 = off_24C0B4170;
  if (SHIBYTE(v322[2]) < 0)
    operator delete(v322[0]);
  if (v319)
  {
    v320 = v319;
    operator delete(v319);
  }
  v324 = off_24C0B4170;
  if (v329 < 0)
    operator delete(v328[0]);
  if (v325)
  {
    v326 = v325;
    operator delete(v325);
  }
  v332 = off_24C0B4170;
  if (v337 < 0)
    operator delete(v336[0]);
  if (v333)
  {
    v334 = v333;
    operator delete(v333);
  }
  v339 = off_24C0B4170;
  if (SHIBYTE(v343[2]) < 0)
    operator delete(v343[0]);
  if (v340)
  {
    v341 = v340;
    operator delete(v340);
  }
  v346 = off_24C0B4170;
  if (SHIBYTE(v351) < 0)
    operator delete(v350);
  if (v347)
  {
    v348 = v347;
    operator delete(v347);
  }
  v354 = off_24C0B4170;
  if (SHIBYTE(v358[2]) < 0)
    operator delete(v358[0]);
  if (v355)
  {
    v356 = v355;
    operator delete(v355);
  }
  v361 = off_24C0B4170;
  if (v366 < 0)
    operator delete(v365[0]);
  if (v362)
  {
    v363 = v362;
    operator delete(v362);
  }
  v368 = off_24C0B4170;
  if (SHIBYTE(v372[2]) < 0)
    operator delete(v372[0]);
  if (v369)
  {
    v370 = v369;
    operator delete(v369);
  }
  v374 = off_24C0B4170;
  if (SHIBYTE(v379) < 0)
    operator delete(v378);
  if (v375)
  {
    v376 = v375;
    operator delete(v375);
  }
  v381 = off_24C0B4170;
  if (SHIBYTE(v385[2]) < 0)
    operator delete(v385[0]);
  if (v382)
  {
    v383 = v382;
    operator delete(v382);
  }
  v388 = off_24C0B4170;
  if (SHIBYTE(v392[2]) < 0)
    operator delete(v392[0]);
  if (v389)
  {
    v390 = v389;
    operator delete(v389);
  }
  v395 = off_24C0B4170;
  if (SHIBYTE(v400) < 0)
    operator delete(v399);
  if (v396)
  {
    v397 = v396;
    operator delete(v396);
  }
  v403 = off_24C0B4170;
  if (SHIBYTE(v407[2]) < 0)
    operator delete(v407[0]);
  if (v404)
  {
    v405 = v404;
    operator delete(v404);
  }
  v410 = off_24C0B4170;
  if (SHIBYTE(v415) < 0)
    operator delete(v414);
  if (v411)
  {
    v412 = v411;
    operator delete(v411);
  }
  v418 = off_24C0B4170;
  if (SHIBYTE(v423) < 0)
    operator delete(v422);
  if (v419)
  {
    v420 = v419;
    operator delete(v419);
  }
  v426 = off_24C0B4170;
  if (SHIBYTE(v431) < 0)
    operator delete(v430);
  if (v427)
  {
    v428 = v427;
    operator delete(v427);
  }
  v434 = off_24C0B4170;
  if (SHIBYTE(v439) < 0)
    operator delete(v438);
  if (v435)
  {
    v436 = v435;
    operator delete(v435);
  }
  v442 = off_24C0B4170;
  if (SHIBYTE(v446[2]) < 0)
    operator delete(v446[0]);
  if (v443)
  {
    v444 = v443;
    operator delete(v443);
  }
  v449 = off_24C0B4170;
  if (SHIBYTE(v454) < 0)
    operator delete(v453);
  if (v450)
  {
    v451 = v450;
    operator delete(v450);
  }
  v457 = off_24C0B4170;
  if (SHIBYTE(v462) < 0)
    operator delete(v461);
  if (v458)
  {
    v459 = v458;
    operator delete(v458);
  }
  v464 = off_24C0B4170;
  if (SHIBYTE(v468[2]) < 0)
    operator delete(v468[0]);
  if (v465)
  {
    v466 = v465;
    operator delete(v465);
  }
  v470 = off_24C0B4170;
  if (SHIBYTE(v474[2]) < 0)
    operator delete(v474[0]);
  if (v471)
  {
    v472 = v471;
    operator delete(v471);
  }
  v476 = off_24C0B4170;
  if (v481 < 0)
    operator delete(v480[0]);
  if (v477)
  {
    v478 = v477;
    operator delete(v477);
  }
  v484 = off_24C0B4170;
  if (SHIBYTE(v488[2]) < 0)
    operator delete(v488[0]);
  if (v485)
  {
    v486 = v485;
    operator delete(v485);
  }
  v491 = off_24C0B4170;
  if (SHIBYTE(v496) < 0)
    operator delete(v495);
  if (v492)
  {
    v493 = v492;
    operator delete(v492);
  }
  v499 = off_24C0B4170;
  if (SHIBYTE(v504) < 0)
    operator delete(v503);
  if (v500)
  {
    v501 = v500;
    operator delete(v500);
  }
  v507 = off_24C0B4170;
  if (SHIBYTE(v512) < 0)
    operator delete(v511);
  if (v508)
  {
    v509 = v508;
    operator delete(v508);
  }
  v515 = off_24C0B4170;
  if (SHIBYTE(v520) < 0)
    operator delete(v519);
  if (v516)
  {
    v517 = v516;
    operator delete(v516);
  }
  v523 = off_24C0B4170;
  if (SHIBYTE(v528) < 0)
    operator delete(v527);
  if (v524)
  {
    v525 = v524;
    operator delete(v524);
  }
  v531 = off_24C0B4170;
  if (SHIBYTE(v535[2]) < 0)
    operator delete(v535[0]);
  if (v532)
  {
    v533 = v532;
    operator delete(v532);
  }
  v538 = off_24C0B4170;
  if (SHIBYTE(v542[2]) < 0)
    operator delete(v542[0]);
  if (v539)
  {
    v540 = v539;
    operator delete(v539);
  }
  v545 = off_24C0B4170;
  if (SHIBYTE(v549[2]) < 0)
    operator delete(v549[0]);
  if (v546)
  {
    v547 = v546;
    operator delete(v546);
  }
  v552 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B1990;
  if (v559)
  {
    v560 = (char *)v559;
    operator delete(v559);
  }
  v552 = off_24C0B4170;
  if (SHIBYTE(v556[2]) < 0)
    operator delete(v556[0]);
  if (v553)
  {
    v554 = v553;
    operator delete(v553);
  }
  v562 = off_24C0B4170;
  if (SHIBYTE(v567) < 0)
    operator delete(v566);
  if (v563)
  {
    v564 = v563;
    operator delete(v563);
  }
  v570 = off_24C0B4170;
  if (SHIBYTE(v574[2]) < 0)
    operator delete(v574[0]);
  if (v571)
  {
    v572 = v571;
    operator delete(v571);
  }
  v577 = off_24C0B4170;
  if (SHIBYTE(v582) < 0)
    operator delete(v581);
  if (v578)
  {
    v579 = v578;
    operator delete(v578);
  }
  v585 = off_24C0B4170;
  if (SHIBYTE(v590) < 0)
    operator delete(v589);
  if (v586)
  {
    v587 = v586;
    operator delete(v586);
  }
  v593 = off_24C0B4170;
  if (SHIBYTE(v598) < 0)
    operator delete(v597);
  if (v594)
  {
    v595 = v594;
    operator delete(v594);
  }
  v601 = off_24C0B4170;
  if (v606 < 0)
    operator delete(v605[0]);
  if (v602)
  {
    v603 = v602;
    operator delete(v602);
  }
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0x8000000000000000;
  *(_DWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 376) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 384) = 0x8000000000000000;
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 472) = 0x8000000000000000;
  *(_OWORD *)(a1 + 480) = xmmword_208F0B760;
  *(int64x2_t *)(a1 + 496) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = xmmword_208F08BB0;
  *(_DWORD *)(a1 + 520) = 3;
  *(_OWORD *)(a1 + 544) = xmmword_208F0A8E0;
  *(_QWORD *)(a1 + 560) = 0x8000000000000000;
  if (!*(_BYTE *)(a1 + 296))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v67, v68, v69, v70, v71, v72, v73, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    return a1;
  }
  v35 = *(double *)(a1 + 16);
  v36 = v35 > 1.0;
  if (v35 <= 1.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      rtc::webrtc_logging_impl::Log("\r\t\a", v37, v38, v39, v40, v41, v42, v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
  }
  if (*(double *)(a1 + 24) <= 1.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      rtc::webrtc_logging_impl::Log("\r\t\a", v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    v36 = 0;
  }
  if (*(double *)(a1 + 32) < 0.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      rtc::webrtc_logging_impl::Log("\r\t\a", v51, v52, v53, v54, v55, v56, v57, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    v36 = 0;
  }
  if (*(double *)(a1 + 40) < 0.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      rtc::webrtc_logging_impl::Log("\r\t\a", v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    v36 = 0;
  }
  if (*(uint64_t *)(a1 + 48) > 0)
  {
    v65 = *(double **)(a1 + 56);
    v66 = *(double **)(a1 + 64);
    if (v65 == v66)
      goto LABEL_301;
    goto LABEL_297;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v84, v85, v86, v87, v88, v89, v90, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
  }
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_503;
  v36 = 0;
  v65 = *(double **)(a1 + 56);
  v66 = *(double **)(a1 + 64);
  if (v65 != v66)
  {
    do
    {
LABEL_297:
      if (*v65 <= 0.0)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        {
          v24 = v24 & 0xFFFFFFFF00000000 | 0x148A;
          rtc::webrtc_logging_impl::Log("\r\t\a", v91, v92, v93, v94, v95, v96, v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
        }
        v36 = 0;
      }
      ++v65;
    }
    while (v65 != v66);
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
  }
LABEL_301:
  if (!*(_BYTE *)(a1 + 160) && !*(_BYTE *)(a1 + 161))
  {
    v98 = *(double **)(a1 + 56);
    v99 = *(double **)(a1 + 64);
    if (v98 == v99)
    {
LABEL_306:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v100, v101, v102, v103, v104, v105, v106, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
      v36 = 0;
    }
    else
    {
      while (*v98 == 1.0)
      {
        if (++v98 == v99)
          goto LABEL_306;
      }
    }
  }
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_503;
  if (*(double *)(a1 + 80) < 0.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      rtc::webrtc_logging_impl::Log("\r\t\a", v107, v108, v109, v110, v111, v112, v113, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    v36 = 0;
  }
  v114 = *(double *)(a1 + 96);
  if (v114 < 0.0 || v114 >= 1.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      rtc::webrtc_logging_impl::Log("\r\t\a", v116, v117, v118, v119, v120, v121, v122, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    v36 = 0;
  }
  v123 = *(double *)(a1 + 104);
  if (v123 < 0.0 || v123 >= 1.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      rtc::webrtc_logging_impl::Log("\r\t\a", v125, v126, v127, v128, v129, v130, v131, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    v36 = 0;
  }
  v132 = *(double *)(a1 + 112);
  if (v132 <= 0.0 || v132 > 1.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      rtc::webrtc_logging_impl::Log("\r\t\a", v134, v135, v136, v137, v138, v139, v140, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    v36 = 0;
  }
  if (*(uint64_t *)(a1 + 120) <= 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      webrtc::ToString(*(_QWORD *)(a1 + 120), (char *)v608);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v142, v143, v144, v145, v146, v147, v148, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
      if (SHIBYTE(v609) < 0)
        operator delete(v608[0]);
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    v36 = 0;
    v141 = *(double *)(a1 + 128);
    if (v141 >= 1.0)
      goto LABEL_353;
LABEL_352:
    if (v141 >= *(double *)(a1 + 96))
      goto LABEL_358;
    goto LABEL_353;
  }
  v141 = *(double *)(a1 + 128);
  if (v141 < 1.0)
    goto LABEL_352;
LABEL_353:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    rtc::webrtc_logging_impl::Log("\r\t\a\t\a", v149, v150, v151, v152, v153, v154, v155, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
  }
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_503;
  v36 = 0;
LABEL_358:
  v156 = *(double *)(a1 + 136);
  if (v156 < 0.0 || v156 >= 1.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      rtc::webrtc_logging_impl::Log("\r\t\a", v158, v159, v160, v161, v162, v163, v164, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    v36 = 0;
    if (*(int *)(a1 + 144) > 0)
    {
LABEL_361:
      if (*(double *)(a1 + 152) > 0.0)
        goto LABEL_362;
      goto LABEL_376;
    }
  }
  else if (*(int *)(a1 + 144) > 0)
  {
    goto LABEL_361;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v165, v166, v167, v168, v169, v170, v171, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
  }
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_503;
  v36 = 0;
  if (*(double *)(a1 + 152) > 0.0)
  {
LABEL_362:
    if (*(uint64_t *)(a1 + 168) > 0)
      goto LABEL_363;
    goto LABEL_381;
  }
LABEL_376:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    rtc::webrtc_logging_impl::Log("\r\t\a", v172, v173, v174, v175, v176, v177, v178, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
  }
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_503;
  v36 = 0;
  if (*(uint64_t *)(a1 + 168) > 0)
  {
LABEL_363:
    if (*(int *)(a1 + 176) > 1)
      goto LABEL_364;
LABEL_387:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v187, v188, v189, v190, v191, v192, v193, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    v36 = 0;
    v157 = *(double *)(a1 + 184);
    if (v157 < 0.0)
      goto LABEL_393;
LABEL_392:
    if (v157 < 1.0)
      goto LABEL_398;
    goto LABEL_393;
  }
LABEL_381:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    webrtc::ToString(*(webrtc **)(a1 + 168), v179, (char *)v608);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v180, v181, v182, v183, v184, v185, v186, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    if (SHIBYTE(v609) < 0)
      operator delete(v608[0]);
  }
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_503;
  v36 = 0;
  if (*(int *)(a1 + 176) <= 1)
    goto LABEL_387;
LABEL_364:
  v157 = *(double *)(a1 + 184);
  if (v157 >= 0.0)
    goto LABEL_392;
LABEL_393:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    rtc::webrtc_logging_impl::Log("\r\t\a", v194, v195, v196, v197, v198, v199, v200, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
  }
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_503;
  v36 = 0;
LABEL_398:
  v201 = *(double *)(a1 + 192);
  if (v201 > 0.0 && v201 <= 1.0)
  {
    if (*(uint64_t *)(a1 + 200) > 0)
      goto LABEL_401;
LABEL_408:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      webrtc::ToString(*(_QWORD *)(a1 + 200), (char *)v608);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v210, v211, v212, v213, v214, v215, v216, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
      if (SHIBYTE(v609) < 0)
        operator delete(v608[0]);
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    v36 = 0;
    v202 = *(double *)(a1 + 208);
    if (v202 < 0.0)
      goto LABEL_415;
LABEL_414:
    if (v202 < 1.0)
      goto LABEL_420;
    goto LABEL_415;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    rtc::webrtc_logging_impl::Log("\r\t\a", v203, v204, v205, v206, v207, v208, v209, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
  }
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_503;
  v36 = 0;
  if (*(uint64_t *)(a1 + 200) <= 0)
    goto LABEL_408;
LABEL_401:
  v202 = *(double *)(a1 + 208);
  if (v202 >= 0.0)
    goto LABEL_414;
LABEL_415:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    rtc::webrtc_logging_impl::Log("\r\t\a", v217, v218, v219, v220, v221, v222, v223, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
  }
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_503;
  v36 = 0;
LABEL_420:
  v224 = *(double *)(a1 + 216);
  if (v224 <= 0.0 || v224 > 1.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      rtc::webrtc_logging_impl::Log("\r\t\a", v244, v245, v246, v247, v248, v249, v250, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    v36 = 0;
    if (*(double *)(a1 + 224) <= 1.0)
    {
LABEL_423:
      if (*(double *)(a1 + 232) > 0.0)
        goto LABEL_424;
      goto LABEL_454;
    }
  }
  else if (*(double *)(a1 + 224) <= 1.0)
  {
    goto LABEL_423;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    rtc::webrtc_logging_impl::Log("\r\t\a", v251, v252, v253, v254, v255, v256, v257, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
  }
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_503;
  v36 = 0;
  if (*(double *)(a1 + 232) > 0.0)
  {
LABEL_424:
    if (*(uint64_t *)(a1 + 240) > 0)
      goto LABEL_425;
    goto LABEL_459;
  }
LABEL_454:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    rtc::webrtc_logging_impl::Log("\r\t\a", v258, v259, v260, v261, v262, v263, v264, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
  }
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_503;
  v36 = 0;
  if (*(uint64_t *)(a1 + 240) > 0)
  {
LABEL_425:
    if (*(int *)(a1 + 252) > 0)
      goto LABEL_426;
LABEL_469:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v276, v277, v278, v279, v280, v281, v282, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    if (*(double *)(a1 + 256) >= 0.0)
    {
LABEL_477:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v290, v291, v292, v293, v294, v295, v296, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
      if (*(_BYTE *)(a1 + 296))
      {
        v297 = *(void **)(a1 + 56);
        if (v297)
        {
          *(_QWORD *)(a1 + 64) = v297;
          operator delete(v297);
        }
        *(_BYTE *)(a1 + 296) = 0;
      }
      return a1;
    }
LABEL_474:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      if (!*(_BYTE *)(a1 + 296))
        goto LABEL_503;
      rtc::webrtc_logging_impl::Log("\r\t\a", v283, v284, v285, v286, v287, v288, v289, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    goto LABEL_477;
  }
LABEL_459:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v265, v266, v267, v268, v269, v270, v271, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
  }
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_503;
  v36 = 0;
  if (*(int *)(a1 + 252) <= 0)
    goto LABEL_469;
LABEL_426:
  if (*(double *)(a1 + 256) < 0.0)
    goto LABEL_474;
  if (!v36)
    goto LABEL_477;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a1 + 136);
  v225 = *(_DWORD *)(a1 + 176);
  v226 = v225;
  v228 = *(_QWORD *)(a1 + 328);
  v227 = *(_QWORD *)(a1 + 336);
  v229 = 0xAAAAAAAAAAAAAAABLL * ((v227 - v228) >> 4);
  v230 = v225 - v229;
  if (v225 <= v229)
  {
    if (v225 < v229)
      *(_QWORD *)(a1 + 336) = v228 + 48 * v225;
    v272 = *(_QWORD *)(a1 + 448);
    v273 = (*(_QWORD *)(a1 + 456) - v272) >> 3;
    v274 = v225 >= v273;
    v275 = v225 - v273;
    if (v225 <= v273)
    {
LABEL_490:
      if (!v274)
        *(_QWORD *)(a1 + 456) = v272 + 8 * v226;
      goto LABEL_492;
    }
  }
  else
  {
    v231 = *(_QWORD *)(a1 + 344);
    if (0xAAAAAAAAAAAAAAABLL * ((v231 - v227) >> 4) >= v230)
    {
      v299 = v227 + 48 * v230;
      do
      {
        if (!v227)
          goto LABEL_503;
        *(_OWORD *)(v227 + 16) = 0uLL;
        *(_OWORD *)(v227 + 32) = 0uLL;
        *(_OWORD *)v227 = 0uLL;
        *(_QWORD *)(v227 + 16) = 0x8000000000000000;
        *(_QWORD *)(v227 + 24) = 0;
        *(_QWORD *)(v227 + 32) = 0;
        *(_DWORD *)(v227 + 40) = -1;
        v227 += 48;
      }
      while (v227 != v299);
      *(_QWORD *)(a1 + 336) = v299;
    }
    else
    {
      if (v225 < 0)
        goto LABEL_504;
      v232 = 0x5555555555555556 * ((v231 - v228) >> 4);
      if (v232 <= v225)
        v232 = v225;
      if (0xAAAAAAAAAAAAAAABLL * ((v231 - v228) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v233 = 0x555555555555555;
      else
        v233 = v232;
      if (v233 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v234 = 48 * v233;
      v235 = (char *)operator new(48 * v233);
      v236 = &v235[48 * v229];
      v237 = &v235[v234];
      v238 = &v235[48 * (int)v226];
      v239 = v236;
      do
      {
        *((_OWORD *)v239 + 1) = 0uLL;
        *((_OWORD *)v239 + 2) = 0uLL;
        *(_OWORD *)v239 = 0uLL;
        *((_QWORD *)v239 + 2) = 0x8000000000000000;
        *((_QWORD *)v239 + 3) = 0;
        *((_QWORD *)v239 + 4) = 0;
        *((_DWORD *)v239 + 10) = -1;
        v239 += 48;
      }
      while (v239 != v238);
      v241 = *(char **)(a1 + 328);
      v240 = *(char **)(a1 + 336);
      if (v240 != v241)
      {
        do
        {
          v242 = *((_OWORD *)v240 - 3);
          v243 = *((_OWORD *)v240 - 2);
          *(_OWORD *)(v236 - 20) = *(_OWORD *)(v240 - 20);
          *((_OWORD *)v236 - 3) = v242;
          *((_OWORD *)v236 - 2) = v243;
          v236 -= 48;
          v240 -= 48;
        }
        while (v240 != v241);
        v240 = *(char **)(a1 + 328);
      }
      *(_QWORD *)(a1 + 328) = v236;
      *(_QWORD *)(a1 + 336) = v238;
      *(_QWORD *)(a1 + 344) = v237;
      if (v240)
        operator delete(v240);
    }
    if (!*(_BYTE *)(a1 + 296))
      goto LABEL_503;
    v225 = *(_DWORD *)(a1 + 176);
    v226 = v225;
    v272 = *(_QWORD *)(a1 + 448);
    v300 = (*(_QWORD *)(a1 + 456) - v272) >> 3;
    v274 = v225 >= v300;
    v275 = v225 - v300;
    if (v225 <= v300)
      goto LABEL_490;
  }
  std::vector<double>::__append(a1 + 448, v275);
  if (!*(_BYTE *)(a1 + 296))
    goto LABEL_503;
  v225 = *(_DWORD *)(a1 + 176);
  v226 = v225;
LABEL_492:
  v301 = *(_QWORD *)(a1 + 424);
  v302 = (*(_QWORD *)(a1 + 432) - v301) >> 3;
  if (v226 <= v302)
  {
    if (v226 < v302)
      *(_QWORD *)(a1 + 432) = v301 + 8 * v226;
    goto LABEL_497;
  }
  std::vector<double>::__append(a1 + 424, v226 - v302);
  if (!*(_BYTE *)(a1 + 296))
  {
LABEL_503:
    __break(1u);
LABEL_504:
    abort();
  }
  v225 = *(_DWORD *)(a1 + 176);
LABEL_497:
  if (v225 >= 1)
  {
    v303 = 0;
    v304 = *(_QWORD *)(a1 + 448);
    v305 = (*(_QWORD *)(a1 + 456) - v304) >> 3;
    v306 = v225;
    while (v305 != v303)
    {
      *(long double *)(v304 + 8 * v303) = pow(*(long double *)(a1 + 216), (double)(int)v303);
      v307 = *(_QWORD *)(a1 + 424);
      if (v303 >= (*(_QWORD *)(a1 + 432) - v307) >> 3)
        break;
      *(long double *)(v307 + 8 * v303) = pow(*(long double *)(a1 + 192), (double)(int)v303);
      if (v306 == ++v303)
        goto LABEL_502;
    }
    goto LABEL_503;
  }
LABEL_502:
  *(_QWORD *)(a1 + 536) = 300000;
  return a1;
}

void webrtc::LossBasedBweV2::GetLossBasedResult(webrtc::LossBasedBweV2 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!*((_BYTE *)this + 296))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
    goto LABEL_12;
  }
  if ((unint64_t)(*((_QWORD *)this + 39) + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
  }
  else if (*((_DWORD *)this + 80) >= *((_DWORD *)this + 63))
  {
    return;
  }
  if (!*((_BYTE *)this + 296))
  {
    __break(1u);
    return;
  }
  if (*((_DWORD *)this + 80) <= *((_DWORD *)this + 63) && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_12:
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
}

void webrtc::LossBasedBweV2::SetAcknowledgedBitrate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  void *__p;
  char v15;

  if ((unint64_t)(a2 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      *(_QWORD *)a1 = a2;
      if (!*(_BYTE *)(a1 + 8))
        goto LABEL_13;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = 1;
      *(_QWORD *)a1 = a2;
    }
    if (!*(_BYTE *)(a1 + 296))
    {
      __break(1u);
      return;
    }
    v10 = *(double *)(a1 + 256);
    if (v10 > 0.0)
    {
      v11 = llround(v10 * (double)a2);
      v12 = *(_QWORD *)(a1 + 488);
      if (!*(_BYTE *)(a1 + 416))
        goto LABEL_14;
      goto LABEL_15;
    }
LABEL_13:
    v11 = 0;
    v12 = *(_QWORD *)(a1 + 488);
    if (!*(_BYTE *)(a1 + 416))
LABEL_14:
      *(_BYTE *)(a1 + 416) = 1;
LABEL_15:
    v13 = v12 + 0x7FFFFFFFFFFFFFFFLL;
    if (v11 > v12)
      v12 = v11;
    if (v13 < 0xFFFFFFFFFFFFFFFELL)
      v11 = v12;
    *(_QWORD *)(a1 + 408) = v11;
    return;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    webrtc::ToString(a2, (char *)&__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    if (v15 < 0)
      operator delete(__p);
  }
}

void webrtc::LossBasedBweV2::SetMinMaxBitrate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  double v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__p[2];
  char v24;

  if ((unint64_t)(a2 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    *(_QWORD *)(a1 + 488) = a2;
    if (*(_BYTE *)(a1 + 8))
      v6 = (unint64_t)(*(_QWORD *)a1 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL;
    else
      v6 = 1;
    if (v6)
      goto LABEL_14;
    if (!*(_BYTE *)(a1 + 296))
    {
      __break(1u);
      return;
    }
    v7 = *(double *)(a1 + 256);
    if (v7 <= 0.0)
    {
LABEL_14:
      v8 = 0;
      if (*(_BYTE *)(a1 + 416))
        goto LABEL_16;
    }
    else
    {
      v8 = llround(v7 * (double)*(uint64_t *)a1);
      if (*(_BYTE *)(a1 + 416))
        goto LABEL_16;
    }
    *(_BYTE *)(a1 + 416) = 1;
LABEL_16:
    if (v8 <= a2)
      v8 = a2;
    *(_QWORD *)(a1 + 408) = v8;
    if ((unint64_t)(a3 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_19;
LABEL_13:
    *(_QWORD *)(a1 + 496) = a3;
    return;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0
    && (webrtc::ToString(a2, (char *)__p),
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc"), v24 < 0))
  {
    operator delete(__p[0]);
    if ((unint64_t)(a3 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_13;
  }
  else if ((unint64_t)(a3 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    goto LABEL_13;
  }
LABEL_19:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    webrtc::ToString(a3, (char *)__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    if (v24 < 0)
      operator delete(__p[0]);
  }
}

void webrtc::LossBasedBweV2::UpdateBandwidthEstimate(webrtc::LossBasedBweV2 *this, int64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  int64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  double v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  double *v62;
  double *v63;
  char *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  __int128 *v80;
  uint64_t v81;
  __int128 v82;
  int v83;
  int *v84;
  int *v85;
  double v86;
  double v87;
  double v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  double v108;
  double v109;
  uint64_t v110;
  char *v111;
  _OWORD *v112;
  unint64_t v113;
  char *v114;
  unint64_t v115;
  _OWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  uint64_t *v122;
  uint64_t v123;
  double v124;
  uint64_t v125;
  double v126;
  unint64_t v127;
  double v128;
  double v129;
  double v130;
  void *v131;
  double v132;
  double v133;
  double v134;
  double v135;
  unint64_t v136;
  double v137;
  double v138;
  void **v139;
  double v140;
  double v141;
  double v142;
  uint64_t v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  int64_t v152;
  uint64_t v153;
  int64_t v154;
  int *v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  long double v162;
  unint64_t v163;
  uint64_t v164;
  double v165;
  double v166;
  uint64_t v167;
  double v168;
  uint64_t v169;
  uint64_t v170;
  int v172;
  int *v173;
  int *v174;
  double v175;
  double v176;
  int v177;
  unint64_t v178;
  uint64_t v179;
  double v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int *v190;
  int *v191;
  double v192;
  double v193;
  int v194;
  unint64_t v195;
  uint64_t v196;
  double v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int64_t v204;
  void *v205;
  uint64_t v206;
  double v207;
  uint64_t v208;
  void **v209;
  unint64_t v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  unint64_t *v214;
  uint64_t v215;
  char *v216;
  unint64_t *v217;
  void *v218;
  unint64_t v219;
  unint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t *v239;
  unint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  unint64_t v243;
  BOOL v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  BOOL v256;
  int64_t v257;
  int v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  int *v268;
  int *v269;
  double v270;
  double v271;
  double v272;
  int v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  unint64_t *v279;
  uint64_t v280;
  __int128 v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  uint64_t *v286;
  uint64_t v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  __int128 *v292;
  uint64_t v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  BOOL v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  void *__p;
  char *v308;
  double v309;
  double v310;
  uint64_t v311;
  int v312;
  double v313;
  int64_t v314;
  void *v315[2];
  char v316;

  *((_QWORD *)this + 63) = a4;
  if (!*((_BYTE *)this + 296))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return;
    goto LABEL_74;
  }
  if (!a3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
      return;
LABEL_74:
    rtc::webrtc_logging_impl::Log("\r\t", v49, v50, v51, v52, v53, v54, v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    return;
  }
  LODWORD(v6) = a5;
  v7 = a4;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 80 * a3;
  v14 = 0x8000000000000000;
  v15 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    if (a2[9] == 0x7FFFFFFFFFFFFFFFLL)
    {
      ++v10;
      v16 = a2[1];
      v17 = v16 == 0x8000000000000000 || v11 == 0x8000000000000000;
      v18 = v16 + v11;
      if (v17)
        v18 = 0x8000000000000000;
      if (v16 == 0x7FFFFFFFFFFFFFFFLL)
        v19 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v11 == 0x7FFFFFFFFFFFFFFFLL)
        v9 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v9 = v19;
      if (v11 == 0x7FFFFFFFFFFFFFFFLL)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = v19;
    }
    else
    {
      v16 = a2[1];
    }
    v20 = v16 == 0x8000000000000000 || v12 == 0x8000000000000000;
    v21 = v16 + v12;
    if (v20)
      v21 = 0x8000000000000000;
    if (v16 == 0x7FFFFFFFFFFFFFFFLL)
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    v24 = *a2;
    a2 += 10;
    v23 = v24;
    if (v12 == 0x7FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v22;
    if (v23 < v15)
      v15 = v23;
    if (v14 <= v23)
      v14 = v23;
    v13 -= 80;
  }
  while (v13);
  v25 = *((_DWORD *)this + 88) + a3;
  *((_DWORD *)this + 88) = v25;
  v26 = *((_DWORD *)this + 89) + v10;
  *((_DWORD *)this + 89) = v26;
  v27 = *((_QWORD *)this + 45);
  v28 = 0x7FFFFFFFFFFFFFFFLL;
  v29 = 0x7FFFFFFFFFFFFFFFLL;
  if (v27 != 0x7FFFFFFFFFFFFFFFLL && v12 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v29 = 0x8000000000000000;
    v30 = v12 == 0x8000000000000000 || v27 == 0x8000000000000000;
    v31 = v27 + v12;
    if (!v30)
      v29 = v31;
  }
  *((_QWORD *)this + 45) = v29;
  v32 = *((_QWORD *)this + 46);
  if (v32 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v33 = v9 == 0x8000000000000000 || v32 == 0x8000000000000000;
    v34 = v32 + v9;
    if (v33)
      v34 = 0x8000000000000000;
    if (v9 != 0x7FFFFFFFFFFFFFFFLL)
      v28 = v34;
  }
  *((_QWORD *)this + 46) = v28;
  v35 = *((_QWORD *)this + 47);
  v36 = 0x7FFFFFFFFFFFFFFFLL;
  if ((unint64_t)(v35 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
  {
    *((_QWORD *)this + 47) = v15;
    v35 = v15;
  }
  if (v14 != 0x7FFFFFFFFFFFFFFFLL && v35 != 0x8000000000000000)
  {
    if (v14 == 0x8000000000000000)
      return;
    if (v35 == 0x7FFFFFFFFFFFFFFFLL)
      return;
    v36 = v14 - v35;
    if (v14 - v35 < 1 || v36 < *((_QWORD *)this + 21))
      return;
  }
  *((_QWORD *)this + 47) = v14;
  v37 = *((_DWORD *)this + 80);
  v38 = (uint64_t)(8000000 * v29) / v36;
  if (v37 <= 0)
  {
    v39 = *((_DWORD *)this + 44);
    v41 = *((_QWORD *)this + 41);
    v42 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 42) - v41) >> 4);
  }
  else
  {
    v39 = *((_DWORD *)this + 44);
    v40 = ((v37 - 1) % v39);
    v41 = *((_QWORD *)this + 41);
    v42 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 42) - v41) >> 4);
    if (v42 <= v40)
      goto LABEL_121;
    v43 = *((double *)this + 23);
    v44 = llround(v43 * (double)*(uint64_t *)(v41 + 48 * v40 + 16));
    v45 = llround((1.0 - v43) * (double)v38);
    v38 = 0x7FFFFFFFFFFFFFFFLL;
    if (v44 != 0x7FFFFFFFFFFFFFFFLL && v45 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v38 = 0x8000000000000000;
      v47 = v45 == 0x8000000000000000 || v44 == 0x8000000000000000;
      v48 = v45 + v44;
      if (!v47)
        v38 = v48;
    }
  }
  *((_DWORD *)this + 80) = v37 + 1;
  v56 = v37 % v39;
  if (v42 <= v56)
    goto LABEL_121;
  v57 = v41 + 48 * (int)v56;
  *(_DWORD *)v57 = v25;
  *(_DWORD *)(v57 + 4) = v26;
  *(_DWORD *)(v57 + 8) = v25 - v26;
  *(_QWORD *)(v57 + 16) = v38;
  *(_QWORD *)(v57 + 24) = v29;
  *(_QWORD *)(v57 + 32) = v28;
  *(_DWORD *)(v57 + 40) = v37;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  if (!*((_BYTE *)this + 296))
    goto LABEL_121;
  v5 = *((_QWORD *)this + 62);
  if (*((_BYTE *)this + 272))
  {
    webrtc::LossBasedBweV2::GetAverageReportedByteLossRatio((uint64_t)this);
    if (!*((_BYTE *)this + 296))
      goto LABEL_121;
    goto LABEL_80;
  }
  v83 = *((_DWORD *)this + 80);
  if (v83 < 1)
  {
    v58 = 0.0;
LABEL_80:
    v59 = *((double *)this + 26);
    if (v58 > v59)
      v5 = llround((double)*((uint64_t *)this + 25) / (v58 - v59));
    goto LABEL_82;
  }
  v84 = (int *)*((_QWORD *)this + 41);
  v85 = (int *)*((_QWORD *)this + 42);
  if (v84 != v85)
  {
    v86 = 0.0;
    v87 = 0.0;
    do
    {
      v89 = v84[10];
      if (v89 != -1)
      {
        v90 = v83 + ~v89;
        v91 = *((_QWORD *)this + 53);
        if (v90 >= (*((_QWORD *)this + 54) - v91) >> 3)
          goto LABEL_121;
        v88 = *(double *)(v91 + 8 * v90);
        v86 = v86 + v88 * (double)*v84;
        v87 = v87 + v88 * (double)v84[1];
      }
      v84 += 12;
    }
    while (v84 != v85);
    v58 = v87 / v86;
    goto LABEL_80;
  }
LABEL_82:
  if (!*((_BYTE *)this + 400))
    goto LABEL_122;
  *((_QWORD *)this + 49) = v5;
  v60 = *((_QWORD *)this + 39);
  if ((unint64_t)(v60 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
    goto LABEL_123;
LABEL_84:
  v312 = v6;
  v311 = v60;
  v61 = *((double *)this + 38);
  v62 = (double *)*((_QWORD *)this + 7);
  v63 = (double *)*((_QWORD *)this + 8);
  if (v62 != v63)
  {
LABEL_85:
    v7 = 0;
    v6 = 0;
    v64 = 0;
    while (1)
    {
      while (1)
      {
        v65 = llround(*v62 * (double)v311);
        if (v6 >= (unint64_t)v64)
          break;
        if (!v6)
          goto LABEL_121;
        *(_QWORD *)v6 = v65;
        v6 += 8;
        v66 = (unint64_t *)v6;
        if (++v62 == v63)
          goto LABEL_126;
      }
      v5 = (uint64_t)(v6 - v7) >> 3;
      v67 = v5 + 1;
      if ((unint64_t)(v5 + 1) >> 61)
        goto LABEL_565;
      if ((uint64_t)&v64[-v7] >> 2 > v67)
        v67 = (uint64_t)&v64[-v7] >> 2;
      if ((unint64_t)&v64[-v7] >= 0x7FFFFFFFFFFFFFF8)
        v67 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v67)
        goto LABEL_121;
      if (v67 >> 61)
        goto LABEL_566;
      v68 = 8 * v67;
      v69 = (char *)operator new(8 * v67);
      v70 = (unint64_t *)&v69[8 * v5];
      *v70 = v65;
      v66 = v70 + 1;
      if (v6 != v7)
      {
        v71 = v6 - v7 - 8;
        if (v71 >= 0x168)
        {
          v76 = (v6 - 8 - v7) & 0xFFFFFFFFFFFFFFF8;
          if (&v69[v6 - v7 - 8 - v76] > &v69[v6 - v7 - 8])
          {
            v72 = v6;
          }
          else if (v6 - 8 - v76 > v6 - 8)
          {
            v72 = v6;
          }
          else if ((unint64_t)(v7 - (_QWORD)v69) >= 0x20)
          {
            v77 = (v71 >> 3) + 1;
            v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
            v72 = v6 - v78;
            v70 = (unint64_t *)((char *)v70 - v78);
            v79 = &v69[8 * v5 - 16];
            v80 = (__int128 *)(v6 - 16);
            v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v82 = *v80;
              *((_OWORD *)v79 - 1) = *(v80 - 1);
              *(_OWORD *)v79 = v82;
              v79 -= 32;
              v80 -= 2;
              v81 -= 4;
            }
            while (v81);
            if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_102;
          }
          else
          {
            v72 = v6;
          }
        }
        else
        {
          v72 = v6;
        }
        do
        {
          v73 = *(_QWORD *)(v72 - 8);
          v72 -= 8;
          *--v70 = v73;
        }
        while (v72 != v7);
      }
LABEL_102:
      v64 = &v69[v68];
      if (v7)
      {
        v74 = (void *)v7;
        v75 = v66;
        operator delete(v74);
        v66 = v75;
      }
      v7 = (uint64_t)v70;
      ++v62;
      v6 = (unint64_t)v66;
      if (v62 == v63)
        goto LABEL_126;
    }
  }
  while (1)
  {
    v64 = 0;
    v66 = 0;
    v7 = 0;
LABEL_126:
    if (!*((_BYTE *)this + 8))
    {
      v96 = (uint64_t *)v66;
      v92 = v312;
      goto LABEL_142;
    }
    v92 = v312;
    if (!*((_BYTE *)this + 296))
      goto LABEL_121;
    if (*((_BYTE *)this + 160))
    {
      if (!*((_BYTE *)this + 249) || !v312)
        goto LABEL_137;
      v93 = *((_QWORD *)this + 35);
      if (v93 >= 1)
      {
        if (v93 == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_137;
        v94 = *((_QWORD *)this + 70);
        if (v94 == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_137;
        v95 = v94 + v93;
        if (v94 == 0x8000000000000000)
          v95 = 0x8000000000000000;
        if (v95 >= *((_QWORD *)this + 47))
        {
LABEL_137:
          v6 = llround(*((double *)this + 28) * (double)*(uint64_t *)this);
          if (v66 < (unint64_t *)v64)
          {
            if (!v66)
              goto LABEL_121;
            *v66++ = v6;
            goto LABEL_140;
          }
          v212 = (char *)v66 - v7;
          v5 = ((uint64_t)v66 - v7) >> 3;
          v213 = v5 + 1;
          if ((unint64_t)(v5 + 1) >> 61)
            goto LABEL_565;
          if ((uint64_t)&v64[-v7] >> 2 > v213)
            v213 = (uint64_t)&v64[-v7] >> 2;
          if ((unint64_t)&v64[-v7] >= 0x7FFFFFFFFFFFFFF8)
            v213 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v213)
            goto LABEL_121;
          if (v213 >> 61)
            goto LABEL_566;
          v214 = v66;
          v215 = 8 * v213;
          v216 = (char *)operator new(8 * v213);
          v64 = &v216[v215];
          v217 = (unint64_t *)&v216[8 * v5];
          *v217 = v6;
          v96 = (uint64_t *)(v217 + 1);
          v218 = v214;
          if (v214 == (unint64_t *)v7)
          {
LABEL_519:
            v7 = (uint64_t)v217;
            if (v218)
              operator delete(v218);
            goto LABEL_142;
          }
          v219 = (unint64_t)v214 - v7 - 8;
          if (v219 >= 0x58)
          {
            if ((unint64_t)((char *)v214 - &v216[(_QWORD)v212]) >= 0x20)
            {
              v276 = (v219 >> 3) + 1;
              v277 = 8 * (v276 & 0x3FFFFFFFFFFFFFFCLL);
              v220 = &v214[v277 / 0xFFFFFFFFFFFFFFF8];
              v217 = (unint64_t *)((char *)v217 - v277);
              v278 = &v216[8 * v5 - 16];
              v279 = v214 - 2;
              v280 = v276 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v281 = *(_OWORD *)v279;
                *((_OWORD *)v278 - 1) = *((_OWORD *)v279 - 1);
                *(_OWORD *)v278 = v281;
                v278 -= 32;
                v279 -= 4;
                v280 -= 4;
              }
              while (v280);
              if (v276 == (v276 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_518;
            }
            else
            {
              v220 = v214;
            }
          }
          else
          {
            v220 = v214;
          }
          do
          {
            v282 = *--v220;
            *--v217 = v282;
          }
          while (v220 != (unint64_t *)v7);
LABEL_518:
          v218 = (void *)v7;
          goto LABEL_519;
        }
      }
    }
LABEL_140:
    v96 = (uint64_t *)v66;
LABEL_142:
    v5 = *((_QWORD *)this + 63);
    if ((unint64_t)(v5 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      if (!*((_BYTE *)this + 296))
        goto LABEL_121;
      if (*((_BYTE *)this + 161) && v5 > v311)
      {
        if (v96 < (uint64_t *)v64)
        {
          if (!v96)
            goto LABEL_121;
          *v96++ = v5;
          goto LABEL_149;
        }
        v235 = ((uint64_t)v96 - v7) >> 3;
        v236 = v235 + 1;
        if ((unint64_t)(v235 + 1) >> 61)
          goto LABEL_565;
        if ((uint64_t)&v64[-v7] >> 2 > v236)
          v236 = (uint64_t)&v64[-v7] >> 2;
        if ((unint64_t)&v64[-v7] >= 0x7FFFFFFFFFFFFFF8)
          v236 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v236)
          goto LABEL_121;
        if (v236 >> 61)
          goto LABEL_566;
        v237 = 8 * v236;
        v238 = (char *)operator new(8 * v236);
        v64 = &v238[v237];
        v239 = (uint64_t *)&v238[8 * v235];
        *v239 = v5;
        v6 = (unint64_t)(v239 + 1);
        if (v96 == (uint64_t *)v7)
        {
          v7 = (uint64_t)&v238[8 * v235];
          v92 = v312;
LABEL_505:
          if (v96)
            operator delete(v96);
          goto LABEL_150;
        }
        v240 = (unint64_t)v96 - v7 - 8;
        if (v240 >= 0x58 && (unint64_t)(v7 - (_QWORD)v238) >= 0x20)
        {
          v283 = (v240 >> 3) + 1;
          v284 = 8 * (v283 & 0x3FFFFFFFFFFFFFFCLL);
          v241 = &v96[v284 / 0xFFFFFFFFFFFFFFF8];
          v239 = (uint64_t *)((char *)v239 - v284);
          v285 = &v238[8 * v235 - 16];
          v286 = v96 - 2;
          v287 = v283 & 0x3FFFFFFFFFFFFFFCLL;
          v92 = v312;
          do
          {
            v288 = *(_OWORD *)v286;
            *((_OWORD *)v285 - 1) = *((_OWORD *)v286 - 1);
            *(_OWORD *)v285 = v288;
            v285 -= 32;
            v286 -= 4;
            v287 -= 4;
          }
          while (v287);
          if (v283 == (v283 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_428;
        }
        else
        {
          v241 = v96;
          v92 = v312;
        }
        do
        {
          v242 = *--v241;
          *--v239 = v242;
        }
        while (v241 != (uint64_t *)v7);
LABEL_428:
        v96 = (uint64_t *)v7;
        v7 = (uint64_t)v239;
        goto LABEL_505;
      }
    }
LABEL_149:
    v6 = (unint64_t)v96;
LABEL_150:
    if (v92)
    {
      if (!*((_BYTE *)this + 296))
        goto LABEL_121;
      if (*((_BYTE *)this + 162))
      {
        v97 = 392;
        if (!*((_BYTE *)this + 400))
          v97 = 496;
        v98 = *(_QWORD *)((char *)this + v97);
        if (v311 > v98)
        {
          if (v6 < (unint64_t)v64)
          {
            if (!v6)
              goto LABEL_121;
            *(_QWORD *)v6 = v98;
            v6 += 8;
            goto LABEL_159;
          }
          v246 = (uint64_t)(v6 - v7) >> 3;
          v247 = v246 + 1;
          if ((unint64_t)(v246 + 1) >> 61)
            goto LABEL_565;
          if ((uint64_t)&v64[-v7] >> 2 > v247)
            v247 = (uint64_t)&v64[-v7] >> 2;
          if ((unint64_t)&v64[-v7] >= 0x7FFFFFFFFFFFFFF8)
            v247 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v247)
            goto LABEL_121;
          v99 = v311;
          if (v247 >> 61)
LABEL_566:
            std::__throw_bad_array_new_length[abi:sn180100]();
          v248 = (char *)operator new(8 * v247);
          v249 = (uint64_t *)&v248[8 * v246];
          *v249 = v98;
          v5 = (uint64_t)(v249 + 1);
          if (v6 == v7)
          {
LABEL_538:
            v7 = (uint64_t)v249;
            if (v6)
              operator delete((void *)v6);
            goto LABEL_160;
          }
          v250 = v6 - v7 - 8;
          if (v250 >= 0x58)
          {
            if ((unint64_t)(v7 - (_QWORD)v248) >= 0x20)
            {
              v289 = (v250 >> 3) + 1;
              v290 = 8 * (v289 & 0x3FFFFFFFFFFFFFFCLL);
              v251 = v6 - v290;
              v249 = (uint64_t *)((char *)v249 - v290);
              v291 = &v248[8 * v246 - 16];
              v292 = (__int128 *)(v6 - 16);
              v293 = v289 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v294 = *v292;
                *((_OWORD *)v291 - 1) = *(v292 - 1);
                *(_OWORD *)v291 = v294;
                v291 -= 32;
                v292 -= 2;
                v293 -= 4;
              }
              while (v293);
              if (v289 == (v289 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_537;
            }
            else
            {
              v251 = v6;
            }
          }
          else
          {
            v251 = v6;
          }
          do
          {
            v295 = *(_QWORD *)(v251 - 8);
            v251 -= 8;
            *--v249 = v295;
          }
          while (v251 != v7);
LABEL_537:
          v6 = v7;
          goto LABEL_538;
        }
      }
    }
LABEL_159:
    v5 = v6;
    v99 = v311;
LABEL_160:
    v100 = *((_QWORD *)this + 62);
    if (*((_DWORD *)this + 130) != 3
      && (unint64_t)(*((_QWORD *)this + 60) + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
    {
      v100 = *((_QWORD *)this + 60);
    }
    if (!*((_BYTE *)this + 8))
      goto LABEL_183;
    if (!*((_BYTE *)this + 296))
      goto LABEL_121;
    v101 = *((double *)this + 5);
    if (v101 <= 0.0)
    {
LABEL_183:
      v6 = v100;
      goto LABEL_184;
    }
    v102 = *((_QWORD *)this + 47);
    v103 = 0x7FFFFFFFFFFFFFFFLL;
    if (v102 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v104 = *((_QWORD *)this + 48);
      if (v104 != 0x8000000000000000)
      {
        v103 = v102 - v104;
        if (v104 == 0x7FFFFFFFFFFFFFFFLL || v102 == 0x8000000000000000)
          v103 = 0x8000000000000000;
        if (v103 < 1)
          v103 = 0;
      }
    }
    v106 = *((_QWORD *)this + 6);
    if (v103 >= v106)
      v103 = *((_QWORD *)this + 6);
    v107 = llround(v101 * (double)v103);
    if (v107 == 0x8000000000000000)
    {
      v108 = -INFINITY;
      if (v106 == 0x8000000000000000)
        goto LABEL_434;
    }
    else if (v107 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v108 = INFINITY;
      if (v106 == 0x8000000000000000)
        goto LABEL_434;
    }
    else
    {
      v108 = (double)v107;
      if (v106 == 0x8000000000000000)
      {
LABEL_434:
        v109 = -INFINITY;
        v6 = 0x7FFFFFFFFFFFFFFFLL;
        if (v100 == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_184;
        goto LABEL_437;
      }
    }
    if (v106 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v109 = INFINITY;
      v6 = 0x7FFFFFFFFFFFFFFFLL;
      if (v100 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_184;
    }
    else
    {
      v109 = (double)v106;
      v6 = 0x7FFFFFFFFFFFFFFFLL;
      if (v100 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_184;
    }
LABEL_437:
    v243 = llround(v108 / v109 * (double)*(uint64_t *)this);
    if (v243 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v244 = v243 == 0x8000000000000000 || v100 == 0x8000000000000000;
      v245 = v243 + v100;
      if (v244)
        v6 = 0x8000000000000000;
      else
        v6 = v245;
    }
LABEL_184:
    v110 = v5 - v7;
    if (v5 != v7)
    {
      if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF9)
LABEL_565:
        abort();
      v5 = v110 >> 3;
      v111 = (char *)operator new(2 * v110);
      v112 = v111;
      v113 = (v5 - 1) & 0xFFFFFFFFFFFFFFFLL;
      v114 = v111;
      if (v113 < 3)
        goto LABEL_569;
      v115 = v113 + 1;
      v114 = &v111[16 * (v115 & 0x1FFFFFFFFFFFFFFCLL)];
      v116 = v111 + 32;
      v117 = v115 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        *(v116 - 2) = xmmword_208F08B90;
        *(v116 - 1) = xmmword_208F08B90;
        *v116 = xmmword_208F08B90;
        v116[1] = xmmword_208F08B90;
        v116 += 4;
        v117 -= 4;
      }
      while (v117);
      if (v115 != (v115 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_569:
        do
        {
          *(_OWORD *)v114 = xmmword_208F08B90;
          v114 += 16;
        }
        while (v114 != &v111[16 * v5]);
      }
      if (v99 <= (uint64_t)v6)
        v118 = v6;
      else
        v118 = v99;
      if ((unint64_t)v5 <= 1)
        v119 = 1;
      else
        v119 = v5;
      if (!*((_BYTE *)this + 296))
        goto LABEL_121;
      v120 = 0;
      v121 = *((double *)this + 12);
      if (v61 >= v121)
        v121 = v61;
      v122 = (uint64_t *)(v111 + 8);
      while (1)
      {
        v123 = *(_QWORD *)(v7 + 8 * v120);
        if (v118 < v123)
          v123 = v118;
        v124 = 1.0;
        if (!v123)
          goto LABEL_217;
        v125 = *((_QWORD *)this + 15);
        if (v125 == 0x8000000000000000)
        {
          v126 = -INFINITY;
          if (v123 == 0x8000000000000000)
            goto LABEL_212;
        }
        else if (v125 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v126 = INFINITY;
          if (v123 == 0x8000000000000000)
            goto LABEL_212;
        }
        else
        {
          v126 = (double)v125;
          if (v123 == 0x8000000000000000)
          {
LABEL_212:
            *(double *)&v127 = -INFINITY;
            goto LABEL_213;
          }
        }
        if (v123 == 0x7FFFFFFFFFFFFFFFLL)
        {
          *(double *)&v127 = INFINITY;
LABEL_213:
          v128 = *(double *)&v127;
          goto LABEL_215;
        }
        v128 = (double)v123;
LABEL_215:
        v124 = *((double *)this + 16) + v126 / v128;
        if (v124 > 1.0)
          v124 = 1.0;
LABEL_217:
        if (v5 == v120)
          goto LABEL_121;
        if (v124 >= v121)
          v124 = v121;
        *((double *)v122 - 1) = v124;
        *v122 = v123;
        v122 += 2;
        if (v119 == ++v120)
        {
          v308 = &v111[16 * v5];
          v310 = v61;
          operator delete((void *)v7);
          v309 = -1.79769313e308;
          v5 = 0x8000000000000000;
          __p = v112;
          while (1)
          {
            *(_OWORD *)v315 = *v112;
            if (*((int *)this + 80) <= 0)
            {
              v132 = *(double *)v315;
              v7 = (uint64_t)v315[1];
            }
            else
            {
              if (!*((_BYTE *)this + 296))
                goto LABEL_121;
              v132 = *(double *)v315;
              v7 = (uint64_t)v315[1];
              if (*((int *)this + 36) >= 1)
              {
                LODWORD(v6) = 0;
                if (!v315[1])
                {
                  while (1)
                  {
                    webrtc::LossBasedBweV2::GetDerivatives((uint64_t)this, (uint64_t)v315);
                    if (!*((_BYTE *)this + 296))
                      goto LABEL_121;
                    v135 = v132 - v133 * *((double *)this + 19) / v134;
                    if (v135 < *((double *)this + 12))
                      v135 = *((double *)this + 12);
                    if (v135 <= 1.0)
                      v132 = v135;
                    else
                      v132 = 1.0;
                    v315[0] = *(void **)&v132;
                    LODWORD(v6) = v6 + 1;
                    if ((int)v6 >= *((_DWORD *)this + 36))
                      goto LABEL_262;
                  }
                }
                while (2)
                {
                  webrtc::LossBasedBweV2::GetDerivatives((uint64_t)this, (uint64_t)v315);
                  if (!*((_BYTE *)this + 296))
                    goto LABEL_121;
                  v142 = v132 - v140 * *((double *)this + 19) / v141;
                  v315[0] = *(void **)&v142;
                  v143 = *((_QWORD *)this + 15);
                  if (v143 == 0x8000000000000000)
                  {
                    v144 = -INFINITY;
                    if (v7 != 0x8000000000000000)
                      goto LABEL_258;
LABEL_239:
                    *(double *)&v136 = -INFINITY;
LABEL_240:
                    v137 = *(double *)&v136;
                  }
                  else
                  {
                    if (v143 == 0x7FFFFFFFFFFFFFFFLL)
                    {
                      v144 = INFINITY;
                      if (v7 == 0x8000000000000000)
                        goto LABEL_239;
                    }
                    else
                    {
                      v144 = (double)v143;
                      if (v7 == 0x8000000000000000)
                        goto LABEL_239;
                    }
LABEL_258:
                    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
                    {
                      *(double *)&v136 = INFINITY;
                      goto LABEL_240;
                    }
                    v137 = (double)v7;
                  }
                  v138 = *((double *)this + 16) + v144 / v137;
                  if (v138 > 1.0)
                    v138 = 1.0;
                  if (v142 >= *((double *)this + 12))
                    v139 = v315;
                  else
                    v139 = (void **)((char *)this + 96);
                  if (v138 >= *(double *)v139)
                    v132 = *(double *)v139;
                  else
                    v132 = v138;
                  v315[0] = *(void **)&v132;
                  LODWORD(v6) = v6 + 1;
                  if ((int)v6 >= *((_DWORD *)this + 36))
                    break;
                  continue;
                }
              }
            }
LABEL_262:
            v145 = 0.0;
            v146 = 0.0;
            v313 = 0.0;
            if ((unint64_t)(v7 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              if (!*((_BYTE *)this + 296))
                goto LABEL_121;
              if (*((_BYTE *)this + 272))
              {
                webrtc::LossBasedBweV2::GetAverageReportedByteLossRatio((uint64_t)this);
                if (!*((_BYTE *)this + 296))
                  goto LABEL_121;
              }
              else
              {
                v172 = *((_DWORD *)this + 80);
                if (v172 >= 1)
                {
                  v173 = (int *)*((_QWORD *)this + 41);
                  v174 = (int *)*((_QWORD *)this + 42);
                  if (v173 == v174)
                  {
                    v146 = NAN;
                  }
                  else
                  {
                    v175 = 0.0;
                    do
                    {
                      v177 = v173[10];
                      if (v177 != -1)
                      {
                        v178 = v172 + ~v177;
                        v179 = *((_QWORD *)this + 53);
                        if (v178 >= (*((_QWORD *)this + 54) - v179) >> 3)
                          goto LABEL_121;
                        v176 = *(double *)(v179 + 8 * v178);
                        v146 = v146 + v176 * (double)*v173;
                        v175 = v175 + v176 * (double)v173[1];
                      }
                      v173 += 12;
                    }
                    while (v173 != v174);
                    v146 = v175 / v146;
                  }
                }
              }
              v147 = *((double *)this + 13);
              v148 = v147 - v146;
              v150 = *((double *)this + 14) + vabdd_f64(v147, v146);
              v152 = v7 / 0x3E8uLL;
              if (v7 % 0x3E8uLL > 0x1F3)
                ++v152;
              if (-v7 % 0x3E8uLL <= 0x1F4)
                v153 = 0;
              else
                v153 = -1;
              v154 = v153 - -v7 / 0x3E8uLL;
              if (v7 < 0)
                v152 = v154;
              v149 = *((double *)this + 11);
              v151 = *((double *)this + 10) * v148 / v150;
              v313 = v148 * v149 / v150 * log((double)v152 + 1.0) + v151 * (double)v152;
            }
            v155 = (int *)*((_QWORD *)this + 41);
            v6 = *((_QWORD *)this + 42);
            if (v155 != (int *)v6)
            {
              v145 = 0.0;
              do
              {
                if (v155[10] != -1)
                {
                  v163 = *((_DWORD *)this + 80) + ~v155[10];
                  v164 = *((_QWORD *)this + 56);
                  if (v163 >= (*((_QWORD *)this + 57) - v164) >> 3 || !*((_BYTE *)this + 296))
                    goto LABEL_121;
                  v165 = v162;
                  v166 = *(double *)(v164 + 8 * v163);
                  if (*((_BYTE *)this + 272))
                  {
                    v167 = *((_QWORD *)v155 + 4);
                    v168 = log(v162);
                    v169 = *((_QWORD *)v155 + 3);
                    v170 = v169 - v167;
                    if (v167 == 0x7FFFFFFFFFFFFFFFLL || v169 == 0x8000000000000000)
                      v170 = 0x8000000000000000;
                    if (v167 == 0x8000000000000000)
                      v170 = 0x7FFFFFFFFFFFFFFFLL;
                    if (v169 == 0x7FFFFFFFFFFFFFFFLL)
                      v170 = 0x7FFFFFFFFFFFFFFFLL;
                    v159 = v145 + v166 * (log(1.0 - v165) * ((double)v170 / 1000.0) + (double)v167 / 1000.0 * v168);
                    v160 = v313 * v166;
                    v161 = (double)v169 / 1000.0;
                  }
                  else
                  {
                    v156 = (double)v155[1];
                    v157 = log(v162);
                    v158 = (double)v155[2];
                    v159 = v145 + v166 * (log(1.0 - v165) * v158 + v156 * v157);
                    v160 = v313 * v166;
                    v161 = (double)*v155;
                  }
                  v145 = v159 + v160 * v161;
                }
                v155 += 12;
              }
              while (v155 != (int *)v6);
            }
            v130 = v309;
            v129 = v310;
            v131 = (void *)v311;
            if (v145 > v309)
              v131 = (void *)v7;
            v311 = (uint64_t)v131;
            if (v145 > v309)
            {
              v129 = v132;
              v130 = v145;
            }
            v309 = v130;
            v310 = v129;
            if (++v112 == (_OWORD *)v308)
            {
              v99 = (uint64_t)v131;
              v315[0] = v131;
              operator delete(__p);
              v61 = v310;
              v5 = (uint64_t)this + 312;
              if (v311 >= *((_QWORD *)this + 39))
                goto LABEL_307;
LABEL_306:
              *((_QWORD *)this + 48) = *((_QWORD *)this + 47);
              goto LABEL_307;
            }
          }
        }
      }
    }
    if (v5)
      operator delete((void *)v5);
    v315[0] = (void *)v99;
    v5 = (uint64_t)this + 312;
    if (v99 < *((_QWORD *)this + 39))
      goto LABEL_306;
LABEL_307:
    if (*((_BYTE *)this + 296))
      break;
LABEL_121:
    __break(1u);
LABEL_122:
    *((_BYTE *)this + 400) = 1;
    *((_QWORD *)this + 49) = v5;
    v60 = *((_QWORD *)this + 39);
    if ((unint64_t)(v60 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
      goto LABEL_84;
LABEL_123:
    if ((unint64_t)(v7 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      {
        webrtc::ToString(v7, (char *)v315);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v182, v183, v184, v185, v186, v187, v188, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
        if (v316 < 0)
          operator delete(v315[0]);
      }
      return;
    }
    *((_QWORD *)this + 39) = v7;
    *((_QWORD *)this + 64) = v7;
    *((_DWORD *)this + 130) = 3;
    v312 = v6;
    v311 = v7;
    v61 = *((double *)this + 38);
    v62 = (double *)*((_QWORD *)this + 7);
    v63 = (double *)*((_QWORD *)this + 8);
    if (v62 != v63)
      goto LABEL_85;
  }
  if (*((_BYTE *)this + 272))
  {
    webrtc::LossBasedBweV2::GetAverageReportedByteLossRatio((uint64_t)this);
LABEL_310:
    if (v180 > v61)
    {
      if (!*((_BYTE *)this + 296))
        goto LABEL_121;
      if (*((_BYTE *)this + 248))
      {
        v181 = *(void **)v5;
        if (*(_QWORD *)v5 < v99)
        {
          v315[0] = *(void **)v5;
          v99 = (uint64_t)v181;
        }
      }
    }
  }
  else
  {
    v189 = *((_DWORD *)this + 80);
    if (v189 < 1)
    {
      v180 = 0.0;
      goto LABEL_310;
    }
    v190 = (int *)*((_QWORD *)this + 41);
    v191 = (int *)*((_QWORD *)this + 42);
    if (v190 != v191)
    {
      v192 = 0.0;
      v193 = 0.0;
      do
      {
        v194 = v190[10];
        if (v194 != -1)
        {
          v195 = v189 + ~v194;
          v196 = *((_QWORD *)this + 53);
          if (v195 >= (*((_QWORD *)this + 54) - v196) >> 3)
            goto LABEL_121;
          v197 = *(double *)(v196 + 8 * v195);
          v192 = v192 + v197 * (double)*v190;
          v193 = v193 + v197 * (double)v190[1];
        }
        v190 += 12;
      }
      while (v190 != v191);
      v180 = v193 / v192;
      goto LABEL_310;
    }
  }
  v198 = *((_DWORD *)this + 130);
  if (v198 != 3)
  {
    v202 = *((_QWORD *)this + 59);
    if ((unint64_t)(v202 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      if (!*((_BYTE *)this + 296))
        goto LABEL_121;
      v203 = *((_QWORD *)this + 30);
      v204 = v203 + v202;
      if (v203 == 0x8000000000000000)
        v204 = 0x8000000000000000;
      if (v203 == 0x7FFFFFFFFFFFFFFFLL)
        v204 = 0x7FFFFFFFFFFFFFFFLL;
      if (v204 > *((_QWORD *)this + 47))
      {
        if (v99 >= *((_QWORD *)this + 60))
          v99 = *((_QWORD *)this + 60);
        v315[0] = (void *)v99;
      }
    }
    v205 = *(void **)v5;
    if (*(_QWORD *)v5 < v99 || v198 <= 1 && v205 == (void *)v99)
    {
      if (*((_BYTE *)this + 8))
      {
        v206 = *(_QWORD *)this;
        if ((unint64_t)(*(_QWORD *)this + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          if (!*((_BYTE *)this + 296))
            goto LABEL_121;
          v207 = *((double *)this + 2);
          v208 = *((_QWORD *)this + 68);
          if ((unint64_t)(v208 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
            goto LABEL_351;
          if (!*((_BYTE *)this + 8) || v206 < (uint64_t)llround(*((double *)this + 4) * (double)v208))
          {
            v207 = *((double *)this + 3);
LABEL_351:
            if (!*((_BYTE *)this + 8))
              goto LABEL_121;
          }
          v314 = llround(v207 * (double)v206);
          v209 = v315;
          if (v314 < v99)
            v209 = (void **)&v314;
          if ((uint64_t)v205 >= (uint64_t)*v209)
            v209 = (void **)v5;
          v99 = (uint64_t)*v209;
          if (v198 == 2 && (void *)v99 == v205)
          {
            if (v205 == (void *)0x8000000000000000)
              v210 = 0x8000000000000000;
            else
              v210 = (unint64_t)v205 + 1;
            if (v205 == (void *)0x7FFFFFFFFFFFFFFFLL)
              v99 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v99 = v210;
          }
        }
      }
    }
  }
  v199 = *((_QWORD *)this + 63);
  v200 = *((unsigned __int8 *)this + 416);
  if ((unint64_t)(v199 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
  {
    if (*((_BYTE *)this + 416))
      v211 = *((_QWORD *)this + 51);
    else
      v211 = 0;
    v223 = 392;
    if (!*((_BYTE *)this + 400))
      v223 = 496;
    v224 = *(_QWORD *)((char *)this + v223);
    if (v224 >= v99)
      v224 = v99;
    if (v211 <= v224)
      v7 = v224;
    else
      v7 = v211;
  }
  else
  {
    if (*((_BYTE *)this + 416))
      v201 = *((_QWORD *)this + 51);
    else
      v201 = 0;
    v221 = 392;
    if (!*((_BYTE *)this + 400))
      v221 = 496;
    v222 = *(_QWORD *)((char *)this + v221);
    if (v222 >= v99)
      v222 = v99;
    if (v199 >= v222)
      v199 = v222;
    if (v201 <= v199)
      v7 = v199;
    else
      v7 = v201;
  }
  if (!*((_BYTE *)this + 296))
    goto LABEL_121;
  if (*((_BYTE *)this + 288) && v7 < v99)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v232 = v7 / 0x3E8uLL;
      if (v7 % 0x3E8uLL > 0x1F3)
        ++v232;
      if (-v7 % 0x3E8uLL <= 0x1F4)
        v233 = 0;
      else
        v233 = -1;
      if (v7 < 0)
        v5 = v233 - -v7 / 0x3E8uLL;
      else
        v5 = v232;
      if (!*((_BYTE *)this + 296))
        goto LABEL_121;
      if (*((_BYTE *)this + 272))
      {
        webrtc::LossBasedBweV2::GetAverageReportedByteLossRatio((uint64_t)this);
      }
      else
      {
        v267 = *((_DWORD *)this + 80);
        if (v267 >= 1)
        {
          v268 = (int *)*((_QWORD *)this + 41);
          v269 = (int *)*((_QWORD *)this + 42);
          if (v268 != v269)
          {
            v270 = 0.0;
            v271 = 0.0;
            do
            {
              v273 = v268[10];
              if (v273 != -1)
              {
                v274 = v267 + ~v273;
                v275 = *((_QWORD *)this + 53);
                if (v274 >= (*((_QWORD *)this + 54) - v275) >> 3)
                  goto LABEL_121;
                v272 = *(double *)(v275 + 8 * v274);
                v270 = v270 + v272 * (double)*v268;
                v271 = v271 + v272 * (double)v268[1];
              }
              v268 += 12;
            }
            while (v268 != v269);
          }
        }
      }
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double> const&)::t, v225, v226, v227, v228, v229, v230, v231, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    }
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 39) = v7;
    v198 = *((_DWORD *)this + 130);
  }
  else
  {
    *((double *)this + 38) = v61;
    *((_QWORD *)this + 39) = v99;
    if (*((double *)this + 32) > 0.0)
    {
      if (v200)
        v234 = *((_QWORD *)this + 51);
      else
        v234 = 0;
      if (v99 > v234)
        v234 = v99;
      *(_QWORD *)v5 = v234;
    }
  }
  if (v198 == 2 && *((_QWORD *)this + 66) > *((_QWORD *)this + 47) && v7 < *((_QWORD *)this + 63))
  {
    if (!*((_BYTE *)this + 296))
      goto LABEL_121;
    if (*((double *)this + 32) <= 0.0)
    {
      v252 = *((_QWORD *)this + 68);
    }
    else
    {
      if (*((_BYTE *)this + 416))
        v252 = *((_QWORD *)this + 51);
      else
        v252 = 0;
      if (v252 <= *((_QWORD *)this + 68))
        v252 = *((_QWORD *)this + 68);
      *((_QWORD *)this + 68) = v252;
    }
    if (v7 < v252)
      v252 = v7;
    *((_QWORD *)this + 64) = v252;
    return;
  }
  v253 = *((_QWORD *)this + 64);
  if (v253 >= v7)
  {
    if (v198 <= 1 && v253 == v7)
      goto LABEL_470;
  }
  else
  {
    if (v198 == 3)
      goto LABEL_488;
LABEL_470:
    if (!*((_BYTE *)this + 296))
      goto LABEL_121;
    v254 = *((_QWORD *)this + 35);
    if (v198 != 1)
      goto LABEL_483;
    if (!v254)
      goto LABEL_483;
    if (v254 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_483;
    v255 = *((_QWORD *)this + 70);
    if (v255 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_483;
    v256 = v255 == 0x8000000000000000 || v254 == 0x8000000000000000;
    v257 = v255 + v254;
    if (v256)
      v257 = 0x8000000000000000;
    if (v257 >= *((_QWORD *)this + 47) || *((_QWORD *)this + 69) < v7)
    {
LABEL_483:
      if (v7 < *((_QWORD *)this + 63) && v7 < *((_QWORD *)this + 62))
      {
        if (v254 >= 1 && v7 > *((_QWORD *)this + 69))
        {
          *((_QWORD *)this + 69) = v7;
          *((_QWORD *)this + 70) = *((_QWORD *)this + 47);
        }
        v258 = v254 > 0;
        v259 = 1;
        goto LABEL_553;
      }
    }
  }
LABEL_488:
  if (v7 >= *((_QWORD *)this + 63) || v7 >= *((_QWORD *)this + 62))
  {
    *((_OWORD *)this + 33) = xmmword_208F0B770;
    *((_OWORD *)this + 34) = xmmword_208F0A8E0;
    *((_QWORD *)this + 70) = 0x8000000000000000;
    *((_DWORD *)this + 130) = 3;
    *((_QWORD *)this + 64) = v7;
    return;
  }
  v259 = *((unsigned __int8 *)this + 296);
  if (v198 != 2)
  {
    if (!*((_BYTE *)this + 296))
      goto LABEL_121;
    if (*((double *)this + 33) > 0.0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v260, v261, v262, v263, v264, v265, v266, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
      v296 = *((_QWORD *)this + 67);
      v297 = *((_QWORD *)this + 47);
      v298 = 0x7FFFFFFFFFFFFFFFLL;
      if (v297 != 0x7FFFFFFFFFFFFFFFLL && v296 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v298 = 0x8000000000000000;
        v299 = v296 == 0x8000000000000000 || v297 == 0x8000000000000000;
        v300 = v297 + v296;
        if (!v299)
          v298 = v300;
      }
      if (!*((_BYTE *)this + 296))
        goto LABEL_121;
      v301 = llround(*((double *)this + 33) * (double)v296);
      if (v301 >= 60000000)
        v301 = 60000000;
      *((_QWORD *)this + 66) = v298;
      *((_QWORD *)this + 67) = v301;
      *((_QWORD *)this + 68) = v7;
    }
    v259 = 1;
  }
  *((_QWORD *)this + 69) = 0x8000000000000000;
  *((_QWORD *)this + 70) = 0x8000000000000000;
  v258 = 2;
LABEL_553:
  *((_DWORD *)this + 130) = v258;
  *((_QWORD *)this + 64) = v7;
  v302 = *((_QWORD *)this + 59);
  if ((unint64_t)(v302 - 0x7FFFFFFFFFFFFFFFLL) < 2)
  {
    if (!v259)
      goto LABEL_121;
    v303 = *((_QWORD *)this + 47);
LABEL_561:
    v306 = llround(*((double *)this + 29) * (double)*((uint64_t *)this + 39));
    if (v306 <= 5000)
      v306 = 5000;
    *((_QWORD *)this + 59) = v303;
    *((_QWORD *)this + 60) = v306;
    return;
  }
  if (!v259)
    goto LABEL_121;
  v304 = *((_QWORD *)this + 30);
  if (v304 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v305 = v304 + v302;
    if (v304 != 0x8000000000000000)
      v304 = v305;
    v303 = *((_QWORD *)this + 47);
    if (v304 < v303)
      goto LABEL_561;
  }
}

uint64_t webrtc::LossBasedBweV2::GetAverageReportedByteLossRatio(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;

  v1 = *(_DWORD *)(this + 320);
  if (v1 >= 1)
  {
    v2 = *(_QWORD *)(this + 328);
    v3 = *(_QWORD *)(this + 336);
    if (v2 != v3)
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = *(_DWORD *)(v2 + 40);
        if (v6 != -1)
        {
          v7 = v1 + ~v6;
          v8 = *(_QWORD *)(this + 424);
          if (v7 >= (*(_QWORD *)(this + 432) - v8) >> 3)
          {
            __break(1u);
            return this;
          }
          v9 = *(double *)(v8 + 8 * v7);
          v10 = llround(v9 * (double)*(uint64_t *)(v2 + 24));
          v11 = v10 == 0x8000000000000000 || v4 == 0x8000000000000000;
          v12 = v10 + v4;
          if (v11)
            v12 = 0x8000000000000000;
          if (v10 == 0x7FFFFFFFFFFFFFFFLL)
            v13 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v4 == 0x7FFFFFFFFFFFFFFFLL)
            v4 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v4 = v13;
          if (v5 == 0x7FFFFFFFFFFFFFFFLL
            || (v14 = llround(v9 * (double)*(uint64_t *)(v2 + 32)), v14 == 0x7FFFFFFFFFFFFFFFLL))
          {
            v5 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v15 = v14 == 0x8000000000000000 || v5 == 0x8000000000000000;
            v5 += v14;
            if (v15)
              v5 = 0x8000000000000000;
          }
        }
        v2 += 48;
      }
      while (v2 != v3);
    }
  }
  return this;
}

void webrtc::LossBasedBweV2::GetDerivatives(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  BOOL v21;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = *(_QWORD *)(a1 + 328);
  v3 = *(_QWORD *)(a1 + 336);
  if (v2 == v3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_35:
      rtc::webrtc_logging_impl::Log("\r\t\a\t", v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
  }
  else
  {
    v6 = 0.0;
    v7 = 0.0;
    do
    {
      if (*(_DWORD *)(v2 + 40) != -1)
      {
        v14 = *(_DWORD *)(a1 + 320) + ~*(_DWORD *)(v2 + 40);
        v15 = *(_QWORD *)(a1 + 448);
        if (v14 >= (*(_QWORD *)(a1 + 456) - v15) >> 3 || !*(_BYTE *)(a1 + 296))
        {
          __break(1u);
          return;
        }
        v16 = *(double *)(v15 + 8 * v14);
        if (*(_BYTE *)(a1 + 272))
        {
          v18 = *(_QWORD *)(v2 + 24);
          v17 = *(_QWORD *)(v2 + 32);
          v19 = (double)v17 / 1000.0;
          v21 = v18 == 0x7FFFFFFFFFFFFFFFLL || v17 == 0x8000000000000000;
          if (v17 == 0x7FFFFFFFFFFFFFFFLL || v18 == 0x8000000000000000)
            v23 = 0x8000000000000000;
          else
            v23 = v18 - v17;
          if (v21)
            v23 = 0x7FFFFFFFFFFFFFFFLL;
          v24 = 1.0 - v13;
          v6 = v6 + v16 * (v19 / v13 + (double)v23 / -1000.0 / (1.0 - v13));
          v25 = v13 * v13;
          if (v17 == 0x7FFFFFFFFFFFFFFFLL || v18 == 0x8000000000000000)
            v27 = 0x8000000000000000;
          else
            v27 = v18 - v17;
          if (v21)
            v27 = 0x7FFFFFFFFFFFFFFFLL;
          v11 = v19 / v25;
          v12 = (double)v27 / 1000.0 / (v24 * v24);
        }
        else
        {
          v8 = (double)*(int *)(v2 + 4);
          v9 = (double)*(int *)(v2 + 8);
          v10 = 1.0 - v13;
          v6 = v6 + v16 * (v8 / v13 - v9 / (1.0 - v13));
          v11 = v8 / (v13 * v13);
          v12 = v9 / (v10 * v10);
        }
        v7 = v7 - v16 * (v11 + v12);
      }
      v2 += 48;
    }
    while (v2 != v3);
    if (v7 >= 0.0 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      goto LABEL_35;
  }
}

void webrtc::`anonymous namespace'::GetLossProbability(uint64_t a1, uint64_t a2, double a3)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  char v28;

  v5 = a3 >= 0.0 && a3 <= 1.0;
  if (!v5 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\a", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
  if ((unint64_t)(a2 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
  {
    if ((unint64_t)(a1 + 0x7FFFFFFFFFFFFFFFLL) < 0xFFFFFFFFFFFFFFFELL)
      return;
    goto LABEL_14;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    webrtc::ToString(a2, (char *)__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
    if (v28 < 0)
      operator delete(__p[0]);
  }
  if ((unint64_t)(a1 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
  {
LABEL_14:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      webrtc::ToString(a1, (char *)__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc");
      if (v28 < 0)
        operator delete(__p[0]);
    }
  }
}

void std::vector<double>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 > (v4 - (uint64_t)v5) >> 3)
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (!(v10 >> 61))
    {
      v11 = v4 - (_QWORD)v7;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v15 = &v13[8 * v9];
      v16 = 8 * a2;
      v17 = &v15[8 * a2];
      v18 = v15;
      do
      {
        if (!v18)
          goto LABEL_31;
        *(_QWORD *)v18 = 0;
        v18 += 8;
        v16 -= 8;
      }
      while (v16);
      if (v5 != v7)
      {
        v19 = v5 - v7 - 8;
        if (v19 < 0x58)
          goto LABEL_36;
        if ((unint64_t)(v5 - &v13[v8]) < 0x20)
          goto LABEL_36;
        v20 = (v19 >> 3) + 1;
        v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        v6 = &v5[-v21];
        v15 -= v21;
        v22 = &v13[8 * v9 - 16];
        v23 = v5 - 16;
        v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *(_OWORD *)v23;
          *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v22 = v25;
          v22 -= 32;
          v23 -= 32;
          v24 -= 4;
        }
        while (v24);
        if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_36:
          do
          {
            v26 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *((_QWORD *)v15 - 1) = v26;
            v15 -= 8;
          }
          while (v6 != v7);
        }
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v17;
      *(_QWORD *)(a1 + 16) = &v13[8 * v12];
      if (v7)
        operator delete(v7);
      return;
    }
LABEL_32:
    abort();
  }
  if (!a2)
    goto LABEL_16;
  v14 = 8 * a2;
  do
  {
    if (!v6)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    *(_QWORD *)v6 = 0;
    v6 += 8;
    v14 -= 8;
  }
  while (v14);
  v6 = &v5[8 * a2];
LABEL_16:
  *(_QWORD *)(a1 + 8) = v6;
}

void webrtc::rtcp::LossNotification::~LossNotification(webrtc::rtcp::LossNotification *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::rtcp::LossNotification::BlockLength(webrtc::rtcp::LossNotification *this)
{
  return 20;
}

uint64_t webrtc::rtcp::LossNotification::Create(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char v20;
  _BYTE *v21;

  v12 = *a3;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + v12 <= a4)
  {
LABEL_4:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    *(_BYTE *)(a2 + *a3) = -113;
    *(_BYTE *)(*a3 + a2 + 1) = -50;
    *(_BYTE *)(*a3 + a2 + 2) = (unint64_t)(v13 - 4) >> 10;
    *(_BYTE *)(*a3 + a2 + 3) = (unint64_t)(v13 - 4) >> 2;
    v14 = *a3 + 4;
    *a3 = v14;
    v15 = (_DWORD *)(a2 + v14);
    *v15 = bswap32(*(_DWORD *)(a1 + 8));
    v15[1] = bswap32(*(_DWORD *)(a1 + 12));
    v16 = *a3 + 8;
    *a3 = v16;
    *(_DWORD *)(a2 + v16) = 1179930188;
    v17 = *a3 + 4;
    *a3 = v17;
    *(_WORD *)(a2 + v17) = bswap32(*(unsigned __int16 *)(a1 + 16)) >> 16;
    v18 = *a3 + 2;
    *a3 = v18;
    v19 = *(unsigned __int16 *)(a1 + 18) - *(unsigned __int16 *)(a1 + 16);
    v20 = *(_BYTE *)(a1 + 20);
    v21 = (_BYTE *)(a2 + v18);
    *v21 = v19 >> 7;
    v21[1] = v20 | (2 * v19);
    *a3 += 2;
    return 1;
  }
  else
  {
    while (*a3)
    {
      a6(a5, a2);
      *a3 = 0;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) <= a4)
        goto LABEL_4;
    }
    return 0;
  }
}

void webrtc::LossNotificationController::OnReceivedPacket(webrtc::LossNotificationController *this, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  _BOOL4 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  _QWORD *v31;

  if (*((_BYTE *)this + 34))
  {
    v6 = *((unsigned __int16 *)this + 16);
    v7 = a2 >= v6;
    v8 = a2 - v6;
    if (!v8)
      return;
    v9 = v8 != 0 && v7;
    v10 = v8 == 0x8000 ? v9 : (v8 & 0x8000u) == 0;
    if (v10 != 1)
      return;
  }
  webrtc::LossNotificationController::DiscardOldInformation(this);
  if (!*((_BYTE *)this + 34))
  {
    *((_WORD *)this + 16) = a2;
    *((_BYTE *)this + 34) = 1;
    if (a3)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a3 + 8);
      if (!*((_BYTE *)this + 24))
        goto LABEL_17;
      goto LABEL_16;
    }
LABEL_21:
    if (*((_BYTE *)this + 36))
      return;
LABEL_22:
    *((_BYTE *)this + 36) = 0;
    if (*((_BYTE *)this + 40))
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((unsigned __int16 *)this + 19), a2, 0, 1);
      return;
    }
LABEL_44:
    (***(void (****)(_QWORD))this)(*(_QWORD *)this);
    return;
  }
  v11 = *((_WORD *)this + 16) + 1;
  v12 = a2 != v11;
  *((_WORD *)this + 16) = a2;
  *((_BYTE *)this + 34) = 1;
  if (!a3)
  {
    if ((_DWORD)a2 != v11)
      goto LABEL_22;
    goto LABEL_21;
  }
  v13 = *(_QWORD *)(a3 + 8);
  if (!*((_BYTE *)this + 24))
    goto LABEL_17;
LABEL_16:
  if (v13 <= *((_QWORD *)this + 2))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/loss_notification_controller.cc");
    return;
  }
LABEL_17:
  *((_QWORD *)this + 2) = v13;
  *((_BYTE *)this + 24) = 1;
  if (*(_BYTE *)a3)
  {
    v15 = (_QWORD *)*((_QWORD *)this + 7);
    v14 = (_QWORD *)((char *)this + 56);
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(v14 - 1), v15);
    *(v14 - 1) = v14;
    *v14 = 0;
    v14[1] = 0;
    *((_BYTE *)v14 - 20) = 1;
    return;
  }
  v23 = *(_QWORD *)(a3 + 24);
  if (v23)
  {
    if (*((_QWORD *)this + 7))
    {
      v24 = *(uint64_t **)(a3 + 16);
      v25 = &v24[v23];
      while (1)
      {
        v26 = *v24;
        v27 = (_QWORD *)((char *)this + 56);
        v28 = (_QWORD *)*((_QWORD *)this + 7);
        do
        {
          v29 = v28[4];
          v30 = v29 < v26;
          if (v29 >= v26)
            v31 = v28;
          else
            v31 = v28 + 1;
          if (!v30)
            v27 = v28;
          v28 = (_QWORD *)*v31;
        }
        while (*v31);
        if (v27 == (_QWORD *)((char *)this + 56) || v26 < v27[4])
          break;
        if (++v24 == v25)
          goto LABEL_39;
      }
    }
    *((_BYTE *)this + 36) = 0;
LABEL_42:
    if (*((_BYTE *)this + 40))
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((unsigned __int16 *)this + 19), a2);
      return;
    }
    goto LABEL_44;
  }
LABEL_39:
  *((_BYTE *)this + 36) = 1;
  if (v12)
    goto LABEL_42;
}

void webrtc::LossNotificationController::DiscardOldInformation(webrtc::LossNotificationController *this)
{
  unint64_t v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v1 = *((_QWORD *)this + 8);
  if (v1 >= 0x1771)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 6);
    v4 = v3;
    v5 = v1 - 3000;
    if (v5 >= 0)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v4[2];
            v9 = *v8 == (_QWORD)v4;
            v4 = v8;
          }
          while (!v9);
        }
        v4 = v8;
      }
      while (v5-- > 1);
    }
    else
    {
      do
      {
        v11 = (uint64_t *)*v4;
        if (*v4)
        {
          do
          {
            v8 = v11;
            v11 = (uint64_t *)v11[1];
          }
          while (v11);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v4[2];
            v9 = *v8 == (_QWORD)v4;
            v4 = v8;
          }
          while (v9);
        }
        v4 = v8;
      }
      while (!__CFADD__(v5++, 1));
    }
    if (v3 != v8)
    {
      do
      {
        v13 = (uint64_t *)v3[1];
        v14 = v3;
        if (v13)
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v14[2];
            v9 = *v15 == (_QWORD)v14;
            v14 = v15;
          }
          while (!v9);
        }
        if (*((uint64_t **)this + 6) == v3)
          *((_QWORD *)this + 6) = v15;
        v12 = (uint64_t *)*((_QWORD *)this + 7);
        --*((_QWORD *)this + 8);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v12, v3);
        operator delete(v3);
        v3 = v15;
      }
      while (v15 != v8);
    }
  }
}

void webrtc::LossNotificationController::OnAssembledFrame(uint64_t a1, __int16 a2, uint64_t a3, char a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t *v13;
  uint64_t **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t **v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;

  webrtc::LossNotificationController::DiscardOldInformation((webrtc::LossNotificationController *)a1);
  if ((a4 & 1) == 0)
  {
    if (a6)
      v12 = a5;
    else
      v12 = 0;
    v14 = (uint64_t **)(a1 + 56);
    v13 = *(uint64_t **)(a1 + 56);
    if (a6)
    {
      if (v13)
      {
        v15 = &v12[a6];
        while (1)
        {
          v16 = *a5;
          v17 = (uint64_t **)(a1 + 56);
          v18 = *(_QWORD **)(a1 + 56);
          do
          {
            v19 = v18[4];
            v20 = v19 < v16;
            if (v19 >= v16)
              v21 = v18;
            else
              v21 = v18 + 1;
            if (!v20)
              v17 = (uint64_t **)v18;
            v18 = (_QWORD *)*v21;
          }
          while (*v21);
          if (v17 == v14 || v16 < (uint64_t)v17[4])
            break;
          if (++a5 == v15)
            goto LABEL_18;
        }
      }
    }
    else
    {
LABEL_18:
      *(_WORD *)(a1 + 38) = a2;
      *(_BYTE *)(a1 + 40) = 1;
      v22 = (uint64_t **)(a1 + 56);
      if (v13)
      {
        while (1)
        {
          while (1)
          {
            v22 = (uint64_t **)v13;
            v23 = v13[4];
            if (v23 <= a3)
              break;
            v13 = *v22;
            v14 = v22;
            if (!*v22)
              goto LABEL_25;
          }
          if (v23 >= a3)
            break;
          v13 = v22[1];
          if (!v13)
          {
            v14 = v22 + 1;
            goto LABEL_25;
          }
        }
      }
      else
      {
LABEL_25:
        v24 = (uint64_t *)operator new(0x28uLL);
        v24[4] = a3;
        *v24 = 0;
        v24[1] = 0;
        v24[2] = (uint64_t)v22;
        *v14 = v24;
        v25 = **(_QWORD **)(a1 + 48);
        if (v25)
        {
          *(_QWORD *)(a1 + 48) = v25;
          v26 = *v14;
        }
        else
        {
          v26 = v24;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v26);
        ++*(_QWORD *)(a1 + 64);
      }
    }
  }
}

uint64_t webrtc::LoudnessHistogram::InsertNewestEntryAndUpdate(uint64_t this, int a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  v3 = *(_DWORD *)(this + 656);
  if (v3 < 1)
    goto LABEL_17;
  v4 = *(_DWORD *)(this + 660);
  if (a2 > 204)
  {
    if (v4 > 7)
      goto LABEL_15;
    v12 = v4 + 1;
  }
  else
  {
    if ((v4 - 1) <= 6)
    {
      if (*(int *)(this + 648) > 0)
        v3 = *(_DWORD *)(this + 648);
      v5 = *(_QWORD *)(this + 632);
      v6 = *(_QWORD *)(this + 640);
      do
      {
        v9 = 4 * (v3 - 1);
        v10 = *(int *)(v5 + v9);
        v11 = this + 8 * *(int *)(v6 + v9);
        *(_QWORD *)(v11 + 16) -= v10;
        *(_QWORD *)(this + 8) -= v10;
        *(_DWORD *)(v5 + v9) = 0;
        v8 = __OFSUB__(v3--, 1);
        if ((v3 < 0) ^ v8 | (v3 == 0))
          v3 = *(_DWORD *)(this + 656);
        v7 = *(_DWORD *)(this + 660);
        v8 = __OFSUB__(v7--, 1);
        *(_DWORD *)(this + 660) = v7;
      }
      while (!((v7 < 0) ^ v8 | (v7 == 0)));
    }
    v12 = 0;
    a2 = 0;
  }
  *(_DWORD *)(this + 660) = v12;
LABEL_15:
  *(_DWORD *)(*(_QWORD *)(this + 632) + 4 * *(int *)(this + 648)) = a2;
  *(_DWORD *)(*(_QWORD *)(this + 640) + 4 * *(int *)(this + 648)) = a3;
  v13 = *(_DWORD *)(this + 648) + 1;
  *(_DWORD *)(this + 648) = v13;
  if (v13 >= *(_DWORD *)(this + 656))
    *(_QWORD *)(this + 648) = 0x100000000;
LABEL_17:
  v14 = *(_DWORD *)this;
  if (*(int *)this > -2)
    ++v14;
  *(_DWORD *)this = v14;
  *(_QWORD *)(this + 8 * a3 + 16) += a2;
  *(_QWORD *)(this + 8) += a2;
  return this;
}

float webrtc::rnn_vad::ComputeAndPostProcessLpcCoefficients(float *a1, uint64_t a2, float *a3, double a4, int8x16_t a5, double a6, double a7, double a8, int8x16_t a9, float32x4_t a10)
{
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  unint64_t v17;
  float *v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  float v22;
  float v23;
  unint64_t v24;
  float *v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  unint64_t v36;
  float *v37;
  unint64_t v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  float32x4_t v42;
  float v43;
  float v44;
  float v45;
  float *v46;
  unint64_t v47;
  float *v48;
  unint64_t v49;
  uint64_t v50;
  float *v51;
  uint64_t v52;
  float32x4_t v53;
  float v54;
  float v55;
  float v56;
  float *v57;
  float32x4_t *v58;
  unint64_t v59;
  float v60;
  float *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  float result;
  float v69;
  int8x16_t v70;
  unsigned __int32 v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  int8x16_t v77;
  float v78;
  float v79;
  int8x16_t v80;
  unsigned __int32 v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;

  if (a2)
    v13 = a1;
  else
    v13 = 0;
  v14 = &v13[a2];
  v15 = 0.0;
  v16 = 0.0;
  if (a2)
  {
    v17 = (char *)v14 - (char *)a1 - 4;
    if (v17 < 4)
    {
      v18 = a1;
      do
      {
LABEL_10:
        v22 = *v18++;
        v16 = v16 + (float)(v22 * v22);
      }
      while (v18 != v14);
      goto LABEL_11;
    }
    v19 = (v17 >> 2) + 1;
    v18 = &a1[v19 & 0x7FFFFFFFFFFFFFFELL];
    v20 = a1 + 1;
    v21 = v19 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v16 = (float)(v16 + (float)(*(v20 - 1) * *(v20 - 1))) + (float)(*v20 * *v20);
      v20 += 2;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFFELL))
      goto LABEL_10;
  }
LABEL_11:
  if (v14 - 1 == v13)
    goto LABEL_18;
  v23 = *v13;
  v24 = (char *)&v13[a2] - (char *)a1 - 8;
  if (v24 < 4)
  {
    v15 = 0.0;
    v25 = a1;
    do
    {
LABEL_17:
      v32 = v25[1];
      ++v25;
      v15 = v15 + (float)(v23 * v32);
      v23 = v32;
    }
    while (v25 != v14 - 1);
    goto LABEL_18;
  }
  v26 = (v24 >> 2) + 1;
  v25 = &a1[v26 & 0x7FFFFFFFFFFFFFFELL];
  v27 = a1 + 2;
  v15 = 0.0;
  v28 = v26 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v29 = *(v27 - 1);
    v30 = v23 * v29;
    v31 = *v27;
    v27 += 2;
    v23 = v31;
    v15 = (float)(v15 + v30) + (float)(v29 * v31);
    v28 -= 2;
  }
  while (v28);
  if (v26 != (v26 & 0x7FFFFFFFFFFFFFFELL))
    goto LABEL_17;
LABEL_18:
  v33 = 0.0;
  v34 = 0.0;
  if (v14 - 2 == v13)
    goto LABEL_25;
  v35 = v13 + 2;
  v36 = (a2 + 0x3FFFFFFFFFFFFFFDLL) & 0x3FFFFFFFFFFFFFFFLL;
  if (v36 < 7)
  {
    v37 = v13;
    do
    {
LABEL_24:
      v43 = *v37++;
      v44 = v43;
      v45 = *v35++;
      v34 = v34 + (float)(v44 * v45);
    }
    while (v37 != v14 - 2);
    goto LABEL_25;
  }
  v38 = v36 + 1;
  v39 = (v36 + 1) & 0x7FFFFFFFFFFFFFF8;
  v35 += v39;
  v37 = &v13[v39];
  v40 = v13 + 4;
  v41 = v39;
  do
  {
    a10 = *(float32x4_t *)(v40 - 2);
    v42 = vmulq_f32(*(float32x4_t *)(v40 - 4), a10);
    a9 = (int8x16_t)vmulq_f32(*(float32x4_t *)v40, *(float32x4_t *)(v40 + 2));
    v34 = (float)((float)((float)((float)((float)((float)((float)(v34 + v42.f32[0]) + v42.f32[1]) + v42.f32[2])
                                        + v42.f32[3])
                                + *(float *)a9.i32)
                        + *(float *)&a9.i32[1])
                + *(float *)&a9.i32[2])
        + *(float *)&a9.i32[3];
    v40 += 8;
    v41 -= 8;
  }
  while (v41);
  if (v38 != v39)
    goto LABEL_24;
LABEL_25:
  if (v14 - 3 == v13)
    goto LABEL_32;
  v46 = v13 + 3;
  v47 = (a2 + 0x3FFFFFFFFFFFFFFCLL) & 0x3FFFFFFFFFFFFFFFLL;
  if (v47 < 7)
  {
    v33 = 0.0;
    v48 = v13;
    do
    {
LABEL_31:
      v54 = *v48++;
      v55 = v54;
      v56 = *v46++;
      v33 = v33 + (float)(v55 * v56);
    }
    while (v48 != v14 - 3);
    goto LABEL_32;
  }
  v49 = v47 + 1;
  v50 = (v47 + 1) & 0x7FFFFFFFFFFFFFF8;
  v46 += v50;
  v48 = &v13[v50];
  v51 = v13 + 4;
  v33 = 0.0;
  v52 = v50;
  do
  {
    a10 = *(float32x4_t *)(v51 - 1);
    v53 = vmulq_f32(*(float32x4_t *)(v51 - 4), a10);
    a9 = (int8x16_t)vmulq_f32(*(float32x4_t *)v51, *(float32x4_t *)(v51 + 3));
    v33 = (float)((float)((float)((float)((float)((float)((float)(v33 + v53.f32[0]) + v53.f32[1]) + v53.f32[2])
                                        + v53.f32[3])
                                + *(float *)a9.i32)
                        + *(float *)&a9.i32[1])
                + *(float *)&a9.i32[2])
        + *(float *)&a9.i32[3];
    v51 += 8;
    v52 -= 8;
  }
  while (v52);
  if (v49 != v50)
    goto LABEL_31;
LABEL_32:
  v57 = v14 - 4;
  if (v57 == v13)
  {
    v60 = 0.0;
    goto LABEL_40;
  }
  v58 = (float32x4_t *)(v13 + 4);
  v59 = (a2 + 0x3FFFFFFFFFFFFFFBLL) & 0x3FFFFFFFFFFFFFFFLL;
  v60 = 0.0;
  if (v59 < 7)
  {
    v61 = v13 + 4;
    do
    {
LABEL_39:
      v65 = *v13++;
      v66 = v65;
      v67 = *v61++;
      v60 = v60 + (float)(v66 * v67);
    }
    while (v13 != v57);
    goto LABEL_40;
  }
  v62 = v59 + 1;
  v63 = (v59 + 1) & 0x7FFFFFFFFFFFFFF8;
  v61 = &v58->f32[v63];
  v13 += v63;
  v64 = v63;
  do
  {
    a9 = (int8x16_t)vmulq_f32(v58[-1], *v58);
    a10 = vmulq_f32(*v58, v58[1]);
    v60 = (float)((float)((float)((float)((float)((float)((float)(v60 + *(float *)a9.i32) + *(float *)&a9.i32[1])
                                                + *(float *)&a9.i32[2])
                                        + *(float *)&a9.i32[3])
                                + a10.f32[0])
                        + a10.f32[1])
                + a10.f32[2])
        + a10.f32[3];
    v58 += 2;
    v64 -= 8;
  }
  while (v64);
  if (v62 != v63)
    goto LABEL_39;
LABEL_40:
  if (v16 == 0.0)
  {
    bzero(a3, 0x14uLL);
    return result;
  }
  a10.f32[0] = v16 * 1.0001;
  *(float *)a9.i32 = v15 + (float)(v15 * -0.000064);
  v69 = 0.0;
  v10.i32[0] = 897988541;
  v70.i64[0] = 0x8000000080000000;
  v70.i64[1] = 0x8000000080000000;
  v71 = vbslq_s8(v70, v10, (int8x16_t)a10).u32[0];
  if (fabsf(v16 * 1.0001) >= 0.000001)
    v72 = v16 * 1.0001;
  else
    v72 = *(float *)&v71;
  v73 = (float)(*(float *)a9.i32 + 0.0) / (float)-v72;
  *(float *)v10.i32 = v72 + (float)((float)-(float)(v73 * v73) * v72);
  v74 = a10.f32[0] * 0.001;
  if (*(float *)v10.i32 < (float)(a10.f32[0] * 0.001))
  {
    v76 = 0.0;
  }
  else
  {
    v75 = v34 + (float)(v34 * -0.000256);
    v76 = 0.0;
    v11.i32[0] = 897988541;
    v77 = vbslq_s8(v70, v11, v10);
    if (fabsf(*(float *)v10.i32) >= 0.000001)
      v77.i32[0] = v10.i32[0];
    v69 = (float)((float)((float)(v73 * *(float *)a9.i32) + 0.0) + v75) / (float)-*(float *)v77.i32;
    v73 = v73 + (float)(v69 * v73);
    *(float *)v77.i32 = *(float *)v77.i32 + (float)((float)-(float)(v69 * v69) * *(float *)v77.i32);
    if (*(float *)v77.i32 >= v74)
    {
      v78 = v33 + (float)(v33 * -0.000576);
      v79 = 0.0;
      v12.i32[0] = 897988541;
      v80.i64[0] = 0x8000000080000000;
      v80.i64[1] = 0x8000000080000000;
      v81 = vbslq_s8(v80, v12, v77).u32[0];
      if (fabsf(*(float *)v77.i32) >= 0.000001)
        v82 = *(float *)v77.i32;
      else
        v82 = *(float *)&v81;
      v76 = (float)((float)((float)((float)(v73 * v75) + 0.0) + (float)(v69 * *(float *)a9.i32)) + v78) / (float)-v82;
      v83 = v73 + (float)(v76 * v69);
      v69 = v69 + (float)(v76 * v73);
      *(float *)a5.i32 = v82 + (float)((float)-(float)(v76 * v76) * v82);
      if (*(float *)a5.i32 < v74)
      {
        v73 = v83;
      }
      else
      {
        v84 = (float)((float)((float)((float)(v83 * v78) + 0.0) + (float)(v69 * v75)) + (float)(v76 * *(float *)a9.i32))
            + (float)(v60 + (float)(v60 * -0.001024));
        a9.i32[0] = 897988541;
        LODWORD(v85) = vbslq_s8(v80, a9, a5).u32[0];
        if (fabsf(*(float *)a5.i32) < 0.000001)
          *(float *)a5.i32 = v85;
        v86 = v84 / (float)-*(float *)a5.i32;
        v73 = v83 + (float)(v86 * v76);
        v76 = v76 + (float)(v86 * v83);
        v69 = v69 + (float)(v86 * v69);
        v79 = v86 * 0.6561;
      }
      goto LABEL_58;
    }
  }
  v79 = 0.0;
LABEL_58:
  v87 = v73 * 0.9;
  v88 = v69 * 0.81;
  v89 = v76 * 0.729;
  *a3 = v87 + 0.8;
  a3[1] = v88 + (float)(v87 * 0.8);
  a3[2] = v89 + (float)(v88 * 0.8);
  a3[3] = v79 + (float)(v89 * 0.8);
  result = v79 * 0.8;
  a3[4] = v79 * 0.8;
  return result;
}

float32_t webrtc::rnn_vad::ComputeLpResidual(float *a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  float32x4_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v11;
  BOOL v12;
  const float *v13;
  float32x4_t v14;
  const float *v15;
  float32x4_t v16;
  const float *v17;
  float32x4_t v18;
  const float *v19;
  float32x4_t v20;
  float32x4_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  float *v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;

  *(_DWORD *)a4 = *(_DWORD *)a2;
  *(float *)(a4 + 4) = *(float *)(a2 + 4) + (float)(*(float *)a2 * *a1);
  *(float *)(a4 + 8) = (float)(*(float *)(a2 + 8) + (float)(*(float *)(a2 + 4) * *a1)) + (float)(*(float *)a2 * a1[1]);
  *(float *)(a4 + 12) = (float)((float)(*(float *)(a2 + 12) + (float)(*(float *)(a2 + 8) * *a1))
                              + (float)(*(float *)(a2 + 4) * a1[1]))
                      + (float)(*(float *)a2 * a1[2]);
  v5.f32[0] = (float)((float)((float)(*(float *)(a2 + 16) + (float)(*(float *)(a2 + 12) * *a1))
                            + (float)(*(float *)(a2 + 8) * a1[1]))
                    + (float)(*(float *)(a2 + 4) * a1[2]))
            + (float)(*(float *)a2 * a1[3]);
  *(_DWORD *)(a4 + 16) = v5.i32[0];
  if (a5 >= 6)
  {
    v6 = a5 - 5;
    if (a5 - 5 < 4)
    {
      v7 = 5;
      v8 = a2;
LABEL_19:
      v24 = a5 - v7;
      v25 = 4 * v7;
      v26 = (_DWORD *)(a4 + 4 * v7);
      v27 = (float *)(a2 + v25);
      v28 = (float *)(v8 + 8);
      v29 = (float *)(v8 + 8);
      do
      {
        v30 = *v27++;
        v31 = v30 + (float)(v28[2] * *a1);
        v32 = v29[1];
        ++v29;
        v5.f32[0] = (float)((float)((float)(v31 + (float)(v32 * a1[1])) + (float)(*v28 * a1[2]))
                          + (float)(*(v28 - 1) * a1[3]))
                  + (float)(*(v28 - 2) * a1[4]);
        *v26++ = v5.i32[0];
        v28 = v29;
        --v24;
      }
      while (v24);
      return v5.f32[0];
    }
    v9 = a4 + 4 * a5;
    v11 = a4 < (unint64_t)a1 && v9 > (unint64_t)a1;
    v12 = v9 <= a2 || a4 + 20 >= a2 + 4 * a5;
    v7 = 5;
    v8 = a2;
    if (!v12)
      goto LABEL_19;
    if (v11)
      goto LABEL_19;
    v7 = (v6 & 0xFFFFFFFFFFFFFFFCLL) + 5;
    v8 = a2 + 4 * (v6 & 0xFFFFFFFFFFFFFFFCLL);
    v13 = a1;
    v5 = vld1q_dup_f32(v13++);
    v14 = vld1q_dup_f32(v13);
    v15 = a1 + 2;
    v16 = vld1q_dup_f32(v15);
    v17 = a1 + 3;
    v18 = vld1q_dup_f32(v17);
    v19 = a1 + 4;
    v20 = vld1q_dup_f32(v19);
    v21 = (float32x4_t *)(a4 + 20);
    v22 = a2 + 12;
    v23 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      *v21++ = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(*(float32x4_t *)(v22 + 8), v5, *(float32x4_t *)(v22 + 4)), v14, *(float32x4_t *)v22), v16, *(float32x4_t *)(v22 - 4)), v18, *(float32x4_t *)(v22 - 8)), v20, *(float32x4_t *)(v22 - 12));
      v22 += 16;
      v23 -= 4;
    }
    while (v23);
    if (v6 != (v6 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
  return v5.f32[0];
}

void rtc::`anonymous namespace'::MacIfAddrsConverter::~MacIfAddrsConverter(rtc::_anonymous_namespace_::MacIfAddrsConverter *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24C0B6988;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24C0B6988;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::`anonymous namespace'::MacIfAddrsConverter::ConvertNativeAttributesToIPAttributes(rtc::_anonymous_namespace_::MacIfAddrsConverter *this, const ifaddrs *a2, int *a3)
{
  int v3;
  sockaddr *ifa_addr;
  char *ifa_name;
  char v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char __dst[280];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(*((_QWORD *)this + 1) + 8);
  if (v3 < 0)
    return 0;
  ifa_addr = a2->ifa_addr;
  ifa_name = a2->ifa_name;
  v17 = 0;
  memset(&__dst[8], 0, 272);
  strncpy(__dst, ifa_name, 0xFuLL);
  memcpy(&__dst[16], ifa_addr, ifa_addr->sa_len);
  if (ioctl(v3, 0xC1206949uLL, __dst) < 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      __error();
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/mac_ifaddrs_converter.cc");
    }
    return 0;
  }
  v7 = __dst[16];
  if ((__dst[16] & 0xF) != 0)
    return 0;
  if (__dst[16] < 0)
    *a3 |= 1u;
  if ((v7 & 0x10) != 0)
    *a3 |= 2u;
  return 1;
}

void rtc::`anonymous namespace'::IPv6AttributesGetter::~IPv6AttributesGetter(rtc::_anonymous_namespace_::IPv6AttributesGetter *this)
{
  int v1;

  *(_QWORD *)this = off_24C0B69B8;
  v1 = *((_DWORD *)this + 2);
  if ((v1 & 0x80000000) == 0)
    close(v1);
}

{
  int v1;

  *(_QWORD *)this = off_24C0B69B8;
  v1 = *((_DWORD *)this + 2);
  if ((v1 & 0x80000000) == 0)
    close(v1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t absl::EqualsIgnoreCase(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  int v5;
  int v6;
  int v7;
  int v8;

  if (a2 != a4)
    return 0;
  if (!a2)
    return 1;
  while (1)
  {
    v6 = *a1++;
    v5 = v6;
    v8 = *a3++;
    v7 = v8;
    if (v5 != v8)
    {
      if ((v5 - 65) < 0x1A)
        LOBYTE(v5) = v5 + 32;
      if ((v7 - 65) < 0x1A)
        LOBYTE(v7) = v7 + 32;
      if (v5 != v7)
        break;
    }
    if (!--a2)
      return 1;
  }
  return 0;
}

uint64_t webrtc::MatchedFilter::MatchedFilter(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, float a9, float a10, float a11, float a12)
{
  uint64_t v14;
  unint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  char **v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  void *v51;
  char *v52;
  char *v53;
  void *v54;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;

  v14 = a5;
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a7 * a4;
  v20 = a5 * a4;
  if (a5 * a4)
  {
    if (v20 >> 62)
      goto LABEL_46;
    v21 = 4 * v20;
    v22 = (char *)operator new(4 * v20);
    bzero(v22, v21);
    v23 = &v22[v21];
    v24 = a6;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (!a6)
      goto LABEL_14;
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v24 = a6;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (!a6)
      goto LABEL_14;
  }
  if (a6 < 0)
    goto LABEL_46;
  v58 = v24;
  v25 = 24 * v24;
  v26 = (char **)operator new(24 * v24);
  *(_QWORD *)(a1 + 32) = v26;
  *(_QWORD *)(a1 + 40) = v26;
  v27 = &v26[3 * v24];
  *(_QWORD *)(a1 + 48) = v27;
  v28 = v23 - v22;
  v56 = a8;
  if (v28)
  {
    if (v28 < 0)
    {
      *v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
      abort();
    }
    v29 = v14;
    v30 = 24 * v58;
    v31 = v26 + 1;
    do
    {
      *v31 = 0;
      v31[1] = 0;
      v32 = (char *)operator new(v28);
      *(v31 - 1) = v32;
      v33 = &v32[4 * (v28 >> 2)];
      v31[1] = v33;
      memcpy(v32, v22, v28);
      *v31 = v33;
      v31 += 3;
      v30 -= 24;
    }
    while (v30);
  }
  else
  {
    v29 = v14;
    bzero(v26, 24 * ((v25 - 24) / 0x18uLL) + 24);
  }
  *(_QWORD *)(a1 + 40) = v27;
  v14 = v29;
  v24 = v58;
  a8 = v56;
LABEL_14:
  if (v22)
    operator delete(v22);
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 113) = 0u;
  *(_DWORD *)(a1 + 168) = -1;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  if (a6)
  {
    if (a6 < 0)
      goto LABEL_46;
    v34 = (char *)operator new(8 * v24);
    *(_QWORD *)(a1 + 176) = v34;
    v35 = &v34[8 * v24];
    *(_QWORD *)(a1 + 192) = v35;
    bzero(v34, 8 * v24);
    *(_QWORD *)(a1 + 184) = v35;
  }
  *(_DWORD *)(a1 + 200) = 0;
  *(float *)(a1 + 204) = a9;
  *(float *)(a1 + 208) = a10;
  *(float *)(a1 + 212) = a11;
  *(float *)(a1 + 216) = a12;
  *(_BYTE *)(a1 + 220) = a8;
  if (a8)
  {
    v36 = *(_QWORD *)(a1 + 16) * v14;
    if (v36 >= 4)
    {
      v37 = (char *)operator new(v36 & 0xFFFFFFFFFFFFFFFCLL);
      memset_pattern16(v37, &memset_pattern_17, v36 & 0xFFFFFFFFFFFFFFFCLL);
      v38 = &v37[v36 & 0xFFFFFFFFFFFFFFFCLL];
      if (a6)
      {
LABEL_22:
        v39 = 3 * v24;
        v40 = operator new(24 * v24);
        v41 = v40;
        v42 = &v40[3 * v24];
        v43 = v38 - v37;
        if (v38 == v37)
        {
          bzero(v40, 24 * ((v39 * 8 - 24) / 0x18uLL) + 24);
          *(_QWORD *)(a1 + 56) = v41;
          *(_QWORD *)(a1 + 64) = v42;
          *(_QWORD *)(a1 + 72) = v42;
          if (!v37)
            goto LABEL_31;
        }
        else
        {
          v57 = &v40[v39];
          v59 = v14;
          if (v43 < 0)
          {
            *v40 = 0;
            v40[1] = 0;
            v40[2] = 0;
            abort();
          }
          v44 = 0;
          v45 = 24 * v24;
          do
          {
            v46 = &v41[v44 / 8];
            v46[1] = 0;
            v46[2] = 0;
            v47 = (char *)operator new(v43);
            *v46 = v47;
            v48 = &v47[4 * (v43 >> 2)];
            v46[2] = v48;
            memcpy(v47, v37, v43);
            v46[1] = v48;
            v44 += 24;
          }
          while (v45 != v44);
          v14 = v59;
          *(_QWORD *)(a1 + 56) = v41;
          *(_QWORD *)(a1 + 64) = v57;
          *(_QWORD *)(a1 + 72) = v57;
          if (!v37)
          {
LABEL_31:
            if (v36 >= 4)
            {
              v49 = (char *)operator new(v36 & 0xFFFFFFFFFFFFFFFCLL);
              bzero(v49, v36 & 0xFFFFFFFFFFFFFFFCLL);
              v50 = &v49[v36 & 0xFFFFFFFFFFFFFFFCLL];
              v51 = *(void **)(a1 + 80);
              if (!v51)
              {
LABEL_36:
                *(_QWORD *)(a1 + 80) = v49;
                *(_QWORD *)(a1 + 88) = v50;
                *(_QWORD *)(a1 + 96) = v50;
                if (!v36)
                {
                  v52 = 0;
                  v53 = 0;
                  v54 = *(void **)(a1 + 104);
                  if (!v54)
                    goto LABEL_40;
                  goto LABEL_39;
                }
                if (!(v36 >> 62))
                {
                  v52 = (char *)operator new(4 * v36);
                  v53 = &v52[4 * v36];
                  bzero(v52, 4 * v36);
                  v54 = *(void **)(a1 + 104);
                  if (!v54)
                  {
LABEL_40:
                    *(_QWORD *)(a1 + 104) = v52;
                    *(_QWORD *)(a1 + 112) = v53;
                    *(_QWORD *)(a1 + 120) = v53;
                    return a1;
                  }
LABEL_39:
                  *(_QWORD *)(a1 + 112) = v54;
                  operator delete(v54);
                  goto LABEL_40;
                }
LABEL_46:
                abort();
              }
            }
            else
            {
              v49 = 0;
              v50 = 0;
              v51 = *(void **)(a1 + 80);
              if (!v51)
                goto LABEL_36;
            }
            *(_QWORD *)(a1 + 88) = v51;
            operator delete(v51);
            v36 = *(_QWORD *)(a1 + 16) * v14;
            goto LABEL_36;
          }
        }
LABEL_30:
        operator delete(v37);
        v36 = *(_QWORD *)(a1 + 16) * v14;
        goto LABEL_31;
      }
    }
    else
    {
      v37 = 0;
      v38 = 0;
      if (a6)
        goto LABEL_22;
    }
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    if (!v37)
      goto LABEL_31;
    goto LABEL_30;
  }
  return a1;
}

void webrtc::MatchedFilter::~MatchedFilter(webrtc::MatchedFilter *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 7);
  if (v5)
  {
    v6 = *((_QWORD *)this + 8);
    v7 = (void *)*((_QWORD *)this + 7);
    if (v6 != v5)
    {
      v8 = *((_QWORD *)this + 8);
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v6 - 16) = v9;
          operator delete(v9);
        }
        v6 = v8;
      }
      while (v8 != v5);
      v7 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v5;
    operator delete(v7);
  }
  v11 = *((_QWORD *)this + 4);
  if (v11)
  {
    v12 = *((_QWORD *)this + 5);
    v13 = (void *)*((_QWORD *)this + 4);
    if (v12 != v11)
    {
      v14 = *((_QWORD *)this + 5);
      do
      {
        v16 = *(void **)(v14 - 24);
        v14 -= 24;
        v15 = v16;
        if (v16)
        {
          *(_QWORD *)(v12 - 16) = v15;
          operator delete(v15);
        }
        v12 = v14;
      }
      while (v14 != v11);
      v13 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v11;
    operator delete(v13);
  }
}

void webrtc::MatchedFilter::Update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, float a6)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float32x4_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float v17;
  float *v18;
  unint64_t v19;
  uint64_t v20;
  float *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  int v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  float32x2_t **v38;
  float32x2_t *v39;
  float32x2_t *v40;
  uint64_t v41;
  float32x2_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  float v56;
  float v57;
  float v58;
  float *v61;
  uint64_t v62;
  unint64_t v63;
  float v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float *v76;
  uint64_t v77;
  unint64_t v78;
  float v79;
  float *v80;
  uint64_t v81;
  float v82;
  float *v83;
  uint64_t v84;
  float v85;
  float v86;
  BOOL v87;
  float32x2_t v88;
  unint64_t v89;
  unint64_t v90;
  float32x2_t *v91;
  unint64_t v92;
  float32x2_t v93;
  float32x2_t v94;
  int8x8_t v95;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  float *v103;
  float *v104;
  float v105;
  float v106;
  float v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  float v120;
  float32x4_t *v121;
  float32x4_t *v122;
  float32x4_t v123;
  unint64_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  webrtc::MatchedFilter *v128;
  int v129;
  int v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unsigned __int8 v143;
  unint64_t v144;
  char v145;
  unint64_t v146;

  v12 = 208;
  if (a5)
    v12 = 212;
  v13 = *(_QWORD **)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40) - (_QWORD)v13;
  if (!v14)
    goto LABEL_179;
  v15 = (unsigned __int128)(v14 * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  if (a4)
  {
    if (a4 == 1)
    {
      v16 = 0;
      v17 = 0.0;
    }
    else
    {
      v16 = a4 & 0xFFFFFFFFFFFFFFFELL;
      v18 = (float *)(a3 + 4);
      v17 = 0.0;
      v19 = a4 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v17 = (float)(v17 + (float)(*(v18 - 1) * *(v18 - 1))) + (float)(*v18 * *v18);
        v18 += 2;
        v19 -= 2;
      }
      while (v19);
      if (a4 == v16)
        goto LABEL_13;
    }
    v20 = a4 - v16;
    v21 = (float *)(a3 + 4 * v16);
    do
    {
      v22 = *v21++;
      v17 = v17 + (float)(v22 * v22);
      --v20;
    }
    while (v20);
  }
  else
  {
    v17 = 0.0;
  }
LABEL_13:
  v23 = *v13;
  v7 = v13[1];
  v24 = (v15 >> 2) + ((unint64_t)v15 >> 63);
  if (*(_BYTE *)(a1 + 160))
    *(_BYTE *)(a1 + 160) = 0;
  if (*(_BYTE *)(a1 + 144))
    *(_BYTE *)(a1 + 144) = 0;
  if ((int)v24 >= 1)
  {
    v129 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v6 = 0;
    v10 = 0;
    v9 = 0;
    v14 = (v7 - v23) >> 2;
    v28 = *(float *)(a1 + 204);
    a6 = v28 * (float)(unint64_t)v14;
    v29 = *(float *)(a1 + v12);
    v30 = v28 * a6;
    v31 = a4 ? (float *)a3 : 0;
    a3 = v24;
    v32 = *(unsigned __int8 *)(a1 + 220);
    v8 = 1;
    v130 = -1;
    v131 = v24;
    v33 = v17;
    v134 = a2;
    v135 = a1;
    v132 = v13;
    v133 = a4;
    v136 = v32;
    do
    {
      if (v32)
      {
        v12 = v25 == *(unsigned int *)(a1 + 168);
        if (v25 == v24)
          goto LABEL_179;
      }
      else
      {
        v12 = 0;
        if (v25 == v24)
          goto LABEL_179;
      }
      v143 = v10;
      v144 = v6;
      v142 = v9;
      v34 = *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8);
      if (v34)
        v35 = *(_QWORD *)(a2 + 8);
      else
        v35 = 0;
      v36 = v34 >> 2;
      v37 = (v27 + *(int *)(a2 + 36) + *(_QWORD *)(a1 + 16) - 1) % (unint64_t)(v34 >> 2);
      v38 = (float32x2_t **)&v13[3 * v25];
      v40 = *v38;
      v39 = v38[1];
      v7 = (char *)v39 - (char *)v40;
      v41 = ((char *)v39 - (char *)v40) >> 2;
      if (v39 == v40)
        v42 = 0;
      else
        v42 = v40;
      v43 = *(_QWORD *)(a1 + 80);
      v44 = *(_QWORD *)(a1 + 88);
      v45 = v44 - v43;
      if (v44 == v43)
        v11 = 0;
      else
        v11 = *(float32x4_t **)(a1 + 80);
      v140 = *(_QWORD *)(a1 + 88);
      v141 = *(_QWORD *)(a1 + 80);
      v145 = v8;
      v146 = v7;
      if ((_DWORD)v12)
      {
        if (v45 >= 1)
        {
          v46 = v24;
          v47 = v25;
          v139 = v26;
          v137 = v44 - v43;
          v138 = v27;
          bzero(v11, 4 * (((unint64_t)v45 >> 2) - ((unint64_t)v45 > 3)) + 4);
          v45 = v137;
          v27 = v138;
          a3 = v131;
          v13 = v132;
          v26 = v139;
          v25 = v47;
          a4 = v133;
          a2 = v134;
          v24 = v46;
          a1 = v135;
        }
        v48 = 0;
        if (a4)
        {
          v49 = 0;
          v50 = v36 - 1;
          a6 = 0.0;
          v32 = v136;
          do
          {
            v51 = 0.0;
            v52 = 0.0;
            if (v41)
            {
              v53 = 0;
              v54 = 0;
              v55 = v37;
              do
              {
                v56 = *(float *)(v35 + 4 * v55);
                v52 = v52 + (float)(v42->f32[v54] * v56);
                if (v55 < v50)
                  ++v55;
                else
                  v55 = 0;
                if ((++v54 & 3) == 0)
                  v11->f32[v53 >> 32] = v11->f32[v53 >> 32] + (float)((float)(v31[v49] - v52) * (float)(v31[v49] - v52));
                v51 = v51 + (float)(v56 * v56);
                v53 += 0x40000000;
              }
              while (v41 != v54);
            }
            v57 = v31[v49];
            v58 = v57 - v52;
            if (v51 > v30 && v57 < 32000.0 && v57 > -32000.0)
            {
              if (v41)
              {
                v61 = (float *)v42;
                v62 = v41;
                v63 = v37;
                v64 = (float)(v29 * v58) / v51;
                do
                {
                  *v61 = *v61 + (float)(v64 * *(float *)(v35 + 4 * v63));
                  ++v61;
                  if (v63 < v50)
                    ++v63;
                  else
                    v63 = 0;
                  --v62;
                }
                while (v62);
              }
              v48 = 1;
            }
            a6 = a6 + (float)(v58 * v58);
            if (v37)
              v7 = v37;
            else
              v7 = v36;
            v37 = v7 - 1;
            ++v49;
          }
          while (v49 != a4);
        }
        else
        {
          a6 = 0.0;
          v32 = v136;
        }
      }
      else if (a4)
      {
        if (v41)
        {
          v48 = 0;
          v65 = 0;
          v66 = v36 - 1;
          a6 = 0.0;
          do
          {
            v67 = 0;
            v68 = v37;
            v69 = 0.0;
            v70 = 0.0;
            do
            {
              v71 = *(float *)(v35 + 4 * v68);
              v70 = v70 + (float)(v71 * v71);
              v69 = v69 + (float)(v42->f32[v67] * v71);
              if (v68 < v66)
                ++v68;
              else
                v68 = 0;
              ++v67;
            }
            while (v41 != v67);
            v72 = v31[v65];
            v73 = v72 - v69;
            if (v70 > v30 && v72 < 32000.0 && v72 > -32000.0)
            {
              v76 = (float *)v42;
              v77 = v41;
              v78 = v37;
              v79 = (float)(v29 * v73) / v70;
              do
              {
                *v76 = *v76 + (float)(v79 * *(float *)(v35 + 4 * v78));
                ++v76;
                if (v78 < v66)
                  ++v78;
                else
                  v78 = 0;
                --v77;
              }
              while (v77);
              v48 = 1;
            }
            a6 = a6 + (float)(v73 * v73);
            if (v37)
              v7 = v37;
            else
              v7 = v36;
            v37 = v7 - 1;
            ++v65;
          }
          while (v65 != a4);
        }
        else if (v30 < 0.0)
        {
          v48 = 0;
          a6 = 0.0;
          v83 = v31;
          v84 = a4;
          do
          {
            v85 = *v83++;
            v86 = v85;
            v87 = v85 > -32000.0 && v86 < 32000.0;
            a6 = a6 + (float)(v86 * v86);
            if (v87)
              v48 = 1;
            --v84;
          }
          while (v84);
        }
        else
        {
          a6 = 0.0;
          v80 = v31;
          v81 = a4;
          do
          {
            v82 = *v80++;
            a6 = a6 + (float)(v82 * v82);
            --v81;
          }
          while (v81);
          v48 = 0;
        }
      }
      else
      {
        v48 = 0;
        a6 = 0.0;
      }
      if (v146 < 8)
      {
        v14 = v27;
      }
      else
      {
        v88 = vmul_f32(*v42, *v42);
        v89 = v41 - 1;
        if ((unint64_t)(v41 - 1) < 3)
        {
          v90 = 0;
          v7 = 1;
        }
        else
        {
          v90 = 0;
          v91 = v42 + 1;
          v92 = 2;
          v7 = 1;
          do
          {
            v93 = *v91++;
            v94 = vmul_f32(v93, v93);
            v95 = (int8x8_t)vcgt_f32(v94, v88);
            v88 = (float32x2_t)vbsl_s8(v95, (int8x8_t)v94, (int8x8_t)v88);
            if ((v95.i8[0] & 1) != 0)
              v90 = v92;
            if ((v95.i8[4] & 1) != 0)
              v7 = v92 + 1;
            v92 += 2;
          }
          while (v92 < v89);
        }
        if (v88.f32[1] > v88.f32[0])
        {
          v88.f32[0] = v88.f32[1];
          v90 = v7;
        }
        if ((float)(v42->f32[v89] * v42->f32[v89]) <= v88.f32[0])
          v89 = v90;
        if (v89 < 3 || v89 >= v41 - 10)
        {
          v14 = v89 + v27;
        }
        else
        {
          v14 = v89 + v27;
          if (v48)
          {
            if (a6 < (float)(v17 * *(float *)(a1 + 216)) && a6 < v33)
            {
              if ((v145 & 1) != 0 || (v143 | v144) != v14)
              {
                *(_QWORD *)(a1 + 152) = v14;
                v129 = 1;
                *(_BYTE *)(a1 + 160) = 1;
                v33 = a6;
                v130 = v25;
              }
              else
              {
                *(_QWORD *)(a1 + 152) = v14;
                *(_BYTE *)(a1 + 160) = v142;
                v130 = v26 - 1;
                v129 = v142;
                v33 = a6;
              }
            }
          }
        }
      }
      v8 = 0;
      v6 = v14 & 0xFFFFFFFFFFFFFF00;
      v12 = *(_QWORD *)(a1 + 24);
      v27 += v12;
      ++v25;
      ++v26;
      v9 = 1;
      v10 = v14;
    }
    while (v25 != a3);
    LODWORD(a3) = v130;
    if (v130 != -1)
    {
      if (v129)
      {
        v14 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 128) = v14;
        *(_QWORD *)(a1 + 136) = v14;
        *(_BYTE *)(a1 + 144) = 1;
        if (v32 && *(_DWORD *)(a1 + 168) == v130)
        {
          a6 = 1.0;
          if (v17 <= 1.0)
          {
            if (*(int *)(a1 + 200) >= 50)
            {
              v7 = *(_QWORD *)(a1 + 56);
              v6 = v130;
              v9 = 0xAAAAAAAAAAAAAAABLL;
              v8 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 64) - v7) >> 3);
              goto LABEL_162;
            }
          }
          else
          {
            v6 = v130;
            v7 = *(_QWORD *)(a1 + 56);
            v9 = 0xAAAAAAAAAAAAAAABLL;
            v8 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 64) - v7) >> 3);
            if (v8 > v130)
            {
              v98 = (unint64_t *)(v7 + 24 * v130);
              if (v98[1] == *v98)
                v9 = 0;
              else
                v9 = *v98;
              if (v140 != v141)
              {
                v10 = v45 >> 2;
                a6 = 1.0 / v17;
                if ((unint64_t)v45 < 0x20
                  || (v99 = v45 & 0xFFFFFFFFFFFFFFFCLL, v9 < (unint64_t)v11 + v99)
                  && (unint64_t)v11 < v9 + v99)
                {
                  v100 = 0;
                  goto LABEL_154;
                }
                goto LABEL_180;
              }
              goto LABEL_158;
            }
LABEL_179:
            while (1)
            {
              __break(1u);
LABEL_180:
              v100 = v10 & 0xFFFFFFFFFFFFFFF8;
              v121 = v11 + 1;
              v122 = (float32x4_t *)(v9 + 16);
              v123 = (float32x4_t)vdupq_n_s32(0x3C75C28Fu);
              v124 = v10 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v125 = (int8x16_t)vmulq_n_f32(v121[-1], a6);
                v126 = (int8x16_t)vmulq_n_f32(*v121, a6);
                v127 = vbslq_s8((int8x16_t)vcgtq_f32(*v122, (float32x4_t)v126), v126, (int8x16_t)vmlaq_f32(*v122, v123, vsubq_f32((float32x4_t)v126, *v122)));
                v122[-1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v122[-1], (float32x4_t)v125), v125, (int8x16_t)vmlaq_f32(v122[-1], v123, vsubq_f32((float32x4_t)v125, v122[-1])));
                *v122 = (float32x4_t)v127;
                v121 += 2;
                v122 += 2;
                v124 -= 8;
              }
              while (v124);
              if (v10 != v100)
              {
LABEL_154:
                v101 = v10 - v100;
                v102 = v100;
                v103 = (float *)(v9 + v102 * 4);
                v104 = &v11->f32[v102];
                do
                {
                  v105 = *v104++;
                  v106 = a6 * v105;
                  v107 = *v103 + (float)((float)((float)(a6 * v105) - *v103) * 0.015);
                  if ((float)(a6 * v105) >= *v103)
                    v106 = v107;
                  *v103++ = v106;
                  --v101;
                }
                while (v101);
              }
LABEL_158:
              v9 = *(unsigned int *)(a1 + 200);
              v10 = (v9 + 1);
              *(_DWORD *)(a1 + 200) = v10;
              if ((int)v9 <= 48)
                break;
LABEL_162:
              if (v8 > v6)
              {
                v108 = (uint64_t *)(v7 + 24 * (int)v6);
                v110 = *v108;
                v109 = v108[1];
                v111 = v109 - v110;
                if (v109 == v110)
                  v112 = 0;
                else
                  v112 = v110;
                v113 = v12 * v6;
                v114 = v14 - v113;
                v115 = v114 >> 2;
                if (v111 >> 2 < v114 >> 2)
                  v115 = v111 >> 2;
                if ((int)v115 >= 1 && *(float *)(v112 + 4 * (int)v115 - 4) <= 0.5)
                {
                  v116 = (int)v115;
                  v117 = v112 - 8;
                  v118 = 1;
                  while (1)
                  {
                    v119 = v116 - 1;
                    if (v116 <= 1)
                      break;
                    v120 = *(float *)(v117 + 4 * v116--);
                    if (v120 > 0.5)
                    {
                      v118 = v119 + 1;
                      break;
                    }
                  }
                  v114 = 4 * v118 - 1;
                }
                v14 = v114 + v113;
                break;
              }
            }
          }
          *(_QWORD *)(a1 + 136) = v14;
        }
        *(_DWORD *)(a1 + 168) = a3;
      }
      else
      {
        std::__throw_bad_optional_access[abi:sn180100]();
        webrtc::MatchedFilter::LogFilterProperties(v128);
      }
    }
  }
}

void webrtc::MatchedFilter::LogFilterProperties(webrtc::MatchedFilter *this)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*((_QWORD *)this + 5) != *((_QWORD *)this + 4))
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    do
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      {
        v1 = v1 & 0xFFFFFFFF00000000 | 0x18D0;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/matched_filter.cc");
      }
      v5 += *((_QWORD *)this + 3);
      ++v4;
      v3 += 24;
    }
    while (v4 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3));
  }
}

uint64_t webrtc::MatchedFilterLagAggregator::MatchedFilterLagAggregator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  unsigned int v17;
  unint64_t v18;
  size_t v19;
  char *v20;
  uint64_t v21;
  void *v22;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a4 + 60);
  *(_DWORD *)(a1 + 20) = *(_QWORD *)(a4 + 24) / *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = a3 + 1;
  if (a3 != -1)
  {
    if (v6 >> 62)
      abort();
    v8 = (char *)operator new(4 * v6);
    *(_QWORD *)(a1 + 24) = v8;
    v9 = &v8[4 * v6];
    *(_QWORD *)(a1 + 40) = v9;
    bzero(v8, 4 * a3 + 4);
    *(_QWORD *)(a1 + 32) = v9;
  }
  *(_QWORD *)(a1 + 1048) = 0xFFFFFFFF00000000;
  bzero((void *)(a1 + 48), 0x3E8uLL);
  *(_QWORD *)(a1 + 1056) = 0;
  if (*(_BYTE *)(a4 + 96))
  {
    v10 = operator new();
    v11 = v10;
    v12 = *(_QWORD *)(a4 + 8);
    if ((int)v12 < 2)
    {
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(a4 + 8);
      do
      {
        ++v13;
        v15 = v14 > 3;
        LODWORD(v14) = v14 >> 1;
      }
      while (v15);
    }
    v16 = v13 <= 6;
    v17 = 6 - v13;
    if (!v16)
      v17 = 0;
    *(_DWORD *)v10 = v17;
    *(_QWORD *)(v10 + 1008) = 0;
    v18 = v12 * v6;
    *(_QWORD *)(v10 + 1024) = 0;
    *(_QWORD *)(v10 + 1016) = 0;
    if (v18 >= 0x40)
    {
      v19 = (v18 >> 4) & 0xFFFFFFFFFFFFFFCLL;
      v20 = (char *)operator new(v19);
      *(_QWORD *)(v11 + 1008) = v20;
      *(_QWORD *)(v11 + 1024) = &v20[v19];
      bzero(v20, v19);
      *(_QWORD *)(v11 + 1016) = &v20[v19];
      *(_DWORD *)(v11 + 1040) = 0;
      if ((uint64_t)v19 >= 1)
        bzero(v20, 4 * ((v19 >> 2) - (v19 > 3)) + 4);
    }
    else
    {
      *(_DWORD *)(v10 + 1040) = 0;
    }
    memset((void *)(v11 + 4), 255, 0x3E8uLL);
    *(_QWORD *)(v11 + 1032) = 0;
    v21 = *(_QWORD *)(a1 + 1056);
    *(_QWORD *)(a1 + 1056) = v11;
    if (v21)
    {
      v22 = *(void **)(v21 + 1008);
      if (v22)
      {
        *(_QWORD *)(v21 + 1016) = v22;
        operator delete(v22);
      }
      MEMORY[0x20BD0ADEC](v21, 0x1010C40BB29770BLL);
    }
  }
  return a1;
}

uint64_t webrtc::MatchedFilterLagAggregator::Aggregate@<X0>(uint64_t result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  float v19;
  float v20;
  int *v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  BOOL v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  int v32;
  BOOL v33;
  int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  int v38;
  BOOL v39;
  int v40;
  BOOL v41;
  int v42;
  BOOL v43;
  int v44;
  BOOL v45;
  int v46;
  BOOL v47;
  int v48;
  BOOL v49;
  int v50;
  BOOL v51;
  int v52;
  BOOL v53;
  int v54;
  BOOL v55;
  int v56;
  BOOL v57;
  int v58;
  BOOL v59;
  int v60;
  BOOL v61;
  int v62;
  BOOL v63;
  int v64;
  BOOL v65;
  int v66;
  BOOL v67;
  int v68;
  BOOL v69;
  int v70;
  BOOL v71;
  int v72;
  BOOL v73;
  int v74;
  BOOL v75;
  int v76;
  BOOL v77;
  int v78;
  BOOL v79;
  int v80;
  BOOL v81;
  int v82;
  BOOL v83;
  int v84;
  BOOL v85;
  int *v86;
  int v87;
  float v88;
  unint64_t v89;
  char *v90;
  char *v91;
  int v92;
  char *v93;
  int v94;
  int v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  int *v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  int v112;
  int *v113;
  int v114;
  int v115;
  BOOL v116;
  unint64_t v117;
  int v118;
  int v119;
  _BOOL4 v120;
  int v121;
  char v122;

  if (!*((_BYTE *)a2 + 16))
    goto LABEL_181;
  v3 = *(_QWORD *)(result + 1056);
  if (v3)
  {
    v4 = a2[2] - *(_DWORD *)(result + 20);
    v5 = (v4 & ~(v4 >> 31)) >> *(_DWORD *)v3;
    v6 = *(char **)(v3 + 1016);
    v7 = *(char **)(v3 + 1008);
    v8 = v6 - v7;
    v9 = (v6 - v7) >> 2;
    v10 = v9 - 1;
    if (v9 - 1 > v5)
      v10 = v5;
    if ((_DWORD)v5)
      v11 = v10;
    else
      v11 = 0;
    v12 = *(unsigned int *)(v3 + 1032);
    if (v12 >= 0xFA)
      goto LABEL_185;
    v13 = v3 + 4;
    v14 = *(int *)(v3 + 4 + 4 * v12);
    if ((_DWORD)v14 != -1)
    {
      if (v9 <= v14)
        goto LABEL_185;
      --*(_DWORD *)&v7[4 * v14];
      v12 = *(unsigned int *)(v3 + 1032);
      if (v12 > 0xF9)
        goto LABEL_185;
    }
    *(_DWORD *)(v13 + 4 * v12) = v11;
    v15 = *(unsigned int *)(v3 + 1032);
    if (v15 >= 0xFA)
      goto LABEL_185;
    v16 = *(int *)(v13 + 4 * v15);
    if (v9 <= v16)
      goto LABEL_185;
    ++*(_DWORD *)&v7[4 * v16];
    *(_DWORD *)(v3 + 1032) = (*(int *)(v3 + 1032) + 1) % 0xFAuLL;
    v17 = *(_DWORD *)(v3 + 1040);
    if (v17 > 499)
    {
      if (v7 == v6)
      {
        v91 = v7;
      }
      else
      {
        v90 = v7 + 4;
        v91 = v7;
        if (v7 + 4 != v6)
        {
          v92 = *(_DWORD *)v7;
          v91 = v7;
          v93 = v7 + 4;
          do
          {
            v95 = *(_DWORD *)v93;
            v93 += 4;
            v94 = v95;
            v96 = v92 < v95;
            if (v92 <= v95)
              v92 = v94;
            if (v96)
              v91 = v90;
            v90 = v93;
          }
          while (v93 != v6);
        }
      }
      v18 = (unint64_t)(v91 - v7) >> 2;
    }
    else
    {
      *(_DWORD *)(v3 + 1040) = v17 + 1;
      if (v8 < 125)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        LODWORD(v18) = 0;
        v19 = -1.0;
        v20 = 1.0;
        v21 = (int *)v7;
        v22 = (int *)v7;
        do
        {
          v24 = *v22;
          v22 += 32;
          v23 = v24;
          v26 = v21 + 1;
          v25 = v21[1];
          v27 = v24 < v25;
          if (v24 <= v25)
            v23 = v21[1];
          if (!v27)
            v26 = v21;
          v28 = v21[2];
          v29 = v23 < v28;
          if (v23 <= v28)
            v23 = v21[2];
          if (v29)
            v26 = v21 + 2;
          v30 = v21[3];
          v31 = v23 < v30;
          if (v23 <= v30)
            v23 = v21[3];
          if (v31)
            v26 = v21 + 3;
          v32 = v21[4];
          v33 = v23 < v32;
          if (v23 <= v32)
            v23 = v21[4];
          if (v33)
            v26 = v21 + 4;
          v34 = v21[5];
          v35 = v23 < v34;
          if (v23 <= v34)
            v23 = v21[5];
          if (v35)
            v26 = v21 + 5;
          v36 = v21[6];
          v37 = v23 < v36;
          if (v23 <= v36)
            v23 = v21[6];
          if (v37)
            v26 = v21 + 6;
          v38 = v21[7];
          v39 = v23 < v38;
          if (v23 <= v38)
            v23 = v21[7];
          if (v39)
            v26 = v21 + 7;
          v40 = v21[8];
          v41 = v23 < v40;
          if (v23 <= v40)
            v23 = v21[8];
          if (v41)
            v26 = v21 + 8;
          v42 = v21[9];
          v43 = v23 < v42;
          if (v23 <= v42)
            v23 = v21[9];
          if (v43)
            v26 = v21 + 9;
          v44 = v21[10];
          v45 = v23 < v44;
          if (v23 <= v44)
            v23 = v21[10];
          if (v45)
            v26 = v21 + 10;
          v46 = v21[11];
          v47 = v23 < v46;
          if (v23 <= v46)
            v23 = v21[11];
          if (v47)
            v26 = v21 + 11;
          v48 = v21[12];
          v49 = v23 < v48;
          if (v23 <= v48)
            v23 = v21[12];
          if (v49)
            v26 = v21 + 12;
          v50 = v21[13];
          v51 = v23 < v50;
          if (v23 <= v50)
            v23 = v21[13];
          if (v51)
            v26 = v21 + 13;
          v52 = v21[14];
          v53 = v23 < v52;
          if (v23 <= v52)
            v23 = v21[14];
          if (v53)
            v26 = v21 + 14;
          v54 = v21[15];
          v55 = v23 < v54;
          if (v23 <= v54)
            v23 = v21[15];
          if (v55)
            v26 = v21 + 15;
          v56 = v21[16];
          v57 = v23 < v56;
          if (v23 <= v56)
            v23 = v21[16];
          if (v57)
            v26 = v21 + 16;
          v58 = v21[17];
          v59 = v23 < v58;
          if (v23 <= v58)
            v23 = v21[17];
          if (v59)
            v26 = v21 + 17;
          v60 = v21[18];
          v61 = v23 < v60;
          if (v23 <= v60)
            v23 = v21[18];
          if (v61)
            v26 = v21 + 18;
          v62 = v21[19];
          v63 = v23 < v62;
          if (v23 <= v62)
            v23 = v21[19];
          if (v63)
            v26 = v21 + 19;
          v64 = v21[20];
          v65 = v23 < v64;
          if (v23 <= v64)
            v23 = v21[20];
          if (v65)
            v26 = v21 + 20;
          v66 = v21[21];
          v67 = v23 < v66;
          if (v23 <= v66)
            v23 = v21[21];
          if (v67)
            v26 = v21 + 21;
          v68 = v21[22];
          v69 = v23 < v68;
          if (v23 <= v68)
            v23 = v21[22];
          if (v69)
            v26 = v21 + 22;
          v70 = v21[23];
          v71 = v23 < v70;
          if (v23 <= v70)
            v23 = v21[23];
          if (v71)
            v26 = v21 + 23;
          v72 = v21[24];
          v73 = v23 < v72;
          if (v23 <= v72)
            v23 = v21[24];
          if (v73)
            v26 = v21 + 24;
          v74 = v21[25];
          v75 = v23 < v74;
          if (v23 <= v74)
            v23 = v21[25];
          if (v75)
            v26 = v21 + 25;
          v76 = v21[26];
          v77 = v23 < v76;
          if (v23 <= v76)
            v23 = v21[26];
          if (v77)
            v26 = v21 + 26;
          v78 = v21[27];
          v79 = v23 < v78;
          if (v23 <= v78)
            v23 = v21[27];
          if (v79)
            v26 = v21 + 27;
          v80 = v21[28];
          v81 = v23 < v80;
          if (v23 <= v80)
            v23 = v21[28];
          if (v81)
            v26 = v21 + 28;
          v82 = v21[29];
          v83 = v23 < v82;
          if (v23 <= v82)
            v23 = v21[29];
          if (v83)
            v26 = v21 + 29;
          v84 = v21[30];
          v85 = v23 < v84;
          if (v23 <= v84)
            v23 = v21[30];
          if (v85)
            v26 = v21 + 30;
          v87 = v21[31];
          v86 = v21 + 31;
          if (v23 >= v87)
            v86 = v26;
          v88 = v20 * (float)*v86;
          v89 = (unint64_t)((char *)v86 - v7) >> 2;
          if (v88 > v19)
          {
            v19 = v88;
            LODWORD(v18) = v89;
          }
          v20 = v20 * 0.7;
          v8 -= 128;
          v21 = v22;
        }
        while (v8 > 124);
      }
    }
    *(_DWORD *)(v3 + 1036) = (_DWORD)v18 << *(_DWORD *)v3;
  }
  v97 = *(unsigned int *)(result + 1048);
  if (v97 >= 0xFA)
    goto LABEL_185;
  v98 = result + 48;
  v99 = *(int *)(result + 48 + 4 * v97);
  v100 = *(char **)(result + 24);
  v101 = *(int **)(result + 32);
  v102 = ((char *)v101 - v100) >> 2;
  if (v102 <= v99)
    goto LABEL_185;
  v103 = *a2;
  v104 = 4 * v99;
  v105 = *(_DWORD *)&v100[4 * v99];
  v106 = *(_DWORD *)(result + 20);
  *(_DWORD *)&v100[v104] = v105 - 1;
  v107 = *(unsigned int *)(result + 1048);
  if (v107 >= 0xFA
    || (*(_DWORD *)(v98 + 4 * v107) = (v103 - v106) & ~((v103 - v106) >> 31),
        v108 = *(unsigned int *)(result + 1048),
        v108 >= 0xFA)
    || (v109 = *(int *)(v98 + 4 * v108), v102 <= v109))
  {
LABEL_185:
    __break(1u);
    return result;
  }
  ++*(_DWORD *)&v100[4 * v109];
  *(_DWORD *)(result + 1048) = (*(int *)(result + 1048) + 1) % 0xFAuLL;
  if (v100 == (char *)v101)
  {
    v111 = v100;
  }
  else
  {
    v110 = v100 + 4;
    v111 = v100;
    if (v100 + 4 != (char *)v101)
    {
      v112 = *(_DWORD *)v100;
      v111 = v100;
      v113 = (int *)(v100 + 4);
      do
      {
        v115 = *v113++;
        v114 = v115;
        v116 = v112 < v115;
        if (v112 <= v115)
          v112 = v114;
        if (v116)
          v111 = v110;
        v110 = (char *)v113;
      }
      while (v113 != v101);
    }
  }
  v117 = (unint64_t)(v111 - v100) >> 2;
  *(_DWORD *)(result + 1052) = v117;
  if (v100 == (char *)v101)
    v100 = 0;
  if (*(_BYTE *)(result + 8))
  {
    v118 = *(_DWORD *)(result + 16);
    v119 = *(_DWORD *)&v100[4 * (int)v117];
    v120 = 1;
    *(_BYTE *)(result + 8) = 1;
    if (v119 > v118)
      goto LABEL_182;
    goto LABEL_177;
  }
  v119 = *(_DWORD *)&v100[4 * (int)v117];
  v121 = *(_DWORD *)(result + 16);
  v120 = v119 > v121;
  *(_BYTE *)(result + 8) = v120;
  if (v119 <= v121)
  {
LABEL_177:
    v122 = v119 <= *(_DWORD *)(result + 12) || v120;
    if ((v122 & 1) == 0)
      goto LABEL_182;
LABEL_181:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return result;
  }
LABEL_182:
  if (v3)
    LODWORD(v117) = *(_DWORD *)(v3 + 1036);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)a3 = v120;
  *(_QWORD *)(a3 + 8) = (int)v117;
  *(_BYTE *)(a3 + 32) = 1;
  return result;
}

__n128 webrtc::InvokeSetParametersCallback@<Q0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  void (*v5)(uint64_t, int *);
  __n128 result;
  int v8;
  std::string __p;
  _DWORD v10[2];

  v5 = *(void (**)(uint64_t, int *))(a1 + 24);
  if (v5)
  {
    v8 = *a2;
    if (*((char *)a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
      v5 = *(void (**)(uint64_t, int *))(a1 + 24);
    }
    else
    {
      __p = *(std::string *)(a2 + 2);
    }
    v10[0] = a2[8];
    *(_DWORD *)((char *)v10 + 3) = *(int *)((char *)a2 + 35);
    v5(a1, &v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 16))(1, a1, a1);
    *(_QWORD *)(a1 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_DWORD *)a3 = *a2;
  result = *(__n128 *)(a2 + 2);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *(_DWORD *)(a3 + 32) = a2[8];
  *(_DWORD *)(a3 + 35) = *(int *)((char *)a2 + 35);
  return result;
}

void cricket::MediaChannelUtil::TransportForMediaChannels::~TransportForMediaChannels(cricket::MediaChannelUtil::TransportForMediaChannels *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  *(_QWORD *)this = off_24C0B6A50;
  v1 = (unsigned int *)*((_QWORD *)this + 1);
  if (v1)
  {
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      MEMORY[0x20BD0ADEC]();
  }
}

{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  *(_QWORD *)this = off_24C0B6A50;
  v1 = (unsigned int *)*((_QWORD *)this + 1);
  if (v1)
  {
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::MediaChannelUtil::~MediaChannelUtil(cricket::MediaChannelUtil *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  *(_QWORD *)this = &off_24C0B69D8;
  *((_QWORD *)this + 2) = off_24C0B6A50;
  v1 = (unsigned int *)*((_QWORD *)this + 3);
  if (v1)
  {
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      MEMORY[0x20BD0ADEC]();
  }
}

{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  *(_QWORD *)this = &off_24C0B69D8;
  *((_QWORD *)this + 2) = off_24C0B6A50;
  v1 = (unsigned int *)*((_QWORD *)this + 3);
  if (v1)
  {
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::MediaChannelUtil::GetRtpSendTimeExtnId(cricket::MediaChannelUtil *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t cricket::MediaChannelUtil::TransportForMediaChannels::SetPreferredDscp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _QWORD v14[2];
  uint64_t (*v15)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v16)(uint64_t);

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)result == v6)
  {
    if (*(_DWORD *)(a1 + 40) != v4)
    {
      *(_DWORD *)(a1 + 40) = v4;
      v11 = *(_BYTE *)(a1 + 24) ? v4 : 0;
      result = *(_QWORD *)(a1 + 32);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 0, 5, v11);
        if (!(_DWORD)result)
        {
          result = *(_QWORD *)(a1 + 32);
          if (result)
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, 1, 5, v11);
        }
      }
    }
  }
  else
  {
    v8 = *(unsigned int **)(a1 + 8);
    if (v8)
    {
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = operator new();
    *(_QWORD *)v10 = v8;
    *(_QWORD *)(v10 + 8) = a1;
    *(_DWORD *)(v10 + 16) = v4;
    *(_QWORD *)(v10 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
    *(_QWORD *)(v10 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,cricket::MediaChannelUtil::TransportForMediaChannels::SetPreferredDscp(rtc::DiffServCodePoint)::$_0 &&>;
    v14[0] = v10;
    v15 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v16 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v6 + 8))(v6, v14, &v13, &v12);
    return v15(1, v14, v14);
  }
  return result;
}

void cricket::VideoSenderInfo::~VideoSenderInfo(void **this)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (*((_BYTE *)this + 440) && *((char *)this + 439) < 0)
  {
    operator delete(this[52]);
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(this + 39), this[40]);
    if (!*((_BYTE *)this + 248))
      goto LABEL_7;
  }
  else
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(this + 39), this[40]);
    if (!*((_BYTE *)this + 248))
      goto LABEL_7;
  }
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
LABEL_7:
  v2 = (char *)this[25];
  if (v2)
  {
    v3 = (char *)this[26];
    v4 = this[25];
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        if (*(v3 - 25) < 0)
          operator delete(*((void **)v3 - 6));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = this[25];
    }
    this[26] = v2;
    operator delete(v4);
  }
  v6 = this[20];
  if (v6)
  {
    this[21] = v6;
    operator delete(v6);
  }
  v7 = this[17];
  if (v7)
  {
    this[18] = v7;
    operator delete(v7);
  }
  v8 = this[14];
  if (v8)
  {
    this[15] = v8;
    operator delete(v8);
  }
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
}

void cricket::VideoReceiverInfo::~VideoReceiverInfo(void **this)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;

  if (*((_BYTE *)this + 392) && *((char *)this + 391) < 0)
  {
    operator delete(this[46]);
    v2 = (char *)this[43];
    if (!v2)
      goto LABEL_13;
  }
  else
  {
    v2 = (char *)this[43];
    if (!v2)
      goto LABEL_13;
  }
  v3 = (char *)this[44];
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      v5 = (void *)*((_QWORD *)v3 - 3);
      if (v5)
      {
        *((_QWORD *)v3 - 2) = v5;
        operator delete(v5);
      }
      if (*(v3 - 25) < 0)
        operator delete(*((void **)v3 - 6));
      v3 -= 48;
    }
    while (v3 != v2);
    v4 = (char *)this[43];
  }
  this[44] = v2;
  operator delete(v4);
LABEL_13:
  v6 = this[23];
  if (v6)
  {
    this[24] = v6;
    operator delete(v6);
  }
  v7 = this[20];
  if (v7)
  {
    this[21] = v7;
    operator delete(v7);
  }
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
}

void cricket::VoiceMediaInfo::~VoiceMediaInfo(char **this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  void *v16;

  std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)(this + 9), this[10]);
  std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)(this + 6), this[7]);
  v2 = this[3];
  if (v2)
  {
    v3 = this[4];
    v4 = this[3];
    if (v3 != v2)
    {
      v5 = v3 - 400;
      do
      {
        v7 = (void *)*((_QWORD *)v5 + 7);
        if (v7)
        {
          *((_QWORD *)v5 + 8) = v7;
          operator delete(v7);
        }
        v8 = (void *)*((_QWORD *)v5 + 4);
        if (v8)
        {
          *((_QWORD *)v5 + 5) = v8;
          operator delete(v8);
        }
        if (v5[23] < 0)
          operator delete(*(void **)v5);
        v6 = v5 - 128;
        v5 -= 528;
      }
      while (v6 != v2);
      v4 = this[3];
    }
    this[4] = v2;
    operator delete(v4);
  }
  v9 = *this;
  if (*this)
  {
    v10 = this[1];
    v11 = *this;
    if (v10 != v9)
    {
      v12 = v10 - 312;
      do
      {
        v14 = (void *)*((_QWORD *)v12 + 10);
        if (v14)
        {
          *((_QWORD *)v12 + 11) = v14;
          operator delete(v14);
        }
        v15 = (void *)*((_QWORD *)v12 + 7);
        if (v15)
        {
          *((_QWORD *)v12 + 8) = v15;
          operator delete(v15);
        }
        v16 = (void *)*((_QWORD *)v12 + 4);
        if (v16)
        {
          *((_QWORD *)v12 + 5) = v16;
          operator delete(v16);
        }
        if (v12[23] < 0)
          operator delete(*(void **)v12);
        v13 = v12 - 80;
        v12 -= 392;
      }
      while (v13 != v9);
      v11 = *this;
    }
    this[1] = v9;
    operator delete(v11);
  }
}

void cricket::VideoMediaInfo::~VideoMediaInfo(char **this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)(this + 12), this[13]);
  std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)(this + 9), this[10]);
  v2 = this[6];
  if (v2)
  {
    v3 = this[7];
    v4 = this[6];
    if (v3 != v2)
    {
      do
        cricket::VideoReceiverInfo::~VideoReceiverInfo((void **)v3 - 91);
      while (v3 != v2);
      v4 = this[6];
    }
    this[7] = v2;
    operator delete(v4);
  }
  v5 = this[3];
  if (v5)
  {
    v6 = this[4];
    v7 = this[3];
    if (v6 != v5)
    {
      do
        cricket::VideoSenderInfo::~VideoSenderInfo((void **)v6 - 57);
      while (v6 != v5);
      v7 = this[3];
    }
    this[4] = v5;
    operator delete(v7);
  }
  v8 = *this;
  if (*this)
  {
    v9 = this[1];
    v10 = *this;
    if (v9 != v8)
    {
      do
        cricket::VideoSenderInfo::~VideoSenderInfo((void **)v9 - 57);
      while (v9 != v8);
      v10 = *this;
    }
    this[1] = v8;
    operator delete(v10);
  }
}

void cricket::VideoMediaSendInfo::~VideoMediaSendInfo(char **this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)(this + 6), this[7]);
  v2 = this[3];
  if (v2)
  {
    v3 = this[4];
    v4 = this[3];
    if (v3 != v2)
    {
      do
        cricket::VideoSenderInfo::~VideoSenderInfo((void **)v3 - 57);
      while (v3 != v2);
      v4 = this[3];
    }
    this[4] = v2;
    operator delete(v4);
  }
  v5 = *this;
  if (*this)
  {
    v6 = this[1];
    v7 = *this;
    if (v6 != v5)
    {
      do
        cricket::VideoSenderInfo::~VideoSenderInfo((void **)v6 - 57);
      while (v6 != v5);
      v7 = *this;
    }
    this[1] = v5;
    operator delete(v7);
  }
}

void cricket::VoiceMediaSendInfo::~VoiceMediaSendInfo(char **this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  void *v9;

  std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)(this + 3), this[4]);
  v2 = *this;
  if (*this)
  {
    v3 = this[1];
    v4 = *this;
    if (v3 != v2)
    {
      v5 = v3 - 312;
      do
      {
        v7 = (void *)*((_QWORD *)v5 + 10);
        if (v7)
        {
          *((_QWORD *)v5 + 11) = v7;
          operator delete(v7);
        }
        v8 = (void *)*((_QWORD *)v5 + 7);
        if (v8)
        {
          *((_QWORD *)v5 + 8) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v5 + 4);
        if (v9)
        {
          *((_QWORD *)v5 + 5) = v9;
          operator delete(v9);
        }
        if (v5[23] < 0)
          operator delete(*(void **)v5);
        v6 = v5 - 80;
        v5 -= 392;
      }
      while (v6 != v2);
      v4 = *this;
    }
    this[1] = v2;
    operator delete(v4);
  }
}

void cricket::VoiceMediaReceiveInfo::~VoiceMediaReceiveInfo(char **this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;

  std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)(this + 3), this[4]);
  v2 = *this;
  if (*this)
  {
    v3 = this[1];
    v4 = *this;
    if (v3 != v2)
    {
      v5 = v3 - 400;
      do
      {
        v7 = (void *)*((_QWORD *)v5 + 7);
        if (v7)
        {
          *((_QWORD *)v5 + 8) = v7;
          operator delete(v7);
        }
        v8 = (void *)*((_QWORD *)v5 + 4);
        if (v8)
        {
          *((_QWORD *)v5 + 5) = v8;
          operator delete(v8);
        }
        if (v5[23] < 0)
          operator delete(*(void **)v5);
        v6 = v5 - 128;
        v5 -= 528;
      }
      while (v6 != v2);
      v4 = *this;
    }
    this[1] = v2;
    operator delete(v4);
  }
}

void cricket::AudioSenderParameter::~AudioSenderParameter(void **this)
{
  void **v2;
  char *v3;
  void **v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void (**v10)(char *);
  BOOL v11;

  *this = &off_24C0B6A00;
  if (*((_BYTE *)this + 160) && *((char *)this + 159) < 0)
  {
    operator delete(this[17]);
    *this = &unk_24C0B0D00;
    if ((*((char *)this + 87) & 0x80000000) == 0)
    {
LABEL_4:
      *this = &unk_24C0B0D28;
      v2 = (void **)this[4];
      if (!v2)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  else
  {
    *this = &unk_24C0B0D00;
    if ((*((char *)this + 87) & 0x80000000) == 0)
      goto LABEL_4;
  }
  operator delete(this[8]);
  *this = &unk_24C0B0D28;
  v2 = (void **)this[4];
  if (!v2)
  {
LABEL_5:
    v3 = (char *)this[1];
    if (!v3)
      return;
    goto LABEL_16;
  }
LABEL_9:
  v4 = (void **)this[5];
  if (v4 == v2)
  {
    this[5] = v2;
    operator delete(v2);
    v3 = (char *)this[1];
    if (!v3)
      return;
    goto LABEL_16;
  }
  do
  {
    if (*((char *)v4 - 9) < 0)
      operator delete(*(v4 - 4));
    v4 -= 4;
  }
  while (v4 != v2);
  v5 = this[4];
  this[5] = v2;
  operator delete(v5);
  v3 = (char *)this[1];
  if (v3)
  {
LABEL_16:
    v6 = (char *)this[2];
    v7 = v3;
    if (v6 != v3)
    {
      v8 = v6 - 216;
      v9 = v6 - 216;
      do
      {
        v10 = *(void (***)(char *))v9;
        v9 -= 216;
        (*v10)(v8);
        v11 = v8 == v3;
        v8 = v9;
      }
      while (!v11);
      v7 = (char *)this[1];
    }
    this[2] = v3;
    operator delete(v7);
  }
}

{
  cricket::AudioSenderParameter::~AudioSenderParameter(this);
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::AudioSenderParameter::ToStringMap(std::string::size_type *this@<X0>, uint64_t a2@<X8>)
{
  const void **v4;
  char *v5;
  char *v6;
  uint64_t **v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  void *__p[2];
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  uint64_t v17;

  cricket::SenderParameters::ToStringMap(this, a2);
  cricket::AudioOptions::ToString((cricket::AudioOptions *)(this + 12), (char *)v15);
  HIBYTE(v14) = 7;
  if (__p <= (void **)"options" && (char *)__p + 7 > "options")
  {
    __break(1u);
    return;
  }
  strcpy((char *)__p, "options");
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a2, &v17, (const void **)__p);
  v5 = (char *)*v4;
  if (*v4)
  {
    v6 = v5 + 56;
    if ((v5[79] & 0x80000000) == 0)
      goto LABEL_5;
  }
  else
  {
    v7 = (uint64_t **)v4;
    v8 = operator new(0x50uLL);
    v8[2] = *(_OWORD *)__p;
    v9 = v14;
    __p[0] = 0;
    __p[1] = 0;
    v14 = 0;
    *((_QWORD *)v8 + 6) = v9;
    *((_QWORD *)v8 + 7) = 0;
    *((_QWORD *)v8 + 8) = 0;
    *((_QWORD *)v8 + 9) = 0;
    v10 = v17;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = **(_QWORD **)a2;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *(_QWORD *)a2 = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 8), v12);
    ++*(_QWORD *)(a2 + 16);
    v6 = (char *)v8 + 56;
    if ((*((char *)v8 + 79) & 0x80000000) == 0)
      goto LABEL_5;
  }
  operator delete(*(void **)v6);
LABEL_5:
  *(_OWORD *)v6 = *(_OWORD *)v15;
  *((_QWORD *)v6 + 2) = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15[0]) = 0;
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(v15[0]);
  }
}

void cricket::VideoSenderParameters::~VideoSenderParameters(void **this)
{
  void **v2;
  char *v3;
  void **v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void (**v10)(char *);
  BOOL v11;

  *this = &unk_24C0B0D00;
  if (*((char *)this + 87) < 0)
  {
    operator delete(this[8]);
    *this = &unk_24C0B0D28;
    v2 = (void **)this[4];
    if (!v2)
    {
LABEL_3:
      v3 = (char *)this[1];
      if (!v3)
        return;
      goto LABEL_13;
    }
  }
  else
  {
    *this = &unk_24C0B0D28;
    v2 = (void **)this[4];
    if (!v2)
      goto LABEL_3;
  }
  v4 = (void **)this[5];
  if (v4 == v2)
  {
    this[5] = v2;
    operator delete(v2);
    v3 = (char *)this[1];
    if (!v3)
      return;
    goto LABEL_13;
  }
  do
  {
    if (*((char *)v4 - 9) < 0)
      operator delete(*(v4 - 4));
    v4 -= 4;
  }
  while (v4 != v2);
  v5 = this[4];
  this[5] = v2;
  operator delete(v5);
  v3 = (char *)this[1];
  if (v3)
  {
LABEL_13:
    v6 = (char *)this[2];
    v7 = v3;
    if (v6 != v3)
    {
      v8 = v6 - 216;
      v9 = v6 - 216;
      do
      {
        v10 = *(void (***)(char *))v9;
        v9 -= 216;
        (*v10)(v8);
        v11 = v8 == v3;
        v8 = v9;
      }
      while (!v11);
      v7 = (char *)this[1];
    }
    this[2] = v3;
    operator delete(v7);
  }
}

{
  cricket::VideoSenderParameters::~VideoSenderParameters(this);
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::VideoSenderParameters::ToStringMap(std::string::size_type *this@<X0>, uint64_t a2@<X8>)
{
  const std::string::value_type *v4;
  const void **v5;
  uint64_t **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  void *__p[2];
  uint64_t v13;
  uint64_t v14;

  cricket::SenderParameters::ToStringMap(this, a2);
  if (*((_BYTE *)this + 89))
    v4 = "yes";
  else
    v4 = "no";
  HIBYTE(v13) = 15;
  if (__p <= (void **)"conference_mode" && (char *)&__p[1] + 7 > "conference_mode")
  {
    __break(1u);
    return;
  }
  strcpy((char *)__p, "conference_mode");
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a2, &v14, (const void **)__p);
  if (*v5)
  {
    std::string::__assign_external((std::string *)((char *)*v5 + 56), v4);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return;
LABEL_12:
    operator delete(__p[0]);
    return;
  }
  v6 = (uint64_t **)v5;
  v7 = (char *)operator new(0x50uLL);
  *((_OWORD *)v7 + 2) = *(_OWORD *)__p;
  v8 = v13;
  __p[0] = 0;
  __p[1] = 0;
  v13 = 0;
  *((_QWORD *)v7 + 6) = v8;
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 9) = 0;
  v9 = v14;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v9;
  *v6 = (uint64_t *)v7;
  v10 = **(_QWORD **)a2;
  v11 = (uint64_t *)v7;
  if (v10)
  {
    *(_QWORD *)a2 = v10;
    v11 = *v6;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 8), v11);
  ++*(_QWORD *)(a2 + 16);
  std::string::__assign_external((std::string *)(v7 + 56), v4);
  if (SHIBYTE(v13) < 0)
    goto LABEL_12;
}

uint64_t cricket::MediaChannelUtil::TransportForMediaChannels::SendRtcp(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD v25[3];
  _QWORD v26[2];
  uint64_t (*v27)(uint64_t, uint64_t *, _QWORD *);
  void *__p;
  void *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  char v41;

  v24 = a1;
  v6 = operator new();
  if (a3 <= 0x800)
    v7 = 2048;
  else
    v7 = a3;
  *(_QWORD *)v6 = a3;
  *(_QWORD *)(v6 + 8) = v7;
  v8 = (void *)operator new[]();
  *(_QWORD *)(v6 + 16) = v8;
  *(_DWORD *)(v6 + 24) = 0;
  v9 = (unsigned int *)(v6 + 24);
  v25[0] = v6;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  memcpy(v8, a2, a3);
  v25[1] = 0;
  v25[2] = a3;
  v11 = *(_QWORD *)(a1 + 16);
  {
    LODWORD(v26[0]) = -1;
    BYTE4(v26[0]) = 0;
    v26[1] = -1;
    LODWORD(v27) = -1;
    v29 = 0;
    v30 = 0;
    __p = 0;
    v31 = -1;
    v32 = -1;
    v33 = 0;
    v36 = 0;
    v34 = 0;
    v35 = 0;
    v39 = 0;
    v37 = 0;
    v38 = 0;
    v40 = 0;
    if (*(_BYTE *)(a1 + 24))
      LODWORD(v26[0]) = *(_DWORD *)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 32);
    if (v17)
    {
      (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v17 + 8))(v17, v25, v26);
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
    }
    v18 = v25[0];
    if (v25[0])
    {
      v19 = (unsigned int *)(v25[0] + 24);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = *(_QWORD *)(v18 + 16);
        *(_QWORD *)(v18 + 16) = 0;
        if (v22)
          MEMORY[0x20BD0ADD4](v22, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v18, 0x1010C40EE34DA14);
      }
    }
  }
  else
  {
    v12 = *(unsigned int **)(a1 + 8);
    if (v12)
    {
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = (_QWORD *)operator new();
    *v14 = a1;
    v14[1] = v6;
    v14[2] = 0;
    v14[3] = a3;
    v15 = (_QWORD *)operator new();
    *v15 = v12;
    v15[1] = v14;
    v15[3] = absl::internal_any_invocable::RemoteManagerNontrivial<cricket::MediaChannelUtil::TransportForMediaChannels::SendRtcp(rtc::ArrayView<unsigned char const,-4711l>)::$_0>;
    v15[4] = absl::internal_any_invocable::RemoteInvoker<false,void,cricket::MediaChannelUtil::TransportForMediaChannels::SendRtcp(rtc::ArrayView<unsigned char const,-4711l>)::$_0 &&>;
    v26[0] = v15;
    v27 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    __p = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v11 + 8))(v11, v26, &v41, &v23);
    v27(1, v26, v26);
  }
  return 1;
}

uint64_t cricket::MediaChannelUtil::TransportForMediaChannels::SendRtp(uint64_t a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  void (***v23)(_QWORD, _QWORD *, _QWORD *);
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  int v31;
  _QWORD v32[3];
  _QWORD v33[2];
  uint64_t (*v34)(uint64_t, uint64_t *, _QWORD *);
  void *__p;
  void *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  _BYTE v50[9];

  v7 = *a4;
  *(_QWORD *)&v30 = a1;
  *((_QWORD *)&v30 + 1) = v7;
  v8 = *((_BYTE *)a4 + 9);
  LOBYTE(v31) = v8;
  v9 = *((_BYTE *)a4 + 10);
  BYTE1(v31) = v9;
  v10 = *((_BYTE *)a4 + 11);
  BYTE2(v31) = v10;
  v11 = *((_BYTE *)a4 + 12);
  HIBYTE(v31) = v11;
  v12 = operator new();
  if (a3 <= 0x800)
    v13 = 2048;
  else
    v13 = a3;
  *(_QWORD *)v12 = a3;
  *(_QWORD *)(v12 + 8) = v13;
  v14 = (void *)operator new[]();
  *(_QWORD *)(v12 + 16) = v14;
  *(_DWORD *)(v12 + 24) = 0;
  v15 = (unsigned int *)(v12 + 24);
  v32[0] = v12;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  memcpy(v14, a2, a3);
  v32[1] = 0;
  v32[2] = a3;
  v17 = *(_QWORD *)(a1 + 16);
  {
    LODWORD(v33[0]) = -1;
    BYTE4(v33[0]) = 0;
    LODWORD(v34) = -1;
    v36 = 0;
    v37 = 0;
    __p = 0;
    v38 = -1;
    v39 = -1;
    v44 = 0;
    v42 = 0;
    v43 = 0;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    v33[1] = v7;
    if (*(_BYTE *)(a1 + 24))
      LODWORD(v33[0]) = *(_DWORD *)(a1 + 40);
    v40 = v8;
    v41 = v9;
    v48 = v10;
    v49 = v11;
    v23 = *(void (****)(_QWORD, _QWORD *, _QWORD *))(a1 + 32);
    if (v23)
    {
      (**v23)(v23, v32, v33);
      if (__p)
      {
        v36 = __p;
        operator delete(__p);
      }
    }
    v24 = v32[0];
    if (v32[0])
    {
      v25 = (unsigned int *)(v32[0] + 24);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD *)(v24 + 16);
        *(_QWORD *)(v24 + 16) = 0;
        if (v28)
          MEMORY[0x20BD0ADD4](v28, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v24, 0x1010C40EE34DA14);
      }
    }
  }
  else
  {
    v18 = *(unsigned int **)(a1 + 8);
    if (v18)
    {
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = operator new();
    *(_OWORD *)v20 = v30;
    *(_DWORD *)(v20 + 16) = v31;
    *(_QWORD *)(v20 + 24) = v12;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = a3;
    v21 = (_QWORD *)operator new();
    *v21 = v18;
    v21[1] = v20;
    v21[3] = absl::internal_any_invocable::RemoteManagerNontrivial<cricket::MediaChannelUtil::TransportForMediaChannels::SendRtp(rtc::ArrayView<unsigned char const,-4711l>,webrtc::PacketOptions const&)::$_0>;
    v21[4] = absl::internal_any_invocable::RemoteInvoker<false,void,cricket::MediaChannelUtil::TransportForMediaChannels::SendRtp(rtc::ArrayView<unsigned char const,-4711l>,webrtc::PacketOptions const&)::$_0 &&>;
    v33[0] = v21;
    v34 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    __p = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, _BYTE *, char *))(*(_QWORD *)v17 + 8))(v17, v33, v50, &v29);
    v34(1, v33, v33);
  }
  return 1;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,cricket::MediaChannelUtil::TransportForMediaChannels::SendRtcp(rtc::ArrayView<unsigned char const,-4711l>)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  void *__p;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;

  v1 = *a1;
  v2 = **a1;
  v4 = -1;
  v5 = 0;
  v6 = -1;
  v7 = -1;
  v9 = 0;
  v10 = 0;
  __p = 0;
  v11 = -1;
  v12 = -1;
  v13 = 0;
  v16 = 0;
  v14 = 0;
  v15 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v20 = 0;
  if (*(_BYTE *)(v2 + 24))
    v4 = *(_DWORD *)(v2 + 40);
  v3 = *(_QWORD *)(v2 + 32);
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v3 + 8))(v3, v1 + 1, &v4);
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<cricket::MediaChannelUtil::TransportForMediaChannels::SendRtcp(rtc::ArrayView<unsigned char const,-4711l>)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = (unsigned int *)(v4 + 24);
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          v8 = *(_QWORD *)(v4 + 16);
          *(_QWORD *)(v4 + 16) = 0;
          if (v8)
            MEMORY[0x20BD0ADD4](v8, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v4, 0x1010C40EE34DA14);
        }
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,cricket::MediaChannelUtil::TransportForMediaChannels::SendRtp(rtc::ArrayView<unsigned char const,-4711l>,webrtc::PacketOptions const&)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  void (***v3)(_QWORD, uint64_t, int *);
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  void *__p;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;

  v1 = *a1;
  v2 = **a1;
  v4 = -1;
  v5 = 0;
  v7 = -1;
  v9 = 0;
  v10 = 0;
  __p = 0;
  v11 = -1;
  v12 = -1;
  v16 = 0;
  v14 = 0;
  v15 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v6 = v1[1];
  if (*(_BYTE *)(v2 + 24))
    v4 = *(_DWORD *)(v2 + 40);
  v13 = *((_WORD *)v1 + 8);
  v20 = *((_WORD *)v1 + 9);
  v3 = *(void (****)(_QWORD, uint64_t, int *))(v2 + 32);
  if (v3)
  {
    (**v3)(v3, (uint64_t)(v1 + 3), &v4);
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<cricket::MediaChannelUtil::TransportForMediaChannels::SendRtp(rtc::ArrayView<unsigned char const,-4711l>,webrtc::PacketOptions const&)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = (unsigned int *)(v4 + 24);
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          v8 = *(_QWORD *)(v4 + 16);
          *(_QWORD *)(v4 + 16) = 0;
          if (v8)
            MEMORY[0x20BD0ADD4](v8, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v4, 0x1010C40EE34DA14);
        }
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::MediaChannelUtil::TransportForMediaChannels::SetPreferredDscp(rtc::DiffServCodePoint)::$_0 &&>(uint64_t a1)
{
  return cricket::MediaChannelUtil::TransportForMediaChannels::SetPreferredDscp(*(_QWORD *)a1, *(unsigned int *)(a1 + 8));
}

void cricket::CreateRtpParametersWithEncodings(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  char *v8;
  webrtc::RtpEncodingParameters *v9;
  webrtc::RtpEncodingParameters *v10;
  webrtc::RtpEncodingParameters *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::string *v18;
  size_t v19;
  const std::string::value_type *v20;
  const std::string::value_type *v21;
  size_t v22;
  __int128 *v23;
  const std::string::value_type **v24;
  char v25;
  __int128 v26;
  char v27;
  const std::string::value_type *v28;
  size_t v29;
  _DWORD *v30;
  void *__p;
  _BYTE *v32;
  uint64_t v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  cricket::StreamParams::GetPrimarySsrcs(a1, (uint64_t)&__p);
  v4 = __p;
  v5 = v32 - (_BYTE *)__p;
  v30 = v32;
  if (v32 == __p)
  {
    v6 = 0;
    v10 = 0;
    v9 = 0;
    v15 = a1[15];
    if (a1[16] == v15)
      goto LABEL_29;
    goto LABEL_14;
  }
  if ((unint64_t)v5 >= 0x3C3C3C3C3C3C3C1)
    goto LABEL_51;
  v6 = v5 >> 2;
  v7 = 272 * (v5 >> 2);
  v8 = (char *)operator new(v7);
  v9 = (webrtc::RtpEncodingParameters *)v8;
  v10 = (webrtc::RtpEncodingParameters *)&v8[v7];
  v11 = (webrtc::RtpEncodingParameters *)v8;
  do
  {
    *(_BYTE *)v11 = 0;
    *((_BYTE *)v11 + 4) = 0;
    *((_QWORD *)v11 + 1) = 0x3FF0000000000000;
    *((_DWORD *)v11 + 4) = 1;
    *((_BYTE *)v11 + 20) = 0;
    *((_BYTE *)v11 + 24) = 0;
    *((_BYTE *)v11 + 28) = 0;
    *((_BYTE *)v11 + 32) = 0;
    *((_BYTE *)v11 + 40) = 0;
    *((_BYTE *)v11 + 48) = 0;
    *((_BYTE *)v11 + 56) = 0;
    *((_BYTE *)v11 + 60) = 0;
    *((_BYTE *)v11 + 64) = 0;
    *((_BYTE *)v11 + 72) = 0;
    *((_BYTE *)v11 + 80) = 0;
    *((_BYTE *)v11 + 104) = 0;
    *((_BYTE *)v11 + 112) = 0;
    *((_BYTE *)v11 + 120) = 0;
    *((_BYTE *)v11 + 124) = 1;
    *((_BYTE *)v11 + 160) = 0;
    *((_BYTE *)v11 + 264) = 0;
    *((_QWORD *)v11 + 16) = 0;
    *((_QWORD *)v11 + 17) = 0;
    *((_WORD *)v11 + 76) = 0;
    *((_QWORD *)v11 + 18) = 0;
    v11 = (webrtc::RtpEncodingParameters *)((char *)v11 + 272);
  }
  while (v11 != v10);
  v12 = 0;
  if (v6 <= 1)
    v13 = 1;
  else
    v13 = v6;
  v14 = v8 + 4;
  do
  {
    if (v6 == v12)
      goto LABEL_50;
    *((_DWORD *)v14 - 1) = v4[v12];
    *v14 = 1;
    ++v12;
    v14 += 272;
  }
  while (v13 != v12);
  v15 = a1[15];
  if (a1[16] != v15)
  {
LABEL_14:
    v16 = 0;
    v17 = 0;
    v18 = (std::string *)((char *)v9 + 128);
    while (v6 != v17)
    {
      v23 = (__int128 *)(v15 + v16);
      if ((std::string *)(v15 + v16) != v18)
      {
        v24 = (const std::string::value_type **)(v15 + v16);
        v25 = *(_BYTE *)(v15 + v16 + 23);
        if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
        {
          v20 = *v24;
          v19 = (size_t)v24[1];
          if (v25 >= 0)
            v21 = (const std::string::value_type *)(v15 + v16);
          else
            v21 = v20;
          if (v25 >= 0)
            v22 = *(unsigned __int8 *)(v15 + v16 + 23);
          else
            v22 = v19;
          std::string::__assign_no_alias<false>(v18, v21, v22);
        }
        else if ((*(_BYTE *)(v15 + v16 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v18, *(char **)(v15 + v16), *(_QWORD *)(v15 + v16 + 8));
        }
        else
        {
          v26 = *v23;
          v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v26;
        }
      }
      ++v17;
      v15 = a1[15];
      v18 = (std::string *)((char *)v18 + 272);
      v16 += 80;
      if (v17 >= 0xCCCCCCCCCCCCCCCDLL * ((a1[16] - v15) >> 4))
        goto LABEL_29;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    abort();
  }
LABEL_29:
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 124) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_WORD *)(a2 + 152) = 256;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 105) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_BYTE *)(a2 + 160) = 0;
  *(_BYTE *)(a2 + 164) = 0;
  std::vector<webrtc::RtpEncodingParameters>::__assign_with_size[abi:sn180100]<webrtc::RtpEncodingParameters*,webrtc::RtpEncodingParameters*>((uint64_t *)(a2 + 96), (uint64_t)v9, (uint64_t)v10, v6);
  if ((_QWORD *)(a2 + 128) == a1 + 9)
    goto LABEL_41;
  v27 = *((_BYTE *)a1 + 95);
  if (*(char *)(a2 + 151) < 0)
  {
    if (v27 >= 0)
      v28 = (const std::string::value_type *)(a1 + 9);
    else
      v28 = (const std::string::value_type *)a1[9];
    if (v27 >= 0)
      v29 = *((unsigned __int8 *)a1 + 95);
    else
      v29 = a1[10];
    std::string::__assign_no_alias<false>((std::string *)(a2 + 128), v28, v29);
LABEL_41:
    if (!v9)
      goto LABEL_45;
    goto LABEL_42;
  }
  if ((*((_BYTE *)a1 + 95) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>((_QWORD *)(a2 + 128), (char *)a1[9], a1[10]);
    if (!v9)
      goto LABEL_45;
  }
  else
  {
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 9);
    *(_QWORD *)(a2 + 144) = a1[11];
    if (!v9)
      goto LABEL_45;
  }
LABEL_42:
  if (v30 != v4)
  {
    do
    {
      v10 = (webrtc::RtpEncodingParameters *)((char *)v10 - 272);
      webrtc::RtpEncodingParameters::~RtpEncodingParameters(v10);
    }
    while (v10 != v9);
  }
  operator delete(v9);
LABEL_45:
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
}

void cricket::GetDefaultEnabledRtpHeaderExtensions(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **v3;
  void **v4;
  char *v5;
  size_t v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v14;
  void *v15;
  void *__p;
  void **v17;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v3 = (void **)__p;
  v4 = v17;
  if (__p != v17)
  {
    v5 = 0;
    do
    {
      if (*((_DWORD *)v3 + 9) != 4)
      {
        if (!*((_BYTE *)v3 + 28))
          goto LABEL_38;
        if ((unint64_t)v5 >= *(_QWORD *)(a2 + 16))
        {
          v5 = std::vector<webrtc::RtpExtension>::__emplace_back_slow_path<std::string const&,int const&>((void **)a2, (char *)v3, (int *)v3 + 6);
        }
        else
        {
          if (!v5)
            goto LABEL_38;
          if (*((char *)v3 + 23) < 0)
          {
            v6 = (size_t)v3[1];
            if ((v6 & 0x8000000000000000) != 0)
              goto LABEL_38;
            v7 = (char *)*v3;
            if (v6)
            {
              if (!v7)
                goto LABEL_38;
            }
            if (v6 >= 0x7FFFFFFFFFFFFFF8)
              goto LABEL_39;
          }
          else
          {
            v6 = *((unsigned __int8 *)v3 + 23);
            v7 = (char *)v3;
          }
          v8 = *((_DWORD *)v3 + 6);
          if (v6 > 0x16)
          {
            v10 = (v6 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v6 | 7) != 0x17)
              v10 = v6 | 7;
            v11 = v10 + 1;
            v9 = (char *)operator new(v10 + 1);
            *((_QWORD *)v5 + 1) = v6;
            *((_QWORD *)v5 + 2) = v11 | 0x8000000000000000;
            *(_QWORD *)v5 = v9;
          }
          else
          {
            v5[23] = v6;
            v9 = v5;
          }
          v12 = &v9[v6];
          if (v9 <= v7 && v12 > v7)
          {
LABEL_38:
            __break(1u);
LABEL_39:
            abort();
          }
          if (v6)
            memmove(v9, v7, v6);
          *v12 = 0;
          *((_DWORD *)v5 + 6) = v8;
          v5[28] = 0;
          v5 += 32;
        }
        *(_QWORD *)(a2 + 8) = v5;
      }
      v3 += 5;
    }
    while (v3 != v4);
    v3 = (void **)__p;
  }
  if (v3)
  {
    v14 = v17;
    v15 = v3;
    if (v17 != v3)
    {
      do
      {
        if (*((char *)v14 - 17) < 0)
          operator delete(*(v14 - 5));
        v14 -= 5;
      }
      while (v14 != v3);
      v15 = __p;
    }
    v17 = v3;
    operator delete(v15);
  }
}

void cricket::CheckScalabilityModeValues(unint64_t a1@<X0>, const cricket::Codec *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  cricket::Codec *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const cricket::Codec *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  const void *v22;
  const cricket::Codec *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  const void *v31;
  char v32;
  std::string *v33;
  std::string::size_type v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string::size_type v42;
  size_t v43;
  __int128 *p_src;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char **v64;
  uint64_t v65;
  unint64_t v66;
  const cricket::Codec *v67;
  std::string v71;
  __int128 __src;
  std::string::size_type v73;

  v5 = a5;
  if (!a3 || (v6 = a1, v7 = *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104) == v7))
  {
LABEL_47:
    *(_DWORD *)v5 = 0;
    *(_BYTE *)(v5 + 38) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 29) = 0;
    return;
  }
  v8 = (cricket::Codec *)a4;
  v9 = 0;
  v10 = 216 * a3;
  v67 = (const cricket::Codec *)((char *)a2 + 216 * a3);
  v64 = (char **)(a4 + 96);
  v65 = 216 * a3;
  while (!*(_BYTE *)(v7 + 272 * v9 + 264))
  {
LABEL_14:
    v7 = *(_QWORD *)(v6 + 96);
    if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v6 + 104) - v7) >> 4) <= v9)
      goto LABEL_84;
    v66 = 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v6 + 104) - v7) >> 4);
    if (*(_BYTE *)(v7 + 272 * v9 + 104))
    {
      if (*(_BYTE *)(a4 + 216))
      {
        v15 = *(_QWORD *)(a4 + 88);
        v16 = (char *)v64;
        if ((v15 & 1) != 0)
          v16 = *v64;
        if (v15 < 2)
        {
LABEL_56:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
            *(_QWORD *)&__src = "INVALID_MODIFICATION";
            *((_QWORD *)&__src + 1) = 20;
            rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v46, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
          }
          *(_DWORD *)a5 = 7;
          a1 = (unint64_t)operator new(0x60uLL);
          *(_QWORD *)(a5 + 8) = a1;
          *(_OWORD *)(a5 + 16) = xmmword_208F0BC30;
          if (a1 > (unint64_t)"Attempted to set RtpParameters scalabilityMode to an unsupported value for the current codecs."
            || a1 + 94 <= (unint64_t)"Attempted to set RtpParameters scalabilityMode to an unsupported value for t"
                                            "he current codecs.")
          {
            goto LABEL_60;
          }
          goto LABEL_84;
        }
        v17 = v15 >> 1;
        while (1)
        {
          v18 = *v16;
          if (v18 >= 0x22)
            break;
          v19 = v18;
          v20 = *(_QWORD *)((char *)&unk_208F0BCC0 + v19 * 8);
          a1 = (unint64_t)off_24C0B6AB8[v19];
          if (*(char *)(v7 + 272 * v9 + 103) < 0)
          {
            v21 = *(_QWORD *)(v7 + 272 * v9 + 88);
            if (v21 < 0)
              goto LABEL_84;
            v22 = *(const void **)(v7 + 272 * v9 + 80);
            if (v21)
            {
              if (!v22)
                goto LABEL_84;
            }
          }
          else
          {
            v21 = *(unsigned __int8 *)(v7 + 272 * v9 + 103);
            v22 = (const void *)(v7 + 272 * v9 + 80);
          }
          if (v20 == v21)
          {
            a1 = memcmp((const void *)a1, v22, v20);
            if (!(_DWORD)a1)
              goto LABEL_46;
          }
          ++v16;
          if (!--v17)
            goto LABEL_56;
        }
      }
      else
      {
        v23 = a2;
        do
        {
          v24 = *((_QWORD *)v23 + 11);
          v25 = (char *)v23 + 96;
          if ((v24 & 1) != 0)
            v25 = *(char **)v25;
          if (v24 >= 2)
          {
            v26 = v24 >> 1;
            do
            {
              v27 = *v25;
              if (v27 >= 0x22)
                goto LABEL_85;
              v28 = v27;
              v29 = *(_QWORD *)((char *)&unk_208F0BCC0 + v28 * 8);
              a1 = (unint64_t)off_24C0B6AB8[v28];
              if (*(char *)(v7 + 272 * v9 + 103) < 0)
              {
                v30 = *(_QWORD *)(v7 + 272 * v9 + 88);
                if (v30 < 0)
                  goto LABEL_84;
                v31 = *(const void **)(v7 + 272 * v9 + 80);
                if (v30)
                {
                  if (!v31)
                    goto LABEL_84;
                }
              }
              else
              {
                v30 = *(unsigned __int8 *)(v7 + 272 * v9 + 103);
                v31 = (const void *)(v7 + 272 * v9 + 80);
              }
              if (v29 == v30)
              {
                a1 = memcmp((const void *)a1, v31, v29);
                if (!(_DWORD)a1)
                  goto LABEL_46;
              }
              ++v25;
            }
            while (--v26);
          }
          v23 = (const cricket::Codec *)((char *)v23 + 216);
        }
        while (v23 != v67);
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          *(_QWORD *)&__src = "INVALID_MODIFICATION";
          *((_QWORD *)&__src + 1) = 20;
          rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v57, v58, v59, v60, v61, v62, v63, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
        }
        *(_DWORD *)a5 = 7;
        a1 = (unint64_t)operator new(0x60uLL);
        *(_QWORD *)(a5 + 8) = a1;
        *(_OWORD *)(a5 + 16) = xmmword_208F0BC30;
        if (a1 > (unint64_t)"Attempted to set RtpParameters scalabilityMode to an unsupported value for the current codecs."
          || a1 + 94 <= (unint64_t)"Attempted to set RtpParameters scalabilityMode to an unsupported value for the"
                                          " current codecs.")
        {
LABEL_60:
          strcpy((char *)a1, "Attempted to set RtpParameters scalabilityMode to an unsupported value for the current codecs.");
          *(_DWORD *)(a5 + 32) = 0;
          *(_BYTE *)(a5 + 36) = 0;
          *(_BYTE *)(a5 + 38) = 0;
          return;
        }
LABEL_84:
        __break(1u);
      }
LABEL_85:
      rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)a1);
    }
LABEL_46:
    ++v9;
    v10 = v65;
    v5 = a5;
    v8 = (cricket::Codec *)a4;
    if (v9 >= v66)
      goto LABEL_47;
  }
  v11 = v10;
  v12 = a2;
  do
  {
    v13 = *(_QWORD *)(v6 + 96);
    if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v6 + 104) - v13) >> 4) <= v9)
      goto LABEL_84;
    v14 = v13 + 272 * v9;
    if (!*(_BYTE *)(v14 + 264))
      goto LABEL_84;
    a1 = cricket::Codec::MatchesRtpCodec((uint64_t)v12, v14 + 160);
    if ((_DWORD)a1)
    {
      if (*((_BYTE *)v8 + 216))
      {
        a1 = cricket::Codec::operator=((uint64_t)v8, (uint64_t)v12);
      }
      else
      {
        a1 = (unint64_t)cricket::Codec::Codec(v8, v12);
        *((_BYTE *)v8 + 216) = 1;
      }
      goto LABEL_14;
    }
    v12 = (const cricket::Codec *)((char *)v12 + 216);
    v11 -= 216;
  }
  while (v11);
  v32 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>();
  if ((v32 & 1) == 0)
  {
    std::to_string(&v71, v9);
    v33 = std::string::insert(&v71, 0, "Attempted to use an unsupported codec for layer ");
    v34 = v33->__r_.__value_.__r.__words[2];
    __src = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v73 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
    if (SHIBYTE(v73) < 0)
      operator delete((void *)__src);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
  }
  std::to_string(&v71, v9);
  a1 = (unint64_t)std::string::insert(&v71, 0, "Attempted to use an unsupported codec for layer ");
  v42 = *(_QWORD *)(a1 + 16);
  __src = *(_OWORD *)a1;
  v73 = v42;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v43 = HIBYTE(v73);
  if (SHIBYTE(v73) < 0)
  {
    v45 = *((_QWORD *)&__src + 1);
    if ((*((_QWORD *)&__src + 1) & 0x8000000000000000) != 0)
      goto LABEL_84;
    p_src = (__int128 *)__src;
    if (*((_QWORD *)&__src + 1))
    {
      if (!(_QWORD)__src)
        goto LABEL_84;
    }
    *(_DWORD *)v5 = 7;
    if (v45 >= 0x7FFFFFFFFFFFFFF8)
      abort();
  }
  else
  {
    *(_DWORD *)v5 = 7;
    p_src = &__src;
    v45 = v43;
  }
  if (v45 > 0x16)
  {
    v54 = (v45 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v54 = v45 | 7;
    v55 = v54 + 1;
    a1 = (unint64_t)operator new(v54 + 1);
    v56 = v55 | 0x8000000000000000;
    v5 = a5;
    *(_QWORD *)(a5 + 16) = v45;
    *(_QWORD *)(a5 + 24) = v56;
    *(_QWORD *)(a5 + 8) = a1;
    v53 = (__int128 *)(a1 + v45);
    if (a1 > (unint64_t)p_src)
      goto LABEL_72;
LABEL_71:
    if (v53 > p_src)
      goto LABEL_84;
    goto LABEL_72;
  }
  a1 = v5 + 8;
  *(_BYTE *)(v5 + 31) = v45;
  v53 = (__int128 *)(v5 + 8 + v45);
  if (v5 + 8 <= (unint64_t)p_src)
    goto LABEL_71;
LABEL_72:
  if (v45)
    memmove((void *)a1, p_src, v45);
  *(_BYTE *)v53 = 0;
  *(_DWORD *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 36) = 0;
  *(_BYTE *)(v5 + 38) = 0;
  if ((v43 & 0x80) != 0)
  {
    operator delete((void *)__src);
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
  }
  else if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return;
  }
  operator delete(v71.__r_.__value_.__l.__data_);
}

void cricket::CheckRtpParametersValues(cricket::Codec *a1@<X3>, unint64_t a2@<X0>, const cricket::Codec *a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  const cricket::Codec *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _BYTE v76[216];
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 104);
  if (v10 == v11)
    goto LABEL_57;
  if (*(double *)(v11 + 8) <= 0.0)
  {
LABEL_64:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v52, v53, v54, v55, v56, v57, v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
    *(_DWORD *)a5 = 4;
    v59 = (char *)operator new(0x68uLL);
    *(_QWORD *)(a5 + 8) = v59;
    *(_OWORD *)(a5 + 16) = xmmword_208F0BC40;
    if (v59 > "Attempted to set RtpParameters bitrate_priority to an invalid number. bitrate_priority must be > 0."
      || v59 + 99 <= "Attempted to set RtpParameters bitrate_priority to an invalid number. bitrate_priority must be > 0.")
    {
      strcpy(v59, "Attempted to set RtpParameters bitrate_priority to an invalid number. bitrate_priority must be > 0.");
      goto LABEL_69;
    }
    goto LABEL_81;
  }
  if (*(_BYTE *)(v11 + 72) && *(double *)(v11 + 64) < 1.0)
  {
LABEL_5:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
    *(_DWORD *)a5 = 4;
    v19 = (char *)operator new(0x78uLL);
    *(_QWORD *)(a5 + 8) = v19;
    *(_OWORD *)(a5 + 16) = xmmword_208F0BC50;
    if (v19 > "Attempted to set RtpParameters scale_resolution_down_by to an invalid value. scale_resolution_down_by must be >= 1.0"
      || v19 + 116 <= "Attempted to set RtpParameters scale_resolution_down_by to an invalid value. scale_resolution_down"
                      "_by must be >= 1.0")
    {
      strcpy(v19, "Attempted to set RtpParameters scale_resolution_down_by to an invalid value. scale_resolution_down_by must be >= 1.0");
      goto LABEL_69;
    }
    goto LABEL_81;
  }
  if (*(_BYTE *)(v11 + 48) && *(double *)(v11 + 40) < 0.0)
  {
LABEL_12:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
    *(_DWORD *)a5 = 4;
    v27 = (char *)operator new(0x60uLL);
    *(_QWORD *)(a5 + 8) = v27;
    *(_OWORD *)(a5 + 16) = xmmword_208F0BC30;
    if (v27 > "Attempted to set RtpParameters max_framerate to an invalid value. max_framerate must be >= 0.0"
      || v27 + 94 <= "Attempted to set RtpParameters max_framerate to an invalid value. max_framerate must be >= 0.0")
    {
      strcpy(v27, "Attempted to set RtpParameters max_framerate to an invalid value. max_framerate must be >= 0.0");
      goto LABEL_69;
    }
    goto LABEL_81;
  }
  if (*(_BYTE *)(v11 + 32) && *(_BYTE *)(v11 + 24) && *(_DWORD *)(v11 + 20) < *(_DWORD *)(v11 + 28))
  {
LABEL_20:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
    *(_DWORD *)a5 = 4;
    v35 = (char *)operator new(0x48uLL);
    *(_QWORD *)(a5 + 8) = v35;
    *(_OWORD *)(a5 + 16) = xmmword_208F0BC60;
    if (v35 > "Attempted to set RtpParameters min bitrate larger than max bitrate."
      || v35 + 67 <= "Attempted to set RtpParameters min bitrate larger than max bitrate.")
    {
      strcpy(v35, "Attempted to set RtpParameters min bitrate larger than max bitrate.");
      goto LABEL_69;
    }
    goto LABEL_81;
  }
  if (*(_BYTE *)(v11 + 60) && (*(_DWORD *)(v11 + 56) - 5) < 0xFFFFFFFC)
  {
LABEL_27:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v36, v37, v38, v39, v40, v41, v42, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
    *(_DWORD *)a5 = 4;
    v43 = (char *)operator new(0x50uLL);
    *(_QWORD *)(a5 + 8) = v43;
    *(_OWORD *)(a5 + 16) = xmmword_208F0BC70;
    if (v43 > "Attempted to set RtpParameters num_temporal_layers to an invalid number."
      || v43 + 72 <= "Attempted to set RtpParameters num_temporal_layers to an invalid number.")
    {
      strcpy(v43, "Attempted to set RtpParameters num_temporal_layers to an invalid number.");
      goto LABEL_69;
    }
    goto LABEL_81;
  }
  if (*(_BYTE *)(v11 + 72))
    v44 = *(_BYTE *)(v11 + 120) == 0;
  else
    v44 = 1;
  if (!v44)
  {
LABEL_71:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v60, v61, v62, v63, v64, v65, v66, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
    *(_DWORD *)a5 = 4;
    v67 = (char *)operator new(0x58uLL);
    *(_QWORD *)(a5 + 8) = v67;
    *(_OWORD *)(a5 + 16) = xmmword_208F0BC80;
    if (v67 > "Attempted to set scale_resolution_down_by and requested_resolution simultaniously."
      || v67 + 82 <= "Attempted to set scale_resolution_down_by and requested_resolution simultaniously.")
    {
      strcpy(v67, "Attempted to set scale_resolution_down_by and requested_resolution simultaniously.");
      goto LABEL_69;
    }
LABEL_81:
    __break(1u);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((v10 - v11) >> 4) < 2)
  {
LABEL_57:
    v76[0] = 0;
    v77 = 0;
    if (*((_BYTE *)a1 + 216))
    {
      cricket::Codec::Codec((cricket::Codec *)v76, a1);
      v77 = 1;
    }
    if (a4)
      v51 = a3;
    else
      v51 = 0;
    cricket::CheckScalabilityModeValues(a2, v51, a4, (uint64_t)v76, a5);
    if (v77)
      cricket::Codec::~Codec((cricket::Codec *)v76);
    return;
  }
  v45 = 1;
  v46 = 536;
  while (1)
  {
    v47 = v11 + v46;
    if (*(double *)(v11 + v46 - 256) <= 0.0)
      goto LABEL_64;
    v48 = *(unsigned __int8 *)(v47 - 192);
    if (*(_BYTE *)(v47 - 192) && *(double *)(v47 - 200) < 1.0)
      goto LABEL_5;
    v49 = v11 + v46;
    if (*(_BYTE *)(v11 + v46 - 216) && *(double *)(v49 - 224) < 0.0)
      goto LABEL_12;
    if (*(_BYTE *)(v49 - 232) && *(_BYTE *)(v11 + v46 - 240) && *(_DWORD *)(v11 + v46 - 244) < *(_DWORD *)(v49 - 236))
      goto LABEL_20;
    v50 = v11 + v46;
    if (*(_BYTE *)(v11 + v46 - 204) && (*(_DWORD *)(v50 - 208) - 5) <= 0xFFFFFFFB)
      goto LABEL_27;
    if (v48 && *(_BYTE *)(v50 - 144))
      goto LABEL_71;
    if (!*(_BYTE *)(v11 + v46 - 272) || !*(_BYTE *)(v11 + v46))
    {
      if ((*(_BYTE *)(v11 + v46 - 272) != 0) != (*(_BYTE *)(v11 + v46) != 0))
        break;
      goto LABEL_40;
    }
    if (!webrtc::RtpCodec::operator==(v11 + v46 - 376, v11 + v46 - 104))
      break;
    v11 = *(_QWORD *)(a2 + 96);
    v10 = *(_QWORD *)(a2 + 104);
LABEL_40:
    ++v45;
    v46 += 272;
    if (v45 >= 0xF0F0F0F0F0F0F0F1 * ((v10 - v11) >> 4))
      goto LABEL_57;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v68, v69, v70, v71, v72, v73, v74, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
  *(_DWORD *)a5 = 1;
  v75 = (char *)operator new(0x48uLL);
  *(_QWORD *)(a5 + 8) = v75;
  *(_OWORD *)(a5 + 16) = xmmword_208F0BC90;
  if (v75 <= "Attempted to use different codec values for different encodings."
    && v75 + 64 > "Attempted to use different codec values for different encodings.")
  {
    goto LABEL_81;
  }
  strcpy(v75, "Attempted to use different codec values for different encodings.");
LABEL_69:
  *(_DWORD *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 36) = 0;
  *(_BYTE *)(a5 + 38) = 0;
}

void cricket::CheckRtpParametersInvalidModificationAndValues(cricket::Codec *a1@<X4>, uint64_t a2@<X0>, unint64_t a3@<X1>, const cricket::Codec *a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const void **v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 **v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  int v40;
  unsigned __int8 *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  _BOOL4 v54;
  int v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  const cricket::Codec *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int v84[2];
  _BYTE v85[216];
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a3 + 96);
  v7 = *(_QWORD *)(a3 + 104);
  v10 = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 104);
  if (v7 - v8 != v9 - v10)
  {
    v25 = "Attempted to set RtpParameters with different encoding count";
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      goto LABEL_82;
    goto LABEL_83;
  }
  v16 = *(unsigned __int8 *)(a2 + 124);
  if (*(_BYTE *)(a3 + 124))
    v17 = v16 == 0;
  else
    v17 = 1;
  if (v17)
  {
    if ((*(_BYTE *)(a3 + 124) != 0) != (v16 != 0))
      goto LABEL_81;
  }
  else if (*(_DWORD *)(a3 + 120) != *(_DWORD *)(a2 + 120))
  {
    goto LABEL_81;
  }
  v26 = *(unsigned __int8 *)(a3 + 151);
  v27 = *(_QWORD *)(a3 + 136);
  if ((v26 & 0x80u) == 0)
    v28 = *(unsigned __int8 *)(a3 + 151);
  else
    v28 = *(_QWORD *)(a3 + 136);
  v29 = *(unsigned __int8 *)(a2 + 151);
  v30 = (char)v29;
  if ((v29 & 0x80u) != 0)
    v29 = *(_QWORD *)(a2 + 136);
  if (v28 != v29)
  {
LABEL_81:
    v25 = "Attempted to set RtpParameters with modified RTCP parameters";
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_82:
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
LABEL_83:
    *(_DWORD *)a6 = 7;
    v56 = (char *)operator new(0x40uLL);
    *(_QWORD *)(a6 + 8) = v56;
    *(_OWORD *)(a6 + 16) = xmmword_208F086A0;
    if (v56 > v25 || v56 + 60 <= v25)
    {
      v57 = *((_OWORD *)v25 + 1);
      *(_OWORD *)v56 = *(_OWORD *)v25;
      *((_OWORD *)v56 + 1) = v57;
      *((_OWORD *)v56 + 2) = *((_OWORD *)v25 + 2);
      *(_OWORD *)(v56 + 44) = *(_OWORD *)(v25 + 44);
      v56[60] = 0;
LABEL_86:
      *(_DWORD *)(a6 + 32) = 0;
      *(_BYTE *)(a6 + 36) = 0;
      *(_BYTE *)(a6 + 38) = 0;
      return;
    }
    goto LABEL_115;
  }
  v31 = (const void **)(a3 + 128);
  if (v30 >= 0)
    v32 = (unsigned __int8 *)(a2 + 128);
  else
    v32 = *(unsigned __int8 **)(a2 + 128);
  if ((v26 & 0x80) != 0)
  {
    if (memcmp(*v31, v32, v27))
      goto LABEL_81;
  }
  else if ((_DWORD)v26)
  {
    while (*(unsigned __int8 *)v31 == *v32)
    {
      v31 = (const void **)((char *)v31 + 1);
      ++v32;
      if (!--v26)
        goto LABEL_27;
    }
    goto LABEL_81;
  }
LABEL_27:
  if (*(unsigned __int8 *)(a3 + 152) != *(unsigned __int8 *)(a2 + 152)
    || *(unsigned __int8 *)(a3 + 153) != *(unsigned __int8 *)(a2 + 153))
  {
    goto LABEL_81;
  }
  *(_QWORD *)v84 = a5;
  v34 = *(_QWORD *)(a3 + 72);
  v33 = *(_QWORD *)(a3 + 80);
  v36 = a2 + 72;
  v35 = *(unsigned __int8 ***)(a2 + 72);
  if (v33 - v34 != *(_QWORD *)(v36 + 8) - (_QWORD)v35)
  {
LABEL_88:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
    *(_DWORD *)a6 = 7;
    v65 = (char *)operator new(0x40uLL);
    *(_QWORD *)(a6 + 8) = v65;
    *(_OWORD *)(a6 + 16) = xmmword_208F0BCA0;
    if (v65 > "Attempted to set RtpParameters with modified header extensions"
      || v65 + 62 <= "Attempted to set RtpParameters with modified header extensions")
    {
      strcpy(v65, "Attempted to set RtpParameters with modified header extensions");
      goto LABEL_86;
    }
LABEL_115:
    __break(1u);
  }
  if (v34 != v33)
  {
    v83 = *(_QWORD *)(a3 + 80);
    do
    {
      v37 = *(unsigned __int8 *)(v34 + 23);
      if ((v37 & 0x80u) == 0)
        v38 = (unsigned __int8 *)*(unsigned __int8 *)(v34 + 23);
      else
        v38 = *(unsigned __int8 **)(v34 + 8);
      v39 = (unsigned __int8 *)*((unsigned __int8 *)v35 + 23);
      v40 = (char)v39;
      if ((char)v39 < 0)
        v39 = v35[1];
      if (v38 != v39)
        goto LABEL_88;
      if (v40 >= 0)
        v41 = (unsigned __int8 *)v35;
      else
        v41 = *v35;
      if ((v37 & 0x80) != 0)
      {
        v43 = memcmp(*(const void **)v34, v41, *(_QWORD *)(v34 + 8));
        v33 = v83;
        if (v43)
          goto LABEL_88;
      }
      else if (*(_BYTE *)(v34 + 23))
      {
        v42 = 0;
        while (*(unsigned __int8 *)(v34 + v42) == v41[v42])
        {
          if (v37 == ++v42)
            goto LABEL_48;
        }
        goto LABEL_88;
      }
LABEL_48:
      if (*(_DWORD *)(v34 + 24) != *((_DWORD *)v35 + 6)
        || *(unsigned __int8 *)(v34 + 28) != *((unsigned __int8 *)v35 + 28))
      {
        goto LABEL_88;
      }
      v34 += 32;
      v35 += 4;
    }
    while (v34 != v33);
  }
  if (v8 != v7 && v10 != v9)
  {
    v44 = v10;
    v45 = v8;
    do
    {
      v46 = *(unsigned __int8 *)(v44 + 151);
      if ((v46 & 0x80u) == 0)
        v47 = *(unsigned __int8 *)(v44 + 151);
      else
        v47 = *(_QWORD *)(v44 + 136);
      v48 = *(unsigned __int8 *)(v45 + 151);
      v49 = (char)v48;
      if ((v48 & 0x80u) != 0)
        v48 = *(_QWORD *)(v45 + 136);
      if (v47 != v48)
        goto LABEL_105;
      if (v49 >= 0)
        v50 = (unsigned __int8 *)(v45 + 128);
      else
        v50 = *(unsigned __int8 **)(v45 + 128);
      if ((v46 & 0x80) != 0)
      {
        if (memcmp(*(const void **)(v44 + 128), v50, *(_QWORD *)(v44 + 136)))
          goto LABEL_105;
      }
      else if (*(_BYTE *)(v44 + 151))
      {
        v51 = 0;
        while (*(unsigned __int8 *)(v44 + v51 + 128) == v50[v51])
        {
          if (v46 == ++v51)
            goto LABEL_70;
        }
        goto LABEL_105;
      }
LABEL_70:
      v44 += 272;
      v45 += 272;
    }
    while (v44 != v9 && v45 != v7);
    if (v44 == v9 && v45 == v7)
    {
      v52 = *(_QWORD *)v84;
      while (1)
      {
        v53 = *(_BYTE *)(v10 + 4) != 0;
        v54 = *(unsigned __int8 *)(v8 + 4) != 0;
        v55 = *(_DWORD *)v10 == *(_DWORD *)v8;
        if (!v53 || !v54)
          v55 = v53 ^ v54 ^ 1;
        if (v55 != 1)
          goto LABEL_110;
        v10 += 272;
        v8 += 272;
        if (v10 == v9 || v8 == v7)
          goto LABEL_96;
      }
    }
LABEL_105:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v67, v68, v69, v70, v71, v72, v73, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
    *(_DWORD *)a6 = 7;
    v74 = (char *)operator new(0x38uLL);
    *(_QWORD *)(a6 + 8) = v74;
    *(_OWORD *)(a6 + 16) = xmmword_208F08650;
    if (v74 > "Attempted to change RID values in the encodings."
      || v74 + 48 <= "Attempted to change RID values in the encodings.")
    {
      strcpy(v74, "Attempted to change RID values in the encodings.");
      goto LABEL_86;
    }
    goto LABEL_115;
  }
  if (v8 != v7 || v10 != v9)
    goto LABEL_105;
  v8 = v7;
  v10 = v9;
  v52 = *(_QWORD *)v84;
LABEL_96:
  if (v10 != v9 || v8 != v7)
  {
LABEL_110:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v75, v76, v77, v78, v79, v80, v81, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/media_engine.cc");
    *(_DWORD *)a6 = 7;
    v82 = (char *)operator new(0x38uLL);
    *(_QWORD *)(a6 + 8) = v82;
    *(_OWORD *)(a6 + 16) = xmmword_208F0BCB0;
    if (v82 > "Attempted to set RtpParameters with modified SSRC"
      || v82 + 49 <= "Attempted to set RtpParameters with modified SSRC")
    {
      strcpy(v82, "Attempted to set RtpParameters with modified SSRC");
      goto LABEL_86;
    }
    goto LABEL_115;
  }
  v85[0] = 0;
  v86 = 0;
  if (*((_BYTE *)a1 + 216))
  {
    cricket::Codec::Codec((cricket::Codec *)v85, a1);
    v86 = 1;
  }
  if (v52)
    v66 = a4;
  else
    v66 = 0;
  cricket::CheckRtpParametersValues((cricket::Codec *)v85, a3, v66, v52, a6);
  if (v86)
    cricket::Codec::~Codec((cricket::Codec *)v85);
}

void cricket::CompositeMediaEngine::~CompositeMediaEngine(cricket::CompositeMediaEngine *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C0B6A80;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24C0B6A80;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::CompositeMediaEngine::Init(cricket::CompositeMediaEngine *this)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(cricket::CompositeMediaEngine *))(*(_QWORD *)this + 24))(this);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  return 1;
}

uint64_t cricket::CompositeMediaEngine::voice(cricket::CompositeMediaEngine *this)
{
  return *((_QWORD *)this + 2);
}

{
  return *((_QWORD *)this + 2);
}

uint64_t cricket::CompositeMediaEngine::video(cricket::CompositeMediaEngine *this)
{
  return *((_QWORD *)this + 3);
}

{
  return *((_QWORD *)this + 3);
}

char *std::vector<webrtc::RtpEncodingParameters>::__push_back_slow_path<webrtc::RtpEncodingParameters const&>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  __int128 v9;
  char *v10;
  __int128 v11;
  std::string *v12;
  std::string *v13;
  __int16 v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::string *v25;
  const std::string::value_type **v26;
  __int128 v27;
  uint64_t v28;
  std::string *v29;
  const std::string::value_type **v30;
  __int128 v31;
  char *v32;
  char *v33;

  v2 = 0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0xF0F0F0F0F0F0F0)
    abort();
  if (0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x78787878787878)
    v5 = 0xF0F0F0F0F0F0F0;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_41:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0xF0F0F0F0F0F0F0)
    goto LABEL_41;
  v7 = 272 * v5;
  v8 = (char *)operator new(272 * v5);
  v9 = *(_OWORD *)(a2 + 48);
  v10 = &v8[272 * v2];
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v10 + 3) = v9;
  *(_OWORD *)(v10 + 57) = *(_OWORD *)(a2 + 57);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  v10[80] = 0;
  v12 = (std::string *)(v10 + 80);
  v10[104] = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 80);
      *((_QWORD *)v10 + 12) = *(_QWORD *)(a2 + 96);
    }
    v10[104] = 1;
  }
  *((_QWORD *)v10 + 14) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(v10 + 117) = *(_QWORD *)(a2 + 117);
  v13 = (std::string *)(v10 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 128);
    *((_QWORD *)v10 + 18) = *(_QWORD *)(a2 + 144);
  }
  v14 = *(_WORD *)(a2 + 152);
  v10[160] = 0;
  *((_WORD *)v10 + 76) = v14;
  v10[264] = 0;
  if (*(_BYTE *)(a2 + 264))
  {
    webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v10 + 160), (const webrtc::RtpCodec *)(a2 + 160));
    v10[264] = 1;
  }
  v15 = &v8[v7];
  v16 = v10 + 272;
  v18 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v10;
    a1[1] = v16;
    a1[2] = v15;
    if (!v17)
      return v10 + 272;
    goto LABEL_35;
  }
  v19 = 0;
  do
  {
    v20 = &v10[v19];
    v21 = &v17[v19];
    v22 = *(_OWORD *)&v17[v19 - 256];
    v23 = *(_OWORD *)&v17[v19 - 240];
    v24 = *(_OWORD *)&v17[v19 - 224];
    *(_OWORD *)(v20 - 215) = *(_OWORD *)&v17[v19 - 215];
    *((_OWORD *)v20 - 15) = v23;
    *((_OWORD *)v20 - 14) = v24;
    *((_OWORD *)v20 - 16) = v22;
    *(_OWORD *)&v10[v19 - 272] = *(_OWORD *)&v17[v19 - 272];
    v10[v19 - 192] = 0;
    v25 = (std::string *)&v10[v19 - 192];
    *(v20 - 168) = 0;
    if (v17[v19 - 168])
    {
      v26 = (const std::string::value_type **)(v21 - 192);
      if (*(v21 - 169) < 0)
      {
        std::string::__init_copy_ctor_external(v25, *v26, *(_QWORD *)&v17[v19 - 184]);
      }
      else
      {
        v27 = *(_OWORD *)v26;
        *(_QWORD *)&v10[v19 - 176] = *((_QWORD *)v21 - 22);
        *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v27;
      }
      *(v20 - 168) = 1;
    }
    v28 = *((_QWORD *)v21 - 20);
    *(_QWORD *)(v20 - 155) = *(_QWORD *)(v21 - 155);
    *((_QWORD *)v20 - 20) = v28;
    v29 = (std::string *)(v20 - 144);
    v30 = (const std::string::value_type **)(v21 - 144);
    if (*(v21 - 121) < 0)
    {
      std::string::__init_copy_ctor_external(v29, *v30, *(_QWORD *)&v17[v19 - 136]);
    }
    else
    {
      v31 = *(_OWORD *)v30;
      *((_QWORD *)v20 - 16) = *((_QWORD *)v21 - 16);
      *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
    }
    v32 = &v10[v19];
    *((_WORD *)v32 - 60) = *(_WORD *)&v17[v19 - 120];
    v10[v19 - 112] = 0;
    *(v32 - 8) = 0;
    if (v17[v19 - 8])
    {
      webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v10[v19 - 112], (const webrtc::RtpCodec *)&v17[v19 - 112]);
      *(v32 - 8) = 1;
    }
    v19 -= 272;
  }
  while (&v17[v19] != v18);
  v17 = (char *)*a1;
  v33 = (char *)a1[1];
  *a1 = &v10[v19];
  a1[1] = v16;
  a1[2] = v15;
  while (v33 != v17)
    webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v33 - 272));
  if (v17)
LABEL_35:
    operator delete(v17);
  return v10 + 272;
}

void std::vector<webrtc::RtpEncodingParameters>::__assign_with_size[abi:sn180100]<webrtc::RtpEncodingParameters*,webrtc::RtpEncodingParameters*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  std::string *v22;
  const std::string::value_type **v23;
  std::string *v24;
  const std::string::value_type **v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  std::string *v36;
  const std::string::value_type **v37;
  __int128 v38;
  uint64_t v39;
  std::string *v40;
  const std::string::value_type **v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v8 = a1[2];
  v9 = *a1;
  if (0xF0F0F0F0F0F0F0F1 * ((v8 - *a1) >> 4) < a4)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v10 - 272));
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 <= 0xF0F0F0F0F0F0F0)
    {
      v12 = 0xF0F0F0F0F0F0F0F1 * (v8 >> 4);
      v13 = 2 * v12;
      if (2 * v12 <= a4)
        v13 = a4;
      v14 = v12 >= 0x78787878787878 ? 0xF0F0F0F0F0F0F0 : v13;
      if (v14 <= 0xF0F0F0F0F0F0F0)
      {
        v15 = 272 * v14;
        v16 = operator new(272 * v14);
        *a1 = (uint64_t)v16;
        a1[1] = (uint64_t)v16;
        a1[2] = (uint64_t)&v16[v15];
        if (a2 != a3)
        {
          v17 = 0;
          do
          {
            v18 = &v16[v17];
            v19 = a2 + v17;
            v20 = *(_OWORD *)(a2 + v17 + 48);
            *((_OWORD *)v18 + 2) = *(_OWORD *)(a2 + v17 + 32);
            *((_OWORD *)v18 + 3) = v20;
            *(_OWORD *)(v18 + 57) = *(_OWORD *)(a2 + v17 + 57);
            v21 = *(_OWORD *)(a2 + v17 + 16);
            *(_OWORD *)v18 = *(_OWORD *)(a2 + v17);
            *((_OWORD *)v18 + 1) = v21;
            v16[v17 + 80] = 0;
            v22 = (std::string *)&v16[v17 + 80];
            v18[104] = 0;
            if (*(_BYTE *)(a2 + v17 + 104))
            {
              v23 = (const std::string::value_type **)(v19 + 80);
              if (*(char *)(v19 + 103) < 0)
              {
                std::string::__init_copy_ctor_external(v22, *v23, *(_QWORD *)(a2 + v17 + 88));
              }
              else
              {
                *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)v23;
                *(_QWORD *)&v16[v17 + 96] = *(_QWORD *)(v19 + 96);
              }
              v18[104] = 1;
            }
            *((_QWORD *)v18 + 14) = *(_QWORD *)(v19 + 112);
            *(_QWORD *)(v18 + 117) = *(_QWORD *)(v19 + 117);
            v24 = (std::string *)(v18 + 128);
            v25 = (const std::string::value_type **)(v19 + 128);
            if (*(char *)(v19 + 151) < 0)
            {
              std::string::__init_copy_ctor_external(v24, *v25, *(_QWORD *)(a2 + v17 + 136));
            }
            else
            {
              *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)v25;
              *((_QWORD *)v18 + 18) = *(_QWORD *)(v19 + 144);
            }
            v26 = &v16[v17];
            *((_WORD *)v26 + 76) = *(_WORD *)(v19 + 152);
            v16[v17 + 160] = 0;
            v26[264] = 0;
            if (*(_BYTE *)(v19 + 264))
            {
              webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v16[v17 + 160], (const webrtc::RtpCodec *)(a2 + v17 + 160));
              v26[264] = 1;
            }
            v17 += 272;
          }
          while (v19 + 272 != a3);
          v16 += v17;
        }
        a1[1] = (uint64_t)v16;
        return;
      }
    }
LABEL_50:
    abort();
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[1] - v9) >> 4) >= a4)
  {
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,0>(a2, a3, v9);
    v45 = v44;
    v46 = a1[1];
    if (v46 != v44)
    {
      do
        webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v46 - 272));
      while (v46 != v45);
    }
    a1[1] = v45;
    return;
  }
  v27 = a2 + 16 * ((a1[1] - v9) >> 4);
  std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,0>(a2, v27, v9);
  v28 = a1[1];
  if (v27 == a3)
    goto LABEL_48;
  v29 = 0;
  do
  {
    v30 = (_OWORD *)(v28 + v29);
    if (!(v28 + v29))
    {
      __break(1u);
      goto LABEL_50;
    }
    v31 = v27 + v29;
    *v30 = *(_OWORD *)(v27 + v29);
    v32 = *(_OWORD *)(v27 + v29 + 16);
    v33 = *(_OWORD *)(v27 + v29 + 32);
    v34 = *(_OWORD *)(v27 + v29 + 48);
    *(_OWORD *)((char *)v30 + 57) = *(_OWORD *)(v27 + v29 + 57);
    v30[2] = v33;
    v30[3] = v34;
    v30[1] = v32;
    v35 = v28 + v29;
    *(_BYTE *)(v28 + v29 + 80) = 0;
    v36 = (std::string *)(v28 + v29 + 80);
    *(_BYTE *)(v28 + v29 + 104) = 0;
    if (*(_BYTE *)(v27 + v29 + 104))
    {
      v37 = (const std::string::value_type **)(v31 + 80);
      if (*(char *)(v27 + v29 + 103) < 0)
      {
        std::string::__init_copy_ctor_external(v36, *v37, *(_QWORD *)(v27 + v29 + 88));
      }
      else
      {
        v38 = *(_OWORD *)v37;
        *(_QWORD *)(v28 + v29 + 96) = *(_QWORD *)(v31 + 96);
        *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v38;
      }
      *(_BYTE *)(v35 + 104) = 1;
    }
    v39 = *(_QWORD *)(v31 + 112);
    *(_QWORD *)(v35 + 117) = *(_QWORD *)(v31 + 117);
    *(_QWORD *)(v35 + 112) = v39;
    v40 = (std::string *)(v35 + 128);
    v41 = (const std::string::value_type **)(v27 + v29 + 128);
    if (*(char *)(v31 + 151) < 0)
    {
      std::string::__init_copy_ctor_external(v40, *v41, *(_QWORD *)(v27 + v29 + 136));
    }
    else
    {
      v42 = *(_OWORD *)v41;
      *(_QWORD *)(v35 + 144) = *(_QWORD *)(v27 + v29 + 144);
      *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v42;
    }
    v43 = v28 + v29;
    *(_WORD *)(v43 + 152) = *(_WORD *)(v31 + 152);
    *(_BYTE *)(v28 + v29 + 160) = 0;
    *(_BYTE *)(v43 + 264) = 0;
    if (*(_BYTE *)(v31 + 264))
    {
      webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v28 + v29 + 160), (const webrtc::RtpCodec *)(v27 + v29 + 160));
      *(_BYTE *)(v43 + 264) = 1;
    }
    v29 += 272;
  }
  while (v31 + 272 != a3);
  v28 += v29;
LABEL_48:
  a1[1] = v28;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const std::string::value_type *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  std::string *v15;
  char **v16;
  char v17;
  __int128 v18;

  if (a1 == a2)
    return a1;
  v5 = a2;
  v6 = 0;
  do
  {
    v9 = a1 + v6;
    v10 = a3 + v6;
    *(_OWORD *)v10 = *(_OWORD *)(a1 + v6);
    v11 = *(_OWORD *)(a1 + v6 + 16);
    v12 = *(_OWORD *)(a1 + v6 + 32);
    v13 = *(_OWORD *)(a1 + v6 + 48);
    *(_OWORD *)(v10 + 57) = *(_OWORD *)(a1 + v6 + 57);
    *(_OWORD *)(v10 + 32) = v12;
    *(_OWORD *)(v10 + 48) = v13;
    *(_OWORD *)(v10 + 16) = v11;
    std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a3 + v6 + 80), (std::string *)(a1 + v6 + 80));
    v14 = *(_QWORD *)(a1 + v6 + 112);
    *(_QWORD *)(v10 + 117) = *(_QWORD *)(a1 + v6 + 117);
    *(_QWORD *)(v10 + 112) = v14;
    if (a3 != a1)
    {
      v15 = (std::string *)(v10 + 128);
      v16 = (char **)(v9 + 128);
      v17 = *(_BYTE *)(v9 + 151);
      if (*(char *)(v10 + 151) < 0)
      {
        if (v17 >= 0)
          v7 = (const std::string::value_type *)(v9 + 128);
        else
          v7 = *v16;
        if (v17 >= 0)
          v8 = *(unsigned __int8 *)(v9 + 151);
        else
          v8 = *(_QWORD *)(a1 + v6 + 136);
        std::string::__assign_no_alias<false>(v15, v7, v8);
      }
      else if ((*(_BYTE *)(v9 + 151) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v15, *v16, *(_QWORD *)(a1 + v6 + 136));
      }
      else
      {
        v18 = *(_OWORD *)v16;
        *(_QWORD *)(v10 + 144) = *(_QWORD *)(v9 + 144);
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v18;
      }
    }
    *(_WORD *)(v10 + 152) = *(_WORD *)(v9 + 152);
    std::__optional_storage_base<webrtc::RtpCodec,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<webrtc::RtpCodec,false> const&>((webrtc::RtpCodec *)(v10 + 160), (webrtc::RtpCodec *)(v9 + 160));
    v6 += 272;
  }
  while (v9 + 272 != v5);
  return v5;
}

void std::__optional_storage_base<webrtc::RtpCodec,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<webrtc::RtpCodec,false> const&>(webrtc::RtpCodec *this, webrtc::RtpCodec *a2)
{
  BOOL v4;
  void *v5;
  std::string *v6;
  char v7;
  __int128 v8;
  const std::string::value_type *v9;
  size_t v10;
  __int128 v11;

  if (*((unsigned __int8 *)this + 104) == *((unsigned __int8 *)a2 + 104))
  {
    if (*((_BYTE *)this + 104))
      v4 = this == a2;
    else
      v4 = 1;
    if (!v4)
    {
      v6 = (std::string *)((char *)this + 8);
      v7 = *((_BYTE *)a2 + 31);
      if (*((char *)this + 31) < 0)
      {
        if (v7 >= 0)
          v9 = (char *)a2 + 8;
        else
          v9 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
        if (v7 >= 0)
          v10 = *((unsigned __int8 *)a2 + 31);
        else
          v10 = *((_QWORD *)a2 + 2);
        std::string::__assign_no_alias<false>(v6, v9, v10);
      }
      else if ((*((_BYTE *)a2 + 31) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v6, *((char **)a2 + 1), *((_QWORD *)a2 + 2));
      }
      else
      {
        v8 = *(_OWORD *)((char *)a2 + 8);
        *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
      }
      v11 = *((_OWORD *)a2 + 2);
      *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
      *((_OWORD *)this + 2) = v11;
      std::vector<webrtc::RtcpFeedback>::__assign_with_size[abi:sn180100]<webrtc::RtcpFeedback*,webrtc::RtcpFeedback*>((uint64_t)this + 56, *((uint64_t **)a2 + 7), *((uint64_t **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2));
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)this + 80, *((char **)a2 + 10), (char *)a2 + 88);
    }
  }
  else if (*((_BYTE *)this + 104))
  {
    *(_QWORD *)this = off_24C0BCBF0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 80, *((_QWORD *)this + 11));
    v5 = (void *)*((_QWORD *)this + 7);
    if (v5)
    {
      *((_QWORD *)this + 8) = v5;
      operator delete(v5);
    }
    if (*((char *)this + 31) < 0)
      operator delete(*((void **)this + 1));
    *((_BYTE *)this + 104) = 0;
  }
  else
  {
    webrtc::RtpCodec::RtpCodec(this, a2);
    *((_BYTE *)this + 104) = 1;
  }
}

char *std::vector<webrtc::RtpExtension>::__emplace_back_slow_path<std::string const&,int const&>(void **a1, char *a2, int *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  int v26;
  std::string *v27;
  const std::string::value_type **v28;
  void **v29;
  int v31;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = (v3 - (_BYTE *)*a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
LABEL_39:
    abort();
  v8 = (_BYTE *)a1[2] - v4;
  if (v8 >> 4 > v6)
    v6 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v6 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    goto LABEL_38;
  if (v6 >> 59)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v11 = 32 * v6;
  v12 = (char *)operator new(32 * v6);
  v13 = v12;
  if ((a2[23] & 0x80000000) == 0)
  {
    v14 = a2[23];
    goto LABEL_14;
  }
  v14 = *((_QWORD *)a2 + 1);
  if ((v14 & 0x8000000000000000) != 0 || (a2 = *(char **)a2, v14) && !a2)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_39;
LABEL_14:
  v15 = &v12[32 * v5];
  v31 = *a3;
  if (v14 <= 0x16)
  {
    v15[23] = v14;
    v16 = &v12[32 * v5];
    v17 = &v15[v14];
    if (v15 > a2)
      goto LABEL_21;
    goto LABEL_20;
  }
  v18 = (v14 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v14 | 7) != 0x17)
    v18 = v14 | 7;
  v19 = v18 + 1;
  v16 = (char *)operator new(v18 + 1);
  *((_QWORD *)v15 + 1) = v14;
  *((_QWORD *)v15 + 2) = v19 | 0x8000000000000000;
  *(_QWORD *)v15 = v16;
  v17 = &v16[v14];
  if (v16 <= a2)
  {
LABEL_20:
    if (v17 <= a2)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_21:
  if (v14)
    memmove(v16, a2, v14);
  v20 = &v13[v11];
  *v17 = 0;
  v21 = &v13[32 * v5];
  *((_DWORD *)v21 + 6) = v31;
  v21[28] = 0;
  v22 = v15 + 32;
  if (v3 == v4)
  {
    *a1 = v15;
    a1[1] = v22;
    a1[2] = v20;
  }
  else
  {
    v23 = 0;
    do
    {
      v27 = (std::string *)&v15[v23 - 32];
      v28 = (const std::string::value_type **)&v3[v23 - 32];
      if (v3[v23 - 9] < 0)
      {
        std::string::__init_copy_ctor_external(v27, *v28, *(_QWORD *)&v3[v23 - 24]);
      }
      else
      {
        v24 = *(_OWORD *)v28;
        *(_QWORD *)&v15[v23 - 16] = *(_QWORD *)&v3[v23 - 16];
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v24;
      }
      v25 = &v15[v23];
      v26 = *(_DWORD *)&v3[v23 - 8];
      *(v25 - 4) = v3[v23 - 4];
      *((_DWORD *)v25 - 2) = v26;
      v23 -= 32;
    }
    while (&v3[v23] != v4);
    v3 = (char *)*a1;
    v29 = (void **)a1[1];
    *a1 = &v15[v23];
    a1[1] = v22;
    a1[2] = v20;
    while (v29 != (void **)v3)
    {
      if (*((char *)v29 - 9) < 0)
        operator delete(*(v29 - 4));
      v29 -= 4;
    }
  }
  if (v3)
    operator delete(v3);
  return v15 + 32;
}

uint64_t webrtc::RtpCodec::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  char v26;

  v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 31);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
    return 0;
  v8 = (const void **)(a1 + 8);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)(a2 + 8);
  else
    v9 = *(unsigned __int8 **)(a2 + 8);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 16)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  if (*(_BYTE *)(a1 + 40) && *(_BYTE *)(a2 + 40))
  {
    if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 40) != 0) != (*(_BYTE *)(a2 + 40) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 48) && *(_BYTE *)(a2 + 48))
  {
    if (*(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 48) != 0) != (*(_BYTE *)(a2 + 48) != 0))
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a2 + 56);
  if (v11 - v12 != *(_QWORD *)(a2 + 64) - v13)
    return 0;
  if (v12 != v11)
  {
    v14 = v13 + 4;
    v15 = v12 + 4;
    do
    {
      v16 = v15 - 4;
      if (*(_DWORD *)(v15 - 4) != *(_DWORD *)(v14 - 4))
        return 0;
      v17 = *(unsigned __int8 *)(v14 + 4);
      if (*(_BYTE *)(v15 + 4))
        v18 = v17 == 0;
      else
        v18 = 1;
      if (v18)
      {
        if ((*(_BYTE *)(v15 + 4) != 0) != (v17 != 0))
          return 0;
      }
      else if (*(_DWORD *)v15 != *(_DWORD *)v14)
      {
        return 0;
      }
      v14 += 12;
      v15 += 12;
    }
    while (v16 + 12 != v11);
  }
  if (*(_QWORD *)(a1 + 96) != *(_QWORD *)(a2 + 96))
    return 0;
  v19 = *(unsigned __int8 **)(a1 + 80);
  v20 = (unsigned __int8 *)(a1 + 88);
  if (v19 == v20)
    return 1;
  v21 = *(unsigned __int8 **)(a2 + 80);
  do
  {
    result = std::__equal_to::operator()[abi:sn180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>((uint64_t)&v26, v19 + 32, v21 + 32);
    if (!(_DWORD)result)
      break;
    v22 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
    v23 = v19;
    if (v22)
    {
      do
      {
        v19 = v22;
        v22 = *(unsigned __int8 **)v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        v19 = (unsigned __int8 *)*((_QWORD *)v23 + 2);
        v18 = *(_QWORD *)v19 == (_QWORD)v23;
        v23 = v19;
      }
      while (!v18);
    }
    v24 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = *(unsigned __int8 **)v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (unsigned __int8 *)*((_QWORD *)v21 + 2);
        v18 = *(_QWORD *)v25 == (_QWORD)v21;
        v21 = v25;
      }
      while (!v18);
    }
    v21 = v25;
  }
  while (v19 != v20);
  return result;
}

uint64_t webrtc::media_optimization::VCMProtectionMethod::RequiredPacketLossER(webrtc::media_optimization::VCMProtectionMethod *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t webrtc::media_optimization::VCMProtectionMethod::RequiredProtectionFactorK(webrtc::media_optimization::VCMProtectionMethod *this)
{
  return *((unsigned __int8 *)this + 9);
}

uint64_t webrtc::media_optimization::VCMProtectionMethod::RequiredProtectionFactorD(webrtc::media_optimization::VCMProtectionMethod *this)
{
  return *((unsigned __int8 *)this + 10);
}

uint64_t webrtc::media_optimization::VCMProtectionMethod::RequiredUepProtectionK(webrtc::media_optimization::VCMProtectionMethod *this)
{
  return *((unsigned __int8 *)this + 20);
}

uint64_t webrtc::media_optimization::VCMProtectionMethod::RequiredUepProtectionD(webrtc::media_optimization::VCMProtectionMethod *this)
{
  return *((unsigned __int8 *)this + 21);
}

uint64_t webrtc::media_optimization::VCMProtectionMethod::MaxFramesFec(webrtc::media_optimization::VCMProtectionMethod *this)
{
  return 1;
}

void webrtc::media_optimization::VCMNackFecMethod::~VCMNackFecMethod(webrtc::media_optimization::VCMNackFecMethod *this)
{
  *(_QWORD *)this = &off_24C0B6C88;
}

{
  *(_QWORD *)this = &off_24C0B6C88;
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::media_optimization::VCMFecMethod::ProtectionFactor(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_208655158(float a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  float *v10;
  float v11;
  float v12;
  std::string *v13;

  if ((int)a1)
  {
    powf((float)(*(unsigned __int16 *)(v2 + 36) * *(unsigned __int16 *)(v2 + 34)) / 405500.0, 0.3);
    v7 = *(unsigned int *)(v2 + 40);
    if ((int)v7 <= 0)
    {
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/simulcast_rate_allocator.cc", 51, "num_layers > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v3, v4, v5, v6, *(unsigned int *)(v2 + 40));
    }
    else if (v7 < 5)
    {
      v8 = v7 - 1;
      if (*(_BYTE *)(v1 + 113))
        v9 = (_DWORD)v7 == 3;
      else
        v9 = 0;
      if (v9)
      v11 = *v10;
      v12 = exp2f(-(float)v8) * *(float *)(v2 + 24);
      if (v12 < 1.0)
        v12 = 1.0;
      __asm { BR              X10 }
    }
    v13 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/simulcast_rate_allocator.cc", 52, "num_layers <= kMaxTemporalStreams", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v3, v4, v5, v6, v7);
    webrtc::media_optimization::VCMNackFecMethod::MaxFramesFec((webrtc::media_optimization::VCMNackFecMethod *)v13);
  }
  else
  {
    *(_WORD *)(v1 + 9) = 0;
  }
}

uint64_t webrtc::media_optimization::VCMNackFecMethod::MaxFramesFec(webrtc::media_optimization::VCMNackFecMethod *this)
{
  return *((unsigned int *)this + 34);
}

void webrtc::media_optimization::VCMNackFecMethod::UpdateParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  float v12;
  BOOL v13;
  float *v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  webrtc::media_optimization::VCMFecMethod::ProtectionFactor(a1, a2);
  v8 = *(_QWORD *)(a1 + 120);
  if (v8 == -1 || *(_QWORD *)a2 < v8)
    *(_BYTE *)(a1 + 10) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v9 = *(unsigned int *)(a2 + 40);
  if ((int)v9 > 2)
  {
    *(_DWORD *)(a1 + 136) = 1;
    if (v9 <= 4)
    {
      v11 = v9 - 1;
      if (*(_BYTE *)(a1 + 113))
        v13 = (_DWORD)v9 == 3;
      else
        v13 = 0;
      if (v13)
      v15 = *v14;
      v10 = *(float *)(a2 + 24);
      v16 = exp2f(-(float)v11) * v10;
      if (v16 < 1.0)
        v16 = 1.0;
      __asm { BR              X11 }
    }
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/simulcast_rate_allocator.cc", 52, "num_layers <= kMaxTemporalStreams", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v4, v5, v6, v7, v9);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/simulcast_rate_allocator.cc", 51, "num_layers > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v17, v18, v19, v20, v9);
    JUMPOUT(0x208655978);
  }
  v12 = (float)((float)((float)((float)(*(float *)(a2 + 24) / (float)(1 << (v9 - 1)))
                              + (float)(*(float *)(a2 + 24) / (float)(1 << (v9 - 1))))
                      * (float)*(uint64_t *)a2)
              / 1000.0)
      + 0.5;
  __asm { BR              X12 }
}

void webrtc::media_optimization::VCMNackMethod::~VCMNackMethod(webrtc::media_optimization::VCMNackMethod *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::media_optimization::VCMNackMethod::UpdateParameters(uint64_t a1)
{
  *(_BYTE *)(a1 + 8) = 0;
  return 1;
}

void webrtc::media_optimization::VCMFecMethod::~VCMFecMethod(webrtc::media_optimization::VCMFecMethod *this)
{
  *(_QWORD *)this = &off_24C0B6C88;
}

{
  *(_QWORD *)this = &off_24C0B6C88;
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::media_optimization::VCMFecMethod::UpdateParameters(uint64_t a1, uint64_t a2)
{
  double v3;

  webrtc::media_optimization::VCMFecMethod::ProtectionFactor(a1, a2);
  v3 = (double)*(unsigned __int8 *)(a1 + 9) * 255.0 / (double)(*(unsigned __int8 *)(a1 + 9) ^ 0xFFu) + 0.5;
  if (v3 > 255.0)
    v3 = 255.0;
  *(_BYTE *)(a1 + 8) = 0;
  __asm { BR              X11 }
}

uint64_t sub_208655A48(double a1)
{
  uint64_t v1;
  double v2;

  *(_BYTE *)(v1 + 9) = (int)a1;
  v2 = (double)*(unsigned __int8 *)(v1 + 10) * 255.0 / (double)(*(unsigned __int8 *)(v1 + 10) ^ 0xFFu) + 0.5;
  if (v2 > 255.0)
    v2 = 255.0;
  return ((uint64_t (*)(void))((char *)sub_208655ABC + 4 * byte_208F0BE00[(v2 < 0.0) | (2 * (v2 > 255.0))]))();
}

uint64_t sub_208655ABC(double a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 10) = (int)a1;
  return 1;
}

uint64_t sub_208655AD4()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 10) = -1;
  return 1;
}

uint64_t webrtc::media_optimization::VCMLossProtectionLogic::VCMLossProtectionLogic(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 70) = 0u;
  *(_DWORD *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 160) = -1082130432;
  *(_QWORD *)(a1 + 152) = 0xBF8000003F7FF972;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = -1;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = -1;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = -1;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = -1;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = -1;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = -1;
  *(_BYTE *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = -1;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = -1;
  *(_BYTE *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = -1;
  *(_BYTE *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = -1;
  *(_BYTE *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 352) = -1082130432;
  *(_OWORD *)(a1 + 332) = xmmword_208F0D740;
  *(_DWORD *)(a1 + 348) = -1082130432;
  *(_QWORD *)(a1 + 360) = 704;
  *(_QWORD *)(a1 + 368) = 576;
  *(_DWORD *)(a1 + 376) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  if ((v7 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v7 % 0x3E8uLL <= 0x1F4)
      v9 = 0;
    else
      v9 = -1;
    v8 = v9 - -(uint64_t)v7 / 0x3E8uLL;
  }
  else
  {
    v8 = v7 / 0x3E8;
    if (v7 % 0x3E8 > 0x1F3)
      ++v8;
  }
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 152) = 0xBF8000003F7FF972;
  *(_QWORD *)(a1 + 332) = 0xBF8000003F7FF972;
  *(_WORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = -1;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = -1;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = -1;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = -1;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = -1;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = -1;
  *(_BYTE *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = -1;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = -1;
  *(_BYTE *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = -1;
  *(_BYTE *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = -1;
  *(_BYTE *)(a1 + 328) = 0;
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

_DWORD *webrtc::media_optimization::VCMLossProtectionLogic::SetMethod(_QWORD *a1, int a2)
{
  _DWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  result = (_DWORD *)a1[5];
  if (!result || result[7] != a2)
  {
    switch(a2)
    {
      case 0:
        v4 = operator new();
        *(_WORD *)(v4 + 8) = 0;
        *(_BYTE *)(v4 + 10) = 0;
        *(_QWORD *)(v4 + 12) = 0x5B440000000;
        *(_QWORD *)(v4 + 24) = 1065353216;
        *(_QWORD *)v4 = &unk_24C0B6C30;
        result = (_DWORD *)a1[5];
        a1[5] = v4;
        if (result)
          goto LABEL_11;
        result = (_DWORD *)v4;
        goto LABEL_13;
      case 1:
        v5 = a1[1];
        v6 = operator new();
        *(_WORD *)(v6 + 8) = 0;
        *(_BYTE *)(v6 + 10) = 0;
        *(_QWORD *)(v6 + 12) = 0x5B440000000;
        *(_QWORD *)(v6 + 24) = 0x33F800000;
        *(_QWORD *)v6 = &off_24C0B6C88;
        webrtc::RateControlSettings::RateControlSettings(v6 + 32, v5);
        *(_DWORD *)(v6 + 28) = 1;
        result = (_DWORD *)a1[5];
        a1[5] = v6;
        if (!result)
          goto LABEL_9;
        goto LABEL_11;
      case 2:
        v7 = a1[1];
        v6 = operator new();
        *(_WORD *)(v6 + 8) = 0;
        *(_BYTE *)(v6 + 10) = 0;
        *(_QWORD *)(v6 + 12) = 0x5B440000000;
        *(_QWORD *)(v6 + 24) = 0x33F800000;
        *(_QWORD *)v6 = &off_24C0B6C88;
        webrtc::RateControlSettings::RateControlSettings(v6 + 32, v7);
        *(_QWORD *)v6 = &off_24C0B6BD8;
        *(_OWORD *)(v6 + 120) = xmmword_208F0D750;
        *(_DWORD *)(v6 + 136) = 1;
        *(_DWORD *)(v6 + 28) = 2;
        result = (_DWORD *)a1[5];
        a1[5] = v6;
        if (result)
          goto LABEL_11;
LABEL_9:
        result = (_DWORD *)v6;
        goto LABEL_13;
      case 3:
        a1[5] = 0;
        if (!result)
          return result;
LABEL_11:
        (*(void (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        result = (_DWORD *)a1[5];
LABEL_12:
        if (result)
        {
LABEL_13:
          a1[6] = a1[12];
          v8 = a1 + 6;
          *((_BYTE *)v8 + 32) = *((_BYTE *)v8 + 73);
          *((_BYTE *)v8 + 33) = *((_BYTE *)v8 + 72);
          v9 = v8[40];
          *((_WORD *)v8 + 17) = v8[39];
          v10 = v8[8];
          v8[1] = v8[7];
          v8[3] = v10;
          LODWORD(v10) = *((_DWORD *)v8 + 75);
          *((_DWORD *)v8 + 4) = *((_DWORD *)v8 + 72);
          *((_DWORD *)v8 + 5) = v10;
          *((_WORD *)v8 + 18) = v9;
          *((_DWORD *)v8 + 10) = *((_DWORD *)v8 + 82);
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *, _QWORD *))(*(_QWORD *)result + 16))(result, v8);
        }
        break;
      default:
        goto LABEL_12;
    }
  }
  return result;
}

uint64_t webrtc::media_optimization::VCMLossProtectionLogic::FilteredLoss(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a4;
  v8 = *(_QWORD *)(a1 + 176);
  if (v8 < 0 || a2 - v8 > 999)
  {
    v13 = a4;
    if (v8 != -1)
    {
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a1 + 296);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 304);
      *(_BYTE *)(a1 + 296) = *(_BYTE *)(a1 + 280);
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a1 + 288);
      *(_BYTE *)(a1 + 280) = *(_BYTE *)(a1 + 264);
      *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 272);
      *(_BYTE *)(a1 + 264) = *(_BYTE *)(a1 + 248);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 256);
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a1 + 232);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 240);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a1 + 216);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 224);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a1 + 200);
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a1 + 208);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a1 + 184);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a1 + 192);
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a1 + 168);
      *(_QWORD *)(a1 + 192) = v8;
      v13 = *(unsigned __int8 *)(a1 + 328);
    }
    v9 = 0;
    if (!v13)
      LOBYTE(v13) = a4;
    *(_BYTE *)(a1 + 168) = v13;
    *(_QWORD *)(a1 + 176) = a2;
    *(_BYTE *)(a1 + 328) = 0;
    v8 = a2;
    v10 = (float)a4;
    v11 = *(float *)(a1 + 156);
    v12 = -1.0;
    if (v11 != -1.0)
      goto LABEL_12;
  }
  else
  {
    v9 = *(unsigned __int8 *)(a1 + 328);
    if (v9 < a4)
    {
      *(_BYTE *)(a1 + 328) = a4;
      v9 = a4;
    }
    v10 = (float)a4;
    v11 = *(float *)(a1 + 156);
    v12 = -1.0;
    if (v11 != -1.0)
    {
LABEL_12:
      v14 = a2 - *(_QWORD *)(a1 + 128);
      v15 = *(float *)(a1 + 152);
      if (v14 != 1)
        v15 = powf(v15, (float)v14);
      v10 = (float)((float)(1.0 - v15) * v10) + (float)(v15 * v11);
    }
  }
  v16 = *(float *)(a1 + 160);
  if (v10 <= v16 || v16 == v12)
    v16 = v10;
  *(float *)(a1 + 156) = v16;
  *(_QWORD *)(a1 + 128) = a2;
  if (a3 == 2)
  {
    if (v8 == -1 || a2 - v8 > 10000)
    {
      return v9;
    }
    else
    {
      if (*(unsigned __int8 *)(a1 + 168) <= v9)
        v4 = v9;
      else
        v4 = *(unsigned __int8 *)(a1 + 168);
      v18 = *(_QWORD *)(a1 + 192);
      if (v18 != -1 && a2 - v18 <= 10000)
      {
        v4 = *(unsigned __int8 *)(a1 + 184) <= v4 ? v4 : *(unsigned __int8 *)(a1 + 184);
        v19 = *(_QWORD *)(a1 + 208);
        if (v19 != -1 && a2 - v19 <= 10000)
        {
          v4 = *(unsigned __int8 *)(a1 + 200) <= v4 ? v4 : *(unsigned __int8 *)(a1 + 200);
          v20 = *(_QWORD *)(a1 + 224);
          if (v20 != -1 && a2 - v20 <= 10000)
          {
            v4 = *(unsigned __int8 *)(a1 + 216) <= v4 ? v4 : *(unsigned __int8 *)(a1 + 216);
            v21 = *(_QWORD *)(a1 + 240);
            if (v21 != -1 && a2 - v21 <= 10000)
            {
              v4 = *(unsigned __int8 *)(a1 + 232) <= v4
                 ? v4
                 : *(unsigned __int8 *)(a1 + 232);
              v22 = *(_QWORD *)(a1 + 256);
              if (v22 != -1 && a2 - v22 <= 10000)
              {
                v4 = *(unsigned __int8 *)(a1 + 248) <= v4
                   ? v4
                   : *(unsigned __int8 *)(a1 + 248);
                v23 = *(_QWORD *)(a1 + 272);
                if (v23 != -1 && a2 - v23 <= 10000)
                {
                  v4 = *(unsigned __int8 *)(a1 + 264) <= v4
                     ? v4
                     : *(unsigned __int8 *)(a1 + 264);
                  v24 = *(_QWORD *)(a1 + 288);
                  if (v24 != -1 && a2 - v24 <= 10000)
                  {
                    v4 = *(unsigned __int8 *)(a1 + 280) <= v4
                       ? v4
                       : *(unsigned __int8 *)(a1 + 280);
                    v25 = *(_QWORD *)(a1 + 304);
                    if (v25 != -1 && a2 - v25 <= 10000)
                    {
                      v4 = *(unsigned __int8 *)(a1 + 296) <= v4
                         ? v4
                         : *(unsigned __int8 *)(a1 + 296);
                      v26 = *(_QWORD *)(a1 + 320);
                      if (v26 != -1 && a2 - v26 <= 10000)
                      {
                        if (*(unsigned __int8 *)(a1 + 312) <= v4)
                          return v4;
                        else
                          return *(unsigned __int8 *)(a1 + 312);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else if (a3 == 1)
  {
    __asm { BR              X10 }
  }
  return v4;
}

BOOL cricket::IsDtlsSctp(uint64_t a1, uint64_t a2)
{
  if (a2 == 13)
    return *(_QWORD *)a1 == 0x534C54442F504455 && *(_QWORD *)(a1 + 5) == 0x505443532F534C54
        || *(_QWORD *)a1 == 0x534C54442F504354 && *(_QWORD *)(a1 + 5) == 0x505443532F534C54;
  else
    return a2 == 9 && *(_QWORD *)a1 == 0x5443532F534C5444 && *(_BYTE *)(a1 + 8) == 80;
}

uint64_t cricket::IsRtpProtocol(char *a1, uint64_t a2)
{
  uint64_t result;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;

  if (!a2)
    return 1;
  if (a2 >= 4)
  {
    v4 = a1;
    v5 = &a1[a2];
    v6 = a2;
    while (1)
    {
      result = (uint64_t)memchr(a1, 82, v6 - 3);
      if (!result)
        return result;
      if (*(_DWORD *)result == 793793618)
        break;
      a1 = (char *)(result + 1);
      v6 = v5 - a1;
      if (v5 - a1 < 4)
        return 0;
    }
    if ((char *)result == v5)
      return 0;
    v7 = result - (_QWORD)v4;
    if (result - (_QWORD)v4 == -1)
      return 0;
    if (!v7)
      return 1;
    v8 = v7 - 1;
    if (a2 <= v8)
    {
      __break(1u);
      return result;
    }
    v9 = v4[v8];
    return !(v9 < 0
           ? __maskrune(v9, 0x100uLL)
           : *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v9 + 60) & 0x100);
  }
  return 0;
}

BOOL cricket::IsDtlsRtp(uint64_t a1, uint64_t a2)
{
  BOOL v4;

  if (a2 != 16)
  {
    if (a2 != 17)
      return 0;
    if (*(_QWORD *)a1 != 0x2F534C542F504455
      || *(_QWORD *)(a1 + 8) != 0x505641532F505452
      || *(_BYTE *)(a1 + 16) != 70)
    {
      v4 = *(_QWORD *)a1 == 0x2F534C542F504354 && *(_QWORD *)(a1 + 8) == 0x505641532F505452;
      if (!v4 || *(_BYTE *)(a1 + 16) != 70)
        return *(_QWORD *)a1 == 0x2F534C542F504455
            && *(_QWORD *)(a1 + 8) == 0x505641532F505452
            && *(_BYTE *)(a1 + 16) == 70;
    }
    return 1;
  }
  if (*(_QWORD *)a1 == 0x2F534C542F504455 && *(_QWORD *)(a1 + 8) == 0x505641532F505452)
    return 1;
  return *(_QWORD *)a1 == 0x2F534C542F504354 && *(_QWORD *)(a1 + 8) == 0x505641532F505452;
}

void cricket::MediaDescriptionOptions::AddAudioSender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void **v8;
  void **v9;
  void *v10;
  void **v11;
  void *v12;
  void **v13;
  void **v14;
  void **v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  void *__p;
  void **v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  __p = 0;
  v21 = 0;
  v22 = 0;
  cricket::MediaDescriptionOptions::AddSenderInternal(a1, a2, a3, (const cricket::RidDescription **)&v23, (uint64_t **)&__p, 1, a7, a8);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v21;
    v10 = __p;
    if (v21 != __p)
    {
      v11 = v21;
      do
      {
        v14 = (void **)*(v11 - 3);
        v11 -= 3;
        v13 = v14;
        if (v14)
        {
          v15 = (void **)*(v9 - 2);
          v12 = v13;
          if (v15 != v13)
          {
            do
            {
              if (*((char *)v15 - 9) < 0)
                operator delete(*(v15 - 4));
              v15 -= 4;
            }
            while (v15 != v13);
            v12 = *v11;
          }
          *(v9 - 2) = v13;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = __p;
    }
    v21 = v8;
    operator delete(v10);
  }
  v16 = (char *)v23;
  if (v23)
  {
    v17 = v24;
    v18 = v23;
    if (v24 != v23)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v17 - 24), *((_QWORD *)v17 - 2));
        v19 = (void *)*((_QWORD *)v17 - 6);
        if (v19)
        {
          *((_QWORD *)v17 - 5) = v19;
          operator delete(v19);
        }
        if (*(v17 - 57) < 0)
          operator delete(*((void **)v17 - 10));
        v17 -= 80;
      }
      while (v17 != v16);
      v18 = v23;
    }
    v24 = v16;
    operator delete(v18);
  }
}

void cricket::MediaDescriptionOptions::AddSenderInternal(uint64_t a1, uint64_t a2, uint64_t a3, const cricket::RidDescription **a4, uint64_t **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[3];
  _OWORD v24[3];
  int v25;

  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 24)
    goto LABEL_19;
  v8 = a6;
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  if (v23 != (_OWORD *)a2)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__assign_no_alias<true>(v23, *(char **)a2, *(_QWORD *)(a2 + 8));
      if ((_OWORD *)((char *)&v23[1] + 8) == (_OWORD *)a3)
        goto LABEL_7;
      goto LABEL_6;
    }
    v23[0] = *(_OWORD *)a2;
    *(_QWORD *)&v23[1] = *(_QWORD *)(a2 + 16);
  }
  if ((_OWORD *)((char *)&v23[1] + 8) != (_OWORD *)a3)
LABEL_6:
    std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)&v23[1] + 1, *(__int128 **)a3, *(__int128 **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
LABEL_7:
  if ((uint64_t **)((char *)&v24[1] + 8) != a5)
    std::vector<std::vector<cricket::SimulcastLayer>>::__assign_with_size[abi:sn180100]<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>((uint64_t)&v24[1] + 8, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (a5[1] - *a5));
  if (v24 != (_OWORD *)a4)
    std::vector<cricket::RidDescription>::__assign_with_size[abi:sn180100]<cricket::RidDescription*,cricket::RidDescription*>((uint64_t)v24, *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 4));
  v25 = v8;
  v13 = *(std::string **)(a1 + 48);
  if ((unint64_t)v13 >= *(_QWORD *)(a1 + 56))
  {
    v14 = std::vector<cricket::SenderOptions>::__push_back_slow_path<cricket::SenderOptions const&>((std::string **)(a1 + 40), (const cricket::SenderOptions *)v23);
    goto LABEL_15;
  }
  if (v13)
  {
    v14 = (std::string *)((char *)cricket::SenderOptions::SenderOptions(v13, (const cricket::SenderOptions *)v23) + 104);
LABEL_15:
    *(_QWORD *)(a1 + 48) = v14;
    cricket::SenderOptions::~SenderOptions((cricket::SenderOptions *)v23);
    return;
  }
  __break(1u);
LABEL_19:
  v15 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc", 1341, "stream_ids.size() == 1U", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, (uint64_t)a5, a6, a7, a8, *(uint64_t *)&v23[0]);
  cricket::MediaSessionDescriptionFactory::MediaSessionDescriptionFactory((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t cricket::MediaSessionDescriptionFactory::MediaSessionDescriptionFactory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  cricket::Codec **v13;
  uint64_t v14;
  const cricket::Codec **v15;
  uint64_t v16;
  const cricket::Codec **v17;
  uint64_t v18;
  cricket::Codec *v19;
  cricket::Codec *v20;
  cricket::Codec *v21;
  cricket::Codec *v22;
  cricket::Codec *v23;
  void (**v24)(cricket::Codec *);
  BOOL v25;
  uint64_t v26;
  void (***v27)(_QWORD);
  void (***v28)(_QWORD);
  void *v29;
  void (***v30)(_QWORD);
  void (***v31)(_QWORD);
  void (**v32)(_QWORD);
  void (***v33)(_QWORD);
  void (***v34)(_QWORD);
  void (***v35)(_QWORD);
  void (***v36)(_QWORD);
  void (**v37)(_QWORD);
  void (***v38)(_QWORD);
  void (***v39)(_QWORD);
  void (***v40)(_QWORD);
  void (***v41)(_QWORD);
  void (**v42)(_QWORD);
  const cricket::Codec *v43;
  const cricket::Codec *v44;
  cricket::Codec *v45;
  cricket::Codec *v46;
  cricket::Codec *v47;
  cricket::Codec *i;
  cricket::Codec *v49;
  void (***v50)(_QWORD);
  void (***v51)(_QWORD);
  void (***v52)(_QWORD);
  void (***v53)(_QWORD);
  void (**v54)(_QWORD);
  void (***v55)(_QWORD);
  void (***v56)(_QWORD);
  void *v57;
  void (***v58)(_QWORD);
  void (***v59)(_QWORD);
  void (**v60)(_QWORD);
  uint64_t v62;
  pthread_mutexattr_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 104) = 0u;
  v13 = (cricket::Codec **)(a1 + 104);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  if (!a4)
  {
    v62 = operator new();
    pthread_mutexattr_init(&v63);
    pthread_mutexattr_setpolicy_np(&v63, 3);
    pthread_mutex_init((pthread_mutex_t *)v62, &v63);
    pthread_mutexattr_destroy(&v63);
    *(_QWORD *)(v62 + 80) = 0;
    *(_QWORD *)(v62 + 72) = 0;
    *(_QWORD *)(v62 + 64) = v62 + 72;
    *(_QWORD *)(a1 + 200) = v62;
    *(_QWORD *)(a1 + 208) = v62;
    *(_BYTE *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = a5;
    if (a5)
      goto LABEL_3;
LABEL_62:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc", 1364, "transport_desc_factory_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v63.__sig);
LABEL_63:
    __break(1u);
  }
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = a4;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a5;
  if (!a5)
    goto LABEL_62;
LABEL_3:
  if (a2)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v15 = (const cricket::Codec **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
    if (v12 != (uint64_t *)v15)
      std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>(v12, *v15, v15[1], 0x84BDA12F684BDA13 * ((v15[1] - *v15) >> 3));
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v17 = (const cricket::Codec **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 64))(v16);
    if ((const cricket::Codec **)(a1 + 32) != v17)
      std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)(a1 + 32), *v17, v17[1], 0x84BDA12F684BDA13 * ((v17[1] - *v17) >> 3));
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 56))(&v63, v18, a3);
    v19 = *v13;
    if (*v13)
    {
      v20 = *(cricket::Codec **)(a1 + 112);
      v21 = *v13;
      if (v20 != v19)
      {
        v22 = (cricket::Codec *)((char *)v20 - 216);
        v23 = (cricket::Codec *)((char *)v20 - 216);
        do
        {
          v24 = *(void (***)(cricket::Codec *))v23;
          v23 = (cricket::Codec *)((char *)v23 - 216);
          (*v24)(v22);
          v25 = v22 == v19;
          v22 = v23;
        }
        while (!v25);
        v21 = *v13;
      }
      *(_QWORD *)(a1 + 112) = v19;
      operator delete(v21);
    }
    *(pthread_mutexattr_t *)(a1 + 104) = v63;
    *(_QWORD *)(a1 + 120) = v64;
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v26 + 64))(&v63, v26, a3);
    v27 = *(void (****)(_QWORD))(a1 + 128);
    if (v27)
    {
      v28 = *(void (****)(_QWORD))(a1 + 136);
      v29 = *(void **)(a1 + 128);
      if (v28 != v27)
      {
        v30 = v28 - 27;
        v31 = v28 - 27;
        do
        {
          v32 = *v31;
          v31 -= 27;
          (*v32)(v30);
          v25 = v30 == v27;
          v30 = v31;
        }
        while (!v25);
        v29 = *(void **)(a1 + 128);
      }
      *(_QWORD *)(a1 + 136) = v27;
      operator delete(v29);
    }
    *(pthread_mutexattr_t *)(a1 + 128) = v63;
    *(_QWORD *)(a1 + 144) = v64;
  }
  v34 = *(void (****)(_QWORD))(a1 + 56);
  v33 = *(void (****)(_QWORD))(a1 + 64);
  if (v33 != v34)
  {
    v35 = v33 - 27;
    v36 = v33 - 27;
    do
    {
      v37 = *v36;
      v36 -= 27;
      (*v37)(v35);
      v25 = v35 == v34;
      v35 = v36;
    }
    while (!v25);
  }
  v38 = *(void (****)(_QWORD))(a1 + 80);
  *(_QWORD *)(a1 + 64) = v34;
  v39 = *(void (****)(_QWORD))(a1 + 88);
  if (v39 != v38)
  {
    v40 = v39 - 27;
    v41 = v39 - 27;
    do
    {
      v42 = *v41;
      v41 -= 27;
      (*v42)(v40);
      v25 = v40 == v38;
      v40 = v41;
    }
    while (!v25);
  }
  *(_QWORD *)(a1 + 88) = v38;
  v43 = *(const cricket::Codec **)(a1 + 8);
  v44 = *(const cricket::Codec **)(a1 + 16);
  while (v43 != v44)
  {
    v45 = *(cricket::Codec **)(a1 + 88);
    if ((unint64_t)v45 >= *(_QWORD *)(a1 + 96))
    {
      v46 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)(a1 + 80), v43);
    }
    else
    {
      if (!v45)
        goto LABEL_63;
      v46 = (cricket::Codec *)((char *)cricket::Codec::Codec(v45, v43) + 216);
    }
    *(_QWORD *)(a1 + 88) = v46;
    if (v65)
      cricket::Codec::~Codec((cricket::Codec *)&v63);
    v43 = (const cricket::Codec *)((char *)v43 + 216);
  }
  v47 = *(cricket::Codec **)(a1 + 32);
  for (i = *(cricket::Codec **)(a1 + 40); v47 != i; v47 = (cricket::Codec *)((char *)v47 + 216))
  {
    while (1)
    {
      while (1)
      {
        if (!v65)
          break;
        cricket::Codec::~Codec((cricket::Codec *)&v63);
        v47 = (cricket::Codec *)((char *)v47 + 216);
        if (v47 == i)
          goto LABEL_49;
      }
      v49 = *(cricket::Codec **)(a1 + 88);
      if ((unint64_t)v49 < *(_QWORD *)(a1 + 96))
        break;
      *(_QWORD *)(a1 + 88) = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)(a1 + 80), v47);
      v47 = (cricket::Codec *)((char *)v47 + 216);
      if (v47 == i)
        goto LABEL_49;
    }
    if (!v49)
      goto LABEL_63;
    *(_QWORD *)(a1 + 88) = (char *)cricket::Codec::Codec(v49, v47) + 216;
  }
LABEL_49:
  v51 = *(void (****)(_QWORD))(a1 + 152);
  v50 = *(void (****)(_QWORD))(a1 + 160);
  if (v50 != v51)
  {
    v52 = v50 - 27;
    v53 = v50 - 27;
    do
    {
      v54 = *v53;
      v53 -= 27;
      (*v54)(v52);
      v25 = v52 == v51;
      v52 = v53;
    }
    while (!v25);
  }
  *(_QWORD *)(a1 + 160) = v51;
  v55 = *(void (****)(_QWORD))(a1 + 176);
  if (v55)
  {
    v56 = *(void (****)(_QWORD))(a1 + 184);
    v57 = *(void **)(a1 + 176);
    if (v56 != v55)
    {
      v58 = v56 - 27;
      v59 = v56 - 27;
      do
      {
        v60 = *v59;
        v59 -= 27;
        (*v60)(v58);
        v25 = v58 == v55;
        v58 = v59;
      }
      while (!v25);
      v57 = *(void **)(a1 + 176);
    }
    *(_QWORD *)(a1 + 184) = v55;
    operator delete(v57);
  }
  *(pthread_mutexattr_t *)(a1 + 176) = v63;
  *(_QWORD *)(a1 + 192) = v64;
  return a1;
}

__n128 cricket::MediaSessionDescriptionFactory::filtered_rtp_header_extensions(uint64_t a1, char a2, unint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  uint64_t i;
  const std::string::value_type *v9;
  size_t v10;
  int v11;
  char v12;
  __int128 v13;

  if (!a2)
  {
    v5 = *a3;
    v6 = a3[1];
    if (*a3 != v6)
    {
      while ((cricket::MediaSessionDescriptionFactory::filtered_rtp_header_extensions(std::vector<webrtc::RtpExtension>)const::$_0::operator()(v5) & 1) == 0)
      {
        v5 += 32;
        if (v5 == v6)
        {
          v5 = v6;
          goto LABEL_6;
        }
      }
      if (v5 != v6)
      {
        for (i = v5 + 32; i != v6; i += 32)
        {
          if ((cricket::MediaSessionDescriptionFactory::filtered_rtp_header_extensions(std::vector<webrtc::RtpExtension>)const::$_0::operator()(i) & 1) == 0)
          {
            if (i != v5)
            {
              v12 = *(_BYTE *)(i + 23);
              if (*(char *)(v5 + 23) < 0)
              {
                if (v12 >= 0)
                  v9 = (const std::string::value_type *)i;
                else
                  v9 = *(const std::string::value_type **)i;
                if (v12 >= 0)
                  v10 = *(unsigned __int8 *)(i + 23);
                else
                  v10 = *(_QWORD *)(i + 8);
                std::string::__assign_no_alias<false>((std::string *)v5, v9, v10);
              }
              else if ((*(_BYTE *)(i + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>((_QWORD *)v5, *(char **)i, *(_QWORD *)(i + 8));
              }
              else
              {
                v13 = *(_OWORD *)i;
                *(_QWORD *)(v5 + 16) = *(_QWORD *)(i + 16);
                *(_OWORD *)v5 = v13;
              }
            }
            v11 = *(_DWORD *)(i + 24);
            *(_BYTE *)(v5 + 28) = *(_BYTE *)(i + 28);
            *(_DWORD *)(v5 + 24) = v11;
            v5 += 32;
          }
        }
      }
    }
LABEL_6:
    std::vector<webrtc::RtpExtension>::erase(a3, v5, a3[1]);
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  return result;
}

_QWORD *std::vector<webrtc::RtpExtension>::erase(_QWORD *result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  const std::string::value_type *v11;
  size_t v12;
  int v13;
  std::string *v14;
  char *v15;
  char v16;
  __int128 v17;
  unint64_t v18;

  v3 = a3 - a2;
  if (a3 < a2)
  {
    __break(1u);
  }
  else
  {
    v4 = result;
    v5 = a2 - *result;
    v6 = *result + (v5 & 0xFFFFFFFFFFFFFFE0);
    if (a2 != a3)
    {
      v7 = v6 + v3;
      v8 = (char *)result[1];
      if ((char *)(v6 + v3) == v8)
      {
        v18 = *result + (v5 & 0xFFFFFFFFFFFFFFE0);
      }
      else
      {
        v9 = (char *)(*result + 32 * (v5 >> 5) + 23);
        v10 = 32 * (v3 >> 5);
        do
        {
          if (v10)
          {
            v14 = (std::string *)(v9 - 23);
            v15 = &v9[v10 - 23];
            v16 = v9[v10];
            if (*v9 < 0)
            {
              if (v16 >= 0)
                v11 = &v9[v10 - 23];
              else
                v11 = *(const std::string::value_type **)v15;
              if (v16 >= 0)
                v12 = v9[v10];
              else
                v12 = *(_QWORD *)&v9[v10 - 15];
              std::string::__assign_no_alias<false>(v14, v11, v12);
            }
            else if (v9[v10] < 0)
            {
              std::string::__assign_no_alias<true>(v14, *(char **)v15, *(_QWORD *)&v9[v10 - 15]);
            }
            else
            {
              v17 = *(_OWORD *)v15;
              *(_QWORD *)(v9 - 7) = *((_QWORD *)v15 + 2);
              *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v17;
            }
          }
          v13 = *(_DWORD *)&v9[v10 + 1];
          v9[5] = v9[v10 + 5];
          *(_DWORD *)(v9 + 1) = v13;
          v9 += 32;
        }
        while (&v9[v10 - 23] != v8);
        v7 = v4[1];
        v18 = (unint64_t)(v9 - 23);
      }
      while (v7 != v18)
      {
        if (*(char *)(v7 - 9) < 0)
          operator delete(*(void **)(v7 - 32));
        v7 -= 32;
      }
      v4[1] = v18;
    }
    return (_QWORD *)v6;
  }
  return result;
}

void cricket::MediaSessionDescriptionFactory::CreateOfferOrError(cricket::Codec **this@<X0>, const cricket::MediaSessionOptions *a2@<X1>, const cricket::SessionDescription *a3@<X2>, uint64_t a4@<X8>)
{
  const cricket::MediaSessionOptions *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t *i;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  _DWORD *v32;
  cricket::Codec *v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  std::string::size_type v49;
  std::string::size_type size;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  std::string::size_type v57;
  char *v58;
  uint64_t v59;
  int v60;
  const void *v61;
  size_t v62;
  int v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v68;
  uint64_t v69;
  std::string::size_type v71;
  __int128 v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  int64_t v76;
  BOOL v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  std::string::size_type v82;
  std::string::size_type v83;
  char *v84;
  uint64_t v85;
  std::string::size_type v86;
  int v87;
  std::string *v88;
  const std::string::value_type **v89;
  __int128 v90;
  std::string::size_type v91;
  int v92;
  std::string::size_type v93;
  std::string::size_type v94;
  void *v95;
  void **v96;
  void **j;
  std::string::size_type v98;
  std::string::size_type v99;
  void *v100;
  void **v101;
  void **v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const cricket::SessionDescription *v111;
  unint64_t v112;
  _BOOL4 v114;
  _BOOL4 v116;
  uint64_t v117;
  int v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  size_t v125;
  void **v126;
  void **v127;
  const cricket::Codec *v128;
  const cricket::Codec *v129;
  uint64_t v130;
  void *v131;
  char v132;
  char v133;
  int v134;
  int v135;
  int v136;
  cricket::Codec **v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  unsigned __int8 v153;
  uint64_t v154;
  _BYTE *v155;
  char v156;
  char v157;
  char v158;
  std::string::size_type v159;
  void *v160;
  std::string::size_type v161;
  void (***v162)(std::string::size_type);
  void (**v163)(std::string::size_type);
  BOOL v164;
  std::string::size_type v166;
  _BYTE *v167;
  __n128 v168;
  std::string::size_type v169;
  cricket::Codec *v170;
  cricket::Codec *v171;
  void (**v172)(char *, __n128);
  int v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  rtc::UniqueRandomIdGenerator *v177;
  uint64_t v178;
  const cricket::Codec *v179;
  cricket::Codec *v180;
  const char *v181;
  uint64_t v182;
  BOOL v183;
  char v184;
  uint64_t v185;
  cricket::Codec *v186;
  cricket::Codec *v187;
  cricket::Codec *v188;
  void (***v189)(char *);
  void (**v190)(char *);
  _BYTE *v191;
  unsigned __int8 *v192;
  uint64_t v193;
  int v194;
  int v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  cricket::Codec *v199;
  cricket::Codec *v200;
  cricket::Codec **v201;
  cricket::Codec *v202;
  cricket::Codec *v203;
  cricket::Codec *v204;
  cricket::Codec *v205;
  uint64_t v206;
  unint64_t v207;
  size_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v214;
  char *v215;
  uint64_t v217;
  uint64_t v218;
  std::string::size_type v219;
  _BYTE *v220;
  char *v221;
  std::string::size_type v222;
  size_t v223;
  std::string *p_p;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v229;
  char *v230;
  std::string::size_type v232;
  std::string::size_type v233;
  std::string::size_type v234;
  std::string *v235;
  char *v236;
  std::string::size_type v237;
  char v238;
  _BYTE *v239;
  size_t v240;
  _BYTE *v241;
  uint64_t v242;
  uint64_t v243;
  _BYTE *v244;
  int v245;
  std::string::size_type v246;
  void *v247;
  std::string::size_type v248;
  void (***v249)(std::string::size_type);
  void (**v250)(std::string::size_type);
  uint64_t v251;
  uint64_t v252;
  size_t v253;
  char *v254;
  _QWORD *v255;
  unint64_t v256;
  __int128 v257;
  uint64_t v258;
  _QWORD *v259;
  int64_t v260;
  uint64_t v261;
  void **v262;
  _QWORD *v263;
  void *v264;
  int v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void **v276;
  void **v277;
  uint64_t v278;
  void **v279;
  void **v280;
  void *v281;
  char *v282;
  void *v283;
  char *v284;
  void (***v285)(char *);
  void (**v286)(char *);
  char *v287;
  void *v288;
  char *v289;
  void (***v290)(char *);
  void (**v291)(char *);
  char *v292;
  char *v293;
  void *v294;
  void **v295;
  void **v296;
  void *v297;
  unint64_t v298;
  unint64_t v299;
  char *v300;
  uint64_t v301;
  __int128 *v302;
  std::string *v303;
  __int128 v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  _QWORD *v313;
  _QWORD *v314;
  void *v315;
  uint64_t v316;
  _BOOL4 v317;
  __n128 v318;
  _BOOL4 v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v325;
  _DWORD *v326;
  _DWORD *v328;
  void *v329;
  _BYTE v330[24];
  _BYTE v331[7];
  int v332;
  __int16 v333;
  void *v334[2];
  void *v335[2];
  __int128 v336;
  void *v337;
  char *v338;
  uint64_t v339;
  void *v340;
  char *v341;
  uint64_t v342;
  void *v343;
  char *v344;
  void (**v345)(cricket::IceCredentialsIterator *__hidden);
  void *v346;
  char *v347;
  char *v348;
  int v349;
  __int16 v350;
  cricket::Codec *v351[2];
  std::string::size_type v352;
  std::string __p;
  std::string v354;
  _BYTE v355[15];
  _QWORD v356[2];
  _BYTE __sz[32];
  _BYTE v358[7];
  char v359;
  _BYTE v360[32];
  _QWORD *v361;
  uint64_t v362;
  int v363;
  int v364;
  char v365;
  uint64_t v366;

  v4 = a2;
  v366 = *MEMORY[0x24BDAC8D0];
  v345 = off_24C0B5178;
  v346 = 0;
  v347 = 0;
  v348 = 0;
  v5 = *((_QWORD *)a2 + 8);
  v6 = *((_QWORD *)a2 + 9);
  v7 = v6 - v5;
  if (v6 == v5)
    goto LABEL_11;
  v8 = 0x6DB6DB6DB6DB6DB7 * (v7 >> 3);
  if (v8 >= 0x492492492492493)
    goto LABEL_667;
  v9 = (char *)operator new(v7);
  v10 = 0;
  v346 = v9;
  v348 = &v9[56 * v8];
  do
  {
    v15 = (std::string *)&v9[v10];
    v16 = (__int128 *)(v5 + v10);
    if (*(char *)(v5 + v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
      v11 = (std::string *)&v9[v10 + 24];
      v12 = v5 + v10;
      v13 = v5 + v10 + 24;
      if ((*(char *)(v5 + v10 + 47) & 0x80000000) == 0)
        goto LABEL_5;
    }
    else
    {
      v17 = *v16;
      v15->__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
      v11 = (std::string *)&v9[v10 + 24];
      v12 = v5 + v10;
      v13 = v5 + v10 + 24;
      if ((*(char *)(v5 + v10 + 47) & 0x80000000) == 0)
      {
LABEL_5:
        v14 = *(_OWORD *)v13;
        v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v14;
        goto LABEL_6;
      }
    }
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v13, *(_QWORD *)(v12 + 32));
LABEL_6:
    v9[v10 + 48] = *(_BYTE *)(v5 + v10 + 48);
    v10 += 56;
  }
  while (v5 + v10 != v6);
  v347 = &v9[v10];
  v4 = a2;
LABEL_11:
  if (a3)
  {
    v18 = *(uint64_t **)v360;
    v19 = *(_QWORD *)&v360[8];
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  v340 = 0;
  v341 = 0;
  v342 = 0;
  v337 = 0;
  v338 = 0;
  v339 = 0;
  *(_QWORD *)&v360[8] = 0x7F00000023;
  *(_DWORD *)&v360[16] = 127;
  v362 = 0;
  v361 = 0;
  *(_QWORD *)&v360[24] = &v361;
  *(_QWORD *)v360 = &off_24C0B6CE0;
  v322 = v18;
  if (v18 != (uint64_t *)v19)
  {
    while (2)
    {
      v21 = *v18;
      if (*v18)
      {
        v22 = *(_QWORD *)(v21 + 32);
        if (v22)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
          {
            v20 = &v340;
            goto LABEL_17;
          }
          v23 = *(_QWORD *)(v21 + 32);
          if (v23 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23) == 1)
          {
            v20 = &v337;
LABEL_17:
          }
        }
      }
      if (++v18 == (uint64_t *)v19)
        break;
      continue;
    }
  }
  *(_QWORD *)v360 = &off_24C0B6D10;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v360[24], v361);
  v24 = *((unsigned __int8 *)v4 + 3);
  if (*((_BYTE *)v4 + 3))
    v25 = 255;
  else
    v25 = 14;
  *(_DWORD *)&v360[8] = 1;
  *(_DWORD *)&v360[12] = v25;
  *(_DWORD *)&v360[16] = v25;
  v362 = 0;
  v361 = 0;
  *(_QWORD *)&v360[24] = &v361;
  *(_QWORD *)v360 = &off_24C0B6D40;
  v363 = v24;
  v364 = 14;
  v329 = 0;
  *(_QWORD *)v330 = 0;
  *(_QWORD *)&v330[8] = 0;
  memset(&v354, 0, sizeof(v354));
  *(_OWORD *)v335 = 0u;
  v336 = 0u;
  *(_OWORD *)v334 = 0u;
  if (v322 != (uint64_t *)v19)
  {
    for (i = v322; i != (uint64_t *)v19; ++i)
    {
      v28 = *i;
      if (!*i)
        continue;
      v29 = *(_QWORD *)(v28 + 32);
      if (!v29)
        continue;
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
      v31 = *(uint64_t **)(v28 + 32);
      if (v30)
      {
        if (!v31 || (*(unsigned int (**)(uint64_t *))(*v31 + 16))(v31) != 1)
          continue;
        v31 = *(uint64_t **)(v28 + 32);
        v27 = &v335[1];
      }
      else
      {
        v27 = v334;
      }
    }
  }
  v32 = (_DWORD *)*((_QWORD *)v4 + 5);
  v326 = (_DWORD *)*((_QWORD *)v4 + 6);
  if (v32 != v326)
  {
    v33 = (cricket::Codec *)&__sz[24];
    v325 = v19;
    do
    {
      v35 = (char *)*((_QWORD *)v32 + 11);
      v34 = *((_QWORD *)v32 + 12);
      v328 = v32;
      memset(&__p, 0, sizeof(__p));
      while (v35 != (char *)v34)
      {
        if (*((_DWORD *)v35 + 9) != 4)
          goto LABEL_109;
        v36 = v329;
        v37 = *(_QWORD **)v330;
        if (v329 == *(void **)v330)
          goto LABEL_77;
        v38 = *((_QWORD *)v35 + 1);
        if (v35[23] >= 0)
          v39 = v35[23];
        else
          v39 = *((_QWORD *)v35 + 1);
        if (v35[23] < 0)
        {
          v45 = *(char **)v35;
          while (1)
          {
            v46 = *((unsigned __int8 *)v36 + 23);
            v47 = (char)v46;
            if ((v46 & 0x80u) != 0)
              v46 = v36[1];
            if (v39 == v46)
            {
              v48 = v47 >= 0 ? v36 : (_QWORD *)*v36;
              if (!memcmp(v45, v48, v38))
                break;
            }
            v36 += 4;
            if (v36 == v37)
              goto LABEL_78;
          }
LABEL_77:
          if (v36 != v37)
            goto LABEL_109;
          goto LABEL_78;
        }
        if (!v35[23])
        {
          while (1)
          {
            v40 = *((unsigned __int8 *)v36 + 23);
            if ((v40 & 0x80u) != 0)
              v40 = v36[1];
            if (v39 == v40)
              goto LABEL_77;
            v36 += 4;
            if (v36 == *(_QWORD **)v330)
              goto LABEL_78;
          }
        }
        do
        {
          v41 = *((unsigned __int8 *)v36 + 23);
          v42 = (char)v41;
          if ((v41 & 0x80u) != 0)
            v41 = v36[1];
          if (v39 == v41)
          {
            v43 = 0;
            if (v42 >= 0)
              v44 = v36;
            else
              v44 = (_QWORD *)*v36;
            while (v35[v43] == *((_BYTE *)v44 + v43))
            {
              if (v35[23] == ++v43)
                goto LABEL_77;
            }
          }
          v36 += 4;
        }
        while (v36 != *(_QWORD **)v330);
LABEL_78:
        size = v354.__r_.__value_.__l.__size_;
        v49 = v354.__r_.__value_.__r.__words[0];
        if (v354.__r_.__value_.__r.__words[0] != v354.__r_.__value_.__l.__size_)
        {
          v51 = *((_QWORD *)v35 + 1);
          if (v35[23] >= 0)
            v52 = v35[23];
          else
            v52 = *((_QWORD *)v35 + 1);
          if (v35[23] < 0)
          {
            v58 = *(char **)v35;
            while (1)
            {
              v59 = *(unsigned __int8 *)(v49 + 23);
              v60 = (char)v59;
              if ((v59 & 0x80u) != 0)
                v59 = *(_QWORD *)(v49 + 8);
              if (v52 == v59)
              {
                v61 = v60 >= 0 ? (const void *)v49 : *(const void **)v49;
                if (!memcmp(v58, v61, v51))
                  break;
              }
              v49 += 32;
              if (v49 == size)
                goto LABEL_44;
            }
          }
          else
          {
            if (v35[23])
            {
              do
              {
                v54 = *(unsigned __int8 *)(v49 + 23);
                v55 = (char)v54;
                if ((v54 & 0x80u) != 0)
                  v54 = *(_QWORD *)(v49 + 8);
                if (v52 == v54)
                {
                  v56 = 0;
                  if (v55 >= 0)
                    v57 = v49;
                  else
                    v57 = *(_QWORD *)v49;
                  while (v35[v56] == *(_BYTE *)(v57 + v56))
                  {
                    if (v35[23] == ++v56)
                      goto LABEL_108;
                  }
                }
                v49 += 32;
              }
              while (v49 != v354.__r_.__value_.__l.__size_);
              goto LABEL_44;
            }
            while (1)
            {
              v53 = *(unsigned __int8 *)(v49 + 23);
              if ((v53 & 0x80u) != 0)
                v53 = *(_QWORD *)(v49 + 8);
              if (v52 == v53)
                break;
              v49 += 32;
              if (v49 == v354.__r_.__value_.__l.__size_)
                goto LABEL_44;
            }
          }
        }
LABEL_108:
        if (v49 == size)
          goto LABEL_44;
LABEL_109:
        if (v35[23] < 0)
        {
          v62 = *((_QWORD *)v35 + 1);
          if ((v62 & 0x8000000000000000) != 0)
            goto LABEL_562;
          v64 = *(char **)v35;
          if (v62)
          {
            if (!v64)
              goto LABEL_562;
          }
          if (v35[28])
            v63 = *((_DWORD *)v35 + 6);
          else
            v63 = 1;
          if (v62 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_667;
        }
        else
        {
          v62 = v35[23];
          if (v35[28])
            v63 = *((_DWORD *)v35 + 6);
          else
            v63 = 1;
          v64 = v35;
        }
        if (v62 > 0x16)
        {
          v68 = (v62 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v62 | 7) != 0x17)
            v68 = v62 | 7;
          v69 = v68 + 1;
          v65 = (char *)operator new(v68 + 1);
          *(_QWORD *)&__sz[16] = v69 | 0x8000000000000000;
          *(_QWORD *)__sz = v65;
          *(_QWORD *)&__sz[8] = v62;
          v66 = &v65[v62];
          if (v65 <= v64 && v66 > v64)
            goto LABEL_562;
        }
        else
        {
          __sz[23] = v62;
          v65 = __sz;
          v66 = &__sz[v62];
          if (__sz <= v64 && v66 > v64)
            goto LABEL_562;
        }
        if (v62)
          memmove(v65, v64, v62);
        *v66 = 0;
        *(_DWORD *)&__sz[24] = v63;
        __sz[28] = 0;
        v71 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          v73 = (void *)__p.__r_.__value_.__r.__words[0];
          v74 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 59)
            goto LABEL_667;
          v76 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 4 > v75)
            v75 = v76 >> 4;
          v77 = (unint64_t)v76 >= 0x7FFFFFFFFFFFFFE0;
          v78 = 0x7FFFFFFFFFFFFFFLL;
          if (!v77)
            v78 = v75;
          if (!v78)
            goto LABEL_562;
          if (v78 >> 59)
            std::__throw_bad_array_new_length[abi:sn180100]();
          v79 = 32 * v78;
          v80 = (char *)operator new(32 * v78);
          v81 = v80;
          v82 = (std::string::size_type)&v80[32 * v74];
          if ((__sz[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v80[32 * v74], *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
            v71 = __p.__r_.__value_.__l.__size_;
            v73 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            *(_OWORD *)v82 = *(_OWORD *)__sz;
            *(_QWORD *)(v82 + 16) = *(_QWORD *)&__sz[16];
          }
          v83 = (std::string::size_type)&v81[v79];
          v84 = &v81[32 * v74];
          *((_DWORD *)v84 + 6) = *(_DWORD *)&__sz[24];
          v84[28] = __sz[28];
          if ((void *)v71 == v73)
          {
            __p.__r_.__value_.__r.__words[0] = v82;
            __p.__r_.__value_.__l.__size_ = v82 + 32;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v81[v79];
          }
          else
          {
            v85 = 0;
            do
            {
              v88 = (std::string *)(v82 + v85 - 32);
              v89 = (const std::string::value_type **)(v71 + v85 - 32);
              if (*(char *)(v71 + v85 - 9) < 0)
              {
                std::string::__init_copy_ctor_external(v88, *v89, *(_QWORD *)(v71 + v85 - 24));
              }
              else
              {
                v90 = *(_OWORD *)v89;
                *(_QWORD *)(v82 + v85 - 16) = *(_QWORD *)(v71 + v85 - 16);
                *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v90;
              }
              v86 = v82 + v85;
              v87 = *(_DWORD *)(v71 + v85 - 8);
              *(_BYTE *)(v86 - 4) = *(_BYTE *)(v71 + v85 - 4);
              *(_DWORD *)(v86 - 8) = v87;
              v85 -= 32;
            }
            while ((void *)(v71 + v85) != v73);
            v91 = __p.__r_.__value_.__l.__size_;
            v73 = (void *)__p.__r_.__value_.__r.__words[0];
            __p.__r_.__value_.__r.__words[0] = v82 + v85;
            __p.__r_.__value_.__l.__size_ = v82 + 32;
            __p.__r_.__value_.__r.__words[2] = v83;
            while ((void *)v91 != v73)
            {
              if (*(char *)(v91 - 9) < 0)
                operator delete(*(void **)(v91 - 32));
              v91 -= 32;
            }
          }
          if (v73)
            operator delete(v73);
          __p.__r_.__value_.__l.__size_ = v82 + 32;
          if ((__sz[23] & 0x80000000) != 0)
LABEL_168:
            operator delete(*(void **)__sz);
        }
        else
        {
          if (!__p.__r_.__value_.__l.__size_)
            goto LABEL_562;
          if ((__sz[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p.__r_.__value_.__l.__size_, *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
          }
          else
          {
            v72 = *(_OWORD *)__sz;
            *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)&__sz[16];
            *(_OWORD *)v71 = v72;
          }
          v92 = *(_DWORD *)&__sz[24];
          *(_BYTE *)(v71 + 28) = __sz[28];
          *(_DWORD *)(v71 + 24) = v92;
          __p.__r_.__value_.__l.__size_ = v71 + 32;
          if ((__sz[23] & 0x80000000) != 0)
            goto LABEL_168;
        }
LABEL_44:
        v35 += 40;
      }
      cricket::MediaSessionDescriptionFactory::filtered_rtp_header_extensions((uint64_t)__sz, *(_BYTE *)this, (unint64_t *)&__p);
      v93 = __p.__r_.__value_.__r.__words[0];
      v19 = v325;
      if (__p.__r_.__value_.__r.__words[0])
      {
        v94 = __p.__r_.__value_.__l.__size_;
        v95 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v94 - 9) < 0)
              operator delete(*(void **)(v94 - 32));
            v94 -= 32;
          }
          while (v94 != v93);
          v95 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v93;
        operator delete(v95);
      }
      if (*v328 == 1)
      {
        v96 = *(void ***)__sz;
        if (v96)
          goto LABEL_184;
      }
      else
      {
        if (*v328)
        {
          v96 = *(void ***)__sz;
          if (!*(_QWORD *)__sz)
            goto LABEL_42;
        }
        else
        {
          v96 = *(void ***)__sz;
          if (!v96)
            goto LABEL_42;
        }
LABEL_184:
        for (j = *(void ***)&__sz[8]; j != v96; j -= 4)
        {
          if (*((char *)j - 9) < 0)
            operator delete(*(j - 4));
        }
        operator delete(v96);
      }
LABEL_42:
      v32 = v328 + 34;
    }
    while (v328 + 34 != v326);
  }
  if (v322 == (uint64_t *)v19 && *((_BYTE *)this + 216))
  {
  }
  v98 = v354.__r_.__value_.__r.__words[0];
  v33 = a2;
  if (v354.__r_.__value_.__r.__words[0])
  {
    v99 = v354.__r_.__value_.__l.__size_;
    v100 = (void *)v354.__r_.__value_.__r.__words[0];
    if (v354.__r_.__value_.__l.__size_ != v354.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v99 - 9) < 0)
          operator delete(*(void **)(v99 - 32));
        v99 -= 32;
      }
      while (v99 != v98);
      v100 = (void *)v354.__r_.__value_.__r.__words[0];
    }
    v354.__r_.__value_.__l.__size_ = v98;
    operator delete(v100);
  }
  v101 = (void **)v329;
  if (v329)
  {
    v102 = *(void ***)v330;
    v103 = v329;
    if (*(void **)v330 != v329)
    {
      do
      {
        if (*((char *)v102 - 9) < 0)
          operator delete(*(v102 - 4));
        v102 -= 4;
      }
      while (v102 != v101);
      v103 = v329;
    }
    *(_QWORD *)v330 = v101;
    operator delete(v103);
  }
  *(_QWORD *)v360 = &off_24C0B6D70;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v360[24], v361);
  v104 = operator new();
  v34 = v104;
  *(_OWORD *)v104 = 0u;
  *(_OWORD *)(v104 + 16) = 0u;
  *(_OWORD *)(v104 + 32) = 0u;
  *(_OWORD *)(v104 + 48) = 0u;
  *(_QWORD *)(v104 + 64) = 0;
  *(_DWORD *)(v104 + 72) = 5;
  *(_BYTE *)(v104 + 76) = 1;
  v109 = *((_QWORD *)a2 + 5);
  v110 = *((_QWORD *)a2 + 6);
  v111 = a3;
  if (v109 == v110)
  {
LABEL_549:
    if (*((_BYTE *)v33 + 2))
    {
      __sz[23] = 6;
      if (__sz <= "BUNDLE" && &__sz[6] > "BUNDLE")
        goto LABEL_562;
      strcpy(__sz, "BUNDLE");
      *(_OWORD *)v360 = *(_OWORD *)__sz;
      *(_QWORD *)&v360[16] = *(_QWORD *)&__sz[16];
      *(_QWORD *)&v360[24] = 0;
      v362 = 0;
      v361 = 0;
      v251 = *(_QWORD *)v34;
      v252 = *(_QWORD *)(v34 + 8);
      if (*(_QWORD *)v34 != v252)
      {
        while (1)
        {
          if (!*(_BYTE *)(v251 + 28))
          {
            if (*(char *)(v251 + 23) < 0)
            {
              v253 = *(_QWORD *)(v251 + 8);
              if ((v253 & 0x8000000000000000) != 0)
                goto LABEL_562;
              v254 = *(char **)v251;
              if (v253)
              {
                if (!v254)
                  goto LABEL_562;
              }
            }
            else
            {
              v253 = *(unsigned __int8 *)(v251 + 23);
              v254 = (char *)v251;
            }
            cricket::ContentGroup::AddContentName(v360, v254, v253);
          }
          v251 += 40;
          if (v251 == v252)
            goto LABEL_563;
        }
      }
LABEL_582:
      if ((v360[23] & 0x80000000) != 0)
        operator delete(*(void **)v360);
    }
    if (*(_BYTE *)this)
      v265 = 7;
    else
      v265 = 6;
    *(_DWORD *)(v34 + 72) = v265;
    v266 = *((unsigned __int8 *)v33 + 3);
    *(_BYTE *)(v34 + 76) = v266;
    v268 = *(_QWORD *)v34;
    v267 = *(_QWORD *)(v34 + 8);
    if (*(_QWORD *)v34 != v267)
    {
      if (v266)
      {
        v269 = v267 - v268 - 40;
        if (v269 < 0x28)
          goto LABEL_673;
        v270 = v269 / 0x28 + 1;
        v271 = v268 + 40 * (v270 & 0xFFFFFFFFFFFFFFELL);
        v272 = (uint64_t *)(v268 + 72);
        v273 = v270 & 0xFFFFFFFFFFFFFFELL;
        do
        {
          v274 = *(v272 - 5);
          v275 = *v272;
          v272 += 10;
          *(_DWORD *)(v274 + 200) = v266;
          *(_DWORD *)(v275 + 200) = v266;
          v273 -= 2;
        }
        while (v273);
        v268 = v271;
        if (v270 != (v270 & 0xFFFFFFFFFFFFFFELL))
        {
LABEL_673:
          do
          {
            *(_DWORD *)(*(_QWORD *)(v268 + 32) + 200) = v266;
            v268 += 40;
          }
          while (v268 != v267);
        }
      }
      else
      {
        do
        {
          v278 = *(_QWORD *)(v268 + 32);
          if (*(_DWORD *)(v278 + 200) != 2)
            *(_DWORD *)(v278 + 200) = v266;
          v268 += 40;
        }
        while (v268 != v267);
      }
    }
    *(_DWORD *)a4 = 0;
    *(_BYTE *)(a4 + 38) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 29) = 0;
    *(_QWORD *)(a4 + 40) = v34;
    *(_BYTE *)(a4 + 48) = 1;
    v262 = (void **)v335[1];
    if (!v335[1])
      goto LABEL_605;
LABEL_595:
    v276 = (void **)v336;
    v277 = v262;
    if ((void **)v336 != v262)
    {
      do
      {
        if (*((char *)v276 - 9) < 0)
          operator delete(*(v276 - 4));
        v276 -= 4;
      }
      while (v276 != v262);
      v277 = (void **)v335[1];
    }
    *(_QWORD *)&v336 = v262;
    operator delete(v277);
    goto LABEL_605;
  }
  v112 = 0;
  v114 = v360 <= "UDP/DTLS/SCTP" && &v360[13] > "UDP/DTLS/SCTP";
  v320 = v114;
  v116 = &__p <= (std::string *)"apt" && (char *)__p.__r_.__value_.__r.__words + 3 > "apt";
  v317 = v116;
  v321 = *((_QWORD *)a2 + 6);
  while (2)
  {
    if (v111)
    {
      if (v112 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)v111 + 1) - *(_QWORD *)v111) >> 3))
        v117 = 0;
      else
        v117 = *(_QWORD *)v111 + 40 * v112;
      v118 = *(_DWORD *)v109;
      v119 = *(_DWORD *)v109 == 2;
      if (*(_DWORD *)v109 >= 2u)
        goto LABEL_228;
LABEL_236:
      if (v118)
        v126 = &v335[1];
      else
        v126 = v334;
      if (v118)
        v127 = &v337;
      else
        v127 = &v340;
      v351[1] = 0;
      v351[0] = 0;
      v352 = 0;
      v128 = *(const cricket::Codec **)(v109 + 112);
      v129 = *(const cricket::Codec **)(v109 + 120);
      if (v128 != v129)
      {
        if (v351 != (cricket::Codec **)(v109 + 112))
          std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)v351, v128, v129, 0x84BDA12F684BDA13 * ((v129 - v128) >> 3));
        goto LABEL_334;
      }
      v135 = *(_DWORD *)v109;
      v136 = *(_DWORD *)(v109 + 32);
      if (*(_DWORD *)v109)
      {
        v137 = this + 19;
        switch(v136)
        {
          case 0:
          case 3:
          case 4:
            goto LABEL_306;
          case 1:
            v137 = this + 13;
            memset(&v354, 0, sizeof(v354));
            v138 = *(_QWORD *)(v109 + 64);
            v139 = *(_QWORD *)(v109 + 72);
            if (v138 == v139)
              goto LABEL_253;
            goto LABEL_307;
          case 2:
            v137 = this + 16;
            memset(&v354, 0, sizeof(v354));
            v138 = *(_QWORD *)(v109 + 64);
            v139 = *(_QWORD *)(v109 + 72);
            if (v138 == v139)
              goto LABEL_253;
            goto LABEL_307;
          default:
            goto LABEL_670;
        }
      }
      v137 = this + 7;
      switch(v136)
      {
        case 0:
        case 3:
        case 4:
LABEL_306:
          memset(&v354, 0, sizeof(v354));
          v138 = *(_QWORD *)(v109 + 64);
          v139 = *(_QWORD *)(v109 + 72);
          if (v138 != v139)
            goto LABEL_307;
          goto LABEL_253;
        case 1:
          v137 = this + 1;
          memset(&v354, 0, sizeof(v354));
          v138 = *(_QWORD *)(v109 + 64);
          v139 = *(_QWORD *)(v109 + 72);
          if (v138 == v139)
            goto LABEL_253;
          goto LABEL_307;
        case 2:
          v137 = this + 4;
          memset(&v354, 0, sizeof(v354));
          v138 = *(_QWORD *)(v109 + 64);
          v139 = *(_QWORD *)(v109 + 72);
          if (v138 != v139)
          {
LABEL_307:
            v159 = v354.__r_.__value_.__r.__words[0];
            if (v354.__r_.__value_.__r.__words[0])
            {
              v160 = (void *)v354.__r_.__value_.__r.__words[0];
              if (v354.__r_.__value_.__l.__size_ != v354.__r_.__value_.__r.__words[0])
              {
                v161 = v354.__r_.__value_.__l.__size_ - 216;
                v162 = (void (***)(std::string::size_type))(v354.__r_.__value_.__l.__size_ - 216);
                do
                {
                  v163 = *v162;
                  v162 -= 27;
                  (*v163)(v161);
                  v119 = v161 == v159;
                  v161 = (std::string::size_type)v162;
                }
                while (!v119);
                v160 = (void *)v354.__r_.__value_.__r.__words[0];
              }
              v354.__r_.__value_.__l.__size_ = v159;
              operator delete(v160);
            }
            v354 = *(std::string *)v360;
LABEL_315:
            if (*(_DWORD *)v109)
              v164 = 0;
            else
              v164 = *(_BYTE *)v33 == 0;
            if (v164)
            {
            }
            else if (*(_DWORD *)v109 == 1 && *((_BYTE *)v33 + 4) != 0)
            {
              v166 = v354.__r_.__value_.__l.__size_;
              if (v354.__r_.__value_.__r.__words[0] != v354.__r_.__value_.__l.__size_)
              {
                v167 = (_BYTE *)(v354.__r_.__value_.__r.__words[0] + 80);
                do
                {
                  if (!cricket::Codec::GetResiliencyType((uint64_t)(v167 - 80)))
                  {
                    v192 = v167 - 64;
                    if ((char)*(v167 - 41) < 0)
                    {
                      v193 = *((_QWORD *)v167 - 7);
                      if (v193 < 0)
                        goto LABEL_562;
                      v192 = *(unsigned __int8 **)v192;
                      if (v193)
                      {
                        if (!v192)
                          goto LABEL_562;
                      }
                    }
                    else
                    {
                      v193 = *(v167 - 41);
                    }
                    if (v193 != 2)
                      goto LABEL_390;
                    v194 = *v192;
                    if (v194 != 67)
                    {
                      if ((v194 - 65) < 0x1A)
                        LOBYTE(v194) = v194 + 32;
                      if (v194 != 99)
                        goto LABEL_390;
                    }
                    v195 = v192[1];
                    if (v195 != 78)
                    {
                      if ((v195 - 65) < 0x1A)
                        LOBYTE(v195) = v195 + 32;
                      if (v195 != 110)
                      {
LABEL_390:
                        v196 = v167 - 24;
                        if (*v167)
                        {
                          if ((char)*(v167 - 1) < 0)
                          {
                            *((_QWORD *)v167 - 2) = 3;
                            v196 = (char *)*((_QWORD *)v167 - 3);
                          }
                          else
                          {
                            *(v167 - 1) = 3;
                          }
                          *(_WORD *)v196 = *(_WORD *)"raw";
                          *((_WORD *)v196 + 1) = cricket::kPacketizationParamRaw[2];
                        }
                        else
                        {
                          *(v167 - 1) = 3;
                          if (v196 <= "raw" && v167 - 21 > "raw")
                            goto LABEL_562;
                          *(_WORD *)v196 = *(_WORD *)"raw";
                          *((_WORD *)v167 - 11) = cricket::kPacketizationParamRaw[2];
                          *v167 = 1;
                        }
                      }
                    }
                  }
                  v191 = v167 + 136;
                  v167 += 216;
                }
                while (v191 != (_BYTE *)v166);
              }
            }
            *(_QWORD *)((char *)v356 + 7) = 0;
            v356[0] = 0;
            v349 = 0;
            LOBYTE(v350) = 0;
            v168 = *(__n128 *)&v354.__r_.__value_.__l.__data_;
            v169 = v354.__r_.__value_.__r.__words[2];
            v170 = v351[0];
            if (v351[0])
            {
              v318 = *(__n128 *)&v354.__r_.__value_.__l.__data_;
              if (v351[1] != v351[0])
              {
                v171 = (cricket::Codec *)((char *)v351[1] - 216);
                v33 = (cricket::Codec *)((char *)v351[1] - 216);
                do
                {
                  v172 = *(void (***)(char *, __n128))v33;
                  v33 = (cricket::Codec *)((char *)v33 - 216);
                  (*v172)((char *)v171, v168);
                  v119 = v171 == v170;
                  v171 = v33;
                }
                while (!v119);
                v170 = v351[0];
              }
              operator delete(v170);
              v168 = v318;
            }
            *(__n128 *)v351 = v168;
            v352 = v169;
LABEL_334:
            v173 = *(_DWORD *)v109;
            v174 = operator new();
            v175 = v174;
            *(_OWORD *)(v174 + 32) = 0u;
            *(_OWORD *)(v174 + 48) = 0u;
            *(_OWORD *)(v174 + 64) = 0u;
            *(_OWORD *)(v174 + 80) = 0u;
            *(_OWORD *)(v174 + 96) = 0u;
            *(_OWORD *)(v174 + 112) = 0u;
            *(_OWORD *)(v174 + 128) = 0u;
            *(_OWORD *)(v174 + 144) = 0u;
            *(_OWORD *)(v174 + 160) = 0u;
            *(_OWORD *)(v174 + 176) = 0u;
            *(_OWORD *)(v174 + 192) = 0u;
            *(_OWORD *)(v174 + 208) = 0u;
            *(_OWORD *)(v174 + 224) = 0u;
            *(_OWORD *)(v174 + 240) = 0u;
            *(_OWORD *)(v174 + 256) = 0u;
            *(_OWORD *)(v174 + 272) = 0u;
            *(_OWORD *)(v174 + 288) = 0u;
            *(_QWORD *)v174 = &unk_24C0B6E20;
            *(_QWORD *)(v174 + 8) = 0;
            *(_QWORD *)(v174 + 16) = 0;
            *(_QWORD *)(v174 + 24) = 0;
            *(_DWORD *)(v174 + 31) = 0;
            *(_DWORD *)(v174 + 36) = -1;
            *(_BYTE *)(v174 + 63) = 2;
            if (v174 + 40 <= (unint64_t)"AS" && v174 + 42 > (unint64_t)"AS")
              goto LABEL_562;
            strcpy((char *)(v174 + 40), "AS");
            *(_QWORD *)(v174 + 72) = 0;
            *(_QWORD *)(v174 + 80) = 0;
            *(_QWORD *)(v174 + 64) = 0;
            *(_BYTE *)(v174 + 88) = 0;
            *(_QWORD *)(v174 + 104) = 0;
            *(_QWORD *)(v174 + 112) = 0;
            *(_QWORD *)(v174 + 96) = 0;
            *(_BYTE *)(v174 + 120) = 0;
            *(_QWORD *)(v174 + 124) = 0;
            *(_QWORD *)(v174 + 140) = 0;
            *(_QWORD *)(v174 + 132) = 0;
            *(_DWORD *)(v174 + 148) = 0;
            *(_BYTE *)(v174 + 192) = 0;
            *(_WORD *)(v174 + 184) = 0;
            *(_DWORD *)(v174 + 188) = 0;
            *(_QWORD *)(v174 + 160) = 0;
            *(_QWORD *)(v174 + 168) = 0;
            *(_QWORD *)(v174 + 152) = &unk_24C0ACDA0;
            *(_DWORD *)(v174 + 176) = 0;
            *(_DWORD *)(v174 + 200) = 2;
            *(_OWORD *)(v174 + 208) = 0uLL;
            *(_OWORD *)(v174 + 224) = 0uLL;
            *(_OWORD *)(v174 + 240) = 0uLL;
            *(_OWORD *)(v174 + 256) = 0uLL;
            *(_OWORD *)(v174 + 272) = 0uLL;
            *(_OWORD *)(v174 + 288) = 0uLL;
            v176 = &unk_24C0B6EA0;
            if (!v173)
              v176 = &unk_24C0B6DA0;
            *(_QWORD *)v174 = v176;
            v177 = this[26];
            v178 = *((_QWORD *)this[28] + 2);
            v179 = v351[0];
            v33 = v351[1];
            if (v351[0] != v351[1])
            {
              v180 = 0;
              do
              {
                while ((unint64_t)v180 >= *(_QWORD *)(v175 + 296))
                {
                  v180 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)(v175 + 280), v179);
                  *(_QWORD *)(v175 + 288) = v180;
                  v179 = (const cricket::Codec *)((char *)v179 + 216);
                  if (v179 == v33)
                    goto LABEL_344;
                }
                if (!v180)
                  goto LABEL_562;
                v180 = (cricket::Codec *)((char *)cricket::Codec::Codec(v180, v179) + 216);
                *(_QWORD *)(v175 + 288) = v180;
                v179 = (const cricket::Codec *)((char *)v179 + 216);
              }
              while (v179 != v33);
            }
LABEL_344:
            v33 = a2;
            if (*(_DWORD *)v360)
            {
              LODWORD(v329) = *(_DWORD *)v360;
              *(_OWORD *)v330 = *(_OWORD *)&v360[8];
              *(_QWORD *)&v330[16] = *(_QWORD *)&v360[24];
              *(_DWORD *)v331 = (_DWORD)v361;
              *(_DWORD *)&v331[3] = *(_DWORD *)((char *)&v361 + 3);
              (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
              v110 = v321;
            }
            else
            {
              if (*(_BYTE *)this[28])
                v181 = "RTP/AVPF";
              else
                v181 = "UDP/TLS/RTP/SAVPF";
              if (*(_BYTE *)this[28])
                v182 = 8;
              else
                v182 = 17;
              (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v175 + 88))(v175, v181, v182);
              *(_DWORD *)(v175 + 124) = *(_DWORD *)(v109 + 32);
              if (*(_BYTE *)(v109 + 36))
                v183 = 1;
              else
                v183 = *(_QWORD *)(v175 + 280) == *(_QWORD *)(v175 + 288);
              v184 = v183;
              *(_QWORD *)__sz = v175;
              cricket::SessionDescription::AddContent(v34, v109 + 8, 0, v184, (uint64_t *)__sz);
              v185 = *(_QWORD *)__sz;
              *(_QWORD *)__sz = 0;
              v110 = v321;
              if (v185)
                (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
              cricket::MediaSessionDescriptionFactory::AddTransportOffer((uint64_t)&v329, (uint64_t)this, (unsigned __int8 **)(v109 + 8), (_BYTE *)(v109 + 37), (uint64_t)a3, v34, (cricket::IceCredentialsIterator *)&v345);
              if ((v360[31] & 0x80000000) != 0)
                operator delete(*(void **)&v360[8]);
            }
            goto LABEL_362;
          }
LABEL_253:
          if (!v117 || *(_BYTE *)(v117 + 28))
            goto LABEL_416;
          v140 = *(unsigned __int8 *)(v117 + 23);
          if ((v140 & 0x80u) == 0)
            v141 = *(unsigned __int8 *)(v117 + 23);
          else
            v141 = *(_QWORD *)(v117 + 8);
          v142 = *(unsigned __int8 *)(v109 + 31);
          v143 = (char)v142;
          if ((v142 & 0x80u) != 0)
            v142 = *(_QWORD *)(v109 + 16);
          if (v141 != v142)
            goto LABEL_416;
          if (v143 >= 0)
            v144 = (unsigned __int8 *)(v109 + 8);
          else
            v144 = *(unsigned __int8 **)(v109 + 8);
          if ((v140 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v117, v144, *(_QWORD *)(v117 + 8)))
              goto LABEL_416;
          }
          else if (*(_BYTE *)(v117 + 23))
          {
            v145 = (unsigned __int8 *)v117;
            while (*v145 == *v144)
            {
              ++v145;
              ++v144;
              if (!--v140)
                goto LABEL_405;
            }
LABEL_416:
            v204 = *v137;
            v203 = v137[1];
            if (*v137 == v203)
              goto LABEL_315;
            while (1)
            {
              if (!v365)
                goto LABEL_420;
              if (v359)
                break;
              if (*(_DWORD *)v109 == 1)
              {
                if (!v365)
                  goto LABEL_562;
                if (cricket::Codec::GetResiliencyType((uint64_t)v360) == 4)
                {
                  if (v359)
                  {
                    if (!v365)
                      goto LABEL_562;
                    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
                    if (v317)
                      goto LABEL_562;
                    LOWORD(__p.__r_.__value_.__l.__data_) = *(_WORD *)"apt";
                    *(_WORD *)&__p.__r_.__value_.__s.__data_[2] = cricket::kCodecParamAssociatedPayloadType[2];
                    cricket::Codec::SetParam((uint64_t)v360, (uint64_t)&__p, *(int *)&__sz[12]);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    if (v359)
                      cricket::Codec::~Codec((cricket::Codec *)__sz);
                  }
                }
              }
              if (!v365)
                goto LABEL_562;
              if (v354.__r_.__value_.__l.__size_ < v354.__r_.__value_.__r.__words[2])
              {
                if (!v354.__r_.__value_.__l.__size_)
                  goto LABEL_562;
                v354.__r_.__value_.__l.__size_ = (std::string::size_type)cricket::Codec::Codec((cricket::Codec *)v354.__r_.__value_.__l.__size_, (const cricket::Codec *)v360)+ 216;
                if (!v365)
                  goto LABEL_420;
LABEL_419:
                cricket::Codec::~Codec((cricket::Codec *)v360);
                goto LABEL_420;
              }
              v354.__r_.__value_.__l.__size_ = (std::string::size_type)std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)&v354, (const cricket::Codec *)v360);
              if (v365)
                goto LABEL_419;
LABEL_420:
              v204 = (cricket::Codec *)((char *)v204 + 216);
              if (v204 == v203)
                goto LABEL_315;
            }
            cricket::Codec::~Codec((cricket::Codec *)__sz);
            if (!v365)
              goto LABEL_420;
            goto LABEL_419;
          }
LABEL_405:
          v197 = *(_QWORD *)(v117 + 32);
          if (v197
            && (*(unsigned int (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v197 + 16))(v197, v144) == v135)
          {
            v198 = *(_QWORD *)(v117 + 32);
            v199 = *(cricket::Codec **)(v198 + 280);
            v200 = *(cricket::Codec **)(v198 + 288);
            if (v199 != v200)
            {
              v201 = (cricket::Codec **)(v198 + 280);
              do
              {
                if (v365)
                {
                  cricket::Codec::~Codec((cricket::Codec *)v360);
                  if (v354.__r_.__value_.__l.__size_ >= v354.__r_.__value_.__r.__words[2])
                  {
                    v202 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)&v354, v199);
                  }
                  else
                  {
                    if (!v354.__r_.__value_.__l.__size_)
                      goto LABEL_562;
                    v202 = (cricket::Codec *)((char *)cricket::Codec::Codec((cricket::Codec *)v354.__r_.__value_.__l.__size_, v199)+ 216);
                  }
                  v354.__r_.__value_.__l.__size_ = (std::string::size_type)v202;
                }
                v199 = (cricket::Codec *)((char *)v199 + 216);
              }
              while (v199 != v200);
            }
            goto LABEL_416;
          }
          v207 = v34;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
          {
            v110 = v321;
          }
          else
          {
            v33 = (cricket::Codec *)*(char *)(v117 + 23);
            if ((int)v33 >= 0)
              v208 = *(unsigned __int8 *)(v117 + 23);
            else
              v208 = *(_QWORD *)(v117 + 8);
            v34 = v208 + 33;
            v110 = v321;
            if (v208 + 33 > 0x7FFFFFFFFFFFFFF7)
              break;
            if (v34 > 0x16)
            {
              v210 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v210 = v34 | 7;
              v211 = v210 + 1;
              v209 = (char *)operator new(v210 + 1);
              *(_QWORD *)&__sz[16] = v211 | 0x8000000000000000;
              *(_QWORD *)__sz = v209;
              *(_QWORD *)&__sz[8] = v208 + 33;
            }
            else
            {
              memset(__sz, 0, 24);
              v209 = __sz;
              __sz[23] = v208 + 33;
            }
            v212 = v209 + 33;
            if (v209 <= "Media type for content with mid='" && v212 > "Media type for content with mid='")
              goto LABEL_562;
            qmemcpy(v209, "Media type for content with mid='", 33);
            v214 = (int)v33 >= 0 ? (char *)v117 : *(char **)v117;
            v215 = &v212[v208];
            if (v214 >= v212 && v215 > v214)
              goto LABEL_562;
            v33 = (cricket::Codec *)"' does not match previous type.";
            if (v208)
              memmove(v212, v214, v208);
            *v215 = 0;
            v217 = *(_QWORD *)&__sz[16];
            if (__sz[23] >= 0)
              v218 = 22;
            else
              v218 = (*(_QWORD *)&__sz[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (__sz[23] >= 0)
              v219 = __sz[23];
            else
              v219 = *(_QWORD *)&__sz[8];
            if (v218 - v219 >= 0x1F)
            {
              v220 = __sz;
              if (__sz[23] < 0)
                v220 = *(_BYTE **)__sz;
              v221 = &v220[v219];
              if (&v220[v219] <= "' does not match previous type." && v221 + 31 > "' does not match previous type.")
                goto LABEL_562;
              qmemcpy(v221, "' does not match previous type.", 31);
              v222 = v219 + 31;
              if (v217 < 0)
                *(_QWORD *)&__sz[8] = v219 + 31;
              else
                __sz[23] = v222 & 0x7F;
              v220[v222] = 0;
            }
            else
            {
              std::string::__grow_by_and_replace((std::string *)__sz, v218, v219 - v218 + 31, v219, v219, 0, 0x1FuLL, "' does not match previous type.");
            }
            *(_OWORD *)v360 = *(_OWORD *)__sz;
            *(_QWORD *)&v360[16] = *(_QWORD *)&__sz[16];
            memset(__sz, 0, 24);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"INTERNAL_ERROR";
            __p.__r_.__value_.__l.__size_ = 14;
            rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v218, v206, v219, v105, v106, v107, v108, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
            if ((v360[23] & 0x80000000) != 0)
              operator delete(*(void **)v360);
            if ((__sz[23] & 0x80000000) != 0)
              operator delete(*(void **)__sz);
          }
          v33 = (cricket::Codec *)*(char *)(v117 + 23);
          if ((int)v33 >= 0)
            v223 = *(unsigned __int8 *)(v117 + 23);
          else
            v223 = *(_QWORD *)(v117 + 8);
          v34 = v223 + 33;
          if (v223 + 33 <= 0x7FFFFFFFFFFFFFF7)
          {
            if (v34 > 0x16)
            {
              v225 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v225 = v34 | 7;
              v226 = v225 + 1;
              p_p = (std::string *)operator new(v225 + 1);
              __p.__r_.__value_.__r.__words[2] = v226 | 0x8000000000000000;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
              __p.__r_.__value_.__l.__size_ = v223 + 33;
            }
            else
            {
              memset(&__p, 0, sizeof(__p));
              p_p = &__p;
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = v223 + 33;
            }
            v227 = &p_p[1].__r_.__value_.__s.__data_[9];
            if (p_p <= (std::string *)"Media type for content with mid='" && v227 > "Media type for content with mid='")
              goto LABEL_562;
            qmemcpy(p_p, "Media type for content with mid='", 33);
            v229 = (int)v33 >= 0 ? (char *)v117 : *(char **)v117;
            v230 = &v227[v223];
            if (v229 >= v227 && v230 > v229)
              goto LABEL_562;
            if (v223)
              memmove(v227, v229, v223);
            *v230 = 0;
            v232 = __p.__r_.__value_.__r.__words[2];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v233 = 22;
            else
              v233 = (__p.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v234 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v234 = __p.__r_.__value_.__l.__size_;
            if (v233 - v234 >= 0x1F)
            {
              v235 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v235 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v236 = (char *)v235 + v234;
              if ((char *)v235 + v234 <= "' does not match previous type."
                && v236 + 31 > "' does not match previous type.")
              {
                goto LABEL_562;
              }
              qmemcpy(v236, "' does not match previous type.", 31);
              v237 = v234 + 31;
              if ((v232 & 0x8000000000000000) != 0)
                __p.__r_.__value_.__l.__size_ = v234 + 31;
              else
                *((_BYTE *)&__p.__r_.__value_.__s + 23) = v237 & 0x7F;
              v235->__r_.__value_.__s.__data_[v237] = 0;
            }
            else
            {
              std::string::__grow_by_and_replace(&__p, v233, v234 - v233 + 31, v234, v234, 0, 0x1FuLL, "' does not match previous type.");
            }
            *(std::string *)__sz = __p;
            memset(&__p, 0, sizeof(__p));
            v238 = __sz[23];
            if ((__sz[23] & 0x80000000) == 0)
            {
              *(_DWORD *)v360 = 10;
              v239 = __sz;
              v240 = __sz[23];
LABEL_528:
              if (v240 > 0x16)
              {
                v242 = (v240 & 0x7FFFFFFFFFFFFFF8) + 8;
                if ((v240 | 7) != 0x17)
                  v242 = v240 | 7;
                v243 = v242 + 1;
                v241 = operator new(v242 + 1);
                *(_QWORD *)&v360[24] = v243 | 0x8000000000000000;
                *(_QWORD *)&v360[8] = v241;
                *(_QWORD *)&v360[16] = v240;
              }
              else
              {
                v360[31] = v240;
                v241 = &v360[8];
              }
              v244 = &v241[v240];
              if (v241 <= v239 && v244 > v239)
                goto LABEL_562;
              if (v240)
                memmove(v241, v239, v240);
              *v244 = 0;
              LODWORD(v361) = 0;
              BYTE4(v361) = 0;
              BYTE6(v361) = 0;
              v245 = *(_DWORD *)v360;
              v33 = *(cricket::Codec **)&v360[8];
              v356[0] = *(_QWORD *)&v360[16];
              *(_QWORD *)((char *)v356 + 7) = *(_QWORD *)&v360[23];
              v34 = v360[31];
              memset(&v360[8], 0, 24);
              v350 = WORD2(v361);
              v349 = 0;
              if (v238 < 0)
              {
                operator delete(*(void **)__sz);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              v246 = v354.__r_.__value_.__r.__words[0];
              if (v354.__r_.__value_.__r.__words[0])
              {
                v247 = (void *)v354.__r_.__value_.__r.__words[0];
                if (v354.__r_.__value_.__l.__size_ != v354.__r_.__value_.__r.__words[0])
                {
                  v248 = v354.__r_.__value_.__l.__size_ - 216;
                  v249 = (void (***)(std::string::size_type))(v354.__r_.__value_.__l.__size_ - 216);
                  do
                  {
                    v250 = *v249;
                    v249 -= 27;
                    (*v250)(v248);
                    v119 = v248 == v246;
                    v248 = (std::string::size_type)v249;
                  }
                  while (!v119);
                  v247 = (void *)v354.__r_.__value_.__r.__words[0];
                }
                v354.__r_.__value_.__l.__size_ = v246;
                operator delete(v247);
              }
              if (!v245)
                goto LABEL_562;
              LODWORD(v329) = v245;
              *(_QWORD *)v330 = v33;
              *(_QWORD *)&v330[8] = v356[0];
              *(_QWORD *)&v330[15] = *(_QWORD *)((char *)v356 + 7);
              v330[23] = v34;
              *(_DWORD *)v331 = v349;
              *(_WORD *)&v331[4] = v350;
              v331[6] = 0;
              v33 = a2;
              v34 = v207;
LABEL_362:
              v186 = v351[0];
              if (v351[0])
              {
                v187 = v351[0];
                if (v351[1] != v351[0])
                {
                  v188 = (cricket::Codec *)((char *)v351[1] - 216);
                  v189 = (void (***)(char *))((char *)v351[1] - 216);
                  do
                  {
                    v190 = *v189;
                    v189 -= 27;
                    (*v190)((char *)v188);
                    v119 = v188 == v186;
                    v188 = (cricket::Codec *)v189;
                  }
                  while (!v119);
                  v187 = v351[0];
                }
                v351[1] = v186;
                operator delete(v187);
              }
              v134 = (int)v329;
              v104 = *(_QWORD *)v330;
              *(_QWORD *)v355 = *(_QWORD *)&v330[8];
              *(_QWORD *)&v355[7] = *(_QWORD *)&v330[15];
              v157 = v330[23];
              v332 = *(_DWORD *)v331;
              v333 = *(_WORD *)&v331[4];
              v158 = v331[6];
              v111 = a3;
              goto LABEL_370;
            }
            v240 = *(_QWORD *)&__sz[8];
            if ((*(_QWORD *)&__sz[8] & 0x8000000000000000) != 0)
              goto LABEL_562;
            v239 = *(_BYTE **)__sz;
            if (*(_QWORD *)&__sz[8])
            {
              if (!*(_QWORD *)__sz)
                goto LABEL_562;
            }
            *(_DWORD *)v360 = 10;
            if (*(_QWORD *)&__sz[8] <= 0x7FFFFFFFFFFFFFF7uLL)
              goto LABEL_528;
          }
          break;
        default:
LABEL_670:
          rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v104);
      }
LABEL_667:
      abort();
    }
    v117 = 0;
    v118 = *(_DWORD *)v109;
    v119 = *(_DWORD *)v109 == 2;
    if (*(_DWORD *)v109 < 2u)
      goto LABEL_236;
LABEL_228:
    if (!v119)
    {
      if (v118 != 3)
      {
LABEL_222:
        ++v112;
        v109 += 136;
        if (v109 == v110)
          goto LABEL_549;
        continue;
      }
      if (!v117
        || (v120 = *(_QWORD *)(v117 + 32)) == 0
        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v120 + 16))(v120) != 3)
      {
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc", 2147, "IsMediaContentOfType(current_content, MEDIA_TYPE_UNSUPPORTED)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v105, v106, v107, v108, v316);
      }
      v121 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v117 + 32) + 80))(*(_QWORD *)(v117 + 32));
      v122 = (char *)(v121 + 304);
      v123 = operator new();
      v124 = v123;
      if (*(char *)(v121 + 327) < 0)
      {
        v125 = *(_QWORD *)(v121 + 312);
        if ((v125 & 0x8000000000000000) != 0)
          goto LABEL_562;
        v122 = *(char **)v122;
        if (v125 && v122 == 0)
          goto LABEL_562;
      }
      else
      {
        v125 = *(unsigned __int8 *)(v121 + 327);
      }
      *(_QWORD *)v123 = &unk_24C0B6E20;
      *(_QWORD *)(v123 + 8) = 0;
      *(_QWORD *)(v123 + 16) = 0;
      *(_QWORD *)(v123 + 24) = 0;
      *(_DWORD *)(v123 + 31) = 0;
      *(_DWORD *)(v123 + 36) = -1;
      *(_BYTE *)(v123 + 63) = 2;
      if (v123 + 40 > (unint64_t)"AS" || v123 + 42 <= (unint64_t)"AS")
      {
        strcpy((char *)(v123 + 40), "AS");
        *(_QWORD *)(v123 + 72) = 0;
        *(_QWORD *)(v123 + 80) = 0;
        *(_QWORD *)(v123 + 64) = 0;
        *(_BYTE *)(v123 + 88) = 0;
        *(_QWORD *)(v123 + 104) = 0;
        *(_QWORD *)(v123 + 112) = 0;
        *(_QWORD *)(v123 + 96) = 0;
        *(_BYTE *)(v123 + 120) = 0;
        *(_QWORD *)(v123 + 124) = 0;
        *(_QWORD *)(v123 + 140) = 0;
        *(_QWORD *)(v123 + 132) = 0;
        *(_DWORD *)(v123 + 148) = 0;
        *(_BYTE *)(v123 + 192) = 0;
        *(_WORD *)(v123 + 184) = 0;
        *(_DWORD *)(v123 + 188) = 0;
        *(_QWORD *)(v123 + 160) = 0;
        *(_QWORD *)(v123 + 168) = 0;
        *(_QWORD *)(v123 + 152) = &unk_24C0ACDA0;
        *(_DWORD *)(v123 + 176) = 0;
        *(_DWORD *)(v123 + 200) = 2;
        *(_OWORD *)(v123 + 208) = 0u;
        *(_OWORD *)(v123 + 224) = 0u;
        *(_OWORD *)(v123 + 240) = 0u;
        *(_OWORD *)(v123 + 256) = 0u;
        *(_OWORD *)(v123 + 272) = 0u;
        *(_OWORD *)(v123 + 288) = 0u;
        *(_QWORD *)v123 = &unk_24C0B6FA0;
        if (v125 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_667;
        if (v125 > 0x16)
        {
          v149 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v125 | 7) != 0x17)
            v149 = v125 | 7;
          v150 = v149 + 1;
          v147 = (char *)operator new(v149 + 1);
          *(_QWORD *)(v124 + 312) = v125;
          *(_QWORD *)(v124 + 320) = v150 | 0x8000000000000000;
          *(_QWORD *)(v124 + 304) = v147;
          v148 = &v147[v125];
          if (v147 <= v122)
            goto LABEL_284;
        }
        else
        {
          v147 = (char *)(v123 + 304);
          *(_BYTE *)(v124 + 327) = v125;
          v148 = (char *)(v124 + 304 + v125);
          if (v124 + 304 > (unint64_t)v122)
            goto LABEL_285;
LABEL_284:
          if (v148 > v122)
            goto LABEL_562;
        }
LABEL_285:
        if (v125)
          memmove(v147, v122, v125);
        *v148 = 0;
        v151 = *(_QWORD *)(v117 + 32);
        if (*(char *)(v151 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__sz, *(const std::string::value_type **)(v151 + 8), *(_QWORD *)(v151 + 16));
          v111 = a3;
          v153 = __sz[23];
          if ((__sz[23] & 0x80000000) != 0)
            goto LABEL_297;
LABEL_289:
          v154 = v153;
          v155 = __sz;
        }
        else
        {
          v152 = *(_OWORD *)(v151 + 8);
          *(_QWORD *)&__sz[16] = *(_QWORD *)(v151 + 24);
          *(_OWORD *)__sz = v152;
          v111 = a3;
          v153 = __sz[23];
          if ((__sz[23] & 0x80000000) == 0)
            goto LABEL_289;
LABEL_297:
          v154 = *(_QWORD *)&__sz[8];
          if ((*(_QWORD *)&__sz[8] & 0x8000000000000000) != 0)
            goto LABEL_562;
          v155 = *(_BYTE **)__sz;
          if (*(_QWORD *)&__sz[8])
          {
            if (!*(_QWORD *)__sz)
              goto LABEL_562;
          }
        }
        (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v124 + 88))(v124, v155, v154);
        if ((__sz[23] & 0x80000000) != 0)
          operator delete(*(void **)__sz);
        *(_QWORD *)__sz = v124;
        cricket::SessionDescription::AddContent(v34, v109 + 8, 2, 1, (uint64_t *)__sz);
        if (*(_QWORD *)__sz)
          (*(void (**)(_QWORD))(**(_QWORD **)__sz + 8))(*(_QWORD *)__sz);
        cricket::MediaSessionDescriptionFactory::AddTransportOffer((uint64_t)v360, (uint64_t)this, (unsigned __int8 **)(v109 + 8), (_BYTE *)(v109 + 37), (uint64_t)v111, v34, (cricket::IceCredentialsIterator *)&v345);
        v134 = *(_DWORD *)v360;
        v104 = *(_QWORD *)&v360[8];
        *(_QWORD *)v355 = *(_QWORD *)&v360[16];
        *(_QWORD *)&v355[7] = *(_QWORD *)&v360[23];
        v157 = v360[31];
        v332 = (int)v361;
        v333 = WORD2(v361);
        v158 = BYTE6(v361);
        goto LABEL_370;
      }
LABEL_562:
      while (2)
      {
        while (2)
        {
          __break(1u);
LABEL_563:
          v255 = v361;
          if (*(_QWORD **)&v360[24] == v361)
          {
LABEL_574:
            if (v255)
            {
              v263 = v361;
              v264 = v255;
              if (v361 != v255)
              {
                do
                {
                  if (*((char *)v263 - 1) < 0)
                    operator delete((void *)*(v263 - 3));
                  v263 -= 3;
                }
                while (v263 != v255);
                v264 = *(void **)&v360[24];
              }
              v361 = v255;
              operator delete(v264);
            }
            goto LABEL_582;
          }
          v256 = *(_QWORD *)(v34 + 56);
          if (v256 >= *(_QWORD *)(v34 + 64))
          {
            *(_QWORD *)(v34 + 56) = std::vector<cricket::ContentGroup>::__push_back_slow_path<cricket::ContentGroup const&>((std::string **)(v34 + 48), (__int128 *)v360);
              goto LABEL_573;
          }
          else
          {
            if (!v256)
              continue;
            if ((v360[23] & 0x80000000) == 0)
            {
              v257 = *(_OWORD *)v360;
              *(_QWORD *)(v256 + 16) = *(_QWORD *)&v360[16];
              *(_OWORD *)v256 = v257;
              *(_QWORD *)(v256 + 24) = 0;
              *(_QWORD *)(v256 + 32) = 0;
              *(_QWORD *)(v256 + 40) = 0;
              v258 = *(_QWORD *)&v360[24];
              v259 = v361;
              v260 = (int64_t)v361 - *(_QWORD *)&v360[24];
              if (v361 == *(_QWORD **)&v360[24])
                goto LABEL_652;
LABEL_646:
              v298 = 0xAAAAAAAAAAAAAAABLL * (v260 >> 3);
              if (v298 >= 0xAAAAAAAAAAAAAABLL)
                goto LABEL_667;
              v299 = v34;
              v300 = (char *)operator new(v260);
              v301 = 0;
              *(_QWORD *)(v256 + 24) = v300;
              *(_QWORD *)(v256 + 32) = v300;
              *(_QWORD *)(v256 + 40) = &v300[24 * v298];
              do
              {
                while (1)
                {
                  v302 = (__int128 *)(v258 + v301);
                  v303 = (std::string *)&v300[v301];
                  if ((*(char *)(v258 + v301 + 23) & 0x80000000) == 0)
                    break;
                  std::string::__init_copy_ctor_external(v303, *(const std::string::value_type **)v302, *((_QWORD *)v302 + 1));
                  v301 += 24;
                  if ((_QWORD *)(v258 + v301) == v259)
                    goto LABEL_651;
                }
                v304 = *v302;
                v303->__r_.__value_.__r.__words[2] = *((_QWORD *)v302 + 2);
                *(_OWORD *)&v303->__r_.__value_.__l.__data_ = v304;
                v301 += 24;
              }
              while ((_QWORD *)(v258 + v301) != v259);
LABEL_651:
              *(_QWORD *)(v256 + 32) = &v300[v301];
              v34 = v299;
              goto LABEL_652;
            }
            std::string::__init_copy_ctor_external(*(std::string **)(v34 + 56), *(const std::string::value_type **)v360, *(std::string::size_type *)&v360[8]);
            *(_QWORD *)(v256 + 24) = 0;
            *(_QWORD *)(v256 + 32) = 0;
            *(_QWORD *)(v256 + 40) = 0;
            v258 = *(_QWORD *)&v360[24];
            v259 = v361;
            v260 = (int64_t)v361 - *(_QWORD *)&v360[24];
            if (v361 != *(_QWORD **)&v360[24])
              goto LABEL_646;
LABEL_652:
            v33 = a2;
            *(_QWORD *)(v34 + 56) = v256 + 48;
            {
LABEL_573:
              v255 = *(_QWORD **)&v360[24];
              goto LABEL_574;
            }
          }
          break;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          *(_QWORD *)__sz = "INTERNAL_ERROR";
          *(_QWORD *)&__sz[8] = 14;
          rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v305, v306, v307, v308, v309, v310, v311, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
        }
        v312 = (char *)operator new(0x38uLL);
        if (v312 > "CreateOffer failed to UpdateTransportInfoForBundle"
          || v312 + 50 <= "CreateOffer failed to UpdateTransportInfoForBundle")
        {
          strcpy(v312, "CreateOffer failed to UpdateTransportInfoForBundle");
          *(_DWORD *)a4 = 10;
          *(_QWORD *)(a4 + 8) = v312;
          *(_OWORD *)(a4 + 16) = xmmword_208F08670;
          *(_DWORD *)(a4 + 32) = 0;
          *(_BYTE *)(a4 + 36) = 0;
          *(_BYTE *)(a4 + 38) = 0;
          *(_BYTE *)(a4 + 40) = 0;
          *(_BYTE *)(a4 + 48) = 0;
          v313 = *(_QWORD **)&v360[24];
          if (*(_QWORD *)&v360[24])
          {
            v314 = v361;
            v315 = *(void **)&v360[24];
            if (v361 != *(_QWORD **)&v360[24])
            {
              do
              {
                if (*((char *)v314 - 1) < 0)
                  operator delete((void *)*(v314 - 3));
                v314 -= 3;
              }
              while (v314 != v313);
              v315 = *(void **)&v360[24];
            }
            v361 = v313;
            operator delete(v315);
          }
          if ((v360[23] & 0x80000000) != 0)
            operator delete(*(void **)v360);
          goto LABEL_570;
        }
        continue;
      }
    }
    break;
  }
  v130 = operator new();
  v131 = (void *)v130;
  *(_QWORD *)v130 = &unk_24C0B6E20;
  *(_QWORD *)(v130 + 8) = 0;
  *(_QWORD *)(v130 + 16) = 0;
  *(_QWORD *)(v130 + 24) = 0;
  *(_DWORD *)(v130 + 31) = 0;
  *(_DWORD *)(v130 + 36) = -1;
  *(_BYTE *)(v130 + 63) = 2;
  if (v130 + 40 <= (unint64_t)"AS" && v130 + 42 > (unint64_t)"AS")
    goto LABEL_562;
  strcpy((char *)(v130 + 40), "AS");
  *(_QWORD *)(v130 + 72) = 0;
  *(_QWORD *)(v130 + 80) = 0;
  *(_QWORD *)(v130 + 64) = 0;
  *(_BYTE *)(v130 + 88) = 0;
  *(_QWORD *)(v130 + 104) = 0;
  *(_QWORD *)(v130 + 112) = 0;
  *(_QWORD *)(v130 + 96) = 0;
  *(_BYTE *)(v130 + 120) = 0;
  *(_QWORD *)(v130 + 124) = 0;
  *(_QWORD *)(v130 + 140) = 0;
  *(_QWORD *)(v130 + 132) = 0;
  *(_DWORD *)(v130 + 148) = 0;
  *(_BYTE *)(v130 + 192) = 0;
  *(_WORD *)(v130 + 184) = 0;
  *(_DWORD *)(v130 + 188) = 0;
  *(_QWORD *)(v130 + 160) = 0;
  *(_QWORD *)(v130 + 168) = 0;
  *(_QWORD *)(v130 + 152) = &unk_24C0ACDA0;
  *(_DWORD *)(v130 + 176) = 0;
  *(_DWORD *)(v130 + 200) = 2;
  *(_OWORD *)(v130 + 208) = 0u;
  *(_OWORD *)(v130 + 224) = 0u;
  *(_OWORD *)(v130 + 240) = 0u;
  *(_OWORD *)(v130 + 256) = 0u;
  *(_OWORD *)(v130 + 272) = 0u;
  *(_OWORD *)(v130 + 288) = 0u;
  *(_QWORD *)v130 = &unk_24C0B6F20;
  *(_BYTE *)(v130 + 304) = 1;
  *(_QWORD *)(v130 + 308) = 0x1000000001388;
  v360[23] = 13;
  if (v320)
    goto LABEL_562;
  strcpy(v360, "UDP/DTLS/SCTP");
  v132 = *((_BYTE *)v33 + 88);
  *(_QWORD *)(v130 + 24) = *(_QWORD *)&v360[16];
  *(_OWORD *)(v130 + 8) = *(_OWORD *)v360;
  v133 = *((_BYTE *)v33 + 1);
  *(_BYTE *)(v130 + 304) = v132;
  *(_DWORD *)(v130 + 312) = 0x40000;
  v329 = 0;
  *(_QWORD *)v330 = 0;
  *(_QWORD *)&v330[8] = 0;
  v134 = *(_DWORD *)v360;
  if (*(_DWORD *)v360)
  {
    *(_DWORD *)__sz = *(_DWORD *)v360;
    *(_OWORD *)&__sz[8] = *(_OWORD *)&v360[8];
    *(_QWORD *)&__sz[24] = *(_QWORD *)&v360[24];
    *(_DWORD *)v358 = (_DWORD)v361;
    *(_DWORD *)&v358[3] = *(_DWORD *)((char *)&v361 + 3);
    (*(void (**)(void *))(*(_QWORD *)v131 + 8))(v131);
    v111 = a3;
  }
  else
  {
    v156 = *(_BYTE *)(v109 + 36);
    v329 = v131;
    cricket::SessionDescription::AddContent(v34, v109 + 8, 1, v156, (uint64_t *)&v329);
    if (v329)
      (*(void (**)(void *))(*(_QWORD *)v329 + 8))(v329);
    v111 = a3;
    cricket::MediaSessionDescriptionFactory::AddTransportOffer((uint64_t)__sz, (uint64_t)this, (unsigned __int8 **)(v109 + 8), (_BYTE *)(v109 + 37), (uint64_t)a3, v34, (cricket::IceCredentialsIterator *)&v345);
    if ((v360[31] & 0x80000000) != 0)
      operator delete(*(void **)&v360[8]);
    v134 = *(_DWORD *)__sz;
  }
  v104 = *(_QWORD *)&__sz[8];
  *(_QWORD *)v355 = *(_QWORD *)&__sz[16];
  *(_QWORD *)&v355[7] = *(_QWORD *)&__sz[23];
  v157 = __sz[31];
  v332 = *(_DWORD *)v358;
  v333 = *(_WORD *)&v358[4];
  v158 = v358[6];
LABEL_370:
  if (!v134)
  {
    if (v157 < 0)
      operator delete((void *)v104);
    goto LABEL_222;
  }
  *(_DWORD *)a4 = v134;
  v261 = *(_QWORD *)v355;
  *(_QWORD *)(a4 + 8) = v104;
  *(_QWORD *)(a4 + 16) = v261;
  *(_QWORD *)(a4 + 23) = *(_QWORD *)&v355[7];
  *(_BYTE *)(a4 + 31) = v157;
  *(_DWORD *)(a4 + 32) = v332;
  *(_WORD *)(a4 + 36) = v333;
  *(_BYTE *)(a4 + 38) = v158;
  *(_BYTE *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = 0;
LABEL_570:
  cricket::SessionDescription::~SessionDescription((cricket::SessionDescription *)v34);
  MEMORY[0x20BD0ADEC]();
  v262 = (void **)v335[1];
  if (v335[1])
    goto LABEL_595;
LABEL_605:
  v279 = (void **)v334[0];
  if (v334[0])
  {
    v280 = (void **)v334[1];
    v281 = v334[0];
    if (v334[1] != v334[0])
    {
      do
      {
        if (*((char *)v280 - 9) < 0)
          operator delete(*(v280 - 4));
        v280 -= 4;
      }
      while (v280 != v279);
      v281 = v334[0];
    }
    v334[1] = v279;
    operator delete(v281);
  }
  v282 = (char *)v337;
  if (v337)
  {
    v283 = v337;
    if (v338 != v337)
    {
      v284 = v338 - 216;
      v285 = (void (***)(char *))(v338 - 216);
      do
      {
        v286 = *v285;
        v285 -= 27;
        (*v286)(v284);
        v119 = v284 == v282;
        v284 = (char *)v285;
      }
      while (!v119);
      v283 = v337;
    }
    v338 = v282;
    operator delete(v283);
  }
  v287 = (char *)v340;
  if (v340)
  {
    v288 = v340;
    if (v341 != v340)
    {
      v289 = v341 - 216;
      v290 = (void (***)(char *))(v341 - 216);
      do
      {
        v291 = *v290;
        v290 -= 27;
        (*v291)(v289);
        v119 = v289 == v287;
        v289 = (char *)v290;
      }
      while (!v119);
      v288 = v340;
    }
    v341 = v287;
    operator delete(v288);
  }
  v292 = (char *)v343;
  if (v343)
  {
    v293 = v344;
    v294 = v343;
    if (v344 != v343)
    {
      do
        cricket::StreamParams::~StreamParams((cricket::StreamParams *)(v293 - 144));
      while (v293 != v292);
      v294 = v343;
    }
    v344 = v292;
    operator delete(v294);
  }
  if (v322)
    operator delete(v322);
  v345 = off_24C0B5178;
  v295 = (void **)v346;
  if (v346)
  {
    v296 = (void **)v347;
    v297 = v346;
    if (v347 == v346)
    {
LABEL_643:
      v347 = (char *)v295;
      operator delete(v297);
      return;
    }
    while (1)
    {
      if (*((char *)v296 - 9) < 0)
      {
        operator delete(*(v296 - 4));
        if ((*((char *)v296 - 33) & 0x80000000) == 0)
          goto LABEL_638;
LABEL_641:
        operator delete(*(v296 - 7));
        v296 -= 7;
        if (v296 == v295)
        {
LABEL_642:
          v297 = v346;
          goto LABEL_643;
        }
      }
      else
      {
        if (*((char *)v296 - 33) < 0)
          goto LABEL_641;
LABEL_638:
        v296 -= 7;
        if (v296 == v295)
          goto LABEL_642;
      }
    }
  }
}

void cricket::`anonymous namespace'::GetActiveContents(char **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char **v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v49;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *a2;
  v3 = a2[1];
  if (v3 != *a2)
  {
    v7 = a1;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(a3 + 40);
      if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a3 + 48) - v11) >> 3) <= v10)
      {
LABEL_51:
        __break(1u);
LABEL_52:
        abort();
      }
      if (!(*(unsigned __int8 *)(v4 + 40 * v10 + 28) | *(unsigned __int8 *)(v11 + 136 * v10 + 36)))
      {
        v12 = v4 + 40 * v10;
        v13 = v11 + 136 * v10;
        v14 = *(unsigned __int8 *)(v12 + 23);
        if ((v14 & 0x80u) == 0)
          v15 = *(unsigned __int8 *)(v12 + 23);
        else
          v15 = *(_QWORD *)(v12 + 8);
        v16 = *(unsigned __int8 *)(v13 + 31);
        v17 = (char)v16;
        if ((v16 & 0x80u) != 0)
          v16 = *(_QWORD *)(v13 + 16);
        if (v15 == v16)
          break;
      }
LABEL_4:
      ++v10;
      v8 += 40;
      if (v10 >= 0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 3))
        return;
    }
    v20 = *(unsigned __int8 **)(v13 + 8);
    v18 = (unsigned __int8 *)(v13 + 8);
    v19 = v20;
    if (v17 >= 0)
      v21 = v18;
    else
      v21 = v19;
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v12, v21, *(_QWORD *)(v12 + 8)))
        goto LABEL_4;
    }
    else if (*(_BYTE *)(v12 + 23))
    {
      v22 = v8;
      while (*(unsigned __int8 *)(v4 + v22) == *v21)
      {
        ++v21;
        ++v22;
        if (!--v14)
          goto LABEL_23;
      }
      goto LABEL_4;
    }
LABEL_23:
    v23 = (unint64_t)v7[2];
    if ((unint64_t)v9 < v23)
    {
      if (!v9)
        goto LABEL_51;
      *(_QWORD *)v9 = v12;
      v24 = v9 + 8;
      goto LABEL_3;
    }
    v25 = *v7;
    v26 = (v9 - v25) >> 3;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 61)
      goto LABEL_52;
    v28 = v23 - (_QWORD)v25;
    if (v28 >> 2 > v27)
      v27 = v28 >> 2;
    v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8;
    v30 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v29)
      v30 = v27;
    if (!v30)
      goto LABEL_51;
    if (v30 >> 61)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v49 = 8 * v30;
    v31 = (char *)operator new(8 * v30);
    v32 = &v31[8 * v26];
    *(_QWORD *)v32 = v12;
    v24 = v32 + 8;
    if (v9 == v25)
    {
      v7 = a1;
      *a1 = v32;
      a1[1] = v24;
      a1[2] = &v31[v49];
      if (!v9)
      {
LABEL_3:
        v7[1] = v24;
        v9 = v24;
        v4 = *a2;
        v3 = a2[1];
        goto LABEL_4;
      }
LABEL_45:
      operator delete(v9);
      goto LABEL_3;
    }
    v33 = v9 - v25 - 8;
    if (v33 < 0x168
      || ((v34 = (v9 - 8 - v25) & 0xFFFFFFFFFFFFFFF8,
           v35 = (unint64_t)&v31[v9 - v25 - 8],
           v36 = v35 - v34,
           v37 = (unint64_t)&v9[-v34 - 8],
           v36 <= v35)
        ? (v38 = v37 > (unint64_t)(v9 - 8))
        : (v38 = 1),
          v38 || (unint64_t)(v25 - v31) < 0x20))
    {
      v39 = v9;
      v40 = v49;
    }
    else
    {
      v42 = (v33 >> 3) + 1;
      v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      v39 = &v9[-v43];
      v32 -= v43;
      v44 = &v31[8 * v26 - 16];
      v45 = (__int128 *)(v9 - 16);
      v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v47 = *v45;
        *((_OWORD *)v44 - 1) = *(v45 - 1);
        *(_OWORD *)v44 = v47;
        v44 -= 32;
        v45 -= 2;
        v46 -= 4;
      }
      while (v46);
      v40 = v49;
      if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_42:
        v9 = v25;
        v7 = a1;
        *a1 = v32;
        a1[1] = v24;
        a1[2] = &v31[v40];
        if (!v9)
          goto LABEL_3;
        goto LABEL_45;
      }
    }
    do
    {
      v41 = *((_QWORD *)v39 - 1);
      v39 -= 8;
      *((_QWORD *)v32 - 1) = v41;
      v32 -= 8;
    }
    while (v39 != v25);
    goto LABEL_42;
  }
}

void cricket::`anonymous namespace'::GetCurrentStreamParams(std::string **a1, uint64_t a2, uint64_t a3)
{
  std::string *v4;
  uint64_t v5;
  const cricket::StreamParams *v6;
  const cricket::StreamParams *v7;
  std::string *v8;
  unint64_t v9;
  std::string *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  __int128 v22;
  __int128 v23;
  cricket::StreamParams *v24;
  uint64_t v26;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v4 = 0;
    do
    {
      v26 = a2;
      v5 = *(_QWORD *)(*(_QWORD *)a2 + 32);
      v7 = *(const cricket::StreamParams **)(v5 + 96);
      v6 = *(const cricket::StreamParams **)(v5 + 104);
      while (v7 != v6)
      {
        v9 = (unint64_t)a1[2];
        if ((unint64_t)v4 < v9)
        {
          if (!v4)
            goto LABEL_28;
          cricket::StreamParams::StreamParams(v4, v7);
          v8 = v4 + 6;
        }
        else
        {
          v10 = *a1;
          v11 = 0x8E38E38E38E38E39 * (((char *)v4 - (char *)*a1) >> 4);
          v12 = v11 + 1;
          if (v11 + 1 > 0x1C71C71C71C71C7)
            goto LABEL_29;
          v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - (_QWORD)v10) >> 4);
          if (2 * v13 > v12)
            v12 = 2 * v13;
          if (v13 >= 0xE38E38E38E38E3)
            v14 = 0x1C71C71C71C71C7;
          else
            v14 = v12;
          if (!v14)
          {
LABEL_28:
            __break(1u);
LABEL_29:
            abort();
          }
          if (v14 > 0x1C71C71C71C71C7)
            std::__throw_bad_array_new_length[abi:sn180100]();
          v15 = 6 * v14;
          v16 = (std::string *)operator new(144 * v14);
          v17 = &v16[v15];
          v18 = cricket::StreamParams::StreamParams(v16 + 6 * v11, v7);
          v8 = v18 + 6;
          if (v4 == v10)
          {
            *a1 = v18;
            a1[1] = v8;
            a1[2] = v17;
            if (!v4)
              goto LABEL_7;
LABEL_26:
            operator delete(v4);
            goto LABEL_7;
          }
          v19 = 0;
          do
          {
            v20 = &v18[v19];
            v21 = &v4[v19];
            v22 = *(_OWORD *)&v4[v19 - 6].__r_.__value_.__l.__data_;
            v20[-6].__r_.__value_.__r.__words[2] = *((_QWORD *)&v4[v19 - 5] - 1);
            *(_OWORD *)&v20[-6].__r_.__value_.__l.__data_ = v22;
            v21[-6].__r_.__value_.__l.__size_ = 0;
            v21[-6].__r_.__value_.__r.__words[2] = 0;
            v21[-6].__r_.__value_.__r.__words[0] = 0;
            v20[-5].__r_.__value_.__r.__words[0] = 0;
            v20[-5].__r_.__value_.__l.__size_ = 0;
            v20[-5].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v20[-5].__r_.__value_.__l.__data_ = *(_OWORD *)&v4[v19 - 5].__r_.__value_.__l.__data_;
            v20[-5].__r_.__value_.__r.__words[2] = *((_QWORD *)&v4[v19 - 4] - 1);
            v21[-5].__r_.__value_.__r.__words[0] = 0;
            v21[-5].__r_.__value_.__l.__size_ = 0;
            v21[-5].__r_.__value_.__r.__words[2] = 0;
            v20[-4].__r_.__value_.__r.__words[0] = 0;
            v20[-4].__r_.__value_.__l.__size_ = 0;
            v20[-4].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v20[-4].__r_.__value_.__l.__data_ = *(_OWORD *)&v4[v19 - 4].__r_.__value_.__l.__data_;
            v20[-4].__r_.__value_.__r.__words[2] = *((_QWORD *)&v4[v19 - 3] - 1);
            v21[-4].__r_.__value_.__r.__words[0] = 0;
            v21[-4].__r_.__value_.__l.__size_ = 0;
            v21[-4].__r_.__value_.__r.__words[2] = 0;
            v23 = *(_OWORD *)&v4[v19 - 3].__r_.__value_.__l.__data_;
            v20[-3].__r_.__value_.__r.__words[2] = *((_QWORD *)&v4[v19 - 2] - 1);
            *(_OWORD *)&v20[-3].__r_.__value_.__l.__data_ = v23;
            v21[-3].__r_.__value_.__l.__size_ = 0;
            v21[-3].__r_.__value_.__r.__words[2] = 0;
            v21[-3].__r_.__value_.__r.__words[0] = 0;
            v20[-2].__r_.__value_.__r.__words[0] = 0;
            v20[-2].__r_.__value_.__l.__size_ = 0;
            v20[-2].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v20[-2].__r_.__value_.__l.__data_ = *(_OWORD *)&v4[v19 - 2].__r_.__value_.__l.__data_;
            v20[-2].__r_.__value_.__r.__words[2] = *((_QWORD *)&v4[v19 - 1] - 1);
            v21[-2].__r_.__value_.__r.__words[0] = 0;
            v21[-2].__r_.__value_.__l.__size_ = 0;
            v21[-2].__r_.__value_.__r.__words[2] = 0;
            v20[-1].__r_.__value_.__r.__words[0] = 0;
            v20[-1].__r_.__value_.__l.__size_ = 0;
            v20[-1].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v20[-1].__r_.__value_.__l.__data_ = *(_OWORD *)&v4[v19 - 1].__r_.__value_.__l.__data_;
            v20[-1].__r_.__value_.__r.__words[2] = v4[v19 - 1].__r_.__value_.__r.__words[2];
            v21[-1].__r_.__value_.__r.__words[0] = 0;
            v21[-1].__r_.__value_.__l.__size_ = 0;
            v21[-1].__r_.__value_.__r.__words[2] = 0;
            v19 -= 6;
          }
          while (&v4[v19] != v10);
          v4 = *a1;
          v24 = (cricket::StreamParams *)a1[1];
          *a1 = &v18[v19];
          a1[1] = v8;
          a1[2] = v17;
          while (v24 != (cricket::StreamParams *)v4)
          {
            v24 = (cricket::StreamParams *)((char *)v24 - 144);
            cricket::StreamParams::~StreamParams(v24);
          }
          if (v4)
            goto LABEL_26;
        }
LABEL_7:
        a1[1] = v8;
        v7 = (const cricket::StreamParams *)((char *)v7 + 144);
        v4 = v8;
      }
      a2 = v26 + 8;
    }
    while (v26 + 8 != a3);
  }
}

std::string *cricket::`anonymous namespace'::UpdateTransportInfoForBundle(std::string *result, uint64_t a2)
{
  std::string *v2;
  std::string::pointer data;
  const void **v5;
  const void **v6;
  char v7;
  uint64_t v8;
  std::string::pointer v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const std::string::value_type *v14;
  size_t v15;
  size_t v16;
  const void *v17;
  size_t v18;
  char *v20;
  char *size;
  uint64_t v22;
  char *v23;
  const void *v25;
  unint64_t v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  std::string *v30;
  char v31;
  __int128 v32;
  size_t v33;
  const std::string::value_type *v34;
  size_t v35;
  __int128 v36;
  int v37;

  if (!a2)
    return 0;
  v2 = result;
  data = result[1].__r_.__value_.__l.__data_;
  if (!data || data == (std::string::pointer)result[1].__r_.__value_.__l.__size_)
    return 0;
  v5 = *(const void ***)(a2 + 24);
  v6 = *(const void ***)(a2 + 32);
  if (v5 == v6)
    return 0;
  v7 = data[23];
  if (v7 >= 0)
    v8 = data[23];
  else
    v8 = *((_QWORD *)data + 1);
  if (v7 >= 0)
    v9 = result[1].__r_.__value_.__l.__data_;
  else
    v9 = *(std::string::pointer *)data;
  v10 = *(_QWORD *)(a2 + 24);
  while (1)
  {
    v11 = *(unsigned __int8 *)(v10 + 23);
    v12 = (v11 & 0x80u) == 0 ? *(unsigned __int8 *)(v10 + 23) : *(_QWORD *)(v10 + 8);
    if (v12 == v8)
      break;
LABEL_15:
    v10 += 112;
    if ((const void **)v10 == v6)
      return 0;
  }
  if ((v11 & 0x80) != 0)
  {
    result = (std::string *)memcmp(*(const void **)v10, v9, *(_QWORD *)(v10 + 8));
    if (!(_DWORD)result)
      goto LABEL_26;
    goto LABEL_15;
  }
  if (*(_BYTE *)(v10 + 23))
  {
    v13 = 0;
    do
    {
      if (*(unsigned __int8 *)(v10 + v13) != v9[v13])
        goto LABEL_15;
      ++v13;
    }
    while (v11 != v13);
    if (!v10)
      return 0;
  }
LABEL_26:
  v37 = *(_DWORD *)(v10 + 100);
  while (1)
  {
    v16 = *((unsigned __int8 *)v5 + 23);
    v17 = v5;
    v18 = v16;
    if (*((char *)v5 + 23) < 0)
    {
      v18 = (size_t)v5[1];
      if ((v18 & 0x8000000000000000) != 0)
        break;
      v17 = *v5;
      if (v18 && v17 == 0)
        break;
    }
    v20 = v2[1].__r_.__value_.__l.__data_;
    size = (char *)v2[1].__r_.__value_.__l.__size_;
    if (v20 != size)
    {
      do
      {
        if (v20[23] < 0)
        {
          v22 = *((_QWORD *)v20 + 1);
          if (v22 < 0)
            goto LABEL_92;
          v23 = *(char **)v20;
          if (v22 && v23 == 0)
            goto LABEL_92;
        }
        else
        {
          v22 = v20[23];
          v23 = v20;
        }
        if (v18 == v22)
        {
          result = (std::string *)memcmp(v17, v23, v18);
          if (!(_DWORD)result)
            goto LABEL_57;
        }
        v20 += 24;
      }
      while (v20 != size);
      v20 = size;
    }
LABEL_57:
    if (v20 == size)
      goto LABEL_36;
    if ((v16 & 0x80u) == 0)
      v25 = (const void *)v16;
    else
      v25 = v5[1];
    v26 = data[23];
    v27 = (char)v26;
    if ((v26 & 0x80u) != 0)
      v26 = *((_QWORD *)data + 1);
    if (v25 == (const void *)v26)
    {
      if (v27 >= 0)
        v28 = (unsigned __int8 *)data;
      else
        v28 = *(unsigned __int8 **)data;
      if ((v16 & 0x80) != 0)
      {
        result = (std::string *)memcmp(*v5, v28, (size_t)v5[1]);
        if (!(_DWORD)result)
          goto LABEL_36;
      }
      else
      {
        if (!(_DWORD)v16)
          goto LABEL_36;
        v29 = 0;
        while (*((unsigned __int8 *)v5 + v29) == v28[v29])
        {
          if (v16 == ++v29)
            goto LABEL_36;
        }
      }
    }
    if (v5 != (const void **)v10)
    {
      v30 = (std::string *)(v5 + 6);
      v31 = *(_BYTE *)(v10 + 71);
      if (*((char *)v5 + 71) < 0)
      {
        if (v31 >= 0)
          v34 = (const std::string::value_type *)(v10 + 48);
        else
          v34 = *(const std::string::value_type **)(v10 + 48);
        if (v31 >= 0)
          v35 = *(unsigned __int8 *)(v10 + 71);
        else
          v35 = *(_QWORD *)(v10 + 56);
        std::string::__assign_no_alias<false>(v30, v34, v35);
        result = (std::string *)(v5 + 9);
        v33 = *(unsigned __int8 *)(v10 + 95);
        if (*((char *)v5 + 95) < 0)
        {
LABEL_28:
          if ((v33 & 0x80u) == 0)
            v14 = (const std::string::value_type *)(v10 + 72);
          else
            v14 = *(const std::string::value_type **)(v10 + 72);
          if ((v33 & 0x80u) == 0)
            v15 = v33;
          else
            v15 = *(_QWORD *)(v10 + 80);
          result = std::string::__assign_no_alias<false>(result, v14, v15);
          goto LABEL_35;
        }
      }
      else if ((*(_BYTE *)(v10 + 71) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v30, *(char **)(v10 + 48), *(_QWORD *)(v10 + 56));
        result = (std::string *)(v5 + 9);
        v33 = *(unsigned __int8 *)(v10 + 95);
        if (*((char *)v5 + 95) < 0)
          goto LABEL_28;
      }
      else
      {
        v32 = *(_OWORD *)(v10 + 48);
        v5[8] = *(const void **)(v10 + 64);
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v32;
        result = (std::string *)(v5 + 9);
        v33 = *(unsigned __int8 *)(v10 + 95);
        if (*((char *)v5 + 95) < 0)
          goto LABEL_28;
      }
      if ((v33 & 0x80) != 0)
      {
        result = (std::string *)std::string::__assign_no_alias<true>(result, *(char **)(v10 + 72), *(_QWORD *)(v10 + 80));
      }
      else
      {
        v36 = *(_OWORD *)(v10 + 72);
        result->__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 88);
        *(_OWORD *)&result->__r_.__value_.__l.__data_ = v36;
      }
    }
LABEL_35:
    *((_DWORD *)v5 + 25) = v37;
LABEL_36:
    v5 += 14;
    if (v5 == v6)
      return (std::string *)1;
  }
LABEL_92:
  __break(1u);
  return result;
}

void cricket::MediaSessionDescriptionFactory::CreateAnswerOrError(cricket::MediaSessionDescriptionFactory *this@<X0>, const cricket::SessionDescription *a2@<X1>, const cricket::MediaSessionOptions *a3@<X2>, const cricket::SessionDescription *a4@<X3>, uint64_t a5@<X8>)
{
  std::string::size_type v5;
  void **v6;
  void **v7;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  std::string *v19;
  __int128 *v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *size;
  std::string::size_type v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  std::string::size_type v61;
  cricket::Codec *v62;
  std::string::size_type v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void **v74;
  int64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  std::string *v79;
  void **v80;
  uint64_t v81;
  __int128 v82;
  void **v83;
  std::string *v84;
  __int128 v85;
  std::string::size_type v86;
  char *v87;
  void (***v88)(char *);
  void (**v89)(char *);
  cricket::Codec *v90;
  cricket::Codec *v91;
  cricket::Codec *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  void **v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _QWORD *v105;
  _QWORD *v106;
  void **v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  std::string *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 *v119;
  std::string *v120;
  __int128 v121;
  cricket::Codec *v122;
  cricket::Codec *v123;
  cricket::Codec *v124;
  void (**v125)(cricket::Codec *);
  char *v126;
  void (***v127)(char *);
  void (**v128)(char *);
  void **v129;
  void **v130;
  void (**v131)(void **);
  cricket::Codec *v132;
  void *v133;
  cricket::Codec *v134;
  void (***v135)(char *);
  void (**v136)(char *);
  void *v137;
  std::string::size_type v138;
  void (***v139)(std::string::size_type);
  void (**v140)(std::string::size_type);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  int64_t v146;
  void **v147;
  cricket::Codec *v148;
  cricket::Codec *v149;
  unint64_t v150;
  cricket::Codec *v151;
  _BOOL4 v153;
  _BOOL4 v155;
  void *v156;
  void *v157;
  cricket::Codec *v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  void **v163;
  void **v164;
  __int128 v165;
  void **v166;
  void **v167;
  void *v168;
  void **v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  char *v174;
  void (**v175)(cricket::Codec *__hidden);
  cricket::Codec *v176;
  int64_t v177;
  unint64_t v178;
  int64_t v179;
  unint64_t v180;
  void (**v181)(cricket::Codec *__hidden);
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  void (*v190)(cricket::Codec *__hidden);
  char *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  const std::string::value_type *v195;
  const std::string::value_type *v196;
  unint64_t v197;
  unint64_t v198;
  const std::string::value_type *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _BOOL4 v205;
  _BOOL4 v207;
  unint64_t v208;
  size_t v209;
  uint64_t v210;
  uint64_t v211;
  const void *v212;
  size_t v213;
  BOOL v214;
  char *v215;
  uint64_t v216;
  char *v217;
  uint64_t v219;
  uint64_t v220;
  int64_t v221;
  char *v222;
  uint64_t v223;
  __int128 v224;
  __int128 *v225;
  std::string *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  void **v231;
  void **v232;
  uint64_t v233;
  std::string::size_type v234;
  uint64_t j;
  const std::string::value_type *v236;
  size_t v237;
  char v238;
  __int128 v239;
  char *v240;
  std::string::size_type v241;
  char *v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  const std::string::value_type *v246;
  size_t v247;
  char *v248;
  char *v249;
  char v250;
  __int128 v251;
  std::string::size_type v252;
  uint64_t v253;
  std::string::size_type v254;
  char *v255;
  int v256;
  char *v257;
  size_t v258;
  char *v259;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  __int128 v266;
  void **v267;
  uint64_t v268;
  unint64_t v269;
  void **v270;
  unint64_t v271;
  unint64_t v272;
  char *v273;
  char *v274;
  char *v275;
  char *v276;
  void **v277;
  uint64_t v278;
  __int128 v279;
  char *v280;
  int v281;
  std::string *v282;
  const std::string::value_type **v283;
  int v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  BOOL v290;
  int v291;
  char v292;
  uint64_t v293;
  unsigned __int8 *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  BOOL v298;
  int v299;
  uint64_t v300;
  char v301;
  uint64_t v302;
  unsigned __int8 *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  const cricket::SessionDescription *v308;
  uint64_t v309;
  char v310;
  uint64_t v311;
  unsigned __int8 *v312;
  unsigned int *v313;
  uint64_t v314;
  int v315;
  _BYTE *v316;
  int v317;
  BOOL v318;
  int v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  unsigned __int8 *v323;
  char *v324;
  char v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  const cricket::SessionDescription *v335;
  uint64_t v336;
  uint64_t v337;
  char v338;
  uint64_t v339;
  unsigned __int8 *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  const cricket::SessionDescription *v345;
  uint64_t v346;
  char v347;
  uint64_t v348;
  unsigned int *v349;
  unsigned int v350;
  unsigned int v351;
  _BOOL4 v353;
  _BOOL4 v355;
  int v356;
  int v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  const cricket::Codec *v371;
  const cricket::Codec *v372;
  cricket::Codec *v373;
  cricket::Codec *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  uint64_t v390;
  uint64_t v391;
  size_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unsigned __int8 *v405;
  unsigned __int8 *v406;
  uint64_t v407;
  size_t v408;
  uint64_t v409;
  const void *v410;
  unsigned __int8 *v412;
  unsigned __int8 *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  __int128 v420;
  unsigned __int8 v421;
  uint64_t v422;
  _BYTE *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  char *v431;
  char *v433;
  char *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  __int128 v439;
  unsigned __int8 v440;
  uint64_t v441;
  _BYTE *v442;
  unsigned int *v443;
  const cricket::TransportDescription *v444;
  unsigned int *v445;
  __int128 v446;
  std::string *v447;
  __int128 v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  int v452;
  uint64_t v453;
  int v454;
  int v455;
  char v456;
  uint64_t *v457;
  const cricket::TransportDescription *v458;
  char v459;
  unsigned int *v460;
  __int128 v461;
  std::string *v462;
  __int128 v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  _BYTE *v468;
  _DWORD *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  BOOL v475;
  char v476;
  unsigned __int8 *v477;
  uint64_t v478;
  unsigned __int8 *v479;
  uint64_t v480;
  int v481;
  int v482;
  int v483;
  int v484;
  unsigned __int8 *v485;
  unsigned __int8 *v486;
  uint64_t v487;
  size_t v488;
  uint64_t v489;
  const void *v490;
  unsigned __int8 *v492;
  unsigned __int8 *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  void *v497;
  uint64_t v498;
  void *v499;
  uint64_t v500;
  void (***v501)(uint64_t);
  void (**v502)(uint64_t);
  const cricket::Codec *v503;
  cricket::Codec *v504;
  __int128 v505;
  unsigned __int8 v506;
  uint64_t v507;
  _BYTE *v508;
  int64_t v509;
  uint64_t v510;
  char *v511;
  uint64_t v512;
  char *v513;
  int v514;
  std::string *v515;
  void **v516;
  __int128 v517;
  void **v518;
  void **v519;
  void **v520;
  void **v521;
  void **v522;
  std::string::size_type *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  char v531;
  uint64_t v532;
  unsigned int *v533;
  uint64_t v534;
  cricket::TransportDescription *v535;
  __int128 v536;
  std::string *v537;
  __int128 v538;
  int v539;
  uint64_t v540;
  void *v541;
  char *v542;
  void (***v543)(char *);
  void (**v544)(char *);
  cricket::TransportDescription *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t *v550;
  _BYTE *v551;
  BOOL v552;
  uint64_t v553;
  uint64_t v554;
  char v555;
  int v556;
  int v557;
  uint64_t v558;
  int v559;
  char v560;
  uint64_t v561;
  BOOL v562;
  char v563;
  size_t v564;
  char *v565;
  std::string *v566;
  _QWORD *v567;
  char v568;
  uint64_t v569;
  unsigned __int8 *v570;
  uint64_t v571;
  std::string::size_type v572;
  uint64_t v573;
  uint64_t v574;
  __int128 v575;
  void (*v576)(cricket::Codec *__hidden);
  uint64_t v577;
  void (**v578)(cricket::Codec *__hidden);
  void **v579;
  std::string *v580;
  void *v581;
  BOOL v582;
  void *v583;
  BOOL v584;
  int v585;
  int v586;
  int v587;
  _BYTE *v588;
  void **v589;
  void **v590;
  void *v591;
  void **v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  char *v600;
  uint64_t v601;
  uint64_t v602;
  char *v603;
  void *v604;
  char *v605;
  void (***v606)(char *);
  void (**v607)(char *);
  char *v608;
  void *v609;
  char *v610;
  void (***v611)(char *);
  void (**v612)(char *);
  char *v613;
  char *v614;
  void *v615;
  void **v616;
  void **v617;
  void *v618;
  std::string *v619;
  uint64_t v620;
  cricket::Codec *v621;
  _BOOL4 v622;
  _BOOL4 v623;
  unint64_t v624;
  _BYTE *v625;
  const cricket::Codec *v626;
  char v627;
  uint64_t v628;
  void **v629;
  uint64_t *i;
  unint64_t v631;
  rtc::UniqueRandomIdGenerator *v633;
  unsigned int *v634;
  char v635;
  const cricket::MediaSessionOptions *v636;
  void (*v637)(cricket::Codec *__hidden);
  uint64_t v639;
  uint64_t v640;
  std::string::size_type v642;
  unint64_t v644;
  uint64_t v645;
  void **v646;
  std::string::size_type v647;
  void **v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  char *v653;
  void **v654;
  unsigned int *v655;
  _BOOL4 v656;
  int v657[2];
  int v658[2];
  cricket::Codec *v659;
  cricket::Codec *v660;
  _BOOL4 v661;
  cricket::Codec *v662;
  void (**v663)(cricket::Codec *__hidden);
  void *v664;
  char *v665;
  uint64_t v666;
  void *v667;
  char *v668;
  uint64_t v669;
  void *v670;
  char *v671;
  void (**v672)(cricket::IceCredentialsIterator *__hidden);
  void *v673;
  char *v674;
  char *v675;
  void *v676;
  _BYTE *v677;
  std::string::size_type v678;
  cricket::Codec *v679[2];
  uint64_t v680;
  _QWORD **v681;
  _QWORD *v682[3];
  void *__p;
  cricket::Codec *v684;
  unint64_t v685;
  cricket::TransportDescription *v686;
  std::string v687;
  void *__src[2];
  char *v689;
  char v690;
  _BYTE __sz[32];
  _BYTE v692[7];
  char v693;
  uint64_t v694;

  v694 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      *(_QWORD *)__sz = "INTERNAL_ERROR";
      *(_QWORD *)&__sz[8] = 14;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
    }
    *(_DWORD *)__sz = 10;
    __sz[31] = 21;
    if (&__sz[8] > "Called without offer." || &__sz[29] <= "Called without offer.")
    {
      strcpy(&__sz[8], "Called without offer.");
      *(_DWORD *)v692 = 0;
      v692[4] = 0;
      v692[6] = 0;
      *(_DWORD *)a5 = 10;
      *(_OWORD *)(a5 + 8) = *(_OWORD *)&__sz[8];
      *(_QWORD *)(a5 + 24) = *(_QWORD *)&__sz[24];
      *(_DWORD *)(a5 + 32) = 0;
      *(_DWORD *)(a5 + 35) = *(_DWORD *)&v692[3];
      *(_BYTE *)(a5 + 40) = 0;
      *(_BYTE *)(a5 + 48) = 0;
      return;
    }
    goto LABEL_1106;
  }
  v672 = off_24C0B5178;
  v673 = 0;
  v675 = 0;
  v674 = 0;
  v9 = *((_QWORD *)a3 + 8);
  v10 = *((_QWORD *)a3 + 9);
  v11 = v10 - v9;
  v636 = a3;
  if (v10 != v9)
  {
    v12 = 0x6DB6DB6DB6DB6DB7 * (v11 >> 3);
    if (v12 >= 0x492492492492493)
      goto LABEL_1144;
    v13 = (char *)operator new(v11);
    v14 = 0;
    v673 = v13;
    v674 = v13;
    v675 = &v13[56 * v12];
    while (1)
    {
      v19 = (std::string *)&v13[v14];
      v20 = (__int128 *)(v9 + v14);
      if (*(char *)(v9 + v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
        v15 = (std::string *)&v13[v14 + 24];
        v16 = v9 + v14;
        v17 = v9 + v14 + 24;
        if (*(char *)(v9 + v14 + 47) < 0)
          goto LABEL_10;
      }
      else
      {
        v21 = *v20;
        v19->__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v21;
        v15 = (std::string *)&v13[v14 + 24];
        v16 = v9 + v14;
        v17 = v9 + v14 + 24;
        if (*(char *)(v9 + v14 + 47) < 0)
        {
LABEL_10:
          std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v17, *(_QWORD *)(v16 + 32));
          goto LABEL_7;
        }
      }
      v18 = *(_OWORD *)v17;
      v15->__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v18;
LABEL_7:
      v13[v14 + 48] = *(_BYTE *)(v9 + v14 + 48);
      v14 += 56;
      if (v9 + v14 == v10)
      {
        v674 = &v13[v14];
        a3 = v636;
        break;
      }
    }
  }
  if (a4)
  {
    v22 = *(uint64_t **)__sz;
    v23 = *(_QWORD *)&__sz[8];
  }
  else
  {
    v23 = 0;
    v22 = 0;
  }
  v667 = 0;
  v668 = 0;
  v669 = 0;
  v664 = 0;
  v665 = 0;
  v666 = 0;
  v679[1] = (cricket::Codec *)0x7F00000023;
  LODWORD(v680) = 127;
  v682[1] = 0;
  v682[0] = 0;
  v681 = v682;
  v679[0] = (cricket::Codec *)&off_24C0B6CE0;
  for (i = v22; v22 != (uint64_t *)v23; ++v22)
  {
    v32 = *v22;
    if (!*v22)
      continue;
    v33 = *(_QWORD *)(v32 + 32);
    if (!v33)
      continue;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33))
    {
      v34 = *(_QWORD *)(v32 + 32);
      if (!v34 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34) != 1)
        continue;
      v31 = &v664;
    }
    else
    {
      v31 = &v667;
    }
  }
  memset(&v687, 0, sizeof(v687));
  v684 = 0;
  __p = 0;
  v685 = 0;
  v35 = *(_QWORD *)a2;
  v36 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 == v36)
  {
    v132 = 0;
    goto LABEL_170;
  }
  v37 = (uint64_t **)((char *)this + 80);
  v663 = &off_24C0B1418;
  v645 = *((_QWORD *)a2 + 1);
  while (2)
  {
    if (!v35)
      goto LABEL_36;
    v39 = *(_QWORD *)(v35 + 32);
    if (!v39)
      goto LABEL_36;
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39))
    {
      v47 = *(_QWORD *)(v35 + 32);
      v48 = *(_QWORD *)(v47 + 280);
      v49 = *(_QWORD *)(v47 + 288);
      v50 = v49 - v48;
      if (v49 == v48)
        goto LABEL_36;
      v650 = v35;
      v51 = 0x84BDA12F684BDA13 * (v50 >> 3);
      if (v51 > 0x12F684BDA12F684)
        goto LABEL_1144;
      v5 = (std::string::size_type)operator new(v50);
      v52 = 0;
      v676 = (void *)v5;
      v678 = v5 + 216 * v51;
      do
      {
        cricket::Codec::Codec((cricket::Codec *)(v5 + v52), (const cricket::Codec *)(v48 + v52));
        v52 += 216;
      }
      while (v48 + v52 != v49);
      v53 = (char *)(v5 + v52);
      v677 = (_BYTE *)(v5 + v52);
      v653 = (char *)(v5 + v52);
      if (!v52)
      {
        v35 = v650;
        goto LABEL_33;
      }
      while (1)
      {
        if (v693)
          goto LABEL_55;
        if (!v690)
        {
          if (v693)
LABEL_55:
            cricket::Codec::~Codec((cricket::Codec *)__sz);
          v5 += 216;
          if ((char *)v5 == v53)
            goto LABEL_154;
          continue;
        }
        cricket::Codec::~Codec((cricket::Codec *)__src);
        if (v693)
          cricket::Codec::~Codec((cricket::Codec *)__sz);
        size = (char *)v687.__r_.__value_.__l.__size_;
        if (v687.__r_.__value_.__l.__size_ < v687.__r_.__value_.__r.__words[2])
        {
          if (!v687.__r_.__value_.__l.__size_)
            goto LABEL_1106;
          cricket::Codec::Codec((cricket::Codec *)v687.__r_.__value_.__l.__size_, (const cricket::Codec *)v5);
          v55 = (std::string::size_type)(size + 216);
          goto LABEL_98;
        }
        v659 = (cricket::Codec *)v5;
        v5 = v687.__r_.__value_.__r.__words[0];
        v56 = 0x84BDA12F684BDA13
            * ((uint64_t)(v687.__r_.__value_.__l.__size_ - v687.__r_.__value_.__r.__words[0]) >> 3);
        v57 = v56 + 1;
        if (v56 + 1 > 0x12F684BDA12F684)
          goto LABEL_1144;
        if (0x97B425ED097B426
           * ((uint64_t)(v687.__r_.__value_.__r.__words[2] - v687.__r_.__value_.__r.__words[0]) >> 3) > v57)
          v57 = 0x97B425ED097B426
              * ((uint64_t)(v687.__r_.__value_.__r.__words[2] - v687.__r_.__value_.__r.__words[0]) >> 3);
        if (0x84BDA12F684BDA13
           * ((uint64_t)(v687.__r_.__value_.__r.__words[2] - v687.__r_.__value_.__r.__words[0]) >> 3) >= 0x97B425ED097B42)
          v58 = 0x12F684BDA12F684;
        else
          v58 = v57;
        if (!v58)
          goto LABEL_1106;
        if (v58 > 0x12F684BDA12F684)
LABEL_1145:
          std::__throw_bad_array_new_length[abi:sn180100]();
        v59 = 216 * v58;
        v60 = (char *)operator new(216 * v58);
        v61 = (std::string::size_type)&v60[v59];
        v62 = (cricket::Codec *)&v60[216 * v56];
        cricket::Codec::Codec(v62, v659);
        v55 = (std::string::size_type)v62 + 216;
        if (size == (char *)v5)
        {
          v687.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
          v687.__r_.__value_.__l.__size_ = (std::string::size_type)v62 + 216;
          v687.__r_.__value_.__r.__words[2] = v61;
          v53 = v653;
          v37 = (uint64_t **)((char *)this + 80);
          v5 = (std::string::size_type)v659;
          if (!size)
            goto LABEL_98;
          goto LABEL_97;
        }
        v647 = (std::string::size_type)v62 + 216;
        v63 = (std::string::size_type)v62;
        do
        {
          *(_QWORD *)(v63 - 216) = &off_24C0B1418;
          v63 -= 216;
          *((_QWORD *)v62 - 26) = *((_QWORD *)size - 26);
          v64 = *(_OWORD *)(size - 200);
          *((_QWORD *)v62 - 23) = *((_QWORD *)size - 23);
          *(_OWORD *)((char *)v62 - 200) = v64;
          *((_QWORD *)size - 24) = 0;
          *((_QWORD *)size - 23) = 0;
          *((_QWORD *)size - 25) = 0;
          v65 = *((_OWORD *)size - 11);
          *((_BYTE *)v62 - 160) = 0;
          *((_OWORD *)v62 - 11) = v65;
          *((_BYTE *)v62 - 136) = 0;
          if (*(size - 136))
          {
            v66 = *((_OWORD *)size - 10);
            *((_QWORD *)v62 - 18) = *((_QWORD *)size - 18);
            *((_OWORD *)v62 - 10) = v66;
            *((_QWORD *)size - 19) = 0;
            *((_QWORD *)size - 18) = 0;
            *((_QWORD *)size - 20) = 0;
            *((_BYTE *)v62 - 136) = 1;
          }
          *((_QWORD *)v62 - 16) = 0;
          *((_QWORD *)v62 - 16) = *((_QWORD *)size - 16);
          v67 = *(_OWORD *)(size - 120);
          v68 = *(_OWORD *)(size - 104);
          *((_QWORD *)v62 - 11) = *((_QWORD *)size - 11);
          *(_OWORD *)((char *)v62 - 104) = v68;
          *(_OWORD *)((char *)v62 - 120) = v67;
          *((_QWORD *)size - 16) = 0;
          *((_BYTE *)v62 - 80) = 0;
          *((_BYTE *)v62 - 56) = 0;
          if (*(size - 56))
          {
            v69 = *((_OWORD *)size - 5);
            *((_QWORD *)v62 - 8) = *((_QWORD *)size - 8);
            *((_OWORD *)v62 - 5) = v69;
            *((_QWORD *)size - 9) = 0;
            *((_QWORD *)size - 8) = 0;
            *((_QWORD *)size - 10) = 0;
            *((_BYTE *)v62 - 56) = 1;
          }
          *((_QWORD *)v62 - 6) = *((_QWORD *)size - 6);
          v70 = size - 40;
          v71 = *((_QWORD *)size - 5);
          *((_QWORD *)v62 - 5) = v71;
          v72 = (char *)v62 - 40;
          v73 = *((_QWORD *)size - 4);
          *((_QWORD *)v62 - 4) = v73;
          if (!v73)
          {
            *((_QWORD *)v62 - 6) = v72;
            *((_QWORD *)v62 - 3) = 0;
            *((_QWORD *)v62 - 2) = 0;
            *((_QWORD *)v62 - 1) = 0;
            v74 = (void **)*((_QWORD *)size - 3);
            v6 = (void **)*((_QWORD *)size - 2);
            v75 = (char *)v6 - (char *)v74;
            if (v6 == v74)
              goto LABEL_75;
LABEL_84:
            v76 = 0xAAAAAAAAAAAAAAABLL * (v75 >> 4);
            if (v76 > 0x555555555555555)
              goto LABEL_1144;
            v7 = (void **)v61;
            v77 = (char *)operator new(v75);
            v78 = 0;
            *((_QWORD *)v62 - 3) = v77;
            *((_QWORD *)v62 - 2) = v77;
            *((_QWORD *)v62 - 1) = &v77[48 * v76];
            while (1)
            {
              v83 = &v74[v78];
              v84 = (std::string *)&v77[v78 * 8];
              if (SHIBYTE(v74[v78 + 2]) < 0)
              {
                std::string::__init_copy_ctor_external(v84, (const std::string::value_type *)*v83, (std::string::size_type)v83[1]);
                v79 = (std::string *)&v77[v78 * 8 + 24];
                v80 = &v74[v78];
                v81 = (uint64_t)&v74[v78 + 3];
                if ((SHIBYTE(v74[v78 + 5]) & 0x80000000) == 0)
                  goto LABEL_87;
              }
              else
              {
                v85 = *(_OWORD *)v83;
                v84->__r_.__value_.__r.__words[2] = (std::string::size_type)v83[2];
                *(_OWORD *)&v84->__r_.__value_.__l.__data_ = v85;
                v79 = (std::string *)&v77[v78 * 8 + 24];
                v80 = &v74[v78];
                v81 = (uint64_t)&v74[v78 + 3];
                if ((SHIBYTE(v74[v78 + 5]) & 0x80000000) == 0)
                {
LABEL_87:
                  v82 = *(_OWORD *)v81;
                  v79->__r_.__value_.__r.__words[2] = *(_QWORD *)(v81 + 16);
                  *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v82;
                  v78 += 6;
                  if (&v74[v78] == v6)
                    goto LABEL_74;
                  continue;
                }
              }
              std::string::__init_copy_ctor_external(v79, *(const std::string::value_type **)v81, (std::string::size_type)v80[4]);
              v78 += 6;
              if (&v74[v78] == v6)
              {
LABEL_74:
                *((_QWORD *)v62 - 2) = &v77[v78 * 8];
                v61 = (std::string::size_type)v7;
                goto LABEL_75;
              }
            }
          }
          *(_QWORD *)(v71 + 16) = v72;
          *((_QWORD *)size - 6) = v70;
          *(_QWORD *)v70 = 0;
          *((_QWORD *)size - 4) = 0;
          *((_QWORD *)v62 - 3) = 0;
          *((_QWORD *)v62 - 2) = 0;
          *((_QWORD *)v62 - 1) = 0;
          v74 = (void **)*((_QWORD *)size - 3);
          v6 = (void **)*((_QWORD *)size - 2);
          v75 = (char *)v6 - (char *)v74;
          if (v6 != v74)
            goto LABEL_84;
LABEL_75:
          size -= 216;
          v62 = (cricket::Codec *)v63;
        }
        while (size != (char *)v5);
        v86 = v687.__r_.__value_.__l.__size_;
        size = (char *)v687.__r_.__value_.__r.__words[0];
        v687.__r_.__value_.__r.__words[0] = v63;
        v55 = v647;
        v687.__r_.__value_.__l.__size_ = v647;
        v687.__r_.__value_.__r.__words[2] = v61;
        v53 = v653;
        if ((char *)v86 == size)
        {
          v37 = (uint64_t **)((char *)this + 80);
          v5 = (std::string::size_type)v659;
          if (!size)
            goto LABEL_98;
        }
        else
        {
          v87 = (char *)(v86 - 216);
          v88 = (void (***)(char *))(v86 - 216);
          v37 = (uint64_t **)((char *)this + 80);
          v5 = (std::string::size_type)v659;
          do
          {
            v89 = *v88;
            v88 -= 27;
            (*v89)(v87);
            v214 = v87 == size;
            v87 = (char *)v88;
          }
          while (!v214);
          if (!size)
            goto LABEL_98;
        }
LABEL_97:
        operator delete(size);
LABEL_98:
        v687.__r_.__value_.__l.__size_ = v55;
        v5 += 216;
        if ((char *)v5 == v53)
        {
LABEL_154:
          v53 = (char *)v676;
          v35 = v650;
          v36 = v645;
          if (!v676)
            goto LABEL_36;
          if (v677 != v676)
          {
            v126 = v677 - 216;
            v127 = (void (***)(char *))(v677 - 216);
            do
            {
              v128 = *v127;
              v127 -= 27;
              (*v128)(v126);
              v214 = v126 == v53;
              v126 = (char *)v127;
            }
            while (!v214);
            v53 = (char *)v676;
LABEL_33:
            v36 = v645;
          }
          v38 = (void **)v53;
          goto LABEL_35;
        }
      }
    }
    v40 = *(_QWORD *)(v35 + 32);
    if (!v40)
      goto LABEL_36;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40) != 1)
      goto LABEL_36;
    v41 = *(_QWORD *)(v35 + 32);
    v42 = *(_QWORD *)(v41 + 280);
    v43 = *(_QWORD *)(v41 + 288);
    v44 = v43 - v42;
    if (v43 == v42)
      goto LABEL_36;
    v649 = v35;
    v45 = 0x84BDA12F684BDA13 * (v44 >> 3);
    if (v45 > 0x12F684BDA12F684)
      goto LABEL_1144;
    v5 = (std::string::size_type)operator new(v44);
    v46 = 0;
    v676 = (void *)v5;
    v678 = v5 + 216 * v45;
    do
    {
      cricket::Codec::Codec((cricket::Codec *)(v5 + v46), (const cricket::Codec *)(v42 + v46));
      v46 += 216;
    }
    while (v42 + v46 != v43);
    v6 = (void **)(v5 + v46);
    v677 = (_BYTE *)(v5 + v46);
    v646 = (void **)(v5 + v46);
    if (!v46)
    {
      v35 = v649;
      goto LABEL_166;
    }
    do
    {
      while (1)
      {
        if (v693)
        {
LABEL_105:
          cricket::Codec::~Codec((cricket::Codec *)__sz);
          goto LABEL_106;
        }
        if (v690)
          break;
        if (v693)
          goto LABEL_105;
LABEL_106:
        v5 += 216;
        if ((void **)v5 == v6)
          goto LABEL_160;
      }
      cricket::Codec::~Codec((cricket::Codec *)__src);
      if (v693)
        cricket::Codec::~Codec((cricket::Codec *)__sz);
      v90 = v684;
      if ((unint64_t)v684 < v685)
      {
        if (!v684)
          goto LABEL_1106;
        cricket::Codec::Codec(v684, (const cricket::Codec *)v5);
        v91 = (cricket::Codec *)((char *)v90 + 216);
        goto LABEL_148;
      }
      v92 = (cricket::Codec *)__p;
      v93 = 0x84BDA12F684BDA13 * ((v684 - (cricket::Codec *)__p) >> 3);
      v94 = v93 + 1;
      if (v93 + 1 > 0x12F684BDA12F684)
        goto LABEL_1144;
      if (0x97B425ED097B426 * ((uint64_t)(v685 - (_QWORD)__p) >> 3) > v94)
        v94 = 0x97B425ED097B426 * ((uint64_t)(v685 - (_QWORD)__p) >> 3);
      if (0x84BDA12F684BDA13 * ((uint64_t)(v685 - (_QWORD)__p) >> 3) >= 0x97B425ED097B42)
        v95 = 0x12F684BDA12F684;
      else
        v95 = v94;
      if (!v95)
        goto LABEL_1106;
      if (v95 > 0x12F684BDA12F684)
        goto LABEL_1145;
      v96 = 216 * v95;
      v97 = (char *)operator new(216 * v95);
      v7 = (void **)&v97[v96];
      v98 = (void **)&v97[216 * v93];
      cricket::Codec::Codec((cricket::Codec *)v98, (const cricket::Codec *)v5);
      v91 = (cricket::Codec *)(v98 + 27);
      if (v90 == v92)
      {
        __p = v98;
        v684 = (cricket::Codec *)(v98 + 27);
        v685 = (unint64_t)v7;
        if (v90)
          goto LABEL_147;
        goto LABEL_148;
      }
      v654 = v7;
      v660 = (cricket::Codec *)(v98 + 27);
      v7 = v98;
      do
      {
        *(v7 - 27) = &off_24C0B1418;
        v7 -= 27;
        *(v98 - 26) = (void *)*((_QWORD *)v90 - 26);
        v99 = *(_OWORD *)((char *)v90 - 200);
        *(v98 - 23) = (void *)*((_QWORD *)v90 - 23);
        *(_OWORD *)(v98 - 25) = v99;
        *((_QWORD *)v90 - 24) = 0;
        *((_QWORD *)v90 - 23) = 0;
        *((_QWORD *)v90 - 25) = 0;
        v100 = *((_OWORD *)v90 - 11);
        *((_BYTE *)v98 - 160) = 0;
        *((_OWORD *)v98 - 11) = v100;
        *((_BYTE *)v98 - 136) = 0;
        if (*((_BYTE *)v90 - 136))
        {
          v101 = *((_OWORD *)v90 - 10);
          *(v98 - 18) = (void *)*((_QWORD *)v90 - 18);
          *((_OWORD *)v98 - 10) = v101;
          *((_QWORD *)v90 - 19) = 0;
          *((_QWORD *)v90 - 18) = 0;
          *((_QWORD *)v90 - 20) = 0;
          *((_BYTE *)v98 - 136) = 1;
        }
        *(v98 - 16) = 0;
        *(v98 - 16) = (void *)*((_QWORD *)v90 - 16);
        v102 = *(_OWORD *)((char *)v90 - 120);
        v103 = *(_OWORD *)((char *)v90 - 104);
        *(v98 - 11) = (void *)*((_QWORD *)v90 - 11);
        *(_OWORD *)(v98 - 13) = v103;
        *(_OWORD *)(v98 - 15) = v102;
        *((_QWORD *)v90 - 16) = 0;
        *((_BYTE *)v98 - 80) = 0;
        *((_BYTE *)v98 - 56) = 0;
        if (*((_BYTE *)v90 - 56))
        {
          v104 = *((_OWORD *)v90 - 5);
          *(v98 - 8) = (void *)*((_QWORD *)v90 - 8);
          *((_OWORD *)v98 - 5) = v104;
          *((_QWORD *)v90 - 9) = 0;
          *((_QWORD *)v90 - 8) = 0;
          *((_QWORD *)v90 - 10) = 0;
          *((_BYTE *)v98 - 56) = 1;
        }
        *(v98 - 6) = (void *)*((_QWORD *)v90 - 6);
        v105 = (_QWORD *)((char *)v90 - 40);
        v106 = (_QWORD *)*((_QWORD *)v90 - 5);
        *(v98 - 5) = v106;
        v107 = v98 - 5;
        v108 = (void *)*((_QWORD *)v90 - 4);
        *(v98 - 4) = v108;
        if (!v108)
        {
          *(v98 - 6) = v107;
          *(v98 - 3) = 0;
          *(v98 - 2) = 0;
          *(v98 - 1) = 0;
          v109 = *((_QWORD *)v90 - 3);
          v110 = *((_QWORD *)v90 - 2);
          v111 = v110 - v109;
          if (v110 == v109)
            goto LABEL_125;
LABEL_134:
          v112 = 0xAAAAAAAAAAAAAAABLL * (v111 >> 4);
          if (v112 > 0x555555555555555)
            goto LABEL_1144;
          v113 = (char *)operator new(v111);
          v114 = 0;
          *(v98 - 3) = v113;
          *(v98 - 2) = v113;
          *(v98 - 1) = &v113[48 * v112];
          while (1)
          {
            v119 = (__int128 *)(v109 + v114);
            v120 = (std::string *)&v113[v114];
            if (*(char *)(v109 + v114 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v120, *(const std::string::value_type **)v119, *((_QWORD *)v119 + 1));
              v115 = (std::string *)&v113[v114 + 24];
              v116 = v109 + v114;
              v117 = v109 + v114 + 24;
              if ((*(char *)(v109 + v114 + 47) & 0x80000000) == 0)
                goto LABEL_137;
LABEL_140:
              std::string::__init_copy_ctor_external(v115, *(const std::string::value_type **)v117, *(_QWORD *)(v116 + 32));
              v114 += 48;
              if (v109 + v114 == v110)
              {
LABEL_124:
                *(v98 - 2) = &v113[v114];
                goto LABEL_125;
              }
            }
            else
            {
              v121 = *v119;
              v120->__r_.__value_.__r.__words[2] = *((_QWORD *)v119 + 2);
              *(_OWORD *)&v120->__r_.__value_.__l.__data_ = v121;
              v115 = (std::string *)&v113[v114 + 24];
              v116 = v109 + v114;
              v117 = v109 + v114 + 24;
              if (*(char *)(v109 + v114 + 47) < 0)
                goto LABEL_140;
LABEL_137:
              v118 = *(_OWORD *)v117;
              v115->__r_.__value_.__r.__words[2] = *(_QWORD *)(v117 + 16);
              *(_OWORD *)&v115->__r_.__value_.__l.__data_ = v118;
              v114 += 48;
              if (v109 + v114 == v110)
                goto LABEL_124;
            }
          }
        }
        v106[2] = v107;
        *((_QWORD *)v90 - 6) = v105;
        *v105 = 0;
        *((_QWORD *)v90 - 4) = 0;
        *(v98 - 3) = 0;
        *(v98 - 2) = 0;
        *(v98 - 1) = 0;
        v109 = *((_QWORD *)v90 - 3);
        v110 = *((_QWORD *)v90 - 2);
        v111 = v110 - v109;
        if (v110 != v109)
          goto LABEL_134;
LABEL_125:
        v90 = (cricket::Codec *)((char *)v90 - 216);
        v98 = v7;
      }
      while (v90 != v92);
      v90 = (cricket::Codec *)__p;
      v122 = v684;
      __p = v7;
      v91 = v660;
      v684 = v660;
      v685 = (unint64_t)v654;
      if (v122 == v90)
      {
        v37 = (uint64_t **)((char *)this + 80);
        v6 = v646;
        if (v90)
          goto LABEL_147;
      }
      else
      {
        v123 = (cricket::Codec *)((char *)v122 - 216);
        v124 = (cricket::Codec *)((char *)v122 - 216);
        v37 = (uint64_t **)((char *)this + 80);
        v6 = v646;
        do
        {
          v125 = *(void (***)(cricket::Codec *))v124;
          v124 = (cricket::Codec *)((char *)v124 - 216);
          (*v125)(v123);
          v214 = v123 == v90;
          v123 = v124;
        }
        while (!v214);
        if (v90)
LABEL_147:
          operator delete(v90);
      }
LABEL_148:
      v684 = v91;
      v5 += 216;
    }
    while ((void **)v5 != v6);
LABEL_160:
    v6 = (void **)v676;
    v35 = v649;
    v36 = v645;
    if (v676)
    {
      if (v677 != v676)
      {
        v129 = (void **)(v677 - 216);
        v130 = (void **)(v677 - 216);
        do
        {
          v131 = (void (**)(void **))*v130;
          v130 -= 27;
          (*v131)(v129);
          v214 = v129 == v6;
          v129 = v130;
        }
        while (!v214);
        v6 = (void **)v676;
LABEL_166:
        v36 = v645;
      }
      v38 = v6;
LABEL_35:
      operator delete(v38);
    }
LABEL_36:
    v35 += 40;
    if (v35 != v36)
      continue;
    break;
  }
  v132 = (cricket::Codec *)__p;
LABEL_170:
  if (v132)
  {
    v133 = v132;
    if (v684 != v132)
    {
      v134 = (cricket::Codec *)((char *)v684 - 216);
      v135 = (void (***)(char *))((char *)v684 - 216);
      do
      {
        v136 = *v135;
        v135 -= 27;
        (*v136)((char *)v134);
        v214 = v134 == v132;
        v134 = (cricket::Codec *)v135;
      }
      while (!v214);
      v133 = __p;
    }
    v684 = v132;
    operator delete(v133);
  }
  v137 = (void *)v687.__r_.__value_.__r.__words[0];
  if (v687.__r_.__value_.__r.__words[0])
  {
    if (v687.__r_.__value_.__l.__size_ != v687.__r_.__value_.__r.__words[0])
    {
      v138 = v687.__r_.__value_.__l.__size_ - 216;
      v139 = (void (***)(std::string::size_type))(v687.__r_.__value_.__l.__size_ - 216);
      do
      {
        v140 = *v139;
        v139 -= 27;
        (*v140)(v138);
        v214 = v138 == (_QWORD)v137;
        v138 = (std::string::size_type)v139;
      }
      while (!v214);
      v137 = (void *)v687.__r_.__value_.__r.__words[0];
    }
    operator delete(v137);
  }
  v679[0] = (cricket::Codec *)&off_24C0B6D10;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v681, v682[0]);
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_QWORD *)(v5 + 64) = 0;
  *(_DWORD *)(v5 + 72) = 5;
  *(_BYTE *)(v5 + 76) = 1;
  __sz[23] = 6;
  if (__sz <= "BUNDLE" && &__sz[6] > "BUNDLE")
    goto LABEL_1106;
  strcpy(__sz, "BUNDLE");
  cricket::SessionDescription::GetGroupsByName((uint64_t)a2, (unsigned __int8 **)__sz, (char **)&v676);
  if ((__sz[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__sz);
    v145 = v677;
    v146 = v677 - (_BYTE *)v676;
    v639 = v5;
    if (v677 == v676)
      goto LABEL_268;
LABEL_188:
    if ((unint64_t)v146 >= 0x2AAAAAAAAAAAAAA9)
      goto LABEL_1144;
    v5 = v146 >> 3;
    v6 = (void **)operator new(48 * (v146 >> 3));
    v147 = &v6[6 * (v146 >> 3)];
    v148 = (cricket::Codec *)operator new(v146);
    v149 = v148;
    v150 = 0;
    v151 = (cricket::Codec *)((char *)v148 + 8 * v5);
    v153 = __sz <= "BUNDLE" && &__sz[6] > "BUNDLE";
    v656 = v153;
    v155 = __sz <= "BUNDLE" && &__sz[6] > "BUNDLE";
    v661 = v155;
    v663 = (void (**)(cricket::Codec *__hidden))v148;
    v7 = v6;
    while (1)
    {
      while (v6 < v147)
      {
        __sz[23] = 6;
        if (v661)
          goto LABEL_1106;
        strcpy(__sz, "BUNDLE");
        v157 = *(void **)&__sz[16];
        *(_OWORD *)v6 = *(_OWORD *)__sz;
        v6[2] = v157;
        v6[3] = 0;
        v6[4] = 0;
        v6[5] = 0;
        v6 += 6;
        if (v149 < v151)
          goto LABEL_202;
LABEL_235:
        v170 = (char *)v149;
        v171 = v149 - (cricket::Codec *)v663;
        v172 = (v171 >> 3) + 1;
        if (v172 >> 61)
          goto LABEL_1144;
        if ((v151 - (cricket::Codec *)v663) >> 2 > v172)
          v172 = (v151 - (cricket::Codec *)v663) >> 2;
        if ((unint64_t)(v151 - (cricket::Codec *)v663) >= 0x7FFFFFFFFFFFFFF8)
          v172 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v172)
          goto LABEL_1106;
        if (v172 >> 61)
          goto LABEL_1145;
        v5 = (std::string::size_type)v7;
        v173 = 8 * v172;
        v174 = (char *)operator new(8 * v172);
        v151 = (cricket::Codec *)&v174[v173];
        v175 = (void (**)(cricket::Codec *__hidden))&v174[8 * (v171 >> 3)];
        *v175 = 0;
        v176 = (cricket::Codec *)(v175 + 1);
        v177 = v170 - (char *)v663;
        if (v170 != (char *)v663)
        {
          v178 = v177 - 8;
          if ((unint64_t)(v177 - 8) < 0x138
            || (v179 = v170 - 8 - (char *)v663, &v170[-(v179 & 0xFFFFFFFFFFFFFFF8) - 8] > v170 - 8)
            || &v174[v171 - 8 - (v179 & 0xFFFFFFFFFFFFFFF8)] > &v174[v171 - 8])
          {
            v182 = v170;
            v181 = v663;
          }
          else
          {
            v180 = v179 & 0xFFFFFFFFFFFFFFF8;
            v181 = v663;
            if (&v170[-v180 - 8] >= (char *)v175 || (v182 = v170, &v174[v171 - v180 - 8] >= v170))
            {
              v183 = (v178 >> 3) + 1;
              v184 = 8 * (v183 & 0x3FFFFFFFFFFFFFFCLL);
              v182 = &v170[-v184];
              v175 = (void (**)(cricket::Codec *__hidden))((char *)v175 - v184);
              v185 = &v174[v171 - 16];
              v186 = v170 - 16;
              v187 = v183 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v189 = *((_OWORD *)v186 - 1);
                v188 = *(_OWORD *)v186;
                *((_OWORD *)v186 - 1) = 0uLL;
                *(_OWORD *)v186 = 0uLL;
                *((_OWORD *)v185 - 1) = v189;
                *(_OWORD *)v185 = v188;
                v185 -= 32;
                v186 -= 32;
                v187 -= 4;
              }
              while (v187);
              v181 = v663;
              if (v183 == (v183 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_254;
            }
          }
          do
          {
            v190 = (void (*)(cricket::Codec *__hidden))*((_QWORD *)v182 - 1);
            v182 -= 8;
            *(_QWORD *)v182 = 0;
            *--v175 = v190;
          }
          while (v182 != (char *)v181);
LABEL_254:
          v191 = (char *)v181;
          do
          {
            v193 = *((_QWORD *)v170 - 1);
            v170 -= 8;
            v192 = v193;
            *(_QWORD *)v170 = 0;
            if (v193)
            {
              cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)(v192 + 24));
              if (*(char *)(v192 + 23) < 0)
                operator delete(*(void **)v192);
              MEMORY[0x20BD0ADEC](v192, 0x1032C402A3A6BE2);
            }
          }
          while (v170 != v191);
          if (!v191)
            goto LABEL_264;
          goto LABEL_263;
        }
        v191 = v170;
LABEL_263:
        operator delete(v191);
LABEL_264:
        v663 = v175;
        v149 = v176;
        v7 = (void **)v5;
        ++v150;
        v145 = v677;
        v156 = v676;
        if (v150 >= (v677 - (_BYTE *)v676) >> 3)
        {
LABEL_265:
          v5 = v639;
          v194 = *((unsigned __int8 *)a2 + 76);
          *(_BYTE *)(v639 + 76) = v194;
          v196 = *(const std::string::value_type **)v639;
          v195 = *(const std::string::value_type **)(v639 + 8);
          if (*(const std::string::value_type **)v639 == v195)
            goto LABEL_275;
          goto LABEL_269;
        }
      }
      v158 = v149;
      v159 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 4) + 1;
      if (v159 > 0x555555555555555)
        goto LABEL_1144;
      if (0x5555555555555556 * (((char *)v147 - (char *)v7) >> 4) > v159)
        v159 = 0x5555555555555556 * (((char *)v147 - (char *)v7) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v147 - (char *)v7) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v159 = 0x555555555555555;
      if (!v159)
        goto LABEL_1106;
      if (v159 > 0x555555555555555)
        goto LABEL_1145;
      v160 = 48 * v159;
      v161 = (char *)operator new(48 * v159);
      __sz[23] = 6;
      if (v656)
        goto LABEL_1106;
      v147 = (void **)&v161[v160];
      v162 = &v161[16 * (((char *)v6 - (char *)v7) >> 4)];
      strcpy(__sz, "BUNDLE");
      *(_OWORD *)v162 = *(_OWORD *)__sz;
      *((_QWORD *)v162 + 2) = *(_QWORD *)&__sz[16];
      *((_QWORD *)v162 + 3) = 0;
      *((_QWORD *)v162 + 4) = 0;
      *((_QWORD *)v162 + 5) = 0;
      v163 = (void **)(v162 + 48);
      if (v6 == v7)
        break;
      v164 = v6;
      do
      {
        v165 = *((_OWORD *)v164 - 3);
        *((_QWORD *)v162 - 4) = *(v164 - 4);
        *((_OWORD *)v162 - 3) = v165;
        *(v164 - 5) = 0;
        *(v164 - 4) = 0;
        *(v164 - 6) = 0;
        *(_OWORD *)(v162 - 24) = *(_OWORD *)(v164 - 3);
        *((_QWORD *)v162 - 1) = *(v164 - 1);
        v162 -= 48;
        *(v164 - 3) = 0;
        *(v164 - 2) = 0;
        *(v164 - 1) = 0;
        v164 -= 6;
      }
      while (v164 != v7);
      do
      {
        v166 = (void **)*(v6 - 3);
        if (v166)
        {
          v5 = (std::string::size_type)v7;
          v167 = (void **)*(v6 - 2);
          v168 = *(v6 - 3);
          if (v167 != v166)
          {
            do
            {
              if (*((char *)v167 - 1) < 0)
                operator delete(*(v167 - 3));
              v167 -= 3;
            }
            while (v167 != v166);
            v168 = *(v6 - 3);
          }
          *(v6 - 2) = v166;
          operator delete(v168);
          v7 = (void **)v5;
        }
        v169 = v6 - 6;
        if (*((char *)v6 - 25) < 0)
          operator delete(*v169);
        v6 -= 6;
      }
      while (v169 != v7);
      if (v7)
        goto LABEL_233;
LABEL_234:
      v7 = (void **)v162;
      v6 = v163;
      v149 = v158;
      if (v158 >= v151)
        goto LABEL_235;
LABEL_202:
      *(_QWORD *)v149 = 0;
      v149 = (cricket::Codec *)((char *)v149 + 8);
      ++v150;
      v145 = v677;
      v156 = v676;
      if (v150 >= (v677 - (_BYTE *)v676) >> 3)
        goto LABEL_265;
    }
    v7 = v6;
LABEL_233:
    operator delete(v7);
    goto LABEL_234;
  }
  v145 = v677;
  v146 = v677 - (_BYTE *)v676;
  v639 = v5;
  if (v677 != v676)
    goto LABEL_188;
LABEL_268:
  v149 = 0;
  v663 = 0;
  v6 = 0;
  v7 = 0;
  v156 = v145;
  v194 = *((unsigned __int8 *)a2 + 76);
  *(_BYTE *)(v5 + 76) = v194;
  v196 = *(const std::string::value_type **)v5;
  v195 = *(const std::string::value_type **)(v5 + 8);
  if (*(const std::string::value_type **)v5 == v195)
    goto LABEL_275;
LABEL_269:
  if (v194)
  {
    v197 = v195 - v196 - 40;
    if (v197 < 0x28)
      goto LABEL_1151;
    v198 = v197 / 0x28 + 1;
    v199 = &v196[40 * (v198 & 0xFFFFFFFFFFFFFFELL)];
    v200 = (uint64_t *)(v196 + 72);
    v201 = v198 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      v202 = *(v200 - 5);
      v203 = *v200;
      v200 += 10;
      *(_DWORD *)(v202 + 200) = v194;
      *(_DWORD *)(v203 + 200) = v194;
      v201 -= 2;
    }
    while (v201);
    v196 = v199;
    if (v198 != (v198 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_1151:
      do
      {
        *(_DWORD *)(*((_QWORD *)v196 + 4) + 200) = v194;
        v196 += 40;
      }
      while (v196 != v195);
    }
  }
  else
  {
    do
    {
      v577 = *((_QWORD *)v196 + 4);
      if (*(_DWORD *)(v577 + 200) != 2)
        *(_DWORD *)(v577 + 200) = v194;
      v196 += 40;
    }
    while (v196 != v195);
  }
LABEL_275:
  v655 = (unsigned int *)*((_QWORD *)v636 + 5);
  v634 = (unsigned int *)*((_QWORD *)v636 + 6);
  if (v655 != v634)
  {
    v644 = 0;
    v631 = (v149 - (cricket::Codec *)v663) >> 3;
    v629 = (void **)(v5 + 24);
    v205 = __sz <= "BUNDLE" && &__sz[6] > "BUNDLE";
    v622 = v205;
    v207 = __sz <= "BUNDLE" && &__sz[6] > "BUNDLE";
    v623 = v207;
    v624 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 4);
    v648 = v7;
    v662 = v149;
    while (1)
    {
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) <= v644)
        goto LABEL_1106;
      v642 &= 0xFFFFFFFFFFFFFF00;
      v5 = (std::string::size_type)v676;
      v640 = *(_QWORD *)a2;
      if (v677 == v676)
      {
        v637 = 0;
        v635 = 1;
        if (!a4)
          goto LABEL_333;
        goto LABEL_319;
      }
      v208 = 0;
      v209 = *((unsigned __int8 *)v655 + 31);
      if ((unint64_t)((v677 - (_BYTE *)v676) >> 3) <= 1)
        v210 = 1;
      else
        v210 = (v677 - (_BYTE *)v676) >> 3;
      do
      {
        v211 = *(_QWORD *)(v5 + 8 * v208);
        v212 = v655 + 2;
        v213 = v209;
        if ((v209 & 0x80) != 0)
        {
          v213 = *((_QWORD *)v655 + 2);
          if ((v213 & 0x8000000000000000) != 0)
            goto LABEL_1106;
          v212 = (const void *)*((_QWORD *)v655 + 1);
          v214 = v213 && v212 == 0;
          if (v214)
            goto LABEL_1106;
        }
        v215 = *(char **)(v211 + 24);
        v7 = *(void ***)(v211 + 32);
        if (v215 != (char *)v7)
        {
          do
          {
            if (v215[23] < 0)
            {
              v216 = *((_QWORD *)v215 + 1);
              if (v216 < 0)
                goto LABEL_1106;
              v217 = *(char **)v215;
              if (v216 && v217 == 0)
                goto LABEL_1106;
            }
            else
            {
              v216 = v215[23];
              v217 = v215;
            }
            if (v213 == v216 && !memcmp(v212, v217, v213))
              goto LABEL_314;
            v215 += 24;
          }
          while (v215 != (char *)v7);
          v215 = (char *)v7;
        }
LABEL_314:
        if (v215 != (char *)v7)
        {
          v7 = v648;
          if (v631 <= v208)
            goto LABEL_1106;
          v635 = 0;
          v149 = v662;
          v637 = v663[v208];
          v642 = v208;
          if (a4)
            goto LABEL_319;
LABEL_333:
          v219 = *((_QWORD *)v655 + 11);
          v220 = *((_QWORD *)v655 + 12);
          v221 = v220 - v219;
          if (v220 != v219)
            goto LABEL_320;
LABEL_334:
          v231 = 0;
          v232 = 0;
          v233 = v640;
          goto LABEL_445;
        }
        ++v208;
        v7 = v648;
      }
      while (v208 != v210);
      v637 = 0;
      v635 = 1;
      v149 = v662;
      if (!a4)
        goto LABEL_333;
LABEL_319:
      v219 = *((_QWORD *)v655 + 11);
      v220 = *((_QWORD *)v655 + 12);
      v221 = v220 - v219;
      if (v220 == v219)
        goto LABEL_334;
LABEL_320:
      if (0xCCCCCCCCCCCCCCCDLL * (v221 >> 3) >= 0x666666666666667)
        goto LABEL_1144;
      v222 = (char *)operator new(v221);
      v223 = 0;
      do
      {
        v225 = (__int128 *)(v219 + v223);
        v226 = (std::string *)&v222[v223];
        if (*(char *)(v219 + v223 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v226, *(const std::string::value_type **)v225, *((_QWORD *)v225 + 1));
        }
        else
        {
          v224 = *v225;
          v226->__r_.__value_.__r.__words[2] = *((_QWORD *)v225 + 2);
          *(_OWORD *)&v226->__r_.__value_.__l.__data_ = v224;
        }
        *(_OWORD *)&v222[v223 + 24] = *(_OWORD *)(v219 + v223 + 24);
        v223 += 40;
      }
      while (v219 + v223 != v220);
      v227 = v223 / 40;
      v228 = &v222[40 * (v223 / 40)];
      *(_QWORD *)v657 = v222;
      if (v223)
      {
        v5 = (std::string::size_type)(v222 + 40);
        v229 = 40 * v227;
        v230 = 40 * v227;
        while (*(_DWORD *)(v5 - 4) != 4)
        {
          v5 += 40;
          v230 -= 40;
          if (!v230)
            goto LABEL_379;
        }
        v234 = v5 - 40;
        if (v230 && v230 != 40)
        {
          for (j = 40; j != v230; j += 40)
          {
            if (*(_DWORD *)(v5 + 36) != 4)
            {
              if (v5 != v234)
              {
                v238 = *(_BYTE *)(v5 + 23);
                if (*(char *)(v234 + 23) < 0)
                {
                  if (v238 >= 0)
                    v236 = (const std::string::value_type *)v5;
                  else
                    v236 = *(const std::string::value_type **)v5;
                  if (v238 >= 0)
                    v237 = *(unsigned __int8 *)(v5 + 23);
                  else
                    v237 = *(_QWORD *)(v5 + 8);
                  std::string::__assign_no_alias<false>((std::string *)v234, v236, v237);
                }
                else if ((*(_BYTE *)(v5 + 23) & 0x80) != 0)
                {
                  std::string::__assign_no_alias<true>((_QWORD *)v234, *(char **)v5, *(_QWORD *)(v5 + 8));
                }
                else
                {
                  v239 = *(_OWORD *)v5;
                  *(_QWORD *)(v234 + 16) = *(_QWORD *)(v5 + 16);
                  *(_OWORD *)v234 = v239;
                }
              }
              *(_OWORD *)(v234 + 24) = *(_OWORD *)(v5 + 24);
              v234 += 40;
            }
            v5 += 40;
          }
        }
        v240 = &v228[-v234];
        if ((unint64_t)v228 < v234)
          goto LABEL_1106;
        if ((char *)v234 == v228)
        {
          v228 = (char *)v234;
          v222 = *(char **)v657;
          goto LABEL_379;
        }
        v222 = *(char **)v657;
        v5 = (uint64_t)(v234 - *(_QWORD *)v657) / 40;
        v241 = *(_QWORD *)v657 + 40 * v5;
        if (&v240[v241] == v228)
        {
          v252 = *(_QWORD *)v657 + 40 * v5;
          if (v228 == (char *)v241)
            goto LABEL_379;
        }
        else
        {
          v242 = *(char **)v657;
          v243 = 40 * v5;
          v244 = &v240[*(_QWORD *)v657];
          v245 = v229 - (_QWORD)v240;
          do
          {
            v248 = &v242[v243];
            v249 = &v244[v243];
            if (v244 != v242)
            {
              v250 = v249[23];
              if (v248[23] < 0)
              {
                if (v250 >= 0)
                  v246 = &v244[v243];
                else
                  v246 = *(const std::string::value_type **)&v244[40 * v5];
                if (v250 >= 0)
                  v247 = v249[23];
                else
                  v247 = *(_QWORD *)&v244[v243 + 8];
                std::string::__assign_no_alias<false>((std::string *)&v242[v243], v246, v247);
              }
              else if (v249[23] < 0)
              {
                std::string::__assign_no_alias<true>(&v242[40 * v5], *(char **)&v244[40 * v5], *(_QWORD *)&v244[40 * v5 + 8]);
              }
              else
              {
                v251 = *(_OWORD *)v249;
                *((_QWORD *)v248 + 2) = *((_QWORD *)v249 + 2);
                *(_OWORD *)v248 = v251;
              }
            }
            *(_OWORD *)(v248 + 24) = *(_OWORD *)(v249 + 24);
            v242 += 40;
            v244 += 40;
            v245 -= 40;
          }
          while (v243 != v245);
          v252 = (std::string::size_type)&v242[40 * v5];
          v222 = *(char **)v657;
          v149 = v662;
          v241 = *(_QWORD *)v657 + 40 * v5;
          if (v228 == (char *)v252)
            goto LABEL_379;
        }
        v253 = (uint64_t)&v222[v229 - 17];
        v254 = v252 - v241 + 40 * v5 - v229;
        v255 = (char *)v253;
        do
        {
          v256 = *v255;
          v255 -= 40;
          if (v256 < 0)
            operator delete(*(void **)(v253 - 23));
          v253 = (uint64_t)v255;
          v254 += 40;
        }
        while (v254);
        v228 = (char *)v252;
      }
LABEL_379:
      if (v222 == v228)
      {
        v231 = 0;
        v232 = 0;
        v7 = v648;
        v233 = v640;
        goto LABEL_444;
      }
      v231 = 0;
      v232 = 0;
      v7 = 0;
      v257 = v222;
      while (2)
      {
        if (v257[23] < 0)
        {
          v258 = *((_QWORD *)v257 + 1);
          if ((v258 & 0x8000000000000000) != 0)
            goto LABEL_1106;
          v259 = *(char **)v257;
          if (v258 && v259 == 0)
            goto LABEL_1106;
          if (v257[28])
            v5 = *((unsigned int *)v257 + 6);
          else
            v5 = 1;
          if (v258 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_1144;
        }
        else
        {
          v258 = v257[23];
          if (v257[28])
            v5 = *((unsigned int *)v257 + 6);
          else
            v5 = 1;
          v259 = v257;
        }
        if (v258 > 0x16)
        {
          v262 = (v258 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v258 | 7) != 0x17)
            v262 = v258 | 7;
          v263 = v262 + 1;
          v261 = (char *)operator new(v262 + 1);
          *(_QWORD *)&__sz[16] = v263 | 0x8000000000000000;
          *(_QWORD *)__sz = v261;
          *(_QWORD *)&__sz[8] = v258;
        }
        else
        {
          __sz[23] = v258;
          v261 = __sz;
        }
        v264 = &v261[v258];
        if (v261 <= v259 && v264 > v259)
          goto LABEL_1106;
        if (v258)
          memmove(v261, v259, v258);
        *v264 = 0;
        *(_DWORD *)&__sz[24] = v5;
        __sz[28] = 0;
        if (v232 >= v7)
        {
          v267 = v231;
          v268 = ((char *)v232 - (char *)v231) >> 5;
          v269 = v268 + 1;
          if ((unint64_t)(v268 + 1) >> 59)
            goto LABEL_1144;
          v270 = v6;
          v6 = v267;
          v271 = (char *)v7 - (char *)v267;
          v272 = ((char *)v7 - (char *)v267) >> 4;
          if (v272 > v269)
            v269 = v272;
          if (v271 >= 0x7FFFFFFFFFFFFFE0)
            v269 = 0x7FFFFFFFFFFFFFFLL;
          if (!v269)
            goto LABEL_1106;
          if (v269 >> 59)
            goto LABEL_1145;
          v651 = 32 * v269;
          v273 = (char *)operator new(32 * v269);
          v274 = v273;
          v275 = &v273[32 * v268];
          v5 = (std::string::size_type)v275;
          if ((__sz[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v273[32 * v268], *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
          }
          else
          {
            *(_OWORD *)v275 = *(_OWORD *)__sz;
            *((_QWORD *)v275 + 2) = *(_QWORD *)&__sz[16];
          }
          v276 = &v274[32 * v268];
          *((_DWORD *)v276 + 6) = *(_DWORD *)&__sz[24];
          v276[28] = __sz[28];
          v277 = v6;
          v214 = v232 == v6;
          v6 = v270;
          v222 = *(char **)v657;
          if (!v214)
          {
            v278 = 0;
            do
            {
              v282 = (std::string *)&v275[v278 * 8 - 32];
              v283 = (const std::string::value_type **)&v232[v278 - 4];
              if (*((char *)&v232[v278 - 1] - 1) < 0)
              {
                std::string::__init_copy_ctor_external(v282, *v283, (std::string::size_type)v232[v278 - 3]);
              }
              else
              {
                v279 = *(_OWORD *)v283;
                *(_QWORD *)&v275[v278 * 8 - 16] = v232[v278 - 2];
                *(_OWORD *)&v282->__r_.__value_.__l.__data_ = v279;
              }
              v280 = &v275[v278 * 8];
              v281 = (int)v232[v278 - 1];
              *(v280 - 4) = BYTE4(v232[v278 - 1]);
              *((_DWORD *)v280 - 2) = v281;
              v278 -= 4;
            }
            while (&v232[v278] != v277);
            v5 = (std::string::size_type)&v275[v278 * 8];
            do
            {
              if (*((char *)v232 - 9) < 0)
                operator delete(*(v232 - 4));
              v232 -= 4;
            }
            while (v232 != v277);
          }
          v7 = (void **)&v274[v651];
          v232 = (void **)(v275 + 32);
          if (v277)
            operator delete(v277);
          v231 = (void **)v5;
          v149 = v662;
          if ((__sz[23] & 0x80000000) != 0)
LABEL_381:
            operator delete(*(void **)__sz);
        }
        else
        {
          v149 = v662;
          if (!v232)
            goto LABEL_1106;
          if ((__sz[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v232, *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
          }
          else
          {
            v266 = *(_OWORD *)__sz;
            v232[2] = *(void **)&__sz[16];
            *(_OWORD *)v232 = v266;
          }
          v222 = *(char **)v657;
          v284 = *(_DWORD *)&__sz[24];
          *((_BYTE *)v232 + 28) = __sz[28];
          *((_DWORD *)v232 + 6) = v284;
          v232 += 4;
          if ((__sz[23] & 0x80000000) != 0)
            goto LABEL_381;
        }
        v257 += 40;
        if (v257 != v228)
          continue;
        break;
      }
      v7 = v648;
      v233 = v640;
      do
      {
        if (*(v228 - 17) < 0)
          operator delete(*((void **)v228 - 5));
        v228 -= 40;
      }
      while (v228 != v222);
LABEL_444:
      operator delete(v222);
LABEL_445:
      v285 = v233 + 40 * v644;
      v286 = *v655;
      *(_QWORD *)v658 = v231;
      if (*v655 < 2)
      {
        if (!v233
          || (v295 = *(_QWORD *)(v285 + 32)) == 0
          || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v295 + 16))(v295) != v286)
        {
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc", 2190, "IsMediaContentOfType(offer_content, media_description_options.type)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v141, v142, v143, v144, v620);
        }
        v296 = 48;
        if (!*v655)
          v296 = 32;
        v652 = (*(uint64_t (**)(void))(**(_QWORD **)(v285 + 32) + v296))();
        v297 = v233 + 40 * v644;
        v625 = (_BYTE *)(v297 + 28);
        if (v637)
          v298 = 0;
        else
          v298 = *(_BYTE *)(v297 + 28) == 0;
        v299 = v298;
        v300 = *((_QWORD *)a2 + 3);
        v5 = *((_QWORD *)a2 + 4);
        if (v300 != v5)
        {
          v301 = *((_BYTE *)v655 + 31);
          if (v301 >= 0)
            v302 = *((unsigned __int8 *)v655 + 31);
          else
            v302 = *((_QWORD *)v655 + 2);
          if (v301 >= 0)
            v303 = (unsigned __int8 *)(v655 + 2);
          else
            v303 = (unsigned __int8 *)*((_QWORD *)v655 + 1);
          do
          {
            v304 = *(unsigned __int8 *)(v300 + 23);
            if ((v304 & 0x80u) == 0)
              v305 = *(unsigned __int8 *)(v300 + 23);
            else
              v305 = *(_QWORD *)(v300 + 8);
            if (v305 == v302)
            {
              if ((v304 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v300, v303, *(_QWORD *)(v300 + 8)))
                  goto LABEL_490;
              }
              else
              {
                if (!*(_BYTE *)(v300 + 23))
                {
LABEL_490:
                  if (v300)
                    v307 = v300 + 24;
                  else
                    v307 = 0;
                  v308 = a4;
                  if (a4)
                  {
LABEL_494:
                    v309 = *((_QWORD *)v308 + 3);
                    v5 = *((_QWORD *)v308 + 4);
                    if (v309 == v5)
                    {
                      v309 = 0;
                    }
                    else
                    {
                      v310 = *((_BYTE *)v655 + 31);
                      if (v310 >= 0)
                        v311 = *((unsigned __int8 *)v655 + 31);
                      else
                        v311 = *((_QWORD *)v655 + 2);
                      if (v310 >= 0)
                        v312 = (unsigned __int8 *)(v655 + 2);
                      else
                        v312 = (unsigned __int8 *)*((_QWORD *)v655 + 1);
                      do
                      {
                        v328 = *(unsigned __int8 *)(v309 + 23);
                        if ((v328 & 0x80u) == 0)
                          v329 = *(unsigned __int8 *)(v309 + 23);
                        else
                          v329 = *(_QWORD *)(v309 + 8);
                        if (v329 == v311)
                        {
                          if ((v328 & 0x80) != 0)
                          {
                            if (!memcmp(*(const void **)v309, v312, *(_QWORD *)(v309 + 8)))
                              goto LABEL_528;
                          }
                          else
                          {
                            if (!*(_BYTE *)(v309 + 23))
                              goto LABEL_528;
                            v330 = 0;
                            while (*(unsigned __int8 *)(v309 + v330) == v312[v330])
                            {
                              if (v328 == ++v330)
                                goto LABEL_528;
                            }
                          }
                        }
                        v309 += 112;
                      }
                      while (v309 != v5);
                      v309 = 0;
LABEL_528:
                      v231 = *(void ***)v658;
                    }
                    if (v309)
                      v327 = v309 + 24;
                    else
                      v327 = 0;
LABEL_577:
                    cricket::TransportDescriptionFactory::CreateAnswer(*((_QWORD *)this + 28), v307, (_BYTE *)v655 + 37, v299, v327, (cricket::IceCredentialsIterator *)&v672, (uint64_t *)&v686);
                    if (!v686)
                    {
                      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                      {
                        *(_QWORD *)__sz = "INTERNAL_ERROR";
                        *(_QWORD *)&__sz[8] = 14;
                        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v359, v360, v361, v362, v363, v364, v365, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
                      }
                      v366 = (char *)operator new(0x38uLL);
                      v324 = v366;
                      if (v366 <= "Failed to create transport answer, transport is missing"
                        && v366 + 55 > "Failed to create transport answer, transport is missing")
                      {
                        goto LABEL_1106;
                      }
                      strcpy(v366, "Failed to create transport answer, transport is missing");
                      v367 = 10;
                      v325 = 0x80;
                      v368 = 55;
                      v369 = 56;
                      goto LABEL_908;
                    }
                    v350 = v655[8];
                    v351 = *(_DWORD *)(v652 + 124);
                    v353 = (v351 & 0xFFFFFFFD) == 0 && v350 < 2;
                    v355 = (v350 & 0xFFFFFFFD) == 0 && v351 < 2;
                    v356 = !v353;
                    v357 = !v355;
                    if (!v355 || v356)
                    {
                      v370 = v355 | v356;
                      if (v353 | v357)
                        v358 = 3;
                      else
                        v358 = 2;
                      if (v370 != 1)
                        v358 = 1;
                    }
                    else
                    {
                      v358 = 0;
                    }
                    v684 = 0;
                    __p = 0;
                    v685 = 0;
                    v372 = (const cricket::Codec *)*((_QWORD *)v655 + 14);
                    v371 = (const cricket::Codec *)*((_QWORD *)v655 + 15);
                    v626 = v371;
                    if (v372 == v371)
                    {
                      if (*v655)
                        __asm { BR              X10 }
                      __asm { BR              X10 }
                    }
                    if (&__p == (void **)(v655 + 28))
                    {
                      v374 = 0;
                      v373 = 0;
                    }
                    else
                    {
                      std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)&__p, v372, v371, 0x84BDA12F684BDA13 * ((v371 - v372) >> 3));
                      v373 = (cricket::Codec *)__p;
                      v374 = v684;
                      if (__p == v684)
                      {
                        v373 = v684;
                      }
                      else
                      {
                        do
                        {
                          if (!cricket::Codec::GetResiliencyType((uint64_t)v373))
                          {
                            v477 = (unsigned __int8 *)v373 + 16;
                            v478 = *((unsigned __int8 *)v373 + 39);
                            v479 = (unsigned __int8 *)v373 + 16;
                            v480 = v478;
                            if (*((char *)v373 + 39) < 0)
                            {
                              v480 = *((_QWORD *)v373 + 3);
                              if (v480 < 0)
                                goto LABEL_1106;
                              v479 = *(unsigned __int8 **)v477;
                              if (v480)
                              {
                                if (!v479)
                                  goto LABEL_1106;
                              }
                            }
                            if (v480 != 2)
                              goto LABEL_800;
                            v481 = *v479;
                            if (v481 != 67)
                            {
                              if ((v481 - 65) < 0x1A)
                                LOBYTE(v481) = v481 + 32;
                              if (v481 != 99)
                                goto LABEL_800;
                            }
                            v482 = v479[1];
                            if (v482 != 78)
                            {
                              if ((v482 - 65) < 0x1A)
                                LOBYTE(v482) = v482 + 32;
                              if (v482 != 110)
                              {
LABEL_800:
                                if ((v478 & 0x80) != 0)
                                {
                                  v478 = *((_QWORD *)v373 + 3);
                                  if (v478 < 0)
                                    goto LABEL_1106;
                                  v477 = *(unsigned __int8 **)v477;
                                  if (v478)
                                  {
                                    if (!v477)
                                      goto LABEL_1106;
                                  }
                                }
                                if (v478 != 2)
                                  goto LABEL_815;
                                v483 = *v477;
                                if (v483 != 67)
                                {
                                  if ((v483 - 65) < 0x1A)
                                    LOBYTE(v483) = v483 + 32;
                                  if (v483 != 99)
                                    goto LABEL_815;
                                }
                                v484 = v477[1];
                                if (v484 != 78)
                                {
                                  if ((v484 - 65) < 0x1A)
                                    LOBYTE(v484) = v484 + 32;
                                  if (v484 != 110)
                                    goto LABEL_815;
                                }
                              }
                            }
                          }
                          v373 = (cricket::Codec *)((char *)v373 + 216);
                        }
                        while (v373 != v374);
                        v373 = v374;
LABEL_815:
                        v374 = v684;
                      }
                    }
                    __sz[23] = 6;
                    if (v623)
                      goto LABEL_1106;
                    v621 = v374;
                    strcpy(__sz, "BUNDLE");
                    v485 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
                    v486 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
                    while (v485 != v486)
                    {
                      while (1)
                      {
                        v487 = v485[23];
                        v488 = *((_QWORD *)v485 + 1);
                        if ((v487 & 0x80u) == 0)
                          v489 = v485[23];
                        else
                          v489 = *((_QWORD *)v485 + 1);
                        if (v489 != 6)
                          goto LABEL_818;
                        if ((v487 & 0x80) == 0)
                          break;
                        v490 = *(const void **)v485;
                        v485 += 48;
                        if (!memcmp(v490, __sz, v488) || v485 == v486)
                          goto LABEL_835;
                      }
                      if (!v485[23])
                        break;
                      v492 = __sz;
                      v493 = v485;
                      while (*v493 == *v492)
                      {
                        ++v493;
                        ++v492;
                        if (!--v487)
                          goto LABEL_835;
                      }
LABEL_818:
                      v485 += 48;
                    }
LABEL_835:
                    v5 = *v655;
                    v494 = operator new();
                    v495 = v494;
                    *(_OWORD *)(v494 + 32) = 0u;
                    *(_OWORD *)(v494 + 48) = 0u;
                    *(_OWORD *)(v494 + 64) = 0u;
                    *(_OWORD *)(v494 + 80) = 0u;
                    *(_OWORD *)(v494 + 96) = 0u;
                    *(_OWORD *)(v494 + 112) = 0u;
                    *(_OWORD *)(v494 + 128) = 0u;
                    *(_OWORD *)(v494 + 144) = 0u;
                    *(_OWORD *)(v494 + 160) = 0u;
                    *(_OWORD *)(v494 + 176) = 0u;
                    *(_OWORD *)(v494 + 192) = 0u;
                    *(_OWORD *)(v494 + 208) = 0u;
                    *(_OWORD *)(v494 + 224) = 0u;
                    *(_OWORD *)(v494 + 240) = 0u;
                    *(_OWORD *)(v494 + 256) = 0u;
                    *(_OWORD *)(v494 + 272) = 0u;
                    *(_OWORD *)(v494 + 288) = 0u;
                    *(_QWORD *)v494 = &unk_24C0B6E20;
                    *(_QWORD *)(v494 + 8) = 0;
                    v496 = v494 + 8;
                    *(_QWORD *)(v494 + 16) = 0;
                    *(_QWORD *)(v494 + 24) = 0;
                    *(_DWORD *)(v494 + 31) = 0;
                    *(_DWORD *)(v494 + 36) = -1;
                    *(_BYTE *)(v494 + 63) = 2;
                    if (v494 + 40 <= (unint64_t)"AS" && v494 + 42 > (unint64_t)"AS")
                      goto LABEL_1106;
                    strcpy((char *)(v494 + 40), "AS");
                    *(_QWORD *)(v494 + 72) = 0;
                    *(_QWORD *)(v494 + 80) = 0;
                    *(_QWORD *)(v494 + 64) = 0;
                    *(_BYTE *)(v494 + 88) = 0;
                    *(_QWORD *)(v494 + 104) = 0;
                    *(_QWORD *)(v494 + 112) = 0;
                    *(_QWORD *)(v494 + 96) = 0;
                    *(_BYTE *)(v494 + 120) = 0;
                    *(_QWORD *)(v494 + 124) = 0;
                    *(_QWORD *)(v494 + 140) = 0;
                    *(_QWORD *)(v494 + 132) = 0;
                    *(_DWORD *)(v494 + 148) = 0;
                    *(_BYTE *)(v494 + 192) = 0;
                    *(_WORD *)(v494 + 184) = 0;
                    *(_DWORD *)(v494 + 188) = 0;
                    *(_QWORD *)(v494 + 160) = 0;
                    *(_QWORD *)(v494 + 168) = 0;
                    *(_QWORD *)(v494 + 152) = &unk_24C0ACDA0;
                    *(_DWORD *)(v494 + 176) = 0;
                    *(_DWORD *)(v494 + 200) = 2;
                    *(_OWORD *)(v494 + 208) = 0uLL;
                    *(_OWORD *)(v494 + 224) = 0uLL;
                    *(_OWORD *)(v494 + 240) = 0uLL;
                    *(_OWORD *)(v494 + 256) = 0uLL;
                    *(_OWORD *)(v494 + 272) = 0uLL;
                    *(_OWORD *)(v494 + 288) = 0uLL;
                    v497 = &unk_24C0B6EA0;
                    if (!(_DWORD)v5)
                      v497 = &unk_24C0B6DA0;
                    *(_QWORD *)v494 = v497;
                    if (v372 == v626)
                    {
                      memset(__sz, 0, 24);
                      std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)&__p, *(const cricket::Codec **)__sz, *(const cricket::Codec **)&__sz[8], 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)&__sz[8] - *(_QWORD *)__sz) >> 3));
                      v498 = *(_QWORD *)__sz;
                      if (*(_QWORD *)__sz)
                      {
                        v499 = *(void **)__sz;
                        if (*(_QWORD *)&__sz[8] != *(_QWORD *)__sz)
                        {
                          v500 = *(_QWORD *)&__sz[8] - 216;
                          v501 = (void (***)(uint64_t))(*(_QWORD *)&__sz[8] - 216);
                          do
                          {
                            v502 = *v501;
                            v501 -= 27;
                            (*v502)(v500);
                            v214 = v500 == v498;
                            v500 = (uint64_t)v501;
                          }
                          while (!v214);
                          v499 = *(void **)__sz;
                        }
                        *(_QWORD *)&__sz[8] = v498;
                        operator delete(v499);
                      }
                    }
                    v633 = (rtc::UniqueRandomIdGenerator *)*((_QWORD *)this + 26);
                    v628 = *(_QWORD *)(*((_QWORD *)this + 28) + 16);
                    v503 = (const cricket::Codec *)__p;
                    v5 = (std::string::size_type)v684;
                    if (__p != v684)
                    {
                      v504 = *(cricket::Codec **)(v495 + 288);
                      do
                      {
                        while ((unint64_t)v504 >= *(_QWORD *)(v495 + 296))
                        {
                          v504 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)(v495 + 280), v503);
                          *(_QWORD *)(v495 + 288) = v504;
                          v503 = (const cricket::Codec *)((char *)v503 + 216);
                          if (v503 == (const cricket::Codec *)v5)
                            goto LABEL_853;
                        }
                        if (!v504)
                          goto LABEL_1106;
                        v504 = (cricket::Codec *)((char *)cricket::Codec::Codec(v504, v503) + 216);
                        *(_QWORD *)(v495 + 288) = v504;
                        v503 = (const cricket::Codec *)((char *)v503 + 216);
                      }
                      while (v503 != (const cricket::Codec *)v5);
                    }
LABEL_853:
                    if (*(char *)(v652 + 31) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)__sz, *(const std::string::value_type **)(v652 + 8), *(_QWORD *)(v652 + 16));
                      v506 = __sz[23];
                      if ((__sz[23] & 0x80000000) != 0)
                        goto LABEL_857;
LABEL_855:
                      v507 = v506;
                      v508 = __sz;
                    }
                    else
                    {
                      v505 = *(_OWORD *)(v652 + 8);
                      *(_QWORD *)&__sz[16] = *(_QWORD *)(v652 + 24);
                      *(_OWORD *)__sz = v505;
                      v506 = __sz[23];
                      if ((__sz[23] & 0x80000000) == 0)
                        goto LABEL_855;
LABEL_857:
                      v507 = *(_QWORD *)&__sz[8];
                      if ((*(_QWORD *)&__sz[8] & 0x8000000000000000) != 0)
                        goto LABEL_1106;
                      v508 = *(_BYTE **)__sz;
                      if (*(_QWORD *)&__sz[8])
                      {
                        if (!*(_QWORD *)__sz)
                          goto LABEL_1106;
                      }
                    }
                    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v495 + 88))(v495, v508, v507);
                    if ((__sz[23] & 0x80000000) != 0)
                      operator delete(*(void **)__sz);
                    v689 = 0;
                    __src[0] = 0;
                    __src[1] = 0;
                    v509 = (char *)v232 - (char *)v231;
                    if (v232 != v231)
                    {
                      if (v509 < 0)
                        goto LABEL_1144;
                      v510 = v509 >> 5;
                      v511 = (char *)operator new(v509);
                      v512 = 0;
                      __src[0] = v511;
                      __src[1] = v511;
                      v689 = &v511[32 * v510];
                      do
                      {
                        v515 = (std::string *)&v511[v512 * 8];
                        v516 = &v231[v512];
                        if (SHIBYTE(v231[v512 + 2]) < 0)
                        {
                          std::string::__init_copy_ctor_external(v515, (const std::string::value_type *)*v516, (std::string::size_type)v516[1]);
                        }
                        else
                        {
                          v517 = *(_OWORD *)v516;
                          v515->__r_.__value_.__r.__words[2] = (std::string::size_type)v516[2];
                          *(_OWORD *)&v515->__r_.__value_.__l.__data_ = v517;
                        }
                        v513 = &v511[v512 * 8];
                        v514 = (int)v231[v512 + 3];
                        v513[28] = BYTE4(v231[v512 + 3]);
                        *((_DWORD *)v513 + 6) = v514;
                        v512 += 4;
                      }
                      while (&v231[v512] != v232);
                      __src[1] = &v511[v512 * 8];
                    }
                    cricket::MediaSessionDescriptionFactory::filtered_rtp_header_extensions((uint64_t)__sz, *(_BYTE *)this, (unint64_t *)__src);
                    v518 = *(void ***)__sz;
                    v519 = *(void ***)&__sz[8];
                    if (v518)
                    {
                      while (v519 != v518)
                      {
                        if (*((char *)v519 - 9) < 0)
                          operator delete(*(v519 - 4));
                        v519 -= 4;
                      }
                      operator delete(v518);
                      v520 = (void **)__src[0];
                      if (__src[0])
                        goto LABEL_878;
                    }
                    else
                    {
                      v520 = (void **)__src[0];
                      if (!__src[0])
                        goto LABEL_885;
LABEL_878:
                      v521 = (void **)__src[1];
                      v522 = v520;
                      if (__src[1] != v520)
                      {
                        do
                        {
                          if (*((char *)v521 - 9) < 0)
                            operator delete(*(v521 - 4));
                          v521 -= 4;
                        }
                        while (v521 != v520);
                        v522 = (void **)__src[0];
                      }
                      __src[1] = v520;
                      operator delete(v522);
                    }
LABEL_885:
                    v523 = (std::string::size_type *)((char *)v637 + 104);
                    if (!v637)
                      v523 = (std::string::size_type *)((char *)v686 + 80);
                    if (*((_BYTE *)v655 + 36) || *v625 || v373 == v621)
                      goto LABEL_888;
                    v5 = *v523;
                    if (*(char *)(v495 + 31) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)__sz, *(const std::string::value_type **)(v495 + 8), *(_QWORD *)(v495 + 16));
                      v546 = __sz[23];
                      v547 = *(_QWORD *)&__sz[8];
                      if (__sz[23] >= 0)
                        v549 = __sz[23];
                      else
                        v549 = *(_QWORD *)&__sz[8];
                      if (v549)
                        goto LABEL_925;
LABEL_968:
                      v555 = 1;
                      goto LABEL_969;
                    }
                    *(_OWORD *)__sz = *(_OWORD *)v496;
                    *(_QWORD *)&__sz[16] = *(_QWORD *)(v496 + 16);
                    v546 = HIBYTE(*(_QWORD *)&__sz[16]);
                    v547 = *(_QWORD *)&__sz[8];
                    if (__sz[23] >= 0)
                      v548 = HIBYTE(*(_QWORD *)&__sz[16]);
                    else
                      v548 = *(_QWORD *)&__sz[8];
                    if (!v548)
                      goto LABEL_968;
LABEL_925:
                    if (v5)
                    {
                      if ((v546 & 0x80) == 0)
                      {
                        v532 = v639;
                        if (!cricket::IsDtlsRtp((uint64_t)__sz, v546))
                        {
                          v550 = (uint64_t *)__sz;
                          v547 = v546;
                          goto LABEL_938;
                        }
LABEL_936:
                        v531 = 0;
                        v533 = v655;
                        v5 = (std::string::size_type)&__sz[24];
                        v534 = (uint64_t)(v655 + 2);
                        v535 = v686;
                        if (*((char *)v655 + 31) < 0)
                        {
LABEL_896:
                          std::string::__init_copy_ctor_external((std::string *)__sz, *((const std::string::value_type **)v533 + 1), *((_QWORD *)v533 + 2));
                          cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&__sz[24], v535);
                          v537 = *(std::string **)(v532 + 32);
                          if ((unint64_t)v537 >= *(_QWORD *)(v532 + 40))
                          {
LABEL_897:
                            *(_QWORD *)(v532 + 32) = std::vector<cricket::TransportInfo>::__push_back_slow_path<cricket::TransportInfo const&>(v629, (uint64_t)__sz);
                            cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)&__sz[24]);
                            if ((__sz[23] & 0x80000000) != 0)
                              goto LABEL_898;
                            goto LABEL_899;
                          }
LABEL_892:
                          if (!v537)
                            goto LABEL_1106;
                          if ((__sz[23] & 0x80000000) != 0)
                          {
                            std::string::__init_copy_ctor_external(v537, *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
                          }
                          else
                          {
                            v538 = *(_OWORD *)__sz;
                            v537->__r_.__value_.__r.__words[2] = *(_QWORD *)&__sz[16];
                            *(_OWORD *)&v537->__r_.__value_.__l.__data_ = v538;
                          }
                          cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&v537[1], (const cricket::TransportDescription *)&__sz[24]);
                          *(_QWORD *)(v532 + 32) = (char *)v537 + 112;
                          cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)&__sz[24]);
                          if ((__sz[23] & 0x80000000) != 0)
LABEL_898:
                            operator delete(*(void **)__sz);
LABEL_899:
                          v539 = *(_DWORD *)(v640 + 40 * v644 + 24);
                          *(_QWORD *)__sz = v495;
                          cricket::SessionDescription::AddContent(v532, v534, v539, v531, (uint64_t *)__sz);
                          v540 = *(_QWORD *)__sz;
                          *(_QWORD *)__sz = 0;
                          if (v540)
                            (*(void (**)(uint64_t))(*(_QWORD *)v540 + 8))(v540);
                          v324 = 0;
                          v368 = 0;
                          v369 = 0;
                          v325 = 0;
                          v367 = 0;
                          v5 = (std::string::size_type)__p;
                          if (__p)
                          {
                            v541 = __p;
                            if (v684 != __p)
                            {
                              v542 = (char *)v684 - 216;
                              v543 = (void (***)(char *))((char *)v684 - 216);
                              do
                              {
                                v544 = *v543;
                                v543 -= 27;
                                (*v544)(v542);
                                v214 = v542 == (char *)v5;
                                v542 = (char *)v543;
                              }
                              while (!v214);
                              v541 = __p;
                              v7 = v648;
                            }
                            v684 = (cricket::Codec *)v5;
                            operator delete(v541);
                          }
LABEL_908:
                          v545 = v686;
                          v686 = 0;
                          if (v545)
                            goto LABEL_993;
                          goto LABEL_994;
                        }
LABEL_891:
                        v536 = *(_OWORD *)v534;
                        *(_QWORD *)&__sz[16] = *(_QWORD *)(v534 + 16);
                        *(_OWORD *)__sz = v536;
                        cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&__sz[24], v535);
                        v537 = *(std::string **)(v532 + 32);
                        if ((unint64_t)v537 >= *(_QWORD *)(v532 + 40))
                          goto LABEL_897;
                        goto LABEL_892;
                      }
                      v532 = v639;
                      if (v547 < 0)
                        goto LABEL_1106;
                      v550 = *(uint64_t **)__sz;
                      if (v547)
                      {
                        if (!*(_QWORD *)__sz)
                          goto LABEL_1106;
                      }
                      if (cricket::IsDtlsRtp(*(uint64_t *)__sz, v547))
                      {
                        operator delete(v550);
                        goto LABEL_936;
                      }
LABEL_938:
                      if (v547 != 7)
                      {
                        if (v547 != 8)
                        {
                          if (v547 == 9)
                          {
                            v552 = *v550 == *(_QWORD *)"RTP/SAVPF"
                                && *((unsigned __int8 *)v550 + 8) == (unint64_t)cricket::kMediaProtocolSavpf[8];
                            goto LABEL_965;
                          }
LABEL_953:
                          v555 = 0;
LABEL_969:
                          if ((v546 & 0x80) != 0)
                          {
                            operator delete(*(void **)__sz);
                            if ((v555 & 1) != 0)
                              goto LABEL_973;
                          }
                          else if ((v555 & 1) != 0)
                          {
LABEL_973:
                            v531 = 0;
                            goto LABEL_890;
                          }
LABEL_888:
                          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
                          {
                            v534 = (uint64_t)(v655 + 2);
                            rtc::webrtc_logging_impl::Log("\r\t\n\t", v524, v525, v526, v527, v528, v529, v530, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
                            v531 = 1;
                            v532 = v639;
                            v533 = v655;
                            v5 = (std::string::size_type)&__sz[24];
                            v535 = v686;
                            if (*((char *)v655 + 31) < 0)
                              goto LABEL_896;
                            goto LABEL_891;
                          }
                          v531 = 1;
LABEL_890:
                          v532 = v639;
                          v533 = v655;
                          v5 = (std::string::size_type)&__sz[24];
                          v534 = (uint64_t)(v655 + 2);
                          v535 = v686;
                          if (*((char *)v655 + 31) < 0)
                            goto LABEL_896;
                          goto LABEL_891;
                        }
                        if (*v550 == *(_QWORD *)"RTP/AVPF")
                          goto LABEL_968;
                        v558 = *v550;
LABEL_964:
                        v552 = v558 == *(_QWORD *)"RTP/SAVP";
                        goto LABEL_965;
                      }
                      v552 = *(_DWORD *)v550 == *(_DWORD *)"RTP/AVP"
                          && *(_DWORD *)((char *)v550 + 3) == *(_DWORD *)"/AVP";
                    }
                    else
                    {
                      if ((v546 & 0x80) != 0)
                      {
                        if (v547 < 0)
                          goto LABEL_1106;
                        v551 = *(_BYTE **)__sz;
                        if (v547)
                        {
                          if (!*(_QWORD *)__sz)
                            goto LABEL_1106;
                        }
                      }
                      else
                      {
                        v551 = __sz;
                        v547 = v546;
                      }
                      switch(v547)
                      {
                        case 7:
                          v556 = *(_DWORD *)v551;
                          v557 = *(_DWORD *)(v551 + 3);
                          v552 = v556 == *(_DWORD *)"RTP/AVP" && v557 == *(_DWORD *)"/AVP";
                          break;
                        case 8:
                          if (*(_QWORD *)v551 == *(_QWORD *)"RTP/AVPF")
                            goto LABEL_968;
                          v558 = *(_QWORD *)v551;
                          goto LABEL_964;
                        case 9:
                          v553 = *(_QWORD *)v551;
                          v554 = v551[8];
                          v552 = v553 == *(_QWORD *)"RTP/SAVPF"
                              && v554 == cricket::kMediaProtocolSavpf[8];
                          break;
                        default:
                          goto LABEL_953;
                      }
                    }
LABEL_965:
                    v555 = v552;
                    goto LABEL_969;
                  }
LABEL_516:
                  v327 = 0;
                  goto LABEL_577;
                }
                v306 = 0;
                while (*(unsigned __int8 *)(v300 + v306) == v303[v306])
                {
                  if (v304 == ++v306)
                    goto LABEL_490;
                }
              }
            }
            v300 += 112;
          }
          while (v300 != v5);
        }
        v307 = 0;
        v308 = a4;
        if (a4)
          goto LABEL_494;
        goto LABEL_516;
      }
      if (v286 == 2)
      {
        v313 = v655 + 2;
        v314 = v233 + 40 * v644;
        v317 = *(unsigned __int8 *)(v314 + 28);
        v316 = (_BYTE *)(v314 + 28);
        v315 = v317;
        if (v637)
          v318 = 0;
        else
          v318 = v315 == 0;
        v319 = v318;
        v320 = *((_QWORD *)a2 + 3);
        v5 = *((_QWORD *)a2 + 4);
        if (v320 != v5)
        {
          v321 = *((_BYTE *)v655 + 31);
          if (v321 >= 0)
            v322 = *((unsigned __int8 *)v655 + 31);
          else
            v322 = *((_QWORD *)v655 + 2);
          if (v321 >= 0)
            v323 = (unsigned __int8 *)(v655 + 2);
          else
            v323 = (unsigned __int8 *)*((_QWORD *)v655 + 1);
          while (1)
          {
            v341 = *(unsigned __int8 *)(v320 + 23);
            if ((v341 & 0x80u) == 0)
              v342 = *(unsigned __int8 *)(v320 + 23);
            else
              v342 = *(_QWORD *)(v320 + 8);
            if (v342 == v322)
            {
              if ((v341 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v320, v323, *(_QWORD *)(v320 + 8)))
                  goto LABEL_562;
              }
              else
              {
                if (!*(_BYTE *)(v320 + 23))
                {
LABEL_562:
                  v313 = v655 + 2;
                  if (v320)
                    v344 = v320 + 24;
                  else
                    v344 = 0;
                  v345 = a4;
                  if (a4)
                  {
LABEL_566:
                    v5 = *((_QWORD *)v345 + 3);
                    v346 = *((_QWORD *)v345 + 4);
                    if (v5 == v346)
                    {
                      v5 = 0;
                    }
                    else
                    {
                      v347 = *((_BYTE *)v655 + 31);
                      if (v347 >= 0)
                        v348 = *((unsigned __int8 *)v655 + 31);
                      else
                        v348 = *((_QWORD *)v655 + 2);
                      if (v347 >= 0)
                        v349 = v313;
                      else
                        v349 = (unsigned int *)*((_QWORD *)v655 + 1);
                      do
                      {
                        v379 = *(unsigned __int8 *)(v5 + 23);
                        if ((v379 & 0x80u) == 0)
                          v380 = *(unsigned __int8 *)(v5 + 23);
                        else
                          v380 = *(_QWORD *)(v5 + 8);
                        if (v380 == v348)
                        {
                          if ((v379 & 0x80) != 0)
                          {
                            if (!memcmp(*(const void **)v5, v349, *(_QWORD *)(v5 + 8)))
                              goto LABEL_634;
                          }
                          else
                          {
                            if (!*(_BYTE *)(v5 + 23))
                              goto LABEL_634;
                            v381 = 0;
                            while (*(unsigned __int8 *)(v5 + v381) == *((unsigned __int8 *)v349 + v381))
                            {
                              if (v379 == ++v381)
                                goto LABEL_634;
                            }
                          }
                        }
                        v5 += 112;
                      }
                      while (v5 != v346);
                      v5 = 0;
LABEL_634:
                      v7 = v648;
                    }
                    if (v5)
                      v382 = v5 + 24;
                    else
                      v382 = 0;
LABEL_656:
                    cricket::TransportDescriptionFactory::CreateAnswer(*((_QWORD *)this + 28), v344, (_BYTE *)v655 + 37, v319, v382, (cricket::IceCredentialsIterator *)&v672, (uint64_t *)__src);
                    if (!__src[0])
                    {
                      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                      {
                        *(_QWORD *)__sz = "INTERNAL_ERROR";
                        *(_QWORD *)&__sz[8] = 14;
                        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v424, v425, v426, v427, v428, v429, v430, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
                      }
                      v431 = (char *)operator new(0x40uLL);
                      v324 = v431;
                      if (v431 <= "Failed to create transport answer, data transport is missing"
                        && v431 + 60 > "Failed to create transport answer, data transport is missing")
                      {
                        goto LABEL_1106;
                      }
                      strcpy(v431, "Failed to create transport answer, data transport is missing");
                      v367 = 10;
                      v325 = 0x80;
                      v368 = 60;
                      v369 = 64;
                      goto LABEL_992;
                    }
                    __sz[23] = 6;
                    if (v622)
                      goto LABEL_1106;
                    strcpy(__sz, "BUNDLE");
                    v405 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
                    v406 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
                    while (v405 != v406)
                    {
                      while (1)
                      {
                        v407 = v405[23];
                        v408 = *((_QWORD *)v405 + 1);
                        if ((v407 & 0x80u) == 0)
                          v409 = v405[23];
                        else
                          v409 = *((_QWORD *)v405 + 1);
                        if (v409 != 6)
                          goto LABEL_659;
                        if ((v407 & 0x80) == 0)
                          break;
                        v410 = *(const void **)v405;
                        v405 += 48;
                        if (!memcmp(v410, __sz, v408) || v405 == v406)
                          goto LABEL_676;
                      }
                      if (!v405[23])
                        break;
                      v412 = __sz;
                      v413 = v405;
                      while (*v413 == *v412)
                      {
                        ++v413;
                        ++v412;
                        if (!--v407)
                          goto LABEL_676;
                      }
LABEL_659:
                      v405 += 48;
                    }
LABEL_676:
                    v414 = *(_QWORD *)(v285 + 32);
                    if (!v414 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v414 + 16))(v414) != 2)
                      goto LABEL_1148;
                    v5 = v639;
                    v415 = v640;
                    if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v285 + 32) + 64))(*(_QWORD *)(v285 + 32)))
                    {
                      v417 = 0;
                      v443 = v655;
                      goto LABEL_738;
                    }
                    v416 = operator new();
                    v417 = v416;
                    *(_QWORD *)v416 = &unk_24C0B6E20;
                    *(_QWORD *)(v416 + 8) = 0;
                    *(_QWORD *)(v416 + 16) = 0;
                    *(_QWORD *)(v416 + 24) = 0;
                    *(_DWORD *)(v416 + 31) = 0;
                    *(_DWORD *)(v416 + 36) = -1;
                    *(_BYTE *)(v416 + 63) = 2;
                    if (v416 + 40 <= (unint64_t)"AS" && v416 + 42 > (unint64_t)"AS")
                      goto LABEL_1106;
                    strcpy((char *)(v416 + 40), "AS");
                    *(_QWORD *)(v416 + 72) = 0;
                    *(_QWORD *)(v416 + 80) = 0;
                    *(_QWORD *)(v416 + 64) = 0;
                    *(_BYTE *)(v416 + 88) = 0;
                    *(_QWORD *)(v416 + 104) = 0;
                    *(_QWORD *)(v416 + 112) = 0;
                    *(_QWORD *)(v416 + 96) = 0;
                    *(_BYTE *)(v416 + 120) = 0;
                    *(_QWORD *)(v416 + 124) = 0;
                    *(_QWORD *)(v416 + 140) = 0;
                    *(_QWORD *)(v416 + 132) = 0;
                    *(_DWORD *)(v416 + 148) = 0;
                    *(_BYTE *)(v416 + 192) = 0;
                    *(_WORD *)(v416 + 184) = 0;
                    *(_DWORD *)(v416 + 188) = 0;
                    *(_QWORD *)(v416 + 160) = 0;
                    *(_QWORD *)(v416 + 168) = 0;
                    *(_QWORD *)(v416 + 152) = &unk_24C0ACDA0;
                    *(_DWORD *)(v416 + 176) = 0;
                    *(_DWORD *)(v416 + 200) = 2;
                    *(_OWORD *)(v416 + 208) = 0u;
                    *(_OWORD *)(v416 + 224) = 0u;
                    *(_OWORD *)(v416 + 240) = 0u;
                    *(_OWORD *)(v416 + 256) = 0u;
                    *(_OWORD *)(v416 + 272) = 0u;
                    *(_OWORD *)(v416 + 288) = 0u;
                    *(_QWORD *)v416 = &unk_24C0B6F20;
                    *(_BYTE *)(v416 + 304) = 1;
                    *(_QWORD *)(v416 + 308) = 0x1000000001388;
                    v418 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v285 + 32) + 64))(*(_QWORD *)(v285 + 32));
                    v419 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v417 + 56))(v417);
                    if (*(char *)(v418 + 31) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)__sz, *(const std::string::value_type **)(v418 + 8), *(_QWORD *)(v418 + 16));
                      v421 = __sz[23];
                      if ((__sz[23] & 0x80000000) != 0)
                        goto LABEL_728;
LABEL_683:
                      v422 = v421;
                      v423 = __sz;
                    }
                    else
                    {
                      v420 = *(_OWORD *)(v418 + 8);
                      *(_QWORD *)&__sz[16] = *(_QWORD *)(v418 + 24);
                      *(_OWORD *)__sz = v420;
                      v421 = __sz[23];
                      if ((__sz[23] & 0x80000000) == 0)
                        goto LABEL_683;
LABEL_728:
                      v422 = *(_QWORD *)&__sz[8];
                      if ((*(_QWORD *)&__sz[8] & 0x8000000000000000) != 0)
                        goto LABEL_1106;
                      v423 = *(_BYTE **)__sz;
                      if (*(_QWORD *)&__sz[8])
                      {
                        if (!*(_QWORD *)__sz)
                          goto LABEL_1106;
                      }
                    }
                    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v419 + 88))(v419, v423, v422);
                    if ((__sz[23] & 0x80000000) != 0)
                    {
                      operator delete(*(void **)__sz);
                      v455 = *(_DWORD *)(v418 + 312);
                      v453 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v417 + 56))(v417);
                      if (v455)
                        goto LABEL_733;
                    }
                    else
                    {
                      v452 = *(_DWORD *)(v418 + 312);
                      v453 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v417 + 56))(v417);
                      if (v452)
                      {
LABEL_733:
                        v454 = *(_DWORD *)(v418 + 312);
                        if (v454 >= 0x40000)
                          v454 = 0x40000;
LABEL_737:
                        *(_DWORD *)(v453 + 312) = v454;
                        v443 = v655;
                        v456 = *(_BYTE *)(v418 + 304);
                        *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v417 + 56))(v417) + 304) = v456;
                        v415 = v640;
LABEL_738:
                        v457 = (uint64_t *)((char *)v637 + 104);
                        v458 = (const cricket::TransportDescription *)__src[0];
                        if (!v637)
                          v457 = (uint64_t *)((char *)__src[0] + 80);
                        if (*((_BYTE *)v443 + 36) || *v316)
                        {
                          v459 = 1;
                          v460 = v655;
                          if ((*((char *)v655 + 31) & 0x80000000) == 0)
                            goto LABEL_743;
LABEL_986:
                          std::string::__init_copy_ctor_external((std::string *)__sz, *((const std::string::value_type **)v460 + 1), *((_QWORD *)v460 + 2));
                          cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&__sz[24], v458);
                          v462 = *(std::string **)(v639 + 32);
                          if ((unint64_t)v462 >= *(_QWORD *)(v639 + 40))
                            goto LABEL_987;
LABEL_744:
                          if (!v462)
                            goto LABEL_1106;
                          if ((__sz[23] & 0x80000000) != 0)
                          {
                            std::string::__init_copy_ctor_external(v462, *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
                          }
                          else
                          {
                            v463 = *(_OWORD *)__sz;
                            v462->__r_.__value_.__r.__words[2] = *(_QWORD *)&__sz[16];
                            *(_OWORD *)&v462->__r_.__value_.__l.__data_ = v463;
                          }
                          cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&v462[1], (const cricket::TransportDescription *)&__sz[24]);
                          *(_QWORD *)(v639 + 32) = (char *)v462 + 112;
                          cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)&__sz[24]);
                          v464 = (uint64_t)(v655 + 2);
                          if ((__sz[23] & 0x80000000) != 0)
                            goto LABEL_988;
                          goto LABEL_989;
                        }
                        v465 = *v457;
                        if (*(char *)(v417 + 31) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)__sz, *(const std::string::value_type **)(v417 + 8), *(_QWORD *)(v417 + 16));
                        }
                        else
                        {
                          *(_OWORD *)__sz = *(_OWORD *)(v417 + 8);
                          *(_QWORD *)&__sz[16] = *(_QWORD *)(v417 + 24);
                        }
                        v466 = *(_QWORD *)&__sz[8];
                        if (__sz[23] >= 0)
                          v467 = __sz[23];
                        else
                          v467 = *(_QWORD *)&__sz[8];
                        if (v467)
                        {
                          if (!v465)
                          {
                            if ((__sz[23] & 0x80) != 0)
                            {
                              if ((*(_QWORD *)&__sz[8] & 0x8000000000000000) != 0)
                                goto LABEL_1106;
                              v469 = *(_DWORD **)__sz;
                              if (*(_QWORD *)&__sz[8])
                              {
                                if (!*(_QWORD *)__sz)
                                  goto LABEL_1106;
                              }
                            }
                            else
                            {
                              v469 = __sz;
                              v466 = __sz[23];
                            }
                            if (v466 == 4)
                            {
                              v475 = *v469 == *(_DWORD *)"SCTP";
                              goto LABEL_979;
                            }
                            goto LABEL_982;
                          }
                          if ((__sz[23] & 0x80) != 0)
                          {
                            if ((*(_QWORD *)&__sz[8] & 0x8000000000000000) != 0)
                              goto LABEL_1106;
                            v468 = *(_BYTE **)__sz;
                            if (*(_QWORD *)&__sz[8])
                            {
                              if (!*(_QWORD *)__sz)
                                goto LABEL_1106;
                            }
                          }
                          else
                          {
                            v468 = __sz;
                            v466 = __sz[23];
                          }
                          if (v466 != 13)
                          {
                            if (v466 == 9)
                            {
                              v470 = *(_QWORD *)v468;
                              v471 = *(_QWORD *)"DTLS/SCTP";
                              v472 = v468[8];
                              v473 = cricket::kMediaProtocolDtlsSctp[8];
LABEL_781:
                              v475 = v470 == v471 && v472 == v473;
LABEL_979:
                              v476 = v475;
LABEL_983:
                              if ((__sz[23] & 0x80) != 0)
                                operator delete(*(void **)__sz);
                              v459 = v476 ^ 1;
                              v458 = (const cricket::TransportDescription *)__src[0];
                              v460 = v655;
                              if (*((char *)v655 + 31) < 0)
                                goto LABEL_986;
LABEL_743:
                              v461 = *(_OWORD *)(v655 + 2);
                              *(_QWORD *)&__sz[16] = *((_QWORD *)v655 + 3);
                              *(_OWORD *)__sz = v461;
                              cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&__sz[24], v458);
                              v462 = *(std::string **)(v639 + 32);
                              if ((unint64_t)v462 < *(_QWORD *)(v639 + 40))
                                goto LABEL_744;
LABEL_987:
                              *(_QWORD *)(v639 + 32) = std::vector<cricket::TransportInfo>::__push_back_slow_path<cricket::TransportInfo const&>(v629, (uint64_t)__sz);
                              cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)&__sz[24]);
                              v464 = (uint64_t)(v655 + 2);
                              if ((__sz[23] & 0x80000000) != 0)
LABEL_988:
                                operator delete(*(void **)__sz);
LABEL_989:
                              v559 = *(_DWORD *)(v415 + 40 * v644 + 24);
                              *(_QWORD *)__sz = v417;
                              cricket::SessionDescription::AddContent(v639, v464, v559, v459, (uint64_t *)__sz);
                              v451 = *(_QWORD *)__sz;
                              if (!*(_QWORD *)__sz)
                                goto LABEL_991;
                              goto LABEL_990;
                            }
LABEL_982:
                            v476 = 0;
                            goto LABEL_983;
                          }
                          if (*(_QWORD *)v468 != *(_QWORD *)"UDP/DTLS/SCTP"
                            || *(_QWORD *)(v468 + 5) != *(_QWORD *)"TLS/SCTP")
                          {
                            v470 = *(_QWORD *)v468;
                            v471 = *(_QWORD *)"TCP/DTLS/SCTP";
                            v472 = *(_QWORD *)(v468 + 5);
                            v473 = *(_QWORD *)"TLS/SCTP";
                            goto LABEL_781;
                          }
                        }
                        v476 = 1;
                        goto LABEL_983;
                      }
                    }
                    v454 = 0x40000;
                    goto LABEL_737;
                  }
LABEL_636:
                  v382 = 0;
                  goto LABEL_656;
                }
                v343 = 0;
                while (*(unsigned __int8 *)(v320 + v343) == v323[v343])
                {
                  if (v341 == ++v343)
                    goto LABEL_562;
                }
              }
            }
            v320 += 112;
            if (v320 == v5)
            {
              v313 = v655 + 2;
              v344 = 0;
              v345 = a4;
              if (a4)
                goto LABEL_566;
              goto LABEL_636;
            }
          }
        }
        v344 = 0;
        v345 = a4;
        if (a4)
          goto LABEL_566;
        goto LABEL_636;
      }
      if (v286 != 3)
      {
        v324 = 0;
        v325 = 0;
        v326 = (_QWORD *)v639;
        goto LABEL_998;
      }
      v287 = *((_QWORD *)a2 + 3);
      v288 = *((_QWORD *)a2 + 4);
      v289 = (uint64_t)(v655 + 2);
      if (v637)
        v290 = 0;
      else
        v290 = *(_BYTE *)(v233 + 40 * v644 + 28) == 0;
      v291 = v290;
      if (v287 == v288)
      {
LABEL_609:
        v334 = 0;
        v335 = a4;
        if (a4)
          goto LABEL_544;
LABEL_610:
        v375 = 0;
        goto LABEL_642;
      }
      v292 = *((_BYTE *)v655 + 31);
      if (v292 >= 0)
        v293 = *((unsigned __int8 *)v655 + 31);
      else
        v293 = *((_QWORD *)v655 + 2);
      if (v292 >= 0)
        v294 = (unsigned __int8 *)(v655 + 2);
      else
        v294 = (unsigned __int8 *)*((_QWORD *)v655 + 1);
LABEL_531:
      v331 = *(unsigned __int8 *)(v287 + 23);
      if ((v331 & 0x80u) == 0)
        v332 = *(unsigned __int8 *)(v287 + 23);
      else
        v332 = *(_QWORD *)(v287 + 8);
      if (v332 != v293)
        goto LABEL_530;
      if ((v331 & 0x80) != 0)
        break;
      if (*(_BYTE *)(v287 + 23))
      {
        v333 = 0;
        while (*(unsigned __int8 *)(v287 + v333) == v294[v333])
        {
          if (v331 == ++v333)
            goto LABEL_540;
        }
        goto LABEL_530;
      }
LABEL_540:
      if (v287)
        v334 = v287 + 24;
      else
        v334 = 0;
      v335 = a4;
      if (!a4)
        goto LABEL_610;
LABEL_544:
      v336 = *((_QWORD *)v335 + 3);
      v337 = *((_QWORD *)v335 + 4);
      if (v336 == v337)
      {
        v336 = 0;
      }
      else
      {
        v338 = *((_BYTE *)v655 + 31);
        if (v338 >= 0)
          v339 = *((unsigned __int8 *)v655 + 31);
        else
          v339 = *((_QWORD *)v655 + 2);
        if (v338 >= 0)
          v340 = (unsigned __int8 *)(v655 + 2);
        else
          v340 = (unsigned __int8 *)*((_QWORD *)v655 + 1);
        do
        {
          v376 = *(unsigned __int8 *)(v336 + 23);
          if ((v376 & 0x80u) == 0)
            v377 = *(unsigned __int8 *)(v336 + 23);
          else
            v377 = *(_QWORD *)(v336 + 8);
          if (v377 == v339)
          {
            if ((v376 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v336, v340, *(_QWORD *)(v336 + 8)))
                goto LABEL_622;
            }
            else
            {
              if (!*(_BYTE *)(v336 + 23))
                goto LABEL_622;
              v378 = 0;
              while (*(unsigned __int8 *)(v336 + v378) == v340[v378])
              {
                if (v376 == ++v378)
                  goto LABEL_622;
              }
            }
          }
          v336 += 112;
        }
        while (v336 != v337);
        v336 = 0;
LABEL_622:
        v289 = (uint64_t)(v655 + 2);
      }
      if (v336)
        v375 = v336 + 24;
      else
        v375 = 0;
LABEL_642:
      v5 = v639;
      cricket::TransportDescriptionFactory::CreateAnswer(*((_QWORD *)this + 28), v334, (_BYTE *)v655 + 37, v291, v375, (cricket::IceCredentialsIterator *)&v672, (uint64_t *)__src);
      if (__src[0])
      {
        v387 = *(_QWORD *)(v285 + 32);
        if (v387 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v387 + 16))(v387) == 3)
        {
          v388 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v285 + 32) + 80))(*(_QWORD *)(v285 + 32));
          v389 = (char *)(v388 + 304);
          v390 = operator new();
          v391 = v390;
          if ((*(char *)(v388 + 327) & 0x80000000) == 0)
          {
            v392 = *(unsigned __int8 *)(v388 + 327);
            goto LABEL_694;
          }
          v392 = *(_QWORD *)(v388 + 312);
          if ((v392 & 0x8000000000000000) != 0)
            goto LABEL_1106;
          v389 = *(char **)v389;
          if (v392 && v389 == 0)
            goto LABEL_1106;
LABEL_694:
          *(_QWORD *)v390 = &unk_24C0B6E20;
          *(_QWORD *)(v390 + 8) = 0;
          *(_QWORD *)(v390 + 16) = 0;
          *(_QWORD *)(v390 + 24) = 0;
          *(_DWORD *)(v390 + 31) = 0;
          *(_DWORD *)(v390 + 36) = -1;
          *(_BYTE *)(v390 + 63) = 2;
          if (v390 + 40 <= (unint64_t)"AS" && v390 + 42 > (unint64_t)"AS")
            goto LABEL_1106;
          strcpy((char *)(v390 + 40), "AS");
          *(_QWORD *)(v390 + 72) = 0;
          *(_QWORD *)(v390 + 80) = 0;
          *(_QWORD *)(v390 + 64) = 0;
          *(_BYTE *)(v390 + 88) = 0;
          *(_QWORD *)(v390 + 104) = 0;
          *(_QWORD *)(v390 + 112) = 0;
          *(_QWORD *)(v390 + 96) = 0;
          *(_BYTE *)(v390 + 120) = 0;
          *(_QWORD *)(v390 + 124) = 0;
          *(_QWORD *)(v390 + 140) = 0;
          *(_QWORD *)(v390 + 132) = 0;
          *(_DWORD *)(v390 + 148) = 0;
          *(_BYTE *)(v390 + 192) = 0;
          *(_WORD *)(v390 + 184) = 0;
          *(_DWORD *)(v390 + 188) = 0;
          *(_QWORD *)(v390 + 160) = 0;
          *(_QWORD *)(v390 + 168) = 0;
          *(_QWORD *)(v390 + 152) = &unk_24C0ACDA0;
          *(_DWORD *)(v390 + 176) = 0;
          *(_DWORD *)(v390 + 200) = 2;
          *(_OWORD *)(v390 + 208) = 0u;
          *(_OWORD *)(v390 + 224) = 0u;
          *(_OWORD *)(v390 + 240) = 0u;
          *(_OWORD *)(v390 + 256) = 0u;
          *(_OWORD *)(v390 + 272) = 0u;
          *(_OWORD *)(v390 + 288) = 0u;
          *(_QWORD *)v390 = &unk_24C0B6FA0;
          if (v392 <= 0x7FFFFFFFFFFFFFF7)
          {
            if (v392 <= 0x16)
            {
              v433 = (char *)(v390 + 304);
              *(_BYTE *)(v391 + 327) = v392;
              v434 = (char *)(v391 + 304 + v392);
              if (v391 + 304 > (unint64_t)v389)
                goto LABEL_704;
LABEL_703:
              if (v434 <= v389)
                goto LABEL_704;
              goto LABEL_1106;
            }
            v435 = (v392 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v392 | 7) != 0x17)
              v435 = v392 | 7;
            v436 = v388;
            v437 = v435 + 1;
            v433 = (char *)operator new(v435 + 1);
            v438 = v437 | 0x8000000000000000;
            v388 = v436;
            *(_QWORD *)(v391 + 312) = v392;
            *(_QWORD *)(v391 + 320) = v438;
            *(_QWORD *)(v391 + 304) = v433;
            v434 = &v433[v392];
            if (v433 <= v389)
              goto LABEL_703;
LABEL_704:
            if (v392)
              memmove(v433, v389, v392);
            *v434 = 0;
            if (*(char *)(v388 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__sz, *(const std::string::value_type **)(v388 + 8), *(_QWORD *)(v388 + 16));
              v440 = __sz[23];
              if ((__sz[23] & 0x80000000) != 0)
                goto LABEL_711;
LABEL_708:
              v441 = v440;
              v442 = __sz;
            }
            else
            {
              v439 = *(_OWORD *)(v388 + 8);
              *(_QWORD *)&__sz[16] = *(_QWORD *)(v388 + 24);
              *(_OWORD *)__sz = v439;
              v440 = __sz[23];
              if ((__sz[23] & 0x80000000) == 0)
                goto LABEL_708;
LABEL_711:
              v441 = *(_QWORD *)&__sz[8];
              if ((*(_QWORD *)&__sz[8] & 0x8000000000000000) != 0)
                goto LABEL_1106;
              v442 = *(_BYTE **)__sz;
              if (*(_QWORD *)&__sz[8])
              {
                if (!*(_QWORD *)__sz)
                  goto LABEL_1106;
              }
            }
            (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v391 + 88))(v391, v442, v441);
            if ((__sz[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)__sz);
              v444 = (const cricket::TransportDescription *)__src[0];
              v445 = v655;
              if (*((char *)v655 + 31) < 0)
                goto LABEL_721;
LABEL_716:
              v446 = *(_OWORD *)v289;
              *(_QWORD *)&__sz[16] = *(_QWORD *)(v289 + 16);
              *(_OWORD *)__sz = v446;
              cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&__sz[24], v444);
              v447 = *(std::string **)(v639 + 32);
              if ((unint64_t)v447 < *(_QWORD *)(v639 + 40))
                goto LABEL_717;
LABEL_722:
              *(_QWORD *)(v639 + 32) = std::vector<cricket::TransportInfo>::__push_back_slow_path<cricket::TransportInfo const&>(v629, (uint64_t)__sz);
              cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)&__sz[24]);
              v449 = v640;
              if ((__sz[23] & 0x80000000) != 0)
LABEL_723:
                operator delete(*(void **)__sz);
            }
            else
            {
              v444 = (const cricket::TransportDescription *)__src[0];
              v445 = v655;
              if ((*((char *)v655 + 31) & 0x80000000) == 0)
                goto LABEL_716;
LABEL_721:
              std::string::__init_copy_ctor_external((std::string *)__sz, *((const std::string::value_type **)v445 + 1), *((_QWORD *)v445 + 2));
              cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&__sz[24], v444);
              v447 = *(std::string **)(v639 + 32);
              if ((unint64_t)v447 >= *(_QWORD *)(v639 + 40))
                goto LABEL_722;
LABEL_717:
              if (!v447)
                goto LABEL_1106;
              if ((__sz[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external(v447, *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
              }
              else
              {
                v448 = *(_OWORD *)__sz;
                v447->__r_.__value_.__r.__words[2] = *(_QWORD *)&__sz[16];
                *(_OWORD *)&v447->__r_.__value_.__l.__data_ = v448;
              }
              cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&v447[1], (const cricket::TransportDescription *)&__sz[24]);
              *(_QWORD *)(v639 + 32) = (char *)v447 + 112;
              cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)&__sz[24]);
              v449 = v640;
              if ((__sz[23] & 0x80000000) != 0)
                goto LABEL_723;
            }
            v450 = *(_DWORD *)(v449 + 40 * v644 + 24);
            *(_QWORD *)__sz = v391;
            cricket::SessionDescription::AddContent(v639, v289, v450, 1, (uint64_t *)__sz);
            v451 = *(_QWORD *)__sz;
            if (!*(_QWORD *)__sz)
            {
LABEL_991:
              v324 = 0;
              v368 = 0;
              v369 = 0;
              v325 = 0;
              v367 = 0;
              goto LABEL_992;
            }
LABEL_990:
            (*(void (**)(uint64_t))(*(_QWORD *)v451 + 8))(v451);
            goto LABEL_991;
          }
LABEL_1144:
          abort();
        }
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc", 2395, "IsMediaContentOfType(offer_content, MEDIA_TYPE_UNSUPPORTED)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v383, v384, v385, v386, v620);
LABEL_1148:
        v619 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc", 2322, "IsMediaContentOfType(offer_content, MEDIA_TYPE_DATA)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v401, v402, v403, v404, v620);
        rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v619);
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        *(_QWORD *)__sz = "INTERNAL_ERROR";
        *(_QWORD *)&__sz[8] = 14;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v393, v394, v395, v396, v397, v398, v399, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
      }
      v400 = (char *)operator new(0x48uLL);
      v324 = v400;
      if (v400 <= "Failed to create transport answer, unsupported transport is missing"
        && v400 + 67 > "Failed to create transport answer, unsupported transport is missing")
      {
        goto LABEL_1106;
      }
      strcpy(v400, "Failed to create transport answer, unsupported transport is missing");
      v367 = 10;
      v325 = 0x80;
      v368 = 67;
      v369 = 72;
LABEL_992:
      v545 = (cricket::TransportDescription *)__src[0];
      __src[0] = 0;
      if (v545)
      {
LABEL_993:
        cricket::TransportDescription::~TransportDescription(v545);
        MEMORY[0x20BD0ADEC]();
      }
LABEL_994:
      if (v367)
      {
        v560 = 0;
        *(_DWORD *)a5 = v367;
        *(_QWORD *)(a5 + 8) = v324;
        *(_QWORD *)(a5 + 16) = v368;
        *(_DWORD *)(a5 + 24) = v369;
        *(_BYTE *)(a5 + 30) = BYTE6(v369);
        *(_WORD *)(a5 + 28) = WORD2(v369);
        *(_BYTE *)(a5 + 31) = v325;
        *(_DWORD *)(a5 + 32) = 0;
        *(_BYTE *)(a5 + 36) = 0;
        *(_BYTE *)(a5 + 37) = v627;
        *(_BYTE *)(a5 + 38) = 0;
        *(_BYTE *)(a5 + 40) = 0;
        *(_BYTE *)(a5 + 48) = 0;
        v231 = *(void ***)v658;
        v149 = v662;
        if (!*(_QWORD *)v658)
          goto LABEL_1044;
        goto LABEL_1040;
      }
      v326 = (_QWORD *)v639;
      v231 = *(void ***)v658;
      v149 = v662;
LABEL_998:
      v561 = v326[1];
      if (*v326 == v561)
        goto LABEL_1106;
      if (*(_BYTE *)(v561 - 12))
        v562 = 1;
      else
        v562 = *((_BYTE *)v636 + 2) == 0;
      v563 = v635;
      if (v562)
        v563 = 1;
      if ((v563 & 1) != 0)
        goto LABEL_1035;
      if (v624 <= v642)
        goto LABEL_1106;
      if (*(char *)(v561 - 17) < 0)
      {
        v564 = *(_QWORD *)(v561 - 32);
        if ((v564 & 0x8000000000000000) != 0)
          goto LABEL_1106;
        v565 = *(char **)(v561 - 40);
        if (v564)
        {
          if (!v565)
            goto LABEL_1106;
        }
      }
      else
      {
        v564 = *(unsigned __int8 *)(v561 - 17);
        v565 = (char *)(v561 - 40);
      }
      v5 = v642;
      cricket::ContentGroup::AddContentName((char *)&v7[6 * v642], v565, v564);
      if (v631 <= v642)
      {
LABEL_1106:
        __break(1u);
        goto LABEL_1107;
      }
      v566 = (std::string *)operator new();
      v567 = *v629;
      v568 = *(_BYTE *)(v561 - 17);
      if (v568 >= 0)
        v569 = *(unsigned __int8 *)(v561 - 17);
      else
        v569 = *(_QWORD *)(v561 - 32);
      if (v568 >= 0)
        v570 = (unsigned __int8 *)(v561 - 40);
      else
        v570 = *(unsigned __int8 **)(v561 - 40);
      while (2)
      {
        v571 = *((unsigned __int8 *)v567 + 23);
        v572 = v567[1];
        if ((v571 & 0x80u) == 0)
          v573 = *((unsigned __int8 *)v567 + 23);
        else
          v573 = v567[1];
        if (v573 != v569)
          goto LABEL_1020;
        if ((v571 & 0x80) == 0)
        {
          if (!*((_BYTE *)v567 + 23))
          {
LABEL_1030:
            v575 = *(_OWORD *)v567;
            v566->__r_.__value_.__r.__words[2] = v567[2];
            *(_OWORD *)&v566->__r_.__value_.__l.__data_ = v575;
            goto LABEL_1031;
          }
          v574 = 0;
          while (*((unsigned __int8 *)v567 + v574) == v570[v574])
          {
            if (v571 == ++v574)
              goto LABEL_1030;
          }
          goto LABEL_1020;
        }
        if (memcmp((const void *)*v567, v570, v567[1]))
        {
LABEL_1020:
          v567 += 14;
          continue;
        }
        break;
      }
      std::string::__init_copy_ctor_external(v566, (const std::string::value_type *)*v567, v572);
LABEL_1031:
      cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)&v566[1], (const cricket::TransportDescription *)(v567 + 3));
      v149 = v662;
      v576 = v663[v642];
      v663[v642] = (void (*)(cricket::Codec *__hidden))v566;
      v231 = *(void ***)v658;
      if (v576)
      {
        cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)((char *)v576 + 24));
        if (*((char *)v576 + 23) < 0)
          operator delete(*(void **)v576);
        MEMORY[0x20BD0ADEC](v576, 0x1032C402A3A6BE2);
      }
LABEL_1035:
      ++v644;
      if (v325 < 0)
        operator delete(v324);
      v560 = 1;
      if (v231)
      {
LABEL_1040:
        while (v232 != v231)
        {
          if (*((char *)v232 - 9) < 0)
            operator delete(*(v232 - 4));
          v232 -= 4;
        }
        operator delete(v231);
      }
LABEL_1044:
      if ((v560 & 1) == 0)
      {
        v5 = v639;
        v578 = v663;
        if (!v663)
          goto LABEL_1079;
        goto LABEL_1102;
      }
      v655 += 34;
      v5 = v639;
      if (v655 == v634)
      {
        v156 = v676;
        v145 = v677;
        goto LABEL_1053;
      }
    }
    if (!memcmp(*(const void **)v287, v294, *(_QWORD *)(v287 + 8)))
      goto LABEL_540;
LABEL_530:
    v287 += 112;
    if (v287 == v288)
      goto LABEL_609;
    goto LABEL_531;
  }
LABEL_1053:
  if (v156 == v145 || v7 == v6)
  {
LABEL_1070:
    if (*(_BYTE *)this)
    {
      v585 = *((_DWORD *)a2 + 18);
      if ((v585 & 0xFFFFFFFB) == 2)
        v586 = 6;
      else
        v586 = 5;
      if (v585 == 7)
        v587 = 5;
      else
        v587 = v586;
    }
    else
    {
      v587 = 6;
    }
    *(_DWORD *)(v5 + 72) = v587;
    *(_DWORD *)a5 = 0;
    *(_BYTE *)(a5 + 38) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 29) = 0;
    *(_QWORD *)(a5 + 40) = v5;
    v5 = 0;
    *(_BYTE *)(a5 + 48) = 1;
    v578 = v663;
    if (v663)
      goto LABEL_1102;
LABEL_1079:
    if (!v7)
      goto LABEL_1108;
    goto LABEL_1080;
  }
  v579 = v7;
  while (2)
  {
    v580 = *(std::string **)(v5 + 56);
    if ((unint64_t)v580 >= *(_QWORD *)(v5 + 64))
    {
      *(_QWORD *)(v5 + 56) = std::vector<cricket::ContentGroup>::__push_back_slow_path<cricket::ContentGroup const&>((std::string **)(v5 + 48), (__int128 *)v579);
      v583 = v579[3];
      if (v583)
        v584 = v583 == v579[4];
      else
        v584 = 1;
      if (!v584)
        goto LABEL_1056;
      goto LABEL_1057;
    }
    if (!v580)
      goto LABEL_1106;
    *(_QWORD *)(v5 + 56) = cricket::ContentGroup::ContentGroup(v580, (__int128 *)v579) + 2;
    v581 = v579[3];
    if (v581)
      v582 = v581 == v579[4];
    else
      v582 = 1;
    if (v582)
      goto LABEL_1057;
LABEL_1056:
    {
LABEL_1057:
      v579 += 6;
      if (v579 == v6)
        goto LABEL_1070;
      continue;
    }
    break;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    *(_QWORD *)__sz = "INTERNAL_ERROR";
    *(_QWORD *)&__sz[8] = 14;
    rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v593, v594, v595, v596, v597, v598, v599, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
  }
  v600 = (char *)operator new(0x38uLL);
  if (v600 <= "CreateAnswer failed to UpdateTransportInfoForBundle."
    && v600 + 52 > "CreateAnswer failed to UpdateTransportInfoForBundle.")
  {
    goto LABEL_1106;
  }
  strcpy(v600, "CreateAnswer failed to UpdateTransportInfoForBundle.");
  *(_DWORD *)a5 = 10;
  *(_QWORD *)(a5 + 8) = v600;
  *(_OWORD *)(a5 + 16) = xmmword_208F0D7E0;
  *(_DWORD *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 36) = 0;
  *(_BYTE *)(a5 + 38) = 0;
  *(_BYTE *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 48) = 0;
  v578 = v663;
  if (!v663)
    goto LABEL_1079;
LABEL_1102:
  while (v149 != (cricket::Codec *)v578)
  {
    v602 = *((_QWORD *)v149 - 1);
    v149 = (cricket::Codec *)((char *)v149 - 8);
    v601 = v602;
    *(_QWORD *)v149 = 0;
    if (v602)
    {
      cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)(v601 + 24));
      if (*(char *)(v601 + 23) < 0)
        operator delete(*(void **)v601);
      MEMORY[0x20BD0ADEC](v601, 0x1032C402A3A6BE2);
    }
    v578 = v663;
  }
LABEL_1107:
  operator delete(v663);
  if (!v7)
  {
LABEL_1108:
    v588 = v676;
    if (v676)
      goto LABEL_1109;
    goto LABEL_1110;
  }
LABEL_1080:
  if (v6 != v7)
  {
    do
    {
      v589 = (void **)*(v6 - 3);
      if (v589)
      {
        v590 = (void **)*(v6 - 2);
        v591 = *(v6 - 3);
        if (v590 != v589)
        {
          do
          {
            if (*((char *)v590 - 1) < 0)
              operator delete(*(v590 - 3));
            v590 -= 3;
          }
          while (v590 != v589);
          v591 = *(v6 - 3);
        }
        *(v6 - 2) = v589;
        operator delete(v591);
      }
      v592 = v6 - 6;
      if (*((char *)v6 - 25) < 0)
        operator delete(*v592);
      v6 -= 6;
    }
    while (v592 != v7);
  }
  operator delete(v7);
  v588 = v676;
  if (v676)
  {
LABEL_1109:
    v677 = v588;
    operator delete(v588);
  }
LABEL_1110:
  if (v5)
  {
    cricket::SessionDescription::~SessionDescription((cricket::SessionDescription *)v5);
    MEMORY[0x20BD0ADEC]();
  }
  v603 = (char *)v664;
  if (v664)
  {
    v604 = v664;
    if (v665 != v664)
    {
      v605 = v665 - 216;
      v606 = (void (***)(char *))(v665 - 216);
      do
      {
        v607 = *v606;
        v606 -= 27;
        (*v607)(v605);
        v214 = v605 == v603;
        v605 = (char *)v606;
      }
      while (!v214);
      v604 = v664;
    }
    v665 = v603;
    operator delete(v604);
  }
  v608 = (char *)v667;
  if (v667)
  {
    v609 = v667;
    if (v668 != v667)
    {
      v610 = v668 - 216;
      v611 = (void (***)(char *))(v668 - 216);
      do
      {
        v612 = *v611;
        v611 -= 27;
        (*v612)(v610);
        v214 = v610 == v608;
        v610 = (char *)v611;
      }
      while (!v214);
      v609 = v667;
    }
    v668 = v608;
    operator delete(v609);
  }
  v613 = (char *)v670;
  if (v670)
  {
    v614 = v671;
    v615 = v670;
    if (v671 != v670)
    {
      do
        cricket::StreamParams::~StreamParams((cricket::StreamParams *)(v614 - 144));
      while (v614 != v613);
      v615 = v670;
    }
    v671 = v613;
    operator delete(v615);
  }
  if (i)
    operator delete(i);
  v672 = off_24C0B5178;
  v616 = (void **)v673;
  if (v673)
  {
    v617 = (void **)v674;
    v618 = v673;
    if (v674 == v673)
    {
LABEL_1142:
      v674 = (char *)v616;
      operator delete(v618);
      return;
    }
    while (1)
    {
      if (*((char *)v617 - 9) < 0)
      {
        operator delete(*(v617 - 4));
        if ((*((char *)v617 - 33) & 0x80000000) == 0)
          goto LABEL_1137;
      }
      else if ((*((char *)v617 - 33) & 0x80000000) == 0)
      {
LABEL_1137:
        v617 -= 7;
        if (v617 == v616)
          goto LABEL_1141;
        continue;
      }
      operator delete(*(v617 - 7));
      v617 -= 7;
      if (v617 == v616)
      {
LABEL_1141:
        v618 = v673;
        goto LABEL_1142;
      }
    }
  }
}

void cricket::`anonymous namespace'::MergeCodecs(cricket::Codec **a1, uint64_t a2, uint64_t *a3)
{
  cricket::Codec *v3;
  cricket::Codec *v4;
  cricket::Codec *v8;
  cricket::Codec *v9;
  cricket::Codec *v10;
  cricket::Codec *v11;
  _BOOL4 v13;
  cricket::Codec *v14;
  void **p_p;
  cricket::Codec *v16;
  int v17;
  std::string::size_type v18;
  __int128 *v19;
  _BYTE *v20;
  _BOOL4 v21;
  char Param;
  char v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  cricket::Codec *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const void **v43;
  char *v44;
  void **v45;
  cricket::Codec *v46;
  cricket::Codec *v47;
  void *v48;
  int64_t v49;
  char v50;
  cricket::Codec *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t **v59;
  char *v60;
  uint64_t v61;
  std::string::size_type v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  std::string::size_type v73;
  __int128 *v74;
  _BYTE *v75;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::string::size_type size;
  std::string::size_type v87;
  std::string *v88;
  _BYTE *v89;
  std::string::size_type v90;
  int v91;
  size_t v92;
  void **p_src;
  _BYTE *v94;
  _BOOL4 v95;
  uint64_t v96;
  uint64_t v97;
  size_t v98;
  BOOL v99;
  void **v100;
  std::string::size_type v101;
  std::string::size_type v102;
  std::string *v103;
  char *v104;
  std::string::size_type v105;
  std::string::size_type v106;
  char v107;
  const void **v108;
  char *v109;
  uint64_t v110;
  cricket::Codec *v111;
  uint64_t **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  _BOOL4 v118;
  void **__src;
  size_t v120;
  unint64_t v121;
  std::string v122;
  std::string v123;
  uint64_t v124;
  _QWORD v125[2];
  char v126[8];
  int v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  void *__p;
  unint64_t v132;
  uint64_t v133;
  unsigned __int8 v134;
  __int128 __str;
  uint64_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (cricket::Codec::GetResiliencyType((uint64_t)v3) != 4
        && cricket::Codec::GetResiliencyType((uint64_t)v3) != 1)
      {
        if (!v134)
        {
          cricket::Codec::Codec((cricket::Codec *)&__p, v3);
          cricket::UsedIds<cricket::Codec>::FindAndSetIdUsed(a3, (uint64_t)&__p);
          v9 = *(cricket::Codec **)(a2 + 8);
          if ((unint64_t)v9 >= *(_QWORD *)(a2 + 16))
          {
            v8 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)a2, (const cricket::Codec *)&__p);
          }
          else
          {
            if (!v9)
            {
LABEL_180:
              __break(1u);
LABEL_181:
              abort();
            }
            v8 = (cricket::Codec *)((char *)cricket::Codec::Codec(v9, (const cricket::Codec *)&__p) + 216);
          }
          *(_QWORD *)(a2 + 8) = v8;
        }
        cricket::Codec::~Codec((cricket::Codec *)&__p);
      }
      v3 = (cricket::Codec *)((char *)v3 + 216);
    }
    while (v3 != v4);
    v10 = *a1;
    v11 = a1[1];
    if (*a1 != v11)
    {
      v13 = &__str <= (__int128 *)"apt" && (char *)&__str + 3 > "apt";
      v118 = v13;
      while (1)
      {
        if (cricket::Codec::GetResiliencyType((uint64_t)v10) != 4)
          goto LABEL_29;
        if (v134)
          break;
        cricket::Codec::Codec((cricket::Codec *)v126, v10);
        if (v16)
        {
          if (v134)
          {
            v17 = snprintf((char *)&__str, 0x20uLL, "%d", HIDWORD(v132));
            if (v17 < 0)
              goto LABEL_181;
            v18 = v17;
            if (v17 > 0x16)
            {
              v41 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v17 | 7) != 0x17)
                v41 = v17 | 7;
              v42 = v41 + 1;
              v19 = (__int128 *)operator new(v41 + 1);
              v123.__r_.__value_.__l.__size_ = v18;
              v123.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
              v123.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
              v20 = (char *)v19 + v18;
              v21 = (__int128 *)((char *)v19 + v18) > &__str;
              if (v19 <= &__str)
                goto LABEL_53;
            }
            else
            {
              *((_BYTE *)&v123.__r_.__value_.__s + 23) = v17;
              v19 = (__int128 *)&v123;
              v20 = (char *)&v123 + v18;
              v21 = (char *)&v123 + v18 > (char *)&__str;
              if (&v123 > (std::string *)&__str)
                goto LABEL_54;
LABEL_53:
              if (v21)
                goto LABEL_180;
            }
LABEL_54:
            if ((_DWORD)v18)
              memcpy(v19, &__str, v18);
            *v20 = 0;
            HIBYTE(v136) = 3;
            if (v118)
              goto LABEL_180;
            strcpy((char *)&__str, "apt");
            v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v128, &v122, (const void **)&__str);
            v44 = (char *)*v43;
            if (*v43)
            {
              v45 = (void **)(v44 + 56);
              if ((v44[79] & 0x80000000) == 0)
                goto LABEL_59;
LABEL_81:
              operator delete(*v45);
              goto LABEL_59;
            }
            v59 = (uint64_t **)v43;
            v60 = (char *)operator new(0x50uLL);
            *((_OWORD *)v60 + 2) = __str;
            v61 = v136;
            __str = 0uLL;
            v136 = 0;
            *((_QWORD *)v60 + 6) = v61;
            *((_QWORD *)v60 + 7) = 0;
            *((_QWORD *)v60 + 8) = 0;
            *((_QWORD *)v60 + 9) = 0;
            v62 = v122.__r_.__value_.__r.__words[0];
            *(_QWORD *)v60 = 0;
            *((_QWORD *)v60 + 1) = 0;
            *((_QWORD *)v60 + 2) = v62;
            *v59 = (uint64_t *)v60;
            v63 = (uint64_t *)v60;
            if (*v128)
            {
              v128 = (_QWORD *)*v128;
              v63 = *v59;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v129, v63);
            ++v130;
            v45 = (void **)(v60 + 56);
            if (v60[79] < 0)
              goto LABEL_81;
LABEL_59:
            *(std::string *)v45 = v123;
            *((_BYTE *)&v123.__r_.__value_.__s + 23) = 0;
            v123.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v136) < 0 && (operator delete((void *)__str), SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0))
            {
              operator delete(v123.__r_.__value_.__l.__data_);
              cricket::UsedIds<cricket::Codec>::FindAndSetIdUsed(a3, (uint64_t)v126);
              v46 = *(cricket::Codec **)(a2 + 8);
              if ((unint64_t)v46 >= *(_QWORD *)(a2 + 16))
                goto LABEL_152;
LABEL_62:
              if (!v46)
                goto LABEL_180;
              v47 = (cricket::Codec *)((char *)cricket::Codec::Codec(v46, (const cricket::Codec *)v126) + 216);
            }
            else
            {
              cricket::UsedIds<cricket::Codec>::FindAndSetIdUsed(a3, (uint64_t)v126);
              v46 = *(cricket::Codec **)(a2 + 8);
              if ((unint64_t)v46 < *(_QWORD *)(a2 + 16))
                goto LABEL_62;
LABEL_152:
              v47 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)a2, (const cricket::Codec *)v126);
            }
            *(_QWORD *)(a2 + 8) = v47;
          }
          else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            v117 = v117 & 0xFFFFFFFF00000000 | 0x169A;
            rtc::webrtc_logging_impl::Log("\r\t\n\t", v34, v35, v36, v37, v38, v39, v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
          }
          if (v134)
            cricket::Codec::~Codec((cricket::Codec *)&__p);
        }
LABEL_23:
        p_p = (void **)v126;
LABEL_24:
        cricket::Codec::~Codec((cricket::Codec *)p_p);
LABEL_25:
        v10 = (cricket::Codec *)((char *)v10 + 216);
        if (v10 == v11)
          return;
      }
      cricket::Codec::~Codec((cricket::Codec *)&__p);
LABEL_29:
      if (cricket::Codec::GetResiliencyType((uint64_t)v10) != 1)
        goto LABEL_25;
      if (v134)
      {
        p_p = &__p;
        goto LABEL_24;
      }
      cricket::Codec::Codec((cricket::Codec *)v126, v10);
      __p = 0;
      v132 = 0;
      v133 = 0;
      HIBYTE(v136) = 0;
      LOBYTE(__str) = 0;
      Param = cricket::Codec::GetParam((uint64_t)v126, (const void **)&__str, (uint64_t)&__p);
      v23 = Param;
      if (SHIBYTE(v136) < 0)
      {
        operator delete((void *)__str);
        if ((v23 & 1) != 0)
        {
LABEL_40:
          if (SHIBYTE(v133) < 0)
          {
            v24 = v132;
            if ((v132 & 0x8000000000000000) != 0)
              goto LABEL_180;
            v25 = __p;
            if (v132)
            {
              if (!__p)
                goto LABEL_180;
            }
          }
          else
          {
            v24 = HIBYTE(v133);
            v25 = &__p;
          }
          rtc::split((size_t)v25, v24, 0x2Fu, (char **)&__str);
          v48 = (void *)__str;
          if (*((_QWORD *)&__str + 1) - (_QWORD)__str < 0x20uLL)
          {
            v33 = 0;
            if (!(_QWORD)__str)
            {
LABEL_87:
              if ((SHIBYTE(v133) & 0x80000000) == 0)
                goto LABEL_88;
              goto LABEL_46;
            }
LABEL_86:
            *((_QWORD *)&__str + 1) = v48;
            operator delete(v48);
            goto LABEL_87;
          }
          *(_OWORD *)&v123.__r_.__value_.__l.__data_ = *(_OWORD *)__str;
          v49 = rtc::string_to_number_internal::ParseSigned((void **)v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_, 10);
          if (v50 && v49 >= (uint64_t)0xFFFFFFFF80000000 && v49 < 0x80000000)
          {
            v33 = *a1;
            v51 = a1[1];
            if (*a1 != v51)
            {
              while (*((_DWORD *)v33 + 3) != (_DWORD)v49)
              {
                v33 = (cricket::Codec *)((char *)v33 + 216);
                if (v33 == v51)
                  goto LABEL_76;
              }
LABEL_85:
              v48 = (void *)__str;
              if (!(_QWORD)__str)
                goto LABEL_87;
              goto LABEL_86;
            }
LABEL_76:
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v52, v53, v54, v55, v56, v57, v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
          }
          else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v64, v65, v66, v67, v68, v69, v70, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
          }
          v33 = 0;
          goto LABEL_85;
        }
      }
      else if ((Param & 1) != 0)
      {
        goto LABEL_40;
      }
      if (v127 || (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      {
        v33 = 0;
        if ((SHIBYTE(v133) & 0x80000000) == 0)
          goto LABEL_88;
      }
      else
      {
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
        v33 = 0;
        if ((SHIBYTE(v133) & 0x80000000) == 0)
        {
LABEL_88:
          if (!v33)
            goto LABEL_167;
LABEL_89:
          v71 = v134;
          if (!v134)
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
              goto LABEL_164;
            v116 = v116 & 0xFFFFFFFF00000000 | 0x173A;
            rtc::webrtc_logging_impl::Log("\r\t\n\t", v77, v78, v79, v80, v81, v82, v83, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
            if (!v134)
            {
LABEL_166:
              if (v71)
              {
LABEL_167:
                cricket::UsedIds<cricket::Codec>::FindAndSetIdUsed(a3, (uint64_t)v126);
                v111 = *(cricket::Codec **)(a2 + 8);
                if ((unint64_t)v111 >= *(_QWORD *)(a2 + 16))
                {
                  v14 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)a2, (const cricket::Codec *)v126);
                }
                else
                {
                  if (!v111)
                    goto LABEL_180;
                  v14 = (cricket::Codec *)((char *)cricket::Codec::Codec(v111, (const cricket::Codec *)v126) + 216);
                }
                *(_QWORD *)(a2 + 8) = v14;
                goto LABEL_23;
              }
              goto LABEL_23;
            }
LABEL_165:
            cricket::Codec::~Codec((cricket::Codec *)&__p);
            goto LABEL_166;
          }
          v72 = snprintf((char *)&__str, 0x20uLL, "%d", HIDWORD(v132));
          if (v72 < 0)
            goto LABEL_181;
          v73 = v72;
          if (v72 > 0x16)
          {
            v84 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v72 | 7) != 0x17)
              v84 = v72 | 7;
            v85 = v84 + 1;
            v74 = (__int128 *)operator new(v84 + 1);
            v122.__r_.__value_.__l.__size_ = v73;
            v122.__r_.__value_.__r.__words[2] = v85 | 0x8000000000000000;
            v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
            v75 = (char *)v74 + v73;
            v76 = (__int128 *)((char *)v74 + v73) > &__str;
            if (v74 > &__str)
              goto LABEL_101;
          }
          else
          {
            *((_BYTE *)&v122.__r_.__value_.__s + 23) = v72;
            v74 = (__int128 *)&v122;
            v75 = (char *)&v122 + v73;
            v76 = (char *)&v122 + v73 > (char *)&__str;
            if (&v122 > (std::string *)&__str)
              goto LABEL_101;
          }
          if (v76)
            goto LABEL_180;
LABEL_101:
          if ((_DWORD)v73)
            memcpy(v74, &__str, v73);
          *v75 = 0;
          size = HIBYTE(v122.__r_.__value_.__r.__words[2]);
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v87 = 22;
          else
            v87 = (v122.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v122.__r_.__value_.__l.__size_;
          if (v87 == size)
          {
            std::string::__grow_by_and_replace(&v122, v87, 1uLL, v87, v87, 0, 1uLL, "/");
          }
          else
          {
            v88 = &v122;
            if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v88 = (std::string *)v122.__r_.__value_.__r.__words[0];
            v89 = (char *)v88 + size;
            if ((char *)v88 + size <= "/" && v89 + 1 > "/")
              goto LABEL_180;
            *v89 = 47;
            v90 = size + 1;
            if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
              v122.__r_.__value_.__l.__size_ = v90;
            else
              *((_BYTE *)&v122.__r_.__value_.__s + 23) = v90 & 0x7F;
            v88->__r_.__value_.__s.__data_[v90] = 0;
          }
          v123 = v122;
          memset(&v122, 0, sizeof(v122));
          if (!v134)
            goto LABEL_180;
          v91 = snprintf((char *)&__str, 0x20uLL, "%d", HIDWORD(v132));
          if (v91 < 0)
            goto LABEL_181;
          v92 = v91;
          if (v91 > 0x16)
          {
            v96 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v91 | 7) != 0x17)
              v96 = v91 | 7;
            v97 = v96 + 1;
            p_src = (void **)operator new(v96 + 1);
            v120 = v92;
            v121 = v97 | 0x8000000000000000;
            __src = p_src;
            v94 = (char *)p_src + v92;
            v95 = (char *)p_src + v92 > (char *)&__str;
            if (p_src > (void **)&__str)
              goto LABEL_129;
          }
          else
          {
            HIBYTE(v121) = v91;
            p_src = (void **)&__src;
            v94 = (char *)&__src + v92;
            v95 = (char *)&__src + v92 > (char *)&__str;
            if (&__src > (void ***)&__str)
              goto LABEL_129;
          }
          if (v95)
            goto LABEL_180;
LABEL_129:
          if ((_DWORD)v92)
            memcpy(p_src, &__str, v92);
          *v94 = 0;
          if (SHIBYTE(v121) < 0)
          {
            v100 = __src;
            v98 = v120;
            v99 = v120 == 0;
            if (!__src && v120)
              goto LABEL_180;
          }
          else
          {
            v98 = HIBYTE(v121);
            v99 = HIBYTE(v121) == 0;
            v100 = (void **)&__src;
          }
          if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v101 = 22;
          else
            v101 = (v123.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v102 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
          else
            v102 = v123.__r_.__value_.__l.__size_;
          if (v101 - v102 >= v98)
          {
            if (!v99)
            {
              if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v103 = &v123;
              else
                v103 = (std::string *)v123.__r_.__value_.__r.__words[0];
              v104 = (char *)v103 + v102;
              if ((char *)v103 + v102 <= (char *)v100 && &v104[v98] > (char *)v100)
                goto LABEL_180;
              memmove(v104, v100, v98);
              v105 = v102 + v98;
              if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
                v123.__r_.__value_.__l.__size_ = v102 + v98;
              else
                *((_BYTE *)&v123.__r_.__value_.__s + 23) = v105 & 0x7F;
              v103->__r_.__value_.__s.__data_[v105] = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(&v123, v101, v102 + v98 - v101, v102, v102, 0, v98, (const std::string::value_type *)v100);
          }
          v125[0] = v123.__r_.__value_.__l.__size_;
          v106 = v123.__r_.__value_.__r.__words[0];
          *(_QWORD *)((char *)v125 + 7) = *(std::string::size_type *)((char *)&v123.__r_.__value_.__r.__words[1] + 7);
          v107 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
          memset(&v123, 0, sizeof(v123));
          HIBYTE(v136) = 0;
          LOBYTE(__str) = 0;
          v108 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v128, &v124, (const void **)&__str);
          v109 = (char *)*v108;
          if (*v108)
          {
            if ((v109[79] & 0x80000000) == 0)
              goto LABEL_160;
          }
          else
          {
            v112 = (uint64_t **)v108;
            v109 = (char *)operator new(0x50uLL);
            *((_OWORD *)v109 + 2) = __str;
            v113 = v136;
            __str = 0uLL;
            v136 = 0;
            *((_QWORD *)v109 + 6) = v113;
            *((_QWORD *)v109 + 7) = 0;
            *((_QWORD *)v109 + 8) = 0;
            *((_QWORD *)v109 + 9) = 0;
            v114 = v124;
            *(_QWORD *)v109 = 0;
            *((_QWORD *)v109 + 1) = 0;
            *((_QWORD *)v109 + 2) = v114;
            *v112 = (uint64_t *)v109;
            v115 = (uint64_t *)v109;
            if (*v128)
            {
              v128 = (_QWORD *)*v128;
              v115 = *v112;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v129, v115);
            ++v130;
            if ((v109[79] & 0x80000000) == 0)
            {
LABEL_160:
              v110 = v125[0];
              *((_QWORD *)v109 + 7) = v106;
              *((_QWORD *)v109 + 8) = v110;
              *(_QWORD *)(v109 + 71) = *(_QWORD *)((char *)v125 + 7);
              v109[79] = v107;
              if (SHIBYTE(v136) < 0)
              {
                operator delete((void *)__str);
                if ((SHIBYTE(v121) & 0x80000000) == 0)
                {
LABEL_162:
                  if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_163;
                  goto LABEL_176;
                }
              }
              else if ((SHIBYTE(v121) & 0x80000000) == 0)
              {
                goto LABEL_162;
              }
              operator delete(__src);
              if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_163:
                if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_164;
                goto LABEL_177;
              }
LABEL_176:
              operator delete(v123.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_164:
                if (!v134)
                  goto LABEL_166;
                goto LABEL_165;
              }
LABEL_177:
              operator delete(v122.__r_.__value_.__l.__data_);
              if (!v134)
                goto LABEL_166;
              goto LABEL_165;
            }
          }
          operator delete(*((void **)v109 + 7));
          goto LABEL_160;
        }
      }
LABEL_46:
      operator delete(__p);
      if (!v33)
        goto LABEL_167;
      goto LABEL_89;
    }
  }
}

void cricket::UsedPayloadTypes::~UsedPayloadTypes(cricket::UsedPayloadTypes *this)
{
  *(_QWORD *)this = &off_24C0B6D10;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
}

{
  *(_QWORD *)this = &off_24C0B6D10;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::`anonymous namespace'::FindMatchingCodec(cricket::Codec *a1, cricket::Codec **a2, uint64_t **a3, cricket::Codec *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v7;
  BOOL v8;
  int v9;
  _BOOL4 v11;
  unsigned int Param;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  uint64_t **v24;
  const void ***v25;
  size_t v26;
  cricket::Codec *v27;
  cricket::Codec *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  size_t v32;
  size_t v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  char v38;
  uint64_t *v39;
  const void ***v40;
  size_t v41;
  _QWORD *v42;
  size_t v43;
  size_t v44;
  int v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  const void **v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  void *v57;
  BOOL v58;
  uint64_t v59;
  size_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  _BYTE *v68;
  int64_t v69;
  char v70;
  BOOL v71;
  int v73;
  int64_t v74;
  char v75;
  BOOL v76;
  cricket::Codec *v78;
  cricket::Codec *v79;
  uint64_t *v80;
  uint64_t *v81;
  char v82;
  cricket::Codec *v83;
  unint64_t v84;
  void *__s2;
  uint64_t v86;
  unint64_t v87;
  _BOOL4 v89;
  int v92;
  int v93;
  void *__p;
  _BYTE *v95;
  char v96;
  const void **v97;
  size_t v98;
  char v99;
  _QWORD v100[2];

  v5 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    v92 = (_DWORD)a4 + 168;
    v7 = (uint64_t **)((char *)a4 + 176);
    v8 = &v97 <= (const void ***)"apt" && (char *)&v97 + 3 > "apt";
    v9 = v8;
    v93 = v9;
    v11 = &__p <= (void **)"apt" && (char *)&__p + 3 > "apt";
    v89 = v11;
    do
    {
      if (!cricket::Codec::Matches((cricket::Codec *)v5, a4))
        goto LABEL_16;
      if (cricket::Codec::GetResiliencyType((uint64_t)a4) != 4)
      {
        if (cricket::Codec::GetResiliencyType((uint64_t)a4) != 1)
          goto LABEL_156;
        v99 = 0;
        LOBYTE(v97) = 0;
        v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(v92, (const void **)&v97, *v7, (uint64_t *)v7);
        v23 = v99;
        if (v7 != (uint64_t **)v22)
        {
          v24 = (uint64_t **)v22;
          if (v99 < 0)
          {
            v26 = v98;
            if ((v98 & 0x8000000000000000) != 0 || (v25 = (const void ***)v97, v98) && !v97)
            {
LABEL_158:
              __break(1u);
              return;
            }
          }
          else
          {
            v25 = &v97;
            v26 = v99;
          }
          v31 = v24 + 4;
          if (*((char *)v24 + 55) < 0)
          {
            v32 = (size_t)v24[5];
            if ((v32 & 0x8000000000000000) != 0)
              goto LABEL_158;
            v31 = (_QWORD *)*v31;
            if (v32)
            {
              if (!v31)
                goto LABEL_158;
            }
          }
          else
          {
            v32 = *((unsigned __int8 *)v24 + 55);
          }
          if (v32 >= v26)
            v33 = v26;
          else
            v33 = v32;
          v34 = memcmp(v25, v31, v33);
          if (v34)
          {
            if (v34 < 0)
              goto LABEL_54;
LABEL_55:
            if (v23 < 0)
              operator delete(v97);
            v36 = v5 + 22;
            v35 = (uint64_t *)v5[22];
            v99 = 0;
            LOBYTE(v97) = 0;
            v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)v5 + 168, (const void **)&v97, v35, v5 + 22);
            v38 = v99;
            if (v5 + 22 != v37)
            {
              v39 = v37;
              if (v99 < 0)
              {
                v41 = v98;
                if ((v98 & 0x8000000000000000) != 0)
                  goto LABEL_158;
                v40 = (const void ***)v97;
                if (v98)
                {
                  if (!v97)
                    goto LABEL_158;
                }
              }
              else
              {
                v40 = &v97;
                v41 = v99;
              }
              v42 = v39 + 4;
              if (*((char *)v39 + 55) < 0)
              {
                v43 = v39[5];
                if ((v43 & 0x8000000000000000) != 0)
                  goto LABEL_158;
                v42 = (_QWORD *)*v42;
                if (v43)
                {
                  if (!v42)
                    goto LABEL_158;
                }
              }
              else
              {
                v43 = *((unsigned __int8 *)v39 + 55);
              }
              if (v43 >= v41)
                v44 = v41;
              else
                v44 = v43;
              v45 = memcmp(v40, v42, v44);
              if (v45)
              {
                if (v45 < 0)
                  goto LABEL_75;
LABEL_76:
                if (v38 < 0)
                  operator delete(v97);
                if (v24 == v7 || v39 == v36)
                {
                  if ((v24 != v7) == (v39 != v36))
                    goto LABEL_156;
                  goto LABEL_16;
                }
                v46 = v24 + 7;
                if (*((char *)v24 + 79) < 0)
                {
                  v47 = (unint64_t)v24[8];
                  if ((v47 & 0x8000000000000000) != 0)
                    goto LABEL_158;
                  v46 = (_QWORD *)*v46;
                  if (v47)
                  {
                    if (!v46)
                      goto LABEL_158;
                  }
                }
                else
                {
                  v47 = *((unsigned __int8 *)v24 + 79);
                }
                rtc::split((size_t)v46, v47, 0x2Fu, (char **)&v97);
                v48 = v39 + 7;
                if (*((char *)v39 + 79) < 0)
                {
                  v49 = v39[8];
                  if ((v49 & 0x8000000000000000) != 0)
                    goto LABEL_158;
                  v48 = (_QWORD *)*v48;
                  if (v49)
                  {
                    if (!v48)
                      goto LABEL_158;
                  }
                }
                else
                {
                  v49 = *((unsigned __int8 *)v39 + 79);
                }
                rtc::split((size_t)v48, v49, 0x2Fu, (char **)&__p);
                v50 = v97;
                v51 = v98 - (_QWORD)v97;
                if (v98 == (_QWORD)v97)
                  goto LABEL_138;
                v52 = __p;
                v53 = v95 - (_BYTE *)__p;
                if (v95 == __p)
                  goto LABEL_138;
                if ((unint64_t)v51 >= 0x11)
                {
                  v54 = v51 >> 4;
                  v55 = (size_t)v97[1];
                  v8 = (unint64_t)(v51 >> 4) > 2;
                  v56 = 2;
                  if (v8)
                    v56 = v54;
                  v86 = v56;
                  if (v97[3] == (const void *)v55 && (v57 = (void *)*v97, !memcmp(v97[2], *v97, v55)))
                  {
                    v84 = v54;
                    __s2 = v57;
                    v63 = v50 + 5;
                    v64 = 2;
                    do
                    {
                      v65 = v64;
                      if (v86 == v64)
                        break;
                      if (*v63 != v55)
                        break;
                      v66 = memcmp((const void *)*(v63 - 1), __s2, v55);
                      v64 = v65 + 1;
                      v63 += 2;
                    }
                    while (!v66);
                    v58 = v65 < v84;
                    if ((unint64_t)v53 < 0x11)
                      goto LABEL_119;
                  }
                  else
                  {
                    v58 = 1;
                    if ((unint64_t)v53 < 0x11)
                      goto LABEL_119;
                  }
LABEL_107:
                  v59 = v53 >> 4;
                  v60 = v52[1];
                  if ((unint64_t)(v53 >> 4) <= 2)
                    v59 = 2;
                  v61 = v52 + 3;
                  v62 = v59 - 1;
                  while (*v61 == v60 && !memcmp((const void *)*(v61 - 1), (const void *)*v52, v60))
                  {
                    v61 += 2;
                    if (!--v62)
                      goto LABEL_119;
                  }
                  goto LABEL_120;
                }
                v58 = 0;
                if ((unint64_t)v53 >= 0x11)
                  goto LABEL_107;
LABEL_119:
                if (v58)
                  goto LABEL_120;
                v69 = rtc::string_to_number_internal::ParseSigned((void **)*v50, (size_t)v50[1], 10);
                v71 = !v70 || v69 < (uint64_t)0xFFFFFFFF80000000;
                if (v71 || v69 > 0x7FFFFFFF)
                  goto LABEL_138;
                if (v95 == __p)
                  goto LABEL_158;
                v73 = v69;
                v74 = rtc::string_to_number_internal::ParseSigned(*(void ***)__p, *((_QWORD *)__p + 1), 10);
                v76 = !v75 || v74 < (uint64_t)0xFFFFFFFF80000000;
                if (v76 || v74 > 0x7FFFFFFF)
                  goto LABEL_138;
                v78 = *a2;
                v79 = a2[1];
                if (*a2 == v79)
                {
LABEL_147:
                  v78 = 0;
                }
                else
                {
                  while (*((_DWORD *)v78 + 3) != v73)
                  {
                    v78 = (cricket::Codec *)((char *)v78 + 216);
                    if (v78 == v79)
                      goto LABEL_147;
                  }
                }
                v80 = *a3;
                v81 = a3[1];
                if (*a3 == v81)
                  goto LABEL_120;
                while (*((_DWORD *)v80 + 3) != (_DWORD)v74)
                {
                  v80 += 27;
                  if (v80 == v81)
                    goto LABEL_120;
                }
                if (!v78 || (cricket::Codec::Matches(v78, (const cricket::Codec *)v80) & 1) == 0)
                {
LABEL_120:
                  v67 = 3;
                  v68 = __p;
                  if (__p)
                    goto LABEL_139;
                }
                else
                {
LABEL_138:
                  v67 = 0;
                  v68 = __p;
                  if (__p)
                  {
LABEL_139:
                    v95 = v68;
                    operator delete(v68);
                  }
                }
                if (v97)
                {
                  v98 = (size_t)v97;
                  operator delete(v97);
                }
                if (v67 != 3)
                  goto LABEL_156;
                goto LABEL_16;
              }
              if (v41 >= v43)
                goto LABEL_76;
            }
LABEL_75:
            v39 = v5 + 22;
            goto LABEL_76;
          }
          if (v26 >= v32)
            goto LABEL_55;
        }
LABEL_54:
        v24 = v7;
        goto LABEL_55;
      }
      v100[0] = 0;
      v99 = 3;
      if (v93)
        goto LABEL_158;
      LOWORD(v97) = *(_WORD *)"apt";
      WORD1(v97) = cricket::kCodecParamAssociatedPayloadType[2];
      if (cricket::Codec::GetParam((uint64_t)a4, (const void **)&v97, (_DWORD *)v100 + 1))
      {
        v96 = 3;
        if (v89)
          goto LABEL_158;
        LOWORD(__p) = *(_WORD *)"apt";
        WORD1(__p) = cricket::kCodecParamAssociatedPayloadType[2];
        Param = cricket::Codec::GetParam((uint64_t)v5, (const void **)&__p, v100);
        v13 = Param;
        if (v96 < 0)
        {
          operator delete(__p);
          v14 = v13 ^ 1;
          if (v99 < 0)
          {
LABEL_32:
            operator delete(v97);
            if (v14)
            {
LABEL_25:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
              {
                v87 = v87 & 0xFFFFFFFF00000000 | 0xF5A;
                rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
              }
              goto LABEL_16;
            }
            goto LABEL_33;
          }
        }
        else
        {
          v14 = Param ^ 1;
          if (v99 < 0)
            goto LABEL_32;
        }
      }
      else
      {
        v14 = 1;
        if (v99 < 0)
          goto LABEL_32;
      }
      if (v14)
        goto LABEL_25;
LABEL_33:
      v27 = *a2;
      v28 = a2[1];
      if (*a2 == v28)
      {
LABEL_36:
        v27 = 0;
      }
      else
      {
        while (*((_DWORD *)v27 + 3) != HIDWORD(v100[0]))
        {
          v27 = (cricket::Codec *)((char *)v27 + 216);
          if (v27 == v28)
            goto LABEL_36;
        }
      }
      v29 = *a3;
      v30 = a3[1];
      if (*a3 != v30)
      {
        while (*((_DWORD *)v29 + 3) != LODWORD(v100[0]))
        {
          v29 += 27;
          if (v29 == v30)
            goto LABEL_16;
        }
        if (v27 && (cricket::Codec::Matches(v27, (const cricket::Codec *)v29) & 1) != 0)
        {
LABEL_156:
          v83 = cricket::Codec::Codec(a1, (const cricket::Codec *)v5);
          v82 = 1;
          goto LABEL_157;
        }
      }
LABEL_16:
      v5 += 27;
    }
    while (v5 != v4);
  }
  v82 = 0;
  v83 = a1;
  *(_BYTE *)a1 = 0;
LABEL_157:
  *((_BYTE *)v83 + 216) = v82;
}

void cricket::`anonymous namespace'::MergeRtpHdrExts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t i;
  int v8;
  size_t v9;
  std::string *p_s1;
  size_t size;
  int v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  const std::string::value_type *v24;
  uint64_t v25;
  __int128 v27;
  unint64_t v28;
  char *v29;
  char v30;
  char *v31;
  uint64_t v32;
  int v34;
  __int128 v35;
  unint64_t v36;
  __int128 v37;
  int v38;
  int v39;
  std::string __s1;
  int v45;
  unsigned __int8 v46;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 32)
    {
      while (1)
      {
        if (*(char *)(i + 23) < 0)
          std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
        else
          __s1 = *(std::string *)i;
        v45 = *(_DWORD *)(i + 24);
        v46 = *(_BYTE *)(i + 28);
        v8 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
        v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        {
          size = __s1.__r_.__value_.__l.__size_;
          if ((__s1.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
            || (p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0], __s1.__r_.__value_.__l.__size_)
            && !__s1.__r_.__value_.__r.__words[0])
          {
LABEL_98:
            __break(1u);
            return;
          }
        }
        else
        {
          p_s1 = &__s1;
          size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        v12 = v46;
        v13 = *(char **)a3;
        v14 = *(_QWORD *)(a3 + 8);
LABEL_15:
        if (v13 != (char *)v14)
          break;
        if (v12)
        {
          if ((v8 & 0x80000000) == 0)
          {
            v18 = &__s1;
            goto LABEL_36;
          }
          v9 = __s1.__r_.__value_.__l.__size_;
          if ((__s1.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_98;
          v18 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          if (__s1.__r_.__value_.__l.__size_)
          {
            v20 = a5;
            if (!__s1.__r_.__value_.__r.__words[0])
              goto LABEL_98;
          }
          else
          {
LABEL_36:
            v20 = a5;
          }
          v22 = *(char **)v20;
          v21 = *(char **)(v20 + 8);
          while (v22 != v21)
          {
            v23 = v22[23];
            v24 = v22;
            v25 = v23;
            if (v23 < 0)
            {
              v25 = *((_QWORD *)v22 + 1);
              if (v25 < 0)
                goto LABEL_98;
              v24 = *(const std::string::value_type **)v22;
              if (v25 && v24 == 0)
                goto LABEL_98;
            }
            if (v9 == v25 && !memcmp(v18, v24, v9) && v22[28])
            {
              if (v14 >= *(_QWORD *)(a3 + 16))
                goto LABEL_95;
              if (!v14)
                goto LABEL_98;
              if (v23 < 0)
                goto LABEL_76;
              goto LABEL_52;
            }
            v22 += 32;
          }
          cricket::UsedIds<webrtc::RtpExtension>::FindAndSetIdUsed(a6, (uint64_t)&__s1);
          v28 = *(_QWORD *)(v20 + 8);
          if (v28 >= *(_QWORD *)(v20 + 16))
            goto LABEL_83;
          if (v28)
            goto LABEL_81;
          goto LABEL_98;
        }
        if (v8 < 0)
        {
          v9 = __s1.__r_.__value_.__l.__size_;
          if ((__s1.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_98;
          v19 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          if (__s1.__r_.__value_.__l.__size_)
          {
            v20 = a4;
            if (!__s1.__r_.__value_.__r.__words[0])
              goto LABEL_98;
            goto LABEL_61;
          }
        }
        else
        {
          v19 = &__s1;
        }
        v20 = a4;
LABEL_61:
        v22 = *(char **)v20;
        v29 = *(char **)(v20 + 8);
        while (v22 != v29)
        {
          v30 = v22[23];
          v31 = v22;
          v32 = v30;
          if (v30 < 0)
          {
            v32 = *((_QWORD *)v22 + 1);
            if (v32 < 0)
              goto LABEL_98;
            v31 = *(char **)v22;
            if (v32 && v31 == 0)
              goto LABEL_98;
          }
          if (v9 == v32 && !memcmp(v19, v31, v9) && !v22[28])
          {
            if (v14 >= *(_QWORD *)(a3 + 16))
            {
LABEL_95:
              *(_QWORD *)(a3 + 8) = std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>((char **)a3, (uint64_t)v22);
              if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
                goto LABEL_4;
            }
            else
            {
              if (!v14)
                goto LABEL_98;
              if (v30 < 0)
              {
LABEL_76:
                std::string::__init_copy_ctor_external((std::string *)v14, *(const std::string::value_type **)v22, *((_QWORD *)v22 + 1));
              }
              else
              {
LABEL_52:
                v27 = *(_OWORD *)v22;
                *(_QWORD *)(v14 + 16) = *((_QWORD *)v22 + 2);
                *(_OWORD *)v14 = v27;
              }
              v34 = *((_DWORD *)v22 + 6);
              *(_BYTE *)(v14 + 28) = v22[28];
              *(_DWORD *)(v14 + 24) = v34;
              *(_QWORD *)(a3 + 8) = v14 + 32;
              if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
                goto LABEL_4;
            }
            goto LABEL_93;
          }
          v22 += 32;
        }
        cricket::UsedIds<webrtc::RtpExtension>::FindAndSetIdUsed(a6, (uint64_t)&__s1);
        v28 = *(_QWORD *)(v20 + 8);
        if (v28 >= *(_QWORD *)(v20 + 16))
        {
LABEL_83:
          *(_QWORD *)(v20 + 8) = std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>((char **)v20, (uint64_t)&__s1);
          v36 = *(_QWORD *)(a3 + 8);
          if (v36 >= *(_QWORD *)(a3 + 16))
            goto LABEL_92;
        }
        else
        {
          if (!v28)
            goto LABEL_98;
LABEL_81:
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v28, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
          }
          else
          {
            v35 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
            *(_QWORD *)(v28 + 16) = *((_QWORD *)&__s1.__r_.__value_.__l + 2);
            *(_OWORD *)v28 = v35;
          }
          v39 = v45;
          *(_BYTE *)(v28 + 28) = v46;
          *(_DWORD *)(v28 + 24) = v39;
          *(_QWORD *)(v20 + 8) = v28 + 32;
          v36 = *(_QWORD *)(a3 + 8);
          if (v36 >= *(_QWORD *)(a3 + 16))
          {
LABEL_92:
            *(_QWORD *)(a3 + 8) = std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>((char **)a3, (uint64_t)&__s1);
            if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_4;
            goto LABEL_93;
          }
        }
        if (!v36)
          goto LABEL_98;
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v36, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
        }
        else
        {
          v37 = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
          *(_QWORD *)(v36 + 16) = *((_QWORD *)&__s1.__r_.__value_.__l + 2);
          *(_OWORD *)v36 = v37;
        }
        v38 = v45;
        *(_BYTE *)(v36 + 28) = v46;
        *(_DWORD *)(v36 + 24) = v38;
        *(_QWORD *)(a3 + 8) = v36 + 32;
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_4;
LABEL_93:
        operator delete(__s1.__r_.__value_.__l.__data_);
        i += 32;
        if (i == a2)
          return;
      }
      if (v13[23] < 0)
      {
        v15 = *((_QWORD *)v13 + 1);
        if (v15 < 0)
          goto LABEL_98;
        v16 = *(char **)v13;
        if (v15 && v16 == 0)
          goto LABEL_98;
      }
      else
      {
        v15 = v13[23];
        v16 = v13;
      }
      if (size != v15 || memcmp(p_s1, v16, size) || v13[28] != v12)
      {
        v13 += 32;
        goto LABEL_15;
      }
      if ((v8 & 0x80) != 0)
        goto LABEL_93;
LABEL_4:
      ;
    }
  }
}

void cricket::`anonymous namespace'::AddEncryptedVersionsOfHdrExts(std::string **a1, std::string *a2, uint64_t a3)
{
  int64_t v3;
  size_t v4;
  std::string::__raw *v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  int64_t v11;
  std::string *v12;
  const std::string::value_type *v13;
  std::string::size_type size;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  unint64_t v24;
  std::string::__raw *v25;
  const std::string::value_type *v27;
  std::string::size_type v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  std::string *v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  std::string *v52;
  uint64_t v53;
  uint64_t v54;
  std::string *v55;
  std::string::__raw *v56;
  char *v57;
  int v58;
  std::string *v59;
  const std::string::value_type **v60;
  __int128 v61;
  std::string **v62;
  std::string *v63;
  char *v64;
  char *v65;
  int v66;
  std::string *v67;
  char *v68;
  __int128 v69;
  std::string *v70;
  uint64_t v71;
  char *v72;
  std::string *v73;
  char *v74;
  char *v75;
  int v76;
  std::string *v77;
  char *v78;
  __int128 v79;
  unint64_t v80;
  std::string *v81;
  const std::string::value_type *v82;
  size_t v83;
  int v84;
  char *v85;
  char *v86;
  char **v87;
  std::string *v88;
  char v89;
  __int128 v90;
  uint64_t v91;
  const std::string::value_type *v92;
  size_t v93;
  int v94;
  char *v95;
  __int128 *v96;
  char v97;
  __int128 v98;
  std::string *v99;
  std::string *v100;
  void *v101;
  std::string __p;
  int data;
  char v106;
  void *v107;
  std::string *v108;
  unint64_t v109;

  v7 = (uint64_t)a1;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v8 = *a1;
  v9 = a1[1];
  if (*a1 == v9)
    goto LABEL_176;
  v11 = (int64_t)&data;
  while (2)
  {
    if (v8[1].__r_.__value_.__s.__data_[4])
      goto LABEL_4;
    v12 = (std::string *)HIBYTE(v8->__r_.__value_.__r.__words[2]);
    v13 = (const std::string::value_type *)v8;
    size = (std::string::size_type)v12;
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
    {
      size = v8->__r_.__value_.__l.__size_;
      if ((size & 0x8000000000000000) != 0)
        goto LABEL_144;
      v13 = (const std::string::value_type *)v8->__r_.__value_.__r.__words[0];
      if (size)
      {
        if (!v13)
          goto LABEL_144;
      }
    }
    if (size == 34)
    {
      v15 = *(_QWORD *)v13;
      v16 = *((_QWORD *)v13 + 1);
      v17 = *((_QWORD *)v13 + 2);
      v18 = *((_QWORD *)v13 + 3);
      v19 = *((unsigned __int16 *)v13 + 16);
      v20 = v15 == *(_QWORD *)"urn:ietf:params:rtp-hdrext:encrypt" && v16 == *(_QWORD *)":params:rtp-hdrext:encrypt";
      v21 = v20 && v17 == *(_QWORD *)"rtp-hdrext:encrypt";
      v22 = v21 && v18 == *(_QWORD *)"xt:encrypt";
      if (v22 && v19 == *(unsigned __int16 *)"pt")
        goto LABEL_4;
    }
    v4 = (size_t)v8;
    v3 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    if ((v12 & 0x80) != 0)
    {
      v3 = v8->__r_.__value_.__l.__size_;
      if (v3 < 0)
        goto LABEL_144;
      v4 = v8->__r_.__value_.__r.__words[0];
      if (v3)
      {
        if (!v4)
          goto LABEL_144;
      }
    }
    v5 = *(std::string::__raw **)v7;
    v6 = *(_QWORD *)(v7 + 8);
    while (v5 != (std::string::__raw *)v6)
    {
      if (SHIBYTE(v5->__words[2]) < 0)
      {
        v24 = v5->__words[1];
        if ((v24 & 0x8000000000000000) != 0)
          goto LABEL_144;
        v25 = (std::string::__raw *)v5->__words[0];
        if (v24 && v25 == 0)
          goto LABEL_144;
      }
      else
      {
        v24 = HIBYTE(v5->__words[2]);
        v25 = v5;
      }
      if (v3 == v24 && !memcmp((const void *)v4, v25, v3) && BYTE4(v5[1].__words[0]))
        goto LABEL_4;
      v5 = (std::string::__raw *)((char *)v5 + 32);
    }
    v5 = (std::string::__raw *)v8;
    v4 = (size_t)v12;
    if ((v12 & 0x80) != 0)
    {
      v4 = v8->__r_.__value_.__l.__size_;
      if ((v4 & 0x8000000000000000) != 0)
        goto LABEL_144;
      v5 = (std::string::__raw *)v8->__r_.__value_.__r.__words[0];
      if (v4)
      {
        if (!v5)
          goto LABEL_144;
      }
    }
    v3 = a2->__r_.__value_.__r.__words[0];
    v6 = a2->__r_.__value_.__l.__size_;
    while (1)
    {
      if (v3 == v6)
      {
        if ((v12 & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(&__p, v8->__r_.__value_.__l.__data_, v8->__r_.__value_.__l.__size_);
        }
        else
        {
          v31 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        }
        data = (int)v8[1].__r_.__value_.__l.__data_;
        v106 = 1;
        cricket::UsedIds<webrtc::RtpExtension>::FindAndSetIdUsed((uint64_t *)a3, (uint64_t)&__p);
        v3 = a2->__r_.__value_.__l.__size_;
        if (v3 >= a2->__r_.__value_.__r.__words[2])
        {
          v7 = (uint64_t)a1;
          a2->__r_.__value_.__l.__size_ = (std::string::size_type)std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>(&a2->__r_.__value_.__l.__data_, (uint64_t)&__p);
          v3 = (int64_t)v108;
          if ((unint64_t)v108 >= v109)
          {
LABEL_75:
            v108 = (std::string *)std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>((char **)&v107, (uint64_t)&__p);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_4;
            goto LABEL_3;
          }
        }
        else
        {
          v7 = (uint64_t)a1;
          if (!v3)
            goto LABEL_144;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)a2->__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v3 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v3 = v32;
          }
          v34 = data;
          *(_BYTE *)(v3 + 28) = v106;
          *(_DWORD *)(v3 + 24) = v34;
          a2->__r_.__value_.__l.__size_ = v3 + 32;
          v3 = (int64_t)v108;
          if ((unint64_t)v108 >= v109)
            goto LABEL_75;
        }
        if (!v3)
          goto LABEL_144;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v3, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v3 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v3 = v33;
        }
        v35 = data;
        *(_BYTE *)(v3 + 28) = v106;
        *(_DWORD *)(v3 + 24) = v35;
        v108 = (std::string *)(v3 + 32);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_4;
LABEL_3:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_4;
      }
      v7 = *(unsigned __int8 *)(v3 + 23);
      v27 = (const std::string::value_type *)v3;
      v28 = v7;
      if (*(char *)(v3 + 23) < 0)
      {
        v28 = *(_QWORD *)(v3 + 8);
        if ((v28 & 0x8000000000000000) != 0)
          goto LABEL_144;
        v27 = *(const std::string::value_type **)v3;
        if (v28 && v27 == 0)
          goto LABEL_144;
      }
      if (v4 == v28 && !memcmp(v5, v27, v4) && *(_BYTE *)(v3 + 28))
        break;
      v3 += 32;
    }
    v4 = (size_t)v108;
    if ((unint64_t)v108 >= v109)
    {
      v108 = (std::string *)std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>((char **)&v107, v3);
      goto LABEL_83;
    }
    if (!v108)
      goto LABEL_144;
    if ((v7 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v108, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      v30 = *(_OWORD *)v3;
      v108->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
      *(_OWORD *)v4 = v30;
    }
    v36 = *(_DWORD *)(v3 + 24);
    *(_BYTE *)(v4 + 28) = *(_BYTE *)(v3 + 28);
    *(_DWORD *)(v4 + 24) = v36;
    v108 = (std::string *)(v4 + 32);
LABEL_83:
    v7 = (uint64_t)a1;
LABEL_4:
    v8 = (std::string *)((char *)v8 + 32);
    if (v8 != v9)
      continue;
    break;
  }
  v4 = (size_t)v107;
  a2 = v108;
  v5 = *(std::string::__raw **)v7;
  v37 = *(_QWORD *)(v7 + 8);
  if ((char *)v108 - (_BYTE *)v107 >= 1)
  {
    v11 = ((char *)v108 - (_BYTE *)v107) >> 5;
    v38 = (uint64_t)(v37 - (_QWORD)v5) >> 5;
    v3 = (int64_t)v5 + ((v37 - (_QWORD)v5) & 0xFFFFFFFFFFFFFFE0);
    v39 = *(_QWORD *)(v7 + 16);
    if (v11 <= (uint64_t)(v39 - v37) >> 5)
    {
      v6 = v37 - v3;
      v43 = (uint64_t)(v37 - v3) >> 5;
      if (v43 >= v11)
      {
        v12 = (std::string *)((char *)v107 + 32 * v11);
        a2 = *(std::string **)(v7 + 8);
      }
      else
      {
        v12 = (std::string *)((char *)v107 + 32 * v43);
        if (v12 != v108)
        {
          v7 = 0;
          while (1)
          {
            v46 = (std::string *)(v37 + v7);
            if (!(v37 + v7))
              goto LABEL_144;
            v47 = (char *)v12 + v7;
            if (*((char *)&v12->__r_.__value_.__r.__words[2] + v7 + 7) < 0)
            {
              std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)((char *)&v12->__r_.__value_.__l.__data_ + v7), *(std::string::size_type *)((char *)&v12->__r_.__value_.__l.__size_ + v7));
            }
            else
            {
              v48 = *(_OWORD *)v47;
              v46->__r_.__value_.__r.__words[2] = *((_QWORD *)v47 + 2);
              *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v48;
            }
            v44 = v37 + v7;
            v45 = *(_DWORD *)((char *)&v12[1].__r_.__value_.__l.__data_ + v7);
            *(_BYTE *)(v44 + 28) = v12[1].__r_.__value_.__s.__data_[v7 + 4];
            *(_DWORD *)(v44 + 24) = v45;
            v7 += 32;
            if ((std::string *)((char *)v12 + v7) == a2)
            {
              a2 = (std::string *)(v37 + v7);
              v7 = (uint64_t)a1;
              a1[1] = a2;
              if (v6 >= 1)
                goto LABEL_137;
              goto LABEL_176;
            }
          }
        }
        a2 = *(std::string **)(v7 + 8);
        *(_QWORD *)(v7 + 8) = v37;
        if (v6 < 1)
          goto LABEL_176;
      }
LABEL_137:
      v71 = 32 * v11;
      v6 = v3 + 32 * v11;
      v11 = (int64_t)a2 - v6;
      v72 = (char *)a2 - v71;
      v73 = a2;
      if ((unint64_t)v72 >= v37)
      {
LABEL_146:
        *(_QWORD *)(v7 + 8) = v73;
        if (a2 != (std::string *)v6)
        {
          v80 = 0;
          v81 = (std::string *)((char *)v5 + 32 * v38 + v11);
          do
          {
            v85 = (char *)a2 + v80;
            v86 = (char *)v81 + v80;
            v87 = (char **)((char *)&v81[-1] + v80 - 8);
            if (v81 != a2)
            {
              v88 = (std::string *)(v85 - 32);
              v89 = *(v86 - 9);
              if (*(v85 - 9) < 0)
              {
                if (v89 >= 0)
                  v82 = (char *)&v81[-1] + v80 - 8;
                else
                  v82 = *v87;
                if (v89 >= 0)
                  v83 = *(v86 - 9);
                else
                  v83 = v81[-1].__r_.__value_.__r.__words[v80 / 8];
                std::string::__assign_no_alias<false>(v88, v82, v83);
              }
              else if (*(v86 - 9) < 0)
              {
                std::string::__assign_no_alias<true>(v88, *v87, v81[-1].__r_.__value_.__r.__words[v80 / 8]);
              }
              else
              {
                v90 = *(_OWORD *)v87;
                *((_QWORD *)v85 - 2) = *(_QWORD *)((char *)&v81->__r_.__value_.__l + v80 - 16);
                *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v90;
              }
            }
            v84 = *((_DWORD *)v86 - 2);
            *(v85 - 4) = *(v86 - 4);
            *((_DWORD *)v85 - 2) = v84;
            v80 -= 32;
          }
          while (v87 != (char **)v3);
        }
        if (v12 != (std::string *)v4)
        {
          v91 = 0;
          do
          {
            v95 = (char *)(v3 + v91);
            v96 = (__int128 *)(v4 + v91);
            if (v4 != v3)
            {
              v97 = *((_BYTE *)v96 + 23);
              if (v95[23] < 0)
              {
                if (v97 >= 0)
                  v92 = (const std::string::value_type *)(v4 + v91);
                else
                  v92 = *(const std::string::value_type **)(v4 + v91);
                if (v97 >= 0)
                  v93 = *((unsigned __int8 *)v96 + 23);
                else
                  v93 = *(_QWORD *)(v4 + v91 + 8);
                std::string::__assign_no_alias<false>((std::string *)(v3 + v91), v92, v93);
              }
              else if ((*((_BYTE *)v96 + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>((_QWORD *)(v3 + v91), *(char **)(v4 + v91), *(_QWORD *)(v4 + v91 + 8));
              }
              else
              {
                v98 = *v96;
                *((_QWORD *)v95 + 2) = *((_QWORD *)v96 + 2);
                *(_OWORD *)v95 = v98;
              }
            }
            v94 = *((_DWORD *)v96 + 6);
            v95[28] = *((_BYTE *)v96 + 28);
            *((_DWORD *)v95 + 6) = v94;
            v91 += 32;
          }
          while ((std::string *)(v4 + v91) != v12);
        }
        goto LABEL_176;
      }
      v7 = 0;
      a3 = (uint64_t)(v37 - (_QWORD)v5) >> 5;
      v74 = (char *)v5 + 32 * v38 + v11;
      while (1)
      {
        v77 = (std::string *)((char *)a2 + v7);
        if (!(std::string *)((char *)a2 + v7))
          break;
        v78 = &v74[v7];
        if (v74[v7 + 23] < 0)
        {
          std::string::__init_copy_ctor_external(v77, *(const std::string::value_type **)&v74[v7], *(_QWORD *)&v74[v7 + 8]);
        }
        else
        {
          v79 = *(_OWORD *)v78;
          v77->__r_.__value_.__r.__words[2] = *((_QWORD *)v78 + 2);
          *(_OWORD *)&v77->__r_.__value_.__l.__data_ = v79;
        }
        v75 = (char *)a2 + v7;
        v76 = *(_DWORD *)&v74[v7 + 24];
        v75[28] = v74[v7 + 28];
        *((_DWORD *)v75 + 6) = v76;
        v7 += 32;
        if ((unint64_t)&v74[v7] >= v37)
          goto LABEL_145;
      }
    }
    else
    {
      v40 = v38 + v11;
      if ((unint64_t)(v38 + v11) >> 59)
        abort();
      v41 = v39 - (_QWORD)v5;
      if (v41 >> 4 > v40)
        v40 = v41 >> 4;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFE0)
        v42 = 0x7FFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
      {
        if (v42 >> 59)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v12 = (std::string *)operator new(32 * v42);
      }
      else
      {
        v12 = 0;
      }
      v6 = (uint64_t)v12 + 32 * v38;
      a3 = (uint64_t)v12 + 32 * v42;
      v7 = 32 * v11;
      v49 = v6 + 32 * v11;
      a2 = (std::string *)v6;
      while (a2)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
        }
        else
        {
          v50 = *(_OWORD *)v4;
          a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v50;
        }
        v51 = *(_DWORD *)(v4 + 24);
        a2[1].__r_.__value_.__s.__data_[4] = *(_BYTE *)(v4 + 28);
        LODWORD(a2[1].__r_.__value_.__l.__data_) = v51;
        a2 = (std::string *)((char *)a2 + 32);
        v4 += 32;
        v7 -= 32;
        if (!v7)
        {
          v52 = *a1;
          v53 = 4 * v38;
          if (*a1 != (std::string *)v3)
          {
            v54 = v38;
            v55 = v12;
            v56 = v5;
            do
            {
              v59 = (std::string *)((char *)v55 + v53 * 8 - 32);
              v60 = (const std::string::value_type **)((char *)&v56[-1] + v53 * 8 - 8);
              if (*((char *)&v56->__words[v53 - 1] - 1) < 0)
              {
                std::string::__init_copy_ctor_external(v59, *v60, v56[-1].__words[v53]);
              }
              else
              {
                v61 = *(_OWORD *)v60;
                v55->__r_.__value_.__r.__words[v53 - 2] = v56->__words[v53 - 2];
                *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v61;
              }
              v57 = (char *)v55 + v53 * 8;
              v58 = v56->__words[v53 - 1];
              *(v57 - 4) = BYTE4(v56->__words[v53 - 1]);
              *((_DWORD *)v57 - 2) = v58;
              v56 = (std::string::__raw *)((char *)v56 - 32);
              v55 = (std::string *)((char *)v55 - 32);
            }
            while ((std::string *)((char *)v56 + v53 * 8) != v52);
            v38 = v54;
            v6 = (uint64_t)v55 + 32 * v54;
          }
          v62 = a1;
          v63 = a1[1];
          if (v63 != (std::string *)v3)
          {
            v64 = (char *)v12 + 32 * v11;
            do
            {
              v67 = (std::string *)&v64[v53 * 8];
              v68 = (char *)v5 + v53 * 8;
              if (SHIBYTE(v5->__words[v53 + 2]) < 0)
              {
                std::string::__init_copy_ctor_external(v67, *(const std::string::value_type **)v68, *((_QWORD *)v68 + 1));
              }
              else
              {
                v69 = *(_OWORD *)v68;
                v67->__r_.__value_.__r.__words[2] = *((_QWORD *)v68 + 2);
                *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v69;
              }
              v65 = &v64[v53 * 8];
              v66 = v5[1].__words[v53];
              v65[28] = BYTE4(v5[1].__words[v53]);
              *((_DWORD *)v65 + 6) = v66;
              v5 = (std::string::__raw *)((char *)v5 + 32);
              v64 += 32;
            }
            while ((std::string *)((char *)v5 + v53 * 8) != v63);
            v62 = a1;
            v3 = (int64_t)a1[1];
            v49 = (uint64_t)&v64[32 * v38];
          }
          v70 = *v62;
          *v62 = (std::string *)v6;
          v62[1] = (std::string *)v49;
          v62[2] = (std::string *)a3;
          while ((std::string *)v3 != v70)
          {
            if (*(char *)(v3 - 9) < 0)
              operator delete(*(void **)(v3 - 32));
            v3 -= 32;
          }
          if (v70)
            operator delete(v70);
          goto LABEL_176;
        }
      }
    }
LABEL_144:
    __break(1u);
LABEL_145:
    v73 = (std::string *)((char *)a2 + v7);
    v38 = a3;
    v7 = (uint64_t)a1;
    goto LABEL_146;
  }
LABEL_176:
  v99 = (std::string *)v107;
  if (v107)
  {
    v100 = v108;
    v101 = v107;
    if (v108 != v107)
    {
      do
      {
        if (v100[-1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v100[-2].__r_.__value_.__r.__words[2]);
        v100 = (std::string *)((char *)v100 - 32);
      }
      while (v100 != v99);
      v101 = v107;
    }
    v108 = v99;
    operator delete(v101);
  }
}

void cricket::UsedRtpHeaderExtensionIds::~UsedRtpHeaderExtensionIds(cricket::UsedRtpHeaderExtensionIds *this)
{
  *(_QWORD *)this = &off_24C0B6D70;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
}

{
  *(_QWORD *)this = &off_24C0B6D70;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  JUMPOUT(0x20BD0ADECLL);
}

cricket::TransportDescription *cricket::MediaSessionDescriptionFactory::AddTransportOffer(uint64_t a1, uint64_t a2, unsigned __int8 **a3, _BYTE *a4, uint64_t a5, uint64_t a6, cricket::IceCredentialsIterator *a7)
{
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  const cricket::TransportDescription *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  cricket::TransportDescription *result;
  unint64_t v31;
  __int128 v32;
  std::string v33;
  _BYTE v34[88];
  const cricket::TransportDescription *v35;

  if (a5)
  {
    v13 = *(_QWORD *)(a5 + 24);
    v14 = *(_QWORD *)(a5 + 32);
    if (v13 != v14)
    {
      v15 = *((_BYTE *)a3 + 23);
      if (v15 >= 0)
        v16 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
      else
        v16 = a3[1];
      if (v15 >= 0)
        v17 = (unsigned __int8 *)a3;
      else
        v17 = *a3;
      do
      {
        v18 = *(unsigned __int8 *)(v13 + 23);
        if ((v18 & 0x80u) == 0)
          v19 = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 23);
        else
          v19 = *(unsigned __int8 **)(v13 + 8);
        if (v19 == v16)
        {
          if ((v18 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v13, v17, *(_QWORD *)(v13 + 8)))
              goto LABEL_23;
          }
          else
          {
            if (!*(_BYTE *)(v13 + 23))
              goto LABEL_23;
            v20 = 0;
            while (*(unsigned __int8 *)(v13 + v20) == v17[v20])
            {
              if (v18 == ++v20)
                goto LABEL_23;
            }
          }
        }
        v13 += 112;
      }
      while (v13 != v14);
    }
    v13 = 0;
LABEL_23:
    if (v13)
      v21 = v13 + 24;
    else
      v21 = 0;
  }
  else
  {
    v21 = 0;
  }
  cricket::TransportDescriptionFactory::CreateOffer(*(_QWORD *)(a2 + 224), a4, v21, a7, (uint64_t *)&v35);
  v22 = v35;
  if (v35)
  {
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_28:
      v33 = *(std::string *)a3;
      goto LABEL_33;
    }
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
    v22 = v35;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_28;
  }
  std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)*a3, (std::string::size_type)a3[1]);
LABEL_33:
  result = cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)v34, v22);
  v31 = *(_QWORD *)(a6 + 32);
  if (v31 >= *(_QWORD *)(a6 + 40))
  {
    *(_QWORD *)(a6 + 32) = std::vector<cricket::TransportInfo>::__push_back_slow_path<cricket::TransportInfo const&>((void **)(a6 + 24), (uint64_t)&v33);
    cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)v34);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_38;
  }
  if (!v31)
  {
    __break(1u);
    return result;
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a6 + 32), v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  }
  else
  {
    v32 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
    *(_QWORD *)(v31 + 16) = *((_QWORD *)&v33.__r_.__value_.__l + 2);
    *(_OWORD *)v31 = v32;
  }
  cricket::TransportDescription::TransportDescription((cricket::TransportDescription *)(v31 + 24), (const cricket::TransportDescription *)v34);
  *(_QWORD *)(a6 + 32) = v31 + 112;
  cricket::TransportDescription::~TransportDescription((cricket::TransportDescription *)v34);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
LABEL_38:
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_39:
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 38) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 29) = 0;
  result = v35;
  v35 = 0;
  if (result)
  {
    cricket::TransportDescription::~TransportDescription(result);
    return (cricket::TransportDescription *)MEMORY[0x20BD0ADEC]();
  }
  return result;
}

void cricket::`anonymous namespace'::CreateContentOffer(uint64_t a1, uint64_t a2, char a3, __int128 **a4, std::string **a5)
{
  __int128 *v7;
  std::string *v8;
  unint64_t p_size;
  unint64_t v10;
  __int128 v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  char v15;
  std::string::size_type size;
  std::string::size_type v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  std::string *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  std::string *v28;
  std::string *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  int v33;
  std::string *v34;
  const std::string::value_type **v35;
  __int128 v36;
  int v37;
  std::string **v38;
  __int128 *v40;
  __int128 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  std::string v45;
  int v46;
  char v47;

  *((_BYTE *)a5 + 32) = a3 != 0;
  if (((unsigned int (*)(std::string **))(*a5)->__r_.__value_.__r.__words[2])(a5) == 1)
    *((_BYTE *)a5 + 33) = 1;
  v38 = a5;
  v7 = *a4;
  v40 = a4[1];
  if (*a4 != v40)
  {
    v8 = 0;
    p_size = 0;
    v10 = 0;
    while (1)
    {
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v11 = *v7;
        v45.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v11;
      }
      v12 = *((_DWORD *)v7 + 6);
      v42 = v7;
      v47 = *((_BYTE *)v7 + 28);
      v46 = v12;
      v13 = *(unsigned __int8 **)(a2 + 88);
      v14 = *(unsigned __int8 **)(a2 + 96);
      v43 = v14;
      if (v13 != v14)
        break;
LABEL_10:
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      v7 = v42 + 2;
      if (v42 + 2 == v40)
        goto LABEL_60;
    }
    while (1)
    {
      v15 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      size = v45.__r_.__value_.__l.__size_;
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      else
        v17 = v45.__r_.__value_.__l.__size_;
      v18 = v13[23];
      v19 = (char)v18;
      if ((v18 & 0x80u) != 0)
        v18 = *((_QWORD *)v13 + 1);
      if (v17 != v18)
        goto LABEL_13;
      if (v19 >= 0)
        v20 = v13;
      else
        v20 = *(unsigned __int8 **)v13;
      if ((*((_BYTE *)&v45.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(v45.__r_.__value_.__l.__data_, v20, v45.__r_.__value_.__l.__size_))
          goto LABEL_13;
      }
      else if (*((_BYTE *)&v45.__r_.__value_.__s + 23))
      {
        v21 = &v45;
        v22 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
        while (v21->__r_.__value_.__s.__data_[0] == *v20)
        {
          v21 = (std::string *)((char *)v21 + 1);
          ++v20;
          if (!--v22)
            goto LABEL_30;
        }
        goto LABEL_13;
      }
LABEL_30:
      if (*((_DWORD *)v13 + 9) != 4)
      {
        if (p_size >= v10)
        {
          v24 = (uint64_t)(p_size - (_QWORD)v8) >> 5;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 59)
            goto LABEL_68;
          if ((uint64_t)(v10 - (_QWORD)v8) >> 4 > v25)
            v25 = (uint64_t)(v10 - (_QWORD)v8) >> 4;
          if (v10 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
            v25 = 0x7FFFFFFFFFFFFFFLL;
          if (!v25)
          {
LABEL_67:
            __break(1u);
LABEL_68:
            abort();
          }
          if (v25 >> 59)
            std::__throw_bad_array_new_length[abi:sn180100]();
          v44 = 32 * v25;
          v26 = (char *)operator new(32 * v25);
          v27 = v26;
          v28 = (std::string *)&v26[32 * v24];
          v29 = v28;
          if (v15 < 0)
            std::string::__init_copy_ctor_external((std::string *)&v26[32 * v24], v45.__r_.__value_.__l.__data_, size);
          else
            *v28 = v45;
          v30 = &v27[32 * v24];
          *((_DWORD *)v30 + 6) = v46;
          v30[28] = v47;
          if ((std::string *)p_size != v8)
          {
            v31 = 0;
            do
            {
              v34 = (std::string *)((char *)v28 + v31 - 32);
              v35 = (const std::string::value_type **)(p_size + v31 - 32);
              if (*(char *)(p_size + v31 - 9) < 0)
              {
                std::string::__init_copy_ctor_external(v34, *v35, *(_QWORD *)(p_size + v31 - 24));
              }
              else
              {
                v36 = *(_OWORD *)v35;
                v28->__r_.__value_.__r.__words[v31 / 8 - 2] = *(_QWORD *)(p_size + v31 - 16);
                *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v36;
              }
              v32 = (char *)v28 + v31;
              v33 = *(_DWORD *)(p_size + v31 - 8);
              *(v32 - 4) = *(_BYTE *)(p_size + v31 - 4);
              *((_DWORD *)v32 - 2) = v33;
              v31 -= 32;
            }
            while ((std::string *)(p_size + v31) != v8);
            v29 = (std::string *)((char *)v28 + v31);
            do
            {
              if (*(char *)(p_size - 9) < 0)
                operator delete(*(void **)(p_size - 32));
              p_size -= 32;
            }
            while ((std::string *)p_size != v8);
          }
          p_size = (unint64_t)&v28[1].__r_.__value_.__l.__size_;
          if (v8)
            operator delete(v8);
          v8 = v29;
          v10 = (unint64_t)&v27[v44];
          v14 = v43;
        }
        else
        {
          if (!p_size)
            goto LABEL_67;
          if (v15 < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)p_size, v45.__r_.__value_.__l.__data_, size);
          }
          else
          {
            v23 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
            *(_QWORD *)(p_size + 16) = *((_QWORD *)&v45.__r_.__value_.__l + 2);
            *(_OWORD *)p_size = v23;
          }
          v37 = v46;
          *(_BYTE *)(p_size + 28) = v47;
          *(_DWORD *)(p_size + 24) = v37;
          p_size += 32;
        }
      }
LABEL_13:
      v13 += 40;
      if (v13 == v14)
        goto LABEL_10;
    }
  }
  v8 = 0;
  p_size = 0;
LABEL_60:
  std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>(v38 + 8, (uint64_t)v8, p_size, (uint64_t)(p_size - (_QWORD)v8) >> 5);
  *((_BYTE *)v38 + 88) = 1;
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 38) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 29) = 0;
  if (v8)
  {
    while ((std::string *)p_size != v8)
    {
      if (*(char *)(p_size - 9) < 0)
        operator delete(*(void **)(p_size - 32));
      p_size -= 32;
    }
    operator delete(v8);
  }
}

void cricket::`anonymous namespace'::NegotiateCodecs(cricket::Codec **a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  cricket::Codec *v6;
  cricket::Codec *v7;
  cricket::Codec **v8;
  _BOOL4 v10;
  _BOOL4 v12;
  _BOOL4 v14;
  _BOOL4 v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  const void **v25;
  int v26;
  uint64_t v27;
  std::string::size_type v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  const std::string::value_type *v34;
  uint64_t *v35;
  char v36;
  uint64_t **v37;
  std::string *p_s2;
  std::string::size_type size;
  cricket::Codec *v40;
  uint64_t *v41;
  char v42;
  uint64_t **v43;
  std::string *v44;
  std::string::size_type v45;
  _QWORD *v46;
  size_t v47;
  size_t v48;
  int v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  const std::string::value_type *v53;
  size_t v54;
  uint64_t *v55;
  char v56;
  std::string *v57;
  std::string::size_type v58;
  _QWORD *v59;
  size_t v60;
  size_t v61;
  int v62;
  uint64_t **v63;
  uint64_t v64;
  size_t v65;
  __int128 v66;
  _QWORD *v67;
  size_t v68;
  size_t v69;
  int v70;
  unsigned __int8 *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  const std::string::value_type *v75;
  size_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  const void **v85;
  int v86;
  uint64_t v87;
  std::string::size_type v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  char v93;
  const std::string::value_type *v94;
  unint64_t v95;
  std::string *p_p;
  size_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  void *v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  void *v118;
  unsigned __int8 v119;
  unsigned __int8 v120;
  unsigned __int8 v122;
  unsigned __int8 v123;
  unsigned __int8 v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  _BOOL4 v128;
  cricket::Codec *v131;
  _BOOL4 v132;
  _BOOL4 v133;
  _BOOL4 v134;
  std::string __s2;
  char v136;
  void **v137;
  uint64_t v138;
  std::string v139;
  __int128 v140;
  std::string v141;
  char v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  std::string v147;
  char v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int8 *v152;
  uint64_t v153;
  void *v154[2];
  std::string __p;
  _QWORD v156[2];
  unsigned __int8 v157;
  char v158;
  _QWORD v159[2];
  unsigned __int8 v160;
  char v161;
  uint64_t v162;
  uint64_t *v163[2];
  unsigned __int8 *v164;
  char v165;
  uint64_t v166;

  v4 = a3;
  v166 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    v8 = a1;
    v10 = &__s2 <= (std::string *)"apt" && (char *)__s2.__r_.__value_.__r.__words + 3 > "apt";
    v12 = &__s2 <= (std::string *)"apt" && (char *)__s2.__r_.__value_.__r.__words + 3 > "apt";
    v133 = v12;
    v134 = v10;
    v14 = &__s2 <= (std::string *)"rtx-time"
       && &__s2.__r_.__value_.__r.__words[1] > (std::string::size_type *)"rtx-time";
    v132 = v14;
    v16 = &__s2 <= (std::string *)"rtx-time"
       && &__s2.__r_.__value_.__r.__words[1] > (std::string::size_type *)"rtx-time";
    v128 = v16;
    if (cricket::kH264CodecName[0] - 65 >= 0x1A)
      v17 = cricket::kH264CodecName[0];
    else
      v17 = cricket::kH264CodecName[0] + 32;
    v127 = v17;
    if (cricket::kH264CodecName[1] - 65 >= 0x1A)
      v18 = cricket::kH264CodecName[1];
    else
      v18 = cricket::kH264CodecName[1] + 32;
    v125 = v18;
    if (cricket::kH264CodecName[2] - 65 >= 0x1A)
      v19 = cricket::kH264CodecName[2];
    else
      v19 = cricket::kH264CodecName[2] + 32;
    v123 = v19;
    if (cricket::kH264CodecName[3] - 65 >= 0x1A)
      v20 = cricket::kH264CodecName[3];
    else
      v20 = cricket::kH264CodecName[3] + 32;
    v120 = v20;
    if (cricket::kH265CodecName[0] - 65 >= 0x1A)
      v21 = cricket::kH265CodecName[0];
    else
      v21 = cricket::kH265CodecName[0] + 32;
    v126 = v21;
    if (cricket::kH265CodecName[1] - 65 >= 0x1A)
      v22 = cricket::kH265CodecName[1];
    else
      v22 = cricket::kH265CodecName[1] + 32;
    v124 = v22;
    if (cricket::kH265CodecName[2] - 65 >= 0x1A)
      v23 = cricket::kH265CodecName[2];
    else
      v23 = cricket::kH265CodecName[2] + 32;
    v122 = v23;
    v24 = cricket::kH265CodecName[3] + 32;
    if (cricket::kH265CodecName[3] - 65 >= 0x1A)
      v24 = cricket::kH265CodecName[3];
    v119 = v24;
    v131 = a1[1];
    while (1)
    {
      if (!v165)
        goto LABEL_52;
      cricket::Codec::Codec((cricket::Codec *)&v137, v7);
      if (!v165)
        goto LABEL_311;
      v25 = (const void **)((char *)v7 + 56);
      v26 = *((unsigned __int8 *)v7 + 80);
      if (*((_BYTE *)v7 + 80))
      {
        if (v158)
          break;
      }
      if ((v26 != 0) != (v158 != 0))
        goto LABEL_73;
LABEL_74:
      __s2.__r_.__value_.__s.__data_[0] = 0;
      v136 = 0;
      if (v26)
      {
        if ((*((char *)v7 + 79) & 0x80000000) == 0)
        {
LABEL_76:
          *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = *(_OWORD *)v25;
          __s2.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 9);
          goto LABEL_81;
        }
        v34 = (const std::string::value_type *)*((_QWORD *)v7 + 7);
        v28 = *((_QWORD *)v7 + 8);
LABEL_80:
        std::string::__init_copy_ctor_external(&__s2, v34, v28);
LABEL_81:
        v33 = 1;
        goto LABEL_82;
      }
LABEL_83:
      std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v141, &__s2);
      if (v136 && SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s2.__r_.__value_.__l.__data_);
      if (!v165)
        goto LABEL_311;
      cricket::FeedbackParams::Intersect(&v152, &v164);
      if (cricket::Codec::GetResiliencyType((uint64_t)&v137) == 4)
      {
        if (!v165)
          goto LABEL_311;
        *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 3;
        if (v134)
          goto LABEL_311;
        LOWORD(__s2.__r_.__value_.__l.__data_) = *(_WORD *)"apt";
        *(_WORD *)&__s2.__r_.__value_.__s.__data_[2] = cricket::kCodecParamAssociatedPayloadType[2];
        v35 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)&v162, (const void **)&__s2.__r_.__value_.__l.__data_, v163[0], (uint64_t *)v163);
        v36 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
        if (v163 != (uint64_t **)v35)
        {
          v37 = (uint64_t **)v35;
          if ((*((_BYTE *)&__s2.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            size = __s2.__r_.__value_.__l.__size_;
            if ((__s2.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
              goto LABEL_311;
            p_s2 = (std::string *)__s2.__r_.__value_.__r.__words[0];
            if (__s2.__r_.__value_.__l.__size_)
            {
              if (!__s2.__r_.__value_.__r.__words[0])
                goto LABEL_311;
            }
          }
          else
          {
            p_s2 = &__s2;
            size = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
          }
          v46 = v37 + 4;
          if (*((char *)v37 + 55) < 0)
          {
            v47 = (size_t)v37[5];
            if ((v47 & 0x8000000000000000) != 0)
              goto LABEL_311;
            v46 = (_QWORD *)*v46;
            if (v47)
            {
              if (!v46)
                goto LABEL_311;
            }
          }
          else
          {
            v47 = *((unsigned __int8 *)v37 + 55);
          }
          if (v47 >= size)
            v48 = size;
          else
            v48 = v47;
          v49 = memcmp(p_s2, v46, v48);
          if (v49)
          {
            v4 = a3;
            v8 = a1;
            if (v49 < 0)
              goto LABEL_111;
LABEL_112:
            if (v36 < 0)
              operator delete(__s2.__r_.__value_.__l.__data_);
            *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 3;
            if (v133)
              goto LABEL_311;
            LOWORD(__s2.__r_.__value_.__l.__data_) = *(_WORD *)"apt";
            *(_WORD *)&__s2.__r_.__value_.__s.__data_[2] = cricket::kCodecParamAssociatedPayloadType[2];
            v50 = std::map<std::string,std::string>::operator[]((uint64_t)&v149, (uint64_t)&__s2);
            if ((uint64_t **)v50 != v37 + 7)
            {
              v51 = *((_BYTE *)v37 + 79);
              if ((*(char *)(v50 + 23) & 0x80000000) == 0)
              {
                if ((*((_BYTE *)v37 + 79) & 0x80) != 0)
                {
                  std::string::__assign_no_alias<true>((_QWORD *)v50, (char *)v37[7], (size_t)v37[8]);
                  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
LABEL_128:
                    operator delete(__s2.__r_.__value_.__l.__data_);
                }
                else
                {
                  v52 = *(_OWORD *)(v37 + 7);
                  *(_QWORD *)(v50 + 16) = v37[9];
                  *(_OWORD *)v50 = v52;
                  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_128;
                }
LABEL_129:
                if (!v165)
                  goto LABEL_311;
                *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 8;
                if (v132)
                  goto LABEL_311;
                strcpy((char *)&__s2, "rtx-time");
                v55 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)&v162, (const void **)&__s2.__r_.__value_.__l.__data_, v163[0], (uint64_t *)v163);
                v56 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
                if (v163 != (uint64_t **)v55)
                {
                  v43 = (uint64_t **)v55;
                  if ((*((_BYTE *)&__s2.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    v58 = __s2.__r_.__value_.__l.__size_;
                    if ((__s2.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                      goto LABEL_311;
                    v57 = (std::string *)__s2.__r_.__value_.__r.__words[0];
                    if (__s2.__r_.__value_.__l.__size_)
                    {
                      if (!__s2.__r_.__value_.__r.__words[0])
                        goto LABEL_311;
                    }
                  }
                  else
                  {
                    v57 = &__s2;
                    v58 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
                  }
                  v59 = v43 + 4;
                  if (*((char *)v43 + 55) < 0)
                  {
                    v60 = (size_t)v43[5];
                    if ((v60 & 0x8000000000000000) != 0)
                      goto LABEL_311;
                    v59 = (_QWORD *)*v59;
                    if (v60)
                    {
                      if (!v59)
                        goto LABEL_311;
                    }
                  }
                  else
                  {
                    v60 = *((unsigned __int8 *)v43 + 55);
                  }
                  if (v60 >= v58)
                    v61 = v58;
                  else
                    v61 = v60;
                  v62 = memcmp(v57, v59, v61);
                  if (v62)
                  {
                    if (v62 < 0)
                      goto LABEL_149;
LABEL_150:
                    v6 = v131;
                    if (v56 < 0)
                      operator delete(__s2.__r_.__value_.__l.__data_);
                    if (!v165)
                      goto LABEL_311;
                    if (v43 == v163)
                      goto LABEL_187;
                    *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 8;
                    if (v128)
                      goto LABEL_311;
                    strcpy((char *)&__s2, "rtx-time");
                    v63 = v43 + 7;
                    v64 = std::map<std::string,std::string>::operator[]((uint64_t)&v149, (uint64_t)&__s2);
                    if ((uint64_t **)v64 == v43 + 7)
                      goto LABEL_186;
                    v65 = *((unsigned __int8 *)v43 + 79);
                    if ((*(char *)(v64 + 23) & 0x80000000) == 0)
                    {
                      if ((v65 & 0x80) == 0)
                        goto LABEL_158;
LABEL_185:
                      std::string::__assign_no_alias<true>((_QWORD *)v64, (char *)v43[7], (size_t)v43[8]);
LABEL_186:
                      if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_187;
                      goto LABEL_196;
                    }
                    goto LABEL_189;
                  }
                  if (v58 >= v60)
                    goto LABEL_150;
                }
LABEL_149:
                v43 = v163;
                goto LABEL_150;
              }
              if (v51 >= 0)
                v53 = (const std::string::value_type *)(v37 + 7);
              else
                v53 = (const std::string::value_type *)v37[7];
              if (v51 >= 0)
                v54 = *((unsigned __int8 *)v37 + 79);
              else
                v54 = (size_t)v37[8];
              std::string::__assign_no_alias<false>((std::string *)v50, v53, v54);
            }
            if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_128;
            goto LABEL_129;
          }
          v4 = a3;
          v8 = a1;
          if (size >= v47)
            goto LABEL_112;
        }
LABEL_111:
        v37 = v163;
        goto LABEL_112;
      }
      if (cricket::Codec::GetResiliencyType((uint64_t)&v137) != 1)
        goto LABEL_187;
      if (!v165)
        goto LABEL_311;
      v40 = v6;
      *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 0;
      __s2.__r_.__value_.__s.__data_[0] = 0;
      v41 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)&v162, (const void **)&__s2.__r_.__value_.__l.__data_, v163[0], (uint64_t *)v163);
      v42 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
      if (v163 == (uint64_t **)v41)
        goto LABEL_177;
      v43 = (uint64_t **)v41;
      if ((*((_BYTE *)&__s2.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v45 = __s2.__r_.__value_.__l.__size_;
        if ((__s2.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_311;
        v44 = (std::string *)__s2.__r_.__value_.__r.__words[0];
        if (__s2.__r_.__value_.__l.__size_)
        {
          if (!__s2.__r_.__value_.__r.__words[0])
            goto LABEL_311;
        }
      }
      else
      {
        v44 = &__s2;
        v45 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
      }
      v67 = v43 + 4;
      if (*((char *)v43 + 55) < 0)
      {
        v68 = (size_t)v43[5];
        if ((v68 & 0x8000000000000000) != 0)
          goto LABEL_311;
        v67 = (_QWORD *)*v67;
        if (v68)
        {
          if (!v67)
            goto LABEL_311;
        }
      }
      else
      {
        v68 = *((unsigned __int8 *)v43 + 55);
      }
      if (v68 >= v45)
        v69 = v45;
      else
        v69 = v68;
      v70 = memcmp(v44, v67, v69);
      if (v70)
      {
        if ((v70 & 0x80000000) == 0)
          goto LABEL_178;
LABEL_177:
        v43 = v163;
        goto LABEL_178;
      }
      if (v45 < v68)
        goto LABEL_177;
LABEL_178:
      if (v42 < 0)
        operator delete(__s2.__r_.__value_.__l.__data_);
      if (!v165)
        goto LABEL_311;
      v6 = v40;
      if (v43 == v163)
      {
LABEL_187:
        v71 = (unsigned __int8 *)v7 + 16;
        v72 = *((unsigned __int8 *)v7 + 39);
        if ((*((char *)v7 + 39) & 0x80000000) == 0)
          goto LABEL_188;
        goto LABEL_197;
      }
      *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 0;
      __s2.__r_.__value_.__s.__data_[0] = 0;
      v63 = v43 + 7;
      v64 = std::map<std::string,std::string>::operator[]((uint64_t)&v149, (uint64_t)&__s2);
      if ((uint64_t **)v64 == v43 + 7)
        goto LABEL_186;
      v65 = *((unsigned __int8 *)v43 + 79);
      if ((*(char *)(v64 + 23) & 0x80000000) == 0)
      {
        if ((v65 & 0x80) == 0)
        {
LABEL_158:
          v66 = *(_OWORD *)v63;
          *(_QWORD *)(v64 + 16) = v63[2];
          *(_OWORD *)v64 = v66;
          if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_187;
          goto LABEL_196;
        }
        goto LABEL_185;
      }
LABEL_189:
      if ((v65 & 0x80u) == 0)
        v75 = (const std::string::value_type *)v63;
      else
        v75 = (const std::string::value_type *)v43[7];
      if ((v65 & 0x80u) == 0)
        v76 = v65;
      else
        v76 = (size_t)v43[8];
      std::string::__assign_no_alias<false>((std::string *)v64, v75, v76);
      if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_187;
LABEL_196:
      operator delete(__s2.__r_.__value_.__l.__data_);
      v71 = (unsigned __int8 *)v7 + 16;
      v72 = *((unsigned __int8 *)v7 + 39);
      if ((*((char *)v7 + 39) & 0x80000000) == 0)
      {
LABEL_188:
        v73 = v71;
        v74 = v72;
        goto LABEL_200;
      }
LABEL_197:
      v74 = *((_QWORD *)v7 + 3);
      if (v74 < 0)
        goto LABEL_311;
      v73 = *(unsigned __int8 **)v71;
      if (v74)
      {
        if (!v73)
          goto LABEL_311;
      }
LABEL_200:
      if (v74 == 4)
      {
        v77 = *v73;
        if (v77 == cricket::kH264CodecName[0])
          goto LABEL_205;
        if ((v77 - 65) < 0x1A)
          LOBYTE(v77) = v77 + 32;
        if (v77 == v127)
        {
LABEL_205:
          v78 = v73[1];
          if (v78 == cricket::kH264CodecName[1])
            goto LABEL_216;
          if ((v78 - 65) < 0x1A)
            LOBYTE(v78) = v78 + 32;
          if (v78 == v125)
          {
LABEL_216:
            v79 = v73[2];
            if (v79 == cricket::kH264CodecName[2])
              goto LABEL_314;
            if ((v79 - 65) < 0x1A)
              LOBYTE(v79) = v79 + 32;
            if (v79 == v123)
            {
LABEL_314:
              v80 = v73[3];
              if (v80 == cricket::kH264CodecName[3])
                goto LABEL_217;
              if ((v80 - 65) < 0x1A)
                LOBYTE(v80) = v80 + 32;
              if (v80 == v120)
              {
LABEL_217:
                if (!v165)
                  goto LABEL_311;
                webrtc::H264GenerateProfileLevelIdForAnswer((unint64_t)v7 + 168, (unint64_t)&v162, (uint64_t)&v149);
                v72 = *((unsigned __int8 *)v7 + 39);
              }
            }
          }
        }
      }
      if ((v72 & 0x80) != 0)
      {
        v72 = *((_QWORD *)v7 + 3);
        if (v72 < 0 || (v71 = *(unsigned __int8 **)v71, v72) && !v71)
LABEL_311:
          __break(1u);
      }
      if (v72 == 4)
      {
        v81 = *v71;
        if (v81 == cricket::kH265CodecName[0])
          goto LABEL_228;
        if ((v81 - 65) < 0x1A)
          LOBYTE(v81) = v81 + 32;
        if (v81 == v126)
        {
LABEL_228:
          v82 = v71[1];
          if (v82 == cricket::kH265CodecName[1])
            goto LABEL_239;
          if ((v82 - 65) < 0x1A)
            LOBYTE(v82) = v82 + 32;
          if (v82 == v124)
          {
LABEL_239:
            v83 = v71[2];
            if (v83 == cricket::kH265CodecName[2])
              goto LABEL_315;
            if ((v83 - 65) < 0x1A)
              LOBYTE(v83) = v83 + 32;
            if (v83 == v122)
            {
LABEL_315:
              v84 = v71[3];
              if (v84 == cricket::kH265CodecName[3])
                goto LABEL_316;
              if ((v84 - 65) < 0x1A)
                LOBYTE(v84) = v84 + 32;
              if (v84 == v119)
              {
LABEL_316:
                if (!v165)
                  goto LABEL_311;
                webrtc::H265GenerateProfileTierLevelForAnswer((uint64_t)v7 + 168, (uint64_t)&v162, (uint64_t)&v149);
                if (!v165)
                  goto LABEL_311;
                v85 = (const void **)((char *)v7 + 136);
                v86 = *((unsigned __int8 *)v7 + 160);
                if (*((_BYTE *)v7 + 160) && v161)
                {
                  v87 = *((unsigned __int8 *)v7 + 159);
                  v88 = *((_QWORD *)v7 + 18);
                  if ((v87 & 0x80u) == 0)
                    v89 = *((unsigned __int8 *)v7 + 159);
                  else
                    v89 = *((_QWORD *)v7 + 18);
                  v90 = v160;
                  if ((v160 & 0x80u) != 0)
                    v90 = v159[1];
                  if (v89 != v90)
                    goto LABEL_260;
                  if ((v160 & 0x80u) == 0)
                    v91 = v159;
                  else
                    v91 = (_QWORD *)v159[0];
                  if ((v87 & 0x80) == 0)
                  {
                    if (*((_BYTE *)v7 + 159))
                    {
                      v92 = 0;
                      while (*((unsigned __int8 *)v7 + v92 + 136) == *((unsigned __int8 *)v91 + v92))
                      {
                        if (v87 == ++v92)
                          goto LABEL_263;
                      }
LABEL_260:
                      v93 = 0;
                      __s2.__r_.__value_.__s.__data_[0] = 0;
LABEL_271:
                      v136 = v93;
LABEL_272:
                      std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v147, &__s2);
                      if (v136 && SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__s2.__r_.__value_.__l.__data_);
                      goto LABEL_275;
                    }
LABEL_265:
                    *(_OWORD *)&__s2.__r_.__value_.__l.__data_ = *(_OWORD *)v85;
                    __s2.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 19);
LABEL_270:
                    v93 = 1;
                    goto LABEL_271;
                  }
                  v94 = (const std::string::value_type *)*v85;
                  if (memcmp(*v85, v91, *((_QWORD *)v7 + 18)))
                    goto LABEL_260;
                  __s2.__r_.__value_.__s.__data_[0] = 0;
                  v136 = 0;
                }
                else
                {
                  if ((v86 != 0) != (v161 != 0))
                    goto LABEL_260;
LABEL_263:
                  __s2.__r_.__value_.__s.__data_[0] = 0;
                  v136 = 0;
                  if (!v86)
                    goto LABEL_272;
                  if ((*((char *)v7 + 159) & 0x80000000) == 0)
                    goto LABEL_265;
                  v94 = (const std::string::value_type *)*((_QWORD *)v7 + 17);
                  v88 = *((_QWORD *)v7 + 18);
                }
                std::string::__init_copy_ctor_external(&__s2, v94, v88);
                goto LABEL_270;
              }
            }
          }
        }
      }
LABEL_275:
      if (!v165)
        goto LABEL_311;
      HIDWORD(v138) = HIDWORD(v154[1]);
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v97 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v97 = __p.__r_.__value_.__l.__size_;
        std::string::__assign_no_alias<false>(&v139, (const std::string::value_type *)p_p, v97);
        v95 = *(_QWORD *)(v4 + 8);
        if (v95 >= *(_QWORD *)(v4 + 16))
        {
LABEL_50:
          *(_QWORD *)(v4 + 8) = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec>((void **)v4, (uint64_t)&v137);
          cricket::Codec::~Codec((cricket::Codec *)&v137);
          if (v165)
            goto LABEL_51;
          goto LABEL_52;
        }
      }
      else if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(&v139, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        v95 = *(_QWORD *)(v4 + 8);
        if (v95 >= *(_QWORD *)(v4 + 16))
          goto LABEL_50;
      }
      else
      {
        v139 = __p;
        v95 = *(_QWORD *)(v4 + 8);
        if (v95 >= *(_QWORD *)(v4 + 16))
          goto LABEL_50;
      }
      if (!v95)
        goto LABEL_311;
      *(_QWORD *)v95 = &off_24C0B1418;
      *(_QWORD *)(v95 + 8) = v138;
      v98 = *(_OWORD *)&v139.__r_.__value_.__l.__data_;
      *(_QWORD *)(v95 + 32) = *((_QWORD *)&v139.__r_.__value_.__l + 2);
      *(_OWORD *)(v95 + 16) = v98;
      memset(&v139, 0, sizeof(v139));
      *(_OWORD *)(v95 + 40) = v140;
      *(_BYTE *)(v95 + 56) = 0;
      *(_BYTE *)(v95 + 80) = 0;
      if (v142)
      {
        v99 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
        *(_QWORD *)(v95 + 72) = *((_QWORD *)&v141.__r_.__value_.__l + 2);
        *(_OWORD *)(v95 + 56) = v99;
        memset(&v141, 0, sizeof(v141));
        *(_BYTE *)(v95 + 80) = 1;
      }
      *(_BYTE *)(v95 + 136) = 0;
      *(_QWORD *)(v95 + 88) = 0;
      *(_QWORD *)(v95 + 88) = v143;
      v100 = v144;
      v101 = v145;
      *(_QWORD *)(v95 + 128) = v146;
      *(_OWORD *)(v95 + 112) = v101;
      *(_OWORD *)(v95 + 96) = v100;
      v143 = 0;
      *(_BYTE *)(v95 + 160) = 0;
      if (v148)
      {
        v102 = *(_OWORD *)&v147.__r_.__value_.__l.__data_;
        *(_QWORD *)(v95 + 152) = *((_QWORD *)&v147.__r_.__value_.__l + 2);
        *(_OWORD *)(v95 + 136) = v102;
        memset(&v147, 0, sizeof(v147));
        *(_BYTE *)(v95 + 160) = 1;
      }
      *(_QWORD *)(v95 + 168) = v149;
      v103 = v150;
      *(_QWORD *)(v95 + 176) = v150;
      v104 = v95 + 176;
      v105 = v151;
      *(_QWORD *)(v95 + 184) = v151;
      if (v105)
      {
        *(_QWORD *)(v103 + 16) = v104;
        v149 = &v150;
        v150 = 0;
        v151 = 0;
      }
      else
      {
        *(_QWORD *)(v95 + 168) = v104;
      }
      *(_QWORD *)(v95 + 192) = 0;
      *(_QWORD *)(v95 + 200) = 0;
      v106 = (_QWORD *)(v95 + 192);
      v106[2] = 0;
      std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>(v106, (uint64_t)v152, v153, 0xAAAAAAAAAAAAAAABLL * ((v153 - (uint64_t)v152) >> 4));
      *(_QWORD *)(v4 + 8) = v106 + 3;
      cricket::Codec::~Codec((cricket::Codec *)&v137);
      if (v165)
LABEL_51:
        cricket::Codec::~Codec((cricket::Codec *)v154);
LABEL_52:
      v7 = (cricket::Codec *)((char *)v7 + 216);
      if (v7 == v6)
        goto LABEL_299;
    }
    v27 = *((unsigned __int8 *)v7 + 79);
    v28 = *((_QWORD *)v7 + 8);
    if ((v27 & 0x80u) == 0)
      v29 = *((unsigned __int8 *)v7 + 79);
    else
      v29 = *((_QWORD *)v7 + 8);
    v30 = v157;
    if ((v157 & 0x80u) != 0)
      v30 = v156[1];
    if (v29 == v30)
    {
      if ((v157 & 0x80u) == 0)
        v31 = v156;
      else
        v31 = (_QWORD *)v156[0];
      if ((v27 & 0x80) != 0)
      {
        v34 = (const std::string::value_type *)*v25;
        if (!memcmp(*v25, v31, *((_QWORD *)v7 + 8)))
        {
          __s2.__r_.__value_.__s.__data_[0] = 0;
          v136 = 0;
          goto LABEL_80;
        }
      }
      else
      {
        if (!*((_BYTE *)v7 + 79))
          goto LABEL_76;
        v32 = 0;
        while (*((unsigned __int8 *)v7 + v32 + 56) == *((unsigned __int8 *)v31 + v32))
        {
          if (v27 == ++v32)
            goto LABEL_74;
        }
      }
    }
LABEL_73:
    v33 = 0;
    __s2.__r_.__value_.__s.__data_[0] = 0;
LABEL_82:
    v136 = v33;
    goto LABEL_83;
  }
LABEL_299:
  if ((a4 & 1) != 0)
  {
    *(_OWORD *)v154 = 0u;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0u;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1065353216;
    v107 = (uint64_t *)a2;
    v108 = *(_QWORD *)(a2 + 8);
    v109 = *v107;
    if (*v107 != v108)
    {
      v110 = 1749801491 * ((unint64_t)(v108 - v109) >> 3) + 1;
      do
      {
        v137 = (void **)(v109 + 12);
        *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v154, (int *)(v109 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v137)+ 5) = v110;
        v109 += 216;
        --v110;
      }
      while (v109 != v108);
    }
    v111 = *(void **)v4;
    v112 = *(_QWORD *)(v4 + 8);
    v113 = 126 - 2 * __clz(0x84BDA12F684BDA13 * ((uint64_t)(v112 - *(_QWORD *)v4) >> 3));
    v114 = v112 == *(_QWORD *)v4;
    v137 = v154;
    if (v114)
      v115 = 0;
    else
      v115 = v113;
    v116 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      do
      {
        v117 = (_QWORD *)*v116;
        operator delete(v116);
        v116 = v117;
      }
      while (v117);
    }
    v118 = v154[0];
    v154[0] = 0;
    if (v118)
      operator delete(v118);
  }
}

void cricket::`anonymous namespace'::CreateMediaContentAnswer(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, char **a5, int a6, uint64_t a7)
{
  size_t v7;
  char *v8;
  char **v9;
  int v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  char *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  char v17;
  std::string::size_type v18;
  std::string::size_type v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  std::string *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  std::string *v29;
  std::string *v30;
  size_t v31;
  unint64_t v32;
  char *v33;
  int v34;
  std::string *v35;
  const std::string::value_type **v36;
  __int128 v37;
  int v38;
  std::string *v39;
  char *v40;
  std::string::__raw *v41;
  size_t size;
  std::string *v44;
  size_t v45;
  std::string::__raw *v46;
  size_t v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string::size_type v52;
  std::string::size_type v53;
  std::string::size_type v54;
  uint64_t v55;
  _BOOL4 v63;
  std::string::__raw *v64;
  char *v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string *v68;
  uint64_t v70;
  const std::string::value_type *v71;
  __int128 v73;
  std::string *v74;
  int v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  __int128 v81;
  std::string *v82;
  int v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  __int128 v89;
  std::string *v90;
  size_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  BOOL v108;
  BOOL v109;
  std::string *v111;
  char *v112;
  __int128 v113;
  std::string *v114;
  int v115;
  int v116;
  char v117;
  unsigned int v118;
  unsigned int v119;
  _BOOL4 v121;
  _BOOL4 v123;
  int v124;
  std::string::size_type v125;
  int v126;
  int v127;
  std::string::size_type v128;
  void *v129;
  char v136;
  char **v137;
  unsigned __int8 *v138;
  char v139;
  std::string *v140;
  std::string v141;
  uint64_t v142;

  v8 = (char *)a7;
  v9 = a4;
  v10 = *(_DWORD *)(a1 + 200);
  if (v10 != 2 || *(_DWORD *)(a7 + 200) != 1)
    *(_DWORD *)(a7 + 200) = v10;
  if (a4 != a5)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = (char *)&v142;
    while (1)
    {
      if (*((char *)v9 + 23) < 0)
        std::string::__init_copy_ctor_external(&v141, *v9, (std::string::size_type)v9[1]);
      else
        v141 = *(std::string *)v9;
      *(_DWORD *)v14 = *((_DWORD *)v9 + 6);
      v137 = v9;
      v14[4] = *((_BYTE *)v9 + 28);
      v16 = *(unsigned __int8 **)(a2 + 88);
      v15 = *(unsigned __int8 **)(a2 + 96);
      v138 = v15;
      if (v16 != v15)
        break;
LABEL_11:
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v141.__r_.__value_.__l.__data_);
      v9 = v137 + 4;
      if (v137 + 4 == a5)
      {
        memset(&v141, 0, sizeof(v141));
        v137 = (char **)(a1 + 64);
        if (v11 != v12)
        {
          v140 = 0;
          v139 = 0;
          v136 = 0;
          v18 = 0;
          v8 = "http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time";
          v39 = v11;
          while (1)
          {
            v7 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
            v41 = (std::string::__raw *)v39;
            size = v7;
            if (SHIBYTE(v39->__r_.__value_.__r.__words[2]) < 0)
            {
              size = v39->__r_.__value_.__l.__size_;
              if ((size & 0x8000000000000000) != 0)
                goto LABEL_264;
              v41 = (std::string::__raw *)v39->__r_.__value_.__r.__words[0];
              if (size && v41 == 0)
                goto LABEL_264;
            }
            if (size == 72
              && !memcmp(v41, "http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00", 0x48uLL))
            {
              v139 = 1;
              v64 = (std::string::__raw *)v39;
              if ((v7 & 0x80) != 0)
                goto LABEL_116;
            }
            else
            {
              v44 = v39;
              v45 = v7;
              if ((v7 & 0x80) != 0)
              {
                v45 = v39->__r_.__value_.__l.__size_;
                if ((v45 & 0x8000000000000000) != 0)
                  goto LABEL_264;
                v44 = (std::string *)v39->__r_.__value_.__r.__words[0];
                if (v45)
                {
                  if (!v44)
                    goto LABEL_264;
                }
              }
              if (v45 == 87
                && !memcmp(v44, "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension", 0x57uLL))
              {
                v136 = 1;
                v64 = (std::string::__raw *)v39;
                if ((v7 & 0x80) != 0)
                  goto LABEL_116;
              }
              else
              {
                v46 = (std::string::__raw *)v39;
                v47 = v7;
                if ((v7 & 0x80) != 0)
                {
                  v47 = v39->__r_.__value_.__l.__size_;
                  if ((v47 & 0x8000000000000000) != 0)
                    goto LABEL_264;
                  v46 = (std::string::__raw *)v39->__r_.__value_.__r.__words[0];
                  if (v47)
                  {
                    if (!v46)
                      goto LABEL_264;
                  }
                }
                if (v47 == 61)
                {
                  v48 = v46->__words[0];
                  v49 = v46->__words[1];
                  v50 = v46->__words[2];
                  v51 = v46[1].__words[0];
                  v53 = v46[1].__words[1];
                  v52 = v46[1].__words[2];
                  v54 = v46[2].__words[0];
                  v55 = *(std::string::size_type *)((char *)v46[2].__words + 5);
                  v63 = v48 == *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time"
                     && v49 == *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/abs-capture-time"
                     && v50 == *(_QWORD *)"c.org/experiments/rtp-hdrext/abs-capture-time"
                     && v51 == *(_QWORD *)"periments/rtp-hdrext/abs-capture-time"
                     && v53 == *(_QWORD *)"s/rtp-hdrext/abs-capture-time"
                     && v52 == *(_QWORD *)"rext/abs-capture-time"
                     && v54 == *(_QWORD *)"-capture-time"
                     && v55 == *(_QWORD *)"ure-time";
                  v18 = v63 | v18;
                  v64 = (std::string::__raw *)v39;
                  if ((v7 & 0x80) != 0)
                  {
LABEL_116:
                    v7 = v39->__r_.__value_.__l.__size_;
                    if ((v7 & 0x8000000000000000) != 0)
                      goto LABEL_264;
                    v64 = (std::string::__raw *)v39->__r_.__value_.__r.__words[0];
                    if (v7)
                    {
                      if (!v64)
                        goto LABEL_264;
                    }
                  }
                }
                else
                {
                  v18 = v18;
                  v64 = (std::string::__raw *)v39;
                  if ((v7 & 0x80) != 0)
                    goto LABEL_116;
                }
              }
            }
            if (v7 == 34
              && bswap64(v64->__words[0]) == bswap64(*(unint64_t *)"urn:ietf:params:rtp-hdrext:encrypt")
              && bswap64(v64->__words[1]) == bswap64(*(unint64_t *)":params:rtp-hdrext:encrypt")
              && bswap64(v64->__words[2]) == bswap64(*(unint64_t *)"rtp-hdrext:encrypt")
              && bswap64(v64[1].__words[0]) == bswap64(*(unint64_t *)"xt:encrypt")
              && bswap32(LOWORD(v64[1].__words[1])) >> 16 == (unint64_t)(bswap32(*(unsigned __int16 *)"pt") >> 16))
            {
              v13 = *(std::string **)(a1 + 64);
              v65 = *(char **)(a1 + 72);
              if (v13 != (std::string *)v65)
                goto LABEL_142;
            }
            else
            {
              v13 = *(std::string **)(a1 + 64);
              v65 = *(char **)(a1 + 72);
              if (v13 != (std::string *)v65)
              {
                if (!a6)
                {
LABEL_142:
                  v66 = v18;
                  v18 = (std::string::size_type)v13;
                  while (1)
                  {
                    if (*(char *)(v18 + 23) < 0)
                    {
                      v70 = *(_QWORD *)(v18 + 8);
                      if (v70 < 0)
                        goto LABEL_264;
                      v71 = *(const std::string::value_type **)v18;
                      if (v70 && v71 == 0)
                        goto LABEL_264;
                    }
                    else
                    {
                      v70 = *(unsigned __int8 *)(v18 + 23);
                      v71 = (const std::string::value_type *)v18;
                    }
                    if (v7 == v70 && !memcmp(v64, v71, v7) && !*(_BYTE *)(v18 + 28))
                      goto LABEL_156;
                    v18 += 32;
                    if ((char *)v18 == v65)
                      goto LABEL_64;
                  }
                }
                v66 = v18;
                v18 = 0;
                do
                {
                  if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
                  {
                    v67 = v13->__r_.__value_.__l.__size_;
                    if ((v67 & 0x8000000000000000) != 0)
                      goto LABEL_264;
                    v68 = (std::string *)v13->__r_.__value_.__r.__words[0];
                    if (v67 && v68 == 0)
                      goto LABEL_264;
                  }
                  else
                  {
                    v67 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
                    v68 = v13;
                  }
                  if (v7 == v67 && !memcmp(v64, v68, v7))
                  {
                    v18 = (std::string::size_type)v13;
                    if (v13[1].__r_.__value_.__s.__data_[4])
                    {
                      v18 = (std::string::size_type)v13;
                      goto LABEL_156;
                    }
                  }
                  v13 = (std::string *)((char *)v13 + 32);
                }
                while (v13 != (std::string *)v65);
                if (v18)
                {
LABEL_156:
                  if ((unint64_t)v140 >= v141.__r_.__value_.__r.__words[2])
                  {
                    v40 = std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>(&v141.__r_.__value_.__l.__data_, v18);
                  }
                  else
                  {
                    if (!v140)
                      goto LABEL_264;
                    if (*(char *)(v18 + 23) < 0)
                    {
                      v74 = v140;
                      std::string::__init_copy_ctor_external(v140, *(const std::string::value_type **)v18, *(_QWORD *)(v18 + 8));
                    }
                    else
                    {
                      v73 = *(_OWORD *)v18;
                      v74 = v140;
                      v140->__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
                      *(_OWORD *)&v140->__r_.__value_.__l.__data_ = v73;
                    }
                    v75 = *(_DWORD *)(v18 + 24);
                    v74[1].__r_.__value_.__s.__data_[4] = *(_BYTE *)(v18 + 28);
                    LODWORD(v74[1].__r_.__value_.__l.__data_) = v75;
                    v40 = &v74[1].__r_.__value_.__s.__data_[8];
                  }
                  v140 = (std::string *)v40;
                  v141.__r_.__value_.__l.__size_ = (std::string::size_type)v40;
                }
LABEL_64:
                v18 = v66;
              }
            }
            v39 = (std::string *)((char *)v39 + 32);
            if (v39 == v12)
            {
              LOBYTE(v13) = v18;
              LOBYTE(v18) = 0;
              v8 = (char *)a7;
              if ((v136 & 1) == 0)
              {
                v76 = *(char **)(a1 + 64);
                v77 = *(char **)(a1 + 72);
                if (v76 != v77)
                  goto LABEL_169;
              }
              goto LABEL_166;
            }
          }
        }
        v140 = 0;
        v139 = 0;
        LOBYTE(v13) = 0;
        LOBYTE(v18) = 1;
        v11 = v12;
        v8 = (char *)a7;
        v76 = *(char **)(a1 + 64);
        v77 = *(char **)(a1 + 72);
        if (v76 != v77)
          goto LABEL_169;
LABEL_166:
        if ((v139 & 1) != 0)
          goto LABEL_219;
        goto LABEL_195;
      }
    }
    while (1)
    {
      v17 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
      v18 = v141.__r_.__value_.__l.__size_;
      if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
      else
        v19 = v141.__r_.__value_.__l.__size_;
      v20 = v16[23];
      v21 = (char)v20;
      if ((v20 & 0x80u) != 0)
        v20 = *((_QWORD *)v16 + 1);
      if (v19 != v20)
        goto LABEL_14;
      if (v21 >= 0)
        v22 = v16;
      else
        v22 = *(unsigned __int8 **)v16;
      if ((*((_BYTE *)&v141.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(v141.__r_.__value_.__l.__data_, v22, v141.__r_.__value_.__l.__size_))
          goto LABEL_14;
      }
      else if (*((_BYTE *)&v141.__r_.__value_.__s + 23))
      {
        v23 = &v141;
        v24 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
        while (v23->__r_.__value_.__s.__data_[0] == *v22)
        {
          v23 = (std::string *)((char *)v23 + 1);
          ++v22;
          if (!--v24)
            goto LABEL_31;
        }
        goto LABEL_14;
      }
LABEL_31:
      if (*((_DWORD *)v16 + 9) != 4)
      {
        if (v12 >= v13)
        {
          v8 = v14;
          v26 = ((char *)v12 - (char *)v11) >> 5;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 59)
            abort();
          if (((char *)v13 - (char *)v11) >> 4 > v27)
            v27 = ((char *)v13 - (char *)v11) >> 4;
          if ((unint64_t)((char *)v13 - (char *)v11) >= 0x7FFFFFFFFFFFFFE0)
            v27 = 0x7FFFFFFFFFFFFFFLL;
          if (!v27)
          {
LABEL_264:
            __break(1u);
            goto LABEL_265;
          }
          if (v27 >> 59)
            std::__throw_bad_array_new_length[abi:sn180100]();
          v140 = (std::string *)(32 * v27);
          v28 = (char *)operator new(32 * v27);
          v7 = (size_t)v28;
          v29 = (std::string *)&v28[32 * v26];
          v30 = v29;
          if (v17 < 0)
            std::string::__init_copy_ctor_external((std::string *)&v28[32 * v26], v141.__r_.__value_.__l.__data_, v18);
          else
            *v29 = v141;
          v31 = v7 + 32 * v26;
          v14 = v8;
          *(_DWORD *)(v31 + 24) = *(_DWORD *)v8;
          *(_BYTE *)(v31 + 28) = v8[4];
          if (v12 != v11)
          {
            v32 = 0;
            do
            {
              v35 = (std::string *)((char *)v29 + v32 - 32);
              v36 = (const std::string::value_type **)((char *)&v12[-1] + v32 - 8);
              if (v12->__r_.__value_.__s.__data_[v32 - 9] < 0)
              {
                std::string::__init_copy_ctor_external(v35, *v36, v12[-1].__r_.__value_.__r.__words[v32 / 8]);
              }
              else
              {
                v37 = *(_OWORD *)v36;
                v29->__r_.__value_.__r.__words[v32 / 8 - 2] = v12->__r_.__value_.__r.__words[v32 / 8 - 2];
                *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v37;
              }
              v33 = (char *)v29 + v32;
              v34 = *(_DWORD *)((char *)&v12->__r_.__value_.__l + v32 - 8);
              *(v33 - 4) = v12->__r_.__value_.__s.__data_[v32 - 4];
              *((_DWORD *)v33 - 2) = v34;
              v32 -= 32;
            }
            while ((std::string *)((char *)v12 + v32) != v11);
            v30 = (std::string *)((char *)v29 + v32);
            do
            {
              if (v12[-1].__r_.__value_.__s.__data_[15] < 0)
                operator delete((void *)v12[-2].__r_.__value_.__r.__words[2]);
              v12 = (std::string *)((char *)v12 - 32);
            }
            while (v12 != v11);
          }
          v8 = (char *)v140 + v7;
          v12 = (std::string *)((char *)v29 + 32);
          if (v11)
            operator delete(v11);
          v11 = v30;
          v13 = (std::string *)((char *)v140 + v7);
          v15 = v138;
        }
        else
        {
          if (!v12)
            goto LABEL_264;
          if (v17 < 0)
          {
            std::string::__init_copy_ctor_external(v12, v141.__r_.__value_.__l.__data_, v18);
          }
          else
          {
            v25 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
            v12->__r_.__value_.__r.__words[2] = v141.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v25;
          }
          v38 = *(_DWORD *)v14;
          v12[1].__r_.__value_.__s.__data_[4] = v14[4];
          LODWORD(v12[1].__r_.__value_.__l.__data_) = v38;
          v12 = (std::string *)((char *)v12 + 32);
        }
      }
LABEL_14:
      v16 += 40;
      if (v16 == v15)
        goto LABEL_11;
    }
  }
  v140 = 0;
  memset(&v141, 0, sizeof(v141));
  v11 = 0;
  v12 = 0;
  v139 = 0;
  LOBYTE(v13) = 0;
  v137 = (char **)(a1 + 64);
  LOBYTE(v18) = 1;
  v76 = *(char **)(a1 + 64);
  v77 = *(char **)(a1 + 72);
  if (v76 == v77)
    goto LABEL_166;
LABEL_169:
  v7 = 0;
  v8 = "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension";
  do
  {
    if (v76[23] < 0)
    {
      v78 = *((_QWORD *)v76 + 1);
      if (v78 < 0)
        goto LABEL_264;
      v79 = *(char **)v76;
      if (v78 && v79 == 0)
        goto LABEL_264;
    }
    else
    {
      v78 = v76[23];
      v79 = v76;
    }
    if (v78 == 87
      && !memcmp("https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension", v79, 0x57uLL))
    {
      if ((a6 & 1) != 0)
      {
        v7 = (size_t)v76;
        if (v76[28])
          goto LABEL_183;
      }
      else if (!v76[28])
      {
LABEL_183:
        v7 = (size_t)v76;
        goto LABEL_185;
      }
    }
    v76 += 32;
  }
  while (v76 != v77);
  if (!v7)
  {
    v8 = (char *)a7;
    if ((v139 & 1) == 0)
      goto LABEL_195;
    goto LABEL_219;
  }
LABEL_185:
  v8 = (char *)a7;
  if ((unint64_t)v140 >= v141.__r_.__value_.__r.__words[2])
  {
    v140 = (std::string *)std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>(&v141.__r_.__value_.__l.__data_, v7);
    v141.__r_.__value_.__l.__size_ = (std::string::size_type)v140;
    if ((v139 & 1) != 0)
      goto LABEL_219;
  }
  else
  {
    if (!v140)
      goto LABEL_264;
    if (*(char *)(v7 + 23) < 0)
    {
      v82 = v140;
      std::string::__init_copy_ctor_external(v140, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v81 = *(_OWORD *)v7;
      v82 = v140;
      v140->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
      *(_OWORD *)&v140->__r_.__value_.__l.__data_ = v81;
    }
    v83 = *(_DWORD *)(v7 + 24);
    v82[1].__r_.__value_.__s.__data_[4] = *(_BYTE *)(v7 + 28);
    LODWORD(v82[1].__r_.__value_.__l.__data_) = v83;
    v140 = (std::string *)((char *)v82 + 32);
    v141.__r_.__value_.__l.__size_ = (std::string::size_type)&v82[1].__r_.__value_.__l.__size_;
    if ((v139 & 1) != 0)
      goto LABEL_219;
  }
LABEL_195:
  v84 = *v137;
  v85 = v137[1];
  if (*v137 != v85)
  {
    v7 = 0;
    v8 = "http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00";
    do
    {
      if (v84[23] < 0)
      {
        v86 = *((_QWORD *)v84 + 1);
        if (v86 < 0)
          goto LABEL_264;
        v87 = *(char **)v84;
        if (v86 && v87 == 0)
          goto LABEL_264;
      }
      else
      {
        v86 = v84[23];
        v87 = v84;
      }
      if (v86 == 72
        && !memcmp("http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00", v87, 0x48uLL))
      {
        if ((a6 & 1) != 0)
        {
          v7 = (size_t)v84;
          if (v84[28])
            goto LABEL_210;
        }
        else if (!v84[28])
        {
LABEL_210:
          v7 = (size_t)v84;
          goto LABEL_212;
        }
      }
      v84 += 32;
    }
    while (v84 != v85);
    if (!v7)
    {
      v8 = (char *)a7;
      goto LABEL_219;
    }
LABEL_212:
    v8 = (char *)a7;
    if ((unint64_t)v140 >= v141.__r_.__value_.__r.__words[2])
    {
      v140 = (std::string *)std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>(&v141.__r_.__value_.__l.__data_, v7);
      v141.__r_.__value_.__l.__size_ = (std::string::size_type)v140;
      if ((v13 & 1) != 0)
        goto LABEL_271;
    }
    else
    {
      if (!v140)
        goto LABEL_264;
      if ((*(char *)(v7 + 23) & 0x80000000) == 0)
      {
        v89 = *(_OWORD *)v7;
        v90 = v140;
        v140->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
        *(_OWORD *)&v140->__r_.__value_.__l.__data_ = v89;
        goto LABEL_266;
      }
LABEL_265:
      v90 = v140;
      std::string::__init_copy_ctor_external(v140, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
LABEL_266:
      v115 = *(_DWORD *)(v7 + 24);
      v90[1].__r_.__value_.__s.__data_[4] = *(_BYTE *)(v7 + 28);
      LODWORD(v90[1].__r_.__value_.__l.__data_) = v115;
      v140 = (std::string *)((char *)v90 + 32);
      v141.__r_.__value_.__l.__size_ = (std::string::size_type)&v90[1].__r_.__value_.__l.__size_;
      if ((v13 & 1) != 0)
        goto LABEL_271;
    }
    goto LABEL_220;
  }
LABEL_219:
  if ((v13 & 1) != 0)
    goto LABEL_271;
LABEL_220:
  v91 = (size_t)*v137;
  v92 = v137[1];
  if (*v137 == v92)
    goto LABEL_271;
  v7 = 0;
  while (1)
  {
    if (*(char *)(v91 + 23) < 0)
    {
      v93 = *(_QWORD *)(v91 + 8);
      if (v93 < 0)
        goto LABEL_264;
      v94 = *(uint64_t **)v91;
      if (v93 && v94 == 0)
        goto LABEL_264;
    }
    else
    {
      v93 = *(unsigned __int8 *)(v91 + 23);
      v94 = (uint64_t *)v91;
    }
    if (v93 == 61)
    {
      v96 = *v94;
      v97 = v94[1];
      v98 = v94[2];
      v99 = v94[3];
      v100 = v94[4];
      v101 = v94[5];
      v102 = v94[6];
      v103 = *(uint64_t *)((char *)v94 + 53);
      v104 = *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time" == v96
          && *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/abs-capture-time" == v97;
      v105 = v104 && *(_QWORD *)"c.org/experiments/rtp-hdrext/abs-capture-time" == v98;
      v106 = v105 && *(_QWORD *)"periments/rtp-hdrext/abs-capture-time" == v99;
      v107 = v106 && *(_QWORD *)"s/rtp-hdrext/abs-capture-time" == v100;
      v108 = v107 && *(_QWORD *)"rext/abs-capture-time" == v101;
      v109 = v108 && *(_QWORD *)"-capture-time" == v102;
      if (v109 && *(_QWORD *)"ure-time" == v103)
      {
        if ((a6 & 1) == 0)
        {
          if (!*(_BYTE *)(v91 + 28))
            break;
          goto LABEL_223;
        }
        v7 = v91;
        if (*(_BYTE *)(v91 + 28))
          break;
      }
    }
LABEL_223:
    v91 += 32;
    if ((char *)v91 == v92)
    {
      if (!v7)
        goto LABEL_271;
      v111 = v140;
      if ((unint64_t)v140 >= v141.__r_.__value_.__r.__words[2])
        goto LABEL_258;
      goto LABEL_261;
    }
  }
  v7 = v91;
  v111 = v140;
  if ((unint64_t)v140 >= v141.__r_.__value_.__r.__words[2])
  {
LABEL_258:
    v112 = std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>(&v141.__r_.__value_.__l.__data_, v7);
    goto LABEL_270;
  }
LABEL_261:
  if (!v111)
    goto LABEL_264;
  if (*(char *)(v7 + 23) < 0)
  {
    v114 = v140;
    std::string::__init_copy_ctor_external(v140, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    v113 = *(_OWORD *)v7;
    v114 = v140;
    v140->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
    *(_OWORD *)&v140->__r_.__value_.__l.__data_ = v113;
  }
  v116 = *(_DWORD *)(v7 + 24);
  v114[1].__r_.__value_.__s.__data_[4] = *(_BYTE *)(v7 + 28);
  LODWORD(v114[1].__r_.__value_.__l.__data_) = v116;
  v112 = &v114[1].__r_.__value_.__s.__data_[8];
LABEL_270:
  v140 = (std::string *)v112;
  v141.__r_.__value_.__l.__size_ = (std::string::size_type)v112;
LABEL_271:
  if (v8 + 64 != (char *)&v141)
    std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)v8 + 8, (uint64_t)v141.__r_.__value_.__l.__data_, (uint64_t)v140, (uint64_t)((uint64_t)v140 - v141.__r_.__value_.__r.__words[0]) >> 5);
  v8[88] = 1;
  v117 = *(_BYTE *)(a3 + 1);
  if (v117)
    v117 = *(_BYTE *)(a1 + 32) != 0;
  v8[32] = v117;
  if ((*(unsigned int (**)(char *))(*(_QWORD *)v8 + 16))(v8) == 1)
    v8[33] = *(_BYTE *)(a1 + 33);
  v8[34] = *(_BYTE *)(a1 + 34);
  v118 = *(_DWORD *)(a1 + 124);
  v119 = *(_DWORD *)(a2 + 32);
  v121 = (v118 & 0xFFFFFFFD) == 0 && v119 < 2;
  v123 = (v119 & 0xFFFFFFFD) == 0 && v118 < 2;
  v124 = !v123;
  if (!v121 || v124)
  {
    v126 = v123 || !v121;
    if (v121 | v124)
      v127 = 3;
    else
      v127 = 2;
    if (v126 != 1)
      v127 = 1;
    *((_DWORD *)v8 + 31) = v127;
    v125 = v141.__r_.__value_.__r.__words[0];
    if (v141.__r_.__value_.__r.__words[0])
      goto LABEL_299;
  }
  else
  {
    *((_DWORD *)v8 + 31) = 0;
    v125 = v141.__r_.__value_.__r.__words[0];
    if (!v141.__r_.__value_.__r.__words[0])
      goto LABEL_306;
LABEL_299:
    v128 = v141.__r_.__value_.__l.__size_;
    v129 = (void *)v125;
    if (v141.__r_.__value_.__l.__size_ != v125)
    {
      do
      {
        if (*(char *)(v128 - 9) < 0)
          operator delete(*(void **)(v128 - 32));
        v128 -= 32;
      }
      while (v128 != v125);
      v129 = (void *)v141.__r_.__value_.__r.__words[0];
    }
    v141.__r_.__value_.__l.__size_ = v125;
    operator delete(v129);
  }
LABEL_306:
  if (v11)
  {
    if ((v18 & 1) == 0)
    {
      do
      {
        if (v12[-1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v12[-2].__r_.__value_.__r.__words[2]);
        v12 = (std::string *)((char *)v12 - 32);
      }
      while (v12 != v11);
    }
    operator delete(v11);
  }
}

void cricket::`anonymous namespace'::ComputeCodecsUnion(uint64_t a1, cricket::Codec *a2, cricket::Codec *a3, cricket::Codec **a4)
{
  const cricket::Codec *v7;
  cricket::Codec *v8;
  cricket::Codec *v9;
  uint64_t v10[2];
  int v11;
  _QWORD **v12;
  _QWORD *v13[2];
  _BYTE v14[216];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v10[1] = 0x7F00000023;
  v11 = 127;
  v13[0] = 0;
  v13[1] = 0;
  v12 = v13;
  v10[0] = (uint64_t)&off_24C0B6CE0;
  if (a2 != a3)
  {
    v7 = a2;
    do
    {
      cricket::Codec::Codec((cricket::Codec *)v14, v7);
      cricket::UsedIds<cricket::Codec>::FindAndSetIdUsed(v10, (uint64_t)v14);
      v9 = *(cricket::Codec **)(a1 + 8);
      if ((unint64_t)v9 >= *(_QWORD *)(a1 + 16))
      {
        v8 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)a1, (const cricket::Codec *)v14);
      }
      else
      {
        if (!v9)
          __break(1u);
        v8 = (cricket::Codec *)((char *)cricket::Codec::Codec(v9, (const cricket::Codec *)v14) + 216);
      }
      *(_QWORD *)(a1 + 8) = v8;
      cricket::Codec::~Codec((cricket::Codec *)v14);
      v7 = (const cricket::Codec *)((char *)v7 + 216);
    }
    while (v7 != a3);
  }
  v10[0] = (uint64_t)&off_24C0B6D10;
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v12, v13[0]);
}

uint64_t cricket::GetFirstAudioContent(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    v1 = *a1;
    v2 = a1[1];
    while (v1 != v2)
    {
      if (v1)
      {
        v3 = *(_QWORD *)(v1 + 32);
        if (v3)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3))
            return v1;
        }
      }
      v1 += 40;
    }
  }
  return 0;
}

uint64_t cricket::GetFirstVideoContent(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    v1 = *a1;
    v2 = a1[1];
    while (v1 != v2)
    {
      if (v1)
      {
        v3 = *(_QWORD *)(v1 + 32);
        if (v3)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3) == 1)
            return v1;
        }
      }
      v1 += 40;
    }
  }
  return 0;
}

uint64_t cricket::GetFirstAudioContentDescription(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    v1 = *a1;
    v2 = a1[1];
    while (v1 != v2)
    {
      if (v1)
      {
        v3 = *(_QWORD *)(v1 + 32);
        if (v3)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3))
          {
            v4 = *(_QWORD *)(v1 + 32);
            if (!v4)
              return 0;
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
          }
        }
      }
      v1 += 40;
    }
  }
  return 0;
}

uint64_t cricket::GetFirstVideoContentDescription(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    v1 = *a1;
    v2 = a1[1];
    while (v1 != v2)
    {
      if (v1)
      {
        v3 = *(_QWORD *)(v1 + 32);
        if (v3)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3) == 1)
          {
            v4 = *(_QWORD *)(v1 + 32);
            if (!v4)
              return 0;
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
          }
        }
      }
      v1 += 40;
    }
  }
  return 0;
}

void std::vector<std::vector<cricket::SimulcastLayer>>::__assign_with_size[abi:sn180100]<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  std::string **v9;
  void **v10;
  std::string **v11;
  void **v12;
  void *v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  uint64_t *v18;
  uint64_t v19;
  std::string **v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  void **v29;
  void *v30;
  void **v31;
  void **v32;
  void **v33;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < a4)
  {
    if (v9)
    {
      v10 = *(void ***)(a1 + 8);
      v11 = *(std::string ***)a1;
      if (v10 != (void **)v9)
      {
        v12 = *(void ***)(a1 + 8);
        do
        {
          v15 = (void **)*(v12 - 3);
          v12 -= 3;
          v14 = v15;
          if (v15)
          {
            v16 = (void **)*(v10 - 2);
            v13 = v14;
            if (v16 != v14)
            {
              do
              {
                if (*((char *)v16 - 9) < 0)
                  operator delete(*(v16 - 4));
                v16 -= 4;
              }
              while (v16 != v14);
              v13 = *v12;
            }
            *(v10 - 2) = v14;
            operator delete(v13);
          }
          v10 = v12;
        }
        while (v12 != (void **)v9);
        v11 = *(std::string ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_52;
    v21 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v22 = 2 * v21;
    if (2 * v21 <= a4)
      v22 = a4;
    v23 = v21 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v22;
    if (v23 > 0xAAAAAAAAAAAAAAALL)
LABEL_52:
      abort();
    v24 = 24 * v23;
    v25 = (char *)operator new(24 * v23);
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v25;
    *(_QWORD *)(a1 + 16) = &v25[v24];
    v26 = a1;
    v27 = v6;
    v28 = a3;
LABEL_39:
    std::vector<std::vector<cricket::SimulcastLayer>>::__construct_at_end<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>(v26, v27, v28);
    return;
  }
  v17 = *(void ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v9) >> 3) < a4)
  {
    v18 = &a2[((char *)v17 - (char *)v9) >> 3];
    if (v17 != (void **)v9)
    {
      v19 = 8 * (((char *)v17 - (char *)v9) >> 3);
      do
      {
        if (v6 != (uint64_t *)v9)
          std::vector<cricket::SimulcastLayer>::__assign_with_size[abi:sn180100]<cricket::SimulcastLayer*,cricket::SimulcastLayer*>(v9, *v6, v6[1], (v6[1] - *v6) >> 5);
        v6 += 3;
        v9 += 3;
        v19 -= 24;
      }
      while (v19);
    }
    v26 = a1;
    v27 = v18;
    v28 = a3;
    goto LABEL_39;
  }
  if (a2 != a3)
  {
    v20 = *(std::string ***)a1;
    do
    {
      if (v6 != (uint64_t *)v9)
        std::vector<cricket::SimulcastLayer>::__assign_with_size[abi:sn180100]<cricket::SimulcastLayer*,cricket::SimulcastLayer*>(v9, *v6, v6[1], (v6[1] - *v6) >> 5);
      v6 += 3;
      v9 += 3;
      v20 += 3;
    }
    while (v6 != a3);
    v17 = *(void ***)(a1 + 8);
    if (v17 == (void **)v20)
      goto LABEL_51;
    goto LABEL_41;
  }
  v20 = *(std::string ***)a1;
  if (v17 != (void **)v9)
  {
LABEL_41:
    v29 = v17;
    do
    {
      v32 = (void **)*(v29 - 3);
      v29 -= 3;
      v31 = v32;
      if (v32)
      {
        v33 = (void **)*(v17 - 2);
        v30 = v31;
        if (v33 != v31)
        {
          do
          {
            if (*((char *)v33 - 9) < 0)
              operator delete(*(v33 - 4));
            v33 -= 4;
          }
          while (v33 != v31);
          v30 = *v29;
        }
        *(v17 - 2) = v31;
        operator delete(v30);
      }
      v17 = v29;
    }
    while (v29 != (void **)v20);
  }
LABEL_51:
  *(_QWORD *)(a1 + 8) = v20;
}

void std::vector<std::vector<cricket::SimulcastLayer>>::__construct_at_end<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  std::string *v13;
  __int128 *v14;
  __int128 v15;

  v4 = *(_QWORD **)(a1 + 8);
  if (a2 != a3)
  {
    v6 = a2;
    while (v4)
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      v7 = *v6;
      v8 = v6[1];
      v9 = v8 - *v6;
      if (v8 != *v6)
      {
        if (v9 < 0)
          goto LABEL_15;
        v10 = v9 >> 5;
        v11 = operator new(v9);
        v12 = 0;
        *v4 = v11;
        v4[1] = v11;
        v4[2] = &v11[32 * v10];
        do
        {
          v13 = (std::string *)&v11[v12];
          v14 = (__int128 *)(v7 + v12);
          if (*(char *)(v7 + v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
          }
          else
          {
            v15 = *v14;
            v13->__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
            *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
          }
          v11[v12 + 24] = *(_BYTE *)(v7 + v12 + 24);
          v12 += 32;
        }
        while (v7 + v12 != v8);
        v4[1] = &v11[v12];
      }
      v6 += 3;
      v4 += 3;
      if (v6 == a3)
        goto LABEL_13;
    }
    __break(1u);
LABEL_15:
    abort();
  }
LABEL_13:
  *(_QWORD *)(a1 + 8) = v4;
}

void std::vector<cricket::SimulcastLayer>::__assign_with_size[abi:sn180100]<cricket::SimulcastLayer*,cricket::SimulcastLayer*>(std::string **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const std::string::value_type *v17;
  size_t v18;
  char *v19;
  __int128 *v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  const std::string::value_type *v24;
  size_t v25;
  __int128 *v26;
  char *v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  std::string *v34;
  std::string *v35;
  uint64_t v36;
  __int128 v37;
  std::string *v38;
  __int128 *v39;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (a4 > (v8 - (uint64_t)*a1) >> 5)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (v10[-1].__r_.__value_.__s.__data_[15] < 0)
            operator delete((void *)v10[-2].__r_.__value_.__r.__words[2]);
          v10 = (std::string *)((char *)v10 - 32);
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (!(a4 >> 59))
    {
      v30 = v8 >> 4;
      if (v8 >> 4 <= a4)
        v30 = a4;
      v31 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
      v32 = 0x7FFFFFFFFFFFFFFLL;
      if (!v31)
        v32 = v30;
      if (!(v32 >> 59))
      {
        v33 = 32 * v32;
        v34 = (std::string *)operator new(32 * v32);
        *a1 = v34;
        a1[1] = v34;
        a1[2] = (std::string *)((char *)v34 + v33);
        while (v6 != a3)
        {
          if (*(char *)(v6 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
          }
          else
          {
            *(_OWORD *)&v34->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
            v34->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
          }
          v34[1].__r_.__value_.__s.__data_[0] = *(_BYTE *)(v6 + 24);
          v6 += 32;
          v34 = (std::string *)((char *)v34 + 32);
        }
        a1[1] = v34;
        return;
      }
    }
LABEL_71:
    abort();
  }
  v12 = a1[1];
  v13 = ((char *)v12 - (char *)v9) >> 5;
  if (v13 < a4)
  {
    v14 = a2 + 32 * v13;
    if (v12 != v9)
    {
      v15 = 0;
      v16 = 32 * v13;
      do
      {
        v19 = (char *)v9 + v15;
        v20 = (__int128 *)(v6 + v15);
        if ((std::string *)v6 != v9)
        {
          v21 = *((_BYTE *)v20 + 23);
          if (v19[23] < 0)
          {
            if (v21 >= 0)
              v17 = (const std::string::value_type *)(v6 + v15);
            else
              v17 = *(const std::string::value_type **)(v6 + v15);
            if (v21 >= 0)
              v18 = *((unsigned __int8 *)v20 + 23);
            else
              v18 = *(_QWORD *)(v6 + v15 + 8);
            std::string::__assign_no_alias<false>((std::string *)((char *)v9 + v15), v17, v18);
          }
          else if ((*((_BYTE *)v20 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(&v9->__r_.__value_.__r.__words[v15 / 8], *(char **)(v6 + v15), *(_QWORD *)(v6 + v15 + 8));
          }
          else
          {
            v22 = *v20;
            *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
            *(_OWORD *)v19 = v22;
          }
        }
        v19[24] = *((_BYTE *)v20 + 24);
        v15 += 32;
      }
      while (v16 != v15);
      v9 = a1[1];
    }
    v35 = v9;
    if (v14 == a3)
    {
LABEL_69:
      a1[1] = v35;
      return;
    }
    v36 = 0;
    while (1)
    {
      v38 = (std::string *)((char *)v9 + v36);
      if (!(std::string *)((char *)v9 + v36))
        break;
      v39 = (__int128 *)(v14 + v36);
      if (*(char *)(v14 + v36 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)(v14 + v36), *(_QWORD *)(v14 + v36 + 8));
      }
      else
      {
        v37 = *v39;
        v38->__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v37;
      }
      v9[1].__r_.__value_.__s.__data_[v36] = *(_BYTE *)(v14 + v36 + 24);
      v36 += 32;
      if (v14 + v36 == a3)
      {
        v35 = (std::string *)((char *)v9 + v36);
        goto LABEL_69;
      }
    }
    __break(1u);
    goto LABEL_71;
  }
  if (a2 != a3)
  {
    v23 = 0;
    do
    {
      v26 = (__int128 *)(v6 + v23);
      v27 = (char *)v9 + v23;
      if ((std::string *)v6 != v9)
      {
        v28 = *((_BYTE *)v26 + 23);
        if (v27[23] < 0)
        {
          if (v28 >= 0)
            v24 = (const std::string::value_type *)(v6 + v23);
          else
            v24 = *(const std::string::value_type **)(v6 + v23);
          if (v28 >= 0)
            v25 = *((unsigned __int8 *)v26 + 23);
          else
            v25 = *(_QWORD *)(v6 + v23 + 8);
          std::string::__assign_no_alias<false>((std::string *)((char *)v9 + v23), v24, v25);
        }
        else if ((*((_BYTE *)v26 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(&v9->__r_.__value_.__r.__words[v23 / 8], *(char **)(v6 + v23), *(_QWORD *)(v6 + v23 + 8));
        }
        else
        {
          v29 = *v26;
          *((_QWORD *)v27 + 2) = *((_QWORD *)v26 + 2);
          *(_OWORD *)v27 = v29;
        }
      }
      v27[24] = *((_BYTE *)v26 + 24);
      v23 += 32;
    }
    while (v6 + v23 != a3);
    v12 = a1[1];
    v9 = (std::string *)((char *)v9 + v23);
  }
  while (v12 != v9)
  {
    if (v12[-1].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)v12[-2].__r_.__value_.__r.__words[2]);
    v12 = (std::string *)((char *)v12 - 32);
  }
  a1[1] = v9;
}

void std::vector<cricket::RidDescription>::__assign_with_size[abi:sn180100]<cricket::RidDescription*,cricket::RidDescription*>(uint64_t a1, const cricket::RidDescription *a2, const cricket::RidDescription *a3, unint64_t a4)
{
  const cricket::RidDescription *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string::pointer data;
  std::string *v13;
  const cricket::RidDescription *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::string *v24;
  std::string *v25;
  std::string::pointer v26;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(_QWORD *)a1) >> 4) < a4)
  {
    if (v9)
    {
      v10 = *(std::string **)(a1 + 8);
      v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v10[-1], v10[-1].__r_.__value_.__l.__size_);
          data = v10[-2].__r_.__value_.__l.__data_;
          if (data)
          {
            v10[-2].__r_.__value_.__l.__size_ = (std::string::size_type)data;
            operator delete(data);
          }
          if (v10[-3].__r_.__value_.__s.__data_[15] < 0)
            operator delete((void *)v10[-4].__r_.__value_.__r.__words[2]);
          v10 = (std::string *)((char *)v10 - 80);
        }
        while (v10 != v9);
        v11 = *(std::string **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 <= 0x333333333333333)
    {
      v20 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
      v21 = 2 * v20;
      if (2 * v20 <= a4)
        v21 = a4;
      v22 = v20 >= 0x199999999999999 ? 0x333333333333333 : v21;
      if (v22 <= 0x333333333333333)
      {
        v23 = 80 * v22;
        v24 = (std::string *)operator new(80 * v22);
        *(_QWORD *)a1 = v24;
        *(_QWORD *)(a1 + 8) = v24;
        for (*(_QWORD *)(a1 + 16) = (char *)v24 + v23; v6 != a3; v24 = (std::string *)((char *)v25 + 80))
        {
          v25 = cricket::RidDescription::RidDescription(v24, v6);
          v6 = (const cricket::RidDescription *)((char *)v6 + 80);
        }
        *(_QWORD *)(a1 + 8) = v24;
        return;
      }
    }
LABEL_45:
    abort();
  }
  v13 = *(std::string **)(a1 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v13 - (char *)v9) >> 4) < a4)
  {
    v14 = (const cricket::RidDescription *)((char *)a2 + 16 * (((char *)v13 - (char *)v9) >> 4));
    if (v13 != v9)
    {
      v15 = 16 * (((char *)v13 - (char *)v9) >> 4);
      do
      {
        cricket::RidDescription::operator=(v9, (std::string *)v6);
        v6 = (const cricket::RidDescription *)((char *)v6 + 80);
        v9 = (std::string *)((char *)v9 + 80);
        v15 -= 80;
      }
      while (v15);
      v9 = *(std::string **)(a1 + 8);
    }
    v16 = v9;
    if (v14 == a3)
    {
LABEL_19:
      *(_QWORD *)(a1 + 8) = v16;
      return;
    }
    v16 = v9;
    v17 = v9;
    while (v17)
    {
      v18 = cricket::RidDescription::RidDescription(v17, v14);
      v14 = (const cricket::RidDescription *)((char *)v14 + 80);
      v17 = (std::string *)((char *)v18 + 80);
      v16 = (std::string *)((char *)v16 + 80);
      if (v14 == a3)
        goto LABEL_19;
    }
    __break(1u);
    goto LABEL_45;
  }
  if (a2 == a3)
  {
    v19 = *(std::string **)a1;
  }
  else
  {
    v19 = *(std::string **)a1;
    do
    {
      cricket::RidDescription::operator=(v9, (std::string *)v6);
      v6 = (const cricket::RidDescription *)((char *)v6 + 80);
      v9 = (std::string *)((char *)v9 + 80);
      v19 = (std::string *)((char *)v19 + 80);
    }
    while (v6 != a3);
    v13 = *(std::string **)(a1 + 8);
  }
  while (v13 != v19)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13[-1], v13[-1].__r_.__value_.__l.__size_);
    v26 = v13[-2].__r_.__value_.__l.__data_;
    if (v26)
    {
      v13[-2].__r_.__value_.__l.__size_ = (std::string::size_type)v26;
      operator delete(v26);
    }
    if (v13[-3].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)v13[-4].__r_.__value_.__r.__words[2]);
    v13 = (std::string *)((char *)v13 - 80);
  }
  *(_QWORD *)(a1 + 8) = v19;
}

std::string *std::vector<cricket::SenderOptions>::__push_back_slow_path<cricket::SenderOptions const&>(std::string **a1, const cricket::SenderOptions *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  cricket::SenderOptions *v12;
  cricket::SenderOptions *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  cricket::SenderOptions *v18;

  v2 = 0x4EC4EC4EC4EC4EC5 * (((char *)a1[1] - (char *)*a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x276276276276276)
    abort();
  if (0x9D89D89D89D89D8ALL * (((char *)a1[2] - (char *)*a1) >> 3) > v3)
    v3 = 0x9D89D89D89D89D8ALL * (((char *)a1[2] - (char *)*a1) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((char *)a1[2] - (char *)*a1) >> 3)) >= 0x13B13B13B13B13BLL)
    v5 = 0x276276276276276;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_21:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x276276276276276)
    goto LABEL_21;
  v7 = 104 * v5;
  v8 = (char *)operator new(104 * v5);
  v9 = (std::string *)&v8[v7];
  v10 = cricket::SenderOptions::SenderOptions((std::string *)&v8[104 * v2], a2);
  v11 = (std::string *)((char *)v10 + 104);
  v12 = (cricket::SenderOptions *)*a1;
  v13 = (cricket::SenderOptions *)a1[1];
  if (v13 == (cricket::SenderOptions *)*a1)
  {
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13)
      return v11;
    goto LABEL_15;
  }
  v14 = 0;
  do
  {
    v15 = (char *)v13 + v14;
    v16 = (char *)v10 + v14;
    v17 = *(_OWORD *)((char *)v13 + v14 - 104);
    *((_QWORD *)v16 - 11) = *(_QWORD *)((char *)v13 + v14 - 88);
    *(_OWORD *)(v16 - 104) = v17;
    *((_QWORD *)v15 - 12) = 0;
    *((_QWORD *)v15 - 11) = 0;
    *((_QWORD *)v15 - 13) = 0;
    *((_QWORD *)v16 - 10) = 0;
    *((_QWORD *)v16 - 9) = 0;
    *((_QWORD *)v16 - 8) = 0;
    *((_OWORD *)v16 - 5) = *(_OWORD *)((char *)v13 + v14 - 80);
    *((_QWORD *)v16 - 8) = *(_QWORD *)((char *)v13 + v14 - 64);
    *((_QWORD *)v15 - 10) = 0;
    *((_QWORD *)v15 - 9) = 0;
    *((_QWORD *)v15 - 8) = 0;
    *((_QWORD *)v16 - 7) = 0;
    *((_QWORD *)v16 - 6) = 0;
    *((_QWORD *)v16 - 5) = 0;
    *(_OWORD *)(v16 - 56) = *(_OWORD *)((char *)v13 + v14 - 56);
    *((_QWORD *)v16 - 5) = *(_QWORD *)((char *)v13 + v14 - 40);
    *((_QWORD *)v15 - 7) = 0;
    *((_QWORD *)v15 - 6) = 0;
    *((_QWORD *)v15 - 5) = 0;
    *((_QWORD *)v16 - 4) = 0;
    *((_QWORD *)v16 - 3) = 0;
    *((_QWORD *)v16 - 2) = 0;
    *((_OWORD *)v16 - 2) = *(_OWORD *)((char *)v13 + v14 - 32);
    *((_QWORD *)v16 - 2) = *(_QWORD *)((char *)v13 + v14 - 16);
    *((_QWORD *)v15 - 4) = 0;
    *((_QWORD *)v15 - 3) = 0;
    *((_QWORD *)v15 - 2) = 0;
    *((_DWORD *)v16 - 2) = *(_DWORD *)((char *)v13 + v14 - 8);
    v14 -= 104;
  }
  while ((cricket::SenderOptions *)((char *)v13 + v14) != v12);
  v13 = (cricket::SenderOptions *)*a1;
  v18 = (cricket::SenderOptions *)a1[1];
  *a1 = (std::string *)((char *)v10 + v14);
  a1[1] = v11;
  a1[2] = v9;
  while (v18 != v13)
  {
    v18 = (cricket::SenderOptions *)((char *)v18 - 104);
    cricket::SenderOptions::~SenderOptions(v18);
  }
  if (v13)
LABEL_15:
    operator delete(v13);
  return v11;
}

std::string *cricket::SenderOptions::SenderOptions(std::string *this, const cricket::SenderOptions *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  int64_t v22;
  unint64_t v23;
  void *v24;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  v5 = *((_QWORD *)a2 + 3);
  v6 = *((_QWORD *)a2 + 4);
  v7 = v6 - v5;
  if (v6 != v5)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_20;
    v9 = (char *)operator new(v7);
    v10 = 0;
    this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v9;
    this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v9[24 * v8];
    do
    {
      while (1)
      {
        v11 = (__int128 *)(v5 + v10);
        v12 = (std::string *)&v9[v10];
        if ((*(char *)(v5 + v10 + 23) & 0x80000000) == 0)
          break;
        std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
        v10 += 24;
        if (v5 + v10 == v6)
          goto LABEL_10;
      }
      v13 = *v11;
      v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      v10 += 24;
    }
    while (v5 + v10 != v6);
LABEL_10:
    this[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v9[v10];
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  v14 = *((_QWORD *)a2 + 6);
  v15 = *((_QWORD *)a2 + 7);
  v16 = v15 - v14;
  if (v15 != v14)
  {
    v17 = 0xCCCCCCCCCCCCCCCDLL * (v16 >> 4);
    if (v17 >= 0x333333333333334)
      goto LABEL_20;
    v18 = (char *)operator new(v16);
    v19 = 0;
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    this[2].__r_.__value_.__l.__size_ = (std::string::size_type)v18;
    this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)&v18[80 * v17];
    do
    {
      cricket::RidDescription::RidDescription((std::string *)&v18[v19], (const cricket::RidDescription *)(v14 + v19));
      v19 += 80;
    }
    while (v14 + v19 != v15);
    this[2].__r_.__value_.__l.__size_ = (std::string::size_type)&v18[v19];
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  v20 = (uint64_t *)*((_QWORD *)a2 + 9);
  v21 = (uint64_t *)*((_QWORD *)a2 + 10);
  v22 = (char *)v21 - (char *)v20;
  if (v21 != v20)
  {
    v23 = 0xAAAAAAAAAAAAAAABLL * (v22 >> 3);
    if (v23 <= 0xAAAAAAAAAAAAAAALL)
    {
      v24 = operator new(v22);
      this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      this[3].__r_.__value_.__l.__size_ = (std::string::size_type)v24;
      this[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v24 + 24 * v23;
      std::vector<std::vector<cricket::SimulcastLayer>>::__construct_at_end<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>((uint64_t)&this[3], v20, v21);
      goto LABEL_19;
    }
LABEL_20:
    abort();
  }
LABEL_19:
  LODWORD(this[4].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 24);
  return this;
}

void cricket::SenderOptions::~SenderOptions(cricket::SenderOptions *this)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void *v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v2 = (void **)*((_QWORD *)this + 9);
  if (v2)
  {
    v3 = (void **)*((_QWORD *)this + 10);
    v4 = (void *)*((_QWORD *)this + 9);
    if (v3 != v2)
    {
      v5 = (void **)*((_QWORD *)this + 10);
      do
      {
        v8 = (void **)*(v5 - 3);
        v5 -= 3;
        v7 = v8;
        if (v8)
        {
          v9 = (void **)*(v3 - 2);
          v6 = v7;
          if (v9 != v7)
          {
            do
            {
              if (*((char *)v9 - 9) < 0)
                operator delete(*(v9 - 4));
              v9 -= 4;
            }
            while (v9 != v7);
            v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v2;
    operator delete(v4);
  }
  v10 = *((_QWORD *)this + 6);
  if (v10)
  {
    v11 = *((_QWORD *)this + 7);
    v12 = (void *)*((_QWORD *)this + 6);
    if (v11 != v10)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v11 - 24, *(_QWORD *)(v11 - 16));
        v13 = *(void **)(v11 - 48);
        if (v13)
        {
          *(_QWORD *)(v11 - 40) = v13;
          operator delete(v13);
        }
        if (*(char *)(v11 - 57) < 0)
          operator delete(*(void **)(v11 - 80));
        v11 -= 80;
      }
      while (v11 != v10);
      v12 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v10;
    operator delete(v12);
  }
  v14 = *((_QWORD *)this + 3);
  if (v14)
  {
    v15 = *((_QWORD *)this + 4);
    v16 = (void *)*((_QWORD *)this + 3);
    if (v15 != v14)
    {
      do
      {
        if (*(char *)(v15 - 1) < 0)
          operator delete(*(void **)(v15 - 24));
        v15 -= 24;
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v14;
    operator delete(v16);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t cricket::MediaSessionDescriptionFactory::filtered_rtp_header_extensions(std::vector<webrtc::RtpExtension>)const::$_0::operator()(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(unsigned __int8 *)(result + 23);
  v2 = (uint64_t *)result;
  v3 = v1;
  if (*(char *)(result + 23) < 0)
  {
    v3 = *(_QWORD *)(result + 8);
    if (v3 < 0)
      goto LABEL_70;
    v2 = *(uint64_t **)result;
    if (v3 && v2 == 0)
      goto LABEL_70;
  }
  if (v3 == 35)
  {
    v5 = *v2;
    v6 = v2[1];
    v7 = v2[2];
    v8 = v2[3];
    v9 = *(uint64_t *)((char *)v2 + 27);
    v10 = v5 == *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:mid" && v6 == *(_QWORD *)":params:rtp-hdrext:sdes:mid";
    v11 = v10 && v7 == *(_QWORD *)"rtp-hdrext:sdes:mid";
    v12 = v11 && v8 == *(_QWORD *)"xt:sdes:mid";
    if (v12 && v9 == *(_QWORD *)"sdes:mid")
      return 1;
  }
  v14 = (uint64_t *)result;
  v15 = *(unsigned __int8 *)(result + 23);
  if ((v1 & 0x80) != 0)
  {
    v15 = *(_QWORD *)(result + 8);
    if (v15 < 0)
      goto LABEL_70;
    v14 = *(uint64_t **)result;
    if (v15)
    {
      if (!v14)
        goto LABEL_70;
    }
  }
  if (v15 == 45)
  {
    v16 = *v14;
    v17 = v14[1];
    v18 = v14[2];
    v19 = v14[3];
    v20 = v14[4];
    v21 = *(uint64_t *)((char *)v14 + 37);
    v22 = v16 == *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id"
       && v17 == *(_QWORD *)":params:rtp-hdrext:sdes:rtp-stream-id";
    v23 = v22 && v18 == *(_QWORD *)"rtp-hdrext:sdes:rtp-stream-id";
    v24 = v23 && v19 == *(_QWORD *)"xt:sdes:rtp-stream-id";
    v25 = v24 && v20 == *(_QWORD *)"rtp-stream-id";
    if (v25 && v21 == *(_QWORD *)"tream-id")
      return 1;
  }
  if ((v1 & 0x80) != 0)
  {
    v1 = *(_QWORD *)(result + 8);
    if (v1 < 0 || (result = *(_QWORD *)result, v1) && !result)
    {
LABEL_70:
      __break(1u);
      return result;
    }
  }
  if (v1 != 54)
    return 0;
  v27 = *(_QWORD *)result;
  v28 = *(_QWORD *)(result + 8);
  v29 = *(_QWORD *)(result + 16);
  v30 = *(_QWORD *)(result + 24);
  v32 = *(_QWORD *)(result + 32);
  v31 = *(_QWORD *)(result + 40);
  v33 = *(_QWORD *)(result + 46);
  return v27 == *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id"
      && v28 == *(_QWORD *)":params:rtp-hdrext:sdes:repaired-rtp-stream-id"
      && v29 == *(_QWORD *)"rtp-hdrext:sdes:repaired-rtp-stream-id"
      && v30 == *(_QWORD *)"xt:sdes:repaired-rtp-stream-id"
      && v32 == *(_QWORD *)"repaired-rtp-stream-id"
      && v31 == *(_QWORD *)"-rtp-stream-id"
      && v33 == *(_QWORD *)"tream-id";
}

std::string *std::vector<cricket::ContentGroup>::__push_back_slow_path<cricket::ContentGroup const&>(std::string **a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  void **v12;
  void **v13;
  __int128 v14;
  std::string *v15;
  std::string::pointer data;
  std::string::size_type size;
  std::string::pointer v18;
  void **p_data;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v5 = 0x555555555555555;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_30:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x555555555555555)
    goto LABEL_30;
  v7 = 2 * v5;
  v8 = (std::string *)operator new(48 * v5);
  v9 = &v8[v7];
  v10 = cricket::ContentGroup::ContentGroup(v8 + 2 * v2, a2);
  v11 = v10 + 2;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 == (void **)*a1)
  {
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      v10[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v13 - 4);
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v10[-1].__r_.__value_.__r.__words[0] = 0;
      v10[-1].__r_.__value_.__l.__size_ = 0;
      v10[-1].__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = *(_OWORD *)(v13 - 3);
      v10[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v13 - 1);
      v10 -= 2;
      *(v13 - 3) = 0;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v15 = a1[1];
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v9;
    if (v15 != (std::string *)v13)
    {
      do
      {
        data = v15[-1].__r_.__value_.__l.__data_;
        if (data)
        {
          size = v15[-1].__r_.__value_.__l.__size_;
          v18 = v15[-1].__r_.__value_.__l.__data_;
          if ((std::string::pointer)size != data)
          {
            do
            {
              if (*(char *)(size - 1) < 0)
                operator delete(*(void **)(size - 24));
              size -= 24;
            }
            while ((std::string::pointer)size != data);
            v18 = v15[-1].__r_.__value_.__l.__data_;
          }
          v15[-1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
          operator delete(v18);
        }
        p_data = (void **)&v15[-2].__r_.__value_.__l.__data_;
        if (SHIBYTE(v15[-2].__r_.__value_.__r.__words[2]) < 0)
          operator delete(*p_data);
        v15 -= 2;
      }
      while (p_data != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t *cricket::UsedIds<cricket::Codec>::FindAndSetIdUsed(uint64_t *result, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v2 = *(_DWORD *)(a2 + 12);
  if (v2 > *((_DWORD *)result + 3))
    return result;
  v3 = result;
  if (v2 < *((_DWORD *)result + 2))
    return result;
  result = (uint64_t *)(*(uint64_t (**)(uint64_t *, _QWORD))(*result + 16))(result, *(unsigned int *)(a2 + 12));
  if (!(_DWORD)result)
  {
    v6 = v3 + 4;
    v5 = v3[4];
    if (v5)
      goto LABEL_9;
LABEL_7:
    v7 = v6;
LABEL_13:
    v9 = operator new(0x20uLL);
    v9[7] = v2;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t)v9;
    v10 = *(_QWORD *)v3[3];
    if (v10)
    {
      v3[3] = v10;
      v11 = (uint64_t *)*v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v11);
    ++v3[5];
    return result;
  }
  result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
  v2 = (int)result;
  *(_DWORD *)(a2 + 12) = (_DWORD)result;
  v6 = v3 + 4;
  v5 = v3[4];
  if (!v5)
    goto LABEL_7;
  while (1)
  {
LABEL_9:
    while (1)
    {
      v7 = (uint64_t *)v5;
      v8 = *(_DWORD *)(v5 + 28);
      if (v8 <= v2)
        break;
      v5 = *v7;
      v6 = v7;
      if (!*v7)
        goto LABEL_13;
    }
    if (v8 >= v2)
      return result;
    v5 = v7[1];
    if (!v5)
    {
      v6 = v7 + 1;
      goto LABEL_13;
    }
  }
}

void cricket::`anonymous namespace'::GetAssociatedCodecForRtx(uint64_t *a1, uint64_t a2)
{
  char Param;
  char v5;
  size_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  void *__p[2];
  char v28;
  void **v29;
  size_t v30;
  uint64_t v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 3;
  if (__p <= (void **)"apt" && (char *)__p + 3 > "apt")
    goto LABEL_29;
  LOWORD(__p[0]) = *(_WORD *)"apt";
  WORD1(__p[0]) = cricket::kCodecParamAssociatedPayloadType[2];
  Param = cricket::Codec::GetParam(a2, (const void **)__p, (uint64_t)&v29);
  v5 = Param;
  if ((v28 & 0x80000000) == 0)
  {
    if ((Param & 1) != 0)
      goto LABEL_7;
LABEL_10:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
    goto LABEL_26;
  }
  operator delete(__p[0]);
  if ((v5 & 1) == 0)
    goto LABEL_10;
LABEL_7:
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    v6 = HIBYTE(v31);
    v7 = (void **)&v29;
    goto LABEL_15;
  }
  v6 = v30;
  if ((v30 & 0x8000000000000000) != 0 || (v7 = v29, v30) && !v29)
  {
LABEL_29:
    __break(1u);
    return;
  }
LABEL_15:
  v15 = rtc::string_to_number_internal::ParseSigned(v7, v6, 10);
  if (!v16 || v15 < (uint64_t)0xFFFFFFFF80000000 || v15 >= 0x80000000)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_26;
    v26 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
    goto LABEL_25;
  }
  v18 = *a1;
  v17 = a1[1];
  if (*a1 != v17)
  {
    while (*(_DWORD *)(v18 + 12) != (_DWORD)v15)
    {
      v18 += 216;
      if (v18 == v17)
        goto LABEL_21;
    }
    goto LABEL_26;
  }
LABEL_21:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    v26 = rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
LABEL_25:
    rtc::webrtc_logging_impl::Log(v26, v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
  }
LABEL_26:
  if (SHIBYTE(v31) < 0)
    operator delete(v29);
}

void std::operator+[abi:sn180100]<char,std::char_traits<char>,std::allocator<char>>(char *__s@<X1>, std::string *a2@<X0>, uint64_t a3@<X8>)
{
  size_t v6;
  size_t v7;
  int v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v13;

  if (__s)
  {
    v6 = strlen(__s);
    v7 = v6;
    v8 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v8 >= 0)
      v9 = 22;
    else
      v9 = (a2->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v8 >= 0)
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    else
      size = a2->__r_.__value_.__l.__size_;
    if (v9 - size < v6)
    {
      std::string::__grow_by_and_replace(a2, v9, size + v6 - v9, size, size, 0, v6, __s);
LABEL_22:
      *(_OWORD *)a3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)&a2->__r_.__value_.__l + 2);
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      a2->__r_.__value_.__r.__words[0] = 0;
      return;
    }
    if (!v6)
      goto LABEL_22;
    if (v8 >= 0)
      v11 = a2;
    else
      v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if ((char *)v11 + size > __s || (char *)v11 + size + v6 <= __s)
    {
      memmove((char *)v11 + size, __s, v6);
      v13 = size + v7;
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        a2->__r_.__value_.__l.__size_ = v13;
      else
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = v13 & 0x7F;
      v11->__r_.__value_.__s.__data_[v13] = 0;
      goto LABEL_22;
    }
  }
  __break(1u);
}

BOOL cricket::UsedPayloadTypes::IsIdUsed(cricket::UsedPayloadTypes *this, int a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  BOOL v8;
  char **v9;

  if ((a2 & 0xFFFFFFE0) == 0x40)
    return 1;
  v5 = (char *)*((_QWORD *)this + 4);
  v3 = (char *)this + 32;
  v4 = v5;
  if (!v5)
    goto LABEL_13;
  v6 = v3;
  do
  {
    v7 = *((_DWORD *)v4 + 7);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (char **)v4;
    else
      v9 = (char **)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *((_DWORD *)v6 + 7) > a2)
LABEL_13:
    v6 = v3;
  return v6 != v3;
}

uint64_t cricket::UsedIds<cricket::Codec>::FindUnusedId(_DWORD *a1)
{
  int v2;

  if ((*(unsigned int (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 16))(a1, a1[4]))
  {
    do
    {
      v2 = a1[4];
      if (v2 < a1[2])
        break;
      a1[4] = v2 - 1;
    }
    while (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1) & 1) != 0);
  }
  return a1[4];
}

uint64_t cricket::UsedIds<cricket::Codec>::~UsedIds(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C0B6D10;
  std::__tree<sigslot::_signal_base_interface *>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  return a1;
}

void cricket::UsedIds<cricket::Codec>::~UsedIds(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C0B6D10;
  std::__tree<sigslot::_signal_base_interface *>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  JUMPOUT(0x20BD0ADECLL);
}

BOOL cricket::UsedIds<cricket::Codec>::IsIdUsed(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 32);
  v2 = a1 + 32;
  v3 = v4;
  if (!v4)
    goto LABEL_11;
  v5 = v2;
  do
  {
    v6 = *(_DWORD *)(v3 + 28);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (!v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *(_DWORD *)(v5 + 28) > a2)
LABEL_11:
    v5 = v2;
  return v5 != v2;
}

cricket::Codec *std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>(cricket::Codec **a1, const cricket::Codec *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  cricket::Codec *v9;
  cricket::Codec *v10;
  cricket::Codec *v11;
  cricket::Codec *v12;
  cricket::Codec *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  cricket::Codec *v30;
  char *v31;
  void (***v32)(char *);
  void (**v33)(char *);
  BOOL v34;

  v2 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x12F684BDA12F684)
    abort();
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42)
    v5 = 0x12F684BDA12F684;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_30:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x12F684BDA12F684)
    goto LABEL_30;
  v7 = 216 * v5;
  v8 = (char *)operator new(216 * v5);
  v9 = (cricket::Codec *)&v8[v7];
  v10 = (cricket::Codec *)&v8[216 * v2];
  cricket::Codec::Codec(v10, a2);
  v11 = (cricket::Codec *)((char *)v10 + 216);
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v9;
    if (!v12)
      return v11;
    goto LABEL_24;
  }
  v14 = 0;
  do
  {
    v17 = (char *)v10 + v14;
    *((_QWORD *)v17 - 27) = &off_24C0B1418;
    v18 = (char *)v12 + v14;
    *((_QWORD *)v17 - 26) = *(_QWORD *)((char *)v12 + v14 - 208);
    v19 = *(_OWORD *)((char *)v12 + v14 - 200);
    *((_QWORD *)v17 - 23) = *(_QWORD *)((char *)v12 + v14 - 184);
    *(_OWORD *)(v17 - 200) = v19;
    *((_QWORD *)v18 - 24) = 0;
    *((_QWORD *)v18 - 23) = 0;
    *((_QWORD *)v18 - 25) = 0;
    *((_OWORD *)v17 - 11) = *(_OWORD *)((char *)v12 + v14 - 176);
    *((_BYTE *)v10 + v14 - 160) = 0;
    *(v17 - 136) = 0;
    if (*((_BYTE *)v12 + v14 - 136))
    {
      v20 = *((_OWORD *)v18 - 10);
      *(_QWORD *)((char *)v10 + v14 - 144) = *((_QWORD *)v18 - 18);
      *(_OWORD *)((char *)v10 + v14 - 160) = v20;
      *((_QWORD *)v18 - 19) = 0;
      *((_QWORD *)v18 - 18) = 0;
      *((_QWORD *)v18 - 20) = 0;
      *(v17 - 136) = 1;
    }
    *((_QWORD *)v17 - 16) = 0;
    *((_QWORD *)v17 - 16) = *((_QWORD *)v18 - 16);
    v21 = *(_OWORD *)(v18 - 120);
    v22 = *(_OWORD *)(v18 - 104);
    *((_QWORD *)v17 - 11) = *((_QWORD *)v18 - 11);
    *(_OWORD *)(v17 - 104) = v22;
    *(_OWORD *)(v17 - 120) = v21;
    *((_QWORD *)v18 - 16) = 0;
    *(v17 - 80) = 0;
    *(v17 - 56) = 0;
    if (*(v18 - 56))
    {
      v23 = (char *)v12 + v14;
      v24 = *(_OWORD *)((char *)v12 + v14 - 80);
      *((_QWORD *)v17 - 8) = *(_QWORD *)((char *)v12 + v14 - 64);
      *((_OWORD *)v17 - 5) = v24;
      *((_QWORD *)v23 - 9) = 0;
      *((_QWORD *)v23 - 8) = 0;
      *((_QWORD *)v23 - 10) = 0;
      *(v17 - 56) = 1;
    }
    v25 = (char *)v10 + v14;
    *((_QWORD *)v25 - 6) = *(_QWORD *)((char *)v12 + v14 - 48);
    v26 = (char *)v12 + v14 - 40;
    v27 = *(_QWORD *)v26;
    *(_QWORD *)((char *)v10 + v14 - 40) = *(_QWORD *)v26;
    v28 = (uint64_t)v10 + v14 - 40;
    v29 = *(_QWORD *)((char *)v12 + v14 - 32);
    *((_QWORD *)v25 - 4) = v29;
    if (v29)
    {
      *(_QWORD *)(v27 + 16) = v28;
      *(_QWORD *)((char *)v12 + v14 - 48) = v26;
      *(_QWORD *)v26 = 0;
      *(_QWORD *)((char *)v12 + v14 - 32) = 0;
    }
    else
    {
      *((_QWORD *)v25 - 6) = v28;
    }
    v15 = (char *)v10 + v14;
    *((_QWORD *)v15 - 3) = 0;
    *((_QWORD *)v15 - 2) = 0;
    v16 = (_QWORD *)((char *)v10 + v14 - 24);
    v16[2] = 0;
    std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>(v16, *(_QWORD *)((char *)v12 + v14 - 24), *(_QWORD *)((char *)v12 + v14 - 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)((char *)v12 + v14 - 16) - *(_QWORD *)((char *)v12 + v14 - 24)) >> 4));
    v14 -= 216;
  }
  while ((cricket::Codec *)((char *)v12 + v14) != v13);
  v12 = *a1;
  v30 = a1[1];
  *a1 = (cricket::Codec *)((char *)v10 + v14);
  a1[1] = v11;
  a1[2] = v9;
  if (v30 != v12)
  {
    v31 = (char *)v30 - 216;
    v32 = (void (***)(char *))((char *)v30 - 216);
    do
    {
      v33 = *v32;
      v32 -= 27;
      (*v33)(v31);
      v34 = v31 == (char *)v12;
      v31 = (char *)v32;
    }
    while (!v34);
  }
  if (v12)
LABEL_24:
    operator delete(v12);
  return v11;
}

BOOL cricket::UsedIds<webrtc::RtpExtension>::IsIdUsed(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 32);
  v2 = a1 + 32;
  v3 = v4;
  if (!v4)
    goto LABEL_11;
  v5 = v2;
  do
  {
    v6 = *(_DWORD *)(v3 + 28);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (!v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *(_DWORD *)(v5 + 28) > a2)
LABEL_11:
    v5 = v2;
  return v5 != v2;
}

uint64_t cricket::UsedRtpHeaderExtensionIds::FindUnusedId(cricket::UsedRtpHeaderExtensionIds *this)
{
  int v2;
  int v3;
  int v4;

  if (*((int *)this + 13) <= 14
    && (*(unsigned int (**)(cricket::UsedRtpHeaderExtensionIds *))(*(_QWORD *)this + 16))(this))
  {
    do
    {
      v2 = *((_DWORD *)this + 13);
      if (v2 < *((_DWORD *)this + 2))
        break;
      *((_DWORD *)this + 13) = v2 - 1;
    }
    while (((*(uint64_t (**)(cricket::UsedRtpHeaderExtensionIds *))(*(_QWORD *)this + 16))(this) & 1) != 0);
  }
  if (*((_DWORD *)this + 12) == 1)
  {
    v3 = *((_DWORD *)this + 13);
    if (v3 >= *((_DWORD *)this + 2))
    {
      if (v3 < 15)
        return *((unsigned int *)this + 13);
    }
    else
    {
      *((_DWORD *)this + 13) = 16;
    }
    if ((*(unsigned int (**)(cricket::UsedRtpHeaderExtensionIds *))(*(_QWORD *)this + 16))(this))
    {
      do
      {
        v4 = *((_DWORD *)this + 13);
        if (v4 > *((_DWORD *)this + 3))
          break;
        *((_DWORD *)this + 13) = v4 + 1;
      }
      while (((*(uint64_t (**)(cricket::UsedRtpHeaderExtensionIds *))(*(_QWORD *)this + 16))(this) & 1) != 0);
    }
  }
  return *((unsigned int *)this + 13);
}

uint64_t cricket::UsedIds<webrtc::RtpExtension>::~UsedIds(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C0B6D70;
  std::__tree<sigslot::_signal_base_interface *>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  return a1;
}

void cricket::UsedIds<webrtc::RtpExtension>::~UsedIds(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C0B6D70;
  std::__tree<sigslot::_signal_base_interface *>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::UsedIds<webrtc::RtpExtension>::FindUnusedId(_DWORD *a1)
{
  int v2;

  if ((*(unsigned int (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 16))(a1, a1[4]))
  {
    do
    {
      v2 = a1[4];
      if (v2 < a1[2])
        break;
      a1[4] = v2 - 1;
    }
    while (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1) & 1) != 0);
  }
  return a1[4];
}

uint64_t *cricket::UsedIds<webrtc::RtpExtension>::FindAndSetIdUsed(uint64_t *result, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v2 = *(_DWORD *)(a2 + 24);
  if (v2 > *((_DWORD *)result + 3))
    return result;
  v3 = result;
  if (v2 < *((_DWORD *)result + 2))
    return result;
  result = (uint64_t *)(*(uint64_t (**)(uint64_t *, _QWORD))(*result + 16))(result, *(unsigned int *)(a2 + 24));
  if (!(_DWORD)result)
  {
    v6 = v3 + 4;
    v5 = v3[4];
    if (v5)
      goto LABEL_9;
LABEL_7:
    v7 = v6;
LABEL_13:
    v9 = operator new(0x20uLL);
    v9[7] = v2;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t)v9;
    v10 = *(_QWORD *)v3[3];
    if (v10)
    {
      v3[3] = v10;
      v11 = (uint64_t *)*v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[4], v11);
    ++v3[5];
    return result;
  }
  result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v3 + 24))(v3);
  v2 = (int)result;
  *(_DWORD *)(a2 + 24) = (_DWORD)result;
  v6 = v3 + 4;
  v5 = v3[4];
  if (!v5)
    goto LABEL_7;
  while (1)
  {
LABEL_9:
    while (1)
    {
      v7 = (uint64_t *)v5;
      v8 = *(_DWORD *)(v5 + 28);
      if (v8 <= v2)
        break;
      v5 = *v7;
      v6 = v7;
      if (!*v7)
        goto LABEL_13;
    }
    if (v8 >= v2)
      return result;
    v5 = v7[1];
    if (!v5)
    {
      v6 = v7 + 1;
      goto LABEL_13;
    }
  }
}

char *std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>(char **a1, uint64_t a2)
{
  void **v2;
  void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  std::string *v19;
  const std::string::value_type **v20;
  __int128 v21;
  void **v22;

  v2 = (void **)*a1;
  v3 = (void **)a1[1];
  v4 = ((char *)v3 - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v7 = a1[2] - (char *)v2;
  if (v7 >> 4 > v5)
    v5 = v7 >> 4;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
    v5 = 0x7FFFFFFFFFFFFFFLL;
  if (!v5)
  {
    __break(1u);
LABEL_28:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 >> 59)
    goto LABEL_28;
  v9 = 32 * v5;
  v10 = (char *)operator new(32 * v5);
  v11 = v10;
  v12 = &v10[32 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v10[32 * v4], *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v2 = (void **)*a1;
    v3 = (void **)a1[1];
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)a2;
    *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
  }
  v13 = &v11[v9];
  v14 = &v11[32 * v4];
  *((_DWORD *)v14 + 6) = *(_DWORD *)(a2 + 24);
  v14[28] = *(_BYTE *)(a2 + 28);
  v15 = v12 + 32;
  if (v3 == v2)
  {
    *a1 = v12;
    a1[1] = v15;
    a1[2] = v13;
  }
  else
  {
    v16 = 0;
    do
    {
      v19 = (std::string *)&v12[v16 * 8 - 32];
      v20 = (const std::string::value_type **)&v3[v16 - 4];
      if (*((char *)&v3[v16 - 1] - 1) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *v20, (std::string::size_type)v3[v16 - 3]);
      }
      else
      {
        v21 = *(_OWORD *)v20;
        *(_QWORD *)&v12[v16 * 8 - 16] = v3[v16 - 2];
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v21;
      }
      v17 = &v12[v16 * 8];
      v18 = (int)v3[v16 - 1];
      *(v17 - 4) = BYTE4(v3[v16 - 1]);
      *((_DWORD *)v17 - 2) = v18;
      v16 -= 4;
    }
    while (&v3[v16] != v2);
    v2 = (void **)*a1;
    v22 = (void **)a1[1];
    *a1 = &v12[v16 * 8];
    a1[1] = v15;
    a1[2] = v13;
    while (v22 != v2)
    {
      if (*((char *)v22 - 9) < 0)
        operator delete(*(v22 - 4));
      v22 -= 4;
    }
  }
  if (v2)
    operator delete(v2);
  return v12 + 32;
}

void cricket::`anonymous namespace'::MatchCodecPreference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, cricket::Codec **a5)
{
  uint64_t v6;
  char v7;
  int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BOOL4 v28;
  cricket::Codec *v29;
  cricket::Codec *v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  void **p_s1;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const void **v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const void **v49;
  unsigned __int8 *v50;
  uint64_t *v51;
  uint64_t *v52;
  _QWORD *v53;
  _QWORD *v54;
  _BOOL4 v55;
  cricket::Codec *v56;
  cricket::Codec *v57;
  int v58;
  size_t v59;
  char *p_p;
  char *v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  unsigned __int8 v70;
  uint64_t *v71;
  char *v72;
  size_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  unsigned __int8 v77;
  uint64_t *v78;
  char *v79;
  size_t v80;
  _QWORD *v81;
  size_t v82;
  size_t v83;
  int v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  const void **v89;
  _QWORD *v90;
  size_t v91;
  size_t v92;
  int v93;
  _QWORD *v94;
  unint64_t v95;
  char *v96;
  BOOL v97;
  size_t v98;
  size_t v99;
  const void *v100;
  int v101;
  int v102;
  cricket::Codec *v103;
  cricket::Codec *v104;
  void *v105;
  char v107;
  cricket::Codec **v108;
  _BOOL4 v109;
  int v112;
  void *__p;
  size_t v114;
  int64_t v115;
  void (**v116)(webrtc::RtpCodec *__hidden);
  void *__s1;
  size_t __n;
  unsigned __int8 v119;
  int v120;
  int v121;
  char v122;
  int v123;
  char v124;
  void *v125;
  void *v126;
  uint64_t *v127;
  uint64_t v128[16];
  char v129;
  char __str[8];
  size_t v131;
  unsigned __int8 v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2 == a3)
    return;
  v6 = a2;
  v7 = 0;
  v8 = 0;
  if (cricket::kRtxCodecName[0] - 65 >= 0x1A)
    v9 = cricket::kRtxCodecName[0];
  else
    v9 = cricket::kRtxCodecName[0] + 32;
  if (cricket::kRtxCodecName[1] - 65 >= 0x1A)
    v10 = cricket::kRtxCodecName[1];
  else
    v10 = cricket::kRtxCodecName[1] + 32;
  if (cricket::kRtxCodecName[2] - 65 >= 0x1A)
    v11 = cricket::kRtxCodecName[2];
  else
    v11 = cricket::kRtxCodecName[2] + 32;
  if (cricket::kRedCodecName - 65 >= 0x1A)
    v12 = cricket::kRedCodecName;
  else
    v12 = cricket::kRedCodecName + 32;
  if (HIBYTE(cricket::kRedCodecName) - 65 >= 0x1A)
    LOBYTE(v13) = HIBYTE(cricket::kRedCodecName);
  else
    LOBYTE(v13) = HIBYTE(cricket::kRedCodecName) + 32;
  v13 = v13;
  v14 = v6;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v15 = (unsigned __int8 *)(v14 + 8);
          v16 = *(unsigned __int8 *)(v14 + 31);
          v17 = (unsigned __int8 *)(v14 + 8);
          v18 = v16;
          if (*(char *)(v14 + 31) < 0)
          {
            v18 = *(_QWORD *)(v14 + 16);
            if (v18 < 0)
              goto LABEL_281;
            v17 = *(unsigned __int8 **)v15;
            v19 = v18 && v17 == 0;
            if (v19)
              goto LABEL_281;
          }
          if (v18 != 3)
            break;
          v20 = *v17;
          if (v20 != cricket::kRtxCodecName[0])
          {
            if ((v20 - 65) < 0x1A)
              LOBYTE(v20) = v20 + 32;
            if (v20 != v9)
              break;
          }
          v21 = v17[1];
          if (v21 != cricket::kRtxCodecName[1])
          {
            if ((v21 - 65) < 0x1A)
              LOBYTE(v21) = v21 + 32;
            if (v21 != v10)
              break;
          }
          v22 = v17[2];
          if (v22 != cricket::kRtxCodecName[2])
          {
            if ((v22 - 65) < 0x1A)
              LOBYTE(v22) = v22 + 32;
            if (v22 != v11)
              break;
          }
          v7 = 1;
          v14 += 160;
          if (v14 == a3)
            goto LABEL_60;
        }
        if ((v16 & 0x80) != 0)
        {
          v16 = *(_QWORD *)(v14 + 16);
          if (v16 < 0)
            goto LABEL_281;
          v15 = *(unsigned __int8 **)v15;
          if (v16)
          {
            if (!v15)
              goto LABEL_281;
          }
        }
        if (v16 == 3)
          break;
        v14 += 160;
        if (v14 == a3)
          goto LABEL_60;
      }
      v23 = *v15;
      if (v23 == cricket::kRedCodecName)
        goto LABEL_285;
      if ((v23 - 65) < 0x1A)
        LOBYTE(v23) = v23 + 32;
      v24 = v23 - v12;
      if (!v24)
      {
LABEL_285:
        v25 = v15[1];
        if (v25 == HIBYTE(cricket::kRedCodecName))
          goto LABEL_286;
        if ((v25 - 65) < 0x1A)
          LOBYTE(v25) = v25 + 32;
        v24 = v25 - v13;
        if (!v24)
        {
LABEL_286:
          v26 = v15[2];
          if (v26 == 100)
            break;
          if ((v26 - 65) < 0x1A)
            LOBYTE(v26) = v26 + 32;
          v24 = v26 - 100;
          if (v26 == 100)
            break;
        }
      }
      v8 |= v24 == 0;
      v14 += 160;
      if (v14 == a3)
        goto LABEL_60;
    }
    v8 |= 1u;
    v14 += 160;
  }
  while (v14 != a3);
LABEL_60:
  v112 = 0;
  v107 = v8 | v7;
  v28 = __str <= "apt" && &__str[3] > "apt";
  v109 = v28;
  v108 = a5;
  while (2)
  {
    v30 = *a5;
    v29 = a5[1];
    if (*a5 == v29)
      goto LABEL_150;
    while (1)
    {
      (*(void (**)(void (***__return_ptr)(webrtc::RtpCodec *__hidden), cricket::Codec *, unint64_t))(*(_QWORD *)v30 + 16))(&v116, v30, v13);
      v31 = v119;
      if ((v119 & 0x80u) == 0)
        v32 = v119;
      else
        v32 = __n;
      v33 = *(unsigned __int8 *)(v6 + 31);
      v34 = (char)v33;
      if ((v33 & 0x80u) != 0)
        v33 = *(_QWORD *)(v6 + 16);
      if (v32 != v33)
        goto LABEL_145;
      v35 = v34 >= 0 ? (unsigned __int8 *)(v6 + 8) : *(unsigned __int8 **)(v6 + 8);
      if ((v119 & 0x80) != 0)
      {
        if (memcmp(__s1, v35, __n))
          goto LABEL_145;
      }
      else if (v119)
      {
        p_s1 = &__s1;
        while (*(unsigned __int8 *)p_s1 == *v35)
        {
          p_s1 = (void **)((char *)p_s1 + 1);
          ++v35;
          if (!--v31)
            goto LABEL_89;
        }
        goto LABEL_145;
      }
LABEL_89:
      if (v120 != *(_DWORD *)(v6 + 32))
        goto LABEL_145;
      if (v124 && *(_BYTE *)(v6 + 48))
      {
        if (v123 != *(_DWORD *)(v6 + 44))
          goto LABEL_145;
      }
      else if ((v124 != 0) != (*(_BYTE *)(v6 + 48) != 0))
      {
        goto LABEL_145;
      }
      if (!v122 || !*(_BYTE *)(v6 + 40))
        break;
      if (v121 == *(_DWORD *)(v6 + 36))
        goto LABEL_100;
LABEL_145:
      v116 = off_24C0BCBF0;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v127, v128[0]);
      if (v125)
      {
        v126 = v125;
        operator delete(v125);
      }
      if ((char)v119 < 0)
        operator delete(__s1);
      v30 = (cricket::Codec *)((char *)v30 + 216);
      if (v30 == v29)
      {
        v30 = v29;
        goto LABEL_150;
      }
    }
    if ((v122 != 0) != (*(_BYTE *)(v6 + 40) != 0))
      goto LABEL_145;
LABEL_100:
    if (v128[1] != *(_QWORD *)(v6 + 96))
      goto LABEL_145;
    v37 = v127;
    if (v127 != v128)
    {
      v38 = *(_QWORD **)(v6 + 80);
      while (1)
      {
        v39 = *((unsigned __int8 *)v37 + 55);
        if ((v39 & 0x80u) == 0)
          v40 = *((unsigned __int8 *)v37 + 55);
        else
          v40 = v37[5];
        v41 = *((unsigned __int8 *)v38 + 55);
        v42 = (char)v41;
        if ((v41 & 0x80u) != 0)
          v41 = v38[5];
        if (v40 != v41)
          goto LABEL_145;
        v43 = (const void **)(v37 + 4);
        if (v42 >= 0)
          v44 = (unsigned __int8 *)(v38 + 4);
        else
          v44 = (unsigned __int8 *)v38[4];
        if ((v39 & 0x80) != 0)
        {
          if (memcmp(*v43, v44, v37[5]))
            goto LABEL_145;
        }
        else if (*((_BYTE *)v37 + 55))
        {
          while (*(unsigned __int8 *)v43 == *v44)
          {
            v43 = (const void **)((char *)v43 + 1);
            ++v44;
            if (!--v39)
              goto LABEL_118;
          }
          goto LABEL_145;
        }
LABEL_118:
        v45 = *((unsigned __int8 *)v37 + 79);
        if ((v45 & 0x80u) == 0)
          v46 = *((unsigned __int8 *)v37 + 79);
        else
          v46 = v37[8];
        v47 = *((unsigned __int8 *)v38 + 79);
        v48 = (char)v47;
        if ((v47 & 0x80u) != 0)
          v47 = v38[8];
        if (v46 != v47)
          goto LABEL_145;
        v49 = (const void **)(v37 + 7);
        if (v48 >= 0)
          v50 = (unsigned __int8 *)(v38 + 7);
        else
          v50 = (unsigned __int8 *)v38[7];
        if ((v45 & 0x80) != 0)
        {
          if (memcmp(*v49, v50, v37[8]))
            goto LABEL_145;
        }
        else if (*((_BYTE *)v37 + 79))
        {
          while (*(unsigned __int8 *)v49 == *v50)
          {
            v49 = (const void **)((char *)v49 + 1);
            ++v50;
            if (!--v45)
              goto LABEL_133;
          }
          goto LABEL_145;
        }
LABEL_133:
        v51 = (uint64_t *)v37[1];
        if (v51)
        {
          do
          {
            v52 = v51;
            v51 = (uint64_t *)*v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            v52 = (uint64_t *)v37[2];
            v19 = *v52 == (_QWORD)v37;
            v37 = v52;
          }
          while (!v19);
        }
        v53 = (_QWORD *)v38[1];
        if (v53)
        {
          do
          {
            v54 = v53;
            v53 = (_QWORD *)*v53;
          }
          while (v53);
        }
        else
        {
          do
          {
            v54 = (_QWORD *)v38[2];
            v19 = *v54 == (_QWORD)v38;
            v38 = v54;
          }
          while (!v19);
        }
        v38 = v54;
        v37 = v52;
        if (v52 == v128)
        {
          v116 = off_24C0BCBF0;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v127, v128[0]);
          v105 = v125;
          if (!v125)
            goto LABEL_276;
          goto LABEL_275;
        }
      }
    }
    v116 = off_24C0BCBF0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v127, v128[0]);
    v105 = v125;
    if (v125)
    {
LABEL_275:
      v126 = v105;
      operator delete(v105);
    }
LABEL_276:
    if ((char)v119 < 0)
      operator delete(__s1);
LABEL_150:
    if (v30 == a5[1])
      goto LABEL_69;
    if (!v129)
      goto LABEL_69;
    v55 = cricket::Codec::GetResiliencyType((uint64_t)&v116) == 1;
    if ((v55 & v112 & 1) != 0)
    {
      v112 = 1;
    }
    else
    {
      if (!v129)
        goto LABEL_281;
      v56 = *(cricket::Codec **)(a1 + 8);
      if ((unint64_t)v56 >= *(_QWORD *)(a1 + 16))
      {
        v57 = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)a1, (const cricket::Codec *)&v116);
      }
      else
      {
        if (!v56)
          goto LABEL_281;
        v57 = (cricket::Codec *)((char *)cricket::Codec::Codec(v56, (const cricket::Codec *)&v116) + 216);
      }
      v112 |= v55;
      *(_QWORD *)(a1 + 8) = v57;
    }
    if (!v129)
    {
LABEL_281:
      __break(1u);
LABEL_282:
      abort();
    }
    v58 = snprintf(__str, 0x20uLL, "%d", HIDWORD(__s1));
    if (v58 < 0)
      goto LABEL_282;
    v59 = v58;
    if (v58 > 0x16)
    {
      v63 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v58 | 7) != 0x17)
        v63 = v58 | 7;
      v64 = v63 + 1;
      p_p = (char *)operator new(v63 + 1);
      v114 = v59;
      v115 = v64 | 0x8000000000000000;
      __p = p_p;
      v61 = &p_p[v59];
      v62 = &p_p[v59] > __str;
      if (p_p <= __str)
        goto LABEL_168;
    }
    else
    {
      HIBYTE(v115) = v58;
      p_p = (char *)&__p;
      v61 = (char *)&__p + v59;
      v62 = (char *)&__p + v59 > __str;
      if (&__p > (void **)__str)
        goto LABEL_169;
LABEL_168:
      if (v62)
        goto LABEL_281;
    }
LABEL_169:
    if ((_DWORD)v59)
      memcpy(p_p, __str, v59);
    *v61 = 0;
    if ((v107 & 1) == 0)
    {
LABEL_269:
      if (SHIBYTE(v115) < 0)
        goto LABEL_67;
      goto LABEL_270;
    }
    v66 = *a4;
    v65 = a4[1];
    while (2)
    {
      if (v66 == v65)
        goto LABEL_269;
      if (cricket::Codec::GetResiliencyType((uint64_t)v66) != 4)
      {
        if (cricket::Codec::GetResiliencyType((uint64_t)v66) != 1)
          goto LABEL_174;
        v75 = v66 + 22;
        v74 = (uint64_t *)v66[22];
        v132 = 0;
        __str[0] = 0;
        v76 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)v66 + 168, (const void **)__str, v74, v66 + 22);
        v77 = v132;
        if (v66 + 22 != v76)
        {
          v78 = v76;
          if ((v132 & 0x80) != 0)
          {
            v80 = v131;
            if ((v131 & 0x8000000000000000) != 0)
              goto LABEL_281;
            v79 = *(char **)__str;
            if (v131)
            {
              if (!*(_QWORD *)__str)
                goto LABEL_281;
            }
          }
          else
          {
            v79 = __str;
            v80 = v132;
          }
          v90 = v78 + 4;
          if (*((char *)v78 + 55) < 0)
          {
            v91 = v78[5];
            if ((v91 & 0x8000000000000000) != 0)
              goto LABEL_281;
            v90 = (_QWORD *)*v90;
            if (v91)
            {
              if (!v90)
                goto LABEL_281;
            }
          }
          else
          {
            v91 = *((unsigned __int8 *)v78 + 55);
          }
          if (v91 >= v80)
            v92 = v80;
          else
            v92 = v91;
          v93 = memcmp(v79, v90, v92);
          if (v93)
          {
            a5 = v108;
            if ((v93 & 0x80000000) == 0)
              goto LABEL_231;
          }
          else
          {
            v85 = v80 >= v91;
            a5 = v108;
            if (v85)
            {
LABEL_231:
              if ((v77 & 0x80) == 0)
                goto LABEL_232;
              goto LABEL_236;
            }
          }
        }
        v78 = v66 + 22;
        if ((v77 & 0x80) == 0)
        {
LABEL_232:
          if (v78 == v75)
            goto LABEL_174;
          goto LABEL_237;
        }
LABEL_236:
        operator delete(*(void **)__str);
        if (v78 == v75)
          goto LABEL_174;
LABEL_237:
        v94 = v78 + 7;
        if (*((char *)v78 + 79) < 0)
        {
          v95 = v78[8];
          if ((v95 & 0x8000000000000000) != 0)
            goto LABEL_281;
          v94 = (_QWORD *)*v94;
          if (v95)
          {
            if (!v94)
              goto LABEL_281;
          }
        }
        else
        {
          v95 = *((unsigned __int8 *)v78 + 79);
        }
        rtc::split((size_t)v94, v95, 0x2Fu, (char **)__str);
        v96 = *(char **)__str;
        v97 = *(_QWORD *)__str == v131;
        if (*(_QWORD *)__str != v131)
        {
          v98 = *(_QWORD *)(*(_QWORD *)__str + 8);
          if (SHIBYTE(v115) < 0)
          {
            v99 = v114;
            if ((v114 & 0x8000000000000000) != 0)
              goto LABEL_281;
            v100 = __p;
            if (v114)
            {
              if (!__p)
                goto LABEL_281;
            }
          }
          else
          {
            v99 = HIBYTE(v115);
            v100 = &__p;
          }
          if (v98 == v99)
          {
            v102 = memcmp(**(const void ***)__str, v100, v98);
            if (v102)
              v101 = 0;
            else
              v101 = 6;
            if ((v102 != 0) | v112 & 1)
            {
              v97 = v102 != 0;
              goto LABEL_263;
            }
            v103 = *(cricket::Codec **)(a1 + 8);
            if ((unint64_t)v103 >= *(_QWORD *)(a1 + 16))
            {
              *(_QWORD *)(a1 + 8) = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)a1, (const cricket::Codec *)v66);
              v112 = 1;
              v101 = 6;
              v96 = *(char **)__str;
              if (!*(_QWORD *)__str)
                goto LABEL_260;
            }
            else
            {
              if (!v103)
                goto LABEL_281;
              *(_QWORD *)(a1 + 8) = (char *)cricket::Codec::Codec(v103, (const cricket::Codec *)v66) + 216;
              v112 = 1;
              v101 = 6;
              v96 = *(char **)__str;
              if (!*(_QWORD *)__str)
                goto LABEL_260;
            }
          }
          else
          {
            v101 = 0;
            v97 = 1;
          }
LABEL_263:
          v131 = (size_t)v96;
          operator delete(v96);
          if (v97)
            goto LABEL_174;
LABEL_264:
          if (v101)
            goto LABEL_269;
          goto LABEL_174;
        }
        v101 = 0;
        if (*(_QWORD *)__str)
          goto LABEL_263;
LABEL_260:
        if (v97)
          goto LABEL_174;
        goto LABEL_264;
      }
      v132 = 3;
      if (v109)
        goto LABEL_281;
      v68 = v66 + 22;
      v67 = (uint64_t *)v66[22];
      strcpy(__str, "apt");
      v69 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)v66 + 168, (const void **)__str, v67, v66 + 22);
      v70 = v132;
      if (v66 + 22 == v69)
        goto LABEL_202;
      v71 = v69;
      if ((v132 & 0x80) != 0)
      {
        v73 = v131;
        if ((v131 & 0x8000000000000000) != 0)
          goto LABEL_281;
        v72 = *(char **)__str;
        if (v131)
        {
          if (!*(_QWORD *)__str)
            goto LABEL_281;
        }
      }
      else
      {
        v72 = __str;
        v73 = v132;
      }
      v81 = v71 + 4;
      if (*((char *)v71 + 55) < 0)
      {
        v82 = v71[5];
        if ((v82 & 0x8000000000000000) != 0)
          goto LABEL_281;
        v81 = (_QWORD *)*v81;
        if (v82)
        {
          if (!v81)
            goto LABEL_281;
        }
      }
      else
      {
        v82 = *((unsigned __int8 *)v71 + 55);
      }
      if (v82 >= v73)
        v83 = v73;
      else
        v83 = v82;
      v84 = memcmp(v72, v81, v83);
      if (!v84)
      {
        v85 = v73 >= v82;
        a5 = v108;
        if (!v85)
          goto LABEL_202;
LABEL_198:
        if ((v70 & 0x80) != 0)
          goto LABEL_203;
LABEL_199:
        if (v71 != v68)
          goto LABEL_204;
LABEL_174:
        v66 += 27;
        continue;
      }
      break;
    }
    a5 = v108;
    if ((v84 & 0x80000000) == 0)
      goto LABEL_198;
LABEL_202:
    v71 = v66 + 22;
    if ((v70 & 0x80) == 0)
      goto LABEL_199;
LABEL_203:
    operator delete(*(void **)__str);
    if (v71 == v68)
      goto LABEL_174;
LABEL_204:
    v86 = *((unsigned __int8 *)v71 + 79);
    if ((v86 & 0x80u) == 0)
      v87 = *((unsigned __int8 *)v71 + 79);
    else
      v87 = v71[8];
    v88 = HIBYTE(v115);
    if (v115 < 0)
      v88 = v114;
    if (v87 != v88)
      goto LABEL_174;
    v89 = (const void **)(v71 + 7);
    if (v115 >= 0)
      v13 = (unint64_t)&__p;
    else
      v13 = (unint64_t)__p;
    if ((v86 & 0x80) != 0)
    {
      if (!memcmp(*v89, (const void *)v13, v71[8]))
        goto LABEL_266;
      goto LABEL_174;
    }
    if (*((_BYTE *)v71 + 79))
    {
      while (*(unsigned __int8 *)v89 == *(unsigned __int8 *)v13)
      {
        v89 = (const void **)((char *)v89 + 1);
        ++v13;
        if (!--v86)
          goto LABEL_266;
      }
      goto LABEL_174;
    }
LABEL_266:
    v104 = *(cricket::Codec **)(a1 + 8);
    if ((unint64_t)v104 < *(_QWORD *)(a1 + 16))
    {
      if (v104)
      {
        *(_QWORD *)(a1 + 8) = (char *)cricket::Codec::Codec(v104, (const cricket::Codec *)v66) + 216;
        goto LABEL_269;
      }
      goto LABEL_281;
    }
    *(_QWORD *)(a1 + 8) = std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec const&>((cricket::Codec **)a1, (const cricket::Codec *)v66);
    if (SHIBYTE(v115) < 0)
    {
LABEL_67:
      operator delete(__p);
      if (v129)
        goto LABEL_68;
      goto LABEL_69;
    }
LABEL_270:
    if (v129)
LABEL_68:
      cricket::Codec::~Codec((cricket::Codec *)&v116);
LABEL_69:
    v6 += 160;
    if (v6 != a3)
      continue;
    break;
  }
}

unint64_t *cricket::`anonymous namespace'::StripCNCodecs(unint64_t *result)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned __int8 v5;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned __int8 *v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v19;
  int v20;
  uint64_t (***v21)(_QWORD);
  uint64_t (***v22)(_QWORD);
  uint64_t (**v23)(_QWORD);

  v1 = result;
  v2 = *result;
  v3 = result[1];
  if (*result == v3)
  {
    v3 = *result;
  }
  else
  {
    v4 = cricket::kComfortNoiseCodecName[0] - 65;
    v5 = cricket::kComfortNoiseCodecName[0] + 32;
    if (v4 >= 0x1A)
      v5 = cricket::kComfortNoiseCodecName[0];
    v6 = cricket::kComfortNoiseCodecName[1] - 65;
    v7 = cricket::kComfortNoiseCodecName[1] + 32;
    if (v6 >= 0x1A)
      v7 = cricket::kComfortNoiseCodecName[1];
    while (1)
    {
      v8 = (unsigned __int8 *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
      {
        v9 = *(_QWORD *)(v2 + 24);
        if (v9 < 0)
          goto LABEL_60;
        v8 = *(unsigned __int8 **)v8;
        v10 = v9 && v8 == 0;
        if (v10)
          goto LABEL_60;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v2 + 39);
      }
      if (v9 == 2)
      {
        v11 = *v8;
        if (v11 == cricket::kComfortNoiseCodecName[0])
          goto LABEL_19;
        if ((v11 - 65) < 0x1A)
          LOBYTE(v11) = v11 + 32;
        if (v11 == v5)
        {
LABEL_19:
          v12 = v8[1];
          if (v12 == cricket::kComfortNoiseCodecName[1])
            break;
          if ((v12 - 65) < 0x1A)
            LOBYTE(v12) = v12 + 32;
          if (v12 == v7)
            break;
        }
      }
      v2 += 216;
      if (v2 == v3)
      {
        v2 = result[1];
        goto LABEL_54;
      }
    }
    if (v2 != v3)
    {
      v13 = v2 + 216;
      if (v2 + 216 != v3)
      {
        if (v4 >= 0x1A)
          v14 = cricket::kComfortNoiseCodecName[0];
        else
          v14 = cricket::kComfortNoiseCodecName[0] + 32;
        if (v6 >= 0x1A)
          v15 = cricket::kComfortNoiseCodecName[1];
        else
          v15 = cricket::kComfortNoiseCodecName[1] + 32;
        do
        {
          v16 = (unsigned __int8 *)(v13 + 16);
          if (*(char *)(v13 + 39) < 0)
          {
            v17 = *(_QWORD *)(v13 + 24);
            if (v17 < 0)
              goto LABEL_60;
            v16 = *(unsigned __int8 **)v16;
            if (v17 && v16 == 0)
              goto LABEL_60;
          }
          else
          {
            v17 = *(unsigned __int8 *)(v13 + 39);
          }
          if (v17 != 2)
            goto LABEL_31;
          v19 = *v16;
          if (v19 != cricket::kComfortNoiseCodecName[0])
          {
            if ((v19 - 65) < 0x1A)
              LOBYTE(v19) = v19 + 32;
            if (v19 != v14)
              goto LABEL_31;
          }
          v20 = v16[1];
          if (v20 != cricket::kComfortNoiseCodecName[1])
          {
            if ((v20 - 65) < 0x1A)
              LOBYTE(v20) = v20 + 32;
            if (v20 != v15)
            {
LABEL_31:
              result = (unint64_t *)cricket::Codec::operator=(v2, v13);
              v2 += 216;
            }
          }
          v13 += 216;
        }
        while (v13 != v3);
        v3 = v1[1];
      }
    }
    if (v3 < v2)
    {
LABEL_60:
      __break(1u);
      return result;
    }
  }
LABEL_54:
  if (v2 != v3)
  {
    v21 = (uint64_t (***)(_QWORD))(v3 - 216);
    v22 = (uint64_t (***)(_QWORD))(v3 - 216);
    do
    {
      v23 = *v22;
      v22 -= 27;
      result = (unint64_t *)(*v23)(v21);
      v10 = v21 == (uint64_t (***)(_QWORD))v2;
      v21 = v22;
    }
    while (!v10);
    v1[1] = v2;
  }
  return result;
}

void cricket::AudioContentDescription::~AudioContentDescription(cricket::AudioContentDescription *this)
{
  cricket::MediaContentDescription::~MediaContentDescription(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::AudioContentDescription::type(cricket::AudioContentDescription *this)
{
  return 0;
}

uint64_t cricket::MediaContentDescription::as_video(cricket::MediaContentDescription *this)
{
  return 0;
}

{
  return 0;
}

uint64_t cricket::MediaContentDescription::as_sctp(cricket::MediaContentDescription *this)
{
  return 0;
}

{
  return 0;
}

uint64_t cricket::MediaContentDescription::as_unsupported(cricket::MediaContentDescription *this)
{
  return 0;
}

{
  return 0;
}

double cricket::AudioContentDescription::set_protocol(uint64_t a1, __int128 *__src, size_t __len)
{
  __int128 *v6;
  size_t v7;
  size_t v8;
  __int128 *v9;
  void **v11;
  double result;
  __int128 v13;
  unint64_t v14;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_17:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&v13 + 1) = __len;
    v14 = v8 | 0x8000000000000000;
    *(_QWORD *)&v13 = v6;
  }
  else
  {
    HIBYTE(v14) = __len;
    v6 = &v13;
  }
  v9 = (__int128 *)((char *)v6 + __len);
  if (v6 <= __src && v9 > __src)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (__len)
    memmove(v6, __src, __len);
  *(_BYTE *)v9 = 0;
  v11 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v11);
  result = *(double *)&v13;
  *(_OWORD *)v11 = v13;
  *(_QWORD *)(a1 + 24) = v14;
  return result;
}

BOOL cricket::MediaContentDescription::has_codecs(cricket::MediaContentDescription *this)
{
  return *((_QWORD *)this + 35) != *((_QWORD *)this + 36);
}

cricket::MediaContentDescription *cricket::AudioContentDescription::CloneInternal(cricket::AudioContentDescription *this)
{
  cricket::MediaContentDescription *v2;
  cricket::MediaContentDescription *result;

  v2 = (cricket::MediaContentDescription *)operator new();
  result = cricket::MediaContentDescription::MediaContentDescription(v2, this);
  *(_QWORD *)result = &unk_24C0B6DA0;
  return result;
}

uint64_t cricket::MediaContentDescription::MediaContentDescription(uint64_t this)
{
  *(_QWORD *)this = &unk_24C0B6E20;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 31) = 0;
  *(_DWORD *)(this + 36) = -1;
  *(_BYTE *)(this + 63) = 2;
  if (this + 40 <= (unint64_t)"AS" && this + 42 > (unint64_t)"AS")
  {
    __break(1u);
  }
  else
  {
    strcpy((char *)(this + 40), "AS");
    *(_QWORD *)(this + 72) = 0;
    *(_QWORD *)(this + 80) = 0;
    *(_QWORD *)(this + 64) = 0;
    *(_BYTE *)(this + 88) = 0;
    *(_QWORD *)(this + 104) = 0;
    *(_QWORD *)(this + 112) = 0;
    *(_QWORD *)(this + 96) = 0;
    *(_BYTE *)(this + 120) = 0;
    *(_QWORD *)(this + 124) = 0;
    *(_QWORD *)(this + 140) = 0;
    *(_QWORD *)(this + 132) = 0;
    *(_DWORD *)(this + 148) = 0;
    *(_BYTE *)(this + 192) = 0;
    *(_WORD *)(this + 184) = 0;
    *(_DWORD *)(this + 188) = 0;
    *(_QWORD *)(this + 160) = 0;
    *(_QWORD *)(this + 168) = 0;
    *(_QWORD *)(this + 152) = &unk_24C0ACDA0;
    *(_DWORD *)(this + 176) = 0;
    *(_DWORD *)(this + 200) = 2;
    *(_OWORD *)(this + 208) = 0u;
    *(_OWORD *)(this + 224) = 0u;
    *(_OWORD *)(this + 240) = 0u;
    *(_OWORD *)(this + 256) = 0u;
    *(_OWORD *)(this + 272) = 0u;
    *(_OWORD *)(this + 288) = 0u;
  }
  return this;
}

uint64_t cricket::MediaContentDescription::as_audio(cricket::MediaContentDescription *this)
{
  return 0;
}

{
  return 0;
}

double cricket::MediaContentDescription::set_protocol(uint64_t a1, __int128 *__src, size_t __len)
{
  __int128 *v6;
  size_t v7;
  size_t v8;
  __int128 *v9;
  void **v11;
  double result;
  __int128 v13;
  unint64_t v14;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_17:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&v13 + 1) = __len;
    v14 = v8 | 0x8000000000000000;
    *(_QWORD *)&v13 = v6;
  }
  else
  {
    HIBYTE(v14) = __len;
    v6 = &v13;
  }
  v9 = (__int128 *)((char *)v6 + __len);
  if (v6 <= __src && v9 > __src)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (__len)
    memmove(v6, __src, __len);
  *(_BYTE *)v9 = 0;
  v11 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v11);
  result = *(double *)&v13;
  *(_OWORD *)v11 = v13;
  *(_QWORD *)(a1 + 24) = v14;
  return result;
}

void cricket::MediaContentDescription::~MediaContentDescription(cricket::MediaContentDescription *this)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char *v13;
  void **v14;
  char *v15;
  char *v16;
  void **v17;
  void *v18;

  *(_QWORD *)this = &unk_24C0B6E20;
  v2 = (void (***)(_QWORD))*((_QWORD *)this + 35);
  if (v2)
  {
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 36);
    v4 = (void *)*((_QWORD *)this + 35);
    if (v3 != v2)
    {
      v5 = v3 - 27;
      v6 = v3 - 27;
      do
      {
        v7 = *v6;
        v6 -= 27;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void *)*((_QWORD *)this + 35);
    }
    *((_QWORD *)this + 36) = v2;
    operator delete(v4);
  }
  v9 = *((_QWORD *)this + 32);
  if (v9)
  {
    v10 = *((_QWORD *)this + 33);
    v11 = (void *)*((_QWORD *)this + 32);
    if (v10 != v9)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v10 - 24, *(_QWORD *)(v10 - 16));
        v12 = *(void **)(v10 - 48);
        if (v12)
        {
          *(_QWORD *)(v10 - 40) = v12;
          operator delete(v12);
        }
        if (*(char *)(v10 - 57) < 0)
          operator delete(*(void **)(v10 - 80));
        v10 -= 80;
      }
      while (v10 != v9);
      v11 = (void *)*((_QWORD *)this + 32);
    }
    *((_QWORD *)this + 33) = v9;
    operator delete(v11);
  }
  cricket::SimulcastDescription::~SimulcastDescription((cricket::MediaContentDescription *)((char *)this + 208));
  if (*((char *)this + 151) < 0)
  {
    operator delete(*((void **)this + 16));
    v13 = (char *)*((_QWORD *)this + 12);
    if (!v13)
    {
LABEL_20:
      v14 = (void **)*((_QWORD *)this + 8);
      if (!v14)
        goto LABEL_21;
LABEL_29:
      v17 = (void **)*((_QWORD *)this + 9);
      if (v17 == v14)
      {
        *((_QWORD *)this + 9) = v14;
        operator delete(v14);
        if (*((char *)this + 63) < 0)
          goto LABEL_36;
      }
      else
      {
        do
        {
          if (*((char *)v17 - 9) < 0)
            operator delete(*(v17 - 4));
          v17 -= 4;
        }
        while (v17 != v14);
        v18 = (void *)*((_QWORD *)this + 8);
        *((_QWORD *)this + 9) = v14;
        operator delete(v18);
        if (*((char *)this + 63) < 0)
          goto LABEL_36;
      }
LABEL_22:
      if ((*((char *)this + 31) & 0x80000000) == 0)
        return;
LABEL_37:
      operator delete(*((void **)this + 1));
      return;
    }
  }
  else
  {
    v13 = (char *)*((_QWORD *)this + 12);
    if (!v13)
      goto LABEL_20;
  }
  v15 = (char *)*((_QWORD *)this + 13);
  v16 = v13;
  if (v15 != v13)
  {
    do
      cricket::StreamParams::~StreamParams((cricket::StreamParams *)(v15 - 144));
    while (v15 != v13);
    v16 = (char *)*((_QWORD *)this + 12);
  }
  *((_QWORD *)this + 13) = v13;
  operator delete(v16);
  v14 = (void **)*((_QWORD *)this + 8);
  if (v14)
    goto LABEL_29;
LABEL_21:
  if ((*((char *)this + 63) & 0x80000000) == 0)
    goto LABEL_22;
LABEL_36:
  operator delete(*((void **)this + 5));
  if (*((char *)this + 31) < 0)
    goto LABEL_37;
}

void cricket::SimulcastDescription::~SimulcastDescription(cricket::SimulcastDescription *this)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void *v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void *v12;
  void **v13;
  void *v14;
  void **v15;
  void **v16;
  void **v17;

  v2 = (void **)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (void **)*((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      v5 = (void **)*((_QWORD *)this + 4);
      do
      {
        v8 = (void **)*(v5 - 3);
        v5 -= 3;
        v7 = v8;
        if (v8)
        {
          v9 = (void **)*(v3 - 2);
          v6 = v7;
          if (v9 != v7)
          {
            do
            {
              if (*((char *)v9 - 9) < 0)
                operator delete(*(v9 - 4));
              v9 -= 4;
            }
            while (v9 != v7);
            v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v10 = *(void ***)this;
  if (*(_QWORD *)this)
  {
    v11 = (void **)*((_QWORD *)this + 1);
    v12 = *(void **)this;
    if (v11 != v10)
    {
      v13 = (void **)*((_QWORD *)this + 1);
      do
      {
        v16 = (void **)*(v13 - 3);
        v13 -= 3;
        v15 = v16;
        if (v16)
        {
          v17 = (void **)*(v11 - 2);
          v14 = v15;
          if (v17 != v15)
          {
            do
            {
              if (*((char *)v17 - 9) < 0)
                operator delete(*(v17 - 4));
              v17 -= 4;
            }
            while (v17 != v15);
            v14 = *v13;
          }
          *(v11 - 2) = v15;
          operator delete(v14);
        }
        v11 = v13;
      }
      while (v13 != v10);
      v12 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v10;
    operator delete(v12);
  }
}

cricket::MediaContentDescription *cricket::MediaContentDescription::MediaContentDescription(cricket::MediaContentDescription *this, const cricket::MediaContentDescription *a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  __int16 v27;
  char v28;
  int v29;
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  int64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t *v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;

  *(_QWORD *)this = &unk_24C0B6E20;
  v4 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    v6 = (std::string *)((char *)this + 40);
    if ((*((char *)a2 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      v7 = *(_OWORD *)((char *)a2 + 40);
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 7);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      *((_QWORD *)this + 8) = 0;
      *((_QWORD *)this + 9) = 0;
      *((_QWORD *)this + 10) = 0;
      v8 = *((_QWORD *)a2 + 8);
      v9 = *((_QWORD *)a2 + 9);
      v10 = v9 - v8;
      if (v9 == v8)
        goto LABEL_14;
      goto LABEL_7;
    }
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    v6 = (std::string *)((char *)this + 40);
    if ((*((char *)a2 + 63) & 0x80000000) == 0)
      goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  v8 = *((_QWORD *)a2 + 8);
  v9 = *((_QWORD *)a2 + 9);
  v10 = v9 - v8;
  if (v9 == v8)
    goto LABEL_14;
LABEL_7:
  if (v10 < 0)
    goto LABEL_40;
  v11 = v10 >> 5;
  v12 = (char *)operator new(v10);
  v13 = 0;
  *((_QWORD *)this + 8) = v12;
  *((_QWORD *)this + 9) = v12;
  *((_QWORD *)this + 10) = &v12[32 * v11];
  do
  {
    v16 = (std::string *)&v12[v13];
    v17 = (__int128 *)(v8 + v13);
    if (*(char *)(v8 + v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
    }
    else
    {
      v18 = *v17;
      v16->__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
    }
    v14 = &v12[v13];
    v15 = *(_DWORD *)(v8 + v13 + 24);
    v14[28] = *(_BYTE *)(v8 + v13 + 28);
    *((_DWORD *)v14 + 6) = v15;
    v13 += 32;
  }
  while (v8 + v13 != v9);
  *((_QWORD *)this + 9) = &v12[v13];
LABEL_14:
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  v19 = *((_QWORD *)a2 + 12);
  v20 = *((_QWORD *)a2 + 13);
  v21 = v20 - v19;
  if (v20 != v19)
  {
    v22 = 0x8E38E38E38E38E39 * (v21 >> 4);
    if (v22 >= 0x1C71C71C71C71C8)
      goto LABEL_40;
    v23 = (char *)operator new(v21);
    v24 = 0;
    *((_QWORD *)this + 12) = v23;
    *((_QWORD *)this + 13) = v23;
    *((_QWORD *)this + 14) = &v23[144 * v22];
    do
    {
      cricket::StreamParams::StreamParams((std::string *)&v23[v24], (const cricket::StreamParams *)(v19 + v24));
      v24 += 144;
    }
    while (v19 + v24 != v20);
    *((_QWORD *)this + 13) = &v23[v24];
  }
  *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
  *((_QWORD *)this + 16) = 0;
  v25 = (_QWORD *)((char *)this + 128);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = &unk_24C0ACDA0;
  *((_DWORD *)this + 44) = 0;
  if (this != a2)
  {
    if (*((char *)a2 + 151) < 0)
    {
      std::string::__assign_no_alias<true>(v25, *((char **)a2 + 16), *((_QWORD *)a2 + 17));
    }
    else
    {
      v26 = *((_OWORD *)a2 + 8);
      *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
      *(_OWORD *)v25 = v26;
    }
  }
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *(_OWORD *)((char *)this + 164) = *(_OWORD *)((char *)a2 + 164);
  v27 = *((_WORD *)a2 + 92);
  v28 = *((_BYTE *)a2 + 192);
  v29 = *((_DWORD *)a2 + 47);
  v30 = *((_DWORD *)a2 + 50);
  *((_QWORD *)this + 26) = 0;
  *((_WORD *)this + 92) = v27;
  *((_BYTE *)this + 192) = v28;
  *((_DWORD *)this + 47) = v29;
  *((_DWORD *)this + 50) = v30;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  v31 = (uint64_t *)*((_QWORD *)a2 + 26);
  v32 = (uint64_t *)*((_QWORD *)a2 + 27);
  v33 = (char *)v32 - (char *)v31;
  if (v32 != v31)
  {
    v34 = 0xAAAAAAAAAAAAAAABLL * (v33 >> 3);
    if (v34 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v35 = (char *)operator new(v33);
    *((_QWORD *)this + 26) = v35;
    *((_QWORD *)this + 27) = v35;
    *((_QWORD *)this + 28) = &v35[24 * v34];
    std::vector<std::vector<cricket::SimulcastLayer>>::__construct_at_end<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>((uint64_t)this + 208, v31, v32);
  }
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  v36 = (uint64_t *)*((_QWORD *)a2 + 29);
  v37 = (uint64_t *)*((_QWORD *)a2 + 30);
  v38 = (char *)v37 - (char *)v36;
  if (v37 != v36)
  {
    v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
    if (v39 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v40 = (char *)operator new(v38);
    *((_QWORD *)this + 29) = v40;
    *((_QWORD *)this + 30) = v40;
    *((_QWORD *)this + 31) = &v40[24 * v39];
    std::vector<std::vector<cricket::SimulcastLayer>>::__construct_at_end<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>((uint64_t)this + 232, v36, v37);
  }
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  v41 = *((_QWORD *)a2 + 32);
  v42 = *((_QWORD *)a2 + 33);
  v43 = v42 - v41;
  if (v42 != v41)
  {
    v44 = 0xCCCCCCCCCCCCCCCDLL * (v43 >> 4);
    if (v44 >= 0x333333333333334)
      goto LABEL_40;
    v45 = (char *)operator new(v43);
    v46 = 0;
    *((_QWORD *)this + 32) = v45;
    *((_QWORD *)this + 33) = v45;
    *((_QWORD *)this + 34) = &v45[80 * v44];
    do
    {
      cricket::RidDescription::RidDescription((std::string *)&v45[v46], (const cricket::RidDescription *)(v41 + v46));
      v46 += 80;
    }
    while (v41 + v46 != v42);
    *((_QWORD *)this + 33) = &v45[v46];
  }
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  v47 = *((_QWORD *)a2 + 35);
  v48 = *((_QWORD *)a2 + 36);
  v49 = v48 - v47;
  if (v48 == v47)
    return this;
  v50 = 0x84BDA12F684BDA13 * (v49 >> 3);
  if (v50 >= 0x12F684BDA12F685)
LABEL_40:
    abort();
  v51 = (char *)operator new(v49);
  v52 = 0;
  *((_QWORD *)this + 35) = v51;
  *((_QWORD *)this + 36) = v51;
  *((_QWORD *)this + 37) = &v51[216 * v50];
  do
  {
    cricket::Codec::Codec((cricket::Codec *)&v51[v52], (const cricket::Codec *)(v47 + v52));
    v52 += 216;
  }
  while (v47 + v52 != v48);
  *((_QWORD *)this + 36) = &v51[v52];
  return this;
}

void cricket::VideoContentDescription::~VideoContentDescription(cricket::VideoContentDescription *this)
{
  cricket::MediaContentDescription::~MediaContentDescription(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::VideoContentDescription::type(cricket::VideoContentDescription *this)
{
  return 1;
}

double cricket::VideoContentDescription::set_protocol(uint64_t a1, __int128 *__src, size_t __len)
{
  __int128 *v6;
  size_t v7;
  size_t v8;
  __int128 *v9;
  void **v11;
  double result;
  __int128 v13;
  unint64_t v14;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_17:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&v13 + 1) = __len;
    v14 = v8 | 0x8000000000000000;
    *(_QWORD *)&v13 = v6;
  }
  else
  {
    HIBYTE(v14) = __len;
    v6 = &v13;
  }
  v9 = (__int128 *)((char *)v6 + __len);
  if (v6 <= __src && v9 > __src)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (__len)
    memmove(v6, __src, __len);
  *(_BYTE *)v9 = 0;
  v11 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v11);
  result = *(double *)&v13;
  *(_OWORD *)v11 = v13;
  *(_QWORD *)(a1 + 24) = v14;
  return result;
}

cricket::MediaContentDescription *cricket::VideoContentDescription::CloneInternal(cricket::VideoContentDescription *this)
{
  cricket::MediaContentDescription *v2;
  cricket::MediaContentDescription *result;

  v2 = (cricket::MediaContentDescription *)operator new();
  result = cricket::MediaContentDescription::MediaContentDescription(v2, this);
  *(_QWORD *)result = &unk_24C0B6EA0;
  return result;
}

void cricket::`anonymous namespace'::AddStreamParams(__int128 **a1, uint64_t a2, rtc::UniqueRandomIdGenerator *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type v31;
  uint64_t v32;
  uint64_t v33;
  std::string::size_type size;
  char *v35;
  uint64_t v36;
  __int128 v38;
  char v39;
  std::string *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const std::string::value_type *v49;
  size_t v50;
  const cricket::RidDescription *v51;
  const cricket::RidDescription *v52;
  unint64_t v53;
  void **v55;
  unint64_t v56;
  BOOL v57;
  int v58;
  int v59;
  int v60;
  char v62;
  const std::string::value_type *v63;
  size_t v64;
  std::string *v65;
  std::string *v66;
  _BOOL4 v68;
  std::string **v70;
  __int128 *v71;
  _BYTE __dst[32];
  __int128 v73;
  __int128 v74;
  _OWORD v75[2];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  void **v79;
  unint64_t v80;
  unsigned __int8 v81;

  if (*(char *)(a5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__dst, *(const std::string::value_type **)(a5 + 8), *(_QWORD *)(a5 + 16));
    v10 = __dst[23];
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a5 + 8);
    *(_QWORD *)&__dst[16] = *(_QWORD *)(a5 + 24);
    v10 = __dst[23];
    if ((__dst[23] & 0x80000000) == 0)
    {
LABEL_3:
      v11 = __dst;
      v12 = v10;
      goto LABEL_8;
    }
  }
  v12 = *(_QWORD *)&__dst[8];
  if ((*(_QWORD *)&__dst[8] & 0x8000000000000000) != 0
    || (v11 = *(_BYTE **)__dst, *(_QWORD *)&__dst[8]) && !*(_QWORD *)__dst)
  {
LABEL_175:
    __break(1u);
    return;
  }
LABEL_8:
  if (v12 == 13)
  {
    if (*(_QWORD *)v11 == *(_QWORD *)"UDP/DTLS/SCTP" && *(_QWORD *)(v11 + 5) == *(_QWORD *)"TLS/SCTP")
    {
      v13 = 1;
      if ((v10 & 0x80) == 0)
        goto LABEL_32;
    }
    else
    {
      v15 = *(_QWORD *)v11;
      v16 = *(_QWORD *)(v11 + 5);
      v13 = v15 == *(_QWORD *)"TCP/DTLS/SCTP" && v16 == *(_QWORD *)"TLS/SCTP";
      if ((v10 & 0x80) == 0)
        goto LABEL_32;
    }
  }
  else
  {
    if (v12 != 9)
    {
      if (v12 == 4)
      {
        v13 = *(_DWORD *)v11 == *(_DWORD *)"SCTP";
        if ((v10 & 0x80) != 0)
          goto LABEL_35;
      }
      else
      {
        v13 = 0;
        if ((v10 & 0x80) != 0)
          goto LABEL_35;
      }
LABEL_32:
      if (v13)
        return;
      goto LABEL_36;
    }
    v18 = *(_QWORD *)v11;
    v19 = v11[8];
    v13 = v18 == *(_QWORD *)"DTLS/SCTP" && v19 == cricket::kMediaProtocolDtlsSctp[8];
    if ((v10 & 0x80) == 0)
      goto LABEL_32;
  }
LABEL_35:
  operator delete(*(void **)__dst);
  if (v13)
    return;
LABEL_36:
  v22 = *(_QWORD *)(a5 + 280);
  v21 = *(_QWORD *)(a5 + 288);
  if (v22 == v21)
  {
    v68 = 0;
    goto LABEL_47;
  }
  while (cricket::Codec::GetResiliencyType(v22) != 4)
  {
    v22 += 216;
    if (v22 == v21)
    {
      v22 = v21;
      break;
    }
  }
  v23 = v22;
  v24 = *(_QWORD *)(a5 + 280);
  v22 = *(_QWORD *)(a5 + 288);
  v68 = v23 != v22;
  if (v24 == v22)
  {
LABEL_47:
    v24 = v22;
    v25 = *a1;
    v71 = a1[1];
    if (*a1 == v71)
      return;
    goto LABEL_48;
  }
  while (cricket::Codec::GetResiliencyType(v24) != 3)
  {
    v24 += 216;
    if (v24 == v22)
    {
      v24 = v22;
      break;
    }
  }
  v22 = *(_QWORD *)(a5 + 288);
  v25 = *a1;
  v71 = a1[1];
  if (*a1 != v71)
  {
LABEL_48:
    v70 = (std::string **)(a5 + 96);
    do
    {
      while (1)
      {
        v28 = *(std::string **)a4;
        v27 = *(std::string **)(a4 + 8);
        if (*(std::string **)a4 != v27)
        {
          if (*((char *)v25 + 23) >= 0)
            v29 = *((unsigned __int8 *)v25 + 23);
          else
            v29 = *((_QWORD *)v25 + 1);
          if ((*((_BYTE *)v25 + 23) & 0x80) != 0)
          {
            while (1)
            {
              v33 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
              if ((v33 & 0x80u) == 0)
                size = HIBYTE(v28->__r_.__value_.__r.__words[2]);
              else
                size = v28->__r_.__value_.__l.__size_;
              if (size == v29)
              {
                v35 = *(char **)v25;
                if ((v33 & 0x80) != 0)
                {
                  if (!memcmp(v28->__r_.__value_.__l.__data_, v35, v28->__r_.__value_.__l.__size_))
                    goto LABEL_80;
                }
                else
                {
                  if (!*((_BYTE *)&v28->__r_.__value_.__s + 23))
                    goto LABEL_80;
                  v36 = 0;
                  while (v28->__r_.__value_.__s.__data_[v36] == v35[v36])
                  {
                    if (v33 == ++v36)
                      goto LABEL_80;
                  }
                }
              }
              v28 += 6;
              if (v28 == v27)
                goto LABEL_85;
            }
          }
          while (1)
          {
            v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
            if ((v30 & 0x80u) == 0)
              v31 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
            else
              v31 = v28->__r_.__value_.__l.__size_;
            if (v31 == v29)
            {
              if ((v30 & 0x80) != 0)
              {
                if (!memcmp(v28->__r_.__value_.__l.__data_, v25, v28->__r_.__value_.__l.__size_))
                  break;
              }
              else
              {
                if (!*((_BYTE *)&v28->__r_.__value_.__s + 23))
                  break;
                v32 = 0;
                while (v28->__r_.__value_.__s.__data_[v32] == *((unsigned __int8 *)v25 + v32))
                {
                  if (v30 == ++v32)
                    goto LABEL_80;
                }
              }
            }
            v28 += 6;
            if (v28 == v27)
              goto LABEL_85;
          }
        }
LABEL_80:
        if (!v28 || v27 == v28)
          break;
        if (&v28[4] != (std::string *)((char *)v25 + 24))
          std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)&v28[4], *((__int128 **)v25 + 3), *((__int128 **)v25 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v25 + 4) - *((_QWORD *)v25 + 3)) >> 3));
        v40 = *(std::string **)(a5 + 104);
        if ((unint64_t)v40 >= *(_QWORD *)(a5 + 112))
        {
          *(_QWORD *)(a5 + 104) = std::vector<cricket::StreamParams>::__push_back_slow_path<cricket::StreamParams const&>(v70, (const cricket::StreamParams *)v28);
          v25 = (__int128 *)((char *)v25 + 104);
          if (v25 == v71)
            return;
        }
        else
        {
          if (!v40)
            goto LABEL_175;
          *(_QWORD *)(a5 + 104) = cricket::StreamParams::StreamParams(v40, (const cricket::StreamParams *)v28) + 6;
          v25 = (__int128 *)((char *)v25 + 104);
          if (v25 == v71)
            return;
        }
      }
LABEL_85:
      if (*((_QWORD *)v25 + 6) != *((_QWORD *)v25 + 7))
      {
        v77 = 0uLL;
        v78 = 0uLL;
        v76 = 0uLL;
        v74 = 0uLL;
        memset(v75, 0, sizeof(v75));
        v73 = 0uLL;
        memset(__dst, 0, sizeof(__dst));
        if (__dst == (_BYTE *)v25)
          goto LABEL_89;
        if (*((char *)v25 + 23) < 0)
        {
          std::string::__assign_no_alias<true>(__dst, *(char **)v25, *((_QWORD *)v25 + 1));
          if ((_OWORD *)((char *)v75 + 8) != (_OWORD *)a2)
            goto LABEL_90;
        }
        else
        {
          v38 = *v25;
          *(_QWORD *)&__dst[16] = *((_QWORD *)v25 + 2);
          *(_OWORD *)__dst = v38;
LABEL_89:
          if ((_OWORD *)((char *)v75 + 8) != (_OWORD *)a2)
          {
LABEL_90:
            v39 = *(_BYTE *)(a2 + 23);
            if ((SHIBYTE(v75[1]) & 0x80000000) == 0)
            {
              if ((*(_BYTE *)(a2 + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>((_QWORD *)v75 + 1, *(char **)a2, *(_QWORD *)(a2 + 8));
                if (&v76 == (__int128 *)((char *)v25 + 24))
                {
LABEL_120:
                  v51 = (const cricket::RidDescription *)*((_QWORD *)v25 + 6);
                  v52 = (const cricket::RidDescription *)*((_QWORD *)v25 + 7);
                  v53 = 0xCCCCCCCCCCCCCCCDLL * ((v52 - v51) >> 4);
                  if (v53 >= 2 && (__int128 *)((char *)&v77 + 8) != v25 + 3)
                    std::vector<cricket::RidDescription>::__assign_with_size[abi:sn180100]<cricket::RidDescription*,cricket::RidDescription*>((uint64_t)&v77 + 8, v51, v52, v53);
                  goto LABEL_163;
                }
              }
              else
              {
                *(_OWORD *)((char *)v75 + 8) = *(_OWORD *)a2;
                *((_QWORD *)&v75[1] + 1) = *(_QWORD *)(a2 + 16);
                if (&v76 == (__int128 *)((char *)v25 + 24))
                  goto LABEL_120;
              }
LABEL_119:
              std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)&v76, *((__int128 **)v25 + 3), *((__int128 **)v25 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v25 + 4) - *((_QWORD *)v25 + 3)) >> 3));
              goto LABEL_120;
            }
            if (v39 >= 0)
              v49 = (const std::string::value_type *)a2;
            else
              v49 = *(const std::string::value_type **)a2;
            if (v39 >= 0)
              v50 = *(unsigned __int8 *)(a2 + 23);
            else
              v50 = *(_QWORD *)(a2 + 8);
            std::string::__assign_no_alias<false>((std::string *)((char *)v75 + 8), v49, v50);
          }
        }
        if (&v76 == (__int128 *)((char *)v25 + 24))
          goto LABEL_120;
        goto LABEL_119;
      }
      v77 = 0uLL;
      v78 = 0uLL;
      v76 = 0uLL;
      v74 = 0uLL;
      memset(v75, 0, sizeof(v75));
      v73 = 0uLL;
      memset(__dst, 0, sizeof(__dst));
      if (__dst != (_BYTE *)v25)
      {
        if (*((char *)v25 + 23) < 0)
        {
          std::string::__assign_no_alias<true>(__dst, *(char **)v25, *((_QWORD *)v25 + 1));
          if (v24 == v22)
            goto LABEL_128;
          goto LABEL_106;
        }
        v41 = *v25;
        *(_QWORD *)&__dst[16] = *((_QWORD *)v25 + 2);
        *(_OWORD *)__dst = v41;
      }
      if (v24 == v22)
        goto LABEL_128;
LABEL_106:
      if (*((int *)v25 + 24) >= 2)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_147:
          rtc::webrtc_logging_impl::Log("\r\t", v42, v43, v44, v45, v46, v47, v48, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/media_session.cc");
LABEL_148:
        v58 = 0;
        goto LABEL_149;
      }
LABEL_128:
      if (v24 == v22)
        goto LABEL_148;
      (*(void (**)(void ***__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a6 + 16))(&v79, a6, "WebRTC-FlexFEC-03", 17);
      if ((char)v81 < 0)
      {
        v56 = v80;
        if ((v80 & 0x8000000000000000) != 0)
          goto LABEL_175;
        v55 = v79;
        if (v80)
        {
          if (!v79)
            goto LABEL_175;
        }
      }
      else
      {
        v55 = (void **)&v79;
        v56 = v81;
      }
      if (v56 >= 7)
      {
        v59 = *(_DWORD *)v55;
        v60 = *(_DWORD *)((char *)v55 + 3);
        v57 = v59 == 1650552389 && v60 == 1684368482;
        if ((v81 & 0x80) == 0)
        {
LABEL_136:
          if (!v57)
            goto LABEL_146;
          goto LABEL_137;
        }
      }
      else
      {
        v57 = 0;
        if ((v81 & 0x80) == 0)
          goto LABEL_136;
      }
      operator delete(v79);
      if (!v57)
      {
LABEL_146:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          goto LABEL_147;
        goto LABEL_148;
      }
LABEL_137:
      v58 = 1;
LABEL_149:
      cricket::StreamParams::GenerateSsrcs((char **)__dst, *((_DWORD *)v25 + 24), v68, v58, a3);
      if ((_OWORD *)((char *)v75 + 8) == (_OWORD *)a2)
        goto LABEL_161;
      v62 = *(_BYTE *)(a2 + 23);
      if (SHIBYTE(v75[1]) < 0)
      {
        if (v62 >= 0)
          v63 = (const std::string::value_type *)a2;
        else
          v63 = *(const std::string::value_type **)a2;
        if (v62 >= 0)
          v64 = *(unsigned __int8 *)(a2 + 23);
        else
          v64 = *(_QWORD *)(a2 + 8);
        std::string::__assign_no_alias<false>((std::string *)((char *)v75 + 8), v63, v64);
LABEL_161:
        if (&v76 == (__int128 *)((char *)v25 + 24))
          goto LABEL_163;
LABEL_162:
        std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)&v76, *((__int128 **)v25 + 3), *((__int128 **)v25 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v25 + 4) - *((_QWORD *)v25 + 3)) >> 3));
        goto LABEL_163;
      }
      if ((*(_BYTE *)(a2 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)v75 + 1, *(char **)a2, *(_QWORD *)(a2 + 8));
        if (&v76 != (__int128 *)((char *)v25 + 24))
          goto LABEL_162;
      }
      else
      {
        *(_OWORD *)((char *)v75 + 8) = *(_OWORD *)a2;
        *((_QWORD *)&v75[1] + 1) = *(_QWORD *)(a2 + 16);
        if (&v76 != (__int128 *)((char *)v25 + 24))
          goto LABEL_162;
      }
LABEL_163:
      v65 = *(std::string **)(a5 + 104);
      if ((unint64_t)v65 >= *(_QWORD *)(a5 + 112))
      {
        *(_QWORD *)(a5 + 104) = std::vector<cricket::StreamParams>::__push_back_slow_path<cricket::StreamParams const&>(v70, (const cricket::StreamParams *)__dst);
        v66 = *(std::string **)(a4 + 8);
        if ((unint64_t)v66 >= *(_QWORD *)(a4 + 16))
          goto LABEL_49;
      }
      else
      {
        if (!v65)
          goto LABEL_175;
        *(_QWORD *)(a5 + 104) = cricket::StreamParams::StreamParams(v65, (const cricket::StreamParams *)__dst) + 6;
        v66 = *(std::string **)(a4 + 8);
        if ((unint64_t)v66 >= *(_QWORD *)(a4 + 16))
        {
LABEL_49:
          v26 = std::vector<cricket::StreamParams>::__push_back_slow_path<cricket::StreamParams const&>((std::string **)a4, (const cricket::StreamParams *)__dst);
          goto LABEL_50;
        }
      }
      if (!v66)
        goto LABEL_175;
      v26 = cricket::StreamParams::StreamParams(v66, (const cricket::StreamParams *)__dst) + 6;
LABEL_50:
      *(_QWORD *)(a4 + 8) = v26;
      cricket::StreamParams::~StreamParams((cricket::StreamParams *)__dst);
      v25 = (__int128 *)((char *)v25 + 104);
    }
    while (v25 != v71);
  }
}

void cricket::SctpDataContentDescription::~SctpDataContentDescription(cricket::SctpDataContentDescription *this)
{
  cricket::MediaContentDescription::~MediaContentDescription(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::SctpDataContentDescription::type(cricket::SctpDataContentDescription *this)
{
  return 2;
}

double cricket::SctpDataContentDescription::set_protocol(uint64_t a1, __int128 *__src, size_t __len)
{
  __int128 *v6;
  size_t v7;
  size_t v8;
  __int128 *v9;
  void **v11;
  double result;
  __int128 v13;
  unint64_t v14;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_17:
    abort();
  if (__len > 0x16)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&v13 + 1) = __len;
    v14 = v8 | 0x8000000000000000;
    *(_QWORD *)&v13 = v6;
  }
  else
  {
    HIBYTE(v14) = __len;
    v6 = &v13;
  }
  v9 = (__int128 *)((char *)v6 + __len);
  if (v6 <= __src && v9 > __src)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (__len)
    memmove(v6, __src, __len);
  *(_BYTE *)v9 = 0;
  v11 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v11);
  result = *(double *)&v13;
  *(_OWORD *)v11 = v13;
  *(_QWORD *)(a1 + 24) = v14;
  return result;
}

uint64_t cricket::SctpDataContentDescription::has_codecs(cricket::SctpDataContentDescription *this)
{
  return 0;
}

cricket::MediaContentDescription *cricket::SctpDataContentDescription::CloneInternal(cricket::SctpDataContentDescription *this)
{
  cricket::MediaContentDescription *v2;
  cricket::MediaContentDescription *result;

  v2 = (cricket::MediaContentDescription *)operator new();
  result = cricket::MediaContentDescription::MediaContentDescription(v2, this);
  *(_QWORD *)result = &unk_24C0B6F20;
  *((_BYTE *)result + 304) = *((_BYTE *)this + 304);
  *((_DWORD *)result + 77) = *((_DWORD *)this + 77);
  *((_DWORD *)result + 78) = *((_DWORD *)this + 78);
  return result;
}

void cricket::`anonymous namespace'::AddSimulcastToMediaDescription(uint64_t **this, uint64_t **a2, cricket::MediaContentDescription *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *((_QWORD *)a3 + 12);
  v4 = *((_QWORD *)a3 + 13);
  if (v3 != v4)
  {
    v6 = *((_QWORD *)a3 + 12);
    while (*(_QWORD *)(v6 + 120) == *(_QWORD *)(v6 + 128))
    {
      v6 += 144;
      if (v6 == v4)
        return;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v3 + 128) - *(_QWORD *)(v3 + 120)) >> 4) >= 2)
    {
      v8 = 0u;
      v9 = 0u;
      v7 = 0u;
      if (a2 == this)
      {
        __break(1u);
      }
      else
      {
        if (&v7 != (__int128 *)(this + 9))
          std::vector<std::vector<cricket::SimulcastLayer>>::__assign_with_size[abi:sn180100]<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>((uint64_t)&v7, this[9], this[10], 0xAAAAAAAAAAAAAAABLL * (this[10] - this[9]));
        if ((__int128 *)((char *)a3 + 208) != &v7)
        {
          std::vector<std::vector<cricket::SimulcastLayer>>::__assign_with_size[abi:sn180100]<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>((uint64_t)a3 + 208, (uint64_t *)v7, *((uint64_t **)&v7 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v7 + 1) - v7) >> 3));
          std::vector<std::vector<cricket::SimulcastLayer>>::__assign_with_size[abi:sn180100]<std::vector<cricket::SimulcastLayer>*,std::vector<cricket::SimulcastLayer>*>((uint64_t)a3 + 232, *((uint64_t **)&v8 + 1), (uint64_t *)v9, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *((_QWORD *)&v8 + 1)) >> 3));
        }
        cricket::SimulcastDescription::~SimulcastDescription((cricket::SimulcastDescription *)&v7);
      }
    }
  }
}

void cricket::UnsupportedContentDescription::~UnsupportedContentDescription(void **this)
{
  cricket::UnsupportedContentDescription *v1;

  v1 = (cricket::UnsupportedContentDescription *)this;
  *this = &unk_24C0B6FA0;
  if (*((char *)this + 327) < 0)
  {
    operator delete(this[38]);
    this = (void **)v1;
  }
  cricket::MediaContentDescription::~MediaContentDescription((cricket::MediaContentDescription *)this);
}

{
  *this = &unk_24C0B6FA0;
  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  cricket::MediaContentDescription::~MediaContentDescription((cricket::MediaContentDescription *)this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::UnsupportedContentDescription::type(cricket::UnsupportedContentDescription *this)
{
  return 3;
}

uint64_t cricket::UnsupportedContentDescription::has_codecs(cricket::UnsupportedContentDescription *this)
{
  return 0;
}

cricket::MediaContentDescription *cricket::UnsupportedContentDescription::CloneInternal(cricket::UnsupportedContentDescription *this)
{
  cricket::MediaContentDescription *v2;
  cricket::MediaContentDescription *v3;
  std::string *v4;

  v2 = (cricket::MediaContentDescription *)operator new();
  v3 = cricket::MediaContentDescription::MediaContentDescription(v2, this);
  *(_QWORD *)v3 = &unk_24C0B6FA0;
  v4 = (std::string *)((char *)v3 + 304);
  if (*((char *)this + 327) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 38), *((_QWORD *)this + 39));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *((_OWORD *)this + 19);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 40);
  }
  return v2;
}

char *std::vector<cricket::Codec>::__push_back_slow_path<cricket::Codec>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  void (***v40)(char *);
  void (**v41)(char *);
  BOOL v42;

  v2 = 0x84BDA12F684BDA13 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x12F684BDA12F684)
    abort();
  if (0x97B425ED097B426 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x97B425ED097B426 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x84BDA12F684BDA13 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x97B425ED097B42)
    v5 = 0x12F684BDA12F684;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_37:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x12F684BDA12F684)
    goto LABEL_37;
  v7 = 216 * v5;
  v8 = (char *)operator new(216 * v5);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = &v8[216 * v2];
  *(_QWORD *)v10 = &off_24C0B1418;
  *((_QWORD *)v10 + 1) = v9;
  *((_OWORD *)v10 + 1) = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v10 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a2 + 40);
  v10[56] = 0;
  v10[80] = 0;
  if (*(_BYTE *)(a2 + 80))
  {
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(a2 + 56);
    *((_QWORD *)v10 + 9) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    v10[80] = 1;
  }
  v11 = *(_QWORD *)(a2 + 88);
  v10[136] = 0;
  *((_QWORD *)v10 + 11) = v11;
  v12 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v10 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v10 + 7) = v12;
  *((_QWORD *)v10 + 16) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 88) = 0;
  v10[160] = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    *(_OWORD *)(v10 + 136) = *(_OWORD *)(a2 + 136);
    *((_QWORD *)v10 + 19) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    v10[160] = 1;
  }
  v13 = (_QWORD *)(a2 + 176);
  v14 = *(_QWORD *)(a2 + 176);
  v15 = *(_QWORD *)(a2 + 168);
  *((_QWORD *)v10 + 22) = v14;
  v16 = v10 + 176;
  *((_QWORD *)v10 + 21) = v15;
  v17 = *(_QWORD *)(a2 + 184);
  *((_QWORD *)v10 + 23) = v17;
  if (v17)
  {
    *(_QWORD *)(v14 + 16) = v16;
    *(_QWORD *)(a2 + 168) = v13;
    *v13 = 0;
    *(_QWORD *)(a2 + 184) = 0;
  }
  else
  {
    *((_QWORD *)v10 + 21) = v16;
  }
  v18 = &v8[v7];
  *((_QWORD *)v10 + 24) = 0;
  *((_QWORD *)v10 + 25) = 0;
  *((_QWORD *)v10 + 26) = 0;
  std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>((_QWORD *)v10 + 24, *(_QWORD *)(a2 + 192), *(_QWORD *)(a2 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 4));
  v19 = v10 + 216;
  v21 = (char *)*a1;
  v20 = (char *)a1[1];
  if (v20 == *a1)
  {
    *a1 = v10;
    a1[1] = v19;
    a1[2] = v18;
    if (!v20)
      return v19;
    goto LABEL_31;
  }
  v22 = 0;
  do
  {
    v25 = &v10[v22];
    *((_QWORD *)v25 - 27) = &off_24C0B1418;
    v26 = &v20[v22];
    *((_QWORD *)v25 - 26) = *(_QWORD *)&v20[v22 - 208];
    v27 = *(_OWORD *)&v20[v22 - 200];
    *((_QWORD *)v25 - 23) = *(_QWORD *)&v20[v22 - 184];
    *(_OWORD *)(v25 - 200) = v27;
    *((_QWORD *)v26 - 24) = 0;
    *((_QWORD *)v26 - 23) = 0;
    *((_QWORD *)v26 - 25) = 0;
    *((_OWORD *)v25 - 11) = *(_OWORD *)&v20[v22 - 176];
    v10[v22 - 160] = 0;
    *(v25 - 136) = 0;
    if (v20[v22 - 136])
    {
      v28 = *((_OWORD *)v26 - 10);
      *(_QWORD *)&v10[v22 - 144] = *((_QWORD *)v26 - 18);
      *(_OWORD *)&v10[v22 - 160] = v28;
      *((_QWORD *)v26 - 19) = 0;
      *((_QWORD *)v26 - 18) = 0;
      *((_QWORD *)v26 - 20) = 0;
      *(v25 - 136) = 1;
    }
    *((_QWORD *)v25 - 16) = 0;
    *((_QWORD *)v25 - 16) = *((_QWORD *)v26 - 16);
    v29 = *(_OWORD *)(v26 - 120);
    v30 = *(_OWORD *)(v26 - 104);
    *((_QWORD *)v25 - 11) = *((_QWORD *)v26 - 11);
    *(_OWORD *)(v25 - 104) = v30;
    *(_OWORD *)(v25 - 120) = v29;
    *((_QWORD *)v26 - 16) = 0;
    *(v25 - 80) = 0;
    *(v25 - 56) = 0;
    if (*(v26 - 56))
    {
      v31 = &v20[v22];
      v32 = *(_OWORD *)&v20[v22 - 80];
      *((_QWORD *)v25 - 8) = *(_QWORD *)&v20[v22 - 64];
      *((_OWORD *)v25 - 5) = v32;
      *((_QWORD *)v31 - 9) = 0;
      *((_QWORD *)v31 - 8) = 0;
      *((_QWORD *)v31 - 10) = 0;
      *(v25 - 56) = 1;
    }
    v33 = &v10[v22];
    *((_QWORD *)v33 - 6) = *(_QWORD *)&v20[v22 - 48];
    v34 = &v20[v22 - 40];
    v35 = *(_QWORD *)v34;
    *(_QWORD *)&v10[v22 - 40] = *(_QWORD *)v34;
    v36 = (uint64_t)&v10[v22 - 40];
    v37 = *(_QWORD *)&v20[v22 - 32];
    *((_QWORD *)v33 - 4) = v37;
    if (v37)
    {
      *(_QWORD *)(v35 + 16) = v36;
      *(_QWORD *)&v20[v22 - 48] = v34;
      *(_QWORD *)v34 = 0;
      *(_QWORD *)&v20[v22 - 32] = 0;
    }
    else
    {
      *((_QWORD *)v33 - 6) = v36;
    }
    v23 = &v10[v22];
    *((_QWORD *)v23 - 3) = 0;
    *((_QWORD *)v23 - 2) = 0;
    v24 = &v10[v22 - 24];
    *((_QWORD *)v24 + 2) = 0;
    std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>(v24, *(_QWORD *)&v20[v22 - 24], *(_QWORD *)&v20[v22 - 16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v20[v22 - 16] - *(_QWORD *)&v20[v22 - 24]) >> 4));
    v22 -= 216;
  }
  while (&v20[v22] != v21);
  v20 = (char *)*a1;
  v38 = (char *)a1[1];
  *a1 = &v10[v22];
  a1[1] = v19;
  a1[2] = v18;
  if (v38 != v20)
  {
    v39 = v38 - 216;
    v40 = (void (***)(char *))(v38 - 216);
    do
    {
      v41 = *v40;
      v40 -= 27;
      (*v41)(v39);
      v42 = v39 == v20;
      v39 = (char *)v40;
    }
    while (!v42);
  }
  if (v20)
LABEL_31:
    operator delete(v20);
  return v19;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  size_t v24;
  uint8x8_t v25;
  uint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_DWORD *)v15 + 5) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 >= 3)
      {
        v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] <= 1uLL)
        {
          v26 = 1 << -(char)__clz(v24 - 1);
          if (v24 >= 2)
            v24 = v26;
          if (prime <= v24)
            prime = v24;
          if (prime >= v8)
            goto LABEL_50;
LABEL_37:
          std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>(a1, prime);
          goto LABEL_50;
        }
      }
      v27 = std::__next_prime(v24);
      if (prime <= v27)
        prime = v27;
      if (prime < v8)
        goto LABEL_37;
    }
LABEL_50:
    v8 = *(_QWORD *)(a1 + 8);
    v28 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v28 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v28 & v7));
      if (v19)
        goto LABEL_26;
    }
    goto LABEL_52;
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
LABEL_26:
    *v15 = *v19;
LABEL_63:
    *v19 = v15;
    goto LABEL_64;
  }
LABEL_52:
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v29 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v29 >= v8)
        v29 %= v8;
    }
    else
    {
      v29 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,cricket::`anonymous namespace'::NegotiateCodecs(std::vector<cricket::Codec> const&,std::vector<cricket::Codec> const&,std::vector<cricket::Codec>*,BOOL)::$_0 &,cricket::Codec*,false>(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  int **v6;
  int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  __int128 *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  int *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 *v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  __int128 *v124;
  std::string *v125;
  __int128 v126;
  std::string *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int64_t v161;
  unint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  __int128 *v166;
  std::string *v167;
  __int128 v168;
  std::string *v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t i;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int64_t v208;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  __int128 v212;
  __int128 *v213;
  std::string *v214;
  __int128 v215;
  std::string *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  int64_t v224;
  int64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int64_t v245;
  char *v246;
  uint64_t v247;
  __int128 *v248;
  std::string *v249;
  __int128 v250;
  std::string *v251;
  uint64_t v252;
  uint64_t v253;
  __int128 v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int64_t v265;
  BOOL v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  __int128 v270;
  uint64_t v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int64_t v277;
  unint64_t v278;
  char *v279;
  uint64_t v280;
  __int128 *v281;
  std::string *v282;
  __int128 v283;
  std::string *v284;
  uint64_t v285;
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  int64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  BOOL v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  __int128 v307;
  uint64_t v308;
  __int128 v309;
  __int128 v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int64_t v315;
  char *v316;
  uint64_t v317;
  __int128 *v318;
  std::string *v319;
  __int128 v320;
  std::string *v321;
  uint64_t v322;
  uint64_t v323;
  __int128 v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  __int128 v339;
  uint64_t v340;
  __int128 v341;
  __int128 v342;
  _QWORD *v343;
  uint64_t v344;
  int **v345;
  int **v346;
  int64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  std::string *v351;
  __int128 v352;
  std::string *v353;
  char *v354;
  uint64_t v355;
  __int128 v356;
  uint64_t v357;
  char *v359;
  uint64_t v360;
  int v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  int64_t v366;
  unint64_t v367;
  char *v368;
  uint64_t v369;
  __int128 *v370;
  std::string *v371;
  __int128 v372;
  std::string *v373;
  uint64_t v374;
  uint64_t v375;
  __int128 v376;
  int *v377;
  int *v378;
  unint64_t v379;
  unint64_t v380;
  __int128 *v381;
  __int128 *v382;
  _QWORD *v383;
  unint64_t v384;
  void (**v386)(cricket::Codec *__hidden);
  unint64_t v388;
  __int128 *v389;
  unint64_t v390;
  int *v391;
  int64_t v392;
  uint64_t v393;
  int *v396;
  int *v397;
  uint64_t v398;
  __int128 v399;
  uint64_t v400;
  __int128 v401;
  __int128 v402;
  uint64_t v403;
  char v404;
  uint64_t v405;
  __int128 v406;
  __int128 v407;
  uint64_t v408;
  __int128 v409;
  uint64_t v410;
  char v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  char *v416;
  char *v417;
  int *v418;
  uint64_t v419;
  __int128 v420;
  uint64_t v421;
  __int128 v422;
  __int128 v423;
  uint64_t v424;
  char v425;
  uint64_t v426;
  __int128 v427;
  __int128 v428;
  uint64_t v429;
  __int128 v430;
  uint64_t v431;
  char v432;
  uint64_t *v433;
  uint64_t v434;
  uint64_t v435;
  char *v436;
  char *v437;
  char *v438;
  uint64_t v439;

  v6 = &v418;
  v439 = *MEMORY[0x24BDAC8D0];
  v7 = (int *)&v398 + 1;
LABEL_2:
  v8 = a1;
  v386 = (void (**)(cricket::Codec *__hidden))(a2 - 216);
  v377 = (int *)(a2 - 204);
  while (2)
  {
    v9 = a2 - v8;
    v10 = 0x84BDA12F684BDA13 * ((uint64_t)(a2 - v8) >> 3);
    a1 = v8;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v180 = *a3;
        v418 = (int *)(a2 - 204);
        v181 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v180, v377, (uint64_t)&std::piecewise_construct, &v418)+ 5);
        v182 = *a3;
        v418 = (int *)(v8 + 12);
        if (v181 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v182, (int *)(v8 + 12), (uint64_t)&std::piecewise_construct, &v418)+ 5))return;
        v7 = (int *)v8;
        v183 = *(_QWORD *)(v8 + 8);
        v418 = (int *)&off_24C0B1418;
        v419 = v183;
        v184 = *(_QWORD *)(v8 + 32);
        v420 = *(_OWORD *)(v8 + 16);
        v421 = v184;
        *(_QWORD *)(v8 + 24) = 0;
        *(_QWORD *)(v8 + 32) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        v422 = *(_OWORD *)(v8 + 40);
        LOBYTE(v423) = 0;
        v425 = 0;
        if (*(_BYTE *)(v8 + 80))
        {
          v185 = *(_OWORD *)(v8 + 56);
          v424 = *(_QWORD *)(v8 + 72);
          v423 = v185;
          *(_QWORD *)(v8 + 64) = 0;
          *(_QWORD *)(v8 + 72) = 0;
          *(_QWORD *)(v8 + 56) = 0;
          v425 = 1;
        }
        v426 = 0;
        v426 = *(_QWORD *)(v8 + 88);
        v186 = *(_QWORD *)(v8 + 128);
        v187 = *(_OWORD *)(v8 + 112);
        v427 = *(_OWORD *)(v8 + 96);
        v428 = v187;
        v429 = v186;
        *(_QWORD *)(v8 + 88) = 0;
        LOBYTE(v430) = 0;
        v432 = 0;
        if (*(_BYTE *)(v8 + 160))
        {
          v188 = *(_OWORD *)(v8 + 136);
          v431 = *(_QWORD *)(v8 + 152);
          v430 = v188;
          *(_QWORD *)(v8 + 144) = 0;
          *(_QWORD *)(v8 + 152) = 0;
          *(_QWORD *)(v8 + 136) = 0;
          v432 = 1;
        }
        v189 = (_QWORD *)(v8 + 176);
        v190 = *(_QWORD *)(v8 + 176);
        v62 = (int *)&v434;
        v433 = *(uint64_t **)(v8 + 168);
        v434 = v190;
        v435 = *(_QWORD *)(v8 + 184);
        if (!v435)
          goto LABEL_301;
        *(_QWORD *)(v190 + 16) = &v434;
        *(_QWORD *)(v8 + 168) = v189;
        *v189 = 0;
        *(_QWORD *)(v8 + 184) = 0;
        goto LABEL_302;
      case 3:
        return;
      case 4:
        return;
      case 5:
        return;
      default:
        v11 = v8;
        if (v9 <= 5183)
        {
          if ((a5 & 1) != 0)
          {
            if (v8 != a2)
            {
              v191 = v8 + 216;
              if (v8 + 216 != a2)
              {
                for (i = 0; ; i += 216)
                {
                  v194 = v8;
                  v8 = v191;
                  v195 = *a3;
                  v418 = (int *)(v194 + 228);
                  v196 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v195, (int *)(v194 + 228), (uint64_t)&std::piecewise_construct, &v418)+ 5);
                  v197 = *a3;
                  v418 = (int *)(v194 + 12);
                  if (v196 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v197, (int *)(v194 + 12), (uint64_t)&std::piecewise_construct, &v418)+ 5))
                  {
                    v198 = *(_QWORD *)(v8 + 8);
                    v418 = (int *)&off_24C0B1418;
                    v419 = v198;
                    v199 = *(_QWORD *)(v8 + 32);
                    v420 = *(_OWORD *)(v8 + 16);
                    v421 = v199;
                    *(_QWORD *)(v8 + 24) = 0;
                    *(_QWORD *)(v8 + 32) = 0;
                    *(_QWORD *)(v8 + 16) = 0;
                    v422 = *(_OWORD *)(v8 + 40);
                    LOBYTE(v423) = 0;
                    v425 = 0;
                    if (*(_BYTE *)(v8 + 80))
                    {
                      v200 = *(_OWORD *)(v8 + 56);
                      v424 = *(_QWORD *)(v8 + 72);
                      v423 = v200;
                      *(_QWORD *)(v8 + 64) = 0;
                      *(_QWORD *)(v8 + 72) = 0;
                      *(_QWORD *)(v8 + 56) = 0;
                      v425 = 1;
                    }
                    v426 = 0;
                    v426 = *(_QWORD *)(v8 + 88);
                    v201 = *(_QWORD *)(v8 + 128);
                    v202 = *(_OWORD *)(v8 + 112);
                    v427 = *(_OWORD *)(v8 + 96);
                    v428 = v202;
                    v429 = v201;
                    *(_QWORD *)(v8 + 88) = 0;
                    LOBYTE(v430) = 0;
                    v432 = 0;
                    if (*(_BYTE *)(v8 + 160))
                    {
                      v203 = *(_OWORD *)(v8 + 136);
                      v431 = *(_QWORD *)(v8 + 152);
                      v430 = v203;
                      *(_QWORD *)(v8 + 144) = 0;
                      *(_QWORD *)(v8 + 152) = 0;
                      *(_QWORD *)(v8 + 136) = 0;
                      v432 = 1;
                    }
                    v204 = (_QWORD *)(v8 + 176);
                    v205 = *(_QWORD *)(v8 + 176);
                    v433 = *(uint64_t **)(v8 + 168);
                    v434 = v205;
                    v435 = *(_QWORD *)(v8 + 184);
                    if (v435)
                    {
                      *(_QWORD *)(v205 + 16) = &v434;
                      *(_QWORD *)(v8 + 168) = v204;
                      *v204 = 0;
                      *(_QWORD *)(v8 + 184) = 0;
                      v436 = 0;
                      v437 = 0;
                      v438 = 0;
                      v206 = *(_QWORD *)(v8 + 192);
                      v207 = *(_QWORD *)(v8 + 200);
                      v208 = v207 - v206;
                      if (v207 == v206)
                        goto LABEL_186;
LABEL_177:
                      v209 = 0xAAAAAAAAAAAAAAABLL * (v208 >> 4);
                      if (v209 > 0x555555555555555)
                        goto LABEL_314;
                      v210 = (char *)operator new(v208);
                      v211 = 0;
                      v436 = v210;
                      v437 = v210;
                      v438 = &v210[48 * v209];
                      while (1)
                      {
                        v213 = (__int128 *)(v206 + v211);
                        v214 = (std::string *)&v210[v211];
                        if (*(char *)(v206 + v211 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(v214, *(const std::string::value_type **)v213, *((_QWORD *)v213 + 1));
                          v216 = (std::string *)&v210[v211 + 24];
                          v217 = v206 + v211;
                          v218 = v206 + v211 + 24;
                          if ((*(char *)(v206 + v211 + 47) & 0x80000000) == 0)
                          {
LABEL_179:
                            v212 = *(_OWORD *)v218;
                            v216->__r_.__value_.__r.__words[2] = *(_QWORD *)(v218 + 16);
                            *(_OWORD *)&v216->__r_.__value_.__l.__data_ = v212;
                            v211 += 48;
                            if (v206 + v211 == v207)
                              goto LABEL_185;
                            continue;
                          }
                        }
                        else
                        {
                          v215 = *v213;
                          v214->__r_.__value_.__r.__words[2] = *((_QWORD *)v213 + 2);
                          *(_OWORD *)&v214->__r_.__value_.__l.__data_ = v215;
                          v216 = (std::string *)&v210[v211 + 24];
                          v217 = v206 + v211;
                          v218 = v206 + v211 + 24;
                          if ((*(char *)(v206 + v211 + 47) & 0x80000000) == 0)
                            goto LABEL_179;
                        }
                        std::string::__init_copy_ctor_external(v216, *(const std::string::value_type **)v218, *(_QWORD *)(v217 + 32));
                        v211 += 48;
                        if (v206 + v211 == v207)
                        {
LABEL_185:
                          v437 = &v210[v211];
                          goto LABEL_186;
                        }
                      }
                    }
                    v433 = &v434;
                    v436 = 0;
                    v437 = 0;
                    v438 = 0;
                    v206 = *(_QWORD *)(v8 + 192);
                    v207 = *(_QWORD *)(v8 + 200);
                    v208 = v207 - v206;
                    if (v207 != v206)
                      goto LABEL_177;
LABEL_186:
                    v219 = i;
                    do
                    {
                      v220 = a1 + v219;
                      cricket::Codec::operator=(a1 + v219 + 216, a1 + v219);
                      if (!v219)
                      {
                        v193 = a1;
                        goto LABEL_166;
                      }
                      v221 = *a3;
                      v397 = (int *)&v419 + 1;
                      v222 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v221, (int *)&v419 + 1, (uint64_t)&std::piecewise_construct, &v397)+ 5);
                      v223 = *a3;
                      v397 = (int *)(v220 - 204);
                      v219 -= 216;
                    }
                    while (v222 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v223, (int *)(v220 - 204), (uint64_t)&std::piecewise_construct, &v397)+ 5));
                    v193 = a1 + v219 + 216;
LABEL_166:
                    cricket::Codec::operator=(v193, (uint64_t)&v418);
                    cricket::Codec::~Codec((cricket::Codec *)&v418);
                  }
                  v191 = v8 + 216;
                  if (v8 + 216 == a2)
                    return;
                }
              }
            }
          }
          else if (v8 != a2)
          {
            v329 = v8 + 216;
            if (v8 + 216 != a2)
            {
              v330 = 0;
              v390 = v8 + 228;
              v393 = -2;
              v386 = &off_24C0B1418;
              v391 = (int *)v8;
              v331 = 1;
              while (1)
              {
                v332 = 216 * v330;
                v330 = v331;
                v333 = *a3;
                v418 = (int *)(v390 + v332);
                v334 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v333, (int *)(v390 + v332), (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v335 = *a3;
                v336 = a1;
                v418 = (int *)(a1 + v332 + 12);
                if (v334 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v335, v418, (uint64_t)&std::piecewise_construct, &v418)+ 5))
                {
                  v337 = *(_QWORD *)(v329 + 8);
                  v418 = (int *)&off_24C0B1418;
                  v419 = v337;
                  v338 = *(_QWORD *)(v329 + 32);
                  v420 = *(_OWORD *)(v329 + 16);
                  v421 = v338;
                  *(_QWORD *)(v329 + 24) = 0;
                  *(_QWORD *)(v329 + 32) = 0;
                  *(_QWORD *)(v329 + 16) = 0;
                  v422 = *(_OWORD *)(v329 + 40);
                  LOBYTE(v423) = 0;
                  v425 = 0;
                  if (*(_BYTE *)(v329 + 80))
                  {
                    v339 = *(_OWORD *)(v329 + 56);
                    v424 = *(_QWORD *)(v329 + 72);
                    v423 = v339;
                    *(_QWORD *)(v329 + 64) = 0;
                    *(_QWORD *)(v329 + 72) = 0;
                    *(_QWORD *)(v329 + 56) = 0;
                    v425 = 1;
                  }
                  v426 = 0;
                  v426 = *(_QWORD *)(v329 + 88);
                  v340 = *(_QWORD *)(v329 + 128);
                  v341 = *(_OWORD *)(v329 + 112);
                  v427 = *(_OWORD *)(v329 + 96);
                  v428 = v341;
                  v429 = v340;
                  *(_QWORD *)(v329 + 88) = 0;
                  LOBYTE(v430) = 0;
                  v432 = 0;
                  if (*(_BYTE *)(v329 + 160))
                  {
                    v342 = *(_OWORD *)(v329 + 136);
                    v431 = *(_QWORD *)(v329 + 152);
                    v430 = v342;
                    *(_QWORD *)(v329 + 144) = 0;
                    *(_QWORD *)(v329 + 152) = 0;
                    *(_QWORD *)(v329 + 136) = 0;
                    v432 = 1;
                  }
                  v343 = (_QWORD *)(v329 + 176);
                  v344 = *(_QWORD *)(v329 + 176);
                  v433 = *(uint64_t **)(v329 + 168);
                  v434 = v344;
                  v435 = *(_QWORD *)(v329 + 184);
                  if (v435)
                  {
                    *(_QWORD *)(v344 + 16) = &v434;
                    *(_QWORD *)(v329 + 168) = v343;
                    *v343 = 0;
                    *(_QWORD *)(v329 + 184) = 0;
                    v436 = 0;
                    v437 = 0;
                    v438 = 0;
                    v345 = *(int ***)(v329 + 192);
                    v346 = *(int ***)(v329 + 200);
                    v347 = (char *)v346 - (char *)v345;
                    if (v346 == v345)
                      goto LABEL_295;
LABEL_286:
                    v348 = 0xAAAAAAAAAAAAAAABLL * (v347 >> 4);
                    if (v348 > 0x555555555555555)
                      goto LABEL_314;
                    v349 = (char *)operator new(v347);
                    v6 = 0;
                    v436 = v349;
                    v437 = v349;
                    v438 = &v349[48 * v348];
                    while (1)
                    {
                      v350 = (char *)v6 + (_QWORD)v345;
                      v351 = (std::string *)((char *)v6 + (_QWORD)v349);
                      if (*((char *)v6 + (_QWORD)v345 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(v351, *(const std::string::value_type **)v350, *((_QWORD *)v350 + 1));
                        v353 = (std::string *)((char *)v6 + (_QWORD)v349 + 24);
                        v354 = (char *)v6 + (_QWORD)v345;
                        v355 = (uint64_t)v6 + (_QWORD)v345 + 24;
                        if (*((char *)v6 + (_QWORD)v345 + 47) < 0)
                        {
LABEL_288:
                          std::string::__init_copy_ctor_external(v353, *(const std::string::value_type **)v355, *((_QWORD *)v354 + 4));
                          v6 += 6;
                          if ((int **)((char *)v6 + (_QWORD)v345) == v346)
                            goto LABEL_294;
                          continue;
                        }
                      }
                      else
                      {
                        v352 = *(_OWORD *)v350;
                        v351->__r_.__value_.__r.__words[2] = *((_QWORD *)v350 + 2);
                        *(_OWORD *)&v351->__r_.__value_.__l.__data_ = v352;
                        v353 = (std::string *)((char *)v6 + (_QWORD)v349 + 24);
                        v354 = (char *)v6 + (_QWORD)v345;
                        v355 = (uint64_t)v6 + (_QWORD)v345 + 24;
                        if (*((char *)v6 + (_QWORD)v345 + 47) < 0)
                          goto LABEL_288;
                      }
                      v356 = *(_OWORD *)v355;
                      v353->__r_.__value_.__r.__words[2] = *(_QWORD *)(v355 + 16);
                      *(_OWORD *)&v353->__r_.__value_.__l.__data_ = v356;
                      v6 += 6;
                      if ((int **)((char *)v6 + (_QWORD)v345) == v346)
                      {
LABEL_294:
                        v437 = (char *)v6 + (_QWORD)v349;
                        goto LABEL_295;
                      }
                    }
                  }
                  v433 = &v434;
                  v436 = 0;
                  v437 = 0;
                  v438 = 0;
                  v345 = *(int ***)(v329 + 192);
                  v346 = *(int ***)(v329 + 200);
                  v347 = (char *)v346 - (char *)v345;
                  if (v346 != v345)
                    goto LABEL_286;
LABEL_295:
                  v7 = v391;
                  v357 = v393;
                  do
                  {
                    cricket::Codec::operator=((uint64_t)(v7 + 54), (uint64_t)v7);
                    if (__CFADD__(v357++, 1))
                      goto LABEL_300;
                    v359 = (char *)(v7 - 54);
                    v360 = *a3;
                    v397 = (int *)&v419 + 1;
                    v361 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v360, (int *)&v419 + 1, (uint64_t)&std::piecewise_construct, &v397)+ 5);
                    v362 = *a3;
                    v397 = v7 - 51;
                    v363 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v362, v7 - 51, (uint64_t)&std::piecewise_construct, &v397)+ 5);
                    v7 -= 54;
                    v266 = v361 <= v363;
                    v6 = &v418;
                  }
                  while (!v266);
                  cricket::Codec::operator=((uint64_t)(v359 + 216), (uint64_t)&v418);
                  cricket::Codec::~Codec((cricket::Codec *)&v418);
                  v336 = a1;
                }
                v331 = v330 + 1;
                v329 = v336 + 216 * (v330 + 1);
                v391 += 54;
                --v393;
                if (v329 == a2)
                  return;
              }
            }
          }
          return;
        }
        if (!a4)
        {
          if (v8 == a2)
            return;
          v384 = a2 - v8;
          v392 = (unint64_t)(v10 - 2) >> 1;
          v224 = v392;
          do
          {
            v225 = v224;
            if (v392 >= v224)
            {
              v226 = (2 * v224) | 1;
              v227 = a1 + 216 * v226;
              if (2 * v224 + 2 < v10)
              {
                v228 = *a3;
                v418 = (int *)(a1 + 216 * v226 + 12);
                v229 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v228, v418, (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v230 = *a3;
                v418 = (int *)(v227 + 228);
                v231 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v230, (int *)(v227 + 228), (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v227 += 216 * (v229 > v231);
                if (v229 > v231)
                  v226 = 2 * v225 + 2;
              }
              v232 = *a3;
              v418 = (int *)(v227 + 12);
              v233 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v232, (int *)(v227 + 12), (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v234 = *a3;
              v418 = (int *)(a1 + 216 * v225 + 12);
              if (v233 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v234, v418, (uint64_t)&std::piecewise_construct, &v418)+ 5))
              {
                v235 = a1 + 216 * v225;
                v418 = (int *)&off_24C0B1418;
                v419 = *(_QWORD *)(v235 + 8);
                v236 = *(_OWORD *)(v235 + 16);
                v421 = *(_QWORD *)(v235 + 32);
                v420 = v236;
                *(_QWORD *)(v235 + 24) = 0;
                *(_QWORD *)(v235 + 32) = 0;
                *(_QWORD *)(v235 + 16) = 0;
                v422 = *(_OWORD *)(v235 + 40);
                LOBYTE(v423) = 0;
                v425 = 0;
                if (*(_BYTE *)(v235 + 80))
                {
                  v237 = *(_OWORD *)(v235 + 56);
                  v424 = *(_QWORD *)(v235 + 72);
                  v423 = v237;
                  *(_QWORD *)(v235 + 64) = 0;
                  *(_QWORD *)(v235 + 72) = 0;
                  *(_QWORD *)(v235 + 56) = 0;
                  v425 = 1;
                }
                v426 = 0;
                v426 = *(_QWORD *)(v235 + 88);
                v238 = *(_OWORD *)(v235 + 96);
                v239 = *(_OWORD *)(v235 + 112);
                v429 = *(_QWORD *)(v235 + 128);
                v427 = v238;
                v428 = v239;
                *(_QWORD *)(v235 + 88) = 0;
                LOBYTE(v430) = 0;
                v432 = 0;
                if (*(_BYTE *)(v235 + 160))
                {
                  v240 = *(_OWORD *)(v235 + 136);
                  v431 = *(_QWORD *)(v235 + 152);
                  v430 = v240;
                  *(_QWORD *)(v235 + 144) = 0;
                  *(_QWORD *)(v235 + 152) = 0;
                  *(_QWORD *)(v235 + 136) = 0;
                  v432 = 1;
                }
                v433 = *(uint64_t **)(v235 + 168);
                v241 = (_QWORD *)(v235 + 176);
                v242 = *(_QWORD *)(v235 + 176);
                v434 = v242;
                v435 = *(_QWORD *)(v235 + 184);
                if (v435)
                {
                  *(_QWORD *)(v242 + 16) = &v434;
                  *(_QWORD *)(v235 + 168) = v241;
                  *v241 = 0;
                  *(_QWORD *)(v235 + 184) = 0;
                  v436 = 0;
                  v437 = 0;
                  v438 = 0;
                  v243 = *(_QWORD *)(v235 + 192);
                  v244 = *(_QWORD *)(v235 + 200);
                  v245 = v244 - v243;
                  if (v244 != v243)
                    goto LABEL_207;
                }
                else
                {
                  v433 = &v434;
                  v436 = 0;
                  v437 = 0;
                  v438 = 0;
                  v243 = *(_QWORD *)(v235 + 192);
                  v244 = *(_QWORD *)(v235 + 200);
                  v245 = v244 - v243;
                  if (v244 != v243)
                  {
LABEL_207:
                    v388 = 0xAAAAAAAAAAAAAAABLL * (v245 >> 4);
                    if (v388 > 0x555555555555555)
                      goto LABEL_314;
                    v246 = (char *)operator new(v245);
                    v247 = 0;
                    v436 = v246;
                    v437 = v246;
                    v438 = &v246[48 * v388];
                    while (1)
                    {
                      v248 = (__int128 *)(v243 + v247);
                      v249 = (std::string *)&v246[v247];
                      if (*(char *)(v243 + v247 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(v249, *(const std::string::value_type **)v248, *((_QWORD *)v248 + 1));
                        v251 = (std::string *)&v246[v247 + 24];
                        v252 = v243 + v247;
                        v253 = v243 + v247 + 24;
                        if (*(char *)(v243 + v247 + 47) < 0)
                        {
LABEL_209:
                          std::string::__init_copy_ctor_external(v251, *(const std::string::value_type **)v253, *(_QWORD *)(v252 + 32));
                          v247 += 48;
                          if (v243 + v247 == v244)
                            goto LABEL_215;
                          continue;
                        }
                      }
                      else
                      {
                        v250 = *v248;
                        v249->__r_.__value_.__r.__words[2] = *((_QWORD *)v248 + 2);
                        *(_OWORD *)&v249->__r_.__value_.__l.__data_ = v250;
                        v251 = (std::string *)&v246[v247 + 24];
                        v252 = v243 + v247;
                        v253 = v243 + v247 + 24;
                        if (*(char *)(v243 + v247 + 47) < 0)
                          goto LABEL_209;
                      }
                      v254 = *(_OWORD *)v253;
                      v251->__r_.__value_.__r.__words[2] = *(_QWORD *)(v253 + 16);
                      *(_OWORD *)&v251->__r_.__value_.__l.__data_ = v254;
                      v247 += 48;
                      if (v243 + v247 == v244)
                      {
LABEL_215:
                        v437 = &v246[v247];
                        goto LABEL_221;
                      }
                    }
                  }
                }
                do
                {
LABEL_221:
                  v262 = v227;
                  cricket::Codec::operator=(v235, v227);
                  if (v392 < v226)
                    break;
                  v263 = (2 * v226) | 1;
                  v227 = a1 + 216 * v263;
                  v264 = 2 * v226 + 2;
                  if (v264 < v10)
                  {
                    v255 = *a3;
                    v397 = (int *)(a1 + 216 * v263 + 12);
                    v256 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v255, v397, (uint64_t)&std::piecewise_construct, &v397)+ 5);
                    v257 = *a3;
                    v397 = (int *)(v227 + 228);
                    v258 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v257, (int *)(v227 + 228), (uint64_t)&std::piecewise_construct, &v397)+ 5);
                    v227 += 216 * (v256 > v258);
                    v226 = v256 <= v258 ? v263 : v264;
                  }
                  else
                  {
                    v226 = (2 * v226) | 1;
                  }
                  v259 = *a3;
                  v397 = (int *)(v227 + 12);
                  v260 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v259, (int *)(v227 + 12), (uint64_t)&std::piecewise_construct, &v397)+ 5);
                  v261 = *a3;
                  v397 = (int *)&v419 + 1;
                  v235 = v262;
                }
                while (v260 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v261, (int *)&v419 + 1, (uint64_t)&std::piecewise_construct, &v397)+ 5));
                cricket::Codec::operator=(v262, (uint64_t)&v418);
                cricket::Codec::~Codec((cricket::Codec *)&v418);
              }
            }
            v224 = v225 - 1;
          }
          while (v225);
          v265 = v384 / 0xD8;
          v389 = (__int128 *)(a1 + 16);
          v382 = (__int128 *)(a1 + 56);
          v383 = (_QWORD *)(a1 + 176);
          v381 = (__int128 *)(a1 + 136);
          while (1)
          {
            v267 = a1;
            v268 = *(_QWORD *)(a1 + 8);
            v397 = (int *)&off_24C0B1418;
            v398 = v268;
            v269 = *(_QWORD *)(a1 + 32);
            v399 = *v389;
            v400 = v269;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)v389 = 0;
            v401 = *(_OWORD *)(a1 + 40);
            LOBYTE(v402) = 0;
            v404 = 0;
            if (*(_BYTE *)(a1 + 80))
            {
              v270 = *v382;
              v403 = *(_QWORD *)(a1 + 72);
              v402 = v270;
              *(_QWORD *)(a1 + 64) = 0;
              *(_QWORD *)(a1 + 72) = 0;
              *(_QWORD *)v382 = 0;
              v404 = 1;
            }
            v405 = 0;
            v405 = *(_QWORD *)(a1 + 88);
            v271 = *(_QWORD *)(a1 + 128);
            v272 = *(_OWORD *)(a1 + 112);
            v406 = *(_OWORD *)(a1 + 96);
            v407 = v272;
            v408 = v271;
            *(_QWORD *)(a1 + 88) = 0;
            LOBYTE(v409) = 0;
            v411 = 0;
            if (*(_BYTE *)(a1 + 160))
            {
              v273 = *v381;
              v410 = *(_QWORD *)(a1 + 152);
              v409 = v273;
              *(_QWORD *)(a1 + 144) = 0;
              *(_QWORD *)(a1 + 152) = 0;
              *(_QWORD *)v381 = 0;
              v411 = 1;
            }
            v274 = *(_QWORD *)(a1 + 176);
            v412 = *(uint64_t **)(a1 + 168);
            v413 = v274;
            v414 = *(_QWORD *)(a1 + 184);
            if (v414)
              break;
            v412 = &v413;
            v415 = 0;
            v416 = 0;
            v417 = 0;
            v276 = *(_QWORD *)(a1 + 192);
            v275 = *(_QWORD *)(a1 + 200);
            v277 = v275 - v276;
            if (v275 != v276)
              goto LABEL_235;
LABEL_244:
            v288 = 0;
            v289 = (unint64_t)(v265 - 2) >> 1;
            v290 = a1;
            do
            {
              while (1)
              {
                v296 = v288 + 1;
                v295 = v290 + 216 * (v288 + 1);
                v297 = (2 * v288) | 1;
                v288 = 2 * v288 + 2;
                if (v288 < v265)
                  break;
                v288 = v297;
                cricket::Codec::operator=(v290, v295);
                v290 = v295;
                if (v297 > v289)
                  goto LABEL_250;
              }
              v291 = *a3;
              v418 = (int *)(v290 + 216 * v296 + 12);
              v292 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v291, v418, (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v293 = *a3;
              v418 = (int *)(v295 + 228);
              v267 = a1;
              v294 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v293, (int *)(v295 + 228), (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v295 += 216 * (v292 > v294);
              if (v292 <= v294)
                v288 = v297;
              cricket::Codec::operator=(v290, v295);
              v290 = v295;
            }
            while (v288 <= v289);
LABEL_250:
            v298 = a2 - 216;
            v299 = v295 == a2 - 216;
            a2 -= 216;
            if (v299)
            {
              cricket::Codec::operator=(v295, (uint64_t)&v397);
            }
            else
            {
              cricket::Codec::operator=(v295, v298);
              cricket::Codec::operator=(v298, (uint64_t)&v397);
              v300 = v295 - v267 + 216;
              if (v300 >= 217)
              {
                v301 = (v300 / 0xD8uLL - 2) >> 1;
                v302 = *a3;
                v418 = (int *)(v267 + 216 * v301 + 12);
                v303 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v302, v418, (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v304 = *a3;
                v418 = (int *)(v295 + 12);
                if (v303 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v304, (int *)(v295 + 12), (uint64_t)&std::piecewise_construct, &v418)+ 5))
                {
                  v305 = *(_QWORD *)(v295 + 8);
                  v418 = (int *)&off_24C0B1418;
                  v419 = v305;
                  v306 = *(_QWORD *)(v295 + 32);
                  v420 = *(_OWORD *)(v295 + 16);
                  v421 = v306;
                  *(_QWORD *)(v295 + 24) = 0;
                  *(_QWORD *)(v295 + 32) = 0;
                  *(_QWORD *)(v295 + 16) = 0;
                  v422 = *(_OWORD *)(v295 + 40);
                  LOBYTE(v423) = 0;
                  v425 = 0;
                  if (*(_BYTE *)(v295 + 80))
                  {
                    v307 = *(_OWORD *)(v295 + 56);
                    v424 = *(_QWORD *)(v295 + 72);
                    v423 = v307;
                    *(_QWORD *)(v295 + 64) = 0;
                    *(_QWORD *)(v295 + 72) = 0;
                    *(_QWORD *)(v295 + 56) = 0;
                    v425 = 1;
                  }
                  v426 = 0;
                  v426 = *(_QWORD *)(v295 + 88);
                  v308 = *(_QWORD *)(v295 + 128);
                  v309 = *(_OWORD *)(v295 + 112);
                  v427 = *(_OWORD *)(v295 + 96);
                  v428 = v309;
                  v429 = v308;
                  *(_QWORD *)(v295 + 88) = 0;
                  LOBYTE(v430) = 0;
                  v432 = 0;
                  if (*(_BYTE *)(v295 + 160))
                  {
                    v310 = *(_OWORD *)(v295 + 136);
                    v431 = *(_QWORD *)(v295 + 152);
                    v430 = v310;
                    *(_QWORD *)(v295 + 144) = 0;
                    *(_QWORD *)(v295 + 152) = 0;
                    *(_QWORD *)(v295 + 136) = 0;
                    v432 = 1;
                  }
                  v311 = (_QWORD *)(v295 + 176);
                  v312 = *(_QWORD *)(v295 + 176);
                  v433 = *(uint64_t **)(v295 + 168);
                  v434 = v312;
                  v435 = *(_QWORD *)(v295 + 184);
                  if (v435)
                  {
                    *(_QWORD *)(v312 + 16) = &v434;
                    *(_QWORD *)(v295 + 168) = v311;
                    *v311 = 0;
                    *(_QWORD *)(v295 + 184) = 0;
                    v436 = 0;
                    v437 = 0;
                    v438 = 0;
                    v313 = *(_QWORD *)(v295 + 192);
                    v314 = *(_QWORD *)(v295 + 200);
                    v315 = v314 - v313;
                    if (v314 == v313)
                      goto LABEL_270;
LABEL_261:
                    v380 = 0xAAAAAAAAAAAAAAABLL * (v315 >> 4);
                    if (v380 > 0x555555555555555)
                      goto LABEL_314;
                    v316 = (char *)operator new(v315);
                    v317 = 0;
                    v436 = v316;
                    v437 = v316;
                    v438 = &v316[48 * v380];
                    while (1)
                    {
                      v318 = (__int128 *)(v313 + v317);
                      v319 = (std::string *)&v316[v317];
                      if (*(char *)(v313 + v317 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(v319, *(const std::string::value_type **)v318, *((_QWORD *)v318 + 1));
                        v321 = (std::string *)&v316[v317 + 24];
                        v322 = v313 + v317;
                        v323 = v313 + v317 + 24;
                        if (*(char *)(v313 + v317 + 47) < 0)
                        {
LABEL_263:
                          std::string::__init_copy_ctor_external(v321, *(const std::string::value_type **)v323, *(_QWORD *)(v322 + 32));
                          v317 += 48;
                          if (v313 + v317 == v314)
                            goto LABEL_269;
                          continue;
                        }
                      }
                      else
                      {
                        v320 = *v318;
                        v319->__r_.__value_.__r.__words[2] = *((_QWORD *)v318 + 2);
                        *(_OWORD *)&v319->__r_.__value_.__l.__data_ = v320;
                        v321 = (std::string *)&v316[v317 + 24];
                        v322 = v313 + v317;
                        v323 = v313 + v317 + 24;
                        if (*(char *)(v313 + v317 + 47) < 0)
                          goto LABEL_263;
                      }
                      v324 = *(_OWORD *)v323;
                      v321->__r_.__value_.__r.__words[2] = *(_QWORD *)(v323 + 16);
                      *(_OWORD *)&v321->__r_.__value_.__l.__data_ = v324;
                      v317 += 48;
                      if (v313 + v317 == v314)
                      {
LABEL_269:
                        v437 = &v316[v317];
                        goto LABEL_270;
                      }
                    }
                  }
                  v433 = &v434;
                  v436 = 0;
                  v437 = 0;
                  v438 = 0;
                  v313 = *(_QWORD *)(v295 + 192);
                  v314 = *(_QWORD *)(v295 + 200);
                  v315 = v314 - v313;
                  if (v314 != v313)
                    goto LABEL_261;
                  do
                  {
LABEL_270:
                    v325 = v295;
                    v295 = v267 + 216 * v301;
                    cricket::Codec::operator=(v325, v295);
                    if (!v301)
                      break;
                    v301 = (v301 - 1) >> 1;
                    v326 = *a3;
                    v396 = (int *)(v267 + 216 * v301 + 12);
                    v327 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v326, v396, (uint64_t)&std::piecewise_construct, &v396)+ 5);
                    v328 = *a3;
                    v396 = (int *)&v419 + 1;
                  }
                  while (v327 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v328, (int *)&v419 + 1, (uint64_t)&std::piecewise_construct, &v396)+ 5));
                  cricket::Codec::operator=(v295, (uint64_t)&v418);
                  cricket::Codec::~Codec((cricket::Codec *)&v418);
                }
              }
            }
            cricket::Codec::~Codec((cricket::Codec *)&v397);
            v266 = v265-- <= 2;
            if (v266)
              return;
          }
          *(_QWORD *)(v274 + 16) = &v413;
          *(_QWORD *)(a1 + 168) = v383;
          *v383 = 0;
          *(_QWORD *)(a1 + 184) = 0;
          v415 = 0;
          v416 = 0;
          v417 = 0;
          v276 = *(_QWORD *)(a1 + 192);
          v275 = *(_QWORD *)(a1 + 200);
          v277 = v275 - v276;
          if (v275 == v276)
            goto LABEL_244;
LABEL_235:
          v278 = 0xAAAAAAAAAAAAAAABLL * (v277 >> 4);
          if (v278 > 0x555555555555555)
            goto LABEL_314;
          v279 = (char *)operator new(v277);
          v280 = 0;
          v415 = v279;
          v416 = v279;
          v417 = &v279[48 * v278];
          while (1)
          {
            v281 = (__int128 *)(v276 + v280);
            v282 = (std::string *)&v279[v280];
            if (*(char *)(v276 + v280 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v282, *(const std::string::value_type **)v281, *((_QWORD *)v281 + 1));
              v284 = (std::string *)&v279[v280 + 24];
              v285 = v276 + v280;
              v286 = v276 + v280 + 24;
              if (*(char *)(v276 + v280 + 47) < 0)
              {
LABEL_237:
                std::string::__init_copy_ctor_external(v284, *(const std::string::value_type **)v286, *(_QWORD *)(v285 + 32));
                v280 += 48;
                if (v276 + v280 == v275)
                  goto LABEL_243;
                continue;
              }
            }
            else
            {
              v283 = *v281;
              v282->__r_.__value_.__r.__words[2] = *((_QWORD *)v281 + 2);
              *(_OWORD *)&v282->__r_.__value_.__l.__data_ = v283;
              v284 = (std::string *)&v279[v280 + 24];
              v285 = v276 + v280;
              v286 = v276 + v280 + 24;
              if (*(char *)(v276 + v280 + 47) < 0)
                goto LABEL_237;
            }
            v287 = *(_OWORD *)v286;
            v284->__r_.__value_.__r.__words[2] = *(_QWORD *)(v286 + 16);
            *(_OWORD *)&v284->__r_.__value_.__l.__data_ = v287;
            v280 += 48;
            if (v276 + v280 == v275)
            {
LABEL_243:
              v416 = &v279[v280];
              goto LABEL_244;
            }
          }
        }
        v12 = (unint64_t)v10 >> 1;
        v13 = v8 + 216 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x6C01)
        {
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_27;
LABEL_28:
          v40 = *(_QWORD *)(v11 + 8);
          v397 = (int *)&off_24C0B1418;
          v398 = v40;
          v41 = *(_QWORD *)(v11 + 32);
          v399 = *(_OWORD *)(v11 + 16);
          v400 = v41;
          *(_QWORD *)(v11 + 24) = 0;
          *(_QWORD *)(v11 + 32) = 0;
          *(_QWORD *)(v11 + 16) = 0;
          v401 = *(_OWORD *)(v11 + 40);
          LOBYTE(v402) = 0;
          v404 = 0;
          if (*(_BYTE *)(v11 + 80))
          {
            v42 = *(_OWORD *)(v11 + 56);
            v403 = *(_QWORD *)(v11 + 72);
            v402 = v42;
            *(_QWORD *)(v11 + 64) = 0;
            *(_QWORD *)(v11 + 72) = 0;
            *(_QWORD *)(v11 + 56) = 0;
            v404 = 1;
          }
          v405 = 0;
          v405 = *(_QWORD *)(v11 + 88);
          v43 = *(_QWORD *)(v11 + 128);
          v44 = *(_OWORD *)(v11 + 112);
          v406 = *(_OWORD *)(v11 + 96);
          v407 = v44;
          v408 = v43;
          *(_QWORD *)(v11 + 88) = 0;
          LOBYTE(v409) = 0;
          v411 = 0;
          if (*(_BYTE *)(v11 + 160))
          {
            v45 = *(_OWORD *)(v11 + 136);
            v410 = *(_QWORD *)(v11 + 152);
            v409 = v45;
            *(_QWORD *)(v11 + 144) = 0;
            *(_QWORD *)(v11 + 152) = 0;
            *(_QWORD *)(v11 + 136) = 0;
            v411 = 1;
          }
          v46 = (_QWORD *)(v11 + 176);
          v47 = *(_QWORD *)(v11 + 176);
          v412 = *(uint64_t **)(v11 + 168);
          v413 = v47;
          v414 = *(_QWORD *)(v11 + 184);
          if (v414)
          {
            *(_QWORD *)(v47 + 16) = &v413;
            *(_QWORD *)(v11 + 168) = v46;
            *v46 = 0;
            *(_QWORD *)(v11 + 184) = 0;
            v415 = 0;
            v416 = 0;
            v417 = 0;
            v49 = *(_QWORD *)(v11 + 192);
            v48 = *(_QWORD *)(v11 + 200);
            v50 = v48 - v49;
            if (v48 == v49)
              goto LABEL_45;
LABEL_36:
            v51 = 0xAAAAAAAAAAAAAAABLL * (v50 >> 4);
            if (v51 <= 0x555555555555555)
            {
              v52 = (char *)operator new(v50);
              v53 = 0;
              v415 = v52;
              v416 = v52;
              v417 = &v52[48 * v51];
              v6 = &v418;
              while (1)
              {
                v54 = (__int128 *)(v49 + v53);
                v55 = (std::string *)&v52[v53];
                if (*(char *)(v49 + v53 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v55, *(const std::string::value_type **)v54, *((_QWORD *)v54 + 1));
                  v57 = (std::string *)&v52[v53 + 24];
                  v58 = v49 + v53;
                  v59 = v49 + v53 + 24;
                  if ((*(char *)(v49 + v53 + 47) & 0x80000000) == 0)
                    goto LABEL_43;
LABEL_38:
                  std::string::__init_copy_ctor_external(v57, *(const std::string::value_type **)v59, *(_QWORD *)(v58 + 32));
                  v53 += 48;
                  if (v49 + v53 == v48)
                    goto LABEL_44;
                }
                else
                {
                  v56 = *v54;
                  v55->__r_.__value_.__r.__words[2] = *((_QWORD *)v54 + 2);
                  *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
                  v57 = (std::string *)&v52[v53 + 24];
                  v58 = v49 + v53;
                  v59 = v49 + v53 + 24;
                  if (*(char *)(v49 + v53 + 47) < 0)
                    goto LABEL_38;
LABEL_43:
                  v60 = *(_OWORD *)v59;
                  v57->__r_.__value_.__r.__words[2] = *(_QWORD *)(v59 + 16);
                  *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v60;
                  v53 += 48;
                  if (v49 + v53 == v48)
                  {
LABEL_44:
                    v416 = &v52[v53];
                    goto LABEL_45;
                  }
                }
              }
            }
LABEL_314:
            abort();
          }
          v412 = &v413;
          v415 = 0;
          v416 = 0;
          v417 = 0;
          v49 = *(_QWORD *)(v11 + 192);
          v48 = *(_QWORD *)(v11 + 200);
          v50 = v48 - v49;
          if (v48 != v49)
            goto LABEL_36;
LABEL_45:
          v61 = 0;
          do
          {
            v62 = (int *)(v11 + v61);
            if (v11 + v61 + 216 == a2)
              goto LABEL_300;
            v63 = *a3;
            v418 = v62 + 57;
            v64 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v63, v62 + 57, (uint64_t)&std::piecewise_construct, &v418)+ 5);
            v65 = *a3;
            v418 = (int *)&v398 + 1;
            v61 += 216;
          }
          while (v64 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v65, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5));
          v66 = v11 + v61;
          v62 = (int *)a2;
          if (v61 != 216)
          {
            while (v62 != (int *)v11)
            {
              v67 = v62 - 54;
              v68 = *a3;
              v418 = v62 - 51;
              v69 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v68, v62 - 51, (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v70 = *a3;
              v418 = (int *)&v398 + 1;
              v71 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v70, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418);
              v62 = v67;
              if (v69 > *((_DWORD *)v71 + 5))
                goto LABEL_55;
            }
            goto LABEL_300;
          }
          v72 = a2;
          do
          {
            if (v66 >= v72)
            {
              v67 = (int *)v72;
LABEL_83:
              v108 = v66 - 216;
              if (v66 - 216 == v11)
                goto LABEL_85;
LABEL_84:
              cricket::Codec::operator=(v11, v108);
              goto LABEL_85;
            }
            v67 = (int *)(v72 - 216);
            v73 = *a3;
            v418 = (int *)(v72 - 204);
            v74 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v73, (int *)(v72 - 204), (uint64_t)&std::piecewise_construct, &v418)+ 5);
            v75 = *a3;
            v418 = (int *)&v398 + 1;
            v76 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v75, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418);
            v72 = (unint64_t)v67;
          }
          while (v74 <= *((_DWORD *)v76 + 5));
LABEL_55:
          if (v66 >= (unint64_t)v67)
            goto LABEL_83;
          v378 = v67;
          v379 = v66;
          v77 = (uint64_t)v67;
          while (2)
          {
            v78 = *(_QWORD *)(v66 + 8);
            v418 = (int *)&off_24C0B1418;
            v419 = v78;
            v79 = *(_QWORD *)(v66 + 32);
            v420 = *(_OWORD *)(v66 + 16);
            v421 = v79;
            *(_QWORD *)(v66 + 24) = 0;
            *(_QWORD *)(v66 + 32) = 0;
            *(_QWORD *)(v66 + 16) = 0;
            v422 = *(_OWORD *)(v66 + 40);
            LOBYTE(v423) = 0;
            v425 = 0;
            if (*(_BYTE *)(v66 + 80))
            {
              v80 = *(_OWORD *)(v66 + 56);
              v424 = *(_QWORD *)(v66 + 72);
              v423 = v80;
              *(_QWORD *)(v66 + 64) = 0;
              *(_QWORD *)(v66 + 72) = 0;
              *(_QWORD *)(v66 + 56) = 0;
              v425 = 1;
            }
            v426 = *(_QWORD *)(v66 + 88);
            v81 = *(_QWORD *)(v66 + 128);
            v82 = *(_OWORD *)(v66 + 112);
            v427 = *(_OWORD *)(v66 + 96);
            v428 = v82;
            v429 = v81;
            *(_QWORD *)(v66 + 88) = 0;
            LOBYTE(v430) = 0;
            v432 = 0;
            if (*(_BYTE *)(v66 + 160))
            {
              v83 = *(_OWORD *)(v66 + 136);
              v431 = *(_QWORD *)(v66 + 152);
              v430 = v83;
              *(_QWORD *)(v66 + 144) = 0;
              *(_QWORD *)(v66 + 152) = 0;
              *(_QWORD *)(v66 + 136) = 0;
              v432 = 1;
            }
            v84 = (_QWORD *)(v66 + 176);
            v85 = *(_QWORD *)(v66 + 176);
            v433 = *(uint64_t **)(v66 + 168);
            v434 = v85;
            v435 = *(_QWORD *)(v66 + 184);
            if (v435)
            {
              *(_QWORD *)(v85 + 16) = &v434;
              *(_QWORD *)(v66 + 168) = v84;
              *v84 = 0;
              *(_QWORD *)(v66 + 184) = 0;
              v436 = 0;
              v437 = 0;
              v438 = 0;
              v87 = *(_QWORD *)(v66 + 192);
              v86 = *(_QWORD *)(v66 + 200);
              v88 = v86 - v87;
              if (v86 == v87)
                goto LABEL_74;
LABEL_65:
              v89 = 0xAAAAAAAAAAAAAAABLL * (v88 >> 4);
              if (v89 > 0x555555555555555)
                goto LABEL_314;
              v90 = (char *)operator new(v88);
              v91 = 0;
              v436 = v90;
              v437 = v90;
              v438 = &v90[48 * v89];
              v11 = a1;
              while (1)
              {
                v93 = (__int128 *)(v87 + v91);
                v94 = (std::string *)&v90[v91];
                if (*(char *)(v87 + v91 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v94, *(const std::string::value_type **)v93, *((_QWORD *)v93 + 1));
                  v96 = (std::string *)&v90[v91 + 24];
                  v97 = v87 + v91;
                  v98 = v87 + v91 + 24;
                  if ((*(char *)(v87 + v91 + 47) & 0x80000000) == 0)
                  {
LABEL_67:
                    v92 = *(_OWORD *)v98;
                    v96->__r_.__value_.__r.__words[2] = *(_QWORD *)(v98 + 16);
                    *(_OWORD *)&v96->__r_.__value_.__l.__data_ = v92;
                    v91 += 48;
                    if (v87 + v91 == v86)
                      goto LABEL_73;
                    continue;
                  }
                }
                else
                {
                  v95 = *v93;
                  v94->__r_.__value_.__r.__words[2] = *((_QWORD *)v93 + 2);
                  *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v95;
                  v96 = (std::string *)&v90[v91 + 24];
                  v97 = v87 + v91;
                  v98 = v87 + v91 + 24;
                  if ((*(char *)(v87 + v91 + 47) & 0x80000000) == 0)
                    goto LABEL_67;
                }
                std::string::__init_copy_ctor_external(v96, *(const std::string::value_type **)v98, *(_QWORD *)(v97 + 32));
                v91 += 48;
                if (v87 + v91 == v86)
                {
LABEL_73:
                  v99 = &v90[v91];
                  v6 = &v418;
                  v437 = v99;
                  goto LABEL_74;
                }
              }
            }
            v433 = &v434;
            v436 = 0;
            v437 = 0;
            v438 = 0;
            v87 = *(_QWORD *)(v66 + 192);
            v86 = *(_QWORD *)(v66 + 200);
            v88 = v86 - v87;
            if (v86 != v87)
              goto LABEL_65;
LABEL_74:
            cricket::Codec::operator=(v66, v77);
            cricket::Codec::operator=(v77, (uint64_t)&v418);
            cricket::Codec::~Codec((cricket::Codec *)&v418);
            do
            {
              v100 = v66 + 216;
              v62 = (int *)a2;
              if (v66 + 216 == a2)
                goto LABEL_300;
              v101 = *a3;
              v418 = (int *)(v66 + 228);
              v102 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v101, (int *)(v66 + 228), (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v103 = *a3;
              v418 = (int *)&v398 + 1;
              v62 = (int *)*((unsigned int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v103, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v66 += 216;
            }
            while (v102 > (int)v62);
            do
            {
              if (v77 == v11)
                goto LABEL_300;
              v104 = v77 - 216;
              v105 = *a3;
              v418 = (int *)(v77 - 204);
              v106 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v105, (int *)(v77 - 204), (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v107 = *a3;
              v418 = (int *)&v398 + 1;
              v62 = (int *)*((unsigned int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v107, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v77 -= 216;
            }
            while (v106 <= (int)v62);
            v66 = v100;
            v77 = v104;
            if (v100 < v104)
              continue;
            break;
          }
          v108 = v100 - 216;
          v67 = v378;
          v66 = v379;
          if (v100 - 216 != v11)
            goto LABEL_84;
LABEL_85:
          cricket::Codec::operator=(v108, (uint64_t)&v397);
          cricket::Codec::~Codec((cricket::Codec *)&v397);
          if (v66 < (unint64_t)v67)
            goto LABEL_88;
          v8 = v108 + 216;
          {
            if ((v109 & 1) == 0)
            {
LABEL_88:
              a5 = 0;
              v8 = v108 + 216;
            }
            continue;
          }
          a2 = v108;
          if ((v109 & 1) != 0)
            return;
          goto LABEL_2;
        }
        v14 = 216 * v12;
        v15 = *(_QWORD *)(v8 + 8);
        v418 = (int *)&off_24C0B1418;
        v419 = v15;
        v16 = *(_QWORD *)(v8 + 32);
        v420 = *(_OWORD *)(v8 + 16);
        v421 = v16;
        *(_QWORD *)(v8 + 24) = 0;
        *(_QWORD *)(v8 + 32) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        v422 = *(_OWORD *)(v8 + 40);
        LOBYTE(v423) = 0;
        v425 = 0;
        if (*(_BYTE *)(v8 + 80))
        {
          v17 = *(_OWORD *)(v8 + 56);
          v424 = *(_QWORD *)(v8 + 72);
          v423 = v17;
          *(_QWORD *)(v8 + 64) = 0;
          *(_QWORD *)(v8 + 72) = 0;
          *(_QWORD *)(v8 + 56) = 0;
          v425 = 1;
        }
        v426 = 0;
        v426 = *(_QWORD *)(v8 + 88);
        v18 = *(_QWORD *)(v8 + 128);
        v19 = *(_OWORD *)(v8 + 112);
        v427 = *(_OWORD *)(v8 + 96);
        v428 = v19;
        v429 = v18;
        *(_QWORD *)(v8 + 88) = 0;
        LOBYTE(v430) = 0;
        v432 = 0;
        if (*(_BYTE *)(v8 + 160))
        {
          v20 = *(_OWORD *)(v8 + 136);
          v431 = *(_QWORD *)(v8 + 152);
          v430 = v20;
          *(_QWORD *)(v8 + 144) = 0;
          *(_QWORD *)(v8 + 152) = 0;
          *(_QWORD *)(v8 + 136) = 0;
          v432 = 1;
        }
        v21 = (_QWORD *)(v8 + 176);
        v22 = *(_QWORD *)(v8 + 176);
        v433 = *(uint64_t **)(v8 + 168);
        v434 = v22;
        v435 = *(_QWORD *)(v8 + 184);
        if (!v435)
        {
          v433 = &v434;
          v436 = 0;
          v437 = 0;
          v438 = 0;
          v24 = *(_QWORD *)(v8 + 192);
          v23 = *(_QWORD *)(v8 + 200);
          v25 = v23 - v24;
          if (v23 == v24)
            goto LABEL_26;
LABEL_17:
          v26 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 4);
          if (v26 > 0x555555555555555)
            goto LABEL_314;
          v27 = (char *)operator new(v25);
          v28 = 0;
          v436 = v27;
          v437 = v27;
          v438 = &v27[48 * v26];
          v11 = v8;
          while (1)
          {
            v30 = (__int128 *)(v24 + v28);
            v31 = (std::string *)&v27[v28];
            if (*(char *)(v24 + v28 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v31, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
              v33 = (std::string *)&v27[v28 + 24];
              v34 = v24 + v28;
              v35 = v24 + v28 + 24;
              if ((*(char *)(v24 + v28 + 47) & 0x80000000) == 0)
              {
LABEL_19:
                v29 = *(_OWORD *)v35;
                v33->__r_.__value_.__r.__words[2] = *(_QWORD *)(v35 + 16);
                *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v29;
                v28 += 48;
                if (v24 + v28 == v23)
                  goto LABEL_25;
                continue;
              }
            }
            else
            {
              v32 = *v30;
              v31->__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
              *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
              v33 = (std::string *)&v27[v28 + 24];
              v34 = v24 + v28;
              v35 = v24 + v28 + 24;
              if ((*(char *)(v24 + v28 + 47) & 0x80000000) == 0)
                goto LABEL_19;
            }
            std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)v35, *(_QWORD *)(v34 + 32));
            v28 += 48;
            if (v24 + v28 == v23)
            {
LABEL_25:
              v36 = &v27[v28];
              v6 = &v418;
              v437 = v36;
              goto LABEL_26;
            }
          }
        }
        *(_QWORD *)(v22 + 16) = &v434;
        *(_QWORD *)(v8 + 168) = v21;
        *v21 = 0;
        *(_QWORD *)(v8 + 184) = 0;
        v436 = 0;
        v437 = 0;
        v438 = 0;
        v24 = *(_QWORD *)(v8 + 192);
        v23 = *(_QWORD *)(v8 + 200);
        v25 = v23 - v24;
        if (v23 != v24)
          goto LABEL_17;
LABEL_26:
        cricket::Codec::operator=(v11, v13);
        cricket::Codec::operator=(v13, (uint64_t)&v418);
        cricket::Codec::~Codec((cricket::Codec *)&v418);
        --a4;
        if ((a5 & 1) != 0)
          goto LABEL_28;
LABEL_27:
        v37 = *a3;
        v418 = (int *)(v11 - 204);
        v38 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v37, (int *)(v11 - 204), (uint64_t)&std::piecewise_construct, &v418)+ 5);
        v39 = *a3;
        v418 = (int *)(v11 + 12);
        if (v38 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v39, (int *)(v11 + 12), (uint64_t)&std::piecewise_construct, &v418)+ 5))goto LABEL_28;
        v110 = *(_QWORD *)(v11 + 8);
        v397 = (int *)&off_24C0B1418;
        v398 = v110;
        v111 = *(_QWORD *)(v11 + 32);
        v399 = *(_OWORD *)(v11 + 16);
        v400 = v111;
        *(_QWORD *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 32) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        v401 = *(_OWORD *)(v11 + 40);
        LOBYTE(v402) = 0;
        v404 = 0;
        if (*(_BYTE *)(v11 + 80))
        {
          v112 = *(_OWORD *)(v11 + 56);
          v403 = *(_QWORD *)(v11 + 72);
          v402 = v112;
          *(_QWORD *)(v11 + 64) = 0;
          *(_QWORD *)(v11 + 72) = 0;
          *(_QWORD *)(v11 + 56) = 0;
          v404 = 1;
        }
        v405 = 0;
        v405 = *(_QWORD *)(v11 + 88);
        v113 = *(_QWORD *)(v11 + 128);
        v114 = *(_OWORD *)(v11 + 112);
        v406 = *(_OWORD *)(v11 + 96);
        v407 = v114;
        v408 = v113;
        *(_QWORD *)(v11 + 88) = 0;
        LOBYTE(v409) = 0;
        v411 = 0;
        if (*(_BYTE *)(v11 + 160))
        {
          v115 = *(_OWORD *)(v11 + 136);
          v410 = *(_QWORD *)(v11 + 152);
          v409 = v115;
          *(_QWORD *)(v11 + 144) = 0;
          *(_QWORD *)(v11 + 152) = 0;
          *(_QWORD *)(v11 + 136) = 0;
          v411 = 1;
        }
        v116 = (_QWORD *)(v11 + 176);
        v117 = *(_QWORD *)(v11 + 176);
        v412 = *(uint64_t **)(v11 + 168);
        v413 = v117;
        v414 = *(_QWORD *)(v11 + 184);
        if (v414)
        {
          *(_QWORD *)(v117 + 16) = &v413;
          *(_QWORD *)(v11 + 168) = v116;
          *v116 = 0;
          *(_QWORD *)(v11 + 184) = 0;
        }
        else
        {
          v412 = &v413;
        }
        v415 = 0;
        v416 = 0;
        v417 = 0;
        v119 = *(_QWORD *)(v11 + 192);
        v118 = *(_QWORD *)(v11 + 200);
        v120 = v118 - v119;
        if (v118 != v119)
        {
          v121 = 0xAAAAAAAAAAAAAAABLL * (v120 >> 4);
          if (v121 > 0x555555555555555)
            goto LABEL_314;
          v122 = (char *)operator new(v120);
          v123 = 0;
          v415 = v122;
          v416 = v122;
          v417 = &v122[48 * v121];
          v6 = &v418;
          while (1)
          {
            v124 = (__int128 *)(v119 + v123);
            v125 = (std::string *)&v122[v123];
            if (*(char *)(v119 + v123 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v125, *(const std::string::value_type **)v124, *((_QWORD *)v124 + 1));
              v127 = (std::string *)&v122[v123 + 24];
              v128 = v119 + v123;
              v129 = v119 + v123 + 24;
              if (*(char *)(v119 + v123 + 47) < 0)
              {
LABEL_99:
                std::string::__init_copy_ctor_external(v127, *(const std::string::value_type **)v129, *(_QWORD *)(v128 + 32));
                v123 += 48;
                if (v119 + v123 == v118)
                  goto LABEL_105;
                continue;
              }
            }
            else
            {
              v126 = *v124;
              v125->__r_.__value_.__r.__words[2] = *((_QWORD *)v124 + 2);
              *(_OWORD *)&v125->__r_.__value_.__l.__data_ = v126;
              v127 = (std::string *)&v122[v123 + 24];
              v128 = v119 + v123;
              v129 = v119 + v123 + 24;
              if (*(char *)(v119 + v123 + 47) < 0)
                goto LABEL_99;
            }
            v130 = *(_OWORD *)v129;
            v127->__r_.__value_.__r.__words[2] = *(_QWORD *)(v129 + 16);
            *(_OWORD *)&v127->__r_.__value_.__l.__data_ = v130;
            v123 += 48;
            if (v119 + v123 == v118)
            {
LABEL_105:
              v416 = &v122[v123];
              v11 = v8;
              break;
            }
          }
        }
        v131 = *a3;
        v418 = (int *)&v398 + 1;
        v132 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v131, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
        v133 = *a3;
        v418 = (int *)(a2 - 204);
        v62 = (int *)*((unsigned int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v133, v377, (uint64_t)&std::piecewise_construct, &v418)+ 5);
        if (v132 <= (int)v62)
        {
          v140 = (int *)(v11 + 228);
          do
          {
            v136 = (unint64_t)(v140 - 3);
            if ((unint64_t)(v140 - 3) >= a2)
              break;
            v141 = *a3;
            v418 = (int *)&v398 + 1;
            v142 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v141, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
            v143 = *a3;
            v418 = v140;
            v144 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v143, v140, (uint64_t)&std::piecewise_construct, &v418);
            v140 += 54;
          }
          while (v142 <= *((_DWORD *)v144 + 5));
          v135 = a2;
LABEL_115:
          v145 = v135;
          if (v136 < v135)
          {
            v146 = v135;
            do
            {
              v62 = (int *)v8;
              if (v146 == v8)
                goto LABEL_300;
              v145 = v146 - 216;
              v147 = *a3;
              v418 = (int *)&v398 + 1;
              v148 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v147, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
              v149 = *a3;
              v418 = (int *)(v146 - 204);
              v150 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v149, (int *)(v146 - 204), (uint64_t)&std::piecewise_construct, &v418);
              v146 -= 216;
            }
            while (v148 > *((_DWORD *)v150 + 5));
          }
          if (v136 < v145)
          {
            while (1)
            {
              v151 = *(_QWORD *)(v136 + 8);
              v418 = (int *)&off_24C0B1418;
              v419 = v151;
              v152 = *(_QWORD *)(v136 + 32);
              v420 = *(_OWORD *)(v136 + 16);
              v421 = v152;
              *(_QWORD *)(v136 + 24) = 0;
              *(_QWORD *)(v136 + 32) = 0;
              *(_QWORD *)(v136 + 16) = 0;
              v422 = *(_OWORD *)(v136 + 40);
              LOBYTE(v423) = 0;
              v425 = 0;
              if (*(_BYTE *)(v136 + 80))
              {
                v153 = *(_OWORD *)(v136 + 56);
                v424 = *(_QWORD *)(v136 + 72);
                v423 = v153;
                *(_QWORD *)(v136 + 64) = 0;
                *(_QWORD *)(v136 + 72) = 0;
                *(_QWORD *)(v136 + 56) = 0;
                v425 = 1;
              }
              v426 = 0;
              v426 = *(_QWORD *)(v136 + 88);
              v154 = *(_QWORD *)(v136 + 128);
              v155 = *(_OWORD *)(v136 + 112);
              v427 = *(_OWORD *)(v136 + 96);
              v428 = v155;
              v429 = v154;
              *(_QWORD *)(v136 + 88) = 0;
              LOBYTE(v430) = 0;
              v432 = 0;
              if (*(_BYTE *)(v136 + 160))
              {
                v156 = *(_OWORD *)(v136 + 136);
                v431 = *(_QWORD *)(v136 + 152);
                v430 = v156;
                *(_QWORD *)(v136 + 144) = 0;
                *(_QWORD *)(v136 + 152) = 0;
                *(_QWORD *)(v136 + 136) = 0;
                v432 = 1;
              }
              v157 = (_QWORD *)(v136 + 176);
              v158 = *(_QWORD *)(v136 + 176);
              v433 = *(uint64_t **)(v136 + 168);
              v434 = v158;
              v435 = *(_QWORD *)(v136 + 184);
              if (v435)
                break;
              v433 = &v434;
              v436 = 0;
              v437 = 0;
              v438 = 0;
              v160 = *(_QWORD *)(v136 + 192);
              v159 = *(_QWORD *)(v136 + 200);
              v161 = v159 - v160;
              if (v159 != v160)
                goto LABEL_128;
LABEL_137:
              cricket::Codec::operator=(v136, v145);
              cricket::Codec::operator=(v145, (uint64_t)&v418);
              cricket::Codec::~Codec((cricket::Codec *)&v418);
              do
              {
                v8 = v136 + 216;
                if (v136 + 216 == a2)
                  goto LABEL_300;
                v173 = *a3;
                v418 = (int *)&v398 + 1;
                v174 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v173, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v175 = *a3;
                v418 = (int *)(v136 + 228);
                v62 = (int *)*((unsigned int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v175, (int *)(v136 + 228), (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v136 += 216;
              }
              while (v174 <= (int)v62);
              do
              {
                if (v145 == a1)
                  goto LABEL_300;
                v176 = v145 - 216;
                v177 = *a3;
                v418 = (int *)&v398 + 1;
                v178 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v177, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v179 = *a3;
                v418 = (int *)(v145 - 204);
                v62 = (int *)*((unsigned int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v179, (int *)(v145 - 204), (uint64_t)&std::piecewise_construct, &v418)+ 5);
                v145 -= 216;
              }
              while (v178 > (int)v62);
              v136 = v8;
              v145 = v176;
              if (v8 >= v176)
                goto LABEL_145;
            }
            *(_QWORD *)(v158 + 16) = &v434;
            *(_QWORD *)(v136 + 168) = v157;
            *v157 = 0;
            *(_QWORD *)(v136 + 184) = 0;
            v436 = 0;
            v437 = 0;
            v438 = 0;
            v160 = *(_QWORD *)(v136 + 192);
            v159 = *(_QWORD *)(v136 + 200);
            v161 = v159 - v160;
            if (v159 == v160)
              goto LABEL_137;
LABEL_128:
            v162 = 0xAAAAAAAAAAAAAAABLL * (v161 >> 4);
            if (v162 > 0x555555555555555)
              goto LABEL_314;
            v163 = (char *)operator new(v161);
            v164 = 0;
            v436 = v163;
            v437 = v163;
            v165 = &v163[48 * v162];
            v6 = &v418;
            v438 = v165;
            while (1)
            {
              v166 = (__int128 *)(v160 + v164);
              v167 = (std::string *)&v163[v164];
              if (*(char *)(v160 + v164 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v167, *(const std::string::value_type **)v166, *((_QWORD *)v166 + 1));
                v169 = (std::string *)&v163[v164 + 24];
                v170 = v160 + v164;
                v171 = v160 + v164 + 24;
                if (*(char *)(v160 + v164 + 47) < 0)
                {
LABEL_130:
                  std::string::__init_copy_ctor_external(v169, *(const std::string::value_type **)v171, *(_QWORD *)(v170 + 32));
                  v164 += 48;
                  if (v160 + v164 == v159)
                    goto LABEL_136;
                  continue;
                }
              }
              else
              {
                v168 = *v166;
                v167->__r_.__value_.__r.__words[2] = *((_QWORD *)v166 + 2);
                *(_OWORD *)&v167->__r_.__value_.__l.__data_ = v168;
                v169 = (std::string *)&v163[v164 + 24];
                v170 = v160 + v164;
                v171 = v160 + v164 + 24;
                if (*(char *)(v160 + v164 + 47) < 0)
                  goto LABEL_130;
              }
              v172 = *(_OWORD *)v171;
              v169->__r_.__value_.__r.__words[2] = *(_QWORD *)(v171 + 16);
              *(_OWORD *)&v169->__r_.__value_.__l.__data_ = v172;
              v164 += 48;
              if (v160 + v164 == v159)
              {
LABEL_136:
                v437 = &v163[v164];
                goto LABEL_137;
              }
            }
          }
          v8 = v136;
LABEL_145:
          if (v8 - 216 != a1)
            cricket::Codec::operator=(a1, v8 - 216);
          cricket::Codec::operator=(v8 - 216, (uint64_t)&v397);
          cricket::Codec::~Codec((cricket::Codec *)&v397);
          a5 = 0;
          continue;
        }
        v134 = v11;
        v135 = a2;
        while (1)
        {
          v136 = v134 + 216;
          if (v134 + 216 == a2)
            break;
          v137 = *a3;
          v418 = (int *)&v398 + 1;
          v138 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v137, (int *)&v398 + 1, (uint64_t)&std::piecewise_construct, &v418)+ 5);
          v139 = *a3;
          v418 = (int *)(v134 + 228);
          v62 = (int *)*((unsigned int *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v139, (int *)(v134 + 228), (uint64_t)&std::piecewise_construct, &v418)+ 5);
          v134 += 216;
          if (v138 > (int)v62)
            goto LABEL_115;
        }
LABEL_300:
        __break(1u);
LABEL_301:
        v6[21] = v62;
LABEL_302:
        v6[24] = 0;
        v6[25] = 0;
        v6[26] = 0;
        v364 = *((_QWORD *)v7 + 24);
        v365 = *((_QWORD *)v7 + 25);
        v366 = v365 - v364;
        if (v365 != v364)
        {
          v367 = 0xAAAAAAAAAAAAAAABLL * (v366 >> 4);
          if (v367 > 0x555555555555555)
            goto LABEL_314;
          v368 = (char *)operator new(v366);
          v369 = 0;
          v436 = v368;
          v437 = v368;
          v438 = &v368[48 * v367];
          while (1)
          {
            v370 = (__int128 *)(v364 + v369);
            v371 = (std::string *)&v368[v369];
            if (*(char *)(v364 + v369 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v371, *(const std::string::value_type **)v370, *((_QWORD *)v370 + 1));
              v373 = (std::string *)&v368[v369 + 24];
              v374 = v364 + v369;
              v375 = v364 + v369 + 24;
              if (*(char *)(v364 + v369 + 47) < 0)
              {
LABEL_305:
                std::string::__init_copy_ctor_external(v373, *(const std::string::value_type **)v375, *(_QWORD *)(v374 + 32));
                v369 += 48;
                if (v364 + v369 == v365)
                  goto LABEL_311;
                continue;
              }
            }
            else
            {
              v372 = *v370;
              v371->__r_.__value_.__r.__words[2] = *((_QWORD *)v370 + 2);
              *(_OWORD *)&v371->__r_.__value_.__l.__data_ = v372;
              v373 = (std::string *)&v368[v369 + 24];
              v374 = v364 + v369;
              v375 = v364 + v369 + 24;
              if (*(char *)(v364 + v369 + 47) < 0)
                goto LABEL_305;
            }
            v376 = *(_OWORD *)v375;
            v373->__r_.__value_.__r.__words[2] = *(_QWORD *)(v375 + 16);
            *(_OWORD *)&v373->__r_.__value_.__l.__data_ = v376;
            v369 += 48;
            if (v364 + v369 == v365)
            {
LABEL_311:
              v437 = &v368[v369];
              break;
            }
          }
        }
        cricket::Codec::operator=((uint64_t)v7, (uint64_t)v386);
        cricket::Codec::operator=((uint64_t)v386, (uint64_t)&v418);
        cricket::Codec::~Codec((cricket::Codec *)&v418);
        return;
    }
  }
}

void std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,cricket::`anonymous namespace'::NegotiateCodecs(std::vector<cricket::Codec> const&,std::vector<cricket::Codec> const&,std::vector<cricket::Codec>*,BOOL)::$_0 &,cricket::Codec*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 *v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  __int128 *v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  __int128 *v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  __int128 *v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  void (**v94)(cricket::Codec *__hidden);
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  char v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;

  v10 = a2;
  v115 = *MEMORY[0x24BDAC8D0];
  v11 = *a6;
  v94 = (void (**)(cricket::Codec *__hidden))(a5 + 12);
  v12 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v11, (int *)(a5 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v94)+ 5);
  v13 = *a6;
  v94 = (void (**)(cricket::Codec *__hidden))(a4 + 12);
  if (v12 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v13, (int *)(a4 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v94)+ 5))
  {
    v14 = *(_QWORD *)(a4 + 8);
    v94 = &off_24C0B1418;
    v95 = v14;
    v96 = *(_OWORD *)(a4 + 16);
    v97 = *(_QWORD *)(a4 + 32);
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    v98 = *(_OWORD *)(a4 + 40);
    LOBYTE(v99) = 0;
    v101 = 0;
    if (*(_BYTE *)(a4 + 80))
    {
      v99 = *(_OWORD *)(a4 + 56);
      v100 = *(_QWORD *)(a4 + 72);
      *(_QWORD *)(a4 + 64) = 0;
      *(_QWORD *)(a4 + 72) = 0;
      *(_QWORD *)(a4 + 56) = 0;
      v101 = 1;
    }
    v102 = *(_QWORD *)(a4 + 88);
    v15 = *(_OWORD *)(a4 + 112);
    v103 = *(_OWORD *)(a4 + 96);
    v104 = v15;
    v105 = *(_QWORD *)(a4 + 128);
    *(_QWORD *)(a4 + 88) = 0;
    LOBYTE(v106) = 0;
    v108 = 0;
    if (*(_BYTE *)(a4 + 160))
    {
      v106 = *(_OWORD *)(a4 + 136);
      v107 = *(_QWORD *)(a4 + 152);
      *(_QWORD *)(a4 + 144) = 0;
      *(_QWORD *)(a4 + 152) = 0;
      *(_QWORD *)(a4 + 136) = 0;
      v108 = 1;
    }
    v16 = (_QWORD *)(a4 + 176);
    v17 = *(_QWORD *)(a4 + 176);
    v109 = *(uint64_t **)(a4 + 168);
    v110 = v17;
    v111 = *(_QWORD *)(a4 + 184);
    if (v111)
    {
      *(_QWORD *)(v17 + 16) = &v110;
      *(_QWORD *)(a4 + 168) = v16;
      *v16 = 0;
      *(_QWORD *)(a4 + 184) = 0;
      v112 = 0;
      v113 = 0;
      v114 = 0;
      v19 = *(_QWORD *)(a4 + 192);
      v18 = *(_QWORD *)(a4 + 200);
      v20 = v18 - v19;
      if (v18 == v19)
      {
LABEL_19:
        cricket::Codec::operator=(a4, a5);
        cricket::Codec::operator=(a5, (uint64_t)&v94);
        cricket::Codec::~Codec((cricket::Codec *)&v94);
        v31 = *a6;
        v94 = (void (**)(cricket::Codec *__hidden))(a4 + 12);
        v32 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v31, (int *)(a4 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v94)+ 5);
        v33 = *a6;
        v94 = (void (**)(cricket::Codec *__hidden))(a3 + 12);
        if (v32 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v33, (int *)(a3 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v94)+ 5))return;
        v34 = *(_QWORD *)(a3 + 8);
        v94 = &off_24C0B1418;
        v95 = v34;
        v96 = *(_OWORD *)(a3 + 16);
        v97 = *(_QWORD *)(a3 + 32);
        *(_QWORD *)(a3 + 16) = 0;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = 0;
        v98 = *(_OWORD *)(a3 + 40);
        LOBYTE(v99) = 0;
        v101 = 0;
        if (*(_BYTE *)(a3 + 80))
        {
          v99 = *(_OWORD *)(a3 + 56);
          v100 = *(_QWORD *)(a3 + 72);
          *(_QWORD *)(a3 + 64) = 0;
          *(_QWORD *)(a3 + 72) = 0;
          *(_QWORD *)(a3 + 56) = 0;
          v101 = 1;
        }
        v102 = *(_QWORD *)(a3 + 88);
        v35 = *(_OWORD *)(a3 + 112);
        v103 = *(_OWORD *)(a3 + 96);
        v104 = v35;
        v105 = *(_QWORD *)(a3 + 128);
        *(_QWORD *)(a3 + 88) = 0;
        LOBYTE(v106) = 0;
        v108 = 0;
        if (*(_BYTE *)(a3 + 160))
        {
          v106 = *(_OWORD *)(a3 + 136);
          v107 = *(_QWORD *)(a3 + 152);
          *(_QWORD *)(a3 + 144) = 0;
          *(_QWORD *)(a3 + 152) = 0;
          *(_QWORD *)(a3 + 136) = 0;
          v108 = 1;
        }
        v36 = (_QWORD *)(a3 + 176);
        v37 = *(_QWORD *)(a3 + 176);
        v109 = *(uint64_t **)(a3 + 168);
        v110 = v37;
        v111 = *(_QWORD *)(a3 + 184);
        if (v111)
        {
          *(_QWORD *)(v37 + 16) = &v110;
          *(_QWORD *)(a3 + 168) = v36;
          *v36 = 0;
          *(_QWORD *)(a3 + 184) = 0;
          v112 = 0;
          v113 = 0;
          v114 = 0;
          v39 = *(_QWORD *)(a3 + 192);
          v38 = *(_QWORD *)(a3 + 200);
          v40 = v38 - v39;
          if (v38 == v39)
          {
LABEL_37:
            cricket::Codec::operator=(a3, a4);
            cricket::Codec::operator=(a4, (uint64_t)&v94);
            cricket::Codec::~Codec((cricket::Codec *)&v94);
            v52 = *a6;
            v94 = (void (**)(cricket::Codec *__hidden))(a3 + 12);
            v53 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v52, (int *)(a3 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v94)+ 5);
            v54 = *a6;
            v94 = (void (**)(cricket::Codec *__hidden))(v10 + 12);
            if (v53 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v54, (int *)(v10 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v94)+ 5))return;
            v55 = *(_QWORD *)(v10 + 8);
            v94 = &off_24C0B1418;
            v95 = v55;
            v96 = *(_OWORD *)(v10 + 16);
            v97 = *(_QWORD *)(v10 + 32);
            *(_QWORD *)(v10 + 16) = 0;
            *(_QWORD *)(v10 + 24) = 0;
            *(_QWORD *)(v10 + 32) = 0;
            v98 = *(_OWORD *)(v10 + 40);
            LOBYTE(v99) = 0;
            v101 = 0;
            if (*(_BYTE *)(v10 + 80))
            {
              v99 = *(_OWORD *)(v10 + 56);
              v100 = *(_QWORD *)(v10 + 72);
              *(_QWORD *)(v10 + 64) = 0;
              *(_QWORD *)(v10 + 72) = 0;
              *(_QWORD *)(v10 + 56) = 0;
              v101 = 1;
            }
            v102 = *(_QWORD *)(v10 + 88);
            v56 = *(_OWORD *)(v10 + 112);
            v103 = *(_OWORD *)(v10 + 96);
            v104 = v56;
            v105 = *(_QWORD *)(v10 + 128);
            *(_QWORD *)(v10 + 88) = 0;
            LOBYTE(v106) = 0;
            v108 = 0;
            if (*(_BYTE *)(v10 + 160))
            {
              v106 = *(_OWORD *)(v10 + 136);
              v107 = *(_QWORD *)(v10 + 152);
              *(_QWORD *)(v10 + 144) = 0;
              *(_QWORD *)(v10 + 152) = 0;
              *(_QWORD *)(v10 + 136) = 0;
              v108 = 1;
            }
            v57 = (_QWORD *)(v10 + 176);
            v58 = *(_QWORD *)(v10 + 176);
            v109 = *(uint64_t **)(v10 + 168);
            v110 = v58;
            v111 = *(_QWORD *)(v10 + 184);
            if (v111)
            {
              *(_QWORD *)(v58 + 16) = &v110;
              *(_QWORD *)(v10 + 168) = v57;
              *v57 = 0;
              *(_QWORD *)(v10 + 184) = 0;
              v112 = 0;
              v113 = 0;
              v114 = 0;
              v60 = *(_QWORD *)(v10 + 192);
              v59 = *(_QWORD *)(v10 + 200);
              v61 = v59 - v60;
              if (v59 == v60)
              {
LABEL_55:
                cricket::Codec::operator=(v10, a3);
                cricket::Codec::operator=(a3, (uint64_t)&v94);
                cricket::Codec::~Codec((cricket::Codec *)&v94);
                v72 = *a6;
                v94 = (void (**)(cricket::Codec *__hidden))(v10 + 12);
                v73 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v72, (int *)(v10 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v94)+ 5);
                v74 = *a6;
                v94 = (void (**)(cricket::Codec *__hidden))(a1 + 12);
                if (v73 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v74, (int *)(a1 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v94)+ 5))return;
                v75 = *(_QWORD *)(a1 + 8);
                v94 = &off_24C0B1418;
                v95 = v75;
                v96 = *(_OWORD *)(a1 + 16);
                v97 = *(_QWORD *)(a1 + 32);
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)(a1 + 24) = 0;
                *(_QWORD *)(a1 + 32) = 0;
                v98 = *(_OWORD *)(a1 + 40);
                LOBYTE(v99) = 0;
                v101 = 0;
                if (*(_BYTE *)(a1 + 80))
                {
                  v99 = *(_OWORD *)(a1 + 56);
                  v100 = *(_QWORD *)(a1 + 72);
                  *(_QWORD *)(a1 + 64) = 0;
                  *(_QWORD *)(a1 + 72) = 0;
                  *(_QWORD *)(a1 + 56) = 0;
                  v101 = 1;
                }
                v102 = *(_QWORD *)(a1 + 88);
                v76 = *(_OWORD *)(a1 + 112);
                v103 = *(_OWORD *)(a1 + 96);
                v104 = v76;
                v105 = *(_QWORD *)(a1 + 128);
                *(_QWORD *)(a1 + 88) = 0;
                LOBYTE(v106) = 0;
                v108 = 0;
                if (*(_BYTE *)(a1 + 160))
                {
                  v106 = *(_OWORD *)(a1 + 136);
                  v107 = *(_QWORD *)(a1 + 152);
                  *(_QWORD *)(a1 + 144) = 0;
                  *(_QWORD *)(a1 + 152) = 0;
                  *(_QWORD *)(a1 + 136) = 0;
                  v108 = 1;
                }
                v77 = (_QWORD *)(a1 + 176);
                v78 = *(_QWORD *)(a1 + 176);
                v109 = *(uint64_t **)(a1 + 168);
                v110 = v78;
                v111 = *(_QWORD *)(a1 + 184);
                if (v111)
                {
                  *(_QWORD *)(v78 + 16) = &v110;
                  *(_QWORD *)(a1 + 168) = v77;
                  *v77 = 0;
                  *(_QWORD *)(a1 + 184) = 0;
                  v112 = 0;
                  v113 = 0;
                  v114 = 0;
                  v80 = *(_QWORD *)(a1 + 192);
                  v79 = *(_QWORD *)(a1 + 200);
                  v81 = v79 - v80;
                  if (v79 == v80)
                  {
LABEL_73:
                    cricket::Codec::operator=(a1, v10);
                    cricket::Codec::operator=(v10, (uint64_t)&v94);
                    cricket::Codec::~Codec((cricket::Codec *)&v94);
                    return;
                  }
                }
                else
                {
                  v109 = &v110;
                  v112 = 0;
                  v113 = 0;
                  v114 = 0;
                  v80 = *(_QWORD *)(a1 + 192);
                  v79 = *(_QWORD *)(a1 + 200);
                  v81 = v79 - v80;
                  if (v79 == v80)
                    goto LABEL_73;
                }
                v82 = 0xAAAAAAAAAAAAAAABLL * (v81 >> 4);
                if (v82 <= 0x555555555555555)
                {
                  v83 = (char *)operator new(v81);
                  v84 = 0;
                  v112 = v83;
                  v113 = v83;
                  v114 = &v83[48 * v82];
                  while (1)
                  {
                    v85 = (__int128 *)(v80 + v84);
                    v86 = (std::string *)&v83[v84];
                    if (*(char *)(v80 + v84 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)v85, *((_QWORD *)v85 + 1));
                      v88 = (std::string *)&v83[v84 + 24];
                      v89 = v80 + v84;
                      v90 = v80 + v84 + 24;
                      if ((*(char *)(v80 + v84 + 47) & 0x80000000) == 0)
                        goto LABEL_71;
LABEL_66:
                      std::string::__init_copy_ctor_external(v88, *(const std::string::value_type **)v90, *(_QWORD *)(v89 + 32));
                      v84 += 48;
                      if (v80 + v84 == v79)
                        goto LABEL_72;
                    }
                    else
                    {
                      v87 = *v85;
                      v86->__r_.__value_.__r.__words[2] = *((_QWORD *)v85 + 2);
                      *(_OWORD *)&v86->__r_.__value_.__l.__data_ = v87;
                      v88 = (std::string *)&v83[v84 + 24];
                      v89 = v80 + v84;
                      v90 = v80 + v84 + 24;
                      if (*(char *)(v80 + v84 + 47) < 0)
                        goto LABEL_66;
LABEL_71:
                      v91 = *(_OWORD *)v90;
                      v88->__r_.__value_.__r.__words[2] = *(_QWORD *)(v90 + 16);
                      *(_OWORD *)&v88->__r_.__value_.__l.__data_ = v91;
                      v84 += 48;
                      if (v80 + v84 == v79)
                      {
LABEL_72:
                        v113 = &v83[v84];
                        goto LABEL_73;
                      }
                    }
                  }
                }
LABEL_75:
                abort();
              }
            }
            else
            {
              v109 = &v110;
              v112 = 0;
              v113 = 0;
              v114 = 0;
              v60 = *(_QWORD *)(v10 + 192);
              v59 = *(_QWORD *)(v10 + 200);
              v61 = v59 - v60;
              if (v59 == v60)
                goto LABEL_55;
            }
            v62 = 0xAAAAAAAAAAAAAAABLL * (v61 >> 4);
            if (v62 > 0x555555555555555)
              goto LABEL_75;
            v63 = (char *)operator new(v61);
            v64 = 0;
            v112 = v63;
            v113 = v63;
            v114 = &v63[48 * v62];
            while (1)
            {
              v66 = (__int128 *)(v60 + v64);
              v67 = (std::string *)&v63[v64];
              if (*(char *)(v60 + v64 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v67, *(const std::string::value_type **)v66, *((_QWORD *)v66 + 1));
                v69 = (std::string *)&v63[v64 + 24];
                v70 = v60 + v64;
                v71 = v60 + v64 + 24;
                if ((*(char *)(v60 + v64 + 47) & 0x80000000) == 0)
                  goto LABEL_48;
LABEL_53:
                std::string::__init_copy_ctor_external(v69, *(const std::string::value_type **)v71, *(_QWORD *)(v70 + 32));
                v64 += 48;
                if (v60 + v64 == v59)
                {
LABEL_54:
                  v113 = &v63[v64];
                  goto LABEL_55;
                }
              }
              else
              {
                v68 = *v66;
                v67->__r_.__value_.__r.__words[2] = *((_QWORD *)v66 + 2);
                *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
                v69 = (std::string *)&v63[v64 + 24];
                v70 = v60 + v64;
                v71 = v60 + v64 + 24;
                if (*(char *)(v60 + v64 + 47) < 0)
                  goto LABEL_53;
LABEL_48:
                v65 = *(_OWORD *)v71;
                v69->__r_.__value_.__r.__words[2] = *(_QWORD *)(v71 + 16);
                *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v65;
                v64 += 48;
                if (v60 + v64 == v59)
                  goto LABEL_54;
              }
            }
          }
        }
        else
        {
          v109 = &v110;
          v112 = 0;
          v113 = 0;
          v114 = 0;
          v39 = *(_QWORD *)(a3 + 192);
          v38 = *(_QWORD *)(a3 + 200);
          v40 = v38 - v39;
          if (v38 == v39)
            goto LABEL_37;
        }
        v41 = 0xAAAAAAAAAAAAAAABLL * (v40 >> 4);
        if (v41 > 0x555555555555555)
          goto LABEL_75;
        v42 = v10;
        v43 = (char *)operator new(v40);
        v44 = 0;
        v112 = v43;
        v113 = v43;
        v114 = &v43[48 * v41];
        while (1)
        {
          v45 = (__int128 *)(v39 + v44);
          v46 = (std::string *)&v43[v44];
          if (*(char *)(v39 + v44 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)v45, *((_QWORD *)v45 + 1));
            v48 = (std::string *)&v43[v44 + 24];
            v49 = v39 + v44;
            v50 = v39 + v44 + 24;
            if ((*(char *)(v39 + v44 + 47) & 0x80000000) == 0)
              goto LABEL_35;
LABEL_30:
            std::string::__init_copy_ctor_external(v48, *(const std::string::value_type **)v50, *(_QWORD *)(v49 + 32));
            v44 += 48;
            if (v39 + v44 == v38)
              goto LABEL_36;
          }
          else
          {
            v47 = *v45;
            v46->__r_.__value_.__r.__words[2] = *((_QWORD *)v45 + 2);
            *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
            v48 = (std::string *)&v43[v44 + 24];
            v49 = v39 + v44;
            v50 = v39 + v44 + 24;
            if (*(char *)(v39 + v44 + 47) < 0)
              goto LABEL_30;
LABEL_35:
            v51 = *(_OWORD *)v50;
            v48->__r_.__value_.__r.__words[2] = *(_QWORD *)(v50 + 16);
            *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v51;
            v44 += 48;
            if (v39 + v44 == v38)
            {
LABEL_36:
              v113 = &v43[v44];
              v10 = v42;
              goto LABEL_37;
            }
          }
        }
      }
    }
    else
    {
      v109 = &v110;
      v112 = 0;
      v113 = 0;
      v114 = 0;
      v19 = *(_QWORD *)(a4 + 192);
      v18 = *(_QWORD *)(a4 + 200);
      v20 = v18 - v19;
      if (v18 == v19)
        goto LABEL_19;
    }
    v92 = v10;
    v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 4);
    if (v21 > 0x555555555555555)
      goto LABEL_75;
    v22 = (char *)operator new(v20);
    v23 = 0;
    v112 = v22;
    v113 = v22;
    v114 = &v22[48 * v21];
    while (1)
    {
      v25 = (__int128 *)(v19 + v23);
      v26 = (std::string *)&v22[v23];
      if (*(char *)(v19 + v23 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
        v28 = (std::string *)&v22[v23 + 24];
        v29 = v19 + v23;
        v30 = v19 + v23 + 24;
        if ((*(char *)(v19 + v23 + 47) & 0x80000000) == 0)
          goto LABEL_12;
LABEL_17:
        std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v30, *(_QWORD *)(v29 + 32));
        v23 += 48;
        if (v19 + v23 == v18)
        {
LABEL_18:
          v113 = &v22[v23];
          v10 = v92;
          goto LABEL_19;
        }
      }
      else
      {
        v27 = *v25;
        v26->__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 2);
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
        v28 = (std::string *)&v22[v23 + 24];
        v29 = v19 + v23;
        v30 = v19 + v23 + 24;
        if (*(char *)(v19 + v23 + 47) < 0)
          goto LABEL_17;
LABEL_12:
        v24 = *(_OWORD *)v30;
        v28->__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 16);
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v24;
        v23 += 48;
        if (v19 + v23 == v18)
          goto LABEL_18;
      }
    }
  }
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,cricket::`anonymous namespace'::NegotiateCodecs(std::vector<cricket::Codec> const&,std::vector<cricket::Codec> const&,std::vector<cricket::Codec>*,BOOL)::$_0 &,cricket::Codec*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  void (**v9)(cricket::Codec *__hidden);
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void (**v14)(cricket::Codec *__hidden);
  int v15;
  uint64_t v16;
  uint64_t *v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  __int128 v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  __int128 *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  __int128 *v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  __int128 *v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  __int128 *v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  __int128 *v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  void (**v116)(cricket::Codec *__hidden);
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  char v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  v8 = *a4;
  v9 = (void (**)(cricket::Codec *__hidden))(a2 + 12);
  v116 = (void (**)(cricket::Codec *__hidden))(a2 + 12);
  v10 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v8, (int *)(a2 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v116)+ 5);
  v11 = *a4;
  v116 = (void (**)(cricket::Codec *__hidden))(a1 + 12);
  v12 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v11, (int *)(a1 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v116)+ 5);
  v13 = *a4;
  v14 = (void (**)(cricket::Codec *__hidden))(a3 + 12);
  if (v10 <= v12)
  {
    v116 = (void (**)(cricket::Codec *__hidden))(a3 + 12);
    v27 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v13, (int *)(a3 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v116)+ 5);
    v28 = *a4;
    v116 = v9;
    if (v27 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v28, (int *)v9, (uint64_t)&std::piecewise_construct, (_DWORD **)&v116)+ 5))return;
    v29 = *(_QWORD *)(a2 + 8);
    v116 = &off_24C0B1418;
    v117 = v29;
    v118 = *(_OWORD *)(a2 + 16);
    v119 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v120 = *(_OWORD *)(a2 + 40);
    LOBYTE(v121) = 0;
    v123 = 0;
    if (*(_BYTE *)(a2 + 80))
    {
      v121 = *(_OWORD *)(a2 + 56);
      v122 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      v123 = 1;
    }
    v124 = *(_QWORD *)(a2 + 88);
    v30 = *(_OWORD *)(a2 + 112);
    v125 = *(_OWORD *)(a2 + 96);
    v126 = v30;
    v127 = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a2 + 88) = 0;
    LOBYTE(v128) = 0;
    v130 = 0;
    if (*(_BYTE *)(a2 + 160))
    {
      v128 = *(_OWORD *)(a2 + 136);
      v129 = *(_QWORD *)(a2 + 152);
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      v130 = 1;
    }
    v31 = (_QWORD *)(a2 + 176);
    v32 = *(_QWORD *)(a2 + 176);
    v131 = *(uint64_t **)(a2 + 168);
    v132 = v32;
    v133 = *(_QWORD *)(a2 + 184);
    v114 = a3;
    if (v133)
    {
      *(_QWORD *)(v32 + 16) = &v132;
      *(_QWORD *)(a2 + 168) = v31;
      *v31 = 0;
      *(_QWORD *)(a2 + 184) = 0;
      v134 = 0;
      v135 = 0;
      v136 = 0;
      v34 = *(_QWORD *)(a2 + 192);
      v33 = *(_QWORD *)(a2 + 200);
      v35 = v33 - v34;
      if (v33 == v34)
      {
LABEL_46:
        cricket::Codec::operator=(a2, v114);
        cricket::Codec::operator=(v114, (uint64_t)&v116);
        cricket::Codec::~Codec((cricket::Codec *)&v116);
        v64 = *a4;
        v116 = v9;
        v65 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v64, (int *)v9, (uint64_t)&std::piecewise_construct, (_DWORD **)&v116)+ 5);
        v66 = *a4;
        v116 = (void (**)(cricket::Codec *__hidden))(a1 + 12);
        if (v65 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v66, (int *)(a1 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v116)+ 5))return;
        v67 = *(_QWORD *)(a1 + 8);
        v116 = &off_24C0B1418;
        v117 = v67;
        v118 = *(_OWORD *)(a1 + 16);
        v119 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        v120 = *(_OWORD *)(a1 + 40);
        LOBYTE(v121) = 0;
        v123 = 0;
        if (*(_BYTE *)(a1 + 80))
        {
          v121 = *(_OWORD *)(a1 + 56);
          v122 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 72) = 0;
          *(_QWORD *)(a1 + 56) = 0;
          v123 = 1;
        }
        v124 = *(_QWORD *)(a1 + 88);
        v68 = *(_OWORD *)(a1 + 112);
        v125 = *(_OWORD *)(a1 + 96);
        v126 = v68;
        v127 = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(a1 + 88) = 0;
        LOBYTE(v128) = 0;
        v130 = 0;
        if (*(_BYTE *)(a1 + 160))
        {
          v128 = *(_OWORD *)(a1 + 136);
          v129 = *(_QWORD *)(a1 + 152);
          *(_QWORD *)(a1 + 144) = 0;
          *(_QWORD *)(a1 + 152) = 0;
          *(_QWORD *)(a1 + 136) = 0;
          v130 = 1;
        }
        v69 = (_QWORD *)(a1 + 176);
        v70 = *(_QWORD *)(a1 + 176);
        v131 = *(uint64_t **)(a1 + 168);
        v132 = v70;
        v133 = *(_QWORD *)(a1 + 184);
        if (v133)
        {
          *(_QWORD *)(v70 + 16) = &v132;
          *(_QWORD *)(a1 + 168) = v69;
          *v69 = 0;
          *(_QWORD *)(a1 + 184) = 0;
          v134 = 0;
          v135 = 0;
          v136 = 0;
          v71 = *(_QWORD *)(a1 + 192);
          v72 = *(_QWORD *)(a1 + 200);
          v73 = v72 - v71;
          if (v72 == v71)
          {
LABEL_82:
            cricket::Codec::operator=(a1, a2);
            v53 = a2;
            goto LABEL_94;
          }
        }
        else
        {
          v131 = &v132;
          v134 = 0;
          v135 = 0;
          v136 = 0;
          v71 = *(_QWORD *)(a1 + 192);
          v72 = *(_QWORD *)(a1 + 200);
          v73 = v72 - v71;
          if (v72 == v71)
            goto LABEL_82;
        }
        v94 = 0xAAAAAAAAAAAAAAABLL * (v73 >> 4);
        if (v94 > 0x555555555555555)
          goto LABEL_96;
        v95 = (char *)operator new(v73);
        v96 = 0;
        v134 = v95;
        v135 = v95;
        v136 = &v95[48 * v94];
        while (1)
        {
          v97 = (__int128 *)(v71 + v96);
          v98 = (std::string *)&v95[v96];
          if (*(char *)(v71 + v96 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v98, *(const std::string::value_type **)v97, *((_QWORD *)v97 + 1));
            v100 = (std::string *)&v95[v96 + 24];
            v101 = v71 + v96;
            v102 = v71 + v96 + 24;
            if ((*(char *)(v71 + v96 + 47) & 0x80000000) == 0)
              goto LABEL_80;
LABEL_75:
            std::string::__init_copy_ctor_external(v100, *(const std::string::value_type **)v102, *(_QWORD *)(v101 + 32));
            v96 += 48;
            if (v71 + v96 == v72)
              goto LABEL_81;
          }
          else
          {
            v99 = *v97;
            v98->__r_.__value_.__r.__words[2] = *((_QWORD *)v97 + 2);
            *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v99;
            v100 = (std::string *)&v95[v96 + 24];
            v101 = v71 + v96;
            v102 = v71 + v96 + 24;
            if (*(char *)(v71 + v96 + 47) < 0)
              goto LABEL_75;
LABEL_80:
            v103 = *(_OWORD *)v102;
            v100->__r_.__value_.__r.__words[2] = *(_QWORD *)(v102 + 16);
            *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v103;
            v96 += 48;
            if (v71 + v96 == v72)
            {
LABEL_81:
              v135 = &v95[v96];
              goto LABEL_82;
            }
          }
        }
      }
    }
    else
    {
      v131 = &v132;
      v134 = 0;
      v135 = 0;
      v136 = 0;
      v34 = *(_QWORD *)(a2 + 192);
      v33 = *(_QWORD *)(a2 + 200);
      v35 = v33 - v34;
      if (v33 == v34)
        goto LABEL_46;
    }
    v54 = 0xAAAAAAAAAAAAAAABLL * (v35 >> 4);
    if (v54 > 0x555555555555555)
      goto LABEL_96;
    v55 = (char *)operator new(v35);
    v56 = 0;
    v134 = v55;
    v135 = v55;
    v136 = &v55[48 * v54];
    while (1)
    {
      v58 = (__int128 *)(v34 + v56);
      v59 = (std::string *)&v55[v56];
      if (*(char *)(v34 + v56 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v59, *(const std::string::value_type **)v58, *((_QWORD *)v58 + 1));
        v61 = (std::string *)&v55[v56 + 24];
        v62 = v34 + v56;
        v63 = v34 + v56 + 24;
        if ((*(char *)(v34 + v56 + 47) & 0x80000000) == 0)
          goto LABEL_39;
LABEL_44:
        std::string::__init_copy_ctor_external(v61, *(const std::string::value_type **)v63, *(_QWORD *)(v62 + 32));
        v56 += 48;
        if (v34 + v56 == v33)
        {
LABEL_45:
          v135 = &v55[v56];
          goto LABEL_46;
        }
      }
      else
      {
        v60 = *v58;
        v59->__r_.__value_.__r.__words[2] = *((_QWORD *)v58 + 2);
        *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
        v61 = (std::string *)&v55[v56 + 24];
        v62 = v34 + v56;
        v63 = v34 + v56 + 24;
        if (*(char *)(v34 + v56 + 47) < 0)
          goto LABEL_44;
LABEL_39:
        v57 = *(_OWORD *)v63;
        v61->__r_.__value_.__r.__words[2] = *(_QWORD *)(v63 + 16);
        *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v57;
        v56 += 48;
        if (v34 + v56 == v33)
          goto LABEL_45;
      }
    }
  }
  v116 = (void (**)(cricket::Codec *__hidden))(a3 + 12);
  v15 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v13, (int *)(a3 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v116)+ 5);
  v16 = *a4;
  v116 = v9;
  v17 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v16, (int *)v9, (uint64_t)&std::piecewise_construct, (_DWORD **)&v116);
  v18 = (__int128 *)(a1 + 16);
  v19 = (__int128 *)(a1 + 40);
  if (v15 <= *((_DWORD *)v17 + 5))
  {
    v36 = *(_QWORD *)(a1 + 8);
    v116 = &off_24C0B1418;
    v117 = v36;
    v118 = *v18;
    v119 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v18 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v120 = *v19;
    LOBYTE(v121) = 0;
    v123 = 0;
    if (*(_BYTE *)(a1 + 80))
    {
      v121 = *(_OWORD *)(a1 + 56);
      v122 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      v123 = 1;
    }
    v124 = *(_QWORD *)(a1 + 88);
    v37 = *(_OWORD *)(a1 + 112);
    v125 = *(_OWORD *)(a1 + 96);
    v126 = v37;
    v127 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 88) = 0;
    LOBYTE(v128) = 0;
    v130 = 0;
    if (*(_BYTE *)(a1 + 160))
    {
      v128 = *(_OWORD *)(a1 + 136);
      v129 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 136) = 0;
      v130 = 1;
    }
    v38 = (_QWORD *)(a1 + 176);
    v39 = *(_QWORD *)(a1 + 176);
    v131 = *(uint64_t **)(a1 + 168);
    v132 = v39;
    v133 = *(_QWORD *)(a1 + 184);
    v115 = a3;
    if (v133)
    {
      *(_QWORD *)(v39 + 16) = &v132;
      *(_QWORD *)(a1 + 168) = v38;
      *v38 = 0;
      *(_QWORD *)(a1 + 184) = 0;
      v134 = 0;
      v135 = 0;
      v136 = 0;
      v41 = *(_QWORD *)(a1 + 192);
      v40 = *(_QWORD *)(a1 + 200);
      v42 = v40 - v41;
      if (v40 == v41)
      {
LABEL_64:
        cricket::Codec::operator=(a1, a2);
        cricket::Codec::operator=(a2, (uint64_t)&v116);
        cricket::Codec::~Codec((cricket::Codec *)&v116);
        v84 = *a4;
        v116 = v14;
        v85 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v84, (int *)v14, (uint64_t)&std::piecewise_construct, (_DWORD **)&v116)+ 5);
        v86 = *a4;
        v116 = v9;
        if (v85 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v86, (int *)v9, (uint64_t)&std::piecewise_construct, (_DWORD **)&v116)+ 5))return;
        v87 = *(_QWORD *)(a2 + 8);
        v116 = &off_24C0B1418;
        v117 = v87;
        v118 = *(_OWORD *)(a2 + 16);
        v119 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        v120 = *(_OWORD *)(a2 + 40);
        LOBYTE(v121) = 0;
        v123 = 0;
        if (*(_BYTE *)(a2 + 80))
        {
          v121 = *(_OWORD *)(a2 + 56);
          v122 = *(_QWORD *)(a2 + 72);
          *(_QWORD *)(a2 + 64) = 0;
          *(_QWORD *)(a2 + 72) = 0;
          *(_QWORD *)(a2 + 56) = 0;
          v123 = 1;
        }
        v124 = *(_QWORD *)(a2 + 88);
        v88 = *(_OWORD *)(a2 + 112);
        v125 = *(_OWORD *)(a2 + 96);
        v126 = v88;
        v127 = *(_QWORD *)(a2 + 128);
        *(_QWORD *)(a2 + 88) = 0;
        LOBYTE(v128) = 0;
        v130 = 0;
        if (*(_BYTE *)(a2 + 160))
        {
          v128 = *(_OWORD *)(a2 + 136);
          v129 = *(_QWORD *)(a2 + 152);
          *(_QWORD *)(a2 + 144) = 0;
          *(_QWORD *)(a2 + 152) = 0;
          *(_QWORD *)(a2 + 136) = 0;
          v130 = 1;
        }
        v89 = (_QWORD *)(a2 + 176);
        v90 = *(_QWORD *)(a2 + 176);
        v131 = *(uint64_t **)(a2 + 168);
        v132 = v90;
        v133 = *(_QWORD *)(a2 + 184);
        if (v133)
        {
          *(_QWORD *)(v90 + 16) = &v132;
          *(_QWORD *)(a2 + 168) = v89;
          *v89 = 0;
          *(_QWORD *)(a2 + 184) = 0;
          v134 = 0;
          v135 = 0;
          v136 = 0;
          v91 = *(_QWORD *)(a2 + 192);
          v92 = *(_QWORD *)(a2 + 200);
          v93 = v92 - v91;
          if (v92 == v91)
          {
LABEL_93:
            cricket::Codec::operator=(a2, v115);
            v53 = v115;
            goto LABEL_94;
          }
        }
        else
        {
          v131 = &v132;
          v134 = 0;
          v135 = 0;
          v136 = 0;
          v91 = *(_QWORD *)(a2 + 192);
          v92 = *(_QWORD *)(a2 + 200);
          v93 = v92 - v91;
          if (v92 == v91)
            goto LABEL_93;
        }
        v104 = 0xAAAAAAAAAAAAAAABLL * (v93 >> 4);
        if (v104 > 0x555555555555555)
          goto LABEL_96;
        v105 = (char *)operator new(v93);
        v106 = 0;
        v134 = v105;
        v135 = v105;
        v136 = &v105[48 * v104];
        while (1)
        {
          v107 = (__int128 *)(v91 + v106);
          v108 = (std::string *)&v105[v106];
          if (*(char *)(v91 + v106 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v108, *(const std::string::value_type **)v107, *((_QWORD *)v107 + 1));
            v110 = (std::string *)&v105[v106 + 24];
            v111 = v91 + v106;
            v112 = v91 + v106 + 24;
            if ((*(char *)(v91 + v106 + 47) & 0x80000000) == 0)
              goto LABEL_91;
LABEL_86:
            std::string::__init_copy_ctor_external(v110, *(const std::string::value_type **)v112, *(_QWORD *)(v111 + 32));
            v106 += 48;
            if (v91 + v106 == v92)
              goto LABEL_92;
          }
          else
          {
            v109 = *v107;
            v108->__r_.__value_.__r.__words[2] = *((_QWORD *)v107 + 2);
            *(_OWORD *)&v108->__r_.__value_.__l.__data_ = v109;
            v110 = (std::string *)&v105[v106 + 24];
            v111 = v91 + v106;
            v112 = v91 + v106 + 24;
            if (*(char *)(v91 + v106 + 47) < 0)
              goto LABEL_86;
LABEL_91:
            v113 = *(_OWORD *)v112;
            v110->__r_.__value_.__r.__words[2] = *(_QWORD *)(v112 + 16);
            *(_OWORD *)&v110->__r_.__value_.__l.__data_ = v113;
            v106 += 48;
            if (v91 + v106 == v92)
            {
LABEL_92:
              v135 = &v105[v106];
              goto LABEL_93;
            }
          }
        }
      }
    }
    else
    {
      v131 = &v132;
      v134 = 0;
      v135 = 0;
      v136 = 0;
      v41 = *(_QWORD *)(a1 + 192);
      v40 = *(_QWORD *)(a1 + 200);
      v42 = v40 - v41;
      if (v40 == v41)
        goto LABEL_64;
    }
    v74 = 0xAAAAAAAAAAAAAAABLL * (v42 >> 4);
    if (v74 > 0x555555555555555)
      goto LABEL_96;
    v75 = (char *)operator new(v42);
    v76 = 0;
    v134 = v75;
    v135 = v75;
    v136 = &v75[48 * v74];
    while (1)
    {
      v78 = (__int128 *)(v41 + v76);
      v79 = (std::string *)&v75[v76];
      if (*(char *)(v41 + v76 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v79, *(const std::string::value_type **)v78, *((_QWORD *)v78 + 1));
        v81 = (std::string *)&v75[v76 + 24];
        v82 = v41 + v76;
        v83 = v41 + v76 + 24;
        if ((*(char *)(v41 + v76 + 47) & 0x80000000) == 0)
          goto LABEL_57;
LABEL_62:
        std::string::__init_copy_ctor_external(v81, *(const std::string::value_type **)v83, *(_QWORD *)(v82 + 32));
        v76 += 48;
        if (v41 + v76 == v40)
        {
LABEL_63:
          v135 = &v75[v76];
          goto LABEL_64;
        }
      }
      else
      {
        v80 = *v78;
        v79->__r_.__value_.__r.__words[2] = *((_QWORD *)v78 + 2);
        *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v80;
        v81 = (std::string *)&v75[v76 + 24];
        v82 = v41 + v76;
        v83 = v41 + v76 + 24;
        if (*(char *)(v41 + v76 + 47) < 0)
          goto LABEL_62;
LABEL_57:
        v77 = *(_OWORD *)v83;
        v81->__r_.__value_.__r.__words[2] = *(_QWORD *)(v83 + 16);
        *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v77;
        v76 += 48;
        if (v41 + v76 == v40)
          goto LABEL_63;
      }
    }
  }
  v20 = *(_QWORD *)(a1 + 8);
  v116 = &off_24C0B1418;
  v117 = v20;
  v118 = *v18;
  v119 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)v18 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v120 = *v19;
  LOBYTE(v121) = 0;
  v123 = 0;
  if (*(_BYTE *)(a1 + 80))
  {
    v121 = *(_OWORD *)(a1 + 56);
    v122 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    v123 = 1;
  }
  v124 = *(_QWORD *)(a1 + 88);
  v21 = *(_OWORD *)(a1 + 112);
  v125 = *(_OWORD *)(a1 + 96);
  v126 = v21;
  v127 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 88) = 0;
  LOBYTE(v128) = 0;
  v130 = 0;
  if (*(_BYTE *)(a1 + 160))
  {
    v128 = *(_OWORD *)(a1 + 136);
    v129 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    v130 = 1;
  }
  v22 = (_QWORD *)(a1 + 176);
  v23 = *(_QWORD *)(a1 + 176);
  v131 = *(uint64_t **)(a1 + 168);
  v132 = v23;
  v133 = *(_QWORD *)(a1 + 184);
  if (!v133)
  {
    v131 = &v132;
    v134 = 0;
    v135 = 0;
    v136 = 0;
    v24 = *(_QWORD *)(a1 + 192);
    v25 = *(_QWORD *)(a1 + 200);
    v26 = v25 - v24;
    if (v25 == v24)
      goto LABEL_35;
LABEL_26:
    v43 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 4);
    if (v43 <= 0x555555555555555)
    {
      v44 = (char *)operator new(v26);
      v45 = 0;
      v134 = v44;
      v135 = v44;
      v136 = &v44[48 * v43];
      while (1)
      {
        v47 = (__int128 *)(v24 + v45);
        v48 = (std::string *)&v44[v45];
        if (*(char *)(v24 + v45 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v48, *(const std::string::value_type **)v47, *((_QWORD *)v47 + 1));
          v50 = (std::string *)&v44[v45 + 24];
          v51 = v24 + v45;
          v52 = v24 + v45 + 24;
          if ((*(char *)(v24 + v45 + 47) & 0x80000000) == 0)
            goto LABEL_28;
LABEL_33:
          std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)v52, *(_QWORD *)(v51 + 32));
          v45 += 48;
          if (v24 + v45 == v25)
          {
LABEL_34:
            v135 = &v44[v45];
            goto LABEL_35;
          }
        }
        else
        {
          v49 = *v47;
          v48->__r_.__value_.__r.__words[2] = *((_QWORD *)v47 + 2);
          *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v49;
          v50 = (std::string *)&v44[v45 + 24];
          v51 = v24 + v45;
          v52 = v24 + v45 + 24;
          if (*(char *)(v24 + v45 + 47) < 0)
            goto LABEL_33;
LABEL_28:
          v46 = *(_OWORD *)v52;
          v50->__r_.__value_.__r.__words[2] = *(_QWORD *)(v52 + 16);
          *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v46;
          v45 += 48;
          if (v24 + v45 == v25)
            goto LABEL_34;
        }
      }
    }
LABEL_96:
    abort();
  }
  *(_QWORD *)(v23 + 16) = &v132;
  *(_QWORD *)(a1 + 168) = v22;
  *v22 = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v24 = *(_QWORD *)(a1 + 192);
  v25 = *(_QWORD *)(a1 + 200);
  v26 = v25 - v24;
  if (v25 != v24)
    goto LABEL_26;
LABEL_35:
  cricket::Codec::operator=(a1, a3);
  v53 = a3;
LABEL_94:
  cricket::Codec::operator=(v53, (uint64_t)&v116);
  cricket::Codec::~Codec((cricket::Codec *)&v116);
}

uint64_t std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,cricket::`anonymous namespace'::NegotiateCodecs(std::vector<cricket::Codec> const&,std::vector<cricket::Codec> const&,std::vector<cricket::Codec>*,BOOL)::$_0 &,cricket::Codec*>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _BOOL8 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  __int128 *v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  __int128 *v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _DWORD *v59;
  void (**v60)(cricket::Codec *__hidden);
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;

  v4 = a2;
  v81 = *MEMORY[0x24BDAC8D0];
  v6 = 1;
  switch(0x84BDA12F684BDA13 * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v6;
    case 2uLL:
      v7 = *a3;
      v60 = (void (**)(cricket::Codec *__hidden))(a2 - 204);
      v8 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v7, (int *)(a2 - 204), (uint64_t)&std::piecewise_construct, (_DWORD **)&v60)+ 5);
      v9 = *a3;
      v60 = (void (**)(cricket::Codec *__hidden))(a1 + 12);
      if (v8 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v9, (int *)(a1 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v60)+ 5))return 1;
      v10 = *(_QWORD *)(a1 + 8);
      v60 = &off_24C0B1418;
      v61 = v10;
      v62 = *(_OWORD *)(a1 + 16);
      v63 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v64 = *(_OWORD *)(a1 + 40);
      LOBYTE(v65) = 0;
      v67 = 0;
      if (*(_BYTE *)(a1 + 80))
      {
        v65 = *(_OWORD *)(a1 + 56);
        v66 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        v67 = 1;
      }
      v68 = *(_QWORD *)(a1 + 88);
      v11 = *(_OWORD *)(a1 + 112);
      v69 = *(_OWORD *)(a1 + 96);
      v70 = v11;
      v71 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 88) = 0;
      LOBYTE(v72) = 0;
      v74 = 0;
      if (*(_BYTE *)(a1 + 160))
      {
        v72 = *(_OWORD *)(a1 + 136);
        v73 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 144) = 0;
        *(_QWORD *)(a1 + 152) = 0;
        *(_QWORD *)(a1 + 136) = 0;
        v74 = 1;
      }
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 176);
      v75 = *(uint64_t **)(a1 + 168);
      v76 = v13;
      v77 = *(_QWORD *)(a1 + 184);
      if (v77)
      {
        *(_QWORD *)(v13 + 16) = &v76;
        *(_QWORD *)(a1 + 168) = v12;
        *v12 = 0;
        *(_QWORD *)(a1 + 184) = 0;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v14 = *(_QWORD *)(a1 + 192);
        v15 = *(_QWORD *)(a1 + 200);
        v16 = v15 - v14;
        if (v15 == v14)
        {
LABEL_52:
          cricket::Codec::operator=(a1, v4 - 216);
          cricket::Codec::operator=(v4 - 216, (uint64_t)&v60);
          cricket::Codec::~Codec((cricket::Codec *)&v60);
          return 1;
        }
      }
      else
      {
        v75 = &v76;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v14 = *(_QWORD *)(a1 + 192);
        v15 = *(_QWORD *)(a1 + 200);
        v16 = v15 - v14;
        if (v15 == v14)
          goto LABEL_52;
      }
      v45 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 4);
      if (v45 > 0x555555555555555)
        goto LABEL_55;
      v46 = (char *)operator new(v16);
      v47 = 0;
      v78 = v46;
      v79 = v46;
      v80 = &v46[48 * v45];
      while (1)
      {
        v49 = (__int128 *)(v14 + v47);
        v50 = (std::string *)&v46[v47];
        if (*(char *)(v14 + v47 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)v49, *((_QWORD *)v49 + 1));
          v52 = (std::string *)&v46[v47 + 24];
          v53 = v14 + v47;
          v54 = v14 + v47 + 24;
          if ((*(char *)(v14 + v47 + 47) & 0x80000000) == 0)
            goto LABEL_45;
LABEL_50:
          std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)v54, *(_QWORD *)(v53 + 32));
          v47 += 48;
          if (v14 + v47 == v15)
          {
LABEL_51:
            v79 = &v46[v47];
            goto LABEL_52;
          }
        }
        else
        {
          v51 = *v49;
          v50->__r_.__value_.__r.__words[2] = *((_QWORD *)v49 + 2);
          *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
          v52 = (std::string *)&v46[v47 + 24];
          v53 = v14 + v47;
          v54 = v14 + v47 + 24;
          if (*(char *)(v14 + v47 + 47) < 0)
            goto LABEL_50;
LABEL_45:
          v48 = *(_OWORD *)v54;
          v52->__r_.__value_.__r.__words[2] = *(_QWORD *)(v54 + 16);
          *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v48;
          v47 += 48;
          if (v14 + v47 == v15)
            goto LABEL_51;
        }
      }
    case 3uLL:
      return v6;
    case 4uLL:
      return v6;
    case 5uLL:
      return v6;
    default:
      v17 = a1 + 432;
      v18 = a1 + 648;
      v6 = 1;
      if (a1 + 648 == v4)
        return v6;
      v58 = 0;
      v57 = 0;
      v56 = v4;
      while (2)
      {
        v20 = *a3;
        v60 = (void (**)(cricket::Codec *__hidden))(v18 + 12);
        v21 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v20, (int *)(v18 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v60)+ 5);
        v22 = *a3;
        v60 = (void (**)(cricket::Codec *__hidden))(v17 + 12);
        if (v21 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v22, (int *)(v17 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v60)+ 5))goto LABEL_15;
        v23 = *(_QWORD *)(v18 + 8);
        v60 = &off_24C0B1418;
        v61 = v23;
        v62 = *(_OWORD *)(v18 + 16);
        v63 = *(_QWORD *)(v18 + 32);
        *(_QWORD *)(v18 + 16) = 0;
        *(_QWORD *)(v18 + 24) = 0;
        *(_QWORD *)(v18 + 32) = 0;
        v64 = *(_OWORD *)(v18 + 40);
        LOBYTE(v65) = 0;
        v67 = 0;
        if (*(_BYTE *)(v18 + 80))
        {
          v65 = *(_OWORD *)(v18 + 56);
          v66 = *(_QWORD *)(v18 + 72);
          *(_QWORD *)(v18 + 64) = 0;
          *(_QWORD *)(v18 + 72) = 0;
          *(_QWORD *)(v18 + 56) = 0;
          v67 = 1;
        }
        v68 = *(_QWORD *)(v18 + 88);
        v24 = *(_OWORD *)(v18 + 112);
        v69 = *(_OWORD *)(v18 + 96);
        v70 = v24;
        v71 = *(_QWORD *)(v18 + 128);
        *(_QWORD *)(v18 + 88) = 0;
        LOBYTE(v72) = 0;
        v74 = 0;
        if (*(_BYTE *)(v18 + 160))
        {
          v72 = *(_OWORD *)(v18 + 136);
          v73 = *(_QWORD *)(v18 + 152);
          *(_QWORD *)(v18 + 144) = 0;
          *(_QWORD *)(v18 + 152) = 0;
          *(_QWORD *)(v18 + 136) = 0;
          v74 = 1;
        }
        v25 = (_QWORD *)(v18 + 176);
        v26 = *(_QWORD *)(v18 + 176);
        v75 = *(uint64_t **)(v18 + 168);
        v76 = v26;
        v77 = *(_QWORD *)(v18 + 184);
        if (v77)
        {
          *(_QWORD *)(v26 + 16) = &v76;
          *(_QWORD *)(v18 + 168) = v25;
          *v25 = 0;
          *(_QWORD *)(v18 + 184) = 0;
          v78 = 0;
          v79 = 0;
          v80 = 0;
          v27 = *(_QWORD *)(v18 + 192);
          v28 = *(_QWORD *)(v18 + 200);
          v29 = v28 - v27;
          if (v28 == v27)
            goto LABEL_34;
          goto LABEL_25;
        }
        v75 = &v76;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v27 = *(_QWORD *)(v18 + 192);
        v28 = *(_QWORD *)(v18 + 200);
        v29 = v28 - v27;
        if (v28 != v27)
        {
LABEL_25:
          v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 4);
          if (v30 > 0x555555555555555)
LABEL_55:
            abort();
          v31 = (char *)operator new(v29);
          v32 = 0;
          v78 = v31;
          v79 = v31;
          v80 = &v31[48 * v30];
          while (1)
          {
            v33 = (__int128 *)(v27 + v32);
            v34 = (std::string *)&v31[v32];
            if (*(char *)(v27 + v32 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)v33, *((_QWORD *)v33 + 1));
              v36 = (std::string *)&v31[v32 + 24];
              v37 = v27 + v32;
              v38 = v27 + v32 + 24;
              if ((*(char *)(v27 + v32 + 47) & 0x80000000) == 0)
                goto LABEL_32;
LABEL_27:
              std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)v38, *(_QWORD *)(v37 + 32));
              v32 += 48;
              if (v27 + v32 == v28)
                goto LABEL_33;
            }
            else
            {
              v35 = *v33;
              v34->__r_.__value_.__r.__words[2] = *((_QWORD *)v33 + 2);
              *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
              v36 = (std::string *)&v31[v32 + 24];
              v37 = v27 + v32;
              v38 = v27 + v32 + 24;
              if (*(char *)(v27 + v32 + 47) < 0)
                goto LABEL_27;
LABEL_32:
              v39 = *(_OWORD *)v38;
              v36->__r_.__value_.__r.__words[2] = *(_QWORD *)(v38 + 16);
              *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v39;
              v32 += 48;
              if (v27 + v32 == v28)
              {
LABEL_33:
                v79 = &v31[v32];
                v4 = v56;
                break;
              }
            }
          }
        }
LABEL_34:
        v40 = v58;
        do
        {
          v41 = a1 + v40;
          cricket::Codec::operator=(a1 + v40 + 648, a1 + v40 + 432);
          if (v40 == -432)
          {
            v19 = a1;
            goto LABEL_13;
          }
          v42 = *a3;
          v59 = (_DWORD *)&v61 + 1;
          v43 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v42, (int *)&v61 + 1, (uint64_t)&std::piecewise_construct, &v59)+ 5);
          v44 = *a3;
          v59 = (_DWORD *)(v41 + 228);
          v40 -= 216;
        }
        while (v43 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v44, (int *)(v41 + 228), (uint64_t)&std::piecewise_construct, &v59)+ 5));
        v19 = a1 + v40 + 648;
LABEL_13:
        cricket::Codec::operator=(v19, (uint64_t)&v60);
        if (v57 != 7)
        {
          ++v57;
          cricket::Codec::~Codec((cricket::Codec *)&v60);
LABEL_15:
          v17 = v18;
          v58 += 216;
          v18 += 216;
          if (v18 == v4)
            return 1;
          continue;
        }
        break;
      }
      v6 = v18 + 216 == v4;
      cricket::Codec::~Codec((cricket::Codec *)&v60);
      return v6;
  }
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,cricket::`anonymous namespace'::NegotiateCodecs(std::vector<cricket::Codec> const&,std::vector<cricket::Codec> const&,std::vector<cricket::Codec>*,BOOL)::$_0 &,cricket::Codec*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  __int128 *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  __int128 *v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  void (**v71)(cricket::Codec *__hidden);
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v10 = *a5;
  v71 = (void (**)(cricket::Codec *__hidden))(a4 + 12);
  v11 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v10, (int *)(a4 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v71)+ 5);
  v12 = *a5;
  v71 = (void (**)(cricket::Codec *__hidden))(a3 + 12);
  if (v11 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v12, (int *)(a3 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v71)+ 5))
  {
    v13 = *(_QWORD *)(a3 + 8);
    v71 = &off_24C0B1418;
    v72 = v13;
    v73 = *(_OWORD *)(a3 + 16);
    v74 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v75 = *(_OWORD *)(a3 + 40);
    LOBYTE(v76) = 0;
    v78 = 0;
    if (*(_BYTE *)(a3 + 80))
    {
      v76 = *(_OWORD *)(a3 + 56);
      v77 = *(_QWORD *)(a3 + 72);
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      v78 = 1;
    }
    v79 = *(_QWORD *)(a3 + 88);
    v14 = *(_OWORD *)(a3 + 112);
    v80 = *(_OWORD *)(a3 + 96);
    v81 = v14;
    v82 = *(_QWORD *)(a3 + 128);
    *(_QWORD *)(a3 + 88) = 0;
    LOBYTE(v83) = 0;
    v85 = 0;
    if (*(_BYTE *)(a3 + 160))
    {
      v83 = *(_OWORD *)(a3 + 136);
      v84 = *(_QWORD *)(a3 + 152);
      *(_QWORD *)(a3 + 144) = 0;
      *(_QWORD *)(a3 + 152) = 0;
      *(_QWORD *)(a3 + 136) = 0;
      v85 = 1;
    }
    v15 = (_QWORD *)(a3 + 176);
    v16 = *(_QWORD *)(a3 + 176);
    v86 = *(uint64_t **)(a3 + 168);
    v87 = v16;
    v88 = *(_QWORD *)(a3 + 184);
    v70 = a1;
    if (v88)
    {
      *(_QWORD *)(v16 + 16) = &v87;
      *(_QWORD *)(a3 + 168) = v15;
      *v15 = 0;
      *(_QWORD *)(a3 + 184) = 0;
    }
    else
    {
      v86 = &v87;
    }
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v17 = *(_QWORD *)(a3 + 192);
    v18 = *(_QWORD *)(a3 + 200);
    v19 = v18 - v17;
    if (v18 != v17)
    {
      v20 = 0xAAAAAAAAAAAAAAABLL * (v19 >> 4);
      if (v20 <= 0x555555555555555)
      {
        v21 = (char *)operator new(v19);
        v22 = 0;
        v89 = v21;
        v90 = v21;
        v91 = &v21[48 * v20];
        while (1)
        {
          v23 = (__int128 *)(v17 + v22);
          v24 = (std::string *)&v21[v22];
          if (*(char *)(v17 + v22 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
            v26 = (std::string *)&v21[v22 + 24];
            v27 = v17 + v22;
            v28 = v17 + v22 + 24;
            if ((*(char *)(v17 + v22 + 47) & 0x80000000) == 0)
              goto LABEL_17;
LABEL_12:
            std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)v28, *(_QWORD *)(v27 + 32));
            v22 += 48;
            if (v17 + v22 == v18)
              goto LABEL_18;
          }
          else
          {
            v25 = *v23;
            v24->__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
            v26 = (std::string *)&v21[v22 + 24];
            v27 = v17 + v22;
            v28 = v17 + v22 + 24;
            if (*(char *)(v17 + v22 + 47) < 0)
              goto LABEL_12;
LABEL_17:
            v29 = *(_OWORD *)v28;
            v26->__r_.__value_.__r.__words[2] = *(_QWORD *)(v28 + 16);
            *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v29;
            v22 += 48;
            if (v17 + v22 == v18)
            {
LABEL_18:
              v90 = &v21[v22];
              goto LABEL_19;
            }
          }
        }
      }
LABEL_57:
      abort();
    }
LABEL_19:
    cricket::Codec::operator=(a3, a4);
    cricket::Codec::operator=(a4, (uint64_t)&v71);
    cricket::Codec::~Codec((cricket::Codec *)&v71);
    v30 = *a5;
    v71 = (void (**)(cricket::Codec *__hidden))(a3 + 12);
    v31 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v30, (int *)(a3 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v71)+ 5);
    v32 = *a5;
    v71 = (void (**)(cricket::Codec *__hidden))(a2 + 12);
    if (v31 > *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v32, (int *)(a2 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v71)+ 5))
    {
      v33 = *(_QWORD *)(a2 + 8);
      v71 = &off_24C0B1418;
      v72 = v33;
      v73 = *(_OWORD *)(a2 + 16);
      v74 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      v75 = *(_OWORD *)(a2 + 40);
      LOBYTE(v76) = 0;
      v78 = 0;
      if (*(_BYTE *)(a2 + 80))
      {
        v76 = *(_OWORD *)(a2 + 56);
        v77 = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(a2 + 64) = 0;
        *(_QWORD *)(a2 + 72) = 0;
        *(_QWORD *)(a2 + 56) = 0;
        v78 = 1;
      }
      v79 = *(_QWORD *)(a2 + 88);
      v34 = *(_OWORD *)(a2 + 112);
      v80 = *(_OWORD *)(a2 + 96);
      v81 = v34;
      v82 = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a2 + 88) = 0;
      LOBYTE(v83) = 0;
      v85 = 0;
      if (*(_BYTE *)(a2 + 160))
      {
        v83 = *(_OWORD *)(a2 + 136);
        v84 = *(_QWORD *)(a2 + 152);
        *(_QWORD *)(a2 + 144) = 0;
        *(_QWORD *)(a2 + 152) = 0;
        *(_QWORD *)(a2 + 136) = 0;
        v85 = 1;
      }
      v35 = (_QWORD *)(a2 + 176);
      v36 = *(_QWORD *)(a2 + 176);
      v86 = *(uint64_t **)(a2 + 168);
      v87 = v36;
      v88 = *(_QWORD *)(a2 + 184);
      if (v88)
      {
        *(_QWORD *)(v36 + 16) = &v87;
        *(_QWORD *)(a2 + 168) = v35;
        *v35 = 0;
        *(_QWORD *)(a2 + 184) = 0;
        v89 = 0;
        v90 = 0;
        v91 = 0;
        v37 = *(_QWORD *)(a2 + 192);
        v38 = *(_QWORD *)(a2 + 200);
        v39 = v38 - v37;
        if (v38 == v37)
        {
LABEL_37:
          cricket::Codec::operator=(a2, a3);
          cricket::Codec::operator=(a3, (uint64_t)&v71);
          cricket::Codec::~Codec((cricket::Codec *)&v71);
          v50 = *a5;
          v71 = (void (**)(cricket::Codec *__hidden))(a2 + 12);
          v51 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v50, (int *)(a2 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v71)+ 5);
          v52 = *a5;
          v71 = (void (**)(cricket::Codec *__hidden))(v70 + 12);
          if (v51 <= *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v52, (int *)(v70 + 12), (uint64_t)&std::piecewise_construct, (_DWORD **)&v71)+ 5))return;
          v53 = *(_QWORD *)(v70 + 8);
          v71 = &off_24C0B1418;
          v72 = v53;
          v73 = *(_OWORD *)(v70 + 16);
          v74 = *(_QWORD *)(v70 + 32);
          *(_QWORD *)(v70 + 16) = 0;
          *(_QWORD *)(v70 + 24) = 0;
          *(_QWORD *)(v70 + 32) = 0;
          v75 = *(_OWORD *)(v70 + 40);
          LOBYTE(v76) = 0;
          v78 = 0;
          if (*(_BYTE *)(v70 + 80))
          {
            v76 = *(_OWORD *)(v70 + 56);
            v77 = *(_QWORD *)(v70 + 72);
            *(_QWORD *)(v70 + 64) = 0;
            *(_QWORD *)(v70 + 72) = 0;
            *(_QWORD *)(v70 + 56) = 0;
            v78 = 1;
          }
          v79 = *(_QWORD *)(v70 + 88);
          v54 = *(_OWORD *)(v70 + 112);
          v80 = *(_OWORD *)(v70 + 96);
          v81 = v54;
          v82 = *(_QWORD *)(v70 + 128);
          *(_QWORD *)(v70 + 88) = 0;
          LOBYTE(v83) = 0;
          v85 = 0;
          if (*(_BYTE *)(v70 + 160))
          {
            v83 = *(_OWORD *)(v70 + 136);
            v84 = *(_QWORD *)(v70 + 152);
            *(_QWORD *)(v70 + 144) = 0;
            *(_QWORD *)(v70 + 152) = 0;
            *(_QWORD *)(v70 + 136) = 0;
            v85 = 1;
          }
          v55 = (_QWORD *)(v70 + 176);
          v56 = *(_QWORD *)(v70 + 176);
          v86 = *(uint64_t **)(v70 + 168);
          v87 = v56;
          v88 = *(_QWORD *)(v70 + 184);
          if (v88)
          {
            *(_QWORD *)(v56 + 16) = &v87;
            *(_QWORD *)(v70 + 168) = v55;
            *v55 = 0;
            *(_QWORD *)(v70 + 184) = 0;
            v89 = 0;
            v90 = 0;
            v91 = 0;
            v57 = *(_QWORD *)(v70 + 192);
            v58 = *(_QWORD *)(v70 + 200);
            v59 = v58 - v57;
            if (v58 == v57)
            {
LABEL_55:
              cricket::Codec::operator=(v70, a2);
              cricket::Codec::operator=(a2, (uint64_t)&v71);
              cricket::Codec::~Codec((cricket::Codec *)&v71);
              return;
            }
          }
          else
          {
            v86 = &v87;
            v89 = 0;
            v90 = 0;
            v91 = 0;
            v57 = *(_QWORD *)(v70 + 192);
            v58 = *(_QWORD *)(v70 + 200);
            v59 = v58 - v57;
            if (v58 == v57)
              goto LABEL_55;
          }
          v60 = 0xAAAAAAAAAAAAAAABLL * (v59 >> 4);
          if (v60 > 0x555555555555555)
            goto LABEL_57;
          v61 = (char *)operator new(v59);
          v62 = 0;
          v89 = v61;
          v90 = v61;
          v91 = &v61[48 * v60];
          while (1)
          {
            v63 = (__int128 *)(v57 + v62);
            v64 = (std::string *)&v61[v62];
            if (*(char *)(v57 + v62 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v64, *(const std::string::value_type **)v63, *((_QWORD *)v63 + 1));
              v66 = (std::string *)&v61[v62 + 24];
              v67 = v57 + v62;
              v68 = v57 + v62 + 24;
              if ((*(char *)(v57 + v62 + 47) & 0x80000000) == 0)
                goto LABEL_53;
LABEL_48:
              std::string::__init_copy_ctor_external(v66, *(const std::string::value_type **)v68, *(_QWORD *)(v67 + 32));
              v62 += 48;
              if (v57 + v62 == v58)
                goto LABEL_54;
            }
            else
            {
              v65 = *v63;
              v64->__r_.__value_.__r.__words[2] = *((_QWORD *)v63 + 2);
              *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
              v66 = (std::string *)&v61[v62 + 24];
              v67 = v57 + v62;
              v68 = v57 + v62 + 24;
              if (*(char *)(v57 + v62 + 47) < 0)
                goto LABEL_48;
LABEL_53:
              v69 = *(_OWORD *)v68;
              v66->__r_.__value_.__r.__words[2] = *(_QWORD *)(v68 + 16);
              *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v69;
              v62 += 48;
              if (v57 + v62 == v58)
              {
LABEL_54:
                v90 = &v61[v62];
                goto LABEL_55;
              }
            }
          }
        }
      }
      else
      {
        v86 = &v87;
        v89 = 0;
        v90 = 0;
        v91 = 0;
        v37 = *(_QWORD *)(a2 + 192);
        v38 = *(_QWORD *)(a2 + 200);
        v39 = v38 - v37;
        if (v38 == v37)
          goto LABEL_37;
      }
      v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 4);
      if (v40 > 0x555555555555555)
        goto LABEL_57;
      v41 = (char *)operator new(v39);
      v42 = 0;
      v89 = v41;
      v90 = v41;
      v91 = &v41[48 * v40];
      while (1)
      {
        v43 = (__int128 *)(v37 + v42);
        v44 = (std::string *)&v41[v42];
        if (*(char *)(v37 + v42 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)v43, *((_QWORD *)v43 + 1));
          v46 = (std::string *)&v41[v42 + 24];
          v47 = v37 + v42;
          v48 = v37 + v42 + 24;
          if ((*(char *)(v37 + v42 + 47) & 0x80000000) == 0)
            goto LABEL_35;
LABEL_30:
          std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)v48, *(_QWORD *)(v47 + 32));
          v42 += 48;
          if (v37 + v42 == v38)
            goto LABEL_36;
        }
        else
        {
          v45 = *v43;
          v44->__r_.__value_.__r.__words[2] = *((_QWORD *)v43 + 2);
          *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
          v46 = (std::string *)&v41[v42 + 24];
          v47 = v37 + v42;
          v48 = v37 + v42 + 24;
          if (*(char *)(v37 + v42 + 47) < 0)
            goto LABEL_30;
LABEL_35:
          v49 = *(_OWORD *)v48;
          v46->__r_.__value_.__r.__words[2] = *(_QWORD *)(v48 + 16);
          *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v49;
          v42 += 48;
          if (v37 + v42 == v38)
          {
LABEL_36:
            v90 = &v41[v42];
            goto LABEL_37;
          }
        }
      }
    }
  }
}

uint64_t webrtc::MediaStream::MediaStream(uint64_t a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *(_QWORD *)(a1 + 16) = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1 + 16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &unk_24C0B7020;
  *(_QWORD *)(a1 + 8) = &unk_24C0B70C8;
  v3 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return a1;
}

BOOL webrtc::MediaStream::AddTrack(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  char v37;

  v3 = a1 + 8;
  v4 = *a2;
  if (*a2)
    (**(void (***)(_QWORD))v4)(*a2);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v4 + 40))(__p, v4);
  v5 = webrtc::FindTrack<std::vector<webrtc::scoped_refptr<webrtc::AudioTrackInterface>>>(v3, (unsigned __int8 **)__p);
  v6 = (_QWORD *)v5;
  if (v37 < 0)
  {
    operator delete(__p[0]);
    v7 = (_QWORD *)a1[9];
    if (v7 != v6)
      goto LABEL_5;
LABEL_7:
    v8 = a1[10];
    if (v8 > (unint64_t)v6)
    {
      if (v6)
      {
        *v6 = v4;
        v9 = v6 + 1;
LABEL_23:
        a1[9] = v9;
        webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(a1);
        return v7 == v6;
      }
      goto LABEL_38;
    }
    v10 = *v3;
    v11 = (uint64_t)v6 - *v3;
    v12 = v11 >> 3;
    v13 = (v11 >> 3) + 1;
    if (v13 >> 61)
      goto LABEL_39;
    v14 = v8 - v10;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    v24 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8;
    v15 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v24)
      v15 = v13;
    if (!v15)
    {
LABEL_38:
      __break(1u);
LABEL_39:
      abort();
    }
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v16 = 8 * v15;
    v17 = (char *)operator new(8 * v15);
    v18 = &v17[v16];
    v19 = &v17[8 * v12];
    *(_QWORD *)v19 = v4;
    v9 = v19 + 8;
    if ((_QWORD *)v10 == v6)
    {
      a1[8] = v19;
      a1[9] = v9;
      v22 = (char *)v6;
      a1[10] = v18;
      goto LABEL_21;
    }
    v20 = v11 - 8;
    if ((unint64_t)(v11 - 8) >= 0x78)
    {
      v24 = (char *)v6 - (v20 & 0xFFFFFFFFFFFFFFF8) - 8 >= v19
         || &v17[v11 - (v20 & 0xFFFFFFFFFFFFFFF8) - 8] >= (char *)v6;
      v21 = v6;
      if (v24)
      {
        v25 = (v20 >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v6[v26 / 0xFFFFFFFFFFFFFFF8];
        v19 -= v26;
        v27 = &v17[8 * v12 - 16];
        v28 = (__int128 *)(v6 - 2);
        v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31 = *(v28 - 1);
          v30 = *v28;
          *(v28 - 1) = 0uLL;
          *v28 = 0uLL;
          *((_OWORD *)v27 - 1) = v31;
          *(_OWORD *)v27 = v30;
          v27 -= 32;
          v28 -= 2;
          v29 -= 4;
        }
        while (v29);
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_34;
      }
    }
    else
    {
      v21 = v6;
    }
    do
    {
      v32 = *--v21;
      *v21 = 0;
      *((_QWORD *)v19 - 1) = v32;
      v19 -= 8;
    }
    while (v21 != (_QWORD *)v10);
LABEL_34:
    v22 = (char *)a1[8];
    v33 = (char *)a1[9];
    a1[8] = v19;
    a1[9] = v9;
    a1[10] = v18;
    while (v33 != v22)
    {
      v35 = *((_QWORD *)v33 - 1);
      v33 -= 8;
      v34 = v35;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    }
LABEL_21:
    if (v22)
      operator delete(v22);
    goto LABEL_23;
  }
  v7 = (_QWORD *)a1[9];
  if (v7 == (_QWORD *)v5)
    goto LABEL_7;
LABEL_5:
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v7 == v6;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  char v37;

  v3 = a1 + 11;
  v4 = *a2;
  if (*a2)
    (**(void (***)(_QWORD))v4)(*a2);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v4 + 40))(__p, v4);
  v5 = webrtc::FindTrack<std::vector<webrtc::scoped_refptr<webrtc::AudioTrackInterface>>>(v3, (unsigned __int8 **)__p);
  v6 = (_QWORD *)v5;
  if (v37 < 0)
  {
    operator delete(__p[0]);
    v7 = (_QWORD *)a1[12];
    if (v7 != v6)
      goto LABEL_5;
LABEL_7:
    v8 = a1[13];
    if (v8 > (unint64_t)v6)
    {
      if (v6)
      {
        *v6 = v4;
        v9 = v6 + 1;
LABEL_23:
        a1[12] = v9;
        webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(a1);
        return v7 == v6;
      }
      goto LABEL_38;
    }
    v10 = *v3;
    v11 = (uint64_t)v6 - *v3;
    v12 = v11 >> 3;
    v13 = (v11 >> 3) + 1;
    if (v13 >> 61)
      goto LABEL_39;
    v14 = v8 - v10;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    v24 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8;
    v15 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v24)
      v15 = v13;
    if (!v15)
    {
LABEL_38:
      __break(1u);
LABEL_39:
      abort();
    }
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v16 = 8 * v15;
    v17 = (char *)operator new(8 * v15);
    v18 = &v17[v16];
    v19 = &v17[8 * v12];
    *(_QWORD *)v19 = v4;
    v9 = v19 + 8;
    if ((_QWORD *)v10 == v6)
    {
      a1[11] = v19;
      a1[12] = v9;
      v22 = (char *)v6;
      a1[13] = v18;
      goto LABEL_21;
    }
    v20 = v11 - 8;
    if ((unint64_t)(v11 - 8) >= 0x78)
    {
      v24 = (char *)v6 - (v20 & 0xFFFFFFFFFFFFFFF8) - 8 >= v19
         || &v17[v11 - (v20 & 0xFFFFFFFFFFFFFFF8) - 8] >= (char *)v6;
      v21 = v6;
      if (v24)
      {
        v25 = (v20 >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v6[v26 / 0xFFFFFFFFFFFFFFF8];
        v19 -= v26;
        v27 = &v17[8 * v12 - 16];
        v28 = (__int128 *)(v6 - 2);
        v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31 = *(v28 - 1);
          v30 = *v28;
          *(v28 - 1) = 0uLL;
          *v28 = 0uLL;
          *((_OWORD *)v27 - 1) = v31;
          *(_OWORD *)v27 = v30;
          v27 -= 32;
          v28 -= 2;
          v29 -= 4;
        }
        while (v29);
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_34;
      }
    }
    else
    {
      v21 = v6;
    }
    do
    {
      v32 = *--v21;
      *v21 = 0;
      *((_QWORD *)v19 - 1) = v32;
      v19 -= 8;
    }
    while (v21 != (_QWORD *)v10);
LABEL_34:
    v22 = (char *)a1[11];
    v33 = (char *)a1[12];
    a1[11] = v19;
    a1[12] = v9;
    a1[13] = v18;
    while (v33 != v22)
    {
      v35 = *((_QWORD *)v33 - 1);
      v33 -= 8;
      v34 = v35;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    }
LABEL_21:
    if (v22)
      operator delete(v22);
    goto LABEL_23;
  }
  v7 = (_QWORD *)a1[12];
  if (v7 == (_QWORD *)v5)
    goto LABEL_7;
LABEL_5:
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v7 == v6;
}

BOOL webrtc::MediaStream::RemoveTrack(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BOOL8 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v15;

  v2 = *a2;
  if (*a2)
  {
    v4 = a1 + 8;
    (**(void (***)(_QWORD))v2)(*a2);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v2 + 40))(__p, v2);
    v5 = webrtc::FindTrack<std::vector<webrtc::scoped_refptr<webrtc::AudioTrackInterface>>>(v4, (unsigned __int8 **)__p);
    v6 = (_QWORD *)v5;
    if (v15 < 0)
    {
      operator delete(__p[0]);
      v7 = (_QWORD *)a1[9];
      v8 = v7 != v6;
      if (v7 == v6)
      {
LABEL_17:
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
        return v8;
      }
    }
    else
    {
      v7 = (_QWORD *)a1[9];
      v8 = v7 != (_QWORD *)v5;
      if (v7 == (_QWORD *)v5)
        goto LABEL_17;
    }
    v9 = v6 + 1;
    if (v6 + 1 != v7)
    {
      do
      {
        v10 = *(v9 - 1);
        *(v9 - 1) = *v9;
        *v9 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        ++v9;
      }
      while (v9 != v7);
      v7 = (_QWORD *)a1[9];
      v6 = v9 - 1;
    }
    while (v7 != v6)
    {
      v12 = *--v7;
      v11 = v12;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    a1[9] = v6;
    webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(a1);
    goto LABEL_17;
  }
  return 0;
}

{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BOOL8 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v15;

  v2 = *a2;
  if (*a2)
  {
    v4 = a1 + 11;
    (**(void (***)(_QWORD))v2)(*a2);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v2 + 40))(__p, v2);
    v5 = webrtc::FindTrack<std::vector<webrtc::scoped_refptr<webrtc::AudioTrackInterface>>>(v4, (unsigned __int8 **)__p);
    v6 = (_QWORD *)v5;
    if (v15 < 0)
    {
      operator delete(__p[0]);
      v7 = (_QWORD *)a1[12];
      v8 = v7 != v6;
      if (v7 == v6)
      {
LABEL_17:
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
        return v8;
      }
    }
    else
    {
      v7 = (_QWORD *)a1[12];
      v8 = v7 != (_QWORD *)v5;
      if (v7 == (_QWORD *)v5)
        goto LABEL_17;
    }
    v9 = v6 + 1;
    if (v6 + 1 != v7)
    {
      do
      {
        v10 = *(v9 - 1);
        *(v9 - 1) = *v9;
        *v9 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        ++v9;
      }
      while (v9 != v7);
      v7 = (_QWORD *)a1[12];
      v6 = v9 - 1;
    }
    while (v7 != v6)
    {
      v12 = *--v7;
      v11 = v12;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    a1[12] = v6;
    webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(a1);
    goto LABEL_17;
  }
  return 0;
}

_QWORD *webrtc::MediaStream::FindAudioTrack@<X0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)webrtc::FindTrack<std::vector<webrtc::scoped_refptr<webrtc::AudioTrackInterface>>>((uint64_t *)(a1 + 64), a2);
  if (*(_QWORD **)(a1 + 72) == result)
  {
    *a3 = 0;
  }
  else
  {
    result = (_QWORD *)*result;
    *a3 = result;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))*result)(result);
  }
  return result;
}

uint64_t webrtc::FindTrack<std::vector<webrtc::scoped_refptr<webrtc::AudioTrackInterface>>>(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t i;
  void *v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  void *__s1;
  size_t __n;
  unsigned __int8 v18;

  for (i = *a1; i != a1[1]; i += 8)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)i + 40))(&__s1);
    if ((v18 & 0x80u) == 0)
      v7 = v18;
    else
      v7 = __n;
    v8 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    v9 = (char)v8;
    if ((char)v8 < 0)
      v8 = a2[1];
    if ((unsigned __int8 *)v7 == v8)
    {
      if (v9 >= 0)
        v10 = (unsigned __int8 *)a2;
      else
        v10 = *a2;
      if ((v18 & 0x80) != 0)
      {
        v5 = __s1;
        v6 = memcmp(__s1, v10, __n);
        operator delete(v5);
        if (!v6)
          return i;
      }
      else
      {
        if (!v18)
          return i;
        v11 = 0;
        do
        {
          v12 = *((unsigned __int8 *)&__s1 + v11);
          v13 = v10[v11];
        }
        while (v12 == v13 && v18 - 1 != v11++);
        if (v12 == v13)
          return i;
      }
    }
    else if ((v18 & 0x80) != 0)
    {
      operator delete(__s1);
    }
  }
  return i;
}

_QWORD *webrtc::MediaStream::FindVideoTrack@<X0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)webrtc::FindTrack<std::vector<webrtc::scoped_refptr<webrtc::AudioTrackInterface>>>((uint64_t *)(a1 + 88), a2);
  if (*(_QWORD **)(a1 + 96) == result)
  {
    *a3 = 0;
  }
  else
  {
    result = (_QWORD *)*result;
    *a3 = result;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))*result)(result);
  }
  return result;
}

void webrtc::MediaStream::id(webrtc::MediaStream *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
  }
}

uint64_t webrtc::MediaStream::GetAudioTracks@<X0>(webrtc::MediaStream *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 8);
  v3 = *((_QWORD *)this + 9);
  result = v3 - v2;
  if (v3 != v2)
  {
    if (result < 0)
      abort();
    v6 = result >> 3;
    v7 = (char *)operator new(result);
    v8 = 0;
    *a2 = v7;
    a2[2] = &v7[8 * v6];
    do
    {
      result = *(_QWORD *)(v2 + v8);
      *(_QWORD *)&v7[v8] = result;
      if (result)
        result = (**(uint64_t (***)(uint64_t))result)(result);
      v8 += 8;
    }
    while (v2 + v8 != v3);
    a2[1] = &v7[v8];
  }
  return result;
}

uint64_t webrtc::MediaStream::GetVideoTracks@<X0>(webrtc::MediaStream *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 11);
  v3 = *((_QWORD *)this + 12);
  result = v3 - v2;
  if (v3 != v2)
  {
    if (result < 0)
      abort();
    v6 = result >> 3;
    v7 = (char *)operator new(result);
    v8 = 0;
    *a2 = v7;
    a2[2] = &v7[8 * v6];
    do
    {
      result = *(_QWORD *)(v2 + v8);
      *(_QWORD *)&v7[v8] = result;
      if (result)
        result = (**(uint64_t (***)(uint64_t))result)(result);
      v8 += 8;
    }
    while (v2 + v8 != v3);
    a2[1] = &v7[v8];
  }
  return result;
}

uint64_t webrtc::MediaStreamInterface::AddTrack(uint64_t a1, void (***a2)(_QWORD))
{
  uint64_t v3;
  void (***v5)(_QWORD);

  v5 = a2;
  if (a2)
    (**a2)(a2);
  v3 = (*(uint64_t (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)a1 + 72))(a1, &v5);
  if (v5)
    (*v5)[1](v5);
  return v3;
}

{
  uint64_t v3;
  void (***v5)(_QWORD);

  v5 = a2;
  if (a2)
    (**a2)(a2);
  v3 = (*(uint64_t (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)a1 + 80))(a1, &v5);
  if (v5)
    (*v5)[1](v5);
  return v3;
}

uint64_t webrtc::MediaStreamInterface::RemoveTrack(uint64_t a1, void (***a2)(_QWORD))
{
  uint64_t v3;
  void (***v5)(_QWORD);

  v5 = a2;
  if (a2)
    (**a2)(a2);
  v3 = (*(uint64_t (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)a1 + 88))(a1, &v5);
  if (v5)
    (*v5)[1](v5);
  return v3;
}

{
  uint64_t v3;
  void (***v5)(_QWORD);

  v5 = a2;
  if (a2)
    (**a2)(a2);
  v3 = (*(uint64_t (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)a1 + 96))(a1, &v5);
  if (v5)
    (*v5)[1](v5);
  return v3;
}

_QWORD *webrtc::Notifier<webrtc::MediaStreamInterface>::RegisterObserver(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[2];
  a1 += 2;
  result[1] = a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void webrtc::Notifier<webrtc::MediaStreamInterface>::UnregisterObserver(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (uint64_t *)a1[3];
  if (v2 != a1 + 2)
  {
    while (1)
    {
      v3 = (_QWORD *)v2[1];
      if (v2[2] == a2)
        break;
      v2 = (uint64_t *)v2[1];
      if (v3 == a1 + 2)
        return;
    }
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)v2[1] = v4;
    --a1[4];
    operator delete(v2);
  }
}

_QWORD *`non-virtual thunk to'webrtc::Notifier<webrtc::MediaStreamInterface>::RegisterObserver(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[1];
  result[1] = ++a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void `non-virtual thunk to'webrtc::Notifier<webrtc::MediaStreamInterface>::UnregisterObserver(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (uint64_t *)a1[2];
  if (v2 != a1 + 1)
  {
    while (1)
    {
      v3 = (_QWORD *)v2[1];
      if (v2[2] == a2)
        break;
      v2 = (uint64_t *)v2[1];
      if (v3 == a1 + 1)
        return;
    }
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)v2[1] = v4;
    --a1[3];
    operator delete(v2);
  }
}

uint64_t webrtc::MediaStreamInterface::AddTrack()
{
  return 0;
}

{
  return 0;
}

uint64_t webrtc::MediaStreamInterface::RemoveTrack()
{
  return 0;
}

{
  return 0;
}

uint64_t rtc::RefCountedObject<webrtc::MediaStream>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 112);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::MediaStream>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 28;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::MediaStream>::~RefCountedObject(webrtc::MediaStream *a1)
{
  webrtc::MediaStream::~MediaStream(a1);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::MediaStream>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 112));
  return v1 == 1;
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::MediaStream>::~RefCountedObject(uint64_t a1)
{
  webrtc::MediaStream::~MediaStream((webrtc::MediaStream *)(a1 - 8));
}

{
  webrtc::MediaStream::~MediaStream((webrtc::MediaStream *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::MediaStream::~MediaStream(webrtc::MediaStream *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  webrtc::MediaStream *v12;
  uint64_t v13;
  uint64_t v14;
  webrtc::MediaStream *v15;

  *(_QWORD *)this = &unk_24C0B7020;
  *((_QWORD *)this + 1) = &unk_24C0B70C8;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    v3 = *((_QWORD *)this + 12);
    v4 = (void *)*((_QWORD *)this + 11);
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 8);
        v3 -= 8;
        v5 = v6;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 8);
  if (v7)
  {
    v8 = *((_QWORD *)this + 9);
    v9 = (void *)*((_QWORD *)this + 8);
    if (v8 != v7)
    {
      do
      {
        v11 = *(_QWORD *)(v8 - 8);
        v8 -= 8;
        v10 = v11;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v7;
    operator delete(v9);
  }
  if (*((char *)this + 63) < 0)
  {
    operator delete(*((void **)this + 5));
    *(_QWORD *)this = &unk_24C0B70F8;
    *((_QWORD *)this + 1) = &unk_24C0B71A0;
    if (!*((_QWORD *)this + 4))
      return;
  }
  else
  {
    *(_QWORD *)this = &unk_24C0B70F8;
    *((_QWORD *)this + 1) = &unk_24C0B71A0;
    if (!*((_QWORD *)this + 4))
      return;
  }
  v13 = *((_QWORD *)this + 2);
  v12 = (webrtc::MediaStream *)*((_QWORD *)this + 3);
  v14 = *(_QWORD *)v12;
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v13 + 8);
  **(_QWORD **)(v13 + 8) = v14;
  *((_QWORD *)this + 4) = 0;
  if (v12 != (webrtc::MediaStream *)((char *)this + 16))
  {
    do
    {
      v15 = (webrtc::MediaStream *)*((_QWORD *)v12 + 1);
      operator delete(v12);
      v12 = v15;
    }
    while (v15 != (webrtc::MediaStream *)((char *)this + 16));
  }
}

uint64_t webrtc::VideoTrackInterface::content_hint(webrtc::VideoTrackInterface *this)
{
  return 0;
}

uint64_t webrtc::AudioTrackInterface::GetSignalLevel(webrtc::AudioTrackInterface *this, int *a2)
{
  return 0;
}

void webrtc::AudioTrackInterface::GetAudioProcessor(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void webrtc::AudioSourceInterface::options(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 5) = 0;
}

_QWORD *webrtc::MediaStreamObserver::MediaStreamObserver(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = &off_24C0B74E8;
  a1[1] = a2;
  if (a2)
    (**(void (***)(uint64_t))a2)(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v12 = *(_QWORD *)(a3 + 24);
  if (v12)
  {
    if (v12 == a3)
    {
      a1[11] = a1 + 8;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
      v13 = *(_QWORD *)(a4 + 24);
      if (!v13)
        goto LABEL_12;
    }
    else
    {
      a1[11] = v12;
      *(_QWORD *)(a3 + 24) = 0;
      v13 = *(_QWORD *)(a4 + 24);
      if (!v13)
      {
LABEL_12:
        a1[15] = 0;
        v14 = *(_QWORD *)(a5 + 24);
        if (v14)
          goto LABEL_13;
LABEL_17:
        a1[19] = 0;
        v15 = *(_QWORD *)(a6 + 24);
        if (v15)
          goto LABEL_18;
        goto LABEL_21;
      }
    }
  }
  else
  {
    a1[11] = 0;
    v13 = *(_QWORD *)(a4 + 24);
    if (!v13)
      goto LABEL_12;
  }
  if (v13 != a4)
  {
    a1[15] = v13;
    *(_QWORD *)(a4 + 24) = 0;
    v14 = *(_QWORD *)(a5 + 24);
    if (v14)
      goto LABEL_13;
    goto LABEL_17;
  }
  a1[15] = a1 + 12;
  (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24));
  v14 = *(_QWORD *)(a5 + 24);
  if (!v14)
    goto LABEL_17;
LABEL_13:
  if (v14 == a5)
  {
    a1[19] = a1 + 16;
    (*(void (**)(_QWORD))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24));
    v15 = *(_QWORD *)(a6 + 24);
    if (v15)
      goto LABEL_18;
LABEL_21:
    a1[23] = 0;
    goto LABEL_23;
  }
  a1[19] = v14;
  *(_QWORD *)(a5 + 24) = 0;
  v15 = *(_QWORD *)(a6 + 24);
  if (!v15)
    goto LABEL_21;
LABEL_18:
  if (v15 == a6)
  {
    a1[23] = a1 + 20;
    (*(void (**)(_QWORD))(**(_QWORD **)(a6 + 24) + 24))(*(_QWORD *)(a6 + 24));
  }
  else
  {
    a1[23] = v15;
    *(_QWORD *)(a6 + 24) = 0;
  }
LABEL_23:
  (**(void (***)(uint64_t, _QWORD *))(a1[1] + 8))(a1[1] + 8, a1);
  return a1;
}

void webrtc::MediaStreamObserver::~MediaStreamObserver(webrtc::MediaStreamObserver *this)
{
  webrtc::MediaStreamObserver *v2;
  uint64_t v3;
  webrtc::MediaStreamObserver *v4;
  uint64_t v5;
  webrtc::MediaStreamObserver *v6;
  uint64_t v7;
  webrtc::MediaStreamObserver *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)this = &off_24C0B74E8;
  (*(void (**)(uint64_t, webrtc::MediaStreamObserver *))(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 8))(*((_QWORD *)this + 1) + 8, this);
  v2 = (webrtc::MediaStreamObserver *)*((_QWORD *)this + 23);
  if (v2 == (webrtc::MediaStreamObserver *)((char *)this + 160))
  {
    v3 = 4;
    v2 = (webrtc::MediaStreamObserver *)((char *)this + 160);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (webrtc::MediaStreamObserver *)*((_QWORD *)this + 19);
  if (v4 == (webrtc::MediaStreamObserver *)((char *)this + 128))
  {
    v5 = 4;
    v4 = (webrtc::MediaStreamObserver *)((char *)this + 128);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  v6 = (webrtc::MediaStreamObserver *)*((_QWORD *)this + 15);
  if (v6 == (webrtc::MediaStreamObserver *)((char *)this + 96))
  {
    v7 = 4;
    v6 = (webrtc::MediaStreamObserver *)((char *)this + 96);
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_16:
  v8 = (webrtc::MediaStreamObserver *)*((_QWORD *)this + 11);
  if (v8 == (webrtc::MediaStreamObserver *)((char *)this + 64))
  {
    v9 = 4;
    v8 = (webrtc::MediaStreamObserver *)((char *)this + 64);
  }
  else
  {
    if (!v8)
      goto LABEL_21;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_21:
  v10 = *((_QWORD *)this + 5);
  if (v10)
  {
    v11 = *((_QWORD *)this + 6);
    v12 = (void *)*((_QWORD *)this + 5);
    if (v11 != v10)
    {
      do
      {
        v14 = *(_QWORD *)(v11 - 8);
        v11 -= 8;
        v13 = v14;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      while (v11 != v10);
      v12 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v10;
    operator delete(v12);
  }
  v15 = *((_QWORD *)this + 2);
  if (v15)
  {
    v16 = *((_QWORD *)this + 3);
    v17 = (void *)*((_QWORD *)this + 2);
    if (v16 != v15)
    {
      do
      {
        v19 = *(_QWORD *)(v16 - 8);
        v16 -= 8;
        v18 = v19;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
      while (v16 != v15);
      v17 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v15;
    operator delete(v17);
  }
  v20 = *((_QWORD *)this + 1);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
}

{
  webrtc::MediaStreamObserver::~MediaStreamObserver(this);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::MediaStreamObserver::OnChanged(webrtc::MediaStreamObserver *this)
{
  void **v2;
  void **v3;
  void *v4;
  char *v5;
  char *v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  size_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *p_p;
  uint64_t v14;
  void **p_s1;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  char v21;
  _BOOL4 v22;
  void *v23;
  uint64_t v24;
  void **v25;
  void **v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned __int8 v32;
  size_t v33;
  uint64_t v34;
  int v35;
  void **v36;
  uint64_t v37;
  void **v38;
  int v39;
  int v40;
  int v41;
  int v42;
  char v43;
  _BOOL4 v44;
  void *v45;
  uint64_t v46;
  void **v47;
  void **v48;
  void *v49;
  void **v50;
  void **v51;
  int v52;
  int v53;
  unsigned __int8 v54;
  size_t v55;
  uint64_t v56;
  int v57;
  unsigned __int8 *v58;
  uint64_t v59;
  void **v60;
  int v61;
  int v62;
  int v63;
  int v64;
  char v65;
  _BOOL4 v66;
  void *v67;
  uint64_t v68;
  void **v69;
  void **v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unsigned __int8 v76;
  size_t v77;
  uint64_t v78;
  int v79;
  void **v80;
  uint64_t v81;
  void **v82;
  int v83;
  int v84;
  int v85;
  int v86;
  char v87;
  _BOOL4 v88;
  void *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  void (***v105)(_QWORD);
  _QWORD *v106;
  void (***v107)(_QWORD);
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  void (***v111)(_QWORD);
  _QWORD *v112;
  void (***v113)(_QWORD);
  uint64_t v114;
  uint64_t v115;
  void **v116;
  void **v117;
  int64_t v118;
  unint64_t v119;
  uint64_t v120;
  void (****v121)(void *);
  void (****v122)(void *);
  void *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  void **v128;
  uint64_t v129;
  void (***v130)(void *);
  _QWORD *v131;
  void (***v132)(void *);
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  void (***v136)(_QWORD);
  void **v137;
  void (***v138)(_QWORD);
  uint64_t v139;
  uint64_t v140;
  void **v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  void **v150;
  void **v151;
  void *v152;
  void **v153;
  void *v154;
  char *v155;
  void *__p;
  uint64_t v157;
  unsigned __int8 v158;
  void *__s1;
  size_t __n;
  unsigned __int8 v161;

  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 1) + 40))(&v154);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 1) + 48))(&v152);
  v2 = (void **)*((_QWORD *)this + 2);
  v151 = (void **)((char *)this + 16);
  v3 = (void **)*((_QWORD *)this + 3);
  while (v2 != v3)
  {
    v4 = *v2;
    if (*v2)
    {
      (**(void (***)(void *))v4)(*v2);
      v5 = (char *)v154;
      v6 = v155;
      (**(void (***)(void *))v4)(v4);
      if (v5 != v6)
        goto LABEL_15;
LABEL_9:
      v7 = 1;
      if (v4)
        goto LABEL_43;
      goto LABEL_44;
    }
    v5 = (char *)v154;
    v6 = v155;
    if (v154 == v155)
      goto LABEL_9;
    do
    {
LABEL_15:
      (*(void (**)(void **__return_ptr))(**(_QWORD **)v5 + 40))(&__s1);
      (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v4 + 40))(&__p, v4);
      v9 = v161;
      if ((v161 & 0x80u) == 0)
        v10 = v161;
      else
        v10 = __n;
      v11 = v158;
      v12 = (char)v158;
      if ((v158 & 0x80u) != 0)
        v11 = v157;
      if (v10 != v11)
      {
        v22 = 0;
        if ((char)v158 < 0)
          goto LABEL_40;
        goto LABEL_37;
      }
      if ((v158 & 0x80u) == 0)
        p_p = (unsigned __int8 *)&__p;
      else
        p_p = (unsigned __int8 *)__p;
      if ((char)v161 < 0)
      {
        v22 = memcmp(__s1, p_p, __n) == 0;
        goto LABEL_36;
      }
      if (v161)
      {
        v14 = v161 - 1;
        p_s1 = &__s1;
        do
        {
          v17 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          v16 = v17;
          v19 = *p_p++;
          v18 = v19;
          v20 = v14-- != 0;
          v21 = v20;
          v22 = v16 == v18;
        }
        while (v16 == v18 && (v21 & 1) != 0);
LABEL_36:
        if (v12 < 0)
          goto LABEL_40;
        goto LABEL_37;
      }
      v22 = 1;
      if ((char)v158 < 0)
      {
LABEL_40:
        operator delete(__p);
        if ((v161 & 0x80) == 0)
          goto LABEL_11;
        goto LABEL_41;
      }
LABEL_37:
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
LABEL_41:
      operator delete(__s1);
LABEL_11:
      v5 += 8;
      v8 = v5 == v6 || v22;
    }
    while (v8 != 1);
    v7 = !v22;
    if (v4)
    {
LABEL_43:
      (*(void (**)(void *))(*(_QWORD *)v4 + 8))(v4);
      (*(void (**)(void *))(*(_QWORD *)v4 + 8))(v4);
    }
LABEL_44:
    if (v7)
    {
      v23 = (void *)*((_QWORD *)this + 1);
      __s1 = *v2;
      __p = v23;
      v24 = *((_QWORD *)this + 15);
      if (!v24)
        goto LABEL_184;
      (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v24 + 48))(v24, &__s1, &__p);
    }
    ++v2;
  }
  v25 = (void **)v154;
  v26 = (void **)v155;
  if (v154 != v155)
  {
LABEL_51:
    v27 = *v25;
    if (*v25)
    {
      (**(void (***)(void *))v27)(*v25);
      v28 = *((_QWORD *)this + 2);
      v29 = *((_QWORD *)this + 3);
      (**(void (***)(void *))v27)(v27);
      if (v28 != v29)
        goto LABEL_61;
LABEL_55:
      v30 = 1;
      if (v27)
        goto LABEL_89;
      goto LABEL_90;
    }
    v28 = *((_QWORD *)this + 2);
    v29 = *((_QWORD *)this + 3);
    if (v28 == v29)
      goto LABEL_55;
    while (1)
    {
LABEL_61:
      (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v27 + 40))(&__s1, v27);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)v28 + 40))(&__p);
      v32 = v161;
      if ((v161 & 0x80u) == 0)
        v33 = v161;
      else
        v33 = __n;
      v34 = v158;
      v35 = (char)v158;
      if ((v158 & 0x80u) != 0)
        v34 = v157;
      if (v33 != v34)
      {
        v44 = 0;
        if (((char)v158 & 0x80000000) == 0)
          goto LABEL_83;
        goto LABEL_86;
      }
      v36 = (v158 & 0x80u) == 0 ? &__p : (void **)__p;
      if ((char)v161 < 0)
        break;
      if (v161)
      {
        v37 = v161 - 1;
        v38 = &__s1;
        do
        {
          v40 = *(unsigned __int8 *)v38;
          v38 = (void **)((char *)v38 + 1);
          v39 = v40;
          v42 = *(unsigned __int8 *)v36;
          v36 = (void **)((char *)v36 + 1);
          v41 = v42;
          v20 = v37-- != 0;
          v43 = v20;
          v44 = v39 == v41;
        }
        while (v39 == v41 && (v43 & 1) != 0);
LABEL_82:
        if ((v35 & 0x80000000) == 0)
          goto LABEL_83;
        goto LABEL_86;
      }
      v44 = 1;
      if (((char)v158 & 0x80000000) == 0)
      {
LABEL_83:
        if ((v32 & 0x80) != 0)
          goto LABEL_87;
        goto LABEL_57;
      }
LABEL_86:
      operator delete(__p);
      if ((v161 & 0x80) != 0)
LABEL_87:
        operator delete(__s1);
LABEL_57:
      v28 += 8;
      v31 = v28 == v29 || v44;
      if (v31 == 1)
      {
        v30 = !v44;
        if (v27)
        {
LABEL_89:
          (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
          (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
        }
LABEL_90:
        if (v30)
        {
          v45 = (void *)*((_QWORD *)this + 1);
          __s1 = *v25;
          __p = v45;
          v46 = *((_QWORD *)this + 11);
          if (!v46)
            goto LABEL_184;
          (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v46 + 48))(v46, &__s1, &__p);
        }
        if (++v25 == v26)
          goto LABEL_93;
        goto LABEL_51;
      }
    }
    v44 = memcmp(__s1, v36, __n) == 0;
    goto LABEL_82;
  }
LABEL_93:
  v47 = (void **)*((_QWORD *)this + 5);
  v150 = (void **)((char *)this + 40);
  v48 = (void **)*((_QWORD *)this + 6);
  if (v47 == v48)
  {
LABEL_139:
    v69 = (void **)v152;
    v70 = v153;
    if (v152 == v153)
      goto LABEL_185;
LABEL_143:
    v71 = *v69;
    if (*v69)
    {
      (**(void (***)(void *))v71)(*v69);
      v72 = *((_QWORD *)this + 5);
      v73 = *((_QWORD *)this + 6);
      (**(void (***)(void *))v71)(v71);
      if (v72 != v73)
        goto LABEL_153;
LABEL_147:
      v74 = 1;
      if (v71)
        goto LABEL_181;
      goto LABEL_182;
    }
    v72 = *((_QWORD *)this + 5);
    v73 = *((_QWORD *)this + 6);
    if (v72 == v73)
      goto LABEL_147;
    while (1)
    {
LABEL_153:
      (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v71 + 40))(&__s1, v71);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)v72 + 40))(&__p);
      v76 = v161;
      if ((v161 & 0x80u) == 0)
        v77 = v161;
      else
        v77 = __n;
      v78 = v158;
      v79 = (char)v158;
      if ((v158 & 0x80u) != 0)
        v78 = v157;
      if (v77 != v78)
      {
        v88 = 0;
        if (((char)v158 & 0x80000000) == 0)
          goto LABEL_175;
        goto LABEL_178;
      }
      v80 = (v158 & 0x80u) == 0 ? &__p : (void **)__p;
      if ((char)v161 < 0)
        break;
      if (v161)
      {
        v81 = v161 - 1;
        v82 = &__s1;
        do
        {
          v84 = *(unsigned __int8 *)v82;
          v82 = (void **)((char *)v82 + 1);
          v83 = v84;
          v86 = *(unsigned __int8 *)v80;
          v80 = (void **)((char *)v80 + 1);
          v85 = v86;
          v20 = v81-- != 0;
          v87 = v20;
          v88 = v83 == v85;
        }
        while (v83 == v85 && (v87 & 1) != 0);
LABEL_174:
        if ((v79 & 0x80000000) == 0)
          goto LABEL_175;
        goto LABEL_178;
      }
      v88 = 1;
      if (((char)v158 & 0x80000000) == 0)
      {
LABEL_175:
        if ((v76 & 0x80) != 0)
          goto LABEL_179;
        goto LABEL_149;
      }
LABEL_178:
      operator delete(__p);
      if ((v161 & 0x80) != 0)
LABEL_179:
        operator delete(__s1);
LABEL_149:
      v72 += 8;
      v75 = v72 == v73 || v88;
      if (v75 == 1)
      {
        v74 = !v88;
        if (v71)
        {
LABEL_181:
          (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
          (*(void (**)(void *))(*(_QWORD *)v71 + 8))(v71);
        }
LABEL_182:
        if (v74)
        {
          v89 = (void *)*((_QWORD *)this + 1);
          __s1 = *v69;
          __p = v89;
          v90 = *((_QWORD *)this + 19);
          if (!v90)
            goto LABEL_184;
          (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v90 + 48))(v90, &__s1, &__p);
        }
        if (++v69 == v70)
          goto LABEL_185;
        goto LABEL_143;
      }
    }
    v88 = memcmp(__s1, v80, __n) == 0;
    goto LABEL_174;
  }
  while (2)
  {
    v49 = *v47;
    if (*v47)
    {
      (**(void (***)(void *))v49)(*v47);
      v50 = (void **)v152;
      v51 = v153;
      (**(void (***)(void *))v49)(v49);
      if (v50 != v51)
        goto LABEL_107;
LABEL_101:
      v52 = 1;
      if (v49)
        goto LABEL_135;
      goto LABEL_136;
    }
    v50 = (void **)v152;
    v51 = v153;
    if (v152 == v153)
      goto LABEL_101;
    do
    {
LABEL_107:
      (*(void (**)(void **__return_ptr))(*(_QWORD *)*v50 + 40))(&__s1);
      (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v49 + 40))(&__p, v49);
      v54 = v161;
      if ((v161 & 0x80u) == 0)
        v55 = v161;
      else
        v55 = __n;
      v56 = v158;
      v57 = (char)v158;
      if ((v158 & 0x80u) != 0)
        v56 = v157;
      if (v55 != v56)
      {
        v66 = 0;
        if ((char)v158 < 0)
          goto LABEL_132;
        goto LABEL_129;
      }
      if ((v158 & 0x80u) == 0)
        v58 = (unsigned __int8 *)&__p;
      else
        v58 = (unsigned __int8 *)__p;
      if ((char)v161 < 0)
      {
        v66 = memcmp(__s1, v58, __n) == 0;
        goto LABEL_128;
      }
      if (v161)
      {
        v59 = v161 - 1;
        v60 = &__s1;
        do
        {
          v62 = *(unsigned __int8 *)v60;
          v60 = (void **)((char *)v60 + 1);
          v61 = v62;
          v64 = *v58++;
          v63 = v64;
          v20 = v59-- != 0;
          v65 = v20;
          v66 = v61 == v63;
        }
        while (v61 == v63 && (v65 & 1) != 0);
LABEL_128:
        if (v57 < 0)
          goto LABEL_132;
        goto LABEL_129;
      }
      v66 = 1;
      if ((char)v158 < 0)
      {
LABEL_132:
        operator delete(__p);
        if ((v161 & 0x80) == 0)
          goto LABEL_103;
        goto LABEL_133;
      }
LABEL_129:
      if ((v54 & 0x80) == 0)
        goto LABEL_103;
LABEL_133:
      operator delete(__s1);
LABEL_103:
      ++v50;
      v53 = v50 == v51 || v66;
    }
    while (v53 != 1);
    v52 = !v66;
    if (v49)
    {
LABEL_135:
      (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
      (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
    }
LABEL_136:
    if (!v52)
      goto LABEL_96;
    v67 = (void *)*((_QWORD *)this + 1);
    __s1 = *v47;
    __p = v67;
    v68 = *((_QWORD *)this + 23);
    if (v68)
    {
      (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v68 + 48))(v68, &__s1, &__p);
LABEL_96:
      if (++v47 == v48)
        goto LABEL_139;
      continue;
    }
    break;
  }
LABEL_184:
  std::__throw_bad_function_call[abi:sn180100]();
LABEL_185:
  if (v151 != &v154)
  {
    v92 = (char *)v154;
    v91 = v155;
    v93 = v155 - (_BYTE *)v154;
    v94 = (v155 - (_BYTE *)v154) >> 3;
    v95 = *((_QWORD *)this + 4);
    v96 = (_QWORD *)*((_QWORD *)this + 2);
    if (v94 > (v95 - (uint64_t)v96) >> 3)
    {
      if (v96)
      {
        v97 = (_QWORD *)*((_QWORD *)this + 3);
        v98 = (void *)*((_QWORD *)this + 2);
        if (v97 != v96)
        {
          do
          {
            v100 = *--v97;
            v99 = v100;
            if (v100)
              (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
          }
          while (v97 != v96);
          v98 = *v151;
        }
        *((_QWORD *)this + 3) = v96;
        operator delete(v98);
        v95 = 0;
        *v151 = 0;
        *((_QWORD *)this + 3) = 0;
        *((_QWORD *)this + 4) = 0;
      }
      if ((v93 & 0x8000000000000000) == 0)
      {
        v108 = v95 >> 2;
        if (v95 >> 2 <= v94)
          v108 = v94;
        v20 = (unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8;
        v109 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v20)
          v109 = v108;
        if (!(v109 >> 61))
        {
          v110 = v109;
          v106 = operator new(8 * v109);
          *((_QWORD *)this + 2) = v106;
          *((_QWORD *)this + 3) = v106;
          *((_QWORD *)this + 4) = &v106[v110];
          while (v92 != v91)
          {
            v111 = *(void (****)(_QWORD))v92;
            *v106 = *(_QWORD *)v92;
            if (v111)
              (**v111)(v111);
            v92 += 8;
            ++v106;
          }
          goto LABEL_234;
        }
      }
LABEL_303:
      abort();
    }
    v101 = (_QWORD *)*((_QWORD *)this + 3);
    v102 = v101 - v96;
    if (v102 >= v94)
    {
      if (v154 == v155)
      {
        v106 = (_QWORD *)*((_QWORD *)this + 2);
      }
      else
      {
        v106 = (_QWORD *)*((_QWORD *)this + 2);
        do
        {
          v107 = *(void (****)(_QWORD))v92;
          if (*(_QWORD *)v92)
            (**v107)(*(_QWORD *)v92);
          if (*v96)
            (*(void (**)(_QWORD))(*(_QWORD *)*v96 + 8))(*v96);
          *v96++ = v107;
          v92 += 8;
          ++v106;
        }
        while (v92 != v91);
        v101 = (_QWORD *)*((_QWORD *)this + 3);
      }
      while (v101 != v106)
      {
        v115 = *--v101;
        v114 = v115;
        if (v115)
          (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
      }
    }
    else
    {
      v103 = (char *)v154 + 8 * v102;
      if (v101 != v96)
      {
        v104 = 8 * v102;
        do
        {
          v105 = *(void (****)(_QWORD))v92;
          if (*(_QWORD *)v92)
            (**v105)(*(_QWORD *)v92);
          if (*v96)
            (*(void (**)(_QWORD))(*(_QWORD *)*v96 + 8))(*v96);
          *v96++ = v105;
          v92 += 8;
          v104 -= 8;
        }
        while (v104);
        v96 = (_QWORD *)*((_QWORD *)this + 3);
      }
      v106 = v96;
      if (v103 != v91)
      {
        v106 = v96;
        v112 = v96;
        while (v112)
        {
          v113 = *(void (****)(_QWORD))v103;
          *v112 = *(_QWORD *)v103;
          if (v113)
            (**v113)(v113);
          v103 += 8;
          ++v112;
          ++v106;
          if (v103 == v91)
            goto LABEL_234;
        }
        goto LABEL_302;
      }
    }
LABEL_234:
    *((_QWORD *)this + 3) = v106;
  }
  v116 = (void **)v152;
  if (v150 != &v152)
  {
    v117 = v153;
    v118 = (char *)v153 - (_BYTE *)v152;
    v119 = ((char *)v153 - (_BYTE *)v152) >> 3;
    v120 = *((_QWORD *)this + 7);
    v121 = (void (****)(void *))*((_QWORD *)this + 5);
    if (v119 <= (v120 - (uint64_t)v121) >> 3)
    {
      v126 = (_QWORD *)*((_QWORD *)this + 6);
      v127 = (void (****)(void *))v126 - v121;
      if (v127 >= v119)
      {
        if (v152 == v153)
        {
          v131 = (_QWORD *)*((_QWORD *)this + 5);
        }
        else
        {
          v131 = (_QWORD *)*((_QWORD *)this + 5);
          do
          {
            v132 = (void (***)(void *))*v116;
            if (*v116)
              (**v132)(*v116);
            if (*v121)
              (**v121)[1](*v121);
            *v121++ = v132;
            ++v116;
            ++v131;
          }
          while (v116 != v117);
          v126 = (_QWORD *)*((_QWORD *)this + 6);
        }
        while (v126 != v131)
        {
          v140 = *--v126;
          v139 = v140;
          if (v140)
            (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
        }
      }
      else
      {
        v128 = (void **)((char *)v152 + 8 * v127);
        if (v126 != v121)
        {
          v129 = 8 * v127;
          do
          {
            v130 = (void (***)(void *))*v116;
            if (*v116)
              (**v130)(*v116);
            if (*v121)
              (**v121)[1](*v121);
            *v121++ = v130;
            ++v116;
            v129 -= 8;
          }
          while (v129);
          v121 = (void (****)(void *))*((_QWORD *)this + 6);
        }
        v131 = v121;
        if (v128 != v117)
        {
          v131 = v121;
          v137 = (void **)v121;
          while (v137)
          {
            v138 = (void (***)(_QWORD))*v128;
            *v137 = *v128;
            if (v138)
              (**v138)(v138);
            ++v128;
            ++v137;
            ++v131;
            if (v128 == v117)
              goto LABEL_284;
          }
LABEL_302:
          __break(1u);
          goto LABEL_303;
        }
      }
    }
    else
    {
      if (v121)
      {
        v122 = (void (****)(void *))*((_QWORD *)this + 6);
        v123 = (void *)*((_QWORD *)this + 5);
        if (v122 != v121)
        {
          do
          {
            v125 = (uint64_t)*--v122;
            v124 = v125;
            if (v125)
              (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
          }
          while (v122 != v121);
          v123 = *v150;
        }
        *((_QWORD *)this + 6) = v121;
        operator delete(v123);
        v120 = 0;
        *v150 = 0;
        v150[1] = 0;
        v150[2] = 0;
      }
      if (v118 < 0)
        goto LABEL_303;
      v133 = v120 >> 2;
      if (v120 >> 2 <= v119)
        v133 = v119;
      v20 = (unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8;
      v134 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v20)
        v134 = v133;
      if (v134 >> 61)
        goto LABEL_303;
      v135 = v134;
      v131 = operator new(8 * v134);
      *((_QWORD *)this + 5) = v131;
      *((_QWORD *)this + 6) = v131;
      *((_QWORD *)this + 7) = &v131[v135];
      while (v116 != v117)
      {
        v136 = (void (***)(_QWORD))*v116;
        *v131 = *v116;
        if (v136)
          (**v136)(v136);
        ++v116;
        ++v131;
      }
    }
LABEL_284:
    *((_QWORD *)this + 6) = v131;
    v116 = (void **)v152;
  }
  if (v116)
  {
    v141 = v153;
    v142 = v116;
    if (v153 != v116)
    {
      do
      {
        v144 = (uint64_t)*--v141;
        v143 = v144;
        if (v144)
          (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
      }
      while (v141 != v116);
      v142 = v152;
    }
    v153 = v116;
    operator delete(v142);
  }
  v145 = (char *)v154;
  if (v154)
  {
    v146 = v155;
    v147 = v154;
    if (v155 != v154)
    {
      do
      {
        v149 = *((_QWORD *)v146 - 1);
        v146 -= 8;
        v148 = v149;
        if (v149)
          (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
      }
      while (v146 != v145);
      v147 = v154;
    }
    v155 = v145;
    operator delete(v147);
  }
}

rtc::webrtc_checks_impl *cricket::MediaTypeToString@<X0>(rtc::webrtc_checks_impl *result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 5;
      if (a2 <= "audio" && a2 + 5 > "audio")
        goto LABEL_12;
      strcpy(a2, "audio");
      return result;
    case 1:
      a2[23] = 5;
      if (a2 <= "video" && a2 + 5 > "video")
        goto LABEL_12;
      strcpy(a2, "video");
      return result;
    case 2:
      a2[23] = 4;
      if (a2 <= "data" && a2 + 4 > "data")
      {
LABEL_12:
        __break(1u);
LABEL_13:
        rtc::webrtc_checks_impl::UnreachableCodeReached(result);
      }
      strcpy(a2, "data");
      return result;
    case 3:
      a2[23] = 0;
      *a2 = 0;
      return result;
    default:
      goto LABEL_13;
  }
}

void webrtc::Merge::~Merge(webrtc::Merge *this)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)this = &off_24C0B7510;
  v2 = (void *)*((_QWORD *)this + 47);
  if (v2)
  {
    *((_QWORD *)this + 48) = v2;
    operator delete(v2);
  }
  *((_QWORD *)this + 42) = &off_24C0AE108;
  v4 = (_QWORD *)*((_QWORD *)this + 43);
  v3 = (_QWORD *)*((_QWORD *)this + 44);
  if (v4 == v3)
  {
    if (!v4)
      return;
    goto LABEL_5;
  }
  do
  {
    if (*v4)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      v3 = (_QWORD *)*((_QWORD *)this + 44);
    }
    ++v4;
  }
  while (v4 != v3);
  v4 = (_QWORD *)*((_QWORD *)this + 43);
  if (v4)
  {
LABEL_5:
    *((_QWORD *)this + 44) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)this = &off_24C0B7510;
  v2 = (void *)*((_QWORD *)this + 47);
  if (v2)
  {
    *((_QWORD *)this + 48) = v2;
    operator delete(v2);
  }
  *((_QWORD *)this + 42) = &off_24C0AE108;
  v4 = (_QWORD *)*((_QWORD *)this + 43);
  v3 = (_QWORD *)*((_QWORD *)this + 44);
  if (v4 == v3)
  {
    if (!v4)
      goto LABEL_11;
  }
  else
  {
    do
    {
      if (*v4)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
        v3 = (_QWORD *)*((_QWORD *)this + 44);
      }
      ++v4;
    }
    while (v4 != v3);
    v4 = (_QWORD *)*((_QWORD *)this + 43);
    if (!v4)
LABEL_11:
      JUMPOUT(0x20BD0ADECLL);
  }
  *((_QWORD *)this + 44) = v4;
  operator delete(v4);
  goto LABEL_11;
}

unint64_t webrtc::Merge::Process(webrtc::Merge *this, __int16 *a2, unint64_t a3, webrtc::AudioMultiVector *a4)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  int16x8_t *v38;
  unint64_t v39;
  uint64_t v40;
  int16x8_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  char v56;
  int v57;
  char v58;
  int v59;
  signed int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  __int16 v65;
  __int16 v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  BOOL v73;
  unint64_t v74;
  uint64_t v75;
  __int16 v76;
  int v77;
  int16x8_t *v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  __int16 v89;
  __int16 v90;
  __int16 v91;
  __int16 v92;
  __int16 v93;
  __int16 v94;
  __int16 v95;
  __int16 v96;
  __int16 v97;
  __int16 v98;
  __int16 v99;
  __int16 v100;
  unint64_t v101;
  __int16 v102;
  __int16 v103;
  __int16 v104;
  __int16 v105;
  __int16 v106;
  __int16 v107;
  uint64_t v108;
  int v109;
  int16x8_t *v110;
  uint64_t v111;
  int16x8_t v112;
  int16x8_t v113;
  uint64_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  __int16 v129;
  __int16 v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v138;
  unint64_t v139;
  unsigned int v140;
  char v141;
  uint64_t v142;
  char *v143;
  char *v144;
  int16x4_t *v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  void **v149;
  unint64_t v150;
  char *v151;
  unint64_t v152;
  int32x4_t v153;
  int16x4_t v154;
  int16x4_t v155;
  int16x4_t v156;
  int16x4_t v157;
  int16x4_t v158;
  int16x4_t v159;
  int32x4_t v160;
  int16x4_t v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  __int16 *v166;
  unint64_t v167;
  unint64_t v168;
  __int16 *v169;
  unint64_t v170;
  __int16 *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  int v183;
  unint64_t v184;
  size_t v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  int16x8_t *v190;
  unint64_t v191;
  void *v192;
  __int16 *v193;
  unint64_t v194;
  unsigned int v195;
  size_t v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  __int16 *v206;
  __int16 *v207;
  int v208;
  int v209;
  int v210;
  uint64_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x4_t *v218;
  int16x4_t *v219;
  int16x8_t *v220;
  unint64_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  _QWORD *v228;
  _QWORD *v229;
  int16x4_t *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  int16x8_t *v235;
  uint64_t v236;
  unint64_t v237;
  _WORD *v238;
  int v239;
  __int16 v240;
  __int16 v241;
  __int16 v242;
  __int16 v243;
  __int16 v244;
  __int16 v245;
  __int16 v246;
  __int16 v247;
  __int16 v248;
  __int16 v249;
  __int16 v250;
  __int16 v251;
  __int16 v252;
  __int16 v253;
  __int16 v254;
  __int16 v255;
  __int16 v256;
  __int16 v257;
  int v258;
  unint64_t i;
  __int16 v260;
  void **v261;
  _WORD *v262;
  unint64_t v263;
  int16x8_t *v265;
  unint64_t v266;
  unint64_t v267;
  void (**v268)(webrtc::AudioMultiVector *__hidden);
  _QWORD *v269;
  _QWORD *v270;
  _BYTE v271[10];
  void *__p[2];
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  uint64_t v286;

  v286 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v7 = (_QWORD *)*((_QWORD *)this + 6);
  v8 = (*(uint64_t (**)(_QWORD *))(*v7 + 120))(v7) - v7[5];
  (*(void (**)(_QWORD))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5));
  if (v8 >= 0x4EC)
  {
    (*(void (**)(_QWORD, unint64_t, _QWORD))(**((_QWORD **)this + 6) + 152))(*((_QWORD *)this + 6), v8 - 1260, *(_QWORD *)(*((_QWORD *)this + 6) + 40));
    v8 = 1260;
  }
  webrtc::AudioMultiVector::AudioMultiVector((webrtc::AudioMultiVector *)__p, *((_QWORD *)this + 2));
  (*(void (**)(_QWORD, void **))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5), __p);
  if ((void *)v273.i64[0] == __p[1])
    goto LABEL_375;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__p[1] + 144))(*(_QWORD *)__p[1]);
  if (*((_QWORD *)this + 46))
  {
    v10 = 0;
    do
    {
      v11 = *((_QWORD *)this + 43);
      if (v10 >= (*((_QWORD *)this + 44) - v11) >> 3)
        goto LABEL_375;
      (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 8 * v10) + 16))(*(_QWORD *)(v11 + 8 * v10));
      ++v10;
    }
    while (v10 < *((_QWORD *)this + 46));
  }
  v237 = v8;
  v12 = (_QWORD *)*((_QWORD *)this + 6);
  v13 = v12[5];
  v14 = (*(uint64_t (**)(_QWORD *))(*v12 + 120))(v12);
  if (v14 - 1 >= v13)
    v15 = v13;
  else
    v15 = v14 - 1;
  v16 = (*(uint64_t (**)(_QWORD *))(*v12 + 120))(v12);
  v17 = *((_QWORD *)this + 46);
  if (v17 && v17 == v12[4])
  {
    v18 = 0;
    v19 = v16 - v15;
    do
    {
      v20 = *((_QWORD *)this + 43);
      if (v18 >= (*((_QWORD *)this + 44) - v20) >> 3)
        goto LABEL_375;
      v21 = v12[1];
      if (v18 >= (v12[2] - v21) >> 3)
        goto LABEL_375;
      (*(void (**)(_QWORD, _QWORD, unint64_t, unint64_t))(**(_QWORD **)(v20 + 8 * v18) + 64))(*(_QWORD *)(v20 + 8 * v18), *(_QWORD *)(v21 + 8 * v18), v19, v15);
      ++v18;
    }
    while (v18 < *((_QWORD *)this + 46));
  }
  v22 = (_QWORD *)*((_QWORD *)this + 43);
  if (*((_QWORD **)this + 44) == v22)
    goto LABEL_375;
  v263 = 202 * *((int *)this + 6);
  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v22 + 144))(*v22) < v263)
  {
    while (1)
    {
LABEL_20:
      v23 = (_QWORD *)*((_QWORD *)this + 43);
      if (*((_QWORD **)this + 44) == v23)
        goto LABEL_375;
      if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v23 + 144))(*v23) >= v263)
        break;
      v24 = *((_QWORD *)this + 46);
      if (v24)
        v25 = v24 == v274.i64[0];
      else
        v25 = 0;
      if (v25)
      {
        v26 = 0;
        while (1)
        {
          v27 = *((_QWORD *)this + 43);
          if (v26 >= (*((_QWORD *)this + 44) - v27) >> 3
            || v26 >= (uint64_t)(v273.i64[0] - (unint64_t)__p[1]) >> 3)
          {
            goto LABEL_375;
          }
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v27 + 8 * v26) + 56))(*(_QWORD *)(v27 + 8 * v26), *((_QWORD *)__p[1] + v26));
          if (++v26 >= *((_QWORD *)this + 46))
            goto LABEL_20;
        }
      }
    }
    v29 = (_QWORD *)*((_QWORD *)this + 43);
    if (*((_QWORD **)this + 44) == v29)
      goto LABEL_375;
    v30 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v29 + 144))(*v29);
    if (*((_QWORD *)this + 46))
    {
      v31 = 0;
      v32 = v30 - v263;
      while (1)
      {
        v33 = *((_QWORD *)this + 43);
        if (v31 >= (*((_QWORD *)this + 44) - v33) >> 3)
          break;
        (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v33 + 8 * v31) + 88))(*(_QWORD *)(v33 + 8 * v31), v32);
        if (++v31 >= *((_QWORD *)this + 46))
          goto LABEL_38;
      }
LABEL_375:
      __break(1u);
    }
  }
LABEL_38:
  __p[0] = &off_24C0AE108;
  v35 = __p[1];
  v34 = v273.i64[0];
  if (__p[1] == (void *)v273.i64[0])
  {
    v36 = v237;
    if (__p[1])
    {
LABEL_44:
      v273.i64[0] = (uint64_t)v35;
      operator delete(v35);
    }
  }
  else
  {
    v36 = v237;
    do
    {
      if (*v35)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v35 + 8))(*v35);
        v34 = v273.i64[0];
      }
      ++v35;
    }
    while (v35 != (_QWORD *)v34);
    v35 = __p[1];
    if (__p[1])
      goto LABEL_44;
  }
  webrtc::AudioMultiVector::AudioMultiVector((webrtc::AudioMultiVector *)&v268, *((_QWORD *)this + 2));
  webrtc::AudioMultiVector::PushBackInterleaved(&v268, (uint64_t)a2, a3);
  if (v270 == v269)
    goto LABEL_375;
  v37 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v269 + 144))(*v269);
  v38 = (int16x8_t *)operator new[]();
  v39 = v263;
  v40 = operator new[]();
  v41 = (int16x8_t *)v40;
  if (*((_QWORD *)this + 2))
  {
    v42 = 0;
    v43 = 0;
    v238 = (_WORD *)((char *)this + 256);
    v261 = (void **)((char *)this + 376);
    v262 = (_WORD *)((char *)this + 56);
    v234 = -v9;
    v235 = v38;
    v236 = v9;
    v233 = v37 - v9;
    v231 = (int16x4_t *)&v38[1];
    v232 = v40 + 16;
    v265 = (int16x8_t *)v40;
    v267 = v37;
    while (1)
    {
      if (v42 >= v270 - v269)
        goto LABEL_375;
      (*(void (**)(_QWORD, unint64_t, _QWORD, int16x8_t *))(*(_QWORD *)v269[v42] + 32))(v269[v42], v37, 0, v38);
      v44 = *((_QWORD *)this + 43);
      if (v42 >= (*((_QWORD *)this + 44) - v44) >> 3)
        goto LABEL_375;
      v266 = v42;
      (*(void (**)(_QWORD, unint64_t, _QWORD, int16x8_t *))(**(_QWORD **)(v44 + 8 * v42) + 32))(*(_QWORD *)(v44 + 8 * v42), v39, 0, v41);
      if ((uint64_t)*((int *)this + 6) << 6 < v37)
        v37 = (uint64_t)*((int *)this + 6) << 6;
      v45 = WebRtcSpl_MaxAbsValueW16C(v41, v37);
      v46 = v45 * v45 / (0x7FFFFFFF / (int)v37);
      v47 = 32 - __clz(v46 ^ (v46 >> 31));
      if (v46)
        v48 = v47;
      else
        v48 = 0;
      WebRtcSpl_DotProductWithScale((uint64_t)v41, (uint64_t)v41, v37, v48);
      v50 = v49;
      v51 = WebRtcSpl_MaxAbsValueW16C(v38, v37);
      v52 = v51 * v51 / (0x7FFFFFFF / (int)v37);
      v53 = 32 - __clz(v52 ^ (v52 >> 31));
      if (v52)
        v54 = v53;
      else
        v54 = 0;
      WebRtcSpl_DotProductWithScale((uint64_t)v38, (uint64_t)v38, v37, v54);
      v56 = v54 - v48;
      if (v54 < v48)
        v56 = 0;
      v57 = v50 >> v56;
      v58 = v48 - v54;
      if (v48 < v54)
        v58 = 0;
      v59 = v55 >> v58;
      if (v59 <= v57)
      {
        v65 = 0x4000;
      }
      else
      {
        v60 = __clz(v59 ^ (v59 >> 31)) - 1;
        if (!v59)
          v60 = 0;
        v61 = v59 << (v60 - 17);
        v62 = v59 >> (17 - v60);
        if (v60 > 16)
          v62 = v61;
        v63 = v57 << (v60 - 3);
        v64 = v57 >> (3 - v60);
        if (v60 > 2)
          v64 = v63;
        v65 = WebRtcSpl_SqrtFloor((v64 / v62) << 14);
      }
      if (v65 >= 0x4000)
        v66 = 0x4000;
      else
        v66 = v65;
      v41 = v265;
      v67 = v266;
      v68 = v267;
      if (v266)
      {
        v69 = v43;
        v70 = v43 + v267;
        v71 = (char *)*((_QWORD *)this + 47);
        v72 = (uint64_t)(*((_QWORD *)this + 48) - (_QWORD)v71) >> 1;
        v73 = v43 + v267 >= v72;
        v74 = v43 + v267 - v72;
        if (v43 + v267 > v72)
          goto LABEL_76;
        goto LABEL_321;
      }
      v77 = *((_DWORD *)this + 2);
      v260 = v66;
      if (v77 == 8000)
      {
        v78 = (int16x8_t *)&webrtc::DspHelper::kDownsample8kHzTbl;
        v79 = 3;
      }
      else
      {
        if (v77 == 32000)
        {
          v78 = (int16x8_t *)&webrtc::DspHelper::kDownsample32kHzTbl;
        }
        else
        {
          if (v77 == 16000)
          {
            v78 = (int16x8_t *)&webrtc::DspHelper::kDownsample16kHzTbl;
            v79 = 5;
            goto LABEL_85;
          }
          v78 = (int16x8_t *)&webrtc::DspHelper::kDownsample48kHzTbl;
        }
        v79 = 7;
      }
LABEL_85:
      v80 = v77 / 4000;
      v81 = v77 / 100;
      v82 = v79 - 1;
      WebRtcSpl_DownsampleFastC((uint64_t)v265->i64 + 2 * v79 - 2, v39 - (v79 - 1), v262, 100, v78, v79, v77 / 4000, 0);
      if (v267 <= v81)
      {
        if (v267 >= v82)
          v83 = v267 - v82;
        else
          v83 = 0;
        v84 = v83 / v80;
        if (v83 >= v80)
          WebRtcSpl_DownsampleFastC((uint64_t)v38->i64 + 2 * v82, v83, v238, v83 / v80, v78, v79, v80, 0);
        bzero((char *)this + 2 * v84 + 256, 80 - 2 * v84);
      }
      else
      {
        WebRtcSpl_DownsampleFastC((uint64_t)v38->i64 + 2 * v82, v267 - v82, v238, 40, v78, v79, v80, 0);
      }
      LOWORD(v85) = *((_WORD *)this + 128);
      v86 = *((_WORD *)this + 129);
      v87 = *((_WORD *)this + 130);
      v88 = *((_WORD *)this + 131);
      v89 = *((_WORD *)this + 132);
      v90 = *((_WORD *)this + 133);
      v91 = *((_WORD *)this + 134);
      v92 = *((_WORD *)this + 135);
      v93 = *((_WORD *)this + 136);
      v94 = *((_WORD *)this + 137);
      v95 = *((_WORD *)this + 138);
      v96 = *((_WORD *)this + 139);
      v97 = *((_WORD *)this + 140);
      v98 = *((_WORD *)this + 141);
      v99 = *((_WORD *)this + 142);
      v100 = *((_WORD *)this + 143);
      v241 = *((_WORD *)this + 144);
      v243 = *((_WORD *)this + 145);
      v101 = *(_QWORD *)(*((_QWORD *)this + 5) + 72) / (unint64_t)(2 * *((int *)this + 6));
      v245 = *((_WORD *)this + 146);
      v247 = *((_WORD *)this + 147);
      v102 = *((_WORD *)this + 148);
      v103 = *((_WORD *)this + 149);
      v104 = *((_WORD *)this + 150);
      v105 = *((_WORD *)this + 151);
      v106 = *((_WORD *)this + 152);
      v252 = *((_WORD *)this + 153);
      v107 = *((_WORD *)this + 154);
      v255 = *((_WORD *)this + 155);
      if (v101 + 1 < 0x3C)
        v108 = v101 + 1;
      else
        v108 = 60;
      v109 = 1 - v108;
      if ((int)v108 - 1 >= 0)
        v109 = v108 - 1;
      v110 = (int16x8_t *)&v262[(int)((v108 - 1) & (((int)v108 - 1) >> 31))];
      v111 = (v109 + 40);
      v112 = *v110;
      v113 = v110[1];
      v240 = *((_WORD *)this + 156);
      v242 = *((_WORD *)this + 157);
      v244 = *((_WORD *)this + 158);
      v246 = *((_WORD *)this + 159);
      v248 = *((_WORD *)this + 160);
      v249 = *((_WORD *)this + 161);
      v250 = *((_WORD *)this + 162);
      v251 = *((_WORD *)this + 163);
      v253 = *((_WORD *)this + 164);
      v254 = *((_WORD *)this + 165);
      v114 = v111 & 0x7FFFFFF0;
      v256 = *((_WORD *)this + 166);
      v257 = *((_WORD *)this + 167);
      if (v114 == 16)
      {
        v115 = *v110;
        v116 = v110[1];
      }
      else
      {
        v117 = v110[2];
        v118 = v110[3];
        v119 = vminq_s16(v117, v112);
        v120 = vminq_s16(v118, v113);
        v115 = vmaxq_s16(v117, v112);
        v116 = vmaxq_s16(v118, v113);
        if (v114 == 32)
        {
          v112 = v119;
          v113 = v120;
        }
        else
        {
          v121 = v110[4];
          v122 = v110[5];
          v112 = vminq_s16(v121, v119);
          v113 = vminq_s16(v122, v120);
          v115 = vmaxq_s16(v121, v115);
          v116 = vmaxq_s16(v122, v116);
          if (v114 != 48)
          {
            v123 = v110[6];
            v124 = v110[7];
            v112 = vminq_s16(v123, v112);
            v113 = vminq_s16(v124, v113);
            v115 = vmaxq_s16(v123, v115);
            v116 = vmaxq_s16(v124, v116);
            if (v114 != 64)
            {
              v125 = v110[8];
              v126 = v110[9];
              v112 = vminq_s16(v125, v112);
              v113 = vminq_s16(v126, v113);
              v115 = vmaxq_s16(v125, v115);
              v116 = vmaxq_s16(v126, v116);
              if (v114 != 80)
              {
                v127 = v110[10];
                v128 = v110[11];
                v112 = vminq_s16(v127, v112);
                v113 = vminq_s16(v128, v113);
                v115 = vmaxq_s16(v127, v115);
                v116 = vmaxq_s16(v128, v116);
              }
            }
          }
        }
      }
      v129 = vminvq_s16(vminq_s16(v112, v113));
      v130 = vmaxvq_s16(vmaxq_s16(v115, v116));
      for (i = v108; v114 != v111; ++v114)
      {
        v131 = v110->i16[v114];
        if (v131 < v129)
          v129 = v110->i16[v114];
        if (v131 > v130)
          v130 = v110->i16[v114];
      }
      v85 = (__int16)v85;
      if (v86 >= (__int16)v85)
        v132 = (__int16)v85;
      else
        v132 = v86;
      if (v86 > (__int16)v85)
        v85 = v86;
      v239 = v85;
      v133 = v87;
      if (v87 >= v132)
        v133 = v132;
      if (v88 < v133)
        v133 = v88;
      if (v89 < v133)
        v133 = v89;
      if (v90 < v133)
        v133 = v90;
      if (v91 < v133)
        v133 = v91;
      if (v92 < v133)
        v133 = v92;
      if (v93 < v133)
        v133 = v93;
      if (v94 < v133)
        v133 = v94;
      if (v95 < v133)
        v133 = v95;
      if (v96 < v133)
        v133 = v96;
      if (v97 < v133)
        v133 = v97;
      if (v98 < v133)
        v133 = v98;
      if (v99 < v133)
        v133 = v99;
      if (v100 < v133)
        v133 = v100;
      if (v241 < v133)
        v133 = v241;
      if (v243 < v133)
        v133 = v243;
      if (v245 < v133)
        v133 = v245;
      if (v247 < v133)
        v133 = v247;
      if (v102 < v133)
        v133 = v102;
      if (v103 < v133)
        v133 = v103;
      if (v104 < v133)
        v133 = v104;
      if (v105 < v133)
        v133 = v105;
      if (v106 < v133)
        v133 = v106;
      if (v252 < v133)
        v133 = v252;
      if (v107 < v133)
        v133 = v107;
      if (v255 < v133)
        v133 = v255;
      if (v240 < v133)
        v133 = v240;
      if (v242 < v133)
        v133 = v242;
      if (v244 < v133)
        v133 = v244;
      if (v246 < v133)
        v133 = v246;
      if (v248 < v133)
        v133 = v248;
      if (v249 < v133)
        v133 = v249;
      if (v250 < v133)
        v133 = v250;
      if (v251 < v133)
        v133 = v251;
      if (v253 < v133)
        v133 = v253;
      if (v254 < v133)
        v133 = v254;
      v134 = v257;
      if (v256 < v133)
        v133 = v256;
      if (v257 < v133)
        v133 = v257;
      v258 = v133;
      v135 = v87;
      if (v87 <= v239)
        v135 = v239;
      if (v88 > v135)
        v135 = v88;
      if (v89 > v135)
        v135 = v89;
      if (v90 > v135)
        v135 = v90;
      if (v91 > v135)
        v135 = v91;
      if (v92 > v135)
        v135 = v92;
      if (v93 > v135)
        v135 = v93;
      if (v94 > v135)
        v135 = v94;
      if (v95 > v135)
        v135 = v95;
      if (v96 > v135)
        v135 = v96;
      if (v97 > v135)
        v135 = v97;
      if (v98 > v135)
        v135 = v98;
      if (v99 > v135)
        v135 = v99;
      if (v100 > v135)
        v135 = v100;
      if (v241 > v135)
        v135 = v241;
      if (v243 > v135)
        v135 = v243;
      if (v245 > v135)
        v135 = v245;
      if (v247 > v135)
        v135 = v247;
      if (v102 > v135)
        v135 = v102;
      if (v103 > v135)
        v135 = v103;
      if (v104 > v135)
        v135 = v104;
      if (v105 > v135)
        v135 = v105;
      if (v106 > v135)
        v135 = v106;
      if (v252 > v135)
        v135 = v252;
      if (v107 > v135)
        v135 = v107;
      if (v255 > v135)
        v135 = v255;
      if (v240 > v135)
        v135 = v240;
      if (v242 > v135)
        v135 = v242;
      if (v244 > v135)
        v135 = v244;
      if (v246 > v135)
        v135 = v246;
      if (v248 > v135)
        v135 = v248;
      if (v249 > v135)
        v135 = v249;
      if (v250 > v135)
        v135 = v250;
      if (v251 > v135)
        v135 = v251;
      if (v253 > v135)
        v135 = v253;
      if (v254 > v135)
        v135 = v254;
      if (v256 > v135)
        v135 = v256;
      if (v134 > v135)
        v135 = v134;
      if (v258 < -v135 || v258 == v135)
        v135 = v258;
      if (v129 >= -v130 && v129 != v130)
        v129 = v130;
      v138 = v129 * v135;
      if (v138 < 0)
        v138 = -v138;
      v139 = (40 * (unint64_t)v138) >> 31;
      v25 = (_DWORD)v139 == 0;
      v140 = 32 - __clz(v139);
      if (v25)
        v141 = 0;
      else
        v141 = v140;
      WebRtcSpl_CrossCorrelationC((int *)__p, (uint64_t)v238, (uint64_t)v262, 0x28uLL, i, v141, 1);
      v142 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 48))(*((_QWORD *)this + 5));
      v143 = (char *)operator new[]();
      v144 = &v143[2 * v142];
      bzero(v143, 2 * (2 * v142 + 58));
      v145 = (int16x4_t *)(v144 - 2);
      v146 = WebRtcSpl_MaxAbsValueW32C((int32x4_t *)__p, i);
      v147 = __clz(v146 ^ (v146 >> 31));
      v148 = (18 - v147) & ~((int)(18 - v147) >> 31);
      if (!v146)
        v148 = 17;
      v36 = v237;
      if (i)
      {
        if (i < 8)
        {
          v149 = __p;
          v150 = i;
          v151 = v144 - 2;
          goto LABEL_298;
        }
        v152 = i & 0x38;
        v153 = vnegq_s32(vdupq_n_s32(v148));
        v154 = vqmovn_s32(vshlq_s32(v273, v153));
        *v145 = vqmovn_s32(vshlq_s32(*(int32x4_t *)__p, v153));
        *(int16x4_t *)(v144 + 6) = v154;
        if (v152 != 8)
        {
          v155 = vqmovn_s32(vshlq_s32(v275, v153));
          *(int16x4_t *)(v144 + 14) = vqmovn_s32(vshlq_s32(v274, v153));
          *(int16x4_t *)(v144 + 22) = v155;
          if (v152 != 16)
          {
            v156 = vqmovn_s32(vshlq_s32(v277, v153));
            *(int16x4_t *)(v144 + 30) = vqmovn_s32(vshlq_s32(v276, v153));
            *(int16x4_t *)(v144 + 38) = v156;
            if (v152 != 24)
            {
              v157 = vqmovn_s32(vshlq_s32(v279, v153));
              *(int16x4_t *)(v144 + 46) = vqmovn_s32(vshlq_s32(v278, v153));
              *(int16x4_t *)(v144 + 54) = v157;
              if (v152 != 32)
              {
                v158 = vqmovn_s32(vshlq_s32(v281, v153));
                *(int16x4_t *)(v144 + 62) = vqmovn_s32(vshlq_s32(v280, v153));
                *(int16x4_t *)(v144 + 70) = v158;
                if (v152 != 40)
                {
                  v159 = vqmovn_s32(vshlq_s32(v283, v153));
                  *(int16x4_t *)(v144 + 78) = vqmovn_s32(vshlq_s32(v282, v153));
                  *(int16x4_t *)(v144 + 86) = v159;
                  if (v152 != 48)
                  {
                    v160 = vshlq_s32(v284, v153);
                    v161 = vqmovn_s32(vshlq_s32(v285, v153));
                    *(int16x4_t *)(v144 + 94) = vqmovn_s32(v160);
                    *(int16x4_t *)(v144 + 102) = v161;
                  }
                }
              }
            }
          }
        }
        if (i != v152)
        {
          v150 = i & 7;
          v151 = (char *)v145 + 2 * v152;
          v149 = (void **)((char *)__p + 4 * v152);
          do
          {
LABEL_298:
            v162 = *(_DWORD *)v149;
            v149 = (void **)((char *)v149 + 4);
            v163 = v162 >> v148;
            if (v162 >> v148 <= -32768)
              v163 = -32768;
            if (v163 >= 0x7FFF)
              LOWORD(v163) = 0x7FFF;
            *(_WORD *)v151 = v163;
            v151 += 2;
            --v150;
          }
          while (v150);
        }
      }
      v164 = *((_QWORD *)this + 4);
      v165 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 48))(*((_QWORD *)this + 5));
      if (v165 + v164 <= v237)
        v167 = v237;
      else
        v167 = v165 + v164;
      v168 = v167 - v267;
      if (v167 < v267)
        v168 = 0;
      v169 = (__int16 *)*((int *)this + 6);
      v170 = v168 / (2 * (uint64_t)v169);
      if (v142 - v170 + 59 >= i)
        v171 = (__int16 *)i;
      else
        v171 = (__int16 *)(v142 - v170 + 59);
      *(_QWORD *)&v271[2] = 0;
      webrtc::DspHelper::PeakDetection((webrtc::DspHelper *)((char *)v145 + 2 * v170), v171, 1, v169, (__int16 *)&v271[2], (unint64_t *)v271, v166);
      v172 = 0;
      v173 = *(_QWORD *)&v271[2];
      if (v267 >= v167)
        v174 = v167;
      else
        v174 = v267;
      v175 = v267 + *(_QWORD *)&v271[2] + v167 - v174;
      do
      {
        do
        {
          v176 = v175 + v172;
          v177 = *((_QWORD *)this + 4);
          v178 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 48))(*((_QWORD *)this + 5));
          v172 += v236;
        }
        while (v176 < v237);
      }
      while (v176 < v178 + v177);
      MEMORY[0x20BD0ADD4](v143, 0x1000C80BDFB0063);
      v38 = v235;
      v68 = v267;
      if (v267 >= v167)
        v179 = v167;
      else
        v179 = v267;
      v69 = v234 + v173 + v167 - v179 + v172;
      v70 = v233 + v173 + v167 - v179 + v172;
      v39 = v263;
      v41 = v265;
      v67 = 0;
      v66 = v260;
      v71 = (char *)*((_QWORD *)this + 47);
      v180 = (uint64_t)(*((_QWORD *)this + 48) - (_QWORD)v71) >> 1;
      v73 = v70 >= v180;
      v74 = v70 - v180;
      if (v70 > v180)
      {
LABEL_76:
        v75 = v69;
        v76 = v66;
        std::vector<short>::__append((uint64_t)v261, v74);
        v69 = v75;
        v66 = v76;
        v68 = v267;
        v71 = (char *)*v261;
        goto LABEL_323;
      }
LABEL_321:
      if (!v73)
        *((_QWORD *)this + 48) = &v71[2 * v70];
LABEL_323:
      v181 = *((int *)this + 6);
      if (v39 - v69 >= 60 * v181)
        v182 = 60 * v181;
      else
        v182 = v39 - v69;
      v183 = *(__int16 *)(*(_QWORD *)(*((_QWORD *)this + 5) + 128) + (v67 << 7));
      if (v68 >= v182)
        v184 = v182;
      else
        v184 = v68;
      if (v183 <= v66)
        v183 = v66;
      v185 = 2 * v69;
      if (v183 >= 0x4000)
      {
        v43 = v69;
        memmove(&v71[2 * v69 + 2 * v184], (char *)v38 + 2 * v184, 2 * (v68 - v184));
        v192 = *v261;
      }
      else
      {
        v186 = (__int16)v183;
        v187 = (__int16)v183 << 6;
        v188 = 4194 / (int)v181;
        if (v188 <= (int)((0x100000 - v187) / v68))
          v188 = (0x100000 - v187) / v68;
        v43 = v69;
        if (v184)
        {
          v189 = v187 | 0x20;
          v190 = v38;
          v191 = v184;
          do
          {
            v190->i16[0] = (v186 * v190->i16[0] + 0x2000) >> 14;
            v190 = (int16x8_t *)((char *)v190 + 2);
            v189 = (v189 + v188) & ~((int)(v189 + v188) >> 31);
            v186 = v189 >> 6;
            if (v189 >> 6 >= 0x4000)
              v186 = 0x4000;
            --v191;
          }
          while (v191);
        }
        v192 = v71;
        if (v68 > v182)
        {
          v193 = &v38->i16[v184];
          v194 = v267 - v184;
          v195 = ((unsigned __int16)v186 << 6) | 0x20;
          v196 = v185 + 2 * v184;
          do
          {
            v197 = *v193++;
            *(_WORD *)&v71[v196] = ((unsigned __int16)v186 * v197 + 0x2000) >> 14;
            v195 = (v195 + v188) & ~((int)(v195 + v188) >> 31);
            v186 = v195 >> 6;
            if (v195 >> 6 >= 0x4000)
              LOWORD(v186) = 0x4000;
            v196 += 2;
            --v194;
          }
          while (v194);
          v192 = v71;
        }
      }
      memmove(v192, v41, v185);
      if (v184)
      {
        v198 = 0x4000 / (v184 + 1);
        if (v184 < 0x10)
        {
          v199 = 0;
          v200 = 0x4000;
LABEL_349:
          v201 = 0x4000 / (v184 + 1);
LABEL_350:
          v202 = v184 - v199;
          v203 = v199;
          v204 = 2 * v199 + 2 * v43;
          v205 = &v71[v204];
          v206 = &v38->i16[v203];
          v207 = (__int16 *)((char *)v41->i16 + v204);
          do
          {
            v200 -= v198;
            v209 = *v207++;
            v208 = v209;
            v210 = *v206++;
            *(_WORD *)v205 = (v210 * (__int16)v201 + v208 * (__int16)v200 + 0x2000) >> 14;
            v205 += 2;
            LODWORD(v201) = v201 + v198;
            --v202;
          }
          while (v202);
          goto LABEL_352;
        }
        v199 = 0;
        v200 = 0x4000;
        if ((unint64_t)(v71 - (char *)v41) < 0x20)
          goto LABEL_349;
        v201 = 0x4000 / (v184 + 1);
        if ((unint64_t)(&v71[v185] - (char *)v38) < 0x20)
          goto LABEL_350;
        v199 = v184 & 0xFFFFFFFFFFFFFFF0;
        LODWORD(v201) = (v184 & 0xFFFFFFF0 | 1) * v198;
        v200 = (v184 & 0xFFFFFFF0) * -(int)v198 + 0x4000;
        v212 = vdupq_n_s16(v198);
        v213 = vdupq_n_s16(8 * (int)v198);
        v214.i64[0] = 0x4000400040004000;
        v214.i64[1] = 0x4000400040004000;
        v215 = vmlaq_s16(v214, vdupq_n_s16(-(int)v198), (int16x8_t)xmmword_208F08E10);
        v216 = vdupq_n_s16(-8 * (int)v198);
        v217 = vmulq_s16(v212, (int16x8_t)xmmword_208F0D900);
        v218 = v231;
        v219 = (int16x4_t *)(v232 + v185);
        v220 = (int16x8_t *)&v71[v185 + 16];
        v221 = v184 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v222 = vaddq_s16(v217, v213);
          v223 = vaddq_s16(v215, v216);
          v224 = vsubq_s16(v215, v212);
          v225 = vsubq_s16(v223, v212);
          v226 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(v219[-2], *(int16x4_t *)v224.i8), v218[-2], *(int16x4_t *)v217.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(*(int16x8_t *)v219[-2].i8, v224), *(int16x8_t *)v218[-2].i8, v217), 0xEuLL);
          v227 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*v219, *(int16x4_t *)v225.i8), *v218, *(int16x4_t *)v222.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(*(int16x8_t *)v219->i8, v225), *(int16x8_t *)v218->i8, v222), 0xEuLL);
          v220[-1] = v226;
          *v220 = v227;
          v217 = vaddq_s16(v222, v213);
          v215 = vaddq_s16(v223, v216);
          v219 += 4;
          v220 += 2;
          v218 += 4;
          v221 -= 16;
        }
        while (v221);
        if (v184 != v199)
          goto LABEL_350;
      }
LABEL_352:
      if (!v266)
        (*(void (**)(webrtc::AudioMultiVector *, unint64_t))(*(_QWORD *)a4 + 128))(a4, v70);
      v211 = *((_QWORD *)a4 + 1);
      if (v266 >= (*((_QWORD *)a4 + 2) - v211) >> 3)
        goto LABEL_375;
      (*(void (**)(_QWORD, _QWORD, unint64_t, _QWORD))(**(_QWORD **)(v211 + 8 * v266) + 128))(*(_QWORD *)(v211 + 8 * v266), *((_QWORD *)this + 47), v70, 0);
      v42 = v266 + 1;
      v37 = v267;
      if (v266 + 1 >= *((_QWORD *)this + 2))
        goto LABEL_366;
    }
  }
  v70 = 0;
LABEL_366:
  (*(void (**)(_QWORD, webrtc::AudioMultiVector *, unint64_t, _QWORD))(**((_QWORD **)this + 6) + 160))(*((_QWORD *)this + 6), a4, v36, *(_QWORD *)(*((_QWORD *)this + 6) + 40));
  (*(void (**)(webrtc::AudioMultiVector *, unint64_t))(*(_QWORD *)a4 + 56))(a4, v36);
  MEMORY[0x20BD0ADD4](v41, 0x1000C80BDFB0063);
  MEMORY[0x20BD0ADD4](v38, 0x1000C80BDFB0063);
  v268 = &off_24C0AE108;
  v229 = v269;
  v228 = v270;
  if (v269 == v270)
  {
    v28 = v70 - v36;
    if (v269)
    {
LABEL_368:
      v270 = v229;
      operator delete(v229);
    }
  }
  else
  {
    do
    {
      if (*v229)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v229 + 8))(*v229);
        v228 = v270;
      }
      ++v229;
    }
    while (v229 != v228);
    v229 = v269;
    v28 = v70 - v36;
    if (v269)
      goto LABEL_368;
  }
  return v28;
}

uint64_t webrtc::Merge::RequiredFutureSamples(webrtc::Merge *this)
{
  return *((_QWORD *)this + 2) * (*((_DWORD *)this + 2) / 100);
}

BOOL rtc::IsFips180DigestAlgorithm(uint64_t a1, uint64_t a2)
{
  if (a2 == 7)
  {
    if (*(_DWORD *)a1 == 761358451 && *(_DWORD *)(a1 + 3) == 875704877)
      return 1;
    if (*(_DWORD *)a1 == 761358451 && *(_DWORD *)(a1 + 3) == 909455917)
      return 1;
    return *(_DWORD *)a1 == 761358451 && *(_DWORD *)(a1 + 3) == 876098349
        || *(_DWORD *)a1 == 761358451 && *(_DWORD *)(a1 + 3) == 842085677;
  }
  else
  {
    return a2 == 5 && *(_DWORD *)a1 == 761358451 && *(_BYTE *)(a1 + 4) == 49;
  }
}

uint64_t rtc::ComputeHmac(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int8x16_t *v15;
  int8x16_t *v16;
  uint64_t v17;
  int8x16_t *v18;
  int8x16_t *v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) > 0x20)
    return 0;
  v15 = (int8x16_t *)operator new[]();
  v16 = v15;
  if (a3 < 0x41)
  {
    memcpy(v15, a2, a3);
    v17 = a3;
  }
  else
  {
    (*(void (**)(uint64_t, const void *, size_t))(*(_QWORD *)a1 + 24))(a1, a2, a3);
    (*(void (**)(uint64_t, int8x16_t *, uint64_t))(*(_QWORD *)a1 + 32))(a1, v16, 64);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    a3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  }
  bzero(&v16->i8[v17], 64 - a3);
  v18 = (int8x16_t *)operator new[]();
  v19 = (int8x16_t *)operator new[]();
  v20 = *v16;
  v21 = v16[1];
  v22.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
  v22.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
  *v18 = veorq_s8(*v16, v22);
  v18[1] = veorq_s8(v21, v22);
  v23.i64[0] = 0x3636363636363636;
  v23.i64[1] = 0x3636363636363636;
  *v19 = veorq_s8(v20, v23);
  v19[1] = veorq_s8(v21, v23);
  v24 = v16[2];
  v25 = v16[3];
  v18[2] = veorq_s8(v24, v22);
  v18[3] = veorq_s8(v25, v22);
  v19[2] = veorq_s8(v24, v23);
  v19[3] = veorq_s8(v25, v23);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v26 = operator new[]();
  (*(void (**)(uint64_t, int8x16_t *, uint64_t))(*(_QWORD *)a1 + 24))(a1, v19, 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a4, a5);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v26, v27);
  (*(void (**)(uint64_t, int8x16_t *, uint64_t))(*(_QWORD *)a1 + 24))(a1, v18, 64);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v26, v28);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a6, a7);
  MEMORY[0x20BD0ADD4](v26, 0x1000C8077774924);
  MEMORY[0x20BD0ADD4](v19, 0x1000C8077774924);
  MEMORY[0x20BD0ADD4](v18, 0x1000C8077774924);
  MEMORY[0x20BD0ADD4](v16, 0x1000C8077774924);
  return v29;
}

uint64_t webrtc::metrics::HistogramAdd(uint64_t a1, int a2)
{
  int v3;
  int v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t **v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;

  v3 = *(_DWORD *)(a1 + 68);
  if (v3 >= a2)
    v3 = a2;
  if (v3 <= *(_DWORD *)(a1 + 64) - 1)
    v4 = *(_DWORD *)(a1 + 64) - 1;
  else
    v4 = v3;
  pthread_mutex_lock((pthread_mutex_t *)a1);
  v5 = *(uint64_t **)(a1 + 120);
  v6 = (uint64_t **)(a1 + 120);
  if (*(_QWORD *)(a1 + 128) != 300)
    goto LABEL_17;
  if (v5)
  {
    v7 = a1 + 120;
    v8 = *(_QWORD *)(a1 + 120);
    do
    {
      v9 = *(_DWORD *)(v8 + 28);
      v10 = v9 < v4;
      if (v9 >= v4)
        v11 = (uint64_t *)v8;
      else
        v11 = (uint64_t *)(v8 + 8);
      if (!v10)
        v7 = v8;
      v8 = *v11;
    }
    while (*v11);
    if ((uint64_t **)v7 != v6 && v4 >= *(_DWORD *)(v7 + 28))
    {
LABEL_17:
      v12 = (uint64_t **)(a1 + 120);
      if (v5)
      {
        while (1)
        {
          while (1)
          {
            v12 = (uint64_t **)v5;
            v13 = *((_DWORD *)v5 + 7);
            if (v4 >= v13)
              break;
            v5 = *v12;
            v6 = v12;
            if (!*v12)
              goto LABEL_24;
          }
          if (v13 >= v4)
            break;
          v5 = v12[1];
          if (!v5)
          {
            v6 = v12 + 1;
            goto LABEL_24;
          }
        }
      }
      else
      {
LABEL_24:
        v14 = (uint64_t *)v12;
        v12 = (uint64_t **)operator new(0x28uLL);
        *((_DWORD *)v12 + 7) = v4;
        *((_DWORD *)v12 + 8) = 0;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = v14;
        *v6 = (uint64_t *)v12;
        v15 = **(_QWORD **)(a1 + 112);
        v16 = (uint64_t *)v12;
        if (v15)
        {
          *(_QWORD *)(a1 + 112) = v15;
          v16 = *v6;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v16);
        ++*(_QWORD *)(a1 + 128);
      }
      ++*((_DWORD *)v12 + 8);
    }
  }
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

uint64_t *std::map<int,int>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,int>,std::__tree_node<std::__value_type<int,int>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  int *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = std::__tree<int>::__find_equal<int>(v7, v8, v18, &v17, v6 + 7);
      if (*result)
      {
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v11 + 28) = *(_QWORD *)(v6 + 7);
        v12 = v18[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v12;
        *v10 = (uint64_t)v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v14 = (uint64_t *)*v10;
        }
        else
        {
          v14 = v11;
        }
        result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v14);
        ++v7[2];
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (int *)*((_QWORD *)v6 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t WebRtcSpl_MaxAbsValueW16C(int16x8_t *a1, unint64_t a2)
{
  int v2;
  unint64_t v3;
  int16x8_t *v5;
  int32x4_t v6;
  unint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  unint64_t v13;
  __int16 *v14;
  int v15;
  int v16;

  if (!a2)
    return 0;
  if (a2 < 0x10)
  {
    v2 = 0;
    v3 = 0;
    goto LABEL_8;
  }
  v3 = a2 & 0xFFFFFFFFFFFFFFF0;
  v5 = a1 + 1;
  v6 = 0uLL;
  v7 = a2 & 0xFFFFFFFFFFFFFFF0;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v11 = (uint16x8_t)vabsq_s16(v5[-1]);
    v12 = (uint16x8_t)vabsq_s16(*v5);
    v8 = vmaxq_s32(v8, (int32x4_t)vmovl_high_u16(v11));
    v6 = vmaxq_s32(v6, (int32x4_t)vmovl_u16(*(uint16x4_t *)v11.i8));
    v10 = vmaxq_s32(v10, (int32x4_t)vmovl_high_u16(v12));
    v9 = vmaxq_s32(v9, (int32x4_t)vmovl_u16(*(uint16x4_t *)v12.i8));
    v5 += 2;
    v7 -= 16;
  }
  while (v7);
  v2 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(v6, v9), vmaxq_s32(v8, v10)));
  if (v3 != a2)
  {
LABEL_8:
    v13 = a2 - v3;
    v14 = &a1->i16[v3];
    do
    {
      v16 = *v14++;
      v15 = v16;
      if (v16 < 0)
        v15 = -v15;
      if (v2 <= v15)
        v2 = v15;
      --v13;
    }
    while (v13);
  }
  if (v2 >= 0x7FFF)
    return 0x7FFF;
  else
    return (__int16)v2;
}

uint64_t WebRtcSpl_MaxAbsValueW32C(int32x4_t *a1, unint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  int32x4_t *v5;
  uint32x4_t v6;
  int32x4_t v7;
  unint64_t v8;
  uint32x4_t v9;
  unint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;

  if (!a2)
    return 0;
  if (a2 < 8)
  {
    v2 = 0;
    v3 = 0;
    goto LABEL_8;
  }
  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 = a1 + 1;
  v6 = 0uLL;
  v7.i64[0] = 0x8000000080000000;
  v7.i64[1] = 0x8000000080000000;
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  v9 = 0uLL;
  do
  {
    v6 = vmaxq_u32((uint32x4_t)vbslq_s8((int8x16_t)vceqq_s32(v5[-1], v7), (int8x16_t)v7, (int8x16_t)vabsq_s32(v5[-1])), v6);
    v9 = vmaxq_u32((uint32x4_t)vbslq_s8((int8x16_t)vceqq_s32(*v5, v7), (int8x16_t)v7, (int8x16_t)vabsq_s32(*v5)), v9);
    v5 += 2;
    v8 -= 8;
  }
  while (v8);
  v3 = vmaxvq_u32(vmaxq_u32(v6, v9));
  if (v2 != a2)
  {
LABEL_8:
    v10 = a2 - v2;
    v11 = &a1->i32[v2];
    do
    {
      v13 = *v11++;
      v12 = v13;
      if (v13 >= 0)
        v14 = v12;
      else
        v14 = -v12;
      if (v12 == 0x80000000)
        v15 = 0x80000000;
      else
        v15 = v14;
      if (v15 > v3)
        v3 = v15;
      --v10;
    }
    while (v10);
  }
  if (v3 >= 0x7FFFFFFF)
    return 0x7FFFFFFFLL;
  else
    return v3;
}

void webrtc::GetExperimentalMinVideoBitrate(uint64_t a1, int a2)
{
  void (***v3)(webrtc::FieldTrialParameterInterface *__hidden);
  unint64_t v4;
  _BOOL4 v5;
  int v6;
  int v7;
  const char *v9;
  _BOOL4 v10;
  void (***v11)(webrtc::FieldTrialParameterInterface *__hidden);
  unint64_t v12;
  _BOOL4 v13;
  int v14;
  int v15;
  uint64_t v17;
  char *p_p;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unint64_t v27;
  uint64_t v28;
  void *__p;
  uint64_t v30;
  unsigned __int8 v31;
  void (**v32)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36[2];
  char v37;
  char v38;
  char v39;
  char v40;
  void (**v41)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45[2];
  char v46;
  char v47;
  char v48;
  char v49;
  void (**v50)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54[2];
  char v55;
  char v56;
  char v57;
  char v58;
  void (**v59)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63[2];
  char v64;
  char v65;
  char v66;
  char v67;
  void (**v68)(webrtc::FieldTrialParameterInterface *__hidden);
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72[2];
  char v73;
  char v74;
  uint64_t v75;
  char v76;
  void (**v77)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v78;
  void *v79;
  uint64_t v80;
  void *v81[2];
  char v82;
  __int16 v83;
  _QWORD v84[7];

  v84[6] = *MEMORY[0x24BDAC8D0];
  if (a2 != 1)
    goto LABEL_33;
  (*(void (**)(void (***__return_ptr)(webrtc::FieldTrialParameterInterface *__hidden), uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(&v68, a1, "WebRTC-VP8-Forced-Fallback-Encoder-v2", 37);
  if (SHIBYTE(v70) < 0)
  {
    v4 = v69;
    if ((v69 & 0x8000000000000000) != 0)
      goto LABEL_104;
    v3 = (void (***)(webrtc::FieldTrialParameterInterface *__hidden))v68;
    if (v69)
    {
      if (!v68)
        goto LABEL_104;
    }
  }
  else
  {
    v3 = &v68;
    v4 = HIBYTE(v70);
  }
  if (v4 >= 7)
  {
    v6 = *(_DWORD *)v3;
    v7 = *(_DWORD *)((char *)v3 + 3);
    v5 = v6 == 1650552389 && v7 == 1684368482;
    if ((v70 & 0x8000000000000000) != 0)
    {
LABEL_19:
      operator delete(v68);
      if (!v5)
        goto LABEL_33;
      goto LABEL_20;
    }
  }
  else
  {
    v5 = 0;
    if ((v70 & 0x8000000000000000) != 0)
      goto LABEL_19;
  }
  if (!v5)
    goto LABEL_33;
LABEL_20:
  (*(void (**)(void (***__return_ptr)(webrtc::FieldTrialParameterInterface *__hidden), uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(&v68, a1, "WebRTC-VP8-Forced-Fallback-Encoder-v2", 37);
  if (SHIBYTE(v70) < 0)
  {
    if (!v69)
    {
      v10 = 0;
      goto LABEL_32;
    }
    LODWORD(v59) = 0;
    LODWORD(v50) = 0;
    LODWORD(v41) = 0;
    v9 = (const char *)v68;
  }
  else
  {
    if (!HIBYTE(v70))
      goto LABEL_33;
    LODWORD(v59) = 0;
    LODWORD(v50) = 0;
    v9 = (const char *)&v68;
    LODWORD(v41) = 0;
  }
  if (sscanf(v9, "Enabled-%d,%d,%d", &v59, &v50, &v41) == 3)
  {
    v10 = (int)v41 >= 1;
    if ((SHIBYTE(v70) & 0x80000000) == 0)
      goto LABEL_27;
  }
  else
  {
    v10 = 0;
    if ((SHIBYTE(v70) & 0x80000000) == 0)
    {
LABEL_27:
      if (v10)
        return;
      goto LABEL_33;
    }
  }
LABEL_32:
  operator delete(v68);
  if (v10)
    return;
LABEL_33:
  (*(void (**)(void (***__return_ptr)(webrtc::FieldTrialParameterInterface *__hidden), uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(&v68, a1, "WebRTC-Video-MinVideoBitrate", 28);
  if (SHIBYTE(v70) < 0)
  {
    v12 = v69;
    if ((v69 & 0x8000000000000000) != 0)
      goto LABEL_104;
    v11 = (void (***)(webrtc::FieldTrialParameterInterface *__hidden))v68;
    if (v69)
    {
      if (!v68)
        goto LABEL_104;
    }
  }
  else
  {
    v11 = &v68;
    v12 = HIBYTE(v70);
  }
  if (v12 >= 7)
  {
    v14 = *(_DWORD *)v11;
    v15 = *(_DWORD *)((char *)v11 + 3);
    v13 = v14 == 1650552389 && v15 == 1684368482;
    if ((v70 & 0x8000000000000000) != 0)
    {
LABEL_50:
      operator delete(v68);
      if (!v13)
        return;
      goto LABEL_51;
    }
  }
  else
  {
    v13 = 0;
    if ((v70 & 0x8000000000000000) != 0)
      goto LABEL_50;
  }
  if (!v13)
    return;
LABEL_51:
  v77 = off_24C0B4170;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v82 = 7;
  if (v81 <= (void **)"Enabled" && (char *)v81 + 7 > "Enabled")
    goto LABEL_104;
  strcpy((char *)v81, "Enabled");
  v83 = 0;
  v77 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B41A0;
  v68 = off_24C0B4170;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v73 = 2;
  if (v72 <= (void **)"br" && (char *)v72 + 2 > "br")
    goto LABEL_104;
  strcpy((char *)v72, "br");
  v74 = 0;
  v68 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4200;
  LOBYTE(v75) = 0;
  v76 = 0;
  v59 = off_24C0B4170;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v64 = 6;
  if (v63 <= (void **)"vp8_br" && (char *)v63 + 6 > "vp8_br")
    goto LABEL_104;
  strcpy((char *)v63, "vp8_br");
  v65 = 0;
  v59 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4200;
  v66 = 0;
  v67 = 0;
  v50 = off_24C0B4170;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v55 = 6;
  if (v54 <= (void **)"vp9_br" && (char *)v54 + 6 > "vp9_br")
    goto LABEL_104;
  strcpy((char *)v54, "vp9_br");
  v56 = 0;
  v50 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4200;
  v57 = 0;
  v58 = 0;
  v41 = off_24C0B4170;
  v42 = 0;
  v46 = 6;
  v43 = 0;
  v44 = 0;
  if (v45 <= (void **)"av1_br" && (char *)v45 + 6 > "av1_br")
    goto LABEL_104;
  strcpy((char *)v45, "av1_br");
  v47 = 0;
  v41 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4200;
  v48 = 0;
  v49 = 0;
  v32 = off_24C0B4170;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v37 = 7;
  if (v36 <= (void **)"h264_br" && (char *)v36 + 7 > "h264_br")
    goto LABEL_104;
  strcpy((char *)v36, "h264_br");
  v38 = 0;
  v32 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4200;
  v39 = 0;
  v40 = 0;
  v84[0] = &v77;
  v84[1] = &v68;
  v84[2] = &v59;
  v84[3] = &v50;
  v84[4] = &v41;
  v84[5] = &v32;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(&__p, a1, "WebRTC-Video-MinVideoBitrate", 28);
  if (((char)v31 & 0x80000000) == 0)
  {
    v17 = v31;
    p_p = (char *)&__p;
    goto LABEL_68;
  }
  v17 = v30;
  if (v30 < 0 || (p_p = (char *)__p, v30) && !__p)
LABEL_104:
    __break(1u);
LABEL_68:
  webrtc::ParseFieldTrial(v84, 6, p_p, v17);
  if ((char)v31 < 0)
  {
    operator delete(__p);
    if (v76)
    {
LABEL_70:
      if ((v67 || v58 || v49 || v40) && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/min_video_bitrate_experiment.cc");
      if (!v76)
      {
        std::__throw_bad_optional_access[abi:sn180100]();
        dcsctp::MissingMandatoryParameterCause::Parse(v26, v27, v28);
        return;
      }
    }
  }
  else if (v76)
  {
    goto LABEL_70;
  }
  v32 = off_24C0B4170;
  if (v37 < 0)
    operator delete(v36[0]);
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  v41 = off_24C0B4170;
  if (v46 < 0)
    operator delete(v45[0]);
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  v50 = off_24C0B4170;
  if (v55 < 0)
    operator delete(v54[0]);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  v59 = off_24C0B4170;
  if (v64 < 0)
    operator delete(v63[0]);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  v68 = off_24C0B4170;
  if (v73 < 0)
    operator delete(v72[0]);
  if (v69)
  {
    v70 = v69;
    operator delete((void *)v69);
  }
  v77 = off_24C0B4170;
  if (v82 < 0)
    operator delete(v81[0]);
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
}

void dcsctp::MissingMandatoryParameterCause::Parse(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v3;
  int v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  char *v34;
  unint64_t v35;
  __int128 v36;
  __int16 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v43;
  unint64_t v44;

  if (a2)
    v3 = a1;
  else
    v3 = 0;
  if (a2 < 8
    || __rev16(*v3) != 2
    || (v4 = *((unsigned __int8 *)v3 + 3), (v4 & 1) != 0)
    || ((v5 = v4 | (*((unsigned __int8 *)v3 + 2) << 8), v5 >= 8) ? (v6 = a2 >= v5) : (v6 = 0),
        v6 ? (v7 = a2 - v5 >= 4) : (v7 = 1),
        v7 || (v8 = bswap32(*((_DWORD *)v3 + 1)), v9 = (v5 - 8) >> 1, v9 != v8)))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return;
  }
  if (!(_DWORD)v8)
  {
    *(_QWORD *)a3 = &off_24C0B7540;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_BYTE *)(a3 + 32) = 1;
    return;
  }
  v14 = (char *)operator new((v5 - 8) & 0xFFFFFFFFFFFFFFFELL);
  v15 = 0;
  v16 = &v14[2 * v9];
  v17 = v14;
  v43 = (v5 - 8) >> 1;
  v44 = v5;
  do
  {
    while (1)
    {
      if (2 * v15 + 10 > v5)
      {
        rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 80, "FixedSize + variable_offset + SubSize <= data_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v10, v11, v12, v13, v41);
LABEL_57:
        rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_reader.h", 55, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v10, v11, v12, v13, v41);
LABEL_58:
        __break(1u);
LABEL_59:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
      v18 = 2 * v15 + 8;
      v19 = v5 - v18;
      if (v5 - v18 >= 2)
        v19 = 2;
      if (v19 <= 1)
        goto LABEL_57;
      v20 = bswap32(*(unsigned __int16 *)((char *)v3 + v18)) >> 16;
      if (v17 >= v16)
        break;
      *(_WORD *)v17 = v20;
      v17 += 2;
      if (++v15 == v9)
        goto LABEL_49;
    }
    v21 = v17 - v14;
    if (v17 - v14 <= -3)
      goto LABEL_60;
    v22 = v21 >> 1;
    if (v16 - v14 <= (unint64_t)((v21 >> 1) + 1))
      v23 = v22 + 1;
    else
      v23 = v16 - v14;
    if ((unint64_t)(v16 - v14) >= 0x7FFFFFFFFFFFFFFELL)
      v23 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v23)
      goto LABEL_58;
    if (v23 < 0)
      goto LABEL_59;
    v24 = 2 * v23;
    v25 = operator new(2 * v23);
    v26 = &v25[2 * v22];
    *(_WORD *)v26 = v20;
    v27 = v26 + 2;
    if (v17 != v14)
    {
      v28 = v17 - v14 - 2;
      if (v28 < 0x5E)
      {
        v29 = v17;
        goto LABEL_45;
      }
      v30 = (v17 - 2 - v14) & 0xFFFFFFFFFFFFFFFELL;
      if (&v25[(v21 & 0xFFFFFFFFFFFFFFFELL) - 2 - v30] > &v25[(v21 & 0xFFFFFFFFFFFFFFFELL) - 2])
      {
        v29 = v17;
        goto LABEL_45;
      }
      if (&v17[-v30 - 2] > v17 - 2)
      {
        v29 = v17;
        do
        {
LABEL_45:
          v37 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v26 - 1) = v37;
          v26 -= 2;
        }
        while (v29 != v14);
        goto LABEL_46;
      }
      if ((unint64_t)(&v17[-(v21 & 0xFFFFFFFFFFFFFFFELL)] - v25) < 0x20)
      {
        v29 = v17;
        goto LABEL_45;
      }
      v31 = (v28 >> 1) + 1;
      v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
      v29 = &v17[-v32];
      v26 -= v32;
      v33 = &v25[2 * v22 - 16];
      v34 = v17 - 16;
      v35 = v31 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v36 = *(_OWORD *)v34;
        *(v33 - 1) = *((_OWORD *)v34 - 1);
        *v33 = v36;
        v33 -= 2;
        v34 -= 32;
        v35 -= 16;
      }
      while (v35);
      if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_45;
    }
LABEL_46:
    v16 = &v25[v24];
    if (v14)
      operator delete(v14);
    v14 = v26;
    v17 = v27;
    v9 = v43;
    v5 = v44;
    ++v15;
  }
  while (v15 != v43);
LABEL_49:
  v38 = v17 - v14;
  if (v17 == v14)
  {
    v39 = 0;
    v40 = 0;
  }
  else
  {
    if (v38 < 0)
LABEL_60:
      abort();
    v39 = (char *)operator new(v17 - v14);
    v40 = &v39[2 * (v38 >> 1)];
    memcpy(v39, v14, v17 - v14);
  }
  *(_QWORD *)a3 = &off_24C0B7540;
  *(_QWORD *)(a3 + 8) = v39;
  *(_QWORD *)(a3 + 16) = v40;
  *(_QWORD *)(a3 + 24) = v40;
  *(_BYTE *)(a3 + 32) = 1;
  if (v14)
    operator delete(v14);
}

void dcsctp::MissingMandatoryParameterCause::~MissingMandatoryParameterCause(dcsctp::MissingMandatoryParameterCause *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0B7540;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0B7540;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::MissingMandatoryParameterCause::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t i;
  std::string *v21;
  uint64_t v22;

  v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v13 = v10 + 8;
  v14 = v12 + v10 + 8;
  if (v12 >= v14)
  {
    if (v12 > v14)
      *(_QWORD *)(a2 + 8) = &v11[v14];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v10 + 8);
    v11 = *(char **)a2;
  }
  v15 = &v11[v12];
  *(_WORD *)v15 = 512;
  v15[2] = BYTE1(v13);
  v15[3] = v13;
  if (v10 >= 0xFFFFFFFFFFFFFFF8)
  {
LABEL_14:
    v21 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v22);
    dcsctp::MissingMandatoryParameterCause::ToString((dcsctp::MissingMandatoryParameterCause *)v21);
    return;
  }
  v16 = (_BYTE *)(*(_QWORD *)a2 + v12);
  v17 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  v16[4] = v17 >> 25;
  v16[5] = v17 >> 17;
  v16[6] = v17 >> 9;
  v16[7] = v17 >> 1;
  v18 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v18)
  {
    v19 = 0;
    for (i = 8; i + 2 <= v13; i += 2)
    {
      if (v13 <= i || v10 <= 1)
        goto LABEL_14;
      *(_WORD *)&v16[i] = bswap32(*(unsigned __int16 *)(v18 + 2 * v19++)) >> 16;
      v18 = *(_QWORD *)(a1 + 8);
      v10 -= 2;
      if (v19 >= (*(_QWORD *)(a1 + 16) - v18) >> 1)
        return;
    }
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 84, "FixedSize + variable_offset + SubSize <= data_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v22);
    goto LABEL_14;
  }
}

void dcsctp::MissingMandatoryParameterCause::ToString(dcsctp::MissingMandatoryParameterCause *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  char *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  std::string::size_type v11;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v15;
  char v16;
  size_t v17;
  BOOL v18;
  std::string *p_p_new_stuff;
  std::string *__dst;
  std::string __p_new_stuff;
  std::string v22;
  std::string v23;

  v4 = (char *)operator new(0x38uLL);
  v5 = v4;
  if (v4 <= "Missing Mandatory Parameter, missing_parameter_types="
    && v4 + 53 > "Missing Mandatory Parameter, missing_parameter_types=")
  {
    goto LABEL_42;
  }
  __dst = (std::string *)(v4 + 53);
  strcpy(v4, "Missing Mandatory Parameter, missing_parameter_types=");
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  *(_OWORD *)&v22.__r_.__value_.__r.__words[1] = xmmword_208F08660;
  v6 = (unsigned __int16 *)*((_QWORD *)this + 1);
  v7 = (unsigned __int16 *)*((_QWORD *)this + 2);
  memset(&v23, 0, sizeof(v23));
  if (v6 != v7)
  {
    v9 = *v6;
    v8 = v6 + 1;
    rtc::StringBuilder::operator<<(&v23, v9);
    if (",")
    {
      while (v8 != v7)
      {
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = 22;
        else
          v11 = (v23.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        else
          size = v23.__r_.__value_.__l.__size_;
        if (v11 == size)
        {
          std::string::__grow_by_and_replace(&v23, v11, size + 1 - v11, size, size, 0, 1uLL, ",");
        }
        else
        {
          if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v13 = &v23;
          else
            v13 = (std::string *)v23.__r_.__value_.__r.__words[0];
          if ((char *)v13 + size <= "," && (char *)&v13->__r_.__value_.__l.__data_ + size + 1 > ",")
            goto LABEL_42;
          memmove((char *)v13 + size, ",", 1uLL);
          v15 = size + 1;
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
            v23.__r_.__value_.__l.__size_ = size + 1;
          else
            *((_BYTE *)&v23.__r_.__value_.__s + 23) = v15 & 0x7F;
          v13->__r_.__value_.__s.__data_[v15] = 0;
        }
        v10 = *v8++;
        rtc::StringBuilder::operator<<(&v23, v10);
      }
    }
    else if (v8 != v7)
    {
      goto LABEL_42;
    }
  }
  __p_new_stuff = v23;
  v16 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    v17 = __p_new_stuff.__r_.__value_.__l.__size_;
    if ((__p_new_stuff.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_42;
    p_p_new_stuff = (std::string *)__p_new_stuff.__r_.__value_.__r.__words[0];
    v18 = __p_new_stuff.__r_.__value_.__l.__size_ == 0;
    if (__p_new_stuff.__r_.__value_.__l.__size_)
    {
      if (!__p_new_stuff.__r_.__value_.__r.__words[0])
        goto LABEL_42;
    }
  }
  else
  {
    v17 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    v18 = SHIBYTE(v23.__r_.__value_.__r.__words[2]) == 0;
    p_p_new_stuff = &__p_new_stuff;
  }
  if (v17 <= 2)
  {
    if (v18)
      goto LABEL_38;
    if (__dst > p_p_new_stuff || (std::string *)((char *)__dst + v17) <= p_p_new_stuff)
    {
      memmove(__dst, p_p_new_stuff, v17);
      v22.__r_.__value_.__l.__size_ = v17 + 53;
      v5[v17 + 53] = 0;
      goto LABEL_38;
    }
LABEL_42:
    __break(1u);
    return;
  }
  std::string::__grow_by_and_replace(&v22, 0x37uLL, v17 - 2, 0x35uLL, 0x35uLL, 0, v17, (const std::string::value_type *)p_p_new_stuff);
  v16 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
LABEL_38:
  if (v16 < 0)
    operator delete(__p_new_stuff.__r_.__value_.__l.__data_);
  *a2 = v22;
}

uint64_t webrtc::MultiChannelContentDetector::UpdateDetection(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  float ***v10;
  float **v11;
  int64_t v12;
  unint64_t v13;
  float *v14;
  float *v15;
  unint64_t v16;
  float *v17;
  float **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  unsigned int v27;

  if (!*(_BYTE *)result)
    return 0;
  v3 = *(_QWORD **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v4 = v2 - *(_QWORD *)a2;
  if (v2 == *(_QWORD *)a2)
    goto LABEL_35;
  v5 = *(unsigned __int8 *)(result + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3) < 2)
  {
LABEL_23:
    v22 = 0;
    v20 = *(_QWORD *)(result + 40) + 1;
    *(_QWORD *)(result + 40) = v20;
    *(_QWORD *)(result + 48) = 0;
    v23 = v5;
    if (*(int *)(result + 16) < 0)
    {
LABEL_24:
      v23 = 1;
      *(_BYTE *)(result + 32) = 1;
    }
LABEL_25:
    if (*(_BYTE *)(result + 12) && v20 >= *(int *)(result + 8))
    {
      v23 = 0;
      *(_BYTE *)(result + 32) = 0;
      v24 = 1;
      *(_BYTE *)(result + 33) = v22 & 1;
      v25 = *(_QWORD *)(result + 24);
      if (!v25)
        return v5 != v23;
    }
    else
    {
      v24 = v23 == 0;
      *(_BYTE *)(result + 33) = v22 & (v23 == 0);
      v25 = *(_QWORD *)(result + 24);
      if (!v25)
        return v5 != v23;
    }
    v26 = *(_DWORD *)v25;
    v27 = *(_DWORD *)v25 + 1;
    *(_DWORD *)v25 = v27;
    if (!v24)
    {
      *(_BYTE *)(v25 + 8) = 1;
      ++*(_DWORD *)(v25 + 4);
    }
    if (v26 >= 499 && !(v27 % 0x3E8))
    {
      *(_DWORD *)(v25 + 4) = 0;
      return v5 != v23;
    }
    return v5 != v23;
  }
  v6 = 0;
  v7 = v4 / 24;
  if (v7 <= 1)
    v8 = 1;
  else
    v8 = v7;
  v9 = 1;
  while (1)
  {
    v10 = (float ***)&v3[3 * v6];
    v11 = *v10;
    v12 = (char *)v10[1] - (char *)*v10;
    if (!v12)
      break;
    v13 = v12 / 24;
    v15 = *v11;
    v14 = v11[1];
    if (v13 < 2)
    {
      if (v14 != v15)
        break;
    }
    else if (v14 != v15)
    {
      v16 = v14 - v15;
      v18 = v11 + 3;
      v17 = v11[3];
      v19 = v18[1] - v17;
      if (v16 <= 1)
        v16 = 1;
      while (v19)
      {
        if (vabds_f32(*v15, *v17) > *(float *)(result + 4))
        {
          if (!v9)
            goto LABEL_23;
          v20 = 0;
          v21 = *(_QWORD *)(result + 48) + 1;
          *(_QWORD *)(result + 40) = 0;
          *(_QWORD *)(result + 48) = v21;
          v22 = 1;
          v23 = v5;
          if (v21 > *(int *)(result + 16))
            goto LABEL_24;
          goto LABEL_25;
        }
        ++v15;
        ++v17;
        --v19;
        if (!--v16)
          goto LABEL_10;
      }
      break;
    }
LABEL_10:
    v9 = ++v6 < v7;
    if (v6 == v8)
      goto LABEL_23;
  }
LABEL_35:
  __break(1u);
  return result;
}

void webrtc::rtcp::Nack::~Nack(webrtc::rtcp::Nack *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24C0B7570;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24C0B7570;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::rtcp::Nack::Parse(webrtc::rtcp::Nack *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unsigned int *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  _WORD *v29;
  unint64_t v30;
  unint64_t i;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  __int16 *v35;
  __int16 *v40;
  __int16 *v41;
  int16x8x2_t v42;
  int16x8x2_t v43;
  int8x16x4_t v44;

  v2 = *(unsigned int *)(a2 + 4);
  if (v2 <= 0xB)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/nack.cc");
  }
  else
  {
    v4 = (unint64_t)(v2 - 8) >> 2;
    v5 = *(unsigned int **)(a2 + 8);
    v8 = *((_QWORD *)a1 + 2);
    v6 = (_QWORD *)((char *)a1 + 16);
    v7 = v8;
    *((_DWORD *)v6 - 2) = bswap32(*v5);
    *((_DWORD *)v6 - 1) = bswap32(v5[1]);
    v9 = (const char *)(v5 + 2);
    v6[4] = v6[3];
    v10 = v6[1];
    v11 = (uint64_t)(v10 - v8) >> 2;
    if (v4 <= v11)
    {
      if (v4 < v11)
      {
        v10 = v7 + 4 * v4;
        *((_QWORD *)a1 + 3) = v10;
      }
    }
    else
    {
      std::vector<webrtc::rtcp::Nack::PackedNack>::__append((char **)v6, v4 - v11);
      v7 = *((_QWORD *)a1 + 2);
      v10 = *((_QWORD *)a1 + 3);
    }
    v19 = (uint64_t)(v10 - v7) >> 2;
    v20 = v4 - 1;
    if (v19 >= v4 - 1)
      v21 = v4 - 1;
    else
      v21 = v19;
    v22 = v21 + 1;
    if (v21 + 1 <= 0x10)
      goto LABEL_27;
    v23 = v19 >= v20 ? v4 - 1 : v19;
    _CF = v7 + 4 * v23 >= v7 && v7 + 2 + 4 * v23 >= v7 + 2;
    v25 = v23 >> 62;
    if (!_CF || v25 != 0)
      goto LABEL_27;
    if (v19 < v20)
      v20 = v19;
    v27 = v20;
    if (v7 >= (unint64_t)&v5[v27 + 3] || (unint64_t)v9 >= v27 * 4 + v7 + 4)
    {
      v32 = 16;
      if ((v22 & 0xF) != 0)
        v32 = v22 & 0xF;
      v28 = v22 - v32;
      v33 = (unsigned __int16 *)&v9[4 * v28];
      v34 = ~v21 + v32;
      v35 = (__int16 *)v7;
      do
      {
        v44 = vld4q_s8(v9);
        v9 += 64;
        __asm { SHLL2           V5.8H, V0.16B, #8 }
        v43.val[0] = (int16x8_t)vorrq_s8(_Q5, (int8x16_t)vmovl_high_u8((uint8x16_t)v44.val[1]));
        __asm { SHLL2           V5.8H, V2.16B, #8 }
        v43.val[1] = (int16x8_t)vorrq_s8(_Q5, (int8x16_t)vmovl_high_u8((uint8x16_t)v44.val[3]));
        v42.val[0] = (int16x8_t)vorrq_s8((int8x16_t)vshll_n_s8(*(int8x8_t *)v44.val[0].i8, 8uLL), (int8x16_t)vmovl_u8(*(uint8x8_t *)v44.val[1].i8));
        v40 = v35 + 32;
        v42.val[1] = (int16x8_t)vorrq_s8((int8x16_t)vshll_n_s8(*(int8x8_t *)v44.val[2].i8, 8uLL), (int8x16_t)vmovl_u8(*(uint8x8_t *)v44.val[3].i8));
        vst2q_s16(v35, v42);
        v41 = v35 + 16;
        vst2q_s16(v41, v43);
        v35 = v40;
        v34 += 16;
      }
      while (v34);
      v9 = (const char *)v33;
    }
    else
    {
LABEL_27:
      v28 = 0;
    }
    v29 = (_WORD *)(v7 + 4 * v28 + 2);
    v30 = v4 - v28;
    for (i = v19 - v28; i; --i)
    {
      *(v29 - 1) = bswap32(*(unsigned __int16 *)v9) >> 16;
      *v29 = bswap32(*((unsigned __int16 *)v9 + 1)) >> 16;
      v29 += 2;
      v9 += 4;
      if (!--v30)
      {
        webrtc::rtcp::Nack::Unpack(a1);
        return;
      }
    }
    __break(1u);
  }
}

void webrtc::rtcp::Nack::Unpack(webrtc::rtcp::Nack *this)
{
  _WORD *v1;
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _WORD *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  char *v26;
  unint64_t v27;
  __int128 v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  __int128 v55;
  __int16 v56;
  _WORD *v57;

  v1 = (_WORD *)*((_QWORD *)this + 2);
  v57 = (_WORD *)*((_QWORD *)this + 3);
  if (v1 != v57)
  {
    v3 = (char *)*((_QWORD *)this + 6);
    while (1)
    {
      v4 = *((_QWORD *)this + 7);
      if ((unint64_t)v3 >= v4)
        break;
      if (!v3)
        goto LABEL_67;
      *(_WORD *)v3 = *v1;
      v5 = v3 + 2;
LABEL_32:
      *((_QWORD *)this + 6) = v5;
      v30 = (unsigned __int16)v1[1];
      if (v1[1])
      {
        v31 = *v1;
        while (2)
        {
          ++v31;
          if ((v30 & 1) == 0)
            goto LABEL_35;
          v32 = *((_QWORD *)this + 7);
          if ((unint64_t)v5 < v32)
          {
            if (!v5)
              goto LABEL_67;
            *(_WORD *)v5 = v31;
            v33 = v5 + 2;
LABEL_34:
            *((_QWORD *)this + 6) = v33;
            v5 = v33;
LABEL_35:
            v11 = v30 >= 2;
            v30 >>= 1;
            if (!v11)
              goto LABEL_3;
            continue;
          }
          break;
        }
        v34 = (char *)*((_QWORD *)this + 5);
        v35 = v5 - v34;
        if (v5 - v34 <= -3)
          goto LABEL_68;
        v36 = v35 >> 1;
        v37 = v32 - (_QWORD)v34;
        if (v37 <= (v35 >> 1) + 1)
          v38 = v36 + 1;
        else
          v38 = v37;
        v11 = v37 >= 0x7FFFFFFFFFFFFFFELL;
        v39 = 0x7FFFFFFFFFFFFFFFLL;
        if (!v11)
          v39 = v38;
        if (!v39)
          goto LABEL_67;
        if (v39 < 0)
          goto LABEL_69;
        v40 = 2 * v39;
        v41 = (char *)operator new(2 * v39);
        v42 = &v41[2 * v36];
        *(_WORD *)v42 = v31;
        v33 = v42 + 2;
        if (v5 != v34)
        {
          v43 = v5 - v34 - 2;
          if (v43 < 0x5E)
          {
            v44 = v5;
            goto LABEL_63;
          }
          v45 = (v5 - 2 - v34) & 0xFFFFFFFFFFFFFFFELL;
          v46 = &v41[v35 & 0xFFFFFFFFFFFFFFFELL];
          v47 = (unint64_t)&v46[-v45 - 2];
          v48 = (unint64_t)&v5[-v45 - 2];
          if (v47 > (unint64_t)(v46 - 2) || v48 > (unint64_t)(v5 - 2))
          {
            v44 = v5;
            goto LABEL_63;
          }
          if ((unint64_t)(v5 - v46) < 0x20)
          {
            v44 = v5;
            goto LABEL_63;
          }
          v50 = (v43 >> 1) + 1;
          v51 = 2 * (v50 & 0xFFFFFFFFFFFFFFF0);
          v44 = &v5[-v51];
          v42 -= v51;
          v52 = &v41[2 * v36 - 16];
          v53 = v5 - 16;
          v54 = v50 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v55 = *(_OWORD *)v53;
            *((_OWORD *)v52 - 1) = *((_OWORD *)v53 - 1);
            *(_OWORD *)v52 = v55;
            v52 -= 32;
            v53 -= 32;
            v54 -= 16;
          }
          while (v54);
          if (v50 != (v50 & 0xFFFFFFFFFFFFFFF0))
          {
            do
            {
LABEL_63:
              v56 = *((_WORD *)v44 - 1);
              v44 -= 2;
              *((_WORD *)v42 - 1) = v56;
              v42 -= 2;
            }
            while (v44 != v34);
          }
        }
        *((_QWORD *)this + 5) = v42;
        *((_QWORD *)this + 6) = v33;
        *((_QWORD *)this + 7) = &v41[v40];
        if (v34)
          operator delete(v34);
        goto LABEL_34;
      }
LABEL_3:
      v1 += 2;
      v3 = v5;
      if (v1 == v57)
        return;
    }
    v6 = (char *)*((_QWORD *)this + 5);
    v7 = v3 - v6;
    if (v3 - v6 <= -3)
      goto LABEL_68;
    v8 = v7 >> 1;
    v9 = v4 - (_QWORD)v6;
    if (v9 <= (v7 >> 1) + 1)
      v10 = v8 + 1;
    else
      v10 = v9;
    v11 = v9 >= 0x7FFFFFFFFFFFFFFELL;
    v12 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (!v12)
    {
LABEL_67:
      __break(1u);
LABEL_68:
      abort();
    }
    if (v12 < 0)
LABEL_69:
      std::__throw_bad_array_new_length[abi:sn180100]();
    v13 = 2 * v12;
    v14 = operator new(2 * v12);
    v15 = &v14[2 * v8];
    *v15 = *v1;
    v5 = (char *)(v15 + 1);
    if (v3 != v6)
    {
      v16 = v3 - v6 - 2;
      if (v16 < 0x5E)
      {
        v17 = v3;
        goto LABEL_29;
      }
      v18 = (v3 - 2 - v6) & 0xFFFFFFFFFFFFFFFELL;
      v19 = (unint64_t)&v14[(v7 & 0xFFFFFFFFFFFFFFFELL) - 2];
      v20 = v19 - v18;
      v21 = (unint64_t)&v3[-v18 - 2];
      if (v20 > v19 || v21 > (unint64_t)(v3 - 2))
      {
        v17 = v3;
        goto LABEL_29;
      }
      if ((unint64_t)(&v3[-(v7 & 0xFFFFFFFFFFFFFFFELL)] - v14) < 0x20)
      {
        v17 = v3;
        do
        {
LABEL_29:
          v29 = *((_WORD *)v17 - 1);
          v17 -= 2;
          *--v15 = v29;
        }
        while (v17 != v6);
        goto LABEL_30;
      }
      v23 = (v16 >> 1) + 1;
      v24 = 2 * (v23 & 0xFFFFFFFFFFFFFFF0);
      v17 = &v3[-v24];
      v15 = (_WORD *)((char *)v15 - v24);
      v25 = &v14[2 * v8 - 16];
      v26 = v3 - 16;
      v27 = v23 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v28 = *(_OWORD *)v26;
        *(v25 - 1) = *((_OWORD *)v26 - 1);
        *v25 = v28;
        v25 -= 2;
        v26 -= 32;
        v27 -= 16;
      }
      while (v27);
      if (v23 != (v23 & 0xFFFFFFFFFFFFFFF0))
        goto LABEL_29;
    }
LABEL_30:
    *((_QWORD *)this + 5) = v15;
    *((_QWORD *)this + 6) = v5;
    *((_QWORD *)this + 7) = &v14[v13];
    if (v6)
      operator delete(v6);
    goto LABEL_32;
  }
}

uint64_t webrtc::rtcp::Nack::BlockLength(webrtc::rtcp::Nack *this)
{
  return *((_QWORD *)this + 3) - *((_QWORD *)this + 2) + 12;
}

uint64_t webrtc::rtcp::Nack::Create(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;

  v6 = *(_QWORD *)(result + 24) - *(_QWORD *)(result + 16);
  if (!v6)
    return 1;
  v12 = result;
  v13 = 0;
  v14 = v6 >> 2;
  v15 = *a3;
  while ((unint64_t)(a4 - v15) <= 0xF)
  {
    if (!v15)
      return 0;
    result = a6(a5, a2);
    v15 = 0;
    *a3 = 0;
LABEL_3:
    v14 = (uint64_t)(*(_QWORD *)(v12 + 24) - *(_QWORD *)(v12 + 16)) >> 2;
    if (v13 >= v14)
      return 1;
  }
  v16 = v14 - v13;
  if (v16 >= (unint64_t)(a4 - v15 - 12) >> 2)
    v16 = (unint64_t)(a4 - v15 - 12) >> 2;
  *(_BYTE *)(a2 + v15) = -127;
  *(_BYTE *)(*a3 + a2 + 1) = -51;
  *(_BYTE *)(*a3 + a2 + 2) = (unsigned __int16)(v16 + 2) >> 8;
  *(_BYTE *)(*a3 + a2 + 3) = v16 + 2;
  v17 = *a3 + 4;
  *a3 = v17;
  v18 = (_DWORD *)(a2 + v17);
  *v18 = bswap32(*(_DWORD *)(v12 + 8));
  v18[1] = bswap32(*(_DWORD *)(v12 + 12));
  v15 = *a3 + 8;
  *a3 = v15;
  v19 = v16 + v13;
  if (v13 >= v16 + v13)
    goto LABEL_3;
  v20 = 4 * v13;
  while (1)
  {
    v21 = *(_QWORD *)(v12 + 16);
    if (v13 >= (*(_QWORD *)(v12 + 24) - v21) >> 2)
      break;
    v22 = (unsigned __int16 *)(v21 + v20);
    *(_WORD *)(a2 + v15) = bswap32(*v22) >> 16;
    *(_WORD *)(a2 + *a3 + 2) = bswap32(v22[1]) >> 16;
    v15 = *a3 + 4;
    *a3 = v15;
    ++v13;
    v20 += 4;
    if (!--v16)
    {
      v13 = v19;
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

void webrtc::rtcp::Nack::Pack(webrtc::rtcp::Nack *this)
{
  _WORD *v1;
  _WORD *v2;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  unsigned __int16 v8;
  unint64_t v9;
  int *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  char *v17;
  int *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  char *v23;
  int *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;

  v2 = (_WORD *)*((_QWORD *)this + 5);
  v1 = (_WORD *)*((_QWORD *)this + 6);
  if (v2 != v1)
  {
    while (1)
    {
      v6 = (unsigned __int16)*v2++;
      v5 = v6;
      if (v2 == v1)
      {
        v7 = 0;
LABEL_12:
        v2 = v1;
      }
      else
      {
        v7 = 0;
        while (1)
        {
          v8 = *v2 + ~(_WORD)v5;
          if (v8 > 0xFu)
            break;
          v7 |= (unsigned __int16)(1 << v8);
          if (++v2 == v1)
            goto LABEL_12;
        }
      }
      v10 = (int *)*((_QWORD *)this + 3);
      v9 = *((_QWORD *)this + 4);
      if ((unint64_t)v10 < v9)
      {
        if (!v10)
          goto LABEL_35;
        *v10 = v5 | (v7 << 16);
        v4 = v10 + 1;
        goto LABEL_5;
      }
      v11 = (char *)*((_QWORD *)this + 2);
      v12 = ((char *)v10 - v11) >> 2;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        goto LABEL_36;
      v14 = v9 - (_QWORD)v11;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL;
      v16 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v15)
        v16 = v13;
      if (!v16)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        abort();
      }
      if (v16 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v28 = 4 * v16;
      v17 = (char *)operator new(4 * v16);
      v18 = (int *)&v17[4 * v12];
      *v18 = v5 | (v7 << 16);
      v4 = v18 + 1;
      if (v10 != (int *)v11)
        break;
      *((_QWORD *)this + 2) = v18;
      *((_QWORD *)this + 3) = v4;
      *((_QWORD *)this + 4) = &v17[v28];
      if (v10)
        goto LABEL_33;
LABEL_5:
      *((_QWORD *)this + 3) = v4;
      if (v2 == v1)
        return;
    }
    v19 = (char *)v10 - v11 - 4;
    if (v19 < 0x2C)
      goto LABEL_40;
    if ((unint64_t)(v11 - v17) < 0x20)
      goto LABEL_40;
    v20 = (v19 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v22 = &v10[v21 / 0xFFFFFFFFFFFFFFFCLL];
    v18 = (int *)((char *)v18 - v21);
    v23 = &v17[4 * v12 - 16];
    v24 = v10 - 4;
    v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v26 = *(_OWORD *)v24;
      *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 8;
      v25 -= 8;
    }
    while (v25);
    v10 = v22;
    if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8))
    {
      v10 = (int *)v11;
      *((_QWORD *)this + 2) = v18;
      *((_QWORD *)this + 3) = v4;
      *((_QWORD *)this + 4) = &v17[v28];
      if (!v11)
        goto LABEL_5;
    }
    else
    {
LABEL_40:
      do
      {
        v27 = *--v10;
        *--v18 = v27;
      }
      while (v10 != (int *)v11);
      v10 = (int *)v11;
      *((_QWORD *)this + 2) = v18;
      *((_QWORD *)this + 3) = v4;
      *((_QWORD *)this + 4) = &v17[v28];
      if (!v11)
        goto LABEL_5;
    }
LABEL_33:
    operator delete(v10);
    goto LABEL_5;
  }
}

void std::vector<webrtc::rtcp::Nack::PackedNack>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  int v27;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 > (v4 - v5) >> 2)
  {
    v7 = v5 - *a1;
    v8 = v7 >> 2;
    v9 = (v7 >> 2) + a2;
    if (!(v9 >> 62))
    {
      v10 = v4 - *a1;
      v11 = v10 >> 1;
      if (v10 >> 1 <= v9)
        v11 = (v7 >> 2) + a2;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
      {
        if (v12 >> 62)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v13 = (char *)operator new(4 * v12);
      }
      else
      {
        v13 = 0;
      }
      v15 = &v13[4 * v8];
      v16 = 4 * a2;
      v17 = &v15[4 * a2];
      v18 = v15;
      do
      {
        if (!v18)
          goto LABEL_32;
        *(_DWORD *)v18 = 0;
        v18 += 4;
        v16 -= 4;
      }
      while (v16);
      v19 = *a1;
      if (v5 != *a1)
      {
        v20 = v5 - *a1 - 4;
        if (v20 < 0x2C)
          goto LABEL_37;
        if ((unint64_t)(v5 - &v13[v7]) < 0x20)
          goto LABEL_37;
        v21 = (v20 >> 2) + 1;
        v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
        v6 = &v5[-v22];
        v15 -= v22;
        v23 = &v13[4 * v8 - 16];
        v24 = (__int128 *)(v5 - 16);
        v25 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *v24;
          *((_OWORD *)v23 - 1) = *(v24 - 1);
          *(_OWORD *)v23 = v26;
          v23 -= 32;
          v24 -= 2;
          v25 -= 8;
        }
        while (v25);
        if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_37:
          do
          {
            v27 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *((_DWORD *)v15 - 1) = v27;
            v15 -= 4;
          }
          while (v6 != v19);
        }
        v6 = *a1;
      }
      *a1 = v15;
      a1[1] = v17;
      a1[2] = &v13[4 * v12];
      if (v6)
        operator delete(v6);
      return;
    }
LABEL_33:
    abort();
  }
  if (!a2)
    goto LABEL_16;
  v14 = 4 * a2;
  do
  {
    if (!v6)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    *(_DWORD *)v6 = 0;
    v6 += 4;
    v14 -= 4;
  }
  while (v14);
  v6 = &v5[4 * a2];
LABEL_16:
  a1[1] = v6;
}

void webrtc::NackPeriodicProcessor::RegisterNackModule(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  char v39;
  __n128 v40;
  __n128 (*v41)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v42)(uint64_t *);
  unsigned int *v43;

  v5 = (char *)a1[3];
  v4 = a1[4];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    if (v5)
    {
      *(_QWORD *)v5 = a2;
      v7 = v5 + 8;
      goto LABEL_21;
    }
    goto LABEL_33;
  }
  v8 = (char *)a1[2];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    goto LABEL_34;
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
  v13 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v12)
    v13 = v10;
  if (!v13)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    abort();
  }
  if (v13 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v14 = 8 * v13;
  v15 = (char *)operator new(8 * v13);
  v16 = &v15[v14];
  v17 = &v15[8 * v9];
  *(_QWORD *)v17 = a2;
  v7 = v17 + 8;
  if (v5 != v8)
  {
    v18 = v5 - v8 - 8;
    if (v18 < 0x58)
      goto LABEL_40;
    if ((unint64_t)(v8 - v15) < 0x20)
      goto LABEL_40;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v17 -= v20;
    v21 = &v15[8 * v9 - 16];
    v22 = (__int128 *)(v5 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_40:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v17 - 1) = v25;
        v17 -= 8;
      }
      while (v6 != v8);
    }
    v6 = v8;
  }
  a1[2] = (uint64_t)v17;
  a1[3] = (uint64_t)v7;
  a1[4] = (uint64_t)v16;
  if (v6)
    operator delete(v6);
LABEL_21:
  a1[3] = (uint64_t)v7;
  if ((_QWORD *)((char *)v7 - a1[2]) == (_QWORD *)8)
  {
    v27 = *a1;
    v40.n128_u64[0] = (unint64_t)a1;
    v41 = absl::internal_any_invocable::LocalManagerTrivial;
    v42 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::NackPeriodicProcessor::RegisterNackModule(webrtc::NackRequesterBase *)::$_1 &>;
    if ((v28 & 1) == 0)
    {
      v36 = v27;
      v27 = v36;
      if (v37)
      {
        v38 = (_QWORD *)operator new();
        *v38 = &unk_24C0B13E8;
        webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v38;
        v27 = v36;
      }
    }
    webrtc::RepeatingTaskHandle::DelayedStart(v26, v27, (uint64_t)&v40, 0, webrtc::Clock::GetRealTimeClock(void)::clock, (uint64_t)&v39, &v43);
    v29 = v43;
    v43 = 0;
    v30 = (unsigned int *)a1[1];
    a1[1] = (uint64_t)v29;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
        MEMORY[0x20BD0ADEC]();
      v33 = v43;
      if (v43)
      {
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
          MEMORY[0x20BD0ADEC]();
      }
    }
    v41(1, &v40, &v40);
  }
}

uint64_t webrtc::NackRequester::NackRequester(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  void *__p[2];
  char v40;

  *(_QWORD *)a1 = &off_24C0B75A0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  std::vector<unsigned long>::__append(a1 + 112, 0xAuLL);
  v10 = *(_BYTE **)(a1 + 88);
  if (*(_QWORD *)(a1 + 104) - (_QWORD)v10 > 0x3FFuLL)
    goto LABEL_12;
  v11 = *(_BYTE **)(a1 + 96);
  v12 = (char *)operator new(0x400uLL);
  v13 = v11 - v10;
  v14 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v11 != v10)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_9:
        v24 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v11 != v10);
      goto LABEL_10;
    }
    v15 = &v12[(v11 - v10) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v11 - &v12[v13 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_9;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v11[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v11 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v11 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_9;
  }
LABEL_10:
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v12 + 1024;
  if (v10)
    operator delete(v10);
LABEL_12:
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 100000;
  *(_WORD *)(a1 + 160) = 0;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a7 + 16))(__p, a7, "WebRTC-SendNackDelayMs", 22);
  if (v40 >= 0)
    v25 = __p;
  else
    v25 = (void **)__p[0];
  v26 = strtol((const char *)v25, 0, 10);
  v27 = v26;
  if (v40 < 0)
  {
    operator delete(__p[0]);
    if ((unint64_t)(v27 - 1) <= 0x13)
      goto LABEL_17;
LABEL_21:
    v35 = 0;
    goto LABEL_22;
  }
  if ((unint64_t)(v26 - 1) > 0x13)
    goto LABEL_21;
LABEL_17:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/nack_requester.cc");
  v35 = 1000 * v27;
LABEL_22:
  *(_QWORD *)(a1 + 168) = v35;
  *(_QWORD *)(a1 + 176) = a1;
  *(_QWORD *)(a1 + 184) = a3;
  webrtc::NackPeriodicProcessor::RegisterNackModule(a3, a1);
  v36 = operator new();
  *(_DWORD *)v36 = 0;
  *(_BYTE *)(v36 + 4) = 1;
  *(_QWORD *)(a1 + 192) = v36;
  do
    v37 = __ldxr((unsigned int *)v36);
  while (__stxr(v37 + 1, (unsigned int *)v36));
  return a1;
}

void webrtc::NackRequester::~NackRequester(webrtc::NackRequester *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  void *v14;

  v2 = *((_QWORD *)this + 24);
  *(_BYTE *)(v2 + 4) = 0;
  do
  {
    v3 = __ldaxr((unsigned int *)v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)v2));
  if (!v4)
    MEMORY[0x20BD0ADEC]();
  v5 = (_QWORD *)*((_QWORD *)this + 23);
  v6 = (char *)v5[2];
  v7 = (char *)v5[3];
  if (v6 == v7)
  {
    v8 = (char *)v5[2];
  }
  else
  {
    v8 = (char *)v5[2];
    while (*(_QWORD *)v8 != *((_QWORD *)this + 22))
    {
      v8 += 8;
      if (v8 == v7)
      {
        v8 = (char *)v5[3];
        break;
      }
    }
  }
  if (v7 == v8)
  {
    __break(1u);
  }
  else
  {
    v9 = v7 - (v8 + 8);
    if (v7 != v8 + 8)
    {
      memmove(v8, v8 + 8, v7 - (v8 + 8));
      v6 = (char *)v5[2];
    }
    v5[3] = &v8[v9];
    if (v6 == &v8[v9])
    {
      v10 = v5[1];
      if (v10)
      {
        *(_BYTE *)(v10 + 4) = 0;
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
          MEMORY[0x20BD0ADEC]();
        v5[1] = 0;
      }
    }
    v13 = (void *)*((_QWORD *)this + 14);
    if (v13)
    {
      *((_QWORD *)this + 15) = v13;
      operator delete(v13);
    }
    v14 = (void *)*((_QWORD *)this + 11);
    if (v14)
    {
      *((_QWORD *)this + 12) = v14;
      operator delete(v14);
    }
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 6));
  }
}

{
  webrtc::NackRequester::~NackRequester(this);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::NackRequester::ProcessNacks(webrtc::NackRequester *this)
{
  void *v2;
  void *__p;
  void *v4;

  webrtc::NackRequester::GetNackBatch(&__p, (uint64_t)this, 1);
  v2 = __p;
  if (__p != v4)
  {
    (***((void (****)(_QWORD, void **, _QWORD))this + 3))(*((_QWORD *)this + 3), &__p, 0);
    v2 = __p;
  }
  if (v2)
  {
    v4 = v2;
    operator delete(v2);
  }
}

void webrtc::NackRequester::GetNackBatch(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  _BOOL4 v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _BOOL4 v16;
  int64_t v17;
  BOOL v18;
  int64_t v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  _WORD *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _WORD *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  unint64_t v52;
  __int128 v53;
  __int16 v54;
  _WORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  BOOL v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 16))(*(_QWORD *)(a2 + 16));
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v7 = *(_QWORD **)(a2 + 40);
  v8 = (_QWORD *)(a2 + 48);
  if (v7 != (_QWORD *)(a2 + 48))
  {
    v9 = v6;
    v70 = a1;
    do
    {
      v11 = v9 == 0x8000000000000000;
      v12 = v9 != 0x7FFFFFFFFFFFFFFFLL;
      v13 = v7[6];
      v14 = v7[7];
      v15 = v13 != 0x8000000000000000 && v9 != 0x7FFFFFFFFFFFFFFFLL;
      v16 = v13 == 0x7FFFFFFFFFFFFFFFLL || v9 == 0x8000000000000000;
      v17 = v9 - v13;
      if (v16)
        v17 = 0x8000000000000000;
      v18 = v17 < *(_QWORD *)(a2 + 168) && v15;
      if (v14 == 0x8000000000000000)
        v12 = 0;
      if (v14 == 0x7FFFFFFFFFFFFFFFLL)
        v11 = 1;
      if (v11)
        v19 = 0x8000000000000000;
      else
        v19 = v9 - v14;
      v20 = v19 < *(_QWORD *)(a2 + 152) && v12;
      if ((unint64_t)(v14 - 0x7FFFFFFFFFFFFFFFLL) > 1)
      {
        v26 = 0;
        if (v18)
          goto LABEL_42;
      }
      else
      {
        v21 = *(unsigned __int16 *)(a2 + 160);
        v22 = *((unsigned __int16 *)v7 + 21);
        v23 = v21 >= v22;
        v24 = v21 - v22;
        v25 = v24 != 0 && v23;
        if (v24 == 0x8000)
          v26 = v25;
        else
          v26 = (v24 & 0x8000u) == 0;
        if (v18)
          goto LABEL_42;
      }
      v27 = !v26;
      if ((_DWORD)a3 == 1)
        v27 = 1;
      if (!(_DWORD)a3)
        v20 = 1;
      if (v27 != 1 || (v20 & 1) == 0)
      {
        v32 = (char *)a1[1];
        v31 = a1[2];
        if ((unint64_t)v32 < v31)
        {
          if (!v32)
            goto LABEL_86;
          *(_WORD *)v32 = *((_WORD *)v7 + 20);
          v33 = v32 + 2;
          goto LABEL_70;
        }
        v34 = v8;
        v35 = a3;
        v36 = (char *)*a1;
        v37 = (uint64_t)&v32[-*a1];
        if (v37 <= -3)
          goto LABEL_87;
        v38 = v37 >> 1;
        v39 = v31 - (_QWORD)v36;
        if (v39 <= (v37 >> 1) + 1)
          v40 = v38 + 1;
        else
          v40 = v39;
        if (v39 >= 0x7FFFFFFFFFFFFFFELL)
          v41 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (!v41)
        {
LABEL_86:
          __break(1u);
LABEL_87:
          abort();
        }
        if (v41 < 0)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v71 = 2 * v41;
        v42 = operator new(2 * v41);
        v43 = &v42[2 * v38];
        *v43 = *((_WORD *)v7 + 20);
        v33 = v43 + 1;
        if (v32 == v36)
        {
          a3 = v35;
          v8 = v34;
          v45 = v71;
        }
        else
        {
          v44 = v32 - v36 - 2;
          if (v44 < 0x1E)
          {
            a3 = v35;
            v8 = v34;
            v45 = v71;
            goto LABEL_67;
          }
          v46 = v32 - &v42[v37 & 0xFFFFFFFFFFFFFFFELL];
          a3 = v35;
          v8 = v34;
          v45 = v71;
          if (v46 < 0x20)
            goto LABEL_91;
          v47 = (v44 >> 1) + 1;
          v48 = 2 * (v47 & 0xFFFFFFFFFFFFFFF0);
          v49 = &v32[-v48];
          v43 = (_WORD *)((char *)v43 - v48);
          v50 = &v42[2 * v38 - 16];
          v51 = v32 - 16;
          v52 = v47 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v53 = *(_OWORD *)v51;
            *(v50 - 1) = *((_OWORD *)v51 - 1);
            *v50 = v53;
            v50 -= 2;
            v51 -= 32;
            v52 -= 16;
          }
          while (v52);
          v32 = v49;
          if (v47 != (v47 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_91:
            do
            {
LABEL_67:
              v54 = *((_WORD *)v32 - 1);
              v32 -= 2;
              *--v43 = v54;
            }
            while (v32 != v36);
          }
        }
        a1 = v70;
        *v70 = v43;
        v70[2] = &v42[v45];
        if (v36)
        {
          v55 = v33;
          operator delete(v36);
          v33 = v55;
        }
LABEL_70:
        a1[1] = v33;
        v56 = *((_DWORD *)v7 + 16);
        *((_DWORD *)v7 + 16) = v56 + 1;
        v7[7] = v9;
        if (v56 >= 9)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            v69 = v69 & 0xFFFFFFFF00000000 | 0x882;
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v57, v58, v59, v60, v61, v62, v63, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/nack_requester.cc");
          }
          v64 = (_QWORD *)v7[1];
          v65 = v7;
          if (v64)
          {
            do
            {
              v29 = v64;
              v64 = (_QWORD *)*v64;
            }
            while (v64);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v65[2];
              v66 = *v29 == (_QWORD)v65;
              v65 = v29;
            }
            while (!v66);
          }
          if (*(_QWORD **)(a2 + 40) == v7)
            *(_QWORD *)(a2 + 40) = v29;
          v10 = *(uint64_t **)(a2 + 48);
          --*(_QWORD *)(a2 + 56);
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v10, v7);
          operator delete(v7);
          goto LABEL_4;
        }
        v67 = (_QWORD *)v7[1];
        if (v67)
        {
          do
          {
            v29 = v67;
            v67 = (_QWORD *)*v67;
          }
          while (v67);
          goto LABEL_4;
        }
        do
        {
          v68 = v7;
          v7 = (_QWORD *)v7[2];
        }
        while ((_QWORD *)*v7 != v68);
        goto LABEL_46;
      }
LABEL_42:
      v28 = (_QWORD *)v7[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
        goto LABEL_4;
      }
      do
      {
        v30 = v7;
        v7 = (_QWORD *)v7[2];
      }
      while ((_QWORD *)*v7 != v30);
LABEL_46:
      v29 = v7;
LABEL_4:
      v7 = v29;
    }
    while (v29 != v8);
  }
}

uint64_t webrtc::NackRequester::OnReceivedPacket(webrtc::NackRequester *this, unsigned int a2, int a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _BOOL4 v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  char *v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  char v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  _BOOL4 v24;
  char *v25;
  char *v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t *v29;
  unsigned __int16 v30;
  unsigned int v31;
  BOOL v32;
  BOOL v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  BOOL v40;
  uint64_t *v41;
  char *v42;
  uint64_t *v43;
  unsigned __int16 v44;
  unsigned int v45;
  BOOL v46;
  BOOL v47;
  unsigned int v48;
  unsigned __int16 v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  void *v62;
  char **v63;
  char *v64;
  char **v65;
  unsigned int v66;
  BOOL v67;
  BOOL v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  int64x2_t *v81;
  uint64_t **v82;
  int64x2_t *v83;
  int v84;
  unsigned int v85;
  int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  unsigned int v89;
  _BOOL4 v90;
  _BOOL4 v91;
  _BOOL4 v92;
  uint64_t v93;
  uint64_t *v94;
  char *v95;
  int64x2_t v96;
  void *__p;
  void *v98;
  unsigned __int16 v99;

  v99 = a2;
  if (!*((_BYTE *)this + 144))
  {
    v7 = 0;
    *((_WORD *)this + 80) = a2;
    *((_BYTE *)this + 144) = 1;
    return v7;
  }
  v5 = *((unsigned __int16 *)this + 80);
  v6 = v5 - a2;
  if (v5 == a2)
    return 0;
  if (v6 == 0x8000)
    v9 = v5 > a2;
  else
    v9 = (v6 & 0x8000u) == 0;
  if (!v9)
  {
    if (a3)
    {
      v27 = (uint64_t **)((char *)this + 64);
      std::__tree<unsigned short,webrtc::DescendingSeqNumComp<unsigned short,(unsigned short)0>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>((uint64_t **)this + 8, &v99, &v99);
      v29 = (uint64_t *)((char *)this + 72);
      v28 = (uint64_t *)*((_QWORD *)this + 9);
      if (v28)
      {
        v30 = v99 - 10000;
        do
        {
          while (1)
          {
            v34 = *((unsigned __int16 *)v28 + 13);
            if (v34 != v30)
              break;
            v29 = v28;
            v28 = (uint64_t *)*v28;
            if (!v28)
              goto LABEL_45;
          }
          v31 = (unsigned __int16)(v99 - 10000) - v34;
          v32 = v34 < v30;
          v33 = (__int16)(v30 - v34) >= 0;
          if (v31 == 0x8000)
            v33 = v32;
          if (v33)
            ++v28;
          else
            v29 = v28;
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
LABEL_45:
      v35 = *v27;
      if (v29 != *v27)
      {
        do
        {
          v37 = (uint64_t *)v35[1];
          v38 = v35;
          if (v37)
          {
            do
            {
              v39 = v37;
              v37 = (uint64_t *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v39 = (uint64_t *)v38[2];
              v40 = *v39 == (_QWORD)v38;
              v38 = v39;
            }
            while (!v40);
          }
          if (*v27 == v35)
            *v27 = v39;
          v36 = (uint64_t *)*((_QWORD *)this + 9);
          --*((_QWORD *)this + 10);
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v36, v35);
          operator delete(v35);
          v35 = v39;
        }
        while (v39 != v29);
      }
    }
    else
    {
      v42 = (char *)this + 48;
      v41 = (uint64_t *)*((_QWORD *)this + 6);
      v43 = (uint64_t *)((char *)this + 48);
      if (v41)
      {
        v44 = a2 - 10000;
        v43 = (uint64_t *)((char *)this + 48);
        do
        {
          while (1)
          {
            v48 = *((unsigned __int16 *)v41 + 16);
            if (v48 != v44)
              break;
            v43 = v41;
            v41 = (uint64_t *)*v41;
            if (!v41)
              goto LABEL_65;
          }
          v45 = (unsigned __int16)(a2 - 10000) - v48;
          v46 = v48 < v44;
          v47 = (__int16)(v44 - v48) >= 0;
          if (v45 == 0x8000)
            v47 = v46;
          if (v47)
            ++v41;
          else
            v43 = v41;
          v41 = (uint64_t *)*v41;
        }
        while (v41);
      }
LABEL_65:
      v49 = v5 + 1;
      v50 = (uint64_t *)*((_QWORD *)this + 5);
      if (v50 != v43)
      {
        do
        {
          v59 = (uint64_t *)v50[1];
          v60 = v50;
          if (v59)
          {
            do
            {
              v61 = v59;
              v59 = (uint64_t *)*v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              v61 = (uint64_t *)v60[2];
              v40 = *v61 == (_QWORD)v60;
              v60 = v61;
            }
            while (!v40);
          }
          if (*((uint64_t **)this + 5) == v50)
            *((_QWORD *)this + 5) = v61;
          v58 = (uint64_t *)*((_QWORD *)this + 6);
          --*((_QWORD *)this + 7);
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v58, v50);
          operator delete(v50);
          v50 = v61;
        }
        while (v61 != v43);
      }
      if (*((_QWORD *)this + 7) + (unint64_t)(unsigned __int16)(a2 - v49) < 0x3E9)
      {
        if (a2 != v49)
        {
          v63 = (char **)((char *)this + 72);
          v96 = vdupq_n_s64(0x8000000000000000);
          do
          {
            v64 = *v63;
            if (!*v63)
              goto LABEL_103;
            v65 = (char **)((char *)this + 72);
            do
            {
              while (1)
              {
                v69 = *((unsigned __int16 *)v64 + 13);
                if (v69 != v49)
                  break;
                v65 = (char **)v64;
                v64 = *(char **)v64;
                if (!v64)
                  goto LABEL_97;
              }
              v66 = v49 - v69;
              v67 = v69 < v49;
              v68 = (__int16)(v49 - v69) >= 0;
              if (v66 == 0x8000)
                v68 = v67;
              if (v68)
                v64 += 8;
              else
                v65 = (char **)v64;
              v64 = *(char **)v64;
            }
            while (v64);
LABEL_97:
            if (v65 == v63
              || (v70 = *((unsigned __int16 *)v65 + 13), v70 != v49)
              && ((v71 = v70 - v49, v72 = v70 <= v49, v73 = (__int16)(v70 - v49) < 0, v71 != 0x8000)
                ? (v74 = v73)
                : (v74 = v72),
                  !v74))
            {
LABEL_103:
              v75 = *((_QWORD *)this + 12) - *((_QWORD *)this + 11);
              if (v75)
              {
                v76 = 0;
                v77 = v75 >> 3;
                v78 = *((_QWORD *)this + 14);
                v79 = 0.0;
                while ((*((_QWORD *)this + 15) - v78) >> 3 != v76)
                {
                  v79 = v79 + (float)((float)*(unint64_t *)(v78 + 8 * v76++) / (float)(unint64_t)v77);
                  if (v79 >= 0.5)
                    goto LABEL_110;
                }
                v76 = (*((_QWORD *)this + 15) - v78) >> 3;
              }
              else
              {
                LOWORD(v76) = 0;
              }
LABEL_110:
              v80 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
              v81 = (int64x2_t *)*((_QWORD *)this + 6);
              v82 = (uint64_t **)((char *)this + 48);
              v83 = (int64x2_t *)((char *)this + 48);
              if (v81)
              {
                v84 = v81[2].u16[0];
                if (v84 == v49)
                  goto LABEL_85;
                v83 = (int64x2_t *)*((_QWORD *)this + 6);
                while (1)
                {
                  v85 = (unsigned __int16)v84;
                  v86 = (unsigned __int16)v84 - v49;
                  v87 = (unsigned __int16)v84 > v49;
                  v88 = (__int16)(v84 - v49) >= 0;
                  if (v86 == 0x8000)
                    v88 = v87;
                  if (v88)
                  {
                    v81 = (int64x2_t *)v83->i64[0];
                    v82 = (uint64_t **)v83;
                    if (!v83->i64[0])
                      break;
                  }
                  else
                  {
                    v89 = v49 - v85;
                    v90 = v85 < v49;
                    v91 = (__int16)(v49 - v85) >= 0;
                    if (v89 == 0x8000)
                      v92 = v90;
                    else
                      v92 = v91;
                    if (!v92)
                    {
                      v81 = v83;
                      goto LABEL_85;
                    }
                    v81 = (int64x2_t *)v83->i64[1];
                    if (!v81)
                    {
                      v82 = (uint64_t **)&v83->i64[1];
                      break;
                    }
                  }
                  v84 = v81[2].u16[0];
                  v83 = v81;
                  if (v84 == v49)
                    goto LABEL_85;
                }
              }
              v81 = (int64x2_t *)operator new(0x48uLL);
              v81[2].i16[0] = v49;
              v81[2].i32[2] = 0;
              v81[3] = v96;
              v81[4].i32[0] = 0;
              v81->i64[0] = 0;
              v81->i64[1] = 0;
              v81[1].i64[0] = (uint64_t)v83;
              *v82 = (uint64_t *)v81;
              v93 = **((_QWORD **)this + 5);
              v94 = (uint64_t *)v81;
              if (v93)
              {
                *((_QWORD *)this + 5) = v93;
                v94 = *v82;
              }
              std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 6), v94);
              ++*((_QWORD *)this + 7);
LABEL_85:
              v81[2].i16[4] = v49;
              v81[2].i16[5] = v76 + v49;
              v81[3].i64[0] = v80;
              v81[3].i64[1] = 0x8000000000000000;
              v81[4].i32[0] = 0;
            }
            ++v49;
          }
          while (a2 != v49);
        }
      }
      else
      {
        std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 6));
        *((_QWORD *)this + 6) = 0;
        *((_QWORD *)this + 7) = 0;
        *((_QWORD *)this + 5) = v42;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v51, v52, v53, v54, v55, v56, v57, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/nack_requester.cc");
        (***((void (****)(_QWORD))this + 4))(*((_QWORD *)this + 4));
      }
      *((_WORD *)this + 80) = a2;
      webrtc::NackRequester::GetNackBatch(&__p, (uint64_t)this, 0);
      v62 = __p;
      if (__p != v98)
      {
        (***((void (****)(_QWORD, void **, uint64_t))this + 3))(*((_QWORD *)this + 3), &__p, 1);
        v62 = __p;
      }
      if (v62)
      {
        v98 = v62;
        operator delete(v62);
      }
    }
    return 0;
  }
  v11 = (char *)this + 48;
  v10 = (uint64_t *)*((_QWORD *)this + 6);
  if (!v10)
    return 0;
  v12 = (char *)this + 48;
  v13 = (char *)*((_QWORD *)this + 6);
  do
  {
    while (1)
    {
      v19 = *((unsigned __int16 *)v13 + 16);
      if (a2 != v19)
        break;
      v12 = v13;
      v13 = *(char **)v13;
      if (!v13)
        goto LABEL_23;
    }
    v14 = a2 - v19;
    v15 = a2 >= v19;
    v16 = a2 - v19;
    v17 = v16 != 0 && v15;
    v18 = (v16 & 0x8000u) == 0;
    if (v14 == 0x8000)
      v18 = v17;
    if (v18)
      v13 += 8;
    else
      v12 = v13;
    v13 = *(char **)v13;
  }
  while (v13);
LABEL_23:
  if (v12 == v11)
    return 0;
  v20 = *((unsigned __int16 *)v12 + 16);
  if (v20 != a2)
  {
    v21 = v20 - a2;
    v15 = v20 >= a2;
    v22 = v20 - a2;
    v23 = v22 == 0 || !v15;
    v24 = (v22 & 0x8000u) != 0;
    if (v21 == 0x8000)
      v24 = v23;
    if (!v24)
      return 0;
  }
  v25 = (char *)*((_QWORD *)v12 + 1);
  if (v25)
  {
    do
    {
      v26 = v25;
      v25 = *(char **)v25;
    }
    while (v25);
  }
  else
  {
    v95 = v12;
    do
    {
      v26 = (char *)*((_QWORD *)v95 + 2);
      v40 = *(_QWORD *)v26 == (_QWORD)v95;
      v95 = v26;
    }
    while (!v40);
  }
  v7 = *((unsigned int *)v12 + 16);
  if (*((char **)this + 5) == v12)
    *((_QWORD *)this + 5) = v26;
  --*((_QWORD *)this + 7);
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v10, (uint64_t *)v12);
  operator delete(v12);
  return v7;
}

void webrtc::NackRequester::ClearUpTo(webrtc::NackRequester *this, unsigned int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *i;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  char v10;
  BOOL v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *j;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  BOOL v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;

  v5 = (uint64_t *)((char *)this + 48);
  v4 = (uint64_t *)*((_QWORD *)this + 6);
  for (i = (uint64_t *)*((_QWORD *)this + 5); v4; v4 = (uint64_t *)*v4)
  {
    while (1)
    {
      v12 = *((unsigned __int16 *)v4 + 16);
      if (a2 != v12)
        break;
      v5 = v4;
      v4 = (uint64_t *)*v4;
      if (!v4)
        goto LABEL_14;
    }
    v7 = a2 - v12;
    v8 = a2 >= v12;
    v9 = a2 - v12;
    v10 = v9 != 0 && v8;
    v11 = (v9 & 0x8000u) == 0;
    if (v7 == 0x8000)
      v11 = v10;
    if (v11)
      ++v4;
    else
      v5 = v4;
  }
LABEL_14:
  if (i != v5)
  {
    do
    {
      v17 = (uint64_t *)i[1];
      v18 = i;
      if (v17)
      {
        do
        {
          v19 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v19 = (uint64_t *)v18[2];
          v20 = *v19 == (_QWORD)v18;
          v18 = v19;
        }
        while (!v20);
      }
      if (*((uint64_t **)this + 5) == i)
        *((_QWORD *)this + 5) = v19;
      v16 = (uint64_t *)*((_QWORD *)this + 6);
      --*((_QWORD *)this + 7);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v16, i);
      operator delete(i);
      i = v19;
    }
    while (v19 != v5);
  }
  v14 = (uint64_t *)((char *)this + 72);
  v13 = (uint64_t *)*((_QWORD *)this + 9);
  for (j = (uint64_t *)*((_QWORD *)this + 8); v13; v13 = (uint64_t *)*v13)
  {
    while (1)
    {
      v25 = *((unsigned __int16 *)v13 + 13);
      if (a2 != v25)
        break;
      v14 = v13;
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_36;
    }
    v21 = a2 - v25;
    v8 = a2 >= v25;
    v22 = a2 - v25;
    v23 = v22 != 0 && v8;
    v24 = (v22 & 0x8000u) == 0;
    if (v21 == 0x8000)
      v24 = v23;
    if (v24)
      ++v13;
    else
      v14 = v13;
  }
LABEL_36:
  if (j != v14)
  {
    do
    {
      v27 = (uint64_t *)j[1];
      v28 = j;
      if (v27)
      {
        do
        {
          v29 = v27;
          v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v29 = (uint64_t *)v28[2];
          v20 = *v29 == (_QWORD)v28;
          v28 = v29;
        }
        while (!v20);
      }
      if (*((uint64_t **)this + 8) == j)
        *((_QWORD *)this + 8) = v29;
      v26 = (uint64_t *)*((_QWORD *)this + 9);
      --*((_QWORD *)this + 10);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v26, j);
      operator delete(j);
      j = v29;
    }
    while (v29 != v14);
  }
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::NackPeriodicProcessor::RegisterNackModule(webrtc::NackRequesterBase *)::$_1 &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *a1;
  v2 = *(uint64_t **)(*a1 + 16);
  v3 = *(uint64_t **)(*a1 + 24);
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  return *(_QWORD *)v1;
}

uint64_t *std::__tree<unsigned short,webrtc::DescendingSeqNumComp<unsigned short,(unsigned short)0>,std::allocator<unsigned short>>::__emplace_unique_key_args<unsigned short,unsigned short const&>(uint64_t **a1, unsigned __int16 *a2, _WORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  int v8;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  _BOOL4 v18;
  uint64_t *v19;
  _WORD *v20;
  uint64_t *v21;
  uint64_t *v22;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    v8 = *((unsigned __int16 *)v5 + 13);
    if (v8 == v7)
    {
      return v5;
    }
    else
    {
      do
      {
        v11 = (unsigned __int16)v8;
        v12 = (unsigned __int16)v8 - v7;
        v13 = (unsigned __int16)v8 > v7;
        v14 = (__int16)(v8 - v7) >= 0;
        if (v12 == 0x8000)
          v14 = v13;
        if (v14)
        {
          v10 = (uint64_t *)*v5;
          v6 = (uint64_t **)v5;
          if (!*v5)
            goto LABEL_19;
        }
        else
        {
          v15 = v7 >= v11;
          v16 = v7 - v11;
          v17 = v16 != 0 && v15;
          if (v16 == 0x8000)
            v18 = v17;
          else
            v18 = (v16 & 0x8000u) == 0;
          if (!v18)
            return v5;
          v10 = (uint64_t *)v5[1];
          if (!v10)
          {
            v6 = (uint64_t **)(v5 + 1);
            goto LABEL_19;
          }
        }
        v8 = *((unsigned __int16 *)v10 + 13);
        v5 = v10;
      }
      while (v8 != v7);
      return v10;
    }
  }
  else
  {
    v5 = (uint64_t *)(a1 + 1);
LABEL_19:
    v19 = v5;
    v20 = operator new(0x20uLL);
    v20[13] = *a3;
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = v19;
    *v6 = (uint64_t *)v20;
    v21 = (uint64_t *)**a1;
    v22 = (uint64_t *)v20;
    if (v21)
    {
      *a1 = v21;
      v22 = *v6;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v22);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return (uint64_t *)v20;
  }
}

webrtc::NackTracker::Config *webrtc::NackTracker::Config::Config(webrtc::NackTracker::Config *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t *v7;
  webrtc::NackTracker::Config *result;
  unint64_t v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  const char *v20;
  char **v21;
  char *v22;
  uint64_t v23;
  char *v24;

  *(_QWORD *)this = 0x3FEFDF3B645A1CACLL;
  *((_DWORD *)this + 2) = 20;
  v2 = (char *)this + 8;
  *((_WORD *)this + 6) = 0;
  v3 = (char *)this + 12;
  v4 = (char *)this + 13;
  *((_DWORD *)this + 4) = 100;
  *((_QWORD *)this + 3) = 0x3FF0000000000000;
  v5 = (char *)this + 24;
  v6 = operator new(0xA0uLL);
  *v6 = "packet_loss_forget_factor";
  v6[1] = this;
  v6[2] = webrtc::struct_parser_impl::TypedParser<double>::Parse;
  v6[3] = webrtc::struct_parser_impl::TypedParser<double>::Encode;
  v6[4] = "ms_per_loss_percent";
  v6[5] = v2;
  v6[6] = webrtc::struct_parser_impl::TypedParser<int>::Parse;
  v6[7] = webrtc::struct_parser_impl::TypedParser<int>::Encode;
  v6[8] = "never_nack_multiple_times";
  v6[9] = v3;
  v6[10] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v6[11] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v6[12] = "require_valid_rtt";
  v6[13] = v4;
  v6[14] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v6[15] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v6[16] = "max_loss_rate";
  v6[17] = v5;
  v6[18] = webrtc::struct_parser_impl::TypedParser<double>::Parse;
  v6[19] = webrtc::struct_parser_impl::TypedParser<double>::Encode;
  v7 = (uint64_t *)operator new();
  *v7 = (uint64_t)v6;
  v7[1] = (uint64_t)(v6 + 20);
  v7[2] = (uint64_t)(v6 + 20);
  result = (webrtc::NackTracker::Config *)webrtc::field_trial::FindFullName((size_t)"WebRTC-Audio-NetEqNackTrackerConfig", 0x23uLL, (size_t *)&v22);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    v9 = HIBYTE(v24);
    v10 = &v22;
    goto LABEL_6;
  }
  v9 = v23;
  if ((v23 & 0x8000000000000000) == 0)
  {
    v10 = (char **)v22;
    if (!v23 || v22)
    {
LABEL_6:
      webrtc::StructParametersParser::Parse(v7, (uint64_t)v10, v9);
      if (SHIBYTE(v24) < 0)
      {
        operator delete(v22);
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
        {
LABEL_8:
          v18 = (void *)*v7;
          if (!*v7)
          {
LABEL_10:
            MEMORY[0x20BD0ADEC](v7, 0x20C40960023A9);
            return this;
          }
LABEL_9:
          v7[1] = (uint64_t)v18;
          operator delete(v18);
          goto LABEL_10;
        }
      }
      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      {
        goto LABEL_8;
      }
      v22 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_codi"
            "ng/neteq/nack_tracker.cc";
      v23 = 313;
      v24 = &v19;
      v20 = "Nack tracker config: packet_loss_forget_factor=";
      v21 = &v22;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/nack_tracker.cc");
      v18 = (void *)*v7;
      if (!*v7)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

void webrtc::NackTracker::UpdateLastReceivedPacket(uint64_t **this, int a2, int a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unsigned __int16 v12;

  v12 = a2;
  if (*((_BYTE *)this + 40))
  {
    if (*((unsigned __int16 *)this + 16) == a2)
      return;
    std::__tree<std::__value_type<unsigned short,webrtc::NackTracker::NackElement>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,webrtc::NackTracker::NackElement>,webrtc::NackTracker::NackListCompare,true>,std::allocator<std::__value_type<unsigned short,webrtc::NackTracker::NackElement>>>::__erase_unique<unsigned short>(this + 7, &v12);
    v5 = *((unsigned __int16 *)this + 16);
    v6 = v12;
    v7 = v5 - v12;
    if (v7 == 0x8000)
    {
      if (v5 > v12)
        return;
    }
    else if (v5 != v12 && (v7 & 0x8000) == 0)
    {
      return;
    }
    v8 = ~v5;
    v9 = vcvtd_n_u64_f64(*(double *)this, 0x1EuLL);
    v10 = v12 + v8;
    v11 = (v9 * *((unsigned int *)this + 22)) >> 30;
    *((_DWORD *)this + 22) = v11;
    if (v10 >= 1)
    {
      do
      {
        LODWORD(v11) = ((v11 * v9) >> 30) - v9 + 0x40000000;
        --v10;
      }
      while (v10);
      *((_DWORD *)this + 22) = v11;
    }
    webrtc::NackTracker::UpdateList((uint64_t *)this, v6, a3);
    *((_WORD *)this + 16) = v12;
    *((_DWORD *)this + 9) = a3;
    webrtc::NackTracker::LimitNackListSize((webrtc::NackTracker *)this);
  }
  else
  {
    *((_WORD *)this + 16) = a2;
    *((_DWORD *)this + 9) = a3;
    *((_BYTE *)this + 40) = 1;
    if (!*((_BYTE *)this + 48))
    {
      *((_WORD *)this + 21) = a2;
      *((_DWORD *)this + 11) = a3;
    }
  }
}

uint64_t *webrtc::NackTracker::UpdateList(uint64_t *this, unsigned int a2, int a3)
{
  uint64_t *v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t **v26;
  unsigned int v28;

  v4 = this;
  v5 = *((_WORD *)this + 16);
  v6 = v5 + 1;
  v7 = a2 - (unsigned __int16)(v5 + 1);
  if (v7 == 0x8000)
  {
    if (a2 <= v6)
      return this;
    goto LABEL_9;
  }
  v8 = v7 & 0x8000;
  v9 = a2 != v6 && v8 == 0;
  if (v9)
  {
LABEL_9:
    v10 = a3 - *((_DWORD *)this + 9);
    v11 = (unsigned __int16)(a2 - v5);
    if (v10 < v11)
      return this;
    v12 = v10 / v11;
    if ((int)(v10 / v11) > 120 * *((_DWORD *)this + 13))
      return this;
    v13 = this + 8;
    while (1)
    {
LABEL_16:
      v19 = a2 - ++v5;
      if (v19 == 0x8000)
      {
        if (a2 <= v5)
          return this;
      }
      else if (a2 == v5 || (v19 & 0x8000) != 0)
      {
        return this;
      }
      v20 = v4[8];
      v21 = v4 + 8;
      if ((uint64_t *)v4[7] != v13)
      {
        v22 = v4[8];
        v23 = v4 + 8;
        if (v20)
        {
          do
          {
            v21 = (uint64_t *)v22;
            v22 = *(_QWORD *)(v22 + 8);
          }
          while (v22);
        }
        else
        {
          do
          {
            v21 = (uint64_t *)v23[2];
            v9 = *v21 == (_QWORD)v23;
            v23 = v21;
          }
          while (v9);
        }
        v24 = *((unsigned __int16 *)v21 + 16);
        if (v5 - v24 == 0x8000)
        {
          if (v24 >= v5)
            goto LABEL_40;
        }
        else if (v24 == v5 || ((v5 - (_WORD)v24) & 0x8000) != 0)
        {
LABEL_40:
          v26 = (uint64_t **)(v4 + 8);
          v25 = v4 + 8;
          if (!v20)
            goto LABEL_13;
          while (1)
          {
            v25 = (_QWORD *)v20;
            v28 = *(unsigned __int16 *)(v20 + 32);
            if (v28 - v5 == 0x8000)
            {
              if (v28 > v5)
                goto LABEL_42;
            }
            else if (v28 != v5 && (((_WORD)v28 - v5) & 0x8000) == 0)
            {
LABEL_42:
              v20 = *v25;
              v26 = (uint64_t **)v25;
              if (!*v25)
                goto LABEL_13;
              continue;
            }
            if (v5 - v28 == 0x8000)
            {
              if (v28 >= v5)
                goto LABEL_16;
            }
            else if (v28 == v5 || ((v5 - (_WORD)v28) & 0x8000) != 0)
            {
              goto LABEL_16;
            }
            v20 = v25[1];
            if (!v20)
            {
              v26 = (uint64_t **)(v25 + 1);
              goto LABEL_13;
            }
          }
        }
      }
      if (v20)
        v25 = v21;
      else
        v25 = v4 + 8;
      if (v20)
        v26 = (uint64_t **)(v21 + 1);
      else
        v26 = (uint64_t **)(v4 + 8);
      if (!*v26)
      {
LABEL_13:
        v14 = *((_DWORD *)v4 + 9) + v12 * (unsigned __int16)(v5 - *((_WORD *)v4 + 16));
        v15 = (v14 - *((_DWORD *)v4 + 11)) / *((_DWORD *)v4 + 13);
        v16 = operator new(0x38uLL);
        v16[16] = v5;
        *((_QWORD *)v16 + 5) = v15;
        *((_DWORD *)v16 + 12) = v14;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v25;
        *v26 = (uint64_t *)v16;
        v17 = *(_QWORD *)v4[7];
        if (v17)
        {
          v4[7] = v17;
          v18 = *v26;
        }
        else
        {
          v18 = (uint64_t *)v16;
        }
        this = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[8], v18);
        ++v4[9];
      }
    }
  }
  return this;
}

void webrtc::NackTracker::LimitNackListSize(webrtc::NackTracker *this)
{
  char **v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  int v9;
  _BOOL4 v10;
  BOOL v11;
  char **v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (uint64_t *)((char *)this + 64);
  v2 = (char **)*((_QWORD *)this + 8);
  v4 = (uint64_t *)*((_QWORD *)this + 7);
  if (v2)
  {
    v5 = (unsigned __int16)(*((_WORD *)this + 16) + ~*((_WORD *)this + 40));
    do
    {
      v6 = *((unsigned __int16 *)v2 + 16);
      v7 = v6 - v5;
      v8 = ((v6 - v5) & 0x8000) != 0 || v6 == v5;
      v9 = !v8;
      v10 = v6 > (unsigned __int16)(*((_WORD *)this + 16) + ~*((_WORD *)this + 40));
      if (v7 != 0x8000)
        v10 = v9;
      v11 = !v10;
      if (v10)
        v12 = v2;
      else
        v12 = v2 + 1;
      if (!v11)
        v3 = (uint64_t *)v2;
      v2 = (char **)*v12;
    }
    while (*v12);
  }
  if (v4 != v3)
  {
    do
    {
      v14 = (uint64_t *)v4[1];
      v15 = v4;
      if (v14)
      {
        do
        {
          v16 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v16 = (uint64_t *)v15[2];
          v8 = *v16 == (_QWORD)v15;
          v15 = v16;
        }
        while (!v8);
      }
      if (*((uint64_t **)this + 7) == v4)
        *((_QWORD *)this + 7) = v16;
      v13 = (uint64_t *)*((_QWORD *)this + 8);
      --*((_QWORD *)this + 9);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v13, v4);
      operator delete(v4);
      v4 = v16;
    }
    while (v16 != v3);
  }
}

void webrtc::NackTracker::UpdateLastDecodedPacket(webrtc::NackTracker *this, unsigned int a2, int a3)
{
  char **v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  BOOL v13;
  char **v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  unsigned int v20;
  char *v21;
  char *v22;

  v5 = (char *)this + 64;
  v4 = (char **)*((_QWORD *)this + 8);
  *((_BYTE *)this + 48) = 1;
  *((_WORD *)this + 21) = a2;
  *((_DWORD *)this + 11) = a3;
  v6 = (char *)*((_QWORD *)this + 7);
  v7 = (char *)this + 64;
  if (v4)
  {
    do
    {
      v8 = *((unsigned __int16 *)v4 + 16);
      v9 = v8 - a2;
      v10 = ((v8 - a2) & 0x8000) != 0 || v8 == a2;
      v11 = !v10;
      v12 = v8 > a2;
      if (v9 != 0x8000)
        v12 = v11;
      v13 = !v12;
      if (v12)
        v14 = v4;
      else
        v14 = v4 + 1;
      if (!v13)
        v7 = (char *)v4;
      v4 = (char **)*v14;
    }
    while (*v14);
  }
  if (v6 == v7)
  {
    if (v6 == v5)
      return;
    goto LABEL_28;
  }
  do
  {
    v16 = (char *)*((_QWORD *)v6 + 1);
    v17 = v6;
    if (v16)
    {
      do
      {
        v18 = v16;
        v16 = *(char **)v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v18 = (char *)*((_QWORD *)v17 + 2);
        v10 = *(_QWORD *)v18 == (_QWORD)v17;
        v17 = v18;
      }
      while (!v10);
    }
    if (*((char **)this + 7) == v6)
      *((_QWORD *)this + 7) = v18;
    v15 = (uint64_t *)*((_QWORD *)this + 8);
    --*((_QWORD *)this + 9);
    std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v15, (uint64_t *)v6);
    operator delete(v6);
    v6 = v18;
  }
  while (v18 != v7);
  v6 = (char *)*((_QWORD *)this + 7);
  if (v6 != v5)
  {
LABEL_28:
    v19 = *((_DWORD *)this + 11);
    v20 = *((_DWORD *)this + 13);
    do
    {
      *((_QWORD *)v6 + 5) = (*((_DWORD *)v6 + 12) - v19) / v20;
      v21 = (char *)*((_QWORD *)v6 + 1);
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = *(char **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (char *)*((_QWORD *)v6 + 2);
          v10 = *(_QWORD *)v22 == (_QWORD)v6;
          v6 = v22;
        }
        while (!v10);
      }
      v6 = v22;
    }
    while (v22 != v5);
  }
}

double webrtc::NackTracker::GetNackList@<D0>(webrtc::NackTracker *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  unsigned int v5;
  __int128 v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  char *v28;
  uint64_t v29;
  __int16 v30;
  char *v31;
  char *v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v40;
  char *v41;
  int64_t v42;
  uint64_t v43;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    v5 = *((_DWORD *)this + 22);
    *(_QWORD *)&v6 = *((_QWORD *)this + 3);
    if (v5 > vcvtd_n_u64_f64(*(double *)&v6, 0x1EuLL))
      return *(double *)&v6;
  }
  else
  {
    if (*((_BYTE *)this + 13))
      return *(double *)&v6;
    a2 = *((int *)this + 4);
    v5 = *((_DWORD *)this + 22);
    *(_QWORD *)&v6 = *((_QWORD *)this + 3);
    if (v5 > vcvtd_n_u64_f64(*(double *)&v6, 0x1EuLL))
      return *(double *)&v6;
  }
  v7 = (char *)*((_QWORD *)this + 7);
  v40 = (char *)this + 56;
  v8 = (char *)this + 64;
  if (v7 != (char *)this + 64)
  {
    v9 = 0;
    v10 = 0;
    *(double *)&v6 = (double)*((int *)this + 2) * 100.0 * (double)v5 * 9.31322575e-10;
    v41 = (char *)this + 64;
    v42 = (int)*(double *)&v6;
    while (*((_QWORD *)v7 + 5) <= a2
         && a2 + (*((_DWORD *)this + 9) - *((_DWORD *)v7 + 12)) / *((_DWORD *)this + 13) >= v42)
    {
LABEL_32:
      v31 = (char *)*((_QWORD *)v7 + 1);
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = *(char **)v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (char *)*((_QWORD *)v7 + 2);
          v33 = *(_QWORD *)v32 == (_QWORD)v7;
          v7 = v32;
        }
        while (!v33);
      }
      v7 = v32;
      if (v32 == v8)
        goto LABEL_44;
    }
    v11 = (unint64_t)a3[2];
    if ((unint64_t)v9 < v11)
    {
      if (!v9)
        goto LABEL_49;
      *(_WORD *)v9 = *((_WORD *)v7 + 16);
      v12 = v9 + 2;
      goto LABEL_31;
    }
    v13 = v9 - v10;
    if (v9 - v10 <= -3)
      goto LABEL_50;
    v14 = v13 >> 1;
    v15 = v11 - (_QWORD)v10;
    if (v15 <= (v13 >> 1) + 1)
      v16 = v14 + 1;
    else
      v16 = v15;
    v17 = v15 >= 0x7FFFFFFFFFFFFFFELL;
    v18 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v17)
      v18 = v16;
    if (!v18)
    {
LABEL_49:
      __break(1u);
LABEL_50:
      abort();
    }
    if (v18 < 0)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v19 = a2;
    v43 = 2 * v18;
    v20 = (char *)operator new(2 * v18);
    v21 = &v20[2 * v14];
    *(_WORD *)v21 = *((_WORD *)v7 + 16);
    v12 = v21 + 2;
    if (v9 == v10)
    {
      *a3 = v21;
      a3[1] = v12;
      a3[2] = &v20[v43];
      if (!v10)
        goto LABEL_30;
      goto LABEL_29;
    }
    v22 = v9 - v10 - 2;
    if (v22 < 0x5E
      || ((v23 = (v9 - 2 - v10) & 0xFFFFFFFFFFFFFFFELL,
           v24 = &v20[v13 & 0xFFFFFFFFFFFFFFFELL],
           v25 = (unint64_t)&v24[-v23 - 2],
           v26 = (unint64_t)&v9[-v23 - 2],
           v25 <= (unint64_t)(v24 - 2))
        ? (v27 = v26 > (unint64_t)(v9 - 2))
        : (v27 = 1),
          v27 || (unint64_t)(v9 - v24) < 0x20))
    {
      v28 = v9;
      v29 = v43;
    }
    else
    {
      v34 = (v22 >> 1) + 1;
      v35 = 2 * (v34 & 0xFFFFFFFFFFFFFFF0);
      v28 = &v9[-v35];
      v21 -= v35;
      v36 = &v20[2 * v14 - 16];
      v37 = v9 - 16;
      v38 = v34 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v6 = *(_OWORD *)v37;
        *((_OWORD *)v36 - 1) = *((_OWORD *)v37 - 1);
        *(_OWORD *)v36 = v6;
        v36 -= 32;
        v37 -= 32;
        v38 -= 16;
      }
      while (v38);
      v29 = v43;
      if (v34 == (v34 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_28:
        *a3 = v21;
        a3[1] = v12;
        a3[2] = &v20[v29];
        if (!v10)
        {
LABEL_30:
          v10 = v21;
          a2 = v19;
          v8 = v41;
LABEL_31:
          a3[1] = v12;
          v9 = v12;
          goto LABEL_32;
        }
LABEL_29:
        operator delete(v10);
        goto LABEL_30;
      }
    }
    do
    {
      v30 = *((_WORD *)v28 - 1);
      v28 -= 2;
      *((_WORD *)v21 - 1) = v30;
      v21 -= 2;
    }
    while (v28 != v10);
    goto LABEL_28;
  }
LABEL_44:
  if (*((_BYTE *)this + 12))
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)v40, *((_QWORD **)this + 8));
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 7) = v8;
  }
  return *(double *)&v6;
}

uint64_t *std::__tree<std::__value_type<unsigned short,webrtc::NackTracker::NackElement>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,webrtc::NackTracker::NackElement>,webrtc::NackTracker::NackListCompare,true>,std::allocator<std::__value_type<unsigned short,webrtc::NackTracker::NackElement>>>::__erase_unique<unsigned short>(uint64_t **a1, unsigned __int16 *a2)
{
  uint64_t *result;
  uint64_t *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  _BOOL4 v12;
  BOOL v13;
  uint64_t **v14;
  unsigned int v15;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;

  v4 = (uint64_t *)(a1 + 1);
  result = a1[1];
  if (!result)
    return result;
  v5 = *a2;
  v6 = v4;
  v7 = result;
  do
  {
    v8 = *((unsigned __int16 *)v7 + 16);
    v9 = v5 - v8;
    v10 = ((v5 - v8) & 0x8000) != 0 || v5 == v8;
    v11 = !v10;
    v12 = v5 > v8;
    if (v9 != 0x8000)
      v12 = v11;
    v13 = !v12;
    if (v12)
      v14 = (uint64_t **)(v7 + 1);
    else
      v14 = (uint64_t **)v7;
    if (v13)
      v6 = v7;
    v7 = *v14;
  }
  while (*v14);
  if (v6 == v4)
    return 0;
  v15 = *((unsigned __int16 *)v6 + 16);
  if (v15 - v5 == 0x8000)
  {
    if (v15 > v5)
      return 0;
    goto LABEL_27;
  }
  if (v15 != v5 && (((_WORD)v15 - (_WORD)v5) & 0x8000) == 0)
    return 0;
LABEL_27:
  v17 = (uint64_t *)v6[1];
  if (v17)
  {
    do
    {
      v18 = v17;
      v17 = (uint64_t *)*v17;
    }
    while (v17);
  }
  else
  {
    v19 = v6;
    do
    {
      v18 = (uint64_t *)v19[2];
      v10 = *v18 == (_QWORD)v19;
      v19 = v18;
    }
    while (!v10);
  }
  if (*a1 == v6)
    *a1 = v18;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(result, v6);
  operator delete(v6);
  return (uint64_t *)1;
}

uint64_t webrtc::H264CMSampleBufferToAnnexBBuffer(opaqueCMSampleBuffer *a1, int a2, uint64_t a3)
{
  const opaqueCMFormatDescription *FormatDescription;
  const opaqueCMFormatDescription *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  size_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  size_t v29;
  uint8_t *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  size_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  OpaqueCMBlockBuffer *DataBuffer;
  void *v39;
  size_t DataLength;
  OSStatus DataPointer;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  size_t v57;
  size_t v58;
  uint8_t *v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  size_t v66;
  uint64_t v67;
  size_t v68;
  size_t v69;
  size_t v70;
  size_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  std::string *v75;
  const unsigned __int8 *v76;
  const opaqueCMFormatDescription *v77;
  CMSampleBufferRef *v78;
  opaqueCMSampleBuffer **v79;
  OpaqueCMMemoryPool *v80;
  uint8_t *parameterSetPointerOut;
  size_t parameterSetSizeOut;
  size_t parameterSetCountOut;
  int NALUnitHeaderLengthOut;

  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  if (!FormatDescription)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_6:
      rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
    return 0;
  }
  v7 = FormatDescription;
  NALUnitHeaderLengthOut = 0;
  parameterSetCountOut = 0;
  if (CMVideoFormatDescriptionGetH264ParameterSetAtIndex(FormatDescription, 0, 0, 0, &parameterSetCountOut, &NALUnitHeaderLengthOut))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      goto LABEL_6;
    return 0;
  }
  if (NALUnitHeaderLengthOut == 4)
  {
    *(_QWORD *)a3 = 0;
    if (a2)
    {
      parameterSetPointerOut = 0;
      parameterSetSizeOut = 0;
      if (parameterSetCountOut)
      {
        v21 = 0;
        while (!CMVideoFormatDescriptionGetH264ParameterSetAtIndex(v7, v21, (const uint8_t **)&parameterSetPointerOut, &parameterSetSizeOut, 0, 0))
        {
          v23 = *(_QWORD *)a3;
          v24 = *(_QWORD *)(a3 + 8);
          v22 = *(_QWORD *)a3 + 4;
          if (v24 < v22)
          {
            if (v24 + (v24 >> 1) <= v22)
              v25 = *(_QWORD *)a3 + 4;
            else
              v25 = v24 + (v24 >> 1);
            v26 = (void *)operator new[]();
            v27 = v26;
            v28 = *(_QWORD *)(a3 + 16);
            if (v28)
            {
              memcpy(v26, *(const void **)(a3 + 16), *(_QWORD *)a3);
              *(_QWORD *)(a3 + 16) = v27;
              MEMORY[0x20BD0ADD4](v28, 0x1000C8077774924);
            }
            else
            {
              *(_QWORD *)(a3 + 16) = v26;
            }
            *(_QWORD *)(a3 + 8) = v25;
            v23 = *(_QWORD *)a3;
          }
          *(_DWORD *)(*(_QWORD *)(a3 + 16) + v23) = 0x1000000;
          *(_QWORD *)a3 = v22;
          v29 = parameterSetSizeOut;
          if (parameterSetSizeOut)
          {
            v30 = parameterSetPointerOut;
            v31 = parameterSetSizeOut + v22;
            v32 = *(_QWORD *)(a3 + 8);
            if (v32 < parameterSetSizeOut + v22)
            {
              v33 = v32 + (v32 >> 1);
              if (v33 <= v31)
                v34 = parameterSetSizeOut + v22;
              else
                v34 = v33;
              v35 = (void *)operator new[]();
              v36 = v35;
              v37 = *(_QWORD *)(a3 + 16);
              if (v37)
              {
                memcpy(v35, *(const void **)(a3 + 16), *(_QWORD *)a3);
                *(_QWORD *)(a3 + 16) = v36;
                MEMORY[0x20BD0ADD4](v37, 0x1000C8077774924);
              }
              else
              {
                *(_QWORD *)(a3 + 16) = v35;
              }
              *(_QWORD *)(a3 + 8) = v34;
              v22 = *(_QWORD *)a3;
            }
            memcpy((void *)(*(_QWORD *)(a3 + 16) + v22), v30, v29);
            *(_QWORD *)a3 = v31;
          }
          if (++v21 >= parameterSetCountOut)
            goto LABEL_33;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
          return 0;
        goto LABEL_6;
      }
    }
LABEL_33:
    DataBuffer = CMSampleBufferGetDataBuffer(a1);
    if (DataBuffer)
    {
      v39 = DataBuffer;
      parameterSetSizeOut = 0;
      if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
      {
        parameterSetSizeOut = (size_t)v39;
        CFRetain(v39);
      }
      else
      {
        if (CMBlockBufferCreateContiguous(0, (CMBlockBufferRef)v39, 0, 0, 0, 0, 0, (CMBlockBufferRef *)&parameterSetSizeOut))
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v49, v50, v51, v52, v53, v54, v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
          return 0;
        }
        v39 = (void *)parameterSetSizeOut;
      }
      parameterSetPointerOut = 0;
      DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)v39);
      DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)parameterSetSizeOut, 0, 0, 0, (char **)&parameterSetPointerOut);
      v19 = DataPointer == 0;
      if (DataPointer)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v42, v43, v44, v45, v46, v47, v48, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
      }
      else if (DataLength)
      {
        v56 = parameterSetPointerOut;
        v57 = *(_QWORD *)a3;
        do
        {
          v60 = *(_DWORD *)v56;
          v58 = v57 + 4;
          v61 = *(_QWORD *)(a3 + 8);
          if (v61 < v57 + 4)
          {
            if (v61 + (v61 >> 1) <= v58)
              v62 = v57 + 4;
            else
              v62 = v61 + (v61 >> 1);
            v63 = (void *)operator new[]();
            v64 = v63;
            v65 = *(_QWORD *)(a3 + 16);
            if (v65)
            {
              memcpy(v63, *(const void **)(a3 + 16), *(_QWORD *)a3);
              *(_QWORD *)(a3 + 16) = v64;
              MEMORY[0x20BD0ADD4](v65, 0x1000C8077774924);
            }
            else
            {
              *(_QWORD *)(a3 + 16) = v63;
            }
            *(_QWORD *)(a3 + 8) = v62;
            v57 = *(_QWORD *)a3;
          }
          v66 = bswap32(v60);
          *(_DWORD *)(*(_QWORD *)(a3 + 16) + v57) = 0x1000000;
          *(_QWORD *)a3 = v58;
          v59 = parameterSetPointerOut;
          if (v60)
          {
            v67 = NALUnitHeaderLengthOut;
            v68 = v58 + v66;
            v69 = *(_QWORD *)(a3 + 8);
            if (v69 < v58 + v66)
            {
              v70 = v69 + (v69 >> 1);
              if (v70 <= v68)
                v71 = v58 + v66;
              else
                v71 = v70;
              v72 = (void *)operator new[]();
              v73 = v72;
              v74 = *(_QWORD *)(a3 + 16);
              if (v74)
              {
                memcpy(v72, *(const void **)(a3 + 16), *(_QWORD *)a3);
                *(_QWORD *)(a3 + 16) = v73;
                MEMORY[0x20BD0ADD4](v74, 0x1000C8077774924);
              }
              else
              {
                *(_QWORD *)(a3 + 16) = v72;
              }
              *(_QWORD *)(a3 + 8) = v71;
              v58 = *(_QWORD *)a3;
            }
            memcpy((void *)(*(_QWORD *)(a3 + 16) + v58), &v59[v67], v66);
            *(_QWORD *)a3 = v68;
            v59 = parameterSetPointerOut;
            v58 = v68;
          }
          v56 = &v59[v66 + 4];
          parameterSetPointerOut = v56;
          v57 = v58;
          DataLength -= v66 + 4;
        }
        while (DataLength);
      }
      CFRelease((CFTypeRef)parameterSetSizeOut);
      return v19;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      goto LABEL_6;
    return 0;
  }
  v75 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc", 55, "nalu_header_size == kAvccHeaderByteSize", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v8, v9, v10, v11, NALUnitHeaderLengthOut);
  return webrtc::H264AnnexBBufferToCMSampleBuffer((webrtc *)v75, v76, v77, v78, v79, v80);
}

uint64_t webrtc::H264AnnexBBufferToCMSampleBuffer(webrtc *this, const unsigned __int8 *a2, const opaqueCMFormatDescription *a3, CMSampleBufferRef *a4, opaqueCMSampleBuffer **a5, OpaqueCMMemoryPool *a6)
{
  CMBlockBufferRef v11;
  OpaqueCMBlockBuffer *v12;
  CMBlockBufferRef v13;
  OpaqueCMBlockBuffer *v14;
  BOOL v15;
  const __CFAllocator *Allocator;
  const __CFAllocator *v17;
  unint64_t v18;
  size_t v19;
  CMBlockBufferRef v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const double *v25;
  int64x2_t v26;
  int64x2_t v27;
  const double *v28;
  unsigned __int128 v29;
  unsigned __int128 v30;
  int64x2_t v31;
  CMBlockBufferRef v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  const double *v36;
  int64x2_t v37;
  int64x2_t v38;
  const double *v39;
  unsigned __int128 v40;
  unsigned __int128 v41;
  int64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int IsRangeContiguous;
  OpaqueCMBlockBuffer *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  size_t v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  size_t v73;
  _QWORD *v74;
  size_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const __CFAllocator *v83;
  CMSampleBufferRef *v84;
  const opaqueCMFormatDescription *formatDescription;
  char *dataPointerOut;
  size_t totalLengthOut;
  CMBlockBufferRef dataBuffer;
  CMBlockBufferRef theBuffer;
  OpaqueCMBlockBuffer *v90;

  *a4 = 0;
  webrtc::H264::FindNaluIndices(this, a2, (char **)&theBuffer);
  v11 = theBuffer;
  v12 = v90;
  v13 = theBuffer;
  if (theBuffer == v90)
  {
LABEL_10:
    theBuffer = 0;
    Allocator = CMMemoryPoolGetAllocator((CMMemoryPoolRef)a5);
    v17 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if (v13 == v12)
    {
      v19 = 0;
      v21 = 0;
    }
    else
    {
      v18 = v12 - v13 - 24;
      if (v18 >= 0x60)
      {
        v22 = v18 / 0x18 + 1;
        v23 = v22 & 3;
        if ((v22 & 3) == 0)
          v23 = 4;
        v24 = v22 - v23;
        v20 = (CMBlockBufferRef)((char *)v13 + 24 * v24);
        v25 = (const double *)((char *)v13 + 64);
        v26 = 0uLL;
        v27 = 0uLL;
        do
        {
          v28 = v25 - 6;
          v29 = (unsigned __int128)vld3q_f64(v28);
          v30 = (unsigned __int128)vld3q_f64(v25);
          v31 = vdupq_n_s64(4uLL);
          v26 = vaddq_s64(vaddq_s64(v26, (int64x2_t)v29), v31);
          v27 = vaddq_s64(vaddq_s64(v27, (int64x2_t)v30), v31);
          v25 += 12;
          v24 -= 4;
        }
        while (v24);
        v19 = vaddvq_s64(vaddq_s64(v27, v26));
      }
      else
      {
        v19 = 0;
        v20 = v13;
      }
      do
      {
        v19 += *((_QWORD *)v20 + 2) + 4;
        v20 = (CMBlockBufferRef)((char *)v20 + 24);
      }
      while (v20 != v12);
      if (v18 >= 0x60)
      {
        v33 = v18 / 0x18 + 1;
        v34 = v33 & 3;
        if ((v33 & 3) == 0)
          v34 = 4;
        v35 = v33 - v34;
        v32 = (CMBlockBufferRef)((char *)v13 + 24 * v35);
        v36 = (const double *)((char *)v13 + 64);
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v39 = v36 - 6;
          v40 = (unsigned __int128)vld3q_f64(v39);
          v41 = (unsigned __int128)vld3q_f64(v36);
          v42 = vdupq_n_s64(4uLL);
          v37 = vaddq_s64(vaddq_s64(v37, (int64x2_t)v40), v42);
          v38 = vaddq_s64(vaddq_s64(v38, (int64x2_t)v41), v42);
          v36 += 12;
          v35 -= 4;
        }
        while (v35);
        v21 = vaddvq_s64(vaddq_s64(v38, v37));
      }
      else
      {
        v21 = 0;
        v32 = v13;
      }
      do
      {
        v21 += *((_QWORD *)v32 + 2) + 4;
        v32 = (CMBlockBufferRef)((char *)v32 + 24);
      }
      while (v32 != v12);
    }
    if (CMBlockBufferCreateWithMemoryBlock(v17, 0, v19, Allocator, 0, 0, v21, 1u, &theBuffer))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        goto LABEL_38;
      goto LABEL_30;
    }
    dataBuffer = 0;
    IsRangeContiguous = CMBlockBufferIsRangeContiguous(theBuffer, 0, 0);
    v53 = theBuffer;
    if (IsRangeContiguous)
    {
      v84 = a4;
      formatDescription = a3;
      dataBuffer = theBuffer;
      theBuffer = 0;
    }
    else
    {
      if (CMBlockBufferCreateContiguous(v17, theBuffer, Allocator, 0, 0, 0, 0, &dataBuffer))
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v61, v62, v63, v64, v65, v66, v67, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
        CFRelease(theBuffer);
        v50 = 0;
        if (v11)
          goto LABEL_31;
        return v50;
      }
      v84 = a4;
      formatDescription = a3;
      v53 = dataBuffer;
    }
    dataPointerOut = 0;
    totalLengthOut = 0;
    if (CMBlockBufferGetDataPointer(v53, 0, 0, &totalLengthOut, &dataPointerOut))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_57:
        rtc::webrtc_logging_impl::Log("\r\t", v54, v55, v56, v57, v58, v59, v60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
    }
    else
    {
      v83 = v17;
      if (v13 != v12)
      {
        v68 = 0;
        v70 = dataPointerOut;
        v69 = totalLengthOut;
        v71 = (_QWORD *)((char *)v13 + 8);
        do
        {
          v74 = v71 - 1;
          if ((const unsigned __int8 *)*(v71 - 1) == a2)
            break;
          v75 = v71[1];
          if (v75 + 4 <= v69 - v68)
          {
            v72 = (char *)this + *v71;
            *(_DWORD *)&v70[v68] = bswap32(v75);
            v73 = v68 + 4;
            memcpy(&v70[v73], v72, v75);
            v68 = v75 + v73;
          }
          else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
            rtc::webrtc_logging_impl::Log("\r\t", v76, v77, v78, v79, v80, v81, v82, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
          }
          v71 += 3;
        }
        while (v74 + 3 != (_QWORD *)v12);
      }
      v50 = 1;
      if (!CMSampleBufferCreate(v83, dataBuffer, 1u, 0, 0, formatDescription, 1, 0, 0, 0, 0, v84))
      {
LABEL_59:
        CFRelease(dataBuffer);
        if (!v11)
          return v50;
        goto LABEL_31;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        goto LABEL_57;
    }
    v50 = 0;
    goto LABEL_59;
  }
  v14 = (CMBlockBufferRef)((char *)theBuffer + 24);
  while (!*((_QWORD *)v14 - 1) || (*((_BYTE *)this + *((_QWORD *)v14 - 2)) & 0x1F) != 7)
  {
    v15 = v14 == v90;
    v14 = (OpaqueCMBlockBuffer *)((char *)v14 + 24);
    if (v15)
    {
      v13 = theBuffer;
      goto LABEL_10;
    }
  }
  if ((OpaqueCMBlockBuffer *)((char *)v14 - 24) == v90)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      goto LABEL_38;
  }
  else
  {
    if (v14 != v90)
    {
      v13 = (OpaqueCMBlockBuffer *)((char *)v14 + 24);
      goto LABEL_10;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
LABEL_38:
      rtc::webrtc_logging_impl::Log("\r\t", v43, v44, v45, v46, v47, v48, v49, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
      v50 = 0;
      if (!v11)
        return v50;
      goto LABEL_31;
    }
  }
LABEL_30:
  v50 = 0;
  if (v11)
LABEL_31:
    operator delete(v11);
  return v50;
}

uint64_t webrtc::H265CMSampleBufferToAnnexBBuffer(opaqueCMSampleBuffer *a1, int a2, size_t *a3)
{
  const opaqueCMFormatDescription *FormatDescription;
  const opaqueCMFormatDescription *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  size_t v20;
  char *v21;
  char *v22;
  char *v23;
  size_t *v24;
  size_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  size_t v31;
  size_t *v32;
  const void *v33;
  size_t v34;
  uint8_t *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  size_t v39;
  void *v40;
  size_t v41;
  size_t v42;
  size_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  size_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  size_t *v52;
  size_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  size_t *v73;
  uint64_t v74;
  __int128 v75;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v77;
  size_t DataLength;
  OSStatus DataPointer;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint8_t *v108;
  size_t v109;
  unsigned int v110;
  size_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void *v115;
  size_t v116;
  size_t v117;
  uint8_t *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  void *v124;
  size_t v125;
  size_t *v126;
  const void *v127;
  size_t v128;
  uint64_t v129;
  unint64_t v130;
  size_t v131;
  uint64_t v132;
  _BYTE *v133;
  size_t *v134;
  char *v135;
  unint64_t v136;
  char *v137;
  size_t v138;
  uint64_t v139;
  unint64_t v140;
  _BYTE *v141;
  char *v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _OWORD *v152;
  char *v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  _OWORD *v158;
  char *v159;
  uint64_t v160;
  __int128 v161;
  std::string *v163;
  const unsigned __int8 *v164;
  const opaqueCMFormatDescription *v165;
  CMSampleBufferRef *v166;
  opaqueCMSampleBuffer **v167;
  opaqueCMSampleBuffer *sbuf;
  _BOOL4 sbufa;
  const opaqueCMFormatDescription *v170;
  size_t v171;
  size_t *v172;
  char *v173;
  char *v174;
  size_t v175;
  size_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  size_t v180;
  uint8_t *parameterSetPointerOut;
  size_t parameterSetSizeOut;
  size_t parameterSetCountOut;
  int NALUnitHeaderLengthOut;

  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  if (!FormatDescription)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
LABEL_82:
      rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
      return 0;
    }
    return 0;
  }
  v7 = FormatDescription;
  NALUnitHeaderLengthOut = 0;
  parameterSetCountOut = 0;
  if (CMVideoFormatDescriptionGetHEVCParameterSetAtIndex(FormatDescription, 0, 0, 0, &parameterSetCountOut, &NALUnitHeaderLengthOut))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      goto LABEL_82;
    return 0;
  }
  if (NALUnitHeaderLengthOut != 4)
  {
    v163 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc", 252, "nalu_header_size == kAvccHeaderByteSize", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v8, v9, v10, v11, NALUnitHeaderLengthOut);
    return webrtc::H265AnnexBBufferToCMSampleBuffer((webrtc *)v163, v164, v165, v166, v167);
  }
  *a3 = 0;
  v172 = a3;
  if (!a2)
  {
    v177 = 0;
    v178 = 0;
    v49 = 0;
    v23 = 0;
    v22 = 0;
    v21 = 0;
    v180 = 0;
    DataBuffer = CMSampleBufferGetDataBuffer(a1);
    if (!DataBuffer)
    {
LABEL_95:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_101;
      rtc::webrtc_logging_impl::Log("\r\t", v94, v95, v96, v97, v98, v99, v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
LABEL_97:
      v19 = 0;
      if (!v23)
        goto LABEL_177;
      goto LABEL_176;
    }
    goto LABEL_84;
  }
  sbuf = a1;
  parameterSetPointerOut = 0;
  parameterSetSizeOut = 0;
  if (!parameterSetCountOut)
  {
    v177 = 0;
    v178 = 0;
    v49 = 0;
    v23 = 0;
    v22 = 0;
    v21 = 0;
    v180 = 0;
LABEL_94:
    DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
    if (!DataBuffer)
      goto LABEL_95;
LABEL_84:
    v77 = DataBuffer;
    parameterSetSizeOut = 0;
    if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
    {
      parameterSetSizeOut = (size_t)v77;
      CFRetain(v77);
    }
    else if (CMBlockBufferCreateContiguous(0, v77, 0, 0, 0, 0, 0, (CMBlockBufferRef *)&parameterSetSizeOut))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_101;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v87, v88, v89, v90, v91, v92, v93, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
      goto LABEL_97;
    }
    parameterSetPointerOut = 0;
    DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)parameterSetSizeOut);
    DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)parameterSetSizeOut, 0, 0, 0, (char **)&parameterSetPointerOut);
    sbufa = DataPointer == 0;
    if (DataPointer)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        rtc::webrtc_logging_impl::Log("\r\t", v80, v81, v82, v83, v84, v85, v86, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
        CFRelease((CFTypeRef)parameterSetSizeOut);
        v19 = sbufa;
        if (!v23)
          goto LABEL_177;
        goto LABEL_176;
      }
      goto LABEL_175;
    }
    if (!DataLength)
    {
LABEL_175:
      CFRelease((CFTypeRef)parameterSetSizeOut);
      v19 = sbufa;
      if (!v23)
        goto LABEL_177;
      goto LABEL_176;
    }
    v174 = v22;
    v108 = parameterSetPointerOut;
    while (1)
    {
      v176 = DataLength;
      v110 = *(_DWORD *)v108;
      v111 = *a3;
      v112 = a3[1];
      v113 = *a3 + 4;
      if (v112 < v113)
      {
        if (v112 + (v112 >> 1) <= v113)
          v114 = *a3 + 4;
        else
          v114 = v112 + (v112 >> 1);
        v115 = (void *)operator new[]();
        v116 = (size_t)v115;
        v117 = a3[2];
        if (v117)
        {
          memcpy(v115, (const void *)a3[2], *a3);
          a3[2] = v116;
          MEMORY[0x20BD0ADD4](v117, 0x1000C8077774924);
        }
        else
        {
          a3[2] = (size_t)v115;
        }
        a3[1] = v114;
        v111 = *a3;
      }
      v109 = bswap32(v110);
      *(_DWORD *)(a3[2] + v111) = 0x1000000;
      *a3 = v113;
      if (v110)
      {
        v118 = parameterSetPointerOut;
        v119 = NALUnitHeaderLengthOut;
        v120 = v113 + v109;
        v121 = a3[1];
        if (v121 < v113 + v109)
        {
          v171 = v109;
          v122 = v121 + (v121 >> 1);
          if (v122 <= v120)
            v123 = v113 + v109;
          else
            v123 = v122;
          v124 = (void *)operator new[]();
          v125 = (size_t)v124;
          v126 = a3;
          v127 = (const void *)a3[2];
          if (v127)
          {
            memcpy(v124, v127, *v126);
            v126[2] = v125;
            MEMORY[0x20BD0ADD4](v127, 0x1000C8077774924);
          }
          else
          {
            v126[2] = (size_t)v124;
          }
          a3 = v126;
          v126[1] = v123;
          v113 = *v126;
          v109 = v171;
        }
        memcpy((void *)(a3[2] + v113), &v118[v119], v109);
        *a3 = v120;
      }
      v128 = v180 + 4;
      if (v174 >= v178)
        break;
      if (!v174)
        goto LABEL_180;
      *(_QWORD *)v174 = v128;
      v174 += 8;
      if (v49 >= v177)
      {
LABEL_128:
        v129 = (v49 - v23) >> 3;
        v130 = v129 + 1;
        if ((unint64_t)(v129 + 1) >> 61)
          goto LABEL_181;
        if ((v177 - v23) >> 2 > v130)
          v130 = (v177 - v23) >> 2;
        if ((unint64_t)(v177 - v23) >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v130)
          goto LABEL_180;
        if (v130 >> 61)
          goto LABEL_182;
        v131 = v109;
        v132 = 8 * v130;
        v133 = operator new(8 * v130);
        v134 = (size_t *)&v133[8 * v129];
        *v134 = v131;
        v135 = (char *)(v134 + 1);
        if (v49 != v23)
        {
          v136 = v49 - v23 - 8;
          if (v136 < 0x168
            || (v149 = (v49 - 8 - v23) & 0xFFFFFFFFFFFFFFF8, &v133[v49 - v23 - 8 - v149] > &v133[v49 - v23 - 8])
            || &v49[-v149 - 8] > v49 - 8
            || (unint64_t)(v23 - v133) < 0x20)
          {
            v137 = v49;
            a3 = v172;
          }
          else
          {
            v150 = (v136 >> 3) + 1;
            v151 = 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
            v137 = &v49[-v151];
            v134 = (size_t *)((char *)v134 - v151);
            v152 = &v133[8 * v129 - 16];
            v153 = v49 - 16;
            v154 = v150 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v155 = *(_OWORD *)v153;
              *(v152 - 1) = *((_OWORD *)v153 - 1);
              *v152 = v155;
              v152 -= 2;
              v153 -= 32;
              v154 -= 4;
            }
            while (v154);
            a3 = v172;
            if (v150 == (v150 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_139:
              v177 = &v133[v132];
              if (!v23)
                goto LABEL_105;
LABEL_163:
              operator delete(v23);
LABEL_105:
              v23 = (char *)v134;
              v109 = v131;
              goto LABEL_106;
            }
          }
          do
          {
            v138 = *((_QWORD *)v137 - 1);
            v137 -= 8;
            *--v134 = v138;
          }
          while (v137 != v23);
          goto LABEL_139;
        }
        a3 = v172;
        v177 = &v133[v132];
        if (v23)
          goto LABEL_163;
        goto LABEL_105;
      }
LABEL_158:
      if (!v49)
        goto LABEL_180;
      *(_QWORD *)v49 = v109;
      v135 = v49 + 8;
LABEL_106:
      v180 += v109 + 4;
      v108 = &parameterSetPointerOut[v109 + 4];
      parameterSetPointerOut = v108;
      v49 = v135;
      DataLength = v176 - (v109 + 4);
      if (v176 == v109 + 4)
        goto LABEL_175;
    }
    v139 = (v174 - v21) >> 3;
    v140 = v139 + 1;
    if ((unint64_t)(v139 + 1) >> 61)
      goto LABEL_181;
    if ((v178 - v21) >> 2 > v140)
      v140 = (v178 - v21) >> 2;
    if ((unint64_t)(v178 - v21) >= 0x7FFFFFFFFFFFFFF8)
      v140 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v140)
      goto LABEL_180;
    if (v140 >> 61)
      goto LABEL_182;
    v179 = 8 * v140;
    v141 = operator new(8 * v140);
    v142 = &v141[8 * v139];
    *(_QWORD *)v142 = v128;
    v143 = v142 + 8;
    if (v174 == v21)
    {
      a3 = v172;
      v178 = &v141[v179];
      if (!v21)
      {
LABEL_157:
        v21 = v142;
        v174 = v143;
        if (v49 >= v177)
          goto LABEL_128;
        goto LABEL_158;
      }
LABEL_156:
      operator delete(v21);
      goto LABEL_157;
    }
    v144 = v174 - v21 - 8;
    if (v144 >= 0x168
      && (v145 = (v174 - 8 - v21) & 0xFFFFFFFFFFFFFFF8, &v141[v174 - v21 - 8 - v145] <= &v141[v174 - v21 - 8])
      && &v174[-v145 - 8] <= v174 - 8
      && (unint64_t)(v21 - v141) >= 0x20)
    {
      v156 = (v144 >> 3) + 1;
      v157 = 8 * (v156 & 0x3FFFFFFFFFFFFFFCLL);
      v146 = &v174[-v157];
      v142 -= v157;
      v158 = &v141[8 * v139 - 16];
      v159 = v174 - 16;
      v160 = v156 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v161 = *(_OWORD *)v159;
        *(v158 - 1) = *((_OWORD *)v159 - 1);
        *v158 = v161;
        v158 -= 2;
        v159 -= 32;
        v160 -= 4;
      }
      while (v160);
      a3 = v172;
      v147 = v179;
      if (v156 == (v156 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_155:
        v178 = &v141[v147];
        if (!v21)
          goto LABEL_157;
        goto LABEL_156;
      }
    }
    else
    {
      v146 = v174;
      a3 = v172;
      v147 = v179;
    }
    do
    {
      v148 = *((_QWORD *)v146 - 1);
      v146 -= 8;
      *((_QWORD *)v142 - 1) = v148;
      v142 -= 8;
    }
    while (v146 != v21);
    goto LABEL_155;
  }
  v20 = 0;
  v178 = 0;
  v180 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v177 = 0;
  v170 = v7;
  while (1)
  {
    v175 = v20;
    if (CMVideoFormatDescriptionGetHEVCParameterSetAtIndex(v7, v20, (const uint8_t **)&parameterSetPointerOut, &parameterSetSizeOut, 0, 0))
    {
      break;
    }
    v26 = *a3;
    v27 = a3[1];
    v28 = *a3 + 4;
    if (v27 < v28)
    {
      if (v27 + (v27 >> 1) <= v28)
        v29 = *a3 + 4;
      else
        v29 = v27 + (v27 >> 1);
      v30 = (void *)operator new[]();
      v31 = (size_t)v30;
      v32 = a3;
      v33 = (const void *)a3[2];
      if (v33)
      {
        memcpy(v30, v33, *v32);
        v32[2] = v31;
        MEMORY[0x20BD0ADD4](v33, 0x1000C8077774924);
      }
      else
      {
        v32[2] = (size_t)v30;
      }
      a3 = v32;
      v32[1] = v29;
      v26 = *v32;
    }
    *(_DWORD *)(a3[2] + v26) = 0x1000000;
    *a3 = v28;
    v34 = parameterSetSizeOut;
    if (parameterSetSizeOut)
    {
      v35 = parameterSetPointerOut;
      v36 = parameterSetSizeOut + v28;
      v37 = a3[1];
      if (v37 < parameterSetSizeOut + v28)
      {
        v173 = v22;
        v38 = v37 + (v37 >> 1);
        if (v38 <= v36)
          v39 = parameterSetSizeOut + v28;
        else
          v39 = v38;
        v40 = (void *)operator new[]();
        v41 = (size_t)v40;
        v42 = a3[2];
        if (v42)
        {
          memcpy(v40, (const void *)a3[2], *a3);
          a3[2] = v41;
          MEMORY[0x20BD0ADD4](v42, 0x1000C8077774924);
        }
        else
        {
          a3[2] = (size_t)v40;
        }
        a3[1] = v39;
        v28 = *a3;
        v22 = v173;
      }
      memcpy((void *)(a3[2] + v28), v35, v34);
      *a3 = v36;
    }
    v43 = v180 + 4;
    if (v22 >= v178)
    {
      v54 = (v22 - v21) >> 3;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 61)
        goto LABEL_181;
      if ((v178 - v21) >> 2 > v55)
        v55 = (v178 - v21) >> 2;
      if ((unint64_t)(v178 - v21) >= 0x7FFFFFFFFFFFFFF8)
        v55 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v55)
      {
LABEL_180:
        __break(1u);
LABEL_181:
        abort();
      }
      if (v55 >> 61)
LABEL_182:
        std::__throw_bad_array_new_length[abi:sn180100]();
      v56 = 8 * v55;
      v57 = operator new(8 * v55);
      v58 = &v57[8 * v54];
      *(_QWORD *)v58 = v43;
      v59 = v58 + 8;
      if (v22 != v21)
      {
        v60 = v22 - v21 - 8;
        if (v60 < 0x168)
        {
          v61 = v22;
          goto LABEL_72;
        }
        v62 = (v22 - 8 - v21) & 0xFFFFFFFFFFFFFFF8;
        if (&v57[v22 - v21 - 8 - v62] > &v57[v22 - v21 - 8])
        {
          v61 = v22;
          goto LABEL_72;
        }
        if (&v22[-v62 - 8] > v22 - 8)
        {
          v61 = v22;
          goto LABEL_72;
        }
        if ((unint64_t)(v21 - v57) < 0x20)
        {
          v61 = v22;
          goto LABEL_72;
        }
        v63 = (v60 >> 3) + 1;
        v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
        v61 = &v22[-v64];
        v58 -= v64;
        v65 = &v57[8 * v54 - 16];
        v66 = v22 - 16;
        v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v68 = *(_OWORD *)v66;
          *(v65 - 1) = *((_OWORD *)v66 - 1);
          *v65 = v68;
          v65 -= 2;
          v66 -= 32;
          v67 -= 4;
        }
        while (v67);
        if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_72:
            v69 = *((_QWORD *)v61 - 1);
            v61 -= 8;
            *((_QWORD *)v58 - 1) = v69;
            v58 -= 8;
          }
          while (v61 != v21);
        }
      }
      v178 = &v57[v56];
      if (v21)
        operator delete(v21);
      v21 = v58;
      v22 = v59;
      a3 = v172;
      if (v24 >= (size_t *)v177)
        goto LABEL_35;
      goto LABEL_76;
    }
    if (!v22)
      goto LABEL_180;
    *(_QWORD *)v22 = v43;
    v22 += 8;
    if (v24 >= (size_t *)v177)
    {
LABEL_35:
      v44 = ((char *)v24 - v23) >> 3;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 61)
        goto LABEL_181;
      if ((v177 - v23) >> 2 > v45)
        v45 = (v177 - v23) >> 2;
      if ((unint64_t)(v177 - v23) >= 0x7FFFFFFFFFFFFFF8)
        v45 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v45)
        goto LABEL_180;
      if (v45 >> 61)
        goto LABEL_182;
      v46 = 8 * v45;
      v47 = operator new(8 * v45);
      v48 = (size_t *)&v47[8 * v44];
      *v48 = parameterSetSizeOut;
      v49 = (char *)(v48 + 1);
      if (v24 == (size_t *)v23)
      {
        a3 = v172;
        v177 = &v47[v46];
        if (!v23)
          goto LABEL_11;
      }
      else
      {
        v50 = (char *)v24 - v23 - 8;
        if (v50 < 0x168
          || (v51 = ((char *)(v24 - 1) - v23) & 0xFFFFFFFFFFFFFFF8,
              &v47[(char *)v24 - v23 - 8 - v51] > &v47[(char *)v24 - v23 - 8])
          || (size_t *)((char *)v24 - v51 - 8) > v24 - 1
          || (unint64_t)(v23 - v47) < 0x20)
        {
          v52 = v24;
          a3 = v172;
          goto LABEL_48;
        }
        v70 = (v50 >> 3) + 1;
        v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v52 = &v24[v71 / 0xFFFFFFFFFFFFFFF8];
        v48 = (size_t *)((char *)v48 - v71);
        v72 = &v47[8 * v44 - 16];
        v73 = v24 - 2;
        v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          *v72 = v75;
          v72 -= 2;
          v73 -= 4;
          v74 -= 4;
        }
        while (v74);
        a3 = v172;
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_48:
            v53 = *--v52;
            *--v48 = v53;
          }
          while (v52 != (size_t *)v23);
        }
        v177 = &v47[v46];
        if (!v23)
        {
LABEL_11:
          v23 = (char *)v48;
          v25 = v175;
          goto LABEL_12;
        }
      }
      operator delete(v23);
      goto LABEL_11;
    }
LABEL_76:
    v25 = v175;
    if (!v24)
      goto LABEL_180;
    *v24 = parameterSetSizeOut;
    v49 = (char *)(v24 + 1);
LABEL_12:
    v180 = parameterSetSizeOut + v43;
    v20 = v25 + 1;
    v24 = (size_t *)v49;
    v7 = v170;
    if (v20 >= parameterSetCountOut)
      goto LABEL_94;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v101, v102, v103, v104, v105, v106, v107, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
LABEL_101:
  v19 = 0;
  if (v23)
LABEL_176:
    operator delete(v23);
LABEL_177:
  if (v21)
    operator delete(v21);
  return v19;
}

uint64_t webrtc::H265AnnexBBufferToCMSampleBuffer(webrtc *this, const unsigned __int8 *a2, const opaqueCMFormatDescription *a3, CMSampleBufferRef *a4, opaqueCMSampleBuffer **a5)
{
  CMBlockBufferRef v9;
  OpaqueCMBlockBuffer *v10;
  CMBlockBufferRef v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  CMBlockBufferRef v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const double *v21;
  int64x2_t v22;
  int64x2_t v23;
  const double *v24;
  unsigned __int128 v25;
  unsigned __int128 v26;
  int64x2_t v27;
  CMBlockBufferRef v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const double *v32;
  int64x2_t v33;
  int64x2_t v34;
  const double *v35;
  unsigned __int128 v36;
  unsigned __int128 v37;
  int64x2_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int IsRangeContiguous;
  OpaqueCMBlockBuffer *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  size_t v63;
  char *v64;
  size_t v65;
  _QWORD *v66;
  char *v67;
  size_t v68;
  _QWORD *v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  CMSampleBufferRef *v79;
  const opaqueCMFormatDescription *v80;
  char *dataPointerOut;
  size_t totalLengthOut;
  CMBlockBufferRef dataBuffer;
  CMBlockBufferRef theBuffer;
  OpaqueCMBlockBuffer *v85;

  *a4 = 0;
  webrtc::H264::FindNaluIndices(this, a2, (char **)&theBuffer);
  v9 = theBuffer;
  v10 = v85;
  v11 = theBuffer;
  if (theBuffer != v85)
  {
    v12 = 0;
    while (!*(_QWORD *)((char *)theBuffer + v12 + 16)
         || (*((_BYTE *)this + *(_QWORD *)((char *)theBuffer + v12 + 8)) & 0x7E) != 0x40)
    {
      v12 += 24;
      if ((CMBlockBufferRef)((char *)theBuffer + v12) == v85)
      {
        v11 = theBuffer;
        goto LABEL_11;
      }
    }
    if ((CMBlockBufferRef)((char *)theBuffer + v12) == v85)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_31;
    }
    else
    {
      if ((CMBlockBufferRef)((char *)theBuffer + v12 + 24) != v85)
      {
        v13 = (char *)theBuffer + v12;
        if (v13 + 48 != (char *)v85)
        {
          v11 = (CMBlockBufferRef)(v13 + 72);
          goto LABEL_11;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          goto LABEL_37;
LABEL_31:
        v46 = 0;
        goto LABEL_57;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_31;
    }
LABEL_37:
    rtc::webrtc_logging_impl::Log("\r\t", v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
    v46 = 0;
    goto LABEL_57;
  }
LABEL_11:
  theBuffer = 0;
  if (v11 == v85)
  {
    v15 = 0;
    v17 = 0;
  }
  else
  {
    v14 = v85 - v11 - 24;
    if (v14 >= 0x60)
    {
      v18 = v14 / 0x18 + 1;
      v19 = v18 & 3;
      if ((v18 & 3) == 0)
        v19 = 4;
      v20 = v18 - v19;
      v16 = (CMBlockBufferRef)((char *)v11 + 24 * v20);
      v21 = (const double *)((char *)v11 + 64);
      v22 = 0uLL;
      v23 = 0uLL;
      do
      {
        v24 = v21 - 6;
        v25 = (unsigned __int128)vld3q_f64(v24);
        v26 = (unsigned __int128)vld3q_f64(v21);
        v27 = vdupq_n_s64(4uLL);
        v22 = vaddq_s64(vaddq_s64(v22, (int64x2_t)v25), v27);
        v23 = vaddq_s64(vaddq_s64(v23, (int64x2_t)v26), v27);
        v21 += 12;
        v20 -= 4;
      }
      while (v20);
      v15 = vaddvq_s64(vaddq_s64(v23, v22));
    }
    else
    {
      v15 = 0;
      v16 = v11;
    }
    do
    {
      v15 += *((_QWORD *)v16 + 2) + 4;
      v16 = (CMBlockBufferRef)((char *)v16 + 24);
    }
    while (v16 != v85);
    if (v14 >= 0x60)
    {
      v29 = v14 / 0x18 + 1;
      v30 = v29 & 3;
      if ((v29 & 3) == 0)
        v30 = 4;
      v31 = v29 - v30;
      v28 = (CMBlockBufferRef)((char *)v11 + 24 * v31);
      v32 = (const double *)((char *)v11 + 64);
      v33 = 0uLL;
      v34 = 0uLL;
      do
      {
        v35 = v32 - 6;
        v36 = (unsigned __int128)vld3q_f64(v35);
        v37 = (unsigned __int128)vld3q_f64(v32);
        v38 = vdupq_n_s64(4uLL);
        v33 = vaddq_s64(vaddq_s64(v33, (int64x2_t)v36), v38);
        v34 = vaddq_s64(vaddq_s64(v34, (int64x2_t)v37), v38);
        v32 += 12;
        v31 -= 4;
      }
      while (v31);
      v17 = vaddvq_s64(vaddq_s64(v34, v33));
    }
    else
    {
      v17 = 0;
      v28 = v11;
    }
    do
    {
      v17 += *((_QWORD *)v28 + 2) + 4;
      v28 = (CMBlockBufferRef)((char *)v28 + 24);
    }
    while (v28 != v85);
  }
  if (CMBlockBufferCreateWithMemoryBlock(0, 0, v15, 0, 0, 0, v17, 1u, &theBuffer))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      goto LABEL_31;
    goto LABEL_37;
  }
  dataBuffer = 0;
  IsRangeContiguous = CMBlockBufferIsRangeContiguous(theBuffer, 0, 0);
  v48 = theBuffer;
  if (IsRangeContiguous)
  {
    v79 = a4;
    v80 = a3;
    dataBuffer = theBuffer;
    theBuffer = 0;
    goto LABEL_34;
  }
  if (!CMBlockBufferCreateContiguous(0, theBuffer, 0, 0, 0, 0, 0, &dataBuffer))
  {
    v79 = a4;
    v80 = a3;
    v48 = dataBuffer;
LABEL_34:
    dataPointerOut = 0;
    totalLengthOut = 0;
    if (CMBlockBufferGetDataPointer(v48, 0, 0, &totalLengthOut, &dataPointerOut))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_54:
        rtc::webrtc_logging_impl::Log("\r\t", v49, v50, v51, v52, v53, v54, v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
    }
    else
    {
      if (v11 != v10)
      {
        v63 = 0;
        v64 = dataPointerOut;
        v65 = totalLengthOut;
        v66 = (_QWORD *)((char *)v11 + 8);
        do
        {
          v69 = v66 - 1;
          if ((const unsigned __int8 *)*(v66 - 1) == a2)
            break;
          v70 = v66[1];
          if (v70 + 4 <= v65 - v63)
          {
            v67 = (char *)this + *v66;
            *(_DWORD *)&v64[v63] = bswap32(v70);
            v68 = v63 + 4;
            memcpy(&v64[v68], v67, v70);
            v63 = v70 + v68;
          }
          else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
            rtc::webrtc_logging_impl::Log("\r\t", v71, v72, v73, v74, v75, v76, v77, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
          }
          v66 += 3;
        }
        while (v69 + 3 != (_QWORD *)v10);
      }
      v46 = 1;
      if (!CMSampleBufferCreate(0, dataBuffer, 1u, 0, 0, v80, 1, 0, 0, 0, 0, v79))
        goto LABEL_56;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        goto LABEL_54;
    }
    v46 = 0;
LABEL_56:
    CFRelease(dataBuffer);
    goto LABEL_57;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v56, v57, v58, v59, v60, v61, v62, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
  CFRelease(theBuffer);
  v46 = 0;
LABEL_57:
  if (v9)
    operator delete(v9);
  return v46;
}

CMFormatDescriptionRef webrtc::CreateVideoFormatDescription(webrtc *this, const unsigned __int8 *a2)
{
  CMFormatDescriptionRef v3;
  const opaqueCMFormatDescription *v4;
  BOOL v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CMFormatDescriptionRef v15;
  CMFormatDescriptionRef formatDescriptionOut;
  const opaqueCMFormatDescription *v18;
  size_t parameterSetSizes;
  uint64_t v20;
  uint8_t *parameterSetPointers;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  parameterSetPointers = 0;
  v22 = 0;
  parameterSetSizes = 0;
  v20 = 0;
  webrtc::H264::FindNaluIndices(this, a2, (char **)&formatDescriptionOut);
  v3 = formatDescriptionOut;
  if (formatDescriptionOut != v18)
  {
    v4 = (CMFormatDescriptionRef)((char *)formatDescriptionOut + 24);
    while (1)
    {
      v6 = *((_QWORD *)v4 - 1);
      if (v6)
      {
        v7 = *((_QWORD *)v4 - 2);
        if ((*((_BYTE *)this + v7) & 0x1F) == 7)
          break;
      }
      v5 = v4 == v18;
      v4 = (const opaqueCMFormatDescription *)((char *)v4 + 24);
      if (v5)
        goto LABEL_15;
    }
    parameterSetPointers = 0;
    parameterSetSizes = 0;
    if ((const opaqueCMFormatDescription *)((char *)v4 - 24) == v18)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_15;
      goto LABEL_14;
    }
    parameterSetPointers = (uint8_t *)this + v7;
    v22 = 0;
    parameterSetSizes = v6;
    v20 = 0;
    if (v4 == v18)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_15;
      goto LABEL_14;
    }
    v22 = (char *)this + *((_QWORD *)v4 + 1);
    v20 = *((_QWORD *)v4 + 2);
    formatDescriptionOut = 0;
    if (!CMVideoFormatDescriptionCreateFromH264ParameterSets((CFAllocatorRef)*MEMORY[0x24BDBD240], 2uLL, (const uint8_t *const *)&parameterSetPointers, &parameterSetSizes, 4, &formatDescriptionOut))
    {
      v15 = formatDescriptionOut;
      if (!v3)
        return v15;
      goto LABEL_16;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_14:
      rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
  }
LABEL_15:
  v15 = 0;
  if (v3)
LABEL_16:
    operator delete(v3);
  return v15;
}

uint64_t webrtc::ComputeH264ReorderSizeFromAnnexB(webrtc *this, const unsigned __int8 *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24[3];

  webrtc::H264::FindNaluIndices(this, a2, &v21);
  v3 = v21;
  if (v21 == v22)
  {
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  v4 = v21;
  while (1)
  {
    v5 = *((_QWORD *)v4 + 2);
    if (v5)
    {
      v6 = *((_QWORD *)v4 + 1);
      if ((*((_BYTE *)this + v6) & 0x1F) == 7)
        break;
    }
    v4 += 24;
    if (v4 == v22)
      goto LABEL_11;
  }
  v7 = 0;
  if (v4 != v22 && v5 >= 2)
  {
    webrtc::H264::ParseRbsp((webrtc *)((char *)this + v6 + 1), v5 - 1, (unint64_t *)v24);
    webrtc::SpsAndVuiParser::Parse(v24, v8, v9, v10, v11, (uint64_t)&v21);
    if (v23)
    {
      v7 = webrtc::ComputeH264ReorderSizeFromSPS((uint64_t)&v21);
      v12 = (void *)v24[0];
      if (!v24[0])
        goto LABEL_12;
LABEL_18:
      v24[1] = (uint64_t)v12;
      operator delete(v12);
      goto LABEL_12;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
    v7 = 0;
    v12 = (void *)v24[0];
    if (v24[0])
      goto LABEL_18;
  }
LABEL_12:
  if (v3)
    operator delete(v3);
  return v7;
}

uint64_t webrtc::SpsAndVuiParser::Parse@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  char *v11;
  char *v12;
  unint64_t v13;
  unsigned int v14;
  char v15;
  char *v16;
  int v17;
  char v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  __int128 v24;
  char v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned __int8 *v35;
  __int32 v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  __int32 v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  __int32 v54;
  uint64_t i;
  unsigned __int32 v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  unsigned int v60;
  __int32 v61;
  uint64_t j;
  unsigned __int32 v63;
  uint64_t v64;
  std::string *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  char v74;
  uint8x16_t v75;

  v7 = *a1;
  v8 = a1[1] - *a1;
  if (!v8)
    v7 = 0;
  v75.i64[0] = v7;
  if (((v8 >> 28) & 0x1FFFFFFFFLL) != 0)
    goto LABEL_131;
  v75.i32[2] = 8 * v8;
  v75.i8[12] = 1;
  result = webrtc::SpsParser::ParseSpsUpToVui(&v75, (uint64_t)&v70);
  if (!v74)
  {
    *(_BYTE *)a6 = 0;
    *(_BYTE *)(a6 + 64) = 0;
    return result;
  }
  v66 = v70;
  v67 = v71;
  v68 = v72;
  v69 = v73;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  v13 = (unint64_t)&v12[-*a1];
  if (((v13 >> 28) & 0x1FFFFFFFFLL) != 0)
  {
LABEL_131:
    v65 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a2, a3, a4, a5, v66);
    return webrtc::ComputeH264ReorderSizeFromSPS(v65);
  }
  v14 = 8 * v13;
  if (!v14)
    goto LABEL_56;
  if (v12 == v11)
    v11 = 0;
  if (v14 < 0x18)
    goto LABEL_56;
  v15 = *v11;
  v16 = &v11[((v14 - 1) >> 3) - ((v14 - 4) >> 3)];
  v17 = (v16[1] >> 4) & 1;
  v18 = v16[((v14 - 5) >> 3) - ((v14 - 9) >> 3) + 1];
  if (!HIDWORD(v72))
  {
    v24 = v71;
    *(_OWORD *)a6 = v70;
    *(_OWORD *)(a6 + 16) = v24;
    *(_OWORD *)(a6 + 32) = v72;
    *(_DWORD *)(a6 + 48) = v73;
    *(_BYTE *)(a6 + 52) = v15;
    *(_BYTE *)(a6 + 53) = v18;
    *(_BYTE *)(a6 + 54) = v17;
    *(_BYTE *)(a6 + 55) = 0;
    v25 = 1;
    *(_QWORD *)(a6 + 56) = 0;
    goto LABEL_57;
  }
  v75.i8[12] = 0;
  v19 = v75.i32[2];
  v20 = --v75.i32[2];
  if (v19 < 1)
    goto LABEL_24;
  v21 = (unsigned __int8 *)v75.i64[0];
  v22 = v20 & 7;
  if ((v20 & 7) != 0)
  {
    v23 = *(unsigned __int8 *)v75.i64[0] >> v22;
  }
  else
  {
    ++v75.i64[0];
    LOBYTE(v23) = *v21++;
  }
  if ((v23 & 1) == 0)
  {
    v26 = v21;
    goto LABEL_19;
  }
  v75.i8[12] = 0;
  if (v19 <= 8)
  {
    v20 = -1;
    v75.i32[2] = -1;
LABEL_24:
    v75.i8[12] = 0;
    v27 = v20 - 1;
LABEL_25:
    v29 = v27 - 2;
LABEL_26:
    v75.i8[12] = 0;
    v30 = v29 - 1;
    v75.i32[2] = v29 - 1;
LABEL_27:
    v31 = v30 - 1;
LABEL_28:
    v32 = 0;
    v33 = 0;
    v34 = v31 - 1;
    goto LABEL_29;
  }
  v20 = v19 - 9;
  v75.i32[2] = v19 - 9;
  LODWORD(v38) = *v21;
  v26 = v21 + 1;
  v75.i64[0] = (uint64_t)(v21 + 1);
  if (v22)
    v38 = ((unint64_t)(v38 & ~(-1 << v22)) << (8 - v22)) | (v21[1] >> v22);
  if ((_BYTE)v38 == 0xFF)
  {
    v75.i8[12] = 0;
    if (v19 >= 0x19
      && (v26 = &v21[((v19 - 2) >> 3) - ((v19 - 18) >> 3) + 1],
          v75.i64[0] = (uint64_t)v26,
          (v19 - 25) >= 0x10))
    {
      v20 = v19 - 41;
      v26 = &v21[((v19 - 2) >> 3) + 1 - ((v19 - 34) >> 3)];
      v75.i64[0] = (uint64_t)v26;
    }
    else
    {
      v20 = -1;
    }
  }
LABEL_19:
  v75.i8[12] = 0;
  v27 = v20 - 1;
  v75.i32[2] = v20 - 1;
  if (v20 < 1)
    goto LABEL_25;
  if ((v27 & 7) != 0)
  {
    v28 = *v26 >> (v27 & 7);
  }
  else
  {
    v75.i64[0] = (uint64_t)(v26 + 1);
    LOBYTE(v28) = *v26++;
  }
  if ((v28 & 1) != 0)
  {
    if (v20 == 1)
    {
      v27 = -1;
    }
    else
    {
      v27 = v20 - 2;
      v75.i64[0] = (uint64_t)&v26[((v20 + 6) >> 3) - ((v20 + 5) >> 3)];
    }
  }
  v75.i8[12] = 0;
  v41 = v27 - 1;
  v75.i32[2] = v27 - 1;
  if (v27 <= 0)
    goto LABEL_25;
  v42 = v75.i64[0];
  if ((v41 & 7) != 0)
  {
    v43 = *(unsigned __int8 *)v75.i64[0] >> (v41 & 7);
  }
  else
  {
    ++v75.i64[0];
    LOBYTE(v43) = *(_BYTE *)v42++;
  }
  if ((v43 & 1) == 0)
    goto LABEL_64;
  if (v27 <= 3)
  {
    v75.i32[2] = -1;
    v75.i8[12] = 0;
LABEL_70:
    v29 = -3;
    goto LABEL_26;
  }
  v44 = (v27 + 3) >> 3;
  v45 = v42 - v44 + ((v27 + 6) >> 3);
  v75.i64[0] = v45;
  if (v27 == 4)
    goto LABEL_70;
  v42 = v45 + v44 - ((v27 + 2) >> 3);
  v75.i64[0] = v42;
  v75.i8[12] = 0;
  v41 = v27 - 6;
  v75.i32[2] = v27 - 6;
  if (v27 == 5)
  {
    v29 = -2;
    goto LABEL_26;
  }
  if ((v41 & 7) != 0)
  {
    v48 = *(unsigned __int8 *)v42 >> (v41 & 7);
  }
  else
  {
    v75.i64[0] = v42 + 1;
    LOBYTE(v48) = *(_BYTE *)v42++;
  }
  if ((v48 & 1) != 0)
  {
    if (v41 > 7)
    {
      v51 = (v27 - 7) >> 3;
      v42 = v42 - v51 + ((v27 + 1) >> 3);
      v75.i64[0] = v42;
      v75.i8[12] = 0;
      if ((v27 - 14) >= 8
        && (v52 = (v27 - 15) >> 3, v42 += v51 - v52, v75.i64[0] = v42, (v27 - 22) >= 8))
      {
        v41 = v27 - 30;
        v42 += v52 - ((v27 - 23) >> 3);
        v75.i64[0] = v42;
      }
      else
      {
        v41 = -1;
      }
    }
    else
    {
      v41 = -1;
      v75.i32[2] = -1;
      v75.i8[12] = 0;
    }
  }
LABEL_64:
  v75.i8[12] = 0;
  v29 = v41 - 1;
  v75.i32[2] = v41 - 1;
  if (v41 < 1)
    goto LABEL_26;
  if ((v29 & 7) != 0)
  {
    LODWORD(v42) = *(unsigned __int8 *)v42 >> (v29 & 7);
  }
  else
  {
    v75.i64[0] = v42 + 1;
    LOBYTE(v42) = *(_BYTE *)v42;
  }
  if ((v42 & 1) != 0)
  {
    webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
    result = webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
    v29 = v75.i32[2];
  }
  v75.i8[12] = 0;
  v30 = v29 - 1;
  v75.i32[2] = v29 - 1;
  if (v29 <= 0)
    goto LABEL_27;
  v46 = v75.i64[0];
  if ((v30 & 7) != 0)
  {
    v47 = *(unsigned __int8 *)v75.i64[0] >> (v30 & 7);
  }
  else
  {
    ++v75.i64[0];
    LOBYTE(v47) = *(_BYTE *)v46++;
  }
  if ((v47 & 1) != 0)
  {
    if (v29 > 0x20)
    {
      v49 = (v29 - 26) >> 3;
      v46 = v46 - v49 + ((v29 + 6) >> 3);
      v75.i64[0] = v46;
      if ((v29 - 33) < 0x20
        || (v50 = (v29 - 58) >> 3, v46 += v49 - v50, v75.i64[0] = v46, v29 == 65))
      {
        v30 = -1;
      }
      else
      {
        v30 = v29 - 66;
        v46 += v50 - ((v29 - 59) >> 3);
        v75.i64[0] = v46;
      }
    }
    else
    {
      v30 = -1;
      v75.i32[2] = -1;
      v75.i8[12] = 0;
    }
  }
  v75.i8[12] = 0;
  v31 = v30 - 1;
  v75.i32[2] = v30 - 1;
  if (v30 < 1)
    goto LABEL_28;
  if ((v31 & 7) != 0)
  {
    LODWORD(v46) = *(unsigned __int8 *)v46 >> (v31 & 7);
  }
  else
  {
    v75.i64[0] = v46 + 1;
    LOBYTE(v46) = *(_BYTE *)v46;
  }
  v32 = v46 & 1;
  if ((v46 & 1) != 0)
  {
    v53 = webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
    v75.i8[12] = 0;
    v54 = v75.i32[2] - 8;
    if (v75.i32[2] >= 8)
      v75.i64[0] += (int)(((v75.i32[2] + 7) >> 3) - ((v75.i32[2] - 1) >> 3));
    else
      v54 = -1;
    v75.i32[2] = v54;
    for (i = v53; ; --i)
    {
      webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
      result = webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
      v75.i8[12] = 0;
      v56 = v75.u32[2];
      if (v75.i32[2] < 1)
      {
        v31 = -1;
        v75.i32[2] = -1;
        if (!i)
          break;
      }
      else
      {
        v57 = v75.i64[0];
        v75.i64[0] += ((v75.i32[2] + 7) >> 3) - (unint64_t)((v75.i32[2] + 6) >> 3);
        --v75.i32[2];
        if (!i)
        {
          v31 = v56 - 21;
          if (v56 >= 0x15)
            v75.i64[0] = v57 + ((v56 + 7) >> 3) - ((v56 - 14) >> 3);
          else
            v31 = -1;
          break;
        }
      }
    }
  }
  v75.i8[12] = 0;
  v58 = __OFSUB__(v31, 1);
  v34 = v31 - 1;
  v75.i32[2] = v34;
  if (v34 < 0 != v58
    || ((v59 = v75.i64[0], (v34 & 7) == 0)
      ? (++v75.i64[0], LOBYTE(v59) = *(_BYTE *)v59)
      : (LODWORD(v59) = *(unsigned __int8 *)v75.i64[0] >> (v34 & 7)),
        (v59 & 1) == 0))
  {
    v33 = 0;
    goto LABEL_29;
  }
  v33 = v59 & 1;
  v60 = webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
  v75.i8[12] = 0;
  v61 = v75.i32[2] - 8;
  if (v75.i32[2] >= 8)
    v75.i64[0] += (int)(((v75.i32[2] + 7) >> 3) - ((v75.i32[2] - 1) >> 3));
  else
    v61 = -1;
  v75.i32[2] = v61;
  for (j = v60; ; --j)
  {
    webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
    result = webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
    v75.i8[12] = 0;
    v63 = v75.u32[2];
    if (v75.i32[2] >= 1)
      break;
    v34 = -1;
    v75.i32[2] = -1;
    if (!j)
      goto LABEL_29;
LABEL_124:
    ;
  }
  v64 = v75.i64[0];
  v75.i64[0] += ((v75.i32[2] + 7) >> 3) - (unint64_t)((v75.i32[2] + 6) >> 3);
  --v75.i32[2];
  if (j)
    goto LABEL_124;
  v34 = v63 - 21;
  if (v63 >= 0x15)
    v75.i64[0] = v64 + ((v63 + 7) >> 3) - ((v63 - 14) >> 3);
  else
    v34 = -1;
LABEL_29:
  if (v33 | v32)
  {
    if (v34 < 1)
    {
      v34 = -1;
    }
    else
    {
      v75.i64[0] += (int)(((v34 + 7) >> 3) - ((v34 + 6) >> 3));
      --v34;
    }
  }
  if (v34 >= 1)
  {
    v35 = (unsigned __int8 *)(v75.i64[0] + (int)(((v34 + 7) >> 3) - ((v34 + 6) >> 3)));
    v75.i64[0] = (uint64_t)v35;
    v75.i8[12] = 0;
    v36 = v34 - 2;
    v75.i32[2] = v34 - 2;
    if (v34 != 1)
    {
      if ((v36 & 7) != 0)
      {
        v37 = *v35 >> (v36 & 7);
      }
      else
      {
        v75.i64[0] = (uint64_t)(v35 + 1);
        LOBYTE(v37) = *v35++;
      }
      if ((v37 & 1) != 0)
      {
        v75.i8[12] = 0;
        if (v34 == 2)
        {
          v40 = -1;
        }
        else
        {
          v40 = v34 - 3;
          v75.i64[0] = (uint64_t)&v35[((v34 + 5) >> 3) - ((v34 + 4) >> 3)];
        }
        v75.i32[2] = v40;
        webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
        webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
        webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
        webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
        v39 = webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
        result = webrtc::BitstreamReader::ReadExponentialGolomb(&v75);
        v36 = v75.i32[2];
      }
      else
      {
        v39 = 0;
      }
      if ((v36 & 0x80000000) == 0)
      {
        *(_OWORD *)a6 = v66;
        *(_OWORD *)(a6 + 16) = v67;
        *(_OWORD *)(a6 + 32) = v68;
        *(_DWORD *)(a6 + 48) = v69;
        *(_BYTE *)(a6 + 52) = v15;
        *(_BYTE *)(a6 + 53) = v18;
        *(_BYTE *)(a6 + 54) = v17;
        *(_BYTE *)(a6 + 55) = v37 & 1;
        v25 = 1;
        *(_QWORD *)(a6 + 56) = v39;
        goto LABEL_57;
      }
    }
  }
LABEL_56:
  v25 = 0;
  *(_BYTE *)a6 = 0;
LABEL_57:
  *(_BYTE *)(a6 + 64) = v25;
  return result;
}

uint64_t webrtc::ComputeH264ReorderSizeFromSPS(uint64_t a1)
{
  int v3;
  int v4;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_DWORD *)(a1 + 36) == 2)
    return 0;
  v3 = *(unsigned __int8 *)(a1 + 52);
  v4 = *(unsigned __int8 *)(a1 + 53);
  if (v3 != 77 && v3 != 66 || v4 != 11 || *(_BYTE *)(a1 + 54) == 0)
  {
    v8 = v4 - 10;
    v9 = 396;
    switch(v8)
    {
      case 0:
        break;
      case 1:
        v9 = 900;
        break;
      case 2:
      case 3:
      case 10:
        v9 = 2376;
        break;
      case 11:
        v9 = 4752;
        break;
      case 12:
      case 20:
        v9 = 8100;
        break;
      case 21:
        v9 = 18000;
        break;
      case 22:
        v9 = 20480;
        break;
      case 30:
      case 31:
        v9 = 0x8000;
        break;
      case 32:
        v9 = 34816;
        break;
      case 40:
        v9 = 110400;
        break;
      case 41:
      case 42:
        v9 = 184320;
        break;
      default:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
        v9 = 0;
        break;
    }
  }
  else
  {
    v9 = 396;
  }
  v10 = v9
      / ((2 - *(_DWORD *)(a1 + 24) + (2 - *(_DWORD *)(a1 + 24)) * *(_DWORD *)(a1 + 4))
       * (unint64_t)(*(_DWORD *)a1 + 1));
  v11 = 16;
  if (v10 < 0x10)
    v11 = v10;
  if (*(_BYTE *)(a1 + 55))
  {
    v12 = *(_QWORD *)(a1 + 56);
    if (v12 >= v11)
      LOBYTE(v12) = v11;
    return v12;
  }
  else
  {
    if (*(_BYTE *)(a1 + 54))
    {
      v13 = *(unsigned __int8 *)(a1 + 52);
      if ((v13 - 86) <= 0x24 && ((1 << (v13 - 86)) & 0x1001004001) != 0)
        return 0;
      if (v13 == 44 || v13 == 244)
        return 0;
    }
    return v11;
  }
}

uint64_t webrtc::ComputeH264ReorderSizeFromAVC(webrtc *this, size_t __sz, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  void *__p;
  void *v22;
  char *v23;
  _BYTE v24[72];

  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      goto LABEL_26;
    v10 = (char *)operator new(__sz);
    memcpy(v10, this, __sz);
    v11 = __sz;
    if (&v10[__sz] == v10)
      v12 = 0;
    else
      v12 = v10;
    if (((__sz >> 28) & 0x1FFFFFFFFLL) != 0)
    {
      rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, (uint64_t)__p);
      goto LABEL_14;
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
  }
  v13 = 8 * v11;
  if (v13 < 0x29)
    goto LABEL_22;
  v14 = 0;
  if (v13 >= 0x30)
  {
    v15 = &v12[(v13 >> 3) - ((v13 - 33) >> 3)];
    if ((*v15 & 0x1F) != 0)
    {
      if ((v13 & 0xFFFFFFF0) == 0x30)
        goto LABEL_22;
LABEL_14:
      v16 = __rev16(*(unsigned __int16 *)(v15 + 1));
      if ((int)(v13 - 64) >= 8 * (int)v16 + 8)
      {
        __p = 0;
        v22 = 0;
        v23 = 0;
        if ((_DWORD)v16 == 1)
          goto LABEL_18;
        if ((_DWORD)v16)
        {
          v17 = v16 - 1;
          v18 = (char *)operator new(v16 - 1);
          v19 = &v18[v17];
          __p = v18;
          v23 = &v18[v17];
          memcpy(v18, (char *)this + 9, v17);
          v22 = v19;
LABEL_18:
          webrtc::SpsAndVuiParser::Parse((uint64_t *)&__p, a5, a6, a7, a8, (uint64_t)v24);
          if (__p)
          {
            v22 = __p;
            operator delete(__p);
          }
          if (v24[64])
          {
            v14 = webrtc::ComputeH264ReorderSizeFromSPS((uint64_t)v24);
            goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_26:
        abort();
      }
LABEL_22:
      v14 = 0;
    }
  }
LABEL_23:
  if (v10)
    operator delete(v10);
  return v14;
}

CMFormatDescriptionRef webrtc::CreateH265VideoFormatDescription(webrtc *this, const unsigned __int8 *a2)
{
  CMFormatDescriptionRef v3;
  CMFormatDescriptionRef v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CMFormatDescriptionRef v15;
  CMFormatDescriptionRef formatDescriptionOut;
  const opaqueCMFormatDescription *v18;
  size_t parameterSetSizes;
  uint64_t v20;
  uint64_t v21;
  uint8_t *parameterSetPointers;
  char *v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  parameterSetPointers = 0;
  v23 = 0;
  v24 = 0;
  parameterSetSizes = 0;
  v20 = 0;
  v21 = 0;
  webrtc::H264::FindNaluIndices(this, a2, (char **)&formatDescriptionOut);
  v3 = formatDescriptionOut;
  if (formatDescriptionOut != v18)
  {
    v4 = formatDescriptionOut;
    while (1)
    {
      v5 = *((_QWORD *)v4 + 2);
      if (v5)
      {
        v6 = *((_QWORD *)v4 + 1);
        if ((*((_BYTE *)this + v6) & 0x7E) == 0x40)
          break;
      }
      v4 = (CMFormatDescriptionRef)((char *)v4 + 24);
      if (v4 == v18)
        goto LABEL_18;
    }
    parameterSetPointers = 0;
    parameterSetSizes = 0;
    if (v4 == v18)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_18;
      goto LABEL_17;
    }
    parameterSetPointers = (uint8_t *)this + v6;
    v23 = 0;
    parameterSetSizes = v5;
    v20 = 0;
    if ((CMFormatDescriptionRef)((char *)v4 + 24) == v18)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_18;
      goto LABEL_17;
    }
    v23 = (char *)this + *((_QWORD *)v4 + 4);
    v7 = *((_QWORD *)v4 + 5);
    v24 = 0;
    v20 = v7;
    v21 = 0;
    if ((CMFormatDescriptionRef)((char *)v4 + 48) == v18)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_18;
      goto LABEL_17;
    }
    v24 = (char *)this + *((_QWORD *)v4 + 7);
    v21 = *((_QWORD *)v4 + 8);
    formatDescriptionOut = 0;
    if (!CMVideoFormatDescriptionCreateFromHEVCParameterSets((CFAllocatorRef)*MEMORY[0x24BDBD240], 3uLL, (const uint8_t *const *)&parameterSetPointers, &parameterSetSizes, 4, 0, &formatDescriptionOut))
    {
      v15 = formatDescriptionOut;
      if (!v3)
        return v15;
      goto LABEL_19;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_17:
      rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/nalu_rewriter.cc");
  }
LABEL_18:
  v15 = 0;
  if (v3)
LABEL_19:
    operator delete(v3);
  return v15;
}

uint64_t rtc::inet_pton(int a1, char *__src, size_t __len, void *a4)
{
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  void **v13;
  uint64_t v14;
  void *__p[2];
  int64_t v17;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_20:
    abort();
  if (__len > 0x16)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = (char *)operator new(v9 + 1);
    __p[1] = (void *)__len;
    v17 = v10 | 0x8000000000000000;
    __p[0] = v8;
  }
  else
  {
    HIBYTE(v17) = __len;
    v8 = (char *)__p;
  }
  v11 = &v8[__len];
  if (v8 <= __src && v11 > __src)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (__len)
    memmove(v8, __src, __len);
  *v11 = 0;
  if (v17 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  v14 = inet_pton(a1, (const char *)v13, a4);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  return v14;
}

unint64_t webrtc::NetEq::Config::ToString@<X0>(webrtc::NetEq::Config *this@<X0>, char *a2@<X8>)
{
  size_t v4;
  size_t v5;
  size_t v6;
  unint64_t v7;
  const char *v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  const char *v12;
  size_t v13;
  size_t v14;
  unint64_t v15;
  const char *v16;
  size_t v17;
  char *v18;
  unint64_t result;
  size_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *__s;
  __int128 v25;
  char v26[1024];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  __s = v26;
  strcpy(v26, "sample_rate_hz=");
  v25 = xmmword_208F09F90;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *(_DWORD *)this);
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 0x18uLL)
    v4 = 24;
  else
    v4 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], ", max_packets_in_buffer=", v4);
  *((_QWORD *)&v25 + 1) += v4;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lu", *((_QWORD *)this + 1));
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 0xFuLL)
    v5 = 15;
  else
    v5 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], ", min_delay_ms=", v5);
  *((_QWORD *)&v25 + 1) += v5;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 5));
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 0x19uLL)
    v6 = 25;
  else
    v6 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], ", enable_fast_accelerate=", v6);
  *((_QWORD *)&v25 + 1) += v6;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  if (*((_BYTE *)this + 24))
    v7 = 4;
  else
    v7 = 5;
  if (*((_BYTE *)this + 24))
    v8 = "true";
  else
    v8 = "false";
  if (v7 >= (_QWORD)v25 + ~*((_QWORD *)&v25 + 1))
    v9 = v25 + ~*((_QWORD *)&v25 + 1);
  else
    v9 = v7;
  memcpy(&__s[*((_QWORD *)&v25 + 1)], v8, v9);
  *((_QWORD *)&v25 + 1) += v9;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 0x15uLL)
    v10 = 21;
  else
    v10 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], ", enable_muted_state=", v10);
  *((_QWORD *)&v25 + 1) += v10;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  if (*((_BYTE *)this + 25))
    v11 = 4;
  else
    v11 = 5;
  if (*((_BYTE *)this + 25))
    v12 = "true";
  else
    v12 = "false";
  if (v11 >= (_QWORD)v25 + ~*((_QWORD *)&v25 + 1))
    v13 = v25 + ~*((_QWORD *)&v25 + 1);
  else
    v13 = v11;
  memcpy(&__s[*((_QWORD *)&v25 + 1)], v12, v13);
  *((_QWORD *)&v25 + 1) += v13;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 0x16uLL)
    v14 = 22;
  else
    v14 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], ", enable_rtx_handling=", v14);
  *((_QWORD *)&v25 + 1) += v14;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  if (*((_BYTE *)this + 26))
    v15 = 4;
  else
    v15 = 5;
  if (*((_BYTE *)this + 26))
    v16 = "true";
  else
    v16 = "false";
  if (v15 >= (_QWORD)v25 + ~*((_QWORD *)&v25 + 1))
    v17 = v25 + ~*((_QWORD *)&v25 + 1);
  else
    v17 = v15;
  memcpy(&__s[*((_QWORD *)&v25 + 1)], v16, v17);
  *((_QWORD *)&v25 + 1) += v17;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  v18 = __s;
  if (!__s)
  {
LABEL_55:
    __break(1u);
LABEL_56:
    abort();
  }
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_56;
  v20 = result;
  if (result <= 0x16)
  {
    a2[23] = result;
    v21 = &a2[result];
    if (a2 > v18)
      goto LABEL_52;
    goto LABEL_51;
  }
  v22 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((result | 7) != 0x17)
    v22 = result | 7;
  v23 = v22 + 1;
  result = (unint64_t)operator new(v22 + 1);
  *((_QWORD *)a2 + 1) = v20;
  *((_QWORD *)a2 + 2) = v23 | 0x8000000000000000;
  *(_QWORD *)a2 = result;
  a2 = (char *)result;
  v21 = (char *)(result + v20);
  if (result <= (unint64_t)v18)
  {
LABEL_51:
    if (v21 <= v18)
      goto LABEL_52;
    goto LABEL_55;
  }
LABEL_52:
  if (v20)
    result = (unint64_t)memmove(a2, v18, v20);
  *v21 = 0;
  return result;
}

_QWORD *webrtc::NetEqImpl::Dependencies::Dependencies(_QWORD *a1, uint64_t a2, uint64_t a3, void (****a4)(_QWORD), uint64_t a5)
{
  uint64_t v10;
  webrtc::StatisticsCalculator *v11;
  uint64_t v12;
  __int128 v13;
  void (***v14)(_QWORD);
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  __int128 v30;
  _BYTE v31[4];
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  *a1 = a3;
  v10 = operator new();
  *(_QWORD *)v10 = 0;
  *(_DWORD *)(v10 + 8) = 10;
  a1[1] = v10;
  v11 = (webrtc::StatisticsCalculator *)operator new();
  a1[2] = webrtc::StatisticsCalculator::StatisticsCalculator(v11);
  v12 = operator new();
  v13 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)v12 = &off_24C0B2E10;
  *(_QWORD *)(v12 + 8) = v12 + 16;
  *(_QWORD *)(v12 + 32) = -1;
  v14 = *a4;
  *(_QWORD *)(v12 + 40) = 0;
  *(_QWORD *)(v12 + 48) = v14;
  if (v14)
  {
    v30 = v13;
    (**v14)(v14);
    v13 = v30;
  }
  *(_OWORD *)(v12 + 56) = v13;
  a1[3] = v12;
  v15 = operator new();
  v16 = *(_DWORD *)a2;
  *(_QWORD *)v15 = &off_24C0B3660;
  *(_QWORD *)(v15 + 16) = v15 + 16;
  *(_QWORD *)(v15 + 24) = v15 + 16;
  *(_QWORD *)(v15 + 32) = 0;
  if (v16 <= 31999)
  {
    if (v16 != 8000 && v16 != 16000)
      goto LABEL_10;
LABEL_9:
    *(_DWORD *)(v15 + 8) = 7 * v16 / 0x64u;
    *(_DWORD *)(v15 + 12) = (unsigned __int16)v16 / 0x64u;
    goto LABEL_10;
  }
  if (v16 == 48000 || v16 == 32000)
    goto LABEL_9;
LABEL_10:
  a1[4] = v15;
  v17 = operator new();
  *(_QWORD *)v17 = &unk_24C0B37A8;
  *(_BYTE *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_DWORD *)(v17 + 12) = 0;
  a1[5] = v17;
  v18 = operator new();
  v19 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v18 = &off_24C0B8728;
  *(_QWORD *)(v18 + 8) = v19;
  *(_QWORD *)(v18 + 16) = v18 + 16;
  *(_QWORD *)(v18 + 24) = v18 + 16;
  *(_QWORD *)(v18 + 32) = 0;
  v20 = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(v18 + 40) = v20;
  a1[6] = v18;
  v21 = *(_DWORD *)(a2 + 20);
  v22 = *(_BYTE *)(a2 + 48) ^ 1;
  v32 = v19;
  v33 = v21;
  v31[0] = v22;
  v34 = v20;
  v35 = a3;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a5 + 16))(a5, v31);
  v23 = (_QWORD *)operator new();
  *v23 = &unk_24C0BB3A0;
  a1[8] = v23;
  v24 = operator new();
  v25 = a1[3];
  *(_QWORD *)v24 = &unk_24C0C25A0;
  *(_BYTE *)(v24 + 8) = 0;
  *(_OWORD *)(v24 + 12) = xmmword_208F08AB0;
  *(_QWORD *)(v24 + 32) = v25;
  a1[9] = v24;
  v26 = (_QWORD *)operator new();
  *v26 = &unk_24C0ACA70;
  a1[10] = v26;
  v27 = (_QWORD *)operator new();
  *v27 = &unk_24C0B3DE8;
  a1[11] = v27;
  v28 = (_QWORD *)operator new();
  *v28 = &unk_24C0BADF0;
  a1[12] = v28;
  return a1;
}

void webrtc::NetEqImpl::Dependencies::~Dependencies(webrtc::NetEqImpl::Dependencies *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
    MEMORY[0x20BD0ADEC](v13, 0x1000C40D9A13B51);
}

uint64_t webrtc::NetEqImpl::NetEqImpl(uint64_t a1, unsigned int *a2, _QWORD *a3, int a4)
{
  pthread_mutex_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  pthread_mutexattr_t v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0B75C8;
  *(_QWORD *)(a1 + 8) = *a3;
  v8 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutexattr_init(&v48);
  pthread_mutexattr_setpolicy_np(&v48, 3);
  pthread_mutex_init(v8, &v48);
  pthread_mutexattr_destroy(&v48);
  v9 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a1 + 80) = v9;
  v10 = a3[3];
  a3[3] = 0;
  *(_QWORD *)(a1 + 88) = v10;
  v11 = a3[4];
  a3[4] = 0;
  *(_QWORD *)(a1 + 96) = v11;
  v12 = a3[5];
  a3[5] = 0;
  *(_QWORD *)(a1 + 104) = v12;
  v13 = a3[6];
  a3[6] = 0;
  *(_QWORD *)(a1 + 112) = v13;
  v14 = a3[8];
  a3[8] = 0;
  *(_QWORD *)(a1 + 120) = v14;
  v15 = a3[9];
  a3[9] = 0;
  *(_QWORD *)(a1 + 128) = v15;
  v16 = a3[11];
  a3[11] = 0;
  *(_QWORD *)(a1 + 136) = v16;
  v17 = a3[10];
  a3[10] = 0;
  *(_QWORD *)(a1 + 144) = v17;
  v18 = a3[12];
  a3[12] = 0;
  *(_QWORD *)(a1 + 152) = v18;
  v19 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a1 + 160) = v19;
  *(_QWORD *)(a1 + 168) = 0;
  v20 = a3[7];
  a3[7] = 0;
  *(_QWORD *)(a1 + 176) = v20;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 777;
  *(_WORD *)(a1 + 244) = 1;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 300) = 0;
  *(_QWORD *)(a1 + 304) = 5760;
  *(_QWORD *)(a1 + 312) = operator new[]();
  *(_DWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 324) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_WORD *)(a1 + 336) = 256;
  *(_BYTE *)(a1 + 338) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 353) = *((_BYTE *)a2 + 25);
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  v21 = *(_QWORD *)(a1 + 80);
  v22 = (char *)operator new(0x20uLL);
  *(_QWORD *)(a1 + 392) = v22;
  *(_OWORD *)(a1 + 400) = xmmword_208F05710;
  if (v22 <= "WebRTC.Audio.ExpandRatePercent" && v22 + 30 > "WebRTC.Audio.ExpandRatePercent")
    goto LABEL_20;
  strcpy(v22, "WebRTC.Audio.ExpandRatePercent");
  *(_DWORD *)(a1 + 416) = 10;
  *(_QWORD *)(a1 + 424) = v21;
  v23 = 10000 / *(_DWORD *)(v21 + 8);
  v24 = (_QWORD *)operator new();
  v25 = (_QWORD *)operator new();
  *v25 = v21;
  v25[1] = *(_QWORD *)v21;
  *v24 = v25;
  v24[1] = v23;
  *(_QWORD *)(a1 + 432) = v24;
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  v26 = *(_QWORD *)(a1 + 80);
  v27 = (char *)operator new(0x28uLL);
  *(_QWORD *)(a1 + 472) = v27;
  *(_OWORD *)(a1 + 480) = xmmword_208F08620;
  if (v27 <= "WebRTC.Audio.SpeechExpandRatePercent" && v27 + 36 > "WebRTC.Audio.SpeechExpandRatePercent")
LABEL_20:
    __break(1u);
  strcpy(v27, "WebRTC.Audio.SpeechExpandRatePercent");
  *(_DWORD *)(a1 + 496) = 10;
  *(_QWORD *)(a1 + 504) = v26;
  v28 = 10000 / *(_DWORD *)(v26 + 8);
  v29 = (_QWORD *)operator new();
  v30 = (_QWORD *)operator new();
  *v30 = v26;
  v30[1] = *(_QWORD *)v26;
  *v29 = v30;
  v29[1] = v28;
  *(_QWORD *)(a1 + 512) = v29;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_DWORD *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 552) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    webrtc::NetEq::Config::ToString((webrtc::NetEq::Config *)a2, (char *)&v48);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
    if (v49 < 0)
    {
      operator delete((void *)v48.__sig);
      v38 = *a2;
      if ((int)v38 <= 31999)
        goto LABEL_8;
LABEL_12:
      if ((_DWORD)v38 == 32000 || (_DWORD)v38 == 48000)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  v38 = *a2;
  if ((int)v38 > 31999)
    goto LABEL_12;
LABEL_8:
  if ((_DWORD)v38 == 8000 || (_DWORD)v38 == 16000)
    goto LABEL_17;
LABEL_14:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
  v38 = 8000;
LABEL_17:
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 176) + 56))(*(_QWORD *)(a1 + 176), a2[4]);
  *(_DWORD *)(a1 + 256) = v38;
  v46 = (unsigned __int16)v38 / 0x1F40u;
  *(_DWORD *)(a1 + 260) = v46;
  *(_DWORD *)(a1 + 264) = v38;
  *(_QWORD *)(a1 + 272) = 80 * v46;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 48))(*(_QWORD *)(a1 + 176), v38);
  *(_QWORD *)(a1 + 280) = 2 * *(_QWORD *)(a1 + 272);
  if (a4)
    webrtc::NetEqImpl::SetSampleRateAndChannels((webrtc::NetEqImpl *)a1, v38, 1uLL);
  return a1;
}

void webrtc::NetEqImpl::SetSampleRateAndChannels(webrtc::NetEqImpl *this, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  webrtc::AudioMultiVector *v20;
  uint64_t v21;
  webrtc::AudioMultiVector *v22;
  uint64_t v23;
  webrtc::AudioMultiVector *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  _WORD *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::string *v67;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
  v13 = *((_QWORD *)this + 20);
  v14 = 1000 * (*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 264)) / (unint64_t)*((int *)this + 64);
  if ((int)v14 >= 150 && *(_BYTE *)(v13 + 504))
  {
    v15 = *(_DWORD *)(v13 + 148) + v14;
    ++*(_DWORD *)(v13 + 144);
    *(_DWORD *)(v13 + 148) = v15;
    v16 = atomic_load(&webrtc::StatisticsCalculator::EndExpandEvent(int)::atomic_histogram_pointer);
    if (v16)
    {
      webrtc::metrics::HistogramAdd(v16, v14);
    }
    else
    {
      while (!__ldaxr(&webrtc::StatisticsCalculator::EndExpandEvent(int)::atomic_histogram_pointer))
      {
        if (!__stlxr(0, &webrtc::StatisticsCalculator::EndExpandEvent(int)::atomic_histogram_pointer))
          goto LABEL_10;
      }
      __clrex();
    }
  }
LABEL_10:
  *(_QWORD *)(v13 + 264) = *(_QWORD *)(v13 + 16);
  *((_DWORD *)this + 64) = a2;
  *((_DWORD *)this + 65) = (int)a2 / 8000;
  v18 = 80 * ((int)a2 / 8000);
  *((_QWORD *)this + 34) = v18;
  *((_QWORD *)this + 35) = 3 * v18;
  *((_DWORD *)this + 72) = 0;
  v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 96))(*((_QWORD *)this + 11));
  if (v19)
  {
    *(_DWORD *)v19 = 7777;
    *(_OWORD *)(v19 + 4) = 0u;
    *(_OWORD *)(v19 + 20) = 0u;
    *(_OWORD *)(v19 + 36) = 0u;
    *(_OWORD *)(v19 + 52) = 0u;
    *(_OWORD *)(v19 + 68) = 0u;
    *(_OWORD *)(v19 + 84) = 0u;
    *(_OWORD *)(v19 + 100) = 0u;
    *(_DWORD *)(v19 + 116) = 5;
    *(_WORD *)(v19 + 120) = 0;
  }
  v20 = (webrtc::AudioMultiVector *)operator new();
  webrtc::AudioMultiVector::AudioMultiVector(v20, a3);
  v21 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = (webrtc::AudioMultiVector *)operator new();
  v23 = 8640 * *((int *)this + 65);
  v24 = webrtc::AudioMultiVector::AudioMultiVector(v22, a3, v23);
  *(_QWORD *)v24 = &unk_24C0C1F20;
  *((_QWORD *)v24 + 5) = v23;
  *((_DWORD *)v24 + 12) = 0;
  *((_QWORD *)v24 + 7) = 0;
  v25 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v22;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = operator new();
  *(_QWORD *)v26 = &off_24C0AF250;
  *(_QWORD *)(v26 + 8) = a3;
  is_mul_ok(a3, 0x38uLL);
  v27 = operator new[]();
  if (a3)
  {
    v28.n128_u64[0] = 2500;
    v29 = v27;
    do
    {
      *(_QWORD *)v29 = 2500;
      *(_DWORD *)(v29 + 8) = 500000;
      *(_OWORD *)(v29 + 28) = 0uLL;
      *(_OWORD *)(v29 + 12) = 0uLL;
      *(_QWORD *)(v29 + 42) = 0;
      *(_WORD *)(v29 + 32) = 4096;
      *(_DWORD *)(v29 + 50) = 1310720000;
      *(_WORD *)(v29 + 54) = 24;
      v29 += 56;
    }
    while (v29 != v27 + 56 * a3);
    *(_QWORD *)(v26 + 16) = v27;
    *(_BYTE *)(v26 + 24) = 0;
    v30 = (_WORD *)(v27 + 54);
    v31 = a3;
    do
    {
      *(_QWORD *)(v30 - 27) = 2500;
      *(_DWORD *)(v30 - 23) = 500000;
      *(_OWORD *)(v30 - 13) = 0uLL;
      *(_OWORD *)(v30 - 21) = 0uLL;
      *(_QWORD *)(v30 - 6) = 0;
      *(v30 - 11) = 4096;
      *((_DWORD *)v30 - 1) = 1310720000;
      *v30 = 24;
      v30 += 28;
      --v31;
    }
    while (v31);
    v32 = *((_QWORD *)this + 21);
    *((_QWORD *)this + 21) = v26;
    if (!v32)
      goto LABEL_23;
    goto LABEL_22;
  }
  *(_QWORD *)(v26 + 16) = v27;
  *(_BYTE *)(v26 + 24) = 0;
  v32 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v26;
  if (v32)
LABEL_22:
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v32 + 8))(v32, v28);
LABEL_23:
  *((_DWORD *)this + 60) = 777;
  *((_WORD *)this + 122) = 1;
  (*(void (**)(webrtc::NetEqImpl *, uint64_t, unint64_t, __n128))(*(_QWORD *)this + 216))(this, a2, a3, v28);
  v33 = (_QWORD *)*((_QWORD *)this + 24);
  v34 = v33[5];
  v35 = v34 - (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 25) + 48))(*((_QWORD *)this + 25));
  v36 = (*(uint64_t (**)(_QWORD *))(*v33 + 120))(v33);
  if (v36 >= v35)
    v37 = v35;
  else
    v37 = v36;
  v33[5] = v37;
  v38 = operator new();
  v43 = *((_QWORD *)this + 11);
  v44 = *((_QWORD *)this + 25);
  v46 = *((_QWORD *)this + 20);
  v45 = *((_QWORD *)this + 21);
  *(_QWORD *)v38 = &off_24C0B76B8;
  *(_DWORD *)(v38 + 8) = a2;
  *(_QWORD *)(v38 + 16) = v43;
  *(_QWORD *)(v38 + 24) = v45;
  *(_QWORD *)(v38 + 32) = v44;
  v47 = (int)a2 / 1000;
  if ((int)a2 % 1000)
  {
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v39, v40, v41, v42, ((int)a2 % 1000));
  }
  else
  {
    *(_QWORD *)(v38 + 40) = v47;
    *(_WORD *)(v38 + 48) = 0x4000uLL / v47;
    *(_QWORD *)(v38 + 56) = v46;
    v48 = *((_QWORD *)this + 26);
    *((_QWORD *)this + 26) = v38;
    if (v48)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
      v45 = *((_QWORD *)this + 21);
    }
    v49 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**((_QWORD **)this + 18) + 16))(*((_QWORD *)this + 18), a2, a3, v45);
    v50 = *((_QWORD *)this + 28);
    *((_QWORD *)this + 28) = v49;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    v51 = *((_QWORD *)this + 19);
    v52 = *((_QWORD *)this + 21);
    v53 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 25) + 48))(*((_QWORD *)this + 25));
    v54 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 16))(v51, a2, a3, v52, v53);
    v55 = *((_QWORD *)this + 29);
    *((_QWORD *)this + 29) = v54;
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    v60 = operator new();
    v61 = *((_QWORD *)this + 11);
    v62 = *((_QWORD *)this + 24);
    *(_DWORD *)v60 = a2;
    *(_BYTE *)(v60 + 4) = 1;
    *(_QWORD *)(v60 + 8) = (int)a2 / 1600;
    *(_QWORD *)(v60 + 16) = v61;
    *(_QWORD *)(v60 + 24) = v62;
    v63 = *((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = v60;
    if (v63)
      MEMORY[0x20BD0ADEC](v63, 0x1020C40E53F5F6DLL);
    if (*((_QWORD *)this + 38) < 5760 * a3)
    {
      *((_QWORD *)this + 38) = 5760 * a3;
      v64 = operator new[]();
      v65 = *((_QWORD *)this + 39);
      *((_QWORD *)this + 39) = v64;
      if (v65)
        MEMORY[0x20BD0ADD4](v65, 0x1000C80BDFB0063);
    }
    v66 = *((_QWORD *)this + 22);
    if (v66)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v66 + 48))(v66, *((unsigned int *)this + 64), *((_QWORD *)this + 34));
      return;
    }
  }
  v67 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc", 2069, "controller_", "\t", v56, v57, v58, v59, (uint64_t)"Unexpectedly found no NetEqController");
  webrtc::NetEqImpl::~NetEqImpl((webrtc::NetEqImpl *)v67);
}

void webrtc::NetEqImpl::~NetEqImpl(webrtc::NetEqImpl *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  void *v34;

  *(_QWORD *)this = &off_24C0B75C8;
  v2 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C80BDFB0063);
  v3 = (uint64_t *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v3)
  {
    v4 = *v3;
    *v3 = 0;
    if (v4)
      MEMORY[0x20BD0ADEC](v4, 0x1060C40C2E02434);
    MEMORY[0x20BD0ADEC](v3, 0x1020C40EDED9539);
  }
  if (*((char *)this + 495) < 0)
  {
    operator delete(*((void **)this + 59));
    v5 = (uint64_t *)*((_QWORD *)this + 54);
    *((_QWORD *)this + 54) = 0;
    if (!v5)
    {
LABEL_9:
      if ((*((char *)this + 415) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_64;
    }
  }
  else
  {
    v5 = (uint64_t *)*((_QWORD *)this + 54);
    *((_QWORD *)this + 54) = 0;
    if (!v5)
      goto LABEL_9;
  }
  v31 = *v5;
  *v5 = 0;
  if (v31)
    MEMORY[0x20BD0ADEC](v31, 0x1060C40C2E02434);
  MEMORY[0x20BD0ADEC](v5, 0x1020C40EDED9539);
  if ((*((char *)this + 415) & 0x80000000) == 0)
  {
LABEL_10:
    v6 = (char *)*((_QWORD *)this + 46);
    if (!v6)
      goto LABEL_11;
    goto LABEL_65;
  }
LABEL_64:
  operator delete(*((void **)this + 49));
  v6 = (char *)*((_QWORD *)this + 46);
  if (!v6)
  {
LABEL_11:
    v7 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;
    if (!v7)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_65:
  v32 = (char *)*((_QWORD *)this + 47);
  if (v32 == v6)
  {
    *((_QWORD *)this + 47) = v6;
    operator delete(v6);
    v7 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = 0;
    if (!v7)
      goto LABEL_13;
LABEL_12:
    MEMORY[0x20BD0ADEC](v7, 0x1060C40C2E02434);
    goto LABEL_13;
  }
  do
  {
    v33 = (void *)*((_QWORD *)v32 - 12);
    if (v33)
    {
      *((_QWORD *)v32 - 11) = v33;
      operator delete(v33);
    }
    v32 -= 104;
  }
  while (v32 != v6);
  v34 = (void *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 47) = v6;
  operator delete(v34);
  v7 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v7)
    goto LABEL_12;
LABEL_13:
  v8 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v8)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v8 + 56, *(_QWORD **)(v8 + 64));
    MEMORY[0x20BD0ADEC](v8, 0x1020C4066F93CF5);
  }
  v9 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v9)
    MEMORY[0x20BD0ADD4](v9, 0x1000C80BDFB0063);
  v10 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v10)
    MEMORY[0x20BD0ADEC](v10, 0x1020C40E53F5F6DLL);
  v11 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v30)
    MEMORY[0x20BD0ADEC](v30, 0x1000C40D9A13B51);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
}

{
  webrtc::NetEqImpl::~NetEqImpl(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::NetEqImpl::InsertPacket(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  pthread_mutex_t *v8;
  char v9;
  __int16 v10;
  int v11;
  void *v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  _BYTE *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char ***v35;
  uint64_t v36;
  char **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  webrtc::NetEqImpl *v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  char *v49;
  int v50;
  char *v51;
  char **v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char **v57;
  unint64_t v58;
  char v59;
  void *v60;
  char **v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char **v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD **v73;
  _QWORD **v74;
  char v75;
  char *v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  size_t v81;
  int v82;
  int v83;
  size_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char **v97;
  char *v98;
  char *v99;
  unint64_t v100;
  char **v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char **v117;
  unint64_t v118;
  int v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  _WORD *v124;
  _BYTE *v125;
  _WORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  _BOOL4 v148;
  uint64_t v149;
  webrtc::NetEqImpl *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char **v177;
  char *v178;
  _DWORD *v179;
  char **v180;
  char *v181;
  uint64_t v182;
  char **v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  char **v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  _BYTE *v195;
  pthread_mutex_t *v196;
  int v197;
  webrtc::NetEqImpl *v198;
  _OWORD *v199;
  char *__src;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  int v206;
  char v207;
  __int16 v208;
  uint64_t v209;
  _BYTE v210[40];
  _BYTE v211[56];
  __int128 v212;
  __int128 v213;
  char v214;
  char v215;
  uint64_t v216;
  _QWORD *v217;
  void *__p;
  char *v219;
  char *v220;
  char **v221;
  unint64_t v222;
  _DWORD *v223;
  char **v224;
  unint64_t v225;
  _BYTE v226[32];
  __int128 v227;
  _BYTE v228[48];
  char v229;
  uint64_t v230;

  v230 = *MEMORY[0x24BDAC8D0];
  v8 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (!a4)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\t", v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
    v33 = 4;
    goto LABEL_260;
  }
  v203 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  ++*(_QWORD *)(*(_QWORD *)(a1 + 160) + 136);
  v223 = &v223;
  v224 = (char **)&v223;
  v225 = 0;
  v9 = *(_BYTE *)(a2 + 1);
  v198 = (webrtc::NetEqImpl *)a1;
  v10 = *(_WORD *)(a2 + 2);
  v11 = *(_DWORD *)(a2 + 4);
  v12 = (void *)operator new[]();
  memcpy(v12, a3, a4);
  v13 = operator new(0xB8uLL);
  v13[4] = v11;
  *((_WORD *)v13 + 10) = v10;
  *((_BYTE *)v13 + 22) = v9;
  *((_QWORD *)v13 + 3) = a4;
  *((_QWORD *)v13 + 4) = a4;
  *((_QWORD *)v13 + 5) = v12;
  *((_QWORD *)v13 + 6) = 0;
  *((_BYTE *)v13 + 56) = 0;
  *((_BYTE *)v13 + 160) = 0;
  *((_QWORD *)v13 + 21) = 0;
  *((_QWORD *)v13 + 22) = 0;
  v14 = v223;
  *(_QWORD *)v13 = v223;
  *((_QWORD *)v13 + 1) = &v223;
  *((_QWORD *)v14 + 1) = v13;
  v223 = v13;
  ++v225;
  v15 = *((unsigned __int8 *)v198 + 337);
  if (*((_BYTE *)v198 + 337))
    (*(void (**)(_QWORD))(**((_QWORD **)v198 + 16) + 16))(*((_QWORD *)v198 + 16));
  v16 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v198 + 11) + 64))(*((_QWORD *)v198 + 11), *(unsigned __int8 *)(a2 + 1));
  if (!v16 || *(_BYTE *)(v16 + 128) != 3)
    (*(void (**)(_QWORD, _DWORD **))(**((_QWORD **)v198 + 16) + 32))(*((_QWORD *)v198 + 16), &v223);
  if (!v225)
    goto LABEL_284;
  v21 = *((_DWORD *)v224 + 4);
  v22 = *((unsigned __int16 *)v224 + 10);
  v197 = v15;
  if (v15)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)v198 + 14) + 16))(*((_QWORD *)v198 + 14));
    (*(void (**)(_QWORD))(**((_QWORD **)v198 + 12) + 16))(*((_QWORD *)v198 + 12));
    *(_DWORD *)(*((_QWORD *)v198 + 24) + 48) += v21 - *((_DWORD *)v198 + 82);
    *((_DWORD *)v198 + 82) = v21;
    v23 = (char *)v198 + 352;
    if (*((_BYTE *)v198 + 352))
    {
      v24 = (_QWORD *)*((_QWORD *)v198 + 43);
      v25 = (_QWORD *)v24[8];
      v24 += 8;
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(v24 - 1), v25);
      *(v24 - 1) = v24;
      *v24 = 0;
      v24[1] = 0;
      *((_WORD *)v24 - 16) = 0;
      *((_DWORD *)v24 - 7) = 0;
      *((_BYTE *)v24 - 24) = 0;
      *((_WORD *)v24 - 11) = 0;
      *((_DWORD *)v24 - 5) = 0;
      *((_BYTE *)v24 - 16) = 0;
      *((_DWORD *)v24 - 3) = 48;
LABEL_15:
      webrtc::NackTracker::UpdateLastReceivedPacket(*((uint64_t ***)v198 + 43), v22, v21);
    }
  }
  else
  {
    v23 = (char *)v198 + 352;
    if (*((_BYTE *)v198 + 352))
      goto LABEL_15;
  }
  v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v198 + 11) + 64))(*((_QWORD *)v198 + 11), *(unsigned __int8 *)(a2 + 1));
  if (v34 && *(_BYTE *)(v34 + 128) == 3)
  {
    if (!(*(unsigned int (**)(_QWORD, _DWORD **))(**((_QWORD **)v198 + 15) + 16))(*((_QWORD *)v198 + 15), &v223))
    {
      v33 = 15;
      goto LABEL_258;
    }
    (*(void (**)(_QWORD, _DWORD **, _QWORD))(**((_QWORD **)v198 + 15) + 24))(*((_QWORD *)v198 + 15), &v223, *((_QWORD *)v198 + 11));
    if (!v225)
    {
      v33 = 15;
      goto LABEL_260;
    }
  }
  v35 = &v224;
  v36 = *((_QWORD *)v198 + 11);
  while (1)
  {
    v37 = *v35;
    if (*v35 == (char **)&v223)
      break;
    v35 = (char ***)(v37 + 1);
    if (!(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v36 + 64))(v36, *((unsigned __int8 *)v37 + 22)))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/decoder_database.cc");
      v33 = 2;
      goto LABEL_258;
    }
  }
  v45 = v198;
  v46 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v198 + 11) + 64))(*((_QWORD *)v198 + 11), *(unsigned __int8 *)(a2 + 1));
  if (v46)
  {
    if (*(_BYTE *)(v46 + 128) == 3)
    {
      (*(void (**)(_QWORD, _DWORD **))(**((_QWORD **)v198 + 16) + 32))(*((_QWORD *)v198 + 16), &v223);
      if (!v225)
        goto LABEL_284;
    }
  }
  v47 = v224;
  if (v224 != (char **)&v223)
  {
    do
    {
      while (1)
      {
        v48 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v198 + 11) + 64))(*((_QWORD *)v198 + 11), *((unsigned __int8 *)v47 + 22));
        if (v48)
        {
          if (*(_BYTE *)(v48 + 128) == 2)
            break;
        }
        v47 = (char **)v47[1];
        if (v47 == (char **)&v223)
          goto LABEL_48;
      }
      v210[8] = 0;
      v209 = 0;
      *(_QWORD *)v210 = 0;
      v49 = v47[5];
      if (!v49)
        goto LABEL_285;
      if ((unint64_t)v47[3] <= 3)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v154, v155, v156, v157, v158, v159, v160, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/dtmf_buffer.cc");
        v33 = 11;
        goto LABEL_258;
      }
      v50 = *((_DWORD *)v47 + 4);
      HIDWORD(v209) = *v49;
      v210[8] = v49[1] >> 7;
      *(_DWORD *)v210 = v49[1] & 0x3F;
      *(_DWORD *)&v210[4] = __rev16(*((unsigned __int16 *)v49 + 1));
      LODWORD(v209) = v50;
      if ((*(unsigned int (**)(_QWORD, uint64_t *))(**((_QWORD **)v198 + 12) + 24))(*((_QWORD *)v198 + 12), &v209))
      {
        v33 = 12;
        goto LABEL_258;
      }
      if (v47 == (char **)&v223)
        goto LABEL_284;
      v51 = *v47;
      v52 = (char **)v47[1];
      *((_QWORD *)v51 + 1) = v52;
      *(_QWORD *)v47[1] = v51;
      --v225;
      v53 = v47[22];
      v47[22] = 0;
      if (v53)
        (*(void (**)(char *))(*(_QWORD *)v53 + 8))(v53);
      v54 = v47[21];
      v47[21] = 0;
      if (v54)
        MEMORY[0x20BD0ADEC](v54, 0x1060C40C2E02434);
      if (*((_BYTE *)v47 + 160))
      {
        v55 = v47[8];
        if (v55)
        {
          v47[9] = v55;
          operator delete(v55);
        }
      }
      v56 = v47[5];
      v47[5] = 0;
      if (v56)
        MEMORY[0x20BD0ADD4](v56, 0x1000C8077774924);
      operator delete(v47);
      v47 = v52;
    }
    while (v52 != (char **)&v223);
  }
LABEL_48:
  v57 = &v220;
  v220 = (char *)&v220;
  v221 = &v220;
  v222 = 0;
  v58 = v225;
  v195 = v23;
  v196 = v8;
  if (!v225)
    goto LABEL_139;
  v59 = 0;
  __src = (char *)(a2 + 16);
  v199 = (_OWORD *)(a2 + 112);
  do
  {
    while (1)
    {
      v61 = v224;
      v62 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v45 + 11) + 64))(*((_QWORD *)v45 + 11), *((unsigned __int8 *)v224 + 22));
      if (!v62)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v110, v111, v112, v113, v114, v115, v116, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
        v33 = 2;
        v8 = v196;
        goto LABEL_256;
      }
      v63 = v62;
      if (*(_BYTE *)(v62 + 128) != 1)
      {
        v207 = *((_BYTE *)v61 + 22);
        v208 = *((_WORD *)v61 + 10);
        v68 = (unint64_t)v61[6];
        v69 = *(_QWORD *)(v62 + 112);
        if (!v69)
        {
          (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v63 + 104)
                                                                                         + 48))(&v209, *(_QWORD *)(v63 + 104), v63 + 24, *(_QWORD *)(v63 + 88), *(_QWORD *)(v63 + 96));
          v70 = v209;
          v209 = 0;
          v71 = *(_QWORD *)(v63 + 112);
          *(_QWORD *)(v63 + 112) = v70;
          if (v71)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
            v72 = v209;
            v209 = 0;
            if (v72)
              (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
          }
          v69 = *(_QWORD *)(v63 + 112);
        }
        (*(void (**)(void **__return_ptr, uint64_t, char **, _QWORD))(*(_QWORD *)v69 + 16))(&__p, v69, v61 + 3, *((unsigned int *)v61 + 4));
        v74 = (_QWORD **)__p;
        v73 = (_QWORD **)v219;
        if (__p == v219)
        {
          v100 = v225;
          if (!v225)
            goto LABEL_284;
          v101 = v224;
          v102 = *v224;
          *((_QWORD *)v102 + 1) = v224[1];
          *(_QWORD *)v101[1] = v102;
          v225 = v100 - 1;
          v103 = v101[22];
          v101[22] = 0;
          if (v103)
            (*(void (**)(char *))(*(_QWORD *)v103 + 8))(v103);
          v104 = v101[21];
          v101[21] = 0;
          if (v104)
            MEMORY[0x20BD0ADEC](v104, 0x1060C40C2E02434);
          if (*((_BYTE *)v101 + 160))
          {
            v105 = v101[8];
            if (v105)
            {
              v101[9] = v105;
              operator delete(v105);
            }
          }
          v106 = v101[5];
          v101[5] = 0;
          if (v106)
            MEMORY[0x20BD0ADD4](v106, 0x1000C8077774924);
          operator delete(v101);
LABEL_124:
          v107 = (char *)__p;
          if (__p)
          {
            v108 = v219;
            v60 = __p;
            if (v219 != __p)
            {
              do
              {
                v109 = *((_QWORD *)v108 - 1);
                *((_QWORD *)v108 - 1) = 0;
                if (v109)
                  (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
                v108 -= 16;
              }
              while (v108 != v107);
              v60 = __p;
            }
            v219 = v107;
            operator delete(v60);
          }
          v45 = v198;
          goto LABEL_53;
        }
        v201 = v68 & 0xFFFFFFFF00000000;
        v202 = HIDWORD(v68);
        v75 = 1;
        while (1)
        {
          if ((v59 & 1) != 0)
          {
            v59 = 1;
            if ((v75 & 1) != 0)
              goto LABEL_81;
          }
          else
          {
            v59 = (*(uint64_t (**)(_QWORD *))(*v74[1] + 24))(v74[1]);
            if ((v75 & 1) != 0)
            {
LABEL_81:
              v215 = 0;
              memset(v210, 0, 33);
              v216 = 0;
              v217 = 0;
              WORD2(v209) = v208;
              BYTE6(v209) = v207;
              v82 = *(_DWORD *)v74;
              LODWORD(v209) = v82;
              *(_DWORD *)&v210[24] = *((_DWORD *)v74 + 1);
              *(_DWORD *)&v210[28] = v202;
              if (v82 == *(_DWORD *)(a2 + 4))
              {
                v83 = *(_DWORD *)(a2 + 8);
                memset(&v226[8], 0, 24);
                *(_DWORD *)v226 = v83;
                LODWORD(v227) = v82;
                *((_QWORD *)&v227 + 1) = v203;
                *(_WORD *)v228 = 0;
                v228[8] = 0;
                v228[32] = 0;
                v228[40] = 0;
                v229 = 0;
                if (*(unsigned __int8 *)(a2 + 12) >= 0xFu)
                  v84 = 15;
                else
                  v84 = *(unsigned __int8 *)(a2 + 12);
                std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>(&v226[8], __src, (char *)(a2 + 4 * v84 + 16), v84);
                if (*(_BYTE *)(a2 + 360))
                {
                  if (!v228[1])
                    v228[1] = 1;
                  v228[0] = BYTE4(*(_QWORD *)(a2 + 352));
                }
                *(_OWORD *)&v228[8] = *v199;
                *(_OWORD *)&v228[17] = *(_OWORD *)(a2 + 121);
                *(_DWORD *)&v210[32] = *(_DWORD *)v226;
                if (v215)
                {
                  if (*(_QWORD *)v211)
                  {
                    *(_QWORD *)&v211[8] = *(_QWORD *)v211;
                    operator delete(*(void **)v211);
                  }
                  *(_OWORD *)v211 = *(_OWORD *)&v226[8];
                  *(_QWORD *)&v211[16] = *(_QWORD *)&v226[24];
                  v212 = *(_OWORD *)&v228[16];
                  v213 = *(_OWORD *)&v228[32];
                  v214 = v229;
                  *(_OWORD *)&v211[24] = v227;
                  *(_OWORD *)&v211[40] = *(_OWORD *)v228;
                  v85 = v217;
                  v86 = v74[1];
                  v74[1] = 0;
                  v217 = v86;
                  if (!v85)
                    goto LABEL_100;
LABEL_99:
                  (*(void (**)(_QWORD *))(*v85 + 8))(v85);
                }
                else
                {
                  *(_OWORD *)v211 = *(_OWORD *)&v226[8];
                  *(_QWORD *)&v211[16] = *(_QWORD *)&v226[24];
                  memset(&v226[8], 0, 24);
                  v212 = *(_OWORD *)&v228[16];
                  v213 = *(_OWORD *)&v228[32];
                  v214 = v229;
                  *(_OWORD *)&v211[24] = v227;
                  *(_OWORD *)&v211[40] = *(_OWORD *)v228;
                  v215 = 1;
                  v85 = v217;
                  v92 = v74[1];
                  v74[1] = 0;
                  v217 = v92;
                  if (v85)
                    goto LABEL_99;
                }
              }
              else
              {
                v91 = v74[1];
                v74[1] = 0;
                v217 = v91;
              }
LABEL_100:
              if (!v225)
                goto LABEL_284;
              webrtc::Packet::operator=((uint64_t)(v224 + 2), (int *)&v209);
              v93 = v217;
              v217 = 0;
              if (v93)
                (*(void (**)(_QWORD *))(*v93 + 8))(v93);
              v94 = v216;
              v216 = 0;
              if (v94)
                MEMORY[0x20BD0ADEC](v94, 0x1060C40C2E02434);
              if (v215 && *(_QWORD *)v211)
              {
                *(_QWORD *)&v211[8] = *(_QWORD *)v211;
                operator delete(*(void **)v211);
              }
              v95 = *(_QWORD *)&v210[16];
              *(_QWORD *)&v210[16] = 0;
              if (v95)
                MEMORY[0x20BD0ADD4](v95, 0x1000C8077774924);
              v96 = (char *)v224;
              if (&v220 != v224)
              {
                v97 = (char **)v224[1];
                if (v97 != &v220)
                {
                  v98 = *v224;
                  *((_QWORD *)v98 + 1) = v97;
                  **((_QWORD **)v96 + 1) = v98;
                  v99 = v220;
                  *((_QWORD *)v220 + 1) = v96;
                  *(_QWORD *)v96 = v99;
                  *((_QWORD *)v96 + 1) = &v220;
                  --v225;
                  v220 = v96;
                  ++v222;
                }
              }
              goto LABEL_68;
            }
          }
          v78 = *(_DWORD *)v74;
          v77 = *((unsigned int *)v74 + 1);
          v79 = *(_DWORD *)(a2 + 4);
          if (*(_DWORD *)v74 == v79)
          {
            v80 = *(_DWORD *)(a2 + 8);
            memset(v210, 0, 24);
            LODWORD(v209) = v80;
            *(_DWORD *)&v210[24] = v78;
            *(_QWORD *)&v210[32] = v203;
            *(_WORD *)v211 = 0;
            v211[8] = 0;
            v211[32] = 0;
            v211[40] = 0;
            v211[48] = 0;
            if (*(unsigned __int8 *)(a2 + 12) >= 0xFu)
              v81 = 15;
            else
              v81 = *(unsigned __int8 *)(a2 + 12);
            std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>(v210, __src, (char *)(a2 + 4 * v81 + 16), v81);
            if (*(_BYTE *)(a2 + 360))
            {
              if (!v211[1])
                v211[1] = 1;
              v211[0] = BYTE4(*(_QWORD *)(a2 + 352));
            }
            *(_OWORD *)&v211[8] = *v199;
            *(_OWORD *)&v211[17] = *(_OWORD *)(a2 + 121);
            v206 = v209;
            v204 = *(_OWORD *)v210;
            v205 = *(_QWORD *)&v210[16];
            *(_OWORD *)v226 = *(_OWORD *)&v210[24];
            *(_OWORD *)&v226[16] = *(_OWORD *)v211;
            v227 = *(_OWORD *)&v211[16];
            *(_OWORD *)v228 = *(_OWORD *)&v211[32];
            v228[16] = v211[48];
          }
          else
          {
            v206 &= 0xFFFFFF00;
          }
          v87 = v74[1];
          v74[1] = 0;
          v88 = (char *)operator new(0xB8uLL);
          *((_DWORD *)v88 + 4) = v78;
          *((_WORD *)v88 + 10) = v208;
          v88[22] = v207;
          *((_QWORD *)v88 + 3) = 0;
          *((_QWORD *)v88 + 4) = 0;
          *((_QWORD *)v88 + 5) = 0;
          *((_QWORD *)v88 + 6) = v201 | v77;
          v88[56] = 0;
          v88[160] = 0;
          if (v78 == v79)
          {
            *((_OWORD *)v88 + 4) = v204;
            v89 = *(_OWORD *)v226;
            *(_OWORD *)(v88 + 104) = *(_OWORD *)&v226[16];
            v90 = *(_OWORD *)v228;
            *(_OWORD *)(v88 + 120) = v227;
            *(_OWORD *)(v88 + 136) = v90;
            *((_DWORD *)v88 + 14) = v206;
            *((_QWORD *)v88 + 10) = v205;
            v88[152] = v228[16];
            *(_OWORD *)(v88 + 88) = v89;
            v204 = 0u;
            v88[160] = 1;
            v205 = 0;
          }
          *((_QWORD *)v88 + 21) = 0;
          *((_QWORD *)v88 + 22) = v87;
          v76 = v220;
          *(_QWORD *)v88 = v220;
          *((_QWORD *)v88 + 1) = &v220;
          *((_QWORD *)v76 + 1) = v88;
          v220 = v88;
          ++v222;
LABEL_68:
          v75 = 0;
          v74 += 2;
          if (v74 == v73)
            goto LABEL_124;
        }
      }
      v64 = (char *)v224;
      if (&v220 != v224)
      {
        v65 = (char **)v224[1];
        if (v65 != &v220)
          break;
      }
LABEL_53:
      if (!v225)
        goto LABEL_134;
    }
    v66 = *v224;
    *((_QWORD *)v66 + 1) = v65;
    **((_QWORD **)v64 + 1) = v66;
    v67 = v220;
    *((_QWORD *)v220 + 1) = v64;
    *(_QWORD *)v64 = v67;
    *((_QWORD *)v64 + 1) = &v220;
    --v225;
    v220 = v64;
    ++v222;
  }
  while (v225);
LABEL_134:
  v57 = v221;
  if (v221 == &v220)
  {
    v57 = &v220;
    v23 = v195;
    v8 = v196;
    v118 = v222;
    if (!v222)
      goto LABEL_141;
    goto LABEL_140;
  }
  v58 = 0;
  v117 = v221;
  v23 = v195;
  v8 = v196;
  do
  {
    if (!*((_DWORD *)v117 + 12))
      ++v58;
    v117 = (char **)v117[1];
  }
  while (v117 != &v220);
LABEL_139:
  v118 = v222 - v58;
  if (v222 > v58)
  {
LABEL_140:
    (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)v45 + 20) + 32))(*((_QWORD *)v45 + 20), v118);
    v57 = v221;
  }
LABEL_141:
  if (v57 == &v220)
  {
    v148 = v197 != 0;
    if (*((_BYTE *)v45 + 337))
      goto LABEL_205;
    goto LABEL_206;
  }
  v119 = 0;
  v120 = (char *)v45 + 336;
  v121 = (char *)v45 + 334;
  do
  {
    v122 = *((unsigned __int8 *)v57 + 22);
    v123 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 11) + 64))(*((_QWORD *)v45 + 11), v122);
    if (v123 && *(_BYTE *)(v123 + 128) == 1)
    {
      v124 = (_WORD *)((char *)v198 + 335);
      if (*v120)
      {
        v124 = (_WORD *)((char *)v198 + 335);
        if (*((unsigned __int8 *)v198 + 335) != (_DWORD)v122)
        {
          v125 = v121;
          v126 = (_WORD *)((char *)v198 + 335);
          if (!*v121)
            goto LABEL_162;
          goto LABEL_161;
        }
      }
      goto LABEL_189;
    }
    v127 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v45 + 11) + 64))(*((_QWORD *)v45 + 11), v122);
    if (!v127 || *(_BYTE *)(v127 + 128) != 2)
    {
      if (*v121 && *((unsigned __int8 *)v198 + 333) != (_DWORD)v122)
        goto LABEL_160;
      v124 = (_WORD *)((char *)v198 + 333);
      if (!*v120)
        goto LABEL_189;
      v128 = *((unsigned __int8 *)v198 + 335);
      v129 = *((_QWORD *)v198 + 11);
      v130 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v129 + 64))(v129, v122);
      v131 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v129 + 64))(v129, v128);
      if (v130)
        v132 = v131 == 0;
      else
        v132 = 1;
      if (v132)
        goto LABEL_160;
      v133 = v131;
      if (*(_BYTE *)(v130 + 128))
      {
        if (*(_BYTE *)(v130 + 128) == 2)
        {
          v134 = *(_DWORD *)(v130 + 48);
          v135 = *(unsigned __int8 *)(v131 + 128);
          if (!*(_BYTE *)(v131 + 128))
            goto LABEL_166;
          goto LABEL_184;
        }
      }
      else
      {
        v140 = *(_QWORD *)(v130 + 112);
        if (v140)
          goto LABEL_180;
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v130 + 104) + 48))(&v209, *(_QWORD *)(v130 + 104), v130 + 24, *(_QWORD *)(v130 + 88), *(_QWORD *)(v130 + 96));
        v140 = v209;
        v209 = 0;
        v141 = *(_QWORD *)(v130 + 112);
        *(_QWORD *)(v130 + 112) = v140;
        if (v141)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
          v142 = v209;
          v209 = 0;
          if (v142)
            (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
          v140 = *(_QWORD *)(v130 + 112);
        }
        if (v140)
        {
LABEL_180:
          v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 88))(v140);
          v135 = *(unsigned __int8 *)(v133 + 128);
          if (!*(_BYTE *)(v133 + 128))
            goto LABEL_166;
          goto LABEL_184;
        }
      }
      if (!*(_BYTE *)(v130 + 124))
        goto LABEL_284;
      v134 = *(_DWORD *)(v130 + 120);
      v135 = *(unsigned __int8 *)(v133 + 128);
      if (!*(_BYTE *)(v133 + 128))
      {
LABEL_166:
        v136 = *(_QWORD *)(v133 + 112);
        if (v136)
          goto LABEL_172;
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v133 + 104) + 48))(&v209, *(_QWORD *)(v133 + 104), v133 + 24, *(_QWORD *)(v133 + 88), *(_QWORD *)(v133 + 96));
        v136 = v209;
        v209 = 0;
        v137 = *(_QWORD *)(v133 + 112);
        *(_QWORD *)(v133 + 112) = v136;
        if (v137)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
          v138 = v209;
          v209 = 0;
          if (v138)
            (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
          v136 = *(_QWORD *)(v133 + 112);
        }
        if (v136)
        {
LABEL_172:
          v139 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v136 + 88))(v136);
          v124 = (_WORD *)((char *)v198 + 333);
          if (v134 != v139)
            goto LABEL_160;
LABEL_189:
          *v124 = v122 | 0x100;
          v45 = v198;
          goto LABEL_190;
        }
        goto LABEL_187;
      }
LABEL_184:
      if (v135 == 2)
      {
        v124 = (_WORD *)((char *)v198 + 333);
        if (v134 != *(_DWORD *)(v133 + 48))
          goto LABEL_160;
        goto LABEL_189;
      }
LABEL_187:
      if (!*(_BYTE *)(v133 + 124))
        goto LABEL_284;
      v124 = (_WORD *)((char *)v198 + 333);
      if (v134 != *(_DWORD *)(v133 + 120))
      {
LABEL_160:
        v125 = v120;
        v126 = (_WORD *)((char *)v198 + 333);
        if (!*v120)
        {
LABEL_162:
          *v126 = v122 | 0x100;
          v45 = v198;
          (*(void (**)(_QWORD))(**((_QWORD **)v198 + 14) + 16))(*((_QWORD *)v198 + 14));
          v119 = 1;
          goto LABEL_190;
        }
LABEL_161:
        *v125 = 0;
        goto LABEL_162;
      }
      goto LABEL_189;
    }
LABEL_190:
    *(_OWORD *)v210 = 0uLL;
    v209 = 0;
    v143 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v45 + 11) + 64))(*((_QWORD *)v45 + 11), *((unsigned __int8 *)v57 + 22));
    if (v143)
    {
      v210[6] = *(unsigned __int8 *)(v143 + 128) - 1 < 2;
      v144 = v57[22];
      if (!v144)
        goto LABEL_195;
    }
    else
    {
      v210[6] = 0;
      v144 = v57[22];
      if (!v144)
      {
LABEL_195:
        v209 = *((_QWORD *)v45 + 35);
        *(_DWORD *)v210 = *((_DWORD *)v57 + 4);
        *(_WORD *)&v210[4] = *((_WORD *)v57 + 10);
        goto LABEL_196;
      }
    }
    v145 = (*(uint64_t (**)(char *))(*(_QWORD *)v144 + 16))(v144);
    v144 = v57[22];
    v209 = v145;
    *(_DWORD *)v210 = *((_DWORD *)v57 + 4);
    *(_WORD *)&v210[4] = *((_WORD *)v57 + 10);
    if (v144)
      LOBYTE(v144) = (*(uint64_t (**)(char *))(*(_QWORD *)v144 + 24))(v144);
LABEL_196:
    v210[7] = (_BYTE)v144;
    v146 = (*(uint64_t (**)(_QWORD, char **))(**((_QWORD **)v45 + 14) + 32))(*((_QWORD *)v45 + 14), v57 + 2);
    if (v146 == 1)
    {
      v119 = 1;
    }
    else if (v146)
    {
      v33 = 1;
      v8 = v196;
      goto LABEL_256;
    }
    v210[8] = v119;
    v147 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t *))(**((_QWORD **)v45 + 22) + 120))(*((_QWORD *)v45 + 22), *((unsigned int *)v45 + 64), (*((_BYTE *)v45 + 324) == 0) & (v119 ^ 1u), &v209);
    if ((v147 & 0xFF00000000) != 0)
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v45 + 20) + 40))(*((_QWORD *)v45 + 20), (int)v147);
    v57 = (char **)v57[1];
  }
  while (v57 != &v220);
  v148 = v197 != 0;
  v8 = v196;
  if ((v119 & 1) != 0)
  {
    v148 = 1;
    *((_BYTE *)v45 + 324) = 1;
  }
  v23 = v195;
  if (*((_BYTE *)v45 + 337))
  {
LABEL_205:
    *((_BYTE *)v45 + 337) = 0;
    *((_BYTE *)v45 + 324) = 1;
  }
LABEL_206:
  if (!v148 || ((*(uint64_t (**)(_QWORD))(**((_QWORD **)v45 + 14) + 24))(*((_QWORD *)v45 + 14)) & 1) != 0)
    goto LABEL_255;
  v149 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v45 + 14) + 56))(*((_QWORD *)v45 + 14));
  v150 = v45;
  v151 = *(unsigned __int8 *)(v149 + 6);
  v152 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v150 + 11) + 64))(*((_QWORD *)v150 + 11), v151);
  if (v152 && *(_BYTE *)(v152 + 128) == 1)
  {
    v153 = 1;
  }
  else
  {
    v161 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v198 + 11) + 64))(*((_QWORD *)v198 + 11), v151);
    v162 = *(_QWORD *)(v161 + 112);
    if (!v162)
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v161 + 104) + 48))(&v209, *(_QWORD *)(v161 + 104), v161 + 24, *(_QWORD *)(v161 + 88), *(_QWORD *)(v161 + 96));
      v163 = v209;
      v209 = 0;
      v164 = *(_QWORD *)(v161 + 112);
      *(_QWORD *)(v161 + 112) = v163;
      if (v164)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
        v165 = v209;
        v209 = 0;
        if (v165)
          (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
      }
      v162 = *(_QWORD *)(v161 + 112);
    }
    v153 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v162 + 96))(v162);
  }
  v166 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v198 + 11) + 64))(*((_QWORD *)v198 + 11), v151);
  v167 = v166;
  if (!*(_BYTE *)(v166 + 128))
  {
    v169 = *(_QWORD *)(v166 + 112);
    if (v169)
      goto LABEL_235;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v167 + 104) + 48))(&v209, *(_QWORD *)(v167 + 104), v167 + 24, *(_QWORD *)(v167 + 88), *(_QWORD *)(v167 + 96));
    v169 = v209;
    v209 = 0;
    v170 = *(_QWORD *)(v167 + 112);
    *(_QWORD *)(v167 + 112) = v169;
    if (v170)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
      v171 = v209;
      v209 = 0;
      if (v171)
        (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
      v169 = *(_QWORD *)(v167 + 112);
    }
    if (v169)
    {
LABEL_235:
      v168 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v169 + 88))(v169);
      goto LABEL_238;
    }
    goto LABEL_236;
  }
  if (*(_BYTE *)(v166 + 128) != 2)
  {
LABEL_236:
    if (*(_BYTE *)(v167 + 124))
    {
      v168 = *(_DWORD *)(v167 + 120);
      goto LABEL_238;
    }
    goto LABEL_284;
  }
  v168 = *(_DWORD *)(v166 + 48);
LABEL_238:
  if (v168 != *((_DWORD *)v198 + 64)
    || v153 != (*(uint64_t (**)(_QWORD))(**((_QWORD **)v198 + 23) + 112))(*((_QWORD *)v198 + 23)))
  {
    if (*(_BYTE *)(v167 + 128))
    {
      if (*(_BYTE *)(v167 + 128) == 2)
      {
        v172 = *(unsigned int *)(v167 + 48);
        goto LABEL_252;
      }
LABEL_250:
      if (*(_BYTE *)(v167 + 124))
      {
        v172 = *(unsigned int *)(v167 + 120);
        goto LABEL_252;
      }
LABEL_284:
      __break(1u);
LABEL_285:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/dtmf_buffer.cc", 72, "payload", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v17, v18, v19, v20, v194);
    }
    v173 = *(_QWORD *)(v167 + 112);
    if (!v173)
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v167 + 104) + 48))(&v209, *(_QWORD *)(v167 + 104), v167 + 24, *(_QWORD *)(v167 + 88), *(_QWORD *)(v167 + 96));
      v173 = v209;
      v209 = 0;
      v174 = *(_QWORD *)(v167 + 112);
      *(_QWORD *)(v167 + 112) = v173;
      if (v174)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
        v175 = v209;
        v209 = 0;
        if (v175)
          (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
        v173 = *(_QWORD *)(v167 + 112);
      }
      if (!v173)
        goto LABEL_250;
    }
    v172 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 88))(v173);
LABEL_252:
    webrtc::NetEqImpl::SetSampleRateAndChannels(v198, v172, v153);
  }
  if (*v23)
  {
    v33 = 0;
    *(_DWORD *)(*((_QWORD *)v198 + 43) + 52) = *((_DWORD *)v198 + 64) / 1000;
    goto LABEL_256;
  }
LABEL_255:
  v33 = 0;
LABEL_256:
  if (v222)
  {
    v176 = v220;
    v177 = v221;
    v178 = *v221;
    *((_QWORD *)v178 + 1) = *((_QWORD *)v220 + 1);
    **((_QWORD **)v176 + 1) = v178;
    v222 = 0;
    if (v177 != &v220)
    {
      do
      {
        v189 = (char **)v177[1];
        v190 = v177[22];
        v177[22] = 0;
        if (v190)
          (*(void (**)(char *))(*(_QWORD *)v190 + 8))(v190);
        v191 = v177[21];
        v177[21] = 0;
        if (v191)
          MEMORY[0x20BD0ADEC](v191, 0x1060C40C2E02434);
        if (*((_BYTE *)v177 + 160))
        {
          v192 = v177[8];
          if (v192)
          {
            v177[9] = v192;
            operator delete(v192);
          }
        }
        v193 = v177[5];
        v177[5] = 0;
        if (v193)
          MEMORY[0x20BD0ADD4](v193, 0x1000C8077774924);
        operator delete(v177);
        v177 = v189;
      }
      while (v189 != &v220);
    }
  }
LABEL_258:
  if (v225)
  {
    v179 = v223;
    v180 = v224;
    v181 = *v224;
    *((_QWORD *)v181 + 1) = *((_QWORD *)v223 + 1);
    **((_QWORD **)v179 + 1) = v181;
    v225 = 0;
    if (v180 != (char **)&v223)
    {
      do
      {
        v184 = (char **)v180[1];
        v185 = v180[22];
        v180[22] = 0;
        if (v185)
          (*(void (**)(char *))(*(_QWORD *)v185 + 8))(v185);
        v186 = v180[21];
        v180[21] = 0;
        if (v186)
          MEMORY[0x20BD0ADEC](v186, 0x1060C40C2E02434);
        if (*((_BYTE *)v180 + 160))
        {
          v187 = v180[8];
          if (v187)
          {
            v180[9] = v187;
            operator delete(v187);
          }
        }
        v188 = v180[5];
        v180[5] = 0;
        if (v188)
          MEMORY[0x20BD0ADD4](v188, 0x1000C8077774924);
        operator delete(v180);
        v180 = v184;
      }
      while (v184 != (char **)&v223);
    }
  }
LABEL_260:
  if (v33)
    v182 = 0xFFFFFFFFLL;
  else
    v182 = 0;
  pthread_mutex_unlock(v8);
  return v182;
}

uint64_t webrtc::NetEqImpl::InsertEmptyPacket(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (*(_BYTE *)(a1 + 352))
    webrtc::NackTracker::UpdateLastReceivedPacket(*(uint64_t ***)(a1 + 344), *(unsigned __int16 *)(a2 + 2), *(_DWORD *)(a2 + 4));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 40))(*(_QWORD *)(a1 + 176));
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::NetEqImpl::GetAudio(uint64_t a1, unint64_t a2, _BYTE *a3, _DWORD *a4, uint64_t a5)
{
  pthread_mutex_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  v10 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (webrtc::NetEqImpl::GetAudioInternal(a1, a2, a5, v11, v12, v13, v14, v15))
  {
    v16 = 0xFFFFFFFFLL;
    goto LABEL_19;
  }
  if (a3)
    *a3 = *(_BYTE *)(a2 + 15432);
  v17 = *(_DWORD *)(a1 + 288);
  if ((v17 - 9) < 2)
  {
    *(_DWORD *)(a2 + 48) = 2;
    v19 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 264) = v19;
    v16 = 0;
    if (!a4)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (v17 == 11)
  {
    *(_DWORD *)(a2 + 48) = 5;
    v19 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 264) = v19;
    v16 = 0;
    if (!a4)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (v17 != 1)
  {
    *(_DWORD *)(a2 + 48) = 0;
    v19 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 264) = v19;
    v16 = 0;
    if (!a4)
      goto LABEL_19;
LABEL_18:
    *a4 = v19;
    goto LABEL_19;
  }
  if (**(_WORD **)(*(_QWORD *)(a1 + 200) + 128))
    v18 = 1;
  else
    v18 = 3;
  *(_DWORD *)(a2 + 48) = v18;
  v19 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 264) = v19;
  v16 = 0;
  if (a4)
    goto LABEL_18;
LABEL_19:
  pthread_mutex_unlock(v10);
  return v16;
}

uint64_t webrtc::NetEqImpl::GetAudioInternal(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  _DWORD *v27;
  int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _WORD *v57;
  unint64_t v58;
  unsigned __int16 *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  BOOL v76;
  char v77;
  int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  _DWORD *v83;
  _DWORD *v84;
  char v85;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  _QWORD *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char **v150;
  uint64_t v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  int v155;
  char **v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  unint64_t v177;
  _BYTE *v178;
  _BYTE *v179;
  int64_t v180;
  char *v181;
  char *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t j;
  void *v207;
  char *v208;
  char **v209;
  uint64_t v210;
  char **v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char **v224;
  uint64_t v225;
  char **v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _DWORD *v262;
  _BOOL4 v264;
  BOOL v265;
  _QWORD *v266;
  _QWORD *v267;
  uint64_t v268;
  int v269;
  unsigned int v271;
  int16x8_t *v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  webrtc::AudioMultiVector *v279;
  unint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned __int8 *v285;
  unint64_t v286;
  unsigned int v287;
  unint64_t v288;
  unsigned __int8 *v289;
  unint64_t v290;
  int v291;
  int v292;
  int v293;
  unint64_t v294;
  uint64_t v295;
  _QWORD *v296;
  unint64_t v297;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unsigned int v306;
  int16x8_t *v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  _QWORD *v313;
  _QWORD *v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  int v332;
  _QWORD *v333;
  unint64_t v334;
  int v335;
  _QWORD *v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  webrtc::AudioMultiVector *v343;
  unint64_t v344;
  unint64_t v345;
  int v346;
  _QWORD *v347;
  unint64_t v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  char **v359;
  uint64_t v360;
  char **v361;
  char *v362;
  char *v363;
  char *v364;
  char *v365;
  uint64_t v366;
  int v367;
  int v368;
  unint64_t v369;
  _WORD *v370;
  unint64_t v371;
  unsigned __int16 *v372;
  int v373;
  unint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unsigned int v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unsigned int v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t v398;
  void *v399;
  void *v400;
  _QWORD *v401;
  unint64_t v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  uint64_t v406;
  _QWORD *v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  int v419;
  _QWORD *v420;
  _QWORD *v421;
  unsigned int v422;
  int v423;
  _QWORD *v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  _DWORD *v438;
  int v439;
  uint64_t v440;
  unsigned int v441;
  char *v442;
  char **v443;
  uint64_t v444;
  char **v446;
  char *v447;
  char *v448;
  char *v449;
  char *v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  int v456;
  _QWORD *v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  unint64_t v466;
  unsigned __int8 *v467;
  int v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  int v479;
  unint64_t v480;
  int v481;
  int v482;
  unint64_t v483;
  unint64_t v484;
  unsigned int v485;
  unint64_t v486;
  int v487;
  int v488;
  unsigned int v489;
  int v490;
  char v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  char v495;
  char *v496;
  void *__p;
  unint64_t v498;
  const char *v499;
  uint64_t *v500;
  unint64_t v501;
  char v502;
  int v503;
  char v504;
  uint64_t v505;
  char v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  __int128 v513;
  uint64_t v514;
  uint64_t v515;
  int v516;
  __int128 v517;
  uint64_t v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  char v523;
  char v524;
  __int128 v525;
  unsigned __int8 v526;

  v496 = (char *)&v496;
  __p = &v496;
  v498 = 0;
  v493 = 0;
  v494 = 0;
  v495 = 0;
  v11 = *(_QWORD *)(a1 + 368);
  for (i = *(_QWORD *)(a1 + 376); i != v11; i -= 104)
  {
    v13 = *(void **)(i - 96);
    if (v13)
    {
      *(_QWORD *)(i - 88) = v13;
      operator delete(v13);
    }
  }
  *(_QWORD *)(a1 + 376) = v11;
  ++**(_QWORD **)(a1 + 80);
  webrtc::StatisticsCalculator::IncreaseCounter(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 272), *(_DWORD *)(a1 + 256), a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 160);
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(_QWORD *)(v14 + 80);
  webrtc::ExpandUmaLogger::UpdateSampleCounter(a1 + 392, v15, *(_DWORD *)(a1 + 256));
  webrtc::ExpandUmaLogger::UpdateSampleCounter(a1 + 472, v15 - v16, *(_DWORD *)(a1 + 256));
  if (!*(_BYTE *)(a1 + 353))
    goto LABEL_9;
  v17 = *(_QWORD *)(a1 + 200);
  if (*(_BYTE *)(v17 + 24) || *(_BYTE *)(v17 + 112))
    goto LABEL_9;
  v56 = *(_QWORD *)(v17 + 32);
  if (v56)
  {
    v57 = *(_WORD **)(v17 + 128);
    if (*v57)
      goto LABEL_9;
    v58 = 0;
    v59 = v57 + 64;
    do
    {
      if (v56 - 1 == v58)
        goto LABEL_91;
      v60 = *v59;
      v59 += 64;
      ++v58;
    }
    while (!v60);
    if (v58 < v56)
    {
LABEL_9:
      v18 = *(unsigned int *)(*(_QWORD *)(a1 + 192) + 48);
      if (!*(_BYTE *)(a1 + 324))
        (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 112) + 80))(*(_QWORD *)(a1 + 112), *(unsigned int *)(*(_QWORD *)(a1 + 192) + 48), (5 * *(_DWORD *)(a1 + 256)));
      v19 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 56))(*(_QWORD *)(a1 + 112));
      v20 = *(_QWORD *)(a1 + 360);
      if (v20)
      {
        v21 = **(_QWORD **)v20 + ~*(_QWORD *)(v20 + 8);
        v22 = *(_QWORD *)(a1 + 272);
        v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 160))(*(_QWORD *)(a1 + 176)) + v21 * v22;
        if (*(_DWORD *)(a1 + 288) != 9)
          goto LABEL_27;
      }
      else
      {
        v23 = 0;
        if (*(_DWORD *)(a1 + 288) != 9)
          goto LABEL_27;
      }
      for (;
            v19;
            v19 = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 56))(*(_QWORD *)(a1 + 112)))
      {
        v24 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 64))(*(_QWORD *)(a1 + 88), *((unsigned __int8 *)v19 + 6));
        if (!v24 || *(_BYTE *)(v24 + 128) != 1)
          break;
        v25 = *v19;
        v26 = v18 >= v25 || v23 + v18 > v25;
        if (!v26)
          break;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 72))(*(_QWORD *)(a1 + 112));
        if (!*(_BYTE *)(a1 + 324))
          (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 112) + 80))(*(_QWORD *)(a1 + 112), v18, (5 * *(_DWORD *)(a1 + 256)));
      }
LABEL_27:
      v27 = *(_DWORD **)(a1 + 192);
      v28 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v27 + 120))(v27);
      LODWORD(v27) = v27[10];
      v485 = v28
           - ((_DWORD)v27
            + (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 200) + 48))(*(_QWORD *)(a1 + 200)));
      v29 = *(_DWORD *)(a1 + 288);
      if (v29 <= 7 && ((1 << v29) & 0xD8) != 0)
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 176) + 96))(*(_QWORD *)(a1 + 176), -*(_DWORD *)(a1 + 272) - v485);
      v30 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(**(_QWORD **)(a1 + 96) + 32))(*(_QWORD *)(a1 + 96), (v18 + v23), &v493);
      v31 = *(_QWORD *)(a1 + 360);
      if (v31)
      {
        v32 = **(_QWORD **)v31 - *(_QWORD *)(v31 + 8);
        v33 = *(_QWORD *)(a1 + 272);
        v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 160))(*(_QWORD *)(a1 + 176)) + v32 * v33;
      }
      else
      {
        v34 = 0;
      }
      LOBYTE(v501) = 0;
      v502 = 0;
      v506 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 112) + 128))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 88));
      v507 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 112) + 112))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 280));
      v508 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 112) + 120))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 280), *(int *)(a1 + 264), 0);
      v509 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 120))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 280), *(int *)(a1 + 264), 1);
      v510 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 104))(*(_QWORD *)(a1 + 112));
      v36 = *(_QWORD *)(a1 + 192);
      v35 = *(_QWORD *)(a1 + 200);
      LODWORD(v499) = *(_DWORD *)(v36 + 48);
      WORD2(v499) = **(_WORD **)(v35 + 128);
      v500 = *(uint64_t **)(a1 + 280);
      v503 = *(_DWORD *)(a1 + 288);
      v504 = v30;
      v505 = v34;
      v511 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 120))(v36) - *(_QWORD *)(v36 + 40);
      if (!v19)
      {
LABEL_42:
        v482 = v30;
        v483 = a2;
        v43 = (_BYTE *)(a1 + 332);
        v44 = (*(uint64_t (**)(_QWORD, const char **, uint64_t))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176), &v499, a1 + 332);
        v45 = v44;
        if (v19)
        {
          v46 = *((_QWORD *)v19 + 20);
          v47 = v485;
          if (v46
            && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46)
            && v45 - 1 <= 4
            && ((0x1Du >> (v45 - 1)) & 1) != 0)
          {
            v45 = 0;
          }
          if ((a3 & 0xFF00000000) != 0)
            a3 = a3;
          else
            a3 = v45;
          v48 = a2;
          if (*(_DWORD *)(a1 + 272) > (signed int)v485)
            goto LABEL_59;
        }
        else
        {
          v47 = v485;
          if ((a3 & 0xFF00000000) != 0)
            a3 = a3;
          else
            a3 = v44;
          v48 = a2;
          if (*(_DWORD *)(a1 + 272) > (signed int)v485)
            goto LABEL_59;
        }
        v488 = 0;
        if (a3 > 5 || ((1 << a3) & 0x3A) == 0)
          goto LABEL_190;
LABEL_59:
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 88))(*(_QWORD *)(a1 + 176), a3);
        if (*(_DWORD *)(a1 + 288) == 11)
        {
          if ((_DWORD)a3 == 2)
          {
            if (!*(_BYTE *)(a1 + 324))
            {
LABEL_109:
              *(_DWORD *)(a1 + 328) = v18;
              v79 = 2;
LABEL_189:
              v488 = v79;
              goto LABEL_190;
            }
LABEL_76:
            if (v19 || !v482)
            {
              if (!v19)
              {
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                  rtc::webrtc_logging_impl::Log("\r\t", v63, v64, v65, v66, v67, v68, v69, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                v62 = 0xFFFFFFFFLL;
                *(_DWORD *)(a1 + 288) = 13;
                if (!v498)
                  return v62;
                goto LABEL_611;
              }
              *(_DWORD *)(a1 + 328) = *v19;
              if ((_DWORD)a3 != 6)
              {
                if ((_DWORD)a3 == 7
                  && (v55 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 64))(*(_QWORD *)(a1 + 88), *((unsigned __int8 *)v19 + 6))) != 0&& *(_BYTE *)(v55 + 128) == 1)
                {
                  LODWORD(a3) = 6;
                }
                else
                {
                  LODWORD(a3) = 0;
                }
              }
            }
            else
            {
              *(_DWORD *)(a1 + 328) = v493;
            }
            v70 = *(_DWORD *)(a1 + 328);
            *(_DWORD *)(*(_QWORD *)(a1 + 192) + 48) += v70 - v18;
            *(_BYTE *)(a1 + 324) = 0;
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 24))(*(_QWORD *)(a1 + 176));
            *(_DWORD *)(*(_QWORD *)(a1 + 160) + 272) = 0;
            LODWORD(v18) = v70;
LABEL_101:
            v484 = *(_QWORD *)(a1 + 272);
            v71 = *(int *)(a1 + 260);
            v72 = 240 * v71;
            v488 = a3;
            LODWORD(v71) = 5 * v71;
            v73 = 16 * v71;
            v74 = 32 * v71;
            switch((int)a3)
            {
              case 1:
                v80 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 216) + 24))(*(_QWORD *)(a1 + 216));
                v81 = v484;
                if (v80 > v484)
                  v81 = v80;
                v484 = v81;
                v82 = 1;
                goto LABEL_113;
              case 2:
                goto LABEL_109;
              case 3:
              case 4:
                if ((int)v47 >= (int)v72)
                {
                  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 152))(*(_QWORD *)(a1 + 176), v47);
                  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 184))(*(_QWORD *)(a1 + 176), 1);
                  goto LABEL_190;
                }
                if (v73 <= (int)v47 && *(_QWORD *)(a1 + 280) >= v72)
                {
                  v488 = 0;
                  goto LABEL_190;
                }
                if ((int)v47 < v74)
                {
                  v75 = *(_QWORD *)(a1 + 280);
                  v76 = v75 >= v72;
                  v77 = v75 < v72;
                  v78 = a3;
                  if (!v76)
                    v78 = 0;
                  v488 = v78;
                  v484 <<= v77;
                }
                goto LABEL_114;
              case 5:
                if ((int)v47 >= (int)v72 || v73 <= (int)v47 && *(_QWORD *)(a1 + 280) >= v72)
                {
                  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 152))(*(_QWORD *)(a1 + 176), v47);
                  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 184))(*(_QWORD *)(a1 + 176), 1);
                  v79 = 5;
                  goto LABEL_189;
                }
                if ((int)v47 < v74)
                  v484 <<= *(_QWORD *)(a1 + 280) < v72;
                v82 = 5;
LABEL_113:
                v488 = v82;
LABEL_114:
                if (!v19)
                {
                  v479 = v72;
                  LODWORD(a2) = 0;
                  v123 = v488;
                  goto LABEL_166;
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 192) + 48) += *v19 - v18;
                v83 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 56))(*(_QWORD *)(a1 + 112));
                if (!v83)
                {
                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                    rtc::webrtc_logging_impl::Log("\r\t", v129, v130, v131, v132, v133, v134, v135, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
LABEL_330:
                  v62 = 16;
                  *(_DWORD *)(a1 + 288) = 13;
                  if (!v498)
                    return v62;
                  goto LABEL_611;
                }
                v84 = v83;
                v479 = v72;
                v481 = *v83;
                v85 = 1;
                break;
              case 7:
              case 8:
                goto LABEL_190;
              case 9:
                *(_DWORD *)(a1 + 328) = v18;
                v126 = *(_QWORD *)(a1 + 360);
                if (v126)
                {
                  v127 = **(_QWORD **)v126 - *(_QWORD *)(v126 + 8);
                  v128 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 160))(*(_QWORD *)(a1 + 176))
                       + v127 * v484;
                  if (v128)
                  {
                    if (*(_DWORD *)(a1 + 288) != 12)
                    {
                      *(_DWORD *)(*(_QWORD *)(a1 + 192) + 48) += v128;
                      *(_DWORD *)(a1 + 328) += v128;
                    }
                  }
                }
                v79 = 9;
                goto LABEL_189;
              default:
                goto LABEL_114;
            }
            while (1)
            {
              *(_DWORD *)(a1 + 328) = *v84;
              (*(void (**)(unint64_t *__return_ptr))(**(_QWORD **)(a1 + 112) + 64))(&v512);
              if (!v526)
              {
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                  rtc::webrtc_logging_impl::Log("\r\t", v231, v232, v233, v234, v235, v236, v237, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                if (v526)
                {
                  v238 = *((_QWORD *)&v525 + 1);
                  *((_QWORD *)&v525 + 1) = 0;
                  if (v238)
                    (*(void (**)(uint64_t))(*(_QWORD *)v238 + 8))(v238);
                  v239 = v525;
                  *(_QWORD *)&v525 = 0;
                  if (v239)
                    MEMORY[0x20BD0ADEC](v239, 0x1060C40C2E02434);
                  if (v524 && (_QWORD)v517)
                  {
                    *((_QWORD *)&v517 + 1) = v517;
                    operator delete((void *)v517);
                  }
                  v240 = v514;
                  v514 = 0;
                  if (v240)
                    MEMORY[0x20BD0ADD4](v240, 0x1000C8077774924);
                }
                goto LABEL_330;
              }
              v87 = **(_QWORD **)v525 - *(_QWORD *)(v525 + 8);
              v88 = *(int *)(*(_QWORD *)v525 + 8);
              v89 = 0xFFFFFFFFFFFFFFFFLL / v88;
              v90 = v87 * v88;
              if (v87 >= v89)
                v91 = -1;
              else
                v91 = v90;
              webrtc::StatisticsCalculator::StoreWaitingTime(*(webrtc::StatisticsCalculator **)(a1 + 160), v91);
              if ((v85 & 1) != 0 && *(_BYTE *)(a1 + 352))
              {
                if (!v526)
                  goto LABEL_640;
                webrtc::NackTracker::UpdateLastDecodedPacket(*(webrtc::NackTracker **)(a1 + 344), WORD2(v512), v512);
              }
              if (!v526)
                goto LABEL_640;
              v92 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 64))(*(_QWORD *)(a1 + 88), BYTE6(v512));
              if (v92)
              {
                v93 = *(_BYTE *)(v92 + 128) == 1;
                if (!v526)
                  goto LABEL_640;
              }
              else
              {
                v93 = 0;
                if (!v526)
                  goto LABEL_640;
              }
              if (!*((_QWORD *)&v525 + 1))
                break;
              v94 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v525 + 1) + 16))(*((_QWORD *)&v525 + 1));
              if (!v526)
                goto LABEL_640;
              v95 = v94;
              if ((int)v515 >= 1)
                *(_DWORD *)(*(_QWORD *)(a1 + 160) + 328) += v94;
              if (!v94)
                goto LABEL_145;
LABEL_146:
              a2 = v512;
              v105 = *(_QWORD **)(a1 + 160);
              v106 = (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 104))(*(_QWORD *)(a1 + 176));
              v107 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 112))(*(_QWORD *)(a1 + 176));
              v108 = v105[5];
              v109 = v105[4] + v95 * v91;
              v110 = v105[7] + v95 * v107;
              v105[6] += v95 * v106;
              v105[7] = v110;
              v105[4] = v109;
              v105[5] = v108 + v95;
              v111 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 56))(*(_QWORD *)(a1 + 112));
              v84 = (_DWORD *)v111;
              if (v111)
              {
                if (!v526)
                  goto LABEL_640;
                if (*(unsigned __int8 *)(v111 + 6) == BYTE6(v512))
                {
                  v112 = v95 + v512 == *(_DWORD *)v111 && !v93;
                  goto LABEL_154;
                }
              }
              else if (!v526)
              {
                goto LABEL_640;
              }
              v112 = 0;
LABEL_154:
              v113 = (char *)operator new(0xB8uLL);
              *((_DWORD *)v113 + 4) = v512;
              *(_DWORD *)(v113 + 19) = *(_DWORD *)((char *)&v512 + 3);
              *(_OWORD *)(v113 + 24) = v513;
              v114 = v514;
              v115 = v515;
              v514 = 0;
              v513 = 0uLL;
              *((_QWORD *)v113 + 5) = v114;
              *((_QWORD *)v113 + 6) = v115;
              v113[56] = 0;
              v113[160] = 0;
              if (v524)
              {
                *((_OWORD *)v113 + 4) = v517;
                v116 = v519;
                *(_OWORD *)(v113 + 104) = v520;
                v117 = v522;
                *(_OWORD *)(v113 + 120) = v521;
                *(_OWORD *)(v113 + 136) = v117;
                *((_DWORD *)v113 + 14) = v516;
                *((_QWORD *)v113 + 10) = v518;
                v518 = 0;
                v517 = 0uLL;
                v113[152] = v523;
                *(_OWORD *)(v113 + 88) = v116;
                v113[160] = 1;
              }
              v118 = v525;
              v525 = 0uLL;
              *(_OWORD *)(v113 + 168) = v118;
              v119 = v496;
              *(_QWORD *)v113 = v496;
              *((_QWORD *)v113 + 1) = &v496;
              *((_QWORD *)v119 + 1) = v113;
              v496 = v113;
              ++v498;
              v120 = *((_QWORD *)&v525 + 1);
              *((_QWORD *)&v525 + 1) = 0;
              if (v120)
                (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
              v121 = v525;
              *(_QWORD *)&v525 = 0;
              if (v121)
                MEMORY[0x20BD0ADEC](v121, 0x1060C40C2E02434);
              if (v524 && (_QWORD)v517)
              {
                *((_QWORD *)&v517 + 1) = v517;
                operator delete((void *)v517);
              }
              v122 = v514;
              v514 = 0;
              if (v122)
                MEMORY[0x20BD0ADD4](v122, 0x1000C8077774924);
              v85 = 0;
              a2 = v95 + (a2 - v481);
              if (a2 >= v484 || !v112)
              {
                if (a2)
                {
                  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 112) + 88))(*(_QWORD *)(a1 + 112), *(unsigned int *)(a1 + 328));
                  v48 = v483;
                  v123 = v488;
                  v43 = (_BYTE *)(a1 + 332);
                  if ((a2 & 0x80000000) != 0)
                    goto LABEL_330;
                }
                else
                {
                  v48 = v483;
                  v123 = v488;
                  v43 = (_BYTE *)(a1 + 332);
                }
LABEL_166:
                if ((v123 - 3) <= 2)
                {
                  v124 = a2 + v485;
                  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 152))(*(_QWORD *)(a1 + 176), v124);
                  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 176) + 184))(*(_QWORD *)(a1 + 176), 1);
                  if ((int)v124 < v479 && v123 != 5)
                    v123 = 0;
                  v488 = v123;
                }
                *(_DWORD *)(a1 + 328) = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 48);
LABEL_190:
                v136 = v498;
                v492 = 1;
                a2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 80))(*(_QWORD *)(a1 + 88));
                v486 = v136;
                if (!v498)
                {
                  v139 = v488;
                  goto LABEL_211;
                }
                v137 = *((unsigned __int8 *)__p + 22);
                v138 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 64))(*(_QWORD *)(a1 + 88), v137);
                v139 = v488;
                if (!v138 || *(_BYTE *)(v138 + 128) != 1)
                {
                  v140 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 64))(*(_QWORD *)(a1 + 88), v137);
                  if (!v140)
                    goto LABEL_195;
                  v141 = v140;
                  if (*(_BYTE *)(v140 + 128))
                    goto LABEL_195;
                  a2 = *(_QWORD *)(v140 + 112);
                  if (a2)
                    goto LABEL_272;
                  (*(void (**)(unint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v140 + 104) + 48))(&v512, *(_QWORD *)(v140 + 104), v140 + 24, *(_QWORD *)(v140 + 88), *(_QWORD *)(v140 + 96));
                  a2 = v512;
                  v512 = 0;
                  v193 = *(_QWORD *)(v141 + 112);
                  *(_QWORD *)(v141 + 112) = a2;
                  if (v193)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
                    v194 = v512;
                    v512 = 0;
                    if (v194)
                      (*(void (**)(unint64_t))(*(_QWORD *)v194 + 8))(v194);
                    a2 = *(_QWORD *)(v141 + 112);
                  }
                  if (a2)
                  {
LABEL_272:
                    LOBYTE(v499) = 0;
                    (*(void (**)(_QWORD, uint64_t, const char **))(**(_QWORD **)(a1 + 88) + 72))(*(_QWORD *)(a1 + 88), v137, &v499);
                    if (!(_BYTE)v499)
                      goto LABEL_211;
                    v195 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 64))(*(_QWORD *)(a1 + 88), v137);
                    if (v195)
                    {
                      v196 = v195;
                      if (*(_BYTE *)(v195 + 128))
                      {
                        if (*(_BYTE *)(v195 + 128) == 2)
                        {
                          v197 = *(_DWORD *)(v195 + 48);
LABEL_516:
                          if (v197 != *(_DWORD *)(a1 + 256)
                            || (v377 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 96))(a2),
                                v377 != (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 112))(*(_QWORD *)(a1 + 184))))
                          {
                            if (*(_BYTE *)(v196 + 128))
                            {
                              if (*(_BYTE *)(v196 + 128) == 2)
                              {
                                v378 = *(unsigned int *)(v196 + 48);
                                goto LABEL_638;
                              }
LABEL_636:
                              if (*(_BYTE *)(v196 + 124))
                              {
                                v378 = *(unsigned int *)(v196 + 120);
                                goto LABEL_638;
                              }
LABEL_640:
                              __break(1u);
LABEL_641:
                              v368 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 48))(*(_QWORD *)(a1 + 128), *(unsigned int *)(a1 + 320))- *(_DWORD *)(a2 + 24);
                              goto LABEL_642;
                            }
                            v452 = *(_QWORD *)(v196 + 112);
                            if (!v452)
                            {
                              (*(void (**)(unint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v196 + 104) + 48))(&v512, *(_QWORD *)(v196 + 104), v196 + 24, *(_QWORD *)(v196 + 88), *(_QWORD *)(v196 + 96));
                              v452 = v512;
                              v512 = 0;
                              v453 = *(_QWORD *)(v196 + 112);
                              *(_QWORD *)(v196 + 112) = v452;
                              if (v453)
                              {
                                (*(void (**)(uint64_t))(*(_QWORD *)v453 + 8))(v453);
                                v454 = v512;
                                v512 = 0;
                                if (v454)
                                  (*(void (**)(unint64_t))(*(_QWORD *)v454 + 8))(v454);
                                v452 = *(_QWORD *)(v196 + 112);
                              }
                              if (!v452)
                                goto LABEL_636;
                            }
                            v378 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v452 + 88))(v452);
LABEL_638:
                            v455 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 96))(a2);
                            webrtc::NetEqImpl::SetSampleRateAndChannels((webrtc::NetEqImpl *)a1, v378, v455);
                          }
                          v456 = *(_DWORD *)(a1 + 328);
                          *(_DWORD *)(*(_QWORD *)(a1 + 192) + 48) = v456;
                          *(_DWORD *)(a1 + 320) = v456;
                          goto LABEL_211;
                        }
                      }
                      else
                      {
                        v374 = *(_QWORD *)(v195 + 112);
                        if (v374)
                          goto LABEL_513;
                        (*(void (**)(unint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v196 + 104) + 48))(&v512, *(_QWORD *)(v196 + 104), v196 + 24, *(_QWORD *)(v196 + 88), *(_QWORD *)(v196 + 96));
                        v374 = v512;
                        v512 = 0;
                        v375 = *(_QWORD *)(v196 + 112);
                        *(_QWORD *)(v196 + 112) = v374;
                        if (v375)
                        {
                          (*(void (**)(uint64_t))(*(_QWORD *)v375 + 8))(v375);
                          v376 = v512;
                          v512 = 0;
                          if (v376)
                            (*(void (**)(unint64_t))(*(_QWORD *)v376 + 8))(v376);
                          v374 = *(_QWORD *)(v196 + 112);
                        }
                        if (v374)
                        {
LABEL_513:
                          v197 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v374 + 88))(v374);
                          goto LABEL_516;
                        }
                      }
                      if (*(_BYTE *)(v196 + 124))
                      {
                        v197 = *(_DWORD *)(v196 + 120);
                        goto LABEL_516;
                      }
                      goto LABEL_640;
                    }
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v351, v352, v353, v354, v355, v356, v357, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                    if (v498)
                    {
                      v358 = v496;
                      v359 = (char **)__p;
                      v360 = *(_QWORD *)__p;
                      *(_QWORD *)(v360 + 8) = *((_QWORD *)v496 + 1);
                      **((_QWORD **)v358 + 1) = v360;
                      v498 = 0;
                      if (v359 != &v496)
                      {
                        do
                        {
                          v361 = (char **)v359[1];
                          v362 = v359[22];
                          v359[22] = 0;
                          if (v362)
                            (*(void (**)(char *))(*(_QWORD *)v362 + 8))(v362);
                          v363 = v359[21];
                          v359[21] = 0;
                          if (v363)
                            MEMORY[0x20BD0ADEC](v363, 0x1060C40C2E02434);
                          if (*((_BYTE *)v359 + 160))
                          {
                            v364 = v359[8];
                            if (v364)
                            {
                              v359[9] = v364;
                              operator delete(v364);
                            }
                          }
                          v365 = v359[5];
                          v359[5] = 0;
                          if (v365)
                            MEMORY[0x20BD0ADD4](v365, 0x1000C8077774924);
                          operator delete(v359);
                          v359 = v361;
                        }
                        while (v361 != &v496);
                      }
                    }
                  }
                  else
                  {
LABEL_195:
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v142, v143, v144, v145, v146, v147, v148, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                    if (v498)
                    {
                      v149 = v496;
                      v150 = (char **)__p;
                      v151 = *(_QWORD *)__p;
                      *(_QWORD *)(v151 + 8) = *((_QWORD *)v496 + 1);
                      **((_QWORD **)v149 + 1) = v151;
                      v498 = 0;
                      if (v150 != &v496)
                      {
                        do
                        {
                          v156 = (char **)v150[1];
                          v157 = v150[22];
                          v150[22] = 0;
                          if (v157)
                            (*(void (**)(char *))(*(_QWORD *)v157 + 8))(v157);
                          v158 = v150[21];
                          v150[21] = 0;
                          if (v158)
                            MEMORY[0x20BD0ADEC](v158, 0x1060C40C2E02434);
                          if (*((_BYTE *)v150 + 160))
                          {
                            v159 = v150[8];
                            if (v159)
                            {
                              v150[9] = v159;
                              operator delete(v159);
                            }
                          }
                          v160 = v150[5];
                          v150[5] = 0;
                          if (v160)
                            MEMORY[0x20BD0ADD4](v160, 0x1000C8077774924);
                          operator delete(v150);
                          v150 = v156;
                        }
                        while (v156 != &v496);
                      }
                    }
                  }
                  v152 = 0;
                  v153 = 0;
                  v154 = 3;
                  v155 = v492;
LABEL_347:
                  v264 = v155 == 2 && v486 > v498;
                  if (v498)
                    v265 = v139 == 6;
                  else
                    v265 = 0;
                  if (v265 || v264)
                  {
                    v266 = *(_QWORD **)(a1 + 80);
                    v267 = (_QWORD *)operator new();
                    *v267 = v266;
                    v267[1] = *v266;
                    v268 = *(_QWORD *)(a1 + 360);
                    *(_QWORD *)(a1 + 360) = v267;
                    if (v268)
                      MEMORY[0x20BD0ADEC](v268, 0x1060C40C2E02434);
                  }
                  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 16))(*(_QWORD *)(a1 + 184));
                  switch(v139)
                  {
                    case 0:
                      v291 = v492;
                      webrtc::Normal::Process(*(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 312), v153, *(_DWORD *)(a1 + 288), *(_QWORD **)(a1 + 184));
                      if (v153)
                        *(_DWORD *)(a1 + 288) = 0;
                      if (v291 == 2 || !v153 && *(_DWORD *)(a1 + 288) == 10)
                        *(_DWORD *)(a1 + 288) = 10;
                      if ((v482 & 1) == 0)
                        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104));
                      if (v152)
                      {
                        v152 = 0;
                        *(_BYTE *)(*(_QWORD *)(a1 + 160) + 504) = 1;
                      }
                      goto LABEL_534;
                    case 1:
                      v292 = v492;
                      v293 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 216) + 16))(*(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 312), v153, *(_QWORD *)(a1 + 184));
                      v294 = v293
                           - (v153
                                          / (unint64_t)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184)
                                                                                                + 112))(*(_QWORD *)(a1 + 184)));
                      v295 = *(_QWORD *)(a1 + 200);
                      if (*(_BYTE *)(v295 + 24) || *(_BYTE *)(v295 + 112))
                        goto LABEL_397;
                      v369 = *(_QWORD *)(v295 + 32);
                      if (!v369)
                        goto LABEL_399;
                      v370 = *(_WORD **)(v295 + 128);
                      if (*v370)
                        goto LABEL_397;
                      v371 = 0;
                      v372 = v370 + 64;
                      do
                      {
                        if (v369 - 1 == v371)
                          goto LABEL_399;
                        v373 = *v372;
                        v372 += 64;
                        ++v371;
                      }
                      while (!v373);
                      if (v371 >= v369)
                        goto LABEL_399;
LABEL_397:
                      if (*(_BYTE *)(a1 + 300) && *(_DWORD *)(a1 + 296) == 2)
                      {
LABEL_399:
                        v296 = *(_QWORD **)(a1 + 160);
                        v297 = v296[32];
                        if (v297 + (int)v294 > v297 && (v294 & 0x80000000) != 0)
                          v299 = 0;
                        else
                          v299 = v297 + (int)v294;
                        v296[32] = v299;
                        v300 = v296[27];
                        if ((v294 & 0x80000000) != 0)
                        {
                          v366 = v296[28] - (int)v294;
                          v296[27] = v300 - (int)v294;
                          v296[28] = v366;
                        }
                        else
                        {
                          if (v300 >= v294)
                            v301 = v294;
                          else
                            v301 = v296[27];
                          v302 = v300 - v301;
                          v296[2] += v294 - v301;
                          v303 = v296[28];
                          if (v303 >= v294)
                            v304 = v294;
                          else
                            v304 = v296[28];
                          v296[27] = v302;
                          v296[28] = v303 - v304;
                          v296[10] += v294 - v304;
                        }
                        goto LABEL_490;
                      }
                      v336 = *(_QWORD **)(a1 + 160);
                      v337 = v336[31];
                      v338 = (int)v294;
                      if (v337 + (int)v294 > v337 && (v294 & 0x80000000) != 0)
                        v340 = 0;
                      else
                        v340 = v337 + (int)v294;
                      v336[31] = v340;
                      v341 = v336[27];
                      if ((v294 & 0x80000000) == 0)
                      {
                        if (v341 >= v294)
                          v338 = v294;
                        else
                          v338 = v336[27];
                        v336[2] += v294 - v338;
                      }
                      v336[27] = v341 - v338;
                      v295 = *(_QWORD *)(a1 + 200);
LABEL_490:
                      if (v292 == 2)
                        v367 = 10;
                      else
                        v367 = 2;
                      *(_DWORD *)(a1 + 288) = v367;
                      (*(void (**)(uint64_t))(*(_QWORD *)v295 + 16))(v295);
                      if ((v482 & 1) != 0)
                      {
                        v152 = 0;
                        v482 = 1;
                        goto LABEL_534;
                      }
                      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104));
                      v482 = 0;
                      goto LABEL_533;
                    case 2:
                      if (*(_BYTE *)(a1 + 334) && (webrtc::NetEqImpl::DoCodecPlc((webrtc::NetEqImpl *)a1) & 1) != 0)
                        goto LABEL_533;
                      v305 = webrtc::NetEqImpl::DoExpand((webrtc::NetEqImpl *)a1, v482);
                      *(_DWORD *)(a1 + 292) = 2;
                      if ((v305 & 0x80000000) == 0)
                      {
                        v152 = 0;
                        goto LABEL_535;
                      }
                      v62 = v305;
                      if (!v498)
                        return v62;
                      break;
                    case 3:
                    case 4:
                      v489 = v154;
                      v269 = v139;
                      v271 = v139 == 4 && *(_BYTE *)(a1 + 338) != 0;
                      v272 = *(int16x8_t **)(a1 + 312);
                      v273 = v153;
                      v487 = v492;
                      v274 = 240 * *(int *)(a1 + 260);
                      v275 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 112))(*(_QWORD *)(a1 + 184));
                      if (v273 / v275 >= v274)
                      {
                        v277 = 0;
                        v512 = 0;
                        v278 = *(_QWORD *)(a1 + 224);
                        v279 = *(webrtc::AudioMultiVector **)(a1 + 184);
                        v280 = *(_QWORD *)(v278 + 16);
                        if (!v280)
                          goto LABEL_432;
                      }
                      else
                      {
                        v276 = v275;
                        v277 = (int)(v274 - v273 / v275);
                        memmove((char *)v272 + 2 * v275 * v277, v272, 2 * v273);
                        (*(void (**)(_QWORD, unint64_t, int16x8_t *))(**(_QWORD **)(a1 + 192) + 88))(*(_QWORD *)(a1 + 192), v277, v272);
                        v273 = v276 * v274;
                        v512 = 0;
                        v278 = *(_QWORD *)(a1 + 224);
                        v279 = *(webrtc::AudioMultiVector **)(a1 + 184);
                        v280 = *(_QWORD *)(v278 + 16);
                        v139 = v269;
                        if (!v280)
                        {
LABEL_432:
                          if (v273)
                            v324 = (uint64_t)v272;
                          else
                            v324 = 0;
                          webrtc::AudioMultiVector::PushBackInterleaved(v279, v324, v273);
                          v154 = v489;
LABEL_436:
                          v152 = 5;
                          *(_DWORD *)(a1 + 288) = 5;
                          goto LABEL_534;
                        }
                      }
                      if (v273 / v280 < 239 * *(int *)(v278 + 12))
                        goto LABEL_432;
                      v332 = webrtc::TimeStretch::Process((webrtc::TimeStretch *)v278, v272, v273, v271, v279, &v512);
                      v333 = *(_QWORD **)(a1 + 160);
                      v334 = v512;
                      v333[30] += v512;
                      v333[21] += v334;
                      v333[9] += v334;
                      v154 = v489;
                      v335 = 3;
                      switch(v332)
                      {
                        case -1:
                          goto LABEL_436;
                        case 0:
                          goto LABEL_522;
                        case 1:
                          v335 = 4;
                          goto LABEL_522;
                        case 2:
                          v335 = 5;
LABEL_522:
                          *(_DWORD *)(a1 + 288) = v335;
                          break;
                        default:
                          break;
                      }
                      if (v277)
                      {
                        v379 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 120))(*(_QWORD *)(a1 + 184));
                        v381 = *(_QWORD *)(a1 + 184);
                        v380 = *(uint64_t **)(a1 + 192);
                        v382 = (*(uint64_t (**)(uint64_t *))(*v380 + 120))(v380) - v277;
                        v383 = *v380;
                        if (v277 <= v379)
                        {
                          (*(void (**)(uint64_t *, uint64_t, unint64_t, uint64_t))(v383 + 160))(v380, v381, v277, v382);
                        }
                        else
                        {
                          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v383 + 168))(v380, v381, v382);
                          (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 192) + 152))(*(_QWORD *)(a1 + 192), v277 - v379, 0);
                        }
                        (*(void (**)(void))(**(_QWORD **)(a1 + 184) + 56))();
                        v139 = v269;
                        v154 = v489;
                      }
LABEL_528:
                      if (v487 == 2)
                        *(_DWORD *)(a1 + 288) = 10;
                      if ((v482 & 1) == 0)
                        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104));
LABEL_532:
                      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 200) + 16))(*(_QWORD *)(a1 + 200));
LABEL_533:
                      v152 = 0;
                      goto LABEL_534;
                    case 5:
                      v306 = v154;
                      v490 = v139;
                      v307 = *(int16x8_t **)(a1 + 312);
                      v308 = v153;
                      v487 = v492;
                      v309 = 240 * *(int *)(a1 + 260);
                      v310 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 112))(*(_QWORD *)(a1 + 184));
                      v311 = v309 - v308 / v310;
                      if (v309 <= v308 / v310)
                      {
                        v311 = 0;
                        v315 = 0;
                      }
                      else
                      {
                        v312 = v310;
                        v313 = *(_QWORD **)(a1 + 192);
                        if (v311 <= (*(uint64_t (**)(_QWORD *))(*v313 + 120))(v313) - v313[5])
                        {
                          v315 = 0;
                        }
                        else
                        {
                          v314 = *(_QWORD **)(a1 + 192);
                          v315 = v311 - (*(uint64_t (**)(_QWORD *))(*v314 + 120))(v314) + v314[5];
                        }
                        memmove((char *)v307 + 2 * v311 * v312, v307, 2 * v308);
                        (*(void (**)(_QWORD, unint64_t, int16x8_t *))(**(_QWORD **)(a1 + 192) + 88))(*(_QWORD *)(a1 + 192), v311, v307);
                        v308 = v312 * v309;
                      }
                      v512 = 0;
                      v342 = *(_QWORD *)(a1 + 232);
                      v343 = *(webrtc::AudioMultiVector **)(a1 + 184);
                      *(_QWORD *)(v342 + 360) = v315;
                      v344 = *(_QWORD *)(v342 + 16);
                      v154 = v306;
                      if (!v344
                        || (v345 = v308 / v344, v345 < 239 * *(int *)(v342 + 12))
                        || v345 - *(_QWORD *)(v342 + 368) <= v315)
                      {
                        if (v308)
                          v350 = (uint64_t)v307;
                        else
                          v350 = 0;
                        webrtc::AudioMultiVector::PushBackInterleaved(v343, v350, v308);
                        v139 = v490;
LABEL_472:
                        *(_DWORD *)(a1 + 288) = 8;
                        v152 = 6;
                        goto LABEL_534;
                      }
                      v346 = webrtc::TimeStretch::Process((webrtc::TimeStretch *)v342, v307, v308, 0, v343, &v512);
                      v347 = *(_QWORD **)(a1 + 160);
                      v348 = v512;
                      v347[29] += v512;
                      v347[20] += v348;
                      v347[8] += v348;
                      v139 = v490;
                      v349 = 6;
                      switch(v346)
                      {
                        case -1:
                          goto LABEL_472;
                        case 0:
                          goto LABEL_668;
                        case 1:
                          v349 = 7;
                          goto LABEL_668;
                        case 2:
                          v349 = 8;
LABEL_668:
                          *(_DWORD *)(a1 + 288) = v349;
                          break;
                        default:
                          break;
                      }
                      if (v311)
                      {
                        v477 = *(_QWORD *)(a1 + 184);
                        v476 = *(_QWORD *)(a1 + 192);
                        v478 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v476 + 120))(v476);
                        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v476 + 160))(v476, v477, v311, v478 - v311);
                        (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 184) + 56))(*(_QWORD *)(a1 + 184), v311);
                      }
                      goto LABEL_528;
                    case 6:
                    case 7:
                      if (!v498)
                        goto LABEL_659;
                      v281 = __p;
                      v282 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 64))(*(_QWORD *)(a1 + 88), *((unsigned __int8 *)__p + 22));
                      if (!v282 || *(_BYTE *)(v282 + 128) != 1)
                      {
                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                          rtc::webrtc_logging_impl::Log("\r\t", v325, v326, v327, v328, v329, v330, v331, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                        v152 = 1;
                        goto LABEL_534;
                      }
                      v283 = *(_QWORD *)(a1 + 248);
                      if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v283 + 16) + 88))(*(_QWORD *)(v283 + 16), *((unsigned __int8 *)v281 + 22)))
                      {
                        goto LABEL_659;
                      }
                      v284 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v283 + 16) + 96))(*(_QWORD *)(v283 + 16));
                      v285 = (unsigned __int8 *)v281[5];
                      v286 = v281[3];
                      if (!v286)
                        v285 = 0;
                      if (v286 >= 0xD)
                        LODWORD(v286) = 13;
                      *(_WORD *)(v284 + 116) = v286 - 1;
                      v287 = *v285;
                      if (v287 >= 0x5D)
                        v287 = 93;
                      if ((_DWORD)v286 == 1)
                      {
                        LODWORD(v290) = 0;
LABEL_658:
                        bzero((void *)((2 * v290) + v284 + 12), 24 - (2 * v290));
                        goto LABEL_659;
                      }
                      if ((_DWORD)v286 == 13)
                      {
                        v288 = 0;
                        v289 = v285 + 1;
                        do
                        {
                          *(_WORD *)(v284 + 12 + 2 * v288) = v289[v288] << 8;
                          v290 = *(unsigned __int16 *)(v284 + 116);
                          ++v288;
                        }
                        while (v288 < v290);
                      }
                      else
                      {
                        v466 = 0;
                        v467 = v285 + 1;
                        do
                        {
                          *(_WORD *)(v284 + 12 + 2 * v466) = (v467[v466] << 8) - 32512;
                          ++v466;
                        }
                        while (v466 < *(unsigned __int16 *)(v284 + 116));
                        LODWORD(v290) = *(unsigned __int16 *)(v284 + 116);
                      }
                      if (v290 <= 0xB)
                        goto LABEL_658;
LABEL_659:
                      v468 = webrtc::ComfortNoise::Generate(*(webrtc::ComfortNoise **)(a1 + 248), *(_QWORD *)(a1 + 272), *(webrtc::AudioMultiVector **)(a1 + 184));
                      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 200) + 16))(*(_QWORD *)(a1 + 200));
                      *(_DWORD *)(a1 + 288) = 9;
                      if ((v482 & 1) == 0)
                        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104));
                      if (v468 == 1)
                      {
                        v152 = 2;
                      }
                      else
                      {
                        if (v468 != 2)
                          goto LABEL_533;
                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v469, v470, v471, v472, v473, v474, v475, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                        v152 = 7;
                      }
LABEL_534:
                      *(_DWORD *)(a1 + 292) = v139;
LABEL_535:
                      if (*(_DWORD *)(a1 + 288) != 9)
                        *(_BYTE *)(*(_QWORD *)(a1 + 248) + 4) = 1;
                      if (*(_QWORD *)(a1 + 368) == *(_QWORD *)(a1 + 376))
                      {
                        v384 = 0;
                      }
                      else
                      {
                        v384 = operator new();
                        *(_DWORD *)v384 = 0;
                        *(_QWORD *)(v384 + 16) = 0;
                        *(_QWORD *)(v384 + 24) = 0;
                        *(_QWORD *)(v384 + 8) = 0;
                        std::vector<webrtc::RtpPacketInfo>::__init_with_size[abi:sn180100]<webrtc::RtpPacketInfo*,webrtc::RtpPacketInfo*>((_QWORD *)(v384 + 8), *(_QWORD *)(a1 + 368), *(_QWORD *)(a1 + 376), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 376) - *(_QWORD *)(a1 + 368)) >> 3));
                        do
                          v385 = __ldxr((unsigned int *)v384);
                        while (__stxr(v385 + 1, (unsigned int *)v384));
                      }
                      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 192) + 40))(*(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 184));
                      v386 = *(_QWORD *)(a1 + 272);
                      if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 112))(*(_QWORD *)(a1 + 192))
                         * v386 >= 0x1E01)
                      {
                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                        {
                          v512 = (unint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/lib"
                                                   "webrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc";
                          *(_QWORD *)&v513 = 7234;
                          *((_QWORD *)&v513 + 1) = &v491;
                          v499 = "Output array is too short. ";
                          v500 = (uint64_t *)&v512;
                          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 112))(*(_QWORD *)(a1 + 192));
                          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v387, v388, v389, v390, v391, v392, v393, *v500);
                        }
                        v386 = 0x1E00uLL
                             / (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 112))(*(_QWORD *)(a1 + 192));
                      }
                      webrtc::SyncBuffer::GetNextAudioInterleaved(*(webrtc::SyncBuffer **)(a1 + 192), v386, (webrtc::AudioFrame *)v48);
                      *(_DWORD *)(v48 + 32) = *(_DWORD *)(a1 + 256);
                      v394 = *(_QWORD *)(v48 + 64);
                      *(_QWORD *)(v48 + 64) = v384;
                      if (v394)
                      {
                        do
                        {
                          v395 = __ldaxr((unsigned int *)v394);
                          v396 = v395 - 1;
                        }
                        while (__stlxr(v396, (unsigned int *)v394));
                        if (!v396)
                        {
                          v397 = *(_QWORD *)(v394 + 8);
                          if (v397)
                          {
                            v398 = *(_QWORD *)(v394 + 16);
                            v399 = *(void **)(v394 + 8);
                            if (v398 != v397)
                            {
                              do
                              {
                                v400 = *(void **)(v398 - 96);
                                if (v400)
                                {
                                  *(_QWORD *)(v398 - 88) = v400;
                                  operator delete(v400);
                                }
                                v398 -= 104;
                              }
                              while (v398 != v397);
                              v399 = *(void **)(v394 + 8);
                            }
                            *(_QWORD *)(v394 + 16) = v397;
                            operator delete(v399);
                          }
                          MEMORY[0x20BD0ADEC](v394, 0x1020C40E72D6CFBLL);
                        }
                      }
                      v401 = *(_QWORD **)(a1 + 192);
                      v402 = (*(uint64_t (**)(_QWORD *))(*v401 + 120))(v401) - v401[5];
                      if (v402 < (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 200) + 48))(*(_QWORD *)(a1 + 200)))
                      {
                        v403 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 200) + 48))(*(_QWORD *)(a1 + 200));
                        v404 = *(_QWORD **)(a1 + 192);
                        v405 = (*(uint64_t (**)(_QWORD *))(*v404 + 120))(v404);
                        v406 = v404[5];
                        v407 = *(_QWORD **)(a1 + 192);
                        v408 = v405 - (v403 + v406) + v407[5];
                        v409 = (*(uint64_t (**)(_QWORD *))(*v407 + 120))(v407);
                        if (v409 >= v408)
                          v410 = v408;
                        else
                          v410 = v409;
                        v407[5] = v410;
                      }
                      if (*(_QWORD *)(v48 + 24) == *(_QWORD *)(a1 + 272))
                      {
                        if (!v482)
                          goto LABEL_578;
                        v411 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 112))(*(_QWORD *)(a1 + 192));
                        if (*(_BYTE *)(v48 + 15432))
                          bzero((void *)(v48 + 72), 0x3C01uLL);
                        v412 = *(_QWORD *)(a1 + 272);
                        v413 = *(_QWORD *)(a1 + 192);
                        v414 = *(_QWORD *)(v413 + 56);
                        v415 = *(_QWORD *)(v413 + 40);
                        v416 = v414 - v415;
                        if (v412 < v414 - v415)
                          v416 = *(_QWORD *)(a1 + 272);
                        if (v414 <= v415)
                          v417 = 0;
                        else
                          v417 = v416;
                        v418 = v412 - v417;
                        webrtc::AudioMultiVector::AudioMultiVector((webrtc::AudioMultiVector *)&v512, v411);
                        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104)) & 1) != 0
                          || (v419 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 104)
                                                                                               + 16))(*(_QWORD *)(a1 + 104), *(unsigned int *)(a1 + 256), HIDWORD(v493), v494)) == 0)
                        {
                          v419 = (*(uint64_t (**)(_QWORD, unint64_t, unint64_t *))(**(_QWORD **)(a1 + 104) + 32))(*(_QWORD *)(a1 + 104), v418, &v512);
                        }
                        (*(void (**)(unint64_t *, _QWORD, unint64_t, unint64_t))(v512 + 80))(&v512, 0, v418, v48 + 72 + 2 * v417);
                        v512 = (unint64_t)&off_24C0AE108;
                        v420 = (_QWORD *)*((_QWORD *)&v513 + 1);
                        v421 = (_QWORD *)v513;
                        if ((_QWORD)v513 == *((_QWORD *)&v513 + 1))
                        {
                          v152 = v419 & (v419 >> 31);
                          if (!(_QWORD)v513)
                            goto LABEL_578;
                        }
                        else
                        {
                          do
                          {
                            if (*v421)
                            {
                              (*(void (**)(_QWORD))(*(_QWORD *)*v421 + 8))(*v421);
                              v420 = (_QWORD *)*((_QWORD *)&v513 + 1);
                            }
                            ++v421;
                          }
                          while (v421 != v420);
                          v421 = (_QWORD *)v513;
                          v152 = v419 & (v419 >> 31);
                          if (!(_QWORD)v513)
                          {
LABEL_578:
                            v422 = *(_DWORD *)(a1 + 288);
                            v26 = v422 > 0xA;
                            v423 = (1 << v422) & 0x721;
                            if (!v26 && v423 != 0)
                              webrtc::BackgroundNoise::Update(*(webrtc::BackgroundNoise **)(a1 + 168), *(const webrtc::AudioMultiVector **)(a1 + 192));
                            if (v139 == 9)
                            {
                              v425 = *(_QWORD **)(a1 + 192);
                              v426 = (*(uint64_t (**)(_QWORD *))(*v425 + 120))(v425);
                              v427 = (*(uint64_t (**)(_QWORD *))(*v425 + 120))(v425);
                              if (v427 >= v426)
                                v428 = v426;
                              else
                                v428 = v427;
                              v425[7] = v428;
                            }
                            v429 = *(_DWORD *)(a1 + 288);
                            if (v429 == 1 || v429 == 11)
                            {
                              v430 = (*(_DWORD *)(a1 + 320) + *(_DWORD *)(a1 + 272));
                              *(_DWORD *)(a1 + 320) = v430;
                            }
                            else
                            {
                              v438 = *(_DWORD **)(a1 + 192);
                              v439 = v438[12];
                              v440 = v439
                                   + v438[10]
                                   - (*(unsigned int (**)(_DWORD *))(*(_QWORD *)v438 + 120))(v438);
                              v430 = *(unsigned int *)(a1 + 320);
                              if ((int)v440 - (int)v430 >= 1)
                              {
                                *(_DWORD *)(a1 + 320) = v440;
                                v430 = v440;
                              }
                            }
                            if (*(_BYTE *)(a1 + 337))
                            {
                              *(_DWORD *)v48 = 0;
                              v441 = *(_DWORD *)(a1 + 288);
                              if (v441 > 0xB)
                              {
LABEL_623:
                                v451 = *(_QWORD *)(a1 + 360);
                                *(_QWORD *)(a1 + 360) = 0;
                                if (v451)
                                {
                                  MEMORY[0x20BD0ADEC](v451, 0x1060C40C2E02434);
                                  if (v154)
                                    v62 = v154;
                                  else
                                    v62 = v152;
                                  if (!v498)
                                    return v62;
                                  break;
                                }
LABEL_607:
                                if (v154)
                                  v62 = v154;
                                else
                                  v62 = v152;
                                if (!v498)
                                  return v62;
                                break;
                              }
                            }
                            else
                            {
                              *(_DWORD *)v48 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 128)
                                                                                          + 48))(*(_QWORD *)(a1 + 128), v430)- *(_DWORD *)(v48 + 24);
                              v441 = *(_DWORD *)(a1 + 288);
                              if (v441 > 0xB)
                                goto LABEL_623;
                            }
                            if (((1 << v441) & 0xE02) != 0)
                              goto LABEL_607;
                            goto LABEL_623;
                          }
                        }
                        *((_QWORD *)&v513 + 1) = v421;
                        operator delete(v421);
                        goto LABEL_578;
                      }
                      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v431, v432, v433, v434, v435, v436, v437, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                      *(_BYTE *)(v48 + 15432) = 1;
                      v62 = 13;
                      if (!v498)
                        return v62;
                      break;
                    case 8:
                      webrtc::Normal::Process(*(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 312), v153, *(_DWORD *)(a1 + 288), *(_QWORD **)(a1 + 184));
                      *(_DWORD *)(a1 + 288) = 10;
                      goto LABEL_532;
                    case 9:
                      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104)) & 1) != 0
                        || (v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 104)
                                                                                            + 16))(*(_QWORD *)(a1 + 104), *(unsigned int *)(a1 + 256), HIDWORD(v493), v494), !(_DWORD)v62))
                      {
                        v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 104) + 32))(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 184));
                      }
                      v316 = *(_QWORD *)(a1 + 272);
                      if ((v62 & 0x80000000) == 0)
                      {
                        *(_DWORD *)(*(_QWORD *)(a1 + 192) + 48) += v316;
                        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 200) + 16))(*(_QWORD *)(a1 + 200));
                        v482 = 0;
                        v152 = 0;
                        *(_DWORD *)(a1 + 288) = 12;
                        goto LABEL_534;
                      }
                      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184), v316);
                      *(_DWORD *)(a1 + 292) = 9;
                      if (!v498)
                        return v62;
                      break;
                    case 10:
                      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                        rtc::webrtc_logging_impl::Log("\r\t", v317, v318, v319, v320, v321, v322, v323, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                      *(_DWORD *)(a1 + 288) = 13;
                      v62 = 10;
                      if (v498)
                        break;
                      return v62;
                    default:
                      goto LABEL_533;
                  }
LABEL_611:
                  v442 = v496;
                  v443 = (char **)__p;
                  v444 = *(_QWORD *)__p;
                  *(_QWORD *)(v444 + 8) = *((_QWORD *)v496 + 1);
                  **((_QWORD **)v442 + 1) = v444;
                  v498 = 0;
                  if (v443 != &v496)
                  {
                    do
                    {
                      v446 = (char **)v443[1];
                      v447 = v443[22];
                      v443[22] = 0;
                      if (v447)
                        (*(void (**)(char *))(*(_QWORD *)v447 + 8))(v447);
                      v448 = v443[21];
                      v443[21] = 0;
                      if (v448)
                        MEMORY[0x20BD0ADEC](v448, 0x1060C40C2E02434);
                      if (*((_BYTE *)v443 + 160))
                      {
                        v449 = v443[8];
                        if (v449)
                        {
                          v443[9] = v449;
                          operator delete(v449);
                        }
                      }
                      v450 = v443[5];
                      v443[5] = 0;
                      if (v450)
                        MEMORY[0x20BD0ADD4](v450, 0x1000C8077774924);
                      operator delete(v443);
                      v443 = v446;
                    }
                    while (v446 != &v496);
                  }
                  return v62;
                }
LABEL_211:
                if (*v43)
                {
                  if (a2)
                    (*(void (**)(unint64_t))(*(_QWORD *)a2 + 48))(a2);
                  v161 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 96))(*(_QWORD *)(a1 + 88));
                  if (v161)
                  {
                    *(_DWORD *)v161 = 7777;
                    *(_OWORD *)(v161 + 4) = 0u;
                    *(_OWORD *)(v161 + 20) = 0u;
                    *(_OWORD *)(v161 + 36) = 0u;
                    *(_OWORD *)(v161 + 52) = 0u;
                    *(_OWORD *)(v161 + 68) = 0u;
                    *(_OWORD *)(v161 + 84) = 0u;
                    *(_OWORD *)(v161 + 100) = 0u;
                    *(_DWORD *)(v161 + 116) = 5;
                    *(_WORD *)(v161 + 120) = 0;
                  }
                  *v43 = 0;
                }
                if (v139 == 1 && a2)
                {
                  if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2))
                    (*(void (**)(unint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 1, *(_QWORD *)(a1 + 312));
LABEL_232:
                  if (v498)
                  {
                    v153 = 0;
                    while (1)
                    {
                      v174 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 64))(*(_QWORD *)(a1 + 88), *((unsigned __int8 *)__p + 22));
                      if (v174 && *(_BYTE *)(v174 + 128) == 1)
                      {
LABEL_262:
                        v154 = 0;
                        if ((v153 & 0x80000000) == 0)
                          goto LABEL_302;
                        goto LABEL_336;
                      }
                      if (!v498)
                        goto LABEL_640;
                      (*(void (**)(unint64_t *__return_ptr))(**((_QWORD **)__p + 22) + 32))(&v512);
                      v175 = v498;
                      if (!v498)
                        goto LABEL_640;
                      v176 = (char *)__p;
                      if (*((_BYTE *)__p + 160))
                      {
                        v177 = *(_QWORD *)(a1 + 376);
                        if (v177 >= *(_QWORD *)(a1 + 384))
                        {
                          v186 = std::vector<webrtc::RtpPacketInfo>::__push_back_slow_path<webrtc::RtpPacketInfo const&>((void **)(a1 + 368), (uint64_t)__p + 56);
                        }
                        else
                        {
                          if (!v177)
                            goto LABEL_640;
                          *(_DWORD *)v177 = *((_DWORD *)__p + 14);
                          *(_QWORD *)(v177 + 16) = 0;
                          *(_QWORD *)(v177 + 24) = 0;
                          *(_QWORD *)(v177 + 8) = 0;
                          v179 = (_BYTE *)*((_QWORD *)v176 + 8);
                          v178 = (_BYTE *)*((_QWORD *)v176 + 9);
                          v180 = v178 - v179;
                          if (v178 != v179)
                          {
                            if (v180 < 0)
                              abort();
                            v181 = (char *)operator new(v178 - v179);
                            *(_QWORD *)(v177 + 8) = v181;
                            *(_QWORD *)(v177 + 16) = v181;
                            v182 = &v181[4 * (v180 >> 2)];
                            *(_QWORD *)(v177 + 24) = v182;
                            memcpy(v181, v179, v180);
                            *(_QWORD *)(v177 + 16) = v182;
                            v48 = v483;
                          }
                          *(_OWORD *)(v177 + 32) = *(_OWORD *)(v176 + 88);
                          v183 = *(_OWORD *)(v176 + 104);
                          v184 = *(_OWORD *)(v176 + 120);
                          v185 = *(_OWORD *)(v176 + 136);
                          *(_BYTE *)(v177 + 96) = v176[152];
                          *(_OWORD *)(v177 + 64) = v184;
                          *(_OWORD *)(v177 + 80) = v185;
                          *(_OWORD *)(v177 + 48) = v183;
                          v186 = (char *)(v177 + 104);
                          v139 = v488;
                        }
                        *(_QWORD *)(a1 + 376) = v186;
                        v175 = v498;
                        if (!v498)
                          goto LABEL_640;
                        v176 = (char *)__p;
                      }
                      v187 = *(_QWORD *)v176;
                      *(_QWORD *)(v187 + 8) = *((_QWORD *)v176 + 1);
                      **((_QWORD **)v176 + 1) = v187;
                      v498 = v175 - 1;
                      v188 = *((_QWORD *)v176 + 22);
                      *((_QWORD *)v176 + 22) = 0;
                      if (v188)
                        (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
                      v189 = *((_QWORD *)v176 + 21);
                      *((_QWORD *)v176 + 21) = 0;
                      if (v189)
                        MEMORY[0x20BD0ADEC](v189, 0x1060C40C2E02434);
                      if (v176[160])
                      {
                        v190 = (void *)*((_QWORD *)v176 + 8);
                        if (v190)
                        {
                          *((_QWORD *)v176 + 9) = v190;
                          operator delete(v190);
                        }
                      }
                      v191 = *((_QWORD *)v176 + 5);
                      *((_QWORD *)v176 + 5) = 0;
                      if (v191)
                        MEMORY[0x20BD0ADD4](v191, 0x1000C8077774924);
                      operator delete(v176);
                      if (!BYTE8(v513))
                      {
                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                          rtc::webrtc_logging_impl::Log("\r\t", v198, v199, v200, v201, v202, v203, v204, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                        v205 = *(_QWORD *)(a1 + 368);
                        for (j = *(_QWORD *)(a1 + 376); j != v205; j -= 104)
                        {
                          v207 = *(void **)(j - 96);
                          if (v207)
                          {
                            *(_QWORD *)(j - 88) = v207;
                            operator delete(v207);
                          }
                        }
                        *(_QWORD *)(a1 + 376) = v205;
                        if (v498)
                        {
                          v208 = v496;
                          v209 = (char **)__p;
                          v210 = *(_QWORD *)__p;
                          *(_QWORD *)(v210 + 8) = *((_QWORD *)v496 + 1);
                          **((_QWORD **)v208 + 1) = v210;
                          v498 = 0;
                          if (v209 != &v496)
                          {
                            do
                            {
                              v211 = (char **)v209[1];
                              v212 = v209[22];
                              v209[22] = 0;
                              if (v212)
                                (*(void (**)(char *))(*(_QWORD *)v212 + 8))(v212);
                              v213 = v209[21];
                              v209[21] = 0;
                              if (v213)
                                MEMORY[0x20BD0ADEC](v213, 0x1060C40C2E02434);
                              if (*((_BYTE *)v209 + 160))
                              {
                                v214 = v209[8];
                                if (v214)
                                {
                                  v209[9] = v214;
                                  operator delete(v214);
                                }
                              }
                              v215 = v209[5];
                              v209[5] = 0;
                              if (v215)
                                MEMORY[0x20BD0ADD4](v215, 0x1000C8077774924);
                              operator delete(v209);
                              v209 = v211;
                            }
                            while (v211 != &v496);
                          }
                        }
                        goto LABEL_336;
                      }
                      v492 = v513;
                      v192 = v512;
                      if (v512)
                      {
                        v153 += v512;
                        *(_QWORD *)(a1 + 280) = v192
                                              / (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 96))(a2);
                      }
                      if (v153 > *(_DWORD *)(a1 + 304))
                        break;
                      if (!v498)
                        goto LABEL_262;
                    }
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                      rtc::webrtc_logging_impl::Log("\r\t", v216, v217, v218, v219, v220, v221, v222, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                    if (v498)
                    {
                      v223 = v496;
                      v224 = (char **)__p;
                      v225 = *(_QWORD *)__p;
                      *(_QWORD *)(v225 + 8) = *((_QWORD *)v496 + 1);
                      **((_QWORD **)v223 + 1) = v225;
                      v498 = 0;
                      if (v224 != &v496)
                      {
                        do
                        {
                          v226 = (char **)v224[1];
                          v227 = v224[22];
                          v224[22] = 0;
                          if (v227)
                            (*(void (**)(char *))(*(_QWORD *)v227 + 8))(v227);
                          v228 = v224[21];
                          v224[21] = 0;
                          if (v228)
                            MEMORY[0x20BD0ADEC](v228, 0x1060C40C2E02434);
                          if (*((_BYTE *)v224 + 160))
                          {
                            v229 = v224[8];
                            if (v229)
                            {
                              v224[9] = v229;
                              operator delete(v229);
                            }
                          }
                          v230 = v224[5];
                          v224[5] = 0;
                          if (v230)
                            MEMORY[0x20BD0ADD4](v230, 0x1000C8077774924);
                          operator delete(v224);
                          v224 = v226;
                        }
                        while (v226 != &v496);
                      }
                    }
                    v154 = 14;
                    if (v153 < 0)
                      goto LABEL_336;
LABEL_302:
                    v155 = v492;
                    if (v492 == 2)
                    {
LABEL_303:
                      if (v153)
                      {
LABEL_304:
                        *(_DWORD *)(a1 + 296) = v155;
                        v152 = 1;
                        *(_BYTE *)(a1 + 300) = 1;
                        goto LABEL_347;
                      }
LABEL_346:
                      v152 = 0;
                      goto LABEL_347;
                    }
                  }
                  else
                  {
                    v153 = 0;
                    v154 = 0;
                    v155 = v492;
                    if (v492 == 2)
                      goto LABEL_303;
                  }
                }
                else
                {
                  if (v139 != 8)
                    goto LABEL_232;
                  if (a2)
                  {
                    v153 = 0;
                    do
                    {
                      if (v153 >= *(_DWORD *)(a1 + 272))
                        goto LABEL_335;
                      v162 = *(unsigned int *)(a1 + 256);
                      v164 = *(_QWORD *)(a1 + 304);
                      v163 = *(_QWORD *)(a1 + 312);
                      v165 = (*(uint64_t (**)(unint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0, 0);
                      if ((v165 & 0x80000000) == 0
                        && 2
                         * (unint64_t)v165
                         * (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 96))(a2) > 2 * (v164 - v153)
                        || (v166 = (*(uint64_t (**)(unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, 0, 0, v162, v163 + 2 * v153, &v492), v166 < 1))
                      {
                        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                          rtc::webrtc_logging_impl::Log("\r\t", v241, v242, v243, v244, v245, v246, v247, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                        v153 = -1;
LABEL_335:
                        v154 = 0;
                        *(_QWORD *)(*(_QWORD *)(a1 + 160) + 152) += v153;
                        if ((v153 & 0x80000000) == 0)
                          goto LABEL_302;
                        goto LABEL_336;
                      }
                      v153 += v166;
                    }
                    while (v153 <= *(_DWORD *)(a1 + 304));
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                    {
                      v154 = 14;
                      if ((v153 & 0x80000000) == 0)
                        goto LABEL_302;
                    }
                    else
                    {
                      rtc::webrtc_logging_impl::Log("\r\t", v167, v168, v169, v170, v171, v172, v173, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                      v154 = 14;
                      if ((v153 & 0x80000000) == 0)
                        goto LABEL_302;
                    }
LABEL_336:
                    *(_DWORD *)(*(_QWORD *)(a1 + 192) + 48) += *(_DWORD *)(a1 + 280);
                    if (a2 && (*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 56))(a2))
                    {
                      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v248, v249, v250, v251, v252, v253, v254, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                      v153 = 0;
                      v154 = 8;
                      v139 = 2;
                      v155 = v492;
                      if (v492 == 2)
                        goto LABEL_303;
                      goto LABEL_345;
                    }
                  }
                  else
                  {
                    *(_DWORD *)(*(_QWORD *)(a1 + 192) + 48) += *(_DWORD *)(a1 + 280);
                  }
                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                    rtc::webrtc_logging_impl::Log("\r\t", v255, v256, v257, v258, v259, v260, v261, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                  v153 = 0;
                  v154 = 9;
                  v139 = 2;
                  v155 = v492;
                  if (v492 == 2)
                    goto LABEL_303;
                }
LABEL_345:
                v262 = *(_DWORD **)(a1 + 192);
                v262[12] += v153 / (*(int (**)(_DWORD *))(*(_QWORD *)v262 + 112))(v262);
                v155 = v492;
                if (v153)
                  goto LABEL_304;
                goto LABEL_346;
              }
            }
            if (!v93)
            {
              v96 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
              v104 = v526;
              if ((v96 & 1) == 0)
              {
                if (!v526)
                  goto LABEL_640;
                v480 = v480 & 0xFFFFFFFF00000000 | 0x3D72;
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v97, v98, v99, v100, v101, v102, v103, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
                v104 = v526;
              }
              if (!v104)
                goto LABEL_640;
            }
LABEL_145:
            v95 = *(_QWORD *)(a1 + 280);
            goto LABEL_146;
          }
          v49 = *(_QWORD *)(a1 + 160);
          v50 = 1000 * (*(_QWORD *)(v49 + 16) - *(_QWORD *)(v49 + 264)) / (unint64_t)*(int *)(a1 + 256);
          if ((int)v50 >= 150 && *(_BYTE *)(v49 + 504))
          {
            v51 = *(_DWORD *)(v49 + 148) + v50;
            ++*(_DWORD *)(v49 + 144);
            *(_DWORD *)(v49 + 148) = v51;
            v52 = atomic_load(&webrtc::StatisticsCalculator::EndExpandEvent(int)::atomic_histogram_pointer);
            if (v52)
            {
              webrtc::metrics::HistogramAdd(v52, v50);
            }
            else
            {
              while (!__ldaxr(&webrtc::StatisticsCalculator::EndExpandEvent(int)::atomic_histogram_pointer))
              {
                if (!__stlxr(0, &webrtc::StatisticsCalculator::EndExpandEvent(int)::atomic_histogram_pointer))
                  goto LABEL_70;
              }
              __clrex();
            }
          }
LABEL_70:
          *(_QWORD *)(v49 + 264) = *(_QWORD *)(v49 + 16);
        }
        if (*(_BYTE *)(a1 + 324))
          v54 = 1;
        else
          v54 = (_DWORD)a3 == 10;
        if (!v54)
          goto LABEL_101;
        goto LABEL_76;
      }
      v37 = *v19;
      v38 = *((_QWORD *)v19 + 20);
      if (v38)
      {
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
        v40 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 64))(*(_QWORD *)(a1 + 88), *((unsigned __int8 *)v19 + 6));
        if (v40)
        {
LABEL_36:
          v41 = (unint64_t)(*(_BYTE *)(v40 + 128) == 1) << 40;
LABEL_39:
          v42 = 0x100000000;
          if (!v39)
            v42 = 0;
          v502 = 1;
          v501 = v42 | v41 | v37;
          goto LABEL_42;
        }
      }
      else
      {
        v39 = 0;
        v40 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 64))(*(_QWORD *)(a1 + 88), *((unsigned __int8 *)v19 + 6));
        if (v40)
          goto LABEL_36;
      }
      v41 = 0;
      goto LABEL_39;
    }
  }
LABEL_91:
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 24))(*(_QWORD *)(a1 + 112)))
    goto LABEL_9;
  webrtc::AudioFrame::Reset(a2);
  v61 = *(_QWORD *)(a1 + 272);
  *(_DWORD *)(a1 + 320) += v61;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 256);
  if ((unint64_t)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 112))(*(_QWORD *)(a1 + 192))
                        * v61) > 0x1E00)
  {
    v62 = 13;
    if (!v498)
      return v62;
    goto LABEL_611;
  }
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 272);
  if (!*(_BYTE *)(a1 + 337))
    goto LABEL_641;
  v368 = 0;
LABEL_642:
  *(_DWORD *)a2 = v368;
  *(_QWORD *)(a2 + 40) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 112))(*(_QWORD *)(a1 + 192));
  v457 = *(_QWORD **)(a1 + 160);
  v458 = *(_QWORD *)(a1 + 272);
  v457[32] += v458;
  v459 = v457[27];
  if ((v458 & 0x80000000) != 0)
  {
    v464 = v459 - (int)v458;
    v465 = v457[28] - (int)v458;
    v457[27] = v464;
    v457[28] = v465;
  }
  else
  {
    if (v459 >= v458)
      v460 = v458;
    else
      v460 = v457[27];
    v461 = v459 - v460;
    v457[2] += v458 - v460;
    v462 = v457[28];
    if (v462 >= v458)
      v463 = v458;
    else
      v463 = v457[28];
    v457[27] = v461;
    v457[28] = v462 - v463;
    v457[10] += v458 - v463;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 128))(*(_QWORD *)(a1 + 176));
  v62 = 0;
  if (v498)
    goto LABEL_611;
  return v62;
}

uint64_t webrtc::NetEqImpl::SetCodecs(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;

  v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  (*(void (**)(unsigned __int8 **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 32))(&v9, *(_QWORD *)(a1 + 88), a2);
  v5 = v9;
  v6 = v10;
  if (v9 != v10)
  {
    do
    {
      v7 = *v5;
      v5 += 4;
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 112) + 96))(*(_QWORD *)(a1 + 112), v7);
    }
    while (v5 != v6);
    v5 = v9;
  }
  if (v5)
  {
    v10 = v5;
    operator delete(v5);
  }
  return pthread_mutex_unlock(v4);
}

BOOL webrtc::NetEqImpl::RegisterPayloadType(webrtc::NetEqImpl *this, uint64_t a2, const webrtc::SdpAudioFormat *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  void *__p;
  char v16;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
  {
    rtc::ToString(a3, (char *)&__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
    if (v16 < 0)
      operator delete(__p);
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v13 = (*(unsigned int (**)(_QWORD, uint64_t, const webrtc::SdpAudioFormat *))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), a2, a3) == 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
  return v13;
}

uint64_t webrtc::NetEqImpl::RemovePayloadType(webrtc::NetEqImpl *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  int v5;
  BOOL v6;
  uint64_t v7;

  v4 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 11) + 48))(*((_QWORD *)this + 11), a2);
  if (v5)
    v6 = v5 == -5;
  else
    v6 = 1;
  if (v6)
  {
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 14) + 96))(*((_QWORD *)this + 14), a2);
    v7 = 0;
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  pthread_mutex_unlock(v4);
  return v7;
}

uint64_t webrtc::NetEqImpl::RemoveAllPayloadTypes(webrtc::NetEqImpl *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 11) + 56))(*((_QWORD *)this + 11));
  return pthread_mutex_unlock(v2);
}

uint64_t webrtc::NetEqImpl::SetMinimumDelay(webrtc::NetEqImpl *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (a2 > 0x2710)
    v5 = 0;
  else
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 22) + 64))(*((_QWORD *)this + 22), a2);
  pthread_mutex_unlock(v4);
  return v5;
}

uint64_t webrtc::NetEqImpl::SetMaximumDelay(webrtc::NetEqImpl *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (a2 > 0x2710)
    v5 = 0;
  else
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 22) + 56))(*((_QWORD *)this + 22), a2);
  pthread_mutex_unlock(v4);
  return v5;
}

uint64_t webrtc::NetEqImpl::SetBaseMinimumDelayMs(webrtc::NetEqImpl *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (a2 > 0x2710)
    v5 = 0;
  else
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 22) + 72))(*((_QWORD *)this + 22), a2);
  pthread_mutex_unlock(v4);
  return v5;
}

uint64_t webrtc::NetEqImpl::GetBaseMinimumDelayMs(webrtc::NetEqImpl *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 80))(*((_QWORD *)this + 22));
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t webrtc::NetEqImpl::TargetDelayMs(webrtc::NetEqImpl *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 104))(*((_QWORD *)this + 22));
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t webrtc::NetEqImpl::FilteredCurrentDelayMs(webrtc::NetEqImpl *this)
{
  pthread_mutex_t *v2;
  int v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  std::string *v13;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 144))(*((_QWORD *)this + 22));
  v4 = (_DWORD *)*((_QWORD *)this + 24);
  v5 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 120))(v4);
  v10 = *((_DWORD *)this + 64);
  if (v10 % 1000)
  {
    v13 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v6, v7, v8, v9, (v10 % 1000));
    return webrtc::NetEqImpl::NetworkStatistics(v13);
  }
  else
  {
    v11 = ((v3 + v5 - v4[10]) / (v10 / 1000));
    pthread_mutex_unlock(v2);
    return v11;
  }
}

uint64_t webrtc::NetEqImpl::NetworkStatistics(uint64_t a1, _WORD *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int16 v8;

  v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 112) + 112))(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 280));
  v6 = *(_QWORD **)(a1 + 192);
  v7 = (*(uint64_t (**)(_QWORD *))(*v6 + 120))(v6) + v5 - v6[5];
  LOWORD(v5) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 104))(*(_QWORD *)(a1 + 176));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 136))(*(_QWORD *)(a1 + 176));
  *a2 = 1000 * v7 / (unint64_t)*(int *)(a1 + 256);
  a2[1] = v5;
  a2[2] = v8;
  webrtc::StatisticsCalculator::GetNetworkStatistics(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 280), (uint64_t)a2);
  pthread_mutex_unlock(v4);
  return 0;
}

uint64_t webrtc::NetEqImpl::CurrentNetworkStatistics@<X0>(webrtc::NetEqImpl *this@<X0>, _WORD *a2@<X8>)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 14) + 112))(*((_QWORD *)this + 14), *((_QWORD *)this + 35));
  v6 = (_QWORD *)*((_QWORD *)this + 24);
  v7 = (*(uint64_t (**)(_QWORD *))(*v6 + 120))(v6) + v5 - v6[5];
  a2[1] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 104))(*((_QWORD *)this + 22));
  a2[2] = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 136))(*((_QWORD *)this + 22));
  *a2 = 1000 * v7 / (unint64_t)*((int *)this + 64);
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::NetEqImpl::GetLifetimeStatistics@<X0>(webrtc::NetEqImpl *this@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v5 = *((_QWORD *)this + 20);
  v6 = *(_OWORD *)(v5 + 120);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v5 + 104);
  *(_OWORD *)(a2 + 112) = v6;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(v5 + 136);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(v5 + 152);
  v7 = *(_OWORD *)(v5 + 56);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(a2 + 48) = v7;
  v8 = *(_OWORD *)(v5 + 88);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v5 + 72);
  *(_OWORD *)(a2 + 80) = v8;
  v9 = *(_OWORD *)(v5 + 24);
  *(_OWORD *)a2 = *(_OWORD *)(v5 + 8);
  *(_OWORD *)(a2 + 16) = v9;
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::NetEqImpl::GetOperationsAndState@<X0>(webrtc::NetEqImpl *this@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;

  v4 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v5 = *((_QWORD *)this + 20);
  v6 = *(_OWORD *)(v5 + 176);
  *(_OWORD *)a2 = *(_OWORD *)(v5 + 160);
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v5 + 192);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(v5 + 208);
  v7 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 14) + 112))(*((_QWORD *)this + 14), *((_QWORD *)this + 35));
  v8 = (_QWORD *)*((_QWORD *)this + 24);
  v9 = (*(uint64_t (**)(_QWORD *))(*v8 + 120))(v8);
  v10 = *((int *)this + 64);
  v11 = 1000 * *((_QWORD *)this + 35) / v10;
  *(_QWORD *)(a2 + 32) = 1000 * (v9 + v7 - v8[5]) / v10;
  *(_QWORD *)(a2 + 40) = v11;
  if ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 56))(*((_QWORD *)this + 14)))
    v12 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 56))(*((_QWORD *)this + 14)) == *(_DWORD *)(*((_QWORD *)this + 24) + 48);
  else
    v12 = 0;
  *(_BYTE *)(a2 + 48) = v12;
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::NetEqImpl::GetPlayoutTimestamp(webrtc::NetEqImpl *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (*((_BYTE *)this + 337) || (*((_DWORD *)this + 72) - 9) < 2)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 16) + 48))(*((_QWORD *)this + 16), *((unsigned int *)this + 80));
    v5 = v6 & 0xFFFFFF00;
    v4 = v6;
    v3 = 0x100000000;
  }
  pthread_mutex_unlock(v2);
  return v3 | v5 | v4;
}

uint64_t webrtc::NetEqImpl::last_output_sample_rate_hz(webrtc::NetEqImpl *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v3 = *((unsigned int *)this + 66);
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t webrtc::NetEqImpl::GetDecoderFormat@<X0>(webrtc::NetEqImpl *this@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  pthread_mutex_t *v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string __p;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 11) + 64))(*((_QWORD *)this + 11), a2);
  if (!result)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 72) = 0;
    return pthread_mutex_unlock(v6);
  }
  v8 = result;
  v9 = *(unsigned __int8 *)(result + 128);
  if (*(_BYTE *)(result + 128))
  {
    v10 = 0;
    goto LABEL_4;
  }
  v10 = *(_QWORD *)(result + 112);
  if (!v10)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(result + 104) + 48))(&v23, *(_QWORD *)(result + 104), result + 24, *(_QWORD *)(result + 88), *(_QWORD *)(result + 96));
    v22 = v23;
    v23 = 0;
    result = *(_QWORD *)(v8 + 112);
    *(_QWORD *)(v8 + 112) = v22;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      result = v23;
      v23 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    v10 = *(_QWORD *)(v8 + 112);
    v9 = *(unsigned __int8 *)(v8 + 128);
    if (*(_BYTE *)(v8 + 128))
    {
LABEL_4:
      if (v9 == 3)
      {
        LODWORD(v23) = 8000;
        if (!v10)
          goto LABEL_23;
        goto LABEL_20;
      }
      if (v9 == 2)
      {
        LODWORD(v23) = *(_DWORD *)(v8 + 48);
        if (!v10)
          goto LABEL_23;
        goto LABEL_20;
      }
      goto LABEL_18;
    }
  }
  result = *(_QWORD *)(v8 + 112);
  if (result)
    goto LABEL_16;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v8 + 104) + 48))(&v29, *(_QWORD *)(v8 + 104), v8 + 24, *(_QWORD *)(v8 + 88), *(_QWORD *)(v8 + 96));
  result = v29;
  v29 = 0;
  v11 = *(_QWORD *)(v8 + 112);
  *(_QWORD *)(v8 + 112) = result;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v29;
    v29 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    result = *(_QWORD *)(v8 + 112);
  }
  if (result)
  {
LABEL_16:
    LODWORD(v23) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
    if (!v10)
    {
LABEL_23:
      HIDWORD(v23) = 1;
      if (*(char *)(v8 + 47) < 0)
        goto LABEL_24;
      goto LABEL_21;
    }
LABEL_20:
    HIDWORD(v23) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 96))(v10);
    if (*(char *)(v8 + 47) < 0)
    {
LABEL_24:
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 24), *(_QWORD *)(v8 + 32));
      goto LABEL_25;
    }
LABEL_21:
    __p = *(std::string *)(v8 + 24);
LABEL_25:
    v25 = *(_OWORD *)(v8 + 48);
    v27 = 0;
    v28 = 0;
    v26 = &v27;
    v13 = *(_QWORD **)(v8 + 64);
    v14 = (_QWORD *)(v8 + 72);
    if (v13 == v14)
    {
      v15 = 0;
      v16 = 0;
      v17 = &v27;
    }
    else
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v26, &v27, (uint64_t)(v13 + 4), (uint64_t)(v13 + 4));
        v18 = (_QWORD *)v13[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v13[2];
            v20 = *v19 == (_QWORD)v13;
            v13 = v19;
          }
          while (!v20);
        }
        v13 = v19;
      }
      while (v19 != v14);
      v17 = v26;
      v15 = v27;
      v16 = v28;
    }
    *(_QWORD *)a3 = v23;
    *(std::string *)(a3 + 8) = __p;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(a3 + 32) = v25;
    *(_QWORD *)(a3 + 48) = v17;
    *(_QWORD *)(a3 + 56) = v15;
    v21 = a3 + 56;
    *(_QWORD *)(a3 + 64) = v16;
    if (!v16)
    {
      *(_QWORD *)(a3 + 48) = v21;
      *(_BYTE *)(a3 + 72) = 1;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v26, v15);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return pthread_mutex_unlock(v6);
      goto LABEL_37;
    }
    *(_QWORD *)(v15 + 16) = v21;
    v26 = &v27;
    v27 = 0;
    v28 = 0;
    *(_BYTE *)(a3 + 72) = 1;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v26, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_37:
      operator delete(__p.__r_.__value_.__l.__data_);
    return pthread_mutex_unlock(v6);
  }
LABEL_18:
  if (*(_BYTE *)(v8 + 124))
  {
    LODWORD(v23) = *(_DWORD *)(v8 + 120);
    if (!v10)
      goto LABEL_23;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t webrtc::NetEqImpl::FlushBuffers(webrtc::NetEqImpl *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc");
  (*(void (**)(_QWORD))(**((_QWORD **)this + 14) + 16))(*((_QWORD *)this + 14));
  v10 = *((_QWORD *)this + 24);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, v11);
  *(_QWORD *)(v10 + 40) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10);
  *(_DWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  v12 = (_QWORD *)*((_QWORD *)this + 24);
  v13 = v12[5];
  v14 = v13 - (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 25) + 48))(*((_QWORD *)this + 25));
  v15 = (*(uint64_t (**)(_QWORD *))(*v12 + 120))(v12);
  if (v15 >= v14)
    v16 = v14;
  else
    v16 = v15;
  v12[5] = v16;
  *((_BYTE *)this + 337) = 1;
  return pthread_mutex_unlock(v2);
}

uint64_t webrtc::NetEqImpl::EnableNack(webrtc::NetEqImpl *this, unint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  webrtc::NackTracker::Config *v9;
  webrtc::NackTracker::Config *v11;
  uint64_t v12;
  std::string *v13;

  v4 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (*((_BYTE *)this + 352))
  {
    v9 = (webrtc::NackTracker::Config *)*((_QWORD *)this + 43);
    if (a2)
      goto LABEL_3;
LABEL_8:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/nack_tracker.cc", 183, "max_nack_list_size > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v5, v6, v7, v8, 0);
    goto LABEL_9;
  }
  v11 = (webrtc::NackTracker::Config *)operator new();
  v9 = webrtc::NackTracker::Config::Config(v11);
  *((_WORD *)v9 + 16) = 0;
  *((_DWORD *)v9 + 9) = 0;
  *((_BYTE *)v9 + 40) = 0;
  *((_WORD *)v9 + 21) = 0;
  *((_DWORD *)v9 + 11) = 0;
  *((_BYTE *)v9 + 48) = 0;
  *((_DWORD *)v9 + 13) = 48;
  *((_QWORD *)v9 + 8) = 0;
  *((_QWORD *)v9 + 7) = (char *)v9 + 64;
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = 500;
  *((_DWORD *)v9 + 22) = 0;
  v12 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = v9;
  if (v12)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v12 + 56, *(_QWORD **)(v12 + 64));
    MEMORY[0x20BD0ADEC](v12, 0x1020C4066F93CF5);
    v9 = (webrtc::NackTracker::Config *)*((_QWORD *)this + 43);
  }
  *((_BYTE *)this + 352) = 1;
  *((_DWORD *)v9 + 13) = *((_DWORD *)this + 64) / 1000;
  if (!a2)
    goto LABEL_8;
LABEL_3:
  if (a2 < 0x1F5)
  {
    *((_QWORD *)v9 + 10) = a2;
    webrtc::NackTracker::LimitNackListSize(v9);
    return pthread_mutex_unlock(v4);
  }
LABEL_9:
  v13 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/nack_tracker.cc", 186, "max_nack_list_size <= kNackListSizeLimitLocal", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v5, v6, v7, v8, a2);
  return webrtc::NetEqImpl::DisableNack((webrtc::NetEqImpl *)v13);
}

uint64_t webrtc::NetEqImpl::DisableNack(webrtc::NetEqImpl *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v3 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v3 + 56, *(_QWORD **)(v3 + 64));
    MEMORY[0x20BD0ADEC](v3, 0x1020C4066F93CF5);
  }
  *((_BYTE *)this + 352) = 0;
  return pthread_mutex_unlock(v2);
}

uint64_t webrtc::NetEqImpl::GetNackList@<X0>(webrtc::NackTracker **this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pthread_mutex_t *v6;

  v6 = (pthread_mutex_t *)(this + 2);
  pthread_mutex_lock((pthread_mutex_t *)(this + 2));
  if (*((_BYTE *)this + 352))
  {
    webrtc::NackTracker::GetNackList(this[43], a2, (char **)a3);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  return pthread_mutex_unlock(v6);
}

unint64_t webrtc::NetEqImpl::SyncBufferSizeMs(webrtc::NetEqImpl *this)
{
  pthread_mutex_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  std::string *v12;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v3 = (_QWORD *)*((_QWORD *)this + 24);
  v4 = (*(uint64_t (**)(_QWORD *))(*v3 + 120))(v3);
  v9 = *((_DWORD *)this + 64);
  if (v9 % 1000)
  {
    v12 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v5, v6, v7, v8, (v9 % 1000));
    return webrtc::NetEqImpl::DoCodecPlc((webrtc::NetEqImpl *)v12);
  }
  else
  {
    v10 = (v4 - v3[5]) / (unint64_t)(v9 / 1000);
    pthread_mutex_unlock(v2);
    return v10;
  }
}

uint64_t webrtc::NetEqImpl::DoCodecPlc(webrtc::NetEqImpl *this)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  _WORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  BOOL v48;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 80))(*((_QWORD *)this + 11));
  if (result)
  {
    v3 = result;
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 112))(*((_QWORD *)this + 23));
    v5 = *((_QWORD *)this + 34);
    v6 = (_QWORD *)*((_QWORD *)this + 24);
    v7 = (*(uint64_t (**)(_QWORD *))(*v6 + 120))(v6);
    v8 = v6[5];
    v9 = v5 - v7 + v8 + (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 25) + 48))(*((_QWORD *)this + 25));
    *((_QWORD *)this + 70) = 0;
    (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v3 + 40))(v3, v9, (char *)this + 560);
    v14 = *((_QWORD *)this + 70);
    if (v14)
    {
      if (v14 < v9 * v4)
      {
LABEL_44:
        v47 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/neteq_impl.cc", 1560, "concealment_audio_.size() >= requested_samples_per_channel * channels", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v10, v11, v12, v13, v14);
        return webrtc::NetEqImpl::DoExpand((webrtc::NetEqImpl *)v47, v48);
      }
      v15 = (_QWORD *)*((_QWORD *)this + 24);
      v16 = (*(uint64_t (**)(_QWORD *))(*v15 + 120))(v15);
      v17 = *((_QWORD *)this + 70);
      if (v17)
        v18 = *((_QWORD *)this + 72);
      else
        v18 = 0;
      webrtc::AudioMultiVector::PushBackInterleaved(v15, v18, v17);
      v19 = (*(uint64_t (**)(_QWORD *))(*v15 + 120))(v15) - v16;
      if (v15[4])
      {
        v20 = 0;
        while (1)
        {
          v14 = v15[1];
          if (v20 >= (uint64_t)(v15[2] - v14) >> 3)
            break;
          (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v14 + 8 * v20) + 80))(*(_QWORD *)(v14 + 8 * v20), v19);
          if (++v20 >= v15[4])
            goto LABEL_11;
        }
        __break(1u);
        goto LABEL_44;
      }
LABEL_11:
      v21 = v15[5];
      v22 = v21 >= v19;
      v23 = v21 - v19;
      if (!v22)
        v23 = 0;
      v15[5] = v23;
      v24 = v15[7];
      v22 = v24 >= v19;
      v25 = v24 - v19;
      if (!v22)
        v25 = 0;
      v15[7] = v25;
      v26 = *((_QWORD *)this + 70);
      v27 = *((_DWORD *)this + 72);
      v28 = v26 / v4;
      if (v26)
      {
        v29 = (_WORD *)*((_QWORD *)this + 72);
        v30 = 2 * v26;
        while (!*v29)
        {
          ++v29;
          v30 -= 2;
          if (!v30)
            goto LABEL_19;
        }
        v31 = (_QWORD *)*((_QWORD *)this + 20);
        v31[31] += v28;
        v39 = v31[27];
        if ((v28 & 0x80000000) != 0)
        {
          v28 = (int)v28;
        }
        else
        {
          v40 = v28;
          if (v39 >= v28)
            v28 = v28;
          else
            v28 = v31[27];
          v31[2] += v40 - v28;
        }
        v31[27] = v39 - v28;
      }
      else
      {
LABEL_19:
        v31 = (_QWORD *)*((_QWORD *)this + 20);
        v31[32] += v28;
        v32 = v31[27];
        if ((v28 & 0x80000000) != 0)
        {
          v37 = v32 - (int)v28;
          v38 = v31[28] - (int)v28;
          v31[27] = v37;
          v31[28] = v38;
        }
        else
        {
          if (v32 >= v28)
            v33 = v28;
          else
            v33 = v31[27];
          v34 = v32 - v33;
          v31[2] += v28 - v33;
          v35 = v31[28];
          if (v35 >= v28)
            v36 = v28;
          else
            v36 = v31[28];
          v31[27] = v34;
          v31[28] = v35 - v36;
          v31[10] += v28 - v36;
        }
      }
      v41 = v27 == 11;
      v42 = v31[3];
      if (!v41)
        ++v42;
      v31[3] = v42;
      *((_DWORD *)this + 72) = 11;
      if (!*((_QWORD *)this + 45))
      {
        v43 = (uint64_t *)*((_QWORD *)this + 10);
        v44 = (_QWORD *)operator new();
        v45 = *v43;
        *v44 = v43;
        v44[1] = v45;
        v46 = *((_QWORD *)this + 45);
        *((_QWORD *)this + 45) = v44;
        if (v46)
          MEMORY[0x20BD0ADEC](v46, 0x1060C40C2E02434);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t webrtc::NetEqImpl::DoExpand(webrtc::NetEqImpl *this, char a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _WORD *v26;
  unint64_t v27;
  unsigned __int16 *v28;
  int v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v4 = (_QWORD *)*((_QWORD *)this + 24);
  v5 = (*(uint64_t (**)(_QWORD *))(*v4 + 120))(v4);
  v6 = v4[5];
  if ((unint64_t)(v5
                        - (v6
                         + (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 25) + 48))(*((_QWORD *)this + 25)))) < *((_QWORD *)this + 34))
  {
    while (1)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 23) + 16))(*((_QWORD *)this + 23));
      v7 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 25) + 24))(*((_QWORD *)this + 25), *((_QWORD *)this + 23));
      v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 120))(*((_QWORD *)this + 23));
      v9 = *((_DWORD *)this + 72);
      v10 = *((_QWORD *)this + 25);
      if (!*(_BYTE *)(v10 + 24) && !*(_BYTE *)(v10 + 112))
      {
        v25 = *(_QWORD *)(v10 + 32);
        if (!v25)
          goto LABEL_6;
        v26 = *(_WORD **)(v10 + 128);
        if (!*v26)
          break;
      }
LABEL_4:
      if (*((_BYTE *)this + 300) && *((_DWORD *)this + 74) == 2)
        goto LABEL_6;
      v11 = (_QWORD *)*((_QWORD *)this + 20);
      v11[31] += v8;
      v17 = v11[27];
      if ((v8 & 0x80000000) != 0)
      {
        v18 = (int)v8;
      }
      else
      {
        if (v17 >= v8)
          v18 = v8;
        else
          v18 = v11[27];
        v11[2] += v8 - v18;
      }
      v11[27] = v17 - v18;
LABEL_22:
      v20 = v9 == 1;
      v21 = v11[3];
      if (!v20)
        ++v21;
      v11[3] = v21;
      *((_DWORD *)this + 72) = 1;
      if ((v7 & 0x80000000) != 0)
        return v7;
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 24) + 40))(*((_QWORD *)this + 24), *((_QWORD *)this + 23));
      (*(void (**)(_QWORD))(**((_QWORD **)this + 23) + 16))(*((_QWORD *)this + 23));
      v22 = (_QWORD *)*((_QWORD *)this + 24);
      v23 = (*(uint64_t (**)(_QWORD *))(*v22 + 120))(v22);
      v24 = v22[5];
      if ((unint64_t)(v23
                            - (v24
                             + (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 25) + 48))(*((_QWORD *)this + 25)))) >= *((_QWORD *)this + 34))
        goto LABEL_34;
    }
    v27 = 0;
    v28 = v26 + 64;
    while (v25 - 1 != v27)
    {
      v29 = *v28;
      v28 += 64;
      ++v27;
      if (v29)
      {
        if (v27 < v25)
          goto LABEL_4;
        break;
      }
    }
LABEL_6:
    v11 = (_QWORD *)*((_QWORD *)this + 20);
    v11[32] += v8;
    v12 = v11[27];
    if ((v8 & 0x80000000) != 0)
    {
      v19 = v11[28] - (int)v8;
      v11[27] = v12 - (int)v8;
      v11[28] = v19;
    }
    else
    {
      if (v12 >= v8)
        v13 = v8;
      else
        v13 = v11[27];
      v14 = v12 - v13;
      v11[2] += v8 - v13;
      v15 = v11[28];
      if (v15 >= v8)
        v16 = v8;
      else
        v16 = v11[28];
      v11[27] = v14;
      v11[28] = v15 - v16;
      v11[10] += v8 - v16;
    }
    goto LABEL_22;
  }
LABEL_34:
  if ((a2 & 1) == 0)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13));
  if (!*((_QWORD *)this + 45))
  {
    v30 = (uint64_t *)*((_QWORD *)this + 10);
    v31 = (_QWORD *)operator new();
    v32 = *v30;
    *v31 = v30;
    v31[1] = v32;
    v33 = *((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = v31;
    if (v33)
      MEMORY[0x20BD0ADEC](v33, 0x1060C40C2E02434);
  }
  return 0;
}

uint64_t webrtc::NetEqImpl::UpdatePlcComponents(webrtc::NetEqImpl *this, uint64_t a2, unint64_t a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a2;
  v6 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char *, _QWORD, uint64_t, unint64_t))(**((_QWORD **)this + 17) + 16))(*((_QWORD *)this + 17), *((_QWORD *)this + 21), *((_QWORD *)this + 24), (char *)this + 240, *((_QWORD *)this + 20), a2, a3);
  v7 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = operator new();
  *(_QWORD *)v8 = &off_24C0B7510;
  *(_DWORD *)(v8 + 8) = v4;
  *(_QWORD *)(v8 + 16) = a3;
  *(_DWORD *)(v8 + 24) = v4 / 8000;
  *(_QWORD *)(v8 + 32) = v4 / 100;
  *(int8x16_t *)(v8 + 40) = vextq_s8(*((int8x16_t *)this + 12), *((int8x16_t *)this + 12), 8uLL);
  webrtc::AudioMultiVector::AudioMultiVector((webrtc::AudioMultiVector *)(v8 + 336), a3);
  *(_QWORD *)(v8 + 376) = 0;
  *(_QWORD *)(v8 + 384) = 0;
  *(_QWORD *)(v8 + 392) = 0;
  result = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = v8;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

char *std::vector<webrtc::RtpPacketInfo>::__push_back_slow_path<webrtc::RtpPacketInfo const&>(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char *v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0x4EC4EC4EC4EC4EC5 * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276)
    goto LABEL_23;
  if (0x9D89D89D89D89D8ALL * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x9D89D89D89D89D8ALL * (((_BYTE *)a1[2] - v3) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((_BYTE *)a1[2] - v3) >> 3)) >= 0x13B13B13B13B13BLL)
    v5 = 0x276276276276276;
  if (!v5)
  {
    __break(1u);
LABEL_25:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x276276276276276)
    goto LABEL_25;
  v28 = 104 * v5;
  v7 = (char *)operator new(104 * v5);
  v29 = v4;
  v8 = &v7[104 * v4];
  *(_DWORD *)v8 = *(_DWORD *)a2;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = 0;
  v10 = *(_BYTE **)(a2 + 8);
  v9 = *(_BYTE **)(a2 + 16);
  v11 = v9 - v10;
  if (v9 == v10)
    goto LABEL_11;
  if (v11 < 0)
LABEL_23:
    abort();
  v12 = (char *)operator new(v11);
  *((_QWORD *)v8 + 1) = v12;
  v13 = &v12[4 * (v11 >> 2)];
  *((_QWORD *)v8 + 3) = v13;
  memcpy(v12, v10, v11);
  *((_QWORD *)v8 + 2) = v13;
LABEL_11:
  v14 = &v7[v28];
  v15 = &v7[104 * v29];
  v16 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v15 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v15 + 5) = v16;
  v15[96] = *(_BYTE *)(a2 + 96);
  v17 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v15 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v15 + 3) = v17;
  v18 = v8 + 104;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v18;
    a1[2] = v14;
  }
  else
  {
    v19 = 0;
    do
    {
      v20 = &v8[v19];
      v21 = &v2[v19];
      *((_DWORD *)v20 - 26) = *(_DWORD *)&v2[v19 - 104];
      *((_OWORD *)v20 - 6) = *(_OWORD *)&v2[v19 - 96];
      *((_QWORD *)v20 - 10) = *(_QWORD *)&v2[v19 - 80];
      *((_QWORD *)v21 - 11) = 0;
      *((_QWORD *)v21 - 10) = 0;
      *((_QWORD *)v21 - 12) = 0;
      v22 = *(_OWORD *)&v2[v19 - 40];
      v23 = *(_OWORD *)&v2[v19 - 24];
      v24 = v2[v19 - 8];
      *(_OWORD *)(v20 - 56) = *(_OWORD *)&v2[v19 - 56];
      *(v20 - 8) = v24;
      *(_OWORD *)(v20 - 24) = v23;
      *(_OWORD *)(v20 - 40) = v22;
      *(_OWORD *)(v20 - 72) = *(_OWORD *)&v2[v19 - 72];
      v19 -= 104;
    }
    while (&v2[v19] != v3);
    v2 = (char *)*a1;
    v25 = (char *)a1[1];
    *a1 = &v8[v19];
    a1[1] = v18;
    a1[2] = v14;
    while (v25 != v2)
    {
      v26 = (void *)*((_QWORD *)v25 - 12);
      if (v26)
      {
        *((_QWORD *)v25 - 11) = v26;
        operator delete(v26);
      }
      v25 -= 104;
    }
  }
  if (v2)
    operator delete(v2);
  return v8 + 104;
}

void webrtc::Normal::~Normal(webrtc::Normal *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::webrtc_network_internal::CompareNetworks(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  size_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;

  v2 = *(_QWORD *)result;
  v3 = *(_DWORD *)(*(_QWORD *)result + 208);
  v4 = *a2;
  v5 = *(_DWORD *)(*a2 + 208);
  if (v3 != v5)
    return v3 < v5;
  v6 = (_QWORD *)(v2 + 128);
  v7 = (unsigned __int8 *)(v4 + 128);
  v8 = *(_QWORD *)(v2 + 136);
  if (*(char *)(v2 + 151) >= 0)
    v9 = *(unsigned __int8 *)(v2 + 151);
  else
    v9 = *(_QWORD *)(v2 + 136);
  v10 = *(unsigned __int8 *)(v4 + 151);
  v11 = *(_QWORD *)(v4 + 136);
  if ((v10 & 0x80u) == 0)
    v12 = *(unsigned __int8 *)(v4 + 151);
  else
    v12 = *(_QWORD *)(v4 + 136);
  if (v9 != v12)
  {
LABEL_19:
    if ((*(_BYTE *)(v2 + 151) & 0x80) == 0)
    {
      v8 = *(unsigned __int8 *)(v2 + 151);
      goto LABEL_25;
    }
LABEL_22:
    if ((v8 & 0x8000000000000000) != 0 || (v6 = (_QWORD *)*v6, v8) && !v6)
    {
LABEL_54:
      __break(1u);
      return result;
    }
LABEL_25:
    if ((v10 & 0x80) == 0)
    {
      v11 = v10;
LABEL_34:
      if (v11 >= v8)
        v18 = v8;
      else
        v18 = v11;
      v19 = memcmp(v6, v7, v18);
      if (v19)
      {
        if (v19 < 0)
          return 1;
      }
      else if (v8 < v11)
      {
        return 1;
      }
      return 0;
    }
    if ((v11 & 0x8000000000000000) == 0)
    {
      v7 = *(unsigned __int8 **)v7;
      if (!v11 || v7)
        goto LABEL_34;
    }
    goto LABEL_54;
  }
  if ((v10 & 0x80u) == 0)
    v13 = (unsigned __int8 *)(v4 + 128);
  else
    v13 = *(unsigned __int8 **)v7;
  if ((*(_BYTE *)(v2 + 151) & 0x80) != 0)
  {
    result = memcmp((const void *)*v6, v13, *(_QWORD *)(v2 + 136));
    if ((_DWORD)result)
      goto LABEL_22;
  }
  else if (*(_BYTE *)(v2 + 151))
  {
    v14 = (unsigned __int8 *)(v2 + 128);
    v15 = *(unsigned __int8 *)(v2 + 151);
    while (*v14 == *v13)
    {
      ++v14;
      ++v13;
      if (!--v15)
        goto LABEL_27;
    }
    goto LABEL_19;
  }
LABEL_27:
  v16 = *(_DWORD *)(v2 + 184);
  v17 = *(_DWORD *)(v4 + 184);
  if (v16 != v17)
    return !v16 || v16 == 2 && v17 == 30;
  if (v16 != 30)
  {
    if (v16 == 2)
      return bswap32(*(_DWORD *)(v2 + 188)) < bswap32(*(_DWORD *)(v4 + 188));
    return 0;
  }
  v20 = bswap64(*(_QWORD *)(v2 + 188));
  v21 = bswap64(*(_QWORD *)(v4 + 188));
  if (v20 == v21 && (v20 = bswap64(*(_QWORD *)(v2 + 196)), v21 = bswap64(*(_QWORD *)(v4 + 196)), v20 == v21))
  {
    v22 = 0;
  }
  else if (v20 < v21)
  {
    v22 = -1;
  }
  else
  {
    v22 = 1;
  }
  return v22 >> 31;
}

double rtc::MakeNetworkKey(std::string *a1, std::string *__src, size_t __len, rtc::IPAddress *a4, int a5)
{
  size_t size;
  size_t v10;
  size_t v11;
  std::string *v12;
  std::string::size_type v14;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  int v18;
  uint64_t v19;
  std::string::size_type v20;
  unsigned __int8 v21;
  std::string::size_type v22;
  BOOL v23;
  const std::string::value_type *p_p_new_stuff;
  std::string *p_dst;
  _BYTE *v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string *v30;
  char *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  double result;
  std::string *v36;
  _BYTE *v37;
  std::string::size_type v38;
  std::string::value_type *__p_new_stuff;
  std::string::size_type v40;
  unsigned __int8 v41;
  std::string __dst;

  size = __len;
  memset(&__dst, 0, sizeof(__dst));
  if (!__src && __len)
    goto LABEL_75;
  if (__len <= 0x16)
  {
    if (__len)
    {
      v17 = (std::string *)((char *)&__dst + __len);
      if (&__dst <= __src && v17 > __src)
        goto LABEL_75;
      memmove(&__dst, __src, __len);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        __dst.__r_.__value_.__l.__size_ = size;
      else
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size;
      v17->__r_.__value_.__s.__data_[0] = 0;
      LODWORD(v16) = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      v15 = __dst.__r_.__value_.__r.__words[2];
      size = __dst.__r_.__value_.__l.__size_;
    }
    else
    {
      v15 = 0;
      LODWORD(v16) = 0;
    }
  }
  else
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      goto LABEL_76;
    v10 = 44;
    if (__len > 0x2C)
      v10 = __len;
    v11 = (v10 | 7) + 1;
    v12 = (std::string *)operator new(v11);
    if (v12 <= __src && (std::string *)((char *)v12 + size) > __src)
      goto LABEL_75;
    v14 = (std::string::size_type)v12;
    memcpy(v12, __src, size);
    v15 = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__l.__size_ = size;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = v14;
    *(_BYTE *)(v14 + size) = 0;
    v16 = (v11 | 0x8000000000000000) >> 56;
  }
  v18 = (char)v16;
  v19 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  v16 = v16;
  if ((v16 & 0x80u) == 0)
    v20 = 22;
  else
    v20 = v19;
  if ((v16 & 0x80u) != 0)
    v16 = size;
  if (v20 == v16)
  {
    std::string::__grow_by_and_replace(&__dst, v20, 1uLL, v20, v20, 0, 1uLL, "%");
    rtc::IPAddress::ToString(a4, &__p_new_stuff);
    v21 = v41;
    if (((char)v41 & 0x80000000) == 0)
    {
LABEL_27:
      v22 = v21;
      v23 = v21 == 0;
      p_p_new_stuff = (const std::string::value_type *)&__p_new_stuff;
      goto LABEL_37;
    }
  }
  else
  {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (v18 >= 0)
      p_dst = &__dst;
    v26 = (char *)p_dst + v16;
    if ((char *)p_dst + v16 <= "%" && v26 + 1 > "%")
      goto LABEL_75;
    *v26 = 37;
    v27 = v16 + 1;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      __dst.__r_.__value_.__l.__size_ = v27;
      p_dst->__r_.__value_.__s.__data_[v27] = 0;
      rtc::IPAddress::ToString(a4, &__p_new_stuff);
      v21 = v41;
      if (((char)v41 & 0x80000000) == 0)
        goto LABEL_27;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v27 & 0x7F;
      p_dst->__r_.__value_.__s.__data_[v27] = 0;
      rtc::IPAddress::ToString(a4, &__p_new_stuff);
      v21 = v41;
      if (((char)v41 & 0x80000000) == 0)
        goto LABEL_27;
    }
  }
  v22 = v40;
  if ((v40 & 0x8000000000000000) != 0)
    goto LABEL_75;
  p_p_new_stuff = __p_new_stuff;
  v23 = v40 == 0;
  if (v40)
  {
    if (!__p_new_stuff)
      goto LABEL_75;
  }
LABEL_37:
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = 22;
  else
    v28 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v29 = __dst.__r_.__value_.__l.__size_;
  if (v28 - v29 < v22)
  {
    std::string::__grow_by_and_replace(&__dst, v28, v29 + v22 - v28, v29, v29, 0, v22, p_p_new_stuff);
    goto LABEL_57;
  }
  if (!v23)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &__dst;
    else
      v30 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v31 = (char *)v30 + v29;
    if ((char *)v30 + v29 > p_p_new_stuff || &v31[v22] <= p_p_new_stuff)
    {
      memmove(v31, p_p_new_stuff, v22);
      v32 = v29 + v22;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        __dst.__r_.__value_.__l.__size_ = v29 + v22;
      else
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v32 & 0x7F;
      v30->__r_.__value_.__s.__data_[v32] = 0;
      goto LABEL_57;
    }
LABEL_75:
    __break(1u);
LABEL_76:
    abort();
  }
LABEL_57:
  v33 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = 22;
  else
    v34 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v33 = __dst.__r_.__value_.__l.__size_;
  if (v34 != v33)
  {
    v36 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v37 = (char *)v36 + v33;
    if ((char *)v36 + v33 > "/" || v37 + 1 <= "/")
    {
      *v37 = 47;
      v38 = v33 + 1;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        __dst.__r_.__value_.__l.__size_ = v38;
        v36->__r_.__value_.__s.__data_[v38] = 0;
        rtc::StringBuilder::operator<<(&__dst, a5);
        if (((char)v41 & 0x80000000) == 0)
          goto LABEL_65;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v38 & 0x7F;
        v36->__r_.__value_.__s.__data_[v38] = 0;
        rtc::StringBuilder::operator<<(&__dst, a5);
        if (((char)v41 & 0x80000000) == 0)
          goto LABEL_65;
      }
      goto LABEL_64;
    }
    goto LABEL_75;
  }
  std::string::__grow_by_and_replace(&__dst, v34, 1uLL, v34, v34, 0, 1uLL, "/");
  rtc::StringBuilder::operator<<(&__dst, a5);
  if ((char)v41 < 0)
LABEL_64:
    operator delete(__p_new_stuff);
LABEL_65:
  result = *(double *)&__dst.__r_.__value_.__l.__data_;
  *a1 = __dst;
  return result;
}

uint64_t rtc::NetworkManager::enumeration_permission(rtc::NetworkManager *this)
{
  return 0;
}

uint64_t rtc::NetworkManager::GetDefaultLocalAddress(rtc::NetworkManager *this, int a2, rtc::IPAddress *a3)
{
  return 0;
}

uint64_t rtc::NetworkManager::GetMdnsResponder(rtc::NetworkManager *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'rtc::NetworkManager::GetMdnsResponder(rtc::NetworkManager *this)
{
  return 0;
}

uint64_t rtc::NetworkManagerBase::NetworkManagerBase(uint64_t this)
{
  *(_QWORD *)(this + 16) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(this + 24) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(this + 32) = this + 32;
  *(_QWORD *)(this + 40) = this + 32;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = this + 32;
  *(_BYTE *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(this + 80) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(this + 88) = this + 88;
  *(_QWORD *)(this + 96) = this + 88;
  *(_QWORD *)(this + 104) = 0;
  *(_QWORD *)(this + 112) = this + 88;
  *(_BYTE *)(this + 120) = 0;
  *(_QWORD *)this = off_24C0B76D8;
  *(_QWORD *)(this + 8) = &unk_24C0B7748;
  *(_DWORD *)(this + 128) = 0;
  *(_QWORD *)(this + 136) = 0;
  *(_QWORD *)(this + 144) = 0;
  *(_QWORD *)(this + 168) = 0;
  *(_QWORD *)(this + 152) = 0;
  *(_QWORD *)(this + 160) = this + 168;
  *(_QWORD *)(this + 176) = 0;
  *(_QWORD *)(this + 184) = 0;
  *(_QWORD *)(this + 192) = 0;
  *(_QWORD *)(this + 200) = &unk_24C0ACDA0;
  *(_DWORD *)(this + 224) = 0;
  *(_QWORD *)(this + 208) = 0;
  *(_QWORD *)(this + 216) = 0;
  *(_DWORD *)(this + 256) = 0;
  *(_QWORD *)(this + 232) = &unk_24C0ACDA0;
  *(_QWORD *)(this + 240) = 0;
  *(_QWORD *)(this + 248) = 0;
  *(_WORD *)(this + 264) = 1;
  return this;
}

uint64_t rtc::NetworkManagerBase::enumeration_permission(rtc::NetworkManagerBase *this)
{
  return *((unsigned int *)this + 32);
}

uint64_t rtc::NetworkManagerBase::GetAnyAddressNetworks@<X0>(rtc::NetworkManagerBase *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  int v16;
  __int128 v17;
  void *v18;
  int v19;
  __int128 v20;
  int v21;

  v4 = *((_QWORD *)this + 23);
  if (v4)
  {
    v5 = *((_QWORD *)this + 24);
    if (!v5)
      goto LABEL_15;
LABEL_26:
    result = (uint64_t)operator new(0x10uLL);
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    a2[1] = result + 16;
    a2[2] = result + 16;
    *a2 = result;
    return result;
  }
  v15 = &unk_24C0ACDA0;
  v16 = 2;
  v17 = 0uLL;
  result = operator new();
  v7 = result;
  *(_QWORD *)result = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(result + 8) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(result + 16) = result + 16;
  *(_QWORD *)(result + 24) = result + 16;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = result + 16;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(result + 64) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(result + 72) = result + 72;
  *(_QWORD *)(result + 80) = result + 72;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = result + 72;
  *(_BYTE *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_BYTE *)(result + 151) = 3;
  if (result + 128 <= (unint64_t)"any" && result + 131 > (unint64_t)"any")
    goto LABEL_27;
  *(_BYTE *)(result + 130) = 121;
  *(_WORD *)(result + 128) = 28257;
  *(_BYTE *)(result + 131) = 0;
  *(_BYTE *)(result + 175) = 3;
  if (result + 152 <= (unint64_t)"any" && result + 155 > (unint64_t)"any")
    goto LABEL_27;
  *(_BYTE *)(result + 154) = 121;
  *(_WORD *)(result + 152) = 28257;
  *(_BYTE *)(result + 155) = 0;
  *(_QWORD *)(result + 176) = &unk_24C0ACDA0;
  *(_DWORD *)(result + 184) = 2;
  *(_QWORD *)(result + 196) = 0;
  *(_QWORD *)(result + 188) = 0;
  *(_DWORD *)(result + 208) = 0;
  rtc::MakeNetworkKey((std::string *)(result + 216), (std::string *)"any", 3uLL, (rtc::IPAddress *)&v15, 0);
  *(_QWORD *)(v7 + 240) = 0;
  *(_QWORD *)(v7 + 248) = 0;
  *(_QWORD *)(v7 + 256) = 0;
  *(_QWORD *)(v7 + 261) = 0;
  *(_QWORD *)(v7 + 272) = 32;
  *(_DWORD *)(v7 + 280) = 0;
  *(_BYTE *)(v7 + 284) = 1;
  *(_WORD *)(v7 + 286) = 0;
  *(_DWORD *)(v7 + 288) = 0;
  result = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = v7;
  if (result)
  {
    rtc::Network::~Network((rtc::Network *)result);
    result = MEMORY[0x20BD0ADEC](v8);
    v7 = *((_QWORD *)this + 23);
  }
  *(_QWORD *)(v7 + 112) = this;
  *(_QWORD *)(*((_QWORD *)this + 23) + 120) = (char *)this + 8;
  v9 = *((_QWORD *)this + 23);
  v20 = v17;
  v19 = v16;
  v18 = &unk_24C0B5310;
  v21 = 0;
  v10 = *(_QWORD *)(v9 + 248);
  if (v10 >= *(_QWORD *)(v9 + 256))
  {
    *(_QWORD *)(v9 + 248) = std::vector<rtc::InterfaceAddress>::__push_back_slow_path<rtc::InterfaceAddress>((char **)(v9 + 240), (uint64_t)&v18);
    v4 = *((_QWORD *)this + 23);
    v5 = *((_QWORD *)this + 24);
    if (!v5)
      goto LABEL_15;
    goto LABEL_26;
  }
  if (!v10)
    goto LABEL_27;
  *(_DWORD *)(v10 + 8) = v16;
  *(_OWORD *)(v10 + 12) = v20;
  *(_QWORD *)v10 = &unk_24C0B5310;
  *(_DWORD *)(v10 + 28) = 0;
  *(_QWORD *)(v9 + 248) = v10 + 32;
  v4 = *((_QWORD *)this + 23);
  v5 = *((_QWORD *)this + 24);
  if (v5)
    goto LABEL_26;
LABEL_15:
  v15 = &unk_24C0ACDA0;
  v16 = 30;
  v17 = *MEMORY[0x24BDAE878];
  result = operator new();
  v11 = result;
  *(_QWORD *)result = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(result + 8) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(result + 16) = result + 16;
  *(_QWORD *)(result + 24) = result + 16;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = result + 16;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(result + 64) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(result + 72) = result + 72;
  *(_QWORD *)(result + 80) = result + 72;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = result + 72;
  *(_BYTE *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_BYTE *)(result + 151) = 3;
  if (result + 128 > (unint64_t)"any" || result + 131 <= (unint64_t)"any")
  {
    *(_BYTE *)(result + 130) = 121;
    *(_WORD *)(result + 128) = 28257;
    *(_BYTE *)(result + 131) = 0;
    *(_BYTE *)(result + 175) = 3;
    if (result + 152 > (unint64_t)"any" || result + 155 <= (unint64_t)"any")
    {
      *(_BYTE *)(result + 154) = 121;
      *(_WORD *)(result + 152) = 28257;
      *(_BYTE *)(result + 155) = 0;
      *(_QWORD *)(result + 176) = &unk_24C0ACDA0;
      *(_DWORD *)(result + 184) = 30;
      *(_OWORD *)(result + 188) = v17;
      *(_DWORD *)(result + 208) = 0;
      rtc::MakeNetworkKey((std::string *)(result + 216), (std::string *)"any", 3uLL, (rtc::IPAddress *)&v15, 0);
      *(_QWORD *)(v11 + 240) = 0;
      *(_QWORD *)(v11 + 248) = 0;
      *(_QWORD *)(v11 + 256) = 0;
      *(_QWORD *)(v11 + 261) = 0;
      *(_QWORD *)(v11 + 272) = 32;
      *(_DWORD *)(v11 + 280) = 0;
      *(_BYTE *)(v11 + 284) = 1;
      *(_WORD *)(v11 + 286) = 0;
      *(_DWORD *)(v11 + 288) = 0;
      result = *((_QWORD *)this + 24);
      *((_QWORD *)this + 24) = v11;
      if (result)
      {
        rtc::Network::~Network((rtc::Network *)result);
        result = MEMORY[0x20BD0ADEC]();
        v11 = *((_QWORD *)this + 24);
      }
      *(_QWORD *)(v11 + 112) = this;
      *(_QWORD *)(*((_QWORD *)this + 24) + 120) = (char *)this + 8;
      v12 = *((_QWORD *)this + 24);
      v20 = v17;
      v19 = v16;
      v18 = &unk_24C0B5310;
      v21 = 0;
      v13 = *(_QWORD *)(v12 + 248);
      if (v13 >= *(_QWORD *)(v12 + 256))
      {
        v14 = std::vector<rtc::InterfaceAddress>::__push_back_slow_path<rtc::InterfaceAddress>((char **)(v12 + 240), (uint64_t)&v18);
        goto LABEL_25;
      }
      if (v13)
      {
        *(_DWORD *)(v13 + 8) = v16;
        *(_OWORD *)(v13 + 12) = v20;
        *(_QWORD *)v13 = &unk_24C0B5310;
        *(_DWORD *)(v13 + 28) = 0;
        v14 = (char *)(v13 + 32);
LABEL_25:
        *(_QWORD *)(v12 + 248) = v14;
        v5 = *((_QWORD *)this + 24);
        goto LABEL_26;
      }
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

char *rtc::NetworkManagerBase::GetNetworks@<X0>(char *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  __int128 *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (uint64_t *)*((_QWORD *)this + 17);
  v3 = *((_QWORD *)this + 18);
  v5 = v3 - (_QWORD)v4;
  if (v3 - (uint64_t)v4 >= 1)
  {
    this = (char *)operator new(v3 - (_QWORD)v4);
    v6 = &this[v5 & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v5 - 8) < 0x18)
    {
      v7 = this;
    }
    else
    {
      v7 = this;
      if ((unint64_t)(this - (char *)v4) >= 0x20)
      {
        v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
        v9 = v8 & 0x3FFFFFFFFFFFFFFCLL;
        v7 = &this[v9 * 8];
        v10 = &v4[v9];
        v11 = (__int128 *)(v4 + 2);
        v12 = this + 16;
        v13 = v8 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v14 = *v11;
          *(v12 - 1) = *(v11 - 1);
          *v12 = v14;
          v11 += 2;
          v12 += 2;
          v13 -= 4;
        }
        while (v13);
        v4 = v10;
        if (v8 == (v8 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_10;
      }
    }
    do
    {
      v15 = *v4++;
      *(_QWORD *)v7 = v15;
      v7 += 8;
    }
    while (v7 != v6);
LABEL_10:
    *a2 = this;
    a2[1] = v6;
    a2[2] = v6;
  }
  return this;
}

void rtc::NetworkManagerBase::MergeNetworkList(uint64_t a1, uint64_t a2, BOOL *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  rtc::Network *v5;
  rtc::Network *v6;
  __int128 v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;

  v10 = 0;
  v8 = *(_QWORD **)a2;
  v3 = v8;
  v7 = *(_OWORD *)(a2 + 8);
  v9 = v7;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  rtc::NetworkManagerBase::MergeNetworkList(a1, (uint64_t *)&v8, a3, (uint64_t)&v10);
  if (v3)
  {
    v4 = (_QWORD *)v7;
    while (v4 != v3)
    {
      v6 = (rtc::Network *)*--v4;
      v5 = v6;
      *v4 = 0;
      if (v6)
      {
        rtc::Network::~Network(v5);
        MEMORY[0x20BD0ADEC]();
      }
    }
    operator delete(v3);
  }
}

void rtc::NetworkManagerBase::MergeNetworkList(uint64_t a1, uint64_t *a2, BOOL *a3, uint64_t a4)
{
  uint64_t v5;
  rtc::Network **v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::string *v11;
  size_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  std::string *p_s2;
  std::string::size_type size;
  BOOL v19;
  int v20;
  char **v21;
  _QWORD *v22;
  size_t v23;
  size_t v25;
  int v26;
  _QWORD *v27;
  std::string::size_type v28;
  size_t v30;
  int v31;
  _QWORD *v32;
  size_t v33;
  size_t v34;
  int v35;
  std::string::value_type *v36;
  rtc::Network *v37;
  void **v38;
  void (***v39)(_QWORD);
  void (***v40)(_QWORD);
  void *v41;
  void (***v42)(_QWORD);
  void (***v43)(_QWORD);
  void (**v44)(_QWORD);
  const std::string::value_type *v45;
  const std::string::value_type *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  void (***v66)(char *);
  void (**v67)(char *);
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  size_t v74;
  const void *v75;
  unint64_t v76;
  BOOL v77;
  int v78;
  uint64_t **v79;
  _QWORD *v80;
  size_t v81;
  size_t v83;
  int v84;
  _QWORD *v85;
  unint64_t v86;
  size_t v88;
  int v89;
  const void *v90;
  _QWORD *v91;
  size_t v92;
  size_t v93;
  int v94;
  uint64_t *v95;
  BOOL v96;
  char *v97;
  char *v98;
  __int16 v99;
  int64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t *v105;
  uint64_t *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  std::string::value_type *v110;
  rtc::Network *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  uint64_t *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t *v126;
  int v127;
  int64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  uint64_t *v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  int v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t *v140;
  void (*v141)(_QWORD, _QWORD);
  int v142;
  uint64_t *v143;
  uint64_t *v144;
  void (*v145)(_QWORD, _QWORD);
  char *v146;
  char **v147;
  uint64_t v148;
  uint64_t v149;
  _OWORD *v150;
  uint64_t *v151;
  uint64_t v152;
  __int128 v153;
  size_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  void *v164;
  uint64_t *v165;
  int8x16_t *v166;
  _QWORD *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int8x16_t *v175;
  int v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  char *v190;
  _QWORD *v191;
  uint64_t **v192;
  char v193;
  char v194;
  uint64_t *v195;
  _QWORD *v196;
  uint64_t **v197;
  std::string __s2;
  char **v199;
  char *v200[2];

  *a3 = 0;
  v5 = *a2;
  v6 = (rtc::Network **)a2[1];
  v7 = 126 - 2 * __clz(((uint64_t)v6 - v5) >> 3);
  v200[0] = 0;
  v200[1] = 0;
  v199 = v200;
  __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)rtc::webrtc_network_internal::CompareNetworks;
  if (v6 == (rtc::Network **)v5)
    v8 = 0;
  else
    v8 = v7;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::unique_ptr<rtc::Network> const&,std::unique_ptr<rtc::Network> const&),std::unique_ptr<rtc::Network>*,false>(v5, v6, (uint64_t (**)(uint64_t *, uint64_t *))&__s2, v8, 1);
  v9 = (_QWORD *)*a2;
  v191 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v191)
  {
    while (1)
    {
      v10 = *v9;
      v11 = (std::string *)(*v9 + 128);
      if (*(char *)(*v9 + 151) < 0)
      {
        v12 = *(_QWORD *)(v10 + 136);
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_361;
        v11 = (std::string *)v11->__r_.__value_.__r.__words[0];
        v13 = v12 && v11 == 0;
        if (v13)
          goto LABEL_361;
      }
      else
      {
        v12 = *(unsigned __int8 *)(*v9 + 151);
      }
      rtc::MakeNetworkKey(&__s2, v11, v12, (rtc::IPAddress *)(v10 + 176), *(_DWORD *)(v10 + 208));
      v196 = v9;
      v14 = *v9;
      v15 = v200[0];
      if (!v200[0])
        goto LABEL_81;
      v16 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
      size = __s2.__r_.__value_.__l.__size_;
      p_s2 = (std::string *)__s2.__r_.__value_.__r.__words[0];
      if (__s2.__r_.__value_.__l.__size_)
        v19 = __s2.__r_.__value_.__r.__words[0] == 0;
      else
        v19 = 0;
      v20 = !v19;
      v193 = v20;
      if ((*((_BYTE *)&__s2.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        v21 = v200;
        while (1)
        {
          v22 = v15 + 32;
          if (v15[55] < 0)
          {
            v23 = *((_QWORD *)v15 + 5);
            if ((v23 & 0x8000000000000000) != 0)
              goto LABEL_361;
            v22 = (_QWORD *)*v22;
            if (v23 && v22 == 0)
              goto LABEL_361;
          }
          else
          {
            v23 = v15[55];
          }
          if (v16 >= v23)
            v25 = v23;
          else
            v25 = v16;
          v26 = memcmp(v22, &__s2, v25);
          if (v26)
          {
            if (v26 < 0)
              goto LABEL_25;
LABEL_40:
            v21 = (char **)v15;
            v15 = *(char **)v15;
            if (!v15)
              goto LABEL_64;
          }
          else
          {
            if (v23 >= v16)
              goto LABEL_40;
LABEL_25:
            v15 = (char *)*((_QWORD *)v15 + 1);
            if (!v15)
              goto LABEL_64;
          }
        }
      }
      if ((__s2.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0 || !v20)
        goto LABEL_361;
      v21 = v200;
      do
      {
        while (1)
        {
          v27 = v15 + 32;
          if (v15[55] < 0)
          {
            v28 = *((_QWORD *)v15 + 5);
            if ((v28 & 0x8000000000000000) != 0)
              goto LABEL_361;
            v27 = (_QWORD *)*v27;
            if (v28 && v27 == 0)
              goto LABEL_361;
          }
          else
          {
            v28 = v15[55];
          }
          v30 = size >= v28 ? v28 : size;
          v31 = memcmp(v27, p_s2, v30);
          if (v31)
            break;
          if (v28 >= size)
            goto LABEL_63;
LABEL_47:
          v15 = (char *)*((_QWORD *)v15 + 1);
          if (!v15)
            goto LABEL_64;
        }
        if (v31 < 0)
          goto LABEL_47;
LABEL_63:
        v21 = (char **)v15;
        v15 = *(char **)v15;
      }
      while (v15);
LABEL_64:
      if (v21 == v200)
        goto LABEL_81;
      if ((v16 & 0x80) != 0)
      {
        if ((size & 0x8000000000000000) != 0 || (v193 & 1) == 0)
          goto LABEL_361;
      }
      else
      {
        p_s2 = &__s2;
        size = v16;
      }
      v32 = v21 + 4;
      if (*((char *)v21 + 55) < 0)
      {
        v33 = (size_t)v21[5];
        if ((v33 & 0x8000000000000000) != 0)
          goto LABEL_361;
        v32 = (_QWORD *)*v32;
        if (v33)
        {
          if (!v32)
            goto LABEL_361;
        }
      }
      else
      {
        v33 = *((unsigned __int8 *)v21 + 55);
      }
      if (v33 >= size)
        v34 = size;
      else
        v34 = v33;
      v35 = memcmp(p_s2, v32, v34);
      if (v35)
      {
        if ((v35 & 0x80000000) == 0)
          goto LABEL_79;
LABEL_81:
        *v196 = 0;
        v37 = *(rtc::Network **)v36;
        *(_QWORD *)v36 = v14;
        if (v37)
        {
          rtc::Network::~Network(v37);
          MEMORY[0x20BD0ADEC]();
        }
        v38 = (void **)(v36 + 8);
        v39 = (void (***)(_QWORD))*((_QWORD *)v36 + 1);
        if (v39)
        {
          v40 = (void (***)(_QWORD))*((_QWORD *)v36 + 2);
          v41 = (void *)*((_QWORD *)v36 + 1);
          if (v40 != v39)
          {
            v42 = v40 - 4;
            v43 = v40 - 4;
            do
            {
              v44 = *v43;
              v43 -= 4;
              (*v44)(v42);
              v13 = v42 == v39;
              v42 = v43;
            }
            while (!v13);
            v41 = *v38;
          }
          *((_QWORD *)v36 + 2) = v39;
          operator delete(v41);
        }
        *v38 = 0;
        *((_QWORD *)v36 + 2) = 0;
        v194 = 1;
        *((_QWORD *)v36 + 3) = 0;
      }
      else
      {
        if (size < v33)
          goto LABEL_81;
LABEL_79:
        v194 = 0;
      }
      v46 = v45;
      v47 = *(_QWORD *)(v14 + 240);
      v48 = *(_QWORD *)(v14 + 248);
      if (v47 != v48)
      {
        v49 = (char *)*((_QWORD *)v45 + 2);
        while (1)
        {
          v50 = *((_QWORD *)v46 + 3);
          if ((unint64_t)v49 < v50)
          {
            if (!v49)
              goto LABEL_361;
            *(_QWORD *)v49 = &unk_24C0ACDA0;
            *((_DWORD *)v49 + 2) = *(_DWORD *)(v47 + 8);
            *(_OWORD *)(v49 + 12) = *(_OWORD *)(v47 + 12);
            *(_QWORD *)v49 = &unk_24C0B5310;
            *((_DWORD *)v49 + 7) = *(_DWORD *)(v47 + 28);
            v51 = v49 + 32;
            goto LABEL_95;
          }
          v52 = (char *)*((_QWORD *)v46 + 1);
          v53 = (v49 - v52) >> 5;
          v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 59)
            goto LABEL_362;
          v55 = v50 - (_QWORD)v52;
          if (v55 >> 4 > v54)
            v54 = v55 >> 4;
          v56 = (unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0;
          v57 = 0x7FFFFFFFFFFFFFFLL;
          if (!v56)
            v57 = v54;
          if (!v57)
            goto LABEL_361;
          if (v57 >> 59)
            goto LABEL_363;
          v58 = 32 * v57;
          v59 = (char *)operator new(32 * v57);
          v60 = &v59[v58];
          v61 = &v59[32 * v53];
          *((_DWORD *)v61 + 2) = *(_DWORD *)(v47 + 8);
          *(_OWORD *)(v61 + 12) = *(_OWORD *)(v47 + 12);
          *(_QWORD *)v61 = &unk_24C0B5310;
          *((_DWORD *)v61 + 7) = *(_DWORD *)(v47 + 28);
          v51 = v61 + 32;
          if (v49 != v52)
            break;
          *((_QWORD *)v46 + 1) = v61;
          *((_QWORD *)v46 + 2) = v51;
          *((_QWORD *)v46 + 3) = v60;
          if (v49)
            goto LABEL_94;
LABEL_95:
          *((_QWORD *)v46 + 2) = v51;
          v47 += 32;
          v49 = v51;
          if (v47 == v48)
            goto LABEL_115;
        }
        v62 = 0;
        do
        {
          v63 = &v61[v62];
          *((_DWORD *)v63 - 6) = *(_DWORD *)&v49[v62 - 24];
          *(_OWORD *)(v63 - 20) = *(_OWORD *)&v49[v62 - 20];
          *((_QWORD *)v63 - 4) = &unk_24C0B5310;
          *((_DWORD *)v63 - 1) = *(_DWORD *)&v49[v62 - 4];
          v62 -= 32;
        }
        while (&v49[v62] != v52);
        v49 = (char *)*((_QWORD *)v46 + 1);
        v64 = (char *)*((_QWORD *)v46 + 2);
        *((_QWORD *)v46 + 1) = &v61[v62];
        *((_QWORD *)v46 + 2) = v51;
        *((_QWORD *)v46 + 3) = v60;
        if (v64 != v49)
        {
          v65 = v64 - 32;
          v66 = (void (***)(char *))(v64 - 32);
          do
          {
            v67 = *v66;
            v66 -= 4;
            (*v67)(v65);
            v13 = v65 == v49;
            v65 = (char *)v66;
          }
          while (!v13);
        }
        if (!v49)
          goto LABEL_95;
LABEL_94:
        operator delete(v49);
        goto LABEL_95;
      }
LABEL_115:
      if ((v194 & 1) != 0)
      {
        v68 = *((_QWORD *)v46 + 1);
        if (*((_QWORD *)v46 + 2) == v68)
          goto LABEL_361;
        ++*(_DWORD *)(a4 + 4 * (*(_DWORD *)(v68 + 8) != 2));
      }
      if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__s2.__r_.__value_.__l.__data_);
        v9 = v196 + 1;
        if (v196 + 1 == v191)
          break;
      }
      else
      {
        v9 = v196 + 1;
        if (v196 + 1 == v191)
          break;
      }
    }
  }
  v69 = (uint64_t *)v199;
  if (v199 != v200)
  {
    v70 = 0;
    v71 = 0;
    v190 = 0;
    v192 = (uint64_t **)(a1 + 160);
    v197 = (uint64_t **)(a1 + 168);
    while (1)
    {
      v195 = v71;
      v72 = v69[7];
      v69[7] = 0;
      v73 = *v197;
      if (!*v197)
        goto LABEL_185;
      v74 = *((unsigned __int8 *)v69 + 55);
      v75 = (const void *)v69[4];
      v76 = v69[5];
      if (v76)
        v77 = v75 == 0;
      else
        v77 = 0;
      v78 = !v77;
      v186 = v78;
      if ((*((_BYTE *)v69 + 55) & 0x80) == 0)
      {
        v79 = (uint64_t **)(a1 + 168);
        while (1)
        {
          v80 = v73 + 4;
          if (*((char *)v73 + 55) < 0)
          {
            v81 = v73[5];
            if ((v81 & 0x8000000000000000) != 0)
              goto LABEL_361;
            v80 = (_QWORD *)*v80;
            if (v81 && v80 == 0)
              goto LABEL_361;
          }
          else
          {
            v81 = *((unsigned __int8 *)v73 + 55);
          }
          if (v74 >= v81)
            v83 = v81;
          else
            v83 = v74;
          v84 = memcmp(v80, v69 + 4, v83);
          if (v84)
          {
            if (v84 < 0)
              goto LABEL_130;
LABEL_145:
            v79 = (uint64_t **)v73;
            v73 = (uint64_t *)*v73;
            if (!v73)
              goto LABEL_167;
          }
          else
          {
            if (v81 >= v74)
              goto LABEL_145;
LABEL_130:
            v73 = (uint64_t *)v73[1];
            if (!v73)
              goto LABEL_167;
          }
        }
      }
      if ((v76 & 0x8000000000000000) != 0 || !v78)
      {
        if (*((char *)v73 + 55) < 0 && (v73[5] & 0x8000000000000000) == 0)
          __break(1u);
        goto LABEL_361;
      }
      v79 = (uint64_t **)(a1 + 168);
      do
      {
        while (1)
        {
          v85 = v73 + 4;
          if (*((char *)v73 + 55) < 0)
          {
            v86 = v73[5];
            if ((v86 & 0x8000000000000000) != 0)
              goto LABEL_361;
            v85 = (_QWORD *)*v85;
            if (v86 && v85 == 0)
              goto LABEL_361;
          }
          else
          {
            v86 = *((unsigned __int8 *)v73 + 55);
          }
          v88 = v76 >= v86 ? v86 : v76;
          v89 = memcmp(v85, v75, v88);
          if (v89)
            break;
          if (v86 >= v76)
            goto LABEL_166;
LABEL_150:
          v73 = (uint64_t *)v73[1];
          if (!v73)
            goto LABEL_167;
        }
        if (v89 < 0)
          goto LABEL_150;
LABEL_166:
        v79 = (uint64_t **)v73;
        v73 = (uint64_t *)*v73;
      }
      while (v73);
LABEL_167:
      if (v197 == v79)
        goto LABEL_185;
      v90 = v69 + 4;
      if ((v74 & 0x80) != 0)
      {
        if ((v76 & 0x8000000000000000) != 0)
          goto LABEL_361;
        v90 = v75;
        v74 = v76;
        if ((v186 & 1) == 0)
          goto LABEL_361;
      }
      v91 = v79 + 4;
      if (*((char *)v79 + 55) < 0)
      {
        v92 = (size_t)v79[5];
        if ((v92 & 0x8000000000000000) == 0)
        {
          v91 = (_QWORD *)*v91;
          if (!v92 || v91)
            goto LABEL_176;
        }
        goto LABEL_361;
      }
      v92 = *((unsigned __int8 *)v79 + 55);
LABEL_176:
      if (v92 >= v74)
        v93 = v74;
      else
        v93 = v92;
      v94 = memcmp(v90, v91, v93);
      if (!v94)
      {
        if (v74 < v92)
          goto LABEL_185;
LABEL_181:
        v95 = v79[7];
        if (*a3)
        {
          v96 = 1;
          v97 = (char *)v195;
          v98 = (char *)(v95 + 30);
          if (v95 + 30 == v69 + 8)
            goto LABEL_243;
LABEL_242:
          std::vector<rtc::InterfaceAddress>::__assign_with_size[abi:sn180100]<rtc::InterfaceAddress*,rtc::InterfaceAddress*>(v98, v69[8], v69[9], (v69[9] - v69[8]) >> 5);
          goto LABEL_243;
        }
        v114 = v69[8];
        v113 = v69[9];
        v116 = v95[30];
        v115 = v95[31];
        v97 = (char *)v195;
        if (v113 - v114 == v115 - v116)
        {
          if (v114 == v113)
          {
            v96 = 0;
            goto LABEL_241;
          }
          if (v116 != v115)
          {
            do
            {
              v117 = v95[30];
              do
              {
                if (*(_DWORD *)(v117 + 28) == *(_DWORD *)(v114 + 28))
                {
                  v119 = *(_DWORD *)(v117 + 8);
                  if (v119 == *(_DWORD *)(v114 + 8))
                  {
                    switch(v119)
                    {
                      case 2:
                        if (*(_DWORD *)(v117 + 12) == *(_DWORD *)(v114 + 12))
                          goto LABEL_229;
                        break;
                      case 30:
                        if (*(_QWORD *)(v117 + 12) == *(_QWORD *)(v114 + 12)
                          && *(_QWORD *)(v117 + 20) == *(_QWORD *)(v114 + 20))
                        {
                          goto LABEL_229;
                        }
                        break;
                      case 0:
                        goto LABEL_229;
                    }
                  }
                }
                v117 += 32;
              }
              while (v117 != v115);
              v117 = v95[31];
LABEL_229:
              v96 = v117 == v115;
              if (v117 == v115)
                break;
              v114 += 32;
            }
            while (v114 != v113);
LABEL_241:
            v98 = (char *)(v95 + 30);
            if (v95 + 30 == v69 + 8)
              goto LABEL_243;
            goto LABEL_242;
          }
        }
        v96 = 1;
        v98 = (char *)(v95 + 30);
        if (v95 + 30 != v69 + 8)
          goto LABEL_242;
LABEL_243:
        *a3 = v96;
        if (v97 < v190)
        {
          if (!v97)
            goto LABEL_361;
          *(_QWORD *)v97 = v95;
          v126 = (uint64_t *)(v97 + 8);
          v127 = *(_DWORD *)(v72 + 272);
          if (!v127)
          {
LABEL_285:
            if (*((_BYTE *)v95 + 284))
            {
              v142 = *(_DWORD *)(v72 + 288);
              if (v142 != *((_DWORD *)v95 + 72))
                goto LABEL_289;
            }
            else
            {
              *a3 = 1;
              v142 = *(_DWORD *)(v72 + 288);
              if (v142 != *((_DWORD *)v95 + 72))
              {
LABEL_289:
                *((_DWORD *)v95 + 72) = v142;
                v143 = (uint64_t *)v95[10];
                for (v95[12] = (uint64_t)v143; v143 != v95 + 9; v143 = (uint64_t *)v95[12])
                {
                  v145 = (void (*)(_QWORD, _QWORD))v143[2];
                  v144 = (uint64_t)(v143 + 2);
                  v95[12] = *(_QWORD *)(v144 - 8);
                  v145((uint64_t *)v144, v95);
                }
              }
            }
            v71 = v126;
            goto LABEL_292;
          }
LABEL_261:
          v137 = *((_DWORD *)v95 + 68);
          if (v127 == v137)
            goto LABEL_285;
          if (v137 <= 127)
          {
            if (v137 == 4 || v137 == 64)
              goto LABEL_273;
LABEL_280:
            *a3 = 1;
          }
          else
          {
            if (v137 != 128 && v137 != 512 && v137 != 256)
              goto LABEL_280;
LABEL_273:
            if (v127 <= 127)
            {
              if (v127 != 4 && v127 != 64)
                goto LABEL_280;
            }
            else if (v127 != 128 && v127 != 256 && v127 != 512)
            {
              goto LABEL_280;
            }
          }
          *((_DWORD *)v95 + 68) = v127;
          if (v127 != 8)
            *((_DWORD *)v95 + 69) = 0;
          v139 = (uint64_t *)v95[3];
          for (v95[5] = (uint64_t)v139; v139 != v95 + 2; v139 = (uint64_t *)v95[5])
          {
            v141 = (void (*)(_QWORD, _QWORD))v139[2];
            v140 = (uint64_t)(v139 + 2);
            v95[5] = *(_QWORD *)(v140 - 8);
            v141((uint64_t *)v140, v95);
          }
          goto LABEL_285;
        }
        v128 = v97 - (char *)v70;
        v129 = (v97 - (char *)v70) >> 3;
        v130 = v129 + 1;
        if ((unint64_t)(v129 + 1) >> 61)
          goto LABEL_362;
        if ((v190 - (char *)v70) >> 2 > v130)
          v130 = (v190 - (char *)v70) >> 2;
        if ((unint64_t)(v190 - (char *)v70) >= 0x7FFFFFFFFFFFFFF8)
          v130 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v130)
          goto LABEL_361;
        if (!(v130 >> 61))
        {
          v131 = 8 * v130;
          v132 = operator new(8 * v130);
          v133 = (uint64_t *)&v132[8 * v129];
          *v133 = (uint64_t)v95;
          v126 = v133 + 1;
          if (v195 != v70)
          {
            v134 = (char *)v195 - (char *)v70 - 8;
            if (v134 < 0x168)
            {
              v135 = v195;
              goto LABEL_257;
            }
            v138 = ((char *)(v195 - 1) - (char *)v70) & 0xFFFFFFFFFFFFFFF8;
            if (&v132[v128 - 8 - v138] > &v132[v128 - 8])
            {
              v135 = v195;
              goto LABEL_257;
            }
            if ((uint64_t *)((char *)v195 - v138 - 8) > v195 - 1)
            {
              v135 = v195;
              goto LABEL_257;
            }
            if ((unint64_t)((char *)v195 - v128 - v132) < 0x20)
            {
              v135 = v195;
              goto LABEL_257;
            }
            v148 = (v134 >> 3) + 1;
            v149 = 8 * (v148 & 0x3FFFFFFFFFFFFFFCLL);
            v135 = &v195[v149 / 0xFFFFFFFFFFFFFFF8];
            v133 = (uint64_t *)((char *)v133 - v149);
            v150 = &v132[v128 - 16];
            v151 = v195 - 2;
            v152 = v148 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v153 = *(_OWORD *)v151;
              *(v150 - 1) = *((_OWORD *)v151 - 1);
              *v150 = v153;
              v150 -= 2;
              v151 -= 4;
              v152 -= 4;
            }
            while (v152);
            if (v148 != (v148 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_257:
                v136 = *--v135;
                *--v133 = v136;
              }
              while (v135 != v70);
            }
          }
          v190 = &v132[v131];
          if (v70)
            operator delete(v70);
          v70 = v133;
          v127 = *(_DWORD *)(v72 + 272);
          if (!v127)
            goto LABEL_285;
          goto LABEL_261;
        }
LABEL_363:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
      if ((v94 & 0x80000000) == 0)
        goto LABEL_181;
LABEL_185:
      v99 = *(_WORD *)(a1 + 264);
      *(_WORD *)(a1 + 264) = v99 + 1;
      *(_WORD *)(v72 + 286) = v99;
      if ((uint64_t *)(v72 + 240) != v69 + 8)
        std::vector<rtc::InterfaceAddress>::__assign_with_size[abi:sn180100]<rtc::InterfaceAddress*,rtc::InterfaceAddress*>((char *)(v72 + 240), v69[8], v69[9], (v69[9] - v69[8]) >> 5);
      if (v195 < (uint64_t *)v190)
      {
        if (v195)
        {
          *v195 = v72;
          v71 = v195 + 1;
          goto LABEL_204;
        }
LABEL_361:
        __break(1u);
LABEL_362:
        abort();
      }
      v100 = (char *)v195 - (char *)v70;
      v101 = v195 - v70;
      v102 = v101 + 1;
      if ((unint64_t)(v101 + 1) >> 61)
        goto LABEL_362;
      if ((v190 - (char *)v70) >> 2 > v102)
        v102 = (v190 - (char *)v70) >> 2;
      if ((unint64_t)(v190 - (char *)v70) >= 0x7FFFFFFFFFFFFFF8)
        v102 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v102)
        goto LABEL_361;
      if (v102 >> 61)
        goto LABEL_363;
      v103 = 8 * v102;
      v104 = operator new(8 * v102);
      v105 = (uint64_t *)&v104[8 * v101];
      *v105 = v72;
      v106 = v105 + 1;
      if (v195 != v70)
      {
        v107 = (char *)v195 - (char *)v70 - 8;
        if (v107 < 0x168)
        {
          v108 = v195;
          goto LABEL_200;
        }
        v112 = ((char *)(v195 - 1) - (char *)v70) & 0xFFFFFFFFFFFFFFF8;
        if (&v104[v100 - 8 - v112] > &v104[v100 - 8])
        {
          v108 = v195;
          goto LABEL_200;
        }
        if ((uint64_t *)((char *)v195 - v112 - 8) > v195 - 1)
        {
          v108 = v195;
          goto LABEL_200;
        }
        if ((unint64_t)((char *)v70 - v104) < 0x20)
        {
          v108 = v195;
          goto LABEL_200;
        }
        v120 = (v107 >> 3) + 1;
        v121 = 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
        v108 = &v195[v121 / 0xFFFFFFFFFFFFFFF8];
        v105 = (uint64_t *)((char *)v105 - v121);
        v122 = &v104[v100 - 16];
        v123 = v195 - 2;
        v124 = v120 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v125 = *(_OWORD *)v123;
          *(v122 - 1) = *((_OWORD *)v123 - 1);
          *v122 = v125;
          v122 -= 2;
          v123 -= 4;
          v124 -= 4;
        }
        while (v124);
        if (v120 != (v120 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_200:
            v109 = *--v108;
            *--v105 = v109;
          }
          while (v108 != v70);
        }
      }
      v190 = &v104[v103];
      if (v70)
        operator delete(v70);
      v70 = v105;
      v71 = v106;
LABEL_204:
      v110 = (std::string::value_type *)std::map<std::string,std::unique_ptr<rtc::Network>>::operator[](v192, (uint64_t)(v69 + 4));
      v111 = *(rtc::Network **)v110;
      *(_QWORD *)v110 = v72;
      if (v111)
      {
        rtc::Network::~Network(v111);
        MEMORY[0x20BD0ADEC]();
      }
      v72 = 0;
      *a3 = 1;
LABEL_292:
      *(_QWORD *)(*(_QWORD *)std::map<std::string,std::unique_ptr<rtc::Network>>::operator[](v192, (uint64_t)(v69 + 4))
                + 120) = a1 + 8;
      if (v72)
      {
        rtc::Network::~Network((rtc::Network *)v72);
        MEMORY[0x20BD0ADEC]();
      }
      v146 = (char *)v69[1];
      if (v146)
      {
        do
        {
          v147 = (char **)v146;
          v146 = *(char **)v146;
        }
        while (v146);
      }
      else
      {
        do
        {
          v147 = (char **)v69[2];
          v13 = *v147 == (char *)v69;
          v69 = (uint64_t *)v147;
        }
        while (!v13);
      }
      v69 = (uint64_t *)v147;
      if (v147 == v200)
        goto LABEL_307;
    }
  }
  v70 = 0;
  v71 = 0;
LABEL_307:
  v154 = (char *)v71 - (char *)v70;
  v155 = v71 - v70;
  v157 = *(char **)(a1 + 136);
  v156 = *(char **)(a1 + 144);
  v158 = (v156 - v157) >> 3;
  if (v155 == v158)
  {
    if (!*a3)
      goto LABEL_354;
    v159 = *(_QWORD *)(a1 + 152);
    if (v155 > (v159 - (uint64_t)v157) >> 3)
      goto LABEL_310;
  }
  else
  {
    *a3 = 1;
    v159 = *(_QWORD *)(a1 + 152);
    if (v155 > (v159 - (uint64_t)v157) >> 3)
    {
LABEL_310:
      if (v157)
      {
        *(_QWORD *)(a1 + 144) = v157;
        operator delete(v157);
        v159 = 0;
        *(_QWORD *)(a1 + 136) = 0;
        *(_QWORD *)(a1 + 144) = 0;
        *(_QWORD *)(a1 + 152) = 0;
      }
      if ((v154 & 0x8000000000000000) != 0)
        goto LABEL_362;
      v160 = v159 >> 2;
      if (v159 >> 2 <= v155)
        v160 = v71 - v70;
      if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8)
        v160 = 0x1FFFFFFFFFFFFFFFLL;
      if (v160 >> 61)
        goto LABEL_362;
      v161 = 8 * v160;
      v162 = (char *)operator new(8 * v160);
      v157 = v162;
      *(_QWORD *)(a1 + 136) = v162;
      *(_QWORD *)(a1 + 144) = v162;
      *(_QWORD *)(a1 + 152) = &v162[v161];
      if (v71 != v70)
        memcpy(v162, v70, (char *)v71 - (char *)v70);
      goto LABEL_330;
    }
  }
  if (v158 >= v155)
  {
    if (v71 != v70)
    {
      v164 = v157;
      v165 = v70;
LABEL_329:
      memmove(v164, v165, v154);
    }
  }
  else
  {
    v163 = (char *)&v70[v158];
    if (v156 != v157)
    {
      memmove(v157, v70, v156 - v157);
      v157 = *(char **)(a1 + 144);
      v154 = (char *)v71 - v163;
      if (v71 == (uint64_t *)v163)
        goto LABEL_330;
      goto LABEL_328;
    }
    v157 = v156;
    v154 = (char *)v71 - v163;
    if (v71 != (uint64_t *)v163)
    {
LABEL_328:
      v164 = v157;
      v165 = (uint64_t *)v163;
      goto LABEL_329;
    }
  }
LABEL_330:
  v166 = (int8x16_t *)&v157[v154];
  *(_QWORD *)(a1 + 144) = &v157[v154];
  v167 = *(_QWORD **)(a1 + 160);
  v168 = *(_QWORD *)(a1 + 136);
  if (v167 != (_QWORD *)(a1 + 168))
  {
    do
    {
      v174 = v167[7];
      v175 = (int8x16_t *)v168;
      if ((int8x16_t *)v168 != v166)
      {
        while (v175->i64[0] != v174)
        {
          v175 = (int8x16_t *)((char *)v175 + 8);
          if (v175 == v166)
          {
            v175 = (int8x16_t *)&v157[v154];
            break;
          }
        }
      }
      v176 = v175 != v166;
      if (*(unsigned __int8 *)(v174 + 284) != v176)
        *(_BYTE *)(v174 + 284) = v176;
      v177 = (_QWORD *)v167[1];
      if (v177)
      {
        do
        {
          v178 = v177;
          v177 = (_QWORD *)*v177;
        }
        while (v177);
      }
      else
      {
        do
        {
          v178 = (_QWORD *)v167[2];
          v13 = *v178 == (_QWORD)v167;
          v167 = v178;
        }
        while (!v13);
      }
      v167 = v178;
    }
    while (v178 != (_QWORD *)(a1 + 168));
  }
  v169 = 126 - 2 * __clz(((uint64_t)v166->i64 - v168) >> 3);
  if (v166 == (int8x16_t *)v168)
    v170 = 0;
  else
    v170 = v169;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(rtc::Network const*,rtc::Network const*),rtc::Network**,false>(v168, v166, (unsigned int (**)(uint64_t))&__s2, v170, 1);
  v171 = *(_QWORD *)(a1 + 136);
  v172 = *(_QWORD *)(a1 + 144);
  if (v171 != v172)
  {
    v173 = 127;
    while (1)
    {
      *(_DWORD *)(*(_QWORD *)v171 + 280) = v173;
      if (!v173)
        break;
      --v173;
      v171 += 8;
      if (v171 == v172)
        goto LABEL_354;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v179, v180, v181, v182, v183, v184, v185, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc");
  }
LABEL_354:
  if (v70)
    operator delete(v70);
}

const std::string::value_type *std::map<std::string,rtc::`anonymous namespace'::AddressList>::operator[](uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t **v4;
  size_t v5;
  size_t v6;
  const std::string::value_type *v7;
  BOOL v8;
  char v9;
  uint64_t **v10;
  const std::string::value_type *result;
  size_t v12;
  const void **v13;
  size_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  const std::string::value_type *v18;
  size_t v19;
  size_t v20;
  int v21;
  char *v22;
  std::string *v23;
  uint64_t *v24;
  uint64_t *v25;

  v4 = a1 + 1;
  v3 = a1[1];
  v5 = *(unsigned __int8 *)(a2 + 23);
  if (v3)
  {
    v7 = *(const std::string::value_type **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    v9 = !v8;
    while (1)
    {
      v10 = (uint64_t **)v3;
      result = (const std::string::value_type *)a2;
      v12 = v5;
      if ((v5 & 0x80) != 0)
      {
        if ((v6 & 0x8000000000000000) != 0)
          goto LABEL_48;
        result = v7;
        v12 = v6;
        if ((v9 & 1) == 0)
          goto LABEL_48;
      }
      v13 = (const void **)(v3 + 4);
      v14 = *((unsigned __int8 *)v3 + 55);
      v15 = v3 + 4;
      v16 = v14;
      if (*((char *)v3 + 55) < 0)
      {
        v16 = v3[5];
        if ((v16 & 0x8000000000000000) != 0 || (v15 = *v13, v16) && !v15)
        {
LABEL_48:
          __break(1u);
          return result;
        }
      }
      if (v16 >= v12)
        v17 = v12;
      else
        v17 = v16;
      result = (const std::string::value_type *)memcmp(result, v15, v17);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) != 0)
          goto LABEL_8;
LABEL_23:
        if ((v14 & 0x80) != 0)
        {
          v14 = (size_t)v10[5];
          if ((v14 & 0x8000000000000000) != 0)
            goto LABEL_48;
          v13 = (const void **)*v13;
          if (v14)
          {
            if (!v13)
              goto LABEL_48;
          }
        }
        v18 = (const std::string::value_type *)a2;
        v19 = v5;
        if ((v5 & 0x80) != 0)
        {
          if ((v6 & 0x8000000000000000) != 0)
            goto LABEL_48;
          v18 = v7;
          v19 = v6;
          if ((v9 & 1) == 0)
            goto LABEL_48;
        }
        if (v19 >= v14)
          v20 = v14;
        else
          v20 = v19;
        v21 = memcmp(v13, v18, v20);
        if (v21)
        {
          if ((v21 & 0x80000000) == 0)
            goto LABEL_46;
        }
        else if (v14 >= v19)
        {
LABEL_46:
          v22 = (char *)v10;
          return v22 + 56;
        }
        v3 = v10[1];
        if (!v3)
        {
          v4 = v10 + 1;
LABEL_39:
          v22 = (char *)operator new(0x58uLL);
          v23 = (std::string *)(v22 + 32);
          if ((v5 & 0x80) != 0)
            goto LABEL_42;
LABEL_40:
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          v23->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
          goto LABEL_43;
        }
      }
      else
      {
        if (v12 >= v16)
          goto LABEL_23;
LABEL_8:
        v3 = *v10;
        v4 = v10;
        if (!*v10)
          goto LABEL_39;
      }
    }
  }
  v10 = a1 + 1;
  v22 = (char *)operator new(0x58uLL);
  v23 = (std::string *)(v22 + 32);
  if ((v5 & 0x80) == 0)
    goto LABEL_40;
LABEL_42:
  std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_43:
  *(_OWORD *)(v22 + 72) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = v10;
  *v4 = (uint64_t *)v22;
  v24 = (uint64_t *)**a1;
  v25 = (uint64_t *)v22;
  if (v24)
  {
    *a1 = v24;
    v25 = *v4;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22 + 56;
}

BOOL rtc::Network::SetIPs(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  _BOOL8 v10;
  char *v11;

  if ((a3 & 1) != 0)
    goto LABEL_23;
  v4 = *a2;
  v3 = a2[1];
  v6 = *(_QWORD *)(a1 + 240);
  v5 = *(_QWORD *)(a1 + 248);
  if (v3 - *a2 != v5 - v6)
    goto LABEL_23;
  if (v4 == v3)
  {
    v10 = 0;
    goto LABEL_26;
  }
  if (v6 == v5)
  {
LABEL_23:
    v10 = 1;
    v11 = (char *)(a1 + 240);
    if (v11 == (char *)a2)
      return v10;
    goto LABEL_27;
  }
  do
  {
    v7 = *(_QWORD *)(a1 + 240);
    do
    {
      if (*(_DWORD *)(v7 + 28) == *(_DWORD *)(v4 + 28))
      {
        v9 = *(_DWORD *)(v7 + 8);
        if (v9 == *(_DWORD *)(v4 + 8))
        {
          switch(v9)
          {
            case 2:
              if (*(_DWORD *)(v7 + 12) == *(_DWORD *)(v4 + 12))
                goto LABEL_20;
              break;
            case 30:
              if (*(_QWORD *)(v7 + 12) == *(_QWORD *)(v4 + 12) && *(_QWORD *)(v7 + 20) == *(_QWORD *)(v4 + 20))
                goto LABEL_20;
              break;
            case 0:
              goto LABEL_20;
          }
        }
      }
      v7 += 32;
    }
    while (v7 != v5);
    v7 = *(_QWORD *)(a1 + 248);
LABEL_20:
    v10 = v7 == v5;
    if (v7 == v5)
      break;
    v4 += 32;
  }
  while (v4 != v3);
LABEL_26:
  v11 = (char *)(a1 + 240);
  if (v11 != (char *)a2)
LABEL_27:
    std::vector<rtc::InterfaceAddress>::__assign_with_size[abi:sn180100]<rtc::InterfaceAddress*,rtc::InterfaceAddress*>(v11, *a2, a2[1], (a2[1] - *a2) >> 5);
  return v10;
}

const std::string::value_type *std::map<std::string,std::unique_ptr<rtc::Network>>::operator[](uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t **v4;
  size_t v5;
  size_t v6;
  const std::string::value_type *v7;
  BOOL v8;
  char v9;
  uint64_t *v10;
  const std::string::value_type *result;
  size_t v12;
  const void **v13;
  size_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  const std::string::value_type *v18;
  size_t v19;
  size_t v20;
  int v21;
  _QWORD *v22;
  std::string *v23;
  uint64_t *v24;
  uint64_t *v25;

  v4 = a1 + 1;
  v3 = a1[1];
  v5 = *(unsigned __int8 *)(a2 + 23);
  if (v3)
  {
    v7 = *(const std::string::value_type **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    v9 = !v8;
    while (1)
    {
      v10 = v3;
      result = (const std::string::value_type *)a2;
      v12 = v5;
      if ((v5 & 0x80) != 0)
      {
        if ((v6 & 0x8000000000000000) != 0)
          goto LABEL_48;
        result = v7;
        v12 = v6;
        if ((v9 & 1) == 0)
          goto LABEL_48;
      }
      v13 = (const void **)(v3 + 4);
      v14 = *((unsigned __int8 *)v3 + 55);
      v15 = v3 + 4;
      v16 = v14;
      if (*((char *)v3 + 55) < 0)
      {
        v16 = v3[5];
        if ((v16 & 0x8000000000000000) != 0 || (v15 = *v13, v16) && !v15)
        {
LABEL_48:
          __break(1u);
          return result;
        }
      }
      if (v16 >= v12)
        v17 = v12;
      else
        v17 = v16;
      result = (const std::string::value_type *)memcmp(result, v15, v17);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) != 0)
          goto LABEL_8;
LABEL_23:
        if ((v14 & 0x80) != 0)
        {
          v14 = v10[5];
          if ((v14 & 0x8000000000000000) != 0)
            goto LABEL_48;
          v13 = (const void **)*v13;
          if (v14)
          {
            if (!v13)
              goto LABEL_48;
          }
        }
        v18 = (const std::string::value_type *)a2;
        v19 = v5;
        if ((v5 & 0x80) != 0)
        {
          if ((v6 & 0x8000000000000000) != 0)
            goto LABEL_48;
          v18 = v7;
          v19 = v6;
          if ((v9 & 1) == 0)
            goto LABEL_48;
        }
        if (v19 >= v14)
          v20 = v14;
        else
          v20 = v19;
        v21 = memcmp(v13, v18, v20);
        if (v21)
        {
          if ((v21 & 0x80000000) == 0)
            goto LABEL_46;
        }
        else if (v14 >= v19)
        {
LABEL_46:
          v22 = v10;
          return (const std::string::value_type *)(v22 + 7);
        }
        v3 = (uint64_t *)v10[1];
        if (!v3)
        {
          v4 = (uint64_t **)(v10 + 1);
LABEL_39:
          v22 = operator new(0x40uLL);
          v23 = (std::string *)(v22 + 4);
          if ((v5 & 0x80) != 0)
            goto LABEL_42;
LABEL_40:
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          v23->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
          goto LABEL_43;
        }
      }
      else
      {
        if (v12 >= v16)
          goto LABEL_23;
LABEL_8:
        v3 = (uint64_t *)*v10;
        v4 = (uint64_t **)v10;
        if (!*v10)
          goto LABEL_39;
      }
    }
  }
  v10 = (uint64_t *)(a1 + 1);
  v22 = operator new(0x40uLL);
  v23 = (std::string *)(v22 + 4);
  if ((v5 & 0x80) == 0)
    goto LABEL_40;
LABEL_42:
  std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_43:
  v22[7] = 0;
  *v22 = 0;
  v22[1] = 0;
  v22[2] = v10;
  *v4 = v22;
  v24 = (uint64_t *)**a1;
  v25 = v22;
  if (v24)
  {
    *a1 = v24;
    v25 = *v4;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (const std::string::value_type *)(v22 + 7);
}

void rtc::`anonymous namespace'::SortNetworks(rtc::_anonymous_namespace_ *this, const rtc::Network *a2, const rtc::Network *a3)
{
  const rtc::IPAddress *v5;
  int v6;
  const rtc::IPAddress *v7;
  const rtc::IPAddress *v8;
  unsigned __int8 v9;
  std::string::size_type v10;
  std::string *v11;
  const rtc::IPAddress *v12;
  char v13;
  std::string *p_s2;
  std::string::size_type size;
  size_t v16;
  int v17;
  std::string __s2;
  std::string v19;
  _BYTE v20[32];
  _BYTE v21[32];

  if (*((_DWORD *)this + 68) == *((_DWORD *)a2 + 68))
  {
    rtc::Network::GetBestIP((uint64_t)this, (uint64_t)v21);
    rtc::Network::GetBestIP((uint64_t)a2, (uint64_t)v20);
    v6 = rtc::IPAddressPrecedence((rtc *)v21, v5);
    if (v6 != rtc::IPAddressPrecedence((rtc *)v20, v7))
    {
      rtc::IPAddressPrecedence((rtc *)v21, v8);
      rtc::IPAddressPrecedence((rtc *)v20, v12);
      return;
    }
    if (*((char *)this + 239) < 0)
    {
      std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)this + 27), *((_QWORD *)this + 28));
      if ((*((char *)a2 + 239) & 0x80000000) == 0)
      {
LABEL_5:
        __s2 = *(std::string *)((_BYTE *)a2 + 9);
        v9 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_6:
          v10 = v9;
          v11 = &v19;
LABEL_14:
          v13 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            p_s2 = &__s2;
            size = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
LABEL_19:
            if (size >= v10)
              v16 = v10;
            else
              v16 = size;
            v17 = memcmp(v11, p_s2, v16);
            if (v17)
            {
              if ((v17 & 0x80000000) == 0)
                goto LABEL_24;
            }
            else if (v10 >= size)
            {
LABEL_24:
              if ((v13 & 0x80) == 0)
                goto LABEL_26;
              goto LABEL_25;
            }
            if ((v13 & 0x80) == 0)
            {
LABEL_26:
              if ((v9 & 0x80) != 0)
                operator delete(v19.__r_.__value_.__l.__data_);
              return;
            }
LABEL_25:
            operator delete(__s2.__r_.__value_.__l.__data_);
            v9 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
            goto LABEL_26;
          }
          size = __s2.__r_.__value_.__l.__size_;
          if ((__s2.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
          {
            p_s2 = (std::string *)__s2.__r_.__value_.__r.__words[0];
            if (!__s2.__r_.__value_.__l.__size_ || __s2.__r_.__value_.__r.__words[0])
              goto LABEL_19;
          }
LABEL_32:
          __break(1u);
          return;
        }
LABEL_11:
        v10 = v19.__r_.__value_.__l.__size_;
        if ((v19.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_32;
        v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
        if (v19.__r_.__value_.__l.__size_)
        {
          if (!v19.__r_.__value_.__r.__words[0])
            goto LABEL_32;
        }
        goto LABEL_14;
      }
    }
    else
    {
      v19 = *(std::string *)((_BYTE *)this + 9);
      if ((*((char *)a2 + 239) & 0x80000000) == 0)
        goto LABEL_5;
    }
    std::string::__init_copy_ctor_external(&__s2, *((const std::string::value_type **)a2 + 27), *((_QWORD *)a2 + 28));
    v9 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
}

__n128 rtc::NetworkManagerBase::set_default_local_addresses(rtc::NetworkManagerBase *this, const rtc::IPAddress *a2, const rtc::IPAddress *a3)
{
  int v3;
  __n128 result;

  if (*((_DWORD *)a2 + 2) != 2)
  {
    v3 = *((_DWORD *)a3 + 2);
    if (v3 != 30)
      return result;
LABEL_5:
    *((_DWORD *)this + 60) = v3;
    result = *(__n128 *)((char *)a3 + 12);
    *(__n128 *)((char *)this + 244) = result;
    return result;
  }
  *((_DWORD *)this + 52) = 2;
  result = *(__n128 *)((char *)a2 + 12);
  *(__n128 *)((char *)this + 212) = result;
  v3 = *((_DWORD *)a3 + 2);
  if (v3 == 30)
    goto LABEL_5;
  return result;
}

uint64_t rtc::NetworkManagerBase::GetDefaultLocalAddress(rtc::NetworkManagerBase *this, int a2, rtc::IPAddress *a3)
{
  int v4;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD v17[3];
  __int128 v18;

  if (a2 != 30)
  {
    if (a2 == 2)
    {
      v4 = *((_DWORD *)this + 52);
      if (v4)
      {
        *((_DWORD *)a3 + 2) = v4;
        *(_OWORD *)((char *)a3 + 12) = *(_OWORD *)((char *)this + 212);
        return 1;
      }
    }
    return 0;
  }
  v6 = *((_DWORD *)this + 60);
  if (!v6)
    return 0;
  v7 = (uint64_t *)*((_QWORD *)this + 17);
  v8 = (uint64_t *)*((_QWORD *)this + 18);
  if (v7 != v8)
  {
    if (v6 == 2)
    {
LABEL_12:
      v9 = *v7;
      v10 = *(_QWORD *)(*v7 + 240);
      v11 = *(_QWORD *)(*v7 + 248);
      while (1)
      {
        if (v10 == v11)
        {
          if (++v7 == v8)
            goto LABEL_30;
          goto LABEL_12;
        }
        v12 = *(_DWORD *)(v10 + 8);
        v18 = *(_OWORD *)(v10 + 12);
        if (v12 == 2 && *((_DWORD *)this + 61) == (_DWORD)v18)
          break;
        v10 += 32;
      }
LABEL_28:
      if (v9)
      {
        rtc::Network::GetBestIP(v9, (uint64_t)v17);
        *((_DWORD *)a3 + 2) = v17[2];
        *(_OWORD *)((char *)a3 + 12) = v18;
        return 1;
      }
    }
    else if (v6 == 30)
    {
      do
      {
        v9 = *v7;
        v13 = *(_QWORD *)(*v7 + 240);
        v14 = *(_QWORD *)(*v7 + 248);
        while (v13 != v14)
        {
          v15 = *(_DWORD *)(v13 + 8);
          v18 = *(_OWORD *)(v13 + 12);
          if (v15 == 30
            && *(_QWORD *)((char *)this + 244) == (_QWORD)v18
            && *(_QWORD *)((char *)this + 252) == *((_QWORD *)&v18 + 1))
          {
            goto LABEL_28;
          }
          v13 += 32;
        }
        ++v7;
      }
      while (v7 != v8);
    }
  }
LABEL_30:
  *((_DWORD *)a3 + 2) = v6;
  *(_OWORD *)((char *)a3 + 12) = *(_OWORD *)((char *)this + 244);
  return 1;
}

uint64_t rtc::Network::GetBestIP@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  int *v6;
  _QWORD *v7;
  char *v8;
  int v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  int v13;
  _QWORD v14[2];
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(this + 240);
  v3 = *(_QWORD *)(this + 248);
  if (v3 == v2)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = &unk_24C0ACDA0;
    *(_DWORD *)(a2 + 24) = 0;
    return this;
  }
  if (*(_DWORD *)(this + 184) == 2)
  {
    *(_QWORD *)a2 = &unk_24C0ACDA0;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 8);
    v4 = *(_OWORD *)(v2 + 12);
    goto LABEL_25;
  }
  this = 0;
  v5 = (char *)v14 + 4;
  v17 = 0uLL;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16 = 0;
  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  v13 = 0;
  do
  {
    while (1)
    {
      v9 = *(_DWORD *)(v2 + 28);
      if ((v9 & 2) != 0)
        break;
      v10 = *(unsigned int *)(v2 + 8);
      if ((_DWORD)v10 == 2)
      {
        v6 = &v16;
        v7 = v14;
        v8 = (char *)v14 + 4;
        if (*(__int16 *)(v2 + 12) == -343)
          goto LABEL_7;
      }
      else if ((_DWORD)v10 == 30)
      {
        v6 = &v16;
        v7 = v14;
        v8 = (char *)v14 + 4;
        if ((*(_QWORD *)(v2 + 12) & 0xC0FFLL) == 0x80FE)
        {
LABEL_7:
          *v6 = v9;
          *(_DWORD *)v7 = v10;
          *(_OWORD *)v8 = *(_OWORD *)(v2 + 12);
          break;
        }
      }
      v6 = &v13;
      v7 = v11;
      v8 = (char *)v11 + 4;
      if ((*(_QWORD *)(v2 + 12) & 0xFELL) == 0xFC)
        goto LABEL_7;
      v17 = *(_OWORD *)(v2 + 12);
      if ((v9 & 1) == 0)
      {
        v2 += 32;
        this = v10;
        if (v2 != v3)
          continue;
      }
      goto LABEL_20;
    }
    v2 += 32;
  }
  while (v2 != v3);
  LODWORD(v10) = this;
LABEL_20:
  if (!(_DWORD)v10)
  {
    LODWORD(v10) = v14[0];
    if (LODWORD(v14[0]) || (LODWORD(v10) = v11[0], v5 = (char *)v11 + 4, LODWORD(v11[0])))
      v17 = *(_OWORD *)v5;
  }
  *(_QWORD *)a2 = &unk_24C0ACDA0;
  *(_DWORD *)(a2 + 8) = v10;
  v4 = v17;
LABEL_25:
  *(_OWORD *)(a2 + 12) = v4;
  return this;
}

_QWORD *rtc::BasicNetworkManager::BasicNetworkManager(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  _OWORD *v7;
  _QWORD *result;
  int *p_p;
  unint64_t v10;
  BOOL v11;
  int v12;
  int v13;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  void *__p;
  unint64_t v19;
  unsigned __int8 v20;

  v7 = 0;
  *(_QWORD *)(a1 + 16) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 24) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 32;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 80) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 88) = a1 + 88;
  *(_QWORD *)(a1 + 96) = a1 + 88;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 88;
  *(_BYTE *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = &unk_24C0ACDA0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 232) = &unk_24C0ACDA0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_WORD *)(a1 + 264) = 1;
  *(_QWORD *)(a1 + 288) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  *(_QWORD *)(a1 + 296) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 304) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  *(_QWORD *)a1 = &off_24C0B7770;
  *(_QWORD *)(a1 + 8) = &unk_24C0B77E8;
  *(_QWORD *)(a1 + 272) = &unk_24C0B7810;
  *(_QWORD *)(a1 + 280) = &unk_24C0B7838;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 1;
  *(_DWORD *)(a1 + 348) = 0;
  if (!a4)
  {
    v7 = (_OWORD *)operator new();
    *v7 = 0u;
    v7[1] = 0u;
    *(_QWORD *)v7 = &unk_24C0B3F60;
    a4 = v7;
  }
  *(_QWORD *)(a1 + 352) = v7;
  *(_QWORD *)(a1 + 360) = a4;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a2;
  *(_QWORD *)(a1 + 400) = a3;
  *(_QWORD *)(a1 + 408) = 0;
  result = (*(_QWORD *(**)(void **__return_ptr, _OWORD *, const char *, uint64_t))(*(_QWORD *)a4 + 16))(&__p, a4, "WebRTC-AllowMACBasedIPv6", 24);
  if ((char)v20 < 0)
  {
    v10 = v19;
    if ((v19 & 0x8000000000000000) != 0)
      goto LABEL_30;
    p_p = (int *)__p;
    if (v19)
    {
      if (!__p)
        goto LABEL_30;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v10 = v20;
  }
  if (v10 >= 7)
  {
    v12 = *p_p;
    v13 = *(int *)((char *)p_p + 3);
    v11 = v12 == 1650552389 && v13 == 1684368482;
    if ((v20 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  v11 = 0;
  if ((v20 & 0x80) != 0)
LABEL_18:
    operator delete(__p);
LABEL_19:
  *(_BYTE *)(a1 + 416) = v11;
  result = (*(_QWORD *(**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 360) + 16))(&__p, *(_QWORD *)(a1 + 360), "WebRTC-BindUsingInterfaceName", 29);
  if (((char)v20 & 0x80000000) == 0)
  {
    v15 = &__p;
    v16 = v20;
    goto LABEL_24;
  }
  v16 = v19;
  if ((v19 & 0x8000000000000000) == 0)
  {
    v15 = __p;
    if (!v19 || __p)
    {
LABEL_24:
      if (v16 >= 8)
      {
        v17 = *v15 != 0x64656C6261736944;
        if ((v20 & 0x80) != 0)
LABEL_28:
          operator delete(__p);
      }
      else
      {
        v17 = 1;
        if ((v20 & 0x80) != 0)
          goto LABEL_28;
      }
      *(_BYTE *)(a1 + 417) = v17;
      *(_OWORD *)(a1 + 424) = 0u;
      *(_OWORD *)(a1 + 440) = 0u;
      return (_QWORD *)a1;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void rtc::BasicNetworkManager::~BasicNetworkManager(rtc::BasicNetworkManager *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  rtc::Network *v11;
  rtc::Network *v12;
  void *v13;
  uint64_t i;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)this = &off_24C0B7770;
  *((_QWORD *)this + 1) = &unk_24C0B77E8;
  *((_QWORD *)this + 34) = &unk_24C0B7810;
  *((_QWORD *)this + 35) = &unk_24C0B7838;
  v2 = *((_QWORD *)this + 56);
  if (v2)
  {
    *(_BYTE *)(v2 + 4) = 0;
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
  }
  v5 = (void *)*((_QWORD *)this + 53);
  if (v5)
  {
    *((_QWORD *)this + 54) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 46);
  if (v7)
  {
    v8 = *((_QWORD *)this + 47);
    v9 = (void *)*((_QWORD *)this + 46);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0)
          operator delete(*(void **)(v8 - 24));
        v8 -= 24;
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 46);
    }
    *((_QWORD *)this + 47) = v7;
    operator delete(v9);
  }
  v10 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 35) = &unk_24C0ACE30;
  (*((void (**)(char *))this + 38))((char *)this + 280);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 312, *((_QWORD **)this + 40));
  *(_QWORD *)this = off_24C0B76D8;
  *((_QWORD *)this + 1) = &unk_24C0B7748;
  v11 = (rtc::Network *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v11)
  {
    rtc::Network::~Network(v11);
    MEMORY[0x20BD0ADEC]();
  }
  v12 = (rtc::Network *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v12)
  {
    rtc::Network::~Network(v12);
    MEMORY[0x20BD0ADEC]();
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<rtc::Network>>>>::destroy(*((char **)this + 21));
  v13 = (void *)*((_QWORD *)this + 17);
  if (v13)
  {
    *((_QWORD *)this + 18) = v13;
    operator delete(v13);
  }
  *(_QWORD *)this = off_24C0B7858;
  *((_QWORD *)this + 1) = &unk_24C0B78C8;
  for (i = *((_QWORD *)this + 13); i; i = *((_QWORD *)this + 13))
  {
    v15 = (uint64_t *)*((_QWORD *)this + 12);
    v16 = v15[3];
    v17 = *v15;
    *(_QWORD *)(v17 + 8) = v15[1];
    *(_QWORD *)v15[1] = v17;
    *((_QWORD *)this + 13) = i - 1;
    operator delete(v15);
    (*(void (**)(uint64_t, char *))(v16 + 16))(v16, (char *)this + 72);
  }
  *((_QWORD *)this + 14) = (char *)this + 88;
  for (j = *((_QWORD *)this + 6); j; j = *((_QWORD *)this + 6))
  {
    v19 = (uint64_t *)*((_QWORD *)this + 5);
    v20 = v19[3];
    v21 = *v19;
    *(_QWORD *)(v21 + 8) = v19[1];
    *(_QWORD *)v19[1] = v21;
    *((_QWORD *)this + 6) = j - 1;
    operator delete(v19);
    (*(void (**)(uint64_t, char *))(v20 + 16))(v20, (char *)this + 16);
  }
  *((_QWORD *)this + 7) = (char *)this + 32;
}

{
  rtc::BasicNetworkManager::~BasicNetworkManager(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'rtc::BasicNetworkManager::~BasicNetworkManager(rtc::BasicNetworkManager *this)
{
  rtc::BasicNetworkManager::~BasicNetworkManager((rtc::BasicNetworkManager *)((char *)this - 8));
}

{
  rtc::BasicNetworkManager::~BasicNetworkManager((rtc::BasicNetworkManager *)((char *)this - 272));
}

{
  rtc::BasicNetworkManager::~BasicNetworkManager((rtc::BasicNetworkManager *)((char *)this - 280));
}

{
  rtc::BasicNetworkManager::~BasicNetworkManager((rtc::BasicNetworkManager *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  rtc::BasicNetworkManager::~BasicNetworkManager((rtc::BasicNetworkManager *)((char *)this - 272));
  JUMPOUT(0x20BD0ADECLL);
}

{
  rtc::BasicNetworkManager::~BasicNetworkManager((rtc::BasicNetworkManager *)((char *)this - 280));
  JUMPOUT(0x20BD0ADECLL);
}

void rtc::BasicNetworkManager::UpdateNetworksOnce(rtc::BasicNetworkManager *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(void);
  _QWORD *v12;
  uint64_t v13;
  ifaddrs *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  sockaddr *ifa_addr;
  int sa_family;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  sockaddr *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  char *ifa_name;
  size_t v46;
  size_t v47;
  char **v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  std::string *v53;
  uint64_t *v54;
  size_t v55;
  std::string::size_type size;
  std::string *p_p;
  BOOL v58;
  int v59;
  char v60;
  uint64_t **v61;
  _QWORD *v62;
  size_t v63;
  size_t v65;
  int v66;
  _QWORD *v67;
  unint64_t v68;
  size_t v70;
  int v71;
  _QWORD *v72;
  size_t v73;
  size_t v74;
  int v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  size_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  size_t v85;
  size_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t i;
  const rtc::IPAddress *v92;
  std::string *v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  const void *v100;
  const char *v101;
  char v102;
  char v103;
  size_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v115;
  int v116;
  unsigned __int8 *v117;
  const void *v118;
  int v119;
  const char *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t *v128;
  size_t v129;
  uint64_t **v130;
  uint64_t **v131;
  std::string::size_type v132;
  BOOL v133;
  char v134;
  std::string *v135;
  size_t v136;
  const void **v137;
  size_t v138;
  const void *v139;
  size_t v140;
  size_t v141;
  int v142;
  std::string *v143;
  size_t v144;
  size_t v145;
  int v146;
  _QWORD *v147;
  std::string *v148;
  uint64_t *v149;
  int64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t *v156;
  int64_t v157;
  unint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t *v161;
  rtc::Network *v162;
  rtc::Network *v163;
  uint64_t v164;
  int64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t *v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  unsigned __int8 *v174;
  size_t v175;
  unsigned __int8 *v176;
  size_t v177;
  unsigned __int8 *v178;
  size_t v184;
  size_t v185;
  unsigned __int8 *v186;
  size_t v187;
  unsigned __int8 *v188;
  size_t v189;
  unsigned __int8 *v190;
  size_t v191;
  unsigned __int8 *v192;
  size_t v193;
  size_t v194;
  unsigned __int8 *v195;
  unsigned __int8 *v196;
  unsigned __int8 *v197;
  rtc::Network *v198;
  rtc::Network *v199;
  int v200;
  _QWORD *v201;
  void (*v202)(void);
  unint64_t v203;
  _QWORD *v204;
  unint64_t v205;
  int v206;
  uint64_t *v207;
  int v208;
  char v209;
  uint64_t *v210;
  int __s1;
  char __s1a;
  std::string *__s1b;
  uint64_t *v214;
  uint64_t *v215;
  unint64_t v216;
  ifaddrs *v217;
  void *v218;
  int v219;
  __int128 v220;
  std::string __p;
  _DWORD v222[7];
  int v223;
  _QWORD v224[4];
  _QWORD v225[4];
  uint64_t **v226;
  uint64_t *v227;
  uint64_t v228;
  char *v229;
  _BYTE v230[20];

  if (!*((_DWORD *)this + 87))
    return;
  v217 = 0;
  if (getifaddrs(&v217))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v2 = *__error();
      v229 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc";
      *(_DWORD *)v230 = 5627;
      *(_DWORD *)&v230[8] = 1;
      *(_DWORD *)&v230[12] = v2;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)&v229);
    }
    v10 = (_QWORD *)*((_QWORD *)this + 12);
    for (*((_QWORD *)this + 14) = v10; v10 != (_QWORD *)((char *)this + 88); v10 = (_QWORD *)*((_QWORD *)this + 14))
    {
      v11 = (void (*)(void))v10[2];
      *((_QWORD *)this + 14) = v10[1];
      v11();
    }
    return;
  }
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C0B6988;
  v13 = operator new();
  *(_QWORD *)v13 = off_24C0B69B8;
  *(_DWORD *)(v13 + 8) = socket(30, 2, 0);
  v12[1] = v13;
  v14 = v217;
  v227 = 0;
  v228 = 0;
  v226 = &v227;
  v15 = 0;
  v16 = 0;
  if (!v217)
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_445;
  }
  v205 = 0;
  v204 = v12;
  while (2)
  {
    v225[0] = &unk_24C0ACDA0;
    memset(&v225[1], 0, 20);
    v224[0] = &unk_24C0ACDA0;
    memset(&v224[1], 0, 20);
    memset(&v222[2], 0, 20);
    *(_QWORD *)v222 = &unk_24C0B5310;
    v223 = 0;
    ifa_addr = v14->ifa_addr;
    if (!ifa_addr || !v14->ifa_netmask)
      goto LABEL_13;
    sa_family = ifa_addr->sa_family;
    v22 = sa_family == 30 || sa_family == 2;
    if (!v22
      || !(*(unsigned int (**)(_QWORD *, ifaddrs *, _DWORD *, _QWORD *))(*v12 + 16))(v12, v14, v222, v224))
    {
      goto LABEL_13;
    }
    if ((v14->ifa_flags & 0x40) == 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        rtc::IPAddress::ToSensitiveString((rtc::IPAddress *)v222, (uint64_t)&v229);
        v203 = v203 & 0xFFFFFFFF00000000 | 0x1371;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc");
        if ((v230[15] & 0x80000000) != 0)
          operator delete(v229);
      }
      goto LABEL_13;
    }
    v30 = v14->ifa_addr;
    if (v30->sa_family != 30)
    {
      v31 = 0;
      v32 = v224[1];
      if (LODWORD(v224[1]) == 30)
        goto LABEL_42;
LABEL_33:
      if (v32 != 2)
      {
        v33 = 0;
        goto LABEL_66;
      }
      v33 = 0;
      LODWORD(v34) = HIDWORD(v224[1]);
      goto LABEL_53;
    }
    if (v222[2] == 30)
    {
      if ((v222[3] & 0xC0FF) == 0x80FELL)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
          goto LABEL_13;
LABEL_49:
        rtc::IPAddress::ToSensitiveString((rtc::IPAddress *)v222, (uint64_t)&v229);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/network.cc");
        if ((v230[15] & 0x80000000) == 0)
          goto LABEL_13;
        v19 = v229;
LABEL_12:
        operator delete(v19);
        goto LABEL_13;
      }
      if (!*((_BYTE *)this + 416) && (*(_QWORD *)&v222[5] & 0xFFFF000002) == 0xFEFF000002)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
          goto LABEL_13;
        goto LABEL_49;
      }
      if ((v223 & 2) != 0)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
          goto LABEL_13;
        goto LABEL_49;
      }
    }
    v31 = *(_DWORD *)&v30[1].sa_data[6];
    v32 = v224[1];
    if (LODWORD(v224[1]) != 30)
      goto LABEL_33;
LABEL_42:
    LODWORD(v34) = HIDWORD(v224[1]);
    if (HIDWORD(v224[1]) == -1)
    {
      v34 = HIDWORD(*(_QWORD *)((char *)&v224[1] + 4));
      if (LODWORD(v224[2]) == -1)
      {
        if (HIDWORD(v224[2]) == -1)
        {
          v34 = HIDWORD(*(_QWORD *)((char *)&v224[2] + 4));
          if (LODWORD(v224[3]) == -1)
          {
            v33 = 128;
            goto LABEL_66;
          }
          v33 = 96;
        }
        else
        {
          LODWORD(v34) = HIDWORD(v224[2]);
          v33 = 64;
        }
      }
      else
      {
        v33 = 32;
      }
    }
    else
    {
      v33 = 0;
    }
LABEL_53:
    if ((_DWORD)v34)
    {
      v42 = bswap32(v34);
      v43 = v42 & -v42;
      if (v43)
        v44 = 31;
      else
        v44 = 32;
      if ((_WORD)v43)
        v44 -= 16;
      if ((v43 & 0xFF00FF) != 0)
        v44 -= 8;
      if ((v43 & 0xF0F0F0F) != 0)
        v44 -= 4;
      if ((v43 & 0x33333333) != 0)
        v44 -= 2;
      v33 = (((_DWORD)v33 + 32) | ((v43 & 0x55555555) != 0)) - v44;
    }
LABEL_66:
    __s1 = v33;
    rtc::TruncateIP((uint64_t)v222, (const rtc::IPAddress *)v33, (uint64_t)&v229);
    LODWORD(v225[1]) = *(_DWORD *)v230;
    *(_OWORD *)((char *)&v225[1] + 4) = *(_OWORD *)&v230[4];
    ifa_name = v14->ifa_name;
    if (!ifa_name)
      goto LABEL_461;
    v46 = strlen(v14->ifa_name);
    if (v46 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_462;
    v47 = v46;
    v210 = v16;
    v206 = v31;
    if (v46 > 0x16)
    {
      v50 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17)
        v50 = v46 | 7;
      v51 = v50 + 1;
      v48 = (char **)operator new(v50 + 1);
      *(_QWORD *)v230 = v47;
      *(_QWORD *)&v230[8] = v51 | 0x8000000000000000;
      v229 = (char *)v48;
      v49 = (char *)v48 + v47;
      if (v48 > (char **)ifa_name)
        goto LABEL_75;
LABEL_74:
      if (v49 > ifa_name)
        goto LABEL_461;
      goto LABEL_75;
    }
    v230[15] = v46;
    v48 = &v229;
    v49 = &v230[v47 - 8];
    if (&v229 <= (char **)ifa_name)
      goto LABEL_74;
LABEL_75:
    if (v47)
      memmove(v48, ifa_name, v47);
    *v49 = 0;
    if ((v230[15] & 0x80000000) != 0)
    {
      v52 = *(_QWORD *)v230;
      if ((*(_QWORD *)v230 & 0x8000000000000000) != 0)
        goto LABEL_461;
      v53 = (std::string *)v229;
      if (*(_QWORD *)v230)
      {
        if (!v229)
          goto LABEL_461;
      }
    }
    else
    {
      v52 = v230[15];
      v53 = (std::string *)&v229;
    }
    rtc::MakeNetworkKey(&__p, v53, v52, (rtc::IPAddress *)v225, __s1);
    if ((v230[15] & 0x80000000) != 0)
    {
      operator delete(v229);
      v54 = v227;
      if (!v227)
        goto LABEL_151;
    }
    else
    {
      v54 = v227;
      if (!v227)
        goto LABEL_151;
    }
    v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_)
      v58 = __p.__r_.__value_.__r.__words[0] == 0;
    else
      v58 = 0;
    v59 = !v58;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v60 = v59;
      v61 = &v227;
      while (1)
      {
        v62 = v54 + 4;
        if (*((char *)v54 + 55) < 0)
        {
          v63 = v54[5];
          if ((v63 & 0x8000000000000000) != 0)
            goto LABEL_461;
          v62 = (_QWORD *)*v62;
          if (v63 && v62 == 0)
            goto LABEL_461;
        }
        else
        {
          v63 = *((unsigned __int8 *)v54 + 55);
        }
        if (v55 >= v63)
          v65 = v63;
        else
          v65 = v55;
        v66 = memcmp(v62, &__p, v65);
        if (v66)
        {
          if (v66 < 0)
            goto LABEL_94;
LABEL_109:
          v61 = (uint64_t **)v54;
          v54 = (uint64_t *)*v54;
          if (!v54)
            goto LABEL_131;
        }
        else
        {
          if (v63 >= v55)
            goto LABEL_109;
LABEL_94:
          v54 = (uint64_t *)v54[1];
          if (!v54)
            goto LABEL_131;
        }
      }
    }
    if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0 || !v59)
      goto LABEL_461;
    v60 = v59;
    v61 = &v227;
    do
    {
      while (1)
      {
        v67 = v54 + 4;
        if (*((char *)v54 + 55) < 0)
        {
          v68 = v54[5];
          if ((v68 & 0x8000000000000000) != 0)
            goto LABEL_461;
          v67 = (_QWORD *)*v67;
          if (v68 && v67 == 0)
            goto LABEL_461;
        }
        else
        {
          v68 = *((unsigned __int8 *)v54 + 55);
        }
        v70 = size >= v68 ? v68 : size;
        v71 = memcmp(v67, p_p, v70);
        if (v71)
          break;
        if (v68 >= size)
          goto LABEL_130;
LABEL_114:
        v54 = (uint64_t *)v54[1];
        if (!v54)
          goto LABEL_131;
      }
      if (v71 < 0)
        goto LABEL_114;
LABEL_130:
      v61 = (uint64_t **)v54;
      v54 = (uint64_t *)*v54;
    }
    while (v54);
LABEL_131:
    if (&v227 == v61)
      goto LABEL_151;
    if ((v55 & 0x80) == 0)
    {
      p_p = &__p;
      size = v55;
      goto LABEL_136;
    }
    if ((size & 0x8000000000000000) != 0 || (v60 & 1) == 0)
      goto LABEL_461;
LABEL_136:
    v72 = v61 + 4;
    if (*((char *)v61 + 55) < 0)
    {
      v73 = (size_t)v61[5];
      if ((v73 & 0x8000000000000000) == 0)
      {
        v72 = (_QWORD *)*v72;
        if (!v73 || v72)
          goto LABEL_141;
      }
      goto LABEL_461;
    }
    v73 = *((unsigned __int8 *)v61 + 55);
LABEL_141:
    if (v73 >= size)
      v74 = size;
    else
      v74 = v73;
    v75 = memcmp(p_p, v72, v74);
    if (!v75)
    {
      if (size < v73)
        goto LABEL_151;
LABEL_146:
      v76 = v61[7];
      v77 = v76[31];
      if (v77 >= v76[32])
      {
        v76[31] = (uint64_t)std::vector<rtc::InterfaceAddress>::__push_back_slow_path<rtc::InterfaceAddress>((char **)v76 + 30, (uint64_t)v222);
        v12 = v204;
        v16 = v210;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_11;
        goto LABEL_13;
      }
      v12 = v204;
      if (!v77)
        goto LABEL_461;
      *(_QWORD *)v77 = &unk_24C0ACDA0;
      *(_DWORD *)(v77 + 8) = v222[2];
      *(_OWORD *)(v77 + 12) = *(_OWORD *)&v222[3];
      *(_QWORD *)v77 = &unk_24C0B5310;
      *(_DWORD *)(v77 + 28) = v223;
      v76[31] = v77 + 32;
      v16 = v210;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_11;
    }
    if ((v75 & 0x80000000) == 0)
      goto LABEL_146;
LABEL_151:
    if ((v14->ifa_flags & 8) != 0)
      goto LABEL_175;
    v78 = *((_QWORD *)this + 51);
    v79 = v14->ifa_name;
    if (v78)
    {
      if (v79)
      {
        v80 = strlen(v14->ifa_name);
        v81 = (*(uint64_t (**)(uint64_t, char *, size_t))(*(_QWORD *)v78 + 32))(v78, v79, v80);
        v83 = v82 & 0xFF00000000;
        v208 = v82;
        v84 = v81;
        if (v81 == 8)
          goto LABEL_192;
        goto LABEL_176;
      }
LABEL_461:
      __break(1u);
LABEL_462:
      abort();
    }
    if (!v79)
      goto LABEL_461;
    v85 = strlen(v14->ifa_name);
    if (v85 < 2)
      goto LABEL_161;
    if (*(_WORD *)v79 != 28524)
      goto LABEL_159;
    v87 = v85 - 2;
    if ((uint64_t)(v85 - 2) < 0)
      goto LABEL_461;
    if (v85 == 2)
    {
LABEL_175:
      v208 = 0;
      v83 = 0x100000000;
      v81 = 16;
      v84 = 16;
      goto LABEL_176;
    }
    v174 = (unsigned __int8 *)(v79 + 2);
    while (((char)*v174 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v174 + 60) & 0x400) != 0)
    {
      v208 = 0;
      ++v174;
      v83 = 0x100000000;
      v81 = 16;
      v84 = 16;
      if (!--v87)
        goto LABEL_176;
    }
LABEL_159:
    if (v85 >= 3)
    {
      if (*(_WORD *)v79 == 29797 && v79[2] == 104)
      {
        v177 = v85 - 3;
        if ((uint64_t)(v85 - 3) < 0)
          goto LABEL_461;
        if (v85 == 3)
        {
          v208 = 0;
          v83 = 0x100000000;
          v81 = 1;
          v84 = 1;
          goto LABEL_176;
        }
        v178 = (unsigned __int8 *)(v79 + 3);
        while (((char)*v178 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v178 + 60) & 0x400) != 0)
        {
          v208 = 0;
          ++v178;
          v83 = 0x100000000;
          v81 = 1;
          v84 = 1;
          if (!--v177)
            goto LABEL_176;
        }
      }
      if (v85 < 4)
        goto LABEL_376;
      if (*(_DWORD *)v79 == 1851878519)
      {
        v189 = v85 - 4;
        if ((uint64_t)(v85 - 4) < 0)
          goto LABEL_461;
        if (v85 == 4)
          goto LABEL_428;
        v190 = (unsigned __int8 *)(v79 + 4);
        while (((char)*v190 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v190 + 60) & 0x400) != 0)
        {
          v208 = 0;
          ++v190;
          v83 = 0x100000000;
          v81 = 2;
          v84 = 2;
          if (!--v189)
            goto LABEL_176;
        }
      }
      if (v85 >= 7)
      {
        if (*(_DWORD *)v79 != 1999451254 || *(_DWORD *)(v79 + 3) != 1851878519)
        {
LABEL_372:
          if (*(_DWORD *)v79 == 1702064233 && v79[4] == 99)
          {
            v193 = v85 - 5;
            if ((uint64_t)(v85 - 5) < 0)
              goto LABEL_461;
            if (v85 == 5)
              goto LABEL_425;
            v195 = (unsigned __int8 *)(v79 + 5);
            while (((char)*v195 & 0x80000000) == 0
                 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v195 + 60) & 0x400) != 0)
            {
              v208 = 0;
              ++v195;
              v83 = 0x100000000;
              v81 = 8;
              if (!--v193)
                goto LABEL_192;
            }
          }
LABEL_376:
          if (*(_WORD *)v79 == 30068 && v79[2] == 110)
          {
            v185 = v85 - 3;
            if ((uint64_t)(v85 - 3) < 0)
              goto LABEL_461;
            if (v85 == 3)
              goto LABEL_425;
            v186 = (unsigned __int8 *)(v79 + 3);
            while (((char)*v186 & 0x80000000) == 0
                 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v186 + 60) & 0x400) != 0)
            {
              v208 = 0;
              ++v186;
              v83 = 0x100000000;
              v81 = 8;
              if (!--v185)
                goto LABEL_192;
            }
          }
          if (v85 >= 4 && *(_DWORD *)v79 == 1853191285)
          {
            v191 = v85 - 4;
            if ((uint64_t)(v85 - 4) < 0)
              goto LABEL_461;
            if (v85 == 4)
              goto LABEL_425;
            v192 = (unsigned __int8 *)(v79 + 4);
            while (((char)*v192 & 0x80000000) == 0
                 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v192 + 60) & 0x400) != 0)
            {
              v208 = 0;
              ++v192;
              v83 = 0x100000000;
              v81 = 8;
              if (!--v191)
                goto LABEL_192;
            }
          }
          if (*(_WORD *)v79 != 24948 || v79[2] != 112)
            goto LABEL_386;
          v187 = v85 - 3;
          if ((uint64_t)(v85 - 3) < 0)
            goto LABEL_461;
          if (v85 != 3)
          {
            v188 = (unsigned __int8 *)(v79 + 3);
            while (((char)*v188 & 0x80000000) == 0
                 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v188 + 60) & 0x400) != 0)
            {
              v208 = 0;
              ++v188;
              v83 = 0x100000000;
              v81 = 8;
              if (!--v187)
                goto LABEL_192;
            }
LABEL_386:
            if (v85 >= 6 && *(_DWORD *)v79 == 1601201264 && *((_WORD *)v79 + 2) == 28777)
            {
              v184 = v85 - 6;
              if ((uint64_t)(v85 - 6) < 0)
                goto LABEL_461;
              if (v85 == 6)
              {
                v208 = 0;
                v83 = 0x100000000;
                v81 = 4;
                v84 = 4;
                goto LABEL_176;
              }
              v196 = (unsigned __int8 *)(v79 + 6);
              while (((char)*v196 & 0x80000000) == 0
                   && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v196 + 60) & 0x400) != 0)
              {
                v208 = 0;
                ++v196;
                v83 = 0x100000000;
                v81 = 4;
                v84 = 4;
                if (!--v184)
                  goto LABEL_176;
              }
            }
            goto LABEL_160;
          }
LABEL_425:
          v208 = 0;
          v83 = 0x100000000;
          v81 = 8;
          goto LABEL_192;
        }
        v194 = v85 - 7;
        if ((uint64_t)(v85 - 7) < 0)
          goto LABEL_461;
        if (v85 == 7)
          goto LABEL_428;
        v197 = (unsigned __int8 *)(v79 + 7);
        while (((char)*v197 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v197 + 60) & 0x400) != 0)
        {
          v208 = 0;
          ++v197;
          v83 = 0x100000000;
          v81 = 2;
          v84 = 2;
          if (!--v194)
            goto LABEL_176;
        }
      }
      if (v85 < 5)
        goto LABEL_376;
      goto LABEL_372;
    }
LABEL_160:
    if (*(_WORD *)v79 == 28261)
    {
      v175 = v85 - 2;
      if ((uint64_t)(v85 - 2) < 0)
        goto LABEL_461;
      if (v85 != 2)
      {
        v176 = (unsigned __int8 *)(v79 + 2);
        while (((char)*v176 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * *v176 + 60) & 0x400) != 0)
        {
          v208 = 0;
          ++v176;
          v83 = 0x100000000;
          v81 = 2;
          v84 = 2;
          if (!--v175)
            goto LABEL_176;
        }
        goto LABEL_161;
      }
LABEL_428:
      v208 = 0;
      v83 = 0x100000000;
      v81 = 2;
      v84 = 2;
      goto LABEL_176;
    }
LABEL_161:
    v81 = 0;
    v84 = 0;
    v208 = 0;
    v83 = 0x100000000;
LABEL_176:
    v88 = v81;
    v218 = &unk_24C0ACDA0;
    v219 = v225[1];
    v220 = *(_OWORD *)((char *)&v225[1] + 4);
    v89 = *((_QWORD *)this + 53);
    for (i = *((_QWORD *)this + 54); v89 != i; v89 += 40)
    {
      v92 = (const rtc::IPAddress *)*(unsigned int *)(v89 + 32);
      if ((int)v92 <= __s1)
      {
        rtc::TruncateIP((uint64_t)&v218, v92, (uint64_t)&v229);
        if (*(_DWORD *)v230 == *(_DWORD *)(v89 + 8))
        {
          switch(*(_DWORD *)v230)
          {
            case 2:
              if (*(_DWORD *)&v230[4] == *(_DWORD *)(v89 + 12))
                goto LABEL_190;
              break;
            case 0x1E:
              if (*(_QWORD *)&v230[4] == *(_QWORD *)(v89 + 12) && *(_QWORD *)&v230[12] == *(_QWORD *)(v89 + 20))
              {
LABEL_190:
                v81 = (v84 << 32) | 8;
                goto LABEL_192;
              }
              break;
            case 0:
              goto LABEL_190;
          }
        }
      }
    }
    v81 = v88;
LABEL_192:
    v93 = (std::string *)v14->ifa_name;
    if (!v93)
      goto LABEL_461;
    v94 = strlen(v14->ifa_name);
    v95 = operator new();
    v96 = rtc::Network::Network(v95, v93, v94, (char *)v93, v94, (uint64_t)v225, __s1, v81);
    *(_QWORD *)(v96 + 112) = this;
    *(_DWORD *)(v96 + 264) = v206;
    v97 = *(_QWORD *)(v96 + 248);
    if (v97 >= *(_QWORD *)(v96 + 256))
    {
      *(_QWORD *)(v95 + 248) = std::vector<rtc::InterfaceAddress>::__push_back_slow_path<rtc::InterfaceAddress>((char **)(v95 + 240), (uint64_t)v222);
      if ((v83 & 0x100000000) == 0)
        goto LABEL_215;
LABEL_198:
      v98 = (unsigned __int8 *)*((_QWORD *)this + 46);
      v99 = (unsigned __int8 *)*((_QWORD *)this + 47);
      if (v98 == v99)
      {
        v103 = *(_BYTE *)(v95 + 151);
      }
      else
      {
        v101 = (const char *)(v95 + 128);
        v100 = *(const void **)(v95 + 128);
        v102 = *(_BYTE *)(v95 + 151);
        v103 = v102;
        v104 = *(_QWORD *)(v95 + 136);
        if (v102 >= 0)
          v105 = *(unsigned __int8 *)(v95 + 151);
        else
          v105 = *(_QWORD *)(v95 + 136);
        if ((*(_BYTE *)(v95 + 151) & 0x80) != 0)
        {
          __s1a = *(_BYTE *)(v95 + 151);
          while (1)
          {
            v115 = v98[23];
            v116 = (char)v115;
            if ((v115 & 0x80u) != 0)
              v115 = *((_QWORD *)v98 + 1);
            if (v105 == v115)
            {
              v117 = v116 >= 0 ? v98 : *(unsigned __int8 **)v98;
              v118 = v100;
              v119 = memcmp(v100, v117, v104);
              v100 = v118;
              if (!v119)
                goto LABEL_215;
            }
            v98 += 24;
            if (v98 == v99)
            {
              v101 = (const char *)(v95 + 128);
              if ((__s1a & 0x80) == 0)
                goto LABEL_219;
              goto LABEL_243;
            }
          }
        }
        if (!v102)
        {
          while (1)
          {
            v164 = v98[23];
            if ((v164 & 0x80u) != 0)
              v164 = *((_QWORD *)v98 + 1);
            if (v105 == v164)
              goto LABEL_215;
            v98 += 24;
            if (v98 == v99)
              goto LABEL_220;
          }
        }
        do
        {
          v106 = v98[23];
          v107 = (char)v106;
          if ((v106 & 0x80u) != 0)
            v106 = *((_QWORD *)v98 + 1);
          if (v105 == v106)
          {
            if (v107 >= 0)
              v108 = v98;
            else
              v108 = *(unsigned __int8 **)v98;
            v109 = (unsigned __int8 *)(v95 + 128);
            v110 = *(unsigned __int8 *)(v95 + 151);
            while (*v109 == *v108)
            {
              ++v109;
              ++v108;
              if (!--v110)
                goto LABEL_215;
            }
          }
          v98 += 24;
        }
        while (v98 != v99);
      }
      v101 = (const char *)(v95 + 128);
      if (v103 < 0)
      {
LABEL_243:
        v120 = *(const char **)v101;
        if (strncmp(*(const char **)v101, "vmnet", 5uLL))
        {
          v121 = strncmp(v120, "vnic", 4uLL);
          v101 = v120;
          if (v121)
            goto LABEL_245;
        }
      }
      else
      {
LABEL_219:
        LODWORD(v100) = *(_DWORD *)v101;
LABEL_220:
        if ((*(_DWORD *)v101 != 1701735798 || v101[4] != 116) && (_DWORD)v100 != 1667853942)
        {
LABEL_245:
          if (strncmp(v101, "vboxnet", 7uLL))
          {
            if (*(_DWORD *)(v95 + 184) == 2)
            {
              *(_BYTE *)(v95 + 268) = *(_BYTE *)(v95 + 188) == 0;
              v111 = HIDWORD(v81);
              if (*(_DWORD *)(v95 + 276) == HIDWORD(v81))
                goto LABEL_252;
            }
            else
            {
              *(_BYTE *)(v95 + 268) = 0;
              v111 = HIDWORD(v81);
              if (*(_DWORD *)(v95 + 276) == HIDWORD(v81))
                goto LABEL_252;
            }
            goto LABEL_250;
          }
        }
      }
      *(_BYTE *)(v95 + 268) = 1;
      v111 = HIDWORD(v81);
      if (*(_DWORD *)(v95 + 276) != HIDWORD(v81))
        goto LABEL_250;
      goto LABEL_252;
    }
    if (!v97)
      goto LABEL_461;
    *(_QWORD *)v97 = &unk_24C0ACDA0;
    *(_DWORD *)(v97 + 8) = v222[2];
    *(_OWORD *)(v97 + 12) = *(_OWORD *)&v222[3];
    *(_QWORD *)v97 = &unk_24C0B5310;
    *(_DWORD *)(v97 + 28) = v223;
    *(_QWORD *)(v95 + 248) = v97 + 32;
    if ((v83 & 0x100000000) != 0)
      goto LABEL_198;
LABEL_215:
    *(_BYTE *)(v95 + 268) = 1;
    v111 = HIDWORD(v81);
    if (*(_DWORD *)(v95 + 276) == HIDWORD(v81))
      goto LABEL_252;
LABEL_250:
    *(_DWORD *)(v95 + 276) = v111;
    v122 = *(_QWORD *)(v95 + 24);
    for (*(_QWORD *)(v95 + 40) = v122; v122 != v95 + 16; v122 = *(_QWORD *)(v95 + 40))
    {
      v124 = *(void (**)(uint64_t, uint64_t))(v122 + 16);
      v123 = v122 + 16;
      *(_QWORD *)(v95 + 40) = *(_QWORD *)(v123 - 8);
      v124(v123, v95);
    }
LABEL_252:
    if (*(_DWORD *)(v95 + 288) != v208)
    {
      *(_DWORD *)(v95 + 288) = v208;
      v125 = *(_QWORD *)(v95 + 80);
      for (*(_QWORD *)(v95 + 96) = v125; v125 != v95 + 72; v125 = *(_QWORD *)(v95 + 96))
      {
        v127 = *(void (**)(uint64_t, uint64_t))(v125 + 16);
        v126 = v125 + 16;
        *(_QWORD *)(v95 + 96) = *(_QWORD *)(v126 - 8);
        v127(v126, v95);
      }
    }
    if (!*(_BYTE *)(v95 + 268))
    {
      v207 = v15;
      v128 = v227;
      v129 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v130 = &v227;
      v131 = &v227;
      if (v227)
      {
        v132 = __p.__r_.__value_.__l.__size_;
        __s1b = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_)
          v133 = __p.__r_.__value_.__r.__words[0] == 0;
        else
          v133 = 0;
        v134 = !v133;
        v209 = v134;
        while (1)
        {
          v130 = (uint64_t **)v128;
          if ((v129 & 0x80) != 0)
          {
            if ((v132 & 0x8000000000000000) != 0)
              goto LABEL_461;
            v135 = __s1b;
            v136 = v132;
            if ((v209 & 1) == 0)
              goto LABEL_461;
          }
          else
          {
            v135 = &__p;
            v136 = v129;
          }
          v137 = (const void **)(v128 + 4);
          v138 = *((unsigned __int8 *)v128 + 55);
          v139 = v128 + 4;
          v140 = v138;
          if (*((char *)v128 + 55) < 0)
          {
            v140 = v128[5];
            if ((v140 & 0x8000000000000000) != 0)
              goto LABEL_461;
            v139 = *v137;
            if (v140)
            {
              if (!v139)
                goto LABEL_461;
            }
          }
          if (v140 >= v136)
            v141 = v136;
          else
            v141 = v140;
          v142 = memcmp(v135, v139, v141);
          if (v142)
          {
            if (v142 < 0)
              goto LABEL_266;
LABEL_282:
            if ((v138 & 0x80) != 0)
            {
              v138 = (size_t)v130[5];
              if ((v138 & 0x8000000000000000) != 0)
                goto LABEL_461;
              v137 = (const void **)*v137;
              if (v138)
              {
                if (!v137)
                  goto LABEL_461;
              }
            }
            if ((v129 & 0x80) != 0)
            {
              if ((v132 & 0x8000000000000000) != 0)
                goto LABEL_461;
              v143 = __s1b;
              v144 = v132;
              if ((v209 & 1) == 0)
                goto LABEL_461;
            }
            else
            {
              v143 = &__p;
              v144 = v129;
            }
            if (v144 >= v138)
              v145 = v138;
            else
              v145 = v144;
            v146 = memcmp(v137, v143, v145);
            if (v146)
            {
              if ((v146 & 0x80000000) == 0)
                goto LABEL_305;
            }
            else if (v138 >= v144)
            {
LABEL_305:
              v147 = v130;
              v15 = v207;
              goto LABEL_306;
            }
            v128 = v130[1];
            if (!v128)
            {
              v131 = v130 + 1;
              break;
            }
          }
          else
          {
            if (v136 >= v140)
              goto LABEL_282;
LABEL_266:
            v128 = *v130;
            v131 = v130;
            if (!*v130)
              break;
          }
        }
      }
      v147 = operator new(0x40uLL);
      v148 = (std::string *)(v147 + 4);
      if ((v129 & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v148, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v148->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v147[6] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      }
      v147[7] = 0;
      *v147 = 0;
      v147[1] = 0;
      v147[2] = v130;
      *v131 = v147;
      v149 = v147;
      v15 = v207;
      if (*v226)
      {
        v226 = (uint64_t **)*v226;
        v149 = *v131;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v227, v149);
      ++v228;
LABEL_306:
      v147[7] = v95;
      if ((unint64_t)v210 < v205)
      {
        if (!v210)
          goto LABEL_461;
        *v210 = v95;
        v16 = v210 + 1;
        v12 = v204;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_11;
      }
      v150 = (char *)v210 - (char *)v15;
      v151 = v210 - v15;
      v152 = v151 + 1;
      if ((unint64_t)(v151 + 1) >> 61)
        goto LABEL_462;
      if ((uint64_t)(v205 - (_QWORD)v15) >> 2 > v152)
        v152 = (uint64_t)(v205 - (_QWORD)v15) >> 2;
      if (v205 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v152 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v152)
        goto LABEL_461;
      if (v152 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v153 = 8 * v152;
      v154 = (char *)operator new(8 * v152);
      v155 = v154;
      v156 = (uint64_t *)&v154[8 * v151];
      *v156 = v95;
      v16 = v156 + 1;
      v157 = (char *)v210 - (char *)v15;
      if (v210 == v15)
      {
        v12 = v204;
        goto LABEL_331;
      }
      v158 = v157 - 8;
      v12 = v204;
      if ((unint64_t)(v157 - 8) >= 0x138)
      {
        v165 = (char *)(v210 - 1) - (char *)v15;
        if ((uint64_t *)((char *)v210 - (v165 & 0xFFFFFFFFFFFFFFF8) - 8) > v210 - 1)
        {
          v159 = v210;
        }
        else if (&v154[v150 - 8 - (v165 & 0xFFFFFFFFFFFFFFF8)] > &v154[v150 - 8])
        {
          v159 = v210;
        }
        else
        {
          v166 = v165 & 0xFFFFFFFFFFFFFFF8;
          if ((uint64_t *)((char *)v210 - v166 - 8) >= v156 || (v159 = v210, &v154[v150 - v166 - 8] >= (char *)v210))
          {
            v167 = (v158 >> 3) + 1;
            v168 = 8 * (v167 & 0x3FFFFFFFFFFFFFFCLL);
            v159 = &v210[v168 / 0xFFFFFFFFFFFFFFF8];
            v156 = (uint64_t *)((char *)v156 - v168);
            v169 = &v154[v150 - 16];
            v170 = v210 - 2;
            v171 = v167 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v173 = *((_OWORD *)v170 - 1);
              v172 = *(_OWORD *)v170;
              *((_OWORD *)v170 - 1) = 0uLL;
              *(_OWORD *)v170 = 0uLL;
              *((_OWORD *)v169 - 1) = v173;
              *(_OWORD *)v169 = v172;
              v169 -= 32;
              v170 -= 4;
              v171 -= 4;
            }
            while (v171);
            if (v167 == (v167 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_321:
              v161 = v210;
              do
              {
                v163 = (rtc::Network *)*--v161;
                v162 = v163;
                *v161 = 0;
                if (v163)
                {
                  rtc::Network::~Network(v162);
                  MEMORY[0x20BD0ADEC]();
                }
              }
              while (v161 != v15);
LABEL_331:
              v205 = (unint64_t)&v155[v153];
              if (v15)
                operator delete(v15);
              v15 = v156;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_13;
LABEL_11:
              v19 = (char *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_12;
            }
          }
        }
      }
      else
      {
        v159 = v210;
      }
      do
      {
        v160 = *--v159;
        *v159 = 0;
        *--v156 = v160;
      }
      while (v159 != v15);
      goto LABEL_321;
    }
    rtc::Network::~Network((rtc::Network *)v95);
    MEMORY[0x20BD0ADEC]();
    v12 = v204;
    v16 = v210;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_11;
LABEL_13:
    v14 = v14->ifa_next;
    if (v14)
      continue;
    break;
  }
  v18 = (char *)v227;
  v17 = v205;
LABEL_445:
  std::__tree<std::__value_type<std::string,webrtc::StatsReport *>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::StatsReport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::StatsReport *>>>::destroy(v18);
  MEMORY[0x20BD0B0A4](v217);
  (*(void (**)(_QWORD *))(*v12 + 8))(v12);
  LOBYTE(v222[0]) = 0;
  v224[0] = 0;
  v214 = v15;
  v215 = v16;
  v216 = v17;
  rtc::NetworkManagerBase::MergeNetworkList((uint64_t)this, (uint64_t *)&v214, (BOOL *)v222, (uint64_t)v224);
  if (v15)
  {
    while (v16 != v15)
    {
      v199 = (rtc::Network *)*--v16;
      v198 = v199;
      *v16 = 0;
      if (v199)
      {
        rtc::Network::~Network(v198);
        MEMORY[0x20BD0ADEC]();
      }
    }
    v215 = v15;
    operator delete(v15);
  }
  rtc::BasicNetworkManager::QueryDefaultLocalAddress((rtc::BasicNetworkManager *)&v229, *((_QWORD *)this + 50), 2);
  rtc::BasicNetworkManager::QueryDefaultLocalAddress((rtc::BasicNetworkManager *)v225, *((_QWORD *)this + 50), 30);
  if (*(_DWORD *)v230 == 2)
  {
    *((_DWORD *)this + 52) = 2;
    *(_OWORD *)((char *)this + 212) = *(_OWORD *)&v230[4];
    v200 = v225[1];
    if (LODWORD(v225[1]) != 30)
      goto LABEL_452;
LABEL_455:
    *((_DWORD *)this + 60) = v200;
    *(_OWORD *)((char *)this + 244) = *(_OWORD *)((char *)&v225[1] + 4);
    if (!LOBYTE(v222[0]))
      goto LABEL_456;
    goto LABEL_457;
  }
  v200 = v225[1];
  if (LODWORD(v225[1]) == 30)
    goto LABEL_455;
LABEL_452:
  if (!LOBYTE(v222[0]))
  {
LABEL_456:
    if (*((_BYTE *)this + 344))
      return;
  }
LABEL_457:
  v201 = (_QWORD *)*((_QWORD *)this + 5);
  for (*((_QWORD *)this + 7) = v201; v201 != (_QWORD *)((char *)this + 32); v201 = (_QWORD *)*((_QWORD *)this + 7))
  {
    v202 = (void (*)(void))v201[2];
    *((_QWORD *)this + 7) = v201[1];
    v202();
  }
  *((_BYTE *)this + 344) = 1;
}

