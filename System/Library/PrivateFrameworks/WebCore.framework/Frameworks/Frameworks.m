void *webrtc::setVideoDecoderCallbacks(void *result, void *a2, void *a3, void *a4)
{
  _MergedGlobals_22 = result;
  off_253EA5AE8 = a2;
  off_253EA5AF0 = a3;
  off_253EA5AF8 = a4;
  return result;
}

void *webrtc::setVideoEncoderCallbacks(void *result, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  _MergedGlobals_23 = result;
  off_253EA5B08 = a2;
  off_253EA5B10 = a3;
  off_253EA5B18 = a4;
  off_253EA5B20 = a5;
  off_253EA5B28 = a6;
  return result;
}

uint64_t webrtc::registerWebKitVP8Decoder(webrtc *this)
{
  return VTRegisterVideoDecoder();
}

_BYTE *dcsctp::AbortChunk::Parse@<X0>(_BYTE *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  unsigned __int16 *v8;
  size_t v9;
  unint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unint64_t v14;
  char *v15;
  char *v16;
  char v17;

  if (a2)
    v4 = result;
  else
    v4 = 0;
  if (a2 < 4
    || *v4 != 6
    || ((v5 = __rev16(*((unsigned __int16 *)v4 + 1)), v5 >= 4) ? (v6 = a2 >= v5) : (v6 = 0),
        v6 ? (v7 = a2 - v5 >= 4) : (v7 = 1),
        v7))
  {
LABEL_14:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 40) = 0;
    return result;
  }
  if (v5 <= 4)
    v8 = 0;
  else
    v8 = (unsigned __int16 *)(v4 + 4);
  v9 = v5 - 4;
  if (v5 != 4)
  {
    v10 = v5 - 4;
    v11 = v8;
    while (v10 >= 4)
    {
      v12 = __rev16(v11[1]);
      if (v12 < 4 || v10 < v12)
        break;
      v14 = (unsigned __int16)(v12 + 3) & 0xFFFC;
      if (v10 > v14)
      {
        v11 = (unsigned __int16 *)((char *)v11 + v14);
        if (v10 - v14 < v10)
          v10 -= v14;
        if (v10)
          continue;
      }
      if ((v9 & 0x8000000000000000) != 0)
        abort();
      v15 = (char *)operator new(v9);
      v16 = &v15[v9];
      result = memcpy(v15, v8, v9);
      goto LABEL_33;
    }
    goto LABEL_14;
  }
  v15 = 0;
  v16 = 0;
LABEL_33:
  v17 = v4[1];
  *(_QWORD *)a3 = &off_24C0ACA10;
  *(_BYTE *)(a3 + 8) = (v17 & 1) == 0;
  *(_QWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 24) = v16;
  *(_QWORD *)(a3 + 32) = v16;
  *(_BYTE *)(a3 + 40) = 1;
  return result;
}

void dcsctp::AbortChunk::~AbortChunk(dcsctp::AbortChunk *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0ACA10;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0ACA10;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::AbortChunk::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  const void *v17;
  char *v18;
  uint64_t v19;

  v10 = *(_BYTE **)(a1 + 16);
  v11 = *(_BYTE **)(a1 + 24);
  v12 = *(char **)a2;
  v13 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v14 = v11 - v10 + 4;
  if (v13 >= v13 + v14)
  {
    if (v13 > v13 + v14)
      *(_QWORD *)(a2 + 8) = &v12[v13 + v14];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v11 - v10 + 4);
    v12 = *(char **)a2;
  }
  v15 = &v12[v13];
  *v15 = 6;
  v15[2] = BYTE1(v14);
  v15[3] = v14;
  if ((unint64_t)(v11 - v10) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v19);
    dcsctp::AbortChunk::ToString(v18);
  }
  else
  {
    v16 = *(_QWORD *)a2 + v13;
    *(_BYTE *)(v16 + 1) = *(_BYTE *)(a1 + 8) ^ 1;
    if (v11 == v10)
      v17 = 0;
    else
      v17 = v10;
    if (v11 != v10)
    {
      if (v17)
        memcpy((void *)(v16 + 4), v17, v11 - v10);
    }
  }
}

void dcsctp::AbortChunk::ToString(char *a1@<X8>)
{
  a1[23] = 5;
  if (a1 <= "ABORT" && a1 + 5 > "ABORT")
    __break(1u);
  else
    strcpy(a1, "ABORT");
}

void std::vector<unsigned char>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  __int128 *v28;
  char *v29;
  unint64_t v30;
  __int128 v31;
  char v32;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (v4 - v5 < a2)
  {
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = v8 + a2;
    if ((uint64_t)(v8 + a2) >= 0)
    {
      v10 = v4 - v7;
      if (2 * v10 > v9)
        v9 = 2 * v10;
      if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
        v12 = (char *)operator new(v11);
      else
        v12 = 0;
      v18 = &v12[v8];
      v19 = &v12[v8 + a2];
      v20 = v7 - &v5[(_QWORD)v12];
      if (v20 >= a2 - 1)
        v20 = a2 - 1;
      v21 = v20 + 1;
      v22 = &v12[v8];
      if (v21 >= 0x21)
      {
        v23 = v21 & 0x1F;
        if ((v21 & 0x1F) == 0)
          v23 = 32;
        v24 = v21 - v23;
        v22 = &v18[v24];
        v25 = &v12[v8 + 16];
        do
        {
          *((_OWORD *)v25 - 1) = 0uLL;
          *(_OWORD *)v25 = 0uLL;
          v25 += 32;
          v24 -= 32;
        }
        while (v24);
      }
      do
      {
        if (!v22)
          goto LABEL_44;
        *v22++ = 0;
      }
      while (v22 != v19);
      v26 = *a1;
      v27 = v5 - *a1;
      if (v5 != *a1)
      {
        if (v27 < 0x20)
          goto LABEL_48;
        if ((unint64_t)(v7 - v12) < 0x20)
          goto LABEL_48;
        v6 = &v5[-(v27 & 0xFFFFFFFFFFFFFFE0)];
        v18 -= v27 & 0xFFFFFFFFFFFFFFE0;
        v28 = (__int128 *)(v5 - 16);
        v29 = &v12[v5 - 16 - v7];
        v30 = v27 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v31 = *v28;
          *((_OWORD *)v29 - 1) = *(v28 - 1);
          *(_OWORD *)v29 = v31;
          v29 -= 32;
          v28 -= 2;
          v30 -= 32;
        }
        while (v30);
        if (v27 != (v27 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_48:
          do
          {
            v32 = *--v6;
            *--v18 = v32;
          }
          while (v6 != v26);
        }
        v6 = *a1;
      }
      *a1 = v18;
      a1[1] = v19;
      a1[2] = &v12[v11];
      if (v6)
        operator delete(v6);
      return;
    }
LABEL_45:
    abort();
  }
  if (!a2)
    goto LABEL_22;
  if (-(uint64_t)v5 < a2 - 1)
    v13 = -(uint64_t)v5;
  else
    v13 = a2 - 1;
  v14 = v13 + 1;
  if (v14 >= 0x21)
  {
    v15 = v14 & 0x1F;
    if ((v14 & 0x1F) == 0)
      v15 = 32;
    v16 = v14 - v15;
    v6 = &v5[v16];
    v17 = v5 + 16;
    do
    {
      *(v17 - 1) = 0uLL;
      *v17 = 0uLL;
      v17 += 2;
      v16 -= 32;
    }
    while (v16);
  }
  do
  {
    if (!v6)
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    *v6++ = 0;
  }
  while (v6 != &v5[a2]);
  v6 = &v5[a2];
LABEL_22:
  a1[1] = v6;
}

void webrtc::Accelerate::SetParametersForPassiveSpeech(webrtc::Accelerate *this, unint64_t a2, __int16 *a3, unint64_t *a4)
{
  *a3 = 0;
}

uint64_t webrtc::Accelerate::CheckCriteriaAndStretch(webrtc::Accelerate *this, const __int16 *a2, unint64_t a3, unint64_t a4, int a5, int a6, int a7, webrtc::AudioMultiVector *a8)
{
  unint64_t v10;
  const __int16 *v12;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void (**v25)(webrtc::AudioMultiVector *__hidden);
  _QWORD *v26;
  _QWORD *v27;

  v10 = a4;
  v12 = a2;
  if (a7)
    v14 = 0x2000;
  else
    v14 = 14746;
  if (v14 >= a5 && (a6 & 1) != 0)
  {
    if (!a3)
      a2 = 0;
    webrtc::AudioMultiVector::PushBackInterleaved(a8, (uint64_t)a2, a3);
    return 2;
  }
  v16 = 120 * *((_DWORD *)this + 3);
  if (a7)
    v10 = v16 / a4 * a4;
  v17 = *((_QWORD *)this + 2) * v16;
  if (!v17)
    a2 = 0;
  webrtc::AudioMultiVector::PushBackInterleaved(a8, (uint64_t)a2, v17);
  webrtc::AudioMultiVector::AudioMultiVector((webrtc::AudioMultiVector *)&v25, *((_QWORD *)this + 2));
  v18 = *((_QWORD *)this + 2);
  if (v18 * v10)
    v19 = (uint64_t)&v12[v18 * v16];
  else
    v19 = 0;
  webrtc::AudioMultiVector::PushBackInterleaved(&v25, v19, v18 * v10);
  (*(void (**)(webrtc::AudioMultiVector *, void (***)(webrtc::AudioMultiVector *__hidden), unint64_t))(*(_QWORD *)a8 + 104))(a8, &v25, v10);
  v20 = *((_QWORD *)this + 2) * (v10 + v16);
  if (a3 == v20)
    v21 = 0;
  else
    v21 = (uint64_t)&v12[v20];
  webrtc::AudioMultiVector::PushBackInterleaved(a8, v21, a3 - v20);
  v25 = &off_24C0AE108;
  v23 = v26;
  v22 = v27;
  if (v26 == v27)
  {
    v15 = a6 ^ 1u;
    if (!v26)
      return v15;
LABEL_21:
    v27 = v23;
    operator delete(v23);
    return v15;
  }
  do
  {
    if (*v23)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v23 + 8))(*v23);
      v22 = v27;
    }
    ++v23;
  }
  while (v23 != v22);
  v23 = v26;
  v15 = a6 ^ 1u;
  if (v26)
    goto LABEL_21;
  return v15;
}

double webrtc::AccelerateFactory::Create(webrtc::AccelerateFactory *this, int a2, uint64_t a3, const webrtc::BackgroundNoise *a4)
{
  uint64_t v7;
  double result;

  v7 = operator new();
  *(_DWORD *)(v7 + 8) = a2;
  *(_DWORD *)(v7 + 12) = a2 / 8000;
  *(_QWORD *)(v7 + 16) = a3;
  *(_QWORD *)(v7 + 24) = a4;
  *(_WORD *)(v7 + 32) = 0;
  result = 0.0;
  *(_QWORD *)v7 = &off_24C0ACA40;
  *(_OWORD *)(v7 + 254) = 0u;
  *(_OWORD *)(v7 + 270) = 0u;
  *(_OWORD *)(v7 + 286) = 0u;
  *(_OWORD *)(v7 + 302) = 0u;
  *(_OWORD *)(v7 + 318) = 0u;
  *(_OWORD *)(v7 + 334) = 0u;
  *(_QWORD *)(v7 + 348) = 0;
  return result;
}

void webrtc::Accelerate::~Accelerate(webrtc::Accelerate *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::AccelerateFactory::~AccelerateFactory(webrtc::AccelerateFactory *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::AcknowledgedBitrateEstimator::~AcknowledgedBitrateEstimator(webrtc::AcknowledgedBitrateEstimator *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C0ACA98;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24C0ACA98;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AcknowledgedBitrateEstimator::IncomingPacketFeedbackVector(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v3)
  {
    v4 = result;
    do
    {
      if (*(_BYTE *)(v4 + 16))
      {
        if (*v2 > *(_QWORD *)(v4 + 8))
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 32))(*(_QWORD *)(v4 + 32));
          if (*(_BYTE *)(v4 + 16))
            *(_BYTE *)(v4 + 16) = 0;
        }
      }
      v5 = v2[1];
      v6 = v2[2];
      v7 = v6 == 0x8000000000000000 || v5 == 0x8000000000000000;
      v8 = v6 + v5;
      if (v7)
        v8 = 0x8000000000000000;
      if (v5 == 0x7FFFFFFFFFFFFFFFLL || v6 == 0x7FFFFFFFFFFFFFFFLL)
        v10 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v10 = v8;
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v4 + 32) + 16))(*(_QWORD *)(v4 + 32), v2[9], v10, *(unsigned __int8 *)(v4 + 24));
      v2 += 10;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t webrtc::AcknowledgedBitrateEstimator::bitrate(webrtc::AcknowledgedBitrateEstimator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

uint64_t webrtc::AcknowledgedBitrateEstimator::PeekRate(webrtc::AcknowledgedBitrateEstimator *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  v2 = *(_QWORD *)(v1 + 608);
  if (v2 < 1)
    return 0;
  else
    return 8000000 * *(int *)(v1 + 8) / (1000 * v2);
}

uint64_t webrtc::AcknowledgedBitrateEstimator::SetAlrEndedTime(uint64_t this, Timestamp a2)
{
  *(Timestamp *)(this + 8) = a2;
  *(_BYTE *)(this + 16) = 1;
  return this;
}

uint64_t webrtc::AcknowledgedBitrateEstimator::SetAlr(uint64_t this, char a2)
{
  *(_BYTE *)(this + 24) = a2;
  return this;
}

_QWORD *webrtc::RobustThroughputEstimatorSettings::RobustThroughputEstimatorSettings(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int *v8;
  double *v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *result;
  unint64_t v13;
  void *p_p;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  void *__p;
  unint64_t v65;
  unsigned __int8 v66;

  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 4) = 0x1F400000014;
  v4 = (unsigned int *)(a1 + 4);
  v5 = (unsigned int *)(a1 + 8);
  *(_OWORD *)(a1 + 16) = xmmword_208F03810;
  v6 = (uint64_t *)(a1 + 16);
  v7 = (uint64_t *)(a1 + 24);
  *(_DWORD *)(a1 + 32) = 10;
  v8 = (unsigned int *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  v9 = (double *)(a1 + 40);
  v10 = operator new(0xE0uLL);
  *v10 = "enabled";
  v10[1] = a1;
  v10[2] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v10[3] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v10[4] = "window_packets";
  v10[5] = v4;
  v10[6] = webrtc::struct_parser_impl::TypedParser<unsigned int>::Parse;
  v10[7] = webrtc::struct_parser_impl::TypedParser<unsigned int>::Encode;
  v10[8] = "max_window_packets";
  v10[9] = v5;
  v10[10] = webrtc::struct_parser_impl::TypedParser<unsigned int>::Parse;
  v10[11] = webrtc::struct_parser_impl::TypedParser<unsigned int>::Encode;
  v10[12] = "window_duration";
  v10[13] = v6;
  v10[14] = webrtc::struct_parser_impl::TypedParser<webrtc::TimeDelta>::Parse;
  v10[15] = webrtc::struct_parser_impl::TypedParser<webrtc::TimeDelta>::Encode;
  v10[16] = "max_window_duration";
  v10[17] = v7;
  v63 = v7;
  v10[18] = webrtc::struct_parser_impl::TypedParser<webrtc::TimeDelta>::Parse;
  v10[19] = webrtc::struct_parser_impl::TypedParser<webrtc::TimeDelta>::Encode;
  v10[20] = "required_packets";
  v10[21] = v8;
  v10[22] = webrtc::struct_parser_impl::TypedParser<unsigned int>::Parse;
  v10[23] = webrtc::struct_parser_impl::TypedParser<unsigned int>::Encode;
  v10[24] = "unacked_weight";
  v10[25] = v9;
  v10[26] = webrtc::struct_parser_impl::TypedParser<double>::Parse;
  v10[27] = webrtc::struct_parser_impl::TypedParser<double>::Encode;
  v11 = (uint64_t *)operator new();
  *v11 = (uint64_t)v10;
  v11[1] = (uint64_t)(v10 + 28);
  v11[2] = (uint64_t)(v10 + 28);
  result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-Bwe-RobustThroughputEstimatorSettings", 44);
  if ((char)v66 < 0)
  {
    v13 = v65;
    if ((v65 & 0x8000000000000000) != 0 || (p_p = __p, v65) && !__p)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v13 = v66;
    p_p = &__p;
  }
  webrtc::StructParametersParser::Parse(v11, (uint64_t)p_p, v13);
  if ((char)v66 < 0)
    operator delete(__p);
  v15 = (void *)*v11;
  if (*v11)
  {
    v11[1] = (uint64_t)v15;
    operator delete(v15);
  }
  MEMORY[0x20BD0ADEC](v11, 0x20C40960023A9);
  v16 = *v4;
  if (*v4 - 1001 <= 0xFFFFFC20)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/acknowledged_bitrate_estimator_interface.cc");
    v16 = 20;
    *v4 = 20;
  }
  v24 = *v5;
  if (*v5 - 1001 <= 0xFFFFFC20)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v25, v26, v27, v28, v29, v30, v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/acknowledged_bitrate_estimator_interface.cc");
    v16 = *v4;
    v24 = 500;
  }
  if (v24 <= v16)
    v24 = v16;
  *v5 = v24;
  v32 = *v8;
  if (*v8 - 1001 <= 0xFFFFFC20)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v33, v34, v35, v36, v37, v38, v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/acknowledged_bitrate_estimator_interface.cc");
    v16 = *v4;
    v32 = 10;
  }
  if (v16 >= v32)
    v16 = v32;
  *v8 = v16;
  v40 = *v6;
  if ((unint64_t)(*v6 - 3000001) <= 0xFFFFFFFFFFD3BFDELL)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v41, v42, v43, v44, v45, v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/acknowledged_bitrate_estimator_interface.cc");
    v40 = 750000;
    *v6 = 750000;
  }
  v48 = *v63;
  if ((unint64_t)(*v63 - 15000001) <= 0xFFFFFFFFFF2A607ELL)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v49, v50, v51, v52, v53, v54, v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/acknowledged_bitrate_estimator_interface.cc");
    v48 = 5000000;
    *v63 = 5000000;
    v40 = *v6;
  }
  if (v48 < v40)
    v40 = v48;
  *v6 = v40;
  if (*v9 < 0.0 || *v9 > 1.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v56, v57, v58, v59, v60, v61, v62, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/acknowledged_bitrate_estimator_interface.cc");
    *v9 = 1.0;
  }
  return (_QWORD *)a1;
}

uint64_t rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>()
{
    return 0;
  else
    return rtc::LogMessage::streams_empty_ & 1;
}

uint64_t webrtc::acm2::AcmReceiver::AcmReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  pthread_mutexattr_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  pthread_mutexattr_init(&v9);
  pthread_mutexattr_setpolicy_np(&v9, 3);
  pthread_mutex_init((pthread_mutex_t *)a1, &v9);
  pthread_mutexattr_destroy(&v9);
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = &unk_24C0BAE48;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = operator new[]();
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 56);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2, a2 + 64, v5);
  }
  else
  {
    v8 = &unk_24C0B2F50;
    webrtc::NetEqImpl::Dependencies::Dependencies(&v9, a2, v5, (void (****)(_QWORD))(a2 + 64), (uint64_t)&v8);
    v6 = operator new();
    *(_QWORD *)(a1 + 264) = webrtc::NetEqImpl::NetEqImpl(v6, (unsigned int *)a2, &v9, 1);
    webrtc::NetEqImpl::Dependencies::~Dependencies((webrtc::NetEqImpl::Dependencies *)&v9);
  }
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 280) = 1;
  bzero(*(void **)(a1 + 224), 0x3C00uLL);
  return a1;
}

void webrtc::acm2::AcmReceiver::~AcmReceiver(webrtc::acm2::AcmReceiver *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
    MEMORY[0x20BD0ADD4](v3, 0x1000C80BDFB0063);
  webrtc::PushResampler<short>::~PushResampler((_QWORD *)this + 19);
  if (*((_BYTE *)this + 144)
    && (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 120, *((_QWORD *)this + 16)), *((char *)this + 103) < 0))
  {
    operator delete(*((void **)this + 10));
    pthread_mutex_destroy((pthread_mutex_t *)this);
  }
  else
  {
    pthread_mutex_destroy((pthread_mutex_t *)this);
  }
}

uint64_t rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>()
{
    return 0;
  else
    return rtc::LogMessage::streams_empty_ & 1;
}

uint64_t webrtc::acm2::AcmReceiver::InsertPacket(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  int v8;
  uint64_t result;
  uint64_t v10;
  __int128 *p_p;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[32];
  _BYTE v46[24];
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 __p;
  uint64_t v52;
  __int128 v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned __int8 v57;

  if (!a4)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 264) + 24))(*(_QWORD *)(a1 + 264), a2);
    return 0;
  }
  v8 = *(unsigned __int8 *)(a2 + 1);
  result = (uint64_t)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 264) + 168))(&v50, *(_QWORD *)(a1 + 264), *(unsigned __int8 *)(a2 + 1));
  if (!v57)
    goto LABEL_44;
  if (SHIBYTE(v52) < 0)
  {
    v10 = *((_QWORD *)&__p + 1);
    if ((*((_QWORD *)&__p + 1) & 0x8000000000000000) != 0)
      goto LABEL_87;
    p_p = (__int128 *)__p;
    if (*((_QWORD *)&__p + 1))
    {
      if (!(_QWORD)__p)
        goto LABEL_87;
    }
  }
  else
  {
    v10 = HIBYTE(v52);
    p_p = &__p;
  }
  if (v10 == 3)
  {
    v13 = *(unsigned __int8 *)p_p;
    if (v13 == 114)
      goto LABEL_14;
    if ((v13 - 65) < 0x1A)
      LOBYTE(v13) = v13 + 32;
    if (v13 == 114)
    {
LABEL_14:
      v14 = *((unsigned __int8 *)p_p + 1);
      if (v14 == 101)
        goto LABEL_21;
      if ((v14 - 65) < 0x1A)
        LOBYTE(v14) = v14 + 32;
      if (v14 == 101)
      {
LABEL_21:
        v15 = *((unsigned __int8 *)p_p + 2);
        if (v15 == 100)
          goto LABEL_22;
        if ((v15 - 65) < 0x1A)
          LOBYTE(v15) = v15 + 32;
        if (v15 == 100)
        {
LABEL_22:
          v8 = *a3 & 0x7F;
          (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 264) + 168))(v45, *(_QWORD *)(a1 + 264), *a3 & 0x7F);
          if (v57 == v49)
          {
            if (!v57)
              goto LABEL_40;
            v50 = *(_QWORD *)v45;
            if (SHIBYTE(v52) < 0)
              operator delete((void *)__p);
            __p = *(_OWORD *)&v45[8];
            v52 = *(_QWORD *)&v45[24];
            v45[31] = 0;
            v45[8] = 0;
            v53 = *(_OWORD *)v46;
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v54, (uint64_t)v55);
            v54 = *(uint64_t **)&v46[16];
            v55 = v47;
            v56 = v48;
            if (v48)
            {
              v47[2] = (uint64_t)&v55;
              *(_QWORD *)&v46[16] = &v47;
              v47 = 0;
              v48 = 0;
            }
            else
            {
              v54 = (uint64_t *)&v55;
            }
          }
          else if (v57)
          {
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v54, (uint64_t)v55);
            if (SHIBYTE(v52) < 0)
              operator delete((void *)__p);
            v57 = 0;
          }
          else
          {
            v50 = *(_QWORD *)v45;
            __p = *(_OWORD *)&v45[8];
            v52 = *(_QWORD *)&v45[24];
            memset(&v45[8], 0, 24);
            v53 = *(_OWORD *)v46;
            v54 = *(uint64_t **)&v46[16];
            v55 = v47;
            v56 = v48;
            if (v48)
            {
              v47[2] = (uint64_t)&v55;
              *(_QWORD *)&v46[16] = &v47;
              v47 = 0;
              v48 = 0;
            }
            else
            {
              v54 = (uint64_t *)&v55;
            }
            v57 = 1;
          }
          if ((_BYTE)v49)
          {
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v46[16], (uint64_t)v47);
            if ((v45[31] & 0x80000000) != 0)
              operator delete(*(void **)&v45[8]);
          }
LABEL_40:
          if (v57)
            goto LABEL_41;
LABEL_44:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/acm2/acm_receiver.cc");
LABEL_83:
          v12 = 0xFFFFFFFFLL;
          if (v57)
            goto LABEL_84;
          return v12;
        }
      }
    }
  }
LABEL_41:
  result = pthread_mutex_lock((pthread_mutex_t *)a1);
  if (v57)
  {
    if ((SHIBYTE(v52) & 0x80000000) == 0)
    {
      v16 = HIBYTE(v52);
      v17 = &__p;
      goto LABEL_49;
    }
    v16 = *((_QWORD *)&__p + 1);
    if ((*((_QWORD *)&__p + 1) & 0x8000000000000000) == 0)
    {
      v17 = (__int128 *)__p;
      if (!*((_QWORD *)&__p + 1) || (_QWORD)__p)
      {
LABEL_49:
        if (v16 == 2)
        {
          v25 = *(unsigned __int8 *)v17;
          if (v25 == 99)
            goto LABEL_54;
          if ((v25 - 65) < 0x1A)
            LOBYTE(v25) = v25 + 32;
          if (v25 == 99)
          {
LABEL_54:
            v26 = *((unsigned __int8 *)v17 + 1);
            if (v26 == 110)
              goto LABEL_59;
            if ((v26 - 65) < 0x1A)
              LOBYTE(v26) = v26 + 32;
            if (v26 == 110)
            {
LABEL_59:
              if (*(_BYTE *)(a1 + 144) && *(int *)(a1 + 72) > 1)
              {
                pthread_mutex_unlock((pthread_mutex_t *)a1);
                v12 = 0;
                if (!v57)
                  return v12;
LABEL_84:
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v54, (uint64_t)v55);
                if (SHIBYTE(v52) < 0)
                  operator delete((void *)__p);
                return v12;
              }
              goto LABEL_78;
            }
          }
        }
        *(_DWORD *)v45 = v8;
        *(_QWORD *)&v45[4] = v50;
        *(_OWORD *)&v45[16] = __p;
        *(_QWORD *)v46 = v52;
        __p = 0uLL;
        v52 = 0;
        *(_OWORD *)&v46[8] = v53;
        v47 = v54;
        v48 = (uint64_t)v55;
        v49 = v56;
        if (v56)
        {
          v55[2] = (uint64_t)&v48;
          v54 = (uint64_t *)&v55;
          v55 = 0;
          v56 = 0;
        }
        else
        {
          v47 = &v48;
        }
        v27 = *(unsigned __int8 *)(a1 + 144);
        *(_QWORD *)(a1 + 64) = *(_QWORD *)v45;
        *(_DWORD *)(a1 + 72) = *(_DWORD *)&v45[8];
        v28 = (void **)(a1 + 80);
        if (!v27)
        {
          *(_OWORD *)v28 = *(_OWORD *)&v45[16];
          *(_QWORD *)(a1 + 96) = *(_QWORD *)v46;
          *(_QWORD *)&v45[24] = 0;
          *(_QWORD *)v46 = 0;
          *(_QWORD *)&v45[16] = 0;
          v33 = *(_OWORD *)&v46[8];
          v35 = (uint64_t)v47;
          v34 = v48;
          *(_QWORD *)(a1 + 128) = v48;
          v36 = a1 + 128;
          *(_OWORD *)(a1 + 104) = v33;
          *(_QWORD *)(a1 + 120) = v35;
          v37 = v49;
          *(_QWORD *)(a1 + 136) = v49;
          if (v37)
          {
            *(_QWORD *)(v34 + 16) = v36;
            v34 = 0;
            v47 = &v48;
            v48 = 0;
            v49 = 0;
          }
          else
          {
            *(_QWORD *)(a1 + 120) = v36;
          }
          *(_BYTE *)(a1 + 144) = 1;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v47, v34);
          if ((v46[7] & 0x80000000) == 0)
            goto LABEL_78;
          goto LABEL_77;
        }
        if (*(char *)(a1 + 103) < 0)
          operator delete(*v28);
        *(_OWORD *)v28 = *(_OWORD *)&v45[16];
        *(_QWORD *)(a1 + 96) = *(_QWORD *)v46;
        v46[7] = 0;
        v45[16] = 0;
        v30 = a1 + 128;
        v29 = *(_QWORD *)(a1 + 128);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)&v46[8];
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 120, v29);
        v31 = v48;
        *(_QWORD *)(a1 + 120) = v47;
        *(_QWORD *)(a1 + 128) = v31;
        v32 = v49;
        *(_QWORD *)(a1 + 136) = v49;
        if (v32)
        {
          *(_QWORD *)(v31 + 16) = v30;
          v47 = &v48;
          v48 = 0;
          v49 = 0;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v47, 0);
          if ((v46[7] & 0x80000000) != 0)
LABEL_77:
            operator delete(*(void **)&v45[16]);
        }
        else
        {
          *(_QWORD *)(a1 + 120) = v30;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v47, v31);
          if ((v46[7] & 0x80000000) != 0)
            goto LABEL_77;
        }
LABEL_78:
        pthread_mutex_unlock((pthread_mutex_t *)a1);
        if (((*(uint64_t (**)(_QWORD, uint64_t, _BYTE *, uint64_t))(**(_QWORD **)(a1 + 264) + 16))(*(_QWORD *)(a1 + 264), a2, a3, a4) & 0x80000000) == 0)
        {
          v12 = 0;
          if (!v57)
            return v12;
          goto LABEL_84;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/acm2/acm_receiver.cc");
        goto LABEL_83;
      }
    }
  }
LABEL_87:
  __break(1u);
  return result;
}

uint64_t webrtc::acm2::AcmReceiver::GetAudio(webrtc::acm2::AcmReceiver *this, uint64_t a2, webrtc::AudioFrame *a3, BOOL *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  unsigned __int8 v21;
  __int16 *v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  void *v26;
  unsigned __int8 v27;
  const void *v28;
  int v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  int v49;
  __int16 __dst[7680];
  uint64_t v51;

  v4 = MEMORY[0x24BDAC7A8](this, a2);
  v6 = v5;
  v8 = v7;
  v9 = v4;
  v51 = *MEMORY[0x24BDAC8D0];
  v49 = 0;
  if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t, int *, _QWORD))(**(_QWORD **)(v4 + 264) + 32))(*(_QWORD *)(v4 + 264), v5, v10, &v49, 0))
  {
    v19 = v49;
    pthread_mutex_lock((pthread_mutex_t *)v9);
    v20 = 0;
    if (v8 == -1 || v19 == v8)
      goto LABEL_16;
    if (!*(_BYTE *)(v9 + 280)
      && (webrtc::acm2::ACMResampler::Resample10Msec((webrtc::acm2::ACMResampler *)(v9 + 152), *(__int16 **)(v9 + 224), v49, v8, *(_QWORD *)(v6 + 40), 0x1E00uLL, __dst) & 0x80000000) != 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/acm2/acm_receiver.cc");
    }
    else
    {
      if (*(_BYTE *)(v6 + 15432))
      {
        if ((v21 & 1) == 0
        {
          v48 = (void *)operator new[]();
          bzero(v48, 0x3C00uLL);
          webrtc::AudioFrame::zeroed_data(void)::null_data = (uint64_t)v48;
        }
        v22 = (__int16 *)webrtc::AudioFrame::zeroed_data(void)::null_data;
        v23 = v49;
        v24 = *(_QWORD *)(v6 + 40);
        if (*(_BYTE *)(v6 + 15432))
          bzero((void *)(v6 + 72), 0x3C01uLL);
      }
      else
      {
        v22 = (__int16 *)(v6 + 72);
        v23 = v49;
        v24 = *(_QWORD *)(v6 + 40);
      }
      v25 = webrtc::acm2::ACMResampler::Resample10Msec((webrtc::acm2::ACMResampler *)(v9 + 152), v22, v23, v8, v24, 0x1E00uLL, (__int16 *)(v6 + 72));
      if ((v25 & 0x80000000) == 0)
      {
        *(_QWORD *)(v6 + 24) = v25;
        *(_DWORD *)(v6 + 32) = v8;
        v20 = 1;
LABEL_16:
        *(_BYTE *)(v9 + 280) = v20;
        v26 = *(void **)(v9 + 224);
        if (*(_BYTE *)(v6 + 15432))
        {
          if ((v27 & 1) == 0
          {
            v47 = (void *)operator new[]();
            bzero(v47, 0x3C00uLL);
            webrtc::AudioFrame::zeroed_data(void)::null_data = (uint64_t)v47;
          }
          v28 = (const void *)webrtc::AudioFrame::zeroed_data(void)::null_data;
        }
        else
        {
          v28 = (const void *)(v6 + 72);
        }
        memcpy(v26, v28, 2 * *(_QWORD *)(v6 + 24) * *(_QWORD *)(v6 + 40));
        v29 = *(_DWORD *)(v6 + 48);
        v30 = *(unsigned __int8 *)(v6 + 15432);
        ++*(_DWORD *)(v9 + 236);
        if (v30)
          ++*(_DWORD *)(v9 + 260);
        v18 = 0;
        switch(v29)
        {
          case 0:
            v31 = (_DWORD *)(v9 + 240);
            goto LABEL_30;
          case 1:
            v31 = (_DWORD *)(v9 + 244);
            goto LABEL_30;
          case 2:
            v31 = (_DWORD *)(v9 + 252);
            goto LABEL_30;
          case 3:
            v31 = (_DWORD *)(v9 + 256);
            goto LABEL_30;
          case 5:
            v31 = (_DWORD *)(v9 + 248);
LABEL_30:
            v18 = 0;
            ++*v31;
            break;
          default:
            goto LABEL_31;
        }
        goto LABEL_31;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        rtc::webrtc_logging_impl::Log("\r\t", v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/acm2/acm_receiver.cc");
        v18 = 0xFFFFFFFFLL;
LABEL_31:
        pthread_mutex_unlock((pthread_mutex_t *)v9);
        return v18;
      }
    }
    v18 = 0xFFFFFFFFLL;
    goto LABEL_31;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/acm2/acm_receiver.cc");
  return 0xFFFFFFFFLL;
}

uint64_t webrtc::acm2::AcmReceiver::LastDecoder@<X0>(webrtc::acm2::AcmReceiver *this@<X0>, uint64_t a2@<X8>)
{
  webrtc::acm2::AcmReceiver *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  webrtc::acm2::AcmReceiver *v8;
  webrtc::acm2::AcmReceiver *v9;
  BOOL v10;
  uint64_t v11;
  int v13;
  std::string __p;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  pthread_mutex_lock((pthread_mutex_t *)this);
  if (*((_BYTE *)this + 144))
  {
    v13 = *((_DWORD *)this + 16);
    if (*((char *)this + 103) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    else
      __p = *(std::string *)((char *)this + 80);
    v15 = *(_OWORD *)((char *)this + 104);
    v17 = 0;
    v18 = 0;
    v16 = &v17;
    v4 = (webrtc::acm2::AcmReceiver *)*((_QWORD *)this + 15);
    if (v4 == (webrtc::acm2::AcmReceiver *)((char *)this + 128))
    {
      v5 = 0;
      v6 = 0;
      v7 = &v17;
    }
    else
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v16, &v17, (uint64_t)v4 + 32, (uint64_t)v4 + 32);
        v8 = (webrtc::acm2::AcmReceiver *)*((_QWORD *)v4 + 1);
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = *(webrtc::acm2::AcmReceiver **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (webrtc::acm2::AcmReceiver *)*((_QWORD *)v4 + 2);
            v10 = *(_QWORD *)v9 == (_QWORD)v4;
            v4 = v9;
          }
          while (!v10);
        }
        v4 = v9;
      }
      while (v9 != (webrtc::acm2::AcmReceiver *)((char *)this + 128));
      v7 = v16;
      v5 = v17;
      v6 = v18;
    }
    *(_DWORD *)a2 = v13;
    *(std::string *)(a2 + 8) = __p;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(a2 + 32) = v15;
    *(_QWORD *)(a2 + 48) = v7;
    *(_QWORD *)(a2 + 56) = v5;
    v11 = a2 + 56;
    *(_QWORD *)(a2 + 64) = v6;
    if (!v6)
    {
      *(_QWORD *)(a2 + 48) = v11;
      *(_BYTE *)(a2 + 72) = 1;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, v5);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return pthread_mutex_unlock((pthread_mutex_t *)this);
      goto LABEL_18;
    }
    *(_QWORD *)(v5 + 16) = v11;
    v16 = &v17;
    v17 = 0;
    v18 = 0;
    *(_BYTE *)(a2 + 72) = 1;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_18:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 72) = 0;
  }
  return pthread_mutex_unlock((pthread_mutex_t *)this);
}

_QWORD *webrtc::acm2::AcmReceiver::GetNetworkStatistics(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD *result;
  _QWORD v16[7];
  _OWORD v17[2];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  __int16 v31;
  int v32;
  int v33;

  v5 = **(_QWORD **)(a1 + 264);
  if (a3)
  {
    (*(void (**)(void))(v5 + 120))();
    v6 = v29;
    v7 = v30;
    v8 = v31;
    v9 = v32;
    v10 = v33;
  }
  else
  {
    (*(void (**)(int *__return_ptr))(v5 + 128))(&v27);
    v7 = 0;
    v8 = 0;
    v6 = 0;
    v10 = 1;
    v9 = -1;
  }
  *(_QWORD *)(a2 + 112) = v6;
  *(_WORD *)(a2 + 120) = v7;
  *(_WORD *)(a2 + 122) = v8;
  *(_DWORD *)(a2 + 124) = v9;
  *(_DWORD *)(a2 + 128) = v10;
  *(_DWORD *)a2 = v27;
  *(_BYTE *)(a2 + 4) = v28 != 0;
  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)(a1 + 264) + 136))(v17);
  *(_QWORD *)(a2 + 24) = v21;
  *(_QWORD *)(a2 + 64) = v18;
  v11 = v23;
  v12 = v25;
  *(_QWORD *)(a2 + 144) = v24;
  *(_QWORD *)(a2 + 152) = v12;
  v13 = v17[1];
  *(_OWORD *)(a2 + 8) = v17[0];
  v14 = v19;
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 160) = v26;
  *(_OWORD *)(a2 + 72) = v20;
  *(_OWORD *)(a2 + 88) = v22;
  *(_QWORD *)(a2 + 104) = v11;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 264) + 144))(v16);
  *(_QWORD *)(a2 + 136) = v16[2];
  return result;
}

void webrtc::ReMixFrame(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  _OWORD *v52;
  unint64_t v53;
  __int128 v54;
  _OWORD *v55;
  unint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  unint64_t v59;
  __int16 v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _WORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v77;
  unint64_t v78;
  const __int16 *v79;
  int16x8_t *v80;
  unint64_t v81;
  const __int16 *v82;
  unint64_t i;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  __int128 *v98;
  _OWORD *v99;
  unint64_t v100;
  __int128 v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  __int16 *v107;
  _WORD *v108;
  uint64_t v109;
  int16x8x2_t v110;
  int16x8x2_t v111;

  v6 = *(_QWORD *)(a1 + 24) * a2;
  v7 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1;
  if (v6 != v7)
  {
    if (v6 <= v7)
    {
      if (v6 < v7)
        *(_QWORD *)(a3 + 8) = *(_QWORD *)a3 + 2 * v6;
    }
    else
    {
      std::vector<short>::__append(a3, v6 - v7);
    }
  }
  if (!*(_BYTE *)(a1 + 15432))
  {
    v12 = *(_QWORD *)(a1 + 40);
    if (!v12)
      return;
    v13 = a1 + 72;
    if (a2 >= 2 && v12 == 1)
    {
      v14 = *(_QWORD *)(a1 + 24);
      if (!v14)
        return;
      v15 = *(_QWORD *)a3;
      v16 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1;
      if (a2 <= 2)
      {
        for (i = 0; v16 > i; i += 2)
        {
          *(_WORD *)(v15 + 2 * i) = *(_WORD *)(v13 + i);
          if (v16 <= i + 1)
            break;
          *(_WORD *)(v15 + 2 * i + 2) = *(_WORD *)(v13 + i);
          if (!--v14)
            return;
        }
      }
      else
      {
        v17 = 0;
        v18 = 0;
        v19 = v16 - 2;
LABEL_18:
        if (v16 > v18)
        {
          *(_WORD *)(v15 + 2 * v18) = *(_WORD *)(v13 + 2 * v17);
          if (v16 > v18 + 1)
          {
            *(_WORD *)(v15 + 2 * (v18 + 1)) = *(_WORD *)(v13 + 2 * v17);
            v20 = v18 + 2;
            v21 = v19 - v18;
            if (v19 - v18 >= a2 - 3)
              v21 = a2 - 3;
            v22 = v21 + 1;
            if (v22 >= 0x11)
            {
              v24 = v22 & 0xF;
              if ((v22 & 0xF) == 0)
                v24 = 16;
              v25 = v22 - v24;
              v23 = v25 + 2;
              v20 += v25;
              v26 = (_OWORD *)(v15 + 20 + 2 * v18);
              do
              {
                *(v26 - 1) = 0uLL;
                *v26 = 0uLL;
                v26 += 2;
                v25 -= 16;
              }
              while (v25);
            }
            else
            {
              v23 = 2;
            }
            v27 = a2 - v23;
            v28 = v16 - v23 - v18;
            while (v28)
            {
              v18 = v20 + 1;
              *(_WORD *)(v15 + 2 * v20) = 0;
              --v28;
              ++v20;
              if (!--v27)
              {
                if (++v17 != v14)
                  goto LABEL_18;
                return;
              }
            }
          }
        }
      }
    }
    else
    {
      v29 = v12 - a2;
      if (v12 >= a2)
      {
        if (v12 == 2)
        {
          v70 = *(_QWORD *)(a1 + 24);
          if (!v70)
            return;
          v71 = *(_QWORD *)a3;
          v72 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1;
          v73 = v70 - 1;
          if (v72 >= v70 - 1)
            v74 = v70 - 1;
          else
            v74 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1;
          v75 = v74 + 1;
          if (v75 < 0x11)
            goto LABEL_116;
          if (v72 < v73)
            v73 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1;
          if (v71 >= a1 + 4 * v73 + 76 || v13 >= v71 + 2 * v73 + 2)
          {
            v77 = v75 & 0xF;
            if ((v75 & 0xF) == 0)
              v77 = 16;
            v78 = v75 - v77;
            v79 = (const __int16 *)(a1 + 104);
            v80 = (int16x8_t *)(v71 + 16);
            v81 = v78;
            do
            {
              v82 = v79 - 16;
              v110 = vld2q_s16(v82);
              v111 = vld2q_s16(v79);
              v80[-1] = vhaddq_s16(v110.val[1], v110.val[0]);
              *v80 = vhaddq_s16(v111.val[1], v111.val[0]);
              v79 += 32;
              v80 += 2;
              v81 -= 16;
            }
            while (v81);
          }
          else
          {
LABEL_116:
            v78 = 0;
          }
          v106 = v72 - v78;
          v107 = (__int16 *)(a1 + 4 * v78 + 74);
          v108 = (_WORD *)(v71 + 2 * v78);
          v109 = v70 - v78;
          while (v106)
          {
            *v108++ = (*v107 + *(v107 - 1)) >> 1;
            --v106;
            v107 += 2;
            if (!--v109)
              return;
          }
        }
        else
        {
          if (!a2)
            return;
          v84 = *(_QWORD *)(a1 + 24);
          if (!v84)
            return;
          v85 = 0;
          v86 = 0;
          v87 = 0;
          v88 = *(_QWORD *)a3;
          v89 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1;
          v90 = a1 + 72;
          v91 = *(_QWORD *)a3 + 16;
LABEL_98:
          v92 = v89 - v87;
          if (v89 < v87)
            v92 = 0;
          if (v92 >= a2 - 1)
            v92 = a2 - 1;
          v93 = v92 + 1;
          if (v93 >= 0x11 && (v94 = 2 * v86, 2 * v87 + v88 - (v90 + 2 * v86) >= 0x20))
          {
            v97 = v93 & 0xF;
            if ((v93 & 0xF) == 0)
              v97 = 16;
            v95 = v93 - v97;
            v86 += v95;
            v96 = v87 + v95;
            v98 = (__int128 *)(a1 + 88 + v94);
            v99 = (_OWORD *)(v91 + 2 * v87);
            v100 = v95;
            do
            {
              v101 = *v98;
              *(v99 - 1) = *(v98 - 1);
              *v99 = v101;
              v98 += 2;
              v99 += 2;
              v100 -= 16;
            }
            while (v100);
          }
          else
          {
            v95 = 0;
            v96 = v87;
          }
          v102 = 0;
          v103 = a2 - v95;
          v104 = v89 - v95;
          if (v87 >= v89)
            v87 = v89;
          v105 = v104 - v87;
          while (v105 != v102)
          {
            *(_WORD *)(v88 + 2 * v96 + 2 * v102) = *(_WORD *)(v90 + 2 * v86 + 2 * v102);
            if (v103 == ++v102)
            {
              v86 += v29 + v102;
              ++v85;
              v87 = v96 + v102;
              if (v85 != v84)
                goto LABEL_98;
              return;
            }
          }
        }
      }
      else
      {
        v30 = *(_QWORD *)(a1 + 24);
        if (!v30)
          return;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = a2 - v12;
        v35 = *(_QWORD *)a3;
        v36 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1;
        v37 = v12 - 1;
        v38 = ~v12 + a2;
        v39 = a1 + 72;
        v40 = a1 + 88;
        v41 = *(_QWORD *)a3 + 16;
        v42 = *(_QWORD *)a3 + 18;
        v43 = v12 - 1 - a2;
LABEL_36:
        if (v36 >= v33)
          v44 = v36 - v33;
        else
          v44 = 0;
        if (v44 >= v37)
          v45 = v12 - 1;
        else
          v45 = v44;
        v46 = v45 + 1;
        if (v46 > 0x10 && (v47 = 2 * v32, 2 * v33 + v35 - (v39 + 2 * v32) >= 0x20))
        {
          v50 = v46 & 0xF;
          if ((v46 & 0xF) == 0)
            v50 = 16;
          v48 = v46 - v50;
          v32 += v48;
          v49 = v33 + v48;
          v51 = (__int128 *)(v40 + v47);
          v52 = (_OWORD *)(v41 + 2 * v33);
          v53 = v48;
          do
          {
            v54 = *v51;
            *(v52 - 1) = *(v51 - 1);
            *v52 = v54;
            v51 += 2;
            v52 += 2;
            v53 -= 16;
          }
          while (v53);
        }
        else
        {
          v48 = 0;
          v49 = v33;
        }
        v55 = (_OWORD *)(v42 + 2 * v49);
        v56 = v49 + 1;
        while (v48 != v44)
        {
          v57 = v49;
          v58 = v55;
          v59 = v56;
          ++v49;
          v60 = *(_WORD *)(v13 + 2 * v32++);
          *(_WORD *)(v35 + 2 * v57) = v60;
          ++v48;
          v55 = (_OWORD *)((char *)v58 + 2);
          ++v56;
          if (v48 == v12)
          {
            if (v44 >= v37)
              v44 = v12 - 1;
            if (v36 <= v33 + v44 + 1)
              v61 = v33 + v44 + 1;
            else
              v61 = v36;
            v62 = v61 + ~v33 - v44;
            if (v62 >= v38)
              v62 = v38;
            v63 = v62 + 1;
            v64 = v49;
            if (v62 + 1 > 0x10)
            {
              if ((v63 & 0xF) != 0)
                v65 = v63 & 0xF;
              else
                v65 = 16;
              v64 = v49 + v63 - v65;
              v66 = ~v62 + v65;
              do
              {
                *(v58 - 1) = 0uLL;
                *v58 = 0uLL;
                v58 += 2;
                v66 += 16;
              }
              while (v66);
            }
            v33 = v49 + v34;
            v67 = v43 + v64;
            v68 = (_WORD *)(v35 + 2 * v64);
            if (v36 > v59)
              v59 = v36;
            v69 = v59 - v64;
            while (v69)
            {
              *v68++ = 0;
              ++v67;
              --v69;
              if (v57 == v67)
              {
                if (++v31 != v30)
                  goto LABEL_36;
                return;
              }
            }
            break;
          }
        }
      }
    }
    __break(1u);
    return;
  }
  v8 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  v9 = v8 == 1;
  if (v8 >= 1)
  {
    v10 = (unint64_t)v8 >> 1;
    v11 = !v9;
    bzero(*(void **)a3, 2 * (v10 - v11) + 2);
  }
}

void std::vector<short>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  __int128 v25;
  __int16 v26;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 > (v4 - (uint64_t)v5) >> 1)
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 1;
    v10 = (v8 >> 1) + a2;
    if (v10 >= 0)
    {
      v11 = v4 - (_QWORD)v7;
      if (v11 > v10)
        v10 = v11;
      if (v11 >= 0x7FFFFFFFFFFFFFFELL)
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 < 0)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v13 = (char *)operator new(2 * v12);
      }
      else
      {
        v13 = 0;
      }
      v15 = &v13[2 * v9];
      v16 = 2 * a2;
      v17 = &v15[2 * a2];
      v18 = v15;
      do
      {
        if (!v18)
          goto LABEL_31;
        *(_WORD *)v18 = 0;
        v18 += 2;
        v16 -= 2;
      }
      while (v16);
      if (v5 != v7)
      {
        v19 = v5 - v7 - 2;
        if (v19 < 0x1E)
          goto LABEL_36;
        if ((unint64_t)(v5 - &v13[v8]) < 0x20)
          goto LABEL_36;
        v20 = (v19 >> 1) + 1;
        v21 = 2 * (v20 & 0xFFFFFFFFFFFFFFF0);
        v6 = &v5[-v21];
        v15 -= v21;
        v22 = &v13[2 * v9 - 16];
        v23 = v5 - 16;
        v24 = v20 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v25 = *(_OWORD *)v23;
          *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v22 = v25;
          v22 -= 32;
          v23 -= 32;
          v24 -= 16;
        }
        while (v24);
        if (v20 != (v20 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_36:
          do
          {
            v26 = *((_WORD *)v6 - 1);
            v6 -= 2;
            *((_WORD *)v15 - 1) = v26;
            v15 -= 2;
          }
          while (v6 != v7);
        }
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v17;
      *(_QWORD *)(a1 + 16) = &v13[2 * v12];
      if (v7)
        operator delete(v7);
      return;
    }
LABEL_32:
    abort();
  }
  if (!a2)
    goto LABEL_16;
  v14 = 2 * a2;
  do
  {
    if (!v6)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    *(_WORD *)v6 = 0;
    v6 += 2;
    v14 -= 2;
  }
  while (v14);
  v6 = &v5[2 * a2];
LABEL_16:
  *(_QWORD *)(a1 + 8) = v6;
}

void std::__throw_bad_array_new_length[abi:sn180100]()
{
  abort();
}

unint64_t webrtc::acm2::ACMResampler::Resample10Msec(webrtc::acm2::ACMResampler *this, __int16 *__src, int a3, int a4, unint64_t a5, unint64_t a6, __int16 *__dst)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  char *v26;
  char *v27;
  int v28;

  v11 = a3 * a5;
  v12 = v11 / 0x64;
  if (a3 == a4)
  {
    if (v12 <= a6)
    {
      memcpy(__dst, __src, 2 * v12);
      return v12 / a5;
    }
    return 0xFFFFFFFFLL;
  }
  if (webrtc::PushResampler<short>::InitializeIfNeeded((uint64_t)this, a3, a4, a5))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0xFFFFFFFFLL;
    v25 = (unsigned __int8 *)&rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
LABEL_7:
    rtc::webrtc_logging_impl::Log(v25, v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/acm2/acm_resampler.cc");
    return 0xFFFFFFFFLL;
  }
  if (v11 >= 0x64)
    v26 = (char *)__src;
  else
    v26 = 0;
  if (a6)
    v27 = (char *)__dst;
  else
    v27 = 0;
  v28 = webrtc::PushResampler<short>::Resample((unint64_t)this, v26, v11 / 0x64, v27, a6, v15, v16, v17);
  if (v28 == -1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0xFFFFFFFFLL;
    v25 = (unsigned __int8 *)&rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
    goto LABEL_7;
  }
  return v28 / a5;
}

void webrtc::ActiveDecodeTargetsHelper::OnFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!(_DWORD)a8)
  {
    v12 = *(_DWORD *)(a1 + 8) == a4 || a4 == 0xFFFFFFFFLL;
    if (!v12 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/active_decode_targets_helper.cc");
    *(_QWORD *)(a1 + 8) = a4;
    return;
  }
  v10 = 0xFFFFFFFF >> -(char)a3;
  if (a5)
  {
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = 0xFFFFFFFF >> -(char)a8;
    v11 = v10 & a4;
    *(_QWORD *)a1 = (unint64_t)*(unsigned int *)(a1 + 4) << 32;
    *(_QWORD *)(a1 + 24) = a6;
    if (v11 == 0xFFFFFFFF >> -(char)a3)
      return;
    goto LABEL_18;
  }
  v20 = 0;
  v21 = 0;
  do
  {
    if (*(_DWORD *)(a7 + 4 * v20) == (_DWORD)a6 - *(_DWORD *)(a1 + 24))
    {
      if (v20 >= 0x20)
LABEL_34:
        abort();
      v21 |= 1 << v20;
    }
    ++v20;
  }
  while (a8 != v20);
  v22 = *(unsigned int *)(a1 + 8);
  v11 = v10 & a4;
  *(_QWORD *)a1 &= ~(_DWORD)v21;
  *(_QWORD *)(a1 + 24) = a6;
  if (v11 != v22)
  {
LABEL_18:
    *(_QWORD *)(a1 + 8) = v11;
    if (v11)
    {
      if (a3)
        v23 = a2;
      else
        v23 = 0;
      if (a3)
      {
        v24 = 0;
        v25 = 0;
        do
        {
          if (v24 > 0x1F || ((v11 >> v24) & 1) != 0)
          {
            v26 = *(_DWORD *)(v23 + 4 * v24);
            if (v26 >= 0x20)
              goto LABEL_34;
            v25 |= 1 << v26;
          }
          ++v24;
        }
        while (a3 != v24);
      }
      else
      {
        v25 = 0;
      }
      *(_QWORD *)(a1 + 16) = v25;
      *(_QWORD *)a1 = v25;
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/active_decode_targets_helper.cc");
    }
  }
}

_QWORD *webrtc::Notifier<webrtc::VideoTrackSourceInterface>::RegisterObserver(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[3];
  a1 += 3;
  result[1] = a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void webrtc::Notifier<webrtc::VideoTrackSourceInterface>::UnregisterObserver(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (uint64_t *)a1[4];
  if (v2 != a1 + 3)
  {
    while (1)
    {
      v3 = (_QWORD *)v2[1];
      if (v2[2] == a2)
        break;
      v2 = (uint64_t *)v2[1];
      if (v3 == a1 + 3)
        return;
    }
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)v2[1] = v4;
    --a1[5];
    operator delete(v2);
  }
}

_QWORD *`non-virtual thunk to'webrtc::Notifier<webrtc::VideoTrackSourceInterface>::RegisterObserver(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[2];
  a1 += 2;
  result[1] = a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void `non-virtual thunk to'webrtc::Notifier<webrtc::VideoTrackSourceInterface>::UnregisterObserver(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (uint64_t *)a1[3];
  if (v2 != a1 + 2)
  {
    while (1)
    {
      v3 = (_QWORD *)v2[1];
      if (v2[2] == a2)
        break;
      v2 = (uint64_t *)v2[1];
      if (v3 == a1 + 2)
        return;
    }
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)v2[1] = v4;
    --a1[4];
    operator delete(v2);
  }
}

void webrtc::AdaptiveDigitalGainController::Process(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  BOOL v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v34;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD v46[5];

  v8 = *(float *)(a2 + 4) + *(float *)(a2 + 16);
  v9 = *(float *)(a1 + 32);
  v10 = -(float)(v9 + *(float *)(a1 + 36));
  v11 = -v9;
  v12 = v8 < v11;
  v13 = v11 - v8;
  if (!v12)
    v13 = 0.0;
  if (v8 >= v10)
    v14 = v13;
  else
    v14 = *(float *)(a1 + 36);
  v15 = *(float *)(a1 + 48) - *(float *)(a2 + 12);
  if (v15 < 0.0)
    v15 = 0.0;
  if (v15 >= v14)
    v15 = v14;
  v16 = *(float *)(a1 + 68);
  v17 = *(float *)(a2 + 20);
  v18 = (float)(v16 - v17) + -1.0;
  if (v18 < 0.0)
    v18 = 0.0;
  if (v18 > v15)
    v18 = v15;
  if (v17 > -1.0 && *(_BYTE *)(a2 + 8) == 0)
    v20 = v18;
  else
    v20 = v15;
  if (*(float *)a2 < 0.95)
  {
    v21 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 64) = v21;
    goto LABEL_28;
  }
  v21 = *(_DWORD *)(a1 + 64);
  if (v21 < 1)
  {
LABEL_28:
    v24 = *(float *)(a1 + 56);
    v25 = v20 - v16;
    if (v25 <= 0.0)
      v23 = v25;
    else
      v23 = 0.0;
    v22 = *(float *)(a1 + 56);
    if (!v21)
      goto LABEL_34;
    goto LABEL_35;
  }
  *(_DWORD *)(a1 + 64) = v21 - 1;
  v22 = *(float *)(a1 + 56);
  if (v21 == 1)
  {
    v24 = v22 * (float)*(int *)(a1 + 52);
    v25 = v20 - v16;
LABEL_34:
    v26 = v22;
    v22 = v24;
    v24 = v26;
    v23 = v25;
    goto LABEL_35;
  }
  if ((float)(v20 - v16) <= 0.0)
    v23 = v20 - v16;
  else
    v23 = 0.0;
  v24 = *(float *)(a1 + 56);
LABEL_35:
  v27 = -v24;
  if (v23 < v22)
    v22 = v23;
  if (v23 > v27)
    v28 = v22;
  else
    v28 = v27;
  if (v28 != 0.0)
    *(float *)(a1 + 16) = __exp10f((float)(v16 + v28) / 20.0);
  webrtc::GainApplier::ApplyGain((float32x4_t *)(a1 + 8), a3, a4);
  *(float *)(a1 + 68) = v28 + *(float *)(a1 + 68);
  v29 = *(_DWORD *)(a1 + 60) + 1;
  *(_DWORD *)(a1 + 60) = v29;
  if (v29 == 1000)
  {
    *(_DWORD *)(a1 + 60) = 0;
    v30 = atomic_load(&_MergedGlobals_2);
    if (v30)
    {
      webrtc::metrics::HistogramAdd(v30, (int)(float)-*(float *)(a2 + 4));
    }
    else
    {
      while (!__ldaxr(&_MergedGlobals_2))
      {
        if (!__stlxr(0, &_MergedGlobals_2))
          goto LABEL_48;
      }
      __clrex();
    }
LABEL_48:
    v32 = atomic_load(&qword_253EA54A0);
    if (v32)
    {
      webrtc::metrics::HistogramAdd(v32, (int)(float)-*(float *)(a2 + 12));
    }
    else
    {
      while (!__ldaxr(&qword_253EA54A0))
      {
        if (!__stlxr(0, &qword_253EA54A0))
          goto LABEL_53;
      }
      __clrex();
    }
LABEL_53:
    v34 = atomic_load(&qword_253EA54A8);
    if (v34)
    {
      webrtc::metrics::HistogramAdd(v34, (int)*(float *)(a2 + 16));
    }
    else
    {
      while (!__ldaxr(&qword_253EA54A8))
      {
        if (!__stlxr(0, &qword_253EA54A8))
          goto LABEL_58;
      }
      __clrex();
    }
LABEL_58:
    v36 = atomic_load(&qword_253EA54B0);
    if (v36)
    {
      webrtc::metrics::HistogramAdd(v36, (int)*(float *)(a1 + 68));
    }
    else
    {
      while (!__ldaxr(&qword_253EA54B0))
      {
        if (!__stlxr(0, &qword_253EA54B0))
          goto LABEL_63;
      }
      __clrex();
    }
LABEL_63:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v46[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_p"
               "rocessing/agc2/adaptive_digital_gain_controller.cc";
      v46[1] = 1665;
      v46[2] = &v45;
      v46[3] = "AGC2 adaptive digital";
      v46[4] = v46;
      rtc::webrtc_logging_impl::Log("\r\t\t\a\t\a\t\a\t\a", v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/adaptive_digital_gain_controller.cc");
    }
  }
}

uint64_t rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>()
{
    return 0;
  else
    return rtc::LogMessage::streams_empty_ & 1;
}

void webrtc::aec3::ComputeFrequencyResponse(uint64_t a1, uint64_t a2, void **a3)
{
  char *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;

  v5 = (char *)*a3;
  v6 = (char *)a3[1];
  if (*a3 != v6)
    bzero(*a3, 260 * ((v6 - v5 - 260) / 0x104uLL) + 260);
  v7 = *(_QWORD **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = v8 - *(_QWORD *)a2;
  if (v8 == *(_QWORD *)a2)
  {
LABEL_27:
    __break(1u);
    return;
  }
  if (a1)
  {
    v10 = v7[1];
    if (v10 != *v7)
    {
      v11 = 0;
      v12 = v9 / 24;
      if ((unint64_t)((v10 - *v7) / 520) <= 1)
        v13 = 1;
      else
        v13 = (v10 - *v7) / 520;
      v14 = v5;
LABEL_10:
      if (v11 != v12)
      {
        v15 = v7[3 * v11];
        if (0xFC0FC0FC0FC0FC1 * ((v6 - v5) >> 2) > v11)
        {
          v16 = 0;
          v17 = (float32x4_t *)&v5[260 * v11];
          v18 = (v7[3 * v11 + 1] - v15) / 520;
          v19 = v7[3 * v11];
          while (v16 != v18)
          {
            v20 = v15 + 520 * v16;
            if ((unint64_t)v17 >= v20 + 520 || v20 >= (unint64_t)v17[16].u64 + 4)
            {
              v22 = v15 + 520 * v16;
              v23 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 260), *(float32x4_t *)(v22 + 260)), *(float32x4_t *)v22, *(float32x4_t *)v22);
              v24 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 276), *(float32x4_t *)(v22 + 276)), *(float32x4_t *)(v22 + 16), *(float32x4_t *)(v22 + 16));
              v25 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v24, v17[1]), v24, (int8x16_t)v17[1]);
              *(int8x16_t *)v17 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v23, *v17), v23, *(int8x16_t *)v17);
              v17[1] = (float32x4_t)v25;
              v26 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 292), *(float32x4_t *)(v22 + 292)), *(float32x4_t *)(v22 + 32), *(float32x4_t *)(v22 + 32));
              v27 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 308), *(float32x4_t *)(v22 + 308)), *(float32x4_t *)(v22 + 48), *(float32x4_t *)(v22 + 48));
              v28 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v27, v17[3]), v27, (int8x16_t)v17[3]);
              v17[2] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v26, v17[2]), v26, (int8x16_t)v17[2]);
              v17[3] = (float32x4_t)v28;
              v29 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 324), *(float32x4_t *)(v22 + 324)), *(float32x4_t *)(v22 + 64), *(float32x4_t *)(v22 + 64));
              v30 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 340), *(float32x4_t *)(v22 + 340)), *(float32x4_t *)(v22 + 80), *(float32x4_t *)(v22 + 80));
              v31 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v30, v17[5]), v30, (int8x16_t)v17[5]);
              v17[4] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v29, v17[4]), v29, (int8x16_t)v17[4]);
              v17[5] = (float32x4_t)v31;
              v32 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 356), *(float32x4_t *)(v22 + 356)), *(float32x4_t *)(v22 + 96), *(float32x4_t *)(v22 + 96));
              v33 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 372), *(float32x4_t *)(v22 + 372)), *(float32x4_t *)(v22 + 112), *(float32x4_t *)(v22 + 112));
              v34 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v33, v17[7]), v33, (int8x16_t)v17[7]);
              v17[6] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v32, v17[6]), v32, (int8x16_t)v17[6]);
              v17[7] = (float32x4_t)v34;
              v35 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 388), *(float32x4_t *)(v22 + 388)), *(float32x4_t *)(v22 + 128), *(float32x4_t *)(v22 + 128));
              v36 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 404), *(float32x4_t *)(v22 + 404)), *(float32x4_t *)(v22 + 144), *(float32x4_t *)(v22 + 144));
              v37 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v36, v17[9]), v36, (int8x16_t)v17[9]);
              v17[8] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v35, v17[8]), v35, (int8x16_t)v17[8]);
              v17[9] = (float32x4_t)v37;
              v38 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 420), *(float32x4_t *)(v22 + 420)), *(float32x4_t *)(v22 + 160), *(float32x4_t *)(v22 + 160));
              v39 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 436), *(float32x4_t *)(v22 + 436)), *(float32x4_t *)(v22 + 176), *(float32x4_t *)(v22 + 176));
              v40 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v39, v17[11]), v39, (int8x16_t)v17[11]);
              v17[10] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v38, v17[10]), v38, (int8x16_t)v17[10]);
              v17[11] = (float32x4_t)v40;
              v41 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 452), *(float32x4_t *)(v22 + 452)), *(float32x4_t *)(v22 + 192), *(float32x4_t *)(v22 + 192));
              v42 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 468), *(float32x4_t *)(v22 + 468)), *(float32x4_t *)(v22 + 208), *(float32x4_t *)(v22 + 208));
              v43 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v42, v17[13]), v42, (int8x16_t)v17[13]);
              v17[12] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v41, v17[12]), v41, (int8x16_t)v17[12]);
              v17[13] = (float32x4_t)v43;
              v44 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 484), *(float32x4_t *)(v22 + 484)), *(float32x4_t *)(v22 + 224), *(float32x4_t *)(v22 + 224));
              v45 = (int8x16_t)vmlaq_f32(vmulq_f32(*(float32x4_t *)(v22 + 500), *(float32x4_t *)(v22 + 500)), *(float32x4_t *)(v22 + 240), *(float32x4_t *)(v22 + 240));
              v46 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v45, v17[15]), v45, (int8x16_t)v17[15]);
              v47 = 64;
              v17[14] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v44, v17[14]), v44, (int8x16_t)v17[14]);
              v17[15] = (float32x4_t)v46;
            }
            else
            {
              v47 = 0;
            }
            v48 = 4 * v47;
            do
            {
              v49 = (float)(*(float *)(v19 + v48 + 260) * *(float *)(v19 + v48 + 260))
                  + (float)(*(float *)(v19 + v48) * *(float *)(v19 + v48));
              if (*(float *)&v14[v48] >= v49)
                v49 = *(float *)&v14[v48];
              *(float *)&v14[v48] = v49;
              v48 += 4;
            }
            while (v48 != 260);
            ++v16;
            v19 += 520;
            if (v16 == v13)
            {
              ++v11;
              v14 += 260;
              if (v11 != a1)
                goto LABEL_10;
              return;
            }
          }
        }
      }
      goto LABEL_27;
    }
  }
}

uint64_t webrtc::aec3::AdaptPartitions(uint64_t result, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;

  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = v6 - v5;
  if (v6 == v5)
    v5 = 0;
  if (a3)
  {
    v8 = *(int *)(v4 + 36);
    v9 = (uint64_t *)(v5 + 24 * (int)v8);
    v11 = *v9;
    v10 = v9[1];
    if (v10 != *v9)
    {
      v12 = 0;
      v13 = (unsigned __int128)((v10 - v11) * (__int128)0xFC0FC0FC0FC0FC1) >> 64;
      v14 = (v13 >> 5) + ((unint64_t)v13 >> 63);
      if (v14 <= 1)
        v14 = 1;
      do
      {
        result = 0;
        v15 = 0;
        v16 = *(_QWORD *)(v5 + 24 * v8);
        v17 = 0xFC0FC0FC0FC0FC1 * ((*(_QWORD *)(v5 + 24 * v8 + 8) - v16) >> 3);
        v18 = v16;
        do
        {
          if (v15 == v17
            || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3) <= v12
            || (v20 = (uint64_t *)(*a4 + 24 * v12), v19 = *v20, 0xFC0FC0FC0FC0FC1 * ((v20[1] - *v20) >> 3) <= v15))
          {
            __break(1u);
            return result;
          }
          v21 = 0;
          v22 = 520 * v15 + 520;
          v23 = v16 + v22;
          v24 = v19 + 520 * v15;
          v25 = v19 + v22;
          v27 = v24 < a2 + 520 && v25 > a2;
          v28 = v16 + 520 * v15 >= v25 || v24 >= v23;
          if (v28 && !v27)
          {
            v29 = 0;
            v30 = v19 + result;
            do
            {
              v31 = *(float32x4_t *)(v18 + v29);
              v32 = *(float32x4_t *)(a2 + v29);
              v33 = *(float32x4_t *)(v18 + v29 + 260);
              v34 = *(float32x4_t *)(a2 + v29 + 260);
              *(float32x4_t *)(v30 + v29) = vaddq_f32(*(float32x4_t *)(v30 + v29), vmlaq_f32(vmulq_f32(v33, v34), v32, v31));
              *(float32x4_t *)(v30 + v29 + 260) = vaddq_f32(*(float32x4_t *)(v30 + v29 + 260), vmlaq_f32(vmulq_f32(v32, vnegq_f32(v33)), v34, v31));
              v29 += 16;
            }
            while (v29 != 256);
            v21 = 64;
          }
          v35 = 4 * v21;
          v36 = v19 + result;
          do
          {
            v37 = (float *)(v36 + v35);
            *v37 = *(float *)(v36 + v35)
                 + (float)((float)(*(float *)(v18 + v35 + 260) * *(float *)(a2 + v35 + 260))
                         + (float)(*(float *)(v18 + v35) * *(float *)(a2 + v35)));
            v37[65] = *(float *)(v36 + v35 + 260)
                    + (float)((float)(*(float *)(v18 + v35) * *(float *)(a2 + v35 + 260))
                            - (float)(*(float *)(v18 + v35 + 260) * *(float *)(a2 + v35)));
            v35 += 4;
          }
          while (v35 != 260);
          ++v15;
          v18 += 520;
          result += 520;
        }
        while (v15 != v14);
        if (v8 < 0xAAAAAAAAAAAAAAABLL * (v7 >> 3) - 1)
          ++v8;
        else
          v8 = 0;
        ++v12;
      }
      while (v12 != a3);
    }
  }
  return result;
}

void webrtc::aec3::ApplyFilter(uint64_t a1, uint64_t a2, _QWORD *a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;

  bzero(a4, 0x208uLL);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  v11 = v10 - v9;
  if (v10 == v9)
    v9 = 0;
  if (a2)
  {
    v12 = *(int *)(v8 + 36);
    v13 = (uint64_t *)(v9 + 24 * (int)v12);
    v15 = *v13;
    v14 = v13[1];
    if (v14 != *v13)
    {
      v16 = 0;
      v17 = (unsigned __int128)((v14 - v15) * (__int128)0xFC0FC0FC0FC0FC1) >> 64;
      v18 = (v17 >> 5) + ((unint64_t)v17 >> 63);
      if (v18 <= 1)
        v18 = 1;
      v19 = a4 + 520;
LABEL_8:
      v20 = *(_QWORD *)(v9 + 24 * v12);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) > v16)
      {
        v21 = 0;
        v22 = 0;
        v23 = (*(_QWORD *)(v9 + 24 * v12 + 8) - v20) / 520;
        v24 = (uint64_t *)(*a3 + 24 * v16);
        v25 = *(_QWORD *)(v9 + 24 * v12);
        while (v22 != v23)
        {
          v26 = *v24;
          if (0xFC0FC0FC0FC0FC1 * ((v24[1] - *v24) >> 3) <= v22)
            break;
          v27 = 0;
          v28 = 520 * v22 + 520;
          v29 = v20 + v28;
          v31 = v26 + v28 > (unint64_t)a4 && v26 + 520 * v22 < (unint64_t)v19;
          v32 = v20 + 520 * v22 < (unint64_t)v19 && v29 > (unint64_t)a4;
          if (!v32 && !v31)
          {
            v33 = 0;
            v34 = v26 + v21;
            do
            {
              v35 = *(float32x4_t *)(v25 + v33);
              v36 = *(float32x4_t *)(v34 + v33);
              v37 = *(float32x4_t *)(v25 + v33 + 260);
              v38 = *(float32x4_t *)(v34 + v33 + 260);
              *(float32x4_t *)&a4[v33] = vaddq_f32(*(float32x4_t *)&a4[v33], vmlaq_f32(vmulq_f32(v38, vnegq_f32(v37)), v36, v35));
              *(float32x4_t *)&a4[v33 + 260] = vaddq_f32(*(float32x4_t *)&a4[v33 + 260], vmlaq_f32(vmulq_f32(v37, v36), v38, v35));
              v33 += 16;
            }
            while (v33 != 256);
            v27 = 64;
          }
          v39 = 4 * v27;
          v40 = v26 + v21;
          do
          {
            v41 = (float *)&a4[v39];
            *v41 = *(float *)&a4[v39]
                 + (float)((float)(*(float *)(v25 + v39) * *(float *)(v40 + v39))
                         - (float)(*(float *)(v25 + v39 + 260) * *(float *)(v40 + v39 + 260)));
            v41[65] = *(float *)&a4[v39 + 260]
                    + (float)((float)(*(float *)(v25 + v39 + 260) * *(float *)(v40 + v39))
                            + (float)(*(float *)(v25 + v39) * *(float *)(v40 + v39 + 260)));
            v39 += 4;
          }
          while (v39 != 260);
          ++v22;
          v25 += 520;
          v21 += 520;
          if (v22 == v18)
          {
            if (v12 < 0xAAAAAAAAAAAAAAABLL * (v11 >> 3) - 1)
              ++v12;
            else
              v12 = 0;
            if (++v16 != a2)
              goto LABEL_8;
            return;
          }
        }
      }
      __break(1u);
    }
  }
}

uint64_t webrtc::AdaptiveFirFilter::AdaptiveFirFilter(uint64_t a1, unint64_t a2, uint64_t a3, int a4, unint64_t a5, int a6, uint64_t a7)
{
  int v7;
  unint64_t v8;
  uint64_t v10;
  char *v11;
  char *v12;
  char **v13;
  char **v14;
  int64_t v15;
  uint64_t v16;
  char **v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v32;

  v7 = a4;
  v8 = a2;
  *(_QWORD *)a1 = a7;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a6;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a3;
  *(_DWORD *)(a1 + 64) = 0;
  if (a5)
  {
    if (a5 > 0x7E07E07E07E07ELL)
      goto LABEL_35;
    v10 = 520 * a5;
    v11 = (char *)operator new(520 * a5);
    v12 = &v11[v10];
    bzero(v11, 520 * ((v10 - 520) / 0x208uLL) + 520);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    if (!v8)
      goto LABEL_14;
LABEL_6:
    if (v8 >= 0xAAAAAAAAAAAAAABLL)
      goto LABEL_35;
    v13 = (char **)operator new(24 * v8);
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v13;
    v14 = &v13[3 * v8];
    *(_QWORD *)(a1 + 88) = v14;
    v15 = v12 - v11;
    v32 = v7;
    if (v12 == v11)
    {
      bzero(v13, 24 * ((24 * v8 - 24) / 0x18) + 24);
    }
    else
    {
      if ((unint64_t)(0xFC0FC0FC0FC0FC1 * (v15 >> 3)) > 0x7E07E07E07E07ELL)
      {
        *v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
        abort();
      }
      v16 = 24 * v8;
      v17 = v13 + 1;
      do
      {
        *v17 = 0;
        v17[1] = 0;
        v18 = (char *)operator new(v15);
        *(v17 - 1) = v18;
        v19 = &v18[8 * (v15 >> 3)];
        v17[1] = v19;
        memcpy(v18, v11, v15);
        *v17 = v19;
        v17 += 3;
        v16 -= 24;
      }
      while (v16);
    }
    *(_QWORD *)(a1 + 80) = v14;
    v7 = v32;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  if (a2)
    goto LABEL_6;
LABEL_14:
  if (v11)
  {
    operator delete(v11);
    v7 = *(_DWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(float *)(a1 + 36) = 1.0 / (float)v7;
  if (!v8)
  {
    v28 = 0;
    v29 = 0;
    goto LABEL_29;
  }
  v20 = 0;
  v21 = *(char **)(a1 + 72);
  v22 = *(char **)(a1 + 80);
  do
  {
    v23 = v22 - v21;
    if (v22 == v21)
      goto LABEL_34;
    if (*((_QWORD *)v21 + 1) != *(_QWORD *)v21)
    {
      v24 = 0;
      v25 = 0;
      while (0xAAAAAAAAAAAAAAABLL * (v23 >> 3) > v20)
      {
        v27 = &v21[24 * v20];
        v26 = *(_QWORD *)v27;
        if (0xFC0FC0FC0FC0FC1 * ((uint64_t)(*((_QWORD *)v27 + 1) - *(_QWORD *)v27) >> 3) <= v25)
          break;
        bzero((void *)(v26 + v24), 0x208uLL);
        v21 = *(char **)(a1 + 72);
        v22 = *(char **)(a1 + 80);
        v23 = v22 - v21;
        if (v22 == v21)
          break;
        ++v25;
        v24 += 520;
        if (v25 >= 0xFC0FC0FC0FC0FC1 * ((uint64_t)(*((_QWORD *)v21 + 1) - *(_QWORD *)v21) >> 3))
          goto LABEL_18;
      }
LABEL_34:
      __break(1u);
LABEL_35:
      abort();
    }
LABEL_18:
    ++v20;
  }
  while (v20 != v8);
  v29 = *(_QWORD *)(a1 + 24);
  v28 = *(_QWORD *)(a1 + 96);
LABEL_29:
  if (v29 >= *(_QWORD *)(a1 + 40))
    v29 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = v29;
  *(_QWORD *)(a1 + 56) = v29;
  *(_QWORD *)(a1 + 40) = v29;
  v30 = v29 - 1;
  if (v30 < v28)
    v28 = v30;
  *(_QWORD *)(a1 + 96) = v28;
  *(_DWORD *)(a1 + 64) = 0;
  return a1;
}

void webrtc::AdaptiveFirFilter::UpdateSize(webrtc::AdaptiveFirFilter *this)
{
  unint64_t v2;
  int v3;
  BOOL v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;

  v2 = *((_QWORD *)this + 5);
  v3 = *((_DWORD *)this + 16);
  v4 = __OFSUB__(v3, 1);
  v5 = v3 - 1;
  if (v5 < 0 != v4)
  {
    v6 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 7) = v6;
    *((_QWORD *)this + 5) = v6;
    if (v2 >= v6)
      return;
  }
  else
  {
    v6 = (unint64_t)(float)((float)((float)(1.0 - (float)(*((float *)this + 9) * (float)v5))
                                         * (float)*((unint64_t *)this + 6))
                                 + (float)((float)*((unint64_t *)this + 7)
                                         * (float)(*((float *)this + 9) * (float)v5)));
    *((_DWORD *)this + 16) = v5;
    v7 = v6 - 1;
    if (v6 - 1 >= *((_QWORD *)this + 12))
      v7 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = v7;
    *((_QWORD *)this + 5) = v6;
    if (v2 >= v6)
      return;
  }
  v8 = (char *)*((_QWORD *)this + 9);
  v9 = (char *)*((_QWORD *)this + 10);
  while (1)
  {
    v10 = v9 - v8;
    if (v9 == v8)
      break;
    if (*((_QWORD *)v8 + 1) != *(_QWORD *)v8)
    {
      v11 = 0;
      v12 = 0;
      while (0xAAAAAAAAAAAAAAABLL * (v10 >> 3) > v2)
      {
        v14 = &v8[24 * v2];
        v13 = *(_QWORD *)v14;
        if (0xFC0FC0FC0FC0FC1 * ((uint64_t)(*((_QWORD *)v14 + 1) - *(_QWORD *)v14) >> 3) <= v12)
          break;
        bzero((void *)(v13 + v11), 0x208uLL);
        v8 = (char *)*((_QWORD *)this + 9);
        v9 = (char *)*((_QWORD *)this + 10);
        v10 = v9 - v8;
        if (v9 == v8)
          break;
        ++v12;
        v11 += 520;
        if (v12 >= 0xFC0FC0FC0FC0FC1 * ((uint64_t)(*((_QWORD *)v8 + 1) - *(_QWORD *)v8) >> 3))
          goto LABEL_8;
      }
      break;
    }
LABEL_8:
    if (++v2 == v6)
      return;
  }
  __break(1u);
}

void webrtc::AdaptiveFirFilter::Constrain(webrtc::AdaptiveFirFilter *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  webrtc::OouraFft *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  webrtc::OouraFft *v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float *v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  float32_t v48;
  uint64_t v49;
  uint64_t v50;
  const float *v51;
  const float *v52;
  const float *v53;
  const float *v54;
  const float *v55;
  const float *v56;
  const float *v57;
  const float *v58;
  const float *v59;
  const float *v60;
  const float *v61;
  const float *v62;
  const float *v63;
  uint64_t v64;
  __int32 *v65;
  _DWORD *v66;
  __int32 v67;
  unint64_t v68;
  unint64_t v69;
  float32x4_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  _BYTE v89[240];
  __int128 v90;
  _BYTE v91[16];
  float32x4x2_t v92;
  float32x4x2_t v93;
  float32x4x2_t v94;
  float32x4x2_t v95;
  float32x4x2_t v96;
  float32x4x2_t v97;
  float32x4x2_t v98;
  float32x4x2_t v99;
  float32x4x2_t v100;
  float32x4x2_t v101;
  float32x4x2_t v102;
  float32x4x2_t v103;
  float32x4x2_t v104;
  float32x4x2_t v105;
  float32x4x2_t v106;
  float32x4x2_t v107;

  v72 = *((_QWORD *)this + 2);
  if (v72)
  {
    v1 = *((_QWORD *)this + 12);
    v2 = *((_QWORD *)this + 9);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 10) - v2) >> 3) > v1)
    {
      v3 = 0;
      v4 = 0;
      v5 = (webrtc::AdaptiveFirFilter *)((char *)this + 8);
      v6 = (uint64_t *)(v2 + 24 * v1);
      v7 = v6 + 1;
      v71 = (float32x4_t)vdupq_n_s32(0x3C800000u);
      while (1)
      {
        v8 = *v6;
        if (0xFC0FC0FC0FC0FC1 * ((*v7 - *v6) >> 3) <= v4)
          break;
        v9 = v8 + 520 * v4;
        v73.i32[0] = *(_DWORD *)v9;
        v73.i32[1] = *(_DWORD *)(v9 + 256);
        if ((unint64_t)&v73.u64[1] >= v9 + 516 || v9 + 4 >= (unint64_t)v91)
        {
          v92.val[0] = *(float32x4_t *)(v9 + 4);
          v92.val[1] = *(float32x4_t *)(v9 + 264);
          v100.val[0] = *(float32x4_t *)(v9 + 20);
          v100.val[1] = *(float32x4_t *)(v9 + 280);
          vst2q_f32(&v73.f32[2], v92);
          v11 = &v75.f32[2];
          vst2q_f32(v11, v100);
          v92.val[0] = *(float32x4_t *)(v9 + 36);
          v92.val[1] = *(float32x4_t *)(v9 + 296);
          v100.val[0] = *(float32x4_t *)(v9 + 52);
          v100.val[1] = *(float32x4_t *)(v9 + 312);
          v12 = &v77.f32[2];
          vst2q_f32(v12, v92);
          v13 = &v79.f32[2];
          vst2q_f32(v13, v100);
          v92.val[0] = *(float32x4_t *)(v9 + 68);
          v92.val[1] = *(float32x4_t *)(v9 + 328);
          v100.val[0] = *(float32x4_t *)(v9 + 84);
          v100.val[1] = *(float32x4_t *)(v9 + 344);
          v14 = &v81.f32[2];
          vst2q_f32(v14, v92);
          v15 = &v83.f32[2];
          vst2q_f32(v15, v100);
          v92.val[0] = *(float32x4_t *)(v9 + 100);
          v92.val[1] = *(float32x4_t *)(v9 + 360);
          v100.val[0] = *(float32x4_t *)(v9 + 116);
          v100.val[1] = *(float32x4_t *)(v9 + 376);
          v16 = &v85.f32[2];
          vst2q_f32(v16, v92);
          v17 = &v87.f32[2];
          vst2q_f32(v17, v100);
          v92.val[0] = *(float32x4_t *)(v9 + 132);
          v92.val[1] = *(float32x4_t *)(v9 + 392);
          v100.val[0] = *(float32x4_t *)(v9 + 148);
          v100.val[1] = *(float32x4_t *)(v9 + 408);
          v18 = (float *)&v89[8];
          vst2q_f32(v18, v92);
          v19 = (float *)&v89[40];
          vst2q_f32(v19, v100);
          v92.val[0] = *(float32x4_t *)(v9 + 164);
          v92.val[1] = *(float32x4_t *)(v9 + 424);
          v100.val[0] = *(float32x4_t *)(v9 + 180);
          v100.val[1] = *(float32x4_t *)(v9 + 440);
          v20 = (float *)&v89[72];
          vst2q_f32(v20, v92);
          v21 = (float *)&v89[104];
          vst2q_f32(v21, v100);
          v92.val[0] = *(float32x4_t *)(v9 + 196);
          v92.val[1] = *(float32x4_t *)(v9 + 456);
          v100.val[0] = *(float32x4_t *)(v9 + 212);
          v100.val[1] = *(float32x4_t *)(v9 + 472);
          v22 = (float *)&v89[136];
          vst2q_f32(v22, v92);
          v23 = (float *)&v89[168];
          vst2q_f32(v23, v100);
          v24 = 114;
          v25 = 57;
        }
        else
        {
          v24 = 2;
          v25 = 1;
        }
        v26 = 4 * v24 + 4;
        v27 = 4 * v25;
        v28 = v8 + v3;
        do
        {
          v29 = (__int32 *)((char *)v73.i32 + v26);
          *(v29 - 1) = *(_DWORD *)(v28 + v27);
          *v29 = *(_DWORD *)(v28 + v27 + 260);
          v26 += 8;
          v27 += 4;
        }
        while (v27 != 256);
        webrtc::OouraFft::InverseFft(v5, v73.f32);
        v73 = vmulq_f32(v73, v71);
        v74 = vmulq_f32(v74, v71);
        v75 = vmulq_f32(v75, v71);
        v76 = vmulq_f32(v76, v71);
        v77 = vmulq_f32(v77, v71);
        v78 = vmulq_f32(v78, v71);
        v79 = vmulq_f32(v79, v71);
        v80 = vmulq_f32(v80, v71);
        v81 = vmulq_f32(v81, v71);
        v82 = vmulq_f32(v82, v71);
        v83 = vmulq_f32(v83, v71);
        v84 = vmulq_f32(v84, v71);
        v85 = vmulq_f32(v85, v71);
        v86 = vmulq_f32(v86, v71);
        v87 = vmulq_f32(v87, v71);
        v88 = vmulq_f32(v88, v71);
        v90 = 0u;
        memset(v89, 0, sizeof(v89));
        v31 = *v6;
        if (0xFC0FC0FC0FC0FC1 * ((*v7 - *v6) >> 3) <= v4)
          break;
        webrtc::OouraFft::bitrv2_128(v30, v73.f32);
        webrtc::OouraFft::cftfsub_128(v5, v73.f32);
        v32 = 0;
        v33 = (float *)&dword_208F0E314;
        v34 = (float *)&dword_208F0E38C;
        v35 = (float *)((unint64_t)&v73 | 0xC);
        do
        {
          v36 = *v34--;
          v37 = 0.5 - v36;
          v38 = *v33++;
          v39 = *(v35 - 1);
          v40 = (float *)&v91[v32 - 8];
          v41 = v39 - *(float *)&v91[v32 - 8];
          v42 = *v35 + *(float *)&v91[v32 - 4];
          v43 = (float)(v37 * v41) - (float)(v38 * v42);
          v44 = (float)(v38 * v41) + (float)(v37 * v42);
          v45 = *v35 - v44;
          *(v35 - 1) = v39 - v43;
          *v35 = v45;
          v46 = *(float *)&v91[v32 - 4] - v44;
          *v40 = *(float *)&v91[v32 - 8] + v43;
          v40[1] = v46;
          v32 -= 8;
          v35 += 2;
        }
        while (v32 != -248);
        v47 = v31 + 520 * v4;
        v48 = v73.f32[0] - v73.f32[1];
        v73.f32[0] = v73.f32[0] + v73.f32[1];
        v73.f32[1] = v48;
        *(_DWORD *)v47 = v73.i32[0];
        *(_DWORD *)(v47 + 256) = v73.i32[1];
        *(_DWORD *)(v47 + 516) = 0;
        *(_DWORD *)(v47 + 260) = 0;
        if (v31 + ((520 * v4) | 4) >= (unint64_t)v91 || (unint64_t)&v73.u64[1] >= v31 + 520 * v4 + 516)
        {
          v93 = vld2q_f32(&v73.f32[2]);
          v51 = &v75.f32[2];
          v101 = vld2q_f32(v51);
          *(float32x4_t *)(v47 + 4) = v93.val[0];
          *(float32x4_t *)(v47 + 20) = v101.val[0];
          *(float32x4_t *)(v47 + 264) = v93.val[1];
          *(float32x4_t *)(v47 + 280) = v101.val[1];
          v52 = &v77.f32[2];
          v94 = vld2q_f32(v52);
          v53 = &v79.f32[2];
          v102 = vld2q_f32(v53);
          *(float32x4_t *)(v47 + 36) = v94.val[0];
          *(float32x4_t *)(v47 + 52) = v102.val[0];
          *(float32x4_t *)(v47 + 296) = v94.val[1];
          *(float32x4_t *)(v47 + 312) = v102.val[1];
          v54 = &v81.f32[2];
          v95 = vld2q_f32(v54);
          v55 = &v83.f32[2];
          v103 = vld2q_f32(v55);
          *(float32x4_t *)(v47 + 68) = v95.val[0];
          *(float32x4_t *)(v47 + 84) = v103.val[0];
          *(float32x4_t *)(v47 + 328) = v95.val[1];
          *(float32x4_t *)(v47 + 344) = v103.val[1];
          v56 = &v85.f32[2];
          v96 = vld2q_f32(v56);
          v57 = &v87.f32[2];
          v104 = vld2q_f32(v57);
          *(float32x4_t *)(v47 + 100) = v96.val[0];
          *(float32x4_t *)(v47 + 116) = v104.val[0];
          *(float32x4_t *)(v47 + 360) = v96.val[1];
          *(float32x4_t *)(v47 + 376) = v104.val[1];
          v58 = (const float *)&v89[8];
          v97 = vld2q_f32(v58);
          v59 = (const float *)&v89[40];
          v105 = vld2q_f32(v59);
          *(float32x4_t *)(v47 + 132) = v97.val[0];
          *(float32x4_t *)(v47 + 148) = v105.val[0];
          *(float32x4_t *)(v47 + 392) = v97.val[1];
          *(float32x4_t *)(v47 + 408) = v105.val[1];
          v60 = (const float *)&v89[72];
          v98 = vld2q_f32(v60);
          v61 = (const float *)&v89[104];
          v106 = vld2q_f32(v61);
          *(float32x4_t *)(v47 + 164) = v98.val[0];
          *(float32x4_t *)(v47 + 180) = v106.val[0];
          *(float32x4_t *)(v47 + 424) = v98.val[1];
          *(float32x4_t *)(v47 + 440) = v106.val[1];
          v62 = (const float *)&v89[136];
          v99 = vld2q_f32(v62);
          v63 = (const float *)&v89[168];
          v107 = vld2q_f32(v63);
          *(float32x4_t *)(v47 + 196) = v99.val[0];
          *(float32x4_t *)(v47 + 212) = v107.val[0];
          *(float32x4_t *)(v47 + 456) = v99.val[1];
          *(float32x4_t *)(v47 + 472) = v107.val[1];
          v49 = 114;
          v50 = 57;
        }
        else
        {
          v49 = 2;
          v50 = 1;
        }
        v64 = 4 * v50;
        v65 = &v73.i32[v49 + 1];
        do
        {
          v66 = (_DWORD *)(v31 + v3 + v64);
          *v66 = *(v65 - 1);
          v67 = *v65;
          v65 += 2;
          v66[65] = v67;
          v64 += 4;
        }
        while (v64 != 256);
        ++v4;
        v3 += 520;
        v7 = v6 + 1;
        if (v4 == v72)
          goto LABEL_23;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_23:
    v68 = *((_QWORD *)this + 12);
    if (v68 < *((_QWORD *)this + 5) - 1)
      v69 = v68 + 1;
    else
      v69 = 0;
    *((_QWORD *)this + 12) = v69;
  }
}

void webrtc::AdaptiveFirFilter::ConstrainAndUpdateImpulseResponse(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  webrtc::OouraFft *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  float *v47;
  float v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  float *v54;
  float *v55;
  float *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float32_t v68;
  uint64_t v69;
  uint64_t v70;
  const float *v71;
  const float *v72;
  const float *v73;
  const float *v74;
  const float *v75;
  const float *v76;
  const float *v77;
  const float *v78;
  const float *v79;
  const float *v80;
  const float *v81;
  const float *v82;
  const float *v83;
  uint64_t v84;
  __int32 *v85;
  _DWORD *v86;
  __int32 v87;
  uint64_t v88;
  unint64_t v89;
  float32x4_t *v90;
  float32x4_t *p_src;
  float32x4_t v92;
  float32x4_t v93;
  int16x4_t v94;
  unint64_t v95;
  float32x4_t v96;
  uint64_t *v97;
  webrtc::OouraFft *v98;
  float32x4_t __src;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  _BYTE v115[240];
  __int128 v116;
  _BYTE v117[16];
  float32x4x2_t v118;
  float32x4x2_t v119;
  float32x4x2_t v120;
  float32x4x2_t v121;
  float32x4x2_t v122;
  float32x4x2_t v123;
  float32x4x2_t v124;
  float32x4x2_t v125;
  float32x4x2_t v126;
  float32x4x2_t v127;
  float32x4x2_t v128;
  float32x4x2_t v129;
  float32x4x2_t v130;
  float32x4x2_t v131;
  float32x4x2_t v132;
  float32x4x2_t v133;

  v4 = (int)(*(_DWORD *)(a1 + 40) << 6);
  v5 = *a2;
  v6 = a2[1];
  v7 = (v6 - *a2) >> 2;
  if (v4 <= v7)
  {
    if (v4 < v7)
    {
      v6 = v5 + 4 * v4;
      a2[1] = v6;
    }
  }
  else
  {
    std::vector<float>::__append((uint64_t)a2, v4 - v7);
    v5 = *a2;
    v6 = a2[1];
    v4 = (int)(*(_DWORD *)(a1 + 40) << 6);
  }
  v8 = (v6 - v5) >> 2;
  if (v4 <= v8)
  {
    if (v4 < v8)
      a2[1] = v5 + 4 * v4;
  }
  else
  {
    std::vector<float>::__append((uint64_t)a2, v4 - v8);
    v5 = *a2;
  }
  v9 = *(_QWORD *)(a1 + 96);
  v10 = (_OWORD *)(v5 + (v9 << 8));
  v10[14] = 0u;
  v10[15] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[10] = 0u;
  v10[11] = 0u;
  v10[8] = 0u;
  v10[9] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  *v10 = 0u;
  v10[1] = 0u;
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_65:
    if (v9 < *(_QWORD *)(a1 + 40) - 1)
      v95 = v9 + 1;
    else
      v95 = 0;
    *(_QWORD *)(a1 + 96) = v95;
    return;
  }
  v11 = 0;
  v12 = 0;
  v98 = (webrtc::OouraFft *)(a1 + 8);
  v97 = a2;
  v96 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  while (1)
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(_QWORD *)(a1 + 72);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v14) >> 3) <= v13)
      goto LABEL_69;
    v15 = (uint64_t *)(v14 + 24 * v13);
    v16 = *v15;
    if (0xFC0FC0FC0FC0FC1 * ((v15[1] - *v15) >> 3) <= v12)
      goto LABEL_69;
    v17 = v16 + 520 * v12;
    __src.i32[0] = *(_DWORD *)v17;
    __src.i32[1] = *(_DWORD *)(v17 + 256);
    v18 = (unint64_t)&__src.u64[1] >= v16 + 520 * v12 + 516 || v16 + ((520 * v12) | 4) >= (unint64_t)v117;
    if (v18)
    {
      v118.val[0] = *(float32x4_t *)(v17 + 4);
      v118.val[1] = *(float32x4_t *)(v17 + 264);
      v126.val[0] = *(float32x4_t *)(v17 + 20);
      v126.val[1] = *(float32x4_t *)(v17 + 280);
      vst2q_f32(&__src.f32[2], v118);
      v19 = &v101.f32[2];
      vst2q_f32(v19, v126);
      v118.val[0] = *(float32x4_t *)(v17 + 36);
      v118.val[1] = *(float32x4_t *)(v17 + 296);
      v126.val[0] = *(float32x4_t *)(v17 + 52);
      v126.val[1] = *(float32x4_t *)(v17 + 312);
      v20 = &v103.f32[2];
      vst2q_f32(v20, v118);
      v21 = &v105.f32[2];
      vst2q_f32(v21, v126);
      v118.val[0] = *(float32x4_t *)(v17 + 68);
      v118.val[1] = *(float32x4_t *)(v17 + 328);
      v126.val[0] = *(float32x4_t *)(v17 + 84);
      v126.val[1] = *(float32x4_t *)(v17 + 344);
      v22 = &v107.f32[2];
      vst2q_f32(v22, v118);
      v23 = &v109.f32[2];
      vst2q_f32(v23, v126);
      v118.val[0] = *(float32x4_t *)(v17 + 100);
      v118.val[1] = *(float32x4_t *)(v17 + 360);
      v126.val[0] = *(float32x4_t *)(v17 + 116);
      v126.val[1] = *(float32x4_t *)(v17 + 376);
      v24 = &v111.f32[2];
      vst2q_f32(v24, v118);
      v25 = &v113.f32[2];
      vst2q_f32(v25, v126);
      v118.val[0] = *(float32x4_t *)(v17 + 132);
      v118.val[1] = *(float32x4_t *)(v17 + 392);
      v126.val[0] = *(float32x4_t *)(v17 + 148);
      v126.val[1] = *(float32x4_t *)(v17 + 408);
      v26 = (float *)&v115[8];
      vst2q_f32(v26, v118);
      v27 = (float *)&v115[40];
      vst2q_f32(v27, v126);
      v118.val[0] = *(float32x4_t *)(v17 + 164);
      v118.val[1] = *(float32x4_t *)(v17 + 424);
      v126.val[0] = *(float32x4_t *)(v17 + 180);
      v126.val[1] = *(float32x4_t *)(v17 + 440);
      v28 = (float *)&v115[72];
      vst2q_f32(v28, v118);
      v29 = (float *)&v115[104];
      vst2q_f32(v29, v126);
      v118.val[0] = *(float32x4_t *)(v17 + 196);
      v118.val[1] = *(float32x4_t *)(v17 + 456);
      v126.val[0] = *(float32x4_t *)(v17 + 212);
      v126.val[1] = *(float32x4_t *)(v17 + 472);
      v30 = (float *)&v115[136];
      vst2q_f32(v30, v118);
      v31 = (float *)&v115[168];
      vst2q_f32(v31, v126);
      v32 = 114;
      v33 = 57;
    }
    else
    {
      v32 = 2;
      v33 = 1;
    }
    v34 = 4 * v32 + 4;
    v35 = 4 * v33;
    v36 = v16 + v11;
    do
    {
      v37 = (__int32 *)((char *)__src.i32 + v34);
      *(v37 - 1) = *(_DWORD *)(v36 + v35);
      *v37 = *(_DWORD *)(v36 + v35 + 260);
      v34 += 8;
      v35 += 4;
    }
    while (v35 != 256);
    webrtc::OouraFft::InverseFft(v98, __src.f32);
    __src = vmulq_f32(__src, v96);
    v100 = vmulq_f32(v100, v96);
    v101 = vmulq_f32(v101, v96);
    v102 = vmulq_f32(v102, v96);
    v103 = vmulq_f32(v103, v96);
    v104 = vmulq_f32(v104, v96);
    v105 = vmulq_f32(v105, v96);
    v106 = vmulq_f32(v106, v96);
    v107 = vmulq_f32(v107, v96);
    v108 = vmulq_f32(v108, v96);
    v109 = vmulq_f32(v109, v96);
    v110 = vmulq_f32(v110, v96);
    v111 = vmulq_f32(v111, v96);
    v112 = vmulq_f32(v112, v96);
    v113 = vmulq_f32(v113, v96);
    v114 = vmulq_f32(v114, v96);
    v116 = 0u;
    memset(v115, 0, sizeof(v115));
    if (v12)
      break;
    v38 = (webrtc::OouraFft *)memmove((void *)(*v97 + (v13 << 8)), &__src, 0x100uLL);
    v50 = *(_QWORD *)(a1 + 96);
    v51 = *(_QWORD *)(a1 + 72);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 80) - v51) >> 3) <= v50)
      goto LABEL_69;
    v52 = (uint64_t *)(v51 + 24 * v50);
    v49 = *v52;
    if (v52[1] == *v52)
      goto LABEL_69;
LABEL_42:
    webrtc::OouraFft::bitrv2_128(v38, __src.f32);
    webrtc::OouraFft::cftfsub_128(v98, __src.f32);
    v53 = 0;
    v54 = (float *)&dword_208F0E314;
    v55 = (float *)&dword_208F0E38C;
    v56 = (float *)((unint64_t)&__src | 0xC);
    do
    {
      v57 = *v55--;
      v58 = 0.5 - v57;
      v59 = *v54++;
      v60 = *(v56 - 1);
      v61 = (float *)&v117[v53 - 8];
      v62 = v60 - *(float *)&v117[v53 - 8];
      v63 = *v56 + *(float *)&v117[v53 - 4];
      v64 = (float)(v58 * v62) - (float)(v59 * v63);
      v65 = (float)(v59 * v62) + (float)(v58 * v63);
      v66 = *v56 - v65;
      *(v56 - 1) = v60 - v64;
      *v56 = v66;
      v67 = *(float *)&v117[v53 - 4] - v65;
      *v61 = *(float *)&v117[v53 - 8] + v64;
      v61[1] = v67;
      v53 -= 8;
      v56 += 2;
    }
    while (v53 != -248);
    v68 = __src.f32[0] - __src.f32[1];
    __src.f32[0] = __src.f32[0] + __src.f32[1];
    __src.f32[1] = v68;
    *(_DWORD *)v49 = __src.i32[0];
    *(_DWORD *)(v49 + 256) = __src.i32[1];
    *(_DWORD *)(v49 + 516) = 0;
    *(_DWORD *)(v49 + 260) = 0;
    if (v49 + 4 >= (unint64_t)v117 || (unint64_t)&__src.u64[1] >= v49 + 516)
    {
      v119 = vld2q_f32(&__src.f32[2]);
      v71 = &v101.f32[2];
      v127 = vld2q_f32(v71);
      *(float32x4_t *)(v49 + 4) = v119.val[0];
      *(float32x4_t *)(v49 + 20) = v127.val[0];
      *(float32x4_t *)(v49 + 264) = v119.val[1];
      *(float32x4_t *)(v49 + 280) = v127.val[1];
      v72 = &v103.f32[2];
      v120 = vld2q_f32(v72);
      v73 = &v105.f32[2];
      v128 = vld2q_f32(v73);
      *(float32x4_t *)(v49 + 36) = v120.val[0];
      *(float32x4_t *)(v49 + 52) = v128.val[0];
      *(float32x4_t *)(v49 + 296) = v120.val[1];
      *(float32x4_t *)(v49 + 312) = v128.val[1];
      v74 = &v107.f32[2];
      v121 = vld2q_f32(v74);
      v75 = &v109.f32[2];
      v129 = vld2q_f32(v75);
      *(float32x4_t *)(v49 + 68) = v121.val[0];
      *(float32x4_t *)(v49 + 84) = v129.val[0];
      *(float32x4_t *)(v49 + 328) = v121.val[1];
      *(float32x4_t *)(v49 + 344) = v129.val[1];
      v76 = &v111.f32[2];
      v122 = vld2q_f32(v76);
      v77 = &v113.f32[2];
      v130 = vld2q_f32(v77);
      *(float32x4_t *)(v49 + 100) = v122.val[0];
      *(float32x4_t *)(v49 + 116) = v130.val[0];
      *(float32x4_t *)(v49 + 360) = v122.val[1];
      *(float32x4_t *)(v49 + 376) = v130.val[1];
      v78 = (const float *)&v115[8];
      v123 = vld2q_f32(v78);
      v79 = (const float *)&v115[40];
      v131 = vld2q_f32(v79);
      *(float32x4_t *)(v49 + 132) = v123.val[0];
      *(float32x4_t *)(v49 + 148) = v131.val[0];
      *(float32x4_t *)(v49 + 392) = v123.val[1];
      *(float32x4_t *)(v49 + 408) = v131.val[1];
      v80 = (const float *)&v115[72];
      v124 = vld2q_f32(v80);
      v81 = (const float *)&v115[104];
      v132 = vld2q_f32(v81);
      *(float32x4_t *)(v49 + 164) = v124.val[0];
      *(float32x4_t *)(v49 + 180) = v132.val[0];
      *(float32x4_t *)(v49 + 424) = v124.val[1];
      *(float32x4_t *)(v49 + 440) = v132.val[1];
      v82 = (const float *)&v115[136];
      v125 = vld2q_f32(v82);
      v83 = (const float *)&v115[168];
      v133 = vld2q_f32(v83);
      *(float32x4_t *)(v49 + 196) = v125.val[0];
      *(float32x4_t *)(v49 + 212) = v133.val[0];
      *(float32x4_t *)(v49 + 456) = v125.val[1];
      *(float32x4_t *)(v49 + 472) = v133.val[1];
      v69 = 114;
      v70 = 57;
    }
    else
    {
      v69 = 2;
      v70 = 1;
    }
    v84 = 4 * v70;
    v85 = &__src.i32[v69 + 1];
    do
    {
      v86 = (_DWORD *)(v49 + v84);
      *v86 = *(v85 - 1);
      v87 = *v85;
      v85 += 2;
      v86[65] = v87;
      v84 += 4;
    }
    while (v84 != 256);
    ++v12;
    v11 += 520;
    if (v12 >= *(_QWORD *)(a1 + 16))
    {
      v9 = *(_QWORD *)(a1 + 96);
      goto LABEL_65;
    }
  }
  v39 = v13 << 6;
  v40 = *v97;
  v41 = (v97[1] - *v97) >> 2;
  v18 = v41 >= v13 << 6;
  v42 = v41 - (v13 << 6);
  if (!v18)
    v42 = 0;
  v43 = 63;
  if (v42 >= 0x3F)
    v44 = 63;
  else
    v44 = v42;
  if (v44 > 7)
  {
    if (v42 < 0x3F)
      v43 = v42;
    v45 = 4 * v43;
    if (v40 + (v13 << 8) >= (unint64_t)__src.u64 + v45 + 4
      || (unint64_t)&__src >= v40 + ((v13 << 8) | v45) + 4)
    {
      v88 = (v44 + 1) & 3;
      if (!v88)
        v88 = 4;
      v46 = v44 + 1 - v88;
      v39 += v46;
      v89 = ~v44 + v88;
      v90 = (float32x4_t *)(v40 + (v13 << 8));
      p_src = &__src;
      while (1)
      {
        v92 = *v90;
        v93 = *p_src;
        if ((vmovn_s32(vcagtq_f32(*p_src, *v90)).u8[0] & 1) != 0)
        {
          v90->i32[0] = v93.i32[0];
          v94 = vmovn_s32(vcgtq_f32(vabsq_f32(v93), vabsq_f32(v92)));
          if ((v94.i8[2] & 1) == 0)
          {
LABEL_58:
            if ((v94.i8[4] & 1) == 0)
              goto LABEL_59;
            goto LABEL_63;
          }
        }
        else
        {
          v94 = vmovn_s32(vcgtq_f32(vabsq_f32(v93), vabsq_f32(v92)));
          if ((v94.i8[2] & 1) == 0)
            goto LABEL_58;
        }
        v90->i32[1] = v93.i32[1];
        if ((v94.i8[4] & 1) == 0)
        {
LABEL_59:
          if ((v94.i8[6] & 1) != 0)
            goto LABEL_64;
          goto LABEL_55;
        }
LABEL_63:
        v90->i32[2] = v93.i32[2];
        if ((v94.i8[6] & 1) != 0)
LABEL_64:
          v90->i32[3] = v93.i32[3];
LABEL_55:
        ++p_src;
        ++v90;
        v89 += 4;
        if (!v89)
          goto LABEL_33;
      }
    }
  }
  v46 = 0;
LABEL_33:
  v47 = (float *)(v40 + 4 * v39);
  while (v42 != v46)
  {
    v48 = __src.f32[v46];
    if (fabsf(*v47) < fabsf(v48))
      *v47 = v48;
    ++v46;
    ++v47;
    if (v46 == 64)
    {
      if (0xFC0FC0FC0FC0FC1 * ((v15[1] - *v15) >> 3) <= v12)
        break;
      v49 = *v15 + 520 * v12;
      goto LABEL_42;
    }
  }
LABEL_69:
  __break(1u);
}

uint64_t webrtc::AdaptiveFirFilter::ScaleFilter(uint64_t this, double a2)
{
  uint64_t *v2;
  uint64_t *v3;
  float32x2_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;

  v2 = *(uint64_t **)(this + 72);
  v3 = *(uint64_t **)(this + 80);
  if (v2 != v3)
  {
    v4 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
    v5 = *v2;
    v6 = v2[1];
    if (*v2 != v6)
      goto LABEL_5;
    while (1)
    {
      v2 += 3;
      if (v2 == v3)
        break;
      v5 = *v2;
      v6 = v2[1];
      if (*v2 != v6)
      {
        do
        {
LABEL_5:
          v7 = vmulq_n_f32(*(float32x4_t *)(v5 + 16), *(float *)&a2);
          *(float32x4_t *)v5 = vmulq_n_f32(*(float32x4_t *)v5, *(float *)&a2);
          *(float32x4_t *)(v5 + 16) = v7;
          v8 = vmulq_n_f32(*(float32x4_t *)(v5 + 48), *(float *)&a2);
          *(float32x4_t *)(v5 + 32) = vmulq_n_f32(*(float32x4_t *)(v5 + 32), *(float *)&a2);
          *(float32x4_t *)(v5 + 48) = v8;
          v9 = vmulq_n_f32(*(float32x4_t *)(v5 + 80), *(float *)&a2);
          *(float32x4_t *)(v5 + 64) = vmulq_n_f32(*(float32x4_t *)(v5 + 64), *(float *)&a2);
          *(float32x4_t *)(v5 + 80) = v9;
          v10 = vmulq_n_f32(*(float32x4_t *)(v5 + 112), *(float *)&a2);
          *(float32x4_t *)(v5 + 96) = vmulq_n_f32(*(float32x4_t *)(v5 + 96), *(float *)&a2);
          *(float32x4_t *)(v5 + 112) = v10;
          v11 = vmulq_n_f32(*(float32x4_t *)(v5 + 144), *(float *)&a2);
          *(float32x4_t *)(v5 + 128) = vmulq_n_f32(*(float32x4_t *)(v5 + 128), *(float *)&a2);
          *(float32x4_t *)(v5 + 144) = v11;
          v12 = vmulq_n_f32(*(float32x4_t *)(v5 + 176), *(float *)&a2);
          *(float32x4_t *)(v5 + 160) = vmulq_n_f32(*(float32x4_t *)(v5 + 160), *(float *)&a2);
          *(float32x4_t *)(v5 + 176) = v12;
          v13 = vmulq_n_f32(*(float32x4_t *)(v5 + 208), *(float *)&a2);
          *(float32x4_t *)(v5 + 192) = vmulq_n_f32(*(float32x4_t *)(v5 + 192), *(float *)&a2);
          *(float32x4_t *)(v5 + 208) = v13;
          v14 = vmulq_n_f32(*(float32x4_t *)(v5 + 240), *(float *)&a2);
          *(float32x4_t *)(v5 + 224) = vmulq_n_f32(*(float32x4_t *)(v5 + 224), *(float *)&a2);
          *(float32x4_t *)(v5 + 240) = v14;
          v15 = vmulq_n_f32(*(float32x4_t *)(v5 + 272), *(float *)&a2);
          *(float32x4_t *)(v5 + 256) = vmulq_n_f32(*(float32x4_t *)(v5 + 256), *(float *)&a2);
          *(float32x4_t *)(v5 + 272) = v15;
          v16 = vmulq_n_f32(*(float32x4_t *)(v5 + 304), *(float *)&a2);
          *(float32x4_t *)(v5 + 288) = vmulq_n_f32(*(float32x4_t *)(v5 + 288), *(float *)&a2);
          *(float32x4_t *)(v5 + 304) = v16;
          v17 = vmulq_n_f32(*(float32x4_t *)(v5 + 336), *(float *)&a2);
          *(float32x4_t *)(v5 + 320) = vmulq_n_f32(*(float32x4_t *)(v5 + 320), *(float *)&a2);
          *(float32x4_t *)(v5 + 336) = v17;
          v18 = vmulq_n_f32(*(float32x4_t *)(v5 + 368), *(float *)&a2);
          *(float32x4_t *)(v5 + 352) = vmulq_n_f32(*(float32x4_t *)(v5 + 352), *(float *)&a2);
          *(float32x4_t *)(v5 + 368) = v18;
          v19 = vmulq_n_f32(*(float32x4_t *)(v5 + 400), *(float *)&a2);
          *(float32x4_t *)(v5 + 384) = vmulq_n_f32(*(float32x4_t *)(v5 + 384), *(float *)&a2);
          *(float32x4_t *)(v5 + 400) = v19;
          v20 = vmulq_n_f32(*(float32x4_t *)(v5 + 432), *(float *)&a2);
          *(float32x4_t *)(v5 + 416) = vmulq_n_f32(*(float32x4_t *)(v5 + 416), *(float *)&a2);
          *(float32x4_t *)(v5 + 432) = v20;
          v21 = vmulq_n_f32(*(float32x4_t *)(v5 + 464), *(float *)&a2);
          *(float32x4_t *)(v5 + 448) = vmulq_n_f32(*(float32x4_t *)(v5 + 448), *(float *)&a2);
          *(float32x4_t *)(v5 + 464) = v21;
          v22 = vmulq_n_f32(*(float32x4_t *)(v5 + 496), *(float *)&a2);
          *(float32x4_t *)(v5 + 480) = vmulq_n_f32(*(float32x4_t *)(v5 + 480), *(float *)&a2);
          *(float32x4_t *)(v5 + 496) = v22;
          *(float32x2_t *)(v5 + 512) = vmul_f32(*(float32x2_t *)(v5 + 512), v4);
          v5 += 520;
        }
        while (v5 != v6);
      }
    }
  }
  return this;
}

_QWORD *webrtc::AdaptiveFirFilter::SetFilter(_QWORD *result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  if (result[5] >= a2)
    v3 = a2;
  else
    v3 = result[5];
  if (v3)
  {
    v4 = result;
    if (result[2])
    {
      v6 = 0;
      v7 = 1;
      while (!v7)
      {
LABEL_7:
        if (++v6 == v3)
          return result;
      }
      v8 = 0;
      v9 = 260;
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) > v6)
      {
        v11 = (uint64_t *)(*a3 + 24 * v6);
        v10 = *v11;
        if (0xFC0FC0FC0FC0FC1 * ((v11[1] - *v11) >> 3) <= v8)
          break;
        v12 = v4[9];
        if (0xAAAAAAAAAAAAAAABLL * ((v4[10] - v12) >> 3) <= v6)
          break;
        v14 = (uint64_t *)(v12 + 24 * v6);
        v13 = *v14;
        if (0xFC0FC0FC0FC0FC1 * ((v14[1] - *v14) >> 3) <= v8)
          break;
        result = memmove((void *)(v13 + v9 - 260), (const void *)(v10 + v9 - 260), 0x104uLL);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) <= v6)
          break;
        v16 = (uint64_t *)(*a3 + 24 * v6);
        v15 = *v16;
        if (0xFC0FC0FC0FC0FC1 * ((v16[1] - *v16) >> 3) <= v8)
          break;
        v17 = v4[9];
        if (0xAAAAAAAAAAAAAAABLL * ((v4[10] - v17) >> 3) <= v6)
          break;
        v19 = (uint64_t *)(v17 + 24 * v6);
        v18 = *v19;
        if (0xFC0FC0FC0FC0FC1 * ((v19[1] - *v19) >> 3) <= v8)
          break;
        result = memmove((void *)(v18 + v9), (const void *)(v15 + v9), 0x104uLL);
        ++v8;
        v7 = v4[2];
        v9 += 520;
        if (v8 >= v7)
          goto LABEL_7;
      }
      __break(1u);
    }
  }
  return result;
}

void std::vector<std::array<float,65ul>>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0xFC0FC0FC0FC0FC1 * ((v4 - v5) >> 2) < a2)
  {
    v6 = 0xFC0FC0FC0FC0FC1 * ((v5 - *a1) >> 2);
    v7 = v6 + a2;
    if (v6 + a2 <= 0xFC0FC0FC0FC0FCLL)
    {
      v8 = 0xFC0FC0FC0FC0FC1 * ((v4 - *a1) >> 2);
      if (2 * v8 > v7)
        v7 = 2 * v8;
      if (v8 >= 0x7E07E07E07E07ELL)
        v9 = 0xFC0FC0FC0FC0FCLL;
      else
        v9 = v7;
      if (v9)
      {
        if (v9 > 0xFC0FC0FC0FC0FCLL)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v10 = (char *)operator new(260 * v9);
      }
      else
      {
        v10 = 0;
      }
      v13 = &v10[260 * v6];
      v14 = &v10[260 * v9];
      v15 = 260 * a2;
      v16 = &v13[260 * a2];
      v17 = v13;
      do
      {
        if (!v17)
          goto LABEL_27;
        *((_DWORD *)v17 + 64) = 0;
        *((_OWORD *)v17 + 14) = 0uLL;
        *((_OWORD *)v17 + 15) = 0uLL;
        *((_OWORD *)v17 + 12) = 0uLL;
        *((_OWORD *)v17 + 13) = 0uLL;
        *((_OWORD *)v17 + 10) = 0uLL;
        *((_OWORD *)v17 + 11) = 0uLL;
        *((_OWORD *)v17 + 8) = 0uLL;
        *((_OWORD *)v17 + 9) = 0uLL;
        *((_OWORD *)v17 + 6) = 0uLL;
        *((_OWORD *)v17 + 7) = 0uLL;
        *((_OWORD *)v17 + 4) = 0uLL;
        *((_OWORD *)v17 + 5) = 0uLL;
        *((_OWORD *)v17 + 2) = 0uLL;
        *((_OWORD *)v17 + 3) = 0uLL;
        *(_OWORD *)v17 = 0uLL;
        *((_OWORD *)v17 + 1) = 0uLL;
        v17 += 260;
        v15 -= 260;
      }
      while (v15);
      v18 = *a1;
      if (v5 != *a1)
      {
        do
        {
          v5 -= 260;
          v13 -= 260;
          memcpy(v13, v5, 0x104uLL);
        }
        while (v5 != v18);
        v5 = *a1;
      }
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v5)
        operator delete(v5);
      return;
    }
LABEL_28:
    abort();
  }
  if (!a2)
    goto LABEL_16;
  v11 = &v5[260 * a2];
  v12 = 260 * a2;
  do
  {
    if (!v5)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    *((_DWORD *)v5 + 64) = 0;
    *((_OWORD *)v5 + 14) = 0uLL;
    *((_OWORD *)v5 + 15) = 0uLL;
    *((_OWORD *)v5 + 12) = 0uLL;
    *((_OWORD *)v5 + 13) = 0uLL;
    *((_OWORD *)v5 + 10) = 0uLL;
    *((_OWORD *)v5 + 11) = 0uLL;
    *((_OWORD *)v5 + 8) = 0uLL;
    *((_OWORD *)v5 + 9) = 0uLL;
    *((_OWORD *)v5 + 6) = 0uLL;
    *((_OWORD *)v5 + 7) = 0uLL;
    *((_OWORD *)v5 + 4) = 0uLL;
    *((_OWORD *)v5 + 5) = 0uLL;
    *((_OWORD *)v5 + 2) = 0uLL;
    *((_OWORD *)v5 + 3) = 0uLL;
    *(_OWORD *)v5 = 0uLL;
    *((_OWORD *)v5 + 1) = 0uLL;
    v5 += 260;
    v12 -= 260;
  }
  while (v12);
  v5 = v11;
LABEL_16:
  a1[1] = v5;
}

void std::vector<float>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 > (v4 - (uint64_t)v5) >> 2)
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (!(v10 >> 62))
    {
      v11 = v4 - (_QWORD)v7;
      if (v11 >> 1 > v10)
        v10 = v11 >> 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 62)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v13 = (char *)operator new(4 * v12);
      }
      else
      {
        v13 = 0;
      }
      v15 = &v13[4 * v9];
      v16 = 4 * a2;
      v17 = &v15[4 * a2];
      v18 = v15;
      do
      {
        if (!v18)
          goto LABEL_31;
        *(_DWORD *)v18 = 0;
        v18 += 4;
        v16 -= 4;
      }
      while (v16);
      if (v5 != v7)
      {
        v19 = v5 - v7 - 4;
        if (v19 < 0x2C)
          goto LABEL_36;
        if ((unint64_t)(v5 - &v13[v8]) < 0x20)
          goto LABEL_36;
        v20 = (v19 >> 2) + 1;
        v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
        v6 = &v5[-v21];
        v15 -= v21;
        v22 = &v13[4 * v9 - 16];
        v23 = v5 - 16;
        v24 = v20 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v25 = *(_OWORD *)v23;
          *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
          *(_OWORD *)v22 = v25;
          v22 -= 32;
          v23 -= 32;
          v24 -= 8;
        }
        while (v24);
        if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_36:
          do
          {
            v26 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *((_DWORD *)v15 - 1) = v26;
            v15 -= 4;
          }
          while (v6 != v7);
        }
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v17;
      *(_QWORD *)(a1 + 16) = &v13[4 * v12];
      if (v7)
        operator delete(v7);
      return;
    }
LABEL_32:
    abort();
  }
  if (!a2)
    goto LABEL_16;
  v14 = 4 * a2;
  do
  {
    if (!v6)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    *(_DWORD *)v6 = 0;
    v6 += 4;
    v14 -= 4;
  }
  while (v14);
  v6 = &v5[4 * a2];
LABEL_16:
  *(_QWORD *)(a1 + 8) = v6;
}

std::string *rtc::StringBuilder::operator<<(std::string *a1, int a2)
{
  int v3;
  size_t v4;
  void **p_src;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  std::string::size_type v10;
  BOOL v11;
  const std::string::value_type *v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string::size_type size;
  std::string *v16;
  std::string::value_type *v17;
  std::string::size_type v18;
  void **__src;
  size_t v21;
  unint64_t v22;
  char __str[32];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = snprintf(__str, 0x20uLL, "%u", a2);
  if (v3 < 0)
LABEL_37:
    abort();
  v4 = v3;
  if (v3 > 0x16)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_src = (void **)operator new(v6 + 1);
    v21 = v4;
    v22 = v7 | 0x8000000000000000;
    __src = p_src;
  }
  else
  {
    HIBYTE(v22) = v3;
    p_src = (void **)&__src;
  }
  v8 = (char *)p_src + v4;
  if (p_src <= (void **)__str && (char *)p_src + v4 > __str)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((_DWORD)v4)
    memcpy(p_src, __str, v4);
  *v8 = 0;
  if (SHIBYTE(v22) < 0)
  {
    v12 = (const std::string::value_type *)__src;
    v10 = v21;
    v11 = v21 == 0;
    if (!__src && v21)
      goto LABEL_36;
  }
  else
  {
    v10 = HIBYTE(v22);
    v11 = HIBYTE(v22) == 0;
    v12 = (const std::string::value_type *)&__src;
  }
  v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a1->__r_.__value_.__l.__size_;
    v14 = (a1->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v14 - size < v10)
    {
LABEL_20:
      std::string::__grow_by_and_replace(a1, v14, v10 - v14 + size, size, size, 0, v10, v12);
      if (SHIBYTE(v22) < 0)
        goto LABEL_32;
      return a1;
    }
  }
  else
  {
    v14 = 22;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (22 - v13 < v10)
      goto LABEL_20;
  }
  if (!v11)
  {
    v16 = a1;
    if ((v13 & 0x80) != 0)
    {
      v16 = (std::string *)a1->__r_.__value_.__r.__words[0];
      v17 = (std::string::value_type *)(a1->__r_.__value_.__r.__words[0] + size);
      if (v17 > v12)
      {
LABEL_29:
        memmove(v17, v12, v10);
        v18 = size + v10;
        if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
        {
          a1->__r_.__value_.__l.__size_ = v18;
          v16->__r_.__value_.__s.__data_[v18] = 0;
          if ((SHIBYTE(v22) & 0x80000000) == 0)
            return a1;
          goto LABEL_32;
        }
        *((_BYTE *)&a1->__r_.__value_.__s + 23) = v18 & 0x7F;
        v16->__r_.__value_.__s.__data_[v18] = 0;
        goto LABEL_31;
      }
    }
    else
    {
      v17 = (char *)a1 + size;
      if ((char *)a1 + size > v12)
        goto LABEL_29;
    }
    if (&v17[v10] > v12)
      goto LABEL_36;
    goto LABEL_29;
  }
LABEL_31:
  if (SHIBYTE(v22) < 0)
LABEL_32:
    operator delete(__src);
  return a1;
}

{
  int v3;
  size_t v4;
  void **p_src;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  std::string::size_type v10;
  BOOL v11;
  const std::string::value_type *v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string::size_type size;
  std::string *v16;
  std::string::value_type *v17;
  std::string::size_type v18;
  void **__src;
  size_t v21;
  unint64_t v22;
  char __str[32];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = snprintf(__str, 0x20uLL, "%d", a2);
  if (v3 < 0)
LABEL_37:
    abort();
  v4 = v3;
  if (v3 > 0x16)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_src = (void **)operator new(v6 + 1);
    v21 = v4;
    v22 = v7 | 0x8000000000000000;
    __src = p_src;
  }
  else
  {
    HIBYTE(v22) = v3;
    p_src = (void **)&__src;
  }
  v8 = (char *)p_src + v4;
  if (p_src <= (void **)__str && (char *)p_src + v4 > __str)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((_DWORD)v4)
    memcpy(p_src, __str, v4);
  *v8 = 0;
  if (SHIBYTE(v22) < 0)
  {
    v12 = (const std::string::value_type *)__src;
    v10 = v21;
    v11 = v21 == 0;
    if (!__src && v21)
      goto LABEL_36;
  }
  else
  {
    v10 = HIBYTE(v22);
    v11 = HIBYTE(v22) == 0;
    v12 = (const std::string::value_type *)&__src;
  }
  v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a1->__r_.__value_.__l.__size_;
    v14 = (a1->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v14 - size < v10)
    {
LABEL_20:
      std::string::__grow_by_and_replace(a1, v14, v10 - v14 + size, size, size, 0, v10, v12);
      if (SHIBYTE(v22) < 0)
        goto LABEL_32;
      return a1;
    }
  }
  else
  {
    v14 = 22;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (22 - v13 < v10)
      goto LABEL_20;
  }
  if (!v11)
  {
    v16 = a1;
    if ((v13 & 0x80) != 0)
    {
      v16 = (std::string *)a1->__r_.__value_.__r.__words[0];
      v17 = (std::string::value_type *)(a1->__r_.__value_.__r.__words[0] + size);
      if (v17 > v12)
      {
LABEL_29:
        memmove(v17, v12, v10);
        v18 = size + v10;
        if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
        {
          a1->__r_.__value_.__l.__size_ = v18;
          v16->__r_.__value_.__s.__data_[v18] = 0;
          if ((SHIBYTE(v22) & 0x80000000) == 0)
            return a1;
          goto LABEL_32;
        }
        *((_BYTE *)&a1->__r_.__value_.__s + 23) = v18 & 0x7F;
        v16->__r_.__value_.__s.__data_[v18] = 0;
        goto LABEL_31;
      }
    }
    else
    {
      v17 = (char *)a1 + size;
      if ((char *)a1 + size > v12)
        goto LABEL_29;
    }
    if (&v17[v10] > v12)
      goto LABEL_36;
    goto LABEL_29;
  }
LABEL_31:
  if (SHIBYTE(v22) < 0)
LABEL_32:
    operator delete(__src);
  return a1;
}

float webrtc::adm_helpers::Init(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::string *v51;
  float *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned __int8 v56;
  unsigned __int8 v57;

  v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
  v3 = *a1;
  if (v2)
  {
    (*(void (**)(uint64_t *))(v3 + 48))(a1);
    v51 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/adm_helpers.cc", 39, "0 == adm->Init()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*> const&)::t, v47, v48, v49, v50, 0);
    return webrtc::Aec3Fft::ZeroPaddedFft((webrtc::OouraFft *)v51, v52, v53, v54, v55);
  }
  if ((*(unsigned int (**)(uint64_t *, _QWORD))(v3 + 104))(a1, 0))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return result;
    goto LABEL_25;
  }
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 232))(a1)
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/adm_helpers.cc");
  }
  v57 = 0;
  if ((*(unsigned int (**)(uint64_t *, unsigned __int8 *))(*a1 + 392))(a1, &v57)
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/adm_helpers.cc");
  }
  if ((*(unsigned int (**)(uint64_t *, _QWORD))(*a1 + 400))(a1, v57)
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/adm_helpers.cc");
  }
  if ((*(unsigned int (**)(uint64_t *, _QWORD))(*a1 + 120))(a1, 0))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return result;
    goto LABEL_25;
  }
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 248))(a1)
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v33, v34, v35, v36, v37, v38, v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/adm_helpers.cc");
  }
  v56 = 0;
  if ((*(unsigned int (**)(uint64_t *, unsigned __int8 *))(*a1 + 416))(a1, &v56)
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/adm_helpers.cc");
  }
  if ((*(unsigned int (**)(uint64_t *, _QWORD))(*a1 + 424))(a1, v56)
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
LABEL_25:
    rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/engine/adm_helpers.cc");
  }
  return result;
}

float webrtc::Aec3Fft::ZeroPaddedFft(webrtc::OouraFft *a1, float *a2, uint64_t a3, int a4, uint64_t a5)
{
  webrtc::OouraFft *v7;
  float32x4_t *v8;
  unint64_t v9;
  float *v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  uint64_t v17;
  float32x4_t v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float *v24;
  float *v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  const float *v38;
  const float *v39;
  uint64_t v40;
  const float *v41;
  const float *v42;
  const float *v43;
  const float *v44;
  const float *v45;
  const float *v46;
  const float *v47;
  const float *v48;
  const float *v49;
  const float *v50;
  const float *v51;
  const float *v52;
  float result;
  _OWORD v54[16];
  _BYTE v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD v62[20];
  int v63;
  float v64;
  float32x4x2_t v65;
  float32x4x2_t v66;
  float32x4x2_t v67;
  float32x4x2_t v68;
  float32x4x2_t v69;
  float32x4x2_t v70;
  float32x4x2_t v71;
  float32x4x2_t v72;
  float32x4x2_t v73;
  float32x4x2_t v74;
  float32x4x2_t v75;
  float32x4x2_t v76;
  float32x4x2_t v77;
  float32x4x2_t v78;

  v7 = (webrtc::OouraFft *)v55;
  memset(v54, 0, sizeof(v54));
  if (a4 == 1)
  {
    if (a3)
    {
      v8 = (float32x4_t *)a2;
      v9 = (a3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v9 < 7)
        goto LABEL_12;
      if ((unint64_t)(v55 - (_BYTE *)a2) < 0x20)
        goto LABEL_12;
        goto LABEL_12;
      v11 = v9 + 1;
      v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
      v7 = (webrtc::OouraFft *)&v55[v12];
      a2 = (float *)((char *)a2 + v12);
      v14 = v8 + 1;
      v15 = (float32x4_t *)&unk_208F038A8;
      v16 = (float32x4_t *)&v57;
      v17 = v11 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v18 = vmulq_f32(*v14, *v15);
        v16[-1] = vmulq_f32(v14[-1], v15[-1]);
        *v16 = v18;
        v14 += 2;
        v16 += 2;
        v15 += 2;
        v17 -= 8;
      }
      while (v17);
      v10 = v13;
      if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_12:
        v19 = &v8->f32[a3];
        do
        {
          v20 = *a2++;
          v21 = v20;
          v22 = *v10++;
          *(float *)v7 = v21 * v22;
          v7 = (webrtc::OouraFft *)((char *)v7 + 4);
        }
        while (a2 != v19);
      }
    }
  }
  else if (!a4 && a3)
  {
    v7 = (webrtc::OouraFft *)memmove(v55, a2, 4 * a3);
  }
  webrtc::OouraFft::bitrv2_128(v7, (float *)v54);
  webrtc::OouraFft::cftfsub_128(a1, (float *)v54);
  v23 = 0;
  v24 = (float *)&dword_208F0E314;
  v25 = (float *)&dword_208F0E38C;
  v26 = (float *)((unint64_t)v54 | 0xC);
  do
  {
    v27 = *v25--;
    v28 = 0.5 - v27;
    v29 = *v24++;
    v30 = *(v26 - 1);
    v31 = (float *)((char *)&v63 + v23);
    v32 = v30 - *(float *)((char *)&v63 + v23);
    v33 = *v26 + *(float *)((char *)&v63 + v23 + 4);
    v34 = (float)(v28 * v32) - (float)(v29 * v33);
    v35 = (float)(v29 * v32) + (float)(v28 * v33);
    v36 = *v26 - v35;
    *(v26 - 1) = v30 - v34;
    *v26 = v36;
    v37 = *(float *)((char *)&v63 + v23 + 4) - v35;
    *v31 = *(float *)((char *)&v63 + v23) + v34;
    v31[1] = v37;
    v23 -= 8;
    v26 += 2;
  }
  while (v23 != -248);
  v38 = (const float *)v54 + 2;
  v65 = vld2q_f32(v38);
  v39 = (const float *)&v54[2] + 2;
  v71 = vld2q_f32(v39);
  v40 = *(_QWORD *)&v54[0];
  *(float32x4_t *)(a5 + 4) = v65.val[0];
  *(float32x4_t *)(a5 + 20) = v71.val[0];
  *(float32x4_t *)(a5 + 264) = v65.val[1];
  *(float32x4_t *)(a5 + 280) = v71.val[1];
  v41 = (const float *)&v54[4] + 2;
  v42 = (const float *)&v54[6] + 2;
  v66 = vld2q_f32(v41);
  v72 = vld2q_f32(v42);
  *(float32x4_t *)(a5 + 36) = v66.val[0];
  *(float32x4_t *)(a5 + 52) = v72.val[0];
  v43 = (const float *)&v54[8] + 2;
  v76 = vld2q_f32(v43);
  *(float32x4_t *)(a5 + 296) = v66.val[1];
  *(float32x4_t *)(a5 + 312) = v72.val[1];
  v44 = (const float *)&v54[10] + 2;
  v67 = vld2q_f32(v44);
  *(float32x4_t *)(a5 + 68) = v76.val[0];
  v45 = (const float *)&v54[12] + 2;
  v73 = vld2q_f32(v45);
  *(float32x4_t *)(a5 + 84) = v67.val[0];
  v46 = (const float *)&v54[14] + 2;
  v78 = vld2q_f32(v46);
  *(float32x4_t *)(a5 + 328) = v76.val[1];
  *(float32x4_t *)(a5 + 344) = v67.val[1];
  *(float32x4_t *)(a5 + 100) = v73.val[0];
  *(float32x4_t *)(a5 + 116) = v78.val[0];
  *(float32x4_t *)(a5 + 360) = v73.val[1];
  *(float32x4_t *)(a5 + 376) = v78.val[1];
  v47 = (const float *)&v56;
  v48 = (const float *)&v58;
  v68 = vld2q_f32(v47);
  v74 = vld2q_f32(v48);
  *(float32x4_t *)(a5 + 132) = v68.val[0];
  *(float32x4_t *)(a5 + 148) = v74.val[0];
  v49 = (const float *)&v59;
  v77 = vld2q_f32(v49);
  *(float32x4_t *)(a5 + 392) = v68.val[1];
  *(float32x4_t *)(a5 + 408) = v74.val[1];
  v50 = (const float *)&v60;
  v69 = vld2q_f32(v50);
  *(float *)a5 = *(float *)&v40 + *((float *)&v40 + 1);
  *(float32x4_t *)(a5 + 164) = v77.val[0];
  *(float32x4_t *)(a5 + 180) = v69.val[0];
  *(float32x4_t *)(a5 + 424) = v77.val[1];
  *(float32x4_t *)(a5 + 440) = v69.val[1];
  v51 = (const float *)&v61;
  v70 = vld2q_f32(v51);
  v52 = (const float *)v62;
  v75 = vld2q_f32(v52);
  *(_DWORD *)(a5 + 516) = 0;
  *(_DWORD *)(a5 + 260) = 0;
  *(float32x4_t *)(a5 + 196) = v70.val[0];
  *(float32x4_t *)(a5 + 212) = v75.val[0];
  *(float32x4_t *)(a5 + 456) = v70.val[1];
  *(float32x4_t *)(a5 + 472) = v75.val[1];
  v70.val[0].i32[0] = v62[8];
  *(_DWORD *)(a5 + 488) = v62[9];
  v70.val[1].i32[0] = v62[10];
  *(_DWORD *)(a5 + 228) = v70.val[0].i32[0];
  *(_DWORD *)(a5 + 232) = v70.val[1].i32[0];
  *(_DWORD *)(a5 + 492) = v62[11];
  v70.val[0].i32[0] = v62[12];
  *(_DWORD *)(a5 + 496) = v62[13];
  v70.val[1].i32[0] = v62[14];
  *(_DWORD *)(a5 + 236) = v70.val[0].i32[0];
  *(_DWORD *)(a5 + 240) = v70.val[1].i32[0];
  *(_DWORD *)(a5 + 500) = v62[15];
  v70.val[0].i32[0] = v62[16];
  *(_DWORD *)(a5 + 504) = v62[17];
  v70.val[1].i32[0] = v62[18];
  *(_DWORD *)(a5 + 244) = v70.val[0].i32[0];
  *(_DWORD *)(a5 + 248) = v70.val[1].i32[0];
  *(_DWORD *)(a5 + 508) = v62[19];
  *(_DWORD *)(a5 + 252) = v63;
  *(float *)(a5 + 256) = *(float *)&v40 - *((float *)&v40 + 1);
  result = v64;
  *(float *)(a5 + 512) = v64;
  return result;
}

float webrtc::Aec3Fft::PaddedFft(webrtc::OouraFft *a1, float32x4_t *__src, uint64_t a3, float32x4_t *a4, uint64_t a5, int a6, uint64_t a7)
{
  webrtc::OouraFft *v10;
  float *v11;
  float *v12;
  unint64_t v13;
  float *v14;
  float *v15;
  unint64_t v16;
  unint64_t v17;
  float *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  uint64_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  float *v28;
  float *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float32x4_t *v33;
  uint64_t v34;
  float *v35;
  float32x4_t *v36;
  uint64_t v37;
  float32x4_t v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float *v43;
  float *v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float *v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  const float *v57;
  const float *v58;
  float v59;
  float v60;
  const float *v61;
  const float *v62;
  const float *v63;
  const float *v64;
  const float *v65;
  const float *v66;
  const float *v67;
  const float *v68;
  const float *v69;
  const float *v70;
  const float *v71;
  const float *v72;
  float result;
  float v74[2];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD v89[20];
  int v90;
  float v91;
  float32x4x2_t v92;
  float32x4x2_t v93;
  float32x4x2_t v94;
  float32x4x2_t v95;
  float32x4x2_t v96;
  float32x4x2_t v97;
  float32x4x2_t v98;
  float32x4x2_t v99;
  float32x4x2_t v100;
  float32x4x2_t v101;
  float32x4x2_t v102;
  float32x4x2_t v103;
  float32x4x2_t v104;
  float32x4x2_t v105;

  v10 = a1;
  v11 = (float *)__src;
  v12 = (float *)a4;
  if (a6 == 2)
  {
    if (a5)
    {
      v13 = (a5 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      v15 = v74;
      if (v13 < 7)
        goto LABEL_28;
      if ((unint64_t)((char *)v74 - (char *)a4) < 0x20)
        goto LABEL_28;
        goto LABEL_28;
      v16 = v13 + 1;
      v17 = v16 & 0x7FFFFFFFFFFFFFF8;
      v15 = &v74[v17];
      v12 = &a4->f32[v17];
      v19 = a4 + 1;
      v20 = (float32x4_t *)&unk_208F039A8;
      v21 = (float32x4_t *)&v76;
      v22 = v16 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = vmulq_f32(*v19, *v20);
        v21[-1] = vmulq_f32(v19[-1], v20[-1]);
        *v21 = v23;
        v19 += 2;
        v20 += 2;
        v21 += 2;
        v22 -= 8;
      }
      while (v22);
      v14 = v18;
      if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_28:
        do
        {
          v24 = *v12++;
          v25 = v24;
          v26 = *v14++;
          *v15++ = v25 * v26;
        }
        while (v12 != &a4->f32[a5]);
      }
    }
    if (a3)
    {
      v27 = a5;
      v28 = &v74[a5];
      v30 = (a3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v30 < 0xB)
        goto LABEL_29;
      if ((unint64_t)((char *)&v74[v27] - (char *)__src) < 0x20)
        goto LABEL_29;
        goto LABEL_29;
      v31 = v30 + 1;
      v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
      v28 = (float *)((char *)v28 + v32);
      v29 = (float *)((char *)v29 + v32);
      v11 = &__src->f32[(unint64_t)v32 / 4];
      v33 = __src + 1;
      v34 = v27 * 4 + 16;
      v35 = &v74[v27 + 4];
      v37 = v31 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v38 = vmulq_f32(*v33, *v36);
        *((float32x4_t *)v35 - 1) = vmulq_f32(v33[-1], v36[-1]);
        *(float32x4_t *)v35 = v38;
        v33 += 2;
        v35 += 8;
        v36 += 2;
        v37 -= 8;
      }
      while (v37);
      if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v39 = *v11++;
          v40 = v39;
          v41 = *v29++;
          *v28++ = v40 * v41;
        }
        while (v11 != &__src->f32[a3]);
      }
    }
  }
  else if (!a6)
  {
    if (a5)
      a1 = (webrtc::OouraFft *)memmove(v74, a4, 4 * a5);
    if (a3)
      a1 = (webrtc::OouraFft *)memmove(&v74[a5], v11, 4 * a3);
  }
  webrtc::OouraFft::bitrv2_128(a1, v74);
  webrtc::OouraFft::cftfsub_128(v10, v74);
  v42 = 0;
  v43 = (float *)&dword_208F0E314;
  v44 = (float *)&dword_208F0E38C;
  v45 = (float *)&v75 + 1;
  do
  {
    v46 = *v44--;
    v47 = 0.5 - v46;
    v48 = *v43++;
    v49 = *(v45 - 1);
    v50 = (float *)((char *)&v90 + v42);
    v51 = v49 - *(float *)((char *)&v90 + v42);
    v52 = *v45 + *(float *)((char *)&v90 + v42 + 4);
    v53 = (float)(v47 * v51) - (float)(v48 * v52);
    v54 = (float)(v48 * v51) + (float)(v47 * v52);
    v55 = *v45 - v54;
    *(v45 - 1) = v49 - v53;
    *v45 = v55;
    v56 = *(float *)((char *)&v90 + v42 + 4) - v54;
    *v50 = *(float *)((char *)&v90 + v42) + v53;
    v50[1] = v56;
    v42 -= 8;
    v45 += 2;
  }
  while (v42 != -248);
  v57 = (const float *)&v75;
  v92 = vld2q_f32(v57);
  v58 = (const float *)&v77;
  v98 = vld2q_f32(v58);
  v59 = v74[0];
  v60 = v74[1];
  *(float32x4_t *)(a7 + 4) = v92.val[0];
  *(float32x4_t *)(a7 + 20) = v98.val[0];
  *(float32x4_t *)(a7 + 264) = v92.val[1];
  *(float32x4_t *)(a7 + 280) = v98.val[1];
  v61 = (const float *)&v78;
  v62 = (const float *)&v79;
  v93 = vld2q_f32(v61);
  v99 = vld2q_f32(v62);
  *(float32x4_t *)(a7 + 36) = v93.val[0];
  *(float32x4_t *)(a7 + 52) = v99.val[0];
  v63 = (const float *)&v80;
  v103 = vld2q_f32(v63);
  *(float32x4_t *)(a7 + 296) = v93.val[1];
  *(float32x4_t *)(a7 + 312) = v99.val[1];
  v64 = (const float *)&v81;
  v94 = vld2q_f32(v64);
  *(float32x4_t *)(a7 + 68) = v103.val[0];
  v65 = (const float *)&v82;
  v100 = vld2q_f32(v65);
  *(float32x4_t *)(a7 + 84) = v94.val[0];
  v66 = (const float *)&v83;
  v105 = vld2q_f32(v66);
  *(float32x4_t *)(a7 + 328) = v103.val[1];
  *(float32x4_t *)(a7 + 344) = v94.val[1];
  *(float32x4_t *)(a7 + 100) = v100.val[0];
  *(float32x4_t *)(a7 + 116) = v105.val[0];
  *(float32x4_t *)(a7 + 360) = v100.val[1];
  *(float32x4_t *)(a7 + 376) = v105.val[1];
  v67 = (const float *)&v84;
  v68 = (const float *)&v85;
  v95 = vld2q_f32(v67);
  v101 = vld2q_f32(v68);
  *(float32x4_t *)(a7 + 132) = v95.val[0];
  *(float32x4_t *)(a7 + 148) = v101.val[0];
  v69 = (const float *)&v86;
  v104 = vld2q_f32(v69);
  *(float32x4_t *)(a7 + 392) = v95.val[1];
  *(float32x4_t *)(a7 + 408) = v101.val[1];
  v70 = (const float *)&v87;
  v96 = vld2q_f32(v70);
  v101.val[0].f32[0] = v59 - v60;
  *(float *)a7 = v59 + v60;
  *(float32x4_t *)(a7 + 164) = v104.val[0];
  *(float32x4_t *)(a7 + 180) = v96.val[0];
  *(float32x4_t *)(a7 + 424) = v104.val[1];
  *(float32x4_t *)(a7 + 440) = v96.val[1];
  v71 = (const float *)&v88;
  v97 = vld2q_f32(v71);
  v72 = (const float *)v89;
  v102 = vld2q_f32(v72);
  *(_DWORD *)(a7 + 516) = 0;
  *(_DWORD *)(a7 + 260) = 0;
  *(float32x4_t *)(a7 + 196) = v97.val[0];
  *(float32x4_t *)(a7 + 212) = v102.val[0];
  *(float32x4_t *)(a7 + 456) = v97.val[1];
  *(float32x4_t *)(a7 + 472) = v102.val[1];
  v97.val[0].i32[0] = v89[8];
  *(_DWORD *)(a7 + 488) = v89[9];
  v97.val[1].i32[0] = v89[10];
  *(_DWORD *)(a7 + 228) = v97.val[0].i32[0];
  *(_DWORD *)(a7 + 232) = v97.val[1].i32[0];
  *(_DWORD *)(a7 + 492) = v89[11];
  v97.val[0].i32[0] = v89[12];
  *(_DWORD *)(a7 + 496) = v89[13];
  v97.val[1].i32[0] = v89[14];
  *(_DWORD *)(a7 + 236) = v97.val[0].i32[0];
  *(_DWORD *)(a7 + 240) = v97.val[1].i32[0];
  *(_DWORD *)(a7 + 500) = v89[15];
  v97.val[0].i32[0] = v89[16];
  *(_DWORD *)(a7 + 504) = v89[17];
  v97.val[1].i32[0] = v89[18];
  *(_DWORD *)(a7 + 244) = v97.val[0].i32[0];
  *(_DWORD *)(a7 + 248) = v97.val[1].i32[0];
  *(_DWORD *)(a7 + 508) = v89[19];
  *(_DWORD *)(a7 + 252) = v90;
  *(_DWORD *)(a7 + 256) = v101.val[0].i32[0];
  result = v91;
  *(float *)(a7 + 512) = v91;
  return result;
}

BOOL webrtc::InternalAPMConfig::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && *((_DWORD *)a1 + 3) == *((_DWORD *)a2 + 3)
      && a1[16] == a2[16]
      && *((_DWORD *)a1 + 5) == *((_DWORD *)a2 + 5)
      && a1[24] == a2[24]
      && a1[25] == a2[25]
      && a1[26] == a2[26]
      && *((_DWORD *)a1 + 7) == *((_DWORD *)a2 + 7)
      && a1[32] == a2[32]
      && a1[33] == a2[33]
      && a1[34] == a2[34]
      && *((float *)a1 + 9) == *((float *)a2 + 9)
      && std::operator==[abi:sn180100]<std::allocator<char>>(a1 + 40, a2 + 40);
}

BOOL std::operator==[abi:sn180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  size_t v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string *v9;

  v5 = this;
  if (__sz <= 0x16)
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
    v6 = __sz + 1;
    if (this > (std::string *)__s)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (__sz >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_11;
  v7 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((__sz | 7) != 0x17)
    v7 = __sz | 7;
  v8 = v7 + 1;
  v9 = (std::string *)operator new(v7 + 1);
  v5->__r_.__value_.__l.__size_ = __sz;
  v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
  v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  v5 = v9;
  v6 = __sz + 1;
  if (v9 <= (std::string *)__s)
  {
LABEL_8:
    if ((char *)v5 + v6 <= __s)
      goto LABEL_9;
    __break(1u);
LABEL_11:
    abort();
  }
LABEL_9:
  memmove(v5, __s, v6);
}

_QWORD *std::string::__assign_no_alias<true>(_QWORD *__dst, char *__src, size_t __len)
{
  char *v6;
  size_t v7;
  size_t v8;
  char *v9;
  char *v11;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      goto LABEL_16;
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v9 = (char *)operator new(v8);
    v6 = &v9[__len];
    if (v9 > __src || v6 <= __src)
    {
      v11 = v9;
      memcpy(v9, __src, __len);
      __dst[1] = __len;
      __dst[2] = v8 | 0x8000000000000000;
      *__dst = v11;
      goto LABEL_14;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    abort();
  }
  *((_BYTE *)__dst + 23) = __len;
  v6 = (char *)__dst + __len;
  if (__src >= (char *)__dst && v6 > __src)
    goto LABEL_15;
  if (__len)
    memmove(__dst, __src, __len);
LABEL_14:
  *v6 = 0;
  return __dst;
}

std::string *std::string::__assign_no_alias<false>(std::string *this, const std::string::value_type *__src, size_t __len)
{
  std::string::size_type v4;
  std::string *result;
  const std::string::value_type *v6;

  v4 = this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v4 <= __len)
  {
    std::string::__grow_by_and_replace(this, v4 - 1, __len - v4 + 1, this->__r_.__value_.__l.__size_, 0, this->__r_.__value_.__l.__size_, __len, __src);
    return this;
  }
  else
  {
    result = (std::string *)this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = __len;
    v6 = (char *)result + __len;
    if (result <= (std::string *)__src && v6 > __src)
    {
      __break(1u);
    }
    else
    {
      if (__len)
        memmove(result, __src, __len);
      *v6 = 0;
      return this;
    }
  }
  return result;
}

webrtc::AecState *webrtc::AecState::AecState(webrtc::AecState *this, const webrtc::EchoCanceller3Config *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  void *v37;
  size_t *v38;
  size_t *v39;
  size_t *v40;
  _DWORD *v41;
  size_t *v42;
  BOOL v45;
  uint64_t v46;
  int v47;
  void *v48;
  size_t *v49;
  size_t *v50;
  size_t *v51;
  _DWORD *v52;
  size_t *v53;
  BOOL v56;
  uint64_t v57;
  int v58;
  void *v59;
  size_t *v60;
  size_t *v61;
  size_t *v62;
  _DWORD *v63;
  size_t *v64;
  BOOL v67;
  unint64_t v68;
  uint64_t v69;
  int32x4_t *v70;
  char *v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  int32x4_t v75;
  int32x4_t *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t v90;
  size_t v92;
  uint64_t v93;
  unsigned __int8 v94;

  v6 = operator new();
  do
    v7 = __ldaxr((unsigned int *)&webrtc::AecState::instance_count_);
  while (__stlxr(v7 + 1, (unsigned int *)&webrtc::AecState::instance_count_));
  *(_QWORD *)this = v6;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)a2;
  v9 = *((_OWORD *)a2 + 5);
  v8 = *((_OWORD *)a2 + 6);
  v10 = *((_BYTE *)a2 + 112);
  *(_OWORD *)((char *)this + 72) = *((_OWORD *)a2 + 4);
  *((_BYTE *)this + 120) = v10;
  *(_OWORD *)((char *)this + 104) = v8;
  *(_OWORD *)((char *)this + 88) = v9;
  v11 = *((_OWORD *)a2 + 1);
  v12 = *((_OWORD *)a2 + 2);
  *(_OWORD *)((char *)this + 56) = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 40) = v12;
  *(_OWORD *)((char *)this + 24) = v11;
  v13 = *(_OWORD *)((char *)a2 + 168);
  v14 = *(_OWORD *)((char *)a2 + 200);
  v15 = *(_OWORD *)((char *)a2 + 152);
  *((_OWORD *)this + 12) = *(_OWORD *)((char *)a2 + 184);
  *((_OWORD *)this + 13) = v14;
  *((_OWORD *)this + 10) = v15;
  *((_OWORD *)this + 11) = v13;
  v16 = *(_OWORD *)((char *)a2 + 232);
  v17 = *(_OWORD *)((char *)a2 + 264);
  v18 = *(_OWORD *)((char *)a2 + 216);
  *((_OWORD *)this + 16) = *(_OWORD *)((char *)a2 + 248);
  *((_OWORD *)this + 17) = v17;
  *((_OWORD *)this + 14) = v18;
  *((_OWORD *)this + 15) = v16;
  v20 = *(_OWORD *)((char *)a2 + 296);
  v19 = *(_OWORD *)((char *)a2 + 312);
  v21 = *(_OWORD *)((char *)a2 + 280);
  *(_QWORD *)((char *)this + 334) = *(_QWORD *)((char *)a2 + 326);
  *((_OWORD *)this + 19) = v20;
  *((_OWORD *)this + 20) = v19;
  *((_OWORD *)this + 18) = v21;
  v22 = *(_OWORD *)((char *)a2 + 136);
  *((_OWORD *)this + 8) = *(_OWORD *)((char *)a2 + 120);
  *((_OWORD *)this + 9) = v22;
  v23 = *((_OWORD *)a2 + 21);
  v24 = *((_OWORD *)a2 + 22);
  *(_OWORD *)((char *)this + 369) = *(_OWORD *)((char *)a2 + 361);
  *(_OWORD *)((char *)this + 344) = v23;
  *(_OWORD *)((char *)this + 360) = v24;
  *((_DWORD *)this + 98) = *((_DWORD *)a2 + 96);
  *((_QWORD *)this + 50) = *((_QWORD *)a2 + 49);
  v25 = *((_QWORD *)a2 + 50);
  *((_DWORD *)this + 104) = *((_DWORD *)a2 + 102);
  *((_QWORD *)this + 51) = v25;
  v26 = *(_QWORD *)((char *)a2 + 412);
  *((_DWORD *)this + 107) = *((_DWORD *)a2 + 105);
  *(_QWORD *)((char *)this + 420) = v26;
  *((_QWORD *)this + 54) = *((_QWORD *)a2 + 53);
  v27 = *((_QWORD *)a2 + 54);
  *((_DWORD *)this + 112) = *((_DWORD *)a2 + 110);
  *((_QWORD *)this + 55) = v27;
  v28 = *(_QWORD *)((char *)a2 + 444);
  *((_DWORD *)this + 115) = *((_DWORD *)a2 + 113);
  *(_QWORD *)((char *)this + 452) = v28;
  *((_QWORD *)this + 58) = *((_QWORD *)a2 + 57);
  v29 = *((_OWORD *)a2 + 29);
  v30 = *((_OWORD *)a2 + 30);
  v31 = *((_OWORD *)a2 + 32);
  *(_OWORD *)((char *)this + 504) = *((_OWORD *)a2 + 31);
  *(_OWORD *)((char *)this + 520) = v31;
  *(_OWORD *)((char *)this + 472) = v29;
  *(_OWORD *)((char *)this + 488) = v30;
  v32 = *((_OWORD *)a2 + 33);
  v33 = *((_OWORD *)a2 + 34);
  v34 = *((_OWORD *)a2 + 35);
  *(_OWORD *)((char *)this + 577) = *(_OWORD *)((char *)a2 + 569);
  *(_OWORD *)((char *)this + 552) = v33;
  *(_OWORD *)((char *)this + 568) = v34;
  *(_OWORD *)((char *)this + 536) = v32;
  *(_OWORD *)((char *)this + 600) = *((_OWORD *)a2 + 37);
  *((_QWORD *)this + 77) = a3;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-Aec3DeactivateInitialStateResetKillSwitch", 0x30uLL, &v92);
  v35 = v94;
  v36 = (char)v94;
  v37 = (void *)v92;
  if ((v94 & 0x80u) == 0)
  {
    v38 = &v92;
  }
  else
  {
    v35 = v93;
    v38 = (size_t *)v92;
  }
  v39 = (size_t *)((char *)v38 + v35);
  if (v35 >= 7)
  {
    v40 = v38;
    do
    {
      v41 = memchr(v40, 69, v35 - 6);
      if (!v41)
        break;
      v42 = (size_t *)v41;
      if (*v41 == 1650552389 && *(_DWORD *)((char *)v41 + 3) == 1684368482)
        goto LABEL_15;
      v40 = (size_t *)((char *)v41 + 1);
      v35 = (char *)v39 - ((char *)v42 + 1);
    }
    while (v35 > 6);
  }
  v42 = v39;
LABEL_15:
  if (v36 < 0)
    operator delete(v37);
  v45 = v42 != v39 && v42 == v38;
  *((_BYTE *)this + 624) = v45;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-Aec3AecStateFullResetKillSwitch", 0x26uLL, &v92);
  v46 = v94;
  v47 = (char)v94;
  v48 = (void *)v92;
  if ((v94 & 0x80u) == 0)
  {
    v49 = &v92;
  }
  else
  {
    v46 = v93;
    v49 = (size_t *)v92;
  }
  v50 = (size_t *)((char *)v49 + v46);
  if (v46 >= 7)
  {
    v51 = v49;
    do
    {
      v52 = memchr(v51, 69, v46 - 6);
      if (!v52)
        break;
      v53 = (size_t *)v52;
      if (*v52 == 1650552389 && *(_DWORD *)((char *)v52 + 3) == 1684368482)
        goto LABEL_35;
      v51 = (size_t *)((char *)v52 + 1);
      v46 = (char *)v50 - ((char *)v53 + 1);
    }
    while (v46 > 6);
  }
  v53 = v50;
LABEL_35:
  if (v47 < 0)
    operator delete(v48);
  v56 = v53 == v50 || v53 != v49;
  *((_BYTE *)this + 625) = v56;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-Aec3AecStateSubtractorAnalyzerResetKillSwitch", 0x34uLL, &v92);
  v57 = v94;
  v58 = (char)v94;
  v59 = (void *)v92;
  if ((v94 & 0x80u) == 0)
  {
    v60 = &v92;
  }
  else
  {
    v57 = v93;
    v60 = (size_t *)v92;
  }
  v61 = (size_t *)((char *)v60 + v57);
  if (v57 >= 7)
  {
    v62 = v60;
    do
    {
      v63 = memchr(v62, 69, v57 - 6);
      if (!v63)
        break;
      v64 = (size_t *)v63;
      if (*v63 == 1650552389 && *(_DWORD *)((char *)v63 + 3) == 1684368482)
        goto LABEL_55;
      v62 = (size_t *)((char *)v63 + 1);
      v57 = (char *)v61 - ((char *)v64 + 1);
    }
    while (v57 > 6);
  }
  v64 = v61;
LABEL_55:
  if (v58 < 0)
    operator delete(v59);
  v67 = v64 == v61 || v64 != v60;
  *((_BYTE *)this + 626) = v67;
  *((_BYTE *)this + 632) = *((_BYTE *)this + 240);
  *((_DWORD *)this + 159) = *((_DWORD *)this + 58);
  *((_WORD *)this + 320) = 256;
  *((_QWORD *)this + 81) = 0;
  v68 = *((_QWORD *)this + 77);
  v69 = *((_QWORD *)this + 6) >> 6;
  *((_DWORD *)this + 164) = v69;
  *((_BYTE *)this + 660) = 0;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 84) = 0;
  if (v68)
  {
    if (v68 >> 62)
      goto LABEL_94;
    v70 = (int32x4_t *)operator new(4 * v68);
    *((_QWORD *)this + 83) = v70;
    v71 = &v70->i8[4 * v68];
    *((_QWORD *)this + 85) = v71;
    v72 = (v68 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v73 = (char *)v70;
    if (v72 < 7)
      goto LABEL_97;
    v74 = v72 + 1;
    v73 = &v70->i8[4 * (v74 & 0x7FFFFFFFFFFFFFF8)];
    v75 = vdupq_n_s32(v69);
    v76 = v70 + 1;
    v77 = v74 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v76[-1] = v75;
      *v76 = v75;
      v76 += 2;
      v77 -= 8;
    }
    while (v77);
    if (v74 != (v74 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_97:
      do
      {
        *(_DWORD *)v73 = v69;
        v73 += 4;
      }
      while (v73 != v71);
    }
    *((_QWORD *)this + 84) = v71;
  }
  *((_DWORD *)this + 172) = v69;
  *((_BYTE *)this + 696) = 0;
  *((_BYTE *)this + 728) = 0;
  webrtc::TransparentMode::Create((webrtc::AecState *)((char *)this + 8), (_QWORD *)this + 92);
  v78 = *((_QWORD *)this + 77);
  *((_WORD *)this + 372) = *((unsigned __int8 *)this + 242);
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 99) = 0;
  *((_QWORD *)this + 98) = 0;
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 94) = 0;
  *((_BYTE *)this + 768) = 0;
  if (v78)
  {
    if ((v78 & 0x8000000000000000) != 0)
      goto LABEL_94;
    v79 = (v78 - 1) >> 6;
    v80 = operator new(8 * (v79 + 1));
    v81 = v80;
    *((_QWORD *)this + 97) = v80;
    *((_QWORD *)this + 99) = v79 + 1;
    *((_QWORD *)this + 98) = v78;
    if (v78 >= 0x41)
      v82 = (v78 - 1) >> 6;
    else
      v82 = 0;
    v80[v82] = 0;
    if (v78 >= 0x40)
      bzero(v80, 8 * (v78 >> 6));
    if ((v78 & 0x3F) != 0)
      v81[v78 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v78 & 0x3F));
  }
  *((_BYTE *)this + 800) = 0;
  *((_QWORD *)this + 101) = 500;
  *((_QWORD *)this + 167) = 0;
  *((_OWORD *)this + 82) = 0u;
  *(_OWORD *)((char *)this + 1284) = 0u;
  *(_OWORD *)((char *)this + 1300) = 0u;
  *(_OWORD *)((char *)this + 1252) = 0u;
  *(_OWORD *)((char *)this + 1268) = 0u;
  *(_OWORD *)((char *)this + 1220) = 0u;
  *(_OWORD *)((char *)this + 1236) = 0u;
  *(_OWORD *)((char *)this + 1188) = 0u;
  *(_OWORD *)((char *)this + 1204) = 0u;
  *(_OWORD *)((char *)this + 1156) = 0u;
  *(_OWORD *)((char *)this + 1172) = 0u;
  *(_OWORD *)((char *)this + 1124) = 0u;
  *(_OWORD *)((char *)this + 1140) = 0u;
  *(_OWORD *)((char *)this + 1092) = 0u;
  *(_OWORD *)((char *)this + 1108) = 0u;
  *(_OWORD *)((char *)this + 1076) = 0u;
  *((_QWORD *)this + 166) = 1148846080;
  webrtc::ErleEstimator::ErleEstimator((webrtc::AecState *)((char *)this + 1344), 500, (float32x2_t *)this + 1, *((_QWORD *)this + 77));
  *((_BYTE *)this + 2000) = 0;
  *((_OWORD *)this + 124) = 0u;
  webrtc::FilterAnalyzer::FilterAnalyzer((webrtc::AecState *)((char *)this + 2008), (webrtc::AecState *)((char *)this + 8), *((_QWORD *)this + 77));
  v83 = *((_BYTE *)this + 321);
  *((_BYTE *)this + 2128) = 0;
  *((_BYTE *)this + 2132) = 0;
  *((_BYTE *)this + 2141) = v83;
  v84 = operator new();
  do
    v85 = __ldaxr((unsigned int *)&webrtc::StationarityEstimator::instance_count_);
  while (__stlxr(v85 + 1, (unsigned int *)&webrtc::StationarityEstimator::instance_count_));
  *((_QWORD *)this + 268) = v84;
  *((_QWORD *)this + 302) = 0;
  *((_QWORD *)this + 302) = 0;
  *(_OWORD *)((char *)this + 2733) = 0u;
  *((_OWORD *)this + 170) = 0u;
  *((_OWORD *)this + 169) = 0u;
  *((_OWORD *)this + 168) = 0u;
  *((_OWORD *)this + 167) = 0u;
  *((_OWORD *)this + 166) = 0u;
  *((_OWORD *)this + 165) = 0u;
  *((_OWORD *)this + 164) = 0u;
  *((_OWORD *)this + 163) = 0u;
  *((_OWORD *)this + 162) = 0u;
  *((_OWORD *)this + 161) = 0u;
  *((_OWORD *)this + 160) = 0u;
  *((_OWORD *)this + 159) = 0u;
  *((_OWORD *)this + 158) = 0u;
  *((_OWORD *)this + 157) = 0u;
  *((_OWORD *)this + 156) = 0u;
  *((_OWORD *)this + 155) = 0u;
  *((_OWORD *)this + 154) = 0u;
  *((_OWORD *)this + 153) = 0u;
  *((_OWORD *)this + 152) = 0u;
  *((_OWORD *)this + 151) = 0u;
  *(_QWORD *)((char *)this + 2741) = 0;
  *(_OWORD *)((char *)this + 2712) = 0u;
  *(_OWORD *)((char *)this + 2728) = 0u;
  *(_OWORD *)((char *)this + 2680) = 0u;
  *(_OWORD *)((char *)this + 2696) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *(_OWORD *)((char *)this + 2616) = 0u;
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *(_OWORD *)((char *)this + 2568) = 0u;
  *(_OWORD *)((char *)this + 2520) = 0u;
  *(_OWORD *)((char *)this + 2536) = 0u;
  *(_OWORD *)((char *)this + 2488) = 0u;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *(_OWORD *)((char *)this + 2456) = 0u;
  *(_OWORD *)((char *)this + 2472) = 0u;
  *(_OWORD *)((char *)this + 2424) = 0u;
  *(_OWORD *)((char *)this + 2440) = 0u;
  *((_BYTE *)this + 2140) = 0;
  if (*((_BYTE *)this + 2132))
    *((_BYTE *)this + 2132) = 0;
  webrtc::ReverbModelEstimator::ReverbModelEstimator((webrtc::AecState *)((char *)this + 2752), (webrtc::AecState *)((char *)this + 8), *((_QWORD *)this + 77));
  *((_DWORD *)this + 764) = 0;
  *((_OWORD *)this + 190) = 0u;
  *((_OWORD *)this + 189) = 0u;
  *((_OWORD *)this + 188) = 0u;
  *((_OWORD *)this + 187) = 0u;
  *((_OWORD *)this + 186) = 0u;
  *((_OWORD *)this + 185) = 0u;
  *((_OWORD *)this + 184) = 0u;
  *((_OWORD *)this + 183) = 0u;
  *((_OWORD *)this + 182) = 0u;
  *((_OWORD *)this + 181) = 0u;
  *((_OWORD *)this + 180) = 0u;
  *((_OWORD *)this + 179) = 0u;
  *((_OWORD *)this + 178) = 0u;
  *((_OWORD *)this + 177) = 0u;
  *((_OWORD *)this + 176) = 0u;
  *((_OWORD *)this + 175) = 0u;
  v86 = *((_QWORD *)this + 77);
  *((_QWORD *)this + 383) = 0;
  *((_QWORD *)this + 385) = 0;
  *((_QWORD *)this + 384) = 0;
  if (v86)
  {
    if ((v86 & 0x8000000000000000) == 0)
    {
      v87 = (v86 - 1) >> 6;
      v88 = operator new(8 * (v87 + 1));
      v89 = v88;
      *((_QWORD *)this + 383) = v88;
      *((_QWORD *)this + 385) = v87 + 1;
      *((_QWORD *)this + 384) = v86;
      if (v86 >= 0x41)
        v90 = (v86 - 1) >> 6;
      else
        v90 = 0;
      v88[v90] = 0;
      if (v86 >= 0x40)
        bzero(v88, 8 * (v86 >> 6));
      if ((v86 & 0x3F) != 0)
        v89[v86 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v86 & 0x3F));
      return this;
    }
LABEL_94:
    abort();
  }
  return this;
}

void webrtc::AecState::~AecState(webrtc::AecState *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v2 = (void *)*((_QWORD *)this + 383);
  if (v2)
    operator delete(v2);
  webrtc::ReverbModelEstimator::~ReverbModelEstimator((webrtc::AecState *)((char *)this + 2752));
  v3 = *((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = 0;
  if (v3)
    MEMORY[0x20BD0ADEC](v3, 0xC400A2AC0F1);
  webrtc::FilterAnalyzer::~FilterAnalyzer((webrtc::AecState *)((char *)this + 2008));
  webrtc::ErleEstimator::~ErleEstimator((webrtc::AecState *)((char *)this + 1344));
  v4 = (void *)*((_QWORD *)this + 97);
  if (v4)
    operator delete(v4);
  v5 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (void *)*((_QWORD *)this + 83);
  if (v6)
  {
    *((_QWORD *)this + 84) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v7)
    MEMORY[0x20BD0ADEC](v7, 0xC400A2AC0F1);
}

void webrtc::AecState::HandleEchoPathChange(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  webrtc::SignalDependentErleEstimator *v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  webrtc::SignalDependentErleEstimator *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;

  if (*(_BYTE *)(a1 + 625))
    v3 = *(_DWORD *)(a2 + 4) == 0;
  else
    v3 = 1;
  if (v3)
  {
    if (*(_BYTE *)a2)
    {
      webrtc::FullBandErleEstimator::Reset((webrtc::FullBandErleEstimator *)(a1 + 1352));
      webrtc::SubbandErleEstimator::Reset((webrtc::SubbandErleEstimator *)(a1 + 1456));
      v4 = *(webrtc::SignalDependentErleEstimator **)(a1 + 1968);
      if (v4)
        webrtc::SignalDependentErleEstimator::Reset(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 2056) = 0;
    *(_QWORD *)(a1 + 2048) = 0;
    *(_QWORD *)(a1 + 2064) = 0;
    v5 = *(_QWORD *)(a1 + 2072);
    for (i = *(_QWORD *)(a1 + 2080); v5 != i; v5 += 80)
    {
      v7 = *(_DWORD *)(a1 + 2020);
      *(_QWORD *)(v5 + 8) = 0;
      *(_DWORD *)v5 = v7;
      *(_BYTE *)(v5 + 24) = 0;
      *(_DWORD *)(v5 + 28) = 0;
      *(_DWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 64) = 0;
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 48) = 0;
      *(_DWORD *)(v5 + 72) = -10;
    }
    v8 = *(void **)(a1 + 2096);
    v9 = *(_QWORD *)(a1 + 2104) - (_QWORD)v8;
    if (v9 >= 1)
      bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
    *(_BYTE *)(a1 + 2000) = 0;
    *(_OWORD *)(a1 + 1984) = 0u;
    if (!*(_BYTE *)(a1 + 624))
    {
      *(_BYTE *)(a1 + 641) = 1;
      *(_QWORD *)(a1 + 648) = 0;
    }
    v10 = *(_QWORD *)(a1 + 736);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    webrtc::FullBandErleEstimator::Reset((webrtc::FullBandErleEstimator *)(a1 + 1352));
    webrtc::SubbandErleEstimator::Reset((webrtc::SubbandErleEstimator *)(a1 + 1456));
    v11 = *(webrtc::SignalDependentErleEstimator **)(a1 + 1968);
    if (v11)
      webrtc::SignalDependentErleEstimator::Reset(v11);
    *(_QWORD *)(a1 + 1976) = 0;
    *(_QWORD *)(a1 + 1336) = 0;
    v12 = *(_QWORD *)(a1 + 784);
    if (v12)
    {
      v13 = *(_QWORD *)(a1 + 776);
      if (v12 >= 0x40)
        bzero(*(void **)(a1 + 776), 8 * (v12 >> 6));
      if ((v12 & 0x3F) != 0)
        *(_QWORD *)(v13 + 8 * (v12 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v12 & 0x3F));
    }
    *(_BYTE *)(a1 + 745) = 0;
    *(_QWORD *)(a1 + 752) = 0;
  }
  if (*(_BYTE *)(a1 + 626))
  {
    v14 = *(_QWORD *)(a1 + 3072);
    if (v14)
    {
      v15 = *(void **)(a1 + 3064);
      if (v14 >= 0x40)
        bzero(v15, 8 * (v14 >> 6));
      if ((v14 & 0x3F) != 0)
        *((_QWORD *)v15 + (v14 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v14 & 0x3F));
    }
  }
}

void webrtc::AecState::Update(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD *a5, unint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  uint64_t v40;
  float32x4_t v41;
  unint64_t v42;
  __int128 v43;
  _BYTE *v44;
  _BYTE *v45;
  float32x4_t *v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  int v52;
  float32x4_t *v53;
  unint64_t v54;
  unint64_t v55;
  int *v56;
  int *v57;
  int *v58;
  int v60;
  int *v61;
  int v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  BOOL v71;
  float *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  float v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float32x4_t *v107;
  float32x4_t *v108;
  float32x4_t **v109;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  uint64_t v119;
  uint64_t v120;
  float32x4_t **v121;
  uint64_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  _DWORD *v135;
  int v136;
  int v137;
  BOOL v138;
  int v139;
  int v140;
  webrtc::SignalDependentErleEstimator *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  float v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float **v151;
  float *v152;
  uint64_t v153;
  float *v154;
  uint64_t v155;
  int v156;
  int v157;
  float v158;
  BOOL v159;
  float *v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  float v165;
  uint64_t i;
  float v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  BOOL v172;
  BOOL v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  _BOOL4 v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  BOOL v181;
  int v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  size_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  float v190;
  uint64_t *v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unsigned int *v206;
  uint64_t v207;
  _QWORD *v208;
  unsigned int v209;
  __int128 v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t *v213;
  _OWORD v214[16];
  float v215;
  unsigned __int8 v216;
  float32x4_t v217[16];
  float v218;

  v212 = a3;
  v19 = a14;
  v20 = (uint64_t *)(a1 + 3064);
  if (a14)
    v21 = a13;
  else
    v21 = 0;
  v22 = 0;
  v23 = 0;
  if (a14)
  {
    v24 = 0;
    v25 = *v20;
    v26 = (float *)(v21 + 2080);
    LOBYTE(v27) = 1;
    do
    {
      v30 = *(v26 - 1);
      v29 = *v26;
      v31 = *(v26 - 2);
      v32 = v31 < (float)(*v26 * 0.5);
      v33 = *v26 > 25600.0;
      if (v30 >= (float)(*v26 * 0.2))
        v33 = 0;
      if (v30 < v31)
        v31 = *(v26 - 1);
      v34 = v29 > 57600.0;
      if (v31 <= (float)(v29 * 1.5))
        v34 = 0;
      v35 = v30 < (float)(*v26 * 0.05) || v32;
      v36 = v24 >> 6;
      v37 = 1 << v24;
      v38 = v29 <= 160000.0 || v35 == 0;
      if (v38)
        v28 = *(_QWORD *)(v25 + 8 * v36) & ~v37;
      else
        v28 = *(_QWORD *)(v25 + 8 * v36) | v37;
      *(_QWORD *)(v25 + 8 * v36) = v28;
      v22 = (v28 & v37) != 0 || v22;
      if ((_BYTE)v23)
        v23 = 1;
      else
        v23 = v33;
      if ((_BYTE)v27)
        v27 = v34;
      else
        v27 = 0;
      ++v24;
      v26 += 523;
    }
    while (a14 != v24);
  }
  else
  {
    v27 = 1;
  }
  v216 = 0;
  v215 = 0.0;
  if (a6)
    v39 = a5;
  else
    v39 = 0;
  webrtc::FilterAnalyzer::Update(a1 + 2008, v39, a6, a7, &v216, &v215);
  if (*(_BYTE *)(a1 + 242))
  {
    v42 = *(_QWORD *)(a1 + 1984);
    if (*(_BYTE *)(a2 + 32) && (!*(_BYTE *)(a1 + 728) || *(_QWORD *)(a1 + 704) != *(_QWORD *)(a2 + 8)))
    {
      v41 = *(float32x4_t *)a2;
      v43 = *(_OWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 32);
      *(float32x4_t *)(a1 + 696) = v41;
      *(_OWORD *)(a1 + 712) = v43;
      *(_BYTE *)(a1 + 660) = 1;
    }
    v44 = *(_BYTE **)(a1 + 2096);
    v45 = *(_BYTE **)(a1 + 2104);
    if (v42 > 0x1F3 || !*(_BYTE *)(a1 + 728))
    {
      if (v45 != v44)
        memmove(*(void **)(a1 + 664), v44, v45 - v44);
      goto LABEL_53;
    }
    v46 = *(float32x4_t **)(a1 + 664);
    v47 = *(_QWORD *)(a1 + 672) - (_QWORD)v46;
    if ((uint64_t)v47 >= 1)
    {
      v48 = *(_DWORD *)(a1 + 656);
      v49 = v47 >> 2;
      v50 = (v47 >> 2) - (v47 > 3) + 1;
      if (v50 < 8)
      {
        v51 = *(unsigned int **)(a1 + 664);
LABEL_51:
        v55 = v49 + 1;
        do
        {
          *v51++ = v48;
          --v55;
        }
        while (v55 > 1);
        goto LABEL_53;
      }
      v49 -= v50 & 0xFFFFFFFFFFFFFFF8;
      v51 = &v46->u32[v50 & 0xFFFFFFFFFFFFFFF8];
      v41 = (float32x4_t)vdupq_n_s32(v48);
      v53 = v46 + 1;
      v54 = v50 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v53[-1] = v41;
        *v53 = v41;
        v53 += 2;
        v54 -= 8;
      }
      while (v54);
      if (v50 != (v50 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_51;
    }
LABEL_53:
    v56 = *(int **)(a1 + 664);
    v57 = *(int **)(a1 + 672);
    v58 = v56 + 1;
    if (v56 != v57 && v58 != v57)
    {
      v60 = *v56;
      v61 = v56 + 1;
      do
      {
        v63 = *v61++;
        v62 = v63;
        if (v63 < v60)
        {
          v60 = v62;
          v56 = v58;
        }
        v58 = v61;
      }
      while (v61 != v57);
    }
    v52 = *v56;
    *(_DWORD *)(a1 + 688) = v52;
    goto LABEL_62;
  }
  v52 = *(_DWORD *)(a1 + 688);
LABEL_62:
  v64 = (*(_DWORD *)(*a7 + 36) - v52 + *(_DWORD *)*a7) % *(_DWORD *)*a7;
  v65 = *(_QWORD *)(*a7 + 8);
  if (v64 >= (*(_QWORD *)(*a7 + 16) - v65) >> 5)
    goto LABEL_211;
  v204 = *(_QWORD *)(*a7 + 8);
  v205 = v64;
  v66 = v65 + 32 * v64;
  v67 = *(unsigned int *)(v66 + 4);
  v206 = (unsigned int *)(v66 + 4);
  if ((int)v67 < 1)
    goto LABEL_70;
  v68 = 0;
  v69 = *(_QWORD *)(v66 + 8);
  v70 = 1;
  v71 = 1;
  while (1)
  {
    v72 = (float *)(v69 + 4 * (int)v68);
    v73 = v72[11];
    v74 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*v72 * *v72) + 0.0) + (float)(v72[1] * v72[1])) + (float)(v72[2] * v72[2])) + (float)(v72[3] * v72[3])) + (float)(v72[4] * v72[4])) + (float)(v72[5] * v72[5])) + (float)(v72[6] * v72[6])) + (float)(v72[7] * v72[7])) + (float)(v72[8] * v72[8])) + (float)(v72[9] * v72[9]))
                                                                                                + (float)(v72[10] * v72[10]))
                                                                                        + (float)(v73 * v73))
                                                                                + (float)(v72[12] * v72[12]))
                                                                        + (float)(v72[13] * v72[13]))
                                                                + (float)(v72[14] * v72[14]))
                                                        + (float)(v72[15] * v72[15]))
                                                + (float)(v72[16] * v72[16]))
                                        + (float)(v72[17] * v72[17]))
                                + (float)(v72[18] * v72[18]))
                        + (float)(v72[19] * v72[19]))
                + (float)(v72[20] * v72[20]))
        + (float)(v72[21] * v72[21]);
    v75 = v72[33];
    v76 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v74 + (float)(v72[22] * v72[22])) + (float)(v72[23] * v72[23])) + (float)(v72[24] * v72[24])) + (float)(v72[25] * v72[25])) + (float)(v72[26] * v72[26])) + (float)(v72[27] * v72[27])) + (float)(v72[28] * v72[28])) + (float)(v72[29] * v72[29])) + (float)(v72[30] * v72[30])) + (float)(v72[31] * v72[31]))
                                                                                                + (float)(v72[32] * v72[32]))
                                                                                        + (float)(v75 * v75))
                                                                                + (float)(v72[34] * v72[34]))
                                                                        + (float)(v72[35] * v72[35]))
                                                                + (float)(v72[36] * v72[36]))
                                                        + (float)(v72[37] * v72[37]))
                                                + (float)(v72[38] * v72[38]))
                                        + (float)(v72[39] * v72[39]))
                                + (float)(v72[40] * v72[40]))
                        + (float)(v72[41] * v72[41]))
                + (float)(v72[42] * v72[42]))
        + (float)(v72[43] * v72[43]);
    v77 = v72[55];
    v78 = v72[62];
    if ((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v76 + (float)(v72[44] * v72[44])) + (float)(v72[45] * v72[45])) + (float)(v72[46] * v72[46])) + (float)(v72[47] * v72[47])) + (float)(v72[48] * v72[48])) + (float)(v72[49] * v72[49])) + (float)(v72[50] * v72[50])) + (float)(v72[51] * v72[51])) + (float)(v72[52] * v72[52]))
                                                                                               + (float)(v72[53] * v72[53]))
                                                                                       + (float)(v72[54] * v72[54]))
                                                                               + (float)(v77 * v77))
                                                                       + (float)(v72[56] * v72[56]))
                                                               + (float)(v72[57] * v72[57]))
                                                       + (float)(v72[58] * v72[58]))
                                               + (float)(v72[59] * v72[59]))
                                       + (float)(v72[60] * v72[60]))
                               + (float)(v72[61] * v72[61]))
                       + (float)(v78 * v78))
               + (float)(v72[63] * v72[63])) > (float)((float)(*(float *)(a1 + 324) * *(float *)(a1 + 324)) * 64.0))
      break;
    v71 = v70 < v67;
    v68 += 64;
    ++v70;
    if (v67 << 6 == v68)
      goto LABEL_70;
  }
  *(_QWORD *)(a1 + 1992) += v71;
  if (v71)
  {
    v79 = *(_BYTE *)(a1 + 2000) == 0;
    v209 = 1;
  }
  else
  {
LABEL_70:
    v209 = 0;
    v79 = 0;
  }
  *(_QWORD *)(a1 + 1984) += v79;
  v80 = *(_QWORD *)(a1 + 2752);
  if (*(_QWORD *)(a1 + 2760) == v80)
    goto LABEL_211;
  v211 = v20;
  v213 = a7;
  v81 = a7[1];
  v82 = *(_QWORD **)(v81 + 8);
  v83 = *(_QWORD *)(v81 + 16) - (_QWORD)v82;
  if (!v83)
    goto LABEL_211;
  v203 = v21;
  v207 = a2;
  v84 = *(float *)(*(_QWORD *)v80 + 144);
  v85 = a1 + 2800;
  v86 = 0xAAAAAAAAAAAAAAABLL * (v83 >> 3);
  v87 = 0xFC0FC0FC0FC0FC1 * ((uint64_t)(v82[1] - *v82) >> 2);
  v88 = (*(_DWORD *)(v81 + 36) + v52 + *(_DWORD *)v81) % *(_DWORD *)v81;
  if (*(_DWORD *)v81 - 1 > v88)
    v89 = v88 + 1;
  else
    v89 = 0;
  if (v87 < 2)
  {
    if (v86 <= v89)
      goto LABEL_211;
    v109 = (float32x4_t **)&v82[3 * v89];
    v108 = *v109;
    if (v109[1] == *v109)
      goto LABEL_211;
    if (v84 > 0.0)
    {
      if (v85 >= (unint64_t)v108[16].u64 + 4 || (unint64_t)v108 >= a1 + 3060)
      {
        v111 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2816), v108[1]), v84);
        *(float32x4_t *)(a1 + 2800) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2800), *v108), v84);
        *(float32x4_t *)(a1 + 2816) = v111;
        v112 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2848), v108[3]), v84);
        *(float32x4_t *)(a1 + 2832) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2832), v108[2]), v84);
        *(float32x4_t *)(a1 + 2848) = v112;
        v113 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2880), v108[5]), v84);
        *(float32x4_t *)(a1 + 2864) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2864), v108[4]), v84);
        *(float32x4_t *)(a1 + 2880) = v113;
        v114 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2912), v108[7]), v84);
        *(float32x4_t *)(a1 + 2896) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2896), v108[6]), v84);
        *(float32x4_t *)(a1 + 2912) = v114;
        v115 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2944), v108[9]), v84);
        *(float32x4_t *)(a1 + 2928) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2928), v108[8]), v84);
        *(float32x4_t *)(a1 + 2944) = v115;
        v116 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2976), v108[11]), v84);
        *(float32x4_t *)(a1 + 2960) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2960), v108[10]), v84);
        *(float32x4_t *)(a1 + 2976) = v116;
        v117 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 3008), v108[13]), v84);
        *(float32x4_t *)(a1 + 2992) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2992), v108[12]), v84);
        *(float32x4_t *)(a1 + 3008) = v117;
        v41 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 3024), v108[14]), v84);
        v118 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 3040), v108[15]), v84);
        *(float32x4_t *)(a1 + 3024) = v41;
        *(float32x4_t *)(a1 + 3040) = v118;
        v119 = 64;
      }
      else
      {
        v119 = 0;
      }
      v120 = v119;
      do
      {
        *(float *)(v85 + v120 * 4) = v84 * (float)(*(float *)(v85 + v120 * 4) + v108->f32[v120]);
        ++v120;
      }
      while (v120 != 65);
    }
    if (v86 <= v88)
      goto LABEL_211;
    v121 = (float32x4_t **)&v82[3 * v88];
    v107 = *v121;
    if (v121[1] == *v121)
      goto LABEL_211;
  }
  else
  {
    if (v86 <= v89)
      goto LABEL_211;
    v90 = &v82[3 * v89];
    v91 = *v90;
    v92 = v90[1] - *v90;
    if (v92)
      v93 = v91;
    else
      v93 = 0;
    *(float *)&v210 = v84;
    if (*(float *)&v210 > 0.0)
    {
      v94 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2816), v217[1]), *(float *)&v210);
      *(float32x4_t *)(a1 + 2800) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2800), v217[0]), *(float *)&v210);
      *(float32x4_t *)(a1 + 2816) = v94;
      v95 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2848), v217[3]), *(float *)&v210);
      *(float32x4_t *)(a1 + 2832) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2832), v217[2]), *(float *)&v210);
      *(float32x4_t *)(a1 + 2848) = v95;
      v96 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2880), v217[5]), *(float *)&v210);
      *(float32x4_t *)(a1 + 2864) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2864), v217[4]), *(float *)&v210);
      *(float32x4_t *)(a1 + 2880) = v96;
      v97 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2912), v217[7]), *(float *)&v210);
      *(float32x4_t *)(a1 + 2896) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2896), v217[6]), *(float *)&v210);
      *(float32x4_t *)(a1 + 2912) = v97;
      v98 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2944), v217[9]), *(float *)&v210);
      *(float32x4_t *)(a1 + 2928) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2928), v217[8]), *(float *)&v210);
      *(float32x4_t *)(a1 + 2944) = v98;
      v99 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2976), v217[11]), *(float *)&v210);
      *(float32x4_t *)(a1 + 2960) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2960), v217[10]), *(float *)&v210);
      *(float32x4_t *)(a1 + 2976) = v99;
      v100 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 3008), v217[13]), *(float *)&v210);
      *(float32x4_t *)(a1 + 2992) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 2992), v217[12]), *(float *)&v210);
      *(float32x4_t *)(a1 + 3008) = v100;
      v101 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 3040), v217[15]), *(float *)&v210);
      *(float32x4_t *)(a1 + 3024) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(a1 + 3024), v217[14]), *(float *)&v210);
      *(float32x4_t *)(a1 + 3040) = v101;
      *(float *)(a1 + 3056) = *(float *)&v210 * (float)(*(float *)(a1 + 3056) + v218);
    }
    v102 = *(_QWORD *)(v81 + 8);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v81 + 16) - v102) >> 3) <= v88)
      goto LABEL_211;
    v103 = (uint64_t *)(v102 + 24 * v88);
    v104 = *v103;
    v105 = v103[1] - *v103;
    if (v105)
      v106 = v104;
    else
      v106 = 0;
    v107 = v217;
  }
  v122 = 0;
  *(_QWORD *)&v210 = a10;
  v208 = (_QWORD *)(a1 + 2752);
  if ((unint64_t)((char *)v214 - (char *)v107) >= 0x20 && (unint64_t)&v214[-175] - a1 >= 0x20)
  {
    v123 = vaddq_f32(v107[1], *(float32x4_t *)(a1 + 2816));
    v214[0] = vaddq_f32(*v107, *(float32x4_t *)(a1 + 2800));
    v214[1] = v123;
    v124 = vaddq_f32(v107[3], *(float32x4_t *)(a1 + 2848));
    v214[2] = vaddq_f32(v107[2], *(float32x4_t *)(a1 + 2832));
    v214[3] = v124;
    v125 = vaddq_f32(v107[5], *(float32x4_t *)(a1 + 2880));
    v214[4] = vaddq_f32(v107[4], *(float32x4_t *)(a1 + 2864));
    v214[5] = v125;
    v126 = vaddq_f32(v107[7], *(float32x4_t *)(a1 + 2912));
    v214[6] = vaddq_f32(v107[6], *(float32x4_t *)(a1 + 2896));
    v214[7] = v126;
    v127 = vaddq_f32(v107[9], *(float32x4_t *)(a1 + 2944));
    v214[8] = vaddq_f32(v107[8], *(float32x4_t *)(a1 + 2928));
    v214[9] = v127;
    v128 = vaddq_f32(v107[11], *(float32x4_t *)(a1 + 2976));
    v214[10] = vaddq_f32(v107[10], *(float32x4_t *)(a1 + 2960));
    v214[11] = v128;
    v129 = vaddq_f32(v107[13], *(float32x4_t *)(a1 + 3008));
    v214[12] = vaddq_f32(v107[12], *(float32x4_t *)(a1 + 2992));
    v214[13] = v129;
    v41 = vaddq_f32(v107[14], *(float32x4_t *)(a1 + 3024));
    v130 = vaddq_f32(v107[15], *(float32x4_t *)(a1 + 3040));
    v122 = 64;
    v214[14] = v41;
    v214[15] = v130;
  }
  v131 = a4;
  v132 = v122;
  do
  {
    v41.f32[0] = v107->f32[v132] + *(float *)(v85 + v132 * 4);
    *(_DWORD *)((char *)v214 + v132 * 4) = v41.i32[0];
    ++v132;
  }
  while (v132 != 65);
  if (*(_BYTE *)(a1 + 320))
  {
    v133 = *(_DWORD *)(a1 + 688);
    v134 = *(unsigned __int8 *)(a1 + 660);
    webrtc::EchoAudibility::UpdateRenderNoiseEstimator((float32x4_t *)(a1 + 2128), (const webrtc::SpectrumBuffer *)v213[1], (const webrtc::BlockBuffer *)*v213, *(_BYTE *)(a1 + 660), v41);
    if (v134 || *(_BYTE *)(a1 + 2141))
    {
      v135 = (_DWORD *)v213[2];
      v136 = v135[8];
      v137 = v135[9];
      v138 = __OFSUB__(v137, v136);
      v139 = v137 - v136;
      if ((v139 < 0) ^ v138 | (v139 == 0))
        v139 += *v135;
      v140 = v139 - v133;
      if (v139 < v133)
        v140 = -1;
      webrtc::StationarityEstimator::UpdateStationarityFlags(a1 + 2144, v213[1], a1 + 2800, 65, ((*(_DWORD *)(v213[1] + 36) + v133 + *(_DWORD *)v213[1]) % *(_DWORD *)v213[1]), v140 + 1);
    }
  }
  if (*(_BYTE *)(a1 + 640))
  {
    webrtc::FullBandErleEstimator::Reset((webrtc::FullBandErleEstimator *)(a1 + 1352));
    webrtc::SubbandErleEstimator::Reset((webrtc::SubbandErleEstimator *)(a1 + 1456));
    v141 = *(webrtc::SignalDependentErleEstimator **)(a1 + 1968);
    if (v141)
      webrtc::SignalDependentErleEstimator::Reset(v141);
  }
  v142 = v131;
  if (v131)
    v143 = (uint64_t)v212;
  else
    v143 = 0;
  if (a12)
    v144 = a11;
  else
    v144 = 0;
  if (!a10)
    a9 = 0;
  v212 = (uint64_t *)v143;
  webrtc::ErleEstimator::Update((unint64_t *)(a1 + 1344), (uint64_t)v213, v143, v131, (float *)v214, (uint64_t)v144, a12, v40, a9, v210, v211);
  v147 = v213[1];
  v148 = (*(_DWORD *)(v147 + 36) + *(_DWORD *)(a1 + 688) + *(_DWORD *)v147) % *(_DWORD *)v147;
  v150 = v147 + 8;
  v149 = *(_QWORD *)(v147 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v150 + 8) - v149) >> 3) <= v148)
  {
LABEL_211:
    __break(1u);
    return;
  }
  v151 = (float **)(v149 + 24 * (int)v148);
  v152 = *v151;
  v153 = (char *)v151[1] - (char *)*v151;
  if (v153)
    v154 = v152;
  else
    v154 = 0;
  webrtc::ErlEstimator::Update(a1 + 808, (unint64_t **)v211, v154, 0xFC0FC0FC0FC0FC1 * (v153 >> 2), v144, v146);
  if (!*(_BYTE *)(a1 + 292))
  {
    v156 = *(unsigned __int8 *)(a1 + 2000);
    goto LABEL_155;
  }
  v156 = *(unsigned __int8 *)(a1 + 2000);
  if (!*(_BYTE *)(a1 + 745))
  {
    v158 = v215;
    *(_BYTE *)(a1 + 800) = 0;
    if (!v156)
      goto LABEL_155;
    goto LABEL_143;
  }
  v157 = *(unsigned __int8 *)(a1 + 242);
  v158 = v215;
  *(_BYTE *)(a1 + 800) = 0;
  if (!v156)
    goto LABEL_155;
  if (!v157)
  {
LABEL_143:
    v161 = *v206;
    if ((int)v161 >= 1)
    {
      v162 = 0;
      v163 = 0;
      v164 = *(_QWORD *)(v204 + 32 * v205 + 8);
      v165 = 0.0;
      while ((*(_QWORD *)(v204 + 32 * v205 + 16) - v164) >> 2 > (unint64_t)(int)((_DWORD)v163 << 6))
      {
        for (i = 0; i != 256; i += 4)
        {
          v167 = fabsf(*(float *)(v164 + 4 * v162 + i));
          if (v165 < v167)
            v165 = v167;
        }
        ++v163;
        v162 += 64;
        if (v163 == v161)
          goto LABEL_153;
      }
      goto LABEL_211;
    }
    v165 = 0.0;
LABEL_153:
    v159 = (float)((float)(v158 * v165) * 10.0) > 32000.0;
    goto LABEL_154;
  }
  if (a14)
  {
    v159 = 0;
    v160 = (float *)(v203 + 2088);
    do
    {
      while (v159 || *(v160 - 1) > 20000.0)
      {
        v159 = 1;
        v160 += 523;
        if (!--v19)
          goto LABEL_154;
      }
      v159 = *v160 > 20000.0;
      v160 += 523;
      --v19;
    }
    while (v19);
LABEL_154:
    *(_BYTE *)(a1 + 800) = v159;
    goto LABEL_155;
  }
  v156 = 1;
LABEL_155:
  v168 = v209;
  if (v156)
    v169 = 0;
  else
    v169 = v209;
  v170 = *(_QWORD *)(a1 + 648) + v169;
  *(_QWORD *)(a1 + 648) = v170;
  v171 = *(unsigned __int8 *)(a1 + 641);
  if (*(_BYTE *)(a1 + 632))
    v172 = v170 < 0x4E2;
  else
    v172 = (float)(*(float *)(a1 + 636) * 250.0) > (float)v170;
  *(_BYTE *)(a1 + 641) = v172;
  v38 = v171 == 0;
  v173 = !v172;
  if (v38)
    v173 = 0;
  *(_BYTE *)(a1 + 640) = v173;
  v174 = *(_QWORD *)(a1 + 736);
  if (v174
    && ((*(void (**)(uint64_t, _QWORD, _QWORD, _BOOL8, uint64_t, uint64_t, _QWORD, BOOL))(*(_QWORD *)v174 + 32))(v174, *(unsigned int *)(a1 + 688), v216, v22, v23, v27, v209, v156 != 0), (v175 = *(_QWORD *)(a1 + 736)) != 0))
  {
    v176 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v175 + 16))(v175) ^ 1;
  }
  else
  {
    v176 = 1;
  }
  v177 = 0;
  if (*(_BYTE *)(a1 + 2000))
    v178 = 0;
  else
    v178 = v168;
  v179 = *(_QWORD *)(a1 + 752) + v178;
  *(_QWORD *)(a1 + 752) = v179;
  v180 = *(_QWORD *)(a1 + 760) + v178;
  *(_QWORD *)(a1 + 760) = v180;
  v181 = *(_BYTE *)(a1 + 768) | v22;
  *(_BYTE *)(a1 + 768) = v181;
  if (v180 >= 0x65 && v179 >= 0x33)
    v177 = (*(unsigned __int8 *)(v207 + 32) | v181) != 0;
  v182 = v176 & v177;
  *(_BYTE *)(a1 + 745) = v182;
  if (*(_BYTE *)(a1 + 744))
  {
    v183 = *(_QWORD *)(a1 + 784);
    if (v183)
    {
      v184 = *(_QWORD *)(a1 + 776);
      v185 = v183 >> 6;
      if (v182)
      {
        if (v183 >= 0x40)
          memset(*(void **)(a1 + 776), 255, 8 * v185);
        if ((v183 & 0x3F) != 0)
          *(_QWORD *)(v184 + 8 * v185) |= 0xFFFFFFFFFFFFFFFFLL >> -(v183 & 0x3F);
      }
      else
      {
        v186 = 8 * v185;
        if (v183 >= 0x40)
          bzero(*(void **)(a1 + 776), v186);
        if ((v183 & 0x3F) != 0)
          *(_QWORD *)(v184 + v186) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v183 & 0x3F));
      }
    }
  }
  v187 = *(_BYTE *)(a1 + 320);
  if (v187)
  {
    v188 = 0;
    v189 = a1 + 2424;
    v190 = 0.0;
    v191 = v212;
    do
    {
      v192 = *(unsigned __int8 *)(v189 + v188 + 260);
      if (*(_BYTE *)(v189 + v188 + 260))
        v192 = *(_DWORD *)(v189 + 4 * v188) == 0;
      v190 = v190 + (float)v192;
      ++v188;
    }
    while (v188 != 65);
    v187 = (float)(v190 * 0.015385) > 0.75;
  }
  else
  {
    v191 = v212;
  }
  v193 = *(_QWORD *)(a1 + 2032) - *(_QWORD *)(a1 + 2024);
  v194 = 0xAAAAAAAAAAAAAAABLL * (v193 >> 3);
  if (v193)
    v195 = *(_QWORD *)(a1 + 2024);
  else
    v195 = 0;
  v196 = *(_QWORD *)(a1 + 1440) - *(_QWORD *)(a1 + 1432);
  v197 = v196 >> 3;
  if (v196)
    v198 = *(_QWORD *)(a1 + 1432);
  else
    v198 = 0;
  v199 = *(_QWORD *)(a1 + 664);
  v200 = (*(_QWORD *)(a1 + 672) - v199) >> 2;
  if (*(_QWORD *)(a1 + 672) == v199)
    v199 = 0;
  webrtc::ReverbModelEstimator::Update(v208, v195, v194, v191, v142, v198, v197, v155, v199, v200, (_QWORD *)(a1 + 776), v187);
  if (*(_QWORD *)(a1 + 1392) == *(_QWORD *)(a1 + 1384))
    goto LABEL_211;
  if (*(_QWORD *)(a1 + 1416) == *(_QWORD *)(a1 + 1408))
    goto LABEL_211;
  v201 = *(_QWORD **)(a1 + 1968);
  if (v201)
  {
    if (v201[86] == v201[85] || v201[89] == v201[88] || v201[92] == v201[91])
      goto LABEL_211;
  }
  if (*(_QWORD *)(a1 + 2760) == *(_QWORD *)(a1 + 2752))
    goto LABEL_211;
  v202 = *(_QWORD *)(a1 + 736);
  if (v202)
    (*(void (**)(uint64_t))(*(_QWORD *)v202 + 16))(v202);
  if (*(_QWORD *)(a1 + 2784) == *(_QWORD *)(a1 + 2776))
    goto LABEL_211;
}

float32_t webrtc::`anonymous namespace'::ComputeAvgRenderReverb(webrtc::SpectrumBuffer const&,int,float,webrtc::ReverbModel *,rtc::ArrayView<float,65l>)::$_0::operator()(unint64_t a1, uint64_t a2, int a3, float32x4_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32_t result;

  bzero(a4, 0x104uLL);
  if (a1)
  {
    v7 = 0;
    v8 = a2;
    do
    {
      v9 = (float32x4_t *)(a2 + 260 * v7);
      if (&v9[16].i32[1] <= (__int32 *)a4 || v9 >= (float32x4_t *)&a4[16].i32[1])
      {
        v11 = vaddq_f32(v9[1], a4[1]);
        *a4 = vaddq_f32(*v9, *a4);
        a4[1] = v11;
        v12 = vaddq_f32(v9[3], a4[3]);
        a4[2] = vaddq_f32(v9[2], a4[2]);
        a4[3] = v12;
        v13 = vaddq_f32(v9[5], a4[5]);
        a4[4] = vaddq_f32(v9[4], a4[4]);
        a4[5] = v13;
        v14 = vaddq_f32(v9[7], a4[7]);
        a4[6] = vaddq_f32(v9[6], a4[6]);
        a4[7] = v14;
        v15 = vaddq_f32(v9[9], a4[9]);
        a4[8] = vaddq_f32(v9[8], a4[8]);
        a4[9] = v15;
        v16 = vaddq_f32(v9[11], a4[11]);
        a4[10] = vaddq_f32(v9[10], a4[10]);
        a4[11] = v16;
        v17 = vaddq_f32(v9[13], a4[13]);
        a4[12] = vaddq_f32(v9[12], a4[12]);
        a4[13] = v17;
        v18 = vaddq_f32(v9[14], a4[14]);
        v19 = vaddq_f32(v9[15], a4[15]);
        v20 = 64;
        a4[14] = v18;
        a4[15] = v19;
      }
      else
      {
        v20 = 0;
      }
      v21 = v20;
      do
      {
        a4->f32[v21] = *(float *)(v8 + v21 * 4) + a4->f32[v21];
        ++v21;
      }
      while (v21 != 65);
      ++v7;
      v8 += 260;
    }
    while (v7 != a1);
  }
  v22 = 1.0 / (float)a1;
  v23 = vmulq_n_f32(a4[1], v22);
  *a4 = vmulq_n_f32(*a4, v22);
  a4[1] = v23;
  v24 = vmulq_n_f32(a4[3], v22);
  a4[2] = vmulq_n_f32(a4[2], v22);
  a4[3] = v24;
  v25 = vmulq_n_f32(a4[5], v22);
  a4[4] = vmulq_n_f32(a4[4], v22);
  a4[5] = v25;
  v26 = vmulq_n_f32(a4[7], v22);
  a4[6] = vmulq_n_f32(a4[6], v22);
  a4[7] = v26;
  v27 = vmulq_n_f32(a4[9], v22);
  a4[8] = vmulq_n_f32(a4[8], v22);
  a4[9] = v27;
  v28 = vmulq_n_f32(a4[11], v22);
  a4[10] = vmulq_n_f32(a4[10], v22);
  a4[11] = v28;
  v29 = vmulq_n_f32(a4[13], v22);
  a4[12] = vmulq_n_f32(a4[12], v22);
  a4[13] = v29;
  v30 = vmulq_n_f32(a4[15], v22);
  a4[14] = vmulq_n_f32(a4[14], v22);
  a4[15] = v30;
  result = v22 * a4[16].f32[0];
  a4[16].f32[0] = result;
  return result;
}

_QWORD *webrtc::WebRtcAecm_CreateCore(webrtc *this)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  _OWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _OWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _OWORD *v14;
  unsigned int **DelayEstimatorFarend;
  _QWORD *DelayEstimator;
  _DWORD *v17;

  v1 = malloc_type_calloc(1uLL, 0x4388uLL, 0x10B004073429A03uLL);
  v2 = malloc_type_malloc(0x30uLL, 0x1010040521CD160uLL);
  if (!v2)
    goto LABEL_14;
  v4 = v2;
  v5 = malloc_type_malloc(0x120uLL, 0x6B6E1D91uLL);
  v4[5] = v5;
  if (!v5)
  {
    free(v4);
LABEL_14:
    v1[3] = 0;
    goto LABEL_21;
  }
  *((_OWORD *)v4 + 1) = xmmword_208F03BA0;
  *((_DWORD *)v4 + 8) = 0;
  *v4 = 0;
  v4[1] = 0;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  v1[3] = v4;
  v6 = malloc_type_malloc(0x30uLL, 0x1010040521CD160uLL);
  if (!v6)
  {
LABEL_16:
    v1[4] = 0;
    goto LABEL_21;
  }
  v7 = v6;
  v8 = malloc_type_malloc(0x120uLL, 0x6B6E1D91uLL);
  v7[5] = v8;
  if (!v8)
  {
    free(v7);
    goto LABEL_16;
  }
  *((_OWORD *)v7 + 1) = xmmword_208F03BA0;
  *((_DWORD *)v7 + 8) = 0;
  *v7 = 0;
  v7[1] = 0;
  v8[16] = 0u;
  v8[17] = 0u;
  v8[14] = 0u;
  v8[15] = 0u;
  v8[12] = 0u;
  v8[13] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  v8[8] = 0u;
  v8[9] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  *v8 = 0u;
  v8[1] = 0u;
  v1[4] = v7;
  v9 = malloc_type_malloc(0x30uLL, 0x1010040521CD160uLL);
  if (!v9)
  {
LABEL_18:
    v1[5] = 0;
    goto LABEL_21;
  }
  v10 = v9;
  v11 = malloc_type_malloc(0x120uLL, 0x6B6E1D91uLL);
  v10[5] = v11;
  if (!v11)
  {
    free(v10);
    goto LABEL_18;
  }
  *((_OWORD *)v10 + 1) = xmmword_208F03BA0;
  *((_DWORD *)v10 + 8) = 0;
  *v10 = 0;
  v10[1] = 0;
  v11[16] = 0u;
  v11[17] = 0u;
  v11[14] = 0u;
  v11[15] = 0u;
  v11[12] = 0u;
  v11[13] = 0u;
  v11[10] = 0u;
  v11[11] = 0u;
  v11[8] = 0u;
  v11[9] = 0u;
  v11[6] = 0u;
  v11[7] = 0u;
  v11[4] = 0u;
  v11[5] = 0u;
  v11[2] = 0u;
  v11[3] = 0u;
  *v11 = 0u;
  v11[1] = 0u;
  v1[5] = v10;
  v12 = malloc_type_malloc(0x30uLL, 0x1010040521CD160uLL);
  if (!v12)
  {
LABEL_20:
    v1[6] = 0;
    goto LABEL_21;
  }
  v13 = v12;
  v14 = malloc_type_malloc(0x120uLL, 0x6B6E1D91uLL);
  v13[5] = v14;
  if (!v14)
  {
    free(v13);
    goto LABEL_20;
  }
  *((_OWORD *)v13 + 1) = xmmword_208F03BA0;
  *((_DWORD *)v13 + 8) = 0;
  *v13 = 0;
  v13[1] = 0;
  v14[16] = 0u;
  v14[17] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  *v14 = 0u;
  v14[1] = 0u;
  v1[6] = v13;
  DelayEstimatorFarend = (unsigned int **)webrtc::WebRtc_CreateDelayEstimatorFarend((webrtc *)0x41, (webrtc *)0x64);
  v1[72] = DelayEstimatorFarend;
  if (DelayEstimatorFarend)
  {
    DelayEstimator = webrtc::WebRtc_CreateDelayEstimator(DelayEstimatorFarend, 0);
    v1[73] = DelayEstimator;
    if (DelayEstimator)
    {
      *(_DWORD *)(DelayEstimator[2] + 44) = 0;
      v17 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
      if (v17)
      {
        *v17 = 7;
        v1[2160] = v17;
        v1[2003] = ((unint64_t)v1 + 15019) & 0xFFFFFFFFFFFFFFE0;
        v1[2004] = ((unint64_t)v1 + 15307) & 0xFFFFFFFFFFFFFFE0;
        v1[2005] = ((unint64_t)v1 + 15595) & 0xFFFFFFFFFFFFFFE0;
        v1[2006] = ((unint64_t)v1 + 15867) & 0xFFFFFFFFFFFFFFF0;
        v1[2000] = ((unint64_t)v1 + 14417) & 0xFFFFFFFFFFFFFFF0;
        v1[2001] = ((unint64_t)v1 + 14563) & 0xFFFFFFFFFFFFFFF0;
        v1[2002] = ((unint64_t)v1 + 14727) & 0xFFFFFFFFFFFFFFE0;
        return v1;
      }
      v1[2160] = 0;
    }
  }
LABEL_21:
  webrtc::WebRtcAecm_FreeCore((uint64_t)v1, v3);
  return 0;
}

void webrtc::WebRtcAecm_FreeCore(uint64_t a1, void *a2)
{
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  uint64_t v7;
  void **v8;
  void *v9;

  if (a1)
  {
    v3 = *(void ***)(a1 + 24);
    if (v3)
    {
      free(v3[5]);
      free(v3);
    }
    v4 = *(void ***)(a1 + 32);
    if (v4)
    {
      free(v4[5]);
      free(v4);
    }
    v5 = *(void ***)(a1 + 40);
    if (v5)
    {
      free(v5[5]);
      free(v5);
    }
    v6 = *(void ***)(a1 + 48);
    if (v6)
    {
      free(v6[5]);
      free(v6);
    }
    webrtc::WebRtc_FreeDelayEstimator(*(void ***)(a1 + 584), a2);
    v7 = *(_QWORD *)(a1 + 576);
    if (v7)
    {
      free(*(void **)v7);
      *(_QWORD *)v7 = 0;
      v8 = *(void ***)(v7 + 16);
      if (v8)
      {
        free(v8[1]);
        v8[1] = 0;
        free(*v8);
        free(v8);
      }
      free((void *)v7);
    }
    v9 = *(void **)(a1 + 17280);
    if (v9)
      free(v9);
    free((void *)a1);
  }
}

int32x2_t webrtc::WebRtcAecm_InitEchoPathCore(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int32x2_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int16x4_t *v16;
  int32x4_t *v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x2_t result;

  v2 = a1[2000];
  *(_OWORD *)*(_QWORD *)&v2 = *(_OWORD *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(*(_QWORD *)&v2 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(*(_QWORD *)&v2 + 64) = v5;
  *(_OWORD *)(*(_QWORD *)&v2 + 16) = v3;
  *(_OWORD *)(*(_QWORD *)&v2 + 32) = v4;
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  *(_WORD *)(*(_QWORD *)&v2 + 128) = *(_WORD *)(a2 + 128);
  *(_OWORD *)(*(_QWORD *)&v2 + 96) = v7;
  *(_OWORD *)(*(_QWORD *)&v2 + 112) = v8;
  *(_OWORD *)(*(_QWORD *)&v2 + 80) = v6;
  v9 = a1[2001];
  *(_OWORD *)*(_QWORD *)&v9 = *(_OWORD *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(*(_QWORD *)&v9 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(*(_QWORD *)&v9 + 64) = v12;
  *(_OWORD *)(*(_QWORD *)&v9 + 16) = v10;
  *(_OWORD *)(*(_QWORD *)&v9 + 32) = v11;
  v13 = *(_OWORD *)(a2 + 80);
  v14 = *(_OWORD *)(a2 + 96);
  v15 = *(_OWORD *)(a2 + 112);
  *(_WORD *)(*(_QWORD *)&v9 + 128) = *(_WORD *)(a2 + 128);
  *(_OWORD *)(*(_QWORD *)&v9 + 96) = v14;
  *(_OWORD *)(*(_QWORD *)&v9 + 112) = v15;
  *(_OWORD *)(*(_QWORD *)&v9 + 80) = v13;
  v16 = (int16x4_t *)a1[2001];
  v17 = (int32x4_t *)a1[2002];
  v18 = vshll_n_s16(v16[1], 0x10uLL);
  *v17 = vshll_n_s16(*v16, 0x10uLL);
  v17[1] = v18;
  v19 = vshll_n_s16(v16[3], 0x10uLL);
  v17[2] = vshll_n_s16(v16[2], 0x10uLL);
  v17[3] = v19;
  v20 = vshll_n_s16(v16[5], 0x10uLL);
  v17[4] = vshll_n_s16(v16[4], 0x10uLL);
  v17[5] = v20;
  v21 = vshll_n_s16(v16[7], 0x10uLL);
  v17[6] = vshll_n_s16(v16[6], 0x10uLL);
  v17[7] = v21;
  v22 = vshll_n_s16(v16[9], 0x10uLL);
  v17[8] = vshll_n_s16(v16[8], 0x10uLL);
  v17[9] = v22;
  v23 = vshll_n_s16(v16[11], 0x10uLL);
  v17[10] = vshll_n_s16(v16[10], 0x10uLL);
  v17[11] = v23;
  v24 = vshll_n_s16(v16[13], 0x10uLL);
  v17[12] = vshll_n_s16(v16[12], 0x10uLL);
  v17[13] = v24;
  v25 = vshll_n_s16(v16[15], 0x10uLL);
  v17[14] = vshll_n_s16(v16[14], 0x10uLL);
  v17[15] = v25;
  v17[16].i32[0] = v16[16].u16[0] << 16;
  result = vdup_n_s32(0x3E8u);
  a1[2154] = result;
  a1[2155].i32[0] = 0x7FFFFFFF;
  a1[2158].i16[0] = 0;
  return result;
}

uint64_t webrtc::WebRtcAecm_InitCore(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  uint64_t result;
  int32x4_t v20;

  if (a2 != 16000 && a2 != 8000)
    return 0xFFFFFFFFLL;
  *(_WORD *)(a1 + 568) = (unsigned __int16)a2 / 0x1F40u;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 32) = 0;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  bzero(*(void **)(v4 + 40), *(_QWORD *)(v4 + 24) * *(_QWORD *)(v4 + 16));
  v5 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v5 + 32) = 0;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  bzero(*(void **)(v5 + 40), *(_QWORD *)(v5 + 24) * *(_QWORD *)(v5 + 16));
  v6 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(v6 + 32) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  bzero(*(void **)(v6 + 40), *(_QWORD *)(v6 + 24) * *(_QWORD *)(v6 + 16));
  v7 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v7 + 32) = 0;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  bzero(*(void **)(v7 + 40), *(_QWORD *)(v7 + 24) * *(_QWORD *)(v7 + 16));
  bzero((void *)(a1 + 14988), 0x3F0uLL);
  *(_DWORD *)(a1 + 572) = 666;
  *(_DWORD *)(a1 + 14004) = 0;
  v8 = *(_QWORD *)(a1 + 576);
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = *(_QWORD *)(v8 + 16);
  bzero(*(void **)(v9 + 8), 4 * *(int *)(v9 + 16));
  bzero(*(void **)v9, 4 * *(int *)(v9 + 16));
  bzero(*(void **)v8, 4 * *(int *)(v8 + 12));
  *(_DWORD *)(v8 + 8) = 0;
  v10 = *(_QWORD *)(a1 + 584);
  if (!v10)
    return 0xFFFFFFFFLL;
  v11 = *(uint64_t **)(v10 + 16);
  bzero((void *)v11[1], 4 * *((int *)v11 + 7));
  bzero((void *)v11[2], 4 * *((int *)v11 + 6));
  LODWORD(v12) = *((_DWORD *)v11 + 7);
  if ((v12 & 0x80000000) == 0)
  {
    v13 = 0;
    v14 = *v11;
    v15 = v11[8];
    do
    {
      v16 = 4 * v13;
      *(_DWORD *)(v14 + v16) = 10240;
      *(_DWORD *)(v15 + v16) = 0;
      v12 = *((int *)v11 + 7);
    }
    while (v13++ < v12);
  }
  v11[4] = 0x400000004000;
  *((_DWORD *)v11 + 10) = -2;
  *((_DWORD *)v11 + 13) = -2;
  *((_DWORD *)v11 + 14) = v12;
  *((_DWORD *)v11 + 15) = 0;
  *((_DWORD *)v11 + 18) = 0;
  bzero(*(void **)v10, 4 * *(int *)(v10 + 12));
  *(_DWORD *)(v10 + 8) = 0;
  bzero((void *)(a1 + 594), 0x32C8uLL);
  *(_OWORD *)(a1 + 13984) = 0u;
  *(_OWORD *)(a1 + 13968) = 0u;
  *(_OWORD *)(a1 + 13952) = 0u;
  *(_OWORD *)(a1 + 13936) = 0u;
  *(_OWORD *)(a1 + 13920) = 0u;
  *(_OWORD *)(a1 + 13904) = 0u;
  *(_OWORD *)(a1 + 13888) = 0u;
  *(_OWORD *)(a1 + 13872) = 0u;
  *(_OWORD *)(a1 + 13856) = 0u;
  *(_OWORD *)(a1 + 13840) = 0u;
  *(_OWORD *)(a1 + 13824) = 0u;
  *(_OWORD *)(a1 + 13808) = 0u;
  *(_OWORD *)(a1 + 13792) = 0u;
  *(_OWORD *)(a1 + 13776) = 0u;
  *(_OWORD *)(a1 + 13760) = 0u;
  *(_OWORD *)(a1 + 13744) = 0u;
  *(_OWORD *)(a1 + 13728) = 0u;
  *(_OWORD *)(a1 + 13712) = 0u;
  *(_OWORD *)(a1 + 13696) = 0u;
  *(_OWORD *)(a1 + 13680) = 0u;
  *(_OWORD *)(a1 + 13664) = 0u;
  *(_OWORD *)(a1 + 13648) = 0u;
  *(_OWORD *)(a1 + 13632) = 0u;
  *(_OWORD *)(a1 + 13616) = 0u;
  *(_OWORD *)(a1 + 13600) = 0u;
  *(_DWORD *)(a1 + 13596) = 100;
  *(_DWORD *)(a1 + 14000) = -65535;
  *(_OWORD *)(a1 + 14386) = 0u;
  *(_OWORD *)(a1 + 14008) = 0u;
  *(_OWORD *)(a1 + 14024) = 0u;
  *(_OWORD *)(a1 + 14040) = 0u;
  *(_OWORD *)(a1 + 14056) = 0u;
  *(_OWORD *)(a1 + 14072) = 0u;
  *(_OWORD *)(a1 + 14088) = 0u;
  *(_OWORD *)(a1 + 14104) = 0u;
  *(_OWORD *)(a1 + 14120) = 0u;
  *(_OWORD *)(a1 + 14136) = 0u;
  *(_OWORD *)(a1 + 14152) = 0u;
  *(_OWORD *)(a1 + 14168) = 0u;
  *(_OWORD *)(a1 + 14184) = 0u;
  *(_OWORD *)(a1 + 14200) = 0u;
  *(_OWORD *)(a1 + 14216) = 0u;
  *(_OWORD *)(a1 + 14232) = 0u;
  *(_OWORD *)(a1 + 14248) = 0u;
  *(_OWORD *)(a1 + 14264) = 0u;
  *(_OWORD *)(a1 + 14280) = 0u;
  *(_OWORD *)(a1 + 14296) = 0u;
  *(_OWORD *)(a1 + 14312) = 0u;
  *(_OWORD *)(a1 + 14328) = 0u;
  *(_OWORD *)(a1 + 14344) = 0u;
  if (a2 == 8000)
  else
  *(_OWORD *)(a1 + 14360) = 0uLL;
  *(_OWORD *)(a1 + 14376) = 0uLL;
  webrtc::WebRtcAecm_InitEchoPathCore((int32x2_t *)a1, (uint64_t)v18);
  *(_QWORD *)(a1 + 16438) = 0;
  *(_WORD *)(a1 + 17228) = 0;
  *(_OWORD *)(a1 + 16056) = 0u;
  *(_OWORD *)(a1 + 16072) = 0u;
  *(_OWORD *)(a1 + 16088) = 0u;
  *(_OWORD *)(a1 + 16104) = 0u;
  *(_OWORD *)(a1 + 16120) = 0u;
  *(_OWORD *)(a1 + 16136) = 0u;
  *(_OWORD *)(a1 + 16152) = 0u;
  *(_OWORD *)(a1 + 16168) = 0u;
  *(_OWORD *)(a1 + 16184) = 0u;
  *(_OWORD *)(a1 + 16200) = 0u;
  *(_OWORD *)(a1 + 16216) = 0u;
  *(_OWORD *)(a1 + 16232) = 0u;
  *(_OWORD *)(a1 + 16248) = 0u;
  *(_OWORD *)(a1 + 16264) = 0u;
  *(_OWORD *)(a1 + 16280) = 0u;
  *(_OWORD *)(a1 + 16296) = 0u;
  *(_OWORD *)(a1 + 16312) = 0u;
  *(_OWORD *)(a1 + 16328) = 0u;
  *(_OWORD *)(a1 + 16344) = 0u;
  *(_OWORD *)(a1 + 16360) = 0u;
  *(_OWORD *)(a1 + 16376) = 0u;
  *(_OWORD *)(a1 + 16392) = 0u;
  *(_OWORD *)(a1 + 16408) = 0u;
  *(_OWORD *)(a1 + 16424) = 0u;
  *(_WORD *)(a1 + 17230) = 1;
  bzero((void *)(a1 + 16708), 0x208uLL);
  result = 0;
  *(_OWORD *)(a1 + 16448) = xmmword_208F03BB0;
  *(_OWORD *)(a1 + 16464) = xmmword_208F03BC0;
  *(_OWORD *)(a1 + 16480) = xmmword_208F03BD0;
  *(_OWORD *)(a1 + 16496) = xmmword_208F03BE0;
  *(_OWORD *)(a1 + 16512) = xmmword_208F03BF0;
  *(_OWORD *)(a1 + 16528) = xmmword_208F03C00;
  *(_OWORD *)(a1 + 16544) = xmmword_208F03C10;
  *(_OWORD *)(a1 + 16560) = xmmword_208F03C20;
  v20 = vdupq_n_s32(0x48400u);
  *(int32x4_t *)(a1 + 16576) = v20;
  *(int32x4_t *)(a1 + 16592) = v20;
  *(int32x4_t *)(a1 + 16608) = v20;
  *(_DWORD *)(a1 + 16624) = 295936;
  *(int32x4_t *)(a1 + 16628) = v20;
  *(int32x4_t *)(a1 + 16644) = v20;
  *(int32x4_t *)(a1 + 16660) = v20;
  *(int32x4_t *)(a1 + 16676) = v20;
  *(int32x4_t *)(a1 + 16692) = v20;
  *(_QWORD *)(a1 + 17244) = 0x401000080007FFFLL;
  *(_WORD *)(a1 + 17252) = 0;
  *(_QWORD *)(a1 + 17256) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 17266) = 0x1000C0001000100;
  *(_DWORD *)(a1 + 17274) = 83887616;
  return result;
}

uint64_t webrtc::WebRtcAecm_ProcessFrame(unsigned int *a1, char *__src, char *a3, char *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t result;
  int v82;
  int v83;
  BOOL v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  _OWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 *v100;
  __int128 *v101;
  __int128 *v102;
  _OWORD *v103;
  char v104[128];
  char v105[128];
  char v106[128];
  _BYTE __dst[160];
  __int16 v108[72];
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v103 = 0;
  v10 = *a1;
  if ((int)v10 < 177)
  {
    v11 = 0;
    v12 = 80;
  }
  else
  {
    v11 = 256 - v10;
    memcpy((char *)a1 + 2 * v10 + 56, __src, 2 * (256 - (int)v10));
    *a1 = 0;
    v12 = v10 - 176;
    if ((v10 - 176) < 0x101)
    {
      LODWORD(v10) = 0;
    }
    else
    {
      memcpy(a1 + 14, &__src[2 * v11], 0x200uLL);
      LODWORD(v10) = 0;
      v11 = 256;
      v12 = -176;
    }
  }
  v13 = a1 + 14;
  memcpy((char *)a1 + 2 * (int)v10 + 56, &__src[2 * v11], 2 * v12);
  v14 = a1[2];
  v15 = ((v14 - (a1[1] + a1[3]) + ((a1[3] - v14 + a1[1]) & ~((int)(a1[3] - v14 + a1[1]) >> 31)) + 255) & 0xFFFFFF00)
      + a1[1]
      + a1[3];
  v16 = v15 - v14;
  if ((int)(v15 - v14) >= 511)
    v17 = 511;
  else
    v17 = v15 - v14;
  v18 = v15 - v14 - ((v15 - v14 - v17 + 255) & 0xFFFFFF00) - 256;
  if (v16 >= 256)
    v19 = v18;
  else
    v19 = v16;
  *a1 += v12;
  a1[1] = v19;
  a1[3] = v14;
  if (v19 < 177)
  {
    v20 = 0;
    v21 = 80;
  }
  else
  {
    v20 = 256 - v19;
    memcpy(__dst, (char *)v13 + 2 * v19, 2 * (256 - v19));
    a1[1] = 0;
    v21 = v19 - 176;
    if ((v19 - 176) < 0x101)
    {
      v19 = 0;
    }
    else
    {
      memcpy(&__dst[2 * v20], a1 + 14, 0x200uLL);
      v19 = 0;
      v21 = -176;
      v20 = 256;
    }
  }
  memcpy(&__dst[2 * v20], (char *)v13 + 2 * v19, 2 * v21);
  a1[1] = v19 + v21;
  v22 = (uint64_t *)*((_QWORD *)a1 + 3);
  if (v22)
  {
    v23 = v22[2];
    v24 = *v22;
    v25 = v22[1];
    if (*((_DWORD *)v22 + 8))
      v26 = v23 - v24 + v25;
    else
      v26 = v25 - v24;
    v27 = v23 - v26;
    if (v27 >= 0x50)
      v28 = 80;
    else
      v28 = v27;
    v29 = v23 - v25;
    v30 = v28 - v29;
    if (v28 <= v29)
    {
      v30 = v28;
    }
    else
    {
      memcpy((void *)(v22[5] + v22[3] * v25), __dst, v22[3] * v29);
      v25 = 0;
      v22[1] = 0;
      *((_DWORD *)v22 + 8) = 1;
    }
    memcpy((void *)(v22[5] + v22[3] * v25), &__dst[v22[3] * (v28 - v30)], v22[3] * v30);
    v22[1] += v30;
  }
  if (a3)
  {
    v31 = (uint64_t *)*((_QWORD *)a1 + 4);
    if (v31)
    {
      v32 = v31[2];
      v33 = *v31;
      v34 = v31[1];
      if (*((_DWORD *)v31 + 8))
        v35 = v32 - v33 + v34;
      else
        v35 = v34 - v33;
      v36 = v32 - v35;
      if (v36 >= 0x50)
        v37 = 80;
      else
        v37 = v36;
      v38 = v32 - v34;
      v39 = v37 - v38;
      if (v37 <= v38)
      {
        v39 = v37;
      }
      else
      {
        memcpy((void *)(v31[5] + v31[3] * v34), a3, v31[3] * v38);
        v34 = 0;
        v31[1] = 0;
        *((_DWORD *)v31 + 8) = 1;
      }
      memcpy((void *)(v31[5] + v31[3] * v34), &a3[v31[3] * (v37 - v39)], v31[3] * v39);
      v31[1] += v39;
    }
  }
  if (a4)
  {
    v40 = (uint64_t *)*((_QWORD *)a1 + 5);
    if (v40)
    {
      v41 = v40[2];
      v42 = *v40;
      v43 = v40[1];
      if (*((_DWORD *)v40 + 8))
        v44 = v41 - v42 + v43;
      else
        v44 = v43 - v42;
      v60 = v41 - v44;
      if (v60 >= 0x50)
        v61 = 80;
      else
        v61 = v60;
      v62 = v41 - v43;
      v63 = v61 - v62;
      if (v61 <= v62)
      {
        v63 = v61;
      }
      else
      {
        memcpy((void *)(v40[5] + v40[3] * v43), a4, v40[3] * v62);
        v43 = 0;
        v40[1] = 0;
        *((_DWORD *)v40 + 8) = 1;
      }
      memcpy((void *)(v40[5] + v40[3] * v43), &a4[v40[3] * (v61 - v63)], v40[3] * v63);
      v40[1] += v63;
    }
    v45 = (uint64_t *)(a1 + 12);
    v64 = *((_QWORD *)a1 + 3);
    if (v64)
    {
      while (1)
      {
        v66 = *(_QWORD *)v64;
        if (*(_DWORD *)(v64 + 32))
        {
          if ((unint64_t)(*(_QWORD *)(v64 + 16) - v66 + *(_QWORD *)(v64 + 8)) < 0x40)
            goto LABEL_104;
        }
        else if ((unint64_t)(*(_QWORD *)(v64 + 8) - v66) < 0x40)
        {
          goto LABEL_104;
        }
        v101 = 0;
        v102 = 0;
        WebRtc_ReadBuffer((uint64_t *)v64, &v102, v106, 0x40uLL);
        WebRtc_ReadBuffer(*((uint64_t **)a1 + 4), &v101, v105, 0x40uLL);
        v100 = 0;
        WebRtc_ReadBuffer(*((uint64_t **)a1 + 5), &v100, v104, 0x40uLL);
        webrtc::WebRtcAecm_ProcessBlock((uint64_t)a1, v102, v101, v100, v108);
        if (v67 == -1)
          return 0xFFFFFFFFLL;
        if (v108)
        {
          v68 = (uint64_t *)*v45;
          if (*v45)
            break;
        }
LABEL_85:
        v64 = *((_QWORD *)a1 + 3);
        if (!v64)
          goto LABEL_104;
      }
      v69 = v68[2];
      v70 = *v68;
      if (*((_DWORD *)v68 + 8))
      {
        v65 = v68[1];
        v71 = v70 - v65;
        if (v71 >= 0x40)
          v72 = 64;
        else
          v72 = v71;
        v73 = v69 - v65;
        v74 = v72 - v73;
        if (v72 <= v73)
        {
LABEL_103:
          v74 = v72;
          goto LABEL_84;
        }
      }
      else
      {
        v65 = v68[1];
        v75 = v69 - (v65 - v70);
        if (v75 >= 0x40)
          v72 = 64;
        else
          v72 = v75;
        v73 = v69 - v65;
        v74 = v72 - v73;
        if (v72 <= v73)
          goto LABEL_103;
      }
      memcpy((void *)(v68[5] + v68[3] * v65), v108, v68[3] * v73);
      v65 = 0;
      v68[1] = 0;
      *((_DWORD *)v68 + 8) = 1;
LABEL_84:
      memcpy((void *)(v68[5] + v68[3] * v65), (char *)v108 + v68[3] * (v72 - v74), v68[3] * v74);
      v68[1] += v74;
      goto LABEL_85;
    }
LABEL_104:
    v76 = *v45;
    if (!*v45)
      goto LABEL_127;
    v77 = *(_DWORD *)(v76 + 32);
    v78 = *(_QWORD *)v76;
    if (v77)
    {
      v79 = *(_QWORD *)(v76 + 8);
      v80 = *(_QWORD *)(v76 + 16) - v78 + v79;
      if ((int)v80 > 79)
      {
LABEL_127:
        WebRtc_ReadBuffer((uint64_t *)v76, &v103, (char *)a5, 0x50uLL);
        v92 = v103;
        result = 0;
        if (v103 != (_OWORD *)a5)
        {
          v93 = v103[1];
          *(_OWORD *)a5 = *v103;
          *(_OWORD *)(a5 + 16) = v93;
          v94 = v92[2];
          v95 = v92[3];
          v96 = v92[5];
          *(_OWORD *)(a5 + 64) = v92[4];
          *(_OWORD *)(a5 + 80) = v96;
          *(_OWORD *)(a5 + 32) = v94;
          *(_OWORD *)(a5 + 48) = v95;
          v97 = v92[6];
          v98 = v92[7];
          v99 = v92[9];
          *(_OWORD *)(a5 + 128) = v92[8];
          *(_OWORD *)(a5 + 144) = v99;
          *(_OWORD *)(a5 + 96) = v97;
          *(_OWORD *)(a5 + 112) = v98;
        }
        return result;
      }
    }
    else
    {
      v79 = *(_QWORD *)(v76 + 8);
      LODWORD(v80) = v79 - v78;
      if ((int)v79 - (int)v78 > 79)
        goto LABEL_127;
    }
    v82 = v80 - 80;
    v83 = *(_DWORD *)(v76 + 16);
    v84 = v77 == 0;
    if (v77)
      v85 = *(_DWORD *)(v76 + 16);
    else
      v85 = 0;
    if (v84)
      v86 = *(_DWORD *)(v76 + 16);
    else
      v86 = 0;
    v87 = v85 - v78 + v79;
    v88 = v79 - v78 - v86;
    if (v87 >= v82)
      v87 = v82;
    if (v87 <= v88)
      v87 = v88;
    v89 = v87 + v78;
    if (v87 + (int)v78 <= v83)
      v90 = 0;
    else
      v90 = *(_DWORD *)(v76 + 16);
    v91 = v89 - v90;
    if (v89 > v83 || v91 < 0)
      *(_DWORD *)(v76 + 32) = v91 >> 31;
    *(_QWORD *)v76 = (v83 & (v91 >> 31)) + v91;
    v76 = *v45;
    goto LABEL_127;
  }
  v45 = (uint64_t *)(a1 + 12);
  v46 = *((_QWORD *)a1 + 3);
  if (!v46)
    goto LABEL_104;
  if (v108)
  {
    while (1)
    {
      v50 = *(_QWORD *)v46;
      if (*(_DWORD *)(v46 + 32))
      {
        if ((unint64_t)(*(_QWORD *)(v46 + 16) - v50 + *(_QWORD *)(v46 + 8)) < 0x40)
          goto LABEL_104;
      }
      else if ((unint64_t)(*(_QWORD *)(v46 + 8) - v50) < 0x40)
      {
        goto LABEL_104;
      }
      v101 = 0;
      v102 = 0;
      WebRtc_ReadBuffer((uint64_t *)v46, &v102, v106, 0x40uLL);
      WebRtc_ReadBuffer(*((uint64_t **)a1 + 4), &v101, v105, 0x40uLL);
      webrtc::WebRtcAecm_ProcessBlock((uint64_t)a1, v102, v101, 0, v108);
      if (v51 == -1)
        return 0xFFFFFFFFLL;
      v52 = (uint64_t *)*v45;
      if (*v45)
        break;
LABEL_55:
      v46 = *((_QWORD *)a1 + 3);
      if (!v46)
        goto LABEL_104;
    }
    v53 = v52[2];
    v54 = *v52;
    if (*((_DWORD *)v52 + 8))
    {
      v49 = v52[1];
      v55 = v54 - v49;
      if (v55 >= 0x40)
        v56 = 64;
      else
        v56 = v55;
      v57 = v53 - v49;
      v58 = v56 - v57;
      if (v56 <= v57)
      {
LABEL_72:
        v58 = v56;
        goto LABEL_54;
      }
    }
    else
    {
      v49 = v52[1];
      v59 = v53 - (v49 - v54);
      if (v59 >= 0x40)
        v56 = 64;
      else
        v56 = v59;
      v57 = v53 - v49;
      v58 = v56 - v57;
      if (v56 <= v57)
        goto LABEL_72;
    }
    memcpy((void *)(v52[5] + v52[3] * v49), v108, v52[3] * v57);
    v49 = 0;
    v52[1] = 0;
    *((_DWORD *)v52 + 8) = 1;
LABEL_54:
    memcpy((void *)(v52[5] + v52[3] * v49), (char *)v108 + v52[3] * (v56 - v58), v52[3] * v58);
    v52[1] += v58;
    goto LABEL_55;
  }
  while (1)
  {
    v47 = *(_QWORD *)v46;
    if (*(_DWORD *)(v46 + 32))
    {
      if ((unint64_t)(*(_QWORD *)(v46 + 16) - v47 + *(_QWORD *)(v46 + 8)) < 0x40)
        goto LABEL_104;
    }
    else if ((unint64_t)(*(_QWORD *)(v46 + 8) - v47) < 0x40)
    {
      goto LABEL_104;
    }
    v101 = 0;
    v102 = 0;
    WebRtc_ReadBuffer((uint64_t *)v46, &v102, v106, 0x40uLL);
    WebRtc_ReadBuffer(*((uint64_t **)a1 + 4), &v101, v105, 0x40uLL);
    webrtc::WebRtcAecm_ProcessBlock((uint64_t)a1, v102, v101, 0, v108);
    if (v48 == -1)
      return 0xFFFFFFFFLL;
    v46 = *((_QWORD *)a1 + 3);
    if (!v46)
      goto LABEL_104;
  }
}

uint64_t webrtc::WebRtcAecm_CalcEnergies(uint64_t a1, uint16x8_t *a2, unsigned __int16 a3, unsigned int a4, int32x4_t *a5)
{
  __int16 *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int16x8_t v15;
  int32x4_t v16;
  int32x4_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t v30;
  uint64_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int32x4_t v51;
  int32x4_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int32x4_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  _WORD *v95;
  uint64_t result;
  __int16 v97;
  __int16 v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  __int16 v103;
  int v104;
  int v105;
  char v106;
  char v107;
  int v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  unsigned int v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  __int16 v120;

  v10 = (__int16 *)(a1 + 14274);
  v11 = (unsigned __int16 *)(a1 + 14012);
  memmove((void *)(a1 + 14018), (const void *)(a1 + 14016), 0x7EuLL);
  if (a4)
  {
    v12 = __clz(a4);
    v13 = ((a4 << v12 >> 23) | 0x1F00) - ((*v11 + v12) << 8) + 896;
  }
  else
  {
    LOWORD(v13) = 896;
  }
  v120 = v13;
  v11[2] = v13;
  v14 = *(_QWORD *)(a1 + 16000);
  v15 = *(int16x8_t *)(v14 + 16);
  v16 = vmovl_high_s16(v15);
  v17 = vmovl_s16(*(int16x4_t *)v15.i8);
  v18 = *a2;
  v19 = a2[1];
  v20 = (int32x4_t)vmovl_high_u16(*a2);
  v21 = (int32x4_t)vmovl_u16(*(uint16x4_t *)a2->i8);
  v22 = (int32x4_t)vmovl_high_u16(v19);
  v23 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v19.i8);
  v24 = vmulq_s32(v21, vmovl_s16(*(int16x4_t *)v14));
  v25 = vmulq_s32(v20, vmovl_high_s16(*(int16x8_t *)v14));
  v26 = vmulq_s32(v23, v17);
  v27 = vmulq_s32(v22, v16);
  v28 = *(int16x8_t *)(v14 + 32);
  v29 = *(int16x8_t *)(v14 + 48);
  v30 = vmovl_high_s16(v28);
  v31 = *(_QWORD *)(a1 + 16008);
  v32 = vmovl_s16(*(int16x4_t *)v28.i8);
  v33 = vmovl_high_s16(v29);
  v34 = vmovl_s16(*(int16x4_t *)v29.i8);
  v35 = a2[2];
  v36 = a2[3];
  v37 = (int32x4_t)vmovl_high_u16(v35);
  v38 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v35.i8);
  v39 = (int32x4_t)vmovl_high_u16(v36);
  v40 = *(int16x8_t *)(v31 + 16);
  v41 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v36.i8);
  v42 = vmulq_s32(v38, v32);
  v43 = vmulq_s32(v37, v30);
  v44 = vmulq_s32(v41, v34);
  v45 = vmulq_s32(v39, v33);
  v46 = *(int16x8_t *)(v14 + 64);
  v47 = *(int16x8_t *)(v14 + 80);
  v48 = vmovl_high_s16(v46);
  v50 = *(int16x8_t *)(v31 + 32);
  v49 = *(int16x8_t *)(v31 + 48);
  v51 = vmovl_high_s16(v47);
  v52 = vmlaq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v40.i8), v23), vmovl_s16(*(int16x4_t *)v49.i8), v41);
  v53 = a2[4];
  v54 = a2[5];
  v55 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v54.i8);
  v56 = vmlaq_s32(vmulq_s32(vmovl_high_s16(v40), v22), vmovl_high_s16(v49), v39);
  v57 = *(int16x8_t *)(v31 + 64);
  v58 = *(int16x8_t *)(v31 + 80);
  v59 = vmlaq_s32(v52, vmovl_s16(*(int16x4_t *)v58.i8), v55);
  v60 = (int32x4_t)vmovl_high_u16(v53);
  v61 = vmulq_s32(v55, vmovl_s16(*(int16x4_t *)v47.i8));
  v62 = (int32x4_t)vmovl_high_u16(v54);
  v63 = vmlaq_s32(v56, vmovl_high_s16(v58), v62);
  v64 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v53.i8);
  v65 = vmulq_s32(v64, vmovl_s16(*(int16x4_t *)v46.i8));
  v66 = vmulq_s32(v60, v48);
  v67 = vmulq_s32(v62, v51);
  v68 = vmlaq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v31), v21), vmovl_s16(*(int16x4_t *)v50.i8), v38);
  v70 = *(int16x8_t *)(v14 + 96);
  v69 = *(int16x8_t *)(v14 + 112);
  v71 = vmlaq_s32(vmulq_s32(vmovl_high_s16(*(int16x8_t *)v31), v20), vmovl_high_s16(v50), v37);
  v72 = a2[6];
  v73 = a2[7];
  v74 = vmlaq_s32(v71, vmovl_high_s16(v57), v60);
  v75 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v72.i8);
  v76 = vmlaq_s32(v68, vmovl_s16(*(int16x4_t *)v57.i8), v64);
  v78 = *(int16x8_t *)(v31 + 96);
  v77 = *(int16x8_t *)(v31 + 112);
  v79 = vmlaq_s32(v76, vmovl_s16(*(int16x4_t *)v78.i8), v75);
  v80 = vmovl_high_s16(v70);
  v81 = vmulq_s32(v75, vmovl_s16(*(int16x4_t *)v70.i8));
  v82 = (int32x4_t)vmovl_high_u16(v72);
  v83 = vmlaq_s32(v74, vmovl_high_s16(v78), v82);
  v84 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v73.i8);
  v85 = vmulq_s32(v82, v80);
  v86 = vmlaq_s32(v59, vmovl_s16(*(int16x4_t *)v77.i8), v84);
  v87 = vmulq_s32(v84, vmovl_s16(*(int16x4_t *)v69.i8));
  v88 = (int32x4_t)vmovl_high_u16(v73);
  v89 = vmlaq_s32(v63, vmovl_high_s16(v77), v88);
  v90 = vmulq_s32(v88, vmovl_high_s16(v69));
  a5[2] = v26;
  a5[3] = v27;
  a5[6] = v44;
  a5[7] = v45;
  a5[10] = v61;
  a5[11] = v67;
  a5[14] = v87;
  a5[15] = v90;
  *a5 = v24;
  a5[1] = v25;
  a5[4] = v42;
  a5[5] = v43;
  a5[8] = v65;
  a5[9] = v66;
  a5[12] = v81;
  a5[13] = v85;
  v91 = a2[8].u16[0];
  LODWORD(v14) = v91 * *(__int16 *)(v14 + 128);
  a5[16].i32[0] = v14;
  v92 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v19.i8, *(uint16x4_t *)v36.i8), *(uint16x4_t *)v54.i8), *(uint16x4_t *)v73.i8), (int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v18.i8, *(uint16x4_t *)v35.i8), *(uint16x4_t *)v53.i8), *(uint16x4_t *)v72.i8)), vaddq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16(v19, v36), v54), v73), (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16(v18, v35), v53), v72))))+ v91;
  v93 = vaddvq_s32(vaddq_s32(vaddq_s32(v86, v79), vaddq_s32(v89, v83))) + *(__int16 *)(v31 + 128) * v91;
  v94 = v14
      + vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v87, v61), vaddq_s32(v44, v26)), vaddq_s32(vaddq_s32(v81, v65), vaddq_s32(v42, v24))), vaddq_s32(vaddq_s32(vaddq_s32(v90, v67), vaddq_s32(v45, v27)), vaddq_s32(vaddq_s32(v85, v66), vaddq_s32(v43, v25)))));
  v95 = v11 + 67;
  memmove((void *)(a1 + 14148), v11 + 67, 0x7EuLL);
  result = (uint64_t)memmove((void *)(a1 + 14276), v10, 0x7EuLL);
  if (v92)
  {
    v97 = __clz(v92);
    v98 = ((v92 << v97 >> 23) | 0x1F00) - ((v97 + a3) << 8) + 896;
    v11[66] = v98;
    v99 = a3 + 12;
    if (v93)
      goto LABEL_6;
  }
  else
  {
    v98 = 896;
    v11[66] = 896;
    v99 = a3 + 12;
    if (v93)
    {
LABEL_6:
      v100 = __clz(v93);
      v101 = ((v93 << v100 >> 23) | 0x1F00) - ((v100 + v99) << 8) + 896;
      v102 = a1 + 17256;
      *v95 = v101;
      if (v94)
        goto LABEL_7;
LABEL_22:
      *v10 = 896;
      v104 = v98;
      if (v98 > 1025)
        goto LABEL_8;
LABEL_23:
      if (v104 <= v10[1488])
        goto LABEL_24;
      goto LABEL_40;
    }
  }
  LOWORD(v101) = 896;
  v102 = a1 + 17256;
  *v95 = 896;
  if (!v94)
    goto LABEL_22;
LABEL_7:
  v103 = __clz(v94);
  *v10 = ((v94 << v103 >> 23) | 0x1F00) - ((v103 + (_WORD)v99) << 8) + 896;
  v104 = v98;
  if (v98 <= 1025)
    goto LABEL_23;
LABEL_8:
  v105 = *(unsigned __int16 *)(v102 + 6);
  if (*(_WORD *)(v102 + 6))
    v106 = 4;
  else
    v106 = 2;
  if (*(_WORD *)(v102 + 6))
    v107 = 11;
  else
    v107 = 8;
  if (*(_WORD *)(v102 + 6))
    result = 3;
  else
    result = 2;
  v108 = v10[1485];
  LOWORD(v109) = v98;
  if ((unsigned __int16)(v10[1485] - 0x7FFF) >= 2u)
  {
    if (v108 <= v98)
      v109 = v108 + (((unsigned __int16)v98 - v108) >> v107);
    else
      v109 = v108 - ((v108 - (unsigned __int16)v98) >> result);
  }
  v10[1485] = v109;
  v110 = v10[1486];
  LOWORD(v111) = v98;
  if ((unsigned __int16)(v10[1486] - 0x7FFF) >= 2u)
  {
    if (v110 <= v98)
      v111 = v110 + (((unsigned __int16)v98 - v110) >> v106);
    else
      v111 = v110 - ((v110 - (unsigned __int16)v98) >> 11);
  }
  v10[1486] = v111;
  v10[1487] = v111 - v109;
  v112 = ((230 * (unsigned __int16)(2560 - v109)) >> 9) + 230;
  if ((__int16)(2560 - v109) <= 0)
    v112 = 230;
  if (!v105 || (v113 = *(__int16 *)(v102 + 4), v113 >= 1025))
  {
    v10[1488] = v109 + v112;
    v10[1489] = v109 + v112 + 256;
    if (v104 > (__int16)(v109 + v112))
      goto LABEL_40;
    goto LABEL_24;
  }
  v114 = (unsigned __int16)v10[1488];
  if ((__int16)v114 > v98)
  {
    v115 = (__int16)v114 + ((v112 + (unsigned __int16)v98 - v114) >> 6);
    v10[1488] = v115;
    *(_WORD *)(v102 + 4) = 0;
    v10[1489] = v115 + 256;
    if (v104 > (__int16)v115)
      goto LABEL_40;
LABEL_24:
    *(_DWORD *)v102 = 0;
    return result;
  }
  *(_WORD *)(v102 + 4) = v113 + 1;
  v10[1489] = v114 + 256;
  if (v104 <= (__int16)v114)
    goto LABEL_24;
LABEL_40:
  if (!*(_WORD *)(v102 + 6) || v10[1487] >= 930)
  {
    *(_DWORD *)v102 = 1;
    if (!*(_DWORD *)(a1 + 16))
      return result;
    goto LABEL_46;
  }
  if (*(_DWORD *)v102 && *(_DWORD *)(a1 + 16))
  {
LABEL_46:
    *(_DWORD *)(a1 + 16) = 0;
    if ((__int16)v101 > v120)
    {
      v116 = vshrq_n_s16(*(int16x8_t *)(v31 + 16), 3uLL);
      *(int16x8_t *)v31 = vshrq_n_s16(*(int16x8_t *)v31, 3uLL);
      *(int16x8_t *)(v31 + 16) = v116;
      v117 = vshrq_n_s16(*(int16x8_t *)(v31 + 48), 3uLL);
      *(int16x8_t *)(v31 + 32) = vshrq_n_s16(*(int16x8_t *)(v31 + 32), 3uLL);
      *(int16x8_t *)(v31 + 48) = v117;
      v118 = vshrq_n_s16(*(int16x8_t *)(v31 + 80), 3uLL);
      *(int16x8_t *)(v31 + 64) = vshrq_n_s16(*(int16x8_t *)(v31 + 64), 3uLL);
      *(int16x8_t *)(v31 + 80) = v118;
      v119 = vshrq_n_s16(*(int16x8_t *)(v31 + 112), 3uLL);
      *(int16x8_t *)(v31 + 96) = vshrq_n_s16(*(int16x8_t *)(v31 + 96), 3uLL);
      *(int16x8_t *)(v31 + 112) = v119;
      *(_WORD *)(v31 + 128) = *(__int16 *)(v31 + 128) >> 3;
      *v95 -= 768;
      *(_DWORD *)(a1 + 16) = 1;
    }
  }
  return result;
}

uint64_t webrtc::WebRtcAecm_UpdateChannel(uint64_t result, uint64_t a2, __int16 a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  signed int v15;
  int v16;
  uint64_t v17;
  signed int v18;
  unsigned int v19;
  signed int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  __int16 v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  __int16 v32;
  __int16 v33;
  char v34;
  __int16 v35;
  BOOL v36;
  __int16 v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  BOOL v43;
  signed int v44;
  __int16 v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  signed int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  const __int16 *v61;
  const __int16 *v62;
  float *v63;
  float *v64;
  float *v65;
  int v66;
  int16x4_t v67;
  int16x4_t v68;
  int16x4_t v69;
  int16x4_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v93;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  const __int16 *v104;
  const __int16 *v105;
  float *v106;
  float *v107;
  float *v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  int16x4_t *v119;
  int32x4_t *v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int16x8x4_t v129;
  int16x8x4_t v130;
  int16x8x4_t v131;
  int16x8x4_t v132;
  float32x4x4_t v133;
  float32x4x4_t v134;
  int16x8x4_t v135;
  int16x8x4_t v136;
  int16x8x4_t v137;
  int16x8x4_t v138;
  float32x4x4_t v139;
  float32x4x4_t v140;

  if (a5)
  {
    v6 = 0;
    v7 = 0x10000;
    do
    {
      v17 = *(_QWORD *)(result + 16016);
      v18 = *(_DWORD *)(v17 + 4 * v6);
      v19 = __clz(v18);
      if (!v18)
        v19 = 0;
      v20 = *(unsigned __int16 *)(a2 + 2 * v6);
      v21 = (__clz(v20) - 16) | 0x10;
      if (*(_WORD *)(a2 + 2 * v6))
        v22 = v21;
      else
        v22 = 0;
      v23 = v22 + v19;
      v24 = v18 >> (32 - v23);
      if (!(_WORD)v23)
        v24 = 0;
      v25 = v23 > 0x1F;
      if (v23 <= 0x1F)
        v26 = 32 - v23;
      else
        v26 = 0;
      if (v25)
        v27 = *(_DWORD *)(v17 + 4 * v6);
      else
        v27 = v24;
      v28 = v27 * v20;
      v29 = __clz(v27 * v20);
      if (!v28)
        v29 = 0;
      v30 = *(unsigned __int16 *)(a4 + 2 * v6);
      v31 = __clz(v30) - 2;
      if (!*(_WORD *)(a4 + 2 * v6))
        LOWORD(v31) = 30;
      v32 = *(_WORD *)(result + 14012);
      v33 = v26 - a3 + v32 + v31 - 28;
      v34 = v33;
      v35 = a3 + 28 - v26 - v32 + v29 - 2;
      v36 = v33 + 1 < v29;
      if (v33 + 1 < v29)
      {
        v37 = v33;
      }
      else
      {
        v34 = v29 - 2;
        v37 = v29 - 2;
      }
      if (!v36)
        LOWORD(v31) = v35;
      v38 = v28 << v34;
      v39 = v28 >> -v34;
      if (v37 >= 0)
        v39 = v38;
      v40 = v30 << v31;
      v41 = v30 >> -(char)v31;
      if ((v31 & 0x8000u) == 0)
        v41 = v40;
      v42 = v41 - v39;
      if (v42)
        v43 = 16 << a3 < v20;
      else
        v43 = 0;
      if (v43)
      {
        v44 = (unsigned __int16)v22 + __clz(v42 ^ (v42 >> 31)) - 1;
        if (v44 < 32)
        {
          v45 = 32 - v44;
          v47 = -((-v42 >> v45) * v20);
          v46 = (v42 >> v45) * v20;
          if (v42 < 1)
            v46 = v47;
        }
        else
        {
          v45 = 0;
          v46 = v42 * v20;
        }
        v48 = v46 / (v7 >> 16);
        v49 = (__int16)(v26 - a5 + 2 * v22 - v37 + v45 - 60);
        v50 = __clz(v48 ^ (v48 >> 31)) - 1;
        if (!v48)
          v50 = 0;
        if (v50 >= v49)
        {
          v8 = v48 << v49;
          v9 = v48 >> -(char)v49;
          if (v49 >= 0)
            v10 = v8;
          else
            v10 = v9;
        }
        else
        {
          v10 = 0x7FFFFFFF;
        }
        v11 = v10 + v18;
        v12 = v18 >> 31;
        v13 = v10 >> 31;
        v14 = v12 != v11 >> 31 && v12 == v13;
        v15 = (v11 >> 31) ^ 0x80000000;
        if (!v14)
          v15 = v11;
        v16 = v15 & ~(v15 >> 31);
        *(_DWORD *)(v17 + 4 * v6) = v16;
        *(_WORD *)(*(_QWORD *)(result + 16008) + 2 * v6) = HIWORD(v16);
      }
      ++v6;
      v7 += 0x10000;
    }
    while (v6 != 65);
  }
  if (*(_WORD *)(result + 17262))
    v51 = 1;
  else
    v51 = (*(_DWORD *)(result + 17256) & 1) == 0;
  if (v51)
  {
    if (*(__int16 *)(result + 14144) >= *(__int16 *)(result + 17252))
    {
      v66 = (__int16)++*(_WORD *)(result + 17264);
      if (v66 >= 30)
      {
        v67 = *(int16x4_t *)(result + 14040);
        v68 = *(int16x4_t *)(result + 14024);
        v69 = *(int16x4_t *)(result + 14032);
        v70 = *(int16x4_t *)(result + 14016);
        v71 = vaddvq_s32(vaddq_s32(vabal_s16(vabdl_s16(*(int16x4_t *)(result + 14170), v67), *(int16x4_t *)(result + 14154), v68), vabal_s16(vabdl_s16(*(int16x4_t *)(result + 14162), v69), *(int16x4_t *)(result + 14146), v70)));
        v72 = vaddvq_s32(vaddq_s32(vabal_s16(vabdl_s16(*(int16x4_t *)(result + 14298), v67), *(int16x4_t *)(result + 14282), v68), vabal_s16(vabdl_s16(*(int16x4_t *)(result + 14290), v69), *(int16x4_t *)(result + 14274), v70)));
        v73 = *(__int16 *)(result + 14048);
        v74 = *(__int16 *)(result + 14306) - v73;
        if (v74 < 0)
          v74 = v73 - *(__int16 *)(result + 14306);
        v75 = v74 + v72;
        v76 = *(__int16 *)(result + 14178) - v73;
        if (v76 < 0)
          v76 = v73 - *(__int16 *)(result + 14178);
        v77 = v76 + v71;
        v78 = *(__int16 *)(result + 14050);
        v79 = *(__int16 *)(result + 14308) - v78;
        if (v79 < 0)
          v79 = v78 - *(__int16 *)(result + 14308);
        v80 = *(__int16 *)(result + 14180) - v78;
        if (v80 < 0)
          v80 = -v80;
        v81 = *(__int16 *)(result + 14052);
        v82 = *(__int16 *)(result + 14310) - v81;
        if (v82 < 0)
          v82 = v81 - *(__int16 *)(result + 14310);
        v83 = v82 + v79;
        v84 = *(__int16 *)(result + 14182) - v81;
        if (v84 < 0)
          v84 = v81 - *(__int16 *)(result + 14182);
        v85 = v84 + v80;
        v86 = *(__int16 *)(result + 14054);
        v87 = *(__int16 *)(result + 14312) - v86;
        if (v87 < 0)
          v87 = v86 - *(__int16 *)(result + 14312);
        v88 = v87 + v83 + v75;
        v89 = *(__int16 *)(result + 14184) - v86;
        if (v89 < 0)
          v89 = v86 - *(__int16 *)(result + 14184);
        v90 = v89 + v85 + v77;
        v91 = *(_DWORD *)(result + 17232);
        if (29 * v90 > 32 * v88 && 32 * *(_DWORD *)(result + 17236) < 29 * v91)
        {
          v111 = *(_QWORD *)(result + 16008);
          v112 = *(_QWORD *)(result + 16000);
          v113 = *(_OWORD *)(v112 + 64);
          v115 = *(_OWORD *)(v112 + 16);
          v114 = *(_OWORD *)(v112 + 32);
          *(_OWORD *)(v111 + 48) = *(_OWORD *)(v112 + 48);
          *(_OWORD *)(v111 + 64) = v113;
          *(_OWORD *)(v111 + 16) = v115;
          *(_OWORD *)(v111 + 32) = v114;
          v117 = *(_OWORD *)(v112 + 96);
          v116 = *(_OWORD *)(v112 + 112);
          v118 = *(_OWORD *)(v112 + 80);
          *(_WORD *)(v111 + 128) = *(_WORD *)(v112 + 128);
          *(_OWORD *)(v111 + 96) = v117;
          *(_OWORD *)(v111 + 112) = v116;
          *(_OWORD *)(v111 + 80) = v118;
          *(_OWORD *)v111 = *(_OWORD *)v112;
          v119 = *(int16x4_t **)(result + 16000);
          v120 = *(int32x4_t **)(result + 16016);
          v121 = vshll_n_s16(v119[1], 0x10uLL);
          *v120 = vshll_n_s16(*v119, 0x10uLL);
          v120[1] = v121;
          v122 = vshll_n_s16(v119[3], 0x10uLL);
          v120[2] = vshll_n_s16(v119[2], 0x10uLL);
          v120[3] = v122;
          v123 = vshll_n_s16(v119[5], 0x10uLL);
          v120[4] = vshll_n_s16(v119[4], 0x10uLL);
          v120[5] = v123;
          v124 = vshll_n_s16(v119[7], 0x10uLL);
          v120[6] = vshll_n_s16(v119[6], 0x10uLL);
          v120[7] = v124;
          v125 = vshll_n_s16(v119[9], 0x10uLL);
          v120[8] = vshll_n_s16(v119[8], 0x10uLL);
          v120[9] = v125;
          v126 = vshll_n_s16(v119[11], 0x10uLL);
          v120[10] = vshll_n_s16(v119[10], 0x10uLL);
          v120[11] = v126;
          v127 = vshll_n_s16(v119[13], 0x10uLL);
          v120[12] = vshll_n_s16(v119[12], 0x10uLL);
          v120[13] = v127;
          v128 = vshll_n_s16(v119[15], 0x10uLL);
          v120[14] = vshll_n_s16(v119[14], 0x10uLL);
          v120[15] = v128;
          v120[16].i32[0] = v119[16].u16[0] << 16;
        }
        else
        {
          v93 = *(_DWORD *)(result + 17240);
          if (v91 < v93 && 29 * v88 > 32 * v90 && v90 < v93)
          {
            v95 = *(_QWORD *)(result + 16000);
            v96 = *(_QWORD *)(result + 16008);
            v97 = *(_OWORD *)(v96 + 64);
            v99 = *(_OWORD *)(v96 + 16);
            v98 = *(_OWORD *)(v96 + 32);
            *(_OWORD *)(v95 + 48) = *(_OWORD *)(v96 + 48);
            *(_OWORD *)(v95 + 64) = v97;
            *(_OWORD *)(v95 + 16) = v99;
            *(_OWORD *)(v95 + 32) = v98;
            v101 = *(_OWORD *)(v96 + 96);
            v100 = *(_OWORD *)(v96 + 112);
            v102 = *(_OWORD *)(v96 + 80);
            *(_WORD *)(v95 + 128) = *(_WORD *)(v96 + 128);
            *(_OWORD *)(v95 + 96) = v101;
            *(_OWORD *)(v95 + 112) = v100;
            *(_OWORD *)(v95 + 80) = v102;
            *(_OWORD *)v95 = *(_OWORD *)v96;
            v103 = *(_QWORD *)(result + 16000);
            v104 = (const __int16 *)v103;
            v131 = vld4q_s16(v104);
            v104 += 32;
            v105 = (const __int16 *)a2;
            v137 = vld4q_s16(v105);
            v105 += 32;
            v140.val[0] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v137.val[0]), vmovl_high_s16(v131.val[0]));
            v140.val[1] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v137.val[1]), vmovl_high_s16(v131.val[1]));
            v140.val[2] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v137.val[2]), vmovl_high_s16(v131.val[2]));
            v140.val[3] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v137.val[3]), vmovl_high_s16(v131.val[3]));
            v134.val[0] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v137.val[0].i8), vmovl_s16(*(int16x4_t *)v131.val[0].i8));
            v134.val[1] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v137.val[1].i8), vmovl_s16(*(int16x4_t *)v131.val[1].i8));
            v134.val[2] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v137.val[2].i8), vmovl_s16(*(int16x4_t *)v131.val[2].i8));
            v134.val[3] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v137.val[3].i8), vmovl_s16(*(int16x4_t *)v131.val[3].i8));
            v106 = (float *)a6;
            vst4q_f32(v106, v134);
            v106 += 16;
            vst4q_f32(v106, v140);
            v132 = vld4q_s16(v104);
            v138 = vld4q_s16(v105);
            v140.val[0] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v138.val[0]), vmovl_high_s16(v132.val[0]));
            v140.val[1] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v138.val[1]), vmovl_high_s16(v132.val[1]));
            v134.val[0] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v138.val[0].i8), vmovl_s16(*(int16x4_t *)v132.val[0].i8));
            v134.val[1] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v138.val[1].i8), vmovl_s16(*(int16x4_t *)v132.val[1].i8));
            v134.val[2] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v138.val[2].i8), vmovl_s16(*(int16x4_t *)v132.val[2].i8));
            v134.val[3] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v138.val[3].i8), vmovl_s16(*(int16x4_t *)v132.val[3].i8));
            v107 = (float *)(a6 + 128);
            vst4q_f32(v107, v134);
            v140.val[2] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v138.val[2]), vmovl_high_s16(v132.val[2]));
            v140.val[3] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v138.val[3]), vmovl_high_s16(v132.val[3]));
            v108 = (float *)(a6 + 192);
            vst4q_f32(v108, v140);
            *(_DWORD *)(a6 + 256) = *(unsigned __int16 *)(a2 + 128) * *(__int16 *)(v103 + 128);
            v109 = *(_DWORD *)(result + 17240);
            if (v109 == 0x7FFFFFFF)
              v110 = *(_DWORD *)(result + 17232) + v90;
            else
              v110 = v109 + ((205 * (v90 - 5 * v109 / 8)) >> 8);
            *(_DWORD *)(result + 17240) = v110;
          }
        }
        *(_WORD *)(result + 17264) = 0;
        *(_DWORD *)(result + 17236) = v88;
        *(_DWORD *)(result + 17232) = v90;
      }
    }
    else
    {
      *(_WORD *)(result + 17264) = 0;
    }
  }
  else
  {
    v52 = *(_QWORD *)(result + 16000);
    v53 = *(_QWORD *)(result + 16008);
    v54 = *(_OWORD *)(v53 + 64);
    v56 = *(_OWORD *)(v53 + 16);
    v55 = *(_OWORD *)(v53 + 32);
    *(_OWORD *)(v52 + 48) = *(_OWORD *)(v53 + 48);
    *(_OWORD *)(v52 + 64) = v54;
    *(_OWORD *)(v52 + 16) = v56;
    *(_OWORD *)(v52 + 32) = v55;
    v58 = *(_OWORD *)(v53 + 96);
    v57 = *(_OWORD *)(v53 + 112);
    v59 = *(_OWORD *)(v53 + 80);
    *(_WORD *)(v52 + 128) = *(_WORD *)(v53 + 128);
    *(_OWORD *)(v52 + 96) = v58;
    *(_OWORD *)(v52 + 112) = v57;
    *(_OWORD *)(v52 + 80) = v59;
    *(_OWORD *)v52 = *(_OWORD *)v53;
    v60 = *(_QWORD *)(result + 16000);
    v61 = (const __int16 *)v60;
    v129 = vld4q_s16(v61);
    v61 += 32;
    v62 = (const __int16 *)a2;
    v135 = vld4q_s16(v62);
    v62 += 32;
    v139.val[0] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v135.val[0]), vmovl_high_s16(v129.val[0]));
    v139.val[1] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v135.val[1]), vmovl_high_s16(v129.val[1]));
    v139.val[2] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v135.val[2]), vmovl_high_s16(v129.val[2]));
    v139.val[3] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v135.val[3]), vmovl_high_s16(v129.val[3]));
    v133.val[0] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v135.val[0].i8), vmovl_s16(*(int16x4_t *)v129.val[0].i8));
    v133.val[1] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v135.val[1].i8), vmovl_s16(*(int16x4_t *)v129.val[1].i8));
    v133.val[2] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v135.val[2].i8), vmovl_s16(*(int16x4_t *)v129.val[2].i8));
    v133.val[3] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v135.val[3].i8), vmovl_s16(*(int16x4_t *)v129.val[3].i8));
    v63 = (float *)a6;
    vst4q_f32(v63, v133);
    v63 += 16;
    vst4q_f32(v63, v139);
    v130 = vld4q_s16(v61);
    v136 = vld4q_s16(v62);
    v139.val[0] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v136.val[0]), vmovl_high_s16(v130.val[0]));
    v139.val[1] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v136.val[1]), vmovl_high_s16(v130.val[1]));
    v133.val[0] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v136.val[0].i8), vmovl_s16(*(int16x4_t *)v130.val[0].i8));
    v133.val[1] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v136.val[1].i8), vmovl_s16(*(int16x4_t *)v130.val[1].i8));
    v133.val[2] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v136.val[2].i8), vmovl_s16(*(int16x4_t *)v130.val[2].i8));
    v133.val[3] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v136.val[3].i8), vmovl_s16(*(int16x4_t *)v130.val[3].i8));
    v64 = (float *)(a6 + 128);
    vst4q_f32(v64, v133);
    v139.val[2] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v136.val[2]), vmovl_high_s16(v130.val[2]));
    v139.val[3] = (float32x4_t)vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v136.val[3]), vmovl_high_s16(v130.val[3]));
    v65 = (float *)(a6 + 192);
    vst4q_f32(v65, v139);
    *(_DWORD *)(a6 + 256) = *(unsigned __int16 *)(a2 + 128) * *(__int16 *)(v60 + 128);
  }
  return result;
}

__n128 webrtc::WebRtcAecm_ProcessBlock(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int16 *a5)
{
  uint64_t v7;
  _WORD *v8;
  __int16 *v9;
  unsigned int v10;
  __int16 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  int v34;
  int v35;
  __int16 v36;
  unsigned __int16 *v37;
  __int16 v38;
  int v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __n128 result;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  double v53;
  int8x16_t v54;
  int v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  int v60;
  int v61;
  __int16 *v62;
  int8x16_t v63;
  int v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  const __int16 *v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  __int16 v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  __int16 v84;
  __int16 v85;
  int v86;
  signed int v87;
  int v88;
  __int16 v89;
  int v90;
  int v91;
  __int16 v92;
  int v93;
  int v94;
  int v95;
  signed int v96;
  int v97;
  int v98;
  __int16 v100;
  unsigned int v101;
  int v102;
  int v103;
  int16x8_t v104;
  uint32x4_t v105;
  uint32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int16x8_t v110;
  int16x8_t v111;
  uint32x4_t v112;
  uint32x4_t v113;
  uint32x4_t v114;
  uint32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int16x8_t v122;
  int16x8_t v123;
  uint32x4_t v124;
  uint32x4_t v125;
  uint32x4_t v126;
  uint32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int32x4_t v132;
  signed int v133;
  int32x4_t v134;
  int8x16_t v135;
  uint64_t v136;
  __int16 *v137;
  BOOL v139;
  BOOL v141;
  unsigned int v142;
  BOOL v143;
  int8x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  uint16x8_t v148;
  const __int16 *v149;
  __int16 *v150;
  int16x8_t v151;
  int16x8_t v152;
  const __int16 *v153;
  __int16 *v154;
  const __int16 *v155;
  __int16 *v156;
  int16x8_t v157;
  int16x8_t v158;
  const __int16 *v159;
  __int16 *v160;
  int16x8_t v161;
  int16x8_t v162;
  const __int16 *v163;
  __int16 *v164;
  const __int16 *v165;
  __int16 *v166;
  int16x8_t v167;
  const __int16 *v168;
  int16x8_t v169;
  __int16 *v170;
  int v171;
  int v172;
  BOOL v173;
  unsigned int v174;
  __int16 *v175;
  int32x2_t v176;
  uint32x2_t v177;
  __int16 *v178;
  uint64_t v179;
  __int16 *v180;
  _BOOL4 v182;
  BOOL v183;
  const __int16 *v184;
  __int16 *v185;
  const __int16 *v186;
  int16x8_t v187;
  int16x8_t v188;
  __int16 *v189;
  const __int16 *v190;
  __int16 *v191;
  const __int16 *v192;
  int16x8_t v193;
  int16x8_t v194;
  __int16 *v195;
  const __int16 *v196;
  __int16 *v197;
  const __int16 *v198;
  int16x8_t v199;
  int16x8_t v200;
  __int16 *v201;
  const __int16 *v202;
  __int16 *v203;
  __int16 *v204;
  int32x2_t v205;
  uint32x2_t v206;
  __int16 *v207;
  __int16 v208;
  int v209;
  char v210;
  uint64_t v211;
  int *v212;
  unsigned int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  unsigned int v220;
  int v221;
  int32x4_t *v222;
  int32x4_t v223;
  int32x4_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int32x4_t v227;
  int16x8_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int16x4_t v231;
  int16x4_t v232;
  int v233;
  uint64_t v234;
  int v235;
  int v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  __int16 *v240;
  int16x8_t v241;
  int16x8_t v242;
  __int16 *v243;
  __int16 *v244;
  int16x8_t v245;
  int16x8_t v246;
  __int16 *v247;
  __int16 *v248;
  int16x8_t v249;
  int16x8_t v250;
  __int16 *v251;
  __int16 *v252;
  int16x8_t v253;
  int16x8_t v254;
  int v255;
  int v256;
  int16x8_t v257;
  int16x8_t v258;
  __int16 *v259;
  const __int16 *v260;
  uint64_t v261;
  uint64_t v262;
  const __int16 *v263;
  __int16 *v264;
  const __int16 *v265;
  const __int16 *v266;
  __int16 *v267;
  __int16 *v268;
  const __int16 *v269;
  const __int16 *v270;
  __int16 *v271;
  __int16 *v272;
  uint64_t v273;
  __int16 *v274;
  __int16 *v275;
  unsigned int v276;
  __int16 *v277;
  __int16 *v278;
  __int16 *v279;
  BOOL v281;
  BOOL v283;
  BOOL v285;
  BOOL v287;
  BOOL v289;
  BOOL v291;
  BOOL v293;
  _BOOL4 v295;
  BOOL v296;
  unint64_t v297;
  int16x4_t v298;
  uint32x4_t v299;
  uint64_t v300;
  int8x16_t v301;
  int32x4_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int32x4_t v305;
  int32x4_t v306;
  int32x4_t v307;
  uint32x4_t v308;
  int32x4_t v309;
  int32x4_t v310;
  uint32x4_t v311;
  uint32x4_t v312;
  int16x8_t v313;
  int8x16_t v314;
  int16x8_t v315;
  int32x4_t v316;
  uint32x4_t v317;
  uint32x4_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  _OWORD *v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  uint64_t v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  uint16x8_t *v347;
  __int16 *v348;
  uint64_t v349;
  __int16 *v351;
  int v352;
  uint64_t v353;
  _BYTE v354[64];
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int16x8_t v358;
  __int16 v359;
  _BYTE v360[14];
  _BYTE v361[513];
  _BYTE v362[513];
  _BYTE v363[261];
  _BYTE v364[517];
  _WORD v365[65];
  unsigned __int16 v366[65];
  _OWORD v367[8];
  __int16 v368;
  _BYTE v369[128];
  __int16 v370;
  int16x8_t v371[8];
  __int16 v372;
  int16x8_t v373[8];
  __int16 v374;
  _BYTE v375[130];
  uint64_t v376;
  int16x8x2_t v377;
  int16x8x2_t v378;
  int16x8x2_t v379;
  int16x8x2_t v380;
  int16x8x2_t v381;
  int16x8x2_t v382;
  int16x8x2_t v383;
  int16x8x2_t v384;
  int16x8x2_t v385;
  int16x8x2_t v386;
  int16x8x2_t v387;
  int16x8x2_t v388;
  int16x8x2_t v389;
  int16x8x2_t v390;
  int16x8x2_t v391;
  int16x8x2_t v392;
  int16x8x2_t v393;
  int16x8x2_t v394;
  int16x8x2_t v395;
  int16x8x2_t v396;
  int16x8x2_t v397;
  int16x8x2_t v398;
  int16x8x2_t v399;
  int16x8x2_t v400;
  int16x8x2_t v401;
  int16x8x2_t v402;
  int16x8x2_t v403;
  int16x8x2_t v404;
  int16x8x2_t v405;
  int16x8x2_t v406;
  int16x8x2_t v407;
  int16x8x2_t v408;
  int16x8x2_t v409;
  int16x8x2_t v410;

  v376 = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 16704;
  v8 = (_WORD *)(a1 + 14000);
  v9 = (__int16 *)((unint64_t)v362 & 0xFFFFFFFFFFFFFFE0);
  if (*(__int16 *)(a1 + 17262) <= 1)
  {
    v10 = *(_DWORD *)(a1 + 14004);
    if (v10 <= 0x1FF)
      v11 = v10 > 0x3FF;
    else
      v11 = (v10 > 0x3FF) + 1;
    *(_WORD *)(a1 + 17262) = v11;
  }
  v12 = *(_OWORD **)(a1 + 16024);
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[3];
  v12[10] = a2[2];
  v12[11] = v15;
  v12[8] = v13;
  v12[9] = v14;
  v16 = a2[4];
  v17 = a2[5];
  v18 = a2[7];
  v12[14] = a2[6];
  v12[15] = v18;
  v12[12] = v16;
  v12[13] = v17;
  v19 = *(_OWORD **)(a1 + 16040);
  v20 = *a3;
  v21 = a3[1];
  v22 = a3[3];
  v19[10] = a3[2];
  v19[11] = v22;
  v19[8] = v20;
  v19[9] = v21;
  v23 = a3[4];
  v24 = a3[5];
  v25 = a3[7];
  v19[14] = a3[6];
  v19[15] = v25;
  v19[12] = v23;
  v19[13] = v24;
  if (a4)
  {
    v26 = *(_OWORD **)(a1 + 16032);
    v27 = *a4;
    v28 = a4[1];
    v29 = a4[3];
    v26[10] = a4[2];
    v26[11] = v29;
    v26[8] = v27;
    v26[9] = v28;
    v30 = a4[4];
    v31 = a4[5];
    v32 = a4[7];
    v26[14] = a4[6];
    v26[15] = v32;
    v26[12] = v30;
    v26[13] = v31;
  }
  v353 = 0;
  v352 = 0;
  v35 = v34;
  v36 = v8[6];
  v8[7] = v36;
  v8[6] = v34;
  if (a4)
  {
    v37 = v365;
    v8[5] = v8[4];
    v8[4] = v38;
  }
  else
  {
    v8[5] = v36;
    v8[4] = v34;
    v352 = v353;
    v37 = v366;
  }
  v39 = *(_DWORD *)(a1 + 13596);
  if (v39 <= 98)
    v40 = v39 + 1;
  else
    v40 = 0;
  *(_DWORD *)(a1 + 13596) = v40;
  *(_DWORD *)(a1 + 4 * v40 + 13600) = v33;
  v41 = a1 + 130 * *(int *)(a1 + 13596);
  *(_WORD *)(v41 + 722) = v368;
  v42 = v367[7];
  *(_OWORD *)(v41 + 690) = v367[6];
  *(_OWORD *)(v41 + 706) = v42;
  v43 = v367[3];
  *(_OWORD *)(v41 + 626) = v367[2];
  *(_OWORD *)(v41 + 642) = v43;
  v44 = v367[5];
  *(_OWORD *)(v41 + 658) = v367[4];
  *(_OWORD *)(v41 + 674) = v44;
  result = (__n128)v367[1];
  *(_OWORD *)(v41 + 594) = v367[0];
  *(__n128 *)(v41 + 610) = result;
  v46 = *(_QWORD *)(a1 + 576);
  if (!v46)
    return result;
  if (*(_DWORD *)(v46 + 12) != 65)
    return result;
  v47 = webrtc::BinarySpectrumFix((unsigned __int16 *)v367, *(int32x4_t **)v46, v33, (_DWORD *)(v46 + 8));
  v48 = *(_QWORD *)(v46 + 16);
  memmove((void *)(*(_QWORD *)(v48 + 8) + 4), *(const void **)(v48 + 8), 4 * *(int *)(v48 + 16) - 4);
  **(_DWORD **)(v48 + 8) = v47;
  memmove((void *)(*(_QWORD *)v48 + 4), *(const void **)v48, 4 * *(int *)(v48 + 16) - 4);
  v49 = v47 - (((v47 >> 2) & 0x9249249) + ((v47 >> 1) & 0x5B6DB6DB));
  v50 = ((v49 + (v49 >> 3)) & 0xC71C71C7) + (((v49 + (v49 >> 3)) & 0xC71C71C7) >> 6);
  **(_DWORD **)v48 = ((_BYTE)v50 + (v50 >> 12) + HIBYTE(v50)) & 0x3F;
  v51 = *(_QWORD *)(a1 + 584);
  if (!v51)
    return result;
  if (*(_DWORD *)(v51 + 12) != 65)
    return result;
  v52 = webrtc::BinarySpectrumFix(v366, *(int32x4_t **)v51, v35, (_DWORD *)(v51 + 8));
  v55 = webrtc::WebRtc_ProcessBinarySpectrum(*(_QWORD *)(v51 + 16), v52, v53, v54);
  if (v55 == -1)
    return result;
  if (v55 == -2)
    v56 = 0;
  else
    v56 = v55;
  if ((__int16)v8[1] >= 0)
    v56 = (__int16)v8[1];
  v57 = *(_DWORD *)(a1 + 13596);
  v58 = __OFSUB__(v57, v56);
  v59 = v57 - v56;
  if (v59 < 0 != v58)
    v59 += 100;
  v60 = *(_DWORD *)(a1 + 4 * v59 + 13600);
  v347 = (uint16x8_t *)(a1 + 130 * v59 + 594);
  webrtc::WebRtcAecm_CalcEnergies(a1, v347, v60, v353, (int32x4_t *)((unint64_t)v363 & 0xFFFFFFFFFFFFFFE0));
  v61 = *(_DWORD *)(v7 + 552);
  v349 = v7;
  if (v61)
  {
    if (*(__int16 *)(v7 + 558) < 1)
    {
      LOWORD(v61) = 1;
    }
    else
    {
      v61 = *(__int16 *)(v7 + 540);
      if (v61 < *(__int16 *)(v7 + 542) && *(_WORD *)(v7 + 544))
        LOWORD(v61) = 9 - 9 * (__int16)(v8[72] - v61) / *(__int16 *)(v7 + 544);
      else
        LOWORD(v61) = 10;
      if ((__int16)v61 <= 1)
        LOWORD(v61) = 1;
    }
  }
  v348 = (__int16 *)((unint64_t)v364 & 0xFFFFFFFFFFFFFFE0);
  v62 = (__int16 *)((unint64_t)v361 & 0xFFFFFFFFFFFFFFE0);
  ++*(_DWORD *)(a1 + 14004);
  webrtc::WebRtcAecm_UpdateChannel(a1, (uint64_t)v347, v60, (uint64_t)v366, (__int16)v61, (unint64_t)v363 & 0xFFFFFFFFFFFFFFE0);
  if (*(_DWORD *)(v7 + 552))
  {
    v64 = (__int16)(v8[8] - *(_WORD *)(a1 + 14274));
    if (v64 < 0)
      v64 = -v64;
    v64 = (__int16)v64;
    if ((__int16)v64 > 399)
    {
      v67 = *(_WORD *)(v7 + 568);
    }
    else
    {
      if (v64 > 199)
      {
        v65 = 1374389535 * ((400 - v64) * *(__int16 *)(v7 + 572) + 100);
        LOWORD(v65) = (v65 >> 38) + ((unint64_t)v65 >> 63);
        v66 = *(_WORD *)(v7 + 568);
      }
      else
      {
        LODWORD(v65) = (*(__int16 *)(v7 + 570) * v64 + 100) / -200;
        v66 = *(_WORD *)(v7 + 566);
      }
      v67 = v66 + v65;
    }
  }
  else
  {
    v67 = 0;
  }
  v68 = 0;
  LOWORD(v69) = 0;
  v70 = *(__int16 *)(v7 + 564);
  if (v67 > v70)
    v70 = v67;
  *(_WORD *)(v7 + 564) = v67;
  v71 = *(__int16 *)(v7 + 562) + ((v70 - *(__int16 *)(v7 + 562)) >> 4);
  v72 = (__int16)v71;
  *(_WORD *)(v7 + 562) = v71;
  v73 = v8 + 4;
  v351 = v8 + 5;
  v74 = __clz((__int16)(v71 ^ ((__int16)v71 >> 15))) - 16;
  v75 = (unsigned __int16)v71;
  if (!(_WORD)v71)
    LOWORD(v74) = 1;
  v76 = a1 + 16316;
  v77 = a1 + 16056;
  do
  {
    v80 = *(_DWORD *)(v77 + 4 * v68)
        + ((unint64_t)(50
                            * (*(int *)(((unint64_t)v363 & 0xFFFFFFFFFFFFFFE0) + 4 * v68)
                             - (uint64_t)*(int *)(v77 + 4 * v68))) >> 8);
    *(_DWORD *)(v77 + 4 * v68) = v80;
    v81 = __clz(v80 ^ (v80 >> 31));
    if (v80)
      v82 = v81;
    else
      v82 = 1;
    if (v82 <= (__int16)(16 - v74))
    {
      v84 = *v73;
      v85 = *v73 - (v82 + v74 + v60) + 11;
      if (v82 <= (__int16)(17 - (v82 + v74)))
      {
        v83 = (v80 >> (17 - (v82 + v74))) * v72;
        v86 = *(__int16 *)(v76 + 2 * v68);
        if (!*(_WORD *)(v76 + 2 * v68))
        {
LABEL_68:
          v92 = v84 - *v351;
          LOBYTE(v88) = v92;
          goto LABEL_69;
        }
      }
      else
      {
        v83 = (unsigned __int16)(v72 >> (17 - (v82 + v74))) * v80;
        v86 = *(__int16 *)(v76 + 2 * v68);
        if (!*(_WORD *)(v76 + 2 * v68))
          goto LABEL_68;
      }
    }
    else
    {
      v83 = v80 * v75;
      v84 = *v73;
      v85 = *v73 - v60 - 6;
      v86 = *(__int16 *)(v76 + 2 * v68);
      if (!*(_WORD *)(v76 + 2 * v68))
        goto LABEL_68;
    }
    v87 = __clz(v86 ^ (v86 >> 15)) - 17;
    v88 = (__int16)(v84 - *v351);
    v89 = v87 - v88;
    if (v87 < v88)
    {
      v90 = v86 << v87;
      v91 = v37[v68] >> (v88 - v87);
      goto LABEL_72;
    }
    v92 = v88;
LABEL_69:
    v89 = 0;
    v93 = v86 >> -(char)v88;
    v90 = v86 << v88;
    if (v92 < 0)
      v90 = v93;
    LOWORD(v91) = v37[v68];
LABEL_72:
    v94 = v90 + (((__int16)v91 - (__int16)v90) >> 4);
    v95 = (__int16)(v90 + (((__int16)v91 - (__int16)v90) >> 4));
    v96 = __clz((__int16)((v90 + (((__int16)v91 - (__int16)v90) >> 4)) ^ (v95 >> 15))) - 17;
    if (!(_WORD)v94)
      v96 = 0;
    v97 = v95 >> v89;
    if (v89 < 0)
      LOWORD(v97) = v94 << -(char)v89;
    v98 = v94 & 1;
    if (v96 >= -v89 || v98 == 0)
      v100 = v97;
    else
      v100 = 0x7FFF;
    *(_WORD *)(v76 + 2 * v68) = v100;
    if (!v83)
    {
LABEL_51:
      v78 = 0x4000;
      goto LABEL_52;
    }
    if (v100)
    {
      v78 = 0;
      v101 = (v83 + (v100 >> 1)) / (unsigned __int16)v100;
      v102 = v101 << v85;
      v103 = v101 >> -(char)v85;
      if (v85 >= 0)
        v103 = v102;
      if (v103 <= 0x4000)
      {
        if (v103 < 0)
          goto LABEL_51;
        v78 = 0x4000 - (unsigned __int16)v103;
      }
    }
    else
    {
      v78 = 0;
    }
LABEL_52:
    *(_WORD *)&v354[2 * v68] = v78;
    if (v78)
      v79 = v69 + 1;
    else
      v79 = v69;
    v69 = v79;
    ++v68;
  }
  while (v68 != 65);
  if (*(_WORD *)(a1 + 568) == 2)
  {
    *(int16x8_t *)v354 = vshrn_high_n_s32(vshrn_n_s32(vmull_s16(*(int16x4_t *)v354, *(int16x4_t *)v354), 0xEuLL), vmull_high_s16(*(int16x8_t *)v354, *(int16x8_t *)v354), 0xEuLL);
    *(int16x8_t *)&v354[16] = vshrn_high_n_s32(vshrn_n_s32(vmull_s16(*(int16x4_t *)&v354[16], *(int16x4_t *)&v354[16]), 0xEuLL), vmull_high_s16(*(int16x8_t *)&v354[16], *(int16x8_t *)&v354[16]), 0xEuLL);
    v104 = *(int16x8_t *)&v354[48];
    v105 = (uint32x4_t)vmull_high_s16(v104, v104);
    v106 = (uint32x4_t)vmull_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v104.i8);
    v107 = (int32x4_t)vshrq_n_u32(v106, 0xEuLL);
    v108 = (int32x4_t)vshrq_n_u32(v105, 0xEuLL);
    v109 = (int8x16_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)v106, 0xEuLL), (int32x4_t)v105, 0xEuLL);
    *(int16x8_t *)&v354[32] = vshrn_high_n_s32(vshrn_n_s32(vmull_s16(*(int16x4_t *)&v354[32], *(int16x4_t *)&v354[32]), 0xEuLL), vmull_high_s16(*(int16x8_t *)&v354[32], *(int16x8_t *)&v354[32]), 0xEuLL);
    v110 = (int16x8_t)v355;
    v111 = (int16x8_t)v356;
    v112 = (uint32x4_t)vmull_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v110.i8);
    v113 = (uint32x4_t)vmull_high_s16(v110, v110);
    v114 = (uint32x4_t)vmull_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v111.i8);
    v115 = (uint32x4_t)vmull_high_s16(v111, v111);
    v116 = (int32x4_t)vshrq_n_u32(v113, 0xEuLL);
    v117 = (int32x4_t)vshrq_n_u32(v112, 0xEuLL);
    v118 = (int32x4_t)vshrq_n_u32(v115, 0xEuLL);
    v119 = (int32x4_t)vshrq_n_u32(v114, 0xEuLL);
    v120 = (int8x16_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)v112, 0xEuLL), (int32x4_t)v113, 0xEuLL);
    v121 = (int8x16_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)v114, 0xEuLL), (int32x4_t)v115, 0xEuLL);
    v122 = (int16x8_t)v357;
    v123 = v358;
    v124 = (uint32x4_t)vmull_s16(*(int16x4_t *)v122.i8, *(int16x4_t *)v122.i8);
    v125 = (uint32x4_t)vmull_high_s16(v122, v122);
    v126 = (uint32x4_t)vmull_s16(*(int16x4_t *)v123.i8, *(int16x4_t *)v123.i8);
    v127 = (uint32x4_t)vmull_high_s16(v123, v123);
    v128 = (int32x4_t)vshrq_n_u32(v125, 0xEuLL);
    v129 = (int32x4_t)vshrq_n_u32(v124, 0xEuLL);
    v63 = (int8x16_t)vshrq_n_u32(v126, 0xEuLL);
    v130 = (int8x16_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)v124, 0xEuLL), (int32x4_t)v125, 0xEuLL);
    v131 = (int8x16_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)v126, 0xEuLL), (int32x4_t)v127, 0xEuLL);
    v132 = vshrq_n_s32(vshlq_n_s32(v107, 0x10uLL), 0x10uLL);
    v133 = (vaddvq_s32(vaddw_s16(vaddq_s32(vaddl_s16(*(int16x4_t *)&v354[8], *(int16x4_t *)&v354[24]), vaddl_high_s16(*(int16x8_t *)&v354[8], *(int16x8_t *)&v354[24])), *(int16x4_t *)&v354[40]))+ v132.i32[0])/ 21;
    v134 = vdupq_n_s32(v133);
    v135 = (int8x16_t)vdupq_n_s16(v133);
    *(int8x16_t *)&v354[48] = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v132, v134), (int16x8_t)vcgtq_s32(vshrq_n_s32(vshlq_n_s32(v108, 0x10uLL), 0x10uLL), v134)), v135, v109);
    v355 = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(vshrq_n_s32(vshlq_n_s32(v117, 0x10uLL), 0x10uLL), v134), (int16x8_t)vcgtq_s32(vshrq_n_s32(vshlq_n_s32(v116, 0x10uLL), 0x10uLL), v134)), v135, v120);
    v356 = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(vshrq_n_s32(vshlq_n_s32(v119, 0x10uLL), 0x10uLL), v134), (int16x8_t)vcgtq_s32(vshrq_n_s32(vshlq_n_s32(v118, 0x10uLL), 0x10uLL), v134)), v135, v121);
    v357 = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(vshrq_n_s32(vshlq_n_s32(v129, 0x10uLL), 0x10uLL), v134), (int16x8_t)vcgtq_s32(vshrq_n_s32(vshlq_n_s32(v128, 0x10uLL), 0x10uLL), v134)), v135, v130);
    v358 = (int16x8_t)vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)v63, 0x10uLL), 0x10uLL), v134), (int16x8_t)vcgtq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32(v127, 0xEuLL), 0x10uLL), 0x10uLL), v134)), v135, v131);
    if (v133 >= (__int16)((v359 * v359) >> 14))
      LOWORD(v133) = (v359 * v359) >> 14;
    v359 = v133;
  }
  if (*v8)
  {
    v136 = 0;
    v137 = v62 + 130;
    v139 = v354 < (_BYTE *)v9 + 260 && v360 > (_BYTE *)v9;
    v141 = v9 + 130 > v62 && v137 > v9;
    v142 = (v69 > 2) << 14;
    v143 = v360 <= (_BYTE *)v62 || v354 >= (_BYTE *)v137;
    if (v143 && !v139 && !v141)
    {
      v144 = vdup_n_s8(v69 > 2);
      v145.i64[0] = 0x4000400040004000;
      v145.i64[1] = 0x4000400040004000;
      v146 = vdupq_n_s16(0xCCDu);
      v147 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s16(*(int16x8_t *)v354, v145), (int8x16_t)v145, vbicq_s8(*(int8x16_t *)v354, (int8x16_t)vcgtq_s16(v146, *(int16x8_t *)v354)));
      v148 = (uint16x8_t)vdupq_n_s16(v142);
      *(int8x16_t *)v354 = vbslq_s8((int8x16_t)vcltzq_s16(vshlq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vand_s8(v144, vmovn_s16(vceqq_s16(v147, v145)))), 0xFuLL)), (int8x16_t)v145, (int8x16_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_u16(*(uint16x4_t *)v148.i8, *(uint16x4_t *)v147.i8), 0xEuLL), (int32x4_t)vmull_high_u16(v148, (uint16x8_t)v147), 0xEuLL));
      v149 = (const __int16 *)((unint64_t)v362 & 0xFFFFFFFFFFFFFFE0);
      v401 = vld2q_s16(v149);
      v149 += 16;
      v405.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v354, *(int16x4_t *)v401.val[0].i8), 0xEuLL), vmull_high_s16(*(int16x8_t *)v354, v401.val[0]), 0xEuLL);
      v405.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v354, *(int16x4_t *)v401.val[1].i8), 0xEuLL), vmull_high_s16(*(int16x8_t *)v354, v401.val[1]), 0xEuLL);
      v150 = (__int16 *)((unint64_t)v361 & 0xFFFFFFFFFFFFFFE0);
      vst2q_s16(v150, v405);
      v150 += 16;
      v151 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s16(*(int16x8_t *)&v354[16], v145), (int8x16_t)v145, vbicq_s8(*(int8x16_t *)&v354[16], (int8x16_t)vcgtq_s16(v146, *(int16x8_t *)&v354[16])));
      v152 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(vshlq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vand_s8(v144, vmovn_s16(vceqq_s16(v151, v145)))), 0xFuLL)), (int8x16_t)v145, (int8x16_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_u16(*(uint16x4_t *)v148.i8, *(uint16x4_t *)v151.i8), 0xEuLL), (int32x4_t)vmull_high_u16(v148, (uint16x8_t)v151), 0xEuLL));
      v402 = vld2q_s16(v149);
      v405.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v152.i8, *(int16x4_t *)v402.val[0].i8), 0xEuLL), vmull_high_s16(v152, v402.val[0]), 0xEuLL);
      v405.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v152.i8, *(int16x4_t *)v402.val[1].i8), 0xEuLL), vmull_high_s16(v152, v402.val[1]), 0xEuLL);
      vst2q_s16(v150, v405);
      v402.val[1] = *(int16x8_t *)&v354[48];
      v402.val[0] = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s16(*(int16x8_t *)&v354[32], v145), (int8x16_t)v145, vbicq_s8(*(int8x16_t *)&v354[32], (int8x16_t)vcgtq_s16(v146, *(int16x8_t *)&v354[32])));
      v402.val[0] = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(vshlq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vand_s8(v144, vmovn_s16(vceqq_s16(v402.val[0], v145)))), 0xFuLL)), (int8x16_t)v145, (int8x16_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_u16(*(uint16x4_t *)v148.i8, *(uint16x4_t *)v402.val[0].i8), 0xEuLL), (int32x4_t)vmull_high_u16(v148, (uint16x8_t)v402.val[0]), 0xEuLL));
      v153 = v9 + 32;
      v406 = vld2q_s16(v153);
      v409.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v402.val[0].i8, *(int16x4_t *)v406.val[0].i8), 0xEuLL), vmull_high_s16(v402.val[0], v406.val[0]), 0xEuLL);
      v409.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v402.val[0].i8, *(int16x4_t *)v406.val[1].i8), 0xEuLL), vmull_high_s16(v402.val[0], v406.val[1]), 0xEuLL);
      v154 = v62 + 32;
      vst2q_s16(v154, v409);
      v402.val[1] = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s16(v402.val[1], v145), (int8x16_t)v145, vbicq_s8((int8x16_t)v402.val[1], (int8x16_t)vcgtq_s16(v146, v402.val[1])));
      v402.val[1] = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(vshlq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vand_s8(v144, vmovn_s16(vceqq_s16(v402.val[1], v145)))), 0xFuLL)), (int8x16_t)v145, (int8x16_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_u16(*(uint16x4_t *)v148.i8, *(uint16x4_t *)v402.val[1].i8), 0xEuLL), (int32x4_t)vmull_high_u16(v148, (uint16x8_t)v402.val[1]), 0xEuLL));
      v155 = v9 + 48;
      v407 = vld2q_s16(v155);
      v409.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v402.val[1].i8, *(int16x4_t *)v407.val[0].i8), 0xEuLL), vmull_high_s16(v402.val[1], v407.val[0]), 0xEuLL);
      v409.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v402.val[1].i8, *(int16x4_t *)v407.val[1].i8), 0xEuLL), vmull_high_s16(v402.val[1], v407.val[1]), 0xEuLL);
      v156 = v62 + 48;
      vst2q_s16(v156, v409);
      v407.val[0] = (int16x8_t)v356;
      v157 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s16((int16x8_t)v355, v145), (int8x16_t)v145, vbicq_s8(v355, (int8x16_t)vcgtq_s16(v146, (int16x8_t)v355)));
      v158 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(vshlq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vand_s8(v144, vmovn_s16(vceqq_s16(v157, v145)))), 0xFuLL)), (int8x16_t)v145, (int8x16_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_u16(*(uint16x4_t *)v148.i8, *(uint16x4_t *)v157.i8), 0xEuLL), (int32x4_t)vmull_high_u16(v148, (uint16x8_t)v157), 0xEuLL));
      v159 = v9 + 64;
      v409 = vld2q_s16(v159);
      v410.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v158.i8, *(int16x4_t *)v407.val[1].i8), 0xEuLL), vmull_high_s16(v158, v407.val[1]), 0xEuLL);
      v410.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v158.i8, *(int16x4_t *)v409.val[0].i8), 0xEuLL), vmull_high_s16(v158, v409.val[0]), 0xEuLL);
      v160 = v62 + 64;
      vst2q_s16(v160, v410);
      *(int16x8_t *)&v354[16] = v152;
      *(int16x8x2_t *)&v354[32] = v402;
      v355 = (int8x16_t)v158;
      v161 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s16(v407.val[0], v145), (int8x16_t)v145, vbicq_s8((int8x16_t)v407.val[0], (int8x16_t)vcgtq_s16(v146, v407.val[0])));
      v162 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(vshlq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vand_s8(v144, vmovn_s16(vceqq_s16(v161, v145)))), 0xFuLL)), (int8x16_t)v145, (int8x16_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_u16(*(uint16x4_t *)v148.i8, *(uint16x4_t *)v161.i8), 0xEuLL), (int32x4_t)vmull_high_u16(v148, (uint16x8_t)v161), 0xEuLL));
      v163 = v9 + 80;
      v403 = vld2q_s16(v163);
      v407.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v162.i8, *(int16x4_t *)v403.val[0].i8), 0xEuLL), vmull_high_s16(v162, v403.val[0]), 0xEuLL);
      v407.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v162.i8, *(int16x4_t *)v403.val[1].i8), 0xEuLL), vmull_high_s16(v162, v403.val[1]), 0xEuLL);
      v164 = v62 + 80;
      vst2q_s16(v164, v407);
      v63 = (int8x16_t)v358;
      v403.val[0] = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s16((int16x8_t)v357, v145), (int8x16_t)v145, vbicq_s8(v357, (int8x16_t)vcgtq_s16(v146, (int16x8_t)v357)));
      v403.val[0] = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(vshlq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vand_s8(v144, vmovn_s16(vceqq_s16(v403.val[0], v145)))), 0xFuLL)), (int8x16_t)v145, (int8x16_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_u16(*(uint16x4_t *)v148.i8, *(uint16x4_t *)v403.val[0].i8), 0xEuLL), (int32x4_t)vmull_high_u16(v148, (uint16x8_t)v403.val[0]), 0xEuLL));
      v165 = v9 + 96;
      v408 = vld2q_s16(v165);
      v409.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v403.val[0].i8, *(int16x4_t *)v408.val[0].i8), 0xEuLL), vmull_high_s16(v403.val[0], v408.val[0]), 0xEuLL);
      v409.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v403.val[0].i8, *(int16x4_t *)v408.val[1].i8), 0xEuLL), vmull_high_s16(v403.val[0], v408.val[1]), 0xEuLL);
      v166 = v62 + 96;
      vst2q_s16(v166, v409);
      v356 = (int8x16_t)v162;
      v357 = (int8x16_t)v403.val[0];
      v167 = (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s16((int16x8_t)v63, v145), (int8x16_t)v145, vbicq_s8(v63, (int8x16_t)vcgtq_s16(v146, (int16x8_t)v63)));
      v358 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(vshlq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vand_s8(v144, vmovn_s16(vceqq_s16(v167, v145)))), 0xFuLL)), (int8x16_t)v145, (int8x16_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_u16(*(uint16x4_t *)v148.i8, *(uint16x4_t *)v167.i8), 0xEuLL), (int32x4_t)vmull_high_u16(v148, (uint16x8_t)v167), 0xEuLL));
      v168 = v9 + 112;
      v392 = vld2q_s16(v168);
      v169 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v358.i8, *(int16x4_t *)v392.val[0].i8), 0xEuLL), vmull_high_s16(v358, v392.val[0]), 0xEuLL);
      v403.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v358.i8, *(int16x4_t *)v392.val[1].i8), 0xEuLL), vmull_high_s16(v358, v392.val[1]), 0xEuLL);
      v170 = v62 + 112;
      vst2q_s16(v170, v403);
      v136 = 64;
    }
    do
    {
      v171 = *(unsigned __int16 *)&v354[2 * v136];
      v172 = (__int16)v171;
      if ((__int16)v171 < 3277)
        v171 = 0;
      if (v172 > 0x4000)
        v171 = 0x4000;
      v173 = v171 != 0x4000 || v69 <= 2;
      v174 = (v142 * v171) >> 14;
      if (!v173)
        LOWORD(v174) = 0x4000;
      *(_WORD *)&v354[2 * v136] = v174;
      v175 = &v9[2 * v136];
      v176.i32[0] = *v175;
      v176.i32[1] = v175[1];
      v177 = vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x200000002000, vdup_n_s32((__int16)v174), v176), 0xEuLL);
      v178 = &v62[2 * v136];
      *v178 = v177.i16[0];
      v178[1] = v177.i16[2];
      ++v136;
    }
    while (v136 != 65);
  }
  else
  {
    v179 = 0;
    v180 = v62 + 130;
    v182 = v360 > (_BYTE *)v62 && v354 < (_BYTE *)v180;
    v183 = v180 > v9 && v9 + 130 > v62;
    if (!v183 && !v182)
    {
      v184 = (const __int16 *)((unint64_t)v362 & 0xFFFFFFFFFFFFFFE0);
      v377 = vld2q_s16(v184);
      v184 += 16;
      v400.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v354, *(int16x4_t *)v377.val[0].i8), 0xEuLL), vmull_high_s16(*(int16x8_t *)v354, v377.val[0]), 0xEuLL);
      v400.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v377.val[1].i8, *(int16x4_t *)v354), 0xEuLL), vmull_high_s16(v377.val[1], *(int16x8_t *)v354), 0xEuLL);
      v185 = (__int16 *)((unint64_t)v361 & 0xFFFFFFFFFFFFFFE0);
      vst2q_s16(v185, v400);
      v185 += 16;
      v378 = vld2q_s16(v184);
      v400.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)&v354[16], *(int16x4_t *)v378.val[0].i8), 0xEuLL), vmull_high_s16(*(int16x8_t *)&v354[16], v378.val[0]), 0xEuLL);
      v400.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v378.val[1].i8, *(int16x4_t *)&v354[16]), 0xEuLL), vmull_high_s16(v378.val[1], *(int16x8_t *)&v354[16]), 0xEuLL);
      vst2q_s16(v185, v400);
      v186 = v9 + 32;
      v379 = vld2q_s16(v186);
      v187 = *(int16x8_t *)&v354[48];
      v400.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)&v354[32], *(int16x4_t *)v379.val[0].i8), 0xEuLL), vmull_high_s16(*(int16x8_t *)&v354[32], v379.val[0]), 0xEuLL);
      v188 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v379.val[1].i8, *(int16x4_t *)&v354[32]), 0xEuLL), vmull_high_s16(v379.val[1], *(int16x8_t *)&v354[32]), 0xEuLL);
      v189 = v62 + 32;
      vst2q_s16(v189, *(int16x8x2_t *)((char *)&v400 + 16));
      v190 = v9 + 48;
      v380 = vld2q_s16(v190);
      v400.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v187.i8, *(int16x4_t *)v380.val[0].i8), 0xEuLL), vmull_high_s16(v187, v380.val[0]), 0xEuLL);
      v400.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v380.val[1].i8, *(int16x4_t *)v187.i8), 0xEuLL), vmull_high_s16(v380.val[1], v187), 0xEuLL);
      v191 = v62 + 48;
      vst2q_s16(v191, v400);
      v192 = v9 + 64;
      v381 = vld2q_s16(v192);
      v193 = (int16x8_t)v356;
      v400.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v355.i8, *(int16x4_t *)v381.val[0].i8), 0xEuLL), vmull_high_s16((int16x8_t)v355, v381.val[0]), 0xEuLL);
      v194 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v381.val[1].i8, *(int16x4_t *)v355.i8), 0xEuLL), vmull_high_s16(v381.val[1], (int16x8_t)v355), 0xEuLL);
      v195 = v62 + 64;
      vst2q_s16(v195, *(int16x8x2_t *)((char *)&v400 + 16));
      v196 = v9 + 80;
      v382 = vld2q_s16(v196);
      v400.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v193.i8, *(int16x4_t *)v382.val[0].i8), 0xEuLL), vmull_high_s16(v193, v382.val[0]), 0xEuLL);
      v400.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v382.val[1].i8, *(int16x4_t *)v193.i8), 0xEuLL), vmull_high_s16(v382.val[1], v193), 0xEuLL);
      v197 = v62 + 80;
      vst2q_s16(v197, v400);
      v198 = v9 + 96;
      v383 = vld2q_s16(v198);
      v199 = v358;
      v400.val[0] = (int16x8_t)vmull_high_s16((int16x8_t)v357, v383.val[0]);
      v400.val[1] = (int16x8_t)vmull_s16(*(int16x4_t *)v357.i8, *(int16x4_t *)v383.val[0].i8);
      v63 = (int8x16_t)vmull_high_s16(v383.val[1], (int16x8_t)v357);
      v383.val[0] = (int16x8_t)vmull_s16(*(int16x4_t *)v383.val[1].i8, *(int16x4_t *)v357.i8);
      v383.val[1] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)v400.val[1], 0xEuLL), (int32x4_t)v400.val[0], 0xEuLL);
      v200 = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)v383.val[0], 0xEuLL), (int32x4_t)v63, 0xEuLL);
      v201 = v62 + 96;
      vst2q_s16(v201, *(int16x8x2_t *)((char *)&v383 + 16));
      v202 = v9 + 112;
      v384 = vld2q_s16(v202);
      v400.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v199.i8, *(int16x4_t *)v384.val[0].i8), 0xEuLL), vmull_high_s16(v199, v384.val[0]), 0xEuLL);
      v400.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v384.val[1].i8, *(int16x4_t *)v199.i8), 0xEuLL), vmull_high_s16(v384.val[1], v199), 0xEuLL);
      v203 = v62 + 112;
      vst2q_s16(v203, v400);
      v179 = 64;
    }
    do
    {
      v204 = &v9[2 * v179];
      v205.i32[0] = *v204;
      v205.i32[1] = v204[1];
      v206 = vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x200000002000, vdup_n_s32(*(__int16 *)&v354[2 * v179]), v205), 0xEuLL);
      v207 = &v62[2 * v179];
      *v207 = v206.i16[0];
      v207[1] = v206.i16[2];
      ++v179;
    }
    while (v179 != 65);
  }
  if (*(_WORD *)(v349 + 526) == 1)
  {
    v208 = 15 - *v73;
    v209 = *(__int16 *)(v349 + 524);
    if (v209 > 99)
    {
      v210 = 9;
    }
    else
    {
      *(_WORD *)(v349 + 524) = v209 + 1;
      v210 = 6;
    }
    v211 = 0;
    v212 = (int *)(a1 + 16448);
    while (2)
    {
      v214 = v37[v211] << v208;
      v215 = *v212;
      v58 = __OFSUB__(*v212, v214);
      v216 = *v212 - v214;
      if (!((v216 < 0) ^ v58 | (v216 == 0)))
      {
        v212[65] = 0;
        if (v215 < 1 << v210)
        {
          v217 = v212[130];
          v212[130] = v217 + 1;
          if (v217 >= 4)
          {
            *v212 = v215 - 1;
            v212[130] = 0;
          }
          goto LABEL_146;
        }
        v213 = v215 - (v216 >> v210);
LABEL_145:
        *v212 = v213;
        goto LABEL_146;
      }
      v212[130] = 0;
      if (v215 >= 0x80000)
      {
        v213 = 2049 * (v215 >> 11);
        goto LABEL_145;
      }
      if (v215 >= 2048)
      {
        v213 = (2049 * v215) >> 11;
        goto LABEL_145;
      }
      v218 = v212[65];
      v212[65] = v218 + 1;
      if (v218 >= 4)
      {
        *v212 = v215 + (v215 >> 9) + 1;
        v212[65] = 0;
      }
LABEL_146:
      ++v211;
      ++v212;
      if (v211 != 65)
        continue;
      break;
    }
    v219 = 0;
    v220 = v208;
    v221 = 0x7FFF << v208;
    v222 = (int32x4_t *)(a1 + 16448);
    v223 = vnegq_s32(vdupq_n_s32(v220));
    v224.i64[0] = 0x7F0000007FLL;
    v224.i64[1] = 0x7F0000007FLL;
    v225.i64[0] = 0x4000400040004000;
    v225.i64[1] = 0x4000400040004000;
    while (2)
    {
      v227 = vshlq_s32(*v222, v223);
      v228 = (int16x8_t)vcgtq_s32(v227, v224);
      *(int16x4_t *)v228.i8 = vmovn_s32((int32x4_t)v228);
      if ((vmovn_s16(v228).u8[0] & 1) != 0)
      {
        v222->i32[0] = v221;
        if ((vmovn_s16(v228).i8[1] & 1) == 0)
          goto LABEL_161;
LABEL_165:
        v222->i32[1] = v221;
        if ((vmovn_s16(v228).i8[2] & 1) == 0)
          goto LABEL_166;
LABEL_162:
        v222->i32[2] = v221;
        if ((vmovn_s16(v228).i8[3] & 1) == 0)
          goto LABEL_168;
LABEL_167:
        v222->i32[3] = v221;
        goto LABEL_168;
      }
      if ((vmovn_s16(v228).i8[1] & 1) != 0)
        goto LABEL_165;
LABEL_161:
      if ((vmovn_s16(v228).i8[2] & 1) != 0)
        goto LABEL_162;
LABEL_166:
      if ((vmovn_s16(v228).i8[3] & 1) != 0)
        goto LABEL_167;
LABEL_168:
      v229 = vshlq_s32(v222[1], v223);
      v230 = vcgtq_s32(v229, v224);
      v231 = (int16x4_t)vmovn_s16(vmovn_hight_s32(*(int16x4_t *)v63.i8, v230));
      if ((v231.i8[4] & 1) != 0)
      {
        v222[1].i32[0] = v221;
        v232 = (int16x4_t)vmovn_s16(vmovn_hight_s32(v231, v230));
        if ((v232.i8[5] & 1) == 0)
          goto LABEL_170;
LABEL_174:
        v222[1].i32[1] = v221;
        if ((vmovn_s16(vmovn_hight_s32(v232, v230)).i8[6] & 1) == 0)
          goto LABEL_175;
LABEL_171:
        v222[1].i32[2] = v221;
        if ((vmovn_s16(vmovn_hight_s32(*(int16x4_t *)&v230, v230)).i8[7] & 1) != 0)
          goto LABEL_176;
      }
      else
      {
        v232 = (int16x4_t)vmovn_s16(vmovn_hight_s32(v231, v230));
        if ((v232.i8[5] & 1) != 0)
          goto LABEL_174;
LABEL_170:
        if ((vmovn_s16(vmovn_hight_s32(v232, v230)).i8[6] & 1) != 0)
          goto LABEL_171;
LABEL_175:
        if ((vmovn_s16(vmovn_hight_s32(*(int16x4_t *)&v230, v230)).i8[7] & 1) != 0)
LABEL_176:
          v222[1].i32[3] = v221;
      }
      v226 = vsubq_s16(v225, *(int16x8_t *)&v354[v219]);
      v63 = (int8x16_t)vmovl_s16(*(int16x4_t *)v226.i8);
      *(int16x8_t *)&v369[v219] = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32(vminq_s32(v227, v224), 0x10uLL), 0x10uLL), (int32x4_t)v63), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32(vminq_s32(v229, v224), 0x10uLL), 0x10uLL), vmovl_high_s16(v226)), 0xEuLL);
      v219 += 16;
      v222 += 2;
      if (v219 == 128)
      {
        v233 = *(int *)v349 >> v220;
        if (v233 >= 0x8000)
        {
          *(_DWORD *)v349 = v221;
          LOWORD(v233) = 0x7FFF;
        }
        v234 = 0;
        v370 = ((__int16)v233 * (__int16)(0x4000 - v359)) >> 14;
        v235 = *(_DWORD *)(a1 + 572);
        do
        {
          v236 = 69069 * v235 + 1;
          v235 = v236 & 0x7FFFFFFF;
          *(_WORD *)&v375[v234 + 2] = HIWORD(v236) & 0x7FFF;
          v234 += 2;
        }
        while (v234 != 128);
        *(_DWORD *)(a1 + 572) = v235;
        v373[0].i16[0] = 0;
        v237 = 1;
        v371[0].i16[0] = 0;
        do
        {
          v238 = *(__int16 *)&v369[v237 * 2];
          v239 = (uint64_t)((unint64_t)((359 * *(__int16 *)&v375[v237 * 2]) >> 15) << 48) >> 47;
          v373[0].i16[v237] = (*(__int16 *)((char *)&webrtc::WebRtcAecm_kCosTable + v239) * v238) >> 13;
          v371[0].i16[v237++] = -(v238 * *(__int16 *)((char *)&webrtc::WebRtcAecm_kSinTable + v239)) >> 13;
        }
        while (v237 != 65);
        v372 = 0;
        v240 = (__int16 *)((unint64_t)v361 & 0xFFFFFFFFFFFFFFE0);
        v385 = vld2q_s16(v240);
        v240 += 16;
        v393 = vld2q_s16(v240);
        v241 = v373[1];
        v404.val[0] = vqaddq_s16(v385.val[0], v373[0]);
        v242 = v371[1];
        v404.val[1] = vqaddq_s16(v385.val[1], v371[0]);
        vst2q_s16(v62, v404);
        v385.val[0] = vqaddq_s16(v393.val[0], v241);
        v385.val[1] = vqaddq_s16(v393.val[1], v242);
        vst2q_s16(v240, v385);
        v243 = v62 + 32;
        v386 = vld2q_s16(v243);
        v244 = v62 + 48;
        v394 = vld2q_s16(v244);
        v245 = v373[3];
        v404.val[0] = vqaddq_s16(v386.val[0], v373[2]);
        v246 = v371[3];
        v404.val[1] = vqaddq_s16(v386.val[1], v371[2]);
        vst2q_s16(v243, v404);
        v386.val[0] = vqaddq_s16(v394.val[0], v245);
        v386.val[1] = vqaddq_s16(v394.val[1], v246);
        vst2q_s16(v244, v386);
        v247 = v62 + 64;
        v387 = vld2q_s16(v247);
        v248 = v62 + 80;
        v395 = vld2q_s16(v248);
        v249 = v373[5];
        v404.val[0] = vqaddq_s16(v387.val[0], v373[4]);
        v250 = v371[5];
        v404.val[1] = vqaddq_s16(v387.val[1], v371[4]);
        vst2q_s16(v247, v404);
        v387.val[0] = vqaddq_s16(v395.val[0], v249);
        v387.val[1] = vqaddq_s16(v395.val[1], v250);
        vst2q_s16(v248, v387);
        v251 = v62 + 96;
        v388 = vld2q_s16(v251);
        v252 = v62 + 112;
        v396 = vld2q_s16(v252);
        v253 = v373[7];
        v404.val[0] = vqaddq_s16(v388.val[0], v373[6]);
        v254 = v371[7];
        v404.val[1] = vqaddq_s16(v388.val[1], v371[6]);
        vst2q_s16(v251, v404);
        v255 = *(__int16 *)(((unint64_t)v361 & 0xFFFFFFFFFFFFFFE0) + 0x100) + v374;
        if (v255 >= 0x7FFF)
          v255 = 0x7FFF;
        if (v255 <= -32768)
          LOWORD(v255) = 0x8000;
        *(_WORD *)(((unint64_t)v361 & 0xFFFFFFFFFFFFFFE0) + 0x100) = v255;
        v256 = *(__int16 *)(((unint64_t)v361 & 0xFFFFFFFFFFFFFFE0) + 0x102) + v372;
        v257 = vqaddq_s16(v396.val[0], v253);
        v258 = vqaddq_s16(v396.val[1], v254);
        if (v256 >= 0x7FFF)
          v256 = 0x7FFF;
        if (v256 <= -32768)
          LOWORD(v256) = 0x8000;
        *(_WORD *)(((unint64_t)v361 & 0xFFFFFFFFFFFFFFE0) + 0x102) = v256;
        vst2q_s16(v252, *(int16x8x2_t *)v257.i8);
        break;
      }
      continue;
    }
  }
  v260 = v62 + 2;
  if (v348 + 2 >= v62 + 128 || v260 >= v348 + 128)
  {
    v389 = vld2q_s16(v260);
    v263 = v62 + 18;
    v397 = vld2q_s16(v263);
    v389.val[1] = vnegq_s16(v389.val[1]);
    v259 = v348 + 2;
    vst2q_s16(v259, v389);
    v397.val[1] = vnegq_s16(v397.val[1]);
    v264 = v348 + 18;
    vst2q_s16(v264, v397);
    v265 = v62 + 34;
    v390 = vld2q_s16(v265);
    v266 = v62 + 50;
    v398 = vld2q_s16(v266);
    v390.val[1] = vnegq_s16(v390.val[1]);
    v267 = v348 + 34;
    vst2q_s16(v267, v390);
    v398.val[1] = vnegq_s16(v398.val[1]);
    v268 = v348 + 50;
    vst2q_s16(v268, v398);
    v269 = v62 + 66;
    v270 = v62 + 82;
    v391 = vld2q_s16(v269);
    v391.val[1] = vnegq_s16(v391.val[1]);
    v399 = vld2q_s16(v270);
    v399.val[1] = vnegq_s16(v399.val[1]);
    v271 = v348 + 66;
    v272 = v348 + 82;
    vst2q_s16(v271, v391);
    vst2q_s16(v272, v399);
    v261 = 98;
    v262 = 49;
  }
  else
  {
    v261 = 2;
    v262 = 1;
  }
  v273 = 2 * v262;
  v274 = &v348[v261 + 1];
  do
  {
    *(v274 - 1) = v62[v273];
    *v274 = -v62[v273 + 1];
    v274 += 2;
    v273 += 2;
  }
  while (v273 != 128);
  *v348 = *v62;
  *(_WORD *)(((unint64_t)v364 & 0xFFFFFFFFFFFFFFE0) + 2) = -*(_WORD *)(((unint64_t)v361 & 0xFFFFFFFFFFFFFFE0)
                                                                              + 2);
  v275 = v62 + 128;
  *(_WORD *)(((unint64_t)v364 & 0xFFFFFFFFFFFFFFE0) + 0x100) = *(_WORD *)(((unint64_t)v361 & 0xFFFFFFFFFFFFFFE0)
                                                                                 + 0x100);
  *(_WORD *)(((unint64_t)v364 & 0xFFFFFFFFFFFFFFE0) + 0x102) = -*(_WORD *)(((unint64_t)v361 & 0xFFFFFFFFFFFFFFE0)
                                                                                  + 0x102);
  v276 = WebRtcSpl_RealInverseFFT(*(_QWORD *)(a1 + 17280), (uint64_t)v348);
  v277 = *(__int16 **)(a1 + 16048);
  v278 = a5 + 64;
  v279 = v277 + 64;
  v281 = v277 + 64 > v62 && v277 < v275;
  v285 = v351 > v62 && v73 < v275;
  v287 = v279 > a5 && v277 < v278;
  v291 = v351 > a5 && v73 < v278;
  v295 = v277 < v351 && v73 < v279;
  v296 = v275 > a5 && v278 > v62;
  if (v296 || v281 || v283 || v285 || v287 || v289 || v291 || v293 || v295)
  {
    v319 = 0;
    v320 = 0x80u;
    do
    {
           + 0x2000;
      v62[v319] = v321 >> 14;
      v322 = *v73;
      v58 = __OFSUB__(v276, v322);
      v323 = v276 - v322;
      v324 = (__int16)(v321 >> 14);
      v325 = v324 << v323;
      v326 = v324 >> -(char)v323;
      if (v323 < 0 == v58)
        v326 = v325;
      v327 = v326 + v277[v319];
      if (v327 <= -32768)
        v327 = -32768;
      if (v327 >= 0x7FFF)
        LOWORD(v327) = 0x7FFF;
      a5[v319] = v327;
      v329 = *v73;
      v58 = __OFSUB__(v276, v329);
      v330 = v276 - v329;
      v331 = v328 << v330;
      v332 = v328 >> -(char)v330;
      if (v330 < 0 == v58)
        v332 = v331;
      if (v332 <= -32768)
        v332 = -32768;
      if (v332 >= 0x7FFF)
        LOWORD(v332) = 0x7FFF;
      v277[v319++] = v332;
      v320 -= 2;
    }
    while (v320);
  }
  else
  {
    v297 = 0;
    v298 = vld1_dup_s16(v73);
    v299 = (uint32x4_t)vsubw_s16(vdupq_n_s32(v276), v298);
    v300 = 0x72u;
    v301 = (int8x16_t)vcltzq_s32((int32x4_t)v299);
    v302 = vnegq_s32(vnegq_s32((int32x4_t)v299));
    do
    {
      v303 = *(int16x8_t *)&v62[v297 / 2];
      v305 = vmull_high_s16(v304, v303);
      v306 = vmull_s16(*(int16x4_t *)v304.i8, *(int16x4_t *)v303.i8);
      v307.i64[0] = 0x200000002000;
      v307.i64[1] = 0x200000002000;
      v308 = (uint32x4_t)vmlal_s16(v307, *(int16x4_t *)v304.i8, *(int16x4_t *)v303.i8);
      v309.i64[0] = 0x200000002000;
      v309.i64[1] = 0x200000002000;
      v310 = (int32x4_t)vshrq_n_u32((uint32x4_t)vmlal_high_s16(v309, v304, v303), 0xEuLL);
      *(int16x8_t *)&v62[v297 / 2] = vrshrn_high_n_s32(vrshrn_n_s32(v306, 0xEuLL), v305, 0xEuLL);
      v311 = (uint32x4_t)vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32(v308, 0xEuLL), 0x10uLL), 0x10uLL);
      v312 = (uint32x4_t)vshrq_n_s32(vshlq_n_s32(v310, 0x10uLL), 0x10uLL);
      *(int16x8_t *)&a5[v297 / 2] = vqmovn_high_s32(vqmovn_s32(vaddw_s16((int32x4_t)vbslq_s8(v301, (int8x16_t)vshlq_s32((int32x4_t)v311, v302), (int8x16_t)vshlq_u32(v311, v299)), *(int16x4_t *)&v277[v297 / 2])), vaddw_high_s16((int32x4_t)vbslq_s8(v301, (int8x16_t)vshlq_s32((int32x4_t)v312, v302), (int8x16_t)vshlq_u32(v312, v299)), *(int16x8_t *)&v277[v297 / 2]));
      v313 = *(int16x8_t *)&v62[v297 / 2 + 64];
      v315 = (int16x8_t)vextq_s8(v314, v314, 8uLL);
      v316 = vmull_s16(*(int16x4_t *)v315.i8, *(int16x4_t *)v313.i8);
      v317 = (uint32x4_t)vshrq_n_s32(vmull_high_s16(v315, v313), 0xEuLL);
      v318 = (uint32x4_t)vshrq_n_s32(v316, 0xEuLL);
      *(int16x8_t *)&v277[v297 / 2] = vqmovn_high_s32(vqmovn_s32((int32x4_t)vbslq_s8(v301, (int8x16_t)vshlq_s32((int32x4_t)v318, v302), (int8x16_t)vshlq_u32(v318, v299))), (int32x4_t)vbslq_s8(v301, (int8x16_t)vshlq_s32((int32x4_t)v317, v302), (int8x16_t)vshlq_u32(v317, v299)));
      v300 -= 16;
      v297 += 16;
    }
    while (v300 != -14);
  }
  v333 = *(_OWORD **)(a1 + 16024);
  v334 = v333[13];
  v333[4] = v333[12];
  v333[5] = v334;
  v335 = v333[15];
  v333[6] = v333[14];
  v333[7] = v335;
  v336 = v333[9];
  *v333 = v333[8];
  v333[1] = v336;
  v337 = v333[11];
  v333[2] = v333[10];
  v333[3] = v337;
  v338 = *(_QWORD *)(a1 + 16040);
  v339 = *(_OWORD *)(v338 + 240);
  *(_OWORD *)(v338 + 96) = *(_OWORD *)(v338 + 224);
  *(_OWORD *)(v338 + 112) = v339;
  v340 = *(_OWORD *)(v338 + 208);
  *(_OWORD *)(v338 + 64) = *(_OWORD *)(v338 + 192);
  *(_OWORD *)(v338 + 80) = v340;
  v341 = *(_OWORD *)(v338 + 176);
  *(_OWORD *)(v338 + 32) = *(_OWORD *)(v338 + 160);
  *(_OWORD *)(v338 + 48) = v341;
  result = *(__n128 *)(v338 + 144);
  *(_OWORD *)v338 = *(_OWORD *)(v338 + 128);
  *(__n128 *)(v338 + 16) = result;
  if (a4)
  {
    v342 = *(_QWORD *)(a1 + 16032);
    v343 = *(_OWORD *)(v342 + 208);
    *(_OWORD *)(v342 + 64) = *(_OWORD *)(v342 + 192);
    *(_OWORD *)(v342 + 80) = v343;
    v344 = *(_OWORD *)(v342 + 240);
    *(_OWORD *)(v342 + 96) = *(_OWORD *)(v342 + 224);
    *(_OWORD *)(v342 + 112) = v344;
    v345 = *(_OWORD *)(v342 + 144);
    *(_OWORD *)v342 = *(_OWORD *)(v342 + 128);
    *(_OWORD *)(v342 + 16) = v345;
    result = *(__n128 *)(v342 + 160);
    v346 = *(_OWORD *)(v342 + 176);
    *(__n128 *)(v342 + 32) = result;
    *(_OWORD *)(v342 + 48) = v346;
  }
  return result;
}

uint64_t webrtc::`anonymous namespace'::TimeToFrequencyDomain(uint64_t a1, int16x8_t *a2, const __int16 *a3, _WORD *a4, int *a5)
{
  int16x8_t *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int16x8_t *v14;
  _BOOL4 v16;
  uint64_t v19;
  uint64_t v20;
  __int16 *v21;
  uint32x4_t v22;
  uint64_t v23;
  const __int16 *v24;
  unsigned __int128 v25;
  int16x8_t v26;
  const __int16 *v27;
  unsigned __int128 v28;
  int16x8_t v29;
  const __int16 *v30;
  unsigned __int128 v31;
  int16x8_t v32;
  const __int16 *v33;
  unsigned __int128 v34;
  int16x8_t v35;
  const __int16 *v36;
  unsigned __int128 v37;
  int16x8_t v38;
  const __int16 *v39;
  unsigned __int128 v40;
  int16x8_t v41;
  const __int16 *v42;
  unsigned __int128 v43;
  int16x8_t v44;
  int v45;
  int v46;
  int v47;
  _WORD *v48;
  int v49;
  __int16 *v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned __int16 v56;
  _BYTE v58[521];

  *(_QWORD *)&v58[513] = *MEMORY[0x24BDAC8D0];
  v10 = (int16x8_t *)((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0);
  v11 = WebRtcSpl_MaxAbsValueW16C(a2, 0x80uLL);
  v12 = __clz(v11 ^ (v11 >> 15)) - 17;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = v10 + 16;
  if ((v14 <= a2 || &a2[16] <= v10) && !v16)
  {
    v22 = (uint32x4_t)vdupq_n_s32(v13);
    *v10 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2->i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F04300), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)a2), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F042F0), 0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0x80) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[8].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F04320), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[8]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F04310),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0x10) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[1].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F04340), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[1]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F04330),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0x90) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[9].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F04360), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[9]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F04350),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0x20) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[2].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F04380), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[2]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F04370),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0xA0) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[10].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F043A0), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[10]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F04390),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0x30) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[3].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F043C0), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[3]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F043B0),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0xB0) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[11].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F043E0), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[11]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F043D0),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0x40) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[4].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F04400), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[4]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F043F0),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0xC0) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[12].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F04420), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[12]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F04410),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0x50) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[5].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F04440), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[5]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F04430),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0xD0) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[13].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F04460), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[13]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F04450),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0x60) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[6].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F04480), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[6]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F04470),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0xE0) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[14].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F044A0), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[14]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F04490),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0x70) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[7].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F044C0), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[7]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F044B0),
                                                                              0xEuLL);
    *(int16x8_t *)(((unint64_t)v58 & 0xFFFFFFFFFFFFFFE0) + 0xF0) = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)a2[15].i8), v22), 0x10uLL), 0x10uLL), (int32x4_t)xmmword_208F044E0), 0xEuLL), vmulq_s32(vshrq_n_s32(vshlq_n_s32((int32x4_t)vshlq_u32(vmovl_high_u16((uint16x8_t)a2[15]), v22), 0x10uLL), 0x10uLL),
                                                                                (int32x4_t)xmmword_208F044D0),
                                                                              0xEuLL);
  }
  else
  {
    v19 = 0;
    v20 = 0x80u;
    do
    {
      v21 = &v10->i16[v19];
      *v21 = ((__int16)(a2->u16[v19] << v13)
      v21[64] = ((__int16)(a2[8].u16[v19++] << v13)
      v20 -= 2;
    }
    while (v20);
  }
  WebRtcSpl_RealForwardFFT(*(_QWORD *)(a1 + 17280), (unint64_t)v58 & 0xFFFFFFFFFFFFFFE0);
  v23 = 0;
  v24 = a3 + 1;
  v25 = (unsigned __int128)vld2q_s16(v24);
  v26 = vnegq_s16((int16x8_t)v25);
  *((_WORD *)a3 + 1) = v26.i16[0];
  *((_WORD *)a3 + 3) = v26.i16[1];
  *((_WORD *)a3 + 5) = v26.i16[2];
  *((_WORD *)a3 + 7) = v26.i16[3];
  *((_WORD *)a3 + 9) = v26.i16[4];
  *((_WORD *)a3 + 11) = v26.i16[5];
  *((_WORD *)a3 + 13) = v26.i16[6];
  v27 = a3 + 17;
  v28 = (unsigned __int128)vld2q_s16(v27);
  *((_WORD *)a3 + 15) = v26.i16[7];
  v29 = vnegq_s16((int16x8_t)v28);
  *((_WORD *)a3 + 19) = v29.i16[1];
  *((_WORD *)a3 + 21) = v29.i16[2];
  *((_WORD *)a3 + 23) = v29.i16[3];
  *((_WORD *)a3 + 25) = v29.i16[4];
  *((_WORD *)a3 + 27) = v29.i16[5];
  *((_WORD *)a3 + 29) = v29.i16[6];
  *((_WORD *)a3 + 31) = v29.i16[7];
  *((_WORD *)a3 + 17) = v29.i16[0];
  v30 = a3 + 33;
  v31 = (unsigned __int128)vld2q_s16(v30);
  v32 = vnegq_s16((int16x8_t)v31);
  *((_WORD *)a3 + 35) = v32.i16[1];
  *((_WORD *)a3 + 37) = v32.i16[2];
  *((_WORD *)a3 + 39) = v32.i16[3];
  *((_WORD *)a3 + 41) = v32.i16[4];
  *((_WORD *)a3 + 43) = v32.i16[5];
  *((_WORD *)a3 + 33) = v32.i16[0];
  *((_WORD *)a3 + 45) = v32.i16[6];
  *((_WORD *)a3 + 47) = v32.i16[7];
  v33 = a3 + 49;
  v34 = (unsigned __int128)vld2q_s16(v33);
  v35 = vnegq_s16((int16x8_t)v34);
  *((_WORD *)a3 + 51) = v35.i16[1];
  *((_WORD *)a3 + 53) = v35.i16[2];
  *((_WORD *)a3 + 55) = v35.i16[3];
  *((_WORD *)a3 + 57) = v35.i16[4];
  *((_WORD *)a3 + 59) = v35.i16[5];
  *((_WORD *)a3 + 61) = v35.i16[6];
  *((_WORD *)a3 + 49) = v35.i16[0];
  *((_WORD *)a3 + 63) = v35.i16[7];
  v36 = a3 + 65;
  v37 = (unsigned __int128)vld2q_s16(v36);
  v38 = vnegq_s16((int16x8_t)v37);
  *((_WORD *)a3 + 67) = v38.i16[1];
  *((_WORD *)a3 + 69) = v38.i16[2];
  *((_WORD *)a3 + 71) = v38.i16[3];
  *((_WORD *)a3 + 73) = v38.i16[4];
  *((_WORD *)a3 + 75) = v38.i16[5];
  *((_WORD *)a3 + 77) = v38.i16[6];
  *((_WORD *)a3 + 79) = v38.i16[7];
  *((_WORD *)a3 + 65) = v38.i16[0];
  v39 = a3 + 81;
  v40 = (unsigned __int128)vld2q_s16(v39);
  v41 = vnegq_s16((int16x8_t)v40);
  *((_WORD *)a3 + 83) = v41.i16[1];
  *((_WORD *)a3 + 85) = v41.i16[2];
  *((_WORD *)a3 + 87) = v41.i16[3];
  *((_WORD *)a3 + 89) = v41.i16[4];
  *((_WORD *)a3 + 91) = v41.i16[5];
  *((_WORD *)a3 + 81) = v41.i16[0];
  *((_WORD *)a3 + 93) = v41.i16[6];
  *((_WORD *)a3 + 95) = v41.i16[7];
  v42 = a3 + 97;
  v43 = (unsigned __int128)vld2q_s16(v42);
  v44 = vnegq_s16((int16x8_t)v43);
  *((_WORD *)a3 + 99) = v44.i16[1];
  *((_WORD *)a3 + 101) = v44.i16[2];
  *((_WORD *)a3 + 103) = v44.i16[3];
  *((_WORD *)a3 + 105) = v44.i16[4];
  *((_WORD *)a3 + 107) = v44.i16[5];
  *((_WORD *)a3 + 109) = v44.i16[6];
  *((_WORD *)a3 + 97) = v44.i16[0];
  *((_WORD *)a3 + 111) = v44.i16[7];
  *((_WORD *)a3 + 113) = -a3[113];
  *((_WORD *)a3 + 115) = -a3[115];
  *((_WORD *)a3 + 117) = -a3[117];
  *((_WORD *)a3 + 119) = -a3[119];
  *((_WORD *)a3 + 121) = -a3[121];
  *((_WORD *)a3 + 123) = -a3[123];
  *((_WORD *)a3 + 125) = -a3[125];
  *((_WORD *)a3 + 127) = -a3[127];
  *((_WORD *)a3 + 1) = 0;
  *((_WORD *)a3 + 129) = 0;
  v45 = *a3;
  if (v45 < 0)
    v45 = -v45;
  *a4 = v45;
  v46 = a3[128];
  if (v46 < 0)
    v46 = -v46;
  a4[64] = v46;
  v47 = (unsigned __int16)v46 + (unsigned __int16)v45;
  v48 = a4 + 1;
  *a5 = v47;
  do
  {
    while (1)
    {
      v50 = (__int16 *)&a3[v23 * 2];
      v51 = (unsigned __int16)v50[2];
      v52 = (unsigned __int16)v50[3];
      if (v51)
        break;
      if ((v52 & 0x8000u) == 0)
        LOWORD(v49) = v52;
      else
        v49 = -(__int16)v52;
LABEL_29:
      v48[v23] = v49;
      v47 += (unsigned __int16)v49;
      *a5 = v47;
      if (++v23 == 63)
        return v13;
    }
    if ((v51 & 0x8000u) == 0)
      LOWORD(v49) = v51;
    else
      v49 = -(__int16)v51;
    if (!v52)
      goto LABEL_29;
    LOWORD(v53) = v52;
    if ((v52 & 0x8000u) != 0)
      v53 = -(__int16)v52;
    v54 = (__int16)v49 * (__int16)v49 + (__int16)v53 * (__int16)v53;
    if (v54 >= 0x7FFFFFFF)
      v55 = 0x7FFFFFFF;
    else
      v55 = v54;
    v56 = WebRtcSpl_SqrtFloor(v55);
    v48[v23] = v56;
    v47 = *a5 + v56;
    *a5 = v47;
    ++v23;
  }
  while (v23 != 63);
  return v13;
}

void webrtc::Agc::~Agc(webrtc::Agc *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C0ACBD8;
  webrtc::VoiceActivityDetector::~VoiceActivityDetector((webrtc::Agc *)((char *)this + 40));
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 640);
    *(_QWORD *)(v2 + 640) = 0;
    if (v3)
      MEMORY[0x20BD0ADD4](v3, 0x1000C8052888210);
    v4 = *(_QWORD *)(v2 + 632);
    *(_QWORD *)(v2 + 632) = 0;
    if (v4)
      MEMORY[0x20BD0ADD4](v4, 0x1000C8052888210);
    MEMORY[0x20BD0ADEC](v2, 0x1010C40BAFAAD9ALL);
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 640);
    *(_QWORD *)(v5 + 640) = 0;
    if (v6)
      MEMORY[0x20BD0ADD4](v6, 0x1000C8052888210);
    v7 = *(_QWORD *)(v5 + 632);
    *(_QWORD *)(v5 + 632) = 0;
    if (v7)
      MEMORY[0x20BD0ADD4](v7, 0x1000C8052888210);
    MEMORY[0x20BD0ADEC](v5, 0x1010C40BAFAAD9ALL);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C0ACBD8;
  webrtc::VoiceActivityDetector::~VoiceActivityDetector((webrtc::Agc *)((char *)this + 40));
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 640);
    *(_QWORD *)(v2 + 640) = 0;
    if (v3)
      MEMORY[0x20BD0ADD4](v3, 0x1000C8052888210);
    v4 = *(_QWORD *)(v2 + 632);
    *(_QWORD *)(v2 + 632) = 0;
    if (v4)
      MEMORY[0x20BD0ADD4](v4, 0x1000C8052888210);
    MEMORY[0x20BD0ADEC](v2, 0x1010C40BAFAAD9ALL);
  }
  v5 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 640);
    *(_QWORD *)(v5 + 640) = 0;
    if (v6)
      MEMORY[0x20BD0ADD4](v6, 0x1000C8052888210);
    v7 = *(_QWORD *)(v5 + 632);
    *(_QWORD *)(v5 + 632) = 0;
    if (v7)
      MEMORY[0x20BD0ADD4](v7, 0x1000C8052888210);
    MEMORY[0x20BD0ADEC](v5, 0x1010C40BAFAAD9ALL);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::Agc::Process(_QWORD *a1, __int16 *a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  long double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  signed int v14;

  webrtc::VoiceActivityDetector::ProcessChunk((webrtc::VoiceActivityDetector *)(a1 + 5), a2, a3, 100 * a3);
  v4 = a1[8];
  if (a1[9] != v4)
  {
    v5 = 0;
    while (1)
    {
      v7 = a1[5];
      if (v5 >= (a1[6] - v7) >> 3)
        break;
      v8 = *(double *)(v4 + 8 * v5);
      v9 = a1[3];
      v10 = *(double *)(v7 + 8 * v5);
      if (*(int *)(v9 + 656) >= 1 && *(_DWORD *)(v9 + 652))
      {
        v11 = 4 * *(int *)(v9 + 648);
        v12 = *(int *)(*(_QWORD *)(v9 + 632) + v11);
        v13 = v9 + 8 * *(int *)(*(_QWORD *)(v9 + 640) + v11);
        *(_QWORD *)(v13 + 16) -= v12;
        *(_QWORD *)(v9 + 8) -= v12;
      }
      if (v8 <= 0.0759621092)
      {
        v6 = 0;
      }
      else if (v8 >= 35664.7189)
      {
        v6 = 76;
      }
      else
      {
        v14 = vcvtmd_s64_f64((log(v8) + 2.57752063) * 5.81954606);
        if ((webrtc::kHistBinCenters[v14] + webrtc::kHistBinCenters[v14 + 1]) * 0.5 >= v8)
          v6 = v14;
        else
          v6 = v14 + 1;
      }
      webrtc::LoudnessHistogram::InsertNewestEntryAndUpdate(v9, vcvtmd_s64_f64(v10 * 1024.0), v6);
      ++v5;
      v4 = a1[8];
      if (v5 >= (a1[9] - v4) >> 3)
        return;
    }
    __break(1u);
  }
}

uint64_t webrtc::Agc::GetRmsErrorDb(webrtc::Agc *this, int *a2)
{
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t v8;
  double v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  double v13;
  double v14;

  if (!a2)
    return 0;
  v3 = *((_QWORD *)this + 3);
  if (*(int *)v3 < 100)
    return 0;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = (double)v5;
  if ((double)v5 * 0.0009765625 < 30.0)
    return 0;
  if (v5 < 1)
  {
    v13 = 0.0759621092;
  }
  else
  {
    v8 = 0;
    v9 = 0.0;
    v10 = 1.0 / v6;
    do
    {
      v11 = vmulq_f64(vmulq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(v3 + v8 * 8 + 16)), v10), *(float64x2_t *)&webrtc::kHistBinCenters[v8]);
      v12 = vmulq_f64(vmulq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(v3 + v8 * 8 + 32)), v10), *(float64x2_t *)&webrtc::kHistBinCenters[v8 + 2]);
      v9 = v9 + v11.f64[0] + v11.f64[1] + v12.f64[0] + v12.f64[1];
      v8 += 4;
    }
    while (v8 != 76);
    v13 = v9 + v10 * (double)*(uint64_t *)(v3 + 624) * 35664.7189;
    v14 = -15.0;
    if (v13 == 0.0)
      goto LABEL_13;
  }
  v14 = log(v13) * 5.81954606;
LABEL_13:
  *a2 = vcvtmd_s64_f64((*((double *)this + 1) - v14) * 8.68588964 / 5.81954606 + 0.5);
  *(_DWORD *)v3 = 0;
  *(_QWORD *)(v3 + 648) = 0;
  *(_DWORD *)(v3 + 660) = 0;
  bzero((void *)(v3 + 8), 0x270uLL);
  return 1;
}

void webrtc::Agc::Reset(webrtc::Agc *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  *(_DWORD *)v1 = 0;
  *(_QWORD *)(v1 + 648) = 0;
  *(_DWORD *)(v1 + 660) = 0;
  bzero((void *)(v1 + 8), 0x270uLL);
}

double webrtc::Agc::set_target_level_dbfs(webrtc::Agc *this, int a2)
{
  double result;

  if (a2 >= 0xFFFFFF9D)
  {
    *((_DWORD *)this + 4) = a2;
    result = ((double)a2 + 90.0) * 5.81954606 / 8.68588964;
    *((double *)this + 1) = result;
  }
  return result;
}

uint64_t webrtc::Agc::target_level_dbfs(webrtc::Agc *this)
{
  return *((unsigned int *)this + 4);
}

float webrtc::Agc::voice_probability(webrtc::Agc *this)
{
  return *((float *)this + 22);
}

void webrtc::MonoAgc::SetLevel(webrtc::MonoAgc *this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  float v13;
  int v14;

  v2 = *((_DWORD *)this + 11);
  if (v2)
  {
    if (v2 < 0x100)
    {
      v11 = *((_DWORD *)this + 4);
      if (v2 > v11 + 25 || v2 < v11 - 25)
      {
        *((_DWORD *)this + 4) = v2;
        if (v2 > *((_DWORD *)this + 5))
        {
          v13 = floorf((float)((float)((float)(255.0 - (float)v2) / (float)(255 - *((_DWORD *)this + 15))) * 6.0) + 0.5)
              + 12.0;
          *((_DWORD *)this + 5) = v2;
          *((_DWORD *)this + 6) = (int)v13;
        }
        (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
        *((_DWORD *)this + 16) = 0;
        *((_BYTE *)this + 68) = 0;
      }
      else
      {
        v14 = *((_DWORD *)this + 5);
        if (v14 >= a2)
          v14 = a2;
        if (v14 != v11)
        {
          *((_DWORD *)this + 11) = v14;
          *((_DWORD *)this + 4) = v14;
        }
      }
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc/agc_manager_direct.cc");
    }
  }
}

uint64_t webrtc::AgcManagerDirect::AgcManagerDirect(uint64_t a1, int a2, uint64_t a3)
{
  int *v5;
  size_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  void *v10;
  void **v11;
  void **v12;
  _DWORD *v13;
  void **v14;
  uint64_t v17;
  unsigned int v18;
  size_t v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _BYTE *v41;
  uint64_t v42;
  BOOL v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v76;
  void *__p[2];
  unsigned __int8 v78;
  char __s[48];
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a1 = *(_BYTE *)a3;
  v5 = (int *)(a1 + 4);
  strcpy(__s, "WebRTC-Audio-2ndAgcMinMicLevelExperiment");
  v6 = strlen(__s);
  v7 = __p;
  webrtc::field_trial::FindFullName((size_t)__s, v6, (size_t *)__p);
  v8 = v78;
  v9 = (char)v78;
  v10 = __p[0];
  if ((v78 & 0x80u) != 0)
  {
    v8 = (uint64_t)__p[1];
    v7 = (void **)__p[0];
  }
  v11 = (void **)((char *)v7 + v8);
  if (v8 >= 7)
  {
    v12 = v7;
    do
    {
      v13 = memchr(v12, 69, v8 - 6);
      if (!v13)
        break;
      v14 = (void **)v13;
      if (*v13 == 1650552389 && *(_DWORD *)((char *)v13 + 3) == 1684368482)
        goto LABEL_12;
      v12 = (void **)((char *)v13 + 1);
      v8 = (char *)v11 - ((char *)v14 + 1);
    }
    while (v8 > 6);
  }
  v14 = v11;
LABEL_12:
  if (v9 < 0)
  {
    operator delete(v10);
    if (v14 == v11 || v14 != v7)
      goto LABEL_17;
  }
  else if (v14 == v11 || v14 != v7)
  {
LABEL_17:
    v17 = 0;
    v18 = 0;
    goto LABEL_33;
  }
  v20 = strlen(__s);
  webrtc::field_trial::FindFullName((size_t)__s, v20, (size_t *)__p);
  v76 = -1;
  if ((v78 & 0x80u) == 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  sscanf((const char *)v21, "Enabled-%d", &v76);
  v18 = v76;
  if (v76 < 0x100)
  {
    v17 = 0x100000000;
    if (((char)v78 & 0x80000000) == 0)
      goto LABEL_33;
LABEL_32:
    operator delete(__p[0]);
    goto LABEL_33;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t\t", v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc/agc_manager_direct.cc");
  v17 = 0;
  v18 = 0;
  if ((char)v78 < 0)
    goto LABEL_32;
LABEL_33:
  *(_QWORD *)(a1 + 4) = v17 & 0x100000000 | v18;
  v29 = operator new();
  do
    v30 = __ldaxr((unsigned int *)&webrtc::AgcManagerDirect::instance_counter_);
  while (__stlxr(v30 + 1, (unsigned int *)&webrtc::AgcManagerDirect::instance_counter_));
  *(_QWORD *)(a1 + 16) = v29;
  *(_DWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a3 + 12) ^ 1;
  v31 = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 32) = v31;
  *(_BYTE *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(a1 + 56) = v31;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (a2)
  {
    if (a2 < 0)
      abort();
    v32 = 8 * a2;
    v33 = (char *)operator new(v32);
    *(_QWORD *)(a1 + 64) = v33;
    v34 = &v33[v32];
    *(_QWORD *)(a1 + 80) = &v33[v32];
    bzero(v33, v32);
    *(_QWORD *)(a1 + 72) = v34;
    v35 = (char *)operator new(v32);
    *(_QWORD *)(a1 + 88) = v35;
    v36 = &v35[v32];
    *(_QWORD *)(a1 + 104) = &v35[v32];
    v37 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v37)
    {
      v38 = v37 + 1;
      v39 = (v37 + 1) & 0x3FFFFFFFFFFFFFFELL;
      v40 = &v35[8 * v39];
      v41 = v35 + 8;
      v42 = v39;
      do
      {
        *(v41 - 8) = 0;
        *v41 = 0;
        *(v41 - 4) = 0;
        v41[4] = 0;
        v41 += 16;
        v42 -= 2;
      }
      while (v42);
      if (v38 == v39)
        goto LABEL_45;
    }
    else
    {
      v40 = v35;
    }
    do
    {
      *v40 = 0;
      v40[4] = 0;
      v40 += 8;
    }
    while (v40 != v36);
LABEL_45:
    *(_QWORD *)(a1 + 96) = v36;
    goto LABEL_46;
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
LABEL_46:
  webrtc::CreateClippingPredictor(a2, (unsigned __int8 *)(a3 + 28), (uint64_t *)(a1 + 112));
  if (*(_QWORD *)(a1 + 112))
    v43 = *(_BYTE *)(a3 + 56) == 0;
  else
    v43 = 1;
  v44 = !v43;
  *(_BYTE *)(a1 + 120) = v44;
  *(_QWORD *)(a1 + 124) = 0;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t", v45, v46, v47, v48, v49, v50, v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc/agc_manager_direct.cc");
  if (*(_BYTE *)(a1 + 8))
    v52 = v5;
  else
  v53 = *v52;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v54, v55, v56, v57, v58, v59, v60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc/agc_manager_direct.cc");
  if (*(_QWORD *)(a1 + 72) == *(_QWORD *)(a1 + 64))
    goto LABEL_69;
  v61 = 0;
  do
  {
    v64 = operator new();
    v65 = *(_DWORD *)(a3 + 8);
    v66 = *(_BYTE *)(a1 + 28);
    *(_DWORD *)v64 = v53;
    *(_BYTE *)(v64 + 4) = v66;
    v67 = operator new();
    *(_QWORD *)v67 = &off_24C0ACBD8;
    *(_QWORD *)(v67 + 8) = 0x40481EB851EB851ELL;
    *(_DWORD *)(v67 + 16) = -18;
    v68 = operator new();
    *(_DWORD *)v68 = 0;
    bzero((void *)(v68 + 8), 0x270uLL);
    *(_QWORD *)(v68 + 632) = operator new[]();
    *(_QWORD *)(v68 + 640) = operator new[]();
    *(_OWORD *)(v68 + 648) = xmmword_208F04580;
    *(_QWORD *)(v67 + 24) = v68;
    v69 = (_DWORD *)operator new();
    *v69 = 0;
    bzero(v69 + 2, 0x290uLL);
    *(_QWORD *)(v67 + 32) = v69;
    webrtc::VoiceActivityDetector::VoiceActivityDetector((webrtc::VoiceActivityDetector *)(v67 + 40));
    *(_QWORD *)(v64 + 8) = v67;
    *(_OWORD *)(v64 + 16) = xmmword_208F045D0;
    *(_QWORD *)(v64 + 32) = 0x40E0000000000007;
    *(_WORD *)(v64 + 40) = 257;
    *(_BYTE *)(v64 + 42) = 1;
    *(_DWORD *)(v64 + 44) = 0;
    *(_BYTE *)(v64 + 48) = 0;
    *(_BYTE *)(v64 + 52) = 0;
    *(_BYTE *)(v64 + 56) = 0;
    v70 = *(_QWORD *)(a1 + 64);
    v71 = *(_QWORD *)(a1 + 72) - v70;
    *(_DWORD *)(v64 + 60) = v65;
    *(_DWORD *)(v64 + 64) = 0;
    *(_BYTE *)(v64 + 68) = 1;
    if (v61 >= v71 >> 3)
      goto LABEL_69;
    v72 = *(_QWORD *)(v70 + 8 * v61);
    *(_QWORD *)(v70 + 8 * v61) = v64;
    if (v72)
    {
      v73 = *(_QWORD *)(v72 + 8);
      *(_QWORD *)(v72 + 8) = 0;
      if (v73)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
      MEMORY[0x20BD0ADEC](v72, 0x1020C40275618A5);
    }
    ++v61;
    v62 = *(_QWORD *)(a1 + 64);
    v63 = *(_QWORD *)(a1 + 72);
  }
  while (v61 < (v63 - v62) >> 3);
  if (v63 == v62)
LABEL_69:
    __break(1u);
  *(_BYTE *)(*(_QWORD *)v62 + 56) = 1;
  return a1;
}

void webrtc::AgcManagerDirect::~AgcManagerDirect(webrtc::AgcManagerDirect *this)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 11);
  if (v3)
  {
    *((_QWORD *)this + 12) = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 8);
  if (v4)
  {
    v5 = (_QWORD *)*((_QWORD *)this + 9);
    v6 = (void *)*((_QWORD *)this + 8);
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
        {
          v9 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v9)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          MEMORY[0x20BD0ADEC](v7, 0x1020C40275618A5);
        }
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v4;
    operator delete(v6);
  }
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
    MEMORY[0x20BD0ADEC](v10, 0xC400A2AC0F1);
}

void webrtc::AgcManagerDirect::SetupDigitalGainControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 2)
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc/agc_manager_direct.cc");
  }
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 2 * (*(_BYTE *)(a1 + 28) == 0))&& (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc/agc_manager_direct.cc");
  }
  if (*(_BYTE *)(a1 + 28))
    v18 = 0;
  else
    v18 = 7;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v18)
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc/agc_manager_direct.cc");
  }
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)a2 + 64))(a2, *(_BYTE *)(a1 + 28) == 0))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc/agc_manager_direct.cc");
  }
}

uint64_t webrtc::AgcManagerDirect::AnalyzePreProcess(uint64_t this, const webrtc::AudioBuffer *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t i;
  int v11;
  BOOL v12;
  int v13;
  float v14;
  int v15;
  uint64_t v16;
  int v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  unint64_t v21;
  int v22;
  float32x4_t *v23;
  int32x4_t v24;
  unint64_t v25;
  int32x4_t v26;
  unint64_t v27;
  float *v28;
  float v29;
  int v30;
  float v31;
  float v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  float v44;
  unint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t *v51;
  uint64_t *j;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  uint64_t k;
  int v67;
  BOOL v68;
  uint64_t v69;
  int v70;
  int v71;

  v3 = *(_QWORD *)(this + 64);
  v2 = *(_QWORD *)(this + 72);
  v4 = v2 - v3;
  if (v2 == v3)
  {
LABEL_105:
    __break(1u);
    return this;
  }
  v5 = this;
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8);
  v7 = *((_QWORD *)a2 + 3);
  v8 = *(_DWORD *)(*(_QWORD *)v3 + 44);
  *(_DWORD *)(this + 44) = 0;
  if ((unint64_t)v4 >= 9)
  {
    v9 = v4 >> 3;
    if (v9 <= 2)
      v9 = 2;
    for (i = 1; i != v9; ++i)
    {
      v11 = *(_DWORD *)(*(_QWORD *)(v3 + 8 * i) + 44);
      if (v11 < v8)
      {
        *(_DWORD *)(this + 44) = i;
        v8 = v11;
      }
    }
  }
  if (*(_BYTE *)(this + 8))
    v12 = v8 <= 0;
  else
    v12 = 1;
  if (!v12 && v8 <= *(_DWORD *)(this + 4))
    v8 = *(_DWORD *)(this + 4);
  if (*(_BYTE *)this)
    *(_DWORD *)(this + 36) = v8;
  if (*(_BYTE *)(this + 40))
  {
    this = *(_QWORD *)(this + 112);
    if (this)
    {
      v13 = *(_DWORD *)(v5 + 24);
      v69 = v6;
      v70 = v13;
      v71 = v7;
      this = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)this + 24))(this, &v69);
    }
    v14 = 0.0;
    if (v7)
    {
      v15 = *(_DWORD *)(v5 + 24);
      if (v15)
      {
        v16 = 0;
        v17 = 0;
        v18 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
        v19.i64[0] = 0xC7000000C7000000;
        v19.i64[1] = 0xC7000000C7000000;
        while (1)
        {
          v20 = *(float32x4_t **)(v6 + 8 * v16);
          if (v7 < 8)
            break;
          v23 = v20 + 1;
          v24 = 0uLL;
          v25 = v7 & 0xFFFFFFFFFFFFFFF8;
          v26 = 0uLL;
          do
          {
            v24 = vsubq_s32(v24, (int32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(v23[-1], v18), (int8x16_t)vcgeq_f32(v19, v23[-1])));
            v26 = vsubq_s32(v26, (int32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(*v23, v18), (int8x16_t)vcgeq_f32(v19, *v23)));
            v23 += 2;
            v25 -= 8;
          }
          while (v25);
          v22 = vaddvq_s32(vaddq_s32(v26, v24));
          v21 = v7 & 0xFFFFFFFFFFFFFFF8;
          if (v7 != (v7 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_31;
LABEL_23:
          if (v17 <= v22)
            v17 = v22;
          if (++v16 == v15)
          {
            v14 = (float)v17;
            goto LABEL_37;
          }
        }
        v21 = 0;
        v22 = 0;
LABEL_31:
        v27 = v7 - v21;
        v28 = &v20->f32[v21];
        do
        {
          v29 = *v28++;
          v30 = v29 >= 32767.0;
          if (v29 <= -32768.0)
            v30 = 1;
          v22 += v30;
          --v27;
        }
        while (v27);
        goto LABEL_23;
      }
    }
LABEL_37:
    v31 = v14 / (float)v7;
    v32 = *(float *)(v5 + 124);
    if (v31 >= v32)
      v32 = v31;
    *(float *)(v5 + 124) = v32;
    v33 = *(_DWORD *)(v5 + 128) + 1;
    *(_DWORD *)(v5 + 128) = v33;
    if (v33 == 3000)
    {
      v34 = llroundf(v32 * 100.0);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc/agc_manager_direct.cc");
      if (this)
      {
        this = webrtc::metrics::HistogramAdd(this, v34);
      }
      else
      {
        {
            goto LABEL_47;
        }
        __clrex();
      }
LABEL_47:
      *(_QWORD *)(v5 + 124) = 0;
    }
    v43 = *(_DWORD *)(v5 + 32);
    if (v43 < *(_DWORD *)(v5 + 56))
    {
      *(_DWORD *)(v5 + 32) = v43 + 1;
      return this;
    }
    v44 = *(float *)(v5 + 52);
    if (*(_QWORD *)(v5 + 112) && *(int *)(v5 + 24) >= 1)
    {
      v45 = 0;
      v46 = 0;
      v47 = 0;
      while (1)
      {
        v48 = *(_QWORD *)(v5 + 64);
        if (v45 >= (*(_QWORD *)(v5 + 72) - v48) >> 3)
          goto LABEL_105;
        this = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(v5 + 112) + 32))(*(_QWORD *)(v5 + 112), v45, *(unsigned int *)(v5 + 36), *(unsigned int *)(v5 + 48), **(unsigned int **)(v48 + 8 * v45), 255);
        if (v47 <= (int)this)
          v49 = this;
        else
          v49 = v47;
        if ((this & 0xFF00000000) != 0)
        {
          v47 = v49;
          v46 = 1;
        }
        if ((uint64_t)++v45 >= *(int *)(v5 + 24))
        {
          v50 = *(_DWORD *)(v5 + 48);
          if ((v46 & 1) != 0)
          {
            if (v47 <= v50)
              v59 = *(_DWORD *)(v5 + 48);
            else
              v59 = v47;
            if (*(_BYTE *)(v5 + 120))
              v60 = v59;
            else
              v60 = *(_DWORD *)(v5 + 48);
            if (v31 <= v44)
              v50 = v59;
            else
              v50 = v60;
            if (v31 > v44 || *(_BYTE *)(v5 + 120))
              goto LABEL_65;
          }
          else if (v31 > v44)
          {
            goto LABEL_65;
          }
          goto LABEL_88;
        }
      }
    }
    if (v31 > v44)
    {
      v50 = *(_DWORD *)(v5 + 48);
LABEL_65:
      v51 = *(uint64_t **)(v5 + 64);
      for (j = *(uint64_t **)(v5 + 72); v51 != j; ++v51)
      {
        v53 = *v51;
        v54 = *(_DWORD *)(*v51 + 16);
        v55 = *(_DWORD *)(*v51 + 20) - v50;
        v56 = *(_DWORD *)(*v51 + 60);
        if (v56 > v55)
          v55 = *(_DWORD *)(*v51 + 60);
        *(_DWORD *)(v53 + 20) = v55;
        *(_DWORD *)(v53 + 24) = (int)(float)(floorf((float)((float)((float)(255.0 - (float)v55) / (float)(255 - v56)) * 6.0)+ 0.5)+ 12.0);
        if (v54 > v56)
        {
          v57 = v54 - v50;
          if (v56 <= v57)
            v58 = v57;
          else
            v58 = v56;
          webrtc::MonoAgc::SetLevel((webrtc::MonoAgc *)v53, v58);
          (*(void (**)(_QWORD))(**(_QWORD **)(v53 + 8) + 32))(*(_QWORD *)(v53 + 8));
          *(_DWORD *)(v53 + 64) = 0;
          *(_BYTE *)(v53 + 68) = 0;
        }
      }
      *(_DWORD *)(v5 + 32) = 0;
      this = *(_QWORD *)(v5 + 112);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
    }
LABEL_88:
    v62 = *(_QWORD *)(v5 + 64);
    v61 = *(_QWORD *)(v5 + 72);
    v63 = v61 - v62;
    if (v61 == v62)
      goto LABEL_105;
    v64 = *(_DWORD *)(*(_QWORD *)v62 + 44);
    *(_DWORD *)(v5 + 44) = 0;
    if ((unint64_t)v63 >= 9)
    {
      v65 = v63 >> 3;
      if (v65 <= 2)
        v65 = 2;
      for (k = 1; k != v65; ++k)
      {
        v67 = *(_DWORD *)(*(_QWORD *)(v62 + 8 * k) + 44);
        if (v67 < v64)
        {
          *(_DWORD *)(v5 + 44) = k;
          v64 = v67;
        }
      }
    }
    if (*(_BYTE *)(v5 + 8))
      v68 = v64 <= 0;
    else
      v68 = 1;
    if (!v68 && v64 <= *(_DWORD *)(v5 + 4))
      v64 = *(_DWORD *)(v5 + 4);
    if (*(_BYTE *)v5)
      *(_DWORD *)(v5 + 36) = v64;
  }
  return this;
}

void webrtc::AgcManagerDirect::Process(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t i;
  int v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  float v21;
  float v22;
  unsigned int v23;
  _WORD *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int8x16_t *v30;
  unint64_t v31;
  __n128 *v32;
  unint64_t v33;
  int8x16_t *v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  unint64_t v41;
  _WORD *v42;
  float *v43;
  float v44;
  int *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  float v78;
  float v79;
  int v80;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t j;
  int v91;
  BOOL v92;
  uint64_t v93;
  unsigned int v95;
  BOOL v96;
  int8x16_t v97;
  _WORD v98[3840];
  int v99[3];

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v8 = *(_QWORD *)(v2 + 64);
  v9 = *(_QWORD *)(v2 + 72);
  v10 = v9 - v8;
  if (v9 == v8)
    goto LABEL_137;
  v11 = v3;
  v12 = v2;
  v13 = *(_DWORD *)(*(_QWORD *)v8 + 44);
  *(_DWORD *)(v2 + 44) = 0;
  if ((unint64_t)v10 >= 9)
  {
    v14 = v10 >> 3;
    if (v14 <= 2)
      v14 = 2;
    for (i = 1; i != v14; ++i)
    {
      v16 = *(_DWORD *)(*(_QWORD *)(v8 + 8 * i) + 44);
      if (v16 < v13)
      {
        *(_DWORD *)(v2 + 44) = i;
        v13 = v16;
      }
    }
  }
  if (*(_BYTE *)(v2 + 8))
    v17 = v13 <= 0;
  else
    v17 = 1;
  if (!v17 && v13 <= *(_DWORD *)(v2 + 4))
    v13 = *(_DWORD *)(v2 + 4);
  if (*(_BYTE *)v2)
  {
    *(_DWORD *)(v2 + 36) = v13;
    if (!*(_BYTE *)(v2 + 40))
      return;
  }
  else
  {
    v13 = *(_DWORD *)(v2 + 36);
    if (!*(_BYTE *)(v2 + 40))
      return;
  }
  v18 = 0;
  v6.n128_u32[0] = v4;
  v19 = *(_QWORD *)(v3 + 72);
  v20 = (v5 & 0xFF00000000) == 0 || (v4 & 0xFF00000000) == 0;
  v7.i32[0] = 0.5;
  v21 = -18.0 - *(float *)&v5;
  if (*(float *)&v5 >= 30.0)
    v21 = -48.0;
  v22 = 72.0;
  if (*(float *)&v5 > -90.0)
    v22 = v21;
  v23 = llroundf(v22);
  if (*(float *)&v4 < 0.5)
    v23 = 0;
  v96 = v20;
  if (v20)
    v23 = 0;
  v95 = v23;
  if (v19)
    v24 = v98;
  else
    v24 = 0;
  v25.i64[0] = 0x8000000080000000;
  v25.i64[1] = 0x8000000080000000;
  v26 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
  v27.i64[0] = 0xC7000000C7000000;
  v27.i64[1] = 0xC7000000C7000000;
  v28.i64[0] = 0x3F0000003F000000;
  v28.i64[1] = 0x3F0000003F000000;
  v97 = v26;
  do
  {
    v29 = *(_QWORD *)(v11 + 88);
    if (!v29)
      v29 = *(_QWORD *)(v11 + 80);
    if (v19)
    {
      v30 = *(int8x16_t **)(*(_QWORD *)(v29 + 16) + 8 * *(_QWORD *)(v29 + 56) * v18);
      if (v19 >= 8)
      {
        v32 = (__n128 *)v98;
        v33 = v19 & 0xFFFFFFFFFFFFFFF8;
        v34 = v30;
        do
        {
          v35 = *v34;
          v36 = v34[1];
          v34 += 2;
          v37 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v35, (float32x4_t)v26), v26, v35);
          v38 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v36, (float32x4_t)v26), v26, v36);
          v39 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v27, (float32x4_t)v37), v27, v37);
          v40 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v27, (float32x4_t)v38), v27, v38);
          v6 = (__n128)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v39, (float32x4_t)vbslq_s8(v25, v28, v39))), (int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v40, (float32x4_t)vbslq_s8(v25, v28, v40))));
          *v32++ = v6;
          v33 -= 8;
        }
        while (v33);
        v31 = v19 & 0xFFFFFFFFFFFFFFF8;
        if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_48;
      }
      else
      {
        v31 = 0;
      }
      v41 = v19 - v31;
      v42 = &v98[v31];
      v43 = (float *)&v30->i32[v31];
      do
      {
        v44 = *v43++;
        v6.n128_f32[0] = v44;
        if (v44 > 32767.0)
          v6.n128_f32[0] = 32767.0;
        if (v6.n128_f32[0] < -32768.0)
          v6.n128_f32[0] = -32768.0;
        v6.n128_f32[0] = v6.n128_f32[0] + *(float *)vbslq_s8(v25, v7, (int8x16_t)v6).i32;
        *v42++ = (int)v6.n128_f32[0];
        --v41;
      }
      while (v41);
    }
LABEL_48:
    if (v18 >= (v9 - v8) >> 3)
      goto LABEL_137;
    v45 = *(int **)(v8 + 8 * v18);
    if (*((_BYTE *)v45 + 52))
      *((_BYTE *)v45 + 52) = 0;
    if (*((_BYTE *)v45 + 41))
    {
      *((_BYTE *)v45 + 41) = 0;
      v46 = v45[11];
      if (v46)
      {
        if (v46 >= 0x100)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v47, v48, v49, v50, v51, v52, v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc/agc_manager_direct.cc");
          goto LABEL_60;
        }
      }
      else if (!*((_BYTE *)v45 + 42))
      {
        goto LABEL_60;
      }
      v54 = *v45;
      if ((int)v46 < *v45)
      {
        v45[11] = v54;
        v46 = v54;
      }
      (*(void (**)(_QWORD, __n128))(**((_QWORD **)v45 + 1) + 32))(*((_QWORD *)v45 + 1), v6);
      v45[4] = v46;
      *((_BYTE *)v45 + 42) = 0;
      v45[16] = 0;
      *((_BYTE *)v45 + 68) = 1;
    }
LABEL_60:
    (*(void (**)(_QWORD, _WORD *, unint64_t, __n128))(**((_QWORD **)v45 + 1) + 16))(*((_QWORD *)v45 + 1), v24, v19, v6);
    v99[0] = 0;
    v55 = (*(uint64_t (**)(_QWORD, int *))(**((_QWORD **)v45 + 1) + 24))(*((_QWORD *)v45 + 1), v99);
    if (v96)
    {
      v7.i32[0] = 0.5;
      v25.i64[0] = 0x8000000080000000;
      v25.i64[1] = 0x8000000080000000;
      v26 = v97;
      v27.i64[0] = 0xC7000000C7000000;
      v27.i64[1] = 0xC7000000C7000000;
      v28.i64[0] = 0x3F0000003F000000;
      v28.i64[1] = 0x3F0000003F000000;
      if (!v55)
        goto LABEL_99;
      v56 = v99[0];
    }
    else
    {
      v7.i32[0] = 0.5;
      v25.i64[0] = 0x8000000080000000;
      v25.i64[1] = 0x8000000080000000;
      v26 = v97;
      v27.i64[0] = 0xC7000000C7000000;
      v27.i64[1] = 0xC7000000C7000000;
      v28.i64[0] = 0x3F0000003F000000;
      v28.i64[1] = 0x3F0000003F000000;
      if (*((_BYTE *)v45 + 68) || v45[16] < 0)
        goto LABEL_99;
      v56 = v95;
      v99[0] = v95;
    }
    v45[16] = 0;
    v57 = v56 + 2;
    v58 = v45[6];
    v59 = v45[7];
    if (v56 + 2 >= v58)
      v60 = v45[6];
    else
      v60 = v56 + 2;
    if (v56 <= 0)
      v61 = 2;
    else
      v61 = v60;
    v62 = v61 - v59;
    if (v61 < v59)
      ++v62;
    v63 = v59 + (v62 >> 1);
    if (v61 == 2 && v59 == 3)
      v63 = 2;
    if (v61 != v58 || v59 != v58 - 1)
      v58 = v63;
    v45[7] = v58;
    v66 = v57 - v61;
    if (v66 >= 15)
      v66 = 15;
    if (v66 <= -15)
      v66 = -15;
    if (v66)
    {
      v67 = v45[4];
      v68 = webrtc::kGainMap[v67];
      v69 = v67;
      if (v66 < 1)
      {
        v73 = v45[4];
        do
        {
          v74 = v73 - 1;
          if (v73 <= *v45)
            break;
          v75 = webrtc::kGainMap[v73--] - v68;
        }
        while (v75 > v66);
        v72 = v74 + 1;
      }
      else
      {
        do
        {
          v70 = v69 + 1;
          if (v69 > 254)
            break;
          v71 = webrtc::kGainMap[v69++] - v68;
        }
        while (v71 < v66);
        v72 = v70 - 1;
      }
      webrtc::MonoAgc::SetLevel((webrtc::MonoAgc *)v45, v72);
      v7.i32[0] = 0.5;
      v25.i64[0] = 0x8000000080000000;
      v25.i64[1] = 0x8000000080000000;
      v26 = v97;
      v27.i64[0] = 0xC7000000C7000000;
      v27.i64[1] = 0xC7000000C7000000;
      v28.i64[0] = 0x3F0000003F000000;
      v28.i64[1] = 0x3F0000003F000000;
      if ((_DWORD)v67 != v45[4])
      {
        (*(void (**)(_QWORD))(**((_QWORD **)v45 + 1) + 32))(*((_QWORD *)v45 + 1));
        v28.i64[0] = 0x3F0000003F000000;
        v28.i64[1] = 0x3F0000003F000000;
        v27.i64[0] = 0xC7000000C7000000;
        v27.i64[1] = 0xC7000000C7000000;
        v26 = v97;
        v25.i64[0] = 0x8000000080000000;
        v25.i64[1] = 0x8000000080000000;
        v7.i32[0] = 0.5;
      }
    }
LABEL_99:
    if (!*((_BYTE *)v45 + 4))
    {
      v77 = v45[7];
      v76 = v45[8];
      if (v76 != v77)
      {
        v78 = -0.05;
        if (v77 > v76)
          v78 = 0.05;
        v79 = v78 + *((float *)v45 + 9);
        *((float *)v45 + 9) = v79;
        v6.n128_f64[0] = v79 + 0.5;
        v80 = vcvtmd_s64_f64(v6.n128_f64[0]);
        v6.n128_f32[0] = (float)v80;
        if (vabds_f32(v79, (float)v80) < 0.025 && v76 != v80)
        {
          v45[8] = v80;
          v45[9] = v6.n128_u32[0];
          v45[12] = v80;
          *((_BYTE *)v45 + 52) = 1;
        }
      }
    }
    *((_BYTE *)v45 + 68) = 0;
    v82 = v45[16];
    if (v82 < 0)
      v45[16] = v82 + 1;
    v83 = *(_QWORD *)(v12 + 64);
    if (v18 >= (*(_QWORD *)(v12 + 72) - v83) >> 3)
      goto LABEL_137;
    v84 = *(_QWORD *)(v12 + 88);
    if (v18 >= (*(_QWORD *)(v12 + 96) - v84) >> 3)
      goto LABEL_137;
    v85 = *(_QWORD *)(*(_QWORD *)(v83 + 8 * v18) + 48);
    v86 = v84 + 8 * v18;
    *(_DWORD *)v86 = v85;
    *(_BYTE *)(v86 + 4) = BYTE4(v85);
    ++v18;
    v8 = *(_QWORD *)(v12 + 64);
    v9 = *(_QWORD *)(v12 + 72);
    v87 = (v9 - v8) >> 3;
  }
  while (v18 < v87);
  if (v9 == v8)
  {
LABEL_137:
    __break(1u);
    return;
  }
  v88 = *(_DWORD *)(*(_QWORD *)v8 + 44);
  *(_DWORD *)(v12 + 44) = 0;
  if ((unint64_t)(v9 - v8) >= 9)
  {
    v89 = 2;
    if (v87 > 2)
      v89 = v87;
    for (j = 1; j != v89; ++j)
    {
      v91 = *(_DWORD *)(*(_QWORD *)(v8 + 8 * j) + 44);
      if (v91 < v88)
      {
        *(_DWORD *)(v12 + 44) = j;
        v88 = v91;
      }
    }
  }
  if (*(_BYTE *)(v12 + 8))
    v92 = v88 <= 0;
  else
    v92 = 1;
  if (!v92 && v88 <= *(_DWORD *)(v12 + 4))
    v88 = *(_DWORD *)(v12 + 4);
  if (*(_BYTE *)v12)
  {
    *(_DWORD *)(v12 + 36) = v88;
    if (v13 == v88)
      return;
LABEL_131:
    v93 = atomic_load(&webrtc::UpdateHistogramOnRecommendedInputVolumeChangeToMatchTarget(int)::atomic_histogram_pointer);
    if (v93)
    {
      webrtc::metrics::HistogramAdd(v93, v88);
    }
    else
    {
      while (!__ldaxr(&webrtc::UpdateHistogramOnRecommendedInputVolumeChangeToMatchTarget(int)::atomic_histogram_pointer))
      {
        if (!__stlxr(0, &webrtc::UpdateHistogramOnRecommendedInputVolumeChangeToMatchTarget(int)::atomic_histogram_pointer))return;
      }
      __clrex();
    }
  }
  else
  {
    v88 = *(_DWORD *)(v12 + 36);
    if (v13 != v88)
      goto LABEL_131;
  }
}

void webrtc::AimdRateControl::AimdRateControl(uint64_t a1, uint64_t a2, char a3)
{
  int *p_p;
  unint64_t v7;
  _BOOL4 v8;
  int v9;
  int v10;
  const char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  unint64_t v29;
  BOOL v30;
  int v31;
  int v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *__p;
  unint64_t v44;
  unsigned __int8 v45;
  double v46[3];

  v46[2] = *(double *)MEMORY[0x24BDAC8D0];
  *(_OWORD *)a1 = xmmword_208F04A00;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x1C9C380uLL);
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0x3FD999999999999ALL;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(int64x2_t *)(a1 + 208) = vdupq_n_s64(0x8000000000000000);
  *(_QWORD *)(a1 + 224) = 0x8000000000000000;
  *(_BYTE *)(a1 + 232) = 0;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-BweBackOffFactor", 23);
  if ((char)v45 < 0)
  {
    v7 = v44;
    if ((v44 & 0x8000000000000000) != 0)
      goto LABEL_64;
    p_p = (int *)__p;
    if (v44)
    {
      if (!__p)
        goto LABEL_64;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v7 = v45;
  }
  if (v7 >= 7)
  {
    v9 = *p_p;
    v10 = *(int *)((char *)p_p + 3);
    v8 = v9 == 1650552389 && v10 == 1684368482;
    if ((v45 & 0x80) != 0)
    {
LABEL_25:
      operator delete(__p);
      if (!v8)
        goto LABEL_26;
      goto LABEL_17;
    }
  }
  else
  {
    v8 = 0;
    if ((v45 & 0x80) != 0)
      goto LABEL_25;
  }
  if (!v8)
  {
LABEL_26:
    v13 = 0.85;
    goto LABEL_34;
  }
LABEL_17:
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-BweBackOffFactor", 23);
  v46[0] = 0.0;
  if ((v45 & 0x80u) == 0)
    v12 = (const char *)&__p;
  else
    v12 = (const char *)__p;
  if (sscanf(v12, "Enabled-%lf", v46) != 1)
    goto LABEL_29;
  v13 = v46[0];
  if (v46[0] >= 1.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_28:
      rtc::webrtc_logging_impl::Log("\r\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/aimd_rate_control.cc");
LABEL_29:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/aimd_rate_control.cc");
    v13 = 0.85;
    goto LABEL_32;
  }
  if (v46[0] <= 0.0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      goto LABEL_28;
    goto LABEL_29;
  }
LABEL_32:
  if ((char)v45 < 0)
    operator delete(__p);
LABEL_34:
  *(double *)(a1 + 240) = v13;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 200000;
  *(_BYTE *)(a1 + 264) = a3;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-DontIncreaseDelayBasedBweInAlr", 37);
  if ((char)v45 < 0)
  {
    v29 = v44;
    if ((v44 & 0x8000000000000000) != 0)
      goto LABEL_64;
    v28 = (int *)__p;
    if (v44)
    {
      if (!__p)
        goto LABEL_64;
    }
  }
  else
  {
    v28 = (int *)&__p;
    v29 = v45;
  }
  if (v29 >= 7)
  {
    v31 = *v28;
    v32 = *(int *)((char *)v28 + 3);
    v30 = v31 == 1650552389 && v32 == 1684368482;
    if ((v45 & 0x80) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
  v30 = 0;
  if ((v45 & 0x80) != 0)
LABEL_49:
    operator delete(__p);
LABEL_50:
  *(_BYTE *)(a1 + 265) = v30;
  *(_QWORD *)(a1 + 272) = off_24C0B4170;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 327) = 8;
  if (a1 + 304 <= (unint64_t)"Disabled" && a1 + 312 > (unint64_t)"Disabled")
    goto LABEL_64;
  strcpy((char *)(a1 + 304), "Disabled");
  *(_WORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 272) = &unk_24C0B41A0;
  *(_QWORD *)(a1 + 336) = off_24C0B4170;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 391) = 7;
  if (a1 + 368 <= (unint64_t)"c_upper" && a1 + 375 > (unint64_t)"c_upper")
    goto LABEL_64;
  strcpy((char *)(a1 + 368), "c_upper");
  *(_WORD *)(a1 + 392) = 256;
  *(_QWORD *)(a1 + 336) = &unk_24C0B3FC0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_QWORD *)&v46[0] = a1 + 272;
  *(_QWORD *)&v46[1] = a1 + 336;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-Bwe-EstimateBoundedIncrease", 34);
  if (((char)v45 & 0x80000000) == 0)
  {
    v34 = v45;
    v35 = (char *)&__p;
    goto LABEL_59;
  }
  v34 = v44;
  if ((v44 & 0x8000000000000000) != 0 || (v35 = (char *)__p, v44) && !__p)
  {
LABEL_64:
    __break(1u);
    return;
  }
LABEL_59:
  webrtc::ParseFieldTrial(v46, 2, v35, v34);
  if (((char)v45 & 0x80000000) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      return;
LABEL_63:
    rtc::webrtc_logging_impl::Log("\r\t\a", v36, v37, v38, v39, v40, v41, v42, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/aimd_rate_control.cc");
    return;
  }
  operator delete(__p);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    goto LABEL_63;
}

BOOL webrtc::AimdRateControl::TimeToReduceFurther(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = 1;
  if (a2 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v4 = *(_QWORD *)(a1 + 208);
    if (v4 != 0x8000000000000000)
    {
      v5 = *(_QWORD *)(a1 + 256);
      if (v5 >= 200000)
        v5 = 200000;
      if (v5 <= 10000)
        v5 = 10000;
      if (a2 != 0x8000000000000000 && v4 != 0x7FFFFFFFFFFFFFFFLL && a2 - v4 >= v5)
        return 1;
      v3 = *(unsigned __int8 *)(a1 + 232);
      if (*(_BYTE *)(a1 + 232))
        return (uint64_t)llround((double)*(uint64_t *)(a1 + 16) * 0.5) > a3;
    }
  }
  return v3;
}

void webrtc::AimdRateControl::ChangeBitrate(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  double v16;
  uint64_t v17;
  int64_t *v18;
  double v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  int v29;
  double v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int v36;
  double v37;
  double v38;
  BOOL v39;
  double v40;
  int64_t v41;
  double v42;
  double *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  int64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  double v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  double v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  uint64_t v73;
  unint64_t v74;
  int64_t v75;

  LOBYTE(v75) = 0;
  if (*((_BYTE *)a2 + 16))
    v5 = (uint64_t *)(a2 + 2);
  else
    v5 = (uint64_t *)(a1 + 24);
  v6 = *v5;
  if (*((_BYTE *)a2 + 16))
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 1);
  v7 = *(unsigned __int8 *)(a1 + 232);
  v8 = *a2;
  if (*(_BYTE *)(a1 + 232))
    v9 = 1;
  else
    v9 = v8 == 2;
  if (v9)
  {
    if (v8)
    {
      if (v8 == 1)
      {
        *(_DWORD *)(a1 + 200) = 0;
        goto LABEL_31;
      }
      if (v8 == 2)
      {
        if (*(_DWORD *)(a1 + 200) != 2)
          *(_DWORD *)(a1 + 200) = 2;
LABEL_22:
        v11 = *(double *)(a1 + 240);
        v12 = llround(v11 * (double)v6);
        v13 = v12 - 5000;
        if (v12 == 0x7FFFFFFFFFFFFFFFLL)
          v13 = 0x7FFFFFFFFFFFFFFFLL;
        if (v12 <= 5000)
          v14 = v12;
        else
          v14 = v13;
        v15 = *(_QWORD *)(a1 + 16);
        if (v14 > v15 && *(_BYTE *)(a1 + 40))
        {
          v16 = *(double *)(a1 + 32) * 1000.0;
          if (v16 == INFINITY)
          {
            v17 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v17 = 0x8000000000000000;
            if (v16 != -INFINITY)
              v17 = (uint64_t)v16;
          }
          v14 = llround(v11 * (double)v17);
        }
        if (v15 <= v14)
        {
          v33 = 0;
          if (v7 && v6 < v15)
          {
            if (!*(_BYTE *)(a1 + 408))
              *(_BYTE *)(a1 + 408) = 1;
            v33 = 0;
            *(_QWORD *)(a1 + 400) = 0;
          }
        }
        else
        {
          v75 = v14;
          v33 = 1;
          if (v7 && v6 < v15)
          {
            v34 = 0x7FFFFFFFFFFFFFFFLL;
            if (v14 != 0x8000000000000000 && v15 != 0x7FFFFFFFFFFFFFFFLL)
              v34 = v15 - v14;
            if (!*(_BYTE *)(a1 + 408))
              *(_BYTE *)(a1 + 408) = 1;
            *(_QWORD *)(a1 + 400) = v34;
            v33 = 1;
          }
        }
        v36 = *(unsigned __int8 *)(a1 + 40);
        if (!*(_BYTE *)(a1 + 40))
        {
LABEL_90:
          *(_BYTE *)(a1 + 232) = 1;
          if ((v6 & 0x8000000000000000) == 0)
            goto LABEL_91;
          goto LABEL_124;
        }
        v37 = *(double *)(a1 + 32) + sqrt(*(double *)(a1 + 32) * *(double *)(a1 + 48)) * -3.0;
        v38 = v37 * 1000.0;
        v39 = v37 <= 0.0;
        v40 = 0.0;
        if (!v39)
          v40 = v38;
        if (v40 == INFINITY)
        {
          if (v6 != 0x7FFFFFFFFFFFFFFFLL)
          {
LABEL_89:
            v36 = 0;
            *(_BYTE *)(a1 + 40) = 0;
            goto LABEL_90;
          }
        }
        else if (v40 != -INFINITY && v6 < (uint64_t)v40)
        {
          goto LABEL_89;
        }
        v36 = 1;
        *(_BYTE *)(a1 + 232) = 1;
        if ((v6 & 0x8000000000000000) == 0)
        {
LABEL_91:
          if (v6 % 0x3E8uLL <= 0x1F3)
            v41 = v6 / 0x3E8uLL;
          else
            v41 = v6 / 0x3E8uLL + 1;
          v42 = (double)v41;
          v43 = (double *)&unk_208F04000;
          v44 = v42;
          if (v36)
LABEL_95:
            v44 = v42 * v43[322] + *(double *)(a1 + 32) * 0.95;
LABEL_96:
          *(double *)(a1 + 32) = v44;
          *(_BYTE *)(a1 + 40) = 1;
          v45 = 1.0;
          if (v44 >= 1.0)
            v45 = v44;
          v46 = (v44 - v42) * ((v44 - v42) * v43[322]) / v45 + *(double *)(a1 + 48) * 0.95;
          v47 = 2.5;
          if (v46 < 2.5)
            v47 = v46;
          if (v46 > 0.400000006)
            v48 = v47;
          else
            v48 = 0.400000006;
          *(double *)(a1 + 48) = v48;
          *(_DWORD *)(a1 + 200) = 0;
          *(_QWORD *)(a1 + 208) = a3;
          *(_QWORD *)(a1 + 216) = a3;
          v18 = (int64_t *)(a1 + 16);
          if (v33)
            goto LABEL_104;
LABEL_55:
          v28 = *v18;
          v29 = *(unsigned __int8 *)(a1 + 192);
          if (!*(_BYTE *)(a1 + 329))
            goto LABEL_105;
          goto LABEL_56;
        }
LABEL_124:
        v53 = -v6;
        v54 = v53 / 0x3E8;
        if (v53 % 0x3E8 <= 0x1F4)
          v55 = 0;
        else
          v55 = -1;
        v42 = (double)(uint64_t)(v55 - v54);
        v43 = (double *)&unk_208F04000;
        v44 = v42;
        if (v36)
          goto LABEL_95;
        goto LABEL_96;
      }
      v10 = *(_DWORD *)(a1 + 200);
    }
    else
    {
      v10 = *(_DWORD *)(a1 + 200);
      if (!v10)
      {
        *(_QWORD *)(a1 + 208) = a3;
        *(_DWORD *)(a1 + 200) = 1;
        goto LABEL_32;
      }
    }
    if (v10 != 1)
    {
      if (v10 == 2)
        goto LABEL_22;
LABEL_31:
      v18 = (int64_t *)(a1 + 16);
      goto LABEL_55;
    }
LABEL_32:
    if (*(_BYTE *)(a1 + 40))
    {
      v19 = (*(double *)(a1 + 32) + sqrt(*(double *)(a1 + 32) * *(double *)(a1 + 48)) * 3.0) * 1000.0;
      if (v19 == INFINITY)
        goto LABEL_39;
      v20 = (uint64_t)v19;
      if (v19 == -INFINITY)
        v20 = 0x8000000000000000;
      if (v6 <= v20)
      {
LABEL_39:
        v21 = 0;
LABEL_40:
        v22 = llround((double)v6 * 1.5);
        v23 = v22 + 10000;
        if (v22 == 0x8000000000000000)
          v23 = 0x8000000000000000;
        if (v22 == 0x7FFFFFFFFFFFFFFFLL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (*(_BYTE *)(a1 + 264) && *(_BYTE *)(a1 + 248) && *(_BYTE *)(a1 + 265))
          v24 = *(_QWORD *)(a1 + 16);
        v25 = *(_QWORD *)(a1 + 16);
        if (v25 >= v24)
        {
          *(_QWORD *)(a1 + 208) = a3;
          v18 = (int64_t *)(a1 + 16);
          goto LABEL_55;
        }
        v26 = *(_QWORD *)(a1 + 208);
        if ((v21 & 1) != 0)
        {
          if ((unint64_t)(v26 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
          {
            v56 = 0.08;
LABEL_164:
            v73 = llround(v56 * (double)v25);
            if (v73 <= 1000)
              v73 = 1000;
            v74 = v73 + v25;
            if (v25 == 0x8000000000000000)
              v74 = 0x8000000000000000;
            if (v73 == 0x7FFFFFFFFFFFFFFFLL)
              v65 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v65 = v74;
LABEL_171:
            if (v24 < v65)
              v65 = v24;
            v75 = v65;
            *(_QWORD *)(a1 + 208) = a3;
            v18 = (int64_t *)(a1 + 16);
LABEL_104:
            v28 = v75;
            v29 = *(unsigned __int8 *)(a1 + 192);
            if (!*(_BYTE *)(a1 + 329))
            {
LABEL_105:
              if (v29)
              {
                v49 = *(_QWORD *)(a1 + 104);
                if ((unint64_t)(v49 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  if (*(_BYTE *)(a1 + 393) && v49 <= *v18)
                    v49 = *v18;
                  if (v49 < v28)
                    v28 = v49;
                }
                goto LABEL_112;
              }
              goto LABEL_118;
            }
LABEL_56:
            if (v29)
            {
LABEL_112:
              v50 = *(_QWORD *)(a1 + 96);
              if ((unint64_t)(v50 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v51 = *v18;
                if (v28 < v51)
                {
                  v52 = llround(*(double *)(a1 + 240) * (double)v50);
                  if (v28 <= v52)
                    v28 = v52;
                  if (v28 >= v51)
                    v28 = v51;
                }
              }
            }
LABEL_118:
            if (v28 <= *(_QWORD *)a1)
              v28 = *(_QWORD *)a1;
            *(_QWORD *)(a1 + 16) = v28;
            return;
          }
          if (a3 != 0x7FFFFFFFFFFFFFFFLL)
          {
            if (a3 == 0x8000000000000000 || (v70 = a3 - v26, a3 - v26 == 0x8000000000000000))
            {
              v27 = 0xFFF0000000000000;
              goto LABEL_160;
            }
            if (v70 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v71 = (double)v70 * 0.000001;
LABEL_161:
              v72 = 1.0;
              if (v71 <= 1.0)
                v72 = v71;
              v56 = pow(1.08, v72) + -1.0;
              goto LABEL_164;
            }
          }
          v27 = 0x7FF0000000000000;
LABEL_160:
          v71 = *(double *)&v27;
          goto LABEL_161;
        }
        v30 = INFINITY;
        if (a3 != 0x7FFFFFFFFFFFFFFFLL && v26 != 0x8000000000000000)
        {
          if (a3 == 0x8000000000000000
            || v26 == 0x7FFFFFFFFFFFFFFFLL
            || (v31 = a3 - v26, a3 - v26 == 0x8000000000000000))
          {
            v32 = 0xFFF0000000000000;
            goto LABEL_131;
          }
          if (v31 == 0x7FFFFFFFFFFFFFFFLL)
          {
            v32 = 0x7FF0000000000000;
LABEL_131:
            v30 = *(double *)&v32;
            goto LABEL_132;
          }
          v30 = (double)v31 * 0.000001;
        }
LABEL_132:
        v57 = llround((double)((33333 * v25 + 4000000) / 8000000) / ceil((double)((33333 * v25 + 4000000) / 8000000)/ 1200.0));
        v58 = *(_QWORD *)(a1 + 256);
        v59 = 2 * v58 + 200000;
        if (v58 == 0x8000000000000000)
          v59 = 0;
        v60 = -2;
        if (v58 != 0x7FFFFFFFFFFFFFFFLL)
          v60 = v59;
        v61 = (uint64_t)(8000000 * v57) / v60;
        if (v61 == 0x8000000000000000)
        {
          v62 = 0xFFF0000000000000;
        }
        else
        {
          if (v61 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v63 = (double)v61;
            goto LABEL_142;
          }
          v62 = 0x7FF0000000000000;
        }
        v63 = *(double *)&v62;
LABEL_142:
        v64 = v30 * fmax(v63, 4000.0);
        v65 = 0x7FFFFFFFFFFFFFFFLL;
        v66 = (uint64_t)v64;
        v67 = 0x8000000000000000;
        if (v64 == -INFINITY)
          v66 = 0x8000000000000000;
        if (v66 != 0x8000000000000000 && v25 != 0x8000000000000000)
          v67 = v66 + v25;
        if (v66 == 0x7FFFFFFFFFFFFFFFLL)
          v69 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v64 != INFINITY)
          v65 = v69;
        goto LABEL_171;
      }
      *(_BYTE *)(a1 + 40) = 0;
    }
    v21 = 1;
    goto LABEL_40;
  }
}

uint64_t webrtc::AlignmentAdjuster::GetAlignmentAndMaybeAdjustScaleFactors(uint64_t a1, _QWORD *a2, unint64_t a3, char a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  int i;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  int v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  int v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = *(unsigned int *)(a1 + 16);
  if (*(_BYTE *)(a1 + 20))
    v7 = (int)v6 < 1;
  else
    v7 = 1;
  if (v7)
    return v6;
  if (a2[24] < 2uLL)
    return v6;
  v9 = a2[21];
  v8 = a2[22];
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 5);
  if (v10 < 2)
    return v6;
  if (v9 == v8)
  {
LABEL_11:
    if (a3 < v10 && a3 != 0 && a4 != 0)
      LOBYTE(v10) = a3;
    return ((_DWORD)v6 << (v10 - 1));
  }
  v11 = a2[21];
  while (*(double *)(v11 + 32) < 1.0)
  {
    v11 += 96;
    if (v11 == v8)
      goto LABEL_11;
  }
  v15 = v8 - v9 - 96;
  v16 = a2[21];
  if (v15 < 0x60)
    goto LABEL_72;
  v17 = v15 / 0x60 + 1;
  v16 = v9 + 96 * (v17 & 0x7FFFFFFFFFFFFFELL);
  v18 = (double *)(v9 + 128);
  v19 = v17 & 0x7FFFFFFFFFFFFFELL;
  do
  {
    v20 = *(v18 - 12);
    v21 = *v18;
    if (v20 < 1.0)
      v20 = 1.0;
    if (v21 < 1.0)
      v21 = 1.0;
    if (v20 > 10000.0)
      v20 = 10000.0;
    if (v21 > 10000.0)
      v21 = 10000.0;
    *(v18 - 12) = v20;
    *v18 = v21;
    v18 += 24;
    v19 -= 2;
  }
  while (v19);
  if (v17 != (v17 & 0x7FFFFFFFFFFFFFELL))
  {
LABEL_72:
    do
    {
      v22 = *(double *)(v16 + 32);
      if (v22 < 1.0)
        v22 = 1.0;
      if (v22 > 10000.0)
        v22 = 10000.0;
      *(double *)(v16 + 32) = v22;
      v16 += 96;
    }
    while (v16 != v8);
  }
  v23 = 1;
  if ((int)v6 > 16)
    goto LABEL_73;
  v24 = 1.79769313e308;
  for (i = v6; i != 17; ++i)
  {
    if ((int)v6 <= i)
    {
      v28 = (double)i;
      v26 = 0.0;
      v29 = v9;
      do
      {
        v30 = *(double *)(v29 + 32);
        v31 = 1.0;
        v32 = 1.79769313e308;
        v33 = v6;
        do
        {
          v34 = vabdd_f64(v30, v28 / (double)v33);
          if (v34 <= v32)
          {
            v32 = v34;
            v31 = v28 / (double)v33;
          }
          v33 += v6;
        }
        while (v33 <= i);
        v26 = v26 + vabdd_f64(v30, v31);
        v29 += 96;
      }
      while (v29 != v8);
    }
    else
    {
      v26 = 0.0;
      v27 = v9;
      do
      {
        v26 = v26 + fabs(*(double *)(v27 + 32) + -1.0);
        v27 += 96;
      }
      while (v27 != v8);
    }
    if (v26 < v24)
    {
      v23 = i;
      v24 = v26;
    }
  }
  if ((int)v6 <= v23)
  {
    do
    {
      v42 = 1.0;
      v43 = 1.79769313e308;
      v44 = v6;
      do
      {
        v45 = vabdd_f64(*(double *)(v9 + 32), (double)v23 / (double)v44);
        if (v45 <= v43)
        {
          v43 = v45;
          v42 = (double)v23 / (double)v44;
        }
        v44 += v6;
      }
      while (v44 <= v23);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        v5 = v5 & 0xFFFFFFFF00000000 | 0x161;
        rtc::webrtc_logging_impl::Log("\r\t\a\t\a", v46, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/alignment_adjuster.cc");
      }
      *(double *)(v9 + 32) = v42;
      v9 += 96;
    }
    while (v9 != v8);
  }
  else
  {
LABEL_73:
    do
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        v4 = v4 & 0xFFFFFFFF00000000 | 0x161;
        rtc::webrtc_logging_impl::Log("\r\t\a\t\a", v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/alignment_adjuster.cc");
      }
      *(_QWORD *)(v9 + 32) = 0x3FF0000000000000;
      v9 += 96;
    }
    while (v9 != v8);
  }
  if (v23 <= (int)v6)
    return v6;
  else
    return v23;
}

uint64_t webrtc::AlignmentMixer::SelectChannel(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  unint64_t v16;
  float32x4_t *v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  unint64_t v28;
  float32x4_t v29;
  unint64_t v30;
  unint64_t v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;

  if (*(_BYTE *)(result + 16) && (*(_QWORD *)(result + 24) > 0x7DuLL || *(_QWORD *)(result + 32) >= 0x7EuLL))
  {
    ++*(_QWORD *)(result + 72);
    v2 = 1;
    v3 = 2;
    goto LABEL_7;
  }
  v3 = *(_QWORD *)result;
  ++*(_QWORD *)(result + 72);
  if ((int)v3 > 0)
  {
    v2 = 0;
    v3 = v3;
LABEL_7:
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = (*(_QWORD *)(a2 + 16) - v6) >> 2;
    while (1)
    {
      v8 = v4;
      if (v7 <= v4)
        goto LABEL_45;
      v9 = (float *)(v6 + 4 * v4);
      v10 = v9[11];
      v11 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*v9 * *v9) + 0.0) + (float)(v9[1] * v9[1])) + (float)(v9[2] * v9[2])) + (float)(v9[3] * v9[3])) + (float)(v9[4] * v9[4])) + (float)(v9[5] * v9[5])) + (float)(v9[6] * v9[6])) + (float)(v9[7] * v9[7])) + (float)(v9[8] * v9[8])) + (float)(v9[9] * v9[9]))
                                                                                                  + (float)(v9[10] * v9[10]))
                                                                                          + (float)(v10 * v10))
                                                                                  + (float)(v9[12] * v9[12]))
                                                                          + (float)(v9[13] * v9[13]))
                                                                  + (float)(v9[14] * v9[14]))
                                                          + (float)(v9[15] * v9[15]))
                                                  + (float)(v9[16] * v9[16]))
                                          + (float)(v9[17] * v9[17]))
                                  + (float)(v9[18] * v9[18]))
                          + (float)(v9[19] * v9[19]))
                  + (float)(v9[20] * v9[20]))
          + (float)(v9[21] * v9[21]);
      v12 = v9[33];
      v13 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v11 + (float)(v9[22] * v9[22])) + (float)(v9[23] * v9[23])) + (float)(v9[24] * v9[24])) + (float)(v9[25] * v9[25])) + (float)(v9[26] * v9[26])) + (float)(v9[27] * v9[27])) + (float)(v9[28] * v9[28])) + (float)(v9[29] * v9[29])) + (float)(v9[30] * v9[30])) + (float)(v9[31] * v9[31]))
                                                                                                  + (float)(v9[32] * v9[32]))
                                                                                          + (float)(v12 * v12))
                                                                                  + (float)(v9[34] * v9[34]))
                                                                          + (float)(v9[35] * v9[35]))
                                                                  + (float)(v9[36] * v9[36]))
                                                          + (float)(v9[37] * v9[37]))
                                                  + (float)(v9[38] * v9[38]))
                                          + (float)(v9[39] * v9[39]))
                                  + (float)(v9[40] * v9[40]))
                          + (float)(v9[41] * v9[41]))
                  + (float)(v9[42] * v9[42]))
          + (float)(v9[43] * v9[43]);
      v14 = v9[55];
      v15 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v13 + (float)(v9[44] * v9[44])) + (float)(v9[45] * v9[45])) + (float)(v9[46] * v9[46])) + (float)(v9[47] * v9[47])) + (float)(v9[48] * v9[48])) + (float)(v9[49] * v9[49])) + (float)(v9[50] * v9[50])) + (float)(v9[51] * v9[51]))
                                                                                                  + (float)(v9[52] * v9[52]))
                                                                                          + (float)(v9[53] * v9[53]))
                                                                                  + (float)(v9[54] * v9[54]))
                                                                          + (float)(v14 * v14))
                                                                  + (float)(v9[56] * v9[56]))
                                                          + (float)(v9[57] * v9[57]))
                                                  + (float)(v9[58] * v9[58]))
                                          + (float)(v9[59] * v9[59]))
                                  + (float)(v9[60] * v9[60]))
                          + (float)(v9[61] * v9[61]))
                  + (float)(v9[62] * v9[62]))
          + (float)(v9[63] * v9[63]);
      if (v5 <= 1 && v15 > *(float *)(result + 12))
        ++*(_QWORD *)(result + 24 + 8 * v5);
      v16 = *(_QWORD *)(result + 72);
      v17 = *(float32x4_t **)(result + 40);
      v18 = (uint64_t)(*(_QWORD *)(result + 48) - (_QWORD)v17) >> 2;
      if (v16 > 0x3A98)
      {
        if (v18 <= v5)
          goto LABEL_45;
        v19 = v5;
        v20 = v17->f32[v5] + (float)((float)(v15 - v17->f32[v5]) * 0.0004);
      }
      else
      {
        if (v18 <= v5)
          goto LABEL_45;
        v19 = v5;
        v20 = v15 + v17->f32[v5];
      }
      v17->f32[v19] = v20;
      ++v5;
      v4 = v8 + 64;
      if (v3 == v5)
      {
        if (v16 == 15000)
        {
          v21 = v3 - 1;
          if (v18 < v3 - 1)
            v21 = v18;
          v22 = v21 + 1;
          if (v22 > 8)
          {
            v25 = v22 & 7;
            if ((v22 & 7) == 0)
              v25 = 8;
            v23 = v22 - v25;
            v26 = v17 + 1;
            v27 = (float32x4_t)vdupq_n_s32(0x388BCF65u);
            v28 = v23;
            do
            {
              v29 = vmulq_f32(*v26, v27);
              v26[-1] = vmulq_f32(v26[-1], v27);
              *v26 = v29;
              v26 += 2;
              v28 -= 8;
            }
            while (v28);
          }
          else
          {
            v23 = 0;
          }
          v30 = v3 - v23;
          v31 = v18 - v23;
          v32 = &v17->f32[v23];
          while (v31)
          {
            *v32 = *v32 * 0.000066667;
            ++v32;
            --v31;
            if (!--v30)
              goto LABEL_31;
          }
        }
        else
        {
LABEL_31:
          v33 = 0;
          LODWORD(v24) = 0;
          while (v18 != v33 && v18 > (int)v24)
          {
            if (v17->f32[v33] <= v17->f32[(int)v24])
              v24 = v24;
            else
              v24 = v33;
            if (v3 == ++v33)
            {
              if ((v2 & 1) != 0 && *(int *)(result + 64) > 1)
                goto LABEL_43;
              goto LABEL_40;
            }
          }
        }
        goto LABEL_45;
      }
    }
  }
  v24 = 0;
  v17 = *(float32x4_t **)(result + 40);
  v18 = (uint64_t)(*(_QWORD *)(result + 48) - (_QWORD)v17) >> 2;
LABEL_40:
  if (v18 <= (int)v24 || (v34 = *(unsigned int *)(result + 64), v18 <= (int)v34))
  {
LABEL_45:
    __break(1u);
    return result;
  }
  if (v17->f32[(int)v24] > (float)(v17->f32[(int)v34] + v17->f32[(int)v34]))
  {
LABEL_43:
    *(_DWORD *)(result + 64) = v24;
    return v24;
  }
  return v34;
}

uint64_t webrtc::`anonymous namespace'::GetConfigFromTrials(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  void **v12;
  void *v13;
  std::string *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  __int128 v20;
  char v21;
  void *v22[2];
  __int128 v23;
  char v24;
  __int128 v25;
  double v26;

  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(v22, a1, "WebRTC-StrictPacingAndProbing", 29);
  v6 = (void *)BYTE7(v23);
  if (SBYTE7(v23) < 0)
    v6 = v22[1];
  if (v6)
  {
    (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1, "WebRTC-ProbingScreenshareBwe", 28);
    v7 = __p[1];
    if ((SBYTE7(v20) & 0x80u) == 0)
      v7 = (void *)BYTE7(v20);
    v8 = v7 == 0;
    if (SBYTE7(v20) < 0)
      operator delete(__p[0]);
    if ((BYTE7(v23) & 0x80) != 0)
      goto LABEL_9;
  }
  else
  {
    v8 = 1;
    if ((BYTE7(v23) & 0x80) != 0)
LABEL_9:
      operator delete(v22[0]);
  }
  if (!v8)
    goto LABEL_28;
  webrtc::AlrExperimentSettings::CreateFromFieldTrial(a1, (uint64_t)"WebRTC-ProbingScreenshareBwe", 28, (uint64_t)v22);
  if (v24
    || (webrtc::AlrExperimentSettings::CreateFromFieldTrial(a1, (uint64_t)"WebRTC-StrictPacingAndProbing", 29, (uint64_t)__p), v24 = v21, *(_OWORD *)v22 = *(_OWORD *)__p, v23 = v20, v25 = xmmword_208F04A60, v26 = 0.5, v21))
  {
    *(double *)&v25 = (double)(int)v23 / 100.0;
    *((double *)&v25 + 1) = (double)SDWORD1(v23) / 100.0;
    v26 = (double)SDWORD2(v23) / 100.0;
  }
  v9 = operator new(0x60uLL);
  *v9 = "bw_usage";
  v9[1] = &v25;
  v9[2] = webrtc::struct_parser_impl::TypedParser<double>::Parse;
  v9[3] = webrtc::struct_parser_impl::TypedParser<double>::Encode;
  v9[4] = "start";
  v9[5] = (char *)&v25 + 8;
  v9[6] = webrtc::struct_parser_impl::TypedParser<double>::Parse;
  v9[7] = webrtc::struct_parser_impl::TypedParser<double>::Encode;
  v9[8] = "stop";
  v9[9] = &v26;
  v9[10] = webrtc::struct_parser_impl::TypedParser<double>::Parse;
  v9[11] = webrtc::struct_parser_impl::TypedParser<double>::Encode;
  v10 = (uint64_t *)operator new();
  *v10 = (uint64_t)v9;
  v10[1] = (uint64_t)(v9 + 12);
  v10[2] = (uint64_t)(v9 + 12);
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1, "WebRTC-AlrDetectorParameters", 28);
  if (SBYTE7(v20) < 0)
  {
    v11 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) == 0)
    {
      v12 = (void **)__p[0];
      if (!__p[1] || __p[0])
        goto LABEL_22;
    }
    __break(1u);
LABEL_28:
    v15 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/alr_detector.cc", 28, "AlrExperimentSettings::MaxOneFieldTrialEnabled(*key_value_config)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v2, v3, v4, v5, v18);
    return webrtc::AlrDetector::OnBytesSent((webrtc::AlrDetector *)v15, v16, v17);
  }
  v11 = BYTE7(v20);
  v12 = __p;
LABEL_22:
  webrtc::StructParametersParser::Parse(v10, (uint64_t)v12, v11);
  if (SBYTE7(v20) < 0)
    operator delete(__p[0]);
  v13 = (void *)*v10;
  if (*v10)
  {
    v10[1] = (uint64_t)v13;
    operator delete(v13);
  }
  return MEMORY[0x20BD0ADEC](v10, 0x20C40960023A9);
}

uint64_t webrtc::AlrDetector::OnBytesSent(uint64_t this, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = this;
  if (!*(_BYTE *)(this + 32))
  {
    *(_QWORD *)(this + 24) = a3;
    *(_BYTE *)(this + 32) = 1;
    return this;
  }
  v4 = a3 - *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = a3;
  *(_BYTE *)(this + 32) = 1;
  v5 = *(_QWORD *)(this + 48);
  v6 = *(_QWORD *)(this + 56) - a2;
  if (v6 <= -v5)
    v6 = -v5;
  v7 = v4 * *(int *)(this + 40) / 8;
  if (v6 < 0 || *(_BYTE *)(this + 64))
    v7 += v6;
  if (v5 < v7)
    v7 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 56) = v7;
  if (v5)
  {
    if ((double)v7 / (double)v5 <= *(double *)(this + 8))
      goto LABEL_16;
  }
  else if (*(double *)(this + 8) >= 0.0)
  {
    goto LABEL_16;
  }
  if (!*(_BYTE *)(this + 80))
  {
    if (rtc::g_clock)
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      this = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
           / dword_253EA791C;
    }
    *(_QWORD *)(v3 + 72) = this / 1000000;
    v8 = 1;
    *(_BYTE *)(v3 + 80) = 1;
    v9 = *(_QWORD *)(v3 + 88);
    if (!v9)
      return this;
LABEL_29:
    v10 = operator new();
    if (rtc::g_clock)
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v11 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    *(_QWORD *)v10 = &unk_24C0BBC08;
    *(_QWORD *)(v10 + 8) = 1000 * (v11 / 1000000);
    *(_BYTE *)(v10 + 16) = v8;
    v12 = v10;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 40))(v9, &v12);
    this = v12;
    v12 = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    return this;
  }
LABEL_16:
  if (v5)
  {
    if ((double)v7 / (double)v5 >= *(double *)(this + 16))
      return this;
  }
  else if (*(double *)(this + 16) <= 0.0)
  {
    return this;
  }
  if (*(_BYTE *)(this + 80))
  {
    v8 = 0;
    *(_BYTE *)(this + 80) = 0;
    v9 = *(_QWORD *)(this + 88);
    if (v9)
      goto LABEL_29;
  }
  return this;
}

void webrtc::AlrExperimentSettings::CreateFromFieldTrial(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *i;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string::size_type v33;
  BOOL v34;
  BOOL v35;
  char v37;
  _QWORD v38[3];
  _QWORD v39[2];
  double v40[4];
  __int128 v41;
  __int128 v42;
  void *v43[2];
  char v44;
  std::string v45;
  uint64_t v46;
  uint64_t v47;

  v46 = a2;
  v47 = a3;
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 32) = 0;
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v45);
  v44 = 8;
  if (v43 <= (void **)"_Dogfood" && &v43[1] > (void **)"_Dogfood")
  {
    __break(1u);
    return;
  }
  strcpy((char *)v43, "_Dogfood");
  size = v45.__r_.__value_.__l.__size_;
  v7 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v45;
  else
    v9 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  else
    v10 = v45.__r_.__value_.__l.__size_;
  if (!v10)
    goto LABEL_39;
  v11 = (std::string *)((char *)v9 + v10);
  v12 = v9;
  v13 = (std::string *)((char *)v9 + v10);
  while (2)
  {
    for (i = (std::string *)((char *)v12->__r_.__value_.__r.__words + 7); ; i = (std::string *)((char *)i + 1))
    {
      v12 = (std::string *)((char *)i - 6);
      if (i[-1].__r_.__value_.__s.__data_[17] != 95)
      {
        if (v12 == v11)
          goto LABEL_31;
        continue;
      }
      if (v12 == v11)
        goto LABEL_31;
      if (v12->__r_.__value_.__s.__data_[0] == 68)
      {
        if ((std::string *)((char *)&i[-1].__r_.__value_.__r.__words[2] + 3) == v11)
          goto LABEL_31;
        if (i[-1].__r_.__value_.__s.__data_[19] == 111)
        {
          if ((std::string *)((char *)&i[-1].__r_.__value_.__r.__words[2] + 4) == v11)
            goto LABEL_31;
          if (i[-1].__r_.__value_.__s.__data_[20] == 103)
          {
            if ((std::string *)((char *)&i[-1].__r_.__value_.__r.__words[2] + 5) == v11)
              goto LABEL_31;
            if (i[-1].__r_.__value_.__s.__data_[21] == 102)
            {
              if ((std::string *)((char *)&i[-1].__r_.__value_.__r.__words[2] + 6) == v11)
                goto LABEL_31;
              if (i[-1].__r_.__value_.__s.__data_[22] == 111)
              {
                if ((std::string *)((char *)&i[-1].__r_.__value_.__r.__words[2] + 7) == v11)
                  goto LABEL_31;
                if (*((_BYTE *)&i[-1].__r_.__value_.__s + 23) == 111)
                  break;
              }
            }
          }
        }
      }
    }
    if (i != v11)
    {
      if (i->__r_.__value_.__s.__data_[0] == 100)
        v13 = (std::string *)((char *)i - 7);
      continue;
    }
    break;
  }
LABEL_31:
  if (v13 == v11)
    goto LABEL_39;
  v15 = (char *)v13 - (char *)v9;
  if (v15 == -1 || v15 != v10 - 8)
    goto LABEL_39;
  if ((*((_BYTE *)&v45.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v45.__r_.__value_.__l.__size_ < v15)
      goto LABEL_38;
    v45.__r_.__value_.__l.__size_ = v15;
LABEL_52:
    v7->__r_.__value_.__s.__data_[v15] = 0;
    v33 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    LODWORD(v7) = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v33 = v45.__r_.__value_.__l.__size_;
    if (v33)
      goto LABEL_42;
  }
  else
  {
    size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    if (v15 <= HIBYTE(v45.__r_.__value_.__r.__words[2]))
    {
      *((_BYTE *)&v45.__r_.__value_.__s + 23) = v15 & 0x7F;
      v7 = &v45;
      goto LABEL_52;
    }
LABEL_38:
    std::string::append(&v45, v15 - size, 0);
LABEL_39:
    v16 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    LODWORD(v7) = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v16 = v45.__r_.__value_.__l.__size_;
    if (v16)
    {
LABEL_42:
      if ((char)v7 >= 0)
        v17 = &v45;
      else
        v17 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if (sscanf((const char *)v17, "%f,%lld,%d,%d,%d,%d", &v41, (char *)&v41 + 8, &v42, (char *)&v42 + 4, (char *)&v42 + 8, (char *)&v42 + 12) == 6)
      {
        v18 = v42;
        *(_OWORD *)a4 = v41;
        *(_OWORD *)(a4 + 16) = v18;
        *(_BYTE *)(a4 + 32) = 1;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        {
          v38[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/ex"
                   "periments/alr_experiment.cc";
          v38[1] = 553;
          v38[2] = &v37;
          v39[0] = "Using ALR experiment settings: pacing factor: ";
          v39[1] = v38;
          v40[0] = *(float *)&v41;
          *(_QWORD *)&v40[1] = v39;
          *(_QWORD *)&v40[2] = ", max pacer queue length: ";
          *(_QWORD *)&v40[3] = v40;
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/alr_experiment.cc");
        }
      }
      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*> const&)::t, v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/alr_experiment.cc");
      }
      goto LABEL_66;
    }
  }
  if (a3 == 28)
  {
    v34 = *(_QWORD *)a2 == 0x502D435452626557 && *(_QWORD *)(a2 + 8) == 0x6353676E69626F72;
    v35 = v34 && *(_QWORD *)(a2 + 16) == 0x726168736E656572;
    if (v35 && *(_DWORD *)(a2 + 24) == 1702314597)
    {
      if ((v7 & 0x80000000) != 0)
      {
        v45.__r_.__value_.__l.__size_ = 20;
        v7 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v45.__r_.__value_.__s + 23) = 20;
        v7 = &v45;
      }
      strcpy((char *)v7, "1.0,2875,80,40,-60,3");
      LOBYTE(v7) = *((_BYTE *)&v45.__r_.__value_.__s + 23);
      goto LABEL_42;
    }
  }
LABEL_66:
  if ((v44 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_70:
    operator delete(v45.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v43[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_70;
}

uint64_t webrtc::WebRtcAgc_AddMic(webrtc *this, __int16 **a2, __int16 *const *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  __int16 v16;
  uint64_t v18;
  int v19;
  __int16 **v20;
  __int16 *const *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  __int16 v26;
  int v27;
  _DWORD *v28;
  int16x8_t *v29;
  int16x8_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int16x8_t v33;
  int v34;
  uint64_t v35;
  int16x8_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int16x8_t v67;
  uint64_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int16x8_t v72;
  uint64_t v73;
  _DWORD *v74;
  int16x8_t v75;
  int16x8_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  uint32x4_t v79;
  unint64_t v80;
  __int16 *v81;
  int16x8_t v82;
  int16x8_t v83;
  uint32x4_t v84;
  uint32x4_t v85;
  uint32x4_t v86;
  unint64_t v87;
  __int16 *v88;
  int16x8_t v89;
  int16x8_t v90;
  uint32x4_t v91;
  uint32x4_t v92;
  uint32x4_t v93;
  unint64_t v94;
  __int16 *v95;
  int16x8_t v96;
  int16x8_t v97;
  uint32x4_t v98;
  uint32x4_t v99;
  uint32x4_t v100;
  unint64_t v101;
  __int16 *v102;
  int16x8_t v103;
  int16x8_t v104;
  uint32x4_t v105;
  uint32x4_t v106;
  uint32x4_t v107;
  unint64_t v108;
  __int16 v109;
  int16x8_t v110;
  int16x8_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)this;
  if (*(_DWORD *)this != 8000)
  {
    if (a4 == 160)
    {
      v8 = 16;
      v13 = *((_DWORD *)this + 79);
      v10 = *((_DWORD *)this + 81);
      v11 = __OFSUB__(v13, v10);
      v12 = v13 - v10;
      if (!((v12 < 0) ^ v11 | (v12 == 0)))
        goto LABEL_8;
      goto LABEL_5;
    }
    return 0xFFFFFFFFLL;
  }
  if (a4 != 80)
    return 0xFFFFFFFFLL;
  v8 = 8;
  v9 = *((_DWORD *)this + 79);
  v10 = *((_DWORD *)this + 81);
  v11 = __OFSUB__(v9, v10);
  v12 = v9 - v10;
  if (!((v12 < 0) ^ v11 | (v12 == 0)))
  {
LABEL_8:
    v14 = 31 * (__int16)v12 / (__int16)(*((_DWORD *)this + 80) - v10);
    v15 = *((unsigned __int16 *)this + 154);
    if ((unsigned __int16)v14 <= v15)
    {
      if ((unsigned __int16)v14 >= v15)
        goto LABEL_14;
      v16 = -1;
    }
    else
    {
      v16 = 1;
    }
    LOWORD(v15) = v16 + v15;
    *((_WORD *)this + 154) = v15;
LABEL_14:
    if (a3)
    {
      v18 = 0;
      do
      {
        v20 = a2;
        v21 = a3;
        do
        {
          v23 = (uint64_t)*v20++;
          v22 = v23;
          v24 = *(__int16 *)(v23 + 2 * v18) * v19;
          v25 = v24 >> 12;
          if (v24 < -134217728)
            LOWORD(v25) = 0x8000;
          if (v24 <= 0x7FFFFFF)
            v26 = v25;
          else
            v26 = 0x7FFF;
          *(_WORD *)(v22 + 2 * v18) = v26;
          v21 = (__int16 *const *)((char *)v21 - 1);
        }
        while (v21);
        ++v18;
      }
      while (v18 != a4);
    }
    goto LABEL_24;
  }
LABEL_5:
  *((_WORD *)this + 154) = 0;
LABEL_24:
  v27 = *((__int16 *)this + 151);
  v28 = (_DWORD *)((char *)this + 196);
  v29 = (int16x8_t *)*a2;
  v30 = *(int16x8_t *)*a2;
  v31 = vmull_high_s16(v30, v30);
  v32 = vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v30.i8);
  if (v7 != 8000)
  {
    v33 = v29[1];
    v31 = vmaxq_s32(vmull_high_s16(v33, v33), v31);
    v32 = vmaxq_s32(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v33.i8), v32);
  }
  v34 = vmaxvq_s32(vmaxq_s32(v32, v31));
  v35 = 196;
  if (v27 > 0)
  {
    v35 = 236;
    v28 = (_DWORD *)((char *)this + 236);
  }
  *(_DWORD *)((char *)this + v35) = v34;
  v36 = v29[(unint64_t)v8 / 8];
  v37 = vmull_high_s16(v36, v36);
  v38 = vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8);
  if (v7 != 8000)
  {
    v39 = v29[(unint64_t)v8 / 8 + 1];
    v37 = vmaxq_s32(vmull_high_s16(v39, v39), v37);
    v38 = vmaxq_s32(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v39.i8), v38);
  }
  v28[1] = vmaxvq_s32(vmaxq_s32(v38, v37));
  v40 = v29[(unint64_t)v8 / 4];
  v41 = vmull_high_s16(v40, v40);
  v42 = vmull_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v40.i8);
  if (v7 != 8000)
  {
    v43 = *(int16x8_t *)((char *)v29 + ((4 * v8) | 0x10));
    v41 = vmaxq_s32(vmull_high_s16(v43, v43), v41);
    v42 = vmaxq_s32(vmull_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v43.i8), v42);
  }
  v28[2] = vmaxvq_s32(vmaxq_s32(v42, v41));
  v44 = v29[(unint64_t)(6 * v8) / 0x10];
  v45 = vmull_high_s16(v44, v44);
  v46 = vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8);
  if (v7 != 8000)
  {
    v47 = v29[(unint64_t)(6 * v8) / 0x10 + 1];
    v45 = vmaxq_s32(vmull_high_s16(v47, v47), v45);
    v46 = vmaxq_s32(vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v47.i8), v46);
  }
  v28[3] = vmaxvq_s32(vmaxq_s32(v46, v45));
  v48 = v29[(unint64_t)v8 / 2];
  v49 = vmull_high_s16(v48, v48);
  v50 = vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v48.i8);
  if (v7 != 8000)
  {
    v51 = *(int16x8_t *)((char *)v29 + ((8 * v8) | 0x10));
    v49 = vmaxq_s32(vmull_high_s16(v51, v51), v49);
    v50 = vmaxq_s32(vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v51.i8), v50);
  }
  v28[4] = vmaxvq_s32(vmaxq_s32(v50, v49));
  v52 = v29[(unint64_t)(10 * v8) / 0x10];
  v53 = vmull_high_s16(v52, v52);
  v54 = vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v52.i8);
  if (v7 != 8000)
  {
    v55 = v29[(unint64_t)(10 * v8) / 0x10 + 1];
    v53 = vmaxq_s32(vmull_high_s16(v55, v55), v53);
    v54 = vmaxq_s32(vmull_s16(*(int16x4_t *)v55.i8, *(int16x4_t *)v55.i8), v54);
  }
  v28[5] = vmaxvq_s32(vmaxq_s32(v54, v53));
  v56 = v29[(unint64_t)(12 * v8) / 0x10];
  v57 = vmull_high_s16(v56, v56);
  v58 = vmull_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v56.i8);
  if (v7 != 8000)
  {
    v59 = *(int16x8_t *)((char *)v29 + ((12 * v8) | 0x10));
    v57 = vmaxq_s32(vmull_high_s16(v59, v59), v57);
    v58 = vmaxq_s32(vmull_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v59.i8), v58);
  }
  v28[6] = vmaxvq_s32(vmaxq_s32(v58, v57));
  v60 = v29[(unint64_t)(14 * v8) / 0x10];
  v61 = vmull_high_s16(v60, v60);
  v62 = vmull_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v60.i8);
  if (v7 != 8000)
  {
    v63 = v29[(unint64_t)(14 * v8) / 0x10 + 1];
    v61 = vmaxq_s32(vmull_high_s16(v63, v63), v61);
    v62 = vmaxq_s32(vmull_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v63.i8), v62);
  }
  v28[7] = vmaxvq_s32(vmaxq_s32(v62, v61));
  v64 = v29[v8];
  v65 = vmull_high_s16(v64, v64);
  v66 = vmull_s16(*(int16x4_t *)v64.i8, *(int16x4_t *)v64.i8);
  if (v7 != 8000)
  {
    v67 = *(int16x8_t *)((char *)v29 + ((16 * v8) | 0x10));
    v65 = vmaxq_s32(vmull_high_s16(v67, v67), v65);
    v66 = vmaxq_s32(vmull_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v67.i8), v66);
  }
  v28[8] = vmaxvq_s32(vmaxq_s32(v66, v65));
  v68 = 9 * v8;
  v69 = *(int16x8_t *)((char *)v29 + 2 * v68);
  v70 = vmull_high_s16(v69, v69);
  v71 = vmull_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v69.i8);
  if (v7 != 8000)
  {
    v72 = *(int16x8_t *)((char *)v29 + 2 * v68 + 16);
    v70 = vmaxq_s32(vmull_high_s16(v72, v72), v70);
    v71 = vmaxq_s32(vmull_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v72.i8), v71);
  }
  v28[9] = vmaxvq_s32(vmaxq_s32(v71, v70));
  if (v27 <= 0)
    v73 = 156;
  else
    v73 = 176;
  if (v27 <= 0)
    v74 = (_DWORD *)((char *)this + 156);
  else
    v74 = (_DWORD *)((char *)this + 176);
  if (*(_DWORD *)this == 16000)
  {
    WebRtcSpl_DownsampleBy2(v29->i16, 0x20uLL, &v110, (int *)this + 15);
  }
  else
  {
    v75 = v29[1];
    v110 = *v29;
    v111 = v75;
  }
  v76 = v111;
  v77 = (uint32x4_t)vmull_high_s16(v76, v76);
  v78 = vshrq_n_u32((uint32x4_t)vmull_s16(*(int16x4_t *)v76.i8, *(int16x4_t *)v76.i8), 4uLL);
  v79 = vshrq_n_u32(v77, 4uLL);
  v80 = vaddvq_s64(vaddq_s64((int64x2_t)vaddl_u32(*(uint32x2_t *)v78.i8, *(uint32x2_t *)v79.i8), (int64x2_t)vaddl_high_u32(v78, v79)))+ ((v110.i16[7] * v110.i16[7]) >> 4)+ vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmull_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v110.i8), 4uLL))+ ((v110.i16[4] * v110.i16[4]) >> 4)+ ((v110.i16[5] * v110.i16[5]) >> 4)+ ((v110.i16[6] * v110.i16[6]) >> 4);
  if (v80 >= 0x7FFFFFFF)
    LODWORD(v80) = 0x7FFFFFFF;
  *(_DWORD *)((char *)this + v73) = v80;
  v81 = *a2;
  if (*(_DWORD *)this == 16000)
  {
    WebRtcSpl_DownsampleBy2(v81 + 32, 0x20uLL, &v110, (int *)this + 15);
  }
  else
  {
    v82 = *((int16x8_t *)v81 + 3);
    v110 = *((int16x8_t *)v81 + 2);
    v111 = v82;
  }
  v83 = v111;
  v84 = (uint32x4_t)vmull_high_s16(v83, v83);
  v85 = vshrq_n_u32((uint32x4_t)vmull_s16(*(int16x4_t *)v83.i8, *(int16x4_t *)v83.i8), 4uLL);
  v86 = vshrq_n_u32(v84, 4uLL);
  v87 = vaddvq_s64(vaddq_s64((int64x2_t)vaddl_u32(*(uint32x2_t *)v85.i8, *(uint32x2_t *)v86.i8), (int64x2_t)vaddl_high_u32(v85, v86)))+ ((v110.i16[7] * v110.i16[7]) >> 4)+ vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmull_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v110.i8), 4uLL))+ ((v110.i16[4] * v110.i16[4]) >> 4)+ ((v110.i16[5] * v110.i16[5]) >> 4)+ ((v110.i16[6] * v110.i16[6]) >> 4);
  if (v87 >= 0x7FFFFFFF)
    LODWORD(v87) = 0x7FFFFFFF;
  v74[1] = v87;
  v88 = *a2;
  if (*(_DWORD *)this == 16000)
  {
    WebRtcSpl_DownsampleBy2(v88 + 64, 0x20uLL, &v110, (int *)this + 15);
  }
  else
  {
    v89 = *((int16x8_t *)v88 + 5);
    v110 = *((int16x8_t *)v88 + 4);
    v111 = v89;
  }
  v90 = v111;
  v91 = (uint32x4_t)vmull_high_s16(v90, v90);
  v92 = vshrq_n_u32((uint32x4_t)vmull_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v90.i8), 4uLL);
  v93 = vshrq_n_u32(v91, 4uLL);
  v94 = vaddvq_s64(vaddq_s64((int64x2_t)vaddl_u32(*(uint32x2_t *)v92.i8, *(uint32x2_t *)v93.i8), (int64x2_t)vaddl_high_u32(v92, v93)))+ ((v110.i16[7] * v110.i16[7]) >> 4)+ vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmull_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v110.i8), 4uLL))+ ((v110.i16[4] * v110.i16[4]) >> 4)+ ((v110.i16[5] * v110.i16[5]) >> 4)+ ((v110.i16[6] * v110.i16[6]) >> 4);
  if (v94 >= 0x7FFFFFFF)
    LODWORD(v94) = 0x7FFFFFFF;
  v74[2] = v94;
  v95 = *a2;
  if (*(_DWORD *)this == 16000)
  {
    WebRtcSpl_DownsampleBy2(v95 + 96, 0x20uLL, &v110, (int *)this + 15);
  }
  else
  {
    v96 = *((int16x8_t *)v95 + 7);
    v110 = *((int16x8_t *)v95 + 6);
    v111 = v96;
  }
  v97 = v111;
  v98 = (uint32x4_t)vmull_high_s16(v97, v97);
  v99 = vshrq_n_u32((uint32x4_t)vmull_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v97.i8), 4uLL);
  v100 = vshrq_n_u32(v98, 4uLL);
  v101 = vaddvq_s64(vaddq_s64((int64x2_t)vaddl_u32(*(uint32x2_t *)v99.i8, *(uint32x2_t *)v100.i8), (int64x2_t)vaddl_high_u32(v99, v100)))+ ((v110.i16[7] * v110.i16[7]) >> 4)+ vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmull_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v110.i8), 4uLL))+ ((v110.i16[4] * v110.i16[4]) >> 4)+ ((v110.i16[5] * v110.i16[5]) >> 4)+ ((v110.i16[6] * v110.i16[6]) >> 4);
  if (v101 >= 0x7FFFFFFF)
    LODWORD(v101) = 0x7FFFFFFF;
  v74[3] = v101;
  v102 = *a2;
  if (*(_DWORD *)this == 16000)
  {
    WebRtcSpl_DownsampleBy2(v102 + 128, 0x20uLL, &v110, (int *)this + 15);
  }
  else
  {
    v103 = *((int16x8_t *)v102 + 9);
    v110 = *((int16x8_t *)v102 + 8);
    v111 = v103;
  }
  v104 = v111;
  v105 = (uint32x4_t)vmull_high_s16(v104, v104);
  v106 = vshrq_n_u32((uint32x4_t)vmull_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v104.i8), 4uLL);
  v107 = vshrq_n_u32(v105, 4uLL);
  v108 = vaddvq_s64(vaddq_s64((int64x2_t)vaddl_u32(*(uint32x2_t *)v106.i8, *(uint32x2_t *)v107.i8), (int64x2_t)vaddl_high_u32(v106, v107)))+ ((v110.i16[7] * v110.i16[7]) >> 4)+ vaddvq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmull_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v110.i8), 4uLL))+ ((v110.i16[4] * v110.i16[4]) >> 4)+ ((v110.i16[5] * v110.i16[5]) >> 4)+ ((v110.i16[6] * v110.i16[6]) >> 4);
  if (v108 >= 0x7FFFFFFF)
    LODWORD(v108) = 0x7FFFFFFF;
  v74[4] = v108;
  if (*((_WORD *)this + 151))
    v109 = 2;
  else
    v109 = 1;
  *((_WORD *)this + 151) = v109;
  webrtc::WebRtcAgc_ProcessVad((uint64_t)this + 352, *a2, a4);
  return 0;
}

uint64_t webrtc::WebRtcAgc_VirtualMic(webrtc *this, __int16 **a2, __int16 *const *a3, unint64_t a4, int a5, int *a6, int *a7)
{
  unsigned int v7;
  __int16 *v8;
  int v9;
  __int16 *v10;
  __int16 v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  __int16 v15;
  __int16 v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  __int16 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  __int16 *v26;
  int v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  __int16 *v35;
  int v36;
  int v37;
  __int16 *v38;

  if (*(_DWORD *)this == 8000)
    v7 = 5500;
  else
    v7 = 11000;
  v8 = *a2;
  if (a4 < 2)
    goto LABEL_16;
  v9 = 0;
  v10 = v8 + 1;
  v11 = *v8;
  v12 = *v8 * *v8;
  v13 = a4 - 1;
  do
  {
    v14 = *v10++;
    v15 = v11 ^ v14;
    v16 = v14;
    v17 = v14 * v14;
    if (v12 >= v7)
      v17 = 0;
    v12 += v17;
    v9 += (unsigned __int16)(v15 & 0x8000) >> 15;
    v11 = v16;
    --v13;
  }
  while (v13);
  v18 = v12 < 0x1F4 || (__int16)v9 <= 5;
  if (v18 || (unsigned __int16)v9 > 0xFu && (v12 <= v7 || (unsigned __int16)v9 >= 0x14u))
  {
LABEL_16:
    *((_WORD *)this + 332) = 1;
    v19 = a5 << *((_WORD *)this + 174);
    if (v19 == *((_DWORD *)this + 76))
      goto LABEL_17;
LABEL_24:
    *((_DWORD *)this + 76) = v19;
    v20 = 127;
    *((_DWORD *)this + 79) = 127;
    if (!a4)
      goto LABEL_60;
    goto LABEL_25;
  }
  *((_WORD *)this + 332) = 0;
  v19 = a5 << *((_WORD *)this + 174);
  if (v19 != *((_DWORD *)this + 76))
    goto LABEL_24;
LABEL_17:
  v20 = *((_DWORD *)this + 81);
  if (*((_DWORD *)this + 79) < v20)
    v20 = *((_DWORD *)this + 79);
  if (v20 <= 127)
  if (!a4)
    goto LABEL_60;
LABEL_25:
  v22 = (unsigned __int16)*v21;
  if ((unint64_t)a3 > 1)
  {
    v23 = 0;
    while (1)
    {
      v24 = v8[v23] * v22;
      if (v24 > 0x1FFFFFF)
        break;
      if (v24 <= -33554433)
      {
        v25 = v20 - 128;
        if (v20 > 127)
        {
        }
        else
        {
          v25 = 128 - v20;
        }
        LOWORD(v27) = 0x8000;
        goto LABEL_37;
      }
      v27 = v24 >> 10;
LABEL_39:
      v8[v23] = v27;
      v28 = (uint64_t *)(a2 + 1);
      v29 = (char *)a3 - 1;
      do
      {
        v31 = *v28++;
        v30 = v31;
        v32 = (v22 * *(__int16 *)(v31 + 2 * v23)) >> 10;
        if (v32 >= 0x7FFF)
          v32 = 0x7FFF;
        if (v32 <= -32768)
          LOWORD(v32) = 0x8000;
        *(_WORD *)(v30 + 2 * v23) = v32;
        --v29;
      }
      while (v29);
      if (++v23 == a4)
        goto LABEL_60;
    }
    v25 = v20 - 128;
    if (v20 > 127)
    {
    }
    else
    {
      v25 = 128 - v20;
    }
    LOWORD(v27) = 0x7FFF;
LABEL_37:
    --v20;
    v22 = (unsigned __int16)v26[v25];
    goto LABEL_39;
  }
  v33 = a4;
  do
  {
    while (1)
    {
      v36 = *v8 * v22;
      if (v36 >= 0x2000000)
        break;
      if (v36 > -33554433)
      {
        *v8++ = v36 >> 10;
        if (!--v33)
          goto LABEL_60;
      }
      else
      {
        v37 = 128 - v20;
        if (v20 < 128)
        {
        }
        else
        {
          v37 = v20 - 128;
        }
        --v20;
        v22 = (unsigned __int16)v38[v37];
        *v8++ = 0x8000;
        if (!--v33)
          goto LABEL_60;
      }
    }
    v34 = 128 - v20;
    if (v20 < 128)
    {
    }
    else
    {
      v34 = v20 - 128;
    }
    --v20;
    v22 = (unsigned __int16)v35[v34];
    *v8++ = 0x7FFF;
    --v33;
  }
  while (v33);
LABEL_60:
  *((_DWORD *)this + 78) = v20;
  *a6 = v20 >> *((_WORD *)this + 174);
  if (webrtc::WebRtcAgc_AddMic(this, a2, a3, a4))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t webrtc::WebRtcAgc_ProcessAnalog(webrtc *this, void *a2, int *a3, int *a4, int a5, _BYTE *a6, unsigned __int8 *a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int32x4_t v14;
  int v15;
  int v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x8_t v21;
  int v22;
  int v23;
  int v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  __int16 v34;
  int v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  __int16 v55;
  int v56;
  unsigned __int16 v57;
  int v58;
  int v60;
  char *v61;
  int v62;
  int v63;
  __int16 v64;
  int v65;
  int v66;
  __int16 v67;
  int v68;
  int v69;
  __int16 v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  __int16 v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  int v84;

  v7 = (_DWORD)a2 << *((_WORD *)this + 174);
  v8 = *((_DWORD *)this + 81);
  if (v7 > v8)
    return 0xFFFFFFFFLL;
  v9 = *((_DWORD *)this + 83);
  if (v7 < v9)
    return 0xFFFFFFFFLL;
  if (*((_WORD *)this + 145))
  {
    v11 = *((_DWORD *)this + 79);
    if (v11 <= v8)
      v12 = *((_DWORD *)this + 81);
    else
      v12 = *((_DWORD *)this + 79);
    if (v7 == v8)
      v7 = v12;
    if (v7 == v11)
      goto LABEL_25;
  }
  else
  {
    *((_WORD *)this + 145) = 1;
    if (v7 < v9 + ((51 * (*((_DWORD *)this + 80) - v9)) >> 9) && *((_WORD *)this + 4) == 1)
      v7 = v9 + ((51 * (*((_DWORD *)this + 80) - v9)) >> 9);
    *((_DWORD *)this + 79) = v7;
    v11 = v7;
    if (v7 <= v8)
      v13 = v8;
    else
      v13 = v7;
    if (v7 == v8)
      v7 = v13;
    if (v7 == v11)
      goto LABEL_25;
  }
  if (v7 >= *((_DWORD *)this + 84))
  {
    if (*((_DWORD *)this + 86) == (_DWORD)a2)
      goto LABEL_25;
  }
  else
  {
    v7 = v9 + ((51 * (*((_DWORD *)this + 80) - v9)) >> 9);
  }
  *((_DWORD *)this + 79) = v7;
  v11 = v7;
LABEL_25:
  if (v11 > *((_DWORD *)this + 80))
    *((_DWORD *)this + 80) = v11;
  v14 = vdupq_n_s32(0x36BFFFFFu);
  v15 = *((_DWORD *)this + 49);
  v16 = *((_DWORD *)this + 50);
  v17 = *(int32x4_t *)((char *)this + 220);
  v18 = *(int32x4_t *)((char *)this + 204);
  v19 = (int32x4_t)vdupq_lane_s64(v18.i64[0], 0);
  v19.i64[0] = *(_QWORD *)((char *)this + 196);
  v20 = (int32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v17, 8uLL);
  v21 = (int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vshrq_n_u32((uint32x4_t)v19, 0x14uLL), (int16x8_t)vshrq_n_u32((uint32x4_t)v20, 0x14uLL)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v19, v14), (int16x8_t)vcgtq_s32(v20, v14)));
  v21.i16[0] = vaddvq_s16(v21);
  v20.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  v21.i16[2] = *((_WORD *)this + 139);
  *(int32x2_t *)v14.i8 = vadd_s32(*(int32x2_t *)v21.i8, (int32x2_t)vand_s8((int8x8_t)vshr_n_u32(*(uint32x2_t *)v20.i8, 0x14uLL), (int8x8_t)vcgt_s32(*(int32x2_t *)v20.i8, *(int32x2_t *)v14.i8)));
  *((_DWORD *)this + 86) = (_DWORD)a2;
  v22 = vadd_s32(*(int32x2_t *)v14.i8, vdup_lane_s32(*(int32x2_t *)v14.i8, 1)).i16[0];
  if (v22 <= 25000)
  {
    *((_WORD *)this + 139) = (32440 * v22) >> 15;
    v24 = v11;
  }
  else
  {
    *((_WORD *)this + 139) = 0;
    *((_DWORD *)this + 27) = ((*((_DWORD *)this + 27) + (*((int *)this + 27) < 0 ? 7 : 0)) & 0xFFFFFFF8)
                           - *((_DWORD *)this + 27) / 8;
    *((_DWORD *)this + 85) = v11;
    v23 = v9 + ((29591 * (v11 - v9)) >> 15);
    if (v23 >= v11 - 2)
      v24 = v11 - 2;
    else
      v24 = v23;
    *((_DWORD *)this + 79) = v24;
    if (v24 < *((_DWORD *)this + 84))
    {
      *a6 = 1;
      v15 = *((_DWORD *)this + 49);
      v16 = *((_DWORD *)this + 50);
      v17 = *(int32x4_t *)((char *)this + 220);
      v18 = *(int32x4_t *)((char *)this + 204);
    }
    *(_DWORD *)((char *)this + 286) = 65436;
    *((_DWORD *)this + 28) = 0;
    *(_QWORD *)((char *)this + 294) = 34079060;
    *(_QWORD *)((char *)this + 92) = *((_QWORD *)this + 4);
  }
  if (vaddvq_s64(vaddq_s64(vaddl_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)v17.i8), vaddl_high_s32(v18, v17)))
     + v16
     + v15 > 499)
  {
    v25 = 0;
    *((_WORD *)this + 146) = 0;
    v26 = *((__int16 *)this + 150);
    if (v26 < 1)
      goto LABEL_40;
    goto LABEL_39;
  }
  v25 = *((_WORD *)this + 146) + 10;
  *((_WORD *)this + 146) = v25;
  v26 = *((__int16 *)this + 150);
  if (v26 >= 1)
  {
LABEL_39:
    LOWORD(v26) = v26 - 10;
    *((_WORD *)this + 150) = v26;
  }
LABEL_40:
  if (v25 >= 501)
  {
    *((_WORD *)this + 146) = 0;
    v27 = *((_DWORD *)this + 81) + *((_DWORD *)this + 83);
    if (v27 + 1 >= 0)
      v28 = v27 + 1;
    else
      v28 = v27 + 2;
    if (v24 < v28 >> 1)
    {
      if ((1126 * v24) >> 10 >= *((_DWORD *)this + 85))
        v24 = *((_DWORD *)this + 85);
      else
        v24 = (1126 * v24) >> 10;
      *((_DWORD *)this + 79) = v24;
    }
    *(_DWORD *)((char *)this + 298) = 524288000;
    *((_DWORD *)this + 28) = 0;
    LOWORD(v26) = 8000;
  }
  if (*((__int16 *)this + 198) > 2499)
  {
    v51 = *((unsigned __int16 *)this + 198);
    if (v51 >> 2 >= 0x465)
      v52 = 400;
    else
      v52 = ((4500 - v51) >> 1) + 400;
    v53 = (v52 - *((__int16 *)this + 140) + 32 * *((__int16 *)this + 140)) >> 5;
    *((_WORD *)this + 140) = v53;
    v29 = *((__int16 *)this + 138);
    v30 = *((unsigned __int16 *)this + 138);
    if ((int)a4 <= (__int16)v53)
      goto LABEL_52;
    goto LABEL_74;
  }
  *((_WORD *)this + 140) = 1500;
  v29 = *((__int16 *)this + 138);
  v30 = *((unsigned __int16 *)this + 138);
  if ((int)a4 > 1500)
  {
LABEL_74:
    v54 = 0;
    v55 = *((_WORD *)this + 149);
    v56 = *((_DWORD *)this + 25);
    while (1)
    {
      v60 = *(_DWORD *)((char *)this + v54 + 156);
      v61 = (char *)this + 4 * (__int16)v30;
      *((_DWORD *)this + 25) = v56 + ((v60 - *((_DWORD *)v61 + 29)) >> 3);
      *((_DWORD *)v61 + 29) = v60;
      if ((unsigned __int16)(v30 + 1) == 10)
        LOWORD(v30) = 0;
      else
        LOWORD(v30) = v30 + 1;
      v62 = *((_DWORD *)this + 26) + ((v60 - *((_DWORD *)this + 26)) >> 6);
      *((_DWORD *)this + 26) = v62;
      if (v55 >= 250)
      {
        if (v55 == 250)
        {
          v55 = 252;
          *((_WORD *)this + 149) = 252;
          *((_DWORD *)this + 27) = 10 * (*((int *)this + 28) >> 3);
        }
      }
      else
      {
        v55 += 2;
        *((_WORD *)this + 149) = v55;
        if (v62 > *((_DWORD *)this + 28))
          *((_DWORD *)this + 28) = v62;
      }
      v56 = *((_DWORD *)this + 25);
      v63 = *((_DWORD *)this + 27) + ((v56 - *((_DWORD *)this + 27)) >> 10);
      *((_DWORD *)this + 27) = v63;
      if (v63 > *((_DWORD *)this + 12))
      {
        v64 = *((_WORD *)this + 143) + 2;
        *((_WORD *)this + 143) = v64;
        *((_WORD *)this + 142) = 0;
        *((_WORD *)this + 144) = 0;
        if (*((__int16 *)this + 147) < v64)
        {
          v55 = 0;
          v65 = *((_DWORD *)this + 79);
          v66 = (v65 - *((_DWORD *)this + 80) + 16 * *((_DWORD *)this + 80)) / 16;
          if (v66 <= *((_DWORD *)this + 81))
            v66 = *((_DWORD *)this + 81);
          *((_DWORD *)this + 80) = v66;
          *((_WORD *)this + 143) = 0;
          *((_DWORD *)this + 85) = v65;
          v24 = *((_DWORD *)this + 83) + ((31130 * (v24 - *((_DWORD *)this + 83))) >> 15);
          if (v24 >= v11)
            v24 = v11 - 1;
          *((_DWORD *)this + 79) = v24;
          *((_WORD *)this + 149) = 0;
          *(_QWORD *)((char *)this + 108) = (53 * (v63 >> 6));
        }
        goto LABEL_88;
      }
      if (v63 <= *((_DWORD *)this + 23))
      {
        if (v63 < *((_DWORD *)this + 13))
        {
          *(_DWORD *)((char *)this + 286) = 0;
          v70 = *((_WORD *)this + 142) + 2;
          *((_WORD *)this + 142) = v70;
          if (*((__int16 *)this + 147) >= v70)
            goto LABEL_88;
          *((_WORD *)this + 142) = 0;
          v71 = *((_DWORD *)this + 83);
          v72 = v24 - v71;
          v73 = *((_DWORD *)this + 82) - v71;
          if (!v73)
          {
            LOWORD(v74) = 0x4000;
            goto LABEL_114;
          }
          v74 = (v72 << 14) / v73;
          if ((__int16)v74 <= 5243)
          {
            if ((__int16)v74 <= 2621)
            {
              v75 = (__int16)v74 > 1311;
            }
            else if ((unsigned __int16)v74 <= 0xF5Cu)
            {
              v75 = 2;
            }
            else
            {
              v75 = 3;
            }
          }
          else if ((unsigned __int16)v74 <= 0x1EB8u)
          {
            if ((unsigned __int16)v74 <= 0x199Au)
              v75 = 4;
            else
              v75 = 5;
          }
          else if ((unsigned __int16)v74 >= 0x2F5Du)
          {
LABEL_114:
            v75 = 7;
          }
          else
          {
            v75 = 6;
          }
          *((_DWORD *)this + 27) = 67 * (v63 / 64);
          v24 = v71 + ((v72 * (__int16)v76) >> 14);
          if (v24 <= v11 + 2)
            v24 = v11 + 2;
          goto LABEL_87;
        }
        if (v63 < *((_DWORD *)this + 24))
        {
          *(_DWORD *)((char *)this + 286) = 0;
          v77 = *((_WORD *)this + 142) + 2;
          *((_WORD *)this + 142) = v77;
          if (*((__int16 *)this + 148) >= v77)
            goto LABEL_88;
          *((_WORD *)this + 142) = 0;
          v78 = *((_DWORD *)this + 83);
          v79 = v24 - v78;
          v80 = *((_DWORD *)this + 82) - v78;
          if (!v80)
          {
            LOWORD(v81) = 0x4000;
            goto LABEL_121;
          }
          v81 = (v79 << 14) / v80;
          if ((__int16)v81 <= 5243)
          {
            if ((__int16)v81 <= 2621)
            {
              v82 = (__int16)v81 > 1311;
            }
            else if ((unsigned __int16)v81 <= 0xF5Cu)
            {
              v82 = 2;
            }
            else
            {
              v82 = 3;
            }
          }
          else if ((unsigned __int16)v81 <= 0x1EB8u)
          {
            if ((unsigned __int16)v81 <= 0x199Au)
              v82 = 4;
            else
              v82 = 5;
          }
          else if ((unsigned __int16)v81 >= 0x2F5Du)
          {
LABEL_121:
            v82 = 7;
          }
          else
          {
            v82 = 6;
          }
          *((_DWORD *)this + 27) = 67 * (v63 / 64);
          v24 = v78 + ((v79 * (__int16)v83) >> 14);
          if (v24 <= v11)
            v24 = v11 + 1;
          goto LABEL_87;
        }
        v84 = *((__int16 *)this + 144);
        if (v84 > 4000)
        {
          *(_DWORD *)((char *)this + 294) = 65536500;
          *(_QWORD *)((char *)this + 92) = *((_QWORD *)this + 5);
        }
        else
        {
          *((_WORD *)this + 144) = v84 + 2;
        }
        *((_DWORD *)this + 71) = 0;
      }
      else
      {
        v67 = *((_WORD *)this + 143) + 2;
        *((_WORD *)this + 143) = v67;
        *((_WORD *)this + 142) = 0;
        *((_WORD *)this + 144) = 0;
        if (*((__int16 *)this + 148) >= v67)
          goto LABEL_88;
        *((_WORD *)this + 143) = 0;
        *((_DWORD *)this + 27) = 53 * (v63 / 64);
        v68 = *((_DWORD *)this + 79);
        v69 = (v68 - *((_DWORD *)this + 80) + 16 * *((_DWORD *)this + 80)) / 16;
        if (v69 <= *((_DWORD *)this + 81))
          v69 = *((_DWORD *)this + 81);
        *((_DWORD *)this + 80) = v69;
        *((_DWORD *)this + 85) = v68;
        v24 = *((_DWORD *)this + 83) + ((31621 * (v24 - *((_DWORD *)this + 83))) >> 15);
        if (v24 >= v11)
          v24 = v11 - 1;
      }
LABEL_87:
      *((_DWORD *)this + 79) = v24;
LABEL_88:
      v54 += 4;
      if (v54 == 20)
        goto LABEL_68;
    }
  }
LABEL_52:
  v31 = *((_DWORD *)this + 39);
  v32 = 4 * v29;
  v33 = (char *)this + 116;
  *((_DWORD *)this + 25) += (v31 - *(_DWORD *)((char *)this + v32 + 116)) >> 3;
  *(_DWORD *)((char *)this + v32 + 116) = v31;
  if (v30 == 9)
    v34 = 0;
  else
    v34 = v30 + 1;
  v35 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 26) += (v31 - *((_DWORD *)this + 26)) >> 6;
  v36 = *((_DWORD *)this + 40);
  v37 = 4 * v34;
  *((_DWORD *)this + 25) = v35 + ((v36 - *(_DWORD *)&v33[v37]) >> 3);
  *(_DWORD *)&v33[v37] = v36;
  if ((unsigned __int16)(v34 + 1) == 10)
    v38 = 0;
  else
    v38 = v34 + 1;
  v39 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 26) += (v36 - *((_DWORD *)this + 26)) >> 6;
  v40 = *((_DWORD *)this + 41);
  v41 = 4 * v38;
  *((_DWORD *)this + 25) = v39 + ((v40 - *(_DWORD *)&v33[v41]) >> 3);
  *(_DWORD *)&v33[v41] = v40;
  if ((unsigned __int16)(v38 + 1) == 10)
    v42 = 0;
  else
    v42 = v38 + 1;
  v43 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 26) += (v40 - *((_DWORD *)this + 26)) >> 6;
  v44 = *((_DWORD *)this + 42);
  v45 = 4 * v42;
  *((_DWORD *)this + 25) = v43 + ((v44 - *(_DWORD *)&v33[v45]) >> 3);
  *(_DWORD *)&v33[v45] = v44;
  if ((unsigned __int16)(v42 + 1) == 10)
    v46 = 0;
  else
    v46 = v42 + 1;
  v47 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 26) += (v44 - *((_DWORD *)this + 26)) >> 6;
  v48 = *((_DWORD *)this + 43);
  v49 = 4 * v46;
  *((_DWORD *)this + 25) = v47 + ((v48 - *(_DWORD *)&v33[v49]) >> 3);
  *(_DWORD *)&v33[v49] = v48;
  if ((unsigned __int16)(v46 + 1) == 10)
    LOWORD(v30) = 0;
  else
    LOWORD(v30) = v46 + 1;
  *((_DWORD *)this + 26) += (v48 - *((_DWORD *)this + 26)) >> 6;
LABEL_68:
  *((_WORD *)this + 138) = v30;
  if (a5 == 1)
  {
    v50 = *((_DWORD *)this + 79);
    goto LABEL_76;
  }
  v57 = v26 - 1;
  v50 = *((_DWORD *)this + 79);
  if (v57 <= 0x1F3Eu)
  {
LABEL_76:
    if (v50 > v11)
    {
      *((_DWORD *)this + 79) = v11;
      v50 = v11;
    }
  }
  v58 = *((_DWORD *)this + 80);
  if (v50 > v58 || (v58 = *((_DWORD *)this + 84), v50 < v58))
  {
    *((_DWORD *)this + 79) = v58;
    v50 = v58;
  }
  v10 = 0;
  if (v50 >= *((_DWORD *)this + 81))
    v50 = *((_DWORD *)this + 81);
  *a3 = v50 >> *((_WORD *)this + 174);
  return v10;
}

uint64_t webrtc::WebRtcAgc_Analyze(webrtc *this, __int16 **a2, const __int16 *const *a3, uint64_t a4, void *a5, int *a6, int *a7, _BYTE *a8, unsigned __int8 *a9, int *a10)
{
  int v11;
  int v15;
  uint64_t result;
  unsigned __int8 *v18;
  int v19;
  int v20;

  if (!this)
    return 0xFFFFFFFFLL;
  v11 = (int)a7;
  v15 = *(_DWORD *)this;
  result = 0xFFFFFFFFLL;
  if (v15 > 31999)
  {
    if (v15 != 32000 && v15 != 48000)
      return result;
  }
  else
  {
    if (v15 == 8000)
    {
      if (a4 != 80)
        return result;
      goto LABEL_15;
    }
    if (v15 != 16000)
      return result;
  }
  if (a4 != 160)
    return result;
LABEL_15:
  *a8 = 0;
  *a6 = (int)a5;
  result = webrtc::WebRtcAgc_ComputeDigitalGains((uint64_t)this + 408, a2, (uint64_t)a3, *(_DWORD *)this, *((__int16 *)this + 332), a9);
  if ((_DWORD)result != -1)
  {
    if ((v19 = *((__int16 *)this + 4), v19 > 2)
      || v19 == 2 && *((_WORD *)this + 332)
      || (result = webrtc::WebRtcAgc_ProcessAnalog(this, a5, a6, (int *)*((__int16 *)this + 194), v11, a8, v18), (_DWORD)result != -1))
    {
      v20 = *((__int16 *)this + 151);
      if (v20 < 2)
      {
        if (v20 != 1)
          return 0;
      }
      else
      {
        *(_OWORD *)((char *)this + 196) = *(_OWORD *)((char *)this + 236);
        *(_OWORD *)((char *)this + 212) = *(_OWORD *)((char *)this + 252);
        *(_QWORD *)((char *)this + 228) = *(_QWORD *)((char *)this + 268);
        *(_OWORD *)((char *)this + 156) = *((_OWORD *)this + 11);
        *((_DWORD *)this + 43) = *((_DWORD *)this + 48);
      }
      result = 0;
      *((_WORD *)this + 151) = v20 - 1;
    }
  }
  return result;
}

uint64_t webrtc::WebRtcAgc_Init(webrtc *this, void *a2, int a3, unsigned int a4, int a5)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  __int16 v19;
  int v21;

  *(_QWORD *)((char *)this + 412) = 0x1000000000000;
  *((_WORD *)this + 274) = 0;
  *((_WORD *)this + 275) = a4;
  *((_QWORD *)this + 74) = 0x3C0000000001F400;
  *((_DWORD *)this + 150) = 128000;
  *((_WORD *)this + 302) = 0;
  *((_QWORD *)this + 73) = 0x3C00000000030000;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((_QWORD *)this + 81) = 0x3C0000000001F400;
  *((_DWORD *)this + 164) = 128000;
  *((_WORD *)this + 330) = 0;
  *((_QWORD *)this + 80) = 0x3C00000000030000;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_WORD *)this + 139) = 0;
  *((_DWORD *)this + 102) = (a4 != 3) << 27;
  if (a4 > 3)
    return 0xFFFFFFFFLL;
  *((_WORD *)this + 4) = a4;
  *(_DWORD *)this = a5;
  *((_DWORD *)this + 98) = 128000;
  *((_DWORD *)this + 99) = 1006632960;
  *((_DWORD *)this + 100) = 128000;
  *((_WORD *)this + 202) = 0;
  *((_QWORD *)this + 48) = 0x3C00000000030000;
  *((_OWORD *)this + 22) = 0uLL;
  *((_OWORD *)this + 23) = 0uLL;
  *((_WORD *)this + 174) = 0;
  if (a4 == 2)
    v7 = 255;
  else
    v7 = a3;
  if (a4 == 2)
    v8 = 0;
  else
    v8 = (int)a2;
  if (a4 == 2)
    v9 = 127;
  else
    v9 = a3;
  v10 = v7 - v8;
  if (v7 < v8)
    v10 = v7 - v8 + 3;
  *((_DWORD *)this + 83) = v8;
  *((_DWORD *)this + 81) = v7;
  v11 = v7 + (v10 >> 2);
  *((_DWORD *)this + 80) = v11;
  *((_DWORD *)this + 82) = v11;
  *((_DWORD *)this + 85) = v7;
  *((_DWORD *)this + 86) = 0;
  *((_DWORD *)this + 79) = v9;
  *((_DWORD *)this + 76) = v9;
  *((_DWORD *)this + 78) = 127;
  *((_DWORD *)this + 84) = v8 + ((10 * (v11 - v8)) >> 8);
  *((_WORD *)this + 154) = 0;
  *(_QWORD *)((char *)this + 284) = 0;
  *((_WORD *)this + 146) = 0;
  *(_QWORD *)((char *)this + 294) = 34079060;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 70) = 400;
  memset_pattern16((char *)this + 116, &unk_208F04AC0, 0x28uLL);
  *(_OWORD *)((char *)this + 196) = 0u;
  *((_WORD *)this + 138) = 0;
  *(_QWORD *)((char *)this + 100) = 0x3F9C000004E2;
  *(_QWORD *)((char *)this + 156) = 0;
  *(_QWORD *)((char *)this + 164) = 0;
  *((_DWORD *)this + 43) = 0;
  *((_WORD *)this + 151) = 0;
  *(_OWORD *)((char *)this + 212) = 0u;
  *(_OWORD *)((char *)this + 228) = 0u;
  *(_OWORD *)((char *)this + 244) = 0u;
  *(_OWORD *)((char *)this + 260) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *((_WORD *)this + 12) = 42;
  *((_BYTE *)this + 16) = 1;
  *((_DWORD *)this + 3) = 589827;
  v12 = *((unsigned __int16 *)this + 8);
  v13 = (v12 << 32) | 0x90003;
  if (((v12 << 32) & 0xFE00000000) != 0)
    goto LABEL_31;
  v14 = v13 >> 16;
  v15 = HIDWORD(v13);
  *((_BYTE *)this + 10) = BYTE4(v13);
  *((_WORD *)this + 2) = 9;
  *((_WORD *)this + 3) = 3;
  v16 = *((unsigned __int16 *)this + 4);
  v17 = v13 >> 16;
  if (v16 == 3)
  {
    LOWORD(v17) = v14 + 3;
    *((_WORD *)this + 2) = v14 + 3;
  }
  if ((unsigned __int16)((__int16)(5 * v17 + 5) / 11) <= 0x7FFBu)
    v18 = ((5958 * (__int16)(5 * v17 + 5)) >> 16)
        + ((5958 * (__int16)(5 * v17 + 5)) >> 31)
        + 4;
  else
    LOWORD(v18) = 4;
  v19 = v16 == 3 ? v17 : v18;
  *((_WORD *)this + 29) = v19;
  *((_WORD *)this + 28) = 20;
  *(_OWORD *)((char *)this + 28) = xmmword_208F04AB0;
  *(_QWORD *)((char *)this + 44) = 0x287984C00813652;
  *((_DWORD *)this + 13) = 4244080;
  *(_QWORD *)((char *)this + 92) = 0xA2AB200101CFECLL;
  if (webrtc::WebRtcAgc_CalculateGainTable((webrtc *)((char *)this + 420), (int *)(__int16)v17, 3, v12, v19) == -1)
  {
LABEL_31:
    *((_WORD *)this + 13) = 18000;
    return 0xFFFFFFFFLL;
  }
  else
  {
    *((_WORD *)this + 10) = v14;
    *((_BYTE *)this + 22) = v15;
    *((_WORD *)this + 9) = 3;
    *((_DWORD *)this + 27) = *((_DWORD *)this + 7);
    *((_WORD *)this + 332) = 0;
    v21 = (v7 & 0xFC000000) != 0 || v7 <= v8;
    return (v21 << 31 >> 31);
  }
}

double webrtc::ApiCallJitterMetrics::ReportCaptureCall(webrtc::ApiCallJitterMetrics *this)
{
  int v2;
  int v3;
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  int v11;
  uint64_t v13;
  int v14;
  uint64_t v16;
  int v17;
  double result;

  if (*((_BYTE *)this + 24))
  {
    if (*((_BYTE *)this + 25))
    {
      v2 = *((_DWORD *)this + 4);
      v3 = *((_DWORD *)this + 1);
      if (v3 >= v2)
        v3 = *((_DWORD *)this + 4);
      if (*(_DWORD *)this > v2)
        v2 = *(_DWORD *)this;
      *(_DWORD *)this = v2;
      *((_DWORD *)this + 1) = v3;
    }
    *((_DWORD *)this + 4) = 1;
    v4 = (char *)this + 16;
    *((_WORD *)this + 12) = 256;
  }
  else
  {
    v4 = (char *)this + 16;
    v5 = *((unsigned __int8 *)this + 25);
    ++*((_DWORD *)this + 4);
    *((_BYTE *)this + 24) = 0;
    if (!v5)
      return result;
  }
  v6 = *((_DWORD *)this + 5) + 1;
  *((_DWORD *)this + 5) = v6;
  if (v6 == 1000)
  {
    v7 = atomic_load(&_MergedGlobals_3);
    if (v7)
    {
      if (*(int *)this >= 50)
        v8 = 50;
      else
        v8 = *(_DWORD *)this;
      webrtc::metrics::HistogramAdd(v7, v8);
    }
    else
    {
      while (!__ldaxr(&_MergedGlobals_3))
      {
        if (!__stlxr(0, &_MergedGlobals_3))
          goto LABEL_19;
      }
      __clrex();
    }
LABEL_19:
    v10 = atomic_load(&qword_253EA54C0);
    if (v10)
    {
      if (*((int *)this + 1) >= 50)
        v11 = 50;
      else
        v11 = *((_DWORD *)this + 1);
      webrtc::metrics::HistogramAdd(v10, v11);
    }
    else
    {
      while (!__ldaxr(&qword_253EA54C0))
      {
        if (!__stlxr(0, &qword_253EA54C0))
          goto LABEL_27;
      }
      __clrex();
    }
LABEL_27:
    v13 = atomic_load(&qword_253EA54C8);
    if (v13)
    {
      if (*((int *)this + 2) >= 50)
        v14 = 50;
      else
        v14 = *((_DWORD *)this + 2);
      webrtc::metrics::HistogramAdd(v13, v14);
    }
    else
    {
      while (!__ldaxr(&qword_253EA54C8))
      {
        if (!__stlxr(0, &qword_253EA54C8))
          goto LABEL_35;
      }
      __clrex();
    }
LABEL_35:
    v16 = atomic_load(&qword_253EA54D0);
    if (v16)
    {
      if (*((int *)this + 3) >= 50)
        v17 = 50;
      else
        v17 = *((_DWORD *)this + 3);
      webrtc::metrics::HistogramAdd(v16, v17);
    }
    else
    {
      while (!__ldaxr(&qword_253EA54D0))
      {
        if (!__stlxr(0, &qword_253EA54D0))
          goto LABEL_43;
      }
      __clrex();
    }
LABEL_43:
    result = NAN;
    *(_OWORD *)this = xmmword_208F04D60;
    *(_QWORD *)v4 = 0;
    *((_WORD *)v4 + 4) = 0;
  }
  return result;
}

void webrtc::rtcp::App::~App(webrtc::rtcp::App *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C0ACC28;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24C0ACC28;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::rtcp::App::Parse(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v12;
  size_t v13;
  const void *v14;
  size_t v15;
  size_t v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(unsigned int *)(a2 + 4);
  if (v2 <= 7)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      goto LABEL_6;
    return 0;
  }
  if ((v2 & 3) != 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_6:
      rtc::webrtc_logging_impl::Log("\r\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/app.cc");
    return 0;
  }
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 1);
  v12 = *(unsigned int **)(a2 + 8);
  *(_DWORD *)(a1 + 8) = bswap32(*v12);
  *(_DWORD *)(a1 + 16) = bswap32(v12[1]);
  *(_QWORD *)(a1 + 24) = 0;
  v13 = v2 - 8;
  if (v2 != 8)
  {
    v14 = v12 + 2;
    v15 = *(_QWORD *)(a1 + 32);
    if (v15 >= v13)
    {
      v21 = 0;
    }
    else
    {
      v16 = v15 + (v15 >> 1);
      if (v16 <= v13)
        v17 = v13;
      else
        v17 = v16;
      v18 = (void *)operator new[]();
      v19 = v18;
      v20 = *(_QWORD *)(a1 + 40);
      if (v20)
      {
        memcpy(v18, *(const void **)(a1 + 40), *(_QWORD *)(a1 + 24));
        *(_QWORD *)(a1 + 40) = v19;
        MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
      }
      else
      {
        *(_QWORD *)(a1 + 40) = v18;
      }
      *(_QWORD *)(a1 + 32) = v17;
      v21 = *(_QWORD *)(a1 + 24);
    }
    memcpy((void *)(*(_QWORD *)(a1 + 40) + v21), v14, v13);
    *(_QWORD *)(a1 + 24) = v13;
  }
  return 1;
}

uint64_t webrtc::rtcp::App::BlockLength(webrtc::rtcp::App *this)
{
  return *((_QWORD *)this + 3) + 12;
}

uint64_t webrtc::rtcp::App::Create(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;

  v12 = *a3;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + v12 <= a4)
  {
LABEL_4:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v13 = *(_BYTE *)(a1 + 12);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    *(_BYTE *)(a2 + *a3) = v13 | 0x80;
    *(_BYTE *)(*a3 + a2 + 1) = -52;
    *(_BYTE *)(*a3 + a2 + 2) = (unint64_t)(v14 - 4) >> 10;
    *(_BYTE *)(*a3 + a2 + 3) = (unint64_t)(v14 - 4) >> 2;
    v15 = *a3 + 4;
    *a3 = v15;
    *(_DWORD *)(a2 + v15) = bswap32(*(_DWORD *)(a1 + 8));
    *(_DWORD *)(*a3 + a2 + 4) = bswap32(*(_DWORD *)(a1 + 16));
    v16 = *(_QWORD *)(a1 + 24);
    if (v16)
    {
      memcpy((void *)(*a3 + a2 + 8), *(const void **)(a1 + 40), v16);
      v17 = *(_QWORD *)(a1 + 24) + 8;
    }
    else
    {
      v17 = 8;
    }
    *a3 += v17;
    return 1;
  }
  else
  {
    while (*a3)
    {
      a6(a5, a2);
      *a3 = 0;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) <= a4)
        goto LABEL_4;
    }
    return 0;
  }
}

int8x16_t *absl::ascii_internal::AsciiStrCaseFoldLong<false>(int8x16_t *result, unint64_t a2)
{
  unint64_t v2;
  int8x16_t *v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  unint64_t v7;
  int8x16_t v8;
  unint64_t v9;
  int8x8_t *v10;
  unint64_t v11;
  unint64_t v12;
  __int8 *v13;

  if (a2 >= 0x20)
  {
    v2 = a2 & 0xFFFFFFFFFFFFFFE0;
    v3 = result + 1;
    v4.i64[0] = 0x3F3F3F3F3F3F3F3FLL;
    v4.i64[1] = 0x3F3F3F3F3F3F3F3FLL;
    v5.i64[0] = 0x9A9A9A9A9A9A9A9ALL;
    v5.i64[1] = 0x9A9A9A9A9A9A9A9ALL;
    v6.i64[0] = 0x2020202020202020;
    v6.i64[1] = 0x2020202020202020;
    v7 = a2 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v8 = veorq_s8(vandq_s8(vcgtq_s8(v5, vaddq_s8(*v3, v4)), v6), *v3);
      v3[-1] = veorq_s8(vandq_s8(vcgtq_s8(v5, vaddq_s8(v3[-1], v4)), v6), v3[-1]);
      *v3 = v8;
      v3 += 2;
      v7 -= 32;
    }
    while (v7);
    if (v2 == a2)
      return result;
    if ((a2 & 0x18) == 0)
    {
LABEL_10:
      v12 = a2 - v2;
      v13 = &result->i8[v2];
      do
      {
        *v13 ^= 32 * ((char)(*v13 + 63) < -102);
        ++v13;
        --v12;
      }
      while (v12);
      return result;
    }
  }
  else
  {
    v2 = 0;
  }
  v9 = v2;
  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  v10 = (int8x8_t *)&result->i8[v9];
  v11 = v9 - (a2 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    *v10 = veor_s8(vand_s8(vcgt_s8((int8x8_t)0x9A9A9A9A9A9A9A9ALL, vadd_s8(*v10, (int8x8_t)0x3F3F3F3F3F3F3F3FLL)), (int8x8_t)0x2020202020202020), *v10);
    ++v10;
    v11 += 8;
  }
  while (v11);
  if (v2 != a2)
    goto LABEL_10;
  return result;
}

_QWORD *std::make_unique[abi:sn180100]<webrtc::AsyncAudioProcessing,std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)operator new();
  v9 = *a1;
  *a1 = 0;
  v10 = (_QWORD *)a3[3];
  if (!v10)
  {
    v17 = 0;
    goto LABEL_5;
  }
  if (v10 != a3)
  {
    v17 = (_QWORD *)a3[3];
    a3[3] = 0;
    goto LABEL_7;
  }
  v17 = v16;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v16);
  v10 = v17;
  if (!v17)
  {
LABEL_5:
    v8[3] = 0;
    goto LABEL_10;
  }
LABEL_7:
  if (v10 == v16)
  {
    v8[3] = v8;
    (*(void (**)(_QWORD *, _QWORD *))(v16[0] + 24))(v16, v8);
  }
  else
  {
    v8[3] = v10;
    v17 = 0;
  }
LABEL_10:
  v8[4] = v9;
  v8[5] = v9;
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, "AsyncAudioProcessing", 20, 0);
  v11 = v8[5];
  v18[0] = &off_24C0ACCD0;
  v18[1] = v8;
  v19 = v18;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 24))(v11, v18);
  v12 = v19;
  if (v19 == v18)
  {
    v13 = 4;
    v12 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_15;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_15:
  *a4 = v8;
  result = v17;
  if (v17 == v16)
  {
    v15 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

_QWORD *std::make_unique[abi:sn180100]<webrtc::AsyncAudioProcessing,webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)operator new();
  v9 = (_QWORD *)a3[3];
  if (!v9)
  {
    v16 = 0;
    goto LABEL_5;
  }
  if (v9 != a3)
  {
    v16 = (_QWORD *)a3[3];
    a3[3] = 0;
    goto LABEL_7;
  }
  v16 = v15;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v15);
  v9 = v16;
  if (!v16)
  {
LABEL_5:
    v8[3] = 0;
    goto LABEL_10;
  }
LABEL_7:
  if (v9 == v15)
  {
    v8[3] = v8;
    (*(void (**)(_QWORD *, _QWORD *))(v15[0] + 24))(v15, v8);
  }
  else
  {
    v8[3] = v9;
    v16 = 0;
  }
LABEL_10:
  v8[4] = a1;
  v8[5] = 0;
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, "AsyncAudioProcessing", 20, 0);
  v10 = v8[4];
  v17[0] = &off_24C0ACC88;
  v17[1] = v8;
  v18 = v17;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 24))(v10, v17);
  v11 = v18;
  if (v18 == v17)
  {
    v12 = 4;
    v11 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_15;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_15:
  *a4 = v8;
  result = v16;
  if (v16 == v15)
  {
    v14 = 4;
    result = v15;
  }
  else
  {
    if (!v16)
      return result;
    v14 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
}

void webrtc::AsyncAudioProcessing::~AsyncAudioProcessing(webrtc::AsyncAudioProcessing *this)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  uint64_t v7;
  webrtc::AsyncAudioProcessing *v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v13 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 24))(v2, v12);
    v3 = v13;
    if (v13 == v12)
    {
      v4 = 4;
      v3 = v12;
      goto LABEL_8;
    }
  }
  else
  {
    v5 = *((_QWORD *)this + 4);
    v11 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 24))(v5, v10);
    v3 = v11;
    if (v11 == v10)
    {
      v4 = 4;
      v3 = v10;
      goto LABEL_8;
    }
  }
  if (!v3)
    goto LABEL_9;
  v4 = 5;
LABEL_8:
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_9:
  v6 = (void (***)(_QWORD))*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    (**v6)(v6);
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (webrtc::AsyncAudioProcessing *)*((_QWORD *)this + 3);
  if (v8 == this)
  {
    v9 = 4;
    v8 = this;
  }
  else
  {
    if (!v8)
      return;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
}

void std::__function::__func<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0,std::allocator<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0>,void ()(std::unique_ptr<webrtc::AudioFrame>)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0,std::allocator<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0>,void ()(std::unique_ptr<webrtc::AudioFrame>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0ACC88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0,std::allocator<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0>,void ()(std::unique_ptr<webrtc::AudioFrame>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0ACC88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0,std::allocator<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0>,void ()(std::unique_ptr<webrtc::AudioFrame>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;
  _QWORD v8[2];
  uint64_t (*v9)(uint64_t, _QWORD *, _QWORD *);
  uint64_t (*v10)(uint64_t *);

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 48);
  v8[0] = v3;
  v8[1] = v2;
  v9 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0::operator() const(std::unique_ptr<webrtc::AudioFrame>)::{lambda(void)#1}>;
  v10 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::AsyncAudioProcessing::AsyncAudioProcessing(webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0::operator() const(std::unique_ptr<webrtc::AudioFrame>)::{lambda(void)#1} &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v8, &v7, &v6);
  return v9(1, v8, v8);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::AsyncAudioProcessing::AsyncAudioProcessing(webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0::operator() const(std::unique_ptr<webrtc::AudioFrame>)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v1 = *a1;
  v2 = a1[1];
  a1[1] = 0;
  v13 = v2;
  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v13);
    v5 = v13;
    v13 = 0;
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 64);
      if (v6)
      {
        do
        {
          v7 = __ldaxr((unsigned int *)v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)v6));
        if (!v8)
        {
          v9 = *(_QWORD *)(v6 + 8);
          if (v9)
          {
            v10 = *(_QWORD *)(v6 + 16);
            v11 = *(void **)(v6 + 8);
            if (v10 != v9)
            {
              do
              {
                v12 = *(void **)(v10 - 96);
                if (v12)
                {
                  *(_QWORD *)(v10 - 88) = v12;
                  operator delete(v12);
                }
                v10 -= 104;
              }
              while (v10 != v9);
              v11 = *(void **)(v6 + 8);
            }
            *(_QWORD *)(v6 + 16) = v9;
            operator delete(v11);
          }
          MEMORY[0x20BD0ADEC](v6, 0x1020C40E72D6CFBLL);
        }
      }
      return MEMORY[0x20BD0ADEC](v5, 0x1020C40C39A3FA5);
    }
  }
  else
  {
    std::__throw_bad_function_call[abi:sn180100]();
    return std::__throw_bad_function_call[abi:sn180100]();
  }
  return result;
}

uint64_t std::__throw_bad_function_call[abi:sn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return absl::internal_any_invocable::LocalManagerNontrivial<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0::operator() const(std::unique_ptr<webrtc::AudioFrame>)::{lambda(void)#1}>();
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0::operator() const(std::unique_ptr<webrtc::AudioFrame>)::{lambda(void)#1}>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  if ((result & 1) == 0)
  {
    *a3 = *a2;
    v3 = a2[1];
    a2[1] = 0;
    a3[1] = v3;
  }
  v4 = a2[1];
  a2[1] = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 64);
    if (v5)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        v8 = *(_QWORD *)(v5 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(v5 + 16);
          v10 = *(void **)(v5 + 8);
          if (v9 != v8)
          {
            do
            {
              v11 = *(void **)(v9 - 96);
              if (v11)
              {
                *(_QWORD *)(v9 - 88) = v11;
                operator delete(v11);
              }
              v9 -= 104;
            }
            while (v9 != v8);
            v10 = *(void **)(v5 + 8);
          }
          *(_QWORD *)(v5 + 16) = v8;
          operator delete(v10);
        }
        MEMORY[0x20BD0ADEC](v5, 0x1020C40E72D6CFBLL);
      }
    }
    JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

void std::__function::__func<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0,std::allocator<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0>,void ()(std::unique_ptr<webrtc::AudioFrame>)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0,std::allocator<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0>,void ()(std::unique_ptr<webrtc::AudioFrame>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0ACCD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0,std::allocator<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0>,void ()(std::unique_ptr<webrtc::AudioFrame>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0ACCD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0,std::allocator<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0>,void ()(std::unique_ptr<webrtc::AudioFrame>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;
  _QWORD v8[2];
  uint64_t (*v9)(uint64_t, _QWORD *, _QWORD *);
  uint64_t (*v10)(uint64_t *);

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 48);
  v8[0] = v3;
  v8[1] = v2;
  v9 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0::operator() const(std::unique_ptr<webrtc::AudioFrame>)::{lambda(void)#1}>;
  v10 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::AsyncAudioProcessing::AsyncAudioProcessing(std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0::operator() const(std::unique_ptr<webrtc::AudioFrame>)::{lambda(void)#1} &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v8, &v7, &v6);
  return v9(1, v8, v8);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::AsyncAudioProcessing::AsyncAudioProcessing(std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0::operator() const(std::unique_ptr<webrtc::AudioFrame>)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *a1;
  v2 = a1[1];
  a1[1] = 0;
  v14 = v2;
  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v14);
    v5 = v14;
    v14 = 0;
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 64);
      if (v6)
      {
        do
        {
          v7 = __ldaxr((unsigned int *)v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)v6));
        if (!v8)
        {
          v9 = *(_QWORD *)(v6 + 8);
          if (v9)
          {
            v10 = *(_QWORD *)(v6 + 16);
            v11 = *(void **)(v6 + 8);
            if (v10 != v9)
            {
              do
              {
                v12 = *(void **)(v10 - 96);
                if (v12)
                {
                  *(_QWORD *)(v10 - 88) = v12;
                  operator delete(v12);
                }
                v10 -= 104;
              }
              while (v10 != v9);
              v11 = *(void **)(v6 + 8);
            }
            *(_QWORD *)(v6 + 16) = v9;
            operator delete(v11);
          }
          MEMORY[0x20BD0ADEC](v6, 0x1020C40E72D6CFBLL);
        }
      }
      return MEMORY[0x20BD0ADEC](v5, 0x1020C40C39A3FA5);
    }
  }
  else
  {
    v13 = std::__throw_bad_function_call[abi:sn180100]();
    return absl::internal_any_invocable::LocalManagerNontrivial<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0::operator() const(std::unique_ptr<webrtc::AudioFrame>)::{lambda(void)#1}>(v13);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::AsyncAudioProcessing::AsyncAudioProcessing(std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>)::$_0::operator() const(std::unique_ptr<webrtc::AudioFrame>)::{lambda(void)#1}>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  if ((result & 1) == 0)
  {
    *a3 = *a2;
    v3 = a2[1];
    a2[1] = 0;
    a3[1] = v3;
  }
  v4 = a2[1];
  a2[1] = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 64);
    if (v5)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        v8 = *(_QWORD *)(v5 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(v5 + 16);
          v10 = *(void **)(v5 + 8);
          if (v9 != v8)
          {
            do
            {
              v11 = *(void **)(v9 - 96);
              if (v11)
              {
                *(_QWORD *)(v9 - 88) = v11;
                operator delete(v11);
              }
              v9 -= 104;
            }
            while (v9 != v8);
            v10 = *(void **)(v5 + 8);
          }
          *(_QWORD *)(v5 + 16) = v8;
          operator delete(v10);
        }
        MEMORY[0x20BD0ADEC](v5, 0x1020C40E72D6CFBLL);
      }
    }
    JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::AsyncAudioProcessing::Process(std::unique_ptr<webrtc::AudioFrame>)::$_0 &&>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v1 = a1[1];
  v2 = *(_QWORD *)(*a1 + 40);
  a1[1] = 0;
  v12 = v1;
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v12);
  v4 = v12;
  v12 = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 64);
    if (v5)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        v8 = *(_QWORD *)(v5 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(v5 + 16);
          v10 = *(void **)(v5 + 8);
          if (v9 != v8)
          {
            do
            {
              v11 = *(void **)(v9 - 96);
              if (v11)
              {
                *(_QWORD *)(v9 - 88) = v11;
                operator delete(v11);
              }
              v9 -= 104;
            }
            while (v9 != v8);
            v10 = *(void **)(v5 + 8);
          }
          *(_QWORD *)(v5 + 16) = v8;
          operator delete(v10);
        }
        MEMORY[0x20BD0ADEC](v5, 0x1020C40E72D6CFBLL);
      }
    }
    return MEMORY[0x20BD0ADEC](v4, 0x1020C40C39A3FA5);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::AsyncAudioProcessing::Process(std::unique_ptr<webrtc::AudioFrame>)::$_0>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  if ((result & 1) == 0)
  {
    *a3 = *a2;
    v3 = a2[1];
    a2[1] = 0;
    a3[1] = v3;
  }
  v4 = a2[1];
  a2[1] = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 64);
    if (v5)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        v8 = *(_QWORD *)(v5 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(v5 + 16);
          v10 = *(void **)(v5 + 8);
          if (v9 != v8)
          {
            do
            {
              v11 = *(void **)(v9 - 96);
              if (v11)
              {
                *(_QWORD *)(v9 - 88) = v11;
                operator delete(v11);
              }
              v9 -= 104;
            }
            while (v9 != v8);
            v10 = *(void **)(v5 + 8);
          }
          *(_QWORD *)(v5 + 16) = v8;
          operator delete(v10);
        }
        MEMORY[0x20BD0ADEC](v5, 0x1020C40E72D6CFBLL);
      }
    }
    JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::AsyncAudioProcessing::Process(std::unique_ptr<webrtc::AudioFrame>)::$_1 &&>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v1 = a1[1];
  v2 = *(_QWORD *)(*a1 + 32);
  a1[1] = 0;
  v12 = v1;
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v12);
  v4 = v12;
  v12 = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 64);
    if (v5)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        v8 = *(_QWORD *)(v5 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(v5 + 16);
          v10 = *(void **)(v5 + 8);
          if (v9 != v8)
          {
            do
            {
              v11 = *(void **)(v9 - 96);
              if (v11)
              {
                *(_QWORD *)(v9 - 88) = v11;
                operator delete(v11);
              }
              v9 -= 104;
            }
            while (v9 != v8);
            v10 = *(void **)(v5 + 8);
          }
          *(_QWORD *)(v5 + 16) = v8;
          operator delete(v10);
        }
        MEMORY[0x20BD0ADEC](v5, 0x1020C40E72D6CFBLL);
      }
    }
    return MEMORY[0x20BD0ADEC](v4, 0x1020C40C39A3FA5);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::AsyncAudioProcessing::Process(std::unique_ptr<webrtc::AudioFrame>)::$_1>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  if ((result & 1) == 0)
  {
    *a3 = *a2;
    v3 = a2[1];
    a2[1] = 0;
    a3[1] = v3;
  }
  v4 = a2[1];
  a2[1] = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 64);
    if (v5)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        v8 = *(_QWORD *)(v5 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(v5 + 16);
          v10 = *(void **)(v5 + 8);
          if (v9 != v8)
          {
            do
            {
              v11 = *(void **)(v9 - 96);
              if (v11)
              {
                *(_QWORD *)(v9 - 88) = v11;
                operator delete(v11);
              }
              v9 -= 104;
            }
            while (v9 != v8);
            v10 = *(void **)(v5 + 8);
          }
          *(_QWORD *)(v5 + 16) = v8;
          operator delete(v10);
        }
        MEMORY[0x20BD0ADEC](v5, 0x1020C40E72D6CFBLL);
      }
    }
    JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

void webrtc::AsyncDnsResolver::~AsyncDnsResolver(webrtc::AsyncDnsResolver *this)
{
  uint64_t v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (**v8)(_QWORD);
  BOOL v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  *(_QWORD *)this = &off_24C0ACD18;
  v2 = *((_QWORD *)this + 2);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 16));
  *(_DWORD *)(v2 + 80) = 2;
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 16));
  (*((void (**)(uint64_t, char *, char *))this + 19))(1, (char *)this + 136, (char *)this + 136);
  *((_QWORD *)this + 3) = off_24C0ACD50;
  v3 = (void (***)(_QWORD))*((_QWORD *)this + 13);
  if (v3)
  {
    v4 = (void (***)(_QWORD))*((_QWORD *)this + 14);
    v5 = (void *)*((_QWORD *)this + 13);
    if (v4 != v3)
    {
      v6 = v4 - 4;
      v7 = v4 - 4;
      do
      {
        v8 = *v7;
        v7 -= 4;
        (*v8)(v6);
        v9 = v6 == v3;
        v6 = v7;
      }
      while (!v9);
      v5 = (void *)*((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v3;
    operator delete(v5);
  }
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  v10 = (unsigned int *)*((_QWORD *)this + 2);
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
  }
  v14 = *((_QWORD *)this + 1);
  *(_BYTE *)(v14 + 4) = 0;
  do
  {
    v15 = __ldaxr((unsigned int *)v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)v14));
  if (!v16)
    MEMORY[0x20BD0ADEC]();
}

{
  webrtc::AsyncDnsResolver::~AsyncDnsResolver(this);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::AsyncDnsResolverResultImpl::~AsyncDnsResolverResultImpl(webrtc::AsyncDnsResolverResultImpl *this)
{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;

  *(_QWORD *)this = off_24C0ACD50;
  v2 = (void (***)(_QWORD))*((_QWORD *)this + 10);
  if (v2)
  {
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 11);
    v4 = (void *)*((_QWORD *)this + 10);
    if (v3 != v2)
    {
      v5 = v3 - 4;
      v6 = v3 - 4;
      do
      {
        v7 = *v6;
        v6 -= 4;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void (***v2)(_QWORD);
  void (***v3)(_QWORD);
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);
  BOOL v8;

  *(_QWORD *)this = off_24C0ACD50;
  v2 = (void (***)(_QWORD))*((_QWORD *)this + 10);
  if (v2)
  {
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 11);
    v4 = (void *)*((_QWORD *)this + 10);
    if (v3 != v2)
    {
      v5 = v3 - 4;
      v6 = v3 - 4;
      do
      {
        v7 = *v6;
        v6 -= 4;
        (*v7)(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AsyncDnsResolver::Start(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[16];
  __int128 v9;

  v6 = *(unsigned int *)(a2 + 32);
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a3 + 16))(0, a3, v8);
  v9 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a3 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, a2, v6, v8);
  return ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v9)(1, v8, v8);
}

void webrtc::AsyncDnsResolver::Start(uint64_t a1, std::string *a2, int a3, uint64_t a4)
{
  __int128 *v6;
  std::string *v8;
  __int128 v9;
  size_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  NSObject *global_queue;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  __int128 __p;
  uint64_t v35;
  void *v36;
  _BYTE v37[20];
  __int16 v38;
  int v39;
  char v40;
  int v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;

  v6 = (__int128 *)a2;
  v8 = (std::string *)(a1 + 32);
  if (v8 != a2)
  {
    if (*(char *)(a1 + 55) < 0)
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v10 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      else
      {
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
        v10 = *((_QWORD *)v6 + 1);
      }
      std::string::__assign_no_alias<false>(v8, (const std::string::value_type *)a2, v10);
    }
    else if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v8, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v9 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      v8->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
    }
  }
  *(_DWORD *)(a1 + 64) = *((_DWORD *)v6 + 8);
  *(_OWORD *)(a1 + 68) = *(__int128 *)((char *)v6 + 36);
  *(_WORD *)(a1 + 88) = *((_WORD *)v6 + 28);
  *(_BYTE *)(a1 + 96) = *((_BYTE *)v6 + 64);
  *(_DWORD *)(a1 + 92) = *((_DWORD *)v6 + 15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 152))(1, a1 + 136, a1 + 136);
  *(_QWORD *)(a1 + 152) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 160) = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a4 + 16))(0, a4, a1 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a4 + 24) = 0;
  v33 = a1;
  __p = 0uLL;
  v35 = 0;
  memset(v37, 0, sizeof(v37));
  v36 = &unk_24C0ACDA0;
  if (&__p != v6)
  {
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__assign_no_alias<true>(&__p, *(char **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      __p = *v6;
      v35 = *((_QWORD *)v6 + 2);
    }
  }
  *(_DWORD *)v37 = *((_DWORD *)v6 + 8);
  *(_OWORD *)&v37[4] = *(__int128 *)((char *)v6 + 36);
  v38 = *((_WORD *)v6 + 28);
  v40 = *((_BYTE *)v6 + 64);
  v39 = *((_DWORD *)v6 + 15);
  v41 = a3;
  v11 = *(unsigned int **)(a1 + 8);
  v42 = v11;
  if (v11)
  {
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v14 = *(_QWORD *)(a1 + 16);
  v43 = *v13;
  v44 = v14;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (_QWORD *)operator new();
  v18 = operator new();
  *(_QWORD *)v18 = v33;
  *(_QWORD *)(v18 + 8) = 0;
  v19 = (_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = 0;
  *(_QWORD *)(v18 + 32) = &unk_24C0ACDA0;
  *(_DWORD *)(v18 + 56) = 0;
  if (SHIBYTE(v35) < 0)
  {
    std::string::__assign_no_alias<true>(v19, (char *)__p, *((size_t *)&__p + 1));
  }
  else
  {
    *(_OWORD *)v19 = __p;
    *(_QWORD *)(v18 + 24) = v35;
  }
  *(_DWORD *)(v18 + 40) = *(_DWORD *)v37;
  *(_OWORD *)(v18 + 44) = *(_OWORD *)&v37[4];
  *(_WORD *)(v18 + 64) = v38;
  *(_BYTE *)(v18 + 72) = v40;
  *(_DWORD *)(v18 + 68) = v39;
  *(_DWORD *)(v18 + 80) = v41;
  v20 = v42;
  *(_QWORD *)(v18 + 88) = v42;
  if (v20)
  {
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = v44;
  *(_QWORD *)(v18 + 96) = v43;
  *(_QWORD *)(v18 + 104) = v22;
  if (v22)
  {
    v23 = (unsigned int *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *v17 = v18;
  v17[2] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::AsyncDnsResolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0>;
  v17[3] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::AsyncDnsResolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0 &&>;
  global_queue = dispatch_get_global_queue(0, 0);
  v26 = v44;
  if (v44)
  {
    v27 = (unsigned int *)(v44 + 8);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  v30 = v42;
  if (v42)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
      MEMORY[0x20BD0ADEC]();
  }
  if (SHIBYTE(v35) < 0)
    operator delete((void *)__p);
}

uint64_t webrtc::AsyncDnsResolver::result(webrtc::AsyncDnsResolver *this)
{
  return (uint64_t)this + 24;
}

uint64_t webrtc::AsyncDnsResolverResultImpl::GetResolvedAddress(uint64_t a1, int a2, std::string *this)
{
  char v7;
  __int128 v8;
  const std::string::value_type *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_DWORD *)(a1 + 104) || *(_QWORD *)(a1 + 80) == *(_QWORD *)(a1 + 88))
    return 0;
  if ((std::string *)(a1 + 8) != this)
  {
    v7 = *(_BYTE *)(a1 + 31);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if (v7 >= 0)
        v9 = (const std::string::value_type *)(a1 + 8);
      else
        v9 = *(const std::string::value_type **)(a1 + 8);
      if (v7 >= 0)
        v10 = *(unsigned __int8 *)(a1 + 31);
      else
        v10 = *(_QWORD *)(a1 + 16);
      std::string::__assign_no_alias<false>(this, v9, v10);
    }
    else if ((*(_BYTE *)(a1 + 31) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(this, *(char **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
    else
    {
      v8 = *(_OWORD *)(a1 + 8);
      this->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
    }
  }
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a1 + 40);
  *(_OWORD *)((char *)&this[1].__r_.__value_.__r.__words[1] + 4) = *(_OWORD *)(a1 + 44);
  LOWORD(this[2].__r_.__value_.__r.__words[1]) = *(_WORD *)(a1 + 64);
  this[2].__r_.__value_.__s.__data_[16] = *(_BYTE *)(a1 + 72);
  HIDWORD(this[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a1 + 68);
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  if (v11 == v12)
    return 0;
  while (*(_DWORD *)(v11 + 8) != a2)
  {
    v11 += 32;
    if (v11 == v12)
      return 0;
  }
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = a2;
  *(_OWORD *)((char *)&this[1].__r_.__value_.__r.__words[1] + 4) = *(_OWORD *)(v11 + 12);
  HIDWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  return 1;
}

uint64_t webrtc::AsyncDnsResolverResultImpl::GetError(webrtc::AsyncDnsResolverResultImpl *this)
{
  return *((unsigned int *)this + 26);
}

void webrtc::AsyncDnsResolver::State::~State(webrtc::AsyncDnsResolver::State *this)
{
  *(_QWORD *)this = &off_24C0ACD80;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
}

{
  *(_QWORD *)this = &off_24C0ACD80;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::`anonymous namespace'::GlobalGcdRunTask(webrtc::_anonymous_namespace_ *this, void *a2)
{
  (*((void (**)(webrtc::_anonymous_namespace_ *, void *))this + 3))(this, a2);
  (*((void (**)(uint64_t, webrtc::_anonymous_namespace_ *, webrtc::_anonymous_namespace_ *))this + 2))(1, this, this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::AsyncDnsResolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  size_t v4;
  BOOL v5;
  int v6;
  char *p_p;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const char *v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void (***v23)(_QWORD);
  void (***v24)(_QWORD);
  void *v25;
  void (***v26)(_QWORD);
  void (***v27)(_QWORD);
  void (**v28)(_QWORD);
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  addrinfo *v33;
  char *v34;
  sockaddr *ai_addr;
  int sa_family;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  void (**v49)(char *);
  char *v50;
  char *v51;
  sockaddr *v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  void (**v65)(char *);
  uint64_t *v66;
  uint64_t v67;
  addrinfo v68;
  addrinfo *v69;
  void *__p;
  size_t v71;
  int64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = **a1;
  v3 = (char *)(*a1 + 1);
  if (*((char *)*a1 + 31) < 0)
  {
    v4 = v1[2];
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_105;
    v3 = *(char **)v3;
    v5 = v4 && v3 == 0;
    if (v5)
      goto LABEL_105;
  }
  else
  {
    v4 = *((unsigned __int8 *)*a1 + 31);
  }
  v6 = *((_DWORD *)v1 + 20);
  v69 = 0;
  memset(&v68.ai_socktype, 0, 40);
  v68.ai_flags = 1024;
  v68.ai_family = v6;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_106;
  if (v4 > 0x16)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_p = (char *)operator new(v8 + 1);
    v71 = v4;
    v72 = v9 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v72) = v4;
    p_p = (char *)&__p;
  }
  v10 = &p_p[v4];
  if (p_p <= v3 && v10 > v3)
  {
LABEL_105:
    __break(1u);
LABEL_106:
    abort();
  }
  if (v4)
    memmove(p_p, v3, v4);
  *v10 = 0;
  if (v72 >= 0)
    v12 = (const char *)&__p;
  else
    v12 = (const char *)__p;
  v13 = getaddrinfo(v12, 0, &v68, &v69);
  v14 = v13;
  if (SHIBYTE(v72) < 0)
  {
    operator delete(__p);
    if (v14)
    {
LABEL_25:
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = v1[13];
      v19 = (unsigned int *)v1[11];
      if (!v19)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  else if (v13)
  {
    goto LABEL_25;
  }
  v66 = v1;
  v67 = v2;
  v33 = v69;
  v15 = 0;
  if (v69)
  {
    if (v6)
    {
      v16 = 0;
      v17 = 0;
      while (1)
      {
        if (v33->ai_family != v6)
          goto LABEL_47;
        ai_addr = v33->ai_addr;
        if (ai_addr)
        {
          sa_family = ai_addr->sa_family;
          if (sa_family == 30)
          {
            v37 = *(_DWORD *)&ai_addr->sa_data[6];
            __p = *(void **)&ai_addr->sa_data[10];
            LODWORD(v71) = *(_DWORD *)&ai_addr[1].sa_data[2];
            v38 = 30;
            if (v16 < v15)
            {
LABEL_70:
              if (!v16)
                goto LABEL_105;
              *(_QWORD *)v16 = &unk_24C0ACDA0;
              *((_DWORD *)v16 + 2) = v38;
              *((_DWORD *)v16 + 3) = v37;
              *((_QWORD *)v16 + 2) = __p;
              *((_DWORD *)v16 + 6) = v71;
              v34 = v16 + 32;
              goto LABEL_46;
            }
LABEL_53:
            v39 = (v16 - v17) >> 5;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 59)
              goto LABEL_106;
            if ((v15 - v17) >> 4 > v40)
              v40 = (v15 - v17) >> 4;
            if ((unint64_t)(v15 - v17) >= 0x7FFFFFFFFFFFFFE0)
              v40 = 0x7FFFFFFFFFFFFFFLL;
            if (!v40)
              goto LABEL_105;
            if (v40 >> 59)
              goto LABEL_107;
            v41 = 32 * v40;
            v42 = (char *)operator new(32 * v40);
            v43 = v42;
            v44 = &v42[32 * v39];
            *(_QWORD *)v44 = &unk_24C0ACDA0;
            *((_DWORD *)v44 + 2) = v38;
            *((_DWORD *)v44 + 3) = v37;
            *((_QWORD *)v44 + 2) = __p;
            *((_DWORD *)v44 + 6) = v71;
            if (v16 == v17)
            {
              v46 = v44;
              v15 = &v42[v41];
              v34 = v44 + 32;
              if (v16)
                goto LABEL_67;
            }
            else
            {
              v45 = v16;
              v46 = v44;
              do
              {
                *((_QWORD *)v46 - 4) = &unk_24C0ACDA0;
                v46 -= 32;
                *((_DWORD *)v46 + 2) = *((_DWORD *)v45 - 6);
                *(_OWORD *)(v46 + 12) = *(_OWORD *)(v45 - 20);
                v45 -= 32;
              }
              while (v45 != v17);
              v47 = v16 - 32;
              v48 = v47;
              do
              {
                v49 = *(void (***)(char *))v48;
                v48 -= 32;
                (*v49)(v47);
                v5 = v47 == v17;
                v47 = v48;
              }
              while (!v5);
              v16 = v17;
              v15 = &v43[v41];
              v34 = v44 + 32;
              if (v17)
LABEL_67:
                operator delete(v16);
            }
            v17 = v46;
            goto LABEL_46;
          }
          if (sa_family == 2)
          {
            v37 = *(_DWORD *)&ai_addr->sa_data[2];
            __p = 0;
            v38 = 2;
            LODWORD(v71) = 0;
            if (v16 < v15)
              goto LABEL_70;
            goto LABEL_53;
          }
        }
        v34 = v16;
LABEL_46:
        v16 = v34;
LABEL_47:
        v33 = v33->ai_next;
        if (!v33)
          goto LABEL_75;
      }
    }
    v50 = 0;
    v51 = 0;
    while (1)
    {
      v52 = v33->ai_addr;
      if (!v52)
        break;
      v53 = v52->sa_family;
      if (v53 == 30)
      {
        v54 = *(_DWORD *)&v52->sa_data[6];
        __p = *(void **)&v52->sa_data[10];
        LODWORD(v71) = *(_DWORD *)&v52[1].sa_data[2];
        v55 = 30;
        if (v50 < v15)
          goto LABEL_101;
      }
      else
      {
        if (v53 != 2)
          break;
        v54 = *(_DWORD *)&v52->sa_data[2];
        __p = 0;
        v55 = 2;
        LODWORD(v71) = 0;
        if (v50 < v15)
        {
LABEL_101:
          if (!v50)
            goto LABEL_105;
          *(_QWORD *)v50 = &unk_24C0ACDA0;
          *((_DWORD *)v50 + 2) = v55;
          *((_DWORD *)v50 + 3) = v54;
          *((_QWORD *)v50 + 2) = __p;
          *((_DWORD *)v50 + 6) = v71;
          v16 = v50 + 32;
          goto LABEL_79;
        }
      }
      v56 = (v50 - v51) >> 5;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 59)
        goto LABEL_106;
      if ((v15 - v51) >> 4 > v57)
        v57 = (v15 - v51) >> 4;
      if ((unint64_t)(v15 - v51) >= 0x7FFFFFFFFFFFFFE0)
        v57 = 0x7FFFFFFFFFFFFFFLL;
      if (!v57)
        goto LABEL_105;
      if (v57 >> 59)
LABEL_107:
        std::__throw_bad_array_new_length[abi:sn180100]();
      v58 = 32 * v57;
      v59 = (char *)operator new(32 * v57);
      v60 = v59;
      v61 = &v59[32 * v56];
      *(_QWORD *)v61 = &unk_24C0ACDA0;
      *((_DWORD *)v61 + 2) = v55;
      *((_DWORD *)v61 + 3) = v54;
      *((_QWORD *)v61 + 2) = __p;
      *((_DWORD *)v61 + 6) = v71;
      if (v50 != v51)
      {
        v62 = v50;
        v17 = v61;
        do
        {
          *((_QWORD *)v17 - 4) = &unk_24C0ACDA0;
          v17 -= 32;
          *((_DWORD *)v17 + 2) = *((_DWORD *)v62 - 6);
          *(_OWORD *)(v17 + 12) = *(_OWORD *)(v62 - 20);
          v62 -= 32;
        }
        while (v62 != v51);
        v63 = v50 - 32;
        v64 = v63;
        do
        {
          v65 = *(void (***)(char *))v64;
          v64 -= 32;
          (*v65)(v63);
          v5 = v63 == v51;
          v63 = v64;
        }
        while (!v5);
        v50 = v51;
        v15 = &v60[v58];
        v16 = v61 + 32;
        if (!v51)
          goto LABEL_80;
LABEL_104:
        operator delete(v50);
        goto LABEL_80;
      }
      v17 = v61;
      v15 = &v59[v58];
      v16 = v61 + 32;
      if (v50)
        goto LABEL_104;
LABEL_80:
      v33 = v33->ai_next;
      v50 = v16;
      v51 = v17;
      if (!v33)
        goto LABEL_75;
    }
    v16 = v50;
LABEL_79:
    v17 = v51;
    goto LABEL_80;
  }
  v16 = 0;
  v17 = 0;
LABEL_75:
  freeaddrinfo(v69);
  v14 = 0;
  v1 = v66;
  v2 = v67;
  v18 = v66[13];
  v19 = (unsigned int *)v66[11];
  if (v19)
  {
    do
LABEL_26:
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
LABEL_27:
  v21 = v1[12];
  v22 = operator new();
  *(_QWORD *)v22 = v2;
  *(_DWORD *)(v22 + 8) = v14;
  *(_QWORD *)(v22 + 16) = v19;
  *(_QWORD *)(v22 + 24) = v21;
  *(_QWORD *)(v22 + 32) = v17;
  *(_QWORD *)(v22 + 40) = v16;
  *(_QWORD *)(v22 + 48) = v15;
  *(_QWORD *)&v68.ai_flags = v22;
  *(_QWORD *)&v68.ai_addrlen = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::AsyncDnsResolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0::operator() const(void)::{lambda(void)#1}>;
  v68.ai_canonname = (char *)absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::AsyncDnsResolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0::operator() const(void)::{lambda(void)#1} &>;
  pthread_mutex_lock((pthread_mutex_t *)(v18 + 16));
  if (!*(_DWORD *)(v18 + 80))
  {
    *(_DWORD *)(v18 + 80) = 1;
    absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::AsyncDnsResolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0::operator() const(void)::{lambda(void)#1} &>((uint64_t **)&v68);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v18 + 16));
  v23 = *(void (****)(_QWORD))(v22 + 32);
  if (v23)
  {
    v24 = *(void (****)(_QWORD))(v22 + 40);
    v25 = *(void **)(v22 + 32);
    if (v24 != v23)
    {
      v26 = v24 - 4;
      v27 = v24 - 4;
      do
      {
        v28 = *v27;
        v27 -= 4;
        (*v28)(v26);
        v5 = v26 == v23;
        v26 = v27;
      }
      while (!v5);
      v25 = *(void **)(v22 + 32);
    }
    *(_QWORD *)(v22 + 40) = v23;
    operator delete(v25);
  }
  v29 = *(unsigned int **)(v22 + 16);
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      MEMORY[0x20BD0ADEC]();
  }
  return MEMORY[0x20BD0ADEC](v22, 0x1020C4030A5AAACLL);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::AsyncDnsResolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(unsigned int **)(v3 + 104);
      if (v4)
      {
        v5 = v4 + 2;
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
      v8 = *(unsigned int **)(v3 + 88);
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          MEMORY[0x20BD0ADEC]();
      }
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void rtc::IPAddress::~IPAddress(rtc::IPAddress *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::AsyncDnsResolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0::operator() const(void)::{lambda(void)#1} &>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  char v20;
  char v21;
  _QWORD v22[2];
  uint64_t (*v23)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v24)(uint64_t);

  v1 = *a1;
  v2 = **a1;
  v4 = (unsigned int *)(*a1)[2];
  v3 = (*a1)[3];
  if (v4)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *((_DWORD *)v1 + 2);
  v7 = v1[4];
  v8 = v1[5];
  v9 = v8 - v7;
  if (v8 == v7)
  {
    v15 = 0;
    v16 = 0;
    v12 = 0;
  }
  else
  {
    if (v9 < 0)
      abort();
    v10 = v9 >> 5;
    v11 = (char *)operator new(v9);
    v12 = v11;
    v13 = 0;
    do
    {
      v14 = &v11[v13];
      *(_QWORD *)v14 = &unk_24C0ACDA0;
      *((_DWORD *)v14 + 2) = *(_DWORD *)(v7 + v13 + 8);
      *(_OWORD *)(v14 + 12) = *(_OWORD *)(v7 + v13 + 12);
      v13 += 32;
    }
    while (v7 + v13 != v8);
    v15 = &v11[32 * v10];
    v16 = &v11[v13];
  }
  v17 = operator new();
  *(_QWORD *)v17 = v2;
  *(_DWORD *)(v17 + 8) = v6;
  *(_QWORD *)(v17 + 16) = v12;
  *(_QWORD *)(v17 + 24) = v16;
  *(_QWORD *)(v17 + 32) = v15;
  v18 = (_QWORD *)operator new();
  *v18 = v4;
  v18[1] = v17;
  v18[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::AsyncDnsResolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}>;
  v18[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::AsyncDnsResolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1} &&>;
  v22[0] = v18;
  v23 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v24 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v22, &v21, &v20);
  return v23(1, v22, v22);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::AsyncDnsResolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0::operator() const(void)::{lambda(void)#1}>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void *v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (**v9)(_QWORD);
  BOOL v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v3 = (_QWORD *)*a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = (void (***)(_QWORD))v3[4];
      if (v4)
      {
        v5 = (void (***)(_QWORD))v3[5];
        v6 = (void *)v3[4];
        if (v5 != v4)
        {
          v7 = v5 - 4;
          v8 = v5 - 4;
          do
          {
            v9 = *v8;
            v8 -= 4;
            (*v9)(v7);
            v10 = v7 == v4;
            v7 = v8;
          }
          while (!v10);
          v6 = (void *)v3[4];
        }
        v3[5] = v4;
        operator delete(v6);
      }
      v11 = (unsigned int *)v3[2];
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
          MEMORY[0x20BD0ADEC]();
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE(uint64_t result)
{
  if (*(_BYTE *)(**(_QWORD **)result + 4))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(*(_QWORD *)result + 8);
  return result;
}

uint64_t _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 24))(1, v3 + 8, v3 + 8);
      v4 = *(unsigned int **)v3;
      if (*(_QWORD *)v3)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          MEMORY[0x20BD0ADEC]();
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::AsyncDnsResolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1} &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = **a1;
  if ((uint64_t *)(v2 + 104) != *a1 + 2)
    std::vector<rtc::IPAddress>::__assign_with_size[abi:sn180100]<rtc::IPAddress*,rtc::IPAddress*>((char *)(v2 + 104), v1[2], v1[3], (v1[3] - v1[2]) >> 5);
  *(_DWORD *)(v2 + 128) = *((_DWORD *)v1 + 2);
  return (*(uint64_t (**)(uint64_t))(v2 + 160))(v2 + 136);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::AsyncDnsResolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0::operator() const(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void *v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (**v9)(_QWORD);
  BOOL v10;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(void (****)(_QWORD))(v3 + 16);
      if (v4)
      {
        v5 = *(void (****)(_QWORD))(v3 + 24);
        v6 = *(void **)(v3 + 16);
        if (v5 != v4)
        {
          v7 = v5 - 4;
          v8 = v5 - 4;
          do
          {
            v9 = *v8;
            v8 -= 4;
            (*v9)(v7);
            v10 = v7 == v4;
            v7 = v8;
          }
          while (!v10);
          v6 = *(void **)(v3 + 16);
        }
        *(_QWORD *)(v3 + 24) = v4;
        operator delete(v6);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

char *std::vector<rtc::IPAddress>::__assign_with_size[abi:sn180100]<rtc::IPAddress*,rtc::IPAddress*>(char *result, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t (***v30)(_QWORD);
  uint64_t (***v31)(_QWORD);
  uint64_t (**v32)(_QWORD);

  v6 = a2;
  v7 = (uint64_t)result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(_QWORD *)result;
  if (__sz > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      v10 = *((_QWORD *)result + 1);
      v11 = *(void **)result;
      if (v10 != v9)
      {
        v12 = (void (***)(_QWORD))(v10 - 32);
        v13 = (void (***)(_QWORD))(v10 - 32);
        do
        {
          v14 = *v13;
          v13 -= 4;
          (*v14)(v12);
          v15 = v12 == (void (***)(_QWORD))v9;
          v12 = v13;
        }
        while (!v15);
        v11 = *(void **)v7;
      }
      *(_QWORD *)(v7 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    if (!(__sz >> 59))
    {
      v16 = v8 >> 4;
      if (v8 >> 4 <= __sz)
        v16 = __sz;
      v17 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
      v18 = 0x7FFFFFFFFFFFFFFLL;
      if (!v17)
        v18 = v16;
      if (!(v18 >> 59))
      {
        v19 = 32 * v18;
        result = (char *)operator new(32 * v18);
        *(_QWORD *)v7 = result;
        *(_QWORD *)(v7 + 8) = result;
        for (*(_QWORD *)(v7 + 16) = &result[v19]; v6 != a3; result += 32)
        {
          *(_QWORD *)result = &unk_24C0ACDA0;
          *((_DWORD *)result + 2) = *(_DWORD *)(v6 + 8);
          *(_OWORD *)(result + 12) = *(_OWORD *)(v6 + 12);
          v6 += 32;
        }
        *(_QWORD *)(v7 + 8) = result;
        return result;
      }
    }
LABEL_38:
    abort();
  }
  v20 = *((_QWORD *)result + 1);
  v21 = (v20 - v9) >> 5;
  if (v21 < __sz)
  {
    v22 = a2 + 32 * v21;
    if (v20 != v9)
    {
      v23 = (_OWORD *)(v9 + 12);
      v24 = 32 * v21;
      v25 = (_OWORD *)(a2 + 12);
      do
      {
        *((_DWORD *)v23 - 1) = *((_DWORD *)v25 - 1);
        v26 = *v25;
        v25 += 2;
        *v23 = v26;
        v23 += 2;
        v24 -= 32;
      }
      while (v24);
      v9 = *((_QWORD *)result + 1);
    }
    v27 = v9;
    if (v22 == a3)
    {
LABEL_27:
      *((_QWORD *)result + 1) = v27;
      return result;
    }
    v27 = v9;
    v28 = v9;
    while (v28)
    {
      *(_QWORD *)v28 = &unk_24C0ACDA0;
      *(_DWORD *)(v28 + 8) = *(_DWORD *)(v22 + 8);
      *(_OWORD *)(v28 + 12) = *(_OWORD *)(v22 + 12);
      v22 += 32;
      v27 += 32;
      v28 += 32;
      if (v22 == a3)
        goto LABEL_27;
    }
    __break(1u);
    goto LABEL_38;
  }
  if (a2 != a3)
  {
    v29 = (_OWORD *)(v9 + 12);
    do
    {
      *((_DWORD *)v29 - 1) = *(_DWORD *)(v6 + 8);
      *v29 = *(_OWORD *)(v6 + 12);
      v29 += 2;
      v6 += 32;
      v9 += 32;
    }
    while (v6 != a3);
    v20 = *((_QWORD *)result + 1);
  }
  if (v20 != v9)
  {
    v30 = (uint64_t (***)(_QWORD))(v20 - 32);
    v31 = (uint64_t (***)(_QWORD))(v20 - 32);
    do
    {
      v32 = *v31;
      v31 -= 4;
      result = (char *)(*v32)(v30);
      v15 = v30 == (uint64_t (***)(_QWORD))v9;
      v30 = v31;
    }
    while (!v15);
  }
  *(_QWORD *)(v7 + 8) = v9;
  return result;
}

uint64_t rtc::PacketTimeUpdateParams::PacketTimeUpdateParams(uint64_t this)
{
  *(_DWORD *)this = -1;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 32) = -1;
  *(_QWORD *)(this + 40) = -1;
  return this;
}

void rtc::PacketTimeUpdateParams::~PacketTimeUpdateParams(rtc::PacketTimeUpdateParams *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

uint64_t rtc::PacketOptions::PacketOptions(uint64_t this)
{
  *(_DWORD *)this = -1;
  *(_BYTE *)(this + 4) = 0;
  *(_QWORD *)(this + 8) = -1;
  *(_DWORD *)(this + 16) = -1;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 48) = -1;
  *(_QWORD *)(this + 56) = -1;
  *(_WORD *)(this + 64) = 0;
  *(_BYTE *)(this + 78) = 0;
  *(_QWORD *)(this + 68) = 0;
  *(_BYTE *)(this + 76) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_WORD *)(this + 104) = 0;
  return this;
}

rtc::PacketOptions *rtc::PacketOptions::PacketOptions(rtc::PacketOptions *this, const rtc::PacketOptions *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)this = *(_OWORD *)a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  v5 = (_BYTE *)*((_QWORD *)a2 + 3);
  v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      abort();
    v7 = (char *)operator new(v4 - v5);
    *((_QWORD *)this + 3) = v7;
    *((_QWORD *)this + 4) = v7;
    v8 = &v7[v6];
    *((_QWORD *)this + 5) = &v7[v6];
    memcpy(v7, v5, v6);
    *((_QWORD *)this + 4) = v8;
  }
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  v9 = *((_OWORD *)a2 + 4);
  v10 = *((_OWORD *)a2 + 5);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_OWORD *)this + 4) = v9;
  *((_OWORD *)this + 5) = v10;
  *((_WORD *)this + 52) = *((_WORD *)a2 + 52);
  return this;
}

void rtc::PacketOptions::~PacketOptions(rtc::PacketOptions *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

void rtc::AsyncPacketSocket::~AsyncPacketSocket(void (**this)(uint64_t, char *, char *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, char *, char *);
  void (*v7)(uint64_t, char *, char *);
  void (*v8)(uint64_t, char *, char *);
  void (*v9)(char *);
  void (*i)(uint64_t, char *, char *);
  void (*v11)(uint64_t, char *, char *);
  uint64_t v12;
  uint64_t v13;
  void (*j)(uint64_t, char *, char *);
  void (*v15)(uint64_t, char *, char *);
  uint64_t v16;
  uint64_t v17;
  void (*k)(uint64_t, char *, char *);
  void (*v19)(uint64_t, char *, char *);
  uint64_t v20;
  uint64_t v21;
  void (*m)(uint64_t, char *, char *);
  void (*v23)(uint64_t, char *, char *);
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  uint64_t v27;

  *this = (void (*)(uint64_t, char *, char *))off_24C0ACDC0;
  this[41](1, (char *)this + 312, (char *)this + 312);
  if (*((_BYTE *)this + 304))
  {
    v26 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 21, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v2, v3, v4, v5, v27);
    rtc::AsyncPacketSocket::~AsyncPacketSocket((rtc::AsyncPacketSocket *)v26);
  }
  v6 = this[35];
  if (v6)
  {
    v7 = this[36];
    v8 = this[35];
    if (v7 != v6)
    {
      do
      {
        v9 = (void (*)(char *))*((_QWORD *)v7 - 1);
        if (v9)
          v9((char *)v7 - 48);
        v7 = (void (*)(uint64_t, char *, char *))((char *)v7 - 56);
      }
      while (v7 != v6);
      v8 = this[35];
    }
    this[36] = v6;
    operator delete(v8);
  }
  for (i = this[32]; i; i = this[32])
  {
    v11 = this[31];
    v12 = *((_QWORD *)v11 + 3);
    v13 = *(_QWORD *)v11;
    *(_QWORD *)(v13 + 8) = *((_QWORD *)v11 + 1);
    **((_QWORD **)v11 + 1) = v13;
    this[32] = (void (*)(uint64_t, char *, char *))((char *)i - 1);
    operator delete(v11);
    (*(void (**)(uint64_t, char *))(v12 + 16))(v12, (char *)this + 224);
  }
  this[33] = (void (*)(uint64_t, char *, char *))(this + 30);
  for (j = this[25]; j; j = this[25])
  {
    v15 = this[24];
    v16 = *((_QWORD *)v15 + 3);
    v17 = *(_QWORD *)v15;
    *(_QWORD *)(v17 + 8) = *((_QWORD *)v15 + 1);
    **((_QWORD **)v15 + 1) = v17;
    this[25] = (void (*)(uint64_t, char *, char *))((char *)j - 1);
    operator delete(v15);
    (*(void (**)(uint64_t, char *))(v16 + 16))(v16, (char *)this + 168);
  }
  this[26] = (void (*)(uint64_t, char *, char *))(this + 23);
  for (k = this[18]; k; k = this[18])
  {
    v19 = this[17];
    v20 = *((_QWORD *)v19 + 3);
    v21 = *(_QWORD *)v19;
    *(_QWORD *)(v21 + 8) = *((_QWORD *)v19 + 1);
    **((_QWORD **)v19 + 1) = v21;
    this[18] = (void (*)(uint64_t, char *, char *))((char *)k - 1);
    operator delete(v19);
    (*(void (**)(uint64_t, char *))(v20 + 16))(v20, (char *)this + 112);
  }
  this[19] = (void (*)(uint64_t, char *, char *))(this + 16);
  for (m = this[11]; m; m = this[11])
  {
    v23 = this[10];
    v24 = *((_QWORD *)v23 + 3);
    v25 = *(_QWORD *)v23;
    *(_QWORD *)(v25 + 8) = *((_QWORD *)v23 + 1);
    **((_QWORD **)v23 + 1) = v25;
    this[11] = (void (*)(uint64_t, char *, char *))((char *)m - 1);
    operator delete(v23);
    (*(void (**)(uint64_t, char *))(v24 + 16))(v24, (char *)this + 56);
  }
  this[12] = (void (*)(uint64_t, char *, char *))(this + 9);
  *this = (void (*)(uint64_t, char *, char *))&unk_24C0ACE30;
  ((void (*)(void (**)(uint64_t, char *, char *)))this[3])(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(this + 4), this[5]);
}

char *rtc::AsyncPacketSocket::SubscribeCloseEvent(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15[3];

  v6 = operator new();
  v12 = v6;
  v13 = (_QWORD *)a3[3];
  if (v13)
  {
    if (v13 == a3)
    {
      *(_QWORD *)(v6 + 24) = v6;
      (*(void (**)(_QWORD *, uint64_t))(*a3 + 24))(a3, v6);
    }
    else
    {
      *(_QWORD *)(v6 + 24) = v13;
      a3[3] = 0;
    }
  }
  else
  {
    *(_QWORD *)(v6 + 24) = 0;
  }
  v15[0] = v12;
  v15[1] = (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(rtc::AsyncPacketSocket *,int)>::CallVoidPtr<std::function<void ()(rtc::AsyncPacketSocket *,int)>>;
  v15[2] = (uint64_t)webrtc::UntypedFunction::PrepareArgs<void ()(rtc::AsyncPacketSocket *,int),std::function<void ()(rtc::AsyncPacketSocket *,int)>,std::function<void ()(rtc::AsyncPacketSocket *,int)>,(void *)0>(std::function<void ()(rtc::AsyncPacketSocket *,int)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke;
  return webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::NontrivialUntypedFunctionArgs>((char *)(a1 + 280), a2, v15, v7, v8, v9, v10, v11);
}

uint64_t rtc::AsyncPacketSocket::RegisterReceivedPacketCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t result;
  uint64_t (**v12)(uint64_t, char *, char *);
  uint64_t v13;

  if (*(_QWORD *)(a1 + 336))
  {
    v12 = (uint64_t (**)(uint64_t, char *, char *))rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/async_packet_socket.cc", 47, "!received_packet_callback_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v13);
    return rtc::AsyncPacketSocket::DeregisterReceivedPacketCallback(v12);
  }
  else
  {
    v10 = a1 + 312;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 328))(1, v10, v10);
    *(_QWORD *)(v10 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a1 + 336) = 0;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a2 + 16))(0, a2, v10);
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

uint64_t rtc::AsyncPacketSocket::DeregisterReceivedPacketCallback(uint64_t (**this)(uint64_t, char *, char *))
{
  uint64_t result;

  result = this[41](1, (char *)this + 312, (char *)this + 312);
  this[41] = (uint64_t (*)(uint64_t, char *, char *))absl::internal_any_invocable::EmptyManager;
  this[42] = 0;
  return result;
}

uint64_t rtc::AsyncPacketSocket::NotifyPacketReceived(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);

  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 336);
  if (v2)
    return v2(result + 312, result, a2);
  return result;
}

uint64_t sigslot::has_slots<sigslot::single_threaded>::~has_slots(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0ACE30;
  (*(void (**)(void))(a1 + 24))();
  std::__tree<sigslot::_signal_base_interface *>::destroy(a1 + 32, *(_QWORD **)(a1 + 40));
  return a1;
}

void sigslot::has_slots<sigslot::single_threaded>::~has_slots(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0ACE30;
  (*(void (**)(void))(a1 + 24))();
  std::__tree<sigslot::_signal_base_interface *>::destroy(a1 + 32, *(_QWORD **)(a1 + 40));
  JUMPOUT(0x20BD0ADECLL);
}

void std::__tree<sigslot::_signal_base_interface *>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(a1, *a2);
    std::__tree<sigslot::_signal_base_interface *>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

char *std::vector<webrtc::callback_list_impl::CallbackListReceivers::Callback>::__push_back_slow_path<webrtc::callback_list_impl::CallbackListReceivers::Callback>(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *i;
  uint64_t v13;
  __int128 v14;
  char *v15;
  char *v16;
  void (*v17)(char *);

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - v3) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - v3) >> 3)) >= 0x249249249249249)
    v5 = 0x492492492492492;
  if (!v5)
  {
    __break(1u);
LABEL_20:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x492492492492492)
    goto LABEL_20;
  v8 = 56 * v5;
  v9 = (char *)operator new(56 * v5);
  v10 = &v9[v8];
  v11 = &v9[56 * v4];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 48) = 0;
  for (i = v11 + 56; v2 != v3; *((_QWORD *)v2 + 6) = 0)
  {
    v13 = *((_QWORD *)v2 - 7);
    v2 -= 56;
    *((_QWORD *)v11 - 7) = v13;
    v11 -= 56;
    v14 = *(_OWORD *)(v2 + 8);
    *(_OWORD *)(v11 + 24) = *(_OWORD *)(v2 + 24);
    *(_OWORD *)(v11 + 8) = v14;
    *(_OWORD *)(v11 + 40) = *(_OWORD *)(v2 + 40);
  }
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  *a1 = v11;
  a1[1] = i;
  a1[2] = v10;
  while (v16 != v15)
  {
    v17 = (void (*)(char *))*((_QWORD *)v16 - 1);
    if (v17)
      v17(v16 - 48);
    v16 -= 56;
  }
  if (v15)
    operator delete(v15);
  return i;
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(rtc::AsyncPacketSocket *,int)>::CallVoidPtr<std::function<void ()(rtc::AsyncPacketSocket *,int)>>(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = *a1;
  v8 = a2;
  v7 = a3;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
  {
    v6 = std::__throw_bad_function_call[abi:sn180100]();
    webrtc::UntypedFunction::PrepareArgs<void ()(rtc::AsyncPacketSocket *,int),std::function<void ()(rtc::AsyncPacketSocket *,int)>,std::function<void ()(rtc::AsyncPacketSocket *,int)>,(void *)0>(std::function<void ()(rtc::AsyncPacketSocket *,int)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke(v6);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7);
}

void webrtc::UntypedFunction::PrepareArgs<void ()(rtc::AsyncPacketSocket *,int),std::function<void ()(rtc::AsyncPacketSocket *,int)>,std::function<void ()(rtc::AsyncPacketSocket *,int)>,(void *)0>(std::function<void ()(rtc::AsyncPacketSocket *,int)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD **)(*(_QWORD *)a1 + 24);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD0ADECLL);
}

rtc::AsyncSocketAdapter *rtc::AsyncSocketAdapter::AsyncSocketAdapter(rtc::AsyncSocketAdapter *this, rtc::Socket *a2)
{
  char *v4;
  uint64_t **v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  pthread_mutex_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  pthread_mutex_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  *(_QWORD *)this = &unk_24C0C0EA0;
  *((_QWORD *)this + 1) = sigslot::_signal_base<sigslot::multi_threaded_local>::do_slot_disconnect;
  *((_QWORD *)this + 2) = sigslot::_signal_base<sigslot::multi_threaded_local>::do_slot_duplicate;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 24), 0);
  *((_QWORD *)this + 11) = (char *)this + 88;
  *((_QWORD *)this + 12) = (char *)this + 88;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = (char *)this + 88;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 16) = sigslot::_signal_base<sigslot::multi_threaded_local>::do_slot_disconnect;
  *((_QWORD *)this + 17) = sigslot::_signal_base<sigslot::multi_threaded_local>::do_slot_duplicate;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 144), 0);
  *((_QWORD *)this + 26) = (char *)this + 208;
  *((_QWORD *)this + 27) = (char *)this + 208;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = (char *)this + 208;
  *((_BYTE *)this + 240) = 0;
  *((_QWORD *)this + 31) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 32) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 33) = (char *)this + 264;
  *((_QWORD *)this + 34) = (char *)this + 264;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = (char *)this + 264;
  *((_BYTE *)this + 296) = 0;
  *((_QWORD *)this + 38) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 39) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 40) = (char *)this + 320;
  *((_QWORD *)this + 41) = (char *)this + 320;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = (char *)this + 320;
  *((_BYTE *)this + 352) = 0;
  v4 = (char *)this + 360;
  *((_QWORD *)this + 47) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *((_QWORD *)this + 48) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  v5 = (uint64_t **)((char *)this + 400);
  *((_QWORD *)this + 49) = (char *)this + 400;
  *((_QWORD *)this + 50) = 0;
  *(_QWORD *)this = &off_24C0ACE50;
  *((_QWORD *)this + 45) = &unk_24C0ACF18;
  *((_QWORD *)this + 46) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  v6 = (char *)a2 + 248;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = a2;
  v7 = operator new(0x30uLL);
  v7[2] = sigslot::_opaque_connection::emitter<rtc::AsyncSocketAdapter,rtc::Socket *>;
  v7[3] = (char *)this + 360;
  *((_OWORD *)v7 + 2) = xmmword_208F04E70;
  v8 = *((_QWORD *)a2 + 33);
  *v7 = v8;
  v7[1] = (char *)a2 + 264;
  *(_QWORD *)(v8 + 8) = v7;
  *((_QWORD *)a2 + 33) = v7;
  ++*((_QWORD *)a2 + 35);
  v9 = (uint64_t *)*((_QWORD *)this + 50);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v9;
        v11 = v9[4];
        if (v11 <= (unint64_t)v6)
          break;
        v9 = *v10;
        v5 = v10;
        if (!*v10)
          goto LABEL_8;
      }
      if (v11 >= (unint64_t)v6)
        break;
      v9 = v10[1];
      if (!v9)
      {
        v5 = v10 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v10 = (uint64_t **)((char *)this + 400);
LABEL_8:
    v12 = (uint64_t *)operator new(0x28uLL);
    v12[4] = (uint64_t)v6;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v10;
    *v5 = v12;
    v13 = **((_QWORD **)this + 49);
    if (v13)
    {
      *((_QWORD *)this + 49) = v13;
      v14 = *v5;
    }
    else
    {
      v14 = v12;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 50), v14);
    ++*((_QWORD *)this + 51);
  }
  v15 = *((_QWORD *)this + 52);
  v16 = (pthread_mutex_t *)(v15 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v15 + 24));
  v17 = operator new(0x30uLL);
  v17[2] = sigslot::_opaque_connection::emitter<rtc::AsyncSocketAdapter,rtc::Socket *>;
  v17[3] = v4;
  *((_OWORD *)v17 + 2) = xmmword_208F04E80;
  v18 = *(_QWORD *)(v15 + 88);
  v15 += 88;
  *v17 = v18;
  v17[1] = v15;
  *(_QWORD *)(v18 + 8) = v17;
  *(_QWORD *)v15 = v17;
  ++*(_QWORD *)(v15 + 16);
  (*((void (**)(char *, uint64_t))this + 46))((char *)this + 360, v15 - 80);
  pthread_mutex_unlock(v16);
  v19 = *((_QWORD *)this + 52);
  v20 = (pthread_mutex_t *)(v19 + 144);
  pthread_mutex_lock((pthread_mutex_t *)(v19 + 144));
  v21 = operator new(0x30uLL);
  v21[2] = sigslot::_opaque_connection::emitter<rtc::AsyncSocketAdapter,rtc::Socket *>;
  v21[3] = v4;
  *((_OWORD *)v21 + 2) = xmmword_208F04E90;
  v22 = *(_QWORD *)(v19 + 208);
  v19 += 208;
  *v21 = v22;
  v21[1] = v19;
  *(_QWORD *)(v22 + 8) = v21;
  *(_QWORD *)v19 = v21;
  ++*(_QWORD *)(v19 + 16);
  (*((void (**)(char *, uint64_t))this + 46))((char *)this + 360, v19 - 80);
  pthread_mutex_unlock(v20);
  v23 = *((_QWORD *)this + 52);
  v24 = operator new(0x30uLL);
  v24[2] = sigslot::_opaque_connection::emitter<rtc::AsyncSocketAdapter,rtc::Socket *,int>;
  v24[3] = v4;
  *((_OWORD *)v24 + 2) = xmmword_208F04EA0;
  v25 = *(_QWORD *)(v23 + 320);
  *v24 = v25;
  v24[1] = v23 + 320;
  *(_QWORD *)(v25 + 8) = v24;
  *(_QWORD *)(v23 + 320) = v24;
  ++*(_QWORD *)(v23 + 336);
  (*((void (**)(char *, uint64_t))this + 46))((char *)this + 360, v23 + 304);
  return this;
}

uint64_t rtc::AsyncSocketAdapter::GetLocalAddress(rtc::AsyncSocketAdapter *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 52) + 16))(*((_QWORD *)this + 52));
}

uint64_t rtc::AsyncSocketAdapter::GetRemoteAddress(rtc::AsyncSocketAdapter *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 52) + 24))(*((_QWORD *)this + 52));
}

uint64_t rtc::AsyncSocketAdapter::Bind(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 416) + 32))(*(_QWORD *)(a1 + 416));
}

uint64_t rtc::AsyncSocketAdapter::Connect(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 416) + 40))(*(_QWORD *)(a1 + 416));
}

uint64_t rtc::AsyncSocketAdapter::Send(rtc::AsyncSocketAdapter *this, const void *a2)
{
  return (*(uint64_t (**)(_QWORD, const void *))(**((_QWORD **)this + 52) + 48))(*((_QWORD *)this + 52), a2);
}

uint64_t rtc::AsyncSocketAdapter::SendTo(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 416) + 56))(*(_QWORD *)(a1 + 416));
}

uint64_t rtc::AsyncSocketAdapter::Recv(rtc::AsyncSocketAdapter *this, void *a2, uint64_t a3, uint64_t *a4)
{
  return (*(uint64_t (**)(_QWORD, void *, uint64_t, uint64_t *))(**((_QWORD **)this + 52) + 64))(*((_QWORD *)this + 52), a2, a3, a4);
}

uint64_t rtc::AsyncSocketAdapter::RecvFrom(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 416) + 72))(*(_QWORD *)(a1 + 416));
}

uint64_t rtc::AsyncSocketAdapter::Listen(rtc::AsyncSocketAdapter *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 52) + 88))(*((_QWORD *)this + 52));
}

uint64_t rtc::AsyncSocketAdapter::Accept(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 416) + 96))(*(_QWORD *)(a1 + 416));
}

uint64_t rtc::AsyncSocketAdapter::Close(rtc::AsyncSocketAdapter *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 52) + 104))(*((_QWORD *)this + 52));
}

uint64_t rtc::AsyncSocketAdapter::GetError(rtc::AsyncSocketAdapter *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 52) + 112))(*((_QWORD *)this + 52));
}

uint64_t rtc::AsyncSocketAdapter::SetError(rtc::AsyncSocketAdapter *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 52) + 120))(*((_QWORD *)this + 52));
}

uint64_t rtc::AsyncSocketAdapter::GetState(rtc::AsyncSocketAdapter *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 52) + 128))(*((_QWORD *)this + 52));
}

uint64_t rtc::AsyncSocketAdapter::GetOption(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 416) + 136))(*(_QWORD *)(a1 + 416));
}

uint64_t rtc::AsyncSocketAdapter::SetOption(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 416) + 144))(*(_QWORD *)(a1 + 416));
}

uint64_t rtc::AsyncSocketAdapter::OnConnectEvent(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v2 = a1 + 264;
  result = *(_QWORD *)(a1 + 272);
  for (*(_QWORD *)(a1 + 288) = result; result != v2; result = *(_QWORD *)(a1 + 288))
  {
    v5 = *(void (**)(uint64_t, uint64_t))(result + 16);
    v4 = result + 16;
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(v4 - 8);
    v5(v4, a1);
  }
  return result;
}

uint64_t rtc::AsyncSocketAdapter::OnReadEvent(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v2 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  v3 = *(_QWORD *)(a1 + 96);
  for (*(_QWORD *)(a1 + 112) = v3; v3 != a1 + 88; v3 = *(_QWORD *)(a1 + 112))
  {
    v5 = *(void (**)(uint64_t, uint64_t))(v3 + 16);
    v4 = v3 + 16;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(v4 - 8);
    v5(v4, a1);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t rtc::AsyncSocketAdapter::OnWriteEvent(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v2 = (pthread_mutex_t *)(a1 + 144);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 144));
  v3 = *(_QWORD *)(a1 + 216);
  for (*(_QWORD *)(a1 + 232) = v3; v3 != a1 + 208; v3 = *(_QWORD *)(a1 + 232))
  {
    v5 = *(void (**)(uint64_t, uint64_t))(v3 + 16);
    v4 = v3 + 16;
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(v4 - 8);
    v5(v4, a1);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t rtc::AsyncSocketAdapter::OnCloseEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v4 = a1 + 320;
  result = *(_QWORD *)(a1 + 328);
  for (*(_QWORD *)(a1 + 344) = result; result != v4; result = *(_QWORD *)(a1 + 344))
  {
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(result + 16);
    v7 = result + 16;
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(v7 - 8);
    v8(v7, a1, a3);
  }
  return result;
}

void rtc::AsyncSocketAdapter::~AsyncSocketAdapter(rtc::AsyncSocketAdapter *this)
{
  char *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C0ACE50;
  v2 = (char *)this + 360;
  *((_QWORD *)this + 45) = &unk_24C0ACF18;
  v3 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 45) = &unk_24C0ACE30;
  (*((void (**)(char *))this + 48))(v2);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 392, *((_QWORD **)this + 50));
  rtc::Socket::~Socket(this);
}

{
  char *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C0ACE50;
  v2 = (char *)this + 360;
  *((_QWORD *)this + 45) = &unk_24C0ACF18;
  v3 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 45) = &unk_24C0ACE30;
  (*((void (**)(char *))this + 48))(v2);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 392, *((_QWORD **)this + 50));
  rtc::Socket::~Socket(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'rtc::AsyncSocketAdapter::~AsyncSocketAdapter(rtc::AsyncSocketAdapter *this)
{
  rtc::Socket *v2;
  uint64_t v3;

  v2 = (rtc::AsyncSocketAdapter *)((char *)this - 360);
  *((_QWORD *)this - 45) = &off_24C0ACE50;
  *(_QWORD *)this = &unk_24C0ACF18;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &unk_24C0ACE30;
  (*((void (**)(rtc::AsyncSocketAdapter *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  rtc::Socket::~Socket(v2);
}

{
  rtc::Socket *v2;
  uint64_t v3;

  v2 = (rtc::AsyncSocketAdapter *)((char *)this - 360);
  *((_QWORD *)this - 45) = &off_24C0ACE50;
  *(_QWORD *)this = &unk_24C0ACF18;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &unk_24C0ACE30;
  (*((void (**)(rtc::AsyncSocketAdapter *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  rtc::Socket::~Socket(v2);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t sigslot::_signal_base<sigslot::multi_threaded_local>::do_slot_disconnect(_QWORD *a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  if (a1)
    v4 = (pthread_mutex_t *)(a1 + 2);
  else
    v4 = 0;
  pthread_mutex_lock(v4);
  v5 = (uint64_t *)a1[11];
  while (v5 != a1 + 10)
  {
    v6 = v5;
    v5 = (uint64_t *)v5[1];
    if (v6[3] == a2)
    {
      v7 = *v6;
      *(_QWORD *)(v7 + 8) = v5;
      *(_QWORD *)v6[1] = v7;
      v8 = (uint64_t *)a1[13];
      --a1[12];
      operator delete(v6);
      if (v8 == v6)
        a1[13] = v5;
    }
  }
  return pthread_mutex_unlock(v4);
}

uint64_t sigslot::_signal_base<sigslot::multi_threaded_local>::do_slot_duplicate(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v13;

  if (a1)
    v6 = (pthread_mutex_t *)(a1 + 2);
  else
    v6 = 0;
  pthread_mutex_lock(v6);
  v7 = a1 + 10;
  for (i = a1[11]; (_QWORD *)i != v7; i = *(_QWORD *)(i + 8))
  {
    if (*(_QWORD *)(i + 24) == a2)
    {
      v9 = *(_QWORD *)(i + 16);
      v13 = *(_OWORD *)(i + 32);
      v10 = operator new(0x30uLL);
      v10[2] = v9;
      v10[3] = a3;
      *((_OWORD *)v10 + 2) = v13;
      v11 = a1[10];
      *v10 = v11;
      v10[1] = v7;
      *(_QWORD *)(v11 + 8) = v10;
      a1[10] = v10;
      ++a1[12];
    }
  }
  return pthread_mutex_unlock(v6);
}

void sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = a1 + 2;
  v3 = (uint64_t *)a1[3];
  if (v3 != a1 + 2)
  {
    do
    {
      v6 = v3;
      v3 = (uint64_t *)v3[1];
      if (v6[3] == a2)
      {
        v7 = *v6;
        *(_QWORD *)(v7 + 8) = v3;
        *(_QWORD *)v6[1] = v7;
        v8 = (uint64_t *)a1[5];
        --a1[4];
        operator delete(v6);
        if (v8 == v6)
          a1[5] = v3;
      }
    }
    while (v3 != v2);
  }
}

_QWORD *sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate(_QWORD *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v3 = (char *)(result + 2);
  v4 = result[3];
  if ((_QWORD *)v4 != result + 2)
  {
    v7 = result;
    do
    {
      if (*(_QWORD *)(v4 + 24) == a2)
      {
        v8 = *(_QWORD *)(v4 + 16);
        v10 = *(_OWORD *)(v4 + 32);
        result = operator new(0x30uLL);
        result[2] = v8;
        result[3] = a3;
        *((_OWORD *)result + 2) = v10;
        v9 = v7[2];
        *result = v9;
        result[1] = v3;
        *(_QWORD *)(v9 + 8) = result;
        v7[2] = result;
        ++v7[4];
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while ((char *)v4 != v3);
  }
  return result;
}

void rtc::Socket::~Socket(rtc::Socket *this)
{
  uint64_t i;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t j;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &unk_24C0C0EA0;
  for (i = *((_QWORD *)this + 42); i; i = *((_QWORD *)this + 42))
  {
    v3 = (uint64_t *)*((_QWORD *)this + 41);
    v4 = v3[3];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = v3[1];
    *(_QWORD *)v3[1] = v5;
    *((_QWORD *)this + 42) = i - 1;
    operator delete(v3);
    (*(void (**)(uint64_t, char *))(v4 + 16))(v4, (char *)this + 304);
  }
  *((_QWORD *)this + 43) = (char *)this + 320;
  for (j = *((_QWORD *)this + 35); j; j = *((_QWORD *)this + 35))
  {
    v7 = (uint64_t *)*((_QWORD *)this + 34);
    v8 = v7[3];
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = v7[1];
    *(_QWORD *)v7[1] = v9;
    *((_QWORD *)this + 35) = j - 1;
    operator delete(v7);
    (*(void (**)(uint64_t, char *))(v8 + 16))(v8, (char *)this + 248);
  }
  *((_QWORD *)this + 36) = (char *)this + 264;
  sigslot::_signal_base<sigslot::multi_threaded_local>::~_signal_base((uint64_t)this + 128);
  sigslot::_signal_base<sigslot::multi_threaded_local>::~_signal_base((uint64_t)this + 8);
}

uint64_t sigslot::_signal_base<sigslot::multi_threaded_local>::~_signal_base(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t i;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  for (i = *(_QWORD *)(a1 + 96); i; i = *(_QWORD *)(a1 + 96))
  {
    v4 = *(uint64_t **)(a1 + 88);
    v5 = v4[3];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = v4[1];
    *(_QWORD *)v4[1] = v6;
    *(_QWORD *)(a1 + 96) = i - 1;
    operator delete(v4);
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, a1);
  }
  v7 = (uint64_t *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = a1 + 80;
  pthread_mutex_unlock(v2);
  if (*(_QWORD *)(a1 + 96))
  {
    v9 = *(_QWORD *)(a1 + 80);
    v8 = *(uint64_t **)(a1 + 88);
    v10 = *v8;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v10;
    *(_QWORD *)(a1 + 96) = 0;
    if (v8 != v7)
    {
      do
      {
        v11 = (uint64_t *)v8[1];
        operator delete(v8);
        v8 = v11;
      }
      while (v11 != v7);
    }
  }
  pthread_mutex_destroy(v2);
  return a1;
}

uint64_t *sigslot::has_slots<sigslot::single_threaded>::do_signal_connect(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v3 = result;
  v5 = (uint64_t **)(result + 5);
  v4 = (uint64_t *)result[5];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if (v7 <= a2)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(result + 5);
LABEL_8:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = a2;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = *(_QWORD *)v3[4];
    if (v9)
    {
      v3[4] = v9;
      v10 = *v5;
    }
    else
    {
      v10 = v8;
    }
    result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[5], v10);
    ++v3[6];
  }
  return result;
}

void sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = a1 + 5;
  v3 = (uint64_t *)a1[5];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if ((uint64_t *)a1[4] == v5)
        a1[4] = v11;
      --a1[6];
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

void sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD v11[2];

  v1 = a1[6];
  if (v1)
  {
    v3 = a1 + 5;
    do
    {
      v4 = (_QWORD *)a1[5];
      v10 = (_QWORD *)a1[4];
      v5 = v10;
      v11[0] = v4;
      a1[5] = 0;
      a1[6] = 0;
      v11[1] = v1;
      v4[2] = v11;
      a1[4] = v3;
      if (v5 != v11)
      {
        do
        {
          v6 = (_QWORD *)v5[1];
          v7 = v5;
          if (v6)
          {
            do
            {
              v8 = v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v8 = (_QWORD *)v7[2];
              v9 = *v8 == (_QWORD)v7;
              v7 = v8;
            }
            while (!v9);
          }
          (*(void (**)(void))v5[4])();
          v5 = v8;
        }
        while (v8 != v11);
        v4 = (_QWORD *)v11[0];
      }
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v10, v4);
      v1 = a1[6];
    }
    while (v1);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 != v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v16 = (_QWORD *)*v7;
      if (*v7)
        goto LABEL_48;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v20 = (uint64_t *)v7[1];
      *v14 = v20;
      if (v20)
        v20[2] = (uint64_t)v14;
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14)
        result = v7;
      v7 = *v14;
      v16 = (_QWORD *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((_BYTE *)v16 + 24))
          goto LABEL_71;
      }
    }
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v16 && !*((_BYTE *)v16 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = *v21;
        v7[1] = *v21;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v16 = v7;
      }
      v27 = (uint64_t *)v21[2];
      *((_BYTE *)v21 + 24) = *((_BYTE *)v27 + 24);
      *((_BYTE *)v27 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v28 = *v27;
      v29 = *(_QWORD *)(*v27 + 8);
      *v27 = v29;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      *(_QWORD *)(v28 + 16) = v27[2];
      *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v28;
      *(_QWORD *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v15 = (_QWORD *)*v7;
    if (!*v7)
    {
LABEL_38:
      v19 = (uint64_t *)v7[1];
      if (v19 && !*((_BYTE *)v19 + 24))
        goto LABEL_67;
      *((_BYTE *)v7 + 24) = 0;
      v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        v12 = result;
LABEL_61:
        *((_BYTE *)v12 + 24) = 1;
        return result;
      }
      if (!*((_BYTE *)v12 + 24))
        goto LABEL_61;
      goto LABEL_24;
    }
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v17 = v14[1];
    v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18)
      v18[2] = (uint64_t)v14;
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
    *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
    v15 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_38;
  }
  if (*((_BYTE *)v15 + 24))
    goto LABEL_38;
  v19 = (uint64_t *)v7[1];
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_67:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v19 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

uint64_t sigslot::_opaque_connection::emitter<rtc::AsyncSocketAdapter,rtc::Socket *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = a1[1];
  if (v3)
    v4 = v3 - 360;
  else
    v4 = 0;
  v5 = (_QWORD *)(v4 + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v5 + v1);
  return v1(v5);
}

uint64_t sigslot::_opaque_connection::emitter<rtc::AsyncSocketAdapter,rtc::Socket *,int>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = a1[1];
  if (v3)
    v4 = v3 - 360;
  else
    v4 = 0;
  v5 = (_QWORD *)(v4 + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v5 + v1);
  return v1(v5);
}

uint64_t cricket::AsyncStunTCPSocket::Send(cricket::AsyncStunTCPSocket *this, unsigned __int16 *__src, size_t __n, const rtc::PacketOptions *a4)
{
  size_t v5;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  _QWORD *v32;
  void (*v33)(_QWORD *, cricket::AsyncStunTCPSocket *, _QWORD *);
  _QWORD v34[2];
  __int16 v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int __srca;

  if (__n - 65557 < 0xFFFFFFFFFFFEFFEFLL)
  {
    (*(void (**)(cricket::AsyncStunTCPSocket *, uint64_t))(*(_QWORD *)this + 88))(this, 40);
    return 0xFFFFFFFFLL;
  }
  v5 = __n;
  if (*((_QWORD *)this + 47))
    return v5;
  v8 = bswap32(__src[1]) >> 16;
  if ((*__src & 0xC0) == 0)
  {
    v12 = 0;
    if (v8 + 20 == __n)
      goto LABEL_9;
    return 0xFFFFFFFFLL;
  }
  v9 = 4 - (v8 & 3);
  v10 = (v8 & 3) == 0;
  v11 = v8 + 4;
  if (v10)
    v12 = 0;
  else
    v12 = v9;
  if (v11 != __n)
    return 0xFFFFFFFFLL;
LABEL_9:
  v13 = *((_QWORD *)this + 48);
  if (v13 >= __n)
  {
    v19 = 0;
  }
  else
  {
    v14 = v13 + (v13 >> 1);
    if (v14 <= __n)
      v15 = __n;
    else
      v15 = v14;
    v16 = (void *)operator new[]();
    v17 = v16;
    v18 = *((_QWORD *)this + 49);
    if (v18)
    {
      memcpy(v16, *((const void **)this + 49), *((_QWORD *)this + 47));
      *((_QWORD *)this + 49) = v17;
      MEMORY[0x20BD0ADD4](v18, 0x1000C8077774924);
    }
    else
    {
      *((_QWORD *)this + 49) = v16;
    }
    *((_QWORD *)this + 48) = v15;
    v19 = *((_QWORD *)this + 47);
  }
  memcpy((void *)(*((_QWORD *)this + 49) + v19), __src, v5);
  *((_QWORD *)this + 47) = v5;
  __srca = 0;
  if (v12)
  {
    v20 = v12 + v5;
    v21 = *((_QWORD *)this + 48);
    v22 = v5;
    if (v21 < v12 + v5)
    {
      if (v21 + (v21 >> 1) <= v20)
        v23 = v12 + v5;
      else
        v23 = v21 + (v21 >> 1);
      v24 = (void *)operator new[]();
      v25 = v24;
      v26 = *((_QWORD *)this + 49);
      if (v26)
      {
        memcpy(v24, *((const void **)this + 49), *((_QWORD *)this + 47));
        *((_QWORD *)this + 49) = v25;
        MEMORY[0x20BD0ADD4](v26, 0x1000C8077774924);
      }
      else
      {
        *((_QWORD *)this + 49) = v24;
      }
      *((_QWORD *)this + 48) = v23;
      v22 = *((_QWORD *)this + 47);
    }
    memcpy((void *)(*((_QWORD *)this + 49) + v22), &__srca, v12);
    *((_QWORD *)this + 47) = v20;
  }
  v27 = rtc::AsyncTCPSocketBase::FlushOutBuffer(this);
  if ((int)v27 <= 0)
  {
    *((_QWORD *)this + 47) = 0;
    return v27;
  }
  else
  {
    v28 = *((_QWORD *)a4 + 1);
    if (rtc::g_clock)
    {
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v29 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    v34[0] = v28;
    v34[1] = v29 / 1000000;
    v35 = 0;
    v38 = 0;
    v36 = 0;
    v37 = 0;
    v40 = 0;
    v41 = 0;
    v39 = 0;
    v31 = (_QWORD *)*((_QWORD *)this + 10);
    for (*((_QWORD *)this + 12) = v31; v31 != (_QWORD *)((char *)this + 72); v31 = (_QWORD *)*((_QWORD *)this + 12))
    {
      v33 = (void (*)(_QWORD *, cricket::AsyncStunTCPSocket *, _QWORD *))v31[2];
      v32 = v31 + 2;
      *((_QWORD *)this + 12) = *(v32 - 1);
      v33(v32, this, v34);
    }
  }
  return v5;
}

unint64_t cricket::AsyncStunTCPSocket::ProcessInput(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *, _QWORD *, _QWORD *);
  _QWORD v19[6];
  void *__p[2];
  char v21;

  (*(void (**)(void **__return_ptr))(*a1 + 24))(__p);
  if (a3 >= 4)
  {
    v6 = 0;
    v8 = a3;
    while (1)
    {
      v9 = bswap32(*(unsigned __int16 *)(a2 + v6 + 2)) >> 16;
      if ((*(_WORD *)(a2 + v6) & 0xC0) != 0)
      {
        v10 = 4 - (v9 & 3);
        v11 = (v9 & 3) == 0;
        v12 = v9 + 4;
        if (v11)
          v10 = 0;
        v13 = v12 + v10;
        if (v8 < v12 + v10)
          goto LABEL_3;
      }
      else
      {
        v12 = v9 + 20;
        v13 = v12;
        if (v8 < v12)
          goto LABEL_3;
      }
      if (v8 >= v12)
        v8 = v12;
      if (a3 <= v6)
        v14 = 0;
      else
        v14 = v8;
      if (a3 <= v6)
        v15 = 0;
      else
        v15 = a2 + v6;
      if (rtc::g_clock)
      {
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      }
      else
      {
        if (!dword_253EA791C)
          mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
        v16 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
            / dword_253EA791C;
      }
      if (v14)
        v17 = v15;
      else
        v17 = 0;
      v19[0] = v17;
      v19[1] = v14;
      v19[2] = v16 / 1000;
      v19[3] = 1;
      v19[4] = __p;
      v19[5] = 0;
      v18 = (void (*)(_QWORD *, _QWORD *, _QWORD *))a1[42];
      if (v18)
        v18(a1 + 39, a1, v19);
      v6 += v13;
      v8 = a3 - v6;
      if (a3 - v6 <= 3)
        goto LABEL_3;
    }
  }
  v6 = 0;
LABEL_3:
  if (v21 < 0)
    operator delete(__p[0]);
  return v6;
}

void cricket::AsyncStunTCPSocket::~AsyncStunTCPSocket(cricket::AsyncStunTCPSocket *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0ACFB0;
  v2 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v3)
    MEMORY[0x20BD0ADD4](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  rtc::AsyncPacketSocket::~AsyncPacketSocket((void (**)(uint64_t, char *, char *))this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0ACFB0;
  v2 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v3)
    MEMORY[0x20BD0ADD4](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  rtc::AsyncPacketSocket::~AsyncPacketSocket((void (**)(uint64_t, char *, char *))this);
  JUMPOUT(0x20BD0ADECLL);
}

rtc::AsyncTCPSocketBase *rtc::AsyncTCPSocketBase::AsyncTCPSocketBase(rtc::AsyncTCPSocketBase *this, rtc::Socket *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  pthread_mutex_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  pthread_mutex_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *((_QWORD *)this + 3) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 16) = (char *)this + 128;
  *((_QWORD *)this + 17) = (char *)this + 128;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = (char *)this + 128;
  *((_QWORD *)this + 23) = (char *)this + 184;
  *((_QWORD *)this + 24) = (char *)this + 184;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = (char *)this + 184;
  *((_QWORD *)this + 8) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 9) = (char *)this + 72;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = (char *)this + 72;
  *((_QWORD *)this + 10) = (char *)this + 72;
  *((_BYTE *)this + 104) = 0;
  *((_QWORD *)this + 14) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 15) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_BYTE *)this + 160) = 0;
  *((_QWORD *)this + 21) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 22) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_BYTE *)this + 216) = 0;
  *((_QWORD *)this + 28) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 29) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 30) = (char *)this + 240;
  *((_QWORD *)this + 31) = (char *)this + 240;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = (char *)this + 240;
  *((_BYTE *)this + 272) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_BYTE *)this + 304) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 41) = absl::internal_any_invocable::EmptyManager;
  *((_QWORD *)this + 42) = 0;
  *(_QWORD *)this = off_24C0ACFB0;
  *((_QWORD *)this + 1) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  *((_QWORD *)this + 43) = a2;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_QWORD *)this + 50) = a3;
  *((_QWORD *)this + 51) = a3;
  v4 = (void *)operator new[]();
  v5 = v4;
  v6 = *((_QWORD *)this + 46);
  if (v6)
  {
    memcpy(v4, *((const void **)this + 46), *((_QWORD *)this + 44));
    *((_QWORD *)this + 46) = v5;
    MEMORY[0x20BD0ADD4](v6, 0x1000C8077774924);
  }
  else
  {
    *((_QWORD *)this + 46) = v4;
  }
  *((_QWORD *)this + 45) = 128;
  v7 = *((_QWORD *)this + 43);
  v8 = operator new(0x30uLL);
  v8[2] = sigslot::_opaque_connection::emitter<rtc::AsyncTCPSocketBase,rtc::Socket *>;
  v8[3] = this;
  v8[4] = rtc::AsyncTCPSocketBase::OnConnectEvent;
  v8[5] = 0;
  v9 = *(_QWORD *)(v7 + 264);
  *v8 = v9;
  v8[1] = v7 + 264;
  *(_QWORD *)(v9 + 8) = v8;
  *(_QWORD *)(v7 + 264) = v8;
  ++*(_QWORD *)(v7 + 280);
  (*((void (**)(rtc::AsyncTCPSocketBase *, uint64_t))this + 1))(this, v7 + 248);
  v10 = *((_QWORD *)this + 43);
  v11 = (pthread_mutex_t *)(v10 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 24));
  v12 = operator new(0x30uLL);
  v12[2] = sigslot::_opaque_connection::emitter<rtc::AsyncTCPSocketBase,rtc::Socket *>;
  v12[3] = this;
  v12[4] = rtc::AsyncTCPSocketBase::OnReadEvent;
  v12[5] = 0;
  v13 = *(_QWORD *)(v10 + 88);
  v10 += 88;
  *v12 = v13;
  v12[1] = v10;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)v10 = v12;
  ++*(_QWORD *)(v10 + 16);
  (*((void (**)(rtc::AsyncTCPSocketBase *, uint64_t))this + 1))(this, v10 - 80);
  pthread_mutex_unlock(v11);
  v14 = *((_QWORD *)this + 43);
  v15 = (pthread_mutex_t *)(v14 + 144);
  pthread_mutex_lock((pthread_mutex_t *)(v14 + 144));
  v16 = operator new(0x30uLL);
  v16[2] = sigslot::_opaque_connection::emitter<rtc::AsyncTCPSocketBase,rtc::Socket *>;
  v16[3] = this;
  v16[4] = rtc::AsyncTCPSocketBase::OnWriteEvent;
  v16[5] = 0;
  v17 = *(_QWORD *)(v14 + 208);
  v14 += 208;
  *v16 = v17;
  v16[1] = v14;
  *(_QWORD *)(v17 + 8) = v16;
  *(_QWORD *)v14 = v16;
  ++*(_QWORD *)(v14 + 16);
  (*((void (**)(rtc::AsyncTCPSocketBase *, uint64_t))this + 1))(this, v14 - 80);
  pthread_mutex_unlock(v15);
  v18 = *((_QWORD *)this + 43);
  v19 = operator new(0x30uLL);
  v19[2] = sigslot::_opaque_connection::emitter<rtc::AsyncTCPSocketBase,rtc::Socket *,int>;
  v19[3] = this;
  v19[4] = rtc::AsyncTCPSocketBase::OnCloseEvent;
  v19[5] = 0;
  v20 = *(_QWORD *)(v18 + 320);
  *v19 = v20;
  v19[1] = v18 + 320;
  *(_QWORD *)(v20 + 8) = v19;
  *(_QWORD *)(v18 + 320) = v19;
  ++*(_QWORD *)(v18 + 336);
  (*((void (**)(rtc::AsyncTCPSocketBase *, uint64_t))this + 1))(this, v18 + 304);
  return this;
}

uint64_t rtc::AsyncTCPSocketBase::OnConnectEvent(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v2 = a1 + 240;
  result = *(_QWORD *)(a1 + 248);
  for (*(_QWORD *)(a1 + 264) = result; result != v2; result = *(_QWORD *)(a1 + 264))
  {
    v5 = *(void (**)(uint64_t, uint64_t))(result + 16);
    v4 = result + 16;
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(v4 - 8);
    v5(v4, a1);
  }
  return result;
}

void rtc::AsyncTCPSocketBase::OnReadEvent(rtc::AsyncTCPSocketBase *this, rtc::Socket *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  size_t v38;
  size_t v39;
  void *v40;
  void *v41;
  uint64_t v42;

  v3 = 0;
  v5 = *((_QWORD *)this + 44);
  v4 = *((_QWORD *)this + 45);
  while (1)
  {
    v7 = v4 - v5;
    if (v4 - v5 <= 0x7F)
    {
      v8 = *((_QWORD *)this + 50);
      if (v4 < v8)
      {
        v9 = 2 * v4 >= v8 ? *((_QWORD *)this + 50) : 2 * v4;
        if (v4 < v9)
        {
          v10 = (void *)operator new[]();
          v11 = v10;
          v12 = *((_QWORD *)this + 46);
          if (v12)
          {
            memcpy(v10, *((const void **)this + 46), *((_QWORD *)this + 44));
            *((_QWORD *)this + 46) = v11;
            MEMORY[0x20BD0ADD4](v12, 0x1000C8077774924);
          }
          else
          {
            *((_QWORD *)this + 46) = v10;
          }
          *((_QWORD *)this + 45) = v9;
          v5 = *((_QWORD *)this + 44);
          v7 = v9 - v5;
        }
      }
    }
    v13 = (*(uint64_t (**)(_QWORD, unint64_t, unint64_t, _QWORD))(**((_QWORD **)this + 43) + 64))(*((_QWORD *)this + 43), *((_QWORD *)this + 46) + v5, v7, 0);
    if ((v13 & 0x80000000) != 0)
      break;
    v14 = v13;
    v15 = v13;
    v4 = *((_QWORD *)this + 45);
    v5 = *((_QWORD *)this + 44) + v13;
    if (v4 < v5)
    {
      if (v4 + (v4 >> 1) <= v5)
        v4 = *((_QWORD *)this + 44) + v13;
      else
        v4 += v4 >> 1;
      v16 = (void *)operator new[]();
      v17 = v16;
      v18 = *((_QWORD *)this + 46);
      if (v18)
      {
        memcpy(v16, *((const void **)this + 46), *((_QWORD *)this + 44));
        *((_QWORD *)this + 46) = v17;
        MEMORY[0x20BD0ADD4](v18, 0x1000C8077774924);
      }
      else
      {
        *((_QWORD *)this + 46) = v16;
      }
      *((_QWORD *)this + 45) = v4;
    }
    v3 += v15;
    *((_QWORD *)this + 44) = v5;
    if (v14)
      v6 = v7 > v15;
    else
      v6 = 1;
    if (v6)
      goto LABEL_28;
  }
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 43) + 112))(*((_QWORD *)this + 43)) - 35 >= 2
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 43) + 112))(*((_QWORD *)this + 43));
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/async_tcp_socket.cc");
  }
LABEL_28:
  if (v3)
  {
    if (*((_QWORD *)this + 44))
      v26 = *((_QWORD *)this + 46);
    else
      v26 = 0;
    v27 = (*(uint64_t (**)(rtc::AsyncTCPSocketBase *, uint64_t))(*(_QWORD *)this + 96))(this, v26);
    v28 = *((_QWORD *)this + 44);
    v29 = v28 - v27;
    if (v28 >= v27)
    {
      if (v28 != v27)
        memmove(*((void **)this + 46), (const void *)(*((_QWORD *)this + 46) + v27), v29);
      v37 = *((_QWORD *)this + 45);
      if (v37 < v29)
      {
        v38 = v37 + (v37 >> 1);
        if (v38 <= v29)
          v39 = v29;
        else
          v39 = v38;
        v40 = (void *)operator new[]();
        v41 = v40;
        v42 = *((_QWORD *)this + 46);
        if (v42)
        {
          memcpy(v40, *((const void **)this + 46), *((_QWORD *)this + 44));
          *((_QWORD *)this + 46) = v41;
          MEMORY[0x20BD0ADD4](v42, 0x1000C8077774924);
        }
        else
        {
          *((_QWORD *)this + 46) = v40;
        }
        *((_QWORD *)this + 45) = v39;
      }
    }
    else
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/async_tcp_socket.cc");
      v29 = 0;
    }
    *((_QWORD *)this + 44) = v29;
  }
}

_QWORD *rtc::AsyncTCPSocketBase::OnWriteEvent(rtc::AsyncTCPSocketBase *this, rtc::Socket *a2)
{
  _QWORD *result;
  _QWORD *v4;
  void (*v5)(_QWORD *, rtc::AsyncTCPSocketBase *);

  if (!*((_QWORD *)this + 47)
    || (result = (_QWORD *)rtc::AsyncTCPSocketBase::FlushOutBuffer(this), !*((_QWORD *)this + 47)))
  {
    result = (_QWORD *)*((_QWORD *)this + 17);
    for (*((_QWORD *)this + 19) = result;
          result != (_QWORD *)((char *)this + 128);
          result = (_QWORD *)*((_QWORD *)this + 19))
    {
      v5 = (void (*)(_QWORD *, rtc::AsyncTCPSocketBase *))result[2];
      v4 = result + 2;
      *((_QWORD *)this + 19) = *(v4 - 1);
      v5(v4, this);
    }
  }
  return result;
}

void rtc::AsyncTCPSocketBase::OnCloseEvent(rtc::AsyncTCPSocketBase *this, rtc::Socket *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  _BYTE *v14;
  std::string *v15;
  uint64_t v16;

  if (*((_BYTE *)this + 304))
  {
    v15 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v16);
    rtc::AsyncTCPSocketBase::~AsyncTCPSocketBase((rtc::AsyncTCPSocketBase *)v15);
  }
  v9 = (char *)this + 304;
  *((_BYTE *)this + 304) = 1;
  v10 = *((_QWORD *)this + 35);
  v11 = *((_QWORD *)this + 36);
  if (v10 == v11)
  {
    *v9 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      (*(void (**)(uint64_t, rtc::AsyncTCPSocketBase *, uint64_t))(v10 + 40))(v10 + 8, this, a3);
      v14 = *(_BYTE **)v10;
      v10 += 56;
      v13 |= v14 == v9;
    }
    while (v10 != v11);
    *v9 = 0;
    if ((v13 & 1) != 0)
      webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((rtc::AsyncTCPSocketBase *)((char *)this + 280), v9);
  }
}

uint64_t rtc::AsyncTCPSocketBase::GetLocalAddress(rtc::AsyncTCPSocketBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 16))(*((_QWORD *)this + 43));
}

uint64_t rtc::AsyncTCPSocketBase::GetRemoteAddress(rtc::AsyncTCPSocketBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 24))(*((_QWORD *)this + 43));
}

uint64_t rtc::AsyncTCPSocketBase::Close(rtc::AsyncTCPSocketBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 104))(*((_QWORD *)this + 43));
}

uint64_t rtc::AsyncTCPSocketBase::GetState(rtc::AsyncTCPSocketBase *this)
{
  int v1;
  unsigned int v2;

  v1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 128))(*((_QWORD *)this + 43));
  if (v1 == 1)
    v2 = 3;
  else
    v2 = 0;
  if (v1 == 2)
    return 4;
  else
    return v2;
}

uint64_t rtc::AsyncTCPSocketBase::GetOption(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 344) + 136))(*(_QWORD *)(a1 + 344));
}

uint64_t rtc::AsyncTCPSocketBase::SetOption(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 344) + 144))(*(_QWORD *)(a1 + 344));
}

uint64_t rtc::AsyncTCPSocketBase::GetError(rtc::AsyncTCPSocketBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 112))(*((_QWORD *)this + 43));
}

uint64_t rtc::AsyncTCPSocketBase::SetError(rtc::AsyncTCPSocketBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 120))(*((_QWORD *)this + 43));
}

uint64_t rtc::AsyncTCPSocketBase::SendTo(rtc::AsyncTCPSocketBase *this, const void *a2, uint64_t a3, const rtc::SocketAddress *a4, const rtc::PacketOptions *a5)
{
  uint64_t v10;
  void *__p[2];
  char v13;
  unsigned __int16 v14;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 24))(__p);
  if (rtc::SocketAddress::EqualIPs(a4, (const rtc::SocketAddress *)__p) && *((unsigned __int16 *)a4 + 28) == v14)
  {
    v10 = (*(uint64_t (**)(rtc::AsyncTCPSocketBase *, const void *, uint64_t, const rtc::PacketOptions *))(*(_QWORD *)this + 32))(this, a2, a3, a5);
    if (v13 < 0)
      goto LABEL_6;
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 43) + 120))(*((_QWORD *)this + 43), 57);
    v10 = 0xFFFFFFFFLL;
    if (v13 < 0)
LABEL_6:
      operator delete(__p[0]);
  }
  return v10;
}

uint64_t rtc::AsyncTCPSocketBase::FlushOutBuffer(rtc::AsyncTCPSocketBase *this)
{
  size_t v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 47);
  if (v2)
  {
    v3 = (char *)*((_QWORD *)this + 49);
    while (1)
    {
      v4 = (*(uint64_t (**)(_QWORD, char *, size_t))(**((_QWORD **)this + 43) + 48))(*((_QWORD *)this + 43), v3, v2);
      LODWORD(v5) = v4;
      if ((int)v4 < 1)
        break;
      if (v2 < v4)
      {
        LODWORD(v5) = -1;
        break;
      }
      if (v2 > v4)
      {
        if (v2 - v4 < v2)
          v2 -= v4;
        if (v2)
          v3 += v4;
        else
          v3 = 0;
        if (v2)
          continue;
      }
      v2 = 0;
      v5 = *((unsigned int *)this + 94);
      goto LABEL_27;
    }
  }
  else
  {
    v3 = 0;
    LODWORD(v5) = 0;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 112))(*((_QWORD *)this + 43));
  v7 = *((_QWORD *)this + 47);
  if (v6 == 35)
    v5 = (v7 - v2);
  else
    v5 = v5;
  if (v7 > v2)
  {
    memmove(*((void **)this + 49), v3, v2);
    v8 = *((_QWORD *)this + 48);
    if (v8 < v2)
    {
      v9 = v8 + (v8 >> 1);
      if (v9 <= v2)
        v10 = v2;
      else
        v10 = v9;
      v11 = (void *)operator new[]();
      v12 = v11;
      v13 = *((_QWORD *)this + 49);
      if (v13)
      {
        memcpy(v11, *((const void **)this + 49), *((_QWORD *)this + 47));
        *((_QWORD *)this + 49) = v12;
        MEMORY[0x20BD0ADD4](v13, 0x1000C8077774924);
      }
      else
      {
        *((_QWORD *)this + 49) = v11;
      }
      *((_QWORD *)this + 48) = v10;
    }
LABEL_27:
    *((_QWORD *)this + 47) = v2;
  }
  return v5;
}

uint64_t rtc::AsyncTCPSocket::Send(rtc::AsyncTCPSocket *this, const void *__src, size_t __n, const rtc::PacketOptions *a4)
{
  size_t v5;
  unsigned int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void (*v29)(_QWORD *, rtc::AsyncTCPSocket *, _QWORD *);
  _QWORD v30[2];
  __int128 v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  void *__p;
  char v36;
  int v37;

  if (__n >= 0x10003)
  {
    (*(void (**)(rtc::AsyncTCPSocket *, uint64_t))(*(_QWORD *)this + 88))(this, 40);
    return 0xFFFFFFFFLL;
  }
  v5 = __n;
  if (*((_QWORD *)this + 47))
    return v5;
  v9 = bswap32(__n) >> 16;
  if (*((_QWORD *)this + 48) > 1uLL)
  {
    **((_WORD **)this + 49) = v9;
    *((_QWORD *)this + 47) = 2;
    if (!__n)
      goto LABEL_22;
  }
  else
  {
    v10 = (void *)operator new[]();
    v11 = v10;
    v12 = *((_QWORD *)this + 49);
    if (v12)
    {
      memcpy(v10, *((const void **)this + 49), *((_QWORD *)this + 47));
      *((_QWORD *)this + 49) = v11;
      MEMORY[0x20BD0ADD4](v12, 0x1000C8077774924);
    }
    else
    {
      *((_QWORD *)this + 49) = v10;
    }
    *((_QWORD *)this + 48) = 2;
    *(_WORD *)(*((_QWORD *)this + 49) + *((_QWORD *)this + 47)) = v9;
    *((_QWORD *)this + 47) = 2;
    if (!v5)
      goto LABEL_22;
  }
  v13 = v5 + 2;
  v14 = *((_QWORD *)this + 48);
  if (v14 >= v5 + 2)
  {
    v20 = 2;
  }
  else
  {
    v15 = v14 + (v14 >> 1);
    if (v15 <= v13)
      v16 = v5 + 2;
    else
      v16 = v15;
    v17 = (void *)operator new[]();
    v18 = v17;
    v19 = *((_QWORD *)this + 49);
    if (v19)
    {
      memcpy(v17, *((const void **)this + 49), *((_QWORD *)this + 47));
      *((_QWORD *)this + 49) = v18;
      MEMORY[0x20BD0ADD4](v19, 0x1000C8077774924);
    }
    else
    {
      *((_QWORD *)this + 49) = v17;
    }
    *((_QWORD *)this + 48) = v16;
    v20 = *((_QWORD *)this + 47);
  }
  memcpy((void *)(*((_QWORD *)this + 49) + v20), __src, v5);
  *((_QWORD *)this + 47) = v13;
LABEL_22:
  v21 = rtc::AsyncTCPSocketBase::FlushOutBuffer(this);
  if ((int)v21 <= 0)
  {
    *((_QWORD *)this + 47) = 0;
    return v21;
  }
  else
  {
    v22 = *((_QWORD *)a4 + 1);
    if (rtc::g_clock)
    {
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v23 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    v30[0] = v22;
    v30[1] = v23 / 1000000;
    v24 = *((_OWORD *)a4 + 5);
    v31 = *((_OWORD *)a4 + 4);
    v33 = *((_QWORD *)&v24 + 1);
    v32 = v5;
    (*(void (**)(void **__return_ptr, rtc::AsyncTCPSocket *))(*(_QWORD *)this + 16))(&__p, this);
    v25 = 40;
    if (v37 != 30)
      v25 = 0;
    v26 = 20;
    if (v37 != 2)
      v26 = v25;
    v34 = v26;
    if (v36 < 0)
      operator delete(__p);
    v27 = (_QWORD *)*((_QWORD *)this + 10);
    for (*((_QWORD *)this + 12) = v27; v27 != (_QWORD *)((char *)this + 72); v27 = (_QWORD *)*((_QWORD *)this + 12))
    {
      v29 = (void (*)(_QWORD *, rtc::AsyncTCPSocket *, _QWORD *))v27[2];
      v28 = v27 + 2;
      *((_QWORD *)this + 12) = *(v28 - 1);
      v29(v28, this, v30);
    }
  }
  return v5;
}

uint64_t rtc::AsyncTCPSocket::ProcessInput(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD *, _QWORD *, _QWORD *);
  _QWORD v18[6];
  void *__p[2];
  char v20;

  (*(void (**)(void **__return_ptr))(*a1 + 24))(__p);
  if (a3 >= 2)
  {
    v6 = 0;
    v8 = a3;
    do
    {
      v9 = bswap32(*(unsigned __int16 *)(a2 + v6)) >> 16;
      v10 = v9 + 2;
      if (v8 < v9 + 2)
        break;
      v11 = v6 + 2;
      v12 = a2 + v6 + 2;
      if (a3 - (v6 + 2) < v9)
        v9 = a3 - (v6 + 2);
      if (!v9)
        v12 = 0;
      v13 = a3 > v11 ? v9 : 0;
      v14 = a3 > v11 ? v12 : 0;
      if (rtc::g_clock)
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      }
      else
      {
        if (!dword_253EA791C)
          mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
        v15 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
            / dword_253EA791C;
      }
      if (v13)
        v16 = v14;
      else
        v16 = 0;
      v18[0] = v16;
      v18[1] = v13;
      v18[2] = v15 / 1000;
      v18[3] = 1;
      v18[4] = __p;
      v18[5] = 0;
      v17 = (void (*)(_QWORD *, _QWORD *, _QWORD *))a1[42];
      if (v17)
        v17(a1 + 39, a1, v18);
      v6 += v10;
      v8 = a3 - v6;
    }
    while (a3 - v6 > 1);
  }
  else
  {
    v6 = 0;
  }
  if (v20 < 0)
    operator delete(__p[0]);
  return v6;
}

uint64_t rtc::AsyncTcpListenSocket::AsyncTcpListenSocket(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  pthread_mutex_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(a1 + 16) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *(_QWORD *)(a1 + 24) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 64) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 72) = a1 + 72;
  *(_QWORD *)(a1 + 80) = a1 + 72;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 72;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)a1 = &off_24C0AD0A0;
  *(_QWORD *)(a1 + 8) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 112) = v3;
  v4 = (pthread_mutex_t *)(v3 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 24));
  v5 = operator new(0x30uLL);
  v5[2] = sigslot::_opaque_connection::emitter<rtc::AsyncTcpListenSocket,rtc::Socket *>;
  v5[3] = a1;
  v5[4] = rtc::AsyncTcpListenSocket::OnReadEvent;
  v5[5] = 0;
  v6 = *(_QWORD *)(v3 + 88);
  v3 += 88;
  *v5 = v6;
  v5[1] = v3;
  *(_QWORD *)(v6 + 8) = v5;
  *(_QWORD *)v3 = v5;
  ++*(_QWORD *)(v3 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 8))(a1, v3 - 80);
  pthread_mutex_unlock(v4);
  if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 112) + 88))(*(_QWORD *)(a1 + 112), 5) & 0x80000000) == 0
    || (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
  {
    return a1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 112))(*(_QWORD *)(a1 + 112));
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/async_tcp_socket.cc");
  return a1;
}

void rtc::AsyncTcpListenSocket::OnReadEvent(rtc::AsyncTcpListenSocket *this, rtc::Socket *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  int v22;
  char v23;

  __p[0] = 0;
  __p[1] = 0;
  v16 = 0;
  v17 = &unk_24C0ACDA0;
  v23 = 0;
  v21 = 0;
  v22 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v3 = (*(uint64_t (**)(rtc::Socket *, void **))(*(_QWORD *)a2 + 96))(a2, __p);
  if (!v3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    {
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
    }
    else
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 14) + 112))(*((_QWORD *)this + 14));
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/async_tcp_socket.cc");
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
    }
LABEL_10:
    operator delete(__p[0]);
    return;
  }
  v4 = v3;
  (*(void (**)(rtc::AsyncTcpListenSocket *, uint64_t))(*(_QWORD *)this + 32))(this, v3);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 24));
  v5 = *(_QWORD *)(v4 + 96);
  for (*(_QWORD *)(v4 + 112) = v5; v5 != v4 + 88; v5 = *(_QWORD *)(v4 + 112))
  {
    v7 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
    v6 = v5 + 16;
    *(_QWORD *)(v4 + 112) = *(_QWORD *)(v6 - 8);
    v7(v6, v4);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 24));
  if (SHIBYTE(v16) < 0)
    goto LABEL_10;
}

BOOL rtc::AsyncTcpListenSocket::GetState(rtc::AsyncTcpListenSocket *this)
{
  return (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 14) + 128))(*((_QWORD *)this + 14)) == 1;
}

uint64_t rtc::AsyncTcpListenSocket::GetLocalAddress(rtc::AsyncTcpListenSocket *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 14) + 16))(*((_QWORD *)this + 14));
}

_QWORD *rtc::AsyncTcpListenSocket::HandleIncomingConnection(rtc::AsyncTcpListenSocket *this, rtc::Socket *a2)
{
  rtc::AsyncTCPSocketBase *v4;
  _QWORD *result;
  _QWORD *v6;
  void (*v7)(_QWORD *, rtc::AsyncTcpListenSocket *, rtc::AsyncTCPSocketBase *);

  v4 = (rtc::AsyncTCPSocketBase *)operator new();
  *(_QWORD *)rtc::AsyncTCPSocketBase::AsyncTCPSocketBase(v4, a2, 65538) = &off_24C0AD028;
  result = (_QWORD *)*((_QWORD *)this + 10);
  for (*((_QWORD *)this + 12) = result; result != (_QWORD *)((char *)this + 72); result = (_QWORD *)*((_QWORD *)this + 12))
  {
    v7 = (void (*)(_QWORD *, rtc::AsyncTcpListenSocket *, rtc::AsyncTCPSocketBase *))result[2];
    v6 = result + 2;
    *((_QWORD *)this + 12) = *(v6 - 1);
    v7(v6, this, v4);
  }
  return result;
}

void rtc::AsyncTCPSocket::~AsyncTCPSocket(rtc::AsyncTCPSocket *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0ACFB0;
  v2 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v3)
    MEMORY[0x20BD0ADD4](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  rtc::AsyncPacketSocket::~AsyncPacketSocket((void (**)(uint64_t, char *, char *))this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24C0ACFB0;
  v2 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v3)
    MEMORY[0x20BD0ADD4](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  rtc::AsyncPacketSocket::~AsyncPacketSocket((void (**)(uint64_t, char *, char *))this);
  JUMPOUT(0x20BD0ADECLL);
}

void rtc::AsyncTcpListenSocket::~AsyncTcpListenSocket(rtc::AsyncTcpListenSocket *this)
{
  uint64_t v2;
  uint64_t i;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C0AD0A0;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_24C0AD0D8;
  for (i = *((_QWORD *)this + 11); i; i = *((_QWORD *)this + 11))
  {
    v4 = (uint64_t *)*((_QWORD *)this + 10);
    v5 = v4[3];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = v4[1];
    *(_QWORD *)v4[1] = v6;
    *((_QWORD *)this + 11) = i - 1;
    operator delete(v4);
    (*(void (**)(uint64_t, char *))(v5 + 16))(v5, (char *)this + 56);
  }
  *((_QWORD *)this + 12) = (char *)this + 72;
  *(_QWORD *)this = &unk_24C0ACE30;
  (*((void (**)(rtc::AsyncTcpListenSocket *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C0AD0A0;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_24C0AD0D8;
  for (i = *((_QWORD *)this + 11); i; i = *((_QWORD *)this + 11))
  {
    v4 = (uint64_t *)*((_QWORD *)this + 10);
    v5 = v4[3];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = v4[1];
    *(_QWORD *)v4[1] = v6;
    *((_QWORD *)this + 11) = i - 1;
    operator delete(v4);
    (*(void (**)(uint64_t, char *))(v5 + 16))(v5, (char *)this + 56);
  }
  *((_QWORD *)this + 12) = (char *)this + 72;
  *(_QWORD *)this = &unk_24C0ACE30;
  (*((void (**)(rtc::AsyncTcpListenSocket *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t sigslot::_opaque_connection::emitter<rtc::AsyncTCPSocketBase,rtc::Socket *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t sigslot::_opaque_connection::emitter<rtc::AsyncTCPSocketBase,rtc::Socket *,int>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t sigslot::_opaque_connection::emitter<rtc::AsyncTcpListenSocket,rtc::Socket *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t rtc::AsyncUDPSocket::AsyncUDPSocket(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  pthread_mutex_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  pthread_mutex_t *v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = (_QWORD *)a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *(_QWORD *)(a1 + 24) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 128) = a1 + 128;
  *(_QWORD *)(a1 + 136) = a1 + 128;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 128;
  *(_QWORD *)(a1 + 184) = a1 + 184;
  *(_QWORD *)(a1 + 192) = a1 + 184;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 184;
  *(_QWORD *)(a1 + 64) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 72) = a1 + 72;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 72;
  *(_QWORD *)(a1 + 80) = a1 + 72;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 120) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 176) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 232) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 240) = a1 + 240;
  *(_QWORD *)(a1 + 248) = a1 + 240;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = a1 + 240;
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 328) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)a1 = &off_24C0AD108;
  *(_QWORD *)(a1 + 8) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  *(_BYTE *)(a1 + 384) = 0;
  v4 = (pthread_mutex_t *)(a2 + 24);
  *(_QWORD *)(a1 + 344) = a2;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 24));
  v5 = operator new(0x30uLL);
  v6 = v2[11];
  v2 += 11;
  v5[2] = sigslot::_opaque_connection::emitter<rtc::AsyncUDPSocket,rtc::Socket *>;
  v5[3] = a1;
  v5[4] = rtc::AsyncUDPSocket::OnReadEvent;
  v5[5] = 0;
  *v5 = v6;
  v5[1] = v2;
  *(_QWORD *)(v6 + 8) = v5;
  *v2 = v5;
  ++v2[2];
  (*(void (**)(uint64_t, _QWORD *))(a1 + 8))(a1, v2 - 10);
  pthread_mutex_unlock(v4);
  v7 = *(_QWORD *)(a1 + 344);
  v8 = (pthread_mutex_t *)(v7 + 144);
  pthread_mutex_lock((pthread_mutex_t *)(v7 + 144));
  v9 = operator new(0x30uLL);
  v9[2] = sigslot::_opaque_connection::emitter<rtc::AsyncUDPSocket,rtc::Socket *>;
  v9[3] = a1;
  v9[4] = rtc::AsyncUDPSocket::OnWriteEvent;
  v9[5] = 0;
  v10 = *(_QWORD *)(v7 + 208);
  v7 += 208;
  *v9 = v10;
  v9[1] = v7;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)v7 = v9;
  ++*(_QWORD *)(v7 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 8))(a1, v7 - 80);
  pthread_mutex_unlock(v8);
  return a1;
}

void rtc::AsyncUDPSocket::OnReadEvent(rtc::AsyncUDPSocket *this, rtc::Socket *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void (*v21)(char *, rtc::AsyncUDPSocket *, void **);
  void *v22;
  char v23;
  void *__p[2];
  uint64_t v25;
  uint64_t v26;
  void **v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32[2];
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int16 v38;
  int v39;
  char v40;
  int v41;
  char *v42;

  LOBYTE(v30) = 0;
  LOBYTE(v31) = 0;
  v32[0] = 0;
  v32[1] = 0;
  v33 = 0;
  v34 = &unk_24C0ACDA0;
  v40 = 0;
  v38 = 0;
  v39 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v41 = 0;
  v42 = (char *)this + 352;
  v3 = (*(uint64_t (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 43) + 80))(*((_QWORD *)this + 43), &v30);
  if (v3 < 0)
  {
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 43) + 16))(__p);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0
      && (rtc::SocketAddress::ToSensitiveString((rtc::SocketAddress *)__p, (char *)&v22),
          (*(void (**)(_QWORD))(**((_QWORD **)this + 43) + 112))(*((_QWORD *)this + 43)),
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/async_udp_socket.cc"), v23 < 0))
    {
      operator delete(v22);
      if ((SHIBYTE(v25) & 0x80000000) == 0)
        goto LABEL_40;
    }
    else if ((SHIBYTE(v25) & 0x80000000) == 0)
    {
      goto LABEL_40;
    }
    operator delete(__p[0]);
    goto LABEL_40;
  }
  if (v3)
  {
    if (!(_BYTE)v31)
    {
      if (rtc::g_clock)
      {
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      }
      else
      {
        if (!dword_253EA791C)
          mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
        v14 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
            / dword_253EA791C;
      }
      v6 = v14 / 1000;
      if (!(_BYTE)v31)
        LOBYTE(v31) = 1;
      goto LABEL_36;
    }
    if (*((_BYTE *)this + 384))
    {
      v4 = *((_QWORD *)this + 47);
      v5 = v30;
      v6 = 0x7FFFFFFFFFFFFFFFLL;
      if (v30 == 0x7FFFFFFFFFFFFFFFLL)
      {
LABEL_36:
        v30 = v6;
        v19 = (void *)*((_QWORD *)v42 + 2);
        v20 = *(void **)v42;
        if (!*(_QWORD *)v42)
          v19 = 0;
        __p[0] = v19;
        __p[1] = v20;
        v25 = v6;
        v26 = v31;
        v27 = v32;
        v28 = v41;
        v29 = 0;
        v21 = (void (*)(char *, rtc::AsyncUDPSocket *, void **))*((_QWORD *)this + 42);
        if (v21)
          v21((char *)this + 312, this, __p);
        goto LABEL_40;
      }
LABEL_22:
      if (v4 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v6 = 0x8000000000000000;
        v17 = v4 == 0x8000000000000000 || v5 == 0x8000000000000000;
        v18 = v5 + v4;
        if (!v17)
          v6 = v18;
      }
      goto LABEL_36;
    }
    if (rtc::g_clock)
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      if ((_BYTE)v31)
        goto LABEL_15;
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v15 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
      if ((_BYTE)v31)
      {
LABEL_15:
        v5 = v30;
        v16 = v15 / 1000 - v30;
        v4 = 0x7FFFFFFFFFFFFFFFLL;
        if (v30 == 0x7FFFFFFFFFFFFFFFLL)
          v16 = 0x8000000000000000;
        if (v30 != 0x8000000000000000)
          v4 = v16;
        if (!*((_BYTE *)this + 384))
          *((_BYTE *)this + 384) = 1;
        *((_QWORD *)this + 47) = v4;
        v6 = 0x7FFFFFFFFFFFFFFFLL;
        if (v5 == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_36;
        goto LABEL_22;
      }
    }
    __break(1u);
    return;
  }
LABEL_40:
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
}

uint64_t rtc::AsyncUDPSocket::OnWriteEvent(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v2 = a1 + 128;
  result = *(_QWORD *)(a1 + 136);
  for (*(_QWORD *)(a1 + 152) = result; result != v2; result = *(_QWORD *)(a1 + 152))
  {
    v5 = *(void (**)(uint64_t, uint64_t))(result + 16);
    v4 = result + 16;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(v4 - 8);
    v5(v4, a1);
  }
  return result;
}

uint64_t rtc::AsyncUDPSocket::GetLocalAddress(rtc::AsyncUDPSocket *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 16))(*((_QWORD *)this + 43));
}

uint64_t rtc::AsyncUDPSocket::GetRemoteAddress(rtc::AsyncUDPSocket *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 24))(*((_QWORD *)this + 43));
}

uint64_t rtc::AsyncUDPSocket::Send(rtc::AsyncUDPSocket *this, const void *a2, uint64_t a3, const rtc::PacketOptions *a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void (*v16)(_QWORD *, rtc::AsyncUDPSocket *, _QWORD *);
  _QWORD v18[2];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__p;
  char v24;
  int v25;

  v8 = *((_QWORD *)a4 + 1);
  if (rtc::g_clock)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v9 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  v18[0] = v8;
  v18[1] = v9 / 1000000;
  v10 = *((_OWORD *)a4 + 5);
  v19 = *((_OWORD *)a4 + 4);
  v21 = *((_QWORD *)&v10 + 1);
  v20 = a3;
  (*(void (**)(void **__return_ptr, rtc::AsyncUDPSocket *))(*(_QWORD *)this + 16))(&__p, this);
  v11 = 40;
  if (v25 != 30)
    v11 = 0;
  v12 = 20;
  if (v25 != 2)
    v12 = v11;
  v22 = v12;
  if (v24 < 0)
    operator delete(__p);
  v13 = (*(uint64_t (**)(_QWORD, const void *, uint64_t))(**((_QWORD **)this + 43) + 48))(*((_QWORD *)this + 43), a2, a3);
  v14 = (_QWORD *)*((_QWORD *)this + 10);
  for (*((_QWORD *)this + 12) = v14; v14 != (_QWORD *)((char *)this + 72); v14 = (_QWORD *)*((_QWORD *)this + 12))
  {
    v16 = (void (*)(_QWORD *, rtc::AsyncUDPSocket *, _QWORD *))v14[2];
    v15 = v14 + 2;
    *((_QWORD *)this + 12) = *(v15 - 1);
    v16(v15, this, v18);
  }
  return v13;
}

uint64_t rtc::AsyncUDPSocket::SendTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, _QWORD *);
  _QWORD v20[2];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__p;
  char v26;
  int v27;

  v10 = *(_QWORD *)(a5 + 8);
  if (rtc::g_clock)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v11 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
        / dword_253EA791C;
  }
  v20[0] = v10;
  v20[1] = v11 / 1000000;
  v12 = *(_OWORD *)(a5 + 80);
  v21 = *(_OWORD *)(a5 + 64);
  v23 = *((_QWORD *)&v12 + 1);
  v22 = a3;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&__p, a1);
  v13 = 40;
  if (v27 != 30)
    v13 = 0;
  v14 = 20;
  if (v27 != 2)
    v14 = v13;
  v24 = v14;
  if (v26 < 0)
    operator delete(__p);
  v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 344) + 56))(*(_QWORD *)(a1 + 344), a2, a3, a4);
  v16 = *(_QWORD *)(a1 + 80);
  for (*(_QWORD *)(a1 + 96) = v16; v16 != a1 + 72; v16 = *(_QWORD *)(a1 + 96))
  {
    v18 = *(void (**)(uint64_t, uint64_t, _QWORD *))(v16 + 16);
    v17 = v16 + 16;
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(v17 - 8);
    v18(v17, a1, v20);
  }
  return v15;
}

uint64_t rtc::AsyncUDPSocket::Close(rtc::AsyncUDPSocket *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 104))(*((_QWORD *)this + 43));
}

uint64_t rtc::AsyncUDPSocket::GetState(rtc::AsyncUDPSocket *this)
{
  return 2;
}

uint64_t rtc::AsyncUDPSocket::GetOption(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 344) + 136))(*(_QWORD *)(a1 + 344));
}

uint64_t rtc::AsyncUDPSocket::SetOption(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 344) + 144))(*(_QWORD *)(a1 + 344));
}

uint64_t rtc::AsyncUDPSocket::GetError(rtc::AsyncUDPSocket *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 112))(*((_QWORD *)this + 43));
}

uint64_t rtc::AsyncUDPSocket::SetError(rtc::AsyncUDPSocket *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 43) + 120))(*((_QWORD *)this + 43));
}

void rtc::AsyncUDPSocket::~AsyncUDPSocket(rtc::AsyncUDPSocket *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C0AD108;
  v2 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  rtc::AsyncPacketSocket::~AsyncPacketSocket((void (**)(uint64_t, char *, char *))this);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C0AD108;
  v2 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  rtc::AsyncPacketSocket::~AsyncPacketSocket((void (**)(uint64_t, char *, char *))this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t sigslot::_opaque_connection::emitter<rtc::AsyncUDPSocket,rtc::Socket *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(absl::variant_internal *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  absl::variant_internal::ThrowBadVariantAccess(a1, a2, a3, a4, a5, a6, a7, a8);
}

void absl::variant_internal::VisitIndicesSwitch<16ul>::Run<absl::variant_internal::PerformVisitation<webrtc::`anonymous namespace'::VisitToString,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>>(char *__dst, double **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v8;
  int v9;
  const char *v10;
  size_t v11;
  int v13;
  double v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  double *v19;
  BOOL v20;
  double *v21;
  size_t v22;
  double *v23;
  unint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  unint64_t v30;
  char v32;
  std::string::size_type size;
  BOOL v34;
  std::string *p_dsta;
  double *v36;
  _DWORD *v37;
  _DWORD *v38;
  int v39;
  size_t v40;
  std::string::value_type *p_p_new_stuff;
  double *v42;
  _DWORD *v43;
  _DWORD *v44;
  int v45;
  size_t v46;
  std::string::value_type *v47;
  double *v48;
  uint64_t *v49;
  uint64_t *v50;
  int v51;
  size_t v52;
  std::string::value_type *v53;
  double *v54;
  unint64_t *v55;
  unint64_t *v56;
  int v57;
  size_t v58;
  std::string::value_type *v59;
  double *v60;
  double *v61;
  double *v62;
  int v63;
  size_t v64;
  std::string::value_type *v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string::size_type v68;
  double *v69;
  std::string **v70;
  std::string **v71;
  const char *v72;
  size_t v73;
  size_t v74;
  std::string::size_type v75;
  std::string::size_type v76;
  std::string *v77;
  std::string::size_type v79;
  std::string::size_type v80;
  std::string::size_type v81;
  int v82;
  std::string::size_type v83;
  std::string *v84;
  std::string *v85;
  _BYTE *v86;
  std::string::size_type v87;
  std::string *v88;
  std::string *v89;
  uint64_t v90;
  uint64_t v91;
  size_t v92;
  BOOL v93;
  std::string *v94;
  std::string::size_type v95;
  std::string::size_type v96;
  std::string *v97;
  char *v98;
  std::string::size_type v99;
  std::string::size_type v100;
  std::string::size_type v101;
  std::string *v102;
  _BYTE *v103;
  std::string::size_type v104;
  double *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  const char *v109;
  size_t v110;
  size_t v111;
  std::string::size_type v112;
  std::string::size_type v113;
  std::string *v114;
  std::string::size_type v116;
  std::string::size_type v117;
  std::string::size_type v118;
  char *v119;
  int v120;
  size_t v121;
  BOOL v122;
  std::string *v123;
  _BYTE *v124;
  std::string::size_type v125;
  std::string::size_type v126;
  std::string::size_type v127;
  std::string *v128;
  char *v129;
  std::string::size_type v130;
  std::string::size_type v131;
  std::string::size_type v132;
  std::string *v133;
  _WORD *v134;
  std::string::size_type v135;
  int v136;
  size_t v137;
  std::string::value_type *v138;
  std::string::value_type *v139;
  _BOOL4 v140;
  uint64_t v141;
  uint64_t v142;
  std::string::size_type v143;
  BOOL v144;
  const std::string::value_type *v145;
  std::string::size_type v146;
  std::string::size_type v147;
  _QWORD *v148;
  std::string *v149;
  char *v150;
  std::string::size_type v151;
  _QWORD *v152;
  double *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  const char *v157;
  size_t v158;
  size_t v159;
  std::string::size_type v160;
  std::string::size_type v161;
  std::string *v162;
  std::string::size_type v164;
  std::string::size_type v165;
  std::string::size_type v166;
  char *v167;
  int v168;
  size_t v169;
  BOOL v170;
  std::string *v171;
  _BYTE *v172;
  std::string::size_type v173;
  std::string::size_type v174;
  std::string::size_type v175;
  std::string *v176;
  char *v177;
  std::string::size_type v178;
  std::string::size_type v179;
  std::string::size_type v180;
  std::string *v181;
  _WORD *v182;
  std::string::size_type v183;
  int v184;
  size_t v185;
  std::string::value_type *v186;
  std::string::value_type *v187;
  _BOOL4 v188;
  uint64_t v189;
  uint64_t v190;
  std::string::size_type v191;
  BOOL v192;
  const std::string::value_type *v193;
  std::string::size_type v194;
  std::string::size_type v195;
  _QWORD *v196;
  std::string *v197;
  char *v198;
  std::string::size_type v199;
  _QWORD *v200;
  std::string::size_type v201;
  std::string::size_type v202;
  int v203;
  std::string::size_type v204;
  const std::string::value_type *v205;
  std::string *v206;
  std::string::size_type v208;
  std::string::size_type v209;
  std::string::size_type v210;
  std::string::size_type v211;
  std::string::size_type v212;
  std::string::size_type v213;
  uint64_t v215;
  uint64_t v216;
  std::string *v217;
  int v219;
  std::string::size_type v220;
  std::string *v221;
  _BYTE *v222;
  std::string::size_type v223;
  uint64_t v224;
  uint64_t v225;
  std::string::value_type *v226;
  size_t v227;
  BOOL v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  std::string::value_type *v232;
  size_t v233;
  BOOL v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  std::string::value_type *v238;
  size_t v239;
  BOOL v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  std::string::value_type *v244;
  size_t v245;
  BOOL v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  std::string::value_type *v250;
  size_t v251;
  BOOL v252;
  char *v253;
  std::string::size_type v254;
  std::string::size_type v255;
  std::string *v256;
  char *v257;
  std::string::size_type v258;
  std::string::size_type v259;
  std::string::size_type v260;
  std::string *v261;
  char *v262;
  std::string::size_type v263;
  std::string::size_type v264;
  std::string::size_type v265;
  std::string *v266;
  char *v267;
  std::string::size_type v268;
  std::string::size_type v269;
  std::string::size_type v270;
  std::string *v271;
  char *v272;
  std::string::size_type v273;
  std::string::size_type v274;
  std::string::size_type v275;
  std::string *v276;
  char *v277;
  std::string::size_type v278;
  _DWORD *v279;
  std::string::size_type v280;
  std::string::size_type v281;
  std::string *v282;
  std::string::size_type v284;
  int v285;
  size_t v286;
  std::string::value_type *v287;
  std::string::value_type *v288;
  _BOOL4 v289;
  uint64_t v290;
  uint64_t v291;
  size_t v292;
  BOOL v293;
  char *v294;
  std::string::size_type v295;
  std::string::size_type v296;
  std::string *v297;
  char *v298;
  std::string::size_type v299;
  _DWORD *v300;
  std::string::size_type v301;
  std::string::size_type v302;
  std::string *v303;
  std::string::size_type v305;
  int v306;
  size_t v307;
  std::string::value_type *v308;
  std::string::value_type *v309;
  _BOOL4 v310;
  uint64_t v311;
  uint64_t v312;
  size_t v313;
  BOOL v314;
  char *v315;
  std::string::size_type v316;
  std::string::size_type v317;
  std::string *v318;
  char *v319;
  std::string::size_type v320;
  uint64_t *v321;
  std::string::size_type v322;
  std::string::size_type v323;
  std::string *v324;
  std::string::size_type v326;
  int v327;
  size_t v328;
  std::string::value_type *v329;
  std::string::value_type *v330;
  _BOOL4 v331;
  uint64_t v332;
  uint64_t v333;
  size_t v334;
  BOOL v335;
  char *v336;
  std::string::size_type v337;
  std::string::size_type v338;
  std::string *v339;
  char *v340;
  std::string::size_type v341;
  unint64_t *v342;
  std::string::size_type v343;
  std::string::size_type v344;
  std::string *v345;
  std::string::size_type v347;
  int v348;
  size_t v349;
  std::string::value_type *v350;
  std::string::value_type *v351;
  _BOOL4 v352;
  uint64_t v353;
  uint64_t v354;
  size_t v355;
  BOOL v356;
  char *v357;
  std::string::size_type v358;
  std::string::size_type v359;
  std::string *v360;
  char *v361;
  std::string::size_type v362;
  double *i;
  std::string::size_type v364;
  std::string::size_type v365;
  std::string *v366;
  std::string::size_type v368;
  int v369;
  size_t v370;
  std::string::value_type *v371;
  std::string::value_type *v372;
  _BOOL4 v373;
  uint64_t v374;
  uint64_t v375;
  size_t v376;
  BOOL v377;
  char *v378;
  std::string::size_type v379;
  std::string::size_type v380;
  std::string *v381;
  char *v382;
  std::string::size_type v383;
  int v384;
  uint64_t v385;
  _BYTE *v386;
  std::string::size_type v387;
  uint64_t *v388;
  int v389;
  int v390;
  uint64_t v391;
  std::string::size_type v392;
  std::string::size_type v393;
  std::string *p_str;
  std::string::size_type v396;
  const char *v397;
  size_t v398;
  size_t v399;
  BOOL v400;
  std::string *v401;
  std::string::size_type v402;
  std::string::size_type v403;
  std::string *v404;
  char *v405;
  std::string::size_type v406;
  int v407;
  uint64_t v408;
  _BYTE *v409;
  int v410;
  std::string *v412;
  std::string *v414;
  std::string::value_type *__p_new_stuff;
  size_t v416;
  unint64_t v417;
  std::string __dsta;
  std::string __str;
  uint64_t v420;

  v420 = *MEMORY[0x24BDAC8D0];
  v8 = (std::string *)__dst;
  switch(a3)
  {
    case 0:
      if (!*((_BYTE *)*a2 + 1))
        goto LABEL_1034;
      v9 = *(unsigned __int8 *)*a2;
      if (*(_BYTE *)*a2)
        v10 = "true";
      else
        v10 = "false";
      if (v9)
        v11 = 4;
      else
        v11 = 5;
      __dst[23] = v11;
      if (v10 >= __dst && &__dst[v11] > v10)
        goto LABEL_1032;
      memcpy(__dst, v10, v11);
      v8->__r_.__value_.__s.__data_[v11] = 0;
      return;
    case 1:
      if (!*((_BYTE *)*a2 + 4))
        goto LABEL_1034;
      v13 = snprintf((char *)&__str, 0x20uLL, "%d", *(_DWORD *)*a2);
      if (v13 < 0)
        goto LABEL_1033;
      goto LABEL_27;
    case 2:
      if (!*((_BYTE *)*a2 + 4))
        goto LABEL_1034;
      v13 = snprintf((char *)&__str, 0x20uLL, "%u", *(_DWORD *)*a2);
      if (v13 < 0)
        goto LABEL_1033;
      goto LABEL_27;
    case 3:
      if (!*((_BYTE *)*a2 + 8))
        goto LABEL_1034;
      v14 = (double)*(uint64_t *)*a2;
      goto LABEL_26;
    case 4:
      if (!*((_BYTE *)*a2 + 8))
        goto LABEL_1034;
      v14 = (double)*(unint64_t *)*a2;
      goto LABEL_26;
    case 5:
      if (!*((_BYTE *)*a2 + 8))
        goto LABEL_1034;
      v14 = **a2;
LABEL_26:
      v13 = snprintf((char *)&__str, 0x20uLL, "%.16g", v14);
      if (v13 < 0)
        goto LABEL_1033;
LABEL_27:
      v15 = v13;
      if (v13 > 0x16)
      {
        v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v16 = v13 | 7;
        v17 = v16 + 1;
        v18 = (std::string *)operator new(v16 + 1);
        v8->__r_.__value_.__l.__size_ = v15;
        v8->__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
        v8->__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        v8 = v18;
      }
      else
      {
        *((_BYTE *)&v8->__r_.__value_.__s + 23) = v13;
      }
      v19 = (double *)((char *)v8 + v15);
      v20 = v8 > &__str || (std::string *)((char *)v8 + v15) <= &__str;
      if (!v20)
        goto LABEL_1032;
      if ((_DWORD)v15)
        memcpy(v8, &__str, v15);
      goto LABEL_39;
    case 6:
      v21 = *a2;
      if (!*((_BYTE *)*a2 + 24))
        goto LABEL_1034;
      if ((*((char *)v21 + 23) & 0x80000000) == 0)
      {
        v22 = *((unsigned __int8 *)v21 + 23);
        goto LABEL_463;
      }
      v22 = *((_QWORD *)v21 + 1);
      if ((v22 & 0x8000000000000000) != 0)
        goto LABEL_1032;
      v21 = *(double **)v21;
      if (v22 && v21 == 0)
        goto LABEL_1032;
      if (v22 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1033;
LABEL_463:
      if (v22 > 0x16)
      {
        v215 = (v22 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17)
          v215 = v22 | 7;
        v216 = v215 + 1;
        v217 = (std::string *)operator new(v215 + 1);
        v8->__r_.__value_.__l.__size_ = v22;
        v8->__r_.__value_.__r.__words[2] = v216 | 0x8000000000000000;
        v8->__r_.__value_.__r.__words[0] = (std::string::size_type)v217;
        v8 = v217;
      }
      else
      {
        __dst[23] = v22;
      }
      v19 = (double *)((char *)v8 + v22);
      if (v8 <= (std::string *)v21 && v19 > v21)
        goto LABEL_1032;
      if (v22)
        memmove(v8, v21, v22);
LABEL_39:
      *(_BYTE *)v19 = 0;
      return;
    case 7:
      v23 = *a2;
      memset(&__str, 0, sizeof(__str));
      if (&__str <= (std::string *)"[" && (char *)&__str.__r_.__value_.__l.__data_ + 1 > "[")
        goto LABEL_1032;
      strcpy((char *)&__str, "[");
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 1;
      if (!*((_BYTE *)v23 + 24))
        goto LABEL_1034;
      v24 = *((_QWORD *)v23 + 1);
      v410 = (_DWORD)v23[1] & 0x3F;
      if (v24 <= 0x3F && (v24 & 0x3F) == 0)
      {
        v211 = 0;
        LODWORD(v212) = 1;
        v213 = __str.__r_.__value_.__r.__words[2];
        goto LABEL_1016;
      }
      v26 = *(uint64_t **)v23;
      v27 = **(_QWORD **)v23 & 1;
      if (v27)
        v28 = "true";
      else
        v28 = "false";
      v29 = v27 ^ 5;
      *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v27 ^ 5;
      v30 = (unint64_t)&__dsta | v27 ^ 5;
      if (v28 >= (const char *)&__dsta && v30 > (unint64_t)v28)
        goto LABEL_1032;
      memcpy(&__dsta, v28, v29);
      __dsta.__r_.__value_.__s.__data_[v29] = 0;
      v32 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
      {
        size = __dsta.__r_.__value_.__l.__size_;
        if ((__dsta.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_1032;
        p_dsta = (std::string *)__dsta.__r_.__value_.__r.__words[0];
        v34 = __dsta.__r_.__value_.__l.__size_ == 0;
        if (__dsta.__r_.__value_.__l.__size_)
        {
          if (!__dsta.__r_.__value_.__r.__words[0])
            goto LABEL_1032;
        }
      }
      else
      {
        size = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        v34 = SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) == 0;
        p_dsta = &__dsta;
      }
      if (size > 0x15)
      {
        std::string::__grow_by_and_replace(&__str, 0x16uLL, size - 21, 1uLL, 1uLL, 0, size, (const std::string::value_type *)p_dsta);
        v32 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
LABEL_955:
        if (v32 < 0)
          operator delete(__dsta.__r_.__value_.__l.__data_);
        if (v24 > 0x3F || v410 != 1)
        {
          v388 = &v26[v24 >> 6];
          v389 = 1;
          v390 = 1;
          do
          {
            v391 = *v26;
            v392 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v393 = 22;
            else
              v393 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v392 = __str.__r_.__value_.__l.__size_;
            if (v393 == v392)
            {
              std::string::__grow_by_and_replace(&__str, v393, 1uLL, v393, v393, 0, 1uLL, ",");
            }
            else
            {
              p_str = &__str;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              if ((char *)p_str + v392 <= "," && (char *)&p_str->__r_.__value_.__l.__data_ + v392 + 1 > ",")
                goto LABEL_1032;
              p_str->__r_.__value_.__s.__data_[v392] = 44;
              v396 = v392 + 1;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                __str.__r_.__value_.__l.__size_ = v396;
              else
                *((_BYTE *)&__str.__r_.__value_.__s + 23) = v396 & 0x7F;
              p_str->__r_.__value_.__s.__data_[v396] = 0;
            }
            if ((v391 & (1 << v390)) != 0)
              v397 = "true";
            else
              v397 = "false";
            if ((v391 & (1 << v390)) != 0)
              v398 = 4;
            else
              v398 = 5;
            *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v398;
            if (v397 >= (const char *)&__dsta && ((unint64_t)&__dsta | v398) > (unint64_t)v397)
              goto LABEL_1032;
            memcpy(&__dsta, v397, v398);
            __dsta.__r_.__value_.__s.__data_[v398] = 0;
            if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
            {
              v399 = __dsta.__r_.__value_.__l.__size_;
              if ((__dsta.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                goto LABEL_1032;
              v401 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
              v400 = __dsta.__r_.__value_.__l.__size_ == 0;
              if (__dsta.__r_.__value_.__l.__size_)
              {
                if (!__dsta.__r_.__value_.__r.__words[0])
                  goto LABEL_1032;
              }
            }
            else
            {
              v399 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
              v400 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]) == 0;
              v401 = &__dsta;
            }
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v402 = 22;
            else
              v402 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v403 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            else
              v403 = __str.__r_.__value_.__l.__size_;
            if (v402 - v403 >= v399)
            {
              if (!v400)
              {
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v404 = &__str;
                else
                  v404 = (std::string *)__str.__r_.__value_.__r.__words[0];
                v405 = (char *)v404 + v403;
                if ((std::string *)((char *)v404 + v403) <= v401 && &v405[v399] > (char *)v401)
                  goto LABEL_1032;
                memmove(v405, v401, v399);
                v406 = v403 + v399;
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  __str.__r_.__value_.__l.__size_ = v403 + v399;
                else
                  *((_BYTE *)&__str.__r_.__value_.__s + 23) = v406 & 0x7F;
                v404->__r_.__value_.__s.__data_[v406] = 0;
              }
            }
            else
            {
              std::string::__grow_by_and_replace(&__str, v402, v403 + v399 - v402, v403, v403, 0, v399, (const std::string::value_type *)v401);
            }
            if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dsta.__r_.__value_.__l.__data_);
            v26 += v389 == 63;
            if (v389 == 63)
              v390 = 0;
            else
              ++v390;
            v389 = v390;
          }
          while (v26 != v388 || v410 != v390);
        }
        LODWORD(v212) = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        v213 = __str.__r_.__value_.__r.__words[2];
        v211 = __str.__r_.__value_.__l.__size_;
        v8 = (std::string *)__dst;
LABEL_1016:
        v407 = (char)v212;
        v408 = (v213 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        v212 = v212;
        if ((v212 & 0x80u) == 0)
          v220 = 22;
        else
          v220 = v408;
        if ((v212 & 0x80u) != 0)
          v212 = v211;
        if (v220 == v212)
        {
LABEL_1022:
          std::string::__grow_by_and_replace(&__str, v220, 1uLL, v220, v220, 0, 1uLL, "]");
LABEL_1030:
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          v387 = __str.__r_.__value_.__r.__words[2];
          goto LABEL_1031;
        }
        v221 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v407 >= 0)
          v221 = &__str;
        v409 = (char *)v221 + v212;
        if ((char *)v221 + v212 <= "]" && v409 + 1 > "]")
          goto LABEL_1032;
        *v409 = 93;
        v223 = v212 + 1;
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1028;
        goto LABEL_486;
      }
      if (v34)
        goto LABEL_955;
      if ((std::string *)((char *)&__str.__r_.__value_.__l.__data_ + 1) > p_dsta
        || (std::string *)((char *)&__str.__r_.__value_.__l.__data_ + size + 1) <= p_dsta)
      {
        memmove((char *)&__str.__r_.__value_.__l.__data_ + 1, p_dsta, size);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          __str.__r_.__value_.__l.__size_ = size + 1;
        else
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = size + 1;
        __str.__r_.__value_.__s.__data_[size + 1] = 0;
        goto LABEL_955;
      }
LABEL_1032:
      __break(1u);
LABEL_1033:
      abort();
    case 8:
      v36 = *a2;
      memset(&__dsta, 0, sizeof(__dsta));
      if (&__dsta <= (std::string *)"[" && (char *)&__dsta.__r_.__value_.__l.__data_ + 1 > "[")
        goto LABEL_1032;
      LOWORD(__dsta.__r_.__value_.__l.__data_) = 91;
      *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = 1;
      if (!*((_BYTE *)v36 + 24))
        goto LABEL_1034;
      v38 = *(_DWORD **)v36;
      v37 = (_DWORD *)*((_QWORD *)v36 + 1);
      if (*(_DWORD **)v36 == v37)
        goto LABEL_94;
      v39 = snprintf((char *)&__str, 0x20uLL, "%d", *v38);
      if (v39 < 0)
        goto LABEL_1033;
      v40 = v39;
      if (v39 > 0x16)
      {
        v224 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v39 | 7) != 0x17)
          v224 = v39 | 7;
        v225 = v224 + 1;
        p_p_new_stuff = (std::string::value_type *)operator new(v224 + 1);
        v416 = v40;
        v417 = v225 | 0x8000000000000000;
        __p_new_stuff = p_p_new_stuff;
      }
      else
      {
        HIBYTE(v417) = v39;
        p_p_new_stuff = (std::string::value_type *)&__p_new_stuff;
      }
      v226 = &p_p_new_stuff[v40];
      if (p_p_new_stuff <= (std::string::value_type *)&__str && &p_p_new_stuff[v40] > (std::string::value_type *)&__str)
        goto LABEL_1032;
      if ((_DWORD)v40)
        memcpy(p_p_new_stuff, &__str, v40);
      v412 = v8;
      *v226 = 0;
      if (SHIBYTE(v417) < 0)
      {
        v227 = v416;
        if ((v416 & 0x8000000000000000) != 0)
          goto LABEL_1032;
        v229 = __p_new_stuff;
        v228 = v416 == 0;
        if (v416)
        {
          if (!__p_new_stuff)
            goto LABEL_1032;
        }
      }
      else
      {
        v227 = HIBYTE(v417);
        v228 = HIBYTE(v417) == 0;
        v229 = (char *)&__p_new_stuff;
      }
      if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v254 = 22;
      else
        v254 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v255 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
      else
        v255 = __dsta.__r_.__value_.__l.__size_;
      if (v254 - v255 >= v227)
      {
        if (!v228)
        {
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v256 = &__dsta;
          else
            v256 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
          v257 = (char *)v256 + v255;
          if ((char *)v256 + v255 <= v229 && &v257[v227] > v229)
            goto LABEL_1032;
          memmove(v257, v229, v227);
          v258 = v255 + v227;
          if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
            __dsta.__r_.__value_.__l.__size_ = v255 + v227;
          else
            *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v258 & 0x7F;
          v256->__r_.__value_.__s.__data_[v258] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&__dsta, v254, v255 + v227 - v254, v255, v255, 0, v227, v229);
      }
      if (SHIBYTE(v417) < 0)
        operator delete(__p_new_stuff);
      v279 = v38 + 1;
      if (v38 + 1 == v37)
        goto LABEL_937;
      while (1)
      {
        v280 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v281 = 22;
        else
          v281 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v280 = __dsta.__r_.__value_.__l.__size_;
        if (v281 == v280)
        {
          std::string::__grow_by_and_replace(&__dsta, v281, 1uLL, v281, v281, 0, 1uLL, ",");
        }
        else
        {
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v282 = &__dsta;
          else
            v282 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
          if ((char *)v282 + v280 <= "," && (char *)&v282->__r_.__value_.__l.__data_ + v280 + 1 > ",")
            goto LABEL_1032;
          v282->__r_.__value_.__s.__data_[v280] = 44;
          v284 = v280 + 1;
          if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
            __dsta.__r_.__value_.__l.__size_ = v284;
          else
            *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v284 & 0x7F;
          v282->__r_.__value_.__s.__data_[v284] = 0;
        }
        v285 = snprintf((char *)&__str, 0x20uLL, "%d", *v279);
        if (v285 < 0)
          goto LABEL_1033;
        v286 = v285;
        if (v285 > 0x16)
        {
          v290 = (v285 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v285 | 7) != 0x17)
            v290 = v285 | 7;
          v291 = v290 + 1;
          v287 = (std::string::value_type *)operator new(v290 + 1);
          v416 = v286;
          v417 = v291 | 0x8000000000000000;
          __p_new_stuff = v287;
          v288 = &v287[v286];
          v289 = &v287[v286] > (std::string::value_type *)&__str;
          if (v287 <= (std::string::value_type *)&__str)
          {
LABEL_669:
            if (v289)
              goto LABEL_1032;
          }
        }
        else
        {
          HIBYTE(v417) = v285;
          v287 = (std::string::value_type *)&__p_new_stuff;
          v288 = (char *)&__p_new_stuff + v286;
          v289 = (char *)&__p_new_stuff + v286 > (char *)&__str;
          if (&__p_new_stuff <= (std::string::value_type **)&__str)
            goto LABEL_669;
        }
        if ((_DWORD)v286)
          memcpy(v287, &__str, v286);
        *v288 = 0;
        if (SHIBYTE(v417) < 0)
        {
          v292 = v416;
          if ((v416 & 0x8000000000000000) != 0)
            goto LABEL_1032;
          v294 = __p_new_stuff;
          v293 = v416 == 0;
          if (v416)
          {
            if (!__p_new_stuff)
              goto LABEL_1032;
          }
        }
        else
        {
          v292 = HIBYTE(v417);
          v293 = HIBYTE(v417) == 0;
          v294 = (char *)&__p_new_stuff;
        }
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v295 = 22;
        else
          v295 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v296 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        else
          v296 = __dsta.__r_.__value_.__l.__size_;
        if (v295 - v296 >= v292)
        {
          if (!v293)
          {
            if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v297 = &__dsta;
            else
              v297 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
            v298 = (char *)v297 + v296;
            if ((char *)v297 + v296 <= v294 && &v298[v292] > v294)
              goto LABEL_1032;
            memmove(v298, v294, v292);
            v299 = v296 + v292;
            if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
              __dsta.__r_.__value_.__l.__size_ = v296 + v292;
            else
              *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v299 & 0x7F;
            v297->__r_.__value_.__s.__data_[v299] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&__dsta, v295, v296 + v292 - v295, v296, v296, 0, v292, v294);
        }
        if (SHIBYTE(v417) < 0)
          operator delete(__p_new_stuff);
        if (++v279 == v37)
          goto LABEL_937;
      }
    case 9:
      v42 = *a2;
      memset(&__dsta, 0, sizeof(__dsta));
      if (&__dsta <= (std::string *)"[" && (char *)&__dsta.__r_.__value_.__l.__data_ + 1 > "[")
        goto LABEL_1032;
      LOWORD(__dsta.__r_.__value_.__l.__data_) = 91;
      *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = 1;
      if (!*((_BYTE *)v42 + 24))
        goto LABEL_1034;
      v44 = *(_DWORD **)v42;
      v43 = (_DWORD *)*((_QWORD *)v42 + 1);
      if (*(_DWORD **)v42 == v43)
        goto LABEL_94;
      v45 = snprintf((char *)&__str, 0x20uLL, "%u", *v44);
      if (v45 < 0)
        goto LABEL_1033;
      v46 = v45;
      if (v45 > 0x16)
      {
        v230 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v45 | 7) != 0x17)
          v230 = v45 | 7;
        v231 = v230 + 1;
        v47 = (std::string::value_type *)operator new(v230 + 1);
        v416 = v46;
        v417 = v231 | 0x8000000000000000;
        __p_new_stuff = v47;
      }
      else
      {
        HIBYTE(v417) = v45;
        v47 = (std::string::value_type *)&__p_new_stuff;
      }
      v232 = &v47[v46];
      if (v47 <= (std::string::value_type *)&__str && &v47[v46] > (std::string::value_type *)&__str)
        goto LABEL_1032;
      if ((_DWORD)v46)
        memcpy(v47, &__str, v46);
      v412 = v8;
      *v232 = 0;
      if (SHIBYTE(v417) < 0)
      {
        v233 = v416;
        if ((v416 & 0x8000000000000000) != 0)
          goto LABEL_1032;
        v235 = __p_new_stuff;
        v234 = v416 == 0;
        if (v416)
        {
          if (!__p_new_stuff)
            goto LABEL_1032;
        }
      }
      else
      {
        v233 = HIBYTE(v417);
        v234 = HIBYTE(v417) == 0;
        v235 = (char *)&__p_new_stuff;
      }
      if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v259 = 22;
      else
        v259 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v260 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
      else
        v260 = __dsta.__r_.__value_.__l.__size_;
      if (v259 - v260 >= v233)
      {
        if (!v234)
        {
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v261 = &__dsta;
          else
            v261 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
          v262 = (char *)v261 + v260;
          if ((char *)v261 + v260 <= v235 && &v262[v233] > v235)
            goto LABEL_1032;
          memmove(v262, v235, v233);
          v263 = v260 + v233;
          if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
            __dsta.__r_.__value_.__l.__size_ = v260 + v233;
          else
            *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v263 & 0x7F;
          v261->__r_.__value_.__s.__data_[v263] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&__dsta, v259, v260 + v233 - v259, v260, v260, 0, v233, v235);
      }
      if (SHIBYTE(v417) < 0)
        operator delete(__p_new_stuff);
      v300 = v44 + 1;
      if (v44 + 1 == v43)
        goto LABEL_937;
      while (1)
      {
        v301 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v302 = 22;
        else
          v302 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v301 = __dsta.__r_.__value_.__l.__size_;
        if (v302 == v301)
        {
          std::string::__grow_by_and_replace(&__dsta, v302, 1uLL, v302, v302, 0, 1uLL, ",");
        }
        else
        {
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v303 = &__dsta;
          else
            v303 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
          if ((char *)v303 + v301 <= "," && (char *)&v303->__r_.__value_.__l.__data_ + v301 + 1 > ",")
            goto LABEL_1032;
          v303->__r_.__value_.__s.__data_[v301] = 44;
          v305 = v301 + 1;
          if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
            __dsta.__r_.__value_.__l.__size_ = v305;
          else
            *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v305 & 0x7F;
          v303->__r_.__value_.__s.__data_[v305] = 0;
        }
        v306 = snprintf((char *)&__str, 0x20uLL, "%u", *v300);
        if (v306 < 0)
          goto LABEL_1033;
        v307 = v306;
        if (v306 > 0x16)
        {
          v311 = (v306 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v306 | 7) != 0x17)
            v311 = v306 | 7;
          v312 = v311 + 1;
          v308 = (std::string::value_type *)operator new(v311 + 1);
          v416 = v307;
          v417 = v312 | 0x8000000000000000;
          __p_new_stuff = v308;
          v309 = &v308[v307];
          v310 = &v308[v307] > (std::string::value_type *)&__str;
          if (v308 <= (std::string::value_type *)&__str)
          {
LABEL_729:
            if (v310)
              goto LABEL_1032;
          }
        }
        else
        {
          HIBYTE(v417) = v306;
          v308 = (std::string::value_type *)&__p_new_stuff;
          v309 = (char *)&__p_new_stuff + v307;
          v310 = (char *)&__p_new_stuff + v307 > (char *)&__str;
          if (&__p_new_stuff <= (std::string::value_type **)&__str)
            goto LABEL_729;
        }
        if ((_DWORD)v307)
          memcpy(v308, &__str, v307);
        *v309 = 0;
        if (SHIBYTE(v417) < 0)
        {
          v313 = v416;
          if ((v416 & 0x8000000000000000) != 0)
            goto LABEL_1032;
          v315 = __p_new_stuff;
          v314 = v416 == 0;
          if (v416)
          {
            if (!__p_new_stuff)
              goto LABEL_1032;
          }
        }
        else
        {
          v313 = HIBYTE(v417);
          v314 = HIBYTE(v417) == 0;
          v315 = (char *)&__p_new_stuff;
        }
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v316 = 22;
        else
          v316 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v317 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        else
          v317 = __dsta.__r_.__value_.__l.__size_;
        if (v316 - v317 >= v313)
        {
          if (!v314)
          {
            if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v318 = &__dsta;
            else
              v318 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
            v319 = (char *)v318 + v317;
            if ((char *)v318 + v317 <= v315 && &v319[v313] > v315)
              goto LABEL_1032;
            memmove(v319, v315, v313);
            v320 = v317 + v313;
            if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
              __dsta.__r_.__value_.__l.__size_ = v317 + v313;
            else
              *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v320 & 0x7F;
            v318->__r_.__value_.__s.__data_[v320] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&__dsta, v316, v317 + v313 - v316, v317, v317, 0, v313, v315);
        }
        if (SHIBYTE(v417) < 0)
          operator delete(__p_new_stuff);
        if (++v300 == v43)
          goto LABEL_937;
      }
    case 10:
      v48 = *a2;
      memset(&__dsta, 0, sizeof(__dsta));
      if (&__dsta <= (std::string *)"[" && (char *)&__dsta.__r_.__value_.__l.__data_ + 1 > "[")
        goto LABEL_1032;
      LOWORD(__dsta.__r_.__value_.__l.__data_) = 91;
      *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = 1;
      if (!*((_BYTE *)v48 + 24))
        goto LABEL_1034;
      v50 = *(uint64_t **)v48;
      v49 = (uint64_t *)*((_QWORD *)v48 + 1);
      if (*(uint64_t **)v48 == v49)
        goto LABEL_94;
      v412 = (std::string *)__dst;
      v51 = snprintf((char *)&__str, 0x20uLL, "%.16g", (double)*v50);
      if (v51 < 0)
        goto LABEL_1033;
      v52 = v51;
      if (v51 >= 0x17)
      {
        v236 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17)
          v236 = v51 | 7;
        v237 = v236 + 1;
        v53 = (std::string::value_type *)operator new(v236 + 1);
        v416 = v52;
        v417 = v237 | 0x8000000000000000;
        __p_new_stuff = v53;
      }
      else
      {
        HIBYTE(v417) = v51;
        v53 = (std::string::value_type *)&__p_new_stuff;
      }
      v238 = &v53[v52];
      if (v53 <= (std::string::value_type *)&__str && &v53[v52] > (std::string::value_type *)&__str)
        goto LABEL_1032;
      if ((_DWORD)v52)
        memcpy(v53, &__str, v52);
      *v238 = 0;
      if (SHIBYTE(v417) < 0)
      {
        v239 = v416;
        if ((v416 & 0x8000000000000000) != 0)
          goto LABEL_1032;
        v241 = __p_new_stuff;
        v240 = v416 == 0;
        if (v416)
        {
          if (!__p_new_stuff)
            goto LABEL_1032;
        }
      }
      else
      {
        v239 = HIBYTE(v417);
        v240 = HIBYTE(v417) == 0;
        v241 = (char *)&__p_new_stuff;
      }
      if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v264 = 22;
      else
        v264 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v265 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
      else
        v265 = __dsta.__r_.__value_.__l.__size_;
      if (v264 - v265 >= v239)
      {
        if (!v240)
        {
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v266 = &__dsta;
          else
            v266 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
          v267 = (char *)v266 + v265;
          if ((char *)v266 + v265 <= v241 && &v267[v239] > v241)
            goto LABEL_1032;
          memmove(v267, v241, v239);
          v268 = v265 + v239;
          if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
            __dsta.__r_.__value_.__l.__size_ = v265 + v239;
          else
            *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v268 & 0x7F;
          v266->__r_.__value_.__s.__data_[v268] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&__dsta, v264, v265 + v239 - v264, v265, v265, 0, v239, v241);
      }
      if (SHIBYTE(v417) < 0)
        operator delete(__p_new_stuff);
      v321 = v50 + 1;
      if (v50 + 1 == v49)
        goto LABEL_937;
      while (1)
      {
        v322 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v323 = 22;
        else
          v323 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v322 = __dsta.__r_.__value_.__l.__size_;
        if (v323 == v322)
        {
          std::string::__grow_by_and_replace(&__dsta, v323, 1uLL, v323, v323, 0, 1uLL, ",");
        }
        else
        {
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v324 = &__dsta;
          else
            v324 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
          if ((char *)v324 + v322 <= "," && (char *)&v324->__r_.__value_.__l.__data_ + v322 + 1 > ",")
            goto LABEL_1032;
          v324->__r_.__value_.__s.__data_[v322] = 44;
          v326 = v322 + 1;
          if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
            __dsta.__r_.__value_.__l.__size_ = v326;
          else
            *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v326 & 0x7F;
          v324->__r_.__value_.__s.__data_[v326] = 0;
        }
        v327 = snprintf((char *)&__str, 0x20uLL, "%.16g", (double)*v321);
        if (v327 < 0)
          goto LABEL_1033;
        v328 = v327;
        if (v327 > 0x16)
        {
          v332 = (v327 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v327 | 7) != 0x17)
            v332 = v327 | 7;
          v333 = v332 + 1;
          v329 = (std::string::value_type *)operator new(v332 + 1);
          v416 = v328;
          v417 = v333 | 0x8000000000000000;
          __p_new_stuff = v329;
          v330 = &v329[v328];
          v331 = &v329[v328] > (std::string::value_type *)&__str;
          if (v329 <= (std::string::value_type *)&__str)
          {
LABEL_789:
            if (v331)
              goto LABEL_1032;
          }
        }
        else
        {
          HIBYTE(v417) = v327;
          v329 = (std::string::value_type *)&__p_new_stuff;
          v330 = (char *)&__p_new_stuff + v328;
          v331 = (char *)&__p_new_stuff + v328 > (char *)&__str;
          if (&__p_new_stuff <= (std::string::value_type **)&__str)
            goto LABEL_789;
        }
        if ((_DWORD)v328)
          memcpy(v329, &__str, v328);
        *v330 = 0;
        if (SHIBYTE(v417) < 0)
        {
          v334 = v416;
          if ((v416 & 0x8000000000000000) != 0)
            goto LABEL_1032;
          v336 = __p_new_stuff;
          v335 = v416 == 0;
          if (v416)
          {
            if (!__p_new_stuff)
              goto LABEL_1032;
          }
        }
        else
        {
          v334 = HIBYTE(v417);
          v335 = HIBYTE(v417) == 0;
          v336 = (char *)&__p_new_stuff;
        }
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v337 = 22;
        else
          v337 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v338 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        else
          v338 = __dsta.__r_.__value_.__l.__size_;
        if (v337 - v338 >= v334)
        {
          if (!v335)
          {
            if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v339 = &__dsta;
            else
              v339 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
            v340 = (char *)v339 + v338;
            if ((char *)v339 + v338 <= v336 && &v340[v334] > v336)
              goto LABEL_1032;
            memmove(v340, v336, v334);
            v341 = v338 + v334;
            if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
              __dsta.__r_.__value_.__l.__size_ = v338 + v334;
            else
              *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v341 & 0x7F;
            v339->__r_.__value_.__s.__data_[v341] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&__dsta, v337, v338 + v334 - v337, v338, v338, 0, v334, v336);
        }
        if (SHIBYTE(v417) < 0)
          operator delete(__p_new_stuff);
        if (++v321 == v49)
          goto LABEL_937;
      }
    case 11:
      v54 = *a2;
      memset(&__dsta, 0, sizeof(__dsta));
      if (&__dsta <= (std::string *)"[" && (char *)&__dsta.__r_.__value_.__l.__data_ + 1 > "[")
        goto LABEL_1032;
      LOWORD(__dsta.__r_.__value_.__l.__data_) = 91;
      *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = 1;
      if (!*((_BYTE *)v54 + 24))
        goto LABEL_1034;
      v56 = *(unint64_t **)v54;
      v55 = (unint64_t *)*((_QWORD *)v54 + 1);
      if (*(unint64_t **)v54 == v55)
        goto LABEL_94;
      v412 = (std::string *)__dst;
      v57 = snprintf((char *)&__str, 0x20uLL, "%.16g", (double)*v56);
      if (v57 < 0)
        goto LABEL_1033;
      v58 = v57;
      if (v57 >= 0x17)
      {
        v242 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v57 | 7) != 0x17)
          v242 = v57 | 7;
        v243 = v242 + 1;
        v59 = (std::string::value_type *)operator new(v242 + 1);
        v416 = v58;
        v417 = v243 | 0x8000000000000000;
        __p_new_stuff = v59;
      }
      else
      {
        HIBYTE(v417) = v57;
        v59 = (std::string::value_type *)&__p_new_stuff;
      }
      v244 = &v59[v58];
      if (v59 <= (std::string::value_type *)&__str && &v59[v58] > (std::string::value_type *)&__str)
        goto LABEL_1032;
      if ((_DWORD)v58)
        memcpy(v59, &__str, v58);
      *v244 = 0;
      if (SHIBYTE(v417) < 0)
      {
        v245 = v416;
        if ((v416 & 0x8000000000000000) != 0)
          goto LABEL_1032;
        v247 = __p_new_stuff;
        v246 = v416 == 0;
        if (v416)
        {
          if (!__p_new_stuff)
            goto LABEL_1032;
        }
      }
      else
      {
        v245 = HIBYTE(v417);
        v246 = HIBYTE(v417) == 0;
        v247 = (char *)&__p_new_stuff;
      }
      if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v269 = 22;
      else
        v269 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v270 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
      else
        v270 = __dsta.__r_.__value_.__l.__size_;
      if (v269 - v270 >= v245)
      {
        if (!v246)
        {
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v271 = &__dsta;
          else
            v271 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
          v272 = (char *)v271 + v270;
          if ((char *)v271 + v270 <= v247 && &v272[v245] > v247)
            goto LABEL_1032;
          memmove(v272, v247, v245);
          v273 = v270 + v245;
          if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
            __dsta.__r_.__value_.__l.__size_ = v270 + v245;
          else
            *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v273 & 0x7F;
          v271->__r_.__value_.__s.__data_[v273] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&__dsta, v269, v270 + v245 - v269, v270, v270, 0, v245, v247);
      }
      if (SHIBYTE(v417) < 0)
        operator delete(__p_new_stuff);
      v342 = v56 + 1;
      if (v56 + 1 == v55)
        goto LABEL_937;
      while (1)
      {
        v343 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v344 = 22;
        else
          v344 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v343 = __dsta.__r_.__value_.__l.__size_;
        if (v344 == v343)
        {
          std::string::__grow_by_and_replace(&__dsta, v344, 1uLL, v344, v344, 0, 1uLL, ",");
        }
        else
        {
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v345 = &__dsta;
          else
            v345 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
          if ((char *)v345 + v343 <= "," && (char *)&v345->__r_.__value_.__l.__data_ + v343 + 1 > ",")
            goto LABEL_1032;
          v345->__r_.__value_.__s.__data_[v343] = 44;
          v347 = v343 + 1;
          if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
            __dsta.__r_.__value_.__l.__size_ = v347;
          else
            *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v347 & 0x7F;
          v345->__r_.__value_.__s.__data_[v347] = 0;
        }
        v348 = snprintf((char *)&__str, 0x20uLL, "%.16g", (double)*v342);
        if (v348 < 0)
          goto LABEL_1033;
        v349 = v348;
        if (v348 > 0x16)
        {
          v353 = (v348 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v348 | 7) != 0x17)
            v353 = v348 | 7;
          v354 = v353 + 1;
          v350 = (std::string::value_type *)operator new(v353 + 1);
          v416 = v349;
          v417 = v354 | 0x8000000000000000;
          __p_new_stuff = v350;
          v351 = &v350[v349];
          v352 = &v350[v349] > (std::string::value_type *)&__str;
          if (v350 <= (std::string::value_type *)&__str)
          {
LABEL_849:
            if (v352)
              goto LABEL_1032;
          }
        }
        else
        {
          HIBYTE(v417) = v348;
          v350 = (std::string::value_type *)&__p_new_stuff;
          v351 = (char *)&__p_new_stuff + v349;
          v352 = (char *)&__p_new_stuff + v349 > (char *)&__str;
          if (&__p_new_stuff <= (std::string::value_type **)&__str)
            goto LABEL_849;
        }
        if ((_DWORD)v349)
          memcpy(v350, &__str, v349);
        *v351 = 0;
        if (SHIBYTE(v417) < 0)
        {
          v355 = v416;
          if ((v416 & 0x8000000000000000) != 0)
            goto LABEL_1032;
          v357 = __p_new_stuff;
          v356 = v416 == 0;
          if (v416)
          {
            if (!__p_new_stuff)
              goto LABEL_1032;
          }
        }
        else
        {
          v355 = HIBYTE(v417);
          v356 = HIBYTE(v417) == 0;
          v357 = (char *)&__p_new_stuff;
        }
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v358 = 22;
        else
          v358 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v359 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        else
          v359 = __dsta.__r_.__value_.__l.__size_;
        if (v358 - v359 >= v355)
        {
          if (!v356)
          {
            if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v360 = &__dsta;
            else
              v360 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
            v361 = (char *)v360 + v359;
            if ((char *)v360 + v359 <= v357 && &v361[v355] > v357)
              goto LABEL_1032;
            memmove(v361, v357, v355);
            v362 = v359 + v355;
            if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
              __dsta.__r_.__value_.__l.__size_ = v359 + v355;
            else
              *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v362 & 0x7F;
            v360->__r_.__value_.__s.__data_[v362] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&__dsta, v358, v359 + v355 - v358, v359, v359, 0, v355, v357);
        }
        if (SHIBYTE(v417) < 0)
          operator delete(__p_new_stuff);
        if (++v342 == v55)
          goto LABEL_937;
      }
    case 12:
      v60 = *a2;
      memset(&__dsta, 0, sizeof(__dsta));
      if (&__dsta <= (std::string *)"[" && (char *)&__dsta.__r_.__value_.__l.__data_ + 1 > "[")
        goto LABEL_1032;
      LOWORD(__dsta.__r_.__value_.__l.__data_) = 91;
      *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = 1;
      if (!*((_BYTE *)v60 + 24))
        goto LABEL_1034;
      v62 = *(double **)v60;
      v61 = (double *)*((_QWORD *)v60 + 1);
      if (*(double **)v60 == v61)
      {
LABEL_94:
        v66 = 0;
        LODWORD(v67) = 1;
        v68 = __dsta.__r_.__value_.__r.__words[2];
      }
      else
      {
        v412 = (std::string *)__dst;
        v63 = snprintf((char *)&__str, 0x20uLL, "%.16g", *v62);
        if (v63 < 0)
          goto LABEL_1033;
        v64 = v63;
        if (v63 >= 0x17)
        {
          v248 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v63 | 7) != 0x17)
            v248 = v63 | 7;
          v249 = v248 + 1;
          v65 = (std::string::value_type *)operator new(v248 + 1);
          v416 = v64;
          v417 = v249 | 0x8000000000000000;
          __p_new_stuff = v65;
        }
        else
        {
          HIBYTE(v417) = v63;
          v65 = (std::string::value_type *)&__p_new_stuff;
        }
        v250 = &v65[v64];
        if (v65 <= (std::string::value_type *)&__str && &v65[v64] > (std::string::value_type *)&__str)
          goto LABEL_1032;
        if ((_DWORD)v64)
          memcpy(v65, &__str, v64);
        *v250 = 0;
        if (SHIBYTE(v417) < 0)
        {
          v251 = v416;
          if ((v416 & 0x8000000000000000) != 0)
            goto LABEL_1032;
          v253 = __p_new_stuff;
          v252 = v416 == 0;
          if (v416)
          {
            if (!__p_new_stuff)
              goto LABEL_1032;
          }
        }
        else
        {
          v251 = HIBYTE(v417);
          v252 = HIBYTE(v417) == 0;
          v253 = (char *)&__p_new_stuff;
        }
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v274 = 22;
        else
          v274 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v275 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        else
          v275 = __dsta.__r_.__value_.__l.__size_;
        if (v274 - v275 >= v251)
        {
          if (!v252)
          {
            if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v276 = &__dsta;
            else
              v276 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
            v277 = (char *)v276 + v275;
            if ((char *)v276 + v275 <= v253 && &v277[v251] > v253)
              goto LABEL_1032;
            memmove(v277, v253, v251);
            v278 = v275 + v251;
            if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
              __dsta.__r_.__value_.__l.__size_ = v275 + v251;
            else
              *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v278 & 0x7F;
            v276->__r_.__value_.__s.__data_[v278] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&__dsta, v274, v275 + v251 - v274, v275, v275, 0, v251, v253);
        }
        if (SHIBYTE(v417) < 0)
          operator delete(__p_new_stuff);
        for (i = v62 + 1; i != v61; ++i)
        {
          v364 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v365 = 22;
          else
            v365 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v364 = __dsta.__r_.__value_.__l.__size_;
          if (v365 == v364)
          {
            std::string::__grow_by_and_replace(&__dsta, v365, 1uLL, v365, v365, 0, 1uLL, ",");
          }
          else
          {
            if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v366 = &__dsta;
            else
              v366 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
            if ((char *)v366 + v364 <= "," && (char *)&v366->__r_.__value_.__l.__data_ + v364 + 1 > ",")
              goto LABEL_1032;
            v366->__r_.__value_.__s.__data_[v364] = 44;
            v368 = v364 + 1;
            if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
              __dsta.__r_.__value_.__l.__size_ = v368;
            else
              *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v368 & 0x7F;
            v366->__r_.__value_.__s.__data_[v368] = 0;
          }
          v369 = snprintf((char *)&__str, 0x20uLL, "%.16g", *i);
          if (v369 < 0)
            goto LABEL_1033;
          v370 = v369;
          if (v369 > 0x16)
          {
            v374 = (v369 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v369 | 7) != 0x17)
              v374 = v369 | 7;
            v375 = v374 + 1;
            v371 = (std::string::value_type *)operator new(v374 + 1);
            v416 = v370;
            v417 = v375 | 0x8000000000000000;
            __p_new_stuff = v371;
            v372 = &v371[v370];
            v373 = &v371[v370] > (std::string::value_type *)&__str;
            if (v371 <= (std::string::value_type *)&__str)
            {
LABEL_909:
              if (v373)
                goto LABEL_1032;
            }
          }
          else
          {
            HIBYTE(v417) = v369;
            v371 = (std::string::value_type *)&__p_new_stuff;
            v372 = (char *)&__p_new_stuff + v370;
            v373 = (char *)&__p_new_stuff + v370 > (char *)&__str;
            if (&__p_new_stuff <= (std::string::value_type **)&__str)
              goto LABEL_909;
          }
          if ((_DWORD)v370)
            memcpy(v371, &__str, v370);
          *v372 = 0;
          if (SHIBYTE(v417) < 0)
          {
            v376 = v416;
            if ((v416 & 0x8000000000000000) != 0)
              goto LABEL_1032;
            v378 = __p_new_stuff;
            v377 = v416 == 0;
            if (v416)
            {
              if (!__p_new_stuff)
                goto LABEL_1032;
            }
          }
          else
          {
            v376 = HIBYTE(v417);
            v377 = HIBYTE(v417) == 0;
            v378 = (char *)&__p_new_stuff;
          }
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v379 = 22;
          else
            v379 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v380 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
          else
            v380 = __dsta.__r_.__value_.__l.__size_;
          if (v379 - v380 >= v376)
          {
            if (!v377)
            {
              if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v381 = &__dsta;
              else
                v381 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
              v382 = (char *)v381 + v380;
              if ((char *)v381 + v380 <= v378 && &v382[v376] > v378)
                goto LABEL_1032;
              memmove(v382, v378, v376);
              v383 = v380 + v376;
              if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
                __dsta.__r_.__value_.__l.__size_ = v380 + v376;
              else
                *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v383 & 0x7F;
              v381->__r_.__value_.__s.__data_[v383] = 0;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(&__dsta, v379, v380 + v376 - v379, v380, v380, 0, v376, v378);
          }
          if (SHIBYTE(v417) < 0)
            operator delete(__p_new_stuff);
        }
LABEL_937:
        LODWORD(v67) = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        v68 = __dsta.__r_.__value_.__r.__words[2];
        v66 = __dsta.__r_.__value_.__l.__size_;
        v8 = v412;
      }
      v384 = (char)v67;
      v385 = (v68 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v67 = v67;
      if ((v67 & 0x80u) == 0)
        v204 = 22;
      else
        v204 = v385;
      if ((v67 & 0x80u) != 0)
        v67 = v66;
      if (v204 == v67)
      {
        v205 = "]";
        goto LABEL_945;
      }
      v206 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
      if (v384 >= 0)
        v206 = &__dsta;
      v386 = (char *)v206 + v67;
      if ((char *)v206 + v67 <= "]" && v386 + 1 > "]")
        goto LABEL_1032;
      *v386 = 93;
      v208 = v67 + 1;
      if ((SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_951;
      goto LABEL_454;
    case 13:
      v69 = *a2;
      memset(&__str, 0, sizeof(__str));
      if (&__str <= (std::string *)"[" && (char *)&__str.__r_.__value_.__l.__data_ + 1 > "[")
        goto LABEL_1032;
      strcpy((char *)&__str, "[");
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = 1;
      if (!*((_BYTE *)v69 + 24))
        goto LABEL_1034;
      v70 = *(std::string ***)v69;
      v71 = (std::string **)*((_QWORD *)v69 + 1);
      if (*(std::string ***)v69 == v71)
      {
        v210 = 0;
        LODWORD(v209) = 1;
LABEL_475:
        v219 = (char)v209;
        v209 = v209;
        if ((v209 & 0x80u) == 0)
          v220 = 22;
        else
          v220 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v209 & 0x80u) != 0)
          v209 = v210;
        if (v220 == v209)
          goto LABEL_1022;
        v221 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v219 >= 0)
          v221 = &__str;
        v222 = (char *)v221 + v209;
        if ((char *)v221 + v209 <= "]" && v222 + 1 > "]")
          goto LABEL_1032;
        *v222 = 93;
        v223 = v209 + 1;
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_1028:
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = v223 & 0x7F;
          goto LABEL_1029;
        }
LABEL_486:
        __str.__r_.__value_.__l.__size_ = v223;
LABEL_1029:
        v221->__r_.__value_.__s.__data_[v223] = 0;
        goto LABEL_1030;
      }
      v72 = &byte_208EB9246;
      while (1)
      {
        v73 = strlen(v72);
        v74 = v73;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v75 = 22;
        else
          v75 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v76 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v76 = __str.__r_.__value_.__l.__size_;
        if (v75 - v76 >= v73)
        {
          if (v73)
          {
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v77 = &__str;
            else
              v77 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((char *)v77 + v76 <= v72 && (char *)v77 + v76 + v73 > v72)
              goto LABEL_1032;
            memcpy((char *)v77 + v76, v72, v73);
            v79 = v76 + v74;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              __str.__r_.__value_.__l.__size_ = v76 + v74;
            else
              *((_BYTE *)&__str.__r_.__value_.__s + 23) = v79 & 0x7F;
            v77->__r_.__value_.__s.__data_[v79] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&__str, v75, v76 + v73 - v75, v76, v76, 0, v73, v72);
        }
        v80 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = 22;
        else
          v81 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v80 = __str.__r_.__value_.__l.__size_;
        if (v81 == v80)
        {
          std::string::__grow_by_and_replace(&__str, v81, 1uLL, v81, v81, 0, 1uLL, "\"");
          v82 = *((char *)v70 + 23);
          if ((v82 & 0x80000000) == 0)
            goto LABEL_129;
        }
        else
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v85 = &__str;
          else
            v85 = (std::string *)__str.__r_.__value_.__r.__words[0];
          v86 = (char *)v85 + v80;
          if ((char *)v85 + v80 <= "\"" && v86 + 1 > "\"")
            goto LABEL_1032;
          *v86 = 34;
          v87 = v80 + 1;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            __str.__r_.__value_.__l.__size_ = v87;
            v85->__r_.__value_.__s.__data_[v87] = 0;
            v82 = *((char *)v70 + 23);
            if ((v82 & 0x80000000) == 0)
            {
LABEL_129:
              v83 = v82;
              v84 = (std::string *)v70;
              goto LABEL_141;
            }
          }
          else
          {
            *((_BYTE *)&__str.__r_.__value_.__s + 23) = v87 & 0x7F;
            v85->__r_.__value_.__s.__data_[v87] = 0;
            v82 = *((char *)v70 + 23);
            if ((v82 & 0x80000000) == 0)
              goto LABEL_129;
          }
        }
        v83 = (std::string::size_type)v70[1];
        if ((v83 & 0x8000000000000000) != 0)
          goto LABEL_1032;
        v84 = *v70;
        if (v83)
        {
          if (!v84)
            goto LABEL_1032;
        }
        if (v83 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1033;
LABEL_141:
        if (v83 > 0x16)
        {
          v90 = (v83 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v83 | 7) != 0x17)
            v90 = v83 | 7;
          v91 = v90 + 1;
          v88 = (std::string *)operator new(v90 + 1);
          __dsta.__r_.__value_.__l.__size_ = v83;
          __dsta.__r_.__value_.__r.__words[2] = v91 | 0x8000000000000000;
          __dsta.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
          v89 = (std::string *)((char *)v88 + v83);
          if (v88 > v84)
            goto LABEL_148;
        }
        else
        {
          *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v83;
          v88 = &__dsta;
          v89 = (std::string *)((char *)&__dsta + v83);
          if (&__dsta > v84)
            goto LABEL_148;
        }
        if (v89 > v84)
          goto LABEL_1032;
LABEL_148:
        if (v83)
          memmove(v88, v84, v83);
        v89->__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
        {
          v92 = __dsta.__r_.__value_.__l.__size_;
          if ((__dsta.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_1032;
          v94 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
          v93 = __dsta.__r_.__value_.__l.__size_ == 0;
          if (__dsta.__r_.__value_.__l.__size_)
          {
            if (!__dsta.__r_.__value_.__r.__words[0])
              goto LABEL_1032;
          }
        }
        else
        {
          v92 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
          v93 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]) == 0;
          v94 = &__dsta;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v95 = 22;
        else
          v95 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v96 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v96 = __str.__r_.__value_.__l.__size_;
        if (v95 - v96 >= v92)
        {
          if (v93)
          {
LABEL_172:
            if ((SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_173;
          }
          else
          {
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v97 = &__str;
            else
              v97 = (std::string *)__str.__r_.__value_.__r.__words[0];
            v98 = (char *)v97 + v96;
            if ((std::string *)((char *)v97 + v96) <= v94 && &v98[v92] > (char *)v94)
              goto LABEL_1032;
            memmove(v98, v94, v92);
            v99 = v96 + v92;
            if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              *((_BYTE *)&__str.__r_.__value_.__s + 23) = v99 & 0x7F;
              v97->__r_.__value_.__s.__data_[v99] = 0;
              goto LABEL_172;
            }
            __str.__r_.__value_.__l.__size_ = v96 + v92;
            v97->__r_.__value_.__s.__data_[v99] = 0;
            if ((SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_173;
          }
LABEL_163:
          operator delete(__dsta.__r_.__value_.__l.__data_);
          goto LABEL_173;
        }
        std::string::__grow_by_and_replace(&__str, v95, v96 + v92 - v95, v96, v96, 0, v92, (const std::string::value_type *)v94);
        if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_163;
LABEL_173:
        v100 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v101 = 22;
        else
          v101 = (__str.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v100 = __str.__r_.__value_.__l.__size_;
        if (v101 == v100)
        {
          std::string::__grow_by_and_replace(&__str, v101, 1uLL, v101, v101, 0, 1uLL, "\"");
        }
        else
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v102 = &__str;
          else
            v102 = (std::string *)__str.__r_.__value_.__r.__words[0];
          v103 = (char *)v102 + v100;
          if ((char *)v102 + v100 <= "\"" && v103 + 1 > "\"")
            goto LABEL_1032;
          *v103 = 34;
          v104 = v100 + 1;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            __str.__r_.__value_.__l.__size_ = v104;
          else
            *((_BYTE *)&__str.__r_.__value_.__s + 23) = v104 & 0x7F;
          v102->__r_.__value_.__s.__data_[v104] = 0;
        }
        v70 += 3;
        v72 = ",";
        if (v70 == v71)
        {
          LODWORD(v209) = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          v210 = __str.__r_.__value_.__l.__size_;
          v8 = (std::string *)__dst;
          goto LABEL_475;
        }
      }
    case 14:
      v105 = *a2;
      memset(&__dsta, 0, sizeof(__dsta));
      if (&__dsta <= (std::string *)"{" && (char *)&__dsta.__r_.__value_.__l.__data_ + 1 > "{")
        goto LABEL_1032;
      LOWORD(__dsta.__r_.__value_.__l.__data_) = 123;
      *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = 1;
      if (!*((_BYTE *)v105 + 24))
        goto LABEL_1034;
      v108 = *(_QWORD **)v105;
      v106 = v105 + 1;
      v107 = v108;
      if (v108 == v106)
        goto LABEL_439;
      v414 = (std::string *)__dst;
      v109 = &byte_208EB9246;
      while (1)
      {
        v110 = strlen(v109);
        v111 = v110;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v112 = 22;
        else
          v112 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v113 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        else
          v113 = __dsta.__r_.__value_.__l.__size_;
        if (v112 - v113 >= v110)
        {
          if (v110)
          {
            if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v114 = &__dsta;
            else
              v114 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
            if ((char *)v114 + v113 <= v109 && (char *)v114 + v113 + v110 > v109)
              goto LABEL_1032;
            memcpy((char *)v114 + v113, v109, v110);
            v116 = v113 + v111;
            if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
              __dsta.__r_.__value_.__l.__size_ = v113 + v111;
            else
              *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v116 & 0x7F;
            v114->__r_.__value_.__s.__data_[v116] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&__dsta, v112, v113 + v110 - v112, v113, v113, 0, v110, v109);
        }
        v117 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v118 = 22;
        else
          v118 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v117 = __dsta.__r_.__value_.__l.__size_;
        if (v118 == v117)
        {
          std::string::__grow_by_and_replace(&__dsta, v118, 1uLL, v118, v118, 0, 1uLL, "\"");
          v119 = (char *)(v107 + 4);
          v120 = *((char *)v107 + 55);
          if ((v120 & 0x80000000) == 0)
            goto LABEL_225;
        }
        else
        {
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v123 = &__dsta;
          else
            v123 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
          v124 = (char *)v123 + v117;
          if ((char *)v123 + v117 <= "\"" && v124 + 1 > "\"")
            goto LABEL_1032;
          *v124 = 34;
          v125 = v117 + 1;
          if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
          {
            __dsta.__r_.__value_.__l.__size_ = v125;
            v123->__r_.__value_.__s.__data_[v125] = 0;
            v119 = (char *)(v107 + 4);
            v120 = *((char *)v107 + 55);
            if ((v120 & 0x80000000) == 0)
            {
LABEL_225:
              v121 = v120;
              v122 = v120 == 0;
              goto LABEL_236;
            }
          }
          else
          {
            *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v125 & 0x7F;
            v123->__r_.__value_.__s.__data_[v125] = 0;
            v119 = (char *)(v107 + 4);
            v120 = *((char *)v107 + 55);
            if ((v120 & 0x80000000) == 0)
              goto LABEL_225;
          }
        }
        v121 = v107[5];
        if ((v121 & 0x8000000000000000) != 0)
          goto LABEL_1032;
        v119 = *(char **)v119;
        v122 = v121 == 0;
        if (v121)
        {
          if (!v119)
            goto LABEL_1032;
        }
LABEL_236:
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v126 = 22;
        else
          v126 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v127 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        else
          v127 = __dsta.__r_.__value_.__l.__size_;
        if (v126 - v127 >= v121)
        {
          if (!v122)
          {
            if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v128 = &__dsta;
            else
              v128 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
            v129 = (char *)v128 + v127;
            if ((char *)v128 + v127 <= v119 && &v129[v121] > v119)
              goto LABEL_1032;
            memmove(v129, v119, v121);
            v130 = v127 + v121;
            if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
              __dsta.__r_.__value_.__l.__size_ = v127 + v121;
            else
              *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v130 & 0x7F;
            v128->__r_.__value_.__s.__data_[v130] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(&__dsta, v126, v127 + v121 - v126, v127, v127, 0, v121, v119);
        }
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v131 = 22;
        else
          v131 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v132 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        else
          v132 = __dsta.__r_.__value_.__l.__size_;
        if (v131 - v132 >= 2)
        {
          if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v133 = &__dsta;
          else
            v133 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
          v134 = (_WORD *)((char *)v133 + v132);
          if ((char *)v133 + v132 <= "\":" && v134 + 1 > (_WORD *)"\":")
            goto LABEL_1032;
          *v134 = 14882;
          v135 = v132 + 2;
          if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
            __dsta.__r_.__value_.__l.__size_ = v132 + 2;
          else
            *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v135 & 0x7F;
          v133->__r_.__value_.__s.__data_[v135] = 0;
        }
        else
        {
          std::string::__grow_by_and_replace(&__dsta, v131, v132 - v131 + 2, v132, v132, 0, 2uLL, "\":");
        }
        v136 = snprintf((char *)&__str, 0x20uLL, "%.16g", (double)(unint64_t)v107[7]);
        if (v136 < 0)
          goto LABEL_1033;
        v137 = v136;
        if (v136 > 0x16)
        {
          v141 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v136 | 7) != 0x17)
            v141 = v136 | 7;
          v142 = v141 + 1;
          v138 = (std::string::value_type *)operator new(v141 + 1);
          v416 = v137;
          v417 = v142 | 0x8000000000000000;
          __p_new_stuff = v138;
          v139 = &v138[v137];
          v140 = &v138[v137] > (std::string::value_type *)&__str;
          if (v138 > (std::string::value_type *)&__str)
            goto LABEL_281;
        }
        else
        {
          HIBYTE(v417) = v136;
          v138 = (std::string::value_type *)&__p_new_stuff;
          v139 = (char *)&__p_new_stuff + v137;
          v140 = (char *)&__p_new_stuff + v137 > (char *)&__str;
          if (&__p_new_stuff > (std::string::value_type **)&__str)
            goto LABEL_281;
        }
        if (v140)
          goto LABEL_1032;
LABEL_281:
        if ((_DWORD)v137)
          memcpy(v138, &__str, v137);
        *v139 = 0;
        if (SHIBYTE(v417) < 0)
        {
          v143 = v416;
          if ((v416 & 0x8000000000000000) != 0)
            goto LABEL_1032;
          v145 = __p_new_stuff;
          v144 = v416 == 0;
          if (v416)
          {
            if (!__p_new_stuff)
              goto LABEL_1032;
          }
        }
        else
        {
          v143 = HIBYTE(v417);
          v144 = HIBYTE(v417) == 0;
          v145 = (const std::string::value_type *)&__p_new_stuff;
        }
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v146 = 22;
        else
          v146 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v147 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
        else
          v147 = __dsta.__r_.__value_.__l.__size_;
        if (v146 - v147 < v143)
        {
          std::string::__grow_by_and_replace(&__dsta, v146, v147 + v143 - v146, v147, v147, 0, v143, v145);
          if (SHIBYTE(v417) < 0)
            goto LABEL_296;
          goto LABEL_307;
        }
        if (v144)
          goto LABEL_306;
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v149 = &__dsta;
        else
          v149 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
        v150 = (char *)v149 + v147;
        if ((char *)v149 + v147 <= v145 && &v150[v143] > v145)
          goto LABEL_1032;
        memmove(v150, v145, v143);
        v151 = v147 + v143;
        if ((SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v151 & 0x7F;
          v149->__r_.__value_.__s.__data_[v151] = 0;
LABEL_306:
          if (SHIBYTE(v417) < 0)
            goto LABEL_296;
          goto LABEL_307;
        }
        __dsta.__r_.__value_.__l.__size_ = v147 + v143;
        v149->__r_.__value_.__s.__data_[v151] = 0;
        if (SHIBYTE(v417) < 0)
        {
LABEL_296:
          operator delete(__p_new_stuff);
          v148 = (_QWORD *)v107[1];
          if (v148)
            goto LABEL_308;
          goto LABEL_310;
        }
LABEL_307:
        v148 = (_QWORD *)v107[1];
        if (v148)
        {
          do
          {
LABEL_308:
            v152 = v148;
            v148 = (_QWORD *)*v148;
          }
          while (v148);
          goto LABEL_197;
        }
        do
        {
LABEL_310:
          v152 = (_QWORD *)v107[2];
          v20 = *v152 == (_QWORD)v107;
          v107 = v152;
        }
        while (!v20);
LABEL_197:
        v109 = ",";
        v107 = v152;
        if (v152 == v106)
          goto LABEL_438;
      }
    case 15:
      v153 = *a2;
      memset(&__dsta, 0, sizeof(__dsta));
      if (&__dsta <= (std::string *)"{" && (char *)&__dsta.__r_.__value_.__l.__data_ + 1 > "{")
        goto LABEL_1032;
      LOWORD(__dsta.__r_.__value_.__l.__data_) = 123;
      *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = 1;
      if (!*((_BYTE *)v153 + 24))
LABEL_1034:
        std::__throw_bad_optional_access[abi:sn180100]();
      v156 = *(_QWORD **)v153;
      v154 = v153 + 1;
      v155 = v156;
      if (v156 == v154)
      {
LABEL_439:
        v202 = 0;
        LODWORD(v201) = 1;
LABEL_440:
        v203 = (char)v201;
        v201 = v201;
        if ((v201 & 0x80u) == 0)
          v204 = 22;
        else
          v204 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if ((v201 & 0x80u) != 0)
          v201 = v202;
        if (v204 == v201)
        {
          v205 = "}";
LABEL_945:
          std::string::__grow_by_and_replace(&__dsta, v204, 1uLL, v204, v204, 0, 1uLL, v205);
          goto LABEL_952;
        }
        v206 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
        if (v203 >= 0)
          v206 = &__dsta;
        if ((char *)v206 + v201 <= "}" && (char *)&v206->__r_.__value_.__l.__data_ + v201 + 1 > "}")
          goto LABEL_1032;
        v206->__r_.__value_.__s.__data_[v201] = 125;
        v208 = v201 + 1;
        if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_454:
          __dsta.__r_.__value_.__l.__size_ = v208;
          v206->__r_.__value_.__s.__data_[v208] = 0;
LABEL_952:
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__dsta.__r_.__value_.__l.__data_;
          v387 = __dsta.__r_.__value_.__r.__words[2];
LABEL_1031:
          v8->__r_.__value_.__r.__words[2] = v387;
          return;
        }
LABEL_951:
        *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v208 & 0x7F;
        v206->__r_.__value_.__s.__data_[v208] = 0;
        goto LABEL_952;
      }
      v414 = (std::string *)__dst;
      v157 = &byte_208EB9246;
      break;
    default:
      absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)__dst, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  while (1)
  {
    v158 = strlen(v157);
    v159 = v158;
    if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v160 = 22;
    else
      v160 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v161 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
    else
      v161 = __dsta.__r_.__value_.__l.__size_;
    if (v160 - v161 >= v158)
    {
      if (v158)
      {
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v162 = &__dsta;
        else
          v162 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
        if ((char *)v162 + v161 <= v157 && (char *)v162 + v161 + v158 > v157)
          goto LABEL_1032;
        memcpy((char *)v162 + v161, v157, v158);
        v164 = v161 + v159;
        if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
          __dsta.__r_.__value_.__l.__size_ = v161 + v159;
        else
          *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v164 & 0x7F;
        v162->__r_.__value_.__s.__data_[v164] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&__dsta, v160, v161 + v158 - v160, v161, v161, 0, v158, v157);
    }
    v165 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
    if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v166 = 22;
    else
      v166 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v165 = __dsta.__r_.__value_.__l.__size_;
    if (v166 == v165)
    {
      std::string::__grow_by_and_replace(&__dsta, v166, 1uLL, v166, v166, 0, 1uLL, "\"");
      v167 = (char *)(v155 + 4);
      v168 = *((char *)v155 + 55);
      if ((v168 & 0x80000000) == 0)
        goto LABEL_348;
    }
    else
    {
      if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v171 = &__dsta;
      else
        v171 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
      v172 = (char *)v171 + v165;
      if ((char *)v171 + v165 <= "\"" && v172 + 1 > "\"")
        goto LABEL_1032;
      *v172 = 34;
      v173 = v165 + 1;
      if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
      {
        __dsta.__r_.__value_.__l.__size_ = v173;
        v171->__r_.__value_.__s.__data_[v173] = 0;
        v167 = (char *)(v155 + 4);
        v168 = *((char *)v155 + 55);
        if ((v168 & 0x80000000) == 0)
        {
LABEL_348:
          v169 = v168;
          v170 = v168 == 0;
          goto LABEL_359;
        }
      }
      else
      {
        *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v173 & 0x7F;
        v171->__r_.__value_.__s.__data_[v173] = 0;
        v167 = (char *)(v155 + 4);
        v168 = *((char *)v155 + 55);
        if ((v168 & 0x80000000) == 0)
          goto LABEL_348;
      }
    }
    v169 = v155[5];
    if ((v169 & 0x8000000000000000) != 0)
      goto LABEL_1032;
    v167 = *(char **)v167;
    v170 = v169 == 0;
    if (v169)
    {
      if (!v167)
        goto LABEL_1032;
    }
LABEL_359:
    if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v174 = 22;
    else
      v174 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v175 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
    else
      v175 = __dsta.__r_.__value_.__l.__size_;
    if (v174 - v175 >= v169)
    {
      if (!v170)
      {
        if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v176 = &__dsta;
        else
          v176 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
        v177 = (char *)v176 + v175;
        if ((char *)v176 + v175 <= v167 && &v177[v169] > v167)
          goto LABEL_1032;
        memmove(v177, v167, v169);
        v178 = v175 + v169;
        if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
          __dsta.__r_.__value_.__l.__size_ = v175 + v169;
        else
          *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v178 & 0x7F;
        v176->__r_.__value_.__s.__data_[v178] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&__dsta, v174, v175 + v169 - v174, v175, v175, 0, v169, v167);
    }
    if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v179 = 22;
    else
      v179 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v180 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
    else
      v180 = __dsta.__r_.__value_.__l.__size_;
    if (v179 - v180 >= 2)
    {
      if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v181 = &__dsta;
      else
        v181 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
      v182 = (_WORD *)((char *)v181 + v180);
      if ((char *)v181 + v180 <= "\":" && v182 + 1 > (_WORD *)"\":")
        goto LABEL_1032;
      *v182 = 14882;
      v183 = v180 + 2;
      if (SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) < 0)
        __dsta.__r_.__value_.__l.__size_ = v180 + 2;
      else
        *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v183 & 0x7F;
      v181->__r_.__value_.__s.__data_[v183] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&__dsta, v179, v180 - v179 + 2, v180, v180, 0, 2uLL, "\":");
    }
    v184 = snprintf((char *)&__str, 0x20uLL, "%.16g", *((double *)v155 + 7));
    if (v184 < 0)
      goto LABEL_1033;
    v185 = v184;
    if (v184 > 0x16)
    {
      v189 = (v184 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v184 | 7) != 0x17)
        v189 = v184 | 7;
      v190 = v189 + 1;
      v186 = (std::string::value_type *)operator new(v189 + 1);
      v416 = v185;
      v417 = v190 | 0x8000000000000000;
      __p_new_stuff = v186;
      v187 = &v186[v185];
      v188 = &v186[v185] > (std::string::value_type *)&__str;
      if (v186 > (std::string::value_type *)&__str)
        goto LABEL_404;
    }
    else
    {
      HIBYTE(v417) = v184;
      v186 = (std::string::value_type *)&__p_new_stuff;
      v187 = (char *)&__p_new_stuff + v185;
      v188 = (char *)&__p_new_stuff + v185 > (char *)&__str;
      if (&__p_new_stuff > (std::string::value_type **)&__str)
        goto LABEL_404;
    }
    if (v188)
      goto LABEL_1032;
LABEL_404:
    if ((_DWORD)v185)
      memcpy(v186, &__str, v185);
    *v187 = 0;
    if (SHIBYTE(v417) < 0)
    {
      v191 = v416;
      if ((v416 & 0x8000000000000000) != 0)
        goto LABEL_1032;
      v193 = __p_new_stuff;
      v192 = v416 == 0;
      if (v416)
      {
        if (!__p_new_stuff)
          goto LABEL_1032;
      }
    }
    else
    {
      v191 = HIBYTE(v417);
      v192 = HIBYTE(v417) == 0;
      v193 = (const std::string::value_type *)&__p_new_stuff;
    }
    if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v194 = 22;
    else
      v194 = (__dsta.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v195 = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
    else
      v195 = __dsta.__r_.__value_.__l.__size_;
    if (v194 - v195 < v191)
    {
      std::string::__grow_by_and_replace(&__dsta, v194, v195 + v191 - v194, v195, v195, 0, v191, v193);
      if (SHIBYTE(v417) < 0)
        goto LABEL_419;
      goto LABEL_430;
    }
    if (v192)
      goto LABEL_429;
    if ((__dsta.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v197 = &__dsta;
    else
      v197 = (std::string *)__dsta.__r_.__value_.__r.__words[0];
    v198 = (char *)v197 + v195;
    if ((char *)v197 + v195 <= v193 && &v198[v191] > v193)
      goto LABEL_1032;
    memmove(v198, v193, v191);
    v199 = v195 + v191;
    if ((SHIBYTE(__dsta.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      *((_BYTE *)&__dsta.__r_.__value_.__s + 23) = v199 & 0x7F;
      v197->__r_.__value_.__s.__data_[v199] = 0;
LABEL_429:
      if (SHIBYTE(v417) < 0)
        goto LABEL_419;
      goto LABEL_430;
    }
    __dsta.__r_.__value_.__l.__size_ = v195 + v191;
    v197->__r_.__value_.__s.__data_[v199] = 0;
    if (SHIBYTE(v417) < 0)
    {
LABEL_419:
      operator delete(__p_new_stuff);
      v196 = (_QWORD *)v155[1];
      if (v196)
        goto LABEL_431;
      goto LABEL_433;
    }
LABEL_430:
    v196 = (_QWORD *)v155[1];
    if (v196)
    {
      do
      {
LABEL_431:
        v200 = v196;
        v196 = (_QWORD *)*v196;
      }
      while (v196);
      goto LABEL_320;
    }
    do
    {
LABEL_433:
      v200 = (_QWORD *)v155[2];
      v20 = *v200 == (_QWORD)v155;
      v155 = v200;
    }
    while (!v20);
LABEL_320:
    v157 = ",";
    v155 = v200;
    if (v200 == v154)
    {
LABEL_438:
      LODWORD(v201) = HIBYTE(__dsta.__r_.__value_.__r.__words[2]);
      v202 = __dsta.__r_.__value_.__l.__size_;
      v8 = v414;
      goto LABEL_440;
    }
  }
}

void std::__throw_bad_optional_access[abi:sn180100]()
{
  webrtc::AudioBuffer *v0;
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  webrtc::AudioBuffer::AudioBuffer(v0, v1, v2, v3, v4, v5, v6, v7);
}

void webrtc::AudioBuffer::AudioBuffer(webrtc::AudioBuffer *this, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t j;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t *v35;
  webrtc::SplittingFilter *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  webrtc::SplittingFilter *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  std::string *v46;
  uint64_t v47;

  *(_QWORD *)this = &off_24C0AD178;
  *((_QWORD *)this + 1) = a2 / 100;
  v8 = a4 / 100;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = v8;
  *((_QWORD *)this + 4) = a5;
  *((_QWORD *)this + 5) = (int)a6 / 100;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = a5;
  v9 = 3;
  if ((a4 - 48000) >= 0x64)
    v9 = 1;
  v10 = 2;
  if ((a4 - 32000) >= 0x64)
    v10 = v9;
  *((_QWORD *)this + 8) = v10;
  v11 = v8 % v10;
  if (v8 % v10)
  {
LABEL_37:
    v46 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, v11);
    webrtc::AudioBuffer::~AudioBuffer((webrtc::AudioBuffer *)v46);
  }
  else
  {
    *((_QWORD *)this + 9) = v8 / v10;
    v13 = (_QWORD *)operator new();
    v14 = webrtc::ChannelBuffer<float>::ChannelBuffer(v13, *((_QWORD *)this + 3), *((_QWORD *)this + 4), 1uLL);
    *(_OWORD *)((char *)this + 104) = 0u;
    *((_QWORD *)this + 10) = v14;
    *(_OWORD *)((char *)this + 88) = 0u;
    *(_OWORD *)((char *)this + 120) = 0u;
    *(_OWORD *)((char *)this + 136) = 0u;
    *((_BYTE *)this + 152) = 1;
    *((_QWORD *)this + 20) = 0;
    v15 = *((_QWORD *)this + 3);
    v16 = *((_QWORD *)this + 5);
    if (*((_QWORD *)this + 1) != v15 && *((_QWORD *)this + 4))
    {
      for (i = 0; i < *((_QWORD *)this + 4); ++i)
      {
        v18 = operator new();
        v19 = *((_QWORD *)this + 1);
        v20 = *((_QWORD *)this + 3);
        *(_QWORD *)v18 = &off_24C0BAE88;
        v21 = operator new();
        webrtc::SincResampler::SincResampler(v21, v19, v18, (double)(unint64_t)v19 / (double)v20);
        *(_QWORD *)(v18 + 8) = v22;
        *(_QWORD *)(v18 + 16) = 0;
        *(_QWORD *)(v18 + 24) = 0;
        *(_QWORD *)(v18 + 32) = 0;
        *(_QWORD *)(v18 + 40) = v20;
        *(_BYTE *)(v18 + 48) = 1;
        *(_QWORD *)(v18 + 56) = 0;
        v47 = v18;
        v23 = (uint64_t *)*((_QWORD *)this + 14);
        if ((unint64_t)v23 >= *((_QWORD *)this + 15))
        {
          *((_QWORD *)this + 14) = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)this + 13, &v47);
          v24 = v47;
          v47 = 0;
          if (v24)
            goto LABEL_15;
        }
        else
        {
          if (!v23)
          {
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
          v47 = 0;
          *v23 = v18;
          *((_QWORD *)this + 14) = v23 + 1;
          v24 = v47;
          v47 = 0;
          if (v24)
LABEL_15:
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        }
      }
    }
    if (v16 != v15 && *((_QWORD *)this + 4))
    {
      for (j = 0; j < *((_QWORD *)this + 4); ++j)
      {
        v26 = operator new();
        v27 = *((_QWORD *)this + 3);
        v28 = *((_QWORD *)this + 5);
        *(_QWORD *)v26 = &off_24C0BAE88;
        v29 = operator new();
        webrtc::SincResampler::SincResampler(v29, v27, v26, (double)(unint64_t)v27 / (double)v28);
        *(_QWORD *)(v26 + 8) = v30;
        *(_QWORD *)(v26 + 16) = 0;
        *(_QWORD *)(v26 + 24) = 0;
        *(_QWORD *)(v26 + 32) = 0;
        *(_QWORD *)(v26 + 40) = v28;
        *(_BYTE *)(v26 + 48) = 1;
        *(_QWORD *)(v26 + 56) = 0;
        v47 = v26;
        v31 = (uint64_t *)*((_QWORD *)this + 17);
        if ((unint64_t)v31 >= *((_QWORD *)this + 18))
        {
          *((_QWORD *)this + 17) = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)this + 16, &v47);
          v32 = v47;
          v47 = 0;
          if (v32)
            goto LABEL_25;
        }
        else
        {
          if (!v31)
            goto LABEL_36;
          v47 = 0;
          *v31 = v26;
          *((_QWORD *)this + 17) = v31 + 1;
          v32 = v47;
          v47 = 0;
          if (v32)
LABEL_25:
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        }
      }
    }
    if (*((_QWORD *)this + 8) >= 2uLL)
    {
      v33 = (_QWORD *)operator new();
      webrtc::ChannelBuffer<float>::ChannelBuffer(v33, *((_QWORD *)this + 3), *((_QWORD *)this + 4), *((_QWORD *)this + 8));
      v34 = (uint64_t *)*((_QWORD *)this + 11);
      *((_QWORD *)this + 11) = v33;
      if (v34)
      {
        v35 = webrtc::ChannelBuffer<float>::~ChannelBuffer(v34);
        MEMORY[0x20BD0ADEC](v35, 0x10A0C40650D7302);
      }
      v36 = (webrtc::SplittingFilter *)operator new();
      v42 = webrtc::SplittingFilter::SplittingFilter(v36, *((_QWORD *)this + 4), *((_QWORD *)this + 8), v37, v38, v39, v40, v41);
      v43 = (_QWORD *)*((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = v42;
      if (v43)
      {
        v44 = (void *)v43[4];
        if (v44)
        {
          v43[5] = v44;
          operator delete(v44);
        }
        v45 = (void *)v43[1];
        if (v45)
        {
          v43[2] = v45;
          operator delete(v45);
        }
        MEMORY[0x20BD0ADEC](v43, 0x1020C401E2BB44DLL);
      }
    }
  }
}

void webrtc::AudioBuffer::~AudioBuffer(webrtc::AudioBuffer *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  *(_QWORD *)this = &off_24C0AD178;
  v2 = (_QWORD *)*((_QWORD *)this + 16);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 17);
    v4 = (void *)*((_QWORD *)this + 16);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v2;
    operator delete(v4);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 13);
  if (v7)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 14);
    v9 = (void *)*((_QWORD *)this + 13);
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v7;
    operator delete(v9);
  }
  v12 = (_QWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v12)
  {
    v13 = (void *)v12[4];
    if (v13)
    {
      v12[5] = v13;
      operator delete(v13);
    }
    v14 = (void *)v12[1];
    if (v14)
    {
      v12[2] = v14;
      operator delete(v14);
    }
    MEMORY[0x20BD0ADEC](v12, 0x1020C401E2BB44DLL);
  }
  v15 = (uint64_t *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v15)
  {
    v16 = webrtc::ChannelBuffer<float>::~ChannelBuffer(v15);
    MEMORY[0x20BD0ADEC](v16, 0x10A0C40650D7302);
  }
  v17 = (uint64_t *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v17)
  {
    v18 = webrtc::ChannelBuffer<float>::~ChannelBuffer(v17);
    MEMORY[0x20BD0ADEC](v18, 0x10A0C40650D7302);
  }
}

{
  webrtc::AudioBuffer::~AudioBuffer(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioBuffer::CopyFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t *v19;
  float v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  const float *v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v33;
  int8x16_t v34;
  unint64_t v35;
  float32x4_t *v36;
  int8x16_t *v37;
  float32x4_t *v38;
  int8x16_t *v39;
  unint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  unint64_t v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  unint64_t v50;
  uint64_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t *v56;
  unint64_t v57;
  float32x4_t *v58;
  unint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  unint64_t v62;
  float *v63;
  float v64;
  float v65;
  uint64_t v66;
  webrtc::PushSincResampler **v67;
  unint64_t v68;
  float32x4_t *v69;
  int8x16_t *v70;
  float32x4_t v73;
  int8x16_t v74;
  unint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  unint64_t v78;
  uint64_t v79;
  float *v80;
  float *v81;
  float v82;
  float v83;
  float v84;
  float32x4_t v85;
  int8x16_t v86;
  float v87[3840];

  result = MEMORY[0x24BDAC7A8](a1, a2);
  v7 = v3;
  v8 = (uint64_t *)result;
  v9 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 56) = v9;
  v10 = *(_QWORD *)(result + 80);
  *(_QWORD *)(v10 + 48) = v9;
  v11 = *(_QWORD *)(result + 88);
  if (v11)
    *(_QWORD *)(v11 + 48) = v9;
  v12 = *(_QWORD *)(result + 16);
  v13 = v12 - 1;
  if (v12 <= 1)
  {
    v14 = *(_QWORD *)(result + 8);
    v15 = *(_QWORD *)(result + 24);
    goto LABEL_14;
  }
  v14 = *(_QWORD *)(result + 8);
  v15 = *(_QWORD *)(result + 24);
  if (v9 != 1)
  {
LABEL_14:
    if (v14 == v15)
    {
      if (v9 && v14)
      {
        v25 = 0;
        v26 = *(_QWORD *)(v10 + 8);
        __asm
        {
          FMOV            V4.4S, #1.0
          FMOV            V5.4S, #-1.0
        }
        v33.i64[0] = 0x4700000047000000;
        v33.i64[1] = 0x4700000047000000;
        v34.i64[0] = 0xC7000000C7000000;
        v34.i64[1] = 0xC7000000C7000000;
        do
        {
          v35 = 0;
          v36 = (float32x4_t *)v3[v25];
          v37 = *(int8x16_t **)(v26 + 8 * v25);
          if (v14 < 8)
            goto LABEL_24;
          if ((unint64_t)((char *)v37 - (char *)v36) < 0x20)
            goto LABEL_24;
          v38 = v36 + 1;
          v39 = v37 + 1;
          v40 = v14 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v41 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v38[-1], (float32x4_t)_Q4), _Q4, (int8x16_t)v38[-1]);
            v42 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*v38, (float32x4_t)_Q4), _Q4, *(int8x16_t *)v38);
            v39[-1] = vbslq_s8((int8x16_t)vcgtq_f32(_Q5, v41), v34, (int8x16_t)vmulq_f32(v41, v33));
            *v39 = vbslq_s8((int8x16_t)vcgtq_f32(_Q5, v42), v34, (int8x16_t)vmulq_f32(v42, v33));
            v38 += 2;
            v39 += 2;
            v40 -= 8;
          }
          while (v40);
          v35 = v14 & 0xFFFFFFFFFFFFFFF8;
          if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_24:
            v43 = v14 - v35;
            v44 = v35;
            v45 = (float *)&v37->i32[v44];
            v46 = &v36->f32[v44];
            do
            {
              v47 = *v46++;
              v48 = v47;
              if (v47 > 1.0)
                v48 = 1.0;
              if (v48 >= -1.0)
                v49 = v48 * 32768.0;
              else
                v49 = -32768.0;
              *v45++ = v49;
              --v43;
            }
            while (v43);
          }
          ++v25;
        }
        while (v25 != v9);
      }
      return result;
    }
    if (!v9)
      return result;
    v50 = 0;
    __asm
    {
      FMOV            V4.4S, #1.0
      FMOV            V5.4S, #-1.0
    }
    v85 = _Q5;
    v86 = _Q4;
    while (1)
    {
      v53 = v8[13];
      if (v50 >= (v8[14] - v53) >> 3)
        goto LABEL_70;
      result = webrtc::PushSincResampler::Resample(*(webrtc::PushSincResampler **)(v53 + 8 * v50), (const float *)v7[v50], v8[1], *(float **)(*(_QWORD *)(v10 + 8) + 8 * v50), v15, v4, v5, v6);
      v54.i64[0] = 0xC7000000C7000000;
      v54.i64[1] = 0xC7000000C7000000;
      v55.i64[0] = 0x4700000047000000;
      v55.i64[1] = 0x4700000047000000;
      v10 = v8[10];
      v15 = v8[3];
      if (v15)
      {
        v56 = *(float32x4_t **)(*(_QWORD *)(v10 + 8) + 8 * v50);
        if (v15 < 8)
        {
          v57 = 0;
LABEL_42:
          v62 = v15 - v57;
          v63 = &v56->f32[v57];
          do
          {
            v64 = *v63;
            if (*v63 > 1.0)
              v64 = 1.0;
            if (v64 >= -1.0)
              v65 = v64 * 32768.0;
            else
              v65 = -32768.0;
            *v63++ = v65;
            --v62;
          }
          while (v62);
          goto LABEL_34;
        }
        v57 = v15 & 0xFFFFFFFFFFFFFFF8;
        v58 = v56 + 1;
        v59 = v15 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v60 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v58[-1], (float32x4_t)v86), v86, (int8x16_t)v58[-1]);
          v61 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*v58, (float32x4_t)v86), v86, *(int8x16_t *)v58);
          v58[-1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v85, v60), v54, (int8x16_t)vmulq_f32(v60, v55));
          *(int8x16_t *)v58 = vbslq_s8((int8x16_t)vcgtq_f32(v85, v61), v54, (int8x16_t)vmulq_f32(v61, v55));
          v58 += 2;
          v59 -= 8;
        }
        while (v59);
        if (v15 != v57)
          goto LABEL_42;
      }
LABEL_34:
      if (++v50 >= v8[7])
        return result;
    }
  }
  if (!*(_BYTE *)(result + 152))
  {
    v24 = (const float *)v3[*(_QWORD *)(result + 160)];
LABEL_51:
    if (v14 != v15)
      goto LABEL_55;
LABEL_52:
    v66 = **(_QWORD **)(v10 + 8);
    if (!v14)
      return result;
    goto LABEL_57;
  }
  if (v14)
  {
    v16 = 0;
    v17 = 1.0 / (float)v12;
    v19 = v3 + 1;
    v18 = *v3;
    while (1)
    {
      v20 = *(float *)(v18 + 4 * v16);
      v21 = v19;
      v22 = v13;
      do
      {
        v23 = *v21++;
        v20 = v20 + *(float *)(v23 + 4 * v16);
        --v22;
      }
      while (v22);
      if (v16 == 3840)
        goto LABEL_70;
      v24 = v87;
      v87[v16++] = v17 * v20;
      if (v16 == v14)
        goto LABEL_51;
    }
  }
  v24 = v87;
  if (!v15)
    goto LABEL_52;
LABEL_55:
  v67 = *(webrtc::PushSincResampler ***)(result + 104);
  if (*(webrtc::PushSincResampler ***)(result + 112) == v67)
  {
LABEL_70:
    __break(1u);
    return result;
  }
  result = webrtc::PushSincResampler::Resample(*v67, v24, v14, **(float ***)(v10 + 8), v15, v4, v5, v6);
  v66 = **(_QWORD **)(v8[10] + 8);
  v14 = v8[3];
  v24 = (const float *)v66;
  if (v14)
  {
LABEL_57:
    v68 = 0;
    if (v14 < 8)
      goto LABEL_62;
    if ((unint64_t)(v66 - (_QWORD)v24) < 0x20)
      goto LABEL_62;
    v68 = v14 & 0xFFFFFFFFFFFFFFF8;
    v69 = (float32x4_t *)(v24 + 4);
    v70 = (int8x16_t *)(v66 + 16);
    __asm
    {
      FMOV            V0.4S, #1.0
      FMOV            V1.4S, #-1.0
    }
    v73.i64[0] = 0x4700000047000000;
    v73.i64[1] = 0x4700000047000000;
    v74.i64[0] = 0xC7000000C7000000;
    v74.i64[1] = 0xC7000000C7000000;
    v75 = v14 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v76 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v69[-1], (float32x4_t)_Q0), _Q0, (int8x16_t)v69[-1]);
      v77 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*v69, (float32x4_t)_Q0), _Q0, *(int8x16_t *)v69);
      v70[-1] = vbslq_s8((int8x16_t)vcgtq_f32(_Q1, v76), v74, (int8x16_t)vmulq_f32(v76, v73));
      *v70 = vbslq_s8((int8x16_t)vcgtq_f32(_Q1, v77), v74, (int8x16_t)vmulq_f32(v77, v73));
      v69 += 2;
      v70 += 2;
      v75 -= 8;
    }
    while (v75);
    if (v14 != v68)
    {
LABEL_62:
      v78 = v14 - v68;
      v79 = v68;
      v80 = (float *)(v66 + v79 * 4);
      v81 = (float *)&v24[v79];
      do
      {
        v82 = *v81++;
        v83 = v82;
        if (v82 > 1.0)
          v83 = 1.0;
        if (v83 >= -1.0)
          v84 = v83 * 32768.0;
        else
          v84 = -32768.0;
        *v80++ = v84;
        --v78;
      }
      while (v78);
    }
  }
  return result;
}

_QWORD *webrtc::AudioBuffer::CopyTo(_QWORD *result, uint64_t a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  unint64_t v23;
  float32x4_t *v24;
  int8x16_t *v25;
  float32x4_t *v26;
  int8x16_t *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  unint64_t v31;
  uint64_t v32;
  float *v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  unint64_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  const float *v43;
  unint64_t v44;
  unint64_t v45;
  float32x4_t *v46;
  unint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  unint64_t v50;
  float *v51;
  float v52;
  float v53;
  uint64_t v54;
  int8x16_t v55;

  v10 = result;
  v11 = result[5];
  v12 = result[7];
  if (v11 == result[3])
  {
    if (v12 && v11)
    {
      v13 = 0;
      v14 = *(_QWORD *)(result[10] + 8);
      v15.i64[0] = 0x4700000047000000;
      v15.i64[1] = 0x4700000047000000;
      v16.i64[0] = 0xC7000000C7000000;
      v16.i64[1] = 0xC7000000C7000000;
      v17.i64[0] = 0x3800000038000000;
      v17.i64[1] = 0x3800000038000000;
      __asm { FMOV            V7.4S, #-1.0 }
      do
      {
        v23 = 0;
        v24 = *(float32x4_t **)(v14 + 8 * v13);
        v25 = (int8x16_t *)a3[v13];
        if (v11 < 8)
          goto LABEL_11;
        if ((unint64_t)((char *)v25 - (char *)v24) < 0x20)
          goto LABEL_11;
        v26 = v24 + 1;
        v27 = v25 + 1;
        v28 = v11 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v29 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v26[-1], (float32x4_t)v15), v15, (int8x16_t)v26[-1]);
          v30 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*v26, (float32x4_t)v15), v15, *(int8x16_t *)v26);
          v27[-1] = vbslq_s8((int8x16_t)vcgtq_f32(v16, v29), _Q7, (int8x16_t)vmulq_f32(v29, v17));
          *v27 = vbslq_s8((int8x16_t)vcgtq_f32(v16, v30), _Q7, (int8x16_t)vmulq_f32(v30, v17));
          v26 += 2;
          v27 += 2;
          v28 -= 8;
        }
        while (v28);
        v23 = v11 & 0xFFFFFFFFFFFFFFF8;
        if (v11 != (v11 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_11:
          v31 = v11 - v23;
          v32 = v23;
          v33 = (float *)&v25->i32[v32];
          v34 = &v24->f32[v32];
          do
          {
            v35 = *v34++;
            v36 = v35;
            if (v35 > 32768.0)
              v36 = 32768.0;
            if (v36 >= -32768.0)
              v37 = v36 * 0.000030518;
            else
              v37 = -1.0;
            *v33++ = v37;
            --v31;
          }
          while (v31);
        }
        ++v13;
      }
      while (v13 != v12);
    }
    goto LABEL_38;
  }
  if (v12)
  {
    v38 = 0;
    v39.i64[0] = 0x4700000047000000;
    v39.i64[1] = 0x4700000047000000;
    v40.i64[0] = 0xC7000000C7000000;
    v40.i64[1] = 0xC7000000C7000000;
    v41.i64[0] = 0x3800000038000000;
    v41.i64[1] = 0x3800000038000000;
    __asm { FMOV            V7.4S, #-1.0 }
    v55 = _Q7;
    do
    {
      v43 = *(const float **)(*(_QWORD *)(v10[10] + 8) + 8 * v38);
      v44 = v10[3];
      if (!v44)
        goto LABEL_34;
      if (v44 >= 8)
      {
        v45 = v44 & 0xFFFFFFFFFFFFFFF8;
        v46 = (float32x4_t *)(v43 + 4);
        v47 = v44 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v48 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v46[-1], (float32x4_t)v39), v39, (int8x16_t)v46[-1]);
          v49 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*v46, (float32x4_t)v39), v39, *(int8x16_t *)v46);
          v46[-1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v40, v48), _Q7, (int8x16_t)vmulq_f32(v48, v41));
          *(int8x16_t *)v46 = vbslq_s8((int8x16_t)vcgtq_f32(v40, v49), _Q7, (int8x16_t)vmulq_f32(v49, v41));
          v46 += 2;
          v47 -= 8;
        }
        while (v47);
        if (v44 == v45)
          goto LABEL_34;
      }
      else
      {
        v45 = 0;
      }
      v50 = v44 - v45;
      v51 = (float *)&v43[v45];
      do
      {
        v52 = *v51;
        if (*v51 > 32768.0)
          v52 = 32768.0;
        if (v52 >= -32768.0)
          v53 = v52 * 0.000030518;
        else
          v53 = -1.0;
        *v51++ = v53;
        --v50;
      }
      while (v50);
LABEL_34:
      v54 = v10[16];
      if (v38 >= (v10[17] - v54) >> 3)
      {
        __break(1u);
        return result;
      }
      result = (_QWORD *)webrtc::PushSincResampler::Resample(*(webrtc::PushSincResampler **)(v54 + 8 * v38), v43, v44, (float *)a3[v38], v10[5], a6, a7, a8);
      _Q7 = v55;
      v41.i64[0] = 0x3800000038000000;
      v41.i64[1] = 0x3800000038000000;
      v40.i64[0] = 0xC7000000C7000000;
      v40.i64[1] = 0xC7000000C7000000;
      v39.i64[0] = 0x4700000047000000;
      v39.i64[1] = 0x4700000047000000;
      ++v38;
      v12 = v10[7];
    }
    while (v38 < v12);
  }
LABEL_38:
  while (v12 < *(_QWORD *)(a2 + 8))
    result = memcpy((void *)a3[v12++], *a3, 4 * v10[5]);
  return result;
}

uint64_t *webrtc::AudioBuffer::CopyTo(uint64_t *this, webrtc::AudioBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v9 = this;
  v10 = this[7];
  if (this[5] == this[3])
  {
    if (v10)
    {
      v11 = 0;
      do
      {
        this = (uint64_t *)memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)a2 + 10) + 8) + 8 * v11), *(const void **)(*(_QWORD *)(v9[10] + 8) + 8 * v11), 4 * v9[3]);
        ++v11;
        v12 = v9[7];
      }
      while (v11 < v12);
    }
    else
    {
      v12 = 0;
    }
    goto LABEL_14;
  }
  if (!v10)
  {
    v12 = 0;
LABEL_14:
    while (v12 < *((_QWORD *)a2 + 7))
      this = (uint64_t *)memcpy(*(void **)(*(_QWORD *)(*((_QWORD *)a2 + 10) + 8) + 8 * v12++), **(const void ***)(*((_QWORD *)a2 + 10) + 8), 4 * v9[5]);
    return this;
  }
  v13 = 0;
  while (1)
  {
    v14 = v9[16];
    if (v13 >= (v9[17] - v14) >> 3)
      break;
    this = (uint64_t *)webrtc::PushSincResampler::Resample(*(webrtc::PushSincResampler **)(v14 + 8 * v13), *(const float **)(*(_QWORD *)(v9[10] + 8) + 8 * v13), v9[3], *(float **)(*(_QWORD *)(*((_QWORD *)a2 + 10) + 8) + 8 * v13), *((_QWORD *)a2 + 3), a6, a7, a8);
    ++v13;
    v12 = v9[7];
    if (v13 >= v12)
      goto LABEL_14;
  }
  __break(1u);
  return this;
}

void webrtc::AudioBuffer::CopyFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int16x4_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  int16x4_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float32x4_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v21;
  int16x4_t *i;
  float32x4_t *v23;
  uint64_t v24;
  float32x4_t *v25;
  int16x4_t *v26;
  unint64_t v27;
  int16x8_t v28;
  float32x4_t v29;
  int32x4_t v30;
  unint64_t v31;
  __int16 *v32;
  unint64_t v33;
  __int32 *v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int16x8_t *v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  int32x4_t v43;
  int16x8_t *v44;
  unint64_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int16x8_t v49;
  unint64_t v50;
  __int16 *v51;
  int v52;
  unint64_t v53;
  int16x4_t *j;
  unint64_t v55;
  unint64_t v57;
  unint64_t v58;
  int16x4_t *v59;
  unint64_t v60;
  float32x4_t *v61;
  int16x8_t v62;
  float32x4_t v63;
  int32x4_t v64;
  __int16 *v65;
  uint64_t v66;
  unint64_t v67;
  float *v68;
  uint64_t v69;
  unint64_t v70;
  __int16 *v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  webrtc::PushSincResampler **v75;
  webrtc::PushSincResampler *v76;
  float *v77;
  const float *v78;
  int16x4_t *v79;
  float32x4_t *v80;
  unint64_t v81;
  int16x8_t v82;
  float32x4_t v83;
  int32x4_t v84;
  unint64_t v85;
  float *v86;
  __int16 *v87;
  int v88;
  int16x4_t *v89;
  float32x4_t *v90;
  unint64_t v91;
  int16x8_t v92;
  float32x4_t v93;
  int32x4_t v94;
  unint64_t v95;
  float *v96;
  __int16 *v97;
  int v98;
  webrtc::PushSincResampler **v99;
  float v100[8];
  _BYTE v101[15328];

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v8 = v3;
  v9 = (_QWORD *)v2;
  v10 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 56) = v10;
  v11 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)(v11 + 48) = v10;
  v12 = *(_QWORD *)(v2 + 88);
  if (v12)
    *(_QWORD *)(v12 + 48) = v10;
  v13 = *(_QWORD *)(v2 + 8);
  v14 = *(_QWORD *)(v2 + 24);
  if (v10 != 1)
  {
    if (v13 == v14)
    {
      if (!v10 || !v13)
        return;
      v18 = 0;
      v19 = *(_QWORD *)(v11 + 8);
      v21 = v13 > 0xF && v10 == 1;
      for (i = v3 + 2; ; i = (int16x4_t *)((char *)i + 2))
      {
        v23 = *(float32x4_t **)(v19 + 8 * v18);
        if (v21)
        {
          v24 = v18 + (v13 & 0xFFFFFFFFFFFFFFF0) * v10;
          v25 = v23 + 2;
          v26 = i;
          v27 = v13 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v28 = *(int16x8_t *)v26[-2].i8;
            v29 = vcvtq_f32_s32(vmovl_s16(*v26));
            v30 = vmovl_high_s16(*(int16x8_t *)v26->i8);
            v25[-2] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v28.i8));
            v25[-1] = vcvtq_f32_s32(vmovl_high_s16(v28));
            v7 = vcvtq_f32_s32(v30);
            *v25 = v29;
            v25[1] = v7;
            v25 += 4;
            v26 += 4;
            v27 -= 16;
          }
          while (v27);
          v31 = v13 & 0xFFFFFFFFFFFFFFF0;
          if (v13 == (v13 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_19;
        }
        else
        {
          v31 = 0;
          v24 = v18;
        }
        v32 = (__int16 *)v8 + v24;
        v33 = v13 - v31;
        v34 = &v23->i32[v31];
        do
        {
          v7.i16[0] = *v32;
          v7.i64[0] = vmovl_s16(*(int16x4_t *)v7.f32).u64[0];
          v7.f32[0] = (float)v7.i32[0];
          *v34++ = v7.i32[0];
          v32 += v10;
          --v33;
        }
        while (v33);
LABEL_19:
        if (++v18 == v10)
          return;
      }
    }
    if (!v10)
      return;
    v53 = 0;
    for (j = v3 + 2; ; j = (int16x4_t *)((char *)j + 2))
    {
      v55 = v9[1];
      if (v55)
      {
        if (v55 >= 0x10 && v10 == 1)
        {
          v57 = v55 & 0xFFFFFFFFFFFFFFF0;
          v58 = v53 + (v55 & 0xFFFFFFFFFFFFFFF0) * v10;
          v59 = j;
          v60 = v55 & 0xFFFFFFFFFFFFFFF0;
          v61 = (float32x4_t *)v101;
          do
          {
            v62 = *(int16x8_t *)v59[-2].i8;
            v63 = vcvtq_f32_s32(vmovl_s16(*v59));
            v64 = vmovl_high_s16(*(int16x8_t *)v59->i8);
            v61[-2] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v62.i8));
            v61[-1] = vcvtq_f32_s32(vmovl_high_s16(v62));
            v7 = vcvtq_f32_s32(v64);
            *v61 = v63;
            v61[1] = v7;
            v61 += 4;
            v59 += 4;
            v60 -= 16;
          }
          while (v60);
          if (v55 == v57)
            goto LABEL_56;
        }
        else
        {
          v57 = 0;
          v58 = v53;
        }
        v65 = (__int16 *)v8 + v58;
        v66 = 2 * v10;
        v67 = v55 - v57;
        v68 = &v100[v57];
        do
        {
          v7.i16[0] = *v65;
          v7.i64[0] = vmovl_s16(*(int16x4_t *)v7.f32).u64[0];
          v7.f32[0] = (float)v7.i32[0];
          *v68++ = v7.f32[0];
          v65 = (__int16 *)((char *)v65 + v66);
          --v67;
        }
        while (v67);
      }
LABEL_56:
      v69 = v9[13];
      if (v53 >= (v9[14] - v69) >> 3)
        goto LABEL_86;
      webrtc::PushSincResampler::Resample(*(webrtc::PushSincResampler **)(v69 + 8 * v53), v100, v55, *(float **)(*(_QWORD *)(v9[10] + 8) + 8 * v53), v9[3], v4, v5, v6);
      ++v53;
      v10 = v9[7];
      if (v53 >= v10)
        return;
    }
  }
  v15 = *(_QWORD *)(v2 + 16);
  if (v15 != 1)
  {
    if (v13 == v14)
    {
      v35 = **(float ***)(v11 + 8);
      if (*(_BYTE *)(v2 + 152))
        goto LABEL_31;
    }
    else
    {
      v35 = v100;
      if (*(_BYTE *)(v2 + 152))
      {
LABEL_31:
        if (v13)
        {
          if (v15)
          {
            v36 = 0;
            v37 = 0;
            v38 = v15 & 0xFFFFFFFFFFFFFFF0;
            v39 = (int16x8_t *)&v3[2];
            while (1)
            {
              if (v15 >= 0x10)
              {
                v42 = v36 + v38;
                v43 = 0uLL;
                v44 = v39;
                v45 = v15 & 0xFFFFFFFFFFFFFFF0;
                v46 = 0uLL;
                v47 = 0uLL;
                v48 = 0uLL;
                do
                {
                  v49 = v44[-1];
                  v46 = vaddw_high_s16(v46, v49);
                  v43 = vaddw_s16(v43, *(int16x4_t *)v49.i8);
                  v48 = vaddw_high_s16(v48, *v44);
                  v47 = vaddw_s16(v47, *(int16x4_t *)v44->i8);
                  v44 += 2;
                  v45 -= 16;
                }
                while (v45);
                v41 = vaddvq_s32(vaddq_s32(vaddq_s32(v47, v43), vaddq_s32(v48, v46)));
                v40 = v15 & 0xFFFFFFFFFFFFFFF0;
                if (v15 == v38)
                  goto LABEL_34;
              }
              else
              {
                v40 = 0;
                v41 = 0;
                v42 = v36;
              }
              v50 = v15 - v40;
              v51 = (__int16 *)v3 + v42;
              do
              {
                v52 = *v51++;
                v41 += v52;
                --v50;
              }
              while (v50);
LABEL_34:
              v36 += v15;
              v35[v37++] = (float)(v41 / (__int16)v15);
              v39 = (int16x8_t *)((char *)v39 + 2 * v15);
              if (v37 == v13)
                goto LABEL_66;
            }
          }
          bzero(v35, 4 * v13);
          if (v13 == v14)
            return;
LABEL_67:
          v75 = (webrtc::PushSincResampler **)v9[13];
          if ((webrtc::PushSincResampler **)v9[14] != v75)
          {
            v76 = *v75;
            v77 = **(float ***)(v11 + 8);
            v78 = v35;
LABEL_82:
            webrtc::PushSincResampler::Resample(v76, v78, v13, v77, v14, v4, v5, v6);
            return;
          }
LABEL_86:
          __break(1u);
          return;
        }
LABEL_66:
        if (v13 == v14)
          return;
        goto LABEL_67;
      }
    }
    if (v13)
    {
      v71 = (__int16 *)v3 + *(_QWORD *)(v2 + 160);
      v72 = 2 * v15;
      v73 = *(_QWORD *)(v2 + 8);
      v74 = v35;
      do
      {
        v7.i16[0] = *v71;
        v7.i64[0] = vmovl_s16(*(int16x4_t *)v7.f32).u64[0];
        v7.f32[0] = (float)v7.i32[0];
        *v74++ = v7.f32[0];
        v71 = (__int16 *)((char *)v71 + v72);
        --v73;
      }
      while (v73);
    }
    goto LABEL_66;
  }
  if (v13 != v14)
  {
    if (!v13)
      goto LABEL_80;
    if (v13 >= 0x10)
    {
      v70 = v13 & 0xFFFFFFFFFFFFFFF0;
      v89 = v3 + 2;
      v90 = (float32x4_t *)v101;
      v91 = v13 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v92 = *(int16x8_t *)v89[-2].i8;
        v93 = vcvtq_f32_s32(vmovl_s16(*v89));
        v94 = vmovl_high_s16(*(int16x8_t *)v89->i8);
        v90[-2] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v92.i8));
        v90[-1] = vcvtq_f32_s32(vmovl_high_s16(v92));
        *v90 = v93;
        v90[1] = vcvtq_f32_s32(v94);
        v90 += 4;
        v89 += 4;
        v91 -= 16;
      }
      while (v91);
      if (v13 == v70)
      {
LABEL_80:
        v99 = *(webrtc::PushSincResampler ***)(v2 + 104);
        if (*(webrtc::PushSincResampler ***)(v2 + 112) != v99)
        {
          v76 = *v99;
          v77 = **(float ***)(v11 + 8);
          v78 = v100;
          goto LABEL_82;
        }
        goto LABEL_86;
      }
    }
    else
    {
      v70 = 0;
    }
    v95 = v13 - v70;
    v96 = &v100[v70];
    v97 = (__int16 *)v3 + v70;
    do
    {
      v98 = *v97++;
      *v96++ = (float)v98;
      --v95;
    }
    while (v95);
    goto LABEL_80;
  }
  if (!v13)
    return;
  v16 = **(float32x4_t ***)(v11 + 8);
  if (v13 < 0x10)
  {
    v17 = 0;
LABEL_72:
    v85 = v13 - v17;
    v86 = &v16->f32[v17];
    v87 = (__int16 *)v3 + v17;
    do
    {
      v88 = *v87++;
      *v86++ = (float)v88;
      --v85;
    }
    while (v85);
    return;
  }
  v17 = v13 & 0xFFFFFFFFFFFFFFF0;
  v79 = v3 + 2;
  v80 = v16 + 2;
  v81 = v13 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v82 = *(int16x8_t *)v79[-2].i8;
    v83 = vcvtq_f32_s32(vmovl_s16(*v79));
    v84 = vmovl_high_s16(*(int16x8_t *)v79->i8);
    v80[-2] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v82.i8));
    v80[-1] = vcvtq_f32_s32(vmovl_high_s16(v82));
    *v80 = v83;
    v80[1] = vcvtq_f32_s32(v84);
    v80 += 4;
    v79 += 4;
    v81 -= 16;
  }
  while (v81);
  if (v13 != v17)
    goto LABEL_72;
}

uint64_t webrtc::AudioBuffer::CopyTo(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t *v10;
  int16x8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int8x16_t *v27;
  uint64_t v28;
  __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t *v38;
  uint64_t v39;
  int8x16_t *v40;
  unint64_t v41;
  int8x16_t *v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  unint64_t v49;
  unint64_t v50;
  float *v51;
  float v52;
  webrtc::PushSincResampler **v53;
  unint64_t v54;
  unint64_t v55;
  int16x8_t *v56;
  uint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  unint64_t v64;
  unint64_t v65;
  float *v66;
  int8x16_t *v67;
  unint64_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  __int16 *v75;
  unint64_t v76;
  float *v77;
  float v78;
  uint64_t v80;
  uint64_t v81;
  BOOL v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  __int8 *v89;
  unint64_t v90;
  __int128 v91;
  __int8 *v92;
  unint64_t v93;
  int16x8_t *v94;
  int8x16_t v95;
  int8x16_t v96;
  unint64_t v97;
  int16x8_t *v98;
  int8x16_t *v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  unint64_t v106;
  __int16 *v107;
  int8x16_t v108;
  float *v109;
  float v110;
  int8x16_t v111;
  float v112[3840];

  result = MEMORY[0x24BDAC7A8](a1, a2);
  v11 = v10;
  v12 = (uint64_t *)result;
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(_QWORD *)(result + 24);
  v16 = *(_QWORD *)(result + 40);
  v17 = *(_QWORD *)(result + 56);
  if (v17 != 1)
  {
    if (v15 == v16)
    {
      if (v17)
      {
        if (!v15)
          return result;
        v30 = 0;
        v31 = *(_QWORD *)(*(_QWORD *)(result + 80) + 8);
        v33 = v15 > 7 && v14 == 1;
        v34 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
        v35.i64[0] = 0xC7000000C7000000;
        v35.i64[1] = 0xC7000000C7000000;
        v36.i64[0] = 0x3F0000003F000000;
        v36.i64[1] = 0x3F0000003F000000;
        v37.i64[0] = 0x8000000080000000;
        v37.i64[1] = 0x8000000080000000;
        v8.i32[0] = 0.5;
        v38 = v11;
        while (1)
        {
          v39 = *(_QWORD *)(v31 + 8 * v30);
          if (!v33)
            break;
          result = v30 + (v15 & 0xFFFFFFFFFFFFFFF8) * v14;
          v40 = (int8x16_t *)v38;
          v41 = v15 & 0xFFFFFFFFFFFFFFF8;
          v42 = *(int8x16_t **)(v31 + 8 * v30);
          do
          {
            v43 = *v42;
            v44 = v42[1];
            v42 += 2;
            v45 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v43, (float32x4_t)v34), v34, v43);
            v46 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v44, (float32x4_t)v34), v34, v44);
            v47 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v35, (float32x4_t)v45), v35, v45);
            v48 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v35, (float32x4_t)v46), v35, v46);
            v9 = (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v47, (float32x4_t)vbslq_s8(v37, v36, v47))), (int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v48, (float32x4_t)vbslq_s8(v37, v36, v48))));
            *v40++ = v9;
            v41 -= 8;
          }
          while (v41);
          v49 = v15 & 0xFFFFFFFFFFFFFFF8;
          if (v15 != (v15 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_36;
LABEL_29:
          ++v30;
          v38 = (int16x8_t *)((char *)v38 + 2);
          if (v30 == v17)
            goto LABEL_68;
        }
        v49 = 0;
        result = v30;
LABEL_36:
        result = (uint64_t)v11->i64 + 2 * result;
        v50 = v15 - v49;
        v51 = (float *)(v39 + 4 * v49);
        do
        {
          v52 = *v51++;
          *(float *)v9.i32 = v52;
          if (v52 > 32767.0)
            *(float *)v9.i32 = 32767.0;
          if (*(float *)v9.i32 < -32768.0)
            *(float *)v9.i32 = -32768.0;
          *(_WORD *)result = (int)(float)(*(float *)v9.i32 + *(float *)vbslq_s8(v37, v8, v9).i32);
          result += 2 * v14;
          --v50;
        }
        while (v50);
        goto LABEL_29;
      }
LABEL_68:
      v16 = v15;
      goto LABEL_69;
    }
    if (!v17)
    {
LABEL_69:
      if (v17 >= v14 || v16 == 0)
        return result;
      v80 = 0;
      v81 = 0;
      v83 = v16 < 0x10 || v14 != 1;
      v84 = (v16 & 0xFFFFFFFFFFFFFFF0) * v14;
      v85 = v17;
      while (1)
      {
        v86 = (v81 & 0x7FFFFFFFFFFFFFF0) == 0 || v83;
        if ((v86 & 1) != 0)
        {
          v87 = 0;
          v88 = v17;
          result = v85;
        }
        else
        {
          result = v85 + v84;
          v89 = &v11->i8[2 * v17];
          v90 = v16 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v91 = *((_OWORD *)v89 + 1);
            v92 = &v89[v80];
            *(_OWORD *)v92 = *(_OWORD *)v89;
            *((_OWORD *)v92 + 1) = v91;
            v89 += 32;
            v90 -= 16;
          }
          while (v90);
          v88 = v17 + v84;
          v87 = v16 & 0xFFFFFFFFFFFFFFF0;
          if (v16 == (v16 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_80;
        }
        v93 = v16 - v87;
        v94 = v11;
        do
        {
          v94->i16[result] = v94->i16[v88];
          v94 = (int16x8_t *)((char *)v94 + 2 * v14);
          --v93;
        }
        while (v93);
LABEL_80:
        ++v85;
        ++v81;
        v80 += 2;
        if (v85 == v14)
          return result;
      }
    }
    v55 = 0;
    v56 = v11;
    v111 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
    while (1)
    {
      v57 = v12[16];
      if (v55 >= (v12[17] - v57) >> 3)
        goto LABEL_102;
      result = webrtc::PushSincResampler::Resample(*(webrtc::PushSincResampler **)(v57 + 8 * v55), *(const float **)(*(_QWORD *)(v12[10] + 8) + 8 * v55), v12[3], v112, v16, v3, v4, v5);
      v59.i64[0] = 0x3F0000003F000000;
      v59.i64[1] = 0x3F0000003F000000;
      v60.i64[0] = 0xC7000000C7000000;
      v60.i64[1] = 0xC7000000C7000000;
      v61.i64[0] = 0x8000000080000000;
      v61.i64[1] = 0x8000000080000000;
      v62.i32[0] = 0.5;
      v16 = v12[5];
      if (v16)
      {
        if (v16 < 8 || v14 != 1)
        {
          v64 = 0;
          v65 = v55;
LABEL_61:
          v75 = &v11->i16[v65];
          v76 = v16 - v64;
          v77 = &v112[v64];
          do
          {
            v78 = *v77++;
            *(float *)v58.i32 = v78;
            if (v78 > 32767.0)
              *(float *)v58.i32 = 32767.0;
            if (*(float *)v58.i32 < -32768.0)
              *(float *)v58.i32 = -32768.0;
            *v75 = (int)(float)(*(float *)v58.i32 + *(float *)vbslq_s8(v61, v62, v58).i32);
            v75 += v14;
            --v76;
          }
          while (v76);
          goto LABEL_50;
        }
        v64 = v16 & 0xFFFFFFFFFFFFFFF8;
        v65 = v55 + (v16 & 0xFFFFFFFFFFFFFFF8) * v14;
        v66 = v112;
        v67 = (int8x16_t *)v56;
        v68 = v16 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v69 = *(int8x16_t *)v66;
          v70 = *(int8x16_t *)(v66 + 4);
          v66 += 8;
          v71 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v69, (float32x4_t)v111), v111, v69);
          v72 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v70, (float32x4_t)v111), v111, v70);
          v73 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v60, (float32x4_t)v71), v60, v71);
          v74 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v60, (float32x4_t)v72), v60, v72);
          v58 = (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v73, (float32x4_t)vbslq_s8(v61, v59, v73))), (int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v74, (float32x4_t)vbslq_s8(v61, v59, v74))));
          *v67++ = v58;
          v68 -= 8;
        }
        while (v68);
        if (v16 != v64)
          goto LABEL_61;
      }
LABEL_50:
      ++v55;
      v17 = v12[7];
      v56 = (int16x8_t *)((char *)v56 + 2);
      if (v55 >= v17)
        goto LABEL_69;
    }
  }
  if (v15 == v16)
  {
    v18 = **(float ***)(*(_QWORD *)(result + 80) + 8);
    if (v14 != 1)
    {
LABEL_4:
      if (v15 && v14)
      {
        v19 = 0;
        v20 = 0;
        v21 = v14 & 0xFFFFFFFFFFFFFFF0;
        v22 = (int8x16_t *)&v11[1];
        v6.i32[0] = 0.5;
        v23.i64[0] = 0x8000000080000000;
        v23.i64[1] = 0x8000000080000000;
        v24 = v14;
        do
        {
          *(float *)v7.i32 = v18[v20];
          if (*(float *)v7.i32 > 32767.0)
            *(float *)v7.i32 = 32767.0;
          if (*(float *)v7.i32 < -32768.0)
            *(float *)v7.i32 = -32768.0;
          v25 = (int)(float)(*(float *)v7.i32 + *(float *)vbslq_s8(v23, v6, v7).i32);
          v26 = v19;
          if (v14 < 0x10)
            goto LABEL_16;
          v26 = v19 + v21;
          v7 = (int8x16_t)vdupq_n_s16(v25);
          v27 = v22;
          result = v14 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v27[-1] = v7;
            *v27 = v7;
            v27 += 2;
            result -= 16;
          }
          while (result);
          if (v14 != v21)
          {
LABEL_16:
            v28 = v24 - v26;
            v29 = &v11->i16[v26];
            do
            {
              *v29++ = v25;
              --v28;
            }
            while (v28);
          }
          v19 += v14;
          ++v20;
          v22 = (int8x16_t *)((char *)v22 + 2 * v14);
          v24 += v14;
        }
        while (v20 != v15);
      }
      return result;
    }
  }
  else
  {
    v53 = *(webrtc::PushSincResampler ***)(result + 128);
    if (*(webrtc::PushSincResampler ***)(result + 136) == v53)
    {
LABEL_102:
      __break(1u);
      return result;
    }
    v18 = v112;
    result = webrtc::PushSincResampler::Resample(*v53, **(const float ***)(*(_QWORD *)(result + 80) + 8), v15, v112, v16, v3, v4, v5);
    v15 = v12[5];
    if (v14 != 1)
      goto LABEL_4;
  }
  if (!v15)
    return result;
  if (v15 >= 8)
  {
    v54 = v15 & 0xFFFFFFFFFFFFFFF8;
    v95 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
    v6.i64[0] = 0xC7000000C7000000;
    v6.i64[1] = 0xC7000000C7000000;
    v96.i64[0] = 0x3F0000003F000000;
    v96.i64[1] = 0x3F0000003F000000;
    v7.i64[0] = 0x8000000080000000;
    v7.i64[1] = 0x8000000080000000;
    v97 = v15 & 0xFFFFFFFFFFFFFFF8;
    v98 = v11;
    v99 = (int8x16_t *)v18;
    do
    {
      v100 = *v99;
      v101 = v99[1];
      v99 += 2;
      v102 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v100, (float32x4_t)v95), v95, v100);
      v103 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v101, (float32x4_t)v95), v95, v101);
      v104 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v6, (float32x4_t)v102), v6, v102);
      v105 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v6, (float32x4_t)v103), v6, v103);
      *v98++ = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v104, (float32x4_t)vbslq_s8(v7, v96, v104))), (int16x8_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v105, (float32x4_t)vbslq_s8(v7, v96, v105))));
      v97 -= 8;
    }
    while (v97);
    if (v15 == v54)
      return result;
  }
  else
  {
    v54 = 0;
  }
  v106 = v15 - v54;
  v107 = &v11->i16[v54];
  v6.i32[0] = 0.5;
  v108.i64[0] = 0x8000000080000000;
  v108.i64[1] = 0x8000000080000000;
  v109 = &v18[v54];
  do
  {
    v110 = *v109++;
    *(float *)v7.i32 = v110;
    if (v110 > 32767.0)
      *(float *)v7.i32 = 32767.0;
    if (*(float *)v7.i32 < -32768.0)
      *(float *)v7.i32 = -32768.0;
    *v107++ = (int)(float)(*(float *)v7.i32 + *(float *)vbslq_s8(v108, v6, v7).i32);
    --v106;
  }
  while (v106);
  return result;
}

float32x4_t *webrtc::AudioBuffer::ExportSplitChannelData(float32x4_t *this, uint64_t a2, __int16 *const *a3, double a4, int8x16_t a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  uint64_t v19;
  __int16 *v20;
  unint64_t v21;
  unint64_t v22;
  __n128 *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unint64_t v30;
  __int16 *v31;
  float *v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  uint64_t v40;
  __int16 *v41;
  unint64_t v42;
  unint64_t v43;
  __n128 *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  unint64_t v51;
  __int16 *v52;
  float *v53;
  float v54;

  v10 = this[4].i64[0];
  if (v10)
  {
    v11 = this[4].u64[1];
    if (v11)
    {
      v12 = this[5].i64[1];
      if (v12)
      {
        v13 = 0;
        v14 = *(_QWORD *)(v12 + 16) + 8 * *(_QWORD *)(v12 + 56) * a2;
        a5.i32[0] = 0.5;
        v15.i64[0] = 0x8000000080000000;
        v15.i64[1] = 0x8000000080000000;
        v16 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
        v17.i64[0] = 0xC7000000C7000000;
        v17.i64[1] = 0xC7000000C7000000;
        v18.i64[0] = 0x3F0000003F000000;
        v18.i64[1] = 0x3F0000003F000000;
        while (1)
        {
          v19 = *(_QWORD *)(v14 + 8 * v13);
          v20 = a3[v13];
          if (v11 < 8)
            break;
          v22 = v11 & 0xFFFFFFFFFFFFFFF8;
          v23 = (__n128 *)a3[v13];
          this = *(float32x4_t **)(v14 + 8 * v13);
          do
          {
            v24 = *this;
            v25 = this[1];
            this += 2;
            v26 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v24, v16), (int8x16_t)v16, (int8x16_t)v24);
            v27 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v25, v16), (int8x16_t)v16, (int8x16_t)v25);
            v28 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v17, v26), (int8x16_t)v17, (int8x16_t)v26);
            v29 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v17, v27), (int8x16_t)v17, (int8x16_t)v27);
            a10 = (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vaddq_f32(v28, (float32x4_t)vbslq_s8(v15, v18, (int8x16_t)v28))), (int16x8_t)vcvtq_s32_f32(vaddq_f32(v29, (float32x4_t)vbslq_s8(v15, v18, (int8x16_t)v29))));
            *v23++ = (__n128)a10;
            v22 -= 8;
          }
          while (v22);
          v21 = v11 & 0xFFFFFFFFFFFFFFF8;
          if (v11 != (v11 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_11;
LABEL_5:
          if (++v13 == v10)
            return this;
        }
        v21 = 0;
LABEL_11:
        v30 = v11 - v21;
        v31 = &v20[v21];
        v32 = (float *)(v19 + 4 * v21);
        do
        {
          v33 = *v32++;
          *(float *)a10.i32 = v33;
          if (v33 > 32767.0)
            *(float *)a10.i32 = 32767.0;
          if (*(float *)a10.i32 < -32768.0)
            *(float *)a10.i32 = -32768.0;
          *v31++ = (int)(float)(*(float *)a10.i32 + *(float *)vbslq_s8(v15, a5, a10).i32);
          --v30;
        }
        while (v30);
        goto LABEL_5;
      }
      v34 = 0;
      v35 = *(_QWORD *)(this[5].i64[0] + 16) + 8 * *(_QWORD *)(this[5].i64[0] + 56) * a2;
      a5.i32[0] = 0.5;
      v36.i64[0] = 0x8000000080000000;
      v36.i64[1] = 0x8000000080000000;
      v37 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
      v38.i64[0] = 0xC7000000C7000000;
      v38.i64[1] = 0xC7000000C7000000;
      v39.i64[0] = 0x3F0000003F000000;
      v39.i64[1] = 0x3F0000003F000000;
      while (1)
      {
        v40 = *(_QWORD *)(v35 + 8 * v34);
        v41 = a3[v34];
        if (v11 < 8)
          break;
        v43 = v11 & 0xFFFFFFFFFFFFFFF8;
        v44 = (__n128 *)a3[v34];
        this = *(float32x4_t **)(v35 + 8 * v34);
        do
        {
          v45 = *this;
          v46 = this[1];
          this += 2;
          v47 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v45, v37), (int8x16_t)v37, (int8x16_t)v45);
          v48 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v46, v37), (int8x16_t)v37, (int8x16_t)v46);
          v49 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v38, v47), (int8x16_t)v38, (int8x16_t)v47);
          v50 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v38, v48), (int8x16_t)v38, (int8x16_t)v48);
          a10 = (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vaddq_f32(v49, (float32x4_t)vbslq_s8(v36, v39, (int8x16_t)v49))), (int16x8_t)vcvtq_s32_f32(vaddq_f32(v50, (float32x4_t)vbslq_s8(v36, v39, (int8x16_t)v50))));
          *v44++ = (__n128)a10;
          v43 -= 8;
        }
        while (v43);
        v42 = v11 & 0xFFFFFFFFFFFFFFF8;
        if (v11 != (v11 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_25;
LABEL_19:
        if (++v34 == v10)
          return this;
      }
      v42 = 0;
LABEL_25:
      v51 = v11 - v42;
      v52 = &v41[v42];
      v53 = (float *)(v40 + 4 * v42);
      do
      {
        v54 = *v53++;
        *(float *)a10.i32 = v54;
        if (v54 > 32767.0)
          *(float *)a10.i32 = 32767.0;
        if (*(float *)a10.i32 < -32768.0)
          *(float *)a10.i32 = -32768.0;
        *v52++ = (int)(float)(*(float *)a10.i32 + *(float *)vbslq_s8(v36, a5, a10).i32);
        --v51;
      }
      while (v51);
      goto LABEL_19;
    }
  }
  return this;
}

_QWORD *std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v4)
    v4 = v6 >> 2;
  v18 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
  v7 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v18)
    v7 = v4;
  if (!v7)
  {
    __break(1u);
LABEL_29:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v7 >> 61)
    goto LABEL_29;
  v9 = 8 * v7;
  v10 = (char *)operator new(8 * v7);
  v11 = &v10[v9];
  v12 = &v10[8 * v3];
  v13 = *a2;
  *a2 = 0;
  *(_QWORD *)v12 = v13;
  v14 = v12 + 8;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == (char *)*a1)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v11;
  }
  else
  {
    v17 = (unint64_t)&v16[-*a1 - 8];
    if (v17 < 0x78)
      goto LABEL_32;
    v18 = &v16[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] >= v12 || &v10[v2 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8] >= v16;
    if (!v18)
      goto LABEL_32;
    v19 = (v17 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v21 = &v16[-v20];
    v12 -= v20;
    v22 = &v10[8 * v3 - 16];
    v23 = v16 - 16;
    v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *((_OWORD *)v23 - 1);
      v25 = *(_OWORD *)v23;
      *((_OWORD *)v23 - 1) = 0uLL;
      *(_OWORD *)v23 = 0uLL;
      *((_OWORD *)v22 - 1) = v26;
      *(_OWORD *)v22 = v25;
      v22 -= 32;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    v16 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_32:
      do
      {
        v27 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v12 - 1) = v27;
        v12 -= 8;
      }
      while (v16 != v15);
    }
    v16 = (char *)*a1;
    v28 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v11;
    while (v28 != v16)
    {
      v30 = *((_QWORD *)v28 - 1);
      v28 -= 8;
      v29 = v30;
      *(_QWORD *)v28 = 0;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    }
  }
  if (v16)
    operator delete(v16);
  return v14;
}

uint64_t *webrtc::ChannelBuffer<float>::~ChannelBuffer(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  v8 = a1[8];
  if (v8)
  {
    v9 = a1[9];
    v10 = (void *)a1[8];
    if (v9 != v8)
    {
      v11 = a1[9];
      do
      {
        v13 = *(void **)(v11 - 24);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *(_QWORD *)(v9 - 16) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = (void *)a1[8];
    }
    a1[9] = v8;
    operator delete(v10);
  }
  v14 = a1[2];
  a1[2] = 0;
  if (v14)
    MEMORY[0x20BD0ADD4](v14, 0x80C80B8603338);
  v15 = a1[1];
  a1[1] = 0;
  if (v15)
    MEMORY[0x20BD0ADD4](v15, 0x80C80B8603338);
  v16 = *a1;
  *a1 = 0;
  if (v16)
    MEMORY[0x20BD0ADD4](v16, 0x1000C8052888210);
  return a1;
}

_QWORD *webrtc::ChannelBuffer<float>::ChannelBuffer(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  size_t v8;
  void *v9;
  char *v10;
  char *v11;
  char **v12;
  char **v13;
  int64_t v14;
  uint64_t v15;
  char **v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char **v21;
  int64_t v22;
  uint64_t v23;
  char **v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v5 = a3;
  if ((a3 * a2) >> 62)
    v8 = -1;
  else
    v8 = 4 * a3 * a2;
  v9 = (void *)operator new[]();
  bzero(v9, v8);
  *a1 = v9;
  a1[1] = operator new[]();
  a1[2] = operator new[]();
  a1[3] = a2;
  a1[4] = a2 / a4;
  a1[5] = v5;
  a1[6] = v5;
  a1[7] = a4;
  if (a4)
  {
    if (a4 >> 60)
      goto LABEL_54;
    v10 = (char *)operator new(16 * a4);
    v11 = &v10[16 * a4];
    bzero(v10, 16 * a4);
    a1[8] = 0;
    a1[9] = 0;
    a1[10] = 0;
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v11 = 0;
    v10 = 0;
    a1[8] = 0;
    a1[9] = 0;
    a1[10] = 0;
    if (!v5)
      goto LABEL_17;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_54;
  v12 = (char **)operator new(24 * v5);
  a1[8] = v12;
  a1[9] = v12;
  v13 = &v12[3 * v5];
  a1[10] = v13;
  v14 = v11 - v10;
  if (v11 == v10)
  {
    bzero(v12, 24 * ((24 * v5 - 24) / 0x18) + 24);
  }
  else
  {
    if (v14 < 0)
      goto LABEL_55;
    v15 = 24 * v5;
    v16 = v12 + 1;
    do
    {
      *v16 = 0;
      v16[1] = 0;
      v17 = (char *)operator new(v14);
      *(v16 - 1) = v17;
      v18 = &v17[16 * (v14 >> 4)];
      v16[1] = v18;
      memcpy(v17, v10, v14);
      *v16 = v18;
      v16 += 3;
      v15 -= 24;
    }
    while (v15);
  }
  a1[9] = v13;
LABEL_17:
  if (v10)
  {
    operator delete(v10);
    a4 = a1[7];
    v5 = a1[5];
  }
  if (!v5)
  {
    v19 = 0;
    v20 = 0;
    a1[11] = 0;
    a1[12] = 0;
    a1[13] = 0;
    if (!a4)
      goto LABEL_32;
    goto LABEL_24;
  }
  if (v5 >> 60)
    goto LABEL_54;
  v19 = (char *)operator new(16 * v5);
  v20 = &v19[16 * v5];
  bzero(v19, 16 * v5);
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  if (a4)
  {
LABEL_24:
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_54;
    v12 = (char **)operator new(24 * a4);
    a1[11] = v12;
    a1[12] = v12;
    v21 = &v12[3 * a4];
    a1[13] = v21;
    v22 = v20 - v19;
    if (v20 == v19)
    {
      bzero(v12, 24 * ((24 * a4 - 24) / 0x18) + 24);
LABEL_31:
      a1[12] = v21;
      goto LABEL_32;
    }
    if ((v22 & 0x8000000000000000) == 0)
    {
      v23 = 24 * a4;
      v24 = v12 + 1;
      do
      {
        *v24 = 0;
        v24[1] = 0;
        v25 = (char *)operator new(v22);
        *(v24 - 1) = v25;
        v26 = &v25[16 * (v22 >> 4)];
        v24[1] = v26;
        memcpy(v25, v19, v22);
        *v24 = v26;
        v24 += 3;
        v23 -= 24;
      }
      while (v23);
      goto LABEL_31;
    }
LABEL_55:
    *v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
    abort();
  }
LABEL_32:
  if (v19)
  {
    operator delete(v19);
    v5 = a1[5];
  }
  if (v5 && a1[7])
  {
    v27 = 0;
    v28 = 1;
    while (!v28)
    {
LABEL_37:
      if (++v27 >= v5)
        return a1;
    }
    v29 = 0;
    v30 = 0;
    v31 = 0;
    while (1)
    {
      v32 = a1[4];
      v33 = *a1 + 4 * (a1[3] * v27 + v32 * v31);
      if (!v32)
        v33 = 0;
      v34 = a1[11];
      if (0xAAAAAAAAAAAAAAABLL * ((a1[12] - v34) >> 3) <= v31)
        break;
      v36 = v34 + v30;
      v35 = *(_QWORD *)(v34 + v30);
      if (v27 >= (*(_QWORD *)(v36 + 8) - v35) >> 4)
        break;
      v37 = (uint64_t *)(v35 + 16 * v27);
      *v37 = v33;
      v37[1] = v32;
      v38 = a1[11];
      if (0xAAAAAAAAAAAAAAABLL * ((a1[12] - v38) >> 3) <= v31)
        break;
      v40 = v38 + v30;
      v39 = *(_QWORD *)(v38 + v30);
      if (v27 >= (*(_QWORD *)(v40 + 8) - v39) >> 4)
        break;
      v41 = a1[8];
      if (0xAAAAAAAAAAAAAAABLL * ((a1[9] - v41) >> 3) <= v27)
        break;
      v43 = (uint64_t *)(v41 + 24 * v27);
      v42 = *v43;
      if (v31 >= (v43[1] - *v43) >> 4)
        break;
      *(_OWORD *)(v42 + v29) = *(_OWORD *)(v39 + 16 * v27);
      v44 = a1[11];
      if (0xAAAAAAAAAAAAAAABLL * ((a1[12] - v44) >> 3) <= v31)
        break;
      v46 = v44 + v30;
      v45 = *(_QWORD *)(v44 + v30);
      if (v27 >= (*(_QWORD *)(v46 + 8) - v45) >> 4)
        break;
      v5 = a1[5];
      v47 = 8 * (v27 + v5 * v31);
      *(_QWORD *)(a1[1] + v47) = *(_QWORD *)(v45 + 16 * v27);
      v28 = a1[7];
      *(_QWORD *)(a1[2] + 8 * (v31 + v27 * v28)) = *(_QWORD *)(a1[1] + v47);
      ++v31;
      v30 += 24;
      v29 += 16;
      if (v31 >= v28)
        goto LABEL_37;
    }
    __break(1u);
LABEL_54:
    abort();
  }
  return a1;
}

void webrtc::GetFormatParameter(char *__src@<X1>, size_t __len@<X2>, uint64_t a3@<X0>, std::string *a4@<X8>)
{
  char *p_s1;
  size_t v9;
  size_t v10;
  char *v11;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  char v18;
  size_t v19;
  const void *v20;
  _QWORD *v21;
  size_t v22;
  size_t v23;
  int v24;
  __int128 v25;
  char v26;
  void *__s1;
  size_t v28;
  unint64_t v29;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_43:
    abort();
  if (__len > 0x16)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    p_s1 = (char *)operator new(v9 + 1);
    v28 = __len;
    v29 = v10 | 0x8000000000000000;
    __s1 = p_s1;
  }
  else
  {
    HIBYTE(v29) = __len;
    p_s1 = (char *)&__s1;
  }
  v11 = &p_s1[__len];
  if (p_s1 <= __src && v11 > __src)
    goto LABEL_42;
  v13 = a3 + 40;
  if (__len)
    memmove(p_s1, __src, __len);
  *v11 = 0;
  v15 = *(uint64_t **)(a3 + 48);
  v14 = (uint64_t *)(a3 + 48);
  v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(v13, (const void **)&__s1, v15, v14);
  if (v14 == v16)
  {
    v18 = HIBYTE(v29);
    goto LABEL_30;
  }
  v17 = v16;
  v18 = HIBYTE(v29);
  if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
    v19 = HIBYTE(v29);
    v20 = &__s1;
    goto LABEL_20;
  }
  v19 = v28;
  if ((v28 & 0x8000000000000000) != 0 || (v20 = __s1, v28) && !__s1)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_20:
  v21 = v17 + 4;
  if (*((char *)v17 + 55) < 0)
  {
    v22 = v17[5];
    if ((v22 & 0x8000000000000000) == 0)
    {
      v21 = (_QWORD *)*v21;
      if (!v22 || v21)
        goto LABEL_25;
    }
    goto LABEL_42;
  }
  v22 = *((unsigned __int8 *)v17 + 55);
LABEL_25:
  if (v22 >= v19)
    v23 = v19;
  else
    v23 = v22;
  v24 = memcmp(v20, v21, v23);
  if (v24)
  {
    if ((v24 & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (v19 < v22)
LABEL_30:
    v17 = v14;
LABEL_31:
  if (v18 < 0)
  {
    operator delete(__s1);
    if (v17 != v14)
      goto LABEL_33;
LABEL_36:
    v26 = 0;
    a4->__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_39;
  }
  if (v17 == v14)
    goto LABEL_36;
LABEL_33:
  if (*((char *)v17 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)v17[7], v17[8]);
  }
  else
  {
    v25 = *(_OWORD *)(v17 + 7);
    a4->__r_.__value_.__r.__words[2] = v17[9];
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v25;
  }
  v26 = 1;
LABEL_39:
  a4[1].__r_.__value_.__s.__data_[0] = v26;
}

void webrtc::GetFormatParameter<std::vector<unsigned char>>(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v5;
  char *v6;
  char *v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type size;
  std::string *v11;
  _BYTE *v12;
  unint64_t v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *p_p;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  size_t v22;
  std::string *v23;
  int64_t v24;
  char v25;
  BOOL v26;
  int v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char v38;
  std::string::size_type v39;
  unint64_t v40;
  char *v41;
  __int128 *v42;
  unint64_t v43;
  __int128 v44;
  char *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::string __p;
  char v50;
  std::string v51;

  webrtc::GetFormatParameter(a2, a3, a1, &__p);
  if (v50)
  {
    v51 = __p;
  }
  else
  {
    *((_BYTE *)&v51.__r_.__value_.__s + 23) = 0;
    v51.__r_.__value_.__s.__data_[0] = 0;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = SHIBYTE(v51.__r_.__value_.__r.__words[2]);
    size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v8 >= v51.__r_.__value_.__l.__size_)
      {
LABEL_90:
        *(_QWORD *)a4 = v7;
        *(_QWORD *)(a4 + 8) = v6;
        *(_QWORD *)(a4 + 16) = v5;
        *(_BYTE *)(a4 + 24) = 1;
        v7 = 0;
        if ((v9 & 0x80) == 0)
          goto LABEL_92;
        goto LABEL_91;
      }
      v11 = (std::string *)v51.__r_.__value_.__r.__words[0];
      v12 = memchr((void *)(v51.__r_.__value_.__r.__words[0] + v8), 44, v51.__r_.__value_.__l.__size_ - v8);
      if (!v12)
        goto LABEL_17;
    }
    else
    {
      if (v8 >= HIBYTE(v51.__r_.__value_.__r.__words[2]))
        goto LABEL_90;
      v11 = &v51;
      v12 = memchr((char *)&v51 + v8, 44, HIBYTE(v51.__r_.__value_.__r.__words[2]) - v8);
      if (!v12)
        goto LABEL_17;
    }
    if (v12 - (_BYTE *)v11 != -1)
    {
      v13 = v12 - (_BYTE *)v11 - v8;
      if (v9 < 0)
        goto LABEL_15;
      goto LABEL_18;
    }
LABEL_17:
    v13 = -1;
    if (v9 < 0)
    {
LABEL_15:
      size = v51.__r_.__value_.__l.__size_;
      if (v51.__r_.__value_.__l.__size_ < v8)
        goto LABEL_98;
      v14 = (std::string *)v51.__r_.__value_.__r.__words[0];
      goto LABEL_20;
    }
LABEL_18:
    if (v8 > size)
      goto LABEL_98;
    v14 = &v51;
LABEL_20:
    if (size - v8 >= v13)
      v15 = v13;
    else
      v15 = size - v8;
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_98;
    if (v15 > 0x16)
    {
      v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v17 = v15 | 7;
      v18 = v17 + 1;
      p_p = (std::string *)operator new(v17 + 1);
      __p.__r_.__value_.__l.__size_ = v15;
      __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v15;
      p_p = &__p;
    }
    v19 = (char *)v14 + v8;
    v20 = (char *)p_p + v15;
    if (p_p <= (std::string *)((char *)v14 + v8) && v20 > v19)
    {
LABEL_97:
      __break(1u);
LABEL_98:
      abort();
    }
    if (v15)
      memmove(p_p, v19, v15);
    *v20 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_97;
      v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_)
      {
        if (!__p.__r_.__value_.__r.__words[0])
          goto LABEL_97;
      }
    }
    else
    {
      v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v23 = &__p;
    }
    v24 = rtc::string_to_number_internal::ParseSigned((void **)&v23->__r_.__value_.__l.__data_, v22, 10);
    if (v25)
      v26 = v24 < (uint64_t)0xFFFFFFFF80000000;
    else
      v26 = 1;
    v28 = v26 || v24 > 0x7FFFFFFF;
    if (v28 == 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 24) = 0;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_5;
      continue;
    }
    v29 = v24;
    if (v6 < v5)
    {
      if (!v6)
        goto LABEL_97;
      *v6 = v24;
      v30 = (uint64_t)(v6 + 1);
      goto LABEL_69;
    }
    v31 = v6 - v7;
    v32 = v6 - v7 + 1;
    if (v32 < 0)
      goto LABEL_98;
    if (2 * (v5 - v7) > (unint64_t)v32)
      v32 = 2 * (v5 - v7);
    if ((unint64_t)(v5 - v7) >= 0x3FFFFFFFFFFFFFFFLL)
      v33 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v33 = v32;
    if (!v33)
      goto LABEL_97;
    v34 = (char *)operator new(v33);
    v35 = &v34[v31];
    v34[v31] = v29;
    v30 = (uint64_t)&v34[v31 + 1];
    if (v6 == v7)
    {
      v7 = &v34[v31];
      v5 = &v34[v33];
      if (v6)
        goto LABEL_68;
      goto LABEL_69;
    }
    if (v31 < 8 || v34 > &v34[v6 - v7 - 1] || v7 > v6 - 1 || (unint64_t)(v7 - v34) < 0x20)
    {
      v36 = v6;
    }
    else
    {
      if (v31 >= 0x20)
      {
        v40 = v31 & 0xFFFFFFFFFFFFFFE0;
        v41 = &v34[v31 - 16];
        v42 = (__int128 *)(v6 - 16);
        v43 = v31 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v44 = *v42;
          *((_OWORD *)v41 - 1) = *(v42 - 1);
          *(_OWORD *)v41 = v44;
          v41 -= 32;
          v42 -= 2;
          v43 -= 32;
        }
        while (v43);
        if (v31 == v40)
        {
LABEL_87:
          v6 = v7;
          v7 = v34;
          v5 = &v34[v33];
          if (v6)
            goto LABEL_68;
          goto LABEL_69;
        }
        if ((v31 & 0x18) == 0)
        {
          v35 -= v40;
          v36 = &v6[-v40];
          goto LABEL_65;
        }
      }
      else
      {
        v40 = 0;
      }
      v36 = &v6[-(v31 & 0xFFFFFFFFFFFFFFF8)];
      v35 -= v31 & 0xFFFFFFFFFFFFFFF8;
      v45 = &v34[&v6[-v40] - v7 - 8];
      v46 = (uint64_t *)&v6[-v40 - 8];
      v47 = v40 - (v31 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v48 = *v46--;
        *(_QWORD *)v45 = v48;
        v45 -= 8;
        v47 += 8;
      }
      while (v47);
      if (v31 == (v31 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_87;
    }
LABEL_65:
    v37 = v35 - 1;
    do
    {
      v38 = *--v36;
      *v37-- = v38;
    }
    while (v36 != v7);
    v6 = v7;
    v7 = v34;
    v5 = &v34[v33];
    if (v6)
LABEL_68:
      operator delete(v6);
LABEL_69:
    v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v39 = __p.__r_.__value_.__l.__size_;
    v8 += v39 + 1;
    v6 = (char *)v30;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_5:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  while ((v28 & 1) == 0);
  if ((*((_BYTE *)&v51.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_91:
    operator delete(v51.__r_.__value_.__l.__data_);
LABEL_92:
  if (v7)
    operator delete(v7);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(int a1, const void **__s2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  const void *v7;
  size_t v8;
  BOOL v9;
  int v10;
  _QWORD *v11;
  size_t v13;
  int v14;
  _QWORD *v16;
  size_t v17;
  size_t v19;
  int v20;

  if (a3)
  {
    v5 = a3;
    v7 = *__s2;
    v8 = (size_t)__s2[1];
    if (v8)
      v9 = v7 == 0;
    else
      v9 = 0;
    v10 = !v9;
    if ((*((_BYTE *)__s2 + 23) & 0x80) == 0)
    {
      v7 = (const void *)*((unsigned __int8 *)__s2 + 23);
      while (1)
      {
        v11 = v5 + 4;
        if (*((char *)v5 + 55) < 0)
        {
          v8 = v5[5];
          if ((v8 & 0x8000000000000000) != 0)
            goto LABEL_29;
          v11 = (_QWORD *)*v11;
          if (v8 && v11 == 0)
            goto LABEL_29;
        }
        else
        {
          v8 = *((unsigned __int8 *)v5 + 55);
        }
        if ((unint64_t)v7 >= v8)
          v13 = v8;
        else
          v13 = (size_t)v7;
        v14 = memcmp(v11, __s2, v13);
        if (v14)
        {
          if (v14 < 0)
            goto LABEL_10;
LABEL_25:
          a4 = v5;
          v5 = (uint64_t *)*v5;
          if (!v5)
            return a4;
        }
        else
        {
          if (v8 >= (unint64_t)v7)
            goto LABEL_25;
LABEL_10:
          v5 = (uint64_t *)v5[1];
          if (!v5)
            return a4;
        }
      }
    }
    if ((v8 & 0x8000000000000000) == 0 && v10)
    {
      while (1)
      {
LABEL_34:
        v16 = v5 + 4;
        if (*((char *)v5 + 55) < 0)
        {
          v17 = v5[5];
          if ((v17 & 0x8000000000000000) != 0)
            break;
          v16 = (_QWORD *)*v16;
          if (v17 && v16 == 0)
            break;
        }
        else
        {
          v17 = *((unsigned __int8 *)v5 + 55);
        }
        if (v8 >= v17)
          v19 = v17;
        else
          v19 = v8;
        v20 = memcmp(v16, v7, v19);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            goto LABEL_30;
        }
        else if (v17 >= v8)
        {
          goto LABEL_30;
        }
        v5 = (uint64_t *)v5[1];
        if (!v5)
          return a4;
      }
    }
LABEL_29:
    __break(1u);
LABEL_30:
    a4 = v5;
    v5 = (uint64_t *)*v5;
    if (v5)
      goto LABEL_34;
  }
  return a4;
}

void webrtc::AudioCodingModule::Create(uint64_t *a1@<X8>)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  pthread_mutexattr_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C0AD198;
  v4 = (char *)operator new(0x1680uLL);
  *(_QWORD *)(v3 + 40) = v4;
  v5 = v4 + 5760;
  *(_QWORD *)(v3 + 56) = v4 + 5760;
  bzero(v4, 0x1680uLL);
  *(_QWORD *)(v3 + 48) = v5;
  pthread_mutexattr_init(&v14);
  pthread_mutexattr_setpolicy_np(&v14, 3);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 64), &v14);
  pthread_mutexattr_destroy(&v14);
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(int32x2_t *)(v3 + 152) = vdup_n_s32(0xD87F3F9F);
  *(_QWORD *)(v3 + 160) = &unk_24C0BAE48;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_QWORD *)(v3 + 232) = 0x100000000;
  v6 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v3 + 240) = v6;
  *(_OWORD *)(v3 + 248) = xmmword_208F04EE0;
  if (v6 <= "WebRTC.Audio.TargetBitrateInKbps" && v6 + 32 > "WebRTC.Audio.TargetBitrateInKbps")
    __break(1u);
  strcpy(v6, "WebRTC.Audio.TargetBitrateInKbps");
  *(_QWORD *)(v3 + 264) = 0;
  *(_BYTE *)(v3 + 272) = -1;
  *(_DWORD *)(v3 + 280) = 0;
  *(_QWORD *)(v3 + 288) = -1;
  *(_QWORD *)(v3 + 296) = -1;
  *(_QWORD *)(v3 + 304) = 0;
  *(_DWORD *)(v3 + 312) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 328) = 0x200000004;
  *(_QWORD *)(v3 + 336) = 0;
  *(_QWORD *)(v3 + 344) = 0;
  *(_BYTE *)(v3 + 15712) = 1;
  *(_DWORD *)(v3 + 15716) = 0;
  *(_BYTE *)(v3 + 15720) = 0;
  *(_BYTE *)(v3 + 15728) = 0;
  *(_WORD *)(v3 + 15736) = 256;
  *(_BYTE *)(v3 + 15752) = 0;
  *(_BYTE *)(v3 + 15760) = 0;
  pthread_mutexattr_init(&v14);
  pthread_mutexattr_setpolicy_np(&v14, 3);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 15768), &v14);
  pthread_mutexattr_destroy(&v14);
  *(_QWORD *)(v3 + 15864) = 0;
  *(_OWORD *)(v3 + 15832) = 0u;
  *(_OWORD *)(v3 + 15848) = 0u;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/acm2/audio_coding_module.cc");
  *a1 = v3;
}

void webrtc::`anonymous namespace'::AudioCodingModuleImpl::~AudioCodingModuleImpl(webrtc::_anonymous_namespace_::AudioCodingModuleImpl *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 15768));
  v2 = *((_QWORD *)this + 43);
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 16);
        v7 = *(void **)(v2 + 8);
        if (v6 != v5)
        {
          do
          {
            v8 = *(void **)(v6 - 96);
            if (v8)
            {
              *(_QWORD *)(v6 - 88) = v8;
              operator delete(v8);
            }
            v6 -= 104;
          }
          while (v6 != v5);
          v7 = *(void **)(v2 + 8);
        }
        *(_QWORD *)(v2 + 16) = v5;
        operator delete(v7);
      }
      MEMORY[0x20BD0ADEC](v2, 0x1020C40E72D6CFBLL);
    }
  }
  v9 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (*((char *)this + 263) < 0)
    operator delete(*((void **)this + 30));
  webrtc::PushResampler<short>::~PushResampler((_QWORD *)this + 20);
  v10 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v10)
    MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
  pthread_mutex_destroy((pthread_mutex_t *)this + 1);
  v11 = (void *)*((_QWORD *)this + 5);
  if (v11)
  {
    *((_QWORD *)this + 6) = v11;
    operator delete(v11);
  }
}

{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::AudioCodingModuleImpl::ModifyEncoder(pthread_mutex_t *a1, uint64_t a2, void (*a3)(uint64_t, char *))
{
  pthread_mutex_t *v6;

  v6 = a1 + 1;
  pthread_mutex_lock(a1 + 1);
  a3(a2, a1[4].__opaque);
  return pthread_mutex_unlock(v6);
}

uint64_t webrtc::`anonymous namespace'::AudioCodingModuleImpl::RegisterTransportCallback(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 15768);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 15768));
  *(_QWORD *)(a1 + 15832) = a2;
  pthread_mutex_unlock(v4);
  return 0;
}

uint64_t webrtc::`anonymous namespace'::AudioCodingModuleImpl::Add10MsData(webrtc::_anonymous_namespace_::AudioCodingModuleImpl *this, const webrtc::AudioFrame *a2)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  pthread_mutex_t *v5;
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  const char **v38;
  uint64_t sig_low;
  char v41;
  int32x2_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  __int16 *v45;
  const float *v46;
  int32x2_t v47;
  int16x8_t *v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __int16 *v56;
  __int16 *v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t *p_sig;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  unsigned __int8 v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char *v87;
  int v88;
  BOOL v89;
  int v90;
  int sig;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  int v99;
  unsigned int v100;
  unsigned __int8 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const __int16 *v105;
  int16x8_t *v106;
  unint64_t v107;
  const __int16 *v108;
  void *v109;
  void *v110;
  unsigned int v111;
  const char *v112;
  uint64_t v113;
  unsigned __int8 v114;
  unsigned __int8 v115;
  int v116;
  uint64_t v117;
  int16x8x2_t v118;
  int16x8x2_t v119;

  v2 = (pthread_mutex_t *)MEMORY[0x24BDAC7A8](this, a2);
  v4 = v3;
  v5 = v2;
  v6 = v2 + 1;
  pthread_mutex_lock(v2 + 1);
  v7 = *(_QWORD *)(v4 + 24);
  if (!v7)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      goto LABEL_25;
    goto LABEL_26;
  }
  LODWORD(v8) = *(_DWORD *)(v4 + 32);
  if ((int)v8 >= 192001)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      goto LABEL_25;
    goto LABEL_26;
  }
  if (v7 != (int)v8 / 100)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      goto LABEL_25;
    goto LABEL_26;
  }
  v16 = *(_QWORD *)(v4 + 40);
  if (v16 > 8 || ((1 << v16) & 0x156) == 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      goto LABEL_25;
    goto LABEL_26;
  }
  v17 = *(_QWORD *)v5[4].__opaque;
  v112 = "Add10MsData";
  v113 = 11;
  if (!v17)
  {
LABEL_91:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v79, v80, v81, v82, v83, v84, v85, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/acm2/audio_coding_module.cc");
    goto LABEL_26;
  }
  v18 = &v5[245].__opaque[24];
  LODWORD(v25) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  if (*(_QWORD *)(v4 + 40) == 2)
  {
    v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5[4].__opaque + 24))(*(_QWORD *)v5[4].__opaque) == 1;
    v27 = *(_DWORD *)v4;
    if (v5[245].__opaque[48])
      goto LABEL_13;
  }
  else
  {
    v26 = 0;
    v27 = *(_DWORD *)v4;
    if (v5[245].__opaque[48])
    {
LABEL_13:
      if (v27 != *(_DWORD *)&v5[2].__opaque[20])
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/acm2/audio_coding_module.cc");
        v35 = *(_DWORD *)v4 - *(_DWORD *)&v5[2].__opaque[20];
        *(_DWORD *)&v5[2].__opaque[16] += v35
                                        * ((double)(*(int (**)(_QWORD))(**(_QWORD **)v5[4].__opaque
                                                                                               + 16))(*(_QWORD *)v5[4].__opaque)
                                                       / (double)*(int *)(v4 + 32));
        v27 = *(_DWORD *)v4;
        *(_DWORD *)&v5[2].__opaque[20] = *(_DWORD *)v4;
      }
      v36 = (_DWORD)v8 != (_DWORD)v25 || v26;
      if ((v36 & 1) != 0)
        goto LABEL_21;
LABEL_33:
      if (v27 == *(_DWORD *)&v5[2].__opaque[16])
      {
        v42 = vdup_n_s32(v27);
        v43 = v4;
      }
      else
      {
        v43 = (uint64_t)&v5[4].__opaque[16];
        webrtc::AudioFrame::CopyFrom((webrtc::AudioFrame *)&v5[4].__opaque[16], (const webrtc::AudioFrame *)v4, v19, v20, v21, v22, v23, v24);
        v42 = *(int32x2_t *)&v5[2].__opaque[16];
        *(_DWORD *)&v5[4].__opaque[16] = v42.i32[0];
      }
      v46 = (const float *)(v4 + 24);
      v47 = (int32x2_t)vld1_dup_f32(v46);
      *(int32x2_t *)&v5[2].__opaque[16] = vadd_s32(v42, v47);
      goto LABEL_69;
    }
  }
  *(_DWORD *)&v5[2].__opaque[16] = v27;
  *(_DWORD *)&v5[2].__opaque[20] = v27;
  v5[245].__opaque[48] = 1;
  v41 = (_DWORD)v8 != (_DWORD)v25 || v26;
  if ((v41 & 1) == 0)
    goto LABEL_33;
LABEL_21:
  v5[5].__sig = *(_QWORD *)(v4 + 40);
  v37 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)&v5[4].__opaque[40] = v37;
  if (v26)
  {
    if ((_DWORD)v8 == (_DWORD)v25)
    {
      if (*v18)
        bzero(&v5[5].__opaque[24], 0x3C01uLL);
      v38 = (const char **)&v5[5].__opaque[24];
    }
    else
    {
      v38 = &v112;
    }
    if (v37)
      v48 = (int16x8_t *)v38;
    else
      v48 = 0;
    if (*(_BYTE *)(v4 + 15432))
    {
      v49 = 2 * *(_QWORD *)(v4 + 24);
      v50 = v49 == 1;
      if (v49 >= 1)
      {
        v51 = (unint64_t)v49 >> 1;
        v52 = !v50;
        bzero(v48, 2 * (v51 - v52) + 2);
      }
      goto LABEL_62;
    }
    v53 = *(_QWORD *)(v4 + 24);
    if (v53)
    {
      if (v53 >= 0x10 && (v4 + 4 * v53 + 72 <= (unint64_t)v48 || v4 + 72 >= (unint64_t)v48 + 2 * v53))
      {
        v54 = v53 & 0xFFFFFFFFFFFFFFF0;
        v105 = (const __int16 *)(v4 + 104);
        v106 = v48 + 1;
        v107 = v53 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v108 = v105 - 16;
          v118 = vld2q_s16(v108);
          v119 = vld2q_s16(v105);
          v106[-1] = vhaddq_s16(v118.val[1], v118.val[0]);
          *v106 = vhaddq_s16(v119.val[1], v119.val[0]);
          v105 += 32;
          v106 += 2;
          v107 -= 16;
        }
        while (v107);
        if (v53 == v54)
          goto LABEL_62;
      }
      else
      {
        v54 = 0;
      }
      v55 = v53 - v54;
      v56 = &v48->i16[v54];
      v57 = (__int16 *)(v4 + 4 * v54 + 74);
      do
      {
        *v56++ = (*v57 + *(v57 - 1)) >> 1;
        v57 += 2;
        --v55;
      }
      while (v55);
    }
LABEL_62:
    v5[5].__sig = 1;
    v45 = (__int16 *)&v112;
    goto LABEL_63;
  }
  if (!*(_BYTE *)(v4 + 15432))
  {
    v45 = (__int16 *)(v4 + 72);
    goto LABEL_63;
  }
  if ((v44 & 1) == 0)
    goto LABEL_135;
LABEL_39:
  v45 = (__int16 *)webrtc::AudioFrame::zeroed_data(void)::null_data;
LABEL_63:
  v58 = *(_DWORD *)&v5[2].__opaque[16];
  *(_DWORD *)&v5[4].__opaque[16] = v58;
  *(_DWORD *)&v5[4].__opaque[48] = *(_DWORD *)(v4 + 32);
  if ((_DWORD)v8 == (_DWORD)v25)
    goto LABEL_68;
  if (*v18)
    bzero(&v5[5].__opaque[24], 0x3C01uLL);
  v59 = *(_DWORD *)(v4 + 32);
  v60 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5[4].__opaque + 16))(*(_QWORD *)v5[4].__opaque);
  v61 = webrtc::acm2::ACMResampler::Resample10Msec((webrtc::acm2::ACMResampler *)&v5[2].__opaque[24], v45, v59, v60, v5[5].__sig, 0x1E00uLL, (__int16 *)&v5[5].__opaque[24]);
  if ((v61 & 0x80000000) == 0)
  {
    *(_QWORD *)&v5[4].__opaque[40] = v61;
    *(_DWORD *)&v5[4].__opaque[48] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5[4].__opaque + 16))(*(_QWORD *)v5[4].__opaque);
    v58 = *(_DWORD *)&v5[2].__opaque[16];
LABEL_68:
    v43 = (uint64_t)&v5[4].__opaque[16];
    *(_DWORD *)&v5[2].__opaque[16] = v58 + *(_DWORD *)&v5[4].__opaque[40];
    *(_DWORD *)&v5[2].__opaque[20] += *(_DWORD *)(v4 + 24);
LABEL_69:
    v62 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5[4].__opaque + 24))(*(_QWORD *)v5[4].__opaque);
    v63 = *(_QWORD *)(v43 + 40);
    *(_DWORD *)v5->__opaque = *(_DWORD *)v43;
    *(_QWORD *)&v5->__opaque[16] = *(_QWORD *)(v43 + 24);
    *(_QWORD *)&v5->__opaque[24] = v62;
    if (v63 == v62)
    {
      if (*(_BYTE *)(v43 + 15432))
      {
        p_sig = &qword_254572000;
        if ((v64 & 1) == 0)
          goto LABEL_132;
        goto LABEL_72;
      }
      v66 = v43 + 72;
    }
    else
    {
      webrtc::ReMixFrame(v43, v62, (uint64_t)&v5->__opaque[32]);
      v66 = *(_QWORD *)&v5->__opaque[32];
    }
    while (1)
    {
      *(_QWORD *)&v5->__opaque[8] = v66;
      v25 = *(_QWORD *)(v4 + 15440);
      v4 = *(_QWORD *)(v4 + 15448);
      v67 = *(_QWORD *)v5[4].__opaque;
      v112 = "Process";
      v113 = 7;
      if (!v67)
        goto LABEL_91;
      if (v5[245].__opaque[49])
        break;
      sig = v5[246].__sig;
      v92 = (*(_DWORD *)v5->__opaque - *(_DWORD *)&v5[245].__opaque[52]);
      v8 = (*(int (**)(uint64_t))(*(_QWORD *)v67 + 32))(v67) * v92;
      v93 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5[4].__opaque + 16))(*(_QWORD *)v5[4].__opaque);
      if (v8 % v93)
      {
        rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)3,long long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)3,long long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)3,long long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)3,long long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)3,long long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)3,long long> const&)::t, v94, v95, v96, v97, v8 % v93);
LABEL_135:
        {
          v110 = (void *)operator new[]();
          bzero(v110, 0x3C00uLL);
          webrtc::AudioFrame::zeroed_data(void)::null_data = (uint64_t)v110;
        }
        goto LABEL_39;
      }
      v68 = sig + (v8 / v93);
      *(_DWORD *)&v5[245].__opaque[52] = *(_DWORD *)v5->__opaque;
      LODWORD(v5[246].__sig) = v68;
      v5[245].__opaque[49] = 0;
      if (!v5[246].__opaque[8])
        goto LABEL_78;
LABEL_79:
      v5[2].__sig = 0;
      p_sig = &v5[2].__sig;
      v69 = *(_QWORD *)&v5->__opaque[16] * *(_QWORD *)&v5->__opaque[24];
      if (v69)
        v70 = *(_QWORD *)&v5->__opaque[8];
      else
        v70 = 0;
      webrtc::AudioEncoder::Encode(*(_QWORD *)v5[4].__opaque, v68, v70, v69, &v5[2].__sig, &v112);
      v71 = v112;
      v72 = BYTE4(v113);
      v111 = v113;
      v73 = v114;
      v74 = v115;
      v75 = v116;
      v4 = v117;
      v76 = (*(int (**)(_QWORD))(**(_QWORD **)v5[4].__opaque + 56))(*(_QWORD *)v5[4].__opaque) / 1000;
      if (*(_DWORD *)&v5[3].__opaque[32] == v76 && !*(_DWORD *)&v5[3].__opaque[36]
        || (*(_DWORD *)&v5[3].__opaque[32] = v76,
            *(_DWORD *)&v5[3].__opaque[36] = 0,
            (SHIBYTE(v5[4].__sig) & 0x80000000) == 0)
        || (v77 = *(_QWORD *)&v5[3].__opaque[48], (v77 & 0x8000000000000000) == 0)
        && (!v77 || *(_QWORD *)&v5[3].__opaque[40]))
      {
        v78 = *p_sig;
        if (*p_sig || v73)
        {
          v86 = v5[4].__opaque[8];
          if (v71)
          {
            v87 = (char *)v5 + 4 * v75;
            *((_DWORD *)v87 + 3960) += *(_DWORD *)&v5[247].__opaque[52] + 1;
            *(_DWORD *)&v5[247].__opaque[52] = 0;
            v88 = *((_DWORD *)v87 + 3960);
            v89 = __OFSUB__(v88, 500);
            v90 = v88 - 500;
            if (v90 < 0 == v89)
              *((_DWORD *)v87 + 3960) = v90;
          }
          else
          {
            ++*(_DWORD *)&v5[247].__opaque[52];
          }
          if (v78)
            v98 = 1;
          else
            v98 = v73 == 0;
          v99 = v98;
          if (v74)
            v100 = 1;
          else
            v100 = 2;
          if (v99)
            v101 = v72;
          else
            v101 = v86;
          if (v99)
            v102 = v100;
          else
            v102 = 0;
          pthread_mutex_lock((pthread_mutex_t *)((char *)v5 + 15768));
          v103 = *(_QWORD *)&v5[247].__opaque[16];
          if (v103)
          {
            if (v5[246].__opaque[8])
              v104 = *(_QWORD *)v5[246].__opaque;
            else
              v104 = -1;
            (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v103 + 16))(v103, v102, v101, v111, *(_QWORD *)&v5[2].__opaque[8], v5[2].__sig, v104);
          }
          pthread_mutex_unlock((pthread_mutex_t *)((char *)v5 + 15768));
          if (v5[246].__opaque[8])
            v5[246].__opaque[8] = 0;
          v5[4].__opaque[8] = v101;
          sig_low = LODWORD(v5[2].__sig);
        }
        else
        {
          sig_low = 0;
        }
        if (v4)
          operator delete((void *)v4);
        goto LABEL_27;
      }
      __break(1u);
LABEL_132:
      {
        v109 = (void *)operator new[]();
        bzero(v109, 0x3C00uLL);
        p_sig[163] = (uint64_t)v109;
      }
LABEL_72:
      v66 = p_sig[163];
    }
    v68 = *(unsigned int *)v5->__opaque;
    *(_DWORD *)&v5[245].__opaque[52] = v68;
    LODWORD(v5[246].__sig) = v68;
    v5[245].__opaque[49] = 0;
    if (v5[246].__opaque[8])
      goto LABEL_79;
LABEL_78:
    *(_QWORD *)v5[246].__opaque = v25;
    v5[246].__opaque[8] = v4;
    goto LABEL_79;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_25:
    rtc::webrtc_logging_impl::Log("\r\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/acm2/audio_coding_module.cc");
LABEL_26:
  sig_low = 0xFFFFFFFFLL;
LABEL_27:
  pthread_mutex_unlock(v6);
  return sig_low;
}

uint64_t webrtc::`anonymous namespace'::AudioCodingModuleImpl::SetPacketLossRate(pthread_mutex_t *this, int a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = this + 1;
  pthread_mutex_lock(this + 1);
  v5 = *(_QWORD *)this[4].__opaque;
  if (v5)
  {
    v6 = (double)a2 / 100.0;
    (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 144))(v5, v6);
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/acm2/audio_coding_module.cc");
  }
  pthread_mutex_unlock(v4);
  return 0;
}

uint64_t webrtc::`anonymous namespace'::AudioCodingModuleImpl::GetANAStats@<X0>(pthread_mutex_t *this@<X0>, _BYTE *a2@<X8>)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = this + 1;
  pthread_mutex_lock(this + 1);
  v5 = *(_QWORD *)this[4].__opaque;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 208))(v5);
  }
  else
  {
    *a2 = 0;
    a2[4] = 0;
    a2[8] = 0;
    a2[12] = 0;
    a2[16] = 0;
    a2[20] = 0;
    a2[24] = 0;
    a2[28] = 0;
    a2[32] = 0;
    a2[36] = 0;
    a2[40] = 0;
    a2[44] = 0;
    a2[48] = 0;
    a2[52] = 0;
  }
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::`anonymous namespace'::AudioCodingModuleImpl::GetTargetBitrate(pthread_mutex_t *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this + 1;
  pthread_mutex_lock(this + 1);
  v3 = *(_QWORD *)this[4].__opaque;
  if (v3)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
    pthread_mutex_unlock(v2);
    return v4;
  }
  else
  {
    pthread_mutex_unlock(v2);
    return 0xFFFFFFFFLL;
  }
}

void webrtc::AudioConverter::Create(webrtc::AudioConverter *this@<X0>, uint64_t a2@<X1>, webrtc::AudioConverter *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v17;
  _QWORD *v18;
  void (**v19)(webrtc::UpmixConverter *__hidden);
  webrtc::ResampleConverter *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  webrtc::ResampleConverter *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  webrtc::ResampleConverter *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  void *__p;
  _QWORD *v64;
  _QWORD *v65;

  if (this > a3)
  {
    v10 = (_QWORD *)operator new();
    v15 = v10;
    v10[1] = this;
    v10[2] = a2;
    v10[3] = a3;
    v10[4] = a2;
    v17 = this == (webrtc::AudioConverter *)1 || a3 == (webrtc::AudioConverter *)1;
    if (a2 == a4)
    {
      if (v17)
      {
        *v10 = &off_24C0AD210;
        *a5 = v10;
        return;
      }
LABEL_41:
      v59 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/audio_converter.cc", 211, "dst_channels == src_channels || dst_channels == 1 || src_channels == 1", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v11, v12, v13, v14, (uint64_t)v60);
      webrtc::AudioConverter::~AudioConverter((webrtc::AudioConverter *)v59);
    }
    if (!v17)
      goto LABEL_41;
    *v10 = &off_24C0AD210;
    v20 = (webrtc::ResampleConverter *)operator new();
    webrtc::ResampleConverter::ResampleConverter(v20, (unint64_t)a3, a2, (uint64_t)a3, a4, v21, v22, v23);
    v24 = operator new(0x10uLL);
    *v24 = v15;
    v24[1] = v20;
    v25 = operator new();
    __p = v24;
    v64 = v24 + 2;
    v65 = v24 + 2;
    webrtc::CompositionConverter::CompositionConverter(v25, (uint64_t)&__p, v26, v27, v28, v29, v30, v31);
    *a5 = v32;
    v33 = __p;
    if (__p)
    {
      v34 = v64;
      while (v34 != v33)
      {
        v36 = *--v34;
        v35 = v36;
        *v34 = 0;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      }
LABEL_38:
      operator delete(v33);
      return;
    }
    return;
  }
  if (this >= a3)
  {
    if (a2 != a4)
    {
      v55 = (webrtc::ResampleConverter *)operator new();
      v18 = webrtc::ResampleConverter::ResampleConverter(v55, (unint64_t)this, a2, (uint64_t)a3, a4, v56, v57, v58);
      goto LABEL_40;
    }
    v18 = (_QWORD *)operator new();
    v18[1] = this;
    v18[2] = a2;
    v18[3] = a3;
    v18[4] = a2;
    if (this != (webrtc::AudioConverter *)1 && a3 != this && a3 != (webrtc::AudioConverter *)1)
      goto LABEL_41;
    v19 = (void (**)(webrtc::UpmixConverter *__hidden))&unk_24C0AD2B0;
LABEL_29:
    *v18 = v19;
LABEL_40:
    *a5 = v18;
    return;
  }
  if (a2 == a4)
  {
    v18 = (_QWORD *)operator new();
    v18[1] = this;
    v18[2] = a2;
    v18[3] = a3;
    v18[4] = a2;
    if (this != (webrtc::AudioConverter *)1 && a3 != this && a3 != (webrtc::AudioConverter *)1)
      goto LABEL_41;
    v19 = &off_24C0AD288;
    goto LABEL_29;
  }
  v37 = (webrtc::ResampleConverter *)operator new();
  webrtc::ResampleConverter::ResampleConverter(v37, (unint64_t)this, a2, (uint64_t)this, a4, v38, v39, v40);
  v41 = (_QWORD *)operator new();
  v42 = v41;
  v41[1] = this;
  v41[2] = a4;
  v41[3] = a3;
  v41[4] = a4;
  if (this != (webrtc::AudioConverter *)1 && a3 != this && a3 != (webrtc::AudioConverter *)1)
    goto LABEL_41;
  *v41 = &off_24C0AD288;
  v43 = operator new(0x10uLL);
  *v43 = v37;
  v43[1] = v42;
  v44 = operator new();
  v60 = v43;
  v61 = v43 + 2;
  v62 = v43 + 2;
  webrtc::CompositionConverter::CompositionConverter(v44, (uint64_t)&v60, v45, v46, v47, v48, v49, v50);
  *a5 = v51;
  v33 = v60;
  if (v60)
  {
    v52 = v61;
    while (v52 != v33)
    {
      v54 = *--v52;
      v53 = v54;
      *v52 = 0;
      if (v54)
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    }
    goto LABEL_38;
  }
}

void webrtc::DownmixConverter::~DownmixConverter(webrtc::DownmixConverter *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webrtc::DownmixConverter::Convert(_QWORD *this, const float *const *a2, uint64_t a3, int32x4_t **a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v9;
  unint64_t v10;
  int32x4_t *v11;
  float v12;
  uint64_t i;
  float v14;
  const float *const *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int32x4_t v19;
  int32x4_t *v20;
  unint64_t v21;
  unint64_t v22;
  __int32 *v23;
  std::string *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v10 = this[1];
  v9 = this[2];
  if (v9 * v10 != a3)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/audio_converter.cc", 215, "src_size == src_channels() * src_frames()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a3);
    goto LABEL_19;
  }
  if (this[4] * this[3] > a5)
  {
LABEL_19:
    v24 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/audio_converter.cc", 216, "dst_capacity >= dst_channels() * dst_frames()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a5);
    return (_QWORD *)webrtc::ResampleConverter::ResampleConverter((webrtc::ResampleConverter *)v24, v25, v26, v27, v28);
  }
  if (!v9)
    return this;
  v11 = *a4;
  v12 = (float)v10;
  if (!v10)
  {
    *(float *)&a9 = 0.0 / v12;
    if (v9 >= 8)
    {
      v18 = v9 & 0xFFFFFFFFFFFFFFF8;
      v19 = vdupq_lane_s32(*(int32x2_t *)&a9, 0);
      v20 = v11 + 1;
      v21 = v9 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v20[-1] = v19;
        *v20 = v19;
        v20 += 2;
        v21 -= 8;
      }
      while (v21);
      if (v9 == v18)
        return this;
    }
    else
    {
      v18 = 0;
    }
    v22 = v9 - v18;
    v23 = &v11->i32[v18];
    do
    {
      *v23++ = LODWORD(a9);
      --v22;
    }
    while (v22);
    return this;
  }
  for (i = 0; i != v9; ++i)
  {
    v14 = 0.0;
    v15 = a2;
    v16 = v10;
    do
    {
      v17 = (uint64_t)*v15++;
      v14 = v14 + *(float *)(v17 + 4 * i);
      --v16;
    }
    while (v16);
    *(float *)&v11->i32[i] = v14 / v12;
  }
  return this;
}

webrtc::ResampleConverter *webrtc::ResampleConverter::ResampleConverter(webrtc::ResampleConverter *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v10 = a2;
  *(_QWORD *)this = off_24C0AD1E8;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = a4;
  *((_QWORD *)this + 4) = a5;
  if (a2 != 1 && a4 != a2 && a4 != 1)
  {
LABEL_16:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/audio_converter.cc", 211, "dst_channels == src_channels || dst_channels == 1 || src_channels == 1", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v19);
    goto LABEL_17;
  }
  *(_QWORD *)this = &off_24C0AD238;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  if (a2)
  {
    if (!(a2 >> 61))
    {
      v12 = (char *)operator new(8 * a2);
      *((_QWORD *)this + 5) = v12;
      *((_QWORD *)this + 6) = v12;
      *((_QWORD *)this + 7) = &v12[8 * v10];
      while (1)
      {
        v13 = operator new();
        *(_QWORD *)v13 = &off_24C0BAE88;
        v14 = operator new();
        webrtc::SincResampler::SincResampler(v14, a3, v13, (double)(unint64_t)a3 / (double)(unint64_t)a5);
        *(_QWORD *)(v13 + 8) = v15;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 32) = 0;
        *(_QWORD *)(v13 + 40) = a5;
        *(_BYTE *)(v13 + 48) = 1;
        *(_QWORD *)(v13 + 56) = 0;
        v20 = v13;
        v16 = (uint64_t *)*((_QWORD *)this + 6);
        if ((unint64_t)v16 >= *((_QWORD *)this + 7))
        {
          *((_QWORD *)this + 6) = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)this + 5, &v20);
          v17 = v20;
          v20 = 0;
          if (v17)
            goto LABEL_13;
        }
        else
        {
          if (!v16)
          {
            __break(1u);
            goto LABEL_16;
          }
          v20 = 0;
          *v16 = v13;
          *((_QWORD *)this + 6) = v16 + 1;
          v17 = v20;
          v20 = 0;
          if (v17)
LABEL_13:
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
        if (!--v10)
          return this;
      }
    }
LABEL_17:
    abort();
  }
  return this;
}

void webrtc::ResampleConverter::~ResampleConverter(webrtc::ResampleConverter *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C0AD238;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C0AD238;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webrtc::ResampleConverter::Convert(_QWORD *this, const float *const *a2, uint64_t a3, float *const *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v12;
  std::string *v13;

  if (this[2] * this[1] != a3)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/audio_converter.cc", 215, "src_size == src_channels() * src_frames()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a3);
    goto LABEL_8;
  }
  v8 = this;
  if (this[4] * this[3] > a5)
  {
LABEL_8:
    v13 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/audio_converter.cc", 216, "dst_capacity >= dst_channels() * dst_frames()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a5);
    return (_QWORD *)webrtc::CompositionConverter::CompositionConverter(v13);
  }
  v9 = this[5];
  if (this[6] != v9)
  {
    v12 = 0;
    do
    {
      this = (_QWORD *)webrtc::PushSincResampler::Resample(*(webrtc::PushSincResampler **)(v9 + 8 * v12), a2[v12], v8[2], a4[v12], v8[4], a6, a7, a8);
      ++v12;
      v9 = v8[5];
    }
    while (v12 < (v8[6] - v9) >> 3);
  }
  return this;
}

void webrtc::CompositionConverter::CompositionConverter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char **v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_24C0AD260;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v8 = (char **)(a1 + 64);
  *(_QWORD *)(a1 + 80) = 0;
  v10 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v9 - v10) < 9)
  {
    v58 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/audio_converter.cc", 126, "converters_.size() >= 2", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, (unint64_t)(v9 - v10) >> 3);
    webrtc::CompositionConverter::~CompositionConverter((webrtc::CompositionConverter *)v58);
  }
  else if (v10 != v9 - 8)
  {
    do
    {
      v12 = (_QWORD *)operator new();
      webrtc::ChannelBuffer<float>::ChannelBuffer(v12, *(_QWORD *)(*(_QWORD *)v10 + 32), *(_QWORD *)(*(_QWORD *)v10 + 24), 1uLL);
      v14 = *(char **)(a1 + 72);
      v13 = *(_QWORD *)(a1 + 80);
      if ((unint64_t)v14 >= v13)
      {
        v16 = *v8;
        v17 = v14 - *v8;
        v18 = v17 >> 3;
        v19 = (v17 >> 3) + 1;
        if (v19 >> 61)
          goto LABEL_58;
        v20 = v13 - (_QWORD)v16;
        if (v20 >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (!v21)
        {
LABEL_57:
          __break(1u);
LABEL_58:
          abort();
        }
        if (v21 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v22 = 8 * v21;
        v23 = (char *)operator new(8 * v21);
        v24 = &v23[v22];
        v25 = &v23[8 * v18];
        *(_QWORD *)v25 = v12;
        v15 = v25 + 8;
        if (v14 == v16)
        {
          *(_QWORD *)(a1 + 64) = v25;
          *(_QWORD *)(a1 + 72) = v15;
          *(_QWORD *)(a1 + 80) = v24;
        }
        else
        {
          v26 = v14 - v16 - 8;
          if (v26 < 0x78)
            goto LABEL_63;
          v27 = (v14 - 8 - v16) & 0xFFFFFFFFFFFFFFF8;
          v28 = &v14[-v27 - 8];
          v29 = (unint64_t)&v23[v17 - v27 - 8];
          if (v28 < v25 && v29 < (unint64_t)v14)
            goto LABEL_63;
          v31 = (v26 >> 3) + 1;
          v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
          v33 = &v14[-v32];
          v25 -= v32;
          v34 = &v23[8 * v18 - 16];
          v35 = v14 - 16;
          v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v38 = *((_OWORD *)v35 - 1);
            v37 = *(_OWORD *)v35;
            *((_OWORD *)v35 - 1) = 0uLL;
            *(_OWORD *)v35 = 0uLL;
            *((_OWORD *)v34 - 1) = v38;
            *(_OWORD *)v34 = v37;
            v34 -= 32;
            v35 -= 32;
            v36 -= 4;
          }
          while (v36);
          v14 = v33;
          if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_63:
            do
            {
              v39 = *((_QWORD *)v14 - 1);
              v14 -= 8;
              *(_QWORD *)v14 = 0;
              *((_QWORD *)v25 - 1) = v39;
              v25 -= 8;
            }
            while (v14 != v16);
          }
          v14 = *(char **)(a1 + 64);
          v40 = *(char **)(a1 + 72);
          *(_QWORD *)(a1 + 64) = v25;
          *(_QWORD *)(a1 + 72) = v15;
          *(_QWORD *)(a1 + 80) = v24;
          while (v40 != v14)
          {
            v42 = (uint64_t *)*((_QWORD *)v40 - 1);
            v40 -= 8;
            v41 = v42;
            *(_QWORD *)v40 = 0;
            if (v42)
            {
              v43 = v41[11];
              if (v43)
              {
                v44 = v41[12];
                v45 = (void *)v41[11];
                if (v44 != v43)
                {
                  v46 = v41[12];
                  do
                  {
                    v48 = *(void **)(v46 - 24);
                    v46 -= 24;
                    v47 = v48;
                    if (v48)
                    {
                      *(_QWORD *)(v44 - 16) = v47;
                      operator delete(v47);
                    }
                    v44 = v46;
                  }
                  while (v46 != v43);
                  v45 = (void *)v41[11];
                }
                v41[12] = v43;
                operator delete(v45);
              }
              v49 = v41[8];
              if (v49)
              {
                v50 = v41[9];
                v51 = (void *)v41[8];
                if (v50 != v49)
                {
                  v52 = v41[9];
                  do
                  {
                    v54 = *(void **)(v52 - 24);
                    v52 -= 24;
                    v53 = v54;
                    if (v54)
                    {
                      *(_QWORD *)(v50 - 16) = v53;
                      operator delete(v53);
                    }
                    v50 = v52;
                  }
                  while (v52 != v49);
                  v51 = (void *)v41[8];
                }
                v41[9] = v49;
                operator delete(v51);
              }
              v55 = v41[2];
              v41[2] = 0;
              if (v55)
                MEMORY[0x20BD0ADD4](v55, 0x80C80B8603338);
              v56 = v41[1];
              v41[1] = 0;
              if (v56)
                MEMORY[0x20BD0ADD4](v56, 0x80C80B8603338);
              v57 = *v41;
              *v41 = 0;
              if (v57)
                MEMORY[0x20BD0ADD4](v57, 0x1000C8052888210);
              MEMORY[0x20BD0ADEC](v41, 0x10A0C40650D7302);
            }
          }
        }
        if (v14)
          operator delete(v14);
      }
      else
      {
        if (!v14)
          goto LABEL_57;
        *(_QWORD *)v14 = v12;
        v15 = v14 + 8;
      }
      *(_QWORD *)(a1 + 72) = v15;
      v10 += 8;
    }
    while (v10 != *(_QWORD *)(a1 + 48) - 8);
  }
}

void webrtc::CompositionConverter::~CompositionConverter(webrtc::CompositionConverter *this)
{
  webrtc::CompositionConverter::~CompositionConverter(this);
  JUMPOUT(0x20BD0ADECLL);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_24C0AD260;
  v2 = (_QWORD *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 9);
    v4 = (void *)*((_QWORD *)this + 8);
    if (v3 != v2)
    {
      do
      {
        v6 = (uint64_t *)*--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = webrtc::ChannelBuffer<float>::~ChannelBuffer(v5);
          MEMORY[0x20BD0ADEC](v7, 0x10A0C40650D7302);
        }
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v2;
    operator delete(v4);
  }
  v8 = (_QWORD *)*((_QWORD *)this + 5);
  if (v8)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 6);
    v10 = (void *)*((_QWORD *)this + 5);
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v8;
    operator delete(v10);
  }
}

_QWORD *webrtc::CompositionConverter::Convert(_QWORD *this, const float *const *a2, uint64_t a3, float *const *a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;

  v5 = (_QWORD *)this[5];
  if (v5 != (_QWORD *)this[6])
  {
    v6 = this;
    v7 = this[8];
    if (v7 != this[9])
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD, const float *const *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)*v5 + 16))(*v5, a2, a3, *(_QWORD *)(*(_QWORD *)v7 + 8), *(_QWORD *)(*(_QWORD *)v7 + 40) * *(_QWORD *)(*(_QWORD *)v7 + 24));
      v10 = v6[5];
      v11 = v6[6];
      if ((unint64_t)(v11 - v10) < 0x11)
      {
LABEL_9:
        if (v10 != v11)
        {
          v17 = v6[9];
          if (v6[8] != v17)
            return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, float *const *, uint64_t))(**(_QWORD **)(v11 - 8) + 16))(*(_QWORD *)(v11 - 8), *(_QWORD *)(*(_QWORD *)(v17 - 8) + 8), *(_QWORD *)(*(_QWORD *)(v17 - 8) + 40) * *(_QWORD *)(*(_QWORD *)(v17 - 8) + 24), a4, a5);
        }
      }
      else
      {
        v12 = 0;
        while (1)
        {
          v13 = v6[8];
          v14 = (v6[9] - v13) >> 3;
          if (v14 <= v12 || v14 <= v12 + 1)
            break;
          v15 = (_QWORD *)(v13 + 8 * v12);
          this = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v10 + 8 * v12 + 16)
                                                                                             + 16))(*(_QWORD *)(v10 + 8 * v12 + 16), *(_QWORD *)(*v15 + 8), *(_QWORD *)(*v15 + 40) * *(_QWORD *)(*v15 + 24), *(_QWORD *)(v15[1] + 8), *(_QWORD *)(v15[1] + 40) * *(_QWORD *)(v15[1] + 24));
          v10 = v6[5];
          v11 = v6[6];
          v16 = v12 + 3 >= (v11 - v10) >> 3;
          ++v12;
          if (v16)
            goto LABEL_9;
        }
      }
    }
  }
  __break(1u);
  return this;
}

void webrtc::UpmixConverter::~UpmixConverter(webrtc::UpmixConverter *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webrtc::UpmixConverter::Convert(_QWORD *this, const float *const *a2, uint64_t a3, float *const *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  float *const *v15;
  float *v16;
  unint64_t v17;
  float *const *v18;
  uint64_t v19;

  if (this[2] * this[1] != a3)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/audio_converter.cc", 215, "src_size == src_channels() * src_frames()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a3);
    goto LABEL_17;
  }
  v8 = this[3];
  v9 = this[4];
  if (v9 * v8 > a5)
  {
LABEL_17:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/audio_converter.cc", 216, "dst_capacity >= dst_channels() * dst_frames()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a5);
    JUMPOUT(0x2084EE9CCLL);
  }
  if (v9 && v8)
  {
    v10 = 0;
    v11 = (uint64_t)*a2;
    do
    {
      v12 = *(_DWORD *)(v11 + 4 * v10);
      if (v8 >= 2)
      {
        v14 = v8 & 0xFFFFFFFFFFFFFFFELL;
        v15 = a4 + 1;
        do
        {
          v16 = *v15;
          this = (_QWORD *)(4 * v10);
          *(_DWORD *)((char *)this + *((_QWORD *)v15 - 1)) = v12;
          *(_DWORD *)((char *)this + (_QWORD)v16) = v12;
          v15 += 2;
          v14 -= 2;
        }
        while (v14);
        v13 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_6;
      }
      else
      {
        v13 = 0;
      }
      v17 = v8 - v13;
      v18 = &a4[v13];
      do
      {
        v19 = (uint64_t)*v18++;
        *(_DWORD *)(v19 + 4 * v10) = v12;
        --v17;
      }
      while (v17);
LABEL_6:
      ++v10;
    }
    while (v10 != v9);
  }
  return this;
}

void webrtc::CopyConverter::~CopyConverter(webrtc::CopyConverter *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webrtc::CopyConverter::Convert(_QWORD *this, const float *const *a2, uint64_t a3, const float *const *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t v12;
  std::string *v13;

  v8 = this[1];
  if (this[2] * v8 != a3)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/audio_converter.cc", 215, "src_size == src_channels() * src_frames()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a3);
    goto LABEL_9;
  }
  v9 = this;
  if (this[4] * this[3] > a5)
  {
LABEL_9:
    v13 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/audio_converter.cc", 216, "dst_capacity >= dst_channels() * dst_frames()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a5);
    return (_QWORD *)webrtc::AudioDecoder::EncodedAudioFrame::IsDtxPacket((webrtc::AudioDecoder::EncodedAudioFrame *)v13);
  }
  if (a2 != a4 && v8)
  {
    v12 = 0;
    do
    {
      this = memcpy((void *)a4[v12], a2[v12], 4 * v9[4]);
      ++v12;
    }
    while (v12 < v9[1]);
  }
  return this;
}

uint64_t webrtc::AudioDecoder::EncodedAudioFrame::IsDtxPacket(webrtc::AudioDecoder::EncodedAudioFrame *this)
{
  return 0;
}

uint64_t webrtc::AudioDecoder::DecodeRedundantInternal(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t webrtc::AudioDecoder::HasDecodePlc(webrtc::AudioDecoder *this)
{
  return 0;
}

uint64_t webrtc::AudioDecoder::DecodePlc(webrtc::AudioDecoder *this, unint64_t a2, __int16 *a3)
{
  return 0;
}

uint64_t webrtc::AudioDecoder::ErrorCode(webrtc::AudioDecoder *this)
{
  return 0;
}

uint64_t webrtc::AudioDecoder::PacketDurationRedundant(webrtc::AudioDecoder *this, const unsigned __int8 *a2)
{
  return 4294967294;
}

uint64_t webrtc::AudioDecoder::PacketHasFec(webrtc::AudioDecoder *this, const unsigned __int8 *a2)
{
  return 0;
}

unint64_t std::vector<webrtc::AudioDecoder::ParseResult>::__emplace_back_slow_path<unsigned int &,int,std::unique_ptr<webrtc::AudioDecoder::EncodedAudioFrame>>(unint64_t *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  double *v28;
  const double *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  float64x2x2_t v36;

  v4 = a1[1] - *a1;
  v5 = (v4 >> 4) + 1;
  if (v5 >> 60)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 3 > v5)
    v5 = v7 >> 3;
  v23 = (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0;
  v8 = 0xFFFFFFFFFFFFFFFLL;
  if (!v23)
    v8 = v5;
  if (!v8)
  {
    __break(1u);
LABEL_31:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v8 >> 60)
    goto LABEL_31;
  v12 = 16 * v8;
  v13 = (char *)operator new(16 * v8);
  v14 = &v13[v12];
  v15 = (unint64_t)&v13[16 * (v4 >> 4)];
  v16 = *a2;
  v17 = *a3;
  v18 = *a4;
  *a4 = 0;
  *(_DWORD *)v15 = v16;
  *(_DWORD *)(v15 + 4) = v17;
  *(_QWORD *)(v15 + 8) = v18;
  v19 = v15 + 16;
  v20 = (char *)*a1;
  v21 = (char *)a1[1];
  if (v21 == (char *)*a1)
  {
    *a1 = v15;
    a1[1] = v19;
    a1[2] = (unint64_t)v14;
  }
  else
  {
    v22 = (unint64_t)&v21[-*a1 - 16];
    if (v22 < 0x90)
      goto LABEL_18;
    v23 = &v13[v4 - (v22 & 0xFFFFFFFFFFFFFFF0) - 16] >= v21
       || (unint64_t)&v21[-(v22 & 0xFFFFFFFFFFFFFFF0) - 16] >= v15;
    if (!v23)
      goto LABEL_18;
    v24 = (v22 >> 4) + 1;
    v25 = 16 * (v24 & 0x1FFFFFFFFFFFFFFELL);
    v26 = &v21[-v25];
    v27 = v15 - v25;
    v28 = (double *)(v15 - 32);
    v29 = (const double *)(v21 - 32);
    v30 = v24 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v36 = vld2q_f64(v29);
      v29[3] = 0.0;
      v29[1] = 0.0;
      vst2q_f64(v28, v36);
      v28 -= 4;
      v29 -= 4;
      v30 -= 2;
    }
    while (v30);
    v21 = v26;
    v15 = v27;
    if (v24 != (v24 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v27 = v15;
      do
      {
        v31 = *((_QWORD *)v21 - 2);
        v21 -= 16;
        *(_QWORD *)(v27 - 16) = v31;
        v27 -= 16;
        v32 = *((_QWORD *)v21 + 1);
        *((_QWORD *)v21 + 1) = 0;
        *(_QWORD *)(v27 + 8) = v32;
      }
      while (v21 != v20);
    }
    v21 = (char *)*a1;
    v33 = (char *)a1[1];
    *a1 = v27;
    a1[1] = v19;
    a1[2] = (unint64_t)v14;
    while (v33 != v21)
    {
      v34 = *((_QWORD *)v33 - 1);
      *((_QWORD *)v33 - 1) = 0;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      v33 -= 16;
    }
  }
  if (v21)
    operator delete(v21);
  return v19;
}

uint64_t webrtc::AudioDecoderG711::SdpToConfig(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  BOOL v21;
  _BOOL8 v22;
  uint64_t v23;

  v1 = *(unsigned __int8 *)(result + 23);
  v2 = (unsigned __int8 *)result;
  v3 = v1;
  if (*(char *)(result + 23) < 0)
  {
    v3 = *(_QWORD *)(result + 8);
    if (v3 < 0)
      goto LABEL_63;
    v2 = *(unsigned __int8 **)result;
    if (v3 && v2 == 0)
      goto LABEL_63;
  }
  if (v3 != 4)
  {
    v10 = 0;
    v11 = (unsigned __int8 *)result;
    if ((v1 & 0x80) == 0)
      goto LABEL_31;
LABEL_28:
    v1 = *(_QWORD *)(result + 8);
    if ((v1 & 0x8000000000000000) == 0)
    {
      v11 = *(unsigned __int8 **)result;
      if (!v1 || v11)
        goto LABEL_31;
    }
LABEL_63:
    __break(1u);
    return result;
  }
  v5 = *v2;
  if (v5 == 80)
    goto LABEL_12;
  if ((v5 - 65) < 0x1A)
    LOBYTE(v5) = v5 + 32;
  v6 = v5 - 112;
  if (!v6)
  {
LABEL_12:
    v7 = v2[1];
    if (v7 == 67)
      goto LABEL_16;
    if ((v7 - 65) < 0x1A)
      LOBYTE(v7) = v7 + 32;
    v6 = v7 - 99;
    if (!v6)
    {
LABEL_16:
      v8 = v2[2];
      if (v8 == 77)
        goto LABEL_20;
      if ((v8 - 65) < 0x1A)
        LOBYTE(v8) = v8 + 32;
      v6 = v8 - 109;
      if (!v6)
      {
LABEL_20:
        v9 = v2[3];
        if (v9 == 85)
          goto LABEL_24;
        if ((v9 - 65) < 0x1A)
          LOBYTE(v9) = v9 + 32;
        v6 = v9 - 117;
        if (v9 == 117)
LABEL_24:
          v6 = 0;
      }
    }
  }
  v10 = v6 == 0;
  v11 = (unsigned __int8 *)result;
  if ((v1 & 0x80) != 0)
    goto LABEL_28;
LABEL_31:
  if (v1 == 4)
  {
    v12 = *v11;
    if (v12 == 80)
      goto LABEL_36;
    if ((v12 - 65) < 0x1A)
      LOBYTE(v12) = v12 + 32;
    v13 = v12 - 112;
    if (!v13)
    {
LABEL_36:
      v14 = v11[1];
      if (v14 == 67)
        goto LABEL_40;
      if ((v14 - 65) < 0x1A)
        LOBYTE(v14) = v14 + 32;
      v13 = v14 - 99;
      if (!v13)
      {
LABEL_40:
        v15 = v11[2];
        if (v15 == 77)
          goto LABEL_44;
        if ((v15 - 65) < 0x1A)
          LOBYTE(v15) = v15 + 32;
        v13 = v15 - 109;
        if (!v13)
        {
LABEL_44:
          v16 = v11[3];
          if (v16 == 65)
            goto LABEL_48;
          if ((v16 - 65) < 0x1A)
            LOBYTE(v16) = v16 + 32;
          v13 = v16 - 97;
          if (!v13)
LABEL_48:
            v13 = 0;
        }
      }
    }
    v17 = v13 == 0;
    if (*(_DWORD *)(result + 24) != 8000)
      return 0;
  }
  else
  {
    v17 = 0;
    if (*(_DWORD *)(result + 24) != 8000)
      return 0;
  }
  if (!v10 && !v17)
    return 0;
  v18 = *(_QWORD *)(result + 32);
  v19 = !v10;
  v20 = v18 << 32;
  if ((v18 - 1) > 0x17)
  {
    v19 = 0;
    v20 = 0;
  }
  v21 = v18 == 0;
  if (v18)
    v22 = v19;
  else
    v22 = 0;
  if (v21)
    v23 = 0;
  else
    v23 = v20;
  return v23 | v22;
}

void webrtc::AudioDecoderG711::AppendSupportedDecoders(uint64_t a1)
{
  unint64_t v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  void *__p[2];
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  HIBYTE(v16) = 4;
  if (__p <= (void **)"PCMU" && (char *)__p + 4 > "PCMU")
    goto LABEL_24;
  strcpy((char *)__p, "PCMU");
  LODWORD(v17) = 8000;
  v19 = 0;
  v20 = 0;
  *((_QWORD *)&v17 + 1) = 1;
  v18 = &v19;
  LODWORD(v21) = 8000;
  *((_QWORD *)&v21 + 1) = 1;
  *(_QWORD *)&v22 = 0xFA000000FA00;
  DWORD2(v22) = 64000;
  WORD6(v22) = 1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= *(_QWORD *)(a1 + 16))
  {
    v7 = std::vector<webrtc::AudioCodecSpec>::__push_back_slow_path<webrtc::AudioCodecSpec>((void **)a1, (uint64_t)__p);
  }
  else
  {
    if (!v2)
      goto LABEL_24;
    v3 = *(_OWORD *)__p;
    *(_QWORD *)(v2 + 16) = v16;
    *(_OWORD *)v2 = v3;
    __p[1] = 0;
    v16 = 0;
    __p[0] = 0;
    *(_OWORD *)(v2 + 24) = v17;
    *(_QWORD *)(v2 + 40) = v18;
    v4 = v19;
    *(_QWORD *)(v2 + 48) = v19;
    v5 = v2 + 48;
    v6 = v20;
    *(_QWORD *)(v2 + 56) = v20;
    if (v6)
    {
      *(_QWORD *)(v4 + 16) = v5;
      v18 = &v19;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      *(_QWORD *)(v2 + 40) = v5;
    }
    v8 = v22;
    *(_OWORD *)(v2 + 64) = v21;
    *(_OWORD *)(v2 + 80) = v8;
    v7 = (char *)(v2 + 96);
  }
  *(_QWORD *)(a1 + 8) = v7;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  HIBYTE(v16) = 4;
  if (__p <= (void **)"PCMA" && (char *)__p + 4 > "PCMA")
    goto LABEL_24;
  strcpy((char *)__p, "PCMA");
  LODWORD(v17) = 8000;
  v19 = 0;
  v20 = 0;
  *((_QWORD *)&v17 + 1) = 1;
  v18 = &v19;
  LODWORD(v21) = 8000;
  *((_QWORD *)&v21 + 1) = 1;
  *(_QWORD *)&v22 = 0xFA000000FA00;
  DWORD2(v22) = 64000;
  WORD6(v22) = 1;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 >= *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = std::vector<webrtc::AudioCodecSpec>::__push_back_slow_path<webrtc::AudioCodecSpec>((void **)a1, (uint64_t)__p);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(__p[0]);
    return;
  }
  if (!v9)
  {
LABEL_24:
    __break(1u);
    return;
  }
  v10 = *(_OWORD *)__p;
  *(_QWORD *)(v9 + 16) = v16;
  *(_OWORD *)v9 = v10;
  __p[1] = 0;
  v16 = 0;
  __p[0] = 0;
  *(_OWORD *)(v9 + 24) = v17;
  *(_QWORD *)(v9 + 40) = v18;
  v11 = v19;
  *(_QWORD *)(v9 + 48) = v19;
  v12 = v9 + 48;
  v13 = v20;
  *(_QWORD *)(v9 + 56) = v20;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    v18 = &v19;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    *(_QWORD *)(v9 + 40) = v12;
  }
  v14 = v22;
  *(_OWORD *)(v9 + 64) = v21;
  *(_OWORD *)(v9 + 80) = v14;
  *(_QWORD *)(a1 + 8) = v9 + 96;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19);
  if (SHIBYTE(v16) < 0)
    goto LABEL_23;
}

char *std::vector<webrtc::AudioCodecSpec>::__push_back_slow_path<webrtc::AudioCodecSpec>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v5 = 0x2AAAAAAAAAAAAAALL;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_29:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x2AAAAAAAAAAAAAALL)
    goto LABEL_29;
  v7 = 96 * v5;
  v8 = (char *)operator new(96 * v5);
  v9 = &v8[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  v10 = (_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 48);
  *((_QWORD *)v9 + 5) = *(_QWORD *)(a2 + 40);
  *((_QWORD *)v9 + 6) = v11;
  v12 = v9 + 48;
  v13 = *(_QWORD *)(a2 + 56);
  *((_QWORD *)v9 + 7) = v13;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    *(_QWORD *)(a2 + 40) = v10;
    *v10 = 0;
    *(_QWORD *)(a2 + 56) = 0;
  }
  else
  {
    *((_QWORD *)v9 + 5) = v12;
  }
  v14 = &v8[v7];
  v15 = &v8[96 * v2];
  v16 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v15 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v15 + 5) = v16;
  v17 = v9 + 96;
  v18 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v9;
    a1[1] = v17;
    a1[2] = v14;
  }
  else
  {
    v20 = 0;
    do
    {
      v25 = &v9[v20];
      v26 = &v19[v20];
      v27 = *(_OWORD *)&v19[v20 - 96];
      *((_QWORD *)v25 - 10) = *(_QWORD *)&v19[v20 - 80];
      *((_OWORD *)v25 - 6) = v27;
      *((_QWORD *)v26 - 11) = 0;
      *((_QWORD *)v26 - 10) = 0;
      *((_QWORD *)v26 - 12) = 0;
      *(_OWORD *)(v25 - 72) = *(_OWORD *)&v19[v20 - 72];
      *((_QWORD *)v25 - 7) = *(_QWORD *)&v19[v20 - 56];
      v28 = &v19[v20 - 48];
      v29 = *(_QWORD *)v28;
      *(_QWORD *)&v9[v20 - 48] = *(_QWORD *)v28;
      v30 = (uint64_t)&v9[v20 - 48];
      v31 = *(_QWORD *)&v19[v20 - 40];
      *((_QWORD *)v25 - 5) = v31;
      if (v31)
      {
        *(_QWORD *)(v29 + 16) = v30;
        *((_QWORD *)v26 - 7) = v28;
        *(_QWORD *)v28 = 0;
        *(_QWORD *)&v19[v20 - 40] = 0;
      }
      else
      {
        *((_QWORD *)v25 - 7) = v30;
      }
      v21 = v20 - 96;
      v22 = &v9[v20];
      v23 = &v19[v20];
      v24 = *((_OWORD *)v23 - 1);
      *((_OWORD *)v22 - 2) = *((_OWORD *)v23 - 2);
      *((_OWORD *)v22 - 1) = v24;
      v20 = v21;
    }
    while (&v19[v21] != v18);
    v19 = (char *)*a1;
    v32 = (char *)a1[1];
    *a1 = &v9[v21];
    a1[1] = v17;
    a1[2] = v14;
    while (v32 != v19)
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v32 - 56), *((_QWORD *)v32 - 6));
      if (*(v32 - 73) < 0)
        operator delete(*((void **)v32 - 12));
      v32 -= 96;
    }
  }
  if (v19)
    operator delete(v19);
  return v17;
}

void webrtc::AudioDecoderG722Impl::~AudioDecoderG722Impl(void **this)
{
  free(this[1]);
}

{
  free(this[1]);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioDecoderG722Impl::HasDecodePlc(webrtc::AudioDecoderG722Impl *this)
{
  return 0;
}

uint64_t webrtc::AudioDecoderG722Impl::DecodeInternal(uint64_t a1, uint64_t a2, unint64_t a3, int8x16_t a4, double a5, int8x16_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t result;

  result = WebRtc_g722_decode(*(_DWORD **)(a1 + 8), a8, a2, a3, a4, a5, a6);
  *a9 = 1;
  return result;
}

double webrtc::AudioDecoderG722Impl::Reset(webrtc::AudioDecoderG722Impl *this)
{
  _QWORD *v1;
  double result;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v1)
    v1 = malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL);
  v1[60] = 0;
  result = 0.0;
  *((_OWORD *)v1 + 28) = 0u;
  *((_OWORD *)v1 + 29) = 0u;
  *((_OWORD *)v1 + 26) = 0u;
  *((_OWORD *)v1 + 27) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  *((_OWORD *)v1 + 22) = 0u;
  *((_OWORD *)v1 + 23) = 0u;
  *((_OWORD *)v1 + 20) = 0u;
  *((_OWORD *)v1 + 21) = 0u;
  *((_OWORD *)v1 + 18) = 0u;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_DWORD *)v1 + 3) = 8;
  *((_DWORD *)v1 + 1) = 0;
  *((_DWORD *)v1 + 72) = 32;
  *((_DWORD *)v1 + 117) = 8;
  return result;
}

void webrtc::AudioDecoderG722Impl::ParsePayload(uint64_t a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  webrtc::LegacyEncodedAudioFrame::SplitBySamples(a1, a2, a3, 8uLL, 0x10u, a4);
}

uint64_t webrtc::AudioDecoderG722Impl::PacketDuration(webrtc::AudioDecoderG722Impl *this, const unsigned __int8 *a2, int a3)
{
  return (2 * a3);
}

uint64_t webrtc::AudioDecoderG722Impl::Channels(webrtc::AudioDecoderG722Impl *this)
{
  return 1;
}

uint64_t webrtc::AudioDecoderG722Impl::PacketDurationRedundant(webrtc::AudioDecoderG722Impl *this, const unsigned __int8 *a2, int a3)
{
  return (2 * a3);
}

uint64_t webrtc::AudioDecoderG722Impl::SampleRateHz(webrtc::AudioDecoderG722Impl *this)
{
  return 16000;
}

webrtc::AudioDecoderG722StereoImpl *webrtc::AudioDecoderG722StereoImpl::AudioDecoderG722StereoImpl(webrtc::AudioDecoderG722StereoImpl *this)
{
  _QWORD *v2;
  __int128 v3;
  _QWORD *v4;

  *(_QWORD *)this = &off_24C0AD360;
  *((_QWORD *)this + 1) = malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL);
  *((_QWORD *)this + 2) = malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL);
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v2)
    v2 = malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL);
  v2[60] = 0;
  v3 = 0uLL;
  *((_OWORD *)v2 + 28) = 0u;
  *((_OWORD *)v2 + 29) = 0u;
  *((_OWORD *)v2 + 26) = 0u;
  *((_OWORD *)v2 + 27) = 0u;
  *((_OWORD *)v2 + 24) = 0u;
  *((_OWORD *)v2 + 25) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 23) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_DWORD *)v2 + 3) = 8;
  *((_DWORD *)v2 + 1) = 0;
  *((_DWORD *)v2 + 72) = 32;
  *((_DWORD *)v2 + 117) = 8;
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  if (!v4)
  {
    v4 = malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL);
    v3 = 0uLL;
  }
  v4[60] = 0;
  *((_OWORD *)v4 + 28) = v3;
  *((_OWORD *)v4 + 29) = v3;
  *((_OWORD *)v4 + 26) = v3;
  *((_OWORD *)v4 + 27) = v3;
  *((_OWORD *)v4 + 24) = v3;
  *((_OWORD *)v4 + 25) = v3;
  *((_OWORD *)v4 + 22) = v3;
  *((_OWORD *)v4 + 23) = v3;
  *((_OWORD *)v4 + 20) = v3;
  *((_OWORD *)v4 + 21) = v3;
  *((_OWORD *)v4 + 18) = v3;
  *((_OWORD *)v4 + 19) = v3;
  *((_OWORD *)v4 + 16) = v3;
  *((_OWORD *)v4 + 17) = v3;
  *((_OWORD *)v4 + 14) = v3;
  *((_OWORD *)v4 + 15) = v3;
  *((_OWORD *)v4 + 12) = v3;
  *((_OWORD *)v4 + 13) = v3;
  *((_OWORD *)v4 + 10) = v3;
  *((_OWORD *)v4 + 11) = v3;
  *((_OWORD *)v4 + 8) = v3;
  *((_OWORD *)v4 + 9) = v3;
  *((_OWORD *)v4 + 6) = v3;
  *((_OWORD *)v4 + 7) = v3;
  *((_OWORD *)v4 + 4) = v3;
  *((_OWORD *)v4 + 5) = v3;
  *((_OWORD *)v4 + 2) = v3;
  *((_OWORD *)v4 + 3) = v3;
  *(_OWORD *)v4 = v3;
  *((_OWORD *)v4 + 1) = v3;
  *((_DWORD *)v4 + 3) = 8;
  *((_DWORD *)v4 + 1) = 0;
  *((_DWORD *)v4 + 72) = 32;
  *((_DWORD *)v4 + 117) = 8;
  return this;
}

void webrtc::AudioDecoderG722StereoImpl::~AudioDecoderG722StereoImpl(void **this)
{
  free(this[1]);
  free(this[2]);
}

{
  free(this[1]);
  free(this[2]);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioDecoderG722StereoImpl::DecodeInternal(uint64_t a1, const char *a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  unint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  double v13;
  int8x16_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  const char *v23;
  char *v24;
  int8x16_t v25;
  char *v26;
  const char *v27;
  unint64_t v28;
  int8x8_t v29;
  char v30;
  unsigned __int8 v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  int8x16_t v38;
  double v39;
  int8x16_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  _WORD *v45;
  __int16 *v46;
  __int16 v47;
  int8x8x2_t v50;
  int8x16x2_t v51;

  v10 = a3 & 0x7FFFFFFFFFFFFFFELL;
  v11 = operator new[]();
  v15 = v11;
  if (!v10)
  {
    v19 = 0;
    goto LABEL_18;
  }
  v16 = v10 - 2;
  if (v10 - 2 < 0xE)
  {
    v17 = 0;
    v18 = 1;
    goto LABEL_15;
  }
  v20 = (v16 >> 1) + 1;
  if (v16 < 0x1E)
  {
    v21 = 0;
    goto LABEL_12;
  }
  v21 = v20 & 0xFFFFFFFFFFFFFFF0;
  v22 = v20 & 0xFFFFFFFFFFFFFFF0;
  v23 = a2;
  v24 = (char *)v11;
  do
  {
    v51 = vld2q_s8(v23);
    v23 += 32;
    v25 = vsliq_n_s8(v51.val[1], v51.val[0], 4uLL);
    v51.val[0] = vsriq_n_s8(v51.val[0], v51.val[1], 4uLL);
    v51.val[1] = v25;
    vst2q_s8(v24, v51);
    v24 += 32;
    v22 -= 16;
  }
  while (v22);
  if (v20 == v21)
    goto LABEL_16;
  if ((v20 & 8) != 0)
  {
LABEL_12:
    v17 = 2 * (v20 & 0xFFFFFFFFFFFFFFF8);
    v18 = (16 * ((v20 & 0xFFFFFFFFFFFFFFF8) >> 3)) | 1;
    v26 = (char *)(v11 + 2 * v21);
    v27 = &a2[2 * v21];
    v28 = v21 - (v20 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v50 = vld2_s8(v27);
      v27 += 16;
      v29 = vsli_n_s8(v50.val[1], v50.val[0], 4uLL);
      v50.val[0] = vsri_n_s8(v50.val[0], v50.val[1], 4uLL);
      v50.val[1] = v29;
      vst2_s8(v26, v50);
      v26 += 16;
      v28 += 8;
    }
    while (v28);
    if (v20 == (v20 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_16;
    goto LABEL_15;
  }
  v17 = 2 * v21;
  v18 = (2 * v21) | 1;
  do
  {
LABEL_15:
    v30 = a2[v17];
    v31 = a2[v18];
    *(_BYTE *)(v11 + v17) = v30 & 0xF0 | (v31 >> 4);
    *(_BYTE *)(v11 + v18) = v31 & 0xF | (16 * v30);
    v32 = v17 + 3;
    v17 += 2;
    v18 = v17 | 1;
  }
  while (v32 < v10);
LABEL_16:
  v19 = v10 >> 1;
  v33 = v10 - 1;
  v34 = (char *)(v11 + 2);
  v35 = v19;
  do
  {
    v36 = *(v34 - 1);
    memmove(v34 - 1, v34, v16);
    *(_BYTE *)(v15 + v33) = v36;
    --v16;
    ++v34;
    --v35;
  }
  while (v35);
LABEL_18:
  v37 = WebRtc_g722_decode(*(_DWORD **)(a1 + 8), a5, v15, v19, v12, v13, v14);
  v41 = WebRtc_g722_decode(*(_DWORD **)(a1 + 16), a5 + 2 * v37, v15 + v19, v19, v38, v39, v40);
  if (v41 == v37)
  {
    v41 = 2 * v37;
    v42 = v37 & 0x7FFFFFFFFFFFFFFFLL;
    v43 = (v37 & 0x7FFFFFFFFFFFFFFFLL) - 2 * v37;
    if ((v37 & 0x7FFFFFFFFFFFFFFFuLL) < 2 * v37)
    {
      v44 = 2 * (~v42 + v41);
      v45 = (_WORD *)(a5 + 2);
      v46 = (__int16 *)(a5 + 2 * v42);
      do
      {
        v47 = *v46++;
        memmove(v45 + 1, v45, v44);
        *v45 = v47;
        v45 += 2;
        v44 -= 2;
      }
      while (!__CFADD__(v43++, 1));
    }
  }
  *a6 = 1;
  MEMORY[0x20BD0ADD4](v15, 0x1000C8077774924);
  return v41;
}

uint64_t webrtc::AudioDecoderG722StereoImpl::PacketDuration(webrtc::AudioDecoderG722StereoImpl *this, const unsigned __int8 *a2, int a3)
{
  return a3 & 0xFFFFFFFE;
}

uint64_t webrtc::AudioDecoderG722StereoImpl::Channels(webrtc::AudioDecoderG722StereoImpl *this)
{
  return 2;
}

uint64_t webrtc::AudioDecoderG722StereoImpl::SampleRateHz(webrtc::AudioDecoderG722StereoImpl *this)
{
  return 16000;
}

_QWORD *webrtc::AudioDecoderG722StereoImpl::Reset(webrtc::AudioDecoderG722StereoImpl *this)
{
  _QWORD *v2;
  __int128 v3;
  _QWORD *result;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v2)
    v2 = malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL);
  v2[60] = 0;
  v3 = 0uLL;
  *((_OWORD *)v2 + 28) = 0u;
  *((_OWORD *)v2 + 29) = 0u;
  *((_OWORD *)v2 + 26) = 0u;
  *((_OWORD *)v2 + 27) = 0u;
  *((_OWORD *)v2 + 24) = 0u;
  *((_OWORD *)v2 + 25) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 23) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_DWORD *)v2 + 3) = 8;
  *((_DWORD *)v2 + 1) = 0;
  *((_DWORD *)v2 + 72) = 32;
  *((_DWORD *)v2 + 117) = 8;
  result = (_QWORD *)*((_QWORD *)this + 2);
  if (!result)
  {
    result = malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL);
    v3 = 0uLL;
  }
  result[60] = 0;
  *((_OWORD *)result + 28) = v3;
  *((_OWORD *)result + 29) = v3;
  *((_OWORD *)result + 26) = v3;
  *((_OWORD *)result + 27) = v3;
  *((_OWORD *)result + 24) = v3;
  *((_OWORD *)result + 25) = v3;
  *((_OWORD *)result + 22) = v3;
  *((_OWORD *)result + 23) = v3;
  *((_OWORD *)result + 20) = v3;
  *((_OWORD *)result + 21) = v3;
  *((_OWORD *)result + 18) = v3;
  *((_OWORD *)result + 19) = v3;
  *((_OWORD *)result + 16) = v3;
  *((_OWORD *)result + 17) = v3;
  *((_OWORD *)result + 14) = v3;
  *((_OWORD *)result + 15) = v3;
  *((_OWORD *)result + 12) = v3;
  *((_OWORD *)result + 13) = v3;
  *((_OWORD *)result + 10) = v3;
  *((_OWORD *)result + 11) = v3;
  *((_OWORD *)result + 8) = v3;
  *((_OWORD *)result + 9) = v3;
  *((_OWORD *)result + 6) = v3;
  *((_OWORD *)result + 7) = v3;
  *((_OWORD *)result + 4) = v3;
  *((_OWORD *)result + 5) = v3;
  *((_OWORD *)result + 2) = v3;
  *((_OWORD *)result + 3) = v3;
  *(_OWORD *)result = v3;
  *((_OWORD *)result + 1) = v3;
  *((_DWORD *)result + 3) = 8;
  *((_DWORD *)result + 1) = 0;
  *((_DWORD *)result + 72) = 32;
  *((_DWORD *)result + 117) = 8;
  return result;
}

void webrtc::AudioDecoderG722StereoImpl::ParsePayload(uint64_t a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  webrtc::LegacyEncodedAudioFrame::SplitBySamples(a1, a2, a3, 0x10uLL, 0x10u, a4);
}

void webrtc::AudioDecoderG722::AppendSupportedDecoders(uint64_t a1)
{
  unint64_t v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  void *__p[2];
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  HIBYTE(v10) = 4;
  if (__p <= (void **)"G722" && (char *)__p + 4 > "G722")
    goto LABEL_12;
  strcpy((char *)__p, "G722");
  LODWORD(v11) = 8000;
  v13 = 0;
  v14 = 0;
  *((_QWORD *)&v11 + 1) = 1;
  v12 = &v13;
  LODWORD(v15) = 16000;
  *((_QWORD *)&v15 + 1) = 1;
  *(_QWORD *)&v16 = 0xFA000000FA00;
  DWORD2(v16) = 64000;
  WORD6(v16) = 1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 < *(_QWORD *)(a1 + 16))
  {
    if (v2)
    {
      v3 = *(_OWORD *)__p;
      *(_QWORD *)(v2 + 16) = v10;
      *(_OWORD *)v2 = v3;
      __p[1] = 0;
      v10 = 0;
      __p[0] = 0;
      *(_OWORD *)(v2 + 24) = v11;
      *(_QWORD *)(v2 + 40) = v12;
      v4 = v13;
      *(_QWORD *)(v2 + 48) = v13;
      v5 = v2 + 48;
      v6 = v14;
      *(_QWORD *)(v2 + 56) = v14;
      if (v6)
      {
        *(_QWORD *)(v4 + 16) = v5;
        v12 = &v13;
        v13 = 0;
        v14 = 0;
      }
      else
      {
        *(_QWORD *)(v2 + 40) = v5;
      }
      v8 = v16;
      *(_OWORD *)(v2 + 64) = v15;
      *(_OWORD *)(v2 + 80) = v8;
      v7 = (char *)(v2 + 96);
      goto LABEL_10;
    }
LABEL_12:
    __break(1u);
    return;
  }
  v7 = std::vector<webrtc::AudioCodecSpec>::__push_back_slow_path<webrtc::AudioCodecSpec>((void **)a1, (uint64_t)__p);
LABEL_10:
  *(_QWORD *)(a1 + 8) = v7;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v12, v13);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

unint64_t webrtc::AudioDecoderL16::SdpToConfig(webrtc::AudioDecoderL16 *this, const webrtc::SdpAudioFormat *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::string *v19;
  uint64_t vars0;

  v8 = *((_QWORD *)this + 4);
  if (v8 >> 31)
    goto LABEL_35;
  v9 = *((_DWORD *)this + 6);
  if ((*((char *)this + 23) & 0x80000000) == 0)
  {
    v10 = *((unsigned __int8 *)this + 23);
    goto LABEL_7;
  }
  v10 = *((_QWORD *)this + 1);
  if (v10 < 0 || (this = *(webrtc::AudioDecoderL16 **)this, v10) && !this)
  {
    __break(1u);
LABEL_35:
    v19 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, vars0);
    return webrtc::AudioDecoderL16::MakeAudioDecoder(v19);
  }
  if (v10 != 3)
    return 0;
  v11 = *(unsigned __int8 *)this;
  if (v11 != 76)
  {
    if ((v11 - 65) < 0x1A)
      LOBYTE(v11) = v11 + 32;
    if (v11 != 108)
      return 0;
  }
  v12 = *((unsigned __int8 *)this + 1);
  if (v12 != 49)
  {
    if ((v12 - 65) < 0x1A)
      LOBYTE(v12) = v12 + 32;
    if (v12 != 49)
      return 0;
  }
LABEL_7:
  v13 = *((unsigned __int8 *)this + 2);
  if (v13 == 54)
    goto LABEL_20;
  if ((v13 - 65) < 0x1A)
    LOBYTE(v13) = v13 + 32;
  if (v13 != 54)
    return 0;
LABEL_20:
  if (v9 > 31999)
  {
    if (v9 != 48000 && v9 != 32000)
      return 0;
  }
  else if (v9 != 8000 && v9 != 16000)
  {
    return 0;
  }
  v15 = (v8 - 1) > 0x17;
  v16 = v9 & 0xFFFFFF00 | (v8 << 32);
  if (v15)
    v17 = 0;
  else
    v17 = v9;
  if (v15)
    v18 = 0;
  else
    v18 = v16;
  return v18 | v17;
}

uint64_t webrtc::AudioDecoderL16::MakeAudioDecoder@<X0>(int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  int v5;
  int v8;
  uint64_t v9;

  result = 0;
  v5 = *a1;
  if (*a1 > 31999)
  {
    if (v5 != 48000 && v5 != 32000)
      goto LABEL_6;
  }
  else if (v5 != 8000 && v5 != 16000)
  {
LABEL_6:
    *a2 = 0;
    return result;
  }
  if ((a1[1] - 1) > 0x17)
  {
    result = 0;
    *a2 = 0;
  }
  else
  {
    result = operator new();
    v8 = *a1;
    v9 = a1[1];
    *(_QWORD *)result = &unk_24C0AD640;
    *(_DWORD *)(result + 8) = v8;
    *(_QWORD *)(result + 16) = v9;
    *a2 = result;
  }
  return result;
}

uint64_t std::pair<std::string const,std::string>::pair[abi:sn180100]<char const(&)[9],char const(&)[3],0>(uint64_t a1, char *__s, const char *a3)
{
  size_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v13;
  size_t v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_25;
  v7 = v6;
  if (v6 > 0x16)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (char *)operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = v6;
    v8 = (char *)a1;
  }
  v11 = &v8[v7];
  if (v8 <= __s && v11 > __s)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v7)
    memmove(v8, __s, v7);
  *v11 = 0;
  v13 = strlen(a3);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
LABEL_25:
    abort();
  v14 = v13;
  if (v13 <= 0x16)
  {
    v15 = (char *)(a1 + 24);
    *(_BYTE *)(a1 + 47) = v14;
    v16 = (const char *)(a1 + 24 + v14);
    if (a1 + 24 > (unint64_t)a3)
      goto LABEL_21;
    goto LABEL_20;
  }
  v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v17 = v13 | 7;
  v18 = v17 + 1;
  v15 = (char *)operator new(v17 + 1);
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v18 | 0x8000000000000000;
  *(_QWORD *)(a1 + 24) = v15;
  v16 = &v15[v14];
  if (v15 <= a3)
  {
LABEL_20:
    if (v16 <= a3)
      goto LABEL_21;
    goto LABEL_24;
  }
LABEL_21:
  if (v14)
    memmove(v15, a3, v14);
  *v16 = 0;
  return a1;
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  const void **v6;
  uint64_t **v8;
  _QWORD *v9;
  std::string *v10;
  std::string *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, a2, &v16, &v15, a3);
  if (*v6)
    return *v6;
  v8 = (uint64_t **)v6;
  v9 = operator new(0x50uLL);
  v10 = (std::string *)(v9 + 4);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    v11 = (std::string *)(v9 + 7);
    if ((*(char *)(a4 + 47) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_7:
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a4 + 24), *(_QWORD *)(a4 + 32));
    goto LABEL_8;
  }
  *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
  v9[6] = *(_QWORD *)(a4 + 16);
  v11 = (std::string *)(v9 + 7);
  if (*(char *)(a4 + 47) < 0)
    goto LABEL_7;
LABEL_5:
  *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 24);
  v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 40);
LABEL_8:
  v12 = v16;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = v12;
  *v8 = v9;
  v13 = (uint64_t *)**a1;
  v14 = v9;
  if (v13)
  {
    *a1 = v13;
    v14 = *v8;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

const void **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  uint64_t **v6;
  uint64_t **v8;
  uint64_t **v9;
  size_t v13;
  const void **result;
  const void **v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v19;
  size_t v20;
  size_t v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  size_t v28;
  size_t v29;
  const void *v30;
  size_t v31;
  int v32;
  const void *v33;
  size_t v34;
  size_t v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  _QWORD *v40;
  size_t v41;
  size_t v42;
  int v43;
  size_t v44;

  v6 = a3;
  v8 = a1;
  v9 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_18;
  v13 = *(unsigned __int8 *)(a5 + 23);
  result = (const void **)a5;
  v44 = v13;
  if (*(char *)(a5 + 23) < 0)
  {
    v13 = *(_QWORD *)(a5 + 8);
    if ((v13 & 0x8000000000000000) != 0)
      goto LABEL_88;
    result = *(const void ***)a5;
    if (v13)
    {
      if (!result)
        goto LABEL_88;
    }
  }
  v15 = (const void **)(a2 + 4);
  v16 = *((char *)a2 + 55);
  v17 = *((unsigned __int8 *)a2 + 55);
  v18 = a2 + 4;
  v19 = *((unsigned __int8 *)a2 + 55);
  if (v16 < 0)
  {
    v19 = a2[5];
    if ((v19 & 0x8000000000000000) != 0)
      goto LABEL_88;
    v18 = *v15;
    if (v19)
    {
      if (!v18)
        goto LABEL_88;
    }
  }
  if (v19 >= v13)
    v20 = v13;
  else
    v20 = v19;
  result = (const void **)memcmp(result, v18, v20);
  if ((_DWORD)result)
  {
    v6 = a3;
    v8 = a1;
    if ((result & 0x80000000) == 0)
      goto LABEL_15;
LABEL_18:
    v23 = (uint64_t *)*a2;
    if (*v8 == a2)
    {
      v25 = a2;
      goto LABEL_43;
    }
    if (v23)
    {
      v24 = (uint64_t *)*a2;
      do
      {
        v25 = v24;
        v24 = (uint64_t *)v24[1];
      }
      while (v24);
    }
    else
    {
      v26 = a2;
      do
      {
        v25 = (uint64_t *)v26[2];
        v27 = *v25 == (_QWORD)v26;
        v26 = v25;
      }
      while (v27);
    }
    result = (const void **)(v25 + 4);
    if (*((char *)v25 + 55) < 0)
    {
      v28 = v25[5];
      if ((v28 & 0x8000000000000000) != 0)
        goto LABEL_88;
      result = (const void **)*result;
      if (v28)
      {
        if (!result)
          goto LABEL_88;
      }
    }
    else
    {
      v28 = *((unsigned __int8 *)v25 + 55);
    }
    if (*(char *)(a5 + 23) < 0)
    {
      v29 = *(_QWORD *)(a5 + 8);
      if ((v29 & 0x8000000000000000) != 0)
        goto LABEL_88;
      v30 = *(const void **)a5;
      if (v29)
      {
        if (!v30)
          goto LABEL_88;
      }
    }
    else
    {
      v29 = *(unsigned __int8 *)(a5 + 23);
      v30 = (const void *)a5;
    }
    if (v29 >= v28)
      v31 = v28;
    else
      v31 = v29;
    v32 = memcmp(result, v30, v31);
    if (v32)
    {
      if (v32 < 0)
      {
LABEL_43:
        if (v23)
        {
          *v6 = v25;
          return (const void **)(v25 + 1);
        }
        else
        {
          *v6 = a2;
          return (const void **)a2;
        }
      }
    }
    else if (v28 < v29)
    {
      goto LABEL_43;
    }
    return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v8, v6, (const void **)a5);
  }
  v22 = v13 >= v19;
  v6 = a3;
  v8 = a1;
  if (!v22)
    goto LABEL_18;
LABEL_15:
  if ((v17 & 0x80) != 0)
  {
    v17 = a2[5];
    v21 = v44;
    if ((v17 & 0x8000000000000000) != 0)
      goto LABEL_88;
    v15 = (const void **)*v15;
    if (v17)
    {
      if (!v15)
        goto LABEL_88;
    }
  }
  else
  {
    v21 = v44;
  }
  v33 = (const void *)a5;
  v34 = v21;
  if ((v21 & 0x80) == 0
    || (v34 = *(_QWORD *)(a5 + 8), (v34 & 0x8000000000000000) == 0) && ((v33 = *(const void **)a5, !v34) || v33))
  {
    if (v34 >= v17)
      v35 = v17;
    else
      v35 = v34;
    v36 = memcmp(v15, v33, v35);
    if (v36)
    {
      if ((v36 & 0x80000000) == 0)
      {
LABEL_58:
        *v6 = a2;
        *a4 = a2;
        return (const void **)a4;
      }
    }
    else if (v17 >= v34)
    {
      goto LABEL_58;
    }
    v37 = a2[1];
    if (v37)
    {
      v38 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v38;
        v38 = (uint64_t *)*v38;
      }
      while (v38);
    }
    else
    {
      v39 = a2;
      do
      {
        a4 = (uint64_t **)v39[2];
        v27 = *a4 == v39;
        v39 = (uint64_t *)a4;
      }
      while (!v27);
    }
    if (a4 == v9)
      goto LABEL_84;
    result = (const void **)a5;
    if ((v21 & 0x80) == 0
      || (v21 = *(_QWORD *)(a5 + 8), (v21 & 0x8000000000000000) == 0)
      && ((result = *(const void ***)a5, !v21) || result))
    {
      v40 = a4 + 4;
      if ((*((char *)a4 + 55) & 0x80000000) == 0)
      {
        v41 = *((unsigned __int8 *)a4 + 55);
LABEL_77:
        if (v41 >= v21)
          v42 = v21;
        else
          v42 = v41;
        v43 = memcmp(result, v40, v42);
        if (v43)
        {
          if ((v43 & 0x80000000) == 0)
            return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v8, v6, (const void **)a5);
        }
        else if (v21 >= v41)
        {
          return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v8, v6, (const void **)a5);
        }
LABEL_84:
        if (v37)
        {
          *v6 = (uint64_t *)a4;
        }
        else
        {
          *v6 = a2;
          return (const void **)(a2 + 1);
        }
        return (const void **)a4;
      }
      v41 = (size_t)a4[5];
      if ((v41 & 0x8000000000000000) == 0)
      {
        v40 = (_QWORD *)*v40;
        if (!v41 || v40)
          goto LABEL_77;
      }
    }
  }
LABEL_88:
  __break(1u);
  return result;
}

const void **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v3;
  _QWORD *v4;
  size_t v6;
  size_t v7;
  const void **v8;
  BOOL v9;
  char v10;
  _QWORD *v11;
  const void **result;
  size_t v13;
  const void **v14;
  size_t v15;
  const void *v16;
  size_t v17;
  size_t v18;
  const void **v19;
  size_t v20;
  size_t v21;
  int v22;
  char v24;

  v4 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v6 = *((unsigned __int8 *)a3 + 23);
    v8 = (const void **)*a3;
    v7 = (size_t)a3[1];
    if (v7)
      v9 = v8 == 0;
    else
      v9 = 0;
    v10 = !v9;
    v24 = v10;
    while (1)
    {
      v11 = (_QWORD *)v3;
      result = a3;
      v13 = v6;
      if ((v6 & 0x80) != 0)
      {
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_42;
        result = v8;
        v13 = v7;
        if ((v24 & 1) == 0)
          goto LABEL_42;
      }
      v14 = (const void **)(v3 + 32);
      v15 = *(unsigned __int8 *)(v3 + 55);
      v16 = (const void *)(v3 + 32);
      v17 = v15;
      if (*(char *)(v3 + 55) < 0)
      {
        v17 = *(_QWORD *)(v3 + 40);
        if ((v17 & 0x8000000000000000) != 0 || (v16 = *v14, v17) && !v16)
        {
LABEL_42:
          __break(1u);
          return result;
        }
      }
      if (v17 >= v13)
        v18 = v13;
      else
        v18 = v17;
      result = (const void **)memcmp(result, v16, v18);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) != 0)
          goto LABEL_9;
LABEL_24:
        if ((v15 & 0x80) != 0)
        {
          v15 = v11[5];
          if ((v15 & 0x8000000000000000) != 0)
            goto LABEL_42;
          v14 = (const void **)*v14;
          if (v15)
          {
            if (!v14)
              goto LABEL_42;
          }
        }
        v19 = a3;
        v20 = v6;
        if ((v6 & 0x80) != 0)
        {
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_42;
          v19 = v8;
          v20 = v7;
          if ((v24 & 1) == 0)
            goto LABEL_42;
        }
        if (v20 >= v15)
          v21 = v15;
        else
          v21 = v20;
        v22 = memcmp(v14, v19, v21);
        if (v22)
        {
          if ((v22 & 0x80000000) == 0)
            goto LABEL_41;
        }
        else if (v15 >= v20)
        {
          goto LABEL_41;
        }
        v4 = v11 + 1;
        v3 = v11[1];
        if (!v3)
          goto LABEL_41;
      }
      else
      {
        if (v13 >= v17)
          goto LABEL_24;
LABEL_9:
        v3 = *v11;
        v4 = v11;
        if (!*v11)
          goto LABEL_41;
      }
    }
  }
  v11 = (_QWORD *)(a1 + 8);
LABEL_41:
  *a2 = v11;
  return (const void **)v4;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 79) < 0)
    {
      operator delete(*(void **)(a2 + 56));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a2);
      return;
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

void webrtc::AudioDecoderMultiChannelOpusImpl::MakeAudioDecoder(unsigned int *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  int v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  size_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = *a1;
  if ((v3 - 25) < 0xFFFFFFE8)
    goto LABEL_16;
  v5 = a1[1];
  if (v5 < 0)
    goto LABEL_16;
  v6 = a1[2];
  if (v6 < 0)
    goto LABEL_16;
  if (v5 < v6)
    goto LABEL_16;
  v7 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
  v8 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  if (v8 - v7 != v3)
    goto LABEL_16;
  v9 = v6 + v5;
  if (v7 != v8)
  {
    v10 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
    do
    {
      v11 = *v10;
      if (v11 != 255 && v9 <= v11)
        goto LABEL_16;
    }
    while (++v10 != v8);
  }
  if ((int)v3 > 255
    || v9 >= 255
    || (v30 = 0, WebRtcOpus_MultistreamDecoderCreate(&v30, (int)v3, v5, v6, v7)))
  {
LABEL_16:
    *a2 = 0;
    return;
  }
  v20 = operator new();
  v21 = v30;
  v23 = (_BYTE *)*((_QWORD *)a1 + 2);
  v22 = (_BYTE *)*((_QWORD *)a1 + 3);
  v24 = v22 - v23;
  if (v22 == v23)
  {
    v25 = 0;
    v26 = 0;
  }
  else
  {
    if ((v24 & 0x8000000000000000) != 0)
      goto LABEL_27;
    v25 = (char *)operator new(v22 - v23);
    v26 = &v25[v24];
    memcpy(v25, v23, v24);
  }
  *(_QWORD *)v20 = &off_24C0AD3E8;
  *(_QWORD *)(v20 + 8) = v21;
  *(_QWORD *)(v20 + 16) = *(_QWORD *)a1;
  *(_DWORD *)(v20 + 24) = a1[2];
  *(_QWORD *)(v20 + 40) = 0;
  *(_QWORD *)(v20 + 48) = 0;
  *(_QWORD *)(v20 + 32) = 0;
  v27 = v26 - v25;
  if (v26 == v25)
    goto LABEL_25;
  if (v27 < 0)
LABEL_27:
    abort();
  v28 = (char *)operator new(v26 - v25);
  *(_QWORD *)(v20 + 32) = v28;
  v29 = &v28[v27];
  *(_QWORD *)(v20 + 48) = &v28[v27];
  memcpy(v28, v25, v26 - v25);
  *(_QWORD *)(v20 + 40) = v29;
LABEL_25:
  WebRtcOpus_DecoderInit(v21, v13, v14, v15, v16, v17, v18, v19);
  *a2 = v20;
  if (v25)
    operator delete(v25);
}

void webrtc::AudioDecoderMultiChannelOpusImpl::~AudioDecoderMultiChannelOpusImpl(webrtc::AudioDecoderMultiChannelOpusImpl *this)
{
  void **v2;
  void *v3;
  void *v4;

  v2 = (void **)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *v2;
    if (*v2 || (v3 = v2[1]) != 0)
      free(v3);
    free(v2);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
}

{
  void **v2;
  void *v3;
  void *v4;

  v2 = (void **)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *v2;
    if (*v2 || (v3 = v2[1]) != 0)
      free(v3);
    free(v2);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::AudioDecoderMultiChannelOpusImpl::SdpToConfig(webrtc::AudioDecoderMultiChannelOpusImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  void *v10;
  size_t v11;
  void *v12;
  char *v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  char v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;

  v5 = *((_QWORD *)this + 4);
  webrtc::GetFormatParameter<int>((uint64_t)this, "num_streams", 0xBuLL);
  if ((v6 & 0xFF00000000) == 0
    || (v7 = v6, webrtc::GetFormatParameter<int>((uint64_t)this, "coupled_streams", 0xFuLL), (v8 & 0xFF00000000) == 0)
    || (v9 = v8,
        webrtc::GetFormatParameter<std::vector<unsigned char>>((uint64_t)this, "channel_mapping", 0xFuLL, (uint64_t)&v19),
        !v21))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
    return;
  }
  v10 = v19;
  v11 = v20 - v19;
  if (v20 == v19)
  {
    v13 = 0;
    v12 = 0;
    if ((v5 - 25) < 0xFFFFFFE8)
      goto LABEL_25;
  }
  else
  {
    if ((v11 & 0x8000000000000000) != 0)
      abort();
    v12 = operator new(v20 - v19);
    v13 = (char *)v12 + v11;
    memcpy(v12, v10, v11);
    v11 += (size_t)v12;
    if ((v5 - 25) < 0xFFFFFFE8)
      goto LABEL_25;
  }
  if (v7 < 0 || v9 < 0 || v7 < v9 || v11 - (_QWORD)v12 != v5)
    goto LABEL_25;
  v14 = v9 + v7;
  if (v12 != (void *)v11)
  {
    v15 = (unsigned __int8 *)v12;
    do
    {
      v16 = *v15;
      if (v16 != 255 && v14 <= v16)
        goto LABEL_25;
    }
    while (++v15 != (unsigned __int8 *)v11);
  }
  if ((int)v5 > 255 || v14 >= 255)
  {
LABEL_25:
    v18 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_26;
  }
  *(_DWORD *)a2 = v5;
  *(_DWORD *)(a2 + 4) = v7;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v11;
  v18 = 1;
  *(_QWORD *)(a2 + 32) = v13;
  v12 = 0;
LABEL_26:
  *(_BYTE *)(a2 + 40) = v18;
  if (v10)
  {
    v20 = v10;
    operator delete(v10);
  }
  if (v12)
    operator delete(v12);
}

void webrtc::GetFormatParameter<int>(uint64_t a1, char *a2, size_t a3)
{
  unsigned __int8 v3;
  std::string v4;
  unsigned __int8 v5;
  std::string __p;

  webrtc::GetFormatParameter(a2, a3, a1, &v4);
  v3 = v5;
  if (!v5)
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
LABEL_10:
    rtc::string_to_number_internal::ParseSigned((void **)&__p.__r_.__value_.__l.__data_, v3, 10);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_11:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v5)
      return;
    goto LABEL_12;
  }
  __p = v4;
  memset(&v4, 0, sizeof(v4));
  v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_10;
  if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || __p.__r_.__value_.__l.__size_ && !__p.__r_.__value_.__r.__words[0])
  {
    __break(1u);
    return;
  }
  rtc::string_to_number_internal::ParseSigned((void **)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_11;
LABEL_7:
  if (!v5)
    return;
LABEL_12:
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

uint64_t webrtc::AudioDecoderMultiChannelOpusImpl::ParsePayload@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  const void *v26;
  void *v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;

  v38 = a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (!WebRtcOpus_PacketHasFec(*(unsigned __int8 **)(a2 + 16), *(_QWORD *)a2))
    goto LABEL_57;
  v8 = *(unsigned __int8 **)(a2 + 16);
  v9 = *(_QWORD *)a2;
  if (!WebRtcOpus_PacketHasFec(v8, *(_QWORD *)a2))
  {
    v13 = *(_QWORD *)(a1 + 8);
    if (!v9)
    {
      if (*(_BYTE *)(v13 + 20))
      {
        if (*(_DWORD *)(v13 + 16) >= 120 * (*(_DWORD *)(v13 + 36) / 1000))
          LODWORD(v11) = 120 * (*(_DWORD *)(v13 + 36) / 1000);
        else
          LODWORD(v11) = *(_DWORD *)(v13 + 16);
        v12 = *(_QWORD *)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_51;
        goto LABEL_49;
      }
      LODWORD(v11) = 10 * (*(_DWORD *)(v13 + 36) / 1000);
      v12 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        goto LABEL_49;
      goto LABEL_51;
    }
    if ((int)v9 < 1)
    {
LABEL_16:
      LODWORD(v11) = 0;
      v12 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        goto LABEL_49;
      goto LABEL_51;
    }
    v14 = *v8;
    if ((v14 & 3) != 0)
    {
      if ((v14 & 3) == 3)
      {
        if (v9 < 2)
          goto LABEL_16;
        v17 = v8[1] & 0x3F;
        v18 = *(_DWORD *)(v13 + 36);
        if ((v14 & 0x80) != 0)
          goto LABEL_44;
LABEL_35:
        v19 = 1374389535 * (v18 << ((*v8 >> 3) & 3));
        v20 = (v19 >> 37) + ((unint64_t)v19 >> 63);
        if (((v14 >> 3) & 3) == 3)
          v21 = 60 * v18 / 1000;
        else
          v21 = v20;
        v22 = v18 / 50;
        if ((v14 & 8) == 0)
          v22 = v18 / 100;
        if ((~v14 & 0x60) != 0)
          v23 = v21;
        else
          v23 = v22;
LABEL_45:
        v25 = v23 * v17;
        if (v25 <= 120 * v18 / 1000)
          LODWORD(v11) = v25;
        else
          LODWORD(v11) = 0;
        v12 = *(_QWORD *)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_51;
        goto LABEL_49;
      }
      v17 = 2;
      v18 = *(_DWORD *)(v13 + 36);
      if ((v14 & 0x80) == 0)
        goto LABEL_35;
    }
    else
    {
      v17 = 1;
      v18 = *(_DWORD *)(v13 + 36);
      if ((v14 & 0x80) == 0)
        goto LABEL_35;
    }
LABEL_44:
    v24 = 1374389535 * (v18 << ((*v8 >> 3) & 3));
    v23 = (v24 >> 39) + ((unint64_t)v24 >> 63);
    goto LABEL_45;
  }
  if (!WebRtcOpus_PacketHasFec(v8, v9))
    goto LABEL_16;
  v10 = *v8;
  if ((char)*v8 < 0)
  {
    v15 = 48000 << ((*v8 >> 3) & 3);
    if (v15 >> 9 >= 0x177)
      LODWORD(v11) = v15 / 0x190;
    else
      LODWORD(v11) = 0;
    v12 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_51;
    goto LABEL_49;
  }
  if ((~v10 & 0x60) == 0)
  {
    if ((v10 & 8) != 0)
      LODWORD(v11) = 960;
    else
      LODWORD(v11) = 480;
    v12 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_51;
LABEL_49:
    v26 = *(const void **)(a2 + 16);
    v27 = (void *)operator new[]();
    memcpy(v27, v26, v12);
    goto LABEL_52;
  }
  v16 = (v10 >> 3) & 3;
  if (v16 == 3)
  {
    LODWORD(v11) = 2880;
    v12 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      goto LABEL_49;
  }
  else
  {
    v11 = (42949673 * (unint64_t)(48000 << v16)) >> 32;
    v12 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      goto LABEL_49;
  }
LABEL_51:
  v27 = 0;
LABEL_52:
  result = operator new();
  *(_QWORD *)result = &unk_24C0AD470;
  *(_QWORD *)(result + 8) = a1;
  *(_QWORD *)(result + 16) = v12;
  *(_QWORD *)(result + 24) = v12;
  *(_QWORD *)(result + 32) = v27;
  *(_BYTE *)(result + 40) = 0;
  v37 = result;
  v35 = 1;
  v36 = a3 - v11;
  v29 = a4[1];
  if (v29 >= a4[2])
  {
    v30 = std::vector<webrtc::AudioDecoder::ParseResult>::__emplace_back_slow_path<unsigned int,int,std::unique_ptr<webrtc::AudioDecoder::EncodedAudioFrame>>(a4, &v36, &v35, &v37);
    v31 = v37;
    a4[1] = v30;
    v37 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  else
  {
    if (!v29)
    {
LABEL_65:
      __break(1u);
      return result;
    }
    *(_DWORD *)v29 = a3 - v11;
    *(_DWORD *)(v29 + 4) = 1;
    *(_QWORD *)(v29 + 8) = result;
    a4[1] = v29 + 16;
  }
LABEL_57:
  result = operator new();
  *(_QWORD *)result = &unk_24C0AD470;
  *(_QWORD *)(result + 8) = a1;
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  v32 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 32) = v32;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(result + 40) = 1;
  v37 = result;
  v36 = 0;
  v33 = a4[1];
  if (v33 < a4[2])
  {
    if (v33)
    {
      *(_DWORD *)v33 = a3;
      *(_DWORD *)(v33 + 4) = 0;
      *(_QWORD *)(v33 + 8) = result;
      a4[1] = v33 + 16;
      return result;
    }
    goto LABEL_65;
  }
  v34 = std::vector<webrtc::AudioDecoder::ParseResult>::__emplace_back_slow_path<unsigned int &,int,std::unique_ptr<webrtc::AudioDecoder::EncodedAudioFrame>>(a4, &v38, &v36, &v37);
  result = v37;
  a4[1] = v34;
  v37 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL webrtc::AudioDecoderMultiChannelOpusImpl::PacketHasFec(webrtc::AudioDecoderMultiChannelOpusImpl *this, unsigned __int8 *a2, uint64_t a3)
{
  return WebRtcOpus_PacketHasFec(a2, a3);
}

unint64_t webrtc::AudioDecoderMultiChannelOpusImpl::PacketDurationRedundant(webrtc::AudioDecoderMultiChannelOpusImpl *this, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t result;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;

  if (!WebRtcOpus_PacketHasFec(a2, a3))
  {
    v8 = *((_QWORD *)this + 1);
    if (!a3)
    {
      if (!*(_BYTE *)(v8 + 20))
        return (10 * (*(_DWORD *)(v8 + 36) / 1000));
      v10 = *(_DWORD *)(v8 + 16);
      v11 = 120 * (*(_DWORD *)(v8 + 36) / 1000);
      if (v10 >= v11)
        return v11;
      else
        return v10;
    }
    if ((int)a3 < 1)
      return 0;
    v9 = *a2;
    if ((v9 & 3) != 0)
    {
      if ((v9 & 3) == 3)
      {
        if (a3 < 2)
          return 0;
        v14 = a2[1] & 0x3F;
        v15 = *(_DWORD *)(v8 + 36);
        if ((v9 & 0x80) != 0)
          goto LABEL_35;
LABEL_26:
        v16 = 1374389535 * (v15 << ((*a2 >> 3) & 3));
        v17 = (v16 >> 37) + ((unint64_t)v16 >> 63);
        if (((v9 >> 3) & 3) == 3)
          v18 = 60 * v15 / 1000;
        else
          v18 = v17;
        v19 = v15 / 50;
        if ((v9 & 8) == 0)
          v19 = v15 / 100;
        if ((~v9 & 0x60) != 0)
          v20 = v18;
        else
          v20 = v19;
        goto LABEL_36;
      }
      v14 = 2;
      v15 = *(_DWORD *)(v8 + 36);
      if ((v9 & 0x80) == 0)
        goto LABEL_26;
    }
    else
    {
      v14 = 1;
      v15 = *(_DWORD *)(v8 + 36);
      if ((v9 & 0x80) == 0)
        goto LABEL_26;
    }
LABEL_35:
    v21 = 1374389535 * (v15 << ((*a2 >> 3) & 3));
    v20 = (v21 >> 39) + ((unint64_t)v21 >> 63);
LABEL_36:
    v22 = v20 * v14;
    if (v22 <= 120 * v15 / 1000)
      return v22;
    else
      return 0;
  }
  result = WebRtcOpus_PacketHasFec(a2, a3);
  if ((_DWORD)result)
  {
    v7 = *a2;
    if ((char)*a2 < 0)
    {
      v12 = 48000 << ((*a2 >> 3) & 3);
      if (v12 >> 9 >= 0x177)
        return v12 / 0x190;
      else
        return 0;
    }
    else if ((~v7 & 0x60) != 0)
    {
      v13 = (v7 >> 3) & 3;
      if (v13 == 3)
        return 2880;
      else
        return (42949673 * (unint64_t)(48000 << v13)) >> 32;
    }
    else if ((v7 & 8) != 0)
    {
      return 960;
    }
    else
    {
      return 480;
    }
  }
  return result;
}

uint64_t webrtc::AudioDecoderMultiChannelOpusImpl::DecodeInternal(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, _WORD *a5, int *a6)
{
  uint64_t result;
  int v9;
  __int16 v10;

  v10 = 1;
  result = WebRtcOpus_Decode(*(_QWORD *)(a1 + 8), a2, a3, a5, &v10);
  if ((int)result >= 1)
    result = (*(_DWORD *)(a1 + 16) * result);
  if (v10 == 2)
    v9 = 2;
  else
    v9 = 1;
  *a6 = v9;
  return result;
}

uint64_t webrtc::AudioDecoderMultiChannelOpusImpl::DecodeRedundantInternal(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, _WORD *a5, int *a6)
{
  uint64_t result;
  int v12;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;

  if (WebRtcOpus_PacketHasFec(a2, a3))
  {
    v14 = 1;
    result = WebRtcOpus_DecodeFec(*(_QWORD *)(a1 + 8), a2, a3, a5, (__int16 *)&v14);
    if ((int)result >= 1)
      result = (*(_DWORD *)(a1 + 16) * result);
    v12 = v14;
  }
  else
  {
    v15 = 1;
    result = WebRtcOpus_Decode(*(_QWORD *)(a1 + 8), a2, a3, a5, &v15);
    if ((int)result >= 1)
      result = (*(_DWORD *)(a1 + 16) * result);
    v12 = v15;
  }
  if (v12 == 2)
    v13 = 2;
  else
    v13 = 1;
  *a6 = v13;
  return result;
}

uint64_t webrtc::AudioDecoderMultiChannelOpusImpl::Reset(webrtc::AudioDecoderMultiChannelOpusImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  int *v10;

  v8 = *((_QWORD *)this + 1);
  if (*(_QWORD *)v8)
    result = opus_decoder_ctl(*(int **)v8, 4028, a3, a4, a5, a6, a7, a8, v10);
  else
    result = opus_multistream_decoder_ctl(*(int **)(v8 + 8), 4028, a3, a4, a5, a6, a7, a8, (uint64_t)v10);
  *(_DWORD *)(v8 + 32) = 0;
  return result;
}

uint64_t webrtc::AudioDecoderMultiChannelOpusImpl::PacketDuration(webrtc::AudioDecoderMultiChannelOpusImpl *this, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;

  v3 = *((_QWORD *)this + 1);
  if (a3)
  {
    if ((int)a3 < 1)
      return 0;
    v4 = *a2;
    if ((v4 & 3) != 0)
    {
      if ((v4 & 3) == 3)
      {
        if (a3 < 2)
          return 0;
        v8 = a2[1] & 0x3F;
        v9 = *(_DWORD *)(v3 + 36);
        if ((v4 & 0x80) != 0)
          goto LABEL_22;
LABEL_13:
        v10 = 1374389535 * (v9 << ((*a2 >> 3) & 3));
        v11 = (v10 >> 37) + ((unint64_t)v10 >> 63);
        if (((v4 >> 3) & 3) == 3)
          v12 = 60 * v9 / 1000;
        else
          v12 = v11;
        v13 = v9 / 50;
        if ((v4 & 8) == 0)
          v13 = v9 / 100;
        if ((~v4 & 0x60) != 0)
          v14 = v12;
        else
          v14 = v13;
        goto LABEL_23;
      }
      v8 = 2;
      v9 = *(_DWORD *)(v3 + 36);
      if ((v4 & 0x80) == 0)
        goto LABEL_13;
    }
    else
    {
      v8 = 1;
      v9 = *(_DWORD *)(v3 + 36);
      if ((v4 & 0x80) == 0)
        goto LABEL_13;
    }
LABEL_22:
    v15 = 1374389535 * (v9 << ((*a2 >> 3) & 3));
    v14 = (v15 >> 39) + ((unint64_t)v15 >> 63);
LABEL_23:
    v16 = v14 * v8;
    if (v16 <= 120 * v9 / 1000)
      return v16;
    else
      return 0;
  }
  if (!*(_BYTE *)(v3 + 20))
    return (10 * (*(_DWORD *)(v3 + 36) / 1000));
  v6 = *(_DWORD *)(v3 + 16);
  v7 = 120 * (*(_DWORD *)(v3 + 36) / 1000);
  if (v6 >= v7)
    return v7;
  else
    return v6;
}

uint64_t webrtc::AudioDecoderMultiChannelOpusImpl::SampleRateHz(webrtc::AudioDecoderMultiChannelOpusImpl *this)
{
  return 48000;
}

uint64_t webrtc::AudioDecoderMultiChannelOpusImpl::Channels(webrtc::AudioDecoderMultiChannelOpusImpl *this)
{
  return *((int *)this + 4);
}

void webrtc::OpusFrame::~OpusFrame(webrtc::OpusFrame *this)
{
  uint64_t v2;

  *(_QWORD *)this = &unk_24C0AD470;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
}

{
  uint64_t v2;

  *(_QWORD *)this = &unk_24C0AD470;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::OpusFrame::Duration(webrtc::OpusFrame *this)
{
  uint64_t v1;
  int v2;

  v1 = 64;
  if (!*((_BYTE *)this + 40))
    v1 = 72;
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 1) + v1))(*((_QWORD *)this + 1), *((_QWORD *)this + 4), *((_QWORD *)this + 2));
  return v2 & ~(v2 >> 31);
}

BOOL webrtc::OpusFrame::IsDtxPacket(webrtc::OpusFrame *this)
{
  return *((_QWORD *)this + 2) < 3uLL;
}

uint64_t webrtc::OpusFrame::Decode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  char v21;
  int v22;

  v22 = 1;
  v7 = *(unsigned __int8 *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(uint64_t **)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (*(uint64_t (**)(uint64_t *))(*v9 + 88))(v9);
  v12 = 2 * a3;
  v13 = *v9;
  if (v7)
  {
    v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v13 + 64))(v9, v8, v10);
    if ((v14 & 0x80000000) == 0)
    {
      v15 = v14;
      result = (*(uint64_t (**)(uint64_t *))(*v9 + 96))(v9);
      if (v12 < 2 * v15 * result)
        goto LABEL_10;
    }
    v17 = 13;
  }
  else
  {
    v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v13 + 72))(v9, v8, v10);
    if ((v18 & 0x80000000) == 0)
    {
      v19 = v18;
      result = (*(uint64_t (**)(uint64_t *))(*v9 + 96))(v9);
      if (v12 < 2 * v19 * result)
        goto LABEL_10;
    }
    v17 = 14;
  }
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*v9 + 8 * v17))(v9, v8, v10, v11, a2, &v22);
  if ((result & 0x80000000) != 0)
  {
LABEL_10:
    v21 = 0;
    *(_BYTE *)a4 = 0;
    goto LABEL_11;
  }
  v20 = v22;
  *(_QWORD *)a4 = result;
  *(_DWORD *)(a4 + 8) = v20;
  v21 = 1;
LABEL_11:
  *(_BYTE *)(a4 + 16) = v21;
  return result;
}

unint64_t std::vector<webrtc::AudioDecoder::ParseResult>::__emplace_back_slow_path<unsigned int,int,std::unique_ptr<webrtc::AudioDecoder::EncodedAudioFrame>>(unint64_t *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  double *v28;
  const double *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  float64x2x2_t v36;

  v4 = a1[1] - *a1;
  v5 = (v4 >> 4) + 1;
  if (v5 >> 60)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 3 > v5)
    v5 = v7 >> 3;
  v23 = (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0;
  v8 = 0xFFFFFFFFFFFFFFFLL;
  if (!v23)
    v8 = v5;
  if (!v8)
  {
    __break(1u);
LABEL_31:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v8 >> 60)
    goto LABEL_31;
  v12 = 16 * v8;
  v13 = (char *)operator new(16 * v8);
  v14 = (unint64_t)&v13[16 * (v4 >> 4)];
  v15 = &v13[v12];
  v16 = *a2;
  v17 = *a3;
  v18 = *a4;
  *a4 = 0;
  *(_DWORD *)v14 = v16;
  *(_DWORD *)(v14 + 4) = v17;
  *(_QWORD *)(v14 + 8) = v18;
  v19 = v14 + 16;
  v20 = (char *)*a1;
  v21 = (char *)a1[1];
  if (v21 == (char *)*a1)
  {
    *a1 = v14;
    a1[1] = v19;
    a1[2] = (unint64_t)v15;
  }
  else
  {
    v22 = (unint64_t)&v21[-*a1 - 16];
    if (v22 < 0x90)
      goto LABEL_18;
    v23 = &v13[v4 - (v22 & 0xFFFFFFFFFFFFFFF0) - 16] >= v21
       || (unint64_t)&v21[-(v22 & 0xFFFFFFFFFFFFFFF0) - 16] >= v14;
    if (!v23)
      goto LABEL_18;
    v24 = (v22 >> 4) + 1;
    v25 = 16 * (v24 & 0x1FFFFFFFFFFFFFFELL);
    v26 = &v21[-v25];
    v27 = v14 - v25;
    v28 = (double *)(v14 - 32);
    v29 = (const double *)(v21 - 32);
    v30 = v24 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v36 = vld2q_f64(v29);
      v29[3] = 0.0;
      v29[1] = 0.0;
      vst2q_f64(v28, v36);
      v28 -= 4;
      v29 -= 4;
      v30 -= 2;
    }
    while (v30);
    v21 = v26;
    v14 = v27;
    if (v24 != (v24 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v27 = v14;
      do
      {
        v31 = *((_QWORD *)v21 - 2);
        v21 -= 16;
        *(_QWORD *)(v27 - 16) = v31;
        v27 -= 16;
        v32 = *((_QWORD *)v21 + 1);
        *((_QWORD *)v21 + 1) = 0;
        *(_QWORD *)(v27 + 8) = v32;
      }
      while (v21 != v20);
    }
    v21 = (char *)*a1;
    v33 = (char *)a1[1];
    *a1 = v27;
    a1[1] = v19;
    a1[2] = (unint64_t)v15;
    while (v33 != v21)
    {
      v34 = *((_QWORD *)v33 - 1);
      *((_QWORD *)v33 - 1) = 0;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      v33 -= 16;
    }
  }
  if (v21)
    operator delete(v21);
  return v19;
}

webrtc::AudioDecoderOpusImpl *webrtc::AudioDecoderOpusImpl::AudioDecoderOpusImpl(webrtc::AudioDecoderOpusImpl *this, uint64_t a2, int a3)
{
  uint64_t v4;
  int v5;
  void *v6;
  size_t *v7;
  size_t *v8;
  size_t *v9;
  _DWORD *v10;
  size_t *v11;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v23;
  size_t v24[2];
  unsigned __int8 v25;

  *(_QWORD *)this = &off_24C0AD4A8;
  *((_QWORD *)this + 2) = a2;
  *((_DWORD *)this + 6) = a3;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-Audio-OpusGeneratePlc", 0x1CuLL, v24);
  v4 = v25;
  v5 = (char)v25;
  v6 = (void *)v24[0];
  if ((v25 & 0x80u) == 0)
  {
    v7 = v24;
  }
  else
  {
    v4 = v24[1];
    v7 = (size_t *)v24[0];
  }
  v8 = (size_t *)((char *)v7 + v4);
  if (v4 >= 7)
  {
    v9 = v7;
    do
    {
      v10 = memchr(v9, 69, v4 - 6);
      if (!v10)
        break;
      v11 = (size_t *)v10;
      if (*v10 == 1650552389 && *(_DWORD *)((char *)v10 + 3) == 1684368482)
        goto LABEL_13;
      v9 = (size_t *)((char *)v10 + 1);
      v4 = (char *)v8 - ((char *)v11 + 1);
    }
    while (v4 > 6);
  }
  v11 = v8;
LABEL_13:
  if (v5 < 0)
    operator delete(v6);
  v14 = v11 != v8 && v11 == v7;
  *((_BYTE *)this + 28) = v14;
  WebRtcOpus_DecoderCreate((char ***)this + 1, *((char **)this + 2), *((_DWORD *)this + 6));
  v21 = *((_QWORD *)this + 1);
  if (*(_QWORD *)v21)
    opus_decoder_ctl(*(int **)v21, 4028, v15, v16, v17, v18, v19, v20, v23);
  else
    opus_multistream_decoder_ctl(*(int **)(v21 + 8), 4028, v15, v16, v17, v18, v19, v20, (uint64_t)v23);
  *(_DWORD *)(v21 + 32) = 0;
  return this;
}

void webrtc::AudioDecoderOpusImpl::~AudioDecoderOpusImpl(webrtc::AudioDecoderOpusImpl *this)
{
  void **v1;
  void *v2;

  v1 = (void **)*((_QWORD *)this + 1);
  if (v1)
  {
    v2 = *v1;
    if (*v1 || (v2 = v1[1]) != 0)
      free(v2);
    free(v1);
  }
}

{
  void **v1;
  void *v2;

  v1 = (void **)*((_QWORD *)this + 1);
  if (v1)
  {
    v2 = *v1;
    if (*v1 || (v2 = v1[1]) != 0)
      free(v2);
    free(v1);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioDecoderOpusImpl::ParsePayload@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  size_t v31;
  const void *v32;
  void *v33;
  uint64_t result;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;

  v44 = a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (!WebRtcOpus_PacketHasFec(*(unsigned __int8 **)(a2 + 16), *(_QWORD *)a2))
    goto LABEL_53;
  v8 = *(unsigned __int8 **)(a2 + 16);
  v9 = *(_QWORD *)a2;
  if (!WebRtcOpus_PacketHasFec(v8, *(_QWORD *)a2))
  {
    v17 = *(_QWORD *)(a1 + 8);
    if (!v9)
    {
      if (*(_BYTE *)(v17 + 20))
      {
        if (*(_DWORD *)(v17 + 16) >= 120 * (*(_DWORD *)(v17 + 36) / 1000))
          v19 = 120 * (*(_DWORD *)(v17 + 36) / 1000);
        else
          v19 = *(_DWORD *)(v17 + 16);
      }
      else
      {
        v19 = 10 * (*(_DWORD *)(v17 + 36) / 1000);
      }
      goto LABEL_45;
    }
    if ((int)v9 < 1)
      goto LABEL_18;
    v18 = *v8;
    if ((v18 & 3) != 0)
    {
      if ((v18 & 3) == 3)
      {
        if (v9 < 2)
          goto LABEL_18;
        v22 = v8[1] & 0x3F;
        v23 = *(_DWORD *)(v17 + 36);
        if ((v18 & 0x80) != 0)
          goto LABEL_41;
LABEL_32:
        v24 = 1374389535 * (v23 << ((*v8 >> 3) & 3));
        v25 = (v24 >> 37) + ((unint64_t)v24 >> 63);
        if (((v18 >> 3) & 3) == 3)
          v26 = 60 * v23 / 1000;
        else
          v26 = v25;
        v27 = v23 / 50;
        if ((v18 & 8) == 0)
          v27 = v23 / 100;
        if ((~v18 & 0x60) != 0)
          v28 = v26;
        else
          v28 = v27;
        goto LABEL_42;
      }
      v22 = 2;
      v23 = *(_DWORD *)(v17 + 36);
      if ((v18 & 0x80) == 0)
        goto LABEL_32;
    }
    else
    {
      v22 = 1;
      v23 = *(_DWORD *)(v17 + 36);
      if ((v18 & 0x80) == 0)
        goto LABEL_32;
    }
LABEL_41:
    v29 = 1374389535 * (v23 << ((*v8 >> 3) & 3));
    v28 = (v29 >> 39) + ((unint64_t)v29 >> 63);
LABEL_42:
    v30 = v28 * v22;
    if (v30 <= 120 * v23 / 1000)
      v19 = v30;
    else
      v19 = 0;
    goto LABEL_45;
  }
  v10 = *(_DWORD *)(a1 + 24);
  if (!WebRtcOpus_PacketHasFec(v8, v9))
  {
LABEL_18:
    v19 = 0;
    goto LABEL_45;
  }
  v11 = *v8;
  if ((char)*v8 < 0)
  {
    v20 = 1374389535 * (v10 << ((*v8 >> 3) & 3));
    v16 = (v20 >> 39) + ((unint64_t)v20 >> 63);
  }
  else
  {
    v12 = 1374389535 * (v10 << ((*v8 >> 3) & 3));
    v13 = (v12 >> 37) + ((unint64_t)v12 >> 63);
    if (((v11 >> 3) & 3) == 3)
      v14 = 60 * v10 / 1000;
    else
      v14 = v13;
    v15 = v10 / 50;
    if ((v11 & 8) == 0)
      v15 = v10 / 100;
    if ((~v11 & 0x60) != 0)
      v16 = v14;
    else
      v16 = v15;
  }
  if (v16 > 120 * (v10 / 1000) || v16 < 10 * (v10 / 1000))
    v19 = 0;
  else
    v19 = v16;
LABEL_45:
  v31 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v32 = *(const void **)(a2 + 16);
    v33 = (void *)operator new[]();
    memcpy(v33, v32, v31);
  }
  else
  {
    v33 = 0;
  }
  result = operator new();
  *(_QWORD *)result = &unk_24C0AD470;
  *(_QWORD *)(result + 8) = a1;
  *(_QWORD *)(result + 16) = v31;
  *(_QWORD *)(result + 24) = v31;
  *(_QWORD *)(result + 32) = v33;
  *(_BYTE *)(result + 40) = 0;
  v43 = result;
  v41 = 1;
  v42 = a3 - v19;
  v35 = a4[1];
  if (v35 >= a4[2])
  {
    v36 = std::vector<webrtc::AudioDecoder::ParseResult>::__emplace_back_slow_path<unsigned int,int,std::unique_ptr<webrtc::AudioDecoder::EncodedAudioFrame>>(a4, &v42, &v41, &v43);
    v37 = v43;
    a4[1] = v36;
    v43 = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  else
  {
    if (!v35)
    {
LABEL_61:
      __break(1u);
      return result;
    }
    *(_DWORD *)v35 = a3 - v19;
    *(_DWORD *)(v35 + 4) = 1;
    *(_QWORD *)(v35 + 8) = result;
    a4[1] = v35 + 16;
  }
LABEL_53:
  result = operator new();
  *(_QWORD *)result = &unk_24C0AD470;
  *(_QWORD *)(result + 8) = a1;
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  v38 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(result + 32) = v38;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(result + 40) = 1;
  v43 = result;
  v42 = 0;
  v39 = a4[1];
  if (v39 < a4[2])
  {
    if (v39)
    {
      *(_DWORD *)v39 = a3;
      *(_DWORD *)(v39 + 4) = 0;
      *(_QWORD *)(v39 + 8) = result;
      a4[1] = v39 + 16;
      return result;
    }
    goto LABEL_61;
  }
  v40 = std::vector<webrtc::AudioDecoder::ParseResult>::__emplace_back_slow_path<unsigned int &,int,std::unique_ptr<webrtc::AudioDecoder::EncodedAudioFrame>>(a4, &v44, &v42, &v43);
  result = v43;
  a4[1] = v40;
  v43 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL webrtc::AudioDecoderOpusImpl::PacketHasFec(webrtc::AudioDecoderOpusImpl *this, unsigned __int8 *a2, uint64_t a3)
{
  return WebRtcOpus_PacketHasFec(a2, a3);
}

uint64_t webrtc::AudioDecoderOpusImpl::PacketDurationRedundant(webrtc::AudioDecoderOpusImpl *this, unsigned __int8 *a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;

  if (!WebRtcOpus_PacketHasFec(a2, a3))
  {
    v14 = *((_QWORD *)this + 1);
    if (!a3)
    {
      if (!*(_BYTE *)(v14 + 20))
        return (10 * (*(_DWORD *)(v14 + 36) / 1000));
      v16 = *(_DWORD *)(v14 + 16);
      v17 = 120 * (*(_DWORD *)(v14 + 36) / 1000);
      if (v16 >= v17)
        return v17;
      else
        return v16;
    }
    if ((int)a3 < 1)
      return 0;
    v15 = *a2;
    if ((v15 & 3) != 0)
    {
      if ((v15 & 3) == 3)
      {
        if (a3 < 2)
          return 0;
        v20 = a2[1] & 0x3F;
        v21 = *(_DWORD *)(v14 + 36);
        if ((v15 & 0x80) != 0)
          goto LABEL_44;
LABEL_35:
        v22 = 1374389535 * (v21 << ((*a2 >> 3) & 3));
        v23 = (v22 >> 37) + ((unint64_t)v22 >> 63);
        if (((v15 >> 3) & 3) == 3)
          v24 = 60 * v21 / 1000;
        else
          v24 = v23;
        v25 = v21 / 50;
        if ((v15 & 8) == 0)
          v25 = v21 / 100;
        if ((~v15 & 0x60) != 0)
          v26 = v24;
        else
          v26 = v25;
        goto LABEL_45;
      }
      v20 = 2;
      v21 = *(_DWORD *)(v14 + 36);
      if ((v15 & 0x80) == 0)
        goto LABEL_35;
    }
    else
    {
      v20 = 1;
      v21 = *(_DWORD *)(v14 + 36);
      if ((v15 & 0x80) == 0)
        goto LABEL_35;
    }
LABEL_44:
    v27 = 1374389535 * (v21 << ((*a2 >> 3) & 3));
    v26 = (v27 >> 39) + ((unint64_t)v27 >> 63);
LABEL_45:
    v28 = v26 * v20;
    if (v28 <= 120 * v21 / 1000)
      return v28;
    else
      return 0;
  }
  v6 = *((_DWORD *)this + 6);
  result = WebRtcOpus_PacketHasFec(a2, a3);
  if ((_DWORD)result)
  {
    v8 = *a2;
    if ((char)*a2 < 0)
    {
      v18 = 1374389535 * (v6 << ((*a2 >> 3) & 3));
      v13 = (v18 >> 39) + ((unint64_t)v18 >> 63);
    }
    else
    {
      v9 = 1374389535 * (v6 << ((*a2 >> 3) & 3));
      v10 = (v9 >> 37) + ((unint64_t)v9 >> 63);
      if (((v8 >> 3) & 3) == 3)
        v11 = 60 * v6 / 1000;
      else
        v11 = v10;
      v12 = v6 / 50;
      if ((v8 & 8) == 0)
        v12 = v6 / 100;
      if ((~v8 & 0x60) != 0)
        v13 = v11;
      else
        v13 = v12;
    }
    if (v13 > 120 * (v6 / 1000) || v13 < 10 * (v6 / 1000))
      return 0;
    else
      return v13;
  }
  return result;
}

uint64_t webrtc::AudioDecoderOpusImpl::DecodeInternal(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, _WORD *a5, int *a6)
{
  uint64_t result;
  int v9;
  __int16 v10;

  v10 = 1;
  result = WebRtcOpus_Decode(*(_QWORD *)(a1 + 8), a2, a3, a5, &v10);
  if ((int)result >= 1)
    result = (result * *(_DWORD *)(a1 + 16));
  if (v10 == 2)
    v9 = 2;
  else
    v9 = 1;
  *a6 = v9;
  return result;
}

uint64_t webrtc::AudioDecoderOpusImpl::DecodeRedundantInternal(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, _WORD *a5, int *a6)
{
  uint64_t result;
  int v12;
  int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;

  if (WebRtcOpus_PacketHasFec(a2, a3))
  {
    v14 = 1;
    result = WebRtcOpus_DecodeFec(*(_QWORD *)(a1 + 8), a2, a3, a5, (__int16 *)&v14);
    if ((int)result >= 1)
      result = (result * *(_DWORD *)(a1 + 16));
    v12 = v14;
  }
  else
  {
    v15 = 1;
    result = WebRtcOpus_Decode(*(_QWORD *)(a1 + 8), a2, a3, a5, &v15);
    if ((int)result >= 1)
      result = (result * *(_DWORD *)(a1 + 16));
    v12 = v15;
  }
  if (v12 == 2)
    v13 = 2;
  else
    v13 = 1;
  *a6 = v13;
  return result;
}

uint64_t webrtc::AudioDecoderOpusImpl::Reset(webrtc::AudioDecoderOpusImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  int *v10;

  v8 = *((_QWORD *)this + 1);
  if (*(_QWORD *)v8)
    result = opus_decoder_ctl(*(int **)v8, 4028, a3, a4, a5, a6, a7, a8, v10);
  else
    result = opus_multistream_decoder_ctl(*(int **)(v8 + 8), 4028, a3, a4, a5, a6, a7, a8, (uint64_t)v10);
  *(_DWORD *)(v8 + 32) = 0;
  return result;
}

uint64_t webrtc::AudioDecoderOpusImpl::PacketDuration(webrtc::AudioDecoderOpusImpl *this, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;

  v3 = *((_QWORD *)this + 1);
  if (a3)
  {
    if ((int)a3 < 1)
      return 0;
    v4 = *a2;
    if ((v4 & 3) != 0)
    {
      if ((v4 & 3) == 3)
      {
        if (a3 < 2)
          return 0;
        v8 = a2[1] & 0x3F;
        v9 = *(_DWORD *)(v3 + 36);
        if ((v4 & 0x80) != 0)
          goto LABEL_22;
LABEL_13:
        v10 = 1374389535 * (v9 << ((*a2 >> 3) & 3));
        v11 = (v10 >> 37) + ((unint64_t)v10 >> 63);
        if (((v4 >> 3) & 3) == 3)
          v12 = 60 * v9 / 1000;
        else
          v12 = v11;
        v13 = v9 / 50;
        if ((v4 & 8) == 0)
          v13 = v9 / 100;
        if ((~v4 & 0x60) != 0)
          v14 = v12;
        else
          v14 = v13;
        goto LABEL_23;
      }
      v8 = 2;
      v9 = *(_DWORD *)(v3 + 36);
      if ((v4 & 0x80) == 0)
        goto LABEL_13;
    }
    else
    {
      v8 = 1;
      v9 = *(_DWORD *)(v3 + 36);
      if ((v4 & 0x80) == 0)
        goto LABEL_13;
    }
LABEL_22:
    v15 = 1374389535 * (v9 << ((*a2 >> 3) & 3));
    v14 = (v15 >> 39) + ((unint64_t)v15 >> 63);
LABEL_23:
    v16 = v14 * v8;
    if (v16 <= 120 * v9 / 1000)
      return v16;
    else
      return 0;
  }
  if (!*(_BYTE *)(v3 + 20))
    return (10 * (*(_DWORD *)(v3 + 36) / 1000));
  v6 = *(_DWORD *)(v3 + 16);
  v7 = 120 * (*(_DWORD *)(v3 + 36) / 1000);
  if (v6 >= v7)
    return v7;
  else
    return v6;
}

uint64_t webrtc::AudioDecoderOpusImpl::SampleRateHz(webrtc::AudioDecoderOpusImpl *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t webrtc::AudioDecoderOpusImpl::Channels(webrtc::AudioDecoderOpusImpl *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t webrtc::AudioDecoderOpusImpl::GeneratePlc(uint64_t result, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  _WORD *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int8x16_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  const webrtc::SdpAudioFormat *v28;

  if (*(_BYTE *)(result + 28))
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 8);
    if (*(_BYTE *)(v5 + 20))
    {
      v6 = *(_DWORD *)(v5 + 16);
      if (v6 >= 120 * (*(_DWORD *)(v5 + 36) / 1000))
        v6 = 120 * (*(_DWORD *)(v5 + 36) / 1000);
    }
    else
    {
      v6 = 10 * (*(_DWORD *)(v5 + 36) / 1000);
    }
    v7 = v6 * *(_DWORD *)(result + 16);
    v9 = *a3;
    v8 = a3[1];
    v10 = *a3 + v7;
    if (v8 < v10)
    {
      v11 = v8 + (v8 >> 1);
      if (v11 <= v10)
        v12 = *a3 + v7;
      else
        v12 = v11;
      v13 = (void *)operator new[]();
      v14 = (uint64_t)v13;
      v15 = a3[2];
      if (v15)
      {
        memcpy(v13, (const void *)a3[2], 2 * *a3);
        a3[2] = v14;
        MEMORY[0x20BD0ADD4](v15, 0x1000C80BDFB0063);
      }
      else
      {
        a3[2] = (unint64_t)v13;
      }
      a3[1] = v12;
      v5 = *(_QWORD *)(v4 + 8);
    }
    *a3 = v10;
    if ((_DWORD)v7)
      v16 = (_WORD *)(a3[2] + 2 * v9);
    else
      v16 = 0;
    if (!*(_DWORD *)(v5 + 32))
      *(_DWORD *)(v5 + 32) = 0;
    v17 = *(_DWORD *)(v5 + 36) / 1000;
    if (*(_BYTE *)(v5 + 20))
    {
      v18 = *(_DWORD *)(v5 + 16);
      v19 = 120 * v17;
      if (v18 >= v19)
        v20 = v19;
      else
        v20 = v18;
      v21 = *(int8x16_t **)v5;
      if (*(_QWORD *)v5)
      {
LABEL_24:
        result = opus_decode(v21, 0, 0, v16, v20, 0);
        if ((int)result >= 1)
        {
LABEL_25:
          if (!*(_DWORD *)(v5 + 32))
            *(_DWORD *)(v5 + 32) = 0;
          if (*(_BYTE *)(v5 + 20))
            *(_DWORD *)(v5 + 16) = result;
          goto LABEL_32;
        }
LABEL_31:
        result = 0xFFFFFFFFLL;
LABEL_32:
        v26 = result & ~((int)result >> 31);
        if (v26 > v7)
        {
          v27 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/buffer.h", 328, "written_elements <= max_elements", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v22, v23, v24, v25, result & ~((int)result >> 31));
          return webrtc::AudioDecoderOpus::SdpToConfig((webrtc::AudioDecoderOpus *)v27, v28);
        }
        else
        {
          *a3 = v9 + v26;
        }
        return result;
      }
    }
    else
    {
      v20 = (10 * v17);
      v21 = *(int8x16_t **)v5;
      if (*(_QWORD *)v5)
        goto LABEL_24;
    }
    result = opus_multistream_decode_native(*(int **)(v5 + 8), 0, 0, (uint64_t)v16, (uint64_t)opus_copy_channel_out_short, v20, 0, 1, 0);
    if ((int)result >= 1)
      goto LABEL_25;
    goto LABEL_31;
  }
  return result;
}

void webrtc::AudioDecoderOpus::SdpToConfig(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned __int8 v5;
  uint64_t *v6;
  const void *p_s1;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  size_t v12;
  int v13;
  _BYTE **v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  void *__s1;
  size_t v23;
  unsigned __int8 v24;

  v24 = 6;
  if (&__s1 <= (void **)"stereo" && (char *)&__s1 + 6 > "stereo")
    goto LABEL_49;
  v3 = (uint64_t *)(a1 + 48);
  v2 = *(uint64_t **)(a1 + 48);
  strcpy((char *)&__s1, "stereo");
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 40, (const void **)&__s1, v2, (uint64_t *)(a1 + 48));
  v5 = v24;
  if (v3 == v4)
    goto LABEL_21;
  v6 = v4;
  if ((v24 & 0x80) != 0)
  {
    v8 = v23;
    if ((v23 & 0x8000000000000000) != 0)
      goto LABEL_49;
    p_s1 = __s1;
    if (v23)
    {
      if (!__s1)
        goto LABEL_49;
    }
  }
  else
  {
    p_s1 = &__s1;
    v8 = v24;
  }
  v9 = v6 + 4;
  if (*((char *)v6 + 55) < 0)
  {
    v10 = v6[5];
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_49;
    v9 = (_QWORD *)*v9;
    if (v10 && v9 == 0)
      goto LABEL_49;
  }
  else
  {
    v10 = *((unsigned __int8 *)v6 + 55);
  }
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(p_s1, v9, v12);
  if (v13)
  {
    if ((v13 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (v8 < v10)
LABEL_21:
    v6 = (uint64_t *)(a1 + 48);
LABEL_22:
  if ((v5 & 0x80) != 0)
  {
    operator delete(__s1);
    if (v6 == v3)
      goto LABEL_32;
  }
  else if (v6 == v3)
  {
LABEL_32:
    v18 = *(char *)(a1 + 23);
    if ((v18 & 0x80000000) == 0)
      return;
    goto LABEL_41;
  }
  v14 = (_BYTE **)(v6 + 7);
  v15 = *((unsigned __int8 *)v6 + 79);
  v16 = v6 + 7;
  v17 = v15;
  if (*((char *)v6 + 79) < 0)
  {
    v17 = v6[8];
    if (v17 < 0)
      goto LABEL_49;
    v16 = *v14;
    if (v17)
    {
      if (!v16)
        goto LABEL_49;
    }
  }
  if (v17 == 1 && *v16 == 48)
    goto LABEL_32;
  if ((v15 & 0x80) != 0)
  {
    v15 = v6[8];
    if (v15 < 0)
      goto LABEL_49;
    v14 = (_BYTE **)*v14;
    if (v15)
    {
      if (!v14)
        goto LABEL_49;
    }
  }
  if (v15 == 1 && *(_BYTE *)v14 == 49)
  {
    v19 = *(char *)(a1 + 23);
    if ((v19 & 0x80000000) == 0)
      return;
  }
  else
  {
    v21 = *(char *)(a1 + 23);
    if ((v21 & 0x80000000) == 0)
      return;
  }
LABEL_41:
  v20 = *(_QWORD *)(a1 + 8);
  if (v20 < 0 || v20 && !*(_QWORD *)a1)
LABEL_49:
    __break(1u);
}

void webrtc::AudioDecoderOpus::AppendSupportedDecoders(uint64_t a1)
{
  unint64_t v2;
  __int128 v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  __int128 v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  void **v21;
  void *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  std::pair<std::string const,std::string>::pair[abi:sn180100]<char const(&)[9],char const(&)[3],0>((uint64_t)v18, "minptime", "10");
  std::pair<std::string const,std::string>::pair[abi:sn180100]<char const(&)[9],char const(&)[3],0>((uint64_t)&v22, "useinbandfec", "1");
  v10 = 0;
  v11 = 0;
  v9 = (uint64_t *)&v10;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v9, (uint64_t *)&v10, (uint64_t)v18, (uint64_t)v18);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v9, (uint64_t *)&v10, (uint64_t)&v22, (uint64_t)&v22);
  HIBYTE(v13) = 4;
  if (v12 <= (void **)"opus" && (char *)v12 + 4 > "opus")
    goto LABEL_29;
  strcpy((char *)v12, "opus");
  LODWORD(v14) = 48000;
  *((_QWORD *)&v14 + 1) = 2;
  v15 = v9;
  v16 = v10;
  v17 = v11;
  if (v11)
  {
    v10[2] = &v16;
    v9 = (uint64_t *)&v10;
    v10 = 0;
    v11 = 0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v9, 0);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = (uint64_t *)&v16;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v9, (uint64_t)v10);
  if (SHIBYTE(v25) < 0)
LABEL_5:
    operator delete(*((void **)&v24 + 1));
LABEL_6:
  if ((SBYTE7(v24) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_14:
    operator delete(v20[0]);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_15;
  }
  operator delete(v22);
  if (SHIBYTE(v21) < 0)
    goto LABEL_14;
LABEL_8:
  if ((SHIBYTE(v19) & 0x80000000) == 0)
    goto LABEL_9;
LABEL_15:
  operator delete(v18[0]);
LABEL_9:
  *(_OWORD *)v18 = *(_OWORD *)v12;
  v19 = v13;
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  *(_OWORD *)v20 = v14;
  v21 = (void **)v15;
  v22 = v16;
  v23 = v17;
  if (v17)
  {
    v16[2] = &v22;
    v15 = (uint64_t *)&v16;
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v21 = &v22;
  }
  LODWORD(v24) = 48000;
  *((_QWORD *)&v24 + 1) = 1;
  *(_QWORD *)&v25 = 25769803840000;
  DWORD2(v25) = 510000;
  WORD6(v25) = 256;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= *(_QWORD *)(a1 + 16))
  {
    v7 = std::vector<webrtc::AudioCodecSpec>::__push_back_slow_path<webrtc::AudioCodecSpec>((void **)a1, (uint64_t)v18);
    goto LABEL_24;
  }
  if (!v2)
  {
LABEL_29:
    __break(1u);
    return;
  }
  v3 = *(_OWORD *)v18;
  *(_QWORD *)(v2 + 16) = v19;
  *(_OWORD *)v2 = v3;
  v18[1] = 0;
  v19 = 0;
  v18[0] = 0;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)v20;
  *(_QWORD *)(v2 + 40) = v21;
  v4 = v22;
  *(_QWORD *)(v2 + 48) = v22;
  v5 = v2 + 48;
  v6 = v23;
  *(_QWORD *)(v2 + 56) = v23;
  if (v6)
  {
    v4[2] = v5;
    v21 = &v22;
    v22 = 0;
    v23 = 0;
  }
  else
  {
    *(_QWORD *)(v2 + 40) = v5;
  }
  v8 = v25;
  *(_OWORD *)(v2 + 64) = v24;
  *(_OWORD *)(v2 + 80) = v8;
  v7 = (char *)(v2 + 96);
LABEL_24:
  *(_QWORD *)(a1 + 8) = v7;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v21, (uint64_t)v22);
  if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v15, (uint64_t)v16);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete(v12[0]);
    return;
  }
  operator delete(v18[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v15, (uint64_t)v16);
  if (SHIBYTE(v13) < 0)
    goto LABEL_28;
}

void webrtc::AudioDecoderPcmU::ParsePayload(uint64_t a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  webrtc::LegacyEncodedAudioFrame::SplitBySamples(a1, a2, a3, 8 * *(_QWORD *)(a1 + 8), 8u, a4);
}

uint64_t webrtc::AudioDecoderPcmU::SampleRateHz(webrtc::AudioDecoderPcmU *this)
{
  return 8000;
}

uint64_t webrtc::AudioDecoderPcmU::Channels(webrtc::AudioDecoderPcmU *this)
{
  return *((_QWORD *)this + 1);
}

unint64_t webrtc::AudioDecoderPcmU::DecodeInternal(uint64_t a1, unint64_t a2, unint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, int32x4_t a10, uint64_t a11, int16x8_t *a12, _DWORD *a13)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t result;
  __int8 *v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  __int16 *v21;
  int v22;
  int v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  uint64_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int16x8_t *v30;
  int8x16_t v31;
  int8x16_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int16x8_t v43;
  unint64_t v44;
  int16x8_t *v45;
  int8x16_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int8x8_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int16x8_t v54;

  v13 = *(_QWORD *)(a1 + 8);
  v14 = (int)(a3 / v13);
  result = v14 * v13;
  if (!(v14 * v13))
    goto LABEL_15;
  if (result < 8
    || ((v16 = &a12->i8[2 * v13 * v14], a2 + result > (unint64_t)a12)
      ? (v17 = (unint64_t)v16 > a2)
      : (v17 = 0),
        v17))
  {
    v18 = 0;
  }
  else
  {
    if (result >= 0x10)
    {
      v27 = 0;
      v18 = result & 0xFFFFFFFFFFFFFFF0;
      v28.i64[0] = 0x7800000078;
      v28.i64[1] = 0x7800000078;
      v29.i64[0] = 0x8400000084;
      v29.i64[1] = 0x8400000084;
      v30 = a12;
      a10 = vdupq_n_s32(0xFF7Cu);
      do
      {
        v31 = *(int8x16_t *)(a2 + v27);
        v32 = vmvnq_s8(v31);
        v33 = (int32x4_t)vqtbl1q_s8(v32, (int8x16_t)xmmword_208F04F20);
        v34 = (int32x4_t)vqtbl1q_s8(v32, (int8x16_t)xmmword_208F04F30);
        v35 = (int32x4_t)vqtbl1q_s8(v32, (int8x16_t)xmmword_208F04F40);
        v36 = (int32x4_t)vqtbl1q_s8(v32, (int8x16_t)xmmword_208F04F50);
        v37 = (int32x4_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&vandq_s8((int8x16_t)vshlq_n_s32(v33, 3uLL), v28) | __PAIR128__(0x8400000084, 0x8400000084)), (uint32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v33, 4uLL) & __PAIR128__(0xFFFFFFF7FFFFFFF7, 0xFFFFFFF7FFFFFFF7)));
        v38 = (int32x4_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&vandq_s8((int8x16_t)vshlq_n_s32(v34, 3uLL), v28) | __PAIR128__(0x8400000084, 0x8400000084)), (uint32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v34, 4uLL) & __PAIR128__(0xFFFFFFF7FFFFFFF7, 0xFFFFFFF7FFFFFFF7)));
        v39 = (int32x4_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&vandq_s8((int8x16_t)vshlq_n_s32(v35, 3uLL), v28) | __PAIR128__(0x8400000084, 0x8400000084)), (uint32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v35, 4uLL) & __PAIR128__(0xFFFFFFF7FFFFFFF7, 0xFFFFFFF7FFFFFFF7)));
        v40 = (int32x4_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&vandq_s8((int8x16_t)vshlq_n_s32(v36, 3uLL), v28) | __PAIR128__(0x8400000084, 0x8400000084)), (uint32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v36, 4uLL) & __PAIR128__(0xFFFFFFF7FFFFFFF7, 0xFFFFFFF7FFFFFFF7)));
        v41 = vcltzq_s8(v31);
        v42 = vmovl_s8(*(int8x8_t *)v41.i8);
        v43 = vmovl_high_s8(v41);
        *v30 = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v42.i8), (int8x16_t)vaddq_s32(v40, a10), (int8x16_t)vsubq_s32(v29, v40)), (int16x8_t)vbslq_s8((int8x16_t)vmovl_high_s16(v42), (int8x16_t)vaddq_s32(v39, a10), (int8x16_t)vsubq_s32(v29, v39)));
        v30[1] = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v43.i8), (int8x16_t)vaddq_s32(v38, a10), (int8x16_t)vsubq_s32(v29, v38)), (int16x8_t)vbslq_s8((int8x16_t)vmovl_high_s16(v43), (int8x16_t)vaddq_s32(v37, a10), (int8x16_t)vsubq_s32(v29, v37)));
        v30 += 2;
        v27 += 16;
      }
      while (v18 != v27);
      if (result == v18)
        goto LABEL_15;
      if ((result & 8) == 0)
        goto LABEL_10;
    }
    else
    {
      v18 = 0;
    }
    v44 = v18;
    v18 = result & 0xFFFFFFFFFFFFFFF8;
    v45 = (int16x8_t *)((char *)a12 + 2 * v44);
    v46.i64[0] = 0x7800000078;
    v46.i64[1] = 0x7800000078;
    v47.i64[0] = 0x8400000084;
    v47.i64[1] = 0x8400000084;
    v48 = vdupq_n_s32(0xFF7Cu);
    do
    {
      v49 = *(int8x8_t *)(a2 + v44);
      *(int8x8_t *)a10.i8 = vmvn_s8(v49);
      v50 = (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_208F04F40);
      v51 = (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_208F04F50);
      v52 = (int32x4_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&vandq_s8((int8x16_t)vshlq_n_s32(v50, 3uLL), v46) | __PAIR128__(0x8400000084, 0x8400000084)), (uint32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v50, 4uLL) & __PAIR128__(0xFFFFFFF7FFFFFFF7, 0xFFFFFFF7FFFFFFF7)));
      v53 = (int32x4_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&vandq_s8((int8x16_t)vshlq_n_s32(v51, 3uLL), v46) | __PAIR128__(0x8400000084, 0x8400000084)), (uint32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v51, 4uLL) & __PAIR128__(0xFFFFFFF7FFFFFFF7, 0xFFFFFFF7FFFFFFF7)));
      v54 = vcltzq_s16(vmovl_s8(v49));
      a10 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v54.i8), (int8x16_t)vaddq_s32(v53, v48), (int8x16_t)vsubq_s32(v47, v53));
      *v45++ = vuzp1q_s16((int16x8_t)a10, (int16x8_t)vbslq_s8((int8x16_t)vmovl_high_s16(v54), (int8x16_t)vaddq_s32(v52, v48), (int8x16_t)vsubq_s32(v47, v52)));
      v44 += 8;
    }
    while (v18 != v44);
    if (result == v18)
      goto LABEL_15;
  }
LABEL_10:
  v19 = result - v18;
  v20 = (char *)(a2 + v18);
  v21 = &a12->i16[v18];
  do
  {
    v22 = *v20++;
    v23 = ((8 * (~v22 & 0xF)) | 0x84) << ((~v22 >> 4) & 7);
    v24 = 132 - v23;
    v25 = v23 - 132;
    if (v22 >= 0)
      v26 = v24;
    else
      v26 = v25;
    *v21++ = v26;
    --v19;
  }
  while (v19);
LABEL_15:
  *a13 = 1;
  return result;
}

unint64_t webrtc::AudioDecoderPcmU::PacketDuration(webrtc::AudioDecoderPcmU *this, const unsigned __int8 *a2, unint64_t a3)
{
  return a3 / *((_QWORD *)this + 1);
}

unint64_t webrtc::AudioDecoderPcmU::PacketDurationRedundant(webrtc::AudioDecoderPcmU *this, const unsigned __int8 *a2, unint64_t a3)
{
  return a3 / *((_QWORD *)this + 1);
}

void webrtc::AudioDecoderPcmA::ParsePayload(uint64_t a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, char **a4@<X8>)
{
  webrtc::LegacyEncodedAudioFrame::SplitBySamples(a1, a2, a3, 8 * *(_QWORD *)(a1 + 8), 8u, a4);
}

uint64_t webrtc::AudioDecoderPcmA::SampleRateHz(webrtc::AudioDecoderPcmA *this)
{
  return 8000;
}

uint64_t webrtc::AudioDecoderPcmA::Channels(webrtc::AudioDecoderPcmA *this)
{
  return *((_QWORD *)this + 1);
}

unint64_t webrtc::AudioDecoderPcmA::DecodeInternal(uint64_t a1, unint64_t a2, unint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, int32x4_t a10, uint64_t a11, int16x8_t *a12, _DWORD *a13)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t result;
  __int8 *v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  __int16 *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int16x8_t *v31;
  int8x16_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  unsigned __int128 v38;
  unsigned __int128 v39;
  unsigned __int128 v40;
  unsigned __int128 v41;
  unsigned __int128 v42;
  unsigned __int128 v43;
  unsigned __int128 v44;
  unsigned __int128 v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int16x8_t v51;
  int16x8_t v52;
  unint64_t v53;
  int16x8_t *v54;
  int8x16_t v55;
  int32x4_t v56;
  int8x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  unsigned __int128 v60;
  unsigned __int128 v61;
  unsigned __int128 v62;
  unsigned __int128 v63;
  int32x4_t v64;
  int32x4_t v65;
  int16x8_t v66;
  int8x16_t v67;
  int16x8_t v68;

  v13 = *(_QWORD *)(a1 + 8);
  v14 = (int)(a3 / v13);
  result = v14 * v13;
  if (!(v14 * v13))
    goto LABEL_18;
  if (result < 8
    || ((v16 = &a12->i8[2 * v13 * v14], a2 + result > (unint64_t)a12)
      ? (v17 = (unint64_t)v16 > a2)
      : (v17 = 0),
        v17))
  {
    v18 = 0;
  }
  else
  {
    if (result >= 0x10)
    {
      v28 = 0;
      v18 = result & 0xFFFFFFFFFFFFFFF0;
      v29.i64[0] = 0x5555555555555555;
      v29.i64[1] = 0x5555555555555555;
      v30.i64[0] = -1;
      v30.i64[1] = -1;
      v31 = a12;
      a10 = vdupq_n_s32(0x108u);
      do
      {
        v32 = *(int8x16_t *)(a2 + v28);
        v33 = veorq_s8(v32, v29);
        v34 = (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_208F04F50);
        v35 = (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_208F04F40);
        v36 = (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_208F04F30);
        v37 = (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_208F04F20);
        v38 = *(_OWORD *)&vshlq_n_s32(v34, 4uLL) & __PAIR128__(0xFFFFF0FFFFFFF0FFLL, 0xFFFFF0FFFFFFF0FFLL);
        v39 = *(_OWORD *)&vshlq_n_s32(v35, 4uLL) & __PAIR128__(0xFFFFF0FFFFFFF0FFLL, 0xFFFFF0FFFFFFF0FFLL);
        v40 = *(_OWORD *)&vshlq_n_s32(v36, 4uLL) & __PAIR128__(0xFFFFF0FFFFFFF0FFLL, 0xFFFFF0FFFFFFF0FFLL);
        v41 = *(_OWORD *)&vshlq_n_s32(v37, 4uLL) & __PAIR128__(0xFFFFF0FFFFFFF0FFLL, 0xFFFFF0FFFFFFF0FFLL);
        v42 = *(_OWORD *)&vshrq_n_u32((uint32x4_t)v37, 4uLL) & __PAIR128__(0xFFFFFFF7FFFFFFF7, 0xFFFFFFF7FFFFFFF7);
        v43 = *(_OWORD *)&vshrq_n_u32((uint32x4_t)v36, 4uLL) & __PAIR128__(0xFFFFFFF7FFFFFFF7, 0xFFFFFFF7FFFFFFF7);
        v44 = *(_OWORD *)&vshrq_n_u32((uint32x4_t)v35, 4uLL) & __PAIR128__(0xFFFFFFF7FFFFFFF7, 0xFFFFFFF7FFFFFFF7);
        v45 = *(_OWORD *)&vshrq_n_u32((uint32x4_t)v34, 4uLL) & __PAIR128__(0xFFFFFFF7FFFFFFF7, 0xFFFFFFF7FFFFFFF7);
        v46 = (int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)v42), (int8x16_t)(v41 | __PAIR128__(0x800000008, 0x800000008)), (int8x16_t)vshlq_u32((uint32x4_t)vorrq_s8((int8x16_t)v41, (int8x16_t)a10), (uint32x4_t)vaddq_s32((int32x4_t)v42, v30)));
        v47 = (int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)v43), (int8x16_t)(v40 | __PAIR128__(0x800000008, 0x800000008)), (int8x16_t)vshlq_u32((uint32x4_t)vorrq_s8((int8x16_t)v40, (int8x16_t)a10), (uint32x4_t)vaddq_s32((int32x4_t)v43, v30)));
        v48 = (int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)v44), (int8x16_t)(v39 | __PAIR128__(0x800000008, 0x800000008)), (int8x16_t)vshlq_u32((uint32x4_t)vorrq_s8((int8x16_t)v39, (int8x16_t)a10), (uint32x4_t)vaddq_s32((int32x4_t)v44, v30)));
        v49 = (int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)v45), (int8x16_t)(v38 | __PAIR128__(0x800000008, 0x800000008)), (int8x16_t)vshlq_u32((uint32x4_t)vorrq_s8((int8x16_t)v38, (int8x16_t)a10), (uint32x4_t)vaddq_s32((int32x4_t)v45, v30)));
        v50 = vcltzq_s8(v32);
        v51 = vmovl_s8(*(int8x8_t *)v50.i8);
        v52 = vmovl_high_s8(v50);
        *v31 = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v51.i8), (int8x16_t)v49, (int8x16_t)vnegq_s32(v49)), (int16x8_t)vbslq_s8((int8x16_t)vmovl_high_s16(v51), (int8x16_t)v48, (int8x16_t)vnegq_s32(v48)));
        v31[1] = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v52.i8), (int8x16_t)v47, (int8x16_t)vnegq_s32(v47)), (int16x8_t)vbslq_s8((int8x16_t)vmovl_high_s16(v52), (int8x16_t)v46, (int8x16_t)vnegq_s32(v46)));
        v31 += 2;
        v28 += 16;
      }
      while (v18 != v28);
      if (result == v18)
        goto LABEL_18;
      if ((result & 8) == 0)
        goto LABEL_10;
    }
    else
    {
      v18 = 0;
    }
    v53 = v18;
    v18 = result & 0xFFFFFFFFFFFFFFF8;
    v54 = (int16x8_t *)((char *)a12 + 2 * v53);
    v55 = (int8x16_t)vdupq_n_s32(0x108u);
    v56.i64[0] = -1;
    v56.i64[1] = -1;
    do
    {
      v57 = *(int8x8_t *)(a2 + v53);
      *(int8x8_t *)a10.i8 = veor_s8(v57, (int8x8_t)0x5555555555555555);
      v58 = (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_208F04F50);
      v59 = (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_208F04F40);
      v60 = *(_OWORD *)&vshlq_n_s32(v58, 4uLL) & __PAIR128__(0xFFFFF0FFFFFFF0FFLL, 0xFFFFF0FFFFFFF0FFLL);
      v61 = *(_OWORD *)&vshlq_n_s32(v59, 4uLL) & __PAIR128__(0xFFFFF0FFFFFFF0FFLL, 0xFFFFF0FFFFFFF0FFLL);
      v62 = *(_OWORD *)&vshrq_n_u32((uint32x4_t)v59, 4uLL) & __PAIR128__(0xFFFFFFF7FFFFFFF7, 0xFFFFFFF7FFFFFFF7);
      v63 = *(_OWORD *)&vshrq_n_u32((uint32x4_t)v58, 4uLL) & __PAIR128__(0xFFFFFFF7FFFFFFF7, 0xFFFFFFF7FFFFFFF7);
      v64 = (int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)v62), (int8x16_t)(v61 | __PAIR128__(0x800000008, 0x800000008)), (int8x16_t)vshlq_u32((uint32x4_t)vorrq_s8((int8x16_t)v61, v55), (uint32x4_t)vaddq_s32((int32x4_t)v62, v56)));
      v65 = (int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)v63), (int8x16_t)(v60 | __PAIR128__(0x800000008, 0x800000008)), (int8x16_t)vshlq_u32((uint32x4_t)vorrq_s8((int8x16_t)v60, v55), (uint32x4_t)vaddq_s32((int32x4_t)v63, v56)));
      v66 = vcltzq_s16(vmovl_s8(v57));
      v67 = (int8x16_t)vmovl_s16(*(int16x4_t *)v66.i8);
      v68 = (int16x8_t)vbslq_s8((int8x16_t)vmovl_high_s16(v66), (int8x16_t)v64, (int8x16_t)vnegq_s32(v64));
      a10 = (int32x4_t)vbslq_s8(v67, (int8x16_t)v65, (int8x16_t)vnegq_s32(v65));
      *v54++ = vuzp1q_s16((int16x8_t)a10, v68);
      v53 += 8;
    }
    while (v18 != v53);
    if (result == v18)
      goto LABEL_18;
  }
LABEL_10:
  v19 = result - v18;
  v20 = (unsigned __int8 *)(a2 + v18);
  v21 = &a12->i16[v18];
  do
  {
    v22 = *v20++;
    v23 = (char)v22;
    v24 = ((16 * ((v22 ^ 0x55) & 0xF)) | 0x108) << ((((v22 ^ 0x55u) >> 4) & 7) - 1);
    v25 = (16 * ((v22 ^ 0x55) & 0xF)) | 8;
    if ((((v22 ^ 0x55u) >> 4) & 7) != 0)
      v26 = v24;
    else
      v26 = v25;
    if (v23 < 0)
      LOWORD(v27) = v26;
    else
      v27 = -v26;
    *v21++ = v27;
    --v19;
  }
  while (v19);
LABEL_18:
  *a13 = 1;
  return result;
}

unint64_t webrtc::AudioDecoderPcmA::PacketDuration(webrtc::AudioDecoderPcmA *this, const unsigned __int8 *a2, unint64_t a3)
{
  return a3 / *((_QWORD *)this + 1);
}

unint64_t webrtc::AudioDecoderPcmA::PacketDurationRedundant(webrtc::AudioDecoderPcmA *this, const unsigned __int8 *a2, unint64_t a3)
{
  return a3 / *((_QWORD *)this + 1);
}

void webrtc::AudioDecoderPcmU::~AudioDecoderPcmU(webrtc::AudioDecoderPcmU *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::AudioDecoderPcmA::~AudioDecoderPcmA(webrtc::AudioDecoderPcmA *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioDecoderPcm16B::SampleRateHz(webrtc::AudioDecoderPcm16B *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t webrtc::AudioDecoderPcm16B::Channels(webrtc::AudioDecoderPcm16B *this)
{
  return *((_QWORD *)this + 2);
}

unint64_t webrtc::AudioDecoderPcm16B::DecodeInternal(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, _DWORD *a6)
{
  unint64_t v6;
  unint64_t result;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  const char *v15;
  int8x16_t *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v25;
  const char *v26;
  int8x16_t *v27;
  int8x8x2_t v28;
  int8x16x2_t v29;
  int8x16x2_t v30;

  v6 = *(_QWORD *)(a1 + 16) * (int)(2 * (a3 / (2 * *(_QWORD *)(a1 + 16))));
  result = v6 >> 1;
  if (!v6)
    goto LABEL_15;
  if (result <= 1)
    v8 = 1;
  else
    v8 = v6 >> 1;
  if (v8 < 8 || (a2 + 2 * v8 > a5 ? (v9 = a5 + 2 * v8 > a2) : (v9 = 0), v9))
  {
    v10 = 0;
    goto LABEL_13;
  }
  if (v8 >= 0x20)
  {
    v10 = v8 & 0x7FFFFFFFFFFFFFE0;
    v15 = (const char *)(a2 + 32);
    v16 = (int8x16_t *)(a5 + 32);
    v17 = v8 & 0x7FFFFFFFFFFFFFE0;
    do
    {
      v18 = v15 - 32;
      v29 = vld2q_s8(v18);
      v30 = vld2q_s8(v15);
      __asm
      {
        SHLL2           V4.8H, V0.16B, #8
        SHLL2           V6.8H, V2.16B, #8
      }
      v16[-2] = vorrq_s8((int8x16_t)vshll_n_s8(*(int8x8_t *)v29.val[0].i8, 8uLL), (int8x16_t)vmovl_u8(*(uint8x8_t *)v29.val[1].i8));
      v16[-1] = vorrq_s8(_Q4, (int8x16_t)vmovl_high_u8((uint8x16_t)v29.val[1]));
      *v16 = vorrq_s8((int8x16_t)vshll_n_s8(*(int8x8_t *)v30.val[0].i8, 8uLL), (int8x16_t)vmovl_u8(*(uint8x8_t *)v30.val[1].i8));
      v16[1] = vorrq_s8(_Q6, (int8x16_t)vmovl_high_u8((uint8x16_t)v30.val[1]));
      v16 += 4;
      v15 += 64;
      v17 -= 32;
    }
    while (v17);
    if (v8 == v10)
      goto LABEL_15;
    if ((v8 & 0x18) != 0)
      goto LABEL_20;
LABEL_13:
    v11 = v8 - v10;
    v12 = 2 * v10;
    v13 = (_WORD *)(a5 + 2 * v10);
    v14 = v12 + a2 + 1;
    do
    {
      *v13++ = bswap32(*(unsigned __int16 *)(v14 - 1)) >> 16;
      v14 += 2;
      --v11;
    }
    while (v11);
    goto LABEL_15;
  }
  v10 = 0;
LABEL_20:
  v25 = v10;
  v10 = v8 & 0x7FFFFFFFFFFFFFF8;
  v26 = (const char *)(a2 + 2 * v25);
  v27 = (int8x16_t *)(a5 + 2 * v25);
  do
  {
    v28 = vld2_s8(v26);
    v26 += 16;
    *v27++ = vorrq_s8((int8x16_t)vshll_n_s8(v28.val[0], 8uLL), (int8x16_t)vmovl_u8((uint8x8_t)v28.val[1]));
    v25 += 8;
  }
  while (v10 != v25);
  if (v8 != v10)
    goto LABEL_13;
LABEL_15:
  *a6 = 1;
  return result;
}

unint64_t webrtc::AudioDecoderPcm16B::PacketDuration(webrtc::AudioDecoderPcm16B *this, const unsigned __int8 *a2, unint64_t a3)
{
  return a3 / (2 * *((_QWORD *)this + 2));
}

void webrtc::AudioDecoderPcm16B::ParsePayload(uint64_t a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, char **a7@<X8>)
{
  int v7;
  uint64_t v8;
  std::string *v9;
  const unsigned __int8 *v10;
  unint64_t v11;

  v7 = *(_DWORD *)(a1 + 8);
  v8 = (v7 / 1000);
  if (v7 % 1000)
  {
    v9 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v8, a4, a5, a6, (v7 % 1000));
    webrtc::AudioDecoderPcm16B::PacketDurationRedundant((webrtc::AudioDecoderPcm16B *)v9, v10, v11);
  }
  else
  {
    webrtc::LegacyEncodedAudioFrame::SplitBySamples(a1, a2, a3, *(_QWORD *)(a1 + 16) * 2 * (int)v8, v8, a7);
  }
}

unint64_t webrtc::AudioDecoderPcm16B::PacketDurationRedundant(webrtc::AudioDecoderPcm16B *this, const unsigned __int8 *a2, unint64_t a3)
{
  return a3 / (2 * *((_QWORD *)this + 2));
}

void webrtc::AudioDecoderPcm16B::~AudioDecoderPcm16B(webrtc::AudioDecoderPcm16B *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

__n128 absl::internal_any_invocable::LocalManagerTrivial(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a2;
  *a3 = *a2;
  return result;
}

uint64_t webrtc::AudioEncoder::RtpTimestampRateHz(webrtc::AudioEncoder *this)
{
  return (*(uint64_t (**)(webrtc::AudioEncoder *))(*(_QWORD *)this + 16))(this);
}

uint64_t webrtc::AudioEncoder::Encode@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  int v26;

  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (a4 != v12 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) / 0x64uLL)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/audio_codecs/audio_encoder.cc", 41, "audio.size() == static_cast<size_t>(NumChannels() * SampleRateHz() / 100)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v21, v22, v23, v24, a4);
LABEL_8:
    v25 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/audio_codecs/audio_encoder.cc", 45, "encoded->size() - old_size == info.encoded_bytes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v16, v17, v18, v19, v20);
    return webrtc::AudioEncoder::SetFec((webrtc::AudioEncoder *)v25, v26);
  }
  v13 = *a5;
  if (a4)
    v14 = a3;
  else
    v14 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 232))(a1, a2, v14, a4, a5);
  v20 = *a5 - v13;
  if (v20 != *a6)
    goto LABEL_8;
  return result;
}

uint64_t webrtc::AudioEncoder::SetFec(webrtc::AudioEncoder *this, int a2)
{
  return a2 ^ 1u;
}

uint64_t webrtc::AudioEncoder::SetDtx(webrtc::AudioEncoder *this, int a2)
{
  return a2 ^ 1u;
}

uint64_t webrtc::AudioEncoder::GetDtx(webrtc::AudioEncoder *this)
{
  return 0;
}

uint64_t webrtc::AudioEncoder::SetApplication()
{
  return 0;
}

uint64_t webrtc::AudioEncoder::ReclaimContainedEncoders(webrtc::AudioEncoder *this)
{
  return 0;
}

uint64_t webrtc::AudioEncoder::EnableAudioNetworkAdaptor()
{
  return 0;
}

uint64_t webrtc::AudioEncoder::OnReceivedTargetAudioBitrate(webrtc::AudioEncoder *this, uint64_t a2)
{
  return (*(uint64_t (**)(webrtc::AudioEncoder *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, a2, 0, 0);
}

uint64_t webrtc::AudioEncoder::OnReceivedUplinkAllocation(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a2[4];
  v3 = v2 / 0x3E8uLL;
  if (v2 % 0x3E8uLL > 0x1F3)
    ++v3;
  if (-v2 % 0x3E8uLL <= 0x1F4)
    v4 = 0;
  else
    v4 = -1;
  if (v2 < 0)
    v5 = v4 - -v2 / 0x3E8uLL;
  else
    v5 = v3;
  return (*(uint64_t (**)(uint64_t, _QWORD, unint64_t, uint64_t))(*(_QWORD *)a1 + 168))(a1, *a2, v5, 1);
}

void webrtc::AudioEncoder::GetANAStats(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[4] = 0;
  a1[8] = 0;
  a1[12] = 0;
  a1[16] = 0;
  a1[20] = 0;
  a1[24] = 0;
  a1[28] = 0;
  a1[32] = 0;
  a1[36] = 0;
  a1[40] = 0;
  a1[44] = 0;
  a1[48] = 0;
  a1[52] = 0;
}

void webrtc::AudioEncoder::GetBitrateRange(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

_QWORD *std::vector<webrtc::AudioEncoder::EncodedInfoLeaf>::__assign_with_size[abi:sn180100]<webrtc::AudioEncoder::EncodedInfoLeaf*,webrtc::AudioEncoder::EncodedInfoLeaf*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_23:
      abort();
    v13 = 3 * v12;
    result = operator new(24 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

uint64_t webrtc::CreateComfortNoiseEncoder@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  signed int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t result;
  std::string *v19;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24C0AD6C8;
  if (*(_QWORD *)a1 == 1
    && (v9 = v4, (v10 = *(_QWORD *)(a1 + 16)) != 0)
    && (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10) == 1
    && (v11 = *(_DWORD *)(a1 + 28),
        v11 >= (int)(10 * (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16))))
    && (v12 = *(unsigned int *)(a1 + 32), (v12 - 1) < 0xC))
  {
    v13 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    v9[1] = v13;
    *((_DWORD *)v9 + 4) = *(_DWORD *)(a1 + 8);
    *((_DWORD *)v9 + 5) = v12;
    v14 = *(_DWORD *)(a1 + 28);
    *((_DWORD *)v9 + 6) = v14;
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *((_OWORD *)v9 + 4) = 0u;
    *((_BYTE *)v9 + 80) = 1;
    v15 = *(_QWORD *)(a1 + 40);
    if (!v15)
    {
      v16 = *(_DWORD *)(a1 + 24);
      v15 = operator new();
      *(_QWORD *)v15 = &off_24C0C2F28;
      *(_QWORD *)(v15 + 8) = 0;
      *(_DWORD *)(v15 + 16) = v16;
    }
    v9[11] = v15;
    v17 = operator new();
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    *(_QWORD *)v17 = v12;
    *(_DWORD *)(v17 + 8) = result;
    *(_WORD *)(v17 + 12) = v14;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    *(_OWORD *)(v17 + 80) = 0u;
    *(_QWORD *)(v17 + 96) = 0x1E6100000000;
    *(_OWORD *)(v17 + 14) = 0u;
    *(_OWORD *)(v17 + 30) = 0u;
    v9[12] = v17;
    *a2 = v9;
  }
  else
  {
    v19 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/cng/audio_encoder_cng.cc", 81, "config.IsOk()", "\t", v5, v6, v7, v8, (uint64_t)"Invalid configuration.");
  }
  return result;
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::SampleRateHz(webrtc::_anonymous_namespace_::AudioEncoderCng *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

void webrtc::`anonymous namespace'::AudioEncoderCng::~AudioEncoderCng(webrtc::_anonymous_namespace_::AudioEncoderCng *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    MEMORY[0x20BD0ADEC](v2, 0x1000C4036225525);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    MEMORY[0x20BD0ADEC](v2, 0x1000C4036225525);
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::NumChannels(webrtc::_anonymous_namespace_::AudioEncoderCng *this)
{
  return 1;
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::RtpTimestampRateHz(webrtc::_anonymous_namespace_::AudioEncoderCng *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::Num10MsFramesInNextPacket(webrtc::_anonymous_namespace_::AudioEncoderCng *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::Max10MsFramesInAPacket(webrtc::_anonymous_namespace_::AudioEncoderCng *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::GetTargetBitrate(webrtc::_anonymous_namespace_::AudioEncoderCng *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::Reset(webrtc::_anonymous_namespace_::AudioEncoderCng *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  std::string *v11;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  *((_BYTE *)this + 80) = 1;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 11) + 24))(*((_QWORD *)this + 11));
  v2 = operator new();
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  v8 = *((_DWORD *)this + 6);
  v9 = *((int *)this + 5);
  *(_QWORD *)v2 = v9;
  *(_DWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 12) = v8;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)(v2 + 96) = 0x1E6100000000;
  *(_OWORD *)(v2 + 14) = 0u;
  *(_OWORD *)(v2 + 30) = 0u;
  if ((int)v9 <= 0)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/cng/webrtc_cng.cc", 217, "quality > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v4, v5, v6, v7, v9);
    goto LABEL_6;
  }
  if (v9 >= 0xD)
  {
LABEL_6:
    v11 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/cng/webrtc_cng.cc", 218, "quality <= 12", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v4, v5, v6, v7, v9);
  }
  result = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v2;
  if (result)
    JUMPOUT(0x20BD0ADECLL);
  return result;
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::SetFec(webrtc::_anonymous_namespace_::AudioEncoderCng *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::SetDtx(webrtc::_anonymous_namespace_::AudioEncoderCng *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::SetApplication(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::SetMaxPlaybackRate(webrtc::_anonymous_namespace_::AudioEncoderCng *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::ReclaimContainedEncoders(webrtc::_anonymous_namespace_::AudioEncoderCng *this)
{
  return (uint64_t)this + 8;
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::OnReceivedUplinkPacketLossFraction(webrtc::_anonymous_namespace_::AudioEncoderCng *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1), a2);
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::OnReceivedUplinkBandwidth(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8));
}

uint64_t webrtc::`anonymous namespace'::AudioEncoderCng::GetFrameLengthRange(webrtc::_anonymous_namespace_::AudioEncoderCng *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 216))(*((_QWORD *)this + 1));
}

void webrtc::`anonymous namespace'::AudioEncoderCng::EncodeImpl(uint64_t a1@<X0>, int a2@<W1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _DWORD *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  std::string *v48;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  void *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  char v66;
  int v67;
  __int128 v68;
  int *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  _BYTE *v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  _BYTE *v90;
  int64_t v91;
  std::string *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  void **v101;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 v105;
  char v106;
  __int16 v107;
  int v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int8 v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v15 = (10 * v10 % 1000);
  if ((_DWORD)v15)
    goto LABEL_98;
  v16 = *(char **)(a1 + 40);
  v17 = (uint64_t)&v16[-*(_QWORD *)(a1 + 32)] >> 1;
  v18 = *(char **)(a1 + 56);
  v19 = *(char **)(a1 + 64);
  v100 = v10 / 100;
  v101 = (void **)(a1 + 32);
  v20 = (v19 - v18) >> 2;
  v15 = v20 * v100;
  if (v17 != v20 * v100)
    goto LABEL_99;
  v21 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v19 >= v21)
  {
    v15 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 62)
      abort();
    v23 = v21 - (_QWORD)v18;
    if (v23 >> 1 > (unint64_t)v15)
      v15 = v23 >> 1;
    v24 = (unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL;
    v25 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v24)
      v25 = v15;
    if (!v25)
      goto LABEL_97;
    if (v25 >> 62)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v26 = 4 * v25;
    v27 = operator new(4 * v25);
    v28 = &v27[4 * v20];
    v29 = &v27[v26];
    *v28 = a2;
    v22 = v28 + 1;
    if (v19 != v18)
    {
      v30 = v19 - v18 - 4;
      if (v30 < 0x2C)
        goto LABEL_108;
      if ((unint64_t)(v18 - v27) < 0x20)
        goto LABEL_108;
      v31 = (v30 >> 2) + 1;
      v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
      v33 = &v19[-v32];
      v28 = (_DWORD *)((char *)v28 - v32);
      v34 = &v27[4 * v20 - 16];
      v35 = v19 - 16;
      v36 = v31 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v37 = *(_OWORD *)v35;
        *(v34 - 1) = *((_OWORD *)v35 - 1);
        *v34 = v37;
        v34 -= 2;
        v35 -= 32;
        v36 -= 8;
      }
      while (v36);
      v19 = v33;
      if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_108:
        do
        {
          v38 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *--v28 = v38;
        }
        while (v19 != v18);
      }
    }
    *(_QWORD *)(a1 + 56) = v28;
    *(_QWORD *)(a1 + 64) = v22;
    *(_QWORD *)(a1 + 72) = v29;
    if (v18)
    {
      operator delete(v18);
      v16 = *(char **)(a1 + 40);
    }
  }
  else
  {
    if (!v19)
      goto LABEL_97;
    *(_DWORD *)v19 = a2;
    v22 = v19 + 4;
  }
  v39 = a6;
  *(_QWORD *)(a1 + 64) = v22;
  std::vector<short>::__insert_with_size[abi:sn180100]<short const*,short const*>((uint64_t)v101, v16, a3, &a3[2 * a4], (2 * a4) >> 1);
  v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (v40 > (uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 2)
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_WORD *)(a6 + 16) = 256;
    *(_QWORD *)(a6 + 20) = 0;
    *(_QWORD *)(a6 + 36) = 0;
    *(_QWORD *)(a6 + 28) = 0;
    *(_DWORD *)(a6 + 44) = 0;
    return;
  }
  v41 = v40;
  if (10 * v40 >= 0x3D)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/cng/audio_encoder_cng.cc", 134, "frames_to_encode * 10 <= kMaxFrameSizeMs", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*> const&)::t, v11, v12, v13, v14, 10 * v40);
LABEL_103:
    v48 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/cng/audio_encoder_cng.cc", 146, "frames_to_encode >= blocks_in_first_vad_call", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v11, v12, v13, v14, v41);
    goto LABEL_104;
  }
  v42 = 3;
  if (v40 < 3)
    v42 = v40;
  v15 = 2;
  if (v40 == 4)
    v43 = 2;
  else
    v43 = v42;
  if (v40 < v43)
    goto LABEL_103;
  v44 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) == v44)
    goto LABEL_97;
  v45 = *(_QWORD *)(a1 + 88);
  v46 = v43 * v100;
  v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v48 = (std::string *)(*(uint64_t (**)(unint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, v44, v43 * v100, v47);
  if (v41 != v43 && (_DWORD)v48 == 0)
  {
    v15 = *(_QWORD *)(a1 + 32);
    if (v46 < (*(_QWORD *)(a1 + 40) - v15) >> 1)
    {
      v50 = *(_QWORD *)(a1 + 88);
      v51 = v15 + 2 * v46;
      v45 = (v41 - v43) * v100;
      v52 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
      v48 = (std::string *)(*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v50 + 16))(v50, v51, v45, v52);
      goto LABEL_39;
    }
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
LABEL_39:
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_BYTE *)(a6 + 16) = 0;
  v98 = v41;
  if ((_DWORD)v48 != 1)
  {
    if (!(_DWORD)v48)
    {
      v53 = *(unsigned __int8 *)(a1 + 80);
      v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
      v15 = (10 * v54 % 1000);
      if (!(_DWORD)v15)
      {
        v55 = v53 != 0;
        if (v41)
        {
          v56 = v54 / 100;
          if ((v54 + 99) < 0xC7)
          {
            v57 = 0;
            v58 = 0;
            v59 = v54 / -100;
            while (1)
            {
              v15 = *(_QWORD *)(a1 + 32);
              v59 += v56;
              if (v59 >= (*(_QWORD *)(a1 + 40) - v15) >> 1)
                goto LABEL_97;
              v60 = webrtc::ComfortNoiseEncoder::Encode(*(_QWORD *)(a1 + 96), 0, v56, v55 & 1, (uint64_t)a5, v12, v13, v14);
              if (v60 && ((v58 ^ 1) & 1) == 0)
                goto LABEL_74;
              v58 |= v60 != 0;
              v55 &= v60 == 0;
              if (v60)
                v57 = v60;
              if (!--v41)
                goto LABEL_64;
            }
          }
          v72 = 0;
          v57 = 0;
          v73 = 0;
          v74 = v54 / -100;
          while (1)
          {
            v75 = *(_QWORD *)(a1 + 32);
            v15 = *(_QWORD *)(a1 + 40) - v75;
            v74 += v56;
            if (v74 >= v15 >> 1)
              goto LABEL_97;
            v76 = webrtc::ComfortNoiseEncoder::Encode(*(_QWORD *)(a1 + 96), v72 + v75, v56, v55 & 1, (uint64_t)a5, v12, v13, v14);
            if (v76)
            {
              if (((v73 ^ 1) & 1) == 0)
                break;
            }
            v72 += 2 * v56;
            v73 |= v76 != 0;
            v55 &= v76 == 0;
            if (v76)
              v57 = v76;
            if (!--v41)
              goto LABEL_64;
          }
LABEL_74:
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/cng/audio_encoder_cng.cc", 256, "!output_produced", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v11, v12, v13, v14, v97);
          goto LABEL_75;
        }
        v57 = 0;
LABEL_64:
        v69 = *(int **)(a1 + 56);
        v15 = *(_QWORD *)(a1 + 64);
        if (v69 == (int *)v15)
          goto LABEL_97;
        v70 = *v69;
        v15 = *(unsigned int *)(a1 + 16);
        *(_QWORD *)a6 = v57;
        *(_DWORD *)(a6 + 8) = v70;
        *(_DWORD *)(a6 + 12) = v15;
        *(_WORD *)(a6 + 16) = 1;
        *(_QWORD *)(a6 + 20) = 0;
        *(_QWORD *)(a6 + 36) = 0;
        *(_QWORD *)(a6 + 28) = 0;
        *(_DWORD *)(a6 + 44) = 0;
        *(_BYTE *)(a1 + 80) = 0;
        goto LABEL_86;
      }
LABEL_98:
      rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v11, v12, v13, v14, v15);
LABEL_99:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/cng/audio_encoder_cng.cc", 126, "speech_buffer_.size() == rtp_timestamps_.size() * samples_per_10ms_frame", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v11, v12, v13, v14, v17);
    }
LABEL_104:
    rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v48);
  }
  v61 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v15 = (10 * v61 % 1000);
  if ((_DWORD)v15)
    goto LABEL_98;
  v112 = 0;
  v111 = 0;
  if (v41)
  {
    v56 = v61 / 100;
    if ((v61 + 99) >= 0xC7)
    {
LABEL_75:
      v77 = 0;
      v78 = 0;
      v79 = -(uint64_t)v56;
      v80 = v41;
      while (1)
      {
        v81 = *(unsigned int **)(a1 + 56);
        v15 = *(_QWORD *)(a1 + 64);
        if (v81 == (unsigned int *)v15)
          goto LABEL_97;
        v15 = *(_QWORD *)(a1 + 32);
        v79 += v56;
        if (v79 >= (*(_QWORD *)(a1 + 40) - v15) >> 1)
          goto LABEL_97;
        webrtc::AudioEncoder::Encode(*(_QWORD *)(a1 + 8), *v81, v77 + v15, v56, a5, &v103);
        v41 = v103;
        v111 = v104;
        v112 = v105;
        v66 = v106;
        LOWORD(v45) = v107;
        v67 = v108;
        if (v78)
          operator delete(v78);
        v68 = v109;
        if (!--v80)
          goto LABEL_83;
        v77 += 2 * v56;
        v78 = (void *)v109;
        if (v41)
          goto LABEL_82;
      }
    }
    v62 = 0;
    v63 = v61 / -100;
    v64 = v41;
    do
    {
      v65 = *(unsigned int **)(a1 + 56);
      v15 = *(_QWORD *)(a1 + 64);
      if (v65 == (unsigned int *)v15)
        goto LABEL_97;
      v15 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
      v63 += v56;
      if (v63 >= v15 >> 1)
        goto LABEL_97;
      webrtc::AudioEncoder::Encode(*(_QWORD *)(a1 + 8), *v65, 0, v56, a5, &v103);
      v41 = v103;
      v111 = v104;
      v112 = v105;
      v66 = v106;
      LOWORD(v45) = v107;
      v67 = v108;
      if (v62)
        operator delete(v62);
      v68 = v109;
      if (!--v64)
        goto LABEL_83;
      v62 = (void *)v109;
    }
    while (!v41);
LABEL_82:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/cng/audio_encoder_cng.cc", 284, "info.encoded_bytes == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*> const&)::t, v11, v12, v13, v14, v41);
LABEL_83:
    if (!v41)
    {
      v92 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/cng/audio_encoder_cng.cc", 282, "info.encoded_bytes > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*> const&)::t, v11, v12, v13, v14, 0);
      std::vector<short>::__insert_with_size[abi:sn180100]<short const*,short const*>((uint64_t)v92, v93, v94, v95, v96);
      return;
    }
    v71 = v110;
    v39 = a6;
  }
  else
  {
    v67 = 0;
    v71 = 0;
    v68 = 0uLL;
    v66 = 1;
  }
  v82 = v111;
  *(_QWORD *)v39 = v41;
  *(_QWORD *)(v39 + 8) = v82;
  v15 = v112;
  *(_BYTE *)(v39 + 16) = v112;
  *(_BYTE *)(v39 + 17) = v66;
  *(_WORD *)(v39 + 18) = v45;
  *(_DWORD *)(v39 + 20) = v67;
  *(_OWORD *)(v39 + 24) = v68;
  *(_QWORD *)(v39 + 40) = v71;
  *(_BYTE *)(a1 + 80) = 1;
LABEL_86:
  v83 = v98 * v100;
  if (v98 * v100 < 0)
    goto LABEL_97;
  if (v83)
  {
    v15 = a1 + 32;
    v84 = (char *)*v101;
    v85 = (char *)*v101 + 2 * v83;
    v86 = *(_BYTE **)(a1 + 40);
    v87 = v86 - v85;
    if (v86 != v85)
      memmove(*v101, v85, v86 - v85);
    *(_QWORD *)(a1 + 40) = &v84[v87];
  }
  if (v98 < 0)
    goto LABEL_97;
  if (v98)
  {
    v89 = *(_QWORD *)(a1 + 56);
    v88 = *(_BYTE **)(a1 + 64);
    v90 = (_BYTE *)(v89 + 4 * v98);
    v91 = v88 - v90;
    if (v88 != v90)
      memmove(*(void **)(a1 + 56), v90, v88 - v90);
    *(_QWORD *)(a1 + 64) = v89 + v91;
  }
}

char *std::vector<short>::__insert_with_size[abi:sn180100]<short const*,short const*>(uint64_t a1, char *a2, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  uint64_t v22;
  __int16 *v23;
  char *v24;
  __int16 v25;
  char *v26;
  _WORD *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  _WORD *v31;
  __int16 v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 *v39;
  unint64_t v40;
  __int128 v41;
  __int16 v42;
  size_t v43;

  v5 = *(char **)a1;
  v6 = (uint64_t)&a2[-*(_QWORD *)a1];
  v7 = (char *)(*(_QWORD *)a1 + (v6 & 0xFFFFFFFFFFFFFFFELL));
  if (a5 < 1)
    return v7;
  v9 = __src;
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if (a5 <= (uint64_t)(v11 - v12) >> 1)
  {
    v18 = (uint64_t)(v12 - (_QWORD)v7) >> 1;
    if (v18 >= a5)
    {
      v19 = &__src[2 * a5];
      v21 = *(char **)(a1 + 8);
      v22 = 2 * a5;
      v23 = (__int16 *)(v12 - 2 * a5);
      v24 = v21;
      if ((unint64_t)v23 >= v12)
        goto LABEL_22;
    }
    else
    {
      v19 = &__src[2 * v18];
      v20 = a4 - v19;
      if (a4 != v19)
        memmove(*(void **)(a1 + 8), &__src[2 * v18], a4 - v19);
      v21 = (char *)(v12 + v20);
      *(_QWORD *)(a1 + 8) = v12 + v20;
      if ((uint64_t)(v12 - (_QWORD)v7) < 1)
        return v7;
      v22 = 2 * a5;
      v23 = (__int16 *)&v21[-2 * a5];
      v24 = (char *)(v12 + v20);
      if ((unint64_t)v23 >= v12)
      {
LABEL_22:
        v26 = &v7[v22];
        *(_QWORD *)(a1 + 8) = v24;
        if (v21 != v26)
          memmove(&v21[-2 * ((v21 - v26) >> 1)], v7, v21 - v26);
        if (v19 != v9)
          memmove(v7, v9, v19 - v9);
        return v7;
      }
    }
    v24 = v21;
    while (v24)
    {
      v25 = *v23++;
      *(_WORD *)v24 = v25;
      v24 += 2;
      if ((unint64_t)v23 >= v12)
        goto LABEL_22;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    abort();
  }
  v13 = a5 + ((uint64_t)(v12 - (_QWORD)v5) >> 1);
  if (v13 < 0)
    goto LABEL_44;
  v15 = v11 - (_QWORD)v5;
  if (v15 > v13)
    v13 = v15;
  if (v15 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v13;
  if (v16)
  {
    if (v16 < 0)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v17 = operator new(2 * v16);
  }
  else
  {
    v17 = 0;
  }
  v27 = &v17[2 * (v6 >> 1)];
  v28 = &v17[2 * v16];
  v29 = 2 * a5;
  v30 = (char *)&v27[a5];
  v31 = v27;
  do
  {
    if (!v31)
      goto LABEL_43;
    v32 = *(_WORD *)v9;
    v9 += 2;
    *v31++ = v32;
    v29 -= 2;
  }
  while (v29);
  v33 = &v17[2 * (v6 >> 1)];
  if (v5 != a2)
  {
    v34 = v7;
    v33 = &v17[2 * (v6 >> 1)];
    if ((unint64_t)(v6 - 2) < 0x1E)
      goto LABEL_48;
    v34 = v7;
    v33 = &v17[2 * (v6 >> 1)];
    if ((unint64_t)(&v5[v6 & 0xFFFFFFFFFFFFFFFELL] - &v17[v6 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_48;
    v35 = ((unint64_t)(v6 - 2) >> 1) + 1;
    v36 = 2 * (v35 & 0xFFFFFFFFFFFFFFF0);
    v34 = &v7[-v36];
    v33 = (char *)&v27[v36 / 0xFFFFFFFFFFFFFFFELL];
    v37 = 2 * (v6 >> 1) - 16;
    v38 = &v17[v37];
    v39 = (__int128 *)&v5[v37];
    v40 = v35 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v41 = *v39;
      *(v38 - 1) = *(v39 - 1);
      *v38 = v41;
      v38 -= 2;
      v39 -= 2;
      v40 -= 16;
    }
    while (v40);
    if (v35 != (v35 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_48:
      do
      {
        v42 = *((_WORD *)v34 - 1);
        v34 -= 2;
        *((_WORD *)v33 - 1) = v42;
        v33 -= 2;
      }
      while (v34 != v5);
    }
  }
  v43 = v12 - (_QWORD)v7;
  if (v43)
    memmove(v30, v7, v43);
  *(_QWORD *)a1 = v33;
  *(_QWORD *)(a1 + 8) = &v30[v43];
  *(_QWORD *)(a1 + 16) = v28;
  if (v5)
    operator delete(v5);
  return (char *)v27;
}

void webrtc::AudioEncoderCopyRed::AudioEncoderCopyRed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  int v12;
  unint64_t v13;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  std::string *v19;
  unint64_t v20;
  void *__p[2];
  char v22;

  *(_QWORD *)a1 = &off_24C0AD7C8;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 8) = v6;
  *(_OWORD *)(a1 + 16) = xmmword_208F04F90;
  *(_QWORD *)(a1 + 32) = operator new[]();
  *(_QWORD *)(a1 + 40) = 1200;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 56) = a1 + 56;
  *(_QWORD *)(a1 + 64) = a1 + 56;
  *(_QWORD *)(a1 + 72) = 0;
  if (*(_QWORD *)(a1 + 8))
  {
    (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a3 + 16))(__p, a3, "WebRTC-Audio-Red-For-Opus", 25);
    v20 = 0;
    if (v22 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    v12 = sscanf((const char *)v11, "Enabled-%zu", &v20);
    v13 = v20;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v13 > 9 || v12 != 1)
      v13 = 1;
    for (; v13; --v13)
    {
      v15 = operator new[]();
      v16 = (char *)operator new(0x58uLL);
      *((_QWORD *)v16 + 2) = 0;
      *((_QWORD *)v16 + 3) = 0;
      *((_WORD *)v16 + 16) = 256;
      *(_OWORD *)(v16 + 36) = 0u;
      *(_OWORD *)(v16 + 52) = 0u;
      *((_DWORD *)v16 + 17) = 0;
      *((_QWORD *)v16 + 9) = 1200;
      *((_QWORD *)v16 + 10) = v15;
      v17 = *(_QWORD **)(a1 + 64);
      *(_QWORD *)v16 = a1 + 56;
      *((_QWORD *)v16 + 1) = v17;
      *v17 = v16;
      v18 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 64) = v16;
      *(_QWORD *)(a1 + 72) = v18;
    }
  }
  else
  {
    v19 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/red/audio_encoder_copy_red.cc", 60, "speech_encoder_", "\t", v7, v8, v9, v10, (uint64_t)"Speech encoder not provided.");
    webrtc::AudioEncoderCopyRed::~AudioEncoderCopyRed((webrtc::AudioEncoderCopyRed *)v19);
  }
}

void webrtc::AudioEncoderCopyRed::~AudioEncoderCopyRed(webrtc::AudioEncoderCopyRed *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;

  if (*((_QWORD *)this + 9))
  {
    v2 = (char *)this + 56;
    v3 = *((_QWORD *)this + 7);
    v4 = (char *)*((_QWORD *)this + 8);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 9) = 0;
    if (v4 != (char *)this + 56)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v4 + 1);
        v9 = *((_QWORD *)v4 + 10);
        *((_QWORD *)v4 + 10) = 0;
        if (v9)
          MEMORY[0x20BD0ADD4](v9, 0x1000C8077774924);
        v10 = (void *)*((_QWORD *)v4 + 5);
        if (v10)
        {
          *((_QWORD *)v4 + 6) = v10;
          operator delete(v10);
        }
        operator delete(v4);
        v4 = v8;
      }
      while (v8 != v2);
    }
  }
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    MEMORY[0x20BD0ADD4](v6, 0x1000C8077774924);
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

{
  webrtc::AudioEncoderCopyRed::~AudioEncoderCopyRed(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioEncoderCopyRed::SampleRateHz(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::NumChannels(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::RtpTimestampRateHz(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::Num10MsFramesInNextPacket(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::Max10MsFramesInAPacket(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::GetTargetBitrate(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
}

void webrtc::AudioEncoderCopyRed::EncodeImpl(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, __int128 *a6@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  const void *v18;
  size_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  const void *v40;
  size_t v41;
  size_t v42;
  size_t v43;
  size_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 *v48;
  int v49;
  unint64_t v50;
  char *v51;
  __int128 v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int128 v62;
  char *v63;
  char *v64;
  unint64_t v65;
  _QWORD *v66;
  __int128 v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  size_t v78;
  const void *v79;
  size_t v80;
  size_t v81;
  size_t v82;
  size_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const void *v93;
  size_t v94;
  size_t v95;
  size_t v96;
  size_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  __int128 v101;
  const void *v102;
  size_t v103;
  size_t v104;
  size_t v105;
  size_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::string *v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;

  v7 = a2;
  v8 = a1;
  *(_QWORD *)(a1 + 16) = 0;
  v10 = (uint64_t *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 8);
  if (!a4)
    a3 = 0;
  webrtc::AudioEncoder::Encode(v11, a2, a3, a4, v10, a6);
  if (*((_QWORD *)a6 + 3) != *((_QWORD *)a6 + 4))
  {
    v111 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/red/audio_encoder_copy_red.cc", 104, "info.redundant.empty()", "\t", v12, v13, v14, v15, (uint64_t)"Cannot use nested redundant encoders.");
    webrtc::AudioEncoderCopyRed::Reset((webrtc::AudioEncoderCopyRed *)v111);
    return;
  }
  v16 = *(_QWORD *)a6;
  if (*(_QWORD *)a6)
  {
    if (v16 >= 0x400)
    {
      v17 = *(_QWORD *)(v8 + 16);
      if (v17)
      {
        v18 = *(const void **)(v8 + 32);
        v19 = *(_QWORD *)a5;
        v20 = *(_QWORD *)(a5 + 8);
        v21 = *(_QWORD *)a5 + v17;
        if (v20 < v21)
        {
          if (v20 + (v20 >> 1) <= v21)
            v22 = *(_QWORD *)a5 + v17;
          else
            v22 = v20 + (v20 >> 1);
          v23 = (void *)operator new[]();
          v24 = v23;
          v25 = *(_QWORD *)(a5 + 16);
          if (v25)
          {
            memcpy(v23, *(const void **)(a5 + 16), *(_QWORD *)a5);
            *(_QWORD *)(a5 + 16) = v24;
            MEMORY[0x20BD0ADD4](v25, 0x1000C8077774924);
          }
          else
          {
            *(_QWORD *)(a5 + 16) = v23;
          }
          *(_QWORD *)(a5 + 8) = v22;
          v19 = *(_QWORD *)a5;
        }
        memcpy((void *)(*(_QWORD *)(a5 + 16) + v19), v18, v17);
        *(_QWORD *)a5 = v21;
      }
      return;
    }
    v26 = (uint64_t *)(v8 + 56);
    v27 = *(uint64_t **)(v8 + 64);
    v113 = (uint64_t *)(v8 + 56);
    if (v27 == (uint64_t *)(v8 + 56))
    {
      v29 = 1;
    }
    else
    {
      v28 = *(_QWORD *)(v8 + 40) - v16;
      v29 = 1;
      v26 = *(uint64_t **)(v8 + 64);
      while (1)
      {
        v30 = v26[2];
        v31 = v30 + 4;
        v32 = v30 && v28 >= v31;
        if (!v32 || (v7 - *((_DWORD *)v26 + 6)) >> 14)
          break;
        v28 -= v31;
        v29 += 4;
        v26 = (uint64_t *)v26[1];
        if (v26 == v113)
        {
          v26 = (uint64_t *)(v8 + 56);
          break;
        }
      }
    }
    v33 = *(_QWORD *)(a5 + 8);
    if (v33 < v29)
    {
      if (v33 + (v33 >> 1) <= v29)
        v34 = v29;
      else
        v34 = v33 + (v33 >> 1);
      v35 = (void *)operator new[]();
      v36 = v35;
      v37 = *(_QWORD *)(a5 + 16);
      if (v37)
      {
        memcpy(v35, *(const void **)(a5 + 16), *(_QWORD *)a5);
        *(_QWORD *)(a5 + 16) = v36;
        MEMORY[0x20BD0ADD4](v37, 0x1000C8077774924);
      }
      else
      {
        *(_QWORD *)(a5 + 16) = v35;
      }
      *(_QWORD *)(a5 + 8) = v34;
      v27 = *(uint64_t **)(v8 + 64);
    }
    v112 = v29;
    *(_QWORD *)a5 = v29;
    v114 = v8;
    v38 = 0;
    if (v26 != v27)
    {
      do
      {
        while (1)
        {
          v26 = (uint64_t *)*v26;
          v39 = v26[8];
          if (v39)
          {
            v40 = (const void *)v26[10];
            v41 = *(_QWORD *)a5;
            v42 = *(_QWORD *)(a5 + 8);
            v43 = *(_QWORD *)a5 + v39;
            if (v42 < v43)
            {
              if (v42 + (v42 >> 1) <= v43)
                v44 = *(_QWORD *)a5 + v39;
              else
                v44 = v42 + (v42 >> 1);
              v45 = (void *)operator new[]();
              v46 = v45;
              v47 = *(_QWORD *)(a5 + 16);
              if (v47)
              {
                memcpy(v45, *(const void **)(a5 + 16), *(_QWORD *)a5);
                *(_QWORD *)(a5 + 16) = v46;
                MEMORY[0x20BD0ADD4](v47, 0x1000C8077774924);
              }
              else
              {
                *(_QWORD *)(a5 + 16) = v45;
              }
              *(_QWORD *)(a5 + 8) = v44;
              v41 = *(_QWORD *)a5;
              v8 = v114;
            }
            memcpy((void *)(*(_QWORD *)(a5 + 16) + v41), v40, v39);
            *(_QWORD *)a5 = v43;
          }
          v48 = (__int128 *)(v26 + 2);
          v49 = *((_DWORD *)a6 + 2) - *((_DWORD *)v26 + 6);
          *(_BYTE *)(*(_QWORD *)(a5 + 16) + v38) = *((_BYTE *)v26 + 28) | 0x80;
          *(_WORD *)(*(_QWORD *)(a5 + 16) + v38 + 1) = bswap32(*(_DWORD *)((char *)v26 + 17) | (4 * v49)) >> 16;
          *(_BYTE *)(*(_QWORD *)(a5 + 16) + (v38 | 3)) = v26[2];
          v51 = (char *)*((_QWORD *)a6 + 4);
          v50 = *((_QWORD *)a6 + 5);
          if ((unint64_t)v51 >= v50)
            break;
          if (!v51)
            goto LABEL_125;
          v52 = *v48;
          *((_QWORD *)v51 + 2) = v26[4];
          *(_OWORD *)v51 = v52;
          v38 += 4;
          *((_QWORD *)a6 + 4) = v51 + 24;
          if (v26 == *(uint64_t **)(v8 + 64))
            goto LABEL_62;
        }
        v53 = (char *)*((_QWORD *)a6 + 3);
        v54 = 0xAAAAAAAAAAAAAAABLL * ((v51 - v53) >> 3) + 1;
        if (v54 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_126;
        v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (_QWORD)v53) >> 3);
        if (2 * v55 > v54)
          v54 = 2 * v55;
        v56 = v55 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v54;
        if (!v56)
          goto LABEL_125;
        if (v56 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_127;
        v57 = 24 * v56;
        v58 = (char *)operator new(24 * v56);
        v59 = v26[4];
        v60 = &v58[8 * ((v51 - v53) >> 3)];
        *(_OWORD *)v60 = *v48;
        *((_QWORD *)v60 + 2) = v59;
        v61 = v60;
        if (v51 != v53)
        {
          do
          {
            v62 = *(_OWORD *)(v51 - 24);
            *((_QWORD *)v61 - 1) = *((_QWORD *)v51 - 1);
            *(_OWORD *)(v61 - 24) = v62;
            v61 -= 24;
            v51 -= 24;
          }
          while (v51 != v53);
          v51 = v53;
        }
        v63 = &v58[v57];
        v64 = v60 + 24;
        *((_QWORD *)a6 + 3) = v61;
        *((_QWORD *)a6 + 4) = v60 + 24;
        *((_QWORD *)a6 + 5) = v63;
        v8 = v114;
        if (v51)
          operator delete(v51);
        v38 += 4;
        *((_QWORD *)a6 + 4) = v64;
      }
      while (v26 != *(uint64_t **)(v114 + 64));
    }
LABEL_62:
    if (v112 < 5)
      goto LABEL_80;
    v66 = (_QWORD *)*((_QWORD *)a6 + 4);
    v65 = *((_QWORD *)a6 + 5);
    if ((unint64_t)v66 >= v65)
    {
      v69 = (_QWORD *)*((_QWORD *)a6 + 3);
      v70 = 0xAAAAAAAAAAAAAAABLL * (v66 - v69) + 1;
      if (v70 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_126;
      v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (_QWORD)v69) >> 3);
      if (2 * v71 > v70)
        v70 = 2 * v71;
      if (v71 >= 0x555555555555555)
        v72 = 0xAAAAAAAAAAAAAAALL;
      else
        v72 = v70;
      if (v72)
      {
        if (v72 > 0xAAAAAAAAAAAAAAALL)
LABEL_127:
          std::__throw_bad_array_new_length[abi:sn180100]();
        v73 = 24 * v72;
        v74 = (char *)operator new(24 * v72);
        v75 = &v74[v73];
        v76 = &v74[8 * (v66 - v69)];
        *(_OWORD *)v76 = *a6;
        *((_QWORD *)v76 + 2) = *((_QWORD *)a6 + 2);
        v68 = v76 + 24;
        if (v66 != v69)
        {
          do
          {
            v77 = *(_OWORD *)(v66 - 3);
            *((_QWORD *)v76 - 1) = *(v66 - 1);
            *(_OWORD *)(v76 - 24) = v77;
            v76 -= 24;
            v66 -= 3;
          }
          while (v66 != v69);
          v66 = v69;
        }
        *((_QWORD *)a6 + 3) = v76;
        *((_QWORD *)a6 + 4) = v68;
        *((_QWORD *)a6 + 5) = v75;
        if (v66)
          operator delete(v66);
        goto LABEL_79;
      }
    }
    else if (v66)
    {
      v67 = *a6;
      v66[2] = *((_QWORD *)a6 + 2);
      *(_OWORD *)v66 = v67;
      v68 = v66 + 3;
LABEL_79:
      *((_QWORD *)a6 + 4) = v68;
LABEL_80:
      v78 = *(_QWORD *)(v8 + 16);
      if (v78)
      {
        v79 = *(const void **)(v8 + 32);
        v80 = *(_QWORD *)a5;
        v81 = *(_QWORD *)(a5 + 8);
        v82 = *(_QWORD *)a5 + v78;
        if (v81 < v82)
        {
          if (v81 + (v81 >> 1) <= v82)
            v83 = *(_QWORD *)a5 + v78;
          else
            v83 = v81 + (v81 >> 1);
          v84 = (void *)operator new[]();
          v85 = v84;
          v86 = *(_QWORD *)(a5 + 16);
          if (v86)
          {
            memcpy(v84, *(const void **)(a5 + 16), *(_QWORD *)a5);
            *(_QWORD *)(a5 + 16) = v85;
            MEMORY[0x20BD0ADD4](v86, 0x1000C8077774924);
          }
          else
          {
            *(_QWORD *)(a5 + 16) = v84;
          }
          *(_QWORD *)(a5 + 8) = v83;
          v80 = *(_QWORD *)a5;
          v8 = v114;
        }
        memcpy((void *)(*(_QWORD *)(a5 + 16) + v80), v79, v78);
        *(_QWORD *)a5 = v82;
      }
      *(_BYTE *)(*(_QWORD *)(a5 + 16) + v38) = *((_DWORD *)a6 + 3);
      v87 = *(uint64_t **)(v8 + 56);
      if (v87 != *(uint64_t **)(v8 + 64))
      {
        v88 = v113;
        do
        {
          v91 = *v87;
          v92 = *(_QWORD *)(*v87 + 32);
          *((_OWORD *)v87 + 1) = *(_OWORD *)(*v87 + 16);
          v87[4] = v92;
          if (v87 != (uint64_t *)v91)
          {
            std::vector<webrtc::AudioEncoder::EncodedInfoLeaf>::__assign_with_size[abi:sn180100]<webrtc::AudioEncoder::EncodedInfoLeaf*,webrtc::AudioEncoder::EncodedInfoLeaf*>(v87 + 5, *(char **)(v91 + 40), *(char **)(v91 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v91 + 48) - *(_QWORD *)(v91 + 40)) >> 3));
            v87 = (uint64_t *)*v87;
          }
          v90 = *v88;
          v93 = (const void *)v87[10];
          v94 = v87[8];
          *(_QWORD *)(*v88 + 64) = 0;
          if (v94)
          {
            v95 = *(_QWORD *)(v90 + 72);
            if (v95 >= v94)
            {
              v89 = 0;
            }
            else
            {
              v96 = v95 + (v95 >> 1);
              if (v96 <= v94)
                v97 = v94;
              else
                v97 = v96;
              v98 = (void *)operator new[]();
              v99 = v98;
              v100 = *(_QWORD *)(v90 + 80);
              if (v100)
              {
                memcpy(v98, *(const void **)(v90 + 80), *(_QWORD *)(v90 + 64));
                *(_QWORD *)(v90 + 80) = v99;
                MEMORY[0x20BD0ADD4](v100, 0x1000C8077774924);
              }
              else
              {
                *(_QWORD *)(v90 + 80) = v98;
              }
              *(_QWORD *)(v90 + 72) = v97;
              v89 = *(_QWORD *)(v90 + 64);
              v8 = v114;
            }
            memcpy((void *)(*(_QWORD *)(v90 + 80) + v89), v93, v94);
            *(_QWORD *)(v90 + 64) = v94;
            v90 = *v88;
          }
          v87 = *(uint64_t **)v90;
          v88 = (uint64_t *)v90;
        }
        while (*(_QWORD *)v90 != *(_QWORD *)(v8 + 64));
      }
      if (v87 != v113)
      {
        v101 = *a6;
        v87[4] = *((_QWORD *)a6 + 2);
        *((_OWORD *)v87 + 1) = v101;
        if (v87 + 2 != (uint64_t *)a6)
          std::vector<webrtc::AudioEncoder::EncodedInfoLeaf>::__assign_with_size[abi:sn180100]<webrtc::AudioEncoder::EncodedInfoLeaf*,webrtc::AudioEncoder::EncodedInfoLeaf*>(v87 + 5, *((char **)a6 + 3), *((char **)a6 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a6 + 4) - *((_QWORD *)a6 + 3)) >> 3));
        v102 = *(const void **)(v8 + 32);
        v103 = *(_QWORD *)(v8 + 16);
        v87[8] = 0;
        if (v103)
        {
          v104 = v87[9];
          if (v104 >= v103)
          {
            v110 = 0;
          }
          else
          {
            v105 = v104 + (v104 >> 1);
            if (v105 <= v103)
              v106 = v103;
            else
              v106 = v105;
            v107 = (void *)operator new[]();
            v108 = (uint64_t)v107;
            v109 = v87[10];
            if (v109)
            {
              memcpy(v107, (const void *)v87[10], v87[8]);
              v87[10] = v108;
              MEMORY[0x20BD0ADD4](v109, 0x1000C8077774924);
            }
            else
            {
              v87[10] = (uint64_t)v107;
            }
            v87[9] = v106;
            v110 = v87[8];
            v8 = v114;
          }
          memcpy((void *)(v87[10] + v110), v102, v103);
          v87[8] = v103;
        }
      }
      *((_DWORD *)a6 + 3) = *(_DWORD *)(v8 + 48);
      *(_QWORD *)a6 = *(_QWORD *)a5;
      return;
    }
LABEL_125:
    __break(1u);
LABEL_126:
    abort();
  }
}

double webrtc::AudioEncoderCopyRed::Reset(webrtc::AudioEncoderCopyRed *this)
{
  double result;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v3 = *((_QWORD *)this + 9);
  if (v3)
  {
    v4 = (char *)this + 56;
    v5 = *((_QWORD *)this + 7);
    v6 = (char *)*((_QWORD *)this + 8);
    v7 = *(_QWORD *)v6;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v7;
    *((_QWORD *)this + 9) = 0;
    if (v6 != (char *)this + 56)
    {
      do
      {
        v12 = (char *)*((_QWORD *)v6 + 1);
        v13 = *((_QWORD *)v6 + 10);
        *((_QWORD *)v6 + 10) = 0;
        if (v13)
          MEMORY[0x20BD0ADD4](v13, 0x1000C8077774924);
        v14 = (void *)*((_QWORD *)v6 + 5);
        if (v14)
        {
          *((_QWORD *)v6 + 6) = v14;
          operator delete(v14);
        }
        operator delete(v6);
        v6 = v12;
      }
      while (v12 != v4);
    }
    do
    {
      v8 = operator new[]();
      v9 = (char *)operator new(0x58uLL);
      *((_QWORD *)v9 + 2) = 0;
      *((_QWORD *)v9 + 3) = 0;
      *((_WORD *)v9 + 16) = 256;
      result = 0.0;
      *(_OWORD *)(v9 + 36) = 0u;
      *(_OWORD *)(v9 + 52) = 0u;
      *((_DWORD *)v9 + 17) = 0;
      *((_QWORD *)v9 + 9) = 1200;
      *((_QWORD *)v9 + 10) = v8;
      v10 = (_QWORD *)*((_QWORD *)this + 8);
      v11 = *((_QWORD *)this + 9);
      *(_QWORD *)v9 = v4;
      *((_QWORD *)v9 + 1) = v10;
      *v10 = v9;
      *((_QWORD *)this + 8) = v9;
      *((_QWORD *)this + 9) = v11 + 1;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t webrtc::AudioEncoderCopyRed::SetFec(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::SetDtx(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::GetDtx(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::SetApplication(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
}

uint64_t webrtc::AudioEncoderCopyRed::SetMaxPlaybackRate(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::EnableAudioNetworkAdaptor(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8));
}

uint64_t webrtc::AudioEncoderCopyRed::DisableAudioNetworkAdaptor(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::OnReceivedUplinkPacketLossFraction(webrtc::AudioEncoderCopyRed *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1), a2);
}

uint64_t webrtc::AudioEncoderCopyRed::OnReceivedUplinkBandwidth(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8));
}

uint64_t webrtc::AudioEncoderCopyRed::OnReceivedUplinkAllocation(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[3];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  v5[2] = a2[2];
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 176))(v2, v5);
}

uint64_t webrtc::AudioEncoderCopyRed::GetFrameLengthRange(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 216))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::OnReceivedRtt(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::OnReceivedOverhead(webrtc::AudioEncoderCopyRed *this, uint64_t a2)
{
  *((_QWORD *)this + 5) = 1200 - a2;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::SetReceiverFrameLengthRange(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::GetANAStats(webrtc::AudioEncoderCopyRed *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 208))(*((_QWORD *)this + 1));
}

uint64_t webrtc::AudioEncoderCopyRed::ReclaimContainedEncoders(webrtc::AudioEncoderCopyRed *this)
{
  return (uint64_t)this + 8;
}

unsigned __int8 *webrtc::AudioEncoderG711::SdpToConfig(unsigned __int8 *this, const webrtc::SdpAudioFormat *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  unsigned __int8 v24;
  char *v25;
  size_t v26;
  _QWORD *v27;
  size_t v28;
  size_t v29;
  int v30;
  size_t v31;
  int64_t v32;
  char v33;
  BOOL v34;
  int v36;
  int v37;
  signed int v38;
  unint64_t v39;
  void *__s1;
  size_t v41;
  unsigned __int8 v42;

  v2 = this[23];
  v3 = this;
  v4 = v2;
  if ((char)this[23] < 0)
  {
    v4 = *((_QWORD *)this + 1);
    if (v4 < 0)
      goto LABEL_110;
    v3 = *(unsigned __int8 **)this;
    if (v4 && v3 == 0)
      goto LABEL_110;
  }
  if (v4 == 4)
  {
    v6 = *v3;
    if (v6 == 80)
      goto LABEL_12;
    if ((v6 - 65) < 0x1A)
      LOBYTE(v6) = v6 + 32;
    v7 = v6 - 112;
    if (!v7)
    {
LABEL_12:
      v8 = v3[1];
      if (v8 == 67)
        goto LABEL_16;
      if ((v8 - 65) < 0x1A)
        LOBYTE(v8) = v8 + 32;
      v7 = v8 - 99;
      if (!v7)
      {
LABEL_16:
        v9 = v3[2];
        if (v9 == 77)
          goto LABEL_20;
        if ((v9 - 65) < 0x1A)
          LOBYTE(v9) = v9 + 32;
        v7 = v9 - 109;
        if (!v7)
        {
LABEL_20:
          v10 = v3[3];
          if (v10 == 85)
            goto LABEL_24;
          if ((v10 - 65) < 0x1A)
            LOBYTE(v10) = v10 + 32;
          v7 = v10 - 117;
          if (v10 == 117)
LABEL_24:
            v7 = 0;
        }
      }
    }
    v11 = v7 == 0;
    v12 = this;
    if ((v2 & 0x80) != 0)
    {
LABEL_28:
      v2 = *((_QWORD *)this + 1);
      if (v2 < 0)
        goto LABEL_110;
      v12 = *(unsigned __int8 **)this;
      if (v2)
      {
        if (!v12)
          goto LABEL_110;
      }
    }
  }
  else
  {
    v11 = 0;
    v12 = this;
    if ((v2 & 0x80) != 0)
      goto LABEL_28;
  }
  if (v2 == 4)
  {
    v13 = *v12;
    if (v13 == 80)
      goto LABEL_36;
    if ((v13 - 65) < 0x1A)
      LOBYTE(v13) = v13 + 32;
    v14 = v13 - 112;
    if (!v14)
    {
LABEL_36:
      v15 = v12[1];
      if (v15 == 67)
        goto LABEL_40;
      if ((v15 - 65) < 0x1A)
        LOBYTE(v15) = v15 + 32;
      v14 = v15 - 99;
      if (!v14)
      {
LABEL_40:
        v16 = v12[2];
        if (v16 == 77)
          goto LABEL_44;
        if ((v16 - 65) < 0x1A)
          LOBYTE(v16) = v16 + 32;
        v14 = v16 - 109;
        if (!v14)
        {
LABEL_44:
          v17 = v12[3];
          if (v17 == 65)
            goto LABEL_48;
          if ((v17 - 65) < 0x1A)
            LOBYTE(v17) = v17 + 32;
          v14 = v17 - 97;
          if (!v14)
LABEL_48:
            v14 = 0;
        }
      }
    }
    v18 = v14 == 0;
    if (*((_DWORD *)this + 6) != 8000)
      goto LABEL_50;
  }
  else
  {
    v18 = 0;
    if (*((_DWORD *)this + 6) != 8000)
    {
LABEL_50:
      v19 = 0;
      v20 = 0;
      return (unsigned __int8 *)(v20 | (v19 << 32));
    }
  }
  v19 = 0;
  if (!v11 && !v18)
  {
    v20 = 0;
    return (unsigned __int8 *)(v20 | (v19 << 32));
  }
  v21 = *((_QWORD *)this + 4);
  v20 = 0;
  if (!v21)
    return (unsigned __int8 *)(v20 | (v19 << 32));
  v42 = 5;
  if (&__s1 <= (void **)"ptime" && (char *)&__s1 + 5 > "ptime")
    goto LABEL_110;
  v23 = (char *)(this + 48);
  v22 = (uint64_t *)*((_QWORD *)this + 6);
  strcpy((char *)&__s1, "ptime");
  this = (unsigned __int8 *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)this + 40, (const void **)&__s1, v22, (uint64_t *)this + 6);
  v24 = v42;
  if (v23 == (char *)this)
    goto LABEL_73;
  v25 = (char *)this;
  if ((v42 & 0x80) != 0)
  {
    v26 = v41;
    if ((v41 & 0x8000000000000000) != 0)
      goto LABEL_110;
    this = (unsigned __int8 *)__s1;
    if (v41)
    {
      if (!__s1)
        goto LABEL_110;
    }
  }
  else
  {
    this = (unsigned __int8 *)&__s1;
    v26 = v42;
  }
  v27 = v25 + 32;
  if (v25[55] < 0)
  {
    v28 = *((_QWORD *)v25 + 5);
    if ((v28 & 0x8000000000000000) != 0)
      goto LABEL_110;
    v27 = (_QWORD *)*v27;
    if (v28)
    {
      if (!v27)
        goto LABEL_110;
    }
  }
  else
  {
    v28 = v25[55];
  }
  if (v28 >= v26)
    v29 = v26;
  else
    v29 = v28;
  v30 = memcmp(this, v27, v29);
  if (!v30)
  {
    if (v26 >= v28)
      goto LABEL_74;
    goto LABEL_73;
  }
  if (v30 < 0)
LABEL_73:
    v25 = v23;
LABEL_74:
  if ((v24 & 0x80) != 0)
  {
    operator delete(__s1);
    if (v25 == v23)
      goto LABEL_105;
  }
  else if (v25 == v23)
  {
    goto LABEL_105;
  }
  this = (unsigned __int8 *)(v25 + 56);
  if ((v25[79] & 0x80000000) == 0)
  {
    v31 = v25[79];
    goto LABEL_85;
  }
  v31 = *((_QWORD *)v25 + 8);
  if ((v31 & 0x8000000000000000) == 0)
  {
    this = *(unsigned __int8 **)this;
    if (!v31 || this)
    {
LABEL_85:
      v32 = rtc::string_to_number_internal::ParseSigned((void **)this, v31, 10);
      if (v33)
        v34 = v32 < (uint64_t)0xFFFFFFFF80000000;
      else
        v34 = 1;
      v36 = v34 || v32 > 0x7FFFFFFF;
      if (v36)
        v37 = 0;
      else
        v37 = v32;
      if ((v36 & 1) == 0 && v37 >= 1)
      {
        v38 = 10 * (v37 / 0xAu);
        if (v38 >= 60)
          v38 = 60;
        if (v38 <= 10)
          v38 = 10;
        HIDWORD(v39) = -858993459 * v38;
        LODWORD(v39) = -858993459 * v38;
        if ((v39 >> 1) > 0x19999999)
        {
          v20 = 0;
LABEL_108:
          v19 = v21;
          return (unsigned __int8 *)(v20 | (v19 << 32));
        }
      }
LABEL_105:
      v20 = (v21 - 1) < 0x18 && !v11;
      goto LABEL_108;
    }
  }
LABEL_110:
  __break(1u);
  return this;
}

void webrtc::AudioEncoderG711::AppendSupportedEncoders(uint64_t a1)
{
  unint64_t v2;
  __int128 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  void *__p[2];
  uint64_t v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  HIBYTE(v16) = 4;
  if (__p <= (void **)"PCMU" && (char *)__p + 4 > "PCMU")
    goto LABEL_24;
  strcpy((char *)__p, "PCMU");
  LODWORD(v17) = 8000;
  v19 = 0;
  v20 = 0;
  *((_QWORD *)&v17 + 1) = 1;
  v18 = &v19;
  LODWORD(v21) = 8000;
  *((_QWORD *)&v21 + 1) = 1;
  *(_QWORD *)&v22 = 0xFA000000FA00;
  DWORD2(v22) = 64000;
  WORD6(v22) = 1;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= *(_QWORD *)(a1 + 16))
  {
    v7 = std::vector<webrtc::AudioCodecSpec>::__push_back_slow_path<webrtc::AudioCodecSpec>((void **)a1, (uint64_t)__p);
  }
  else
  {
    if (!v2)
      goto LABEL_24;
    v3 = *(_OWORD *)__p;
    *(_QWORD *)(v2 + 16) = v16;
    *(_OWORD *)v2 = v3;
    __p[1] = 0;
    v16 = 0;
    __p[0] = 0;
    *(_OWORD *)(v2 + 24) = v17;
    *(_QWORD *)(v2 + 40) = v18;
    v4 = v19;
    *(_QWORD *)(v2 + 48) = v19;
    v5 = v2 + 48;
    v6 = v20;
    *(_QWORD *)(v2 + 56) = v20;
    if (v6)
    {
      *(_QWORD *)(v4 + 16) = v5;
      v18 = &v19;
      v19 = 0;
      v20 = 0;
    }
    else
    {
      *(_QWORD *)(v2 + 40) = v5;
    }
    v8 = v22;
    *(_OWORD *)(v2 + 64) = v21;
    *(_OWORD *)(v2 + 80) = v8;
    v7 = (char *)(v2 + 96);
  }
  *(_QWORD *)(a1 + 8) = v7;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  HIBYTE(v16) = 4;
  if (__p <= (void **)"PCMA" && (char *)__p + 4 > "PCMA")
    goto LABEL_24;
  strcpy((char *)__p, "PCMA");
  LODWORD(v17) = 8000;
  v19 = 0;
  v20 = 0;
  *((_QWORD *)&v17 + 1) = 1;
  v18 = &v19;
  LODWORD(v21) = 8000;
  *((_QWORD *)&v21 + 1) = 1;
  *(_QWORD *)&v22 = 0xFA000000FA00;
  DWORD2(v22) = 64000;
  WORD6(v22) = 1;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 >= *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = std::vector<webrtc::AudioCodecSpec>::__push_back_slow_path<webrtc::AudioCodecSpec>((void **)a1, (uint64_t)__p);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(__p[0]);
    return;
  }
  if (!v9)
  {
LABEL_24:
    __break(1u);
    return;
  }
  v10 = *(_OWORD *)__p;
  *(_QWORD *)(v9 + 16) = v16;
  *(_OWORD *)v9 = v10;
  __p[1] = 0;
  v16 = 0;
  __p[0] = 0;
  *(_OWORD *)(v9 + 24) = v17;
  *(_QWORD *)(v9 + 40) = v18;
  v11 = v19;
  *(_QWORD *)(v9 + 48) = v19;
  v12 = v9 + 48;
  v13 = v20;
  *(_QWORD *)(v9 + 56) = v20;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    v18 = &v19;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    *(_QWORD *)(v9 + 40) = v12;
  }
  v14 = v22;
  *(_OWORD *)(v9 + 64) = v21;
  *(_OWORD *)(v9 + 80) = v14;
  *(_QWORD *)(a1 + 8) = v9 + 96;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v19);
  if (SHIBYTE(v16) < 0)
    goto LABEL_23;
}

int *webrtc::AudioEncoderG711::MakeAudioEncoder@<X0>(int *result@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;

  v4 = *result;
  if (*result > 1)
    goto LABEL_11;
  v5 = result[2];
  if ((int)v5 < 1 || v5 % 0xA != 0)
    goto LABEL_11;
  v7 = result[1];
  if ((v7 - 1) > 0x17)
    goto LABEL_11;
  if (v4 == 1)
  {
    v9 = operator new();
    *(_DWORD *)(v9 + 8) = 8000;
    *(_QWORD *)(v9 + 16) = v7;
    *(_DWORD *)(v9 + 24) = a2;
    v13 = (unint64_t)((((1000 * v5 * (unint64_t)v7) & 0x1FFFFFFFFFFFFFFFLL)
                            * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
    *(_QWORD *)(v9 + 32) = v5 / 0xA;
    *(_QWORD *)(v9 + 40) = v13;
    *(_DWORD *)(v9 + 72) = 0;
    v14 = 2 * v13;
    result = (int *)operator new(2 * v13);
    *(_QWORD *)(v9 + 48) = result;
    *(_QWORD *)(v9 + 56) = result;
    *(_QWORD *)(v9 + 64) = (char *)result + v14;
    goto LABEL_13;
  }
  if (v4)
  {
LABEL_11:
    *a3 = 0;
    return result;
  }
  v9 = operator new();
  *(_DWORD *)(v9 + 8) = 8000;
  *(_QWORD *)(v9 + 16) = v7;
  *(_DWORD *)(v9 + 24) = a2;
  v10 = (unint64_t)((((1000 * v5 * (unint64_t)v7) & 0x1FFFFFFFFFFFFFFFLL)
                          * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
  *(_QWORD *)(v9 + 32) = v5 / 0xAuLL;
  *(_QWORD *)(v9 + 40) = v10;
  *(_DWORD *)(v9 + 72) = 0;
  v11 = 2 * v10;
  result = (int *)operator new(2 * v10);
  *(_QWORD *)(v9 + 48) = result;
  *(_QWORD *)(v9 + 56) = result;
  *(_QWORD *)(v9 + 64) = (char *)result + v11;
LABEL_13:
  *(_QWORD *)v9 = v12 + 16;
  *a3 = v9;
  return result;
}

std::string *webrtc::AudioEncoderG722Impl::AudioEncoderG722Impl(uint64_t a1, int *a2, int a3)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  uint64_t v45;

  v5 = *a2;
  v6 = a2[1];
  *(_QWORD *)a1 = &off_24C0AD8C8;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = v5 / 10;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  is_mul_ok(v6, 0x28uLL);
  v7 = 40 * v6;
  v8 = (_QWORD *)operator new[]();
  *v8 = 40;
  v8[1] = v6;
  v13 = v8 + 2;
  if ((_DWORD)v6)
  {
    v14 = v8 + 2;
    while (1)
    {
      *(_OWORD *)(v14 + 3) = 0u;
      *(_OWORD *)(v14 + 1) = 0u;
      v15 = malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL);
      *v14 = v15;
      if (!v15)
        break;
      v14 += 5;
      v7 -= 40;
      if (!v7)
        goto LABEL_5;
    }
    WebRtcG722_CreateEncoder(v14);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/g722/audio_encoder_g722.cc", 145, "0 == WebRtcG722_CreateEncoder(&encoder)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v40, v41, v42, v43, 0);
    goto LABEL_32;
  }
LABEL_5:
  v16 = 2 * *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v16;
  *(_QWORD *)(a1 + 64) = v16;
  if (v16)
    v16 = operator new[]();
  *(_QWORD *)(a1 + 72) = v16;
  if (*a2 >= 1 && !(*a2 % 0xAu) && (a2[1] - 1) < 0x18)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v17 = 0;
      v18 = 0;
      v19 = 16 * ((5 * *(_QWORD *)(a1 + 24)) & 0x7FFFFFFFFFFFFFFLL);
      do
      {
        v21 = *(_QWORD *)(a1 + 48) + v17;
        v22 = operator new[]();
        v23 = *(_QWORD *)(v21 + 8);
        *(_QWORD *)(v21 + 8) = v22;
        if (v23)
          MEMORY[0x20BD0ADD4](v23, 0x1000C80BDFB0063);
        v24 = *(_QWORD *)(a1 + 48) + v17;
        v25 = *(_QWORD *)(v24 + 24);
        if (v25 < v19)
        {
          v26 = v25 + (v25 >> 1);
          if (v26 <= v19)
            v27 = v19;
          else
            v27 = v26;
          v28 = (void *)operator new[]();
          v29 = v28;
          v30 = *(_QWORD *)(v24 + 32);
          if (v30)
          {
            memcpy(v28, *(const void **)(v24 + 32), *(_QWORD *)(v24 + 16));
            *(_QWORD *)(v24 + 32) = v29;
            MEMORY[0x20BD0ADD4](v30, 0x1000C8077774924);
          }
          else
          {
            *(_QWORD *)(v24 + 32) = v28;
          }
          *(_QWORD *)(v24 + 24) = v27;
        }
        *(_QWORD *)(v24 + 16) = v19;
        ++v18;
        v20 = *(_QWORD *)(a1 + 8);
        v17 += 40;
      }
      while (v18 < v20);
      *(_QWORD *)(a1 + 32) = 0;
      if (!v20)
        return (std::string *)a1;
      v31 = 0;
      v32 = 0;
      v33 = 0uLL;
      while (1)
      {
        v34 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + v31);
        if (!v34)
        {
          v34 = malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL);
          v33 = 0uLL;
          if (!v34)
            break;
        }
        v34[60] = 0;
        *((_OWORD *)v34 + 28) = v33;
        *((_OWORD *)v34 + 29) = v33;
        *((_OWORD *)v34 + 26) = v33;
        *((_OWORD *)v34 + 27) = v33;
        *((_OWORD *)v34 + 24) = v33;
        *((_OWORD *)v34 + 25) = v33;
        *((_OWORD *)v34 + 22) = v33;
        *((_OWORD *)v34 + 23) = v33;
        *((_OWORD *)v34 + 20) = v33;
        *((_OWORD *)v34 + 21) = v33;
        *((_OWORD *)v34 + 18) = v33;
        *((_OWORD *)v34 + 19) = v33;
        *((_OWORD *)v34 + 16) = v33;
        *((_OWORD *)v34 + 17) = v33;
        *((_OWORD *)v34 + 14) = v33;
        *((_OWORD *)v34 + 15) = v33;
        *((_OWORD *)v34 + 12) = v33;
        *((_OWORD *)v34 + 13) = v33;
        *((_OWORD *)v34 + 10) = v33;
        *((_OWORD *)v34 + 11) = v33;
        *((_OWORD *)v34 + 8) = v33;
        *((_OWORD *)v34 + 9) = v33;
        *((_OWORD *)v34 + 6) = v33;
        *((_OWORD *)v34 + 7) = v33;
        *((_OWORD *)v34 + 4) = v33;
        *((_OWORD *)v34 + 5) = v33;
        *((_OWORD *)v34 + 2) = v33;
        *((_OWORD *)v34 + 3) = v33;
        *(_OWORD *)v34 = v33;
        *((_OWORD *)v34 + 1) = v33;
        *((_DWORD *)v34 + 3) = 8;
        *((_DWORD *)v34 + 1) = 0;
        *((_DWORD *)v34 + 72) = 32;
        *((_DWORD *)v34 + 117) = 8;
        ++v32;
        v31 += 40;
        if (v32 >= *(_QWORD *)(a1 + 8))
          return (std::string *)a1;
      }
      WebRtcG722_EncoderInit(*(_QWORD **)(*(_QWORD *)(a1 + 48) + v31));
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/g722/audio_encoder_g722.cc", 79, "0 == WebRtcG722_EncoderInit(encoders_[i].encoder)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v35, v36, v37, v38, 0);
    }
    *(_QWORD *)(a1 + 32) = 0;
    return (std::string *)a1;
  }
LABEL_32:
  v44 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/g722/audio_encoder_g722.cc", 37, "config.IsOk()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v9, v10, v11, v12, v45);
  return webrtc::AudioEncoderG722Impl::Reset(v44);
}

std::string *webrtc::AudioEncoderG722Impl::Reset(std::string *this)
{
  std::string *v1;
  uint64_t v2;
  std::string::size_type v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  this[1].__r_.__value_.__l.__size_ = 0;
  if (this->__r_.__value_.__l.__size_)
  {
    v1 = this;
    v2 = 0;
    v3 = 0;
    v4 = 0uLL;
    while (1)
    {
      this = *(std::string **)(v1[2].__r_.__value_.__r.__words[0] + v2);
      if (!this)
      {
        this = (std::string *)malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL);
        v4 = 0uLL;
        if (!this)
          break;
      }
      this[20].__r_.__value_.__r.__words[0] = 0;
      *(_OWORD *)&this[18].__r_.__value_.__r.__words[2] = v4;
      *(_OWORD *)&this[19].__r_.__value_.__r.__words[1] = v4;
      *(_OWORD *)&this[17].__r_.__value_.__r.__words[1] = v4;
      *(_OWORD *)&this[18].__r_.__value_.__l.__data_ = v4;
      *(_OWORD *)&this[16].__r_.__value_.__l.__data_ = v4;
      *(_OWORD *)&this[16].__r_.__value_.__r.__words[2] = v4;
      *(_OWORD *)&this[14].__r_.__value_.__r.__words[2] = v4;
      *(_OWORD *)&this[15].__r_.__value_.__r.__words[1] = v4;
      *(_OWORD *)&this[13].__r_.__value_.__r.__words[1] = v4;
      *(_OWORD *)&this[14].__r_.__value_.__l.__data_ = v4;
      *(_OWORD *)&this[12].__r_.__value_.__l.__data_ = v4;
      *(_OWORD *)&this[12].__r_.__value_.__r.__words[2] = v4;
      *(_OWORD *)&this[10].__r_.__value_.__r.__words[2] = v4;
      *(_OWORD *)&this[11].__r_.__value_.__r.__words[1] = v4;
      *(_OWORD *)&this[9].__r_.__value_.__r.__words[1] = v4;
      *(_OWORD *)&this[10].__r_.__value_.__l.__data_ = v4;
      *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = v4;
      *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = v4;
      *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = v4;
      *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = v4;
      *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = v4;
      *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = v4;
      *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v4;
      *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = v4;
      *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v4;
      *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = v4;
      *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v4;
      *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v4;
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
      *(_OWORD *)&this->__r_.__value_.__r.__words[2] = v4;
      HIDWORD(this->__r_.__value_.__r.__words[1]) = 8;
      HIDWORD(this->__r_.__value_.__r.__words[0]) = 0;
      LODWORD(this[12].__r_.__value_.__l.__data_) = 32;
      HIDWORD(this[19].__r_.__value_.__r.__words[1]) = 8;
      ++v3;
      v2 += 40;
      if (v3 >= v1->__r_.__value_.__l.__size_)
        return this;
    }
    WebRtcG722_EncoderInit(*(_QWORD **)(v1[2].__r_.__value_.__r.__words[0] + v2));
    return rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/g722/audio_encoder_g722.cc", 79, "0 == WebRtcG722_EncoderInit(encoders_[i].encoder)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v5, v6, v7, v8, 0);
  }
  return this;
}

void webrtc::AudioEncoderG722Impl::~AudioEncoderG722Impl(webrtc::AudioEncoderG722Impl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 - 8);
    if (v4)
    {
      v5 = 40 * v4;
      do
      {
        v6 = v3 + v5;
        free(*(void **)(v3 + v5 - 40));
        v7 = *(_QWORD *)(v3 + v5 - 8);
        *(_QWORD *)(v3 + v5 - 8) = 0;
        if (v7)
          MEMORY[0x20BD0ADD4](v7, 0x1000C8077774924);
        v8 = *(_QWORD *)(v6 - 32);
        *(_QWORD *)(v6 - 32) = 0;
        if (v8)
          MEMORY[0x20BD0ADD4](v8, 0x1000C80BDFB0063);
        v5 -= 40;
      }
      while (v5);
    }
    MEMORY[0x20BD0ADD4](v3 - 16, 0x1030C80A4690949);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 - 8);
    if (v4)
    {
      v5 = 40 * v4;
      do
      {
        v6 = v3 + v5;
        free(*(void **)(v3 + v5 - 40));
        v7 = *(_QWORD *)(v3 + v5 - 8);
        *(_QWORD *)(v3 + v5 - 8) = 0;
        if (v7)
          MEMORY[0x20BD0ADD4](v7, 0x1000C8077774924);
        v8 = *(_QWORD *)(v6 - 32);
        *(_QWORD *)(v6 - 32) = 0;
        if (v8)
          MEMORY[0x20BD0ADD4](v8, 0x1000C80BDFB0063);
        v5 -= 40;
      }
      while (v5);
    }
    MEMORY[0x20BD0ADD4](v3 - 16, 0x1030C80A4690949);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioEncoderG722Impl::SampleRateHz(webrtc::AudioEncoderG722Impl *this)
{
  return 16000;
}

uint64_t webrtc::AudioEncoderG722Impl::NumChannels(webrtc::AudioEncoderG722Impl *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t webrtc::AudioEncoderG722Impl::RtpTimestampRateHz(webrtc::AudioEncoderG722Impl *this)
{
  return 8000;
}

uint64_t webrtc::AudioEncoderG722Impl::Num10MsFramesInNextPacket(webrtc::AudioEncoderG722Impl *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t webrtc::AudioEncoderG722Impl::Max10MsFramesInAPacket(webrtc::AudioEncoderG722Impl *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t webrtc::AudioEncoderG722Impl::GetTargetBitrate(webrtc::AudioEncoderG722Impl *this)
{
  return (64000 * *((_DWORD *)this + 2));
}

uint64_t webrtc::AudioEncoderG722Impl::GetFrameLengthRange@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = 10000 * *(_QWORD *)(this + 24);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = 1;
  return this;
}

uint64_t webrtc::AudioEncoderG722Impl::EncodeImpl@<X0>(uint64_t result@<X0>, int a2@<W1>, unsigned __int16 *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, int8x16_t a9@<Q0>, double a10@<D1>, int8x16_t a11@<Q2>)
{
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  unint64_t i;
  int v50;
  std::string *v51;
  const webrtc::SdpAudioFormat *v52;
  unint64_t v53;

  v12 = result;
  v14 = *(_QWORD *)(result + 32);
  if (!v14)
    *(_DWORD *)(result + 40) = a2;
  v15 = *(_QWORD *)(result + 8);
  if (v15)
  {
    v16 = 0;
    v17 = *(_QWORD *)(result + 48) + 8;
    do
    {
      v18 = a3;
      v19 = (uint64_t *)v17;
      v20 = v15;
      do
      {
        v21 = *v18++;
        result = v21;
        v22 = *v19;
        v19 += 5;
        *(_WORD *)(v22 + 2 * (v16 + 160 * v14)) = result;
        --v20;
      }
      while (v20);
      ++v16;
      a3 += v15;
    }
    while (v16 != 160);
  }
  v23 = v14 + 1;
  *(_QWORD *)(v12 + 32) = v23;
  v24 = *(_QWORD *)(v12 + 24);
  if (v23 < v24)
  {
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_WORD *)(a8 + 16) = 256;
    *(_QWORD *)(a8 + 20) = 0;
    *(_QWORD *)(a8 + 36) = 0;
    *(_QWORD *)(a8 + 28) = 0;
    *(_DWORD *)(a8 + 44) = 0;
    return result;
  }
  if (v23 != v24)
    goto LABEL_41;
  *(_QWORD *)(v12 + 32) = 0;
  v25 = 160 * v23;
  if (v15)
  {
    v26 = 0;
    v27 = 0;
    v28 = v25 >> 1;
    while (1)
    {
      result = WebRtc_g722_encode(*(_QWORD *)(*(_QWORD *)(v12 + 48) + v26), *(_QWORD *)(*(_QWORD *)(v12 + 48) + v26 + 32), *(_QWORD *)(*(_QWORD *)(v12 + 48) + v26 + 8), v25, a9, a10, a11);
      if (result != v28)
        break;
      ++v27;
      v15 = *(_QWORD *)(v12 + 8);
      v26 += 40;
      if (v27 >= v15)
        goto LABEL_17;
    }
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/g722/audio_encoder_g722.cc", 114, "bytes_encoded == samples_per_channel / 2", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v29, v30, v31, v32, result);
LABEL_41:
    v51 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/g722/audio_encoder_g722.cc", 107, "num_10ms_frames_buffered_ == num_10ms_frames_per_packet_", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a4, a5, a6, a7, v23);
    return webrtc::AudioEncoderG722::SdpToConfig((webrtc::AudioEncoderG722 *)v51, v52);
  }
  v28 = v25 >> 1;
LABEL_17:
  v33 = v15 * v28;
  *(_WORD *)(a8 + 16) = 256;
  *(_QWORD *)(a8 + 32) = 0;
  *(_QWORD *)(a8 + 40) = 0;
  *(_QWORD *)(a8 + 24) = 0;
  v35 = *(_QWORD *)a4;
  v34 = *(_QWORD *)(a4 + 8);
  v36 = *(_QWORD *)a4 + v33;
  if (v34 < v36)
  {
    v53 = v33;
    v37 = v34 + (v34 >> 1);
    if (v37 <= v36)
      v38 = *(_QWORD *)a4 + v33;
    else
      v38 = v37;
    result = operator new[]();
    v39 = result;
    v40 = *(_QWORD *)(a4 + 16);
    if (v40)
    {
      memcpy((void *)result, *(const void **)(a4 + 16), *(_QWORD *)a4);
      *(_QWORD *)(a4 + 16) = v39;
      result = MEMORY[0x20BD0ADD4](v40, 0x1000C8077774924);
    }
    else
    {
      *(_QWORD *)(a4 + 16) = result;
    }
    *(_QWORD *)(a4 + 8) = v38;
    v33 = v53;
  }
  *(_QWORD *)a4 = v36;
  v41 = *(_QWORD *)(a4 + 16) + v35;
  if (!v33)
    v41 = 0;
  if (v25)
  {
    v42 = 0;
    v43 = *(_QWORD *)(v12 + 8);
    if (v28 <= 1)
      v44 = 1;
    else
      v44 = v28;
    do
    {
      if (v43)
      {
        v45 = 0;
        v46 = 32;
        do
        {
          v47 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) + v46) + v42);
          *(_BYTE *)(*(_QWORD *)(v12 + 72) + v45) = v47 >> 4;
          *(_BYTE *)(*(_QWORD *)(v12 + 72) + *(_QWORD *)(v12 + 8) + v45++) = v47 & 0xF;
          v43 = *(_QWORD *)(v12 + 8);
          v46 += 40;
        }
        while (v45 < v43);
        if (v43)
        {
          v48 = 0;
          for (i = 0; i < v43; ++i)
          {
            *(_BYTE *)(v41 + v42 * v43 + i) = *(_BYTE *)(*(_QWORD *)(v12 + 72) + v48 + 1) | (16
                                                                                           * *(_BYTE *)(*(_QWORD *)(v12 + 72) + v48));
            v43 = *(_QWORD *)(v12 + 8);
            v48 += 2;
          }
        }
      }
      ++v42;
    }
    while (v42 != v44);
  }
  *(_QWORD *)a4 = v36;
  *(_QWORD *)a8 = v33;
  v50 = *(_DWORD *)(v12 + 16);
  *(_DWORD *)(a8 + 8) = *(_DWORD *)(v12 + 40);
  *(_DWORD *)(a8 + 12) = v50;
  *(_DWORD *)(a8 + 20) = 5;
  return result;
}

uint64_t webrtc::AudioEncoderG722::SdpToConfig(webrtc::AudioEncoderG722 *this, const webrtc::SdpAudioFormat *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned __int8 v21;
  uint64_t *v22;
  const void *p_s1;
  size_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  int v28;
  void **v29;
  size_t v30;
  uint64_t v31;
  int64_t v32;
  char v33;
  BOOL v34;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  std::string *v41;
  uint64_t v42;
  void *__s1;
  size_t v44;
  unsigned __int8 v45;

  if (*((char *)this + 23) < 0)
  {
    v8 = *((_QWORD *)this + 1);
    if (v8 < 0)
      goto LABEL_86;
    v9 = *(unsigned __int8 **)this;
    if (v8 && v9 == 0)
      goto LABEL_86;
  }
  else
  {
    v8 = *((unsigned __int8 *)this + 23);
    v9 = (unsigned __int8 *)this;
  }
  if (v8 != 4)
    goto LABEL_82;
  v11 = *v9;
  if (v11 != 103)
  {
    if ((v11 - 65) < 0x1A)
      LOBYTE(v11) = v11 + 32;
    v12 = v11 - 103;
    if (v12)
      goto LABEL_25;
  }
  v13 = v9[1];
  if (v13 != 55)
  {
    if ((v13 - 65) < 0x1A)
      LOBYTE(v13) = v13 + 32;
    v12 = v13 - 55;
    if (v12)
      goto LABEL_25;
  }
  v14 = v9[2];
  if (v14 != 50)
  {
    if ((v14 - 65) < 0x1A)
      LOBYTE(v14) = v14 + 32;
    v12 = v14 - 50;
    if (v12)
      goto LABEL_25;
  }
  v15 = v9[3];
  if (v15 == 50)
    goto LABEL_36;
  if ((v15 - 65) < 0x1A)
    LOBYTE(v15) = v15 + 32;
  v12 = v15 - 50;
  if (v15 == 50)
  {
LABEL_36:
    if (*((_DWORD *)this + 6) != 8000)
      goto LABEL_82;
  }
  else
  {
LABEL_25:
    if (v12)
      v16 = 0;
    else
      v16 = *((_DWORD *)this + 6) == 8000;
    if (!v16)
      goto LABEL_82;
  }
  v17 = *((_QWORD *)this + 4);
  if (!(v17 >> 31))
  {
    v45 = 5;
    if (&__s1 <= (void **)"ptime" && (char *)&__s1 + 5 > "ptime")
      goto LABEL_86;
    v19 = (uint64_t *)((char *)this + 48);
    v18 = (uint64_t *)*((_QWORD *)this + 6);
    strcpy((char *)&__s1, "ptime");
    v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)this + 40, (const void **)&__s1, v18, (uint64_t *)this + 6);
    v21 = v45;
    if (v19 == v20)
      goto LABEL_51;
    v22 = v20;
    if ((v45 & 0x80) != 0)
    {
      v24 = v44;
      if ((v44 & 0x8000000000000000) != 0)
        goto LABEL_86;
      p_s1 = __s1;
      if (v44)
      {
        if (!__s1)
          goto LABEL_86;
      }
    }
    else
    {
      p_s1 = &__s1;
      v24 = v45;
    }
    v25 = v22 + 4;
    if ((*((char *)v22 + 55) & 0x80000000) == 0)
    {
      v26 = *((unsigned __int8 *)v22 + 55);
LABEL_46:
      if (v26 >= v24)
        v27 = v24;
      else
        v27 = v26;
      v28 = memcmp(p_s1, v25, v27);
      if (v28)
      {
        if ((v28 & 0x80000000) == 0)
          goto LABEL_52;
      }
      else if (v24 >= v26)
      {
LABEL_52:
        if ((v21 & 0x80) != 0)
        {
          operator delete(__s1);
          if (v22 != v19)
            goto LABEL_54;
        }
        else if (v22 != v19)
        {
LABEL_54:
          v29 = (void **)(v22 + 7);
          if ((*((char *)v22 + 79) & 0x80000000) == 0)
          {
            v30 = *((unsigned __int8 *)v22 + 79);
            goto LABEL_61;
          }
          v30 = v22[8];
          if ((v30 & 0x8000000000000000) == 0)
          {
            v29 = (void **)*v29;
            if (!v30 || v29)
            {
LABEL_61:
              v32 = rtc::string_to_number_internal::ParseSigned(v29, v30, 10);
              if (v33)
                v34 = v32 < (uint64_t)0xFFFFFFFF80000000;
              else
                v34 = 1;
              v36 = v34 || v32 > 0x7FFFFFFF;
              if (v36)
                v37 = 0;
              else
                v37 = v32;
              LODWORD(v31) = 20;
              if ((v36 & 1) == 0 && v37 >= 1)
              {
                LODWORD(v31) = 10 * (v37 / 0xAu);
                if ((int)v31 >= 60)
                  LODWORD(v31) = 60;
                if ((int)v31 <= 10)
                  LODWORD(v31) = 10;
                HIDWORD(v38) = -858993459 * v31;
                LODWORD(v38) = -858993459 * v31;
                if ((v38 >> 1) > 0x19999999)
                  goto LABEL_82;
              }
              goto LABEL_80;
            }
          }
          goto LABEL_86;
        }
        LODWORD(v31) = 20;
LABEL_80:
        if ((v17 - 1) <= 0x17)
        {
          v39 = v17 << 32;
          v31 = v31;
          return v39 | v31;
        }
LABEL_82:
        v31 = 0;
        v39 = 0;
        return v39 | v31;
      }
LABEL_51:
      v22 = v19;
      goto LABEL_52;
    }
    v26 = v22[5];
    if ((v26 & 0x8000000000000000) == 0)
    {
      v25 = (_QWORD *)*v25;
      if (!v26 || v25)
        goto LABEL_46;
    }
LABEL_86:
    __break(1u);
  }
  v41 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v42);
  return webrtc::AudioEncoderG722::AppendSupportedEncoders(v41);
}

void webrtc::AudioEncoderG722::AppendSupportedEncoders(uint64_t a1, const webrtc::SdpAudioFormat *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  char *v22;
  __int128 v23;
  std::string __p;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  std::string v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t v34[2];

  *((_BYTE *)&v31.__r_.__value_.__s + 23) = 4;
  if (&v31 <= (std::string *)"G722" && (char *)v31.__r_.__value_.__r.__words + 4 > "G722")
    goto LABEL_27;
  strcpy((char *)&v31, "G722");
  LODWORD(v32) = 8000;
  v34[0] = 0;
  v34[1] = 0;
  *((_QWORD *)&v32 + 1) = 1;
  v33 = v34;
  v9 = webrtc::AudioEncoderG722::SdpToConfig((webrtc::AudioEncoderG722 *)&v31, a2, a3, a4, a5, a6, a7, a8);
  if (!v10)
    goto LABEL_27;
  v11 = v9;
  v12 = HIDWORD(v9);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  else
    __p = v31;
  v25 = v32;
  v27 = 0;
  v28 = 0;
  v26 = &v27;
  v13 = v33;
  if (v33 != v34)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v26, &v27, (uint64_t)(v13 + 4), (uint64_t)(v13 + 4));
      v19 = (uint64_t *)v13[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (uint64_t *)v13[2];
          v21 = *v20 == (_QWORD)v13;
          v13 = v20;
        }
        while (!v21);
      }
      v13 = v20;
    }
    while (v20 != v34);
  }
  LODWORD(v29) = 16000;
  *((_QWORD *)&v29 + 1) = v11 >> 32;
  LODWORD(v30) = 64000 * v12;
  DWORD1(v30) = 64000 * v12;
  DWORD2(v30) = 64000 * v12;
  WORD6(v30) = 1;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14 >= *(_QWORD *)(a1 + 16))
  {
    v22 = std::vector<webrtc::AudioCodecSpec>::__push_back_slow_path<webrtc::AudioCodecSpec>((void **)a1, (uint64_t)&__p);
    goto LABEL_22;
  }
  if (!v14)
  {
LABEL_27:
    __break(1u);
    return;
  }
  v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  *(_OWORD *)v14 = v15;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)(v14 + 24) = v25;
  *(_QWORD *)(v14 + 40) = v26;
  v16 = v27;
  *(_QWORD *)(v14 + 48) = v27;
  v17 = v14 + 48;
  v18 = v28;
  *(_QWORD *)(v14 + 56) = v28;
  if (v18)
  {
    *(_QWORD *)(v16 + 16) = v17;
    v26 = &v27;
    v27 = 0;
    v28 = 0;
  }
  else
  {
    *(_QWORD *)(v14 + 40) = v17;
  }
  v23 = v30;
  *(_OWORD *)(v14 + 64) = v29;
  *(_OWORD *)(v14 + 80) = v23;
  v22 = (char *)(v14 + 96);
LABEL_22:
  *(_QWORD *)(a1 + 8) = v22;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v26, v27);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v33, v34[0]);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_26:
    operator delete(v31.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v33, v34[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_26;
}

void webrtc::AudioEncoderL16::SdpToConfig(webrtc::AudioEncoderL16 *this, const webrtc::SdpAudioFormat *a2)
{
  unint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned __int8 v7;
  uint64_t *v8;
  const void *p_s1;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  size_t v14;
  int v15;
  void **v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__s1;
  size_t v21;
  unsigned __int8 v22;

  v2 = *((_QWORD *)this + 4);
  if (!(v2 >> 31))
  {
    v22 = 5;
    if (&__s1 <= (void **)"ptime" && (char *)&__s1 + 5 > "ptime")
      goto LABEL_41;
    v5 = (uint64_t *)((char *)this + 48);
    v4 = (uint64_t *)*((_QWORD *)this + 6);
    strcpy((char *)&__s1, "ptime");
    v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)this + 40, (const void **)&__s1, v4, (uint64_t *)this + 6);
    v7 = v22;
    if (v5 != v6)
    {
      v8 = v6;
      if ((v22 & 0x80) != 0)
      {
        v10 = v21;
        if ((v21 & 0x8000000000000000) != 0)
          goto LABEL_41;
        p_s1 = __s1;
        if (v21)
        {
          if (!__s1)
            goto LABEL_41;
        }
      }
      else
      {
        p_s1 = &__s1;
        v10 = v22;
      }
      v11 = v8 + 4;
      if (*((char *)v8 + 55) < 0)
      {
        v12 = v8[5];
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_41;
        v11 = (_QWORD *)*v11;
        if (v12 && v11 == 0)
          goto LABEL_41;
      }
      else
      {
        v12 = *((unsigned __int8 *)v8 + 55);
      }
      if (v12 >= v10)
        v14 = v10;
      else
        v14 = v12;
      v15 = memcmp(p_s1, v11, v14);
      if (v15)
      {
        if ((v15 & 0x80000000) == 0)
          goto LABEL_24;
      }
      else if (v10 >= v12)
      {
LABEL_24:
        if ((v7 & 0x80) != 0)
        {
          operator delete(__s1);
          if (v8 == v5)
            goto LABEL_34;
        }
        else if (v8 == v5)
        {
          goto LABEL_34;
        }
        v16 = (void **)(v8 + 7);
        if (*((char *)v8 + 79) < 0)
        {
          v17 = v8[8];
          if ((v17 & 0x8000000000000000) != 0)
            goto LABEL_41;
          v16 = (void **)*v16;
          if (v17)
          {
            if (!v16)
              goto LABEL_41;
          }
        }
        else
        {
          v17 = *((unsigned __int8 *)v8 + 79);
        }
        rtc::string_to_number_internal::ParseSigned(v16, v17, 10);
LABEL_34:
        if ((*((char *)this + 23) & 0x80000000) == 0)
          return;
        v18 = *((_QWORD *)this + 1);
        if ((v18 & 0x8000000000000000) == 0)
        {
          v19 = *(_QWORD *)this;
          if (!v18 || v19)
            return;
        }
LABEL_41:
        __break(1u);
        return;
      }
    }
    v8 = (uint64_t *)((char *)this + 48);
    goto LABEL_24;
  }
}

unsigned int *webrtc::AudioEncoderL16::MakeAudioEncoder@<X0>(unsigned int *result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = 0;
  v6 = *result;
  v7 = (int)result[1];
  v8 = result[2];
  if ((int)v6 > 31999)
  {
    if ((_DWORD)v6 != 48000 && (_DWORD)v6 != 32000)
      goto LABEL_18;
  }
  else if ((_DWORD)v6 != 8000 && (_DWORD)v6 != 16000)
  {
    goto LABEL_18;
  }
  v5 = 0;
  if ((v7 - 1) <= 0x17 && (v8 - 1) <= 0x77)
  {
    v11 = result[2] / 0xAu;
    if (!(result[2] % 0xAu))
    {
      result = (unsigned int *)operator new();
      v5 = result;
      result[2] = v6;
      *((_QWORD *)result + 2) = v7;
      result[6] = a2;
      v12 = v7 * v6 * v8;
      v13 = v12 / 0x3E8;
      *((_QWORD *)result + 4) = v11;
      *((_QWORD *)result + 5) = v12 / 0x3E8;
      *((_QWORD *)result + 7) = 0;
      *((_QWORD *)result + 8) = 0;
      *((_QWORD *)result + 6) = 0;
      result[18] = 0;
      if (v12 >= 0x3E8)
      {
        v14 = 2 * v13;
        result = (unsigned int *)operator new(2 * v13);
        v5[6] = result;
        v5[7] = result;
        v5[8] = (char *)result + v14;
      }
      *v5 = &unk_24C0ADF58;
    }
  }
LABEL_18:
  *a3 = v5;
  return result;
}

std::vector<int> *webrtc::AudioEncoderMultiChannelOpusConfig::IsOk(webrtc::AudioEncoderMultiChannelOpusConfig *this)
{
  _BOOL8 v2;
  std::vector<int> *result;
  unint64_t v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::vector<int>::pointer begin;
  unint64_t v18;
  unint64_t v19;
  std::vector<int>::pointer v20;
  int64_t v21;
  uint64_t v22;
  std::vector<int> __p;
  std::vector<int>::value_type __x;

  if (*(int *)this < 1 || *(_DWORD *)this % 0xAu != 0)
    return 0;
  v5 = *((_QWORD *)this + 1);
  if (v5 > 0xFE)
    return 0;
  if ((*((_DWORD *)this + 5) - 510001) < 0xFFF84F3F)
    return 0;
  if (*((_DWORD *)this + 14) > 0xAu)
    return 0;
  v6 = *((_DWORD *)this + 15);
  if (v6 < 0)
    return 0;
  v2 = 0;
  v7 = *((_DWORD *)this + 16);
  if (v7 < 0 || v6 < v7)
    return (std::vector<int> *)v2;
  v9 = (unsigned __int8 *)*((_QWORD *)this + 9);
  v8 = (unsigned __int8 *)*((_QWORD *)this + 10);
  if (v8 - v9 != v5)
    return 0;
  v10 = (v7 + v6);
  if (v9 != v8)
  {
    do
    {
      v11 = *v9;
      if (v11 != 255 && (int)v10 <= v11)
        return 0;
    }
    while (++v9 != v8);
  }
  __x = -1;
  result = std::vector<int>::vector(&__p, (int)v10, &__x);
  v13 = *((_QWORD *)this + 1);
  if (v13)
  {
    v14 = 0;
    v15 = *((_QWORD *)this + 9);
    v16 = *((_QWORD *)this + 10) - v15;
    begin = __p.__begin_;
    v18 = __p.__end_ - __p.__begin_;
    while (v16 != v14)
    {
      v19 = *(unsigned __int8 *)(v15 + v14);
      if (v19 != 255)
      {
        if (v18 <= v19)
          goto LABEL_43;
        if (begin[v19] != -1)
        {
LABEL_40:
          v2 = 0;
          goto LABEL_41;
        }
        begin[v19] = v14;
      }
      if (v13 == ++v14)
        goto LABEL_29;
    }
    goto LABEL_43;
  }
LABEL_29:
  if ((int)v10 >= 1)
  {
    v20 = __p.__begin_;
    v21 = __p.__end_ - __p.__begin_;
    v22 = v10;
    while (v21)
    {
      if (*v20 == -1)
        goto LABEL_40;
      ++v20;
      --v21;
      if (!--v22)
        goto LABEL_34;
    }
LABEL_43:
    __break(1u);
    return result;
  }
LABEL_34:
  v2 = (int)v10 < 255 && v13 < 0x100;
LABEL_41:
  if (!__p.__begin_)
    return (std::vector<int> *)v2;
  __p.__end_ = __p.__begin_;
  operator delete(__p.__begin_);
  return (std::vector<int> *)v2;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::size_type v6;
  int *v7;
  int *v8;
  std::vector<int>::value_type v9;
  std::vector<int>::size_type v10;
  int *v11;
  std::vector<int>::size_type v12;
  int32x4_t v13;
  int32x4_t *v14;
  uint64_t v15;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    if (__n >> 62)
      abort();
    v6 = __n;
    v7 = (int *)operator new(4 * __n);
    this->__begin_ = v7;
    v8 = &v7[v6];
    this->__end_cap_.__value_ = &v7[v6];
    v9 = *__x;
    v10 = (__n - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v11 = v7;
    if (v10 < 7)
      goto LABEL_13;
    v12 = v10 + 1;
    v11 = &v7[v12 & 0x7FFFFFFFFFFFFFF8];
    v13 = vdupq_n_s32(v9);
    v14 = (int32x4_t *)(v7 + 4);
    v15 = v12 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v14[-1] = v13;
      *v14 = v13;
      v14 += 2;
      v15 -= 8;
    }
    while (v15);
    if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_13:
      do
        *v11++ = v9;
      while (v11 != v8);
    }
    this->__end_ = v8;
  }
  return this;
}

_QWORD *std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      abort();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:sn180100]<unsigned char *,unsigned char *>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_22;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_22:
      abort();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_21;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v7[1] = &v9[a3 - v15];
  return result;
}

void webrtc::AudioEncoderMultiChannelOpusImpl::MakeAudioEncoder(webrtc::AudioEncoderMultiChannelOpusImpl *this@<X0>, const webrtc::AudioEncoderMultiChannelOpusConfig *a2@<X1>, uint64_t *a3@<X8>)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  std::string *v12;
  const webrtc::AudioEncoderMultiChannelOpusConfig *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (int)a2;
  if ((webrtc::AudioEncoderMultiChannelOpusConfig::IsOk(this) & 1) != 0)
  {
    v6 = operator new();
    *(_QWORD *)v6 = off_24C0AD9C8;
    *(_DWORD *)(v6 + 8) = 20;
    *(_QWORD *)(v6 + 16) = 1;
    *(_QWORD *)(v6 + 24) = 0x7D0000000000;
    *(_WORD *)(v6 + 32) = 0;
    *(_BYTE *)(v6 + 34) = 0;
    *(_DWORD *)(v6 + 36) = 48000;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 64) = -4294967287;
    *(_DWORD *)(v6 + 72) = -1;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 96) = 0;
    *(_QWORD *)(v6 + 80) = 0;
    *(_DWORD *)(v6 + 104) = v3;
    *(_OWORD *)(v6 + 112) = 0u;
    *(_OWORD *)(v6 + 128) = 0u;
    webrtc::AudioEncoderMultiChannelOpusImpl::RecreateEncoderInstance((webrtc::AudioEncoderMultiChannelOpusImpl *)v6, this);
    if ((v11 & 1) != 0)
    {
      v15 = 0;
      *a3 = v6;
      std::unique_ptr<webrtc::AudioEncoderMultiChannelOpusImpl>::reset[abi:sn180100](&v15, 0);
    }
    else
    {
      v12 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 147, "RecreateEncoderInstance(config)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v7, v8, v9, v10, v14);
      webrtc::AudioEncoderMultiChannelOpusImpl::RecreateEncoderInstance((webrtc::AudioEncoderMultiChannelOpusImpl *)v12, v13);
    }
  }
  else
  {
    *a3 = 0;
  }
}

void webrtc::AudioEncoderMultiChannelOpusImpl::RecreateEncoderInstance(webrtc::AudioEncoderMultiChannelOpusImpl *this, const webrtc::AudioEncoderMultiChannelOpusConfig *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int ***v10;
  void **v11;
  void *v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int **v41;
  int **v42;
  unsigned int v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int **v69;
  int **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int **v85;
  int **v86;
  int **v87;
  int **v88;
  int **v89;
  int **v90;
  int **v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::string *v132;

  if (webrtc::AudioEncoderMultiChannelOpusConfig::IsOk(a2))
  {
    v8 = *(_OWORD *)a2;
    *(_OWORD *)((char *)this + 24) = *((_OWORD *)a2 + 1);
    *(_OWORD *)((char *)this + 8) = v8;
    if ((webrtc::AudioEncoderMultiChannelOpusImpl *)((char *)this + 8) != a2)
    {
      std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>((_QWORD *)this + 5, *((char **)a2 + 4), *((char **)a2 + 5), (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 2);
      v9 = *((_QWORD *)a2 + 7);
      *((_DWORD *)this + 18) = *((_DWORD *)a2 + 16);
      *((_QWORD *)this + 8) = v9;
      std::vector<unsigned char>::__assign_with_size[abi:sn180100]<unsigned char *,unsigned char *>((_QWORD *)this + 10, *((char **)a2 + 9), *((char **)a2 + 10), *((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9));
    }
    v10 = (int ***)((char *)this + 136);
    v11 = (void **)*((_QWORD *)this + 17);
    if (v11)
    {
      v12 = *v11;
      if (!*v11)
        v12 = v11[1];
      free(v12);
      free(v11);
    }
    v13 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 15) = v13;
    v14 = *((_DWORD *)this + 2);
    v15 = v14 / 10;
    if (v14 % 10)
    {
      rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v4, v5, v6, v7, (v14 % 10));
    }
    else
    {
      v16 = 480 * v15 * *((_QWORD *)this + 2);
      if (v16 > (*((_QWORD *)this + 16) - v13) >> 1)
      {
        if ((v16 & 0x8000000000000000) != 0)
          goto LABEL_108;
        v17 = 960 * v15 * *((_QWORD *)this + 2);
        v18 = (char *)operator new(v17);
        *((_QWORD *)this + 14) = v18;
        *((_QWORD *)this + 15) = v18;
        *((_QWORD *)this + 16) = &v18[v17];
        if (v13)
          operator delete((void *)v13);
      }
      if (!WebRtcOpus_MultistreamEncoderCreate((_QWORD *)this + 17, *((_QWORD *)a2 + 1), *((_DWORD *)a2 + 4) != 0, *((_DWORD *)a2 + 15), *((_DWORD *)a2 + 16), *((_QWORD *)a2 + 9)))
      {
        v13 = *((unsigned int *)a2 + 5);
        v25 = *v10;
        if (*v10)
        {
          if (*v25)
          {
            if (!(unsigned __int16)opus_encoder_ctl(*v25, 4002, v19, v20, v21, v22, v23, v24, *((unsigned int *)a2 + 5)))goto LABEL_17;
          }
          else if (!(unsigned __int16)opus_multistream_encoder_ctl(v25[1], 4002, v19, v20, v21, v22, v23, v24, *((unsigned int *)a2 + 5)))
          {
LABEL_17:
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc");
            v33 = *v10;
            if (*((_BYTE *)a2 + 24))
            {
              if (!v33)
              {
LABEL_102:
                v85 = 0;
                goto LABEL_103;
              }
              if (*v33)
              {
                if (!(unsigned __int16)opus_encoder_ctl(*v33, 4012, v27, v28, v29, v30, v31, v32, 1))
                  goto LABEL_23;
              }
              else if (!(unsigned __int16)opus_multistream_encoder_ctl(v33[1], 4012, v27, v28, v29, v30, v31, v32, 1))
              {
LABEL_23:
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
                  goto LABEL_32;
LABEL_31:
                rtc::webrtc_logging_impl::Log("\r\t", v34, v35, v36, v37, v38, v39, v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc");
LABEL_32:
                v42 = *v10;
                v43 = *((_DWORD *)a2 + 7);
                if (*v10)
                {
                  if ((int)v43 < 8001)
                  {
                    v44 = 1101;
                    v45 = *v42;
                    if (!*v42)
                      goto LABEL_92;
LABEL_41:
                    if ((unsigned __int16)opus_encoder_ctl(v45, 4004, v35, v36, v37, v38, v39, v40, v44))
                    {
LABEL_93:
                      v91 = *v10;
                      v43 = *((_DWORD *)a2 + 7);
LABEL_99:
                      WebRtcOpus_SetMaxPlaybackRate(v91, v43, v35, v36, v37, v38, v39, v40);
                      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 206, "0 == WebRtcOpus_SetMaxPlaybackRate(inst_, config.max_playback_rate_hz)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v100, v101, v102, v103, 0);
LABEL_100:
                      v69 = 0;
                      goto LABEL_101;
                    }
LABEL_42:
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
                      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v46, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc");
                    v53 = *v10;
                    if (!*v10)
                      goto LABEL_100;
                    if (*v53)
                    {
                      if (!(unsigned __int16)opus_encoder_ctl(*v53, 4010, v47, v48, v49, v50, v51, v52, 5))
                        goto LABEL_47;
                    }
                    else if (!(unsigned __int16)opus_multistream_encoder_ctl(v53[1], 4010, v47, v48, v49, v50, v51, v52, 5))
                    {
LABEL_47:
                      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
                        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v54, v55, v56, v57, v58, v59, v60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc");
                      v61 = *v10;
                      if (*((_BYTE *)a2 + 26))
                      {
                        if (!v61)
                        {
LABEL_104:
                          v86 = 0;
                          goto LABEL_105;
                        }
                        if (*v61)
                        {
                          if (!(unsigned __int16)opus_encoder_ctl(*v61, 4016, v55, v56, v57, v58, v59, v60, 1))
                            goto LABEL_53;
                        }
                        else if (!(unsigned __int16)opus_multistream_encoder_ctl(v61[1], 4016, v55, v56, v57, v58, v59, v60, 1))
                        {
LABEL_53:
                          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
                            goto LABEL_62;
LABEL_61:
                          rtc::webrtc_logging_impl::Log("\r\t", v62, v63, v64, v65, v66, v67, v68, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc");
LABEL_62:
                          v70 = *v10;
                          if (*((_BYTE *)a2 + 25))
                          {
                            if (!v70)
                            {
LABEL_106:
                              v87 = 0;
                              goto LABEL_107;
                            }
                            if (*v70)
                            {
                              if (!(unsigned __int16)opus_encoder_ctl(*v70, 4006, v63, v64, v65, v66, v67, v68, 0))
                                goto LABEL_66;
                            }
                            else if (!(unsigned __int16)opus_multistream_encoder_ctl(v70[1], 4006, v63, v64, v65, v66, v67, v68, 0))
                            {
LABEL_66:
                              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
                                goto LABEL_73;
LABEL_72:
                              rtc::webrtc_logging_impl::Log("\r\t", v71, v72, v73, v74, v75, v76, v77, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc");
LABEL_73:
                              *((_QWORD *)this + 19) = *((_QWORD *)this + 2);
                              *((_DWORD *)this + 40) = *((_DWORD *)this + 2);
                              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
                                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v78, v79, v80, v81, v82, v83, v84, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc");
                              return;
                            }
                            v87 = *v10;
LABEL_107:
                            WebRtcOpus_EnableCbr(v87, v62, v63, v64, v65, v66, v67, v68);
                            rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 225, "0 == WebRtcOpus_EnableCbr(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v116, v117, v118, v119, 0);
LABEL_108:
                            abort();
                          }
                          if (v70)
                          {
                            if (*v70)
                            {
                              if (!(unsigned __int16)opus_encoder_ctl(*v70, 4006, v63, v64, v65, v66, v67, v68, 1))
                                goto LABEL_71;
                            }
                            else if (!(unsigned __int16)opus_multistream_encoder_ctl(v70[1], 4006, v63, v64, v65, v66, v67, v68, 1))
                            {
LABEL_71:
                              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
                                goto LABEL_73;
                              goto LABEL_72;
                            }
                            v90 = *v10;
LABEL_114:
                            WebRtcOpus_DisableCbr(v90, v62, v63, v64, v65, v66, v67, v68);
                            v132 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 228, "0 == WebRtcOpus_DisableCbr(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v128, v129, v130, v131, 0);
                            webrtc::AudioEncoderMultiChannelOpusImpl::~AudioEncoderMultiChannelOpusImpl((webrtc::AudioEncoderMultiChannelOpusImpl *)v132);
                            return;
                          }
LABEL_113:
                          v90 = 0;
                          goto LABEL_114;
                        }
                        v86 = *v10;
LABEL_105:
                        WebRtcOpus_EnableDtx(v86, v54, v55, v56, v57, v58, v59, v60);
                        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 217, "0 == WebRtcOpus_EnableDtx(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v112, v113, v114, v115, 0);
                        goto LABEL_106;
                      }
                      if (v61)
                      {
                        if (*v61)
                        {
                          if (!(unsigned __int16)opus_encoder_ctl(*v61, 4016, v55, v56, v57, v58, v59, v60, 0))
                            goto LABEL_60;
                        }
                        else if (!(unsigned __int16)opus_multistream_encoder_ctl(v61[1], 4016, v55, v56, v57, v58, v59, v60, 0))
                        {
LABEL_60:
                          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
                            goto LABEL_62;
                          goto LABEL_61;
                        }
                        v89 = *v10;
LABEL_112:
                        WebRtcOpus_DisableDtx(v89, v54, v55, v56, v57, v58, v59, v60);
                        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 220, "0 == WebRtcOpus_DisableDtx(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v124, v125, v126, v127, 0);
                        goto LABEL_113;
                      }
LABEL_111:
                      v89 = 0;
                      goto LABEL_112;
                    }
                    v69 = *v10;
LABEL_101:
                    WebRtcOpus_SetComplexity(v69, 5, v47, v48, v49, v50, v51, v52);
                    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 212, "0 == WebRtcOpus_SetComplexity(inst_, AudioEncoderOpusConfig().complexity)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v104, v105, v106, v107, 0);
                    goto LABEL_102;
                  }
                  if (v43 >= 0x2EE1)
                  {
                    if (v43 < 0x3E81)
                    {
                      v44 = 1103;
                      v45 = *v42;
                      if (!*v42)
                        goto LABEL_92;
                      goto LABEL_41;
                    }
                    if (v43 < 0x5DC1)
                      v44 = 1104;
                    else
                      v44 = 1105;
                    v45 = *v42;
                    if (*v42)
                      goto LABEL_41;
                  }
                  else
                  {
                    v44 = 1102;
                    v45 = *v42;
                    if (*v42)
                      goto LABEL_41;
                  }
LABEL_92:
                  if ((unsigned __int16)opus_multistream_encoder_ctl(v42[1], 4004, v35, v36, v37, v38, v39, v40, v44))
                    goto LABEL_93;
                  goto LABEL_42;
                }
LABEL_98:
                v91 = 0;
                goto LABEL_99;
              }
              v85 = *v10;
LABEL_103:
              WebRtcOpus_EnableFec(v85, v26, v27, v28, v29, v30, v31, v32);
              rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 199, "0 == WebRtcOpus_EnableFec(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v108, v109, v110, v111, 0);
              goto LABEL_104;
            }
            if (v33)
            {
              if (*v33)
              {
                if (!(unsigned __int16)opus_encoder_ctl(*v33, 4012, v27, v28, v29, v30, v31, v32, 0))
                  goto LABEL_30;
              }
              else if (!(unsigned __int16)opus_multistream_encoder_ctl(v33[1], 4012, v27, v28, v29, v30, v31, v32, 0))
              {
LABEL_30:
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
                  goto LABEL_32;
                goto LABEL_31;
              }
              v88 = *v10;
            }
            else
            {
              v88 = 0;
            }
            WebRtcOpus_DisableFec(v88, v26, v27, v28, v29, v30, v31, v32);
            rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 202, "0 == WebRtcOpus_DisableFec(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v120, v121, v122, v123, 0);
            goto LABEL_111;
          }
          v41 = *v10;
LABEL_97:
          WebRtcOpus_SetBitRate(v41, v13, v19, v20, v21, v22, v23, v24);
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 196, "0 == WebRtcOpus_SetBitRate(inst_, bitrate)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v96, v97, v98, v99, 0);
          goto LABEL_98;
        }
LABEL_96:
        v41 = 0;
        goto LABEL_97;
      }
    }
    WebRtcOpus_MultistreamEncoderCreate((_QWORD *)this + 17, *((_QWORD *)a2 + 1), *((_DWORD *)a2 + 4) != 0, *((_DWORD *)a2 + 15), *((_DWORD *)a2 + 16), *((_QWORD *)a2 + 9));
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 194, "0 == WebRtcOpus_MultistreamEncoderCreate( &inst_, config.num_channels, config.application == AudioEncoderMultiChannelOpusConfig::ApplicationMode::kVoip ? 0 : 1, config.num_streams, config.coupled_streams, config.channel_mapping.data())", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v92, v93, v94, v95, 0);
    goto LABEL_96;
  }
}

void webrtc::AudioEncoderMultiChannelOpusImpl::~AudioEncoderMultiChannelOpusImpl(webrtc::AudioEncoderMultiChannelOpusImpl *this)
{
  void **v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;

  v1 = (void **)*((_QWORD *)this + 17);
  if (v1)
  {
    v3 = *v1;
    if (!*v1)
      v3 = v1[1];
    free(v3);
    free(v1);
    v4 = (void *)*((_QWORD *)this + 14);
    if (v4)
    {
      *((_QWORD *)this + 15) = v4;
      operator delete(v4);
    }
    v5 = (void *)*((_QWORD *)this + 10);
    if (v5)
    {
      *((_QWORD *)this + 11) = v5;
      operator delete(v5);
    }
    v6 = (void *)*((_QWORD *)this + 5);
    if (v6)
    {
      *((_QWORD *)this + 6) = v6;
      operator delete(v6);
    }
  }
  else
  {
    WebRtcOpus_EncoderFree(0);
    v11 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 151, "0 == WebRtcOpus_EncoderFree(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v7, v8, v9, v10, 0);
    webrtc::AudioEncoderMultiChannelOpusImpl::~AudioEncoderMultiChannelOpusImpl((webrtc::AudioEncoderMultiChannelOpusImpl *)v11);
  }
}

{
  void **v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;

  v1 = (void **)*((_QWORD *)this + 17);
  if (v1)
  {
    v3 = *v1;
    if (!*v1)
      v3 = v1[1];
    free(v3);
    free(v1);
    v4 = (void *)*((_QWORD *)this + 14);
    if (v4)
    {
      *((_QWORD *)this + 15) = v4;
      operator delete(v4);
    }
    v5 = (void *)*((_QWORD *)this + 10);
    if (v5)
    {
      *((_QWORD *)this + 11) = v5;
      operator delete(v5);
    }
    v6 = (void *)*((_QWORD *)this + 5);
    if (v6)
    {
      *((_QWORD *)this + 6) = v6;
      operator delete(v6);
    }
    JUMPOUT(0x20BD0ADECLL);
  }
  WebRtcOpus_EncoderFree(0);
  v11 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 151, "0 == WebRtcOpus_EncoderFree(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v7, v8, v9, v10, 0);
  webrtc::AudioEncoderMultiChannelOpusImpl::Num10msFramesPerPacket((webrtc::AudioEncoderMultiChannelOpusImpl *)v11);
}

void webrtc::AudioEncoderMultiChannelOpusImpl::Num10msFramesPerPacket(webrtc::AudioEncoderMultiChannelOpusImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v8;

  if ((int)this % 10)
  {
    v8 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, ((int)this % 10));
    webrtc::AudioEncoderMultiChannelOpusImpl::Reset((webrtc::AudioEncoderMultiChannelOpusImpl *)v8);
  }
}

void webrtc::AudioEncoderMultiChannelOpusImpl::Reset(webrtc::AudioEncoderMultiChannelOpusImpl *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  std::string *v6;
  uint64_t v7;
  uint64_t vars0;

  webrtc::AudioEncoderMultiChannelOpusImpl::RecreateEncoderInstance(this, (webrtc::AudioEncoderMultiChannelOpusImpl *)((char *)this + 8));
  if ((v5 & 1) == 0)
  {
    v6 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 165, "RecreateEncoderInstance(config_)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v1, v2, v3, v4, vars0);
    webrtc::AudioEncoderMultiChannelOpusImpl::GetFrameLengthRange((uint64_t)v6, v7);
  }
}

uint64_t webrtc::AudioEncoderMultiChannelOpusImpl::GetFrameLengthRange@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = 1000 * *(int *)(this + 8);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = 1;
  return this;
}

uint64_t rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>()
{
    return 0;
  else
    return rtc::LogMessage::streams_empty_ & 1;
}

uint64_t webrtc::AudioEncoderMultiChannelOpusImpl::NumChannels(webrtc::AudioEncoderMultiChannelOpusImpl *this)
{
  return *((_QWORD *)this + 2);
}

void webrtc::AudioEncoderMultiChannelOpusImpl::SdpToConfig(webrtc::AudioEncoderMultiChannelOpusImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v24;
  std::string *p_p;
  std::string::size_type size;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  int v31;
  int v32;
  int v33;
  size_t v34;
  std::string *p_src;
  int64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  size_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  size_t v60;
  char *v61;
  size_t v62;
  const void *v63;
  char *v64;
  __int128 v65;
  void *v66;
  int64_t v67;
  char *v68;
  char *v69;
  void *v70;
  size_t v71;
  char *v72;
  char *v73;
  std::string __src;
  char v75;
  std::string __p;
  char v77;
  __int128 v78;
  __int128 v79;
  void *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  void *__dst;
  char *v86;
  char *v87;

  if (*((char *)this + 23) < 0)
  {
    v5 = *((_QWORD *)this + 1);
    if (v5 < 0)
      goto LABEL_177;
    v6 = *(unsigned __int8 **)this;
    if (v5 && v6 == 0)
      goto LABEL_177;
  }
  else
  {
    v5 = *((unsigned __int8 *)this + 23);
    v6 = (unsigned __int8 *)this;
  }
  if (v5 != 9)
    goto LABEL_50;
  v8 = *v6;
  if (v8 == 109)
    goto LABEL_13;
  if ((v8 - 65) < 0x1A)
    LOBYTE(v8) = v8 + 32;
  v9 = v8 - 109;
  if (!v9)
  {
LABEL_13:
    v10 = v6[1];
    if (v10 == 117)
      goto LABEL_17;
    if ((v10 - 65) < 0x1A)
      LOBYTE(v10) = v10 + 32;
    v9 = v10 - 117;
    if (!v9)
    {
LABEL_17:
      v11 = v6[2];
      if (v11 == 108)
        goto LABEL_21;
      if ((v11 - 65) < 0x1A)
        LOBYTE(v11) = v11 + 32;
      v9 = v11 - 108;
      if (!v9)
      {
LABEL_21:
        v12 = v6[3];
        if (v12 == 116)
          goto LABEL_25;
        if ((v12 - 65) < 0x1A)
          LOBYTE(v12) = v12 + 32;
        v9 = v12 - 116;
        if (!v9)
        {
LABEL_25:
          v13 = v6[4];
          if (v13 == 105)
            goto LABEL_29;
          if ((v13 - 65) < 0x1A)
            LOBYTE(v13) = v13 + 32;
          v9 = v13 - 105;
          if (!v9)
          {
LABEL_29:
            v14 = v6[5];
            if (v14 == 111)
              goto LABEL_33;
            if ((v14 - 65) < 0x1A)
              LOBYTE(v14) = v14 + 32;
            v9 = v14 - 111;
            if (!v9)
            {
LABEL_33:
              v15 = v6[6];
              if (v15 == 112)
                goto LABEL_37;
              if ((v15 - 65) < 0x1A)
                LOBYTE(v15) = v15 + 32;
              v9 = v15 - 112;
              if (!v9)
              {
LABEL_37:
                v16 = v6[7];
                if (v16 == 117)
                  goto LABEL_41;
                if ((v16 - 65) < 0x1A)
                  LOBYTE(v16) = v16 + 32;
                v9 = v16 - 117;
                if (!v9)
                {
LABEL_41:
                  v17 = v6[8];
                  if (v17 == 115)
                    goto LABEL_45;
                  if ((v17 - 65) < 0x1A)
                    LOBYTE(v17) = v17 + 32;
                  v9 = v17 - 115;
                  if (v17 == 115)
LABEL_45:
                    v9 = 0;
                }
              }
            }
          }
        }
      }
    }
  }
  if (v9 || *((_DWORD *)this + 6) != 48000)
  {
LABEL_50:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 96) = 0;
    return;
  }
  *(_QWORD *)&v79 = 0x7D0000000000;
  WORD4(v79) = 0;
  BYTE10(v79) = 0;
  v81 = 0;
  v82 = 0;
  v80 = 0;
  v83 = -4294967287;
  v84 = -1;
  v86 = 0;
  v87 = 0;
  __dst = 0;
  *((_QWORD *)&v78 + 1) = *((_QWORD *)this + 4);
  webrtc::GetFormatParameter<int>((uint64_t)this, "ptime", 5uLL);
  if ((v19 & 0xFF00000000) == 0)
  {
LABEL_58:
    v20 = 20;
    goto LABEL_60;
  }
  if ((int)v19 >= 11)
  {
    if (v19 >= 0x15)
    {
      if (v19 <= 0x28)
        v20 = 40;
      else
        v20 = 60;
      goto LABEL_60;
    }
    goto LABEL_58;
  }
  v20 = 10;
LABEL_60:
  LODWORD(v78) = v20;
  webrtc::GetFormatParameter<int>((uint64_t)this, "maxplaybackrate", 0xFuLL);
  if (v21 >= 0xBB80)
    v22 = 48000;
  else
    v22 = v21;
  if ((int)v21 <= 7999 || (v21 & 0xFF00000000) == 0)
    v24 = 48000;
  else
    v24 = v22;
  HIDWORD(v79) = v24;
  webrtc::GetFormatParameter("useinbandfec", 0xCuLL, (uint64_t)this, &__p);
  if (!v77)
  {
    BYTE8(v79) = 0;
    goto LABEL_81;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_177;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_)
    {
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_177;
    }
  }
  else
  {
    p_p = &__p;
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (size == 1)
  {
    BYTE8(v79) = p_p->__r_.__value_.__s.__data_[0] == 49;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_81;
  }
  else
  {
    BYTE8(v79) = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_81;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_81:
  webrtc::GetFormatParameter("usedtx", 6uLL, (uint64_t)this, &__p);
  if (!v77)
  {
    BYTE10(v79) = 0;
    goto LABEL_93;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v28 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_177;
    v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_)
    {
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_177;
    }
  }
  else
  {
    v27 = &__p;
    v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v28 == 1)
  {
    BYTE10(v79) = v27->__r_.__value_.__s.__data_[0] == 49;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_93;
  }
  else
  {
    BYTE10(v79) = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_93;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_93:
  webrtc::GetFormatParameter("cbr", 3uLL, (uint64_t)this, &__p);
  if (!v77)
  {
    BYTE9(v79) = 0;
    goto LABEL_105;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v30 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_177;
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_)
    {
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_177;
    }
  }
  else
  {
    v29 = &__p;
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v30 == 1)
  {
    BYTE9(v79) = v29->__r_.__value_.__s.__data_[0] == 49;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_105;
  }
  else
  {
    BYTE9(v79) = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_105;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_105:
  v31 = HIDWORD(v79);
  v32 = DWORD2(v78);
  webrtc::GetFormatParameter("maxaveragebitrate", 0x11uLL, (uint64_t)this, &__src);
  if (v31 <= 8000)
  {
    v33 = 12000 * v32;
    if (v75)
      goto LABEL_107;
LABEL_113:
    DWORD1(v79) = v33;
    goto LABEL_136;
  }
  if (v31 > 0x3E80)
  {
    v33 = 32000 * v32;
    if (!v75)
      goto LABEL_113;
  }
  else
  {
    v33 = 20000 * v32;
    if (!v75)
      goto LABEL_113;
  }
LABEL_107:
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    v34 = __src.__r_.__value_.__l.__size_;
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_177;
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
    if (__src.__r_.__value_.__l.__size_)
    {
      if (!__src.__r_.__value_.__r.__words[0])
        goto LABEL_177;
    }
  }
  else
  {
    v34 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    p_src = &__src;
  }
  v36 = rtc::string_to_number_internal::ParseSigned((void **)&p_src->__r_.__value_.__l.__data_, v34, 10);
  if (v37 && v36 >= (uint64_t)0xFFFFFFFF80000000 && v36 <= 0x7FFFFFFF)
  {
    if ((int)v36 <= 6000)
      v38 = 6000;
    else
      v38 = v36;
    if (v38 >= 510000)
      v33 = 510000;
    else
      v33 = v38;
    if (v33 == (_DWORD)v36)
    {
      v33 = v36;
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v46, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc");
    }
    goto LABEL_133;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    if (v75)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc");
      goto LABEL_133;
    }
LABEL_177:
    __break(1u);
    goto LABEL_178;
  }
LABEL_133:
  DWORD1(v79) = v33;
  if (v75 && SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
LABEL_136:
  LODWORD(v79) = *((_QWORD *)&v78 + 1) != 1;
  v81 = v80;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
  webrtc::GetFormatParameter<int>((uint64_t)this, "num_streams", 0xBuLL);
  if ((v53 & 0xFF00000000) != 0)
  {
    HIDWORD(v83) = v53;
    webrtc::GetFormatParameter<int>((uint64_t)this, "coupled_streams", 0xFuLL);
    if ((v54 & 0xFF00000000) != 0)
    {
      v84 = v54;
      webrtc::GetFormatParameter<std::vector<unsigned char>>((uint64_t)this, "channel_mapping", 0xFuLL, (uint64_t)&__p);
      if (!v77)
        goto LABEL_169;
      v55 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v56 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
      v57 = (unint64_t)v87;
      v58 = (char *)__dst;
      if (v87 - (_BYTE *)__dst >= __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0])
      {
        v62 = v86 - (_BYTE *)__dst;
        if (v86 - (_BYTE *)__dst < v56)
        {
          v63 = (const void *)(__p.__r_.__value_.__r.__words[0] + v62);
          if (v86 != __dst)
          {
            memmove(__dst, __p.__r_.__value_.__l.__data_, v62);
            v58 = v86;
          }
          if (*((const void **)&v55 + 1) != v63)
            memmove(v58, v63, *((_QWORD *)&v55 + 1) - (_QWORD)v63);
          v64 = &v58[*((_QWORD *)&v55 + 1) - (_QWORD)v63];
LABEL_161:
          v86 = v64;
          if ((webrtc::AudioEncoderMultiChannelOpusConfig::IsOk((webrtc::AudioEncoderMultiChannelOpusConfig *)&v78) & 1) != 0)
          {
            v65 = v79;
            *(_OWORD *)a2 = v78;
            *(_OWORD *)(a2 + 16) = v65;
            *(_QWORD *)(a2 + 40) = 0;
            *(_QWORD *)(a2 + 48) = 0;
            *(_QWORD *)(a2 + 32) = 0;
            v66 = v80;
            v67 = v81 - (_BYTE *)v80;
            if (v81 != v80)
            {
              if (v67 < 0)
                goto LABEL_178;
              v68 = (char *)operator new(v81 - (_BYTE *)v80);
              *(_QWORD *)(a2 + 32) = v68;
              v69 = &v68[4 * (v67 >> 2)];
              *(_QWORD *)(a2 + 48) = v69;
              memcpy(v68, v66, v67);
              *(_QWORD *)(a2 + 40) = v69;
            }
            *(_QWORD *)(a2 + 56) = v83;
            *(_DWORD *)(a2 + 64) = v84;
            *(_QWORD *)(a2 + 80) = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 72) = 0;
            v70 = __dst;
            v71 = v86 - (_BYTE *)__dst;
            if (v86 == __dst)
            {
LABEL_168:
              *(_BYTE *)(a2 + 96) = 1;
LABEL_170:
              if (v77 && __p.__r_.__value_.__r.__words[0])
              {
                __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_173;
            }
            if ((v71 & 0x8000000000000000) == 0)
            {
              v72 = (char *)operator new(v86 - (_BYTE *)__dst);
              *(_QWORD *)(a2 + 72) = v72;
              v73 = &v72[v71];
              *(_QWORD *)(a2 + 88) = &v72[v71];
              memcpy(v72, v70, v71);
              *(_QWORD *)(a2 + 80) = v73;
              goto LABEL_168;
            }
LABEL_178:
            abort();
          }
LABEL_169:
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 96) = 0;
          goto LABEL_170;
        }
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
          memmove(__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]);
      }
      else
      {
        if (__dst)
        {
          v86 = (char *)__dst;
          operator delete(__dst);
          v57 = 0;
          __dst = 0;
          v86 = 0;
          v87 = 0;
        }
        if ((v56 & 0x8000000000000000) != 0)
          goto LABEL_178;
        v59 = 2 * v57;
        if (2 * v57 <= v56)
          v59 = v56;
        v60 = v57 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v59;
        if ((v60 & 0x8000000000000000) != 0)
          goto LABEL_178;
        v61 = (char *)operator new(v60);
        v58 = v61;
        __dst = v61;
        v86 = v61;
        v87 = &v61[v60];
        if (*((_QWORD *)&v55 + 1) != (_QWORD)v55)
          memcpy(v61, (const void *)v55, v56);
      }
      v64 = &v58[v56];
      goto LABEL_161;
    }
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 96) = 0;
LABEL_173:
  if (__dst)
  {
    v86 = (char *)__dst;
    operator delete(__dst);
  }
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
}

uint64_t webrtc::AudioEncoderMultiChannelOpusImpl::SampleRateHz(webrtc::AudioEncoderMultiChannelOpusImpl *this)
{
  return 48000;
}

uint64_t webrtc::AudioEncoderMultiChannelOpusImpl::Num10MsFramesInNextPacket(webrtc::AudioEncoderMultiChannelOpusImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  std::string *v10;

  v8 = *((_DWORD *)this + 2);
  if (!(v8 % 10))
    return v8 / 10;
  v10 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, (v8 % 10));
  return webrtc::AudioEncoderMultiChannelOpusImpl::Max10MsFramesInAPacket((webrtc::AudioEncoderMultiChannelOpusImpl *)v10);
}

uint64_t webrtc::AudioEncoderMultiChannelOpusImpl::Max10MsFramesInAPacket(webrtc::AudioEncoderMultiChannelOpusImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  std::string *v10;

  v8 = *((_DWORD *)this + 2);
  if (!(v8 % 10))
    return v8 / 10;
  v10 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, (v8 % 10));
  return webrtc::AudioEncoderMultiChannelOpusImpl::GetTargetBitrate((webrtc::AudioEncoderMultiChannelOpusImpl *)v10);
}

uint64_t webrtc::AudioEncoderMultiChannelOpusImpl::GetTargetBitrate(webrtc::AudioEncoderMultiChannelOpusImpl *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t webrtc::AudioEncoderMultiChannelOpusImpl::EncodeImpl@<X0>(uint64_t a1@<X0>, int a2@<W1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;

  v13 = *(char **)(a1 + 112);
  v12 = *(char **)(a1 + 120);
  v11 = a1 + 112;
  if (v13 == v12)
    *(_DWORD *)(a1 + 144) = a2;
  std::vector<short>::__insert_with_size[abi:sn180100]<short const*,short const*>(v11, v12, a3, &a3[2 * a4], (2 * a4) >> 1);
  result = *(unsigned int *)(a1 + 8);
  v21 = (int)result / 10;
  v22 = ((int)result % 10);
  if ((_DWORD)v22)
    goto LABEL_27;
  v23 = *(_QWORD *)(a1 + 112);
  v22 = *(_QWORD *)(a1 + 120);
  v6 = (v22 - v23) >> 1;
  v24 = 480 * v21 * *(_QWORD *)(a1 + 16);
  if (v6 < v24)
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_WORD *)(a6 + 16) = 256;
    *(_QWORD *)(a6 + 20) = 0;
    *(_QWORD *)(a6 + 36) = 0;
    *(_QWORD *)(a6 + 28) = 0;
    *(_DWORD *)(a6 + 44) = 0;
    return result;
  }
  if (v6 != v24)
    goto LABEL_28;
  v25 = 20 * v21 * (uint64_t)(*(_DWORD *)(a1 + 28) / 8000 + 1);
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 24) = 0;
  v27 = *(_QWORD *)a5;
  v26 = *(_QWORD *)(a5 + 8);
  v28 = v25 + *(_QWORD *)a5;
  if (v26 < v28)
  {
    if (v26 + (v26 >> 1) <= v28)
      v29 = v25 + *(_QWORD *)a5;
    else
      v29 = v26 + (v26 >> 1);
    v30 = (void *)operator new[]();
    v31 = v30;
    v32 = *(_QWORD *)(a5 + 16);
    if (v32)
    {
      memcpy(v30, *(const void **)(a5 + 16), *(_QWORD *)a5);
      *(_QWORD *)(a5 + 16) = v31;
      MEMORY[0x20BD0ADD4](v32, 0x1000C8077774924);
    }
    else
    {
      *(_QWORD *)(a5 + 16) = v30;
    }
    *(_QWORD *)(a5 + 8) = v29;
    v23 = *(_QWORD *)(a1 + 112);
    v22 = *(_QWORD *)(a1 + 120);
    v6 = (v22 - v23) >> 1;
  }
  *(_QWORD *)a5 = v28;
  if (v25)
    v16 = (unsigned __int8 *)(*(_QWORD *)(a5 + 16) + v27);
  else
    v16 = 0;
  if (v22 == v23)
  {
    __break(1u);
LABEL_27:
    result = (uint64_t)rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, (uint64_t)v16, v17, v18, v19, v22);
LABEL_28:
    webrtc::AudioEncoderMultiChannelOpusImpl::Num10msFramesPerPacket((webrtc::AudioEncoderMultiChannelOpusImpl *)result, v23, v14, v15, (uint64_t)v16, v17, v18, v19);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 336, "input_buffer_.size() == Num10msFramesPerPacket() * SamplesPer10msFrame()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v42, v43, v44, v45, v6);
    goto LABEL_29;
  }
  v33 = *(_QWORD *)(a1 + 16);
  v34 = v6 % v33;
  if (v6 % v33)
  {
LABEL_29:
    result = (uint64_t)rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, (uint64_t)v16, v17, v18, v19, v34);
LABEL_30:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 347, "status >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v36, v37, v38, v39, result);
    goto LABEL_31;
  }
  if (v25 >= 0x7FFF)
    v35 = 0x7FFFLL;
  else
    v35 = v25;
  result = WebRtcOpus_Encode(*(_QWORD *)(a1 + 136), v23, v6 / v33, v35, v16);
  if ((result & 0x80000000) != 0)
    goto LABEL_30;
  v40 = result;
  if (v25 >= result)
  {
    *(_QWORD *)a5 = v27 + result;
    *(_QWORD *)a6 = result;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 160);
    v41 = *(_DWORD *)(a1 + 104);
    *(_DWORD *)(a6 + 8) = *(_DWORD *)(a1 + 144);
    *(_DWORD *)(a6 + 12) = v41;
    *(_WORD *)(a6 + 16) = 257;
    *(_DWORD *)(a6 + 20) = 0;
    return result;
  }
LABEL_31:
  v46 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/buffer.h", 328, "written_elements <= max_elements", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v36, v37, v38, v39, v40);
  return std::unique_ptr<webrtc::AudioEncoderMultiChannelOpusImpl>::reset[abi:sn180100](v46);
}

uint64_t *std::unique_ptr<webrtc::AudioEncoderMultiChannelOpusImpl>::reset[abi:sn180100](uint64_t *result, uint64_t a2)
{
  _QWORD *v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  _DWORD *v13;

  v2 = (_QWORD *)*result;
  *result = a2;
  if (v2)
  {
    v3 = (void **)v2[17];
    if (v3)
    {
      v4 = *v3;
      if (!*v3)
        v4 = v3[1];
      free(v4);
      free(v3);
      v5 = (void *)v2[14];
      if (v5)
      {
        v2[15] = v5;
        operator delete(v5);
      }
      v6 = (void *)v2[10];
      if (v6)
      {
        v2[11] = v6;
        operator delete(v6);
      }
      v7 = (void *)v2[5];
      if (v7)
      {
        v2[6] = v7;
        operator delete(v7);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
    WebRtcOpus_EncoderFree(0);
    v12 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_multi_channel_opus_impl.cc", 151, "0 == WebRtcOpus_EncoderFree(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v8, v9, v10, v11, 0);
    return std::back_insert_iterator<std::vector<int>>::operator=[abi:sn180100]((uint64_t *)v12, v13);
  }
  return result;
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:sn180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    if (v6)
    {
      *(_DWORD *)v6 = *a2;
      v8 = v6 + 4;
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  v9 = *(char **)v4;
  v10 = (uint64_t)&v6[-*(_QWORD *)v4];
  v11 = v10 >> 2;
  v12 = (v10 >> 2) + 1;
  if (v12 >> 62)
    goto LABEL_22;
  v13 = v5 - (_QWORD)v9;
  if (v13 >> 1 > v12)
    v12 = v13 >> 1;
  v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL;
  v15 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v14)
    v15 = v12;
  if (!v15)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    abort();
  }
  if (v15 >> 62)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v16 = 4 * v15;
  v17 = operator new(4 * v15);
  v18 = &v17[4 * v11];
  *v18 = *a2;
  v8 = v18 + 1;
  if (v6 != v9)
  {
    v19 = v6 - v9 - 4;
    if (v19 < 0x2C)
      goto LABEL_26;
    if ((unint64_t)(&v6[-v10] - v17) < 0x20)
      goto LABEL_26;
    v20 = (v19 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v7 = &v6[-v21];
    v18 = (_DWORD *)((char *)v18 - v21);
    v22 = &v17[4 * v11 - 16];
    v23 = v6 - 16;
    v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_26:
      do
      {
        v26 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--v18 = v26;
      }
      while (v7 != v9);
    }
  }
  *(_QWORD *)v4 = v18;
  *(_QWORD *)(v4 + 8) = v8;
  *(_QWORD *)(v4 + 16) = &v17[v16];
  if (v9)
    operator delete(v9);
LABEL_20:
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

void webrtc::AudioEncoderOpusImpl::AppendSupportedEncoders(uint64_t a1)
{
  std::string::size_type size;
  int v3;
  int v4;
  uint64_t *v5;
  unint64_t v6;
  __int128 v7;
  _QWORD *v8;
  unint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  char *v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::string v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22[2];
  std::string v23;
  void *v24[2];
  void **v25;
  void *v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  std::pair<std::string const,std::string>::pair[abi:sn180100]<char const(&)[9],char const(&)[3],0>((uint64_t)&v23, "minptime", "10");
  std::pair<std::string const,std::string>::pair[abi:sn180100]<char const(&)[9],char const(&)[3],0>((uint64_t)&v26, "useinbandfec", "1");
  v17 = 0;
  v18 = 0;
  v16 = &v17;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v16, &v17, (uint64_t)&v23, (uint64_t)&v23);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v16, &v17, (uint64_t)&v26, (uint64_t)&v26);
  *((_BYTE *)&v19.__r_.__value_.__s + 23) = 4;
  if (&v19 <= (std::string *)"opus" && (char *)v19.__r_.__value_.__r.__words + 4 > "opus")
    goto LABEL_42;
  strcpy((char *)&v19, "opus");
  LODWORD(v20) = 48000;
  *((_QWORD *)&v20 + 1) = 2;
  v21 = v16;
  v22[0] = v17;
  v22[1] = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 16) = v22;
    v16 = &v17;
    v17 = 0;
    v18 = 0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, 0);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v21 = v22;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, v17);
  if (SHIBYTE(v29) < 0)
LABEL_5:
    operator delete(*((void **)&v28 + 1));
LABEL_6:
  if (SBYTE7(v28) < 0)
  {
    operator delete(v26);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v24[0]);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    webrtc::AudioEncoderOpusImpl::SdpToConfig((webrtc::AudioEncoderOpusImpl *)&v19, (uint64_t)&v23);
    if (!BYTE8(v29))
      goto LABEL_42;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v23.__r_.__value_.__l.__data_);
  webrtc::AudioEncoderOpusImpl::SdpToConfig((webrtc::AudioEncoderOpusImpl *)&v19, (uint64_t)&v23);
  if (!BYTE8(v29))
    goto LABEL_42;
LABEL_16:
  if (!LOBYTE(v24[0]))
    goto LABEL_42;
  size = v23.__r_.__value_.__l.__size_;
  v3 = HIDWORD(v23.__r_.__value_.__r.__words[0]);
  v4 = HIDWORD(v23.__r_.__value_.__r.__words[2]);
  if (v27)
    operator delete(v27);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v23, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  else
    v23 = v19;
  *(_OWORD *)v24 = v20;
  v26 = 0;
  v27 = 0;
  v25 = &v26;
  v5 = v21;
  if (v21 != v22)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)&v25, (uint64_t *)&v26, (uint64_t)(v5 + 4), (uint64_t)(v5 + 4));
      v11 = (uint64_t *)v5[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (uint64_t *)v5[2];
          v13 = *v12 == (_QWORD)v5;
          v5 = v12;
        }
        while (!v13);
      }
      v5 = v12;
    }
    while (v12 != v22);
  }
  LODWORD(v28) = v3;
  *((_QWORD *)&v28 + 1) = size;
  LODWORD(v29) = v4;
  *(_QWORD *)((char *)&v29 + 4) = 0x7C83000001770;
  WORD6(v29) = 256;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >= *(_QWORD *)(a1 + 16))
  {
    v14 = std::vector<webrtc::AudioCodecSpec>::__push_back_slow_path<webrtc::AudioCodecSpec>((void **)a1, (uint64_t)&v23);
    goto LABEL_37;
  }
  if (!v6)
  {
LABEL_42:
    __break(1u);
    return;
  }
  v7 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
  *(_QWORD *)(v6 + 16) = *((_QWORD *)&v23.__r_.__value_.__l + 2);
  *(_OWORD *)v6 = v7;
  memset(&v23, 0, sizeof(v23));
  *(_OWORD *)(v6 + 24) = *(_OWORD *)v24;
  *(_QWORD *)(v6 + 40) = v25;
  v8 = v26;
  *(_QWORD *)(v6 + 48) = v26;
  v9 = v6 + 48;
  v10 = v27;
  *(_QWORD *)(v6 + 56) = v27;
  if (v10)
  {
    v8[2] = v9;
    v25 = &v26;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    *(_QWORD *)(v6 + 40) = v9;
  }
  v15 = v29;
  *(_OWORD *)(v6 + 64) = v28;
  *(_OWORD *)(v6 + 80) = v15;
  v14 = (char *)(v6 + 96);
LABEL_37:
  *(_QWORD *)(a1 + 8) = v14;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v25, (uint64_t)v26);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v21, v22[0]);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_41:
    operator delete(v19.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v21, v22[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_41;
}

void webrtc::AudioEncoderOpusImpl::SdpToConfig(webrtc::AudioEncoderOpusImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned int v15;
  std::string *v16;
  std::string::size_type size;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  int v30;
  int v31;
  size_t v32;
  std::string *p_p;
  int64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  void *v56;
  int64_t v57;
  char *v58;
  char *v59;
  char v60;
  std::string __p;
  char v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[21];
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  std::string v70;
  char v71;

  if (*((char *)this + 23) < 0)
  {
    v5 = *((_QWORD *)this + 1);
    if (v5 < 0)
      goto LABEL_163;
    v6 = *(unsigned __int8 **)this;
    if (v5 && v6 == 0)
      goto LABEL_163;
  }
  else
  {
    v5 = *((unsigned __int8 *)this + 23);
    v6 = (unsigned __int8 *)this;
  }
  if (v5 != 4)
    goto LABEL_33;
  v8 = *v6;
  if (v8 == 111)
    goto LABEL_13;
  if ((v8 - 65) < 0x1A)
    LOBYTE(v8) = v8 + 32;
  v9 = v8 - 111;
  if (!v9)
  {
LABEL_13:
    v10 = v6[1];
    if (v10 == 112)
      goto LABEL_17;
    if ((v10 - 65) < 0x1A)
      LOBYTE(v10) = v10 + 32;
    v9 = v10 - 112;
    if (!v9)
    {
LABEL_17:
      v11 = v6[2];
      if (v11 == 117)
        goto LABEL_21;
      if ((v11 - 65) < 0x1A)
        LOBYTE(v11) = v11 + 32;
      v9 = v11 - 117;
      if (!v9)
      {
LABEL_21:
        v12 = v6[3];
        if (v12 == 115)
          goto LABEL_25;
        if ((v12 - 65) < 0x1A)
          LOBYTE(v12) = v12 + 32;
        v9 = v12 - 115;
        if (v12 == 115)
LABEL_25:
          v9 = 0;
      }
    }
  }
  v13 = !v9 && *((_DWORD *)this + 6) == 48000;
  if (!v13 || *((_QWORD *)this + 4) != 2)
  {
LABEL_33:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 88) = 0;
    return;
  }
  *(_QWORD *)&v63 = 0xBB8000000014;
  *(_QWORD *)&v64 = 0x7D0000000000;
  v15 = 1;
  BYTE8(v64) = 1;
  WORD6(v64) = 0;
  *(_OWORD *)&v65[4] = xmmword_208F05000;
  v65[20] = 0;
  v67 = 0;
  v68 = 0;
  v66 = 0;
  v69 = -4294967096;
  webrtc::GetFormatParameter("stereo", 6uLL, (uint64_t)this, &v70);
  if (v71)
  {
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v70.__r_.__value_.__l.__size_;
      if ((v70.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_163;
      v16 = (std::string *)v70.__r_.__value_.__r.__words[0];
      if (v70.__r_.__value_.__l.__size_)
      {
        if (!v70.__r_.__value_.__r.__words[0])
          goto LABEL_163;
      }
    }
    else
    {
      v16 = &v70;
      size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    if (size == 1)
    {
      if (v16->__r_.__value_.__s.__data_[0] == 49)
        v15 = 2;
      else
        v15 = 1;
    }
    if ((*((_BYTE *)&v70.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(v70.__r_.__value_.__l.__data_);
  }
  *((_QWORD *)&v63 + 1) = v15;
  webrtc::GetFormatParameter<int>((uint64_t)this, "ptime", 5uLL);
  if ((v18 & 0xFF00000000) == 0)
  {
LABEL_53:
    v19 = 20;
    goto LABEL_55;
  }
  if ((int)v18 >= 11)
  {
    if (v18 >= 0x15)
    {
      if (v18 <= 0x28)
        v19 = 40;
      else
        v19 = 60;
      goto LABEL_55;
    }
    goto LABEL_53;
  }
  v19 = 10;
LABEL_55:
  LODWORD(v63) = v19;
  webrtc::GetFormatParameter<int>((uint64_t)this, "maxplaybackrate", 0xFuLL);
  if (v20 >= 0xBB80)
    v21 = 48000;
  else
    v21 = v20;
  if ((int)v20 <= 7999 || (v20 & 0xFF00000000) == 0)
    v23 = 48000;
  else
    v23 = v21;
  *(_DWORD *)v65 = v23;
  webrtc::GetFormatParameter("useinbandfec", 0xCuLL, (uint64_t)this, &v70);
  if (!v71)
  {
    BYTE12(v64) = 0;
    goto LABEL_76;
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    v25 = v70.__r_.__value_.__l.__size_;
    if ((v70.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_163;
    v24 = (std::string *)v70.__r_.__value_.__r.__words[0];
    if (v70.__r_.__value_.__l.__size_)
    {
      if (!v70.__r_.__value_.__r.__words[0])
        goto LABEL_163;
    }
  }
  else
  {
    v24 = &v70;
    v25 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  }
  if (v25 == 1)
  {
    BYTE12(v64) = v24->__r_.__value_.__s.__data_[0] == 49;
    if ((*((_BYTE *)&v70.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_76;
  }
  else
  {
    BYTE12(v64) = 0;
    if ((*((_BYTE *)&v70.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_76;
  }
  operator delete(v70.__r_.__value_.__l.__data_);
LABEL_76:
  webrtc::GetFormatParameter("usedtx", 6uLL, (uint64_t)this, &v70);
  if (!v71)
  {
    v65[20] = 0;
    goto LABEL_88;
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    v27 = v70.__r_.__value_.__l.__size_;
    if ((v70.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_163;
    v26 = (std::string *)v70.__r_.__value_.__r.__words[0];
    if (v70.__r_.__value_.__l.__size_)
    {
      if (!v70.__r_.__value_.__r.__words[0])
        goto LABEL_163;
    }
  }
  else
  {
    v26 = &v70;
    v27 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  }
  if (v27 == 1)
  {
    v65[20] = v26->__r_.__value_.__s.__data_[0] == 49;
    if ((*((_BYTE *)&v70.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_88;
  }
  else
  {
    v65[20] = 0;
    if ((*((_BYTE *)&v70.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_88;
  }
  operator delete(v70.__r_.__value_.__l.__data_);
LABEL_88:
  webrtc::GetFormatParameter("cbr", 3uLL, (uint64_t)this, &v70);
  if (!v71)
  {
    BYTE13(v64) = 0;
    goto LABEL_100;
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    v29 = v70.__r_.__value_.__l.__size_;
    if ((v70.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_163;
    v28 = (std::string *)v70.__r_.__value_.__r.__words[0];
    if (v70.__r_.__value_.__l.__size_)
    {
      if (!v70.__r_.__value_.__r.__words[0])
        goto LABEL_163;
    }
  }
  else
  {
    v28 = &v70;
    v29 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
  }
  if (v29 == 1)
  {
    BYTE13(v64) = v28->__r_.__value_.__s.__data_[0] == 49;
    if ((*((_BYTE *)&v70.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_100;
  }
  else
  {
    BYTE13(v64) = 0;
    if ((*((_BYTE *)&v70.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_100;
  }
  operator delete(v70.__r_.__value_.__l.__data_);
LABEL_100:
  webrtc::GetFormatParameter("maxaveragebitrate", 0x11uLL, (uint64_t)this, &__p);
  if (v23 >= 0x3E81)
    v30 = 32000;
  else
    v30 = 20000;
  if (v23 < 0x1F41)
    v30 = 12000;
  v31 = v15 * v30;
  if (!v62)
  {
    DWORD1(v64) = v15 * v30;
    BYTE8(v64) = 1;
    goto LABEL_132;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v32 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_163;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_)
    {
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_163;
    }
  }
  else
  {
    v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
  }
  v34 = rtc::string_to_number_internal::ParseSigned((void **)&p_p->__r_.__value_.__l.__data_, v32, 10);
  if (v35 && v34 >= (uint64_t)0xFFFFFFFF80000000 && v34 <= 0x7FFFFFFF)
  {
    if ((int)v34 <= 6000)
      v36 = 6000;
    else
      v36 = v34;
    if (v36 >= 510000)
      v31 = 510000;
    else
      v31 = v36;
    if (v31 == (_DWORD)v34)
    {
      v31 = v34;
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc");
    }
    goto LABEL_129;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    if (v62)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v37, v38, v39, v40, v41, v42, v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc");
      goto LABEL_129;
    }
LABEL_163:
    __break(1u);
    goto LABEL_164;
  }
LABEL_129:
  DWORD1(v64) = v31;
  BYTE8(v64) = 1;
  if (v62 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_132:
  LODWORD(v64) = v15 != 1;
  webrtc::GetFormatParameter<int>((uint64_t)this, "minptime", 8uLL);
  if ((v51 & 0xFF00000000) != 0)
    v52 = v51;
  else
    v52 = 20;
  webrtc::GetFormatParameter<int>((uint64_t)this, "maxptime", 8uLL);
  if ((v53 & 0xFF00000000) != 0)
    v54 = v53;
  else
    v54 = 60;
  v67 = 0;
  v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
  if (v52 <= 20 && v54 >= 20)
  if (v52 <= 40 && v54 >= 40)
    std::back_insert_iterator<std::vector<int>>::operator=[abi:sn180100]((uint64_t *)&v70, &dword_208F05024);
  if (v52 <= 60 && v54 >= 60)
    std::back_insert_iterator<std::vector<int>>::operator=[abi:sn180100]((uint64_t *)&v70, &dword_208F05028);
  if ((int)v63 >= 1
    && !(v63 % 0xA)
    && (DWORD1(v63) == 48000 || DWORD1(v63) == 16000)
    && *((_QWORD *)&v63 + 1) <= 0xFEuLL
    && BYTE8(v64)
    && (DWORD1(v64) - 6000) <= 0x7B0C0
    && *(_DWORD *)&v65[4] <= 0xAu
    && *(_DWORD *)&v65[8] < 0xBu)
  {
    v55 = v64;
    *(_OWORD *)a2 = v63;
    *(_OWORD *)(a2 + 16) = v55;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)v65;
    *(_QWORD *)(a2 + 45) = *(_QWORD *)&v65[13];
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    v56 = v66;
    v57 = v67 - v66;
    if (v67 == v66)
    {
LABEL_159:
      *(_QWORD *)(a2 + 80) = v69;
      v60 = 1;
      goto LABEL_161;
    }
    if ((v57 & 0x8000000000000000) == 0)
    {
      v58 = (char *)operator new(v67 - v66);
      *(_QWORD *)(a2 + 56) = v58;
      v59 = &v58[4 * (v57 >> 2)];
      *(_QWORD *)(a2 + 72) = v59;
      memcpy(v58, v56, v57);
      *(_QWORD *)(a2 + 64) = v59;
      goto LABEL_159;
    }
LABEL_164:
    abort();
  }
  v60 = 0;
  *(_BYTE *)a2 = 0;
  v56 = v66;
LABEL_161:
  *(_BYTE *)(a2 + 88) = v60;
  if (v56)
  {
    v67 = v56;
    operator delete(v56);
  }
}

_QWORD *webrtc::AudioEncoderOpusImpl::MakeAudioEncoder@<X0>(_QWORD *result@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*(int *)result >= 1 && *(_DWORD *)result % 0xAu == 0)
  {
    v6 = (uint64_t)result;
    v7 = *((_DWORD *)result + 1);
    v5 = 0;
    if ((v7 == 48000 || v7 == 16000) && result[1] <= 0xFEuLL)
    {
      if (*((_BYTE *)result + 24))
      {
        v5 = 0;
        if ((*((_DWORD *)result + 5) - 6000) <= 0x7B0C0
          && *((_DWORD *)result + 9) <= 0xAu
          && *((_DWORD *)result + 10) <= 0xAu)
        {
          v5 = operator new();
          v13[0] = &off_24C0ADBC8;
          v13[1] = v5;
          v14 = v13;
          v10 = operator new();
          *(_QWORD *)v10 = &unk_24C0C0E68;
          *(_DWORD *)(v10 + 8) = 5000;
          *(_QWORD *)(v10 + 12) = 0x410824003F7F9075;
          *(_BYTE *)(v10 + 24) = 0;
          *(_BYTE *)(v10 + 32) = 0;
          *(_DWORD *)(v10 + 44) = 1065349861;
          v12 = v10;
          webrtc::AudioEncoderOpusImpl::AudioEncoderOpusImpl(v5, v6, a2, (uint64_t)v13, &v12);
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          result = v14;
          if (v14 == v13)
          {
            v11 = 4;
            result = v13;
          }
          else
          {
            if (!v14)
              goto LABEL_23;
            v11 = 5;
          }
          result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
        }
      }
    }
  }
  else
  {
    v5 = 0;
  }
LABEL_23:
  *a3 = v5;
  return result;
}

uint64_t webrtc::AudioEncoderOpusImpl::AudioEncoderOpusImpl(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  char *v9;
  uint64_t v10;
  int v11;
  void *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  BOOL v18;
  uint64_t v19;
  int v20;
  void *v21;
  char *v22;
  char *v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  BOOL v29;
  size_t v30;
  uint64_t v31;
  int v32;
  void *v33;
  char *v34;
  char *v35;
  void *v36;
  _DWORD *v37;
  char *v38;
  _QWORD *v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  int v53;
  int v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  void **v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  float v80;
  float v81;
  int **v82;
  double v83;
  uint64_t v84;
  int **v86;
  unint64_t v87;
  size_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void **v93;
  size_t v94;
  size_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  void *__p;
  void **v120;
  uint64_t v121;
  void *v122;
  unint64_t v123;
  unsigned __int8 v124;
  char __s[48];
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0ADAC8;
  *(_QWORD *)(a1 + 8) = 0xBB8000000014;
  *(_QWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0x7D0000000000;
  *(_BYTE *)(a1 + 32) = 1;
  *(_WORD *)(a1 + 36) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_208F05010;
  *(_DWORD *)(a1 + 56) = 1500;
  *(_BYTE *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 88) = -4294967096;
  *(_DWORD *)(a1 + 96) = a3;
  v9 = __s;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-Audio-StableTargetAdaptation", 0x23uLL, (size_t *)__s);
  v10 = __s[23];
  v11 = __s[23];
  v12 = *(void **)__s;
  if (__s[23] < 0)
  {
    v10 = *(_QWORD *)&__s[8];
    v9 = *(char **)__s;
  }
  v13 = &v9[v10];
  v118 = a2;
  if (v10 >= 8)
  {
    v14 = v9;
    do
    {
      v15 = (char *)memchr(v14, 68, v10 - 7);
      if (!v15)
        break;
      v16 = v15;
      if (*(_QWORD *)v15 == 0x64656C6261736944)
        goto LABEL_9;
      v14 = v15 + 1;
      v10 = v13 - (v16 + 1);
    }
    while (v10 > 7);
  }
  v16 = v13;
LABEL_9:
  if (v11 < 0)
    operator delete(v12);
  v18 = v16 == v13 || v16 != v9;
  *(_BYTE *)(a1 + 100) = v18;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-AdjustOpusBandwidth", 0x1AuLL, (size_t *)__s);
  v19 = __s[23];
  v20 = __s[23];
  v21 = *(void **)__s;
  if (__s[23] >= 0)
  {
    v22 = __s;
  }
  else
  {
    v19 = *(_QWORD *)&__s[8];
    v22 = *(char **)__s;
  }
  v23 = &v22[v19];
  if (v19 >= 7)
  {
    v24 = v22;
    do
    {
      v25 = memchr(v24, 69, v19 - 6);
      if (!v25)
        break;
      v26 = (char *)v25;
      if (*v25 == 1650552389 && *(_DWORD *)((char *)v25 + 3) == 1684368482)
        goto LABEL_29;
      v24 = (char *)v25 + 1;
      v19 = v23 - (v26 + 1);
    }
    while (v19 > 6);
  }
  v26 = v23;
LABEL_29:
  if (v20 < 0)
    operator delete(v21);
  v29 = v26 != v23 && v26 == v22;
  *(_BYTE *)(a1 + 101) = v29;
  *(_BYTE *)(a1 + 102) = 1;
  strcpy(__s, "WebRTC-Audio-OpusBitrateMultipliers");
  v30 = strlen(__s);
  webrtc::field_trial::FindFullName((size_t)__s, v30, (size_t *)&v122);
  v31 = v124;
  v32 = (char)v124;
  v33 = v122;
  if ((v124 & 0x80u) == 0)
  {
    v34 = (char *)&v122;
  }
  else
  {
    v31 = v123;
    v34 = (char *)v122;
  }
  v35 = &v34[v31];
  if (v31 >= 7)
  {
    v36 = v34;
    do
    {
      v37 = memchr(v36, 69, v31 - 6);
      if (!v37)
        break;
      v38 = (char *)v37;
      if (*v37 == 1650552389 && *(_DWORD *)((char *)v37 + 3) == 1684368482)
        goto LABEL_49;
      v36 = (char *)v37 + 1;
      v31 = v35 - (v38 + 1);
    }
    while (v31 > 6);
  }
  v38 = v35;
LABEL_49:
  if (v32 < 0)
  {
    operator delete(v33);
    v40 = (_QWORD *)(a1 + 104);
    if (v38 == v35)
    {
LABEL_56:
      *v40 = 0;
      v40[1] = 0;
      v40[2] = 0;
      v48 = v118;
      goto LABEL_85;
    }
  }
  else
  {
    v40 = (_QWORD *)(a1 + 104);
    if (v38 == v35)
      goto LABEL_56;
  }
  if (v38 != v34)
    goto LABEL_56;
  v41 = strlen(__s);
  webrtc::field_trial::FindFullName((size_t)__s, v41, (size_t *)&v122);
  __p = 0;
  v120 = 0;
  v121 = 0;
  if ((char)v124 < 0)
  {
    v46 = v123;
    if ((v123 & 0x8000000000000000) != 0)
      goto LABEL_131;
    v47 = v122;
    if (v123)
    {
      if (!v122)
        goto LABEL_131;
    }
  }
  else
  {
    v46 = v124;
    v47 = &v122;
  }
  rtc::tokenize((uint64_t)v47, v46, 0x2Du, (uint64_t)&__p);
  v49 = (char *)__p;
  v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)v120 - (_BYTE *)__p) >> 3);
  if (v50 < 2)
    goto LABEL_71;
  if (*((char *)__p + 23) < 0)
  {
    v51 = *((_QWORD *)__p + 1);
    if ((v51 & 0x8000000000000000) == 0)
    {
      v52 = *(int **)__p;
      if (!v51 || v52)
        goto LABEL_66;
    }
LABEL_131:
    __break(1u);
LABEL_132:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 381, "config.payload_type == -1 || config.payload_type == payload_type", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v42, v43, v44, v45, v116);
LABEL_133:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 383, "RecreateEncoderInstance(config)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v75, v76, v77, v78, v116);
  }
  v51 = *((unsigned __int8 *)__p + 23);
  v52 = (int *)__p;
LABEL_66:
  if (v51 == 7)
  {
    v53 = *v52;
    v54 = *(int *)((char *)v52 + 3);
    if (v53 == 1650552389 && v54 == 1684368482)
    {
      v87 = v50 - 1;
      if (v87)
      {
        if (v87 >> 62)
          goto LABEL_136;
        v88 = 4 * v87;
        v89 = (char *)operator new(4 * v87);
        v90 = &v89[v88];
        bzero(v89, v88);
      }
      else
      {
        v90 = 0;
        v89 = 0;
      }
      v91 = 0;
      v92 = 0;
      while (1)
      {
        v93 = (void **)&v49[v91 + 24];
        if (v49[v91 + 47] < 0)
        {
          v94 = *(_QWORD *)&v49[v91 + 32];
          if ((v94 & 0x8000000000000000) != 0)
            goto LABEL_131;
          v93 = (void **)*v93;
          if (v94 && v93 == 0)
            goto LABEL_131;
        }
        else
        {
          v94 = v49[v91 + 47];
        }
        if ((v90 - v89) >> 2 == v92)
          goto LABEL_131;
        v96 = rtc::string_to_number_internal::ParseFloatingPoint<float>(v93, v94);
        if ((v96 & 0xFF00000000) == 0)
          break;
        *(_DWORD *)&v89[4 * v92] = v96;
        v49 = (char *)__p;
        v97 = v92 + 2;
        ++v92;
        v91 += 24;
        if (v97 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v120 - (_BYTE *)__p) >> 3))
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v98, v99, v100, v101, v102, v103, v104, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc");
          *(_QWORD *)(a1 + 104) = v89;
          *(_QWORD *)(a1 + 112) = v90;
          *(_QWORD *)(a1 + 120) = v90;
          goto LABEL_74;
        }
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t\t\t", v105, v106, v107, v108, v109, v110, v111, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc");
      *v40 = 0;
      v40[1] = 0;
      v40[2] = 0;
      v48 = v118;
      if (v89)
        operator delete(v89);
      goto LABEL_75;
    }
  }
LABEL_71:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t\t", v56, v57, v58, v59, v60, v61, v62, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc");
  *v40 = 0;
  v40[1] = 0;
  v40[2] = 0;
LABEL_74:
  v48 = v118;
LABEL_75:
  v63 = (void **)__p;
  if (__p)
  {
    v64 = v120;
    v65 = __p;
    if (v120 != __p)
    {
      do
      {
        if (*((char *)v64 - 1) < 0)
          operator delete(*(v64 - 3));
        v64 -= 3;
      }
      while (v64 != v63);
      v65 = __p;
    }
    v120 = v63;
    operator delete(v65);
  }
  if ((char)v124 < 0)
    operator delete(v122);
LABEL_85:
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  v66 = operator new();
  if (rtc::g_clock)
  {
    v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v67 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
        / dword_253EA791C;
  }
  *(_QWORD *)v66 = v67 / 1000000;
  *(_DWORD *)(v66 + 16) = -1082130432;
  *(_QWORD *)(v66 + 8) = 0xBF8000003F7FF972;
  *(_QWORD *)(a1 + 192) = v66;
  v70 = *(_QWORD *)(a4 + 24);
  if (v70)
  {
    if (v70 == a4)
    {
      *(_QWORD *)(a1 + 224) = a1 + 200;
      (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 224) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 224) = 0;
  }
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  v71 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 256) = v71;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  v72 = *(_DWORD *)(v48 + 84);
  if (v72 != -1 && v72 != a3)
    goto LABEL_132;
  webrtc::AudioEncoderOpusImpl::RecreateEncoderInstance(a1, (__int128 *)v48, v68, v69, v42, v43, v44, v45);
  if ((v79 & 1) == 0)
    goto LABEL_133;
  v80 = *(float *)(a1 + 128);
  v81 = 0.0;
  if (v80 >= 0.0)
    v81 = *(float *)(a1 + 128);
  if (v81 > 0.2)
    v81 = 0.2;
  if (v80 != v81)
  {
    *(float *)(a1 + 128) = v81;
    v82 = *(int ***)(a1 + 160);
    v83 = (float)(v81 * 100.0) + 0.5;
    v84 = (int)v83;
    if (v82)
    {
      if (*v82)
      {
        if (!(unsigned __int16)opus_encoder_ctl(*v82, 4014, v73, v74, v75, v76, v77, v78, (int)v83))
          return a1;
      }
      else if (!(unsigned __int16)opus_multistream_encoder_ctl(v82[1], 4014, v73, v74, v75, v76, v77, v78, (int)v83))
      {
        return a1;
      }
      v86 = *(int ***)(a1 + 160);
      v84 = (int)((float)(*(float *)(a1 + 128) * 100.0) + 0.5);
    }
    else
    {
      v86 = 0;
    }
    WebRtcOpus_SetPacketLossRate(v86, v84, v73, v74, v75, v76, v77, v78);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 736, "0 == WebRtcOpus_SetPacketLossRate( inst_, static_cast<int32_t>(packet_loss_rate_ * 100 + .5))", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v112, v113, v114, v115, 0);
LABEL_136:
    abort();
  }
  return a1;
}

void webrtc::AudioEncoderOpusImpl::RecreateEncoderInstance(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  BOOL v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int ***v16;
  void **v17;
  void *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int **v33;
  __int16 v34;
  int **v35;
  __int16 v36;
  int **v37;
  int **v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  int **v48;
  uint64_t v49;
  __int16 v50;
  int **v51;
  __int16 v52;
  int **v53;
  __int16 v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int **v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  int **v65;
  __int16 v66;
  __int16 v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int **v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::string *v110;

  if (*(int *)a2 >= 1 && *(_DWORD *)a2 % 0xAu == 0)
  {
    v10 = *((_DWORD *)a2 + 1);
    v11 = v10 == 48000 || v10 == 16000;
    if (v11
      && *((_QWORD *)a2 + 1) <= 0xFEuLL
      && *((_BYTE *)a2 + 24)
      && (*((_DWORD *)a2 + 5) - 6000) <= 0x7B0C0
      && *((_DWORD *)a2 + 9) <= 0xAu
      && *((_DWORD *)a2 + 10) <= 0xAu)
    {
      v13 = *a2;
      v14 = a2[1];
      v15 = a2[2];
      *(_QWORD *)(a1 + 53) = *(_QWORD *)((char *)a2 + 45);
      *(_OWORD *)(a1 + 40) = v15;
      *(_OWORD *)(a1 + 24) = v14;
      *(_OWORD *)(a1 + 8) = v13;
      if ((__int128 *)(a1 + 8) != a2)
        std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>((_QWORD *)(a1 + 64), *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
      v16 = (int ***)(a1 + 160);
      v17 = *(void ***)(a1 + 160);
      *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 10);
      if (v17)
      {
        v18 = *v17;
        if (!*v17)
          v18 = v17[1];
        free(v18);
        free(v17);
      }
      v19 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 144) = v19;
      v20 = *(_DWORD *)(a1 + 8);
      v21 = v20 / 10;
      v22 = (v20 % 10);
      if ((_DWORD)v22)
        goto LABEL_110;
      v23 = *(_DWORD *)(a1 + 12);
      v22 = (v23 % 100);
      if ((_DWORD)v22)
        goto LABEL_110;
      v24 = v23 / 100 * (uint64_t)v21 * *(_QWORD *)(a1 + 16);
      if (v24 > (*(_QWORD *)(a1 + 152) - v19) >> 1)
      {
        if ((v24 & 0x8000000000000000) != 0)
          goto LABEL_122;
        v25 = 2 * v24;
        v26 = (char *)operator new(2 * v24);
        *(_QWORD *)(a1 + 136) = v26;
        *(_QWORD *)(a1 + 144) = v26;
        *(_QWORD *)(a1 + 152) = &v26[v25];
        if (v19)
          operator delete((void *)v19);
      }
      if (WebRtcOpus_EncoderCreate((void ***)(a1 + 160), *((void **)a2 + 1), *((_DWORD *)a2 + 4) != 0, *((_DWORD *)a2 + 1)))goto LABEL_111;
      if (!*((_BYTE *)a2 + 24))
      {
LABEL_109:
        __break(1u);
LABEL_110:
        rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v22);
LABEL_111:
        WebRtcOpus_EncoderCreate((void ***)(a1 + 160), *((void **)a2 + 1), *((_DWORD *)a2 + 4) != 0, *((_DWORD *)a2 + 1));
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 675, "0 == WebRtcOpus_EncoderCreate( &inst_, config.num_channels, config.application == AudioEncoderOpusConfig::ApplicationMode::kVoip ? 0 : 1, config.sample_rate_hz)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v73, v74, v75, v76, 0);
        goto LABEL_112;
      }
      v19 = *((unsigned int *)a2 + 5);
      v29 = *v16;
      if (!*v16)
      {
LABEL_112:
        v35 = 0;
        goto LABEL_113;
      }
      if (*v29)
      {
        if (!(unsigned __int16)opus_encoder_ctl(*v29, 4002, v27, v28, a5, a6, a7, a8, *((unsigned int *)a2 + 5)))
          goto LABEL_33;
      }
      else if (!(unsigned __int16)opus_multistream_encoder_ctl(v29[1], 4002, v27, v28, a5, a6, a7, a8, *((unsigned int *)a2 + 5)))
      {
LABEL_33:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v30, v31, v32, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc");
        v33 = *v16;
        if (*((_BYTE *)a2 + 28))
        {
          if (!v33)
          {
LABEL_120:
            v37 = 0;
            goto LABEL_121;
          }
          if (*v33)
            v34 = opus_encoder_ctl(*v33, 4012, v31, v32, a5, a6, a7, a8, 1);
          else
            v34 = opus_multistream_encoder_ctl(v33[1], 4012, v31, v32, a5, a6, a7, a8, 1);
          if (v34)
          {
            v37 = *v16;
LABEL_121:
            WebRtcOpus_EnableFec(v37, v30, v31, v32, a5, a6, a7, a8);
            rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 680, "0 == WebRtcOpus_EnableFec(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v93, v94, v95, v96, 0);
LABEL_122:
            abort();
          }
LABEL_49:
          v38 = *v16;
          v39 = *((_DWORD *)a2 + 8);
          if (!*v16)
          {
LABEL_114:
            v53 = 0;
            goto LABEL_115;
          }
          if ((int)v39 >= 8001)
          {
            if (v39 >= 0x2EE1)
            {
              if (v39 >= 0x3E81)
              {
                if (v39 < 0x5DC1)
                  v40 = 1104;
                else
                  v40 = 1105;
              }
              else
              {
                v40 = 1103;
              }
            }
            else
            {
              v40 = 1102;
            }
          }
          else
          {
            v40 = 1101;
          }
          if (*v38)
          {
            if (!(unsigned __int16)opus_encoder_ctl(*v38, 4004, v31, v32, a5, a6, a7, a8, v40))
              goto LABEL_61;
          }
          else if (!(unsigned __int16)opus_multistream_encoder_ctl(v38[1], 4004, v31, v32, a5, a6, a7, a8, v40))
          {
LABEL_61:
            if (*((_BYTE *)a2 + 24))
            {
              v41 = *((_DWORD *)a2 + 5);
              v42 = *((_DWORD *)a2 + 11);
              v43 = *((_DWORD *)a2 + 12);
              v45 = (v41 > v43 + v42 || v41 < v42 - v43) && v41 <= v42;
              v46 = 40;
              if (!v45)
                v46 = 36;
              v47 = *(unsigned int *)((char *)a2 + v46);
              *(_DWORD *)(a1 + 188) = v47;
              v48 = *(int ***)(a1 + 160);
              if (v48)
              {
                if (*v48)
                {
                  v50 = opus_encoder_ctl(*v48, 4010, v31, v32, a5, a6, a7, a8, v47);
                  v51 = *v16;
                  if (!v50)
                    goto LABEL_73;
                }
                else
                {
                  v54 = opus_multistream_encoder_ctl(v48[1], 4010, v31, v32, a5, a6, a7, a8, v47);
                  v51 = *v16;
                  if (!v54)
                  {
LABEL_73:
                    *(_BYTE *)(a1 + 102) = 1;
                    if (*((_BYTE *)a2 + 52))
                    {
                      if (v51)
                      {
                        if (*v51)
                          v52 = opus_encoder_ctl(*v51, 4016, v31, v32, a5, a6, a7, a8, 1);
                        else
                          v52 = opus_multistream_encoder_ctl(v51[1], 4016, v31, v32, a5, a6, a7, a8, 1);
                        if (!v52)
                        {
LABEL_90:
                          v60 = *(int ***)(a1 + 160);
                          v61 = (float)(*(float *)(a1 + 128) * 100.0) + 0.5;
                          v62 = (int)v61;
                          if (v60)
                          {
                            if (*v60)
                            {
                              v64 = opus_encoder_ctl(*v60, 4014, v31, v32, a5, a6, a7, a8, (int)v61);
                              v65 = *v16;
                              if (!v64)
                                goto LABEL_93;
                            }
                            else
                            {
                              v67 = opus_multistream_encoder_ctl(v60[1], 4014, v31, v32, a5, a6, a7, a8, (int)v61);
                              v65 = *v16;
                              if (!v67)
                              {
LABEL_93:
                                if (*((_BYTE *)a2 + 29))
                                {
                                  if (v65)
                                  {
                                    if (*v65)
                                      v66 = opus_encoder_ctl(*v65, 4006, v31, v32, a5, a6, a7, a8, 0);
                                    else
                                      v66 = opus_multistream_encoder_ctl(v65[1], 4006, v31, v32, a5, a6, a7, a8, 0);
                                    if (!v66)
                                      goto LABEL_108;
                                    v65 = *v16;
                                  }
                                  WebRtcOpus_EnableCbr(v65, v63, v31, v32, a5, a6, a7, a8);
                                  v65 = (int **)rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 700, "0 == WebRtcOpus_EnableCbr(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v69, v70, v71, v72, 0);
                                }
                                else
                                {
                                  if (!v65)
                                  {
LABEL_129:
                                    WebRtcOpus_DisableCbr(v65, v63, v31, v32, a5, a6, a7, a8);
                                    v110 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 702, "0 == WebRtcOpus_DisableCbr(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v106, v107, v108, v109, 0);
                                    webrtc::AudioEncoderOpusImpl::~AudioEncoderOpusImpl((webrtc::AudioEncoderOpusImpl *)v110);
                                    return;
                                  }
                                  if (*v65)
                                  {
                                    v68 = opus_encoder_ctl(*v65, 4006, v31, v32, a5, a6, a7, a8, 1);
                                    goto LABEL_107;
                                  }
                                }
                                v68 = opus_multistream_encoder_ctl(v65[1], 4006, v31, v32, a5, a6, a7, a8, 1);
LABEL_107:
                                if (!v68)
                                {
LABEL_108:
                                  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 16);
                                  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a1 + 8);
                                  return;
                                }
                                goto LABEL_128;
                              }
                            }
                            v62 = (int)((float)(*(float *)(a1 + 128) * 100.0) + 0.5);
                            goto LABEL_119;
                          }
LABEL_118:
                          v65 = 0;
LABEL_119:
                          WebRtcOpus_SetPacketLossRate(v65, v62, v31, v32, a5, a6, a7, a8);
                          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 698, "0 == WebRtcOpus_SetPacketLossRate( inst_, static_cast<int32_t>(packet_loss_rate_ * 100 + .5))", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v89, v90, v91, v92, 0);
                          goto LABEL_120;
                        }
                        v51 = *v16;
                      }
                      WebRtcOpus_EnableDtx(v51, v49, v31, v32, a5, a6, a7, a8);
                      v51 = (int **)rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 692, "0 == WebRtcOpus_EnableDtx(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v56, v57, v58, v59, 0);
                    }
                    else
                    {
                      if (!v51)
                      {
LABEL_127:
                        WebRtcOpus_DisableDtx(v51, v49, v31, v32, a5, a6, a7, a8);
                        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 694, "0 == WebRtcOpus_DisableDtx(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v102, v103, v104, v105, 0);
LABEL_128:
                        v65 = *v16;
                        goto LABEL_129;
                      }
                      if (*v51)
                      {
                        v55 = opus_encoder_ctl(*v51, 4016, v31, v32, a5, a6, a7, a8, 0);
                        goto LABEL_89;
                      }
                    }
                    v55 = opus_multistream_encoder_ctl(v51[1], 4016, v31, v32, a5, a6, a7, a8, 0);
LABEL_89:
                    if (!v55)
                      goto LABEL_90;
                    goto LABEL_126;
                  }
                }
                v47 = *(unsigned int *)(a1 + 188);
LABEL_117:
                WebRtcOpus_SetComplexity(v51, v47, v31, v32, a5, a6, a7, a8);
                rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 689, "0 == WebRtcOpus_SetComplexity(inst_, complexity_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v85, v86, v87, v88, 0);
                goto LABEL_118;
              }
LABEL_116:
              v51 = 0;
              goto LABEL_117;
            }
            goto LABEL_109;
          }
          v53 = *v16;
          v39 = *((_DWORD *)a2 + 8);
LABEL_115:
          WebRtcOpus_SetMaxPlaybackRate(v53, v39, v31, v32, a5, a6, a7, a8);
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 685, "0 == WebRtcOpus_SetMaxPlaybackRate(inst_, config.max_playback_rate_hz)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v81, v82, v83, v84, 0);
          goto LABEL_116;
        }
        if (v33)
        {
          if (*v33)
            v36 = opus_encoder_ctl(*v33, 4012, v31, v32, a5, a6, a7, a8, 0);
          else
            v36 = opus_multistream_encoder_ctl(v33[1], 4012, v31, v32, a5, a6, a7, a8, 0);
          if (!v36)
            goto LABEL_49;
          v97 = *v16;
        }
        else
        {
          v97 = 0;
        }
        WebRtcOpus_DisableFec(v97, v30, v31, v32, a5, a6, a7, a8);
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 682, "0 == WebRtcOpus_DisableFec(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v98, v99, v100, v101, 0);
LABEL_126:
        v51 = *v16;
        goto LABEL_127;
      }
      v35 = *v16;
LABEL_113:
      WebRtcOpus_SetBitRate(v35, v19, v27, v28, a5, a6, a7, a8);
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 677, "0 == WebRtcOpus_SetBitRate(inst_, bitrate)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v77, v78, v79, v80, 0);
      goto LABEL_114;
    }
  }
}

void webrtc::AudioEncoderOpusImpl::~AudioEncoderOpusImpl(webrtc::AudioEncoderOpusImpl *this)
{
  void **v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  webrtc::AudioEncoderOpusImpl *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;

  v1 = (void **)*((_QWORD *)this + 20);
  if (!v1)
  {
    WebRtcOpus_EncoderFree(0);
    v16 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 392, "0 == WebRtcOpus_EncoderFree(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v12, v13, v14, v15, 0);
    webrtc::AudioEncoderOpusImpl::~AudioEncoderOpusImpl((webrtc::AudioEncoderOpusImpl *)v16);
    return;
  }
  v3 = *v1;
  if (!*v1)
    v3 = v1[1];
  free(v3);
  free(v1);
  v4 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (webrtc::AudioEncoderOpusImpl *)*((_QWORD *)this + 28);
  if (v6 == (webrtc::AudioEncoderOpusImpl *)((char *)this + 200))
  {
    v7 = 4;
    v6 = (webrtc::AudioEncoderOpusImpl *)((char *)this + 200);
    goto LABEL_12;
  }
  if (v6)
  {
    v7 = 5;
LABEL_12:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  v8 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v8)
    MEMORY[0x20BD0ADEC](v8, 0x1000C400CE834B2);
  v9 = (void *)*((_QWORD *)this + 17);
  if (v9)
  {
    *((_QWORD *)this + 18) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 13);
  if (v10)
  {
    *((_QWORD *)this + 14) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 8);
  if (v11)
  {
    *((_QWORD *)this + 9) = v11;
    operator delete(v11);
  }
}

{
  webrtc::AudioEncoderOpusImpl::~AudioEncoderOpusImpl(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioEncoderOpusImpl::SampleRateHz(webrtc::AudioEncoderOpusImpl *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t webrtc::AudioEncoderOpusImpl::NumChannels(webrtc::AudioEncoderOpusImpl *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t webrtc::AudioEncoderOpusImpl::RtpTimestampRateHz(webrtc::AudioEncoderOpusImpl *this)
{
  return 48000;
}

uint64_t webrtc::AudioEncoderOpusImpl::Num10MsFramesInNextPacket(webrtc::AudioEncoderOpusImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  std::string *v10;

  v8 = *((_DWORD *)this + 2);
  if (!(v8 % 10))
    return v8 / 10;
  v10 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, (v8 % 10));
  return webrtc::AudioEncoderOpusImpl::Max10MsFramesInAPacket((webrtc::AudioEncoderOpusImpl *)v10);
}

uint64_t webrtc::AudioEncoderOpusImpl::Max10MsFramesInAPacket(webrtc::AudioEncoderOpusImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  std::string *v10;

  v8 = *((_DWORD *)this + 2);
  if (!(v8 % 10))
    return v8 / 10;
  v10 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, (v8 % 10));
  return webrtc::AudioEncoderOpusImpl::GetTargetBitrate((uint64_t)v10);
}

uint64_t webrtc::AudioEncoderOpusImpl::GetTargetBitrate(uint64_t this)
{
  if (*(_BYTE *)(this + 32))
    return *(unsigned int *)(this + 28);
  __break(1u);
  return this;
}

void webrtc::AudioEncoderOpusImpl::Reset(webrtc::AudioEncoderOpusImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string *v13;
  BOOL v14;
  uint64_t vars0;

  webrtc::AudioEncoderOpusImpl::RecreateEncoderInstance((uint64_t)this, (__int128 *)((char *)this + 8), a3, a4, a5, a6, a7, a8);
  if ((v12 & 1) == 0)
  {
    v13 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 420, "RecreateEncoderInstance(config_)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v8, v9, v10, v11, vars0);
    webrtc::AudioEncoderOpusImpl::SetFec((webrtc::AudioEncoderOpusImpl *)v13, v14);
  }
}

uint64_t webrtc::AudioEncoderOpusImpl::SetFec(webrtc::AudioEncoderOpusImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int **v10;
  int **v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  BOOL v23;

  v8 = a2;
  v10 = (int **)*((_QWORD *)this + 20);
  if ((_DWORD)a2)
  {
    if (!v10)
    {
      v11 = 0;
      goto LABEL_15;
    }
    if (*v10)
    {
      if ((unsigned __int16)opus_encoder_ctl(*v10, 4012, a3, a4, a5, a6, a7, a8, 1))
        goto LABEL_11;
    }
    else if ((unsigned __int16)opus_multistream_encoder_ctl(v10[1], 4012, a3, a4, a5, a6, a7, a8, 1))
    {
LABEL_11:
      v11 = (int **)*((_QWORD *)this + 20);
LABEL_15:
      WebRtcOpus_EnableFec(v11, a2, a3, a4, a5, a6, a7, a8);
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 425, "0 == WebRtcOpus_EnableFec(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v13, v14, v15, v16, 0);
      goto LABEL_16;
    }
LABEL_13:
    *((_BYTE *)this + 36) = v8;
    return 1;
  }
  if (v10)
  {
    if (*v10)
    {
      if (!(unsigned __int16)opus_encoder_ctl(*v10, 4012, a3, a4, a5, a6, a7, a8, 0))
        goto LABEL_13;
    }
    else if (!(unsigned __int16)opus_multistream_encoder_ctl(v10[1], 4012, a3, a4, a5, a6, a7, a8, 0))
    {
      goto LABEL_13;
    }
    v17 = (int **)*((_QWORD *)this + 20);
    goto LABEL_18;
  }
LABEL_16:
  v17 = 0;
LABEL_18:
  WebRtcOpus_DisableFec(v17, a2, a3, a4, a5, a6, a7, a8);
  v22 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 427, "0 == WebRtcOpus_DisableFec(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v18, v19, v20, v21, 0);
  return webrtc::AudioEncoderOpusImpl::SetDtx((webrtc::AudioEncoderOpusImpl *)v22, v23);
}

uint64_t webrtc::AudioEncoderOpusImpl::SetDtx(webrtc::AudioEncoderOpusImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int **v10;
  int **v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;

  v8 = a2;
  v10 = (int **)*((_QWORD *)this + 20);
  if ((_DWORD)a2)
  {
    if (!v10)
    {
      v11 = 0;
      goto LABEL_15;
    }
    if (*v10)
    {
      if ((unsigned __int16)opus_encoder_ctl(*v10, 4016, a3, a4, a5, a6, a7, a8, 1))
        goto LABEL_11;
    }
    else if ((unsigned __int16)opus_multistream_encoder_ctl(v10[1], 4016, a3, a4, a5, a6, a7, a8, 1))
    {
LABEL_11:
      v11 = (int **)*((_QWORD *)this + 20);
LABEL_15:
      WebRtcOpus_EnableDtx(v11, a2, a3, a4, a5, a6, a7, a8);
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 435, "0 == WebRtcOpus_EnableDtx(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v13, v14, v15, v16, 0);
      goto LABEL_16;
    }
LABEL_13:
    *((_BYTE *)this + 60) = v8;
    return 1;
  }
  if (v10)
  {
    if (*v10)
    {
      if (!(unsigned __int16)opus_encoder_ctl(*v10, 4016, a3, a4, a5, a6, a7, a8, 0))
        goto LABEL_13;
    }
    else if (!(unsigned __int16)opus_multistream_encoder_ctl(v10[1], 4016, a3, a4, a5, a6, a7, a8, 0))
    {
      goto LABEL_13;
    }
    v17 = (int **)*((_QWORD *)this + 20);
    goto LABEL_18;
  }
LABEL_16:
  v17 = 0;
LABEL_18:
  WebRtcOpus_DisableDtx(v17, a2, a3, a4, a5, a6, a7, a8);
  v22 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 437, "0 == WebRtcOpus_DisableDtx(inst_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v18, v19, v20, v21, 0);
  return webrtc::AudioEncoderOpusImpl::GetDtx((webrtc::AudioEncoderOpusImpl *)v22);
}

uint64_t webrtc::AudioEncoderOpusImpl::GetDtx(webrtc::AudioEncoderOpusImpl *this)
{
  return *((unsigned __int8 *)this + 60);
}

uint64_t webrtc::AudioEncoderOpusImpl::SetApplication(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  _BYTE v21[21];
  void *__p;
  void *v23;
  char *v24;
  uint64_t v25;

  v10 = *(_OWORD *)(a1 + 24);
  v19 = *(_OWORD *)(a1 + 8);
  v20 = v10;
  *(_OWORD *)v21 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)&v21[13] = *(_QWORD *)(a1 + 53);
  v23 = 0;
  v24 = 0;
  __p = 0;
  v12 = *(_BYTE **)(a1 + 64);
  v11 = *(_BYTE **)(a1 + 72);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      abort();
    v14 = (char *)operator new(v11 - v12);
    v15 = &v14[4 * (v13 >> 2)];
    __p = v14;
    v24 = v15;
    memcpy(v14, v12, v13);
    v23 = v15;
  }
  v25 = *(_QWORD *)(a1 + 88);
  if (a2 <= 1)
    LODWORD(v20) = a2;
  webrtc::AudioEncoderOpusImpl::RecreateEncoderInstance(a1, &v19, a3, a4, a5, a6, a7, a8);
  v17 = v16;
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  return v17;
}

void webrtc::AudioEncoderOpusImpl::SetMaxPlaybackRate(webrtc::AudioEncoderOpusImpl *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21[2];
  _BYTE v22[21];
  void *__p;
  void *v24;
  char *v25;
  uint64_t v26;

  v10 = *(_OWORD *)((char *)this + 24);
  v21[0] = *(_OWORD *)((char *)this + 8);
  v21[1] = v10;
  *(_OWORD *)v22 = *(_OWORD *)((char *)this + 40);
  *(_QWORD *)&v22[13] = *(_QWORD *)((char *)this + 53);
  v24 = 0;
  v25 = 0;
  __p = 0;
  v12 = (_BYTE *)*((_QWORD *)this + 8);
  v11 = (_BYTE *)*((_QWORD *)this + 9);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      goto LABEL_9;
    v14 = (char *)operator new(v11 - v12);
    v15 = &v14[4 * (v13 >> 2)];
    __p = v14;
    v25 = v15;
    memcpy(v14, v12, v13);
    v24 = v15;
  }
  v26 = *((_QWORD *)this + 11);
  *(_DWORD *)v22 = a2;
  webrtc::AudioEncoderOpusImpl::RecreateEncoderInstance((uint64_t)this, v21, a3, a4, a5, a6, a7, a8);
  if ((v20 & 1) == 0)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 463, "RecreateEncoderInstance(conf)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v16, v17, v18, v19, *(uint64_t *)&v21[0]);
LABEL_9:
    abort();
  }
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
}

uint64_t webrtc::AudioEncoderOpusImpl::EnableAudioNetworkAdaptor(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  webrtc::AudioEncoderOpusImpl *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  if (*((char *)a2 + 23) < 0)
  {
    v4 = a2[1];
    if (((unint64_t)v4 & 0x8000000000000000) != 0
      || ((a2 = (uint64_t **)*a2, v4) ? (v5 = a2 == 0) : (v5 = 0), v5))
    {
      __break(1u);
      goto LABEL_14;
    }
  }
  else
  {
    v4 = (uint64_t *)*((unsigned __int8 *)a2 + 23);
  }
  v14[0] = a2;
  v14[1] = v4;
  v13 = a3;
  v6 = *(_QWORD *)(a1 + 224);
  if (!v6)
  {
LABEL_14:
    v11 = (webrtc::AudioEncoderOpusImpl *)std::__throw_bad_function_call[abi:sn180100]();
    return webrtc::AudioEncoderOpusImpl::DisableAudioNetworkAdaptor(v11);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v6 + 48))(&v12, v6, v14, &v13);
  v7 = v12;
  v12 = 0;
  v8 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v12;
    v12 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return *(_QWORD *)(a1 + 232) != 0;
}

uint64_t webrtc::AudioEncoderOpusImpl::DisableAudioNetworkAdaptor(webrtc::AudioEncoderOpusImpl *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void webrtc::AudioEncoderOpusImpl::OnReceivedUplinkPacketLossFraction(webrtc::AudioEncoderOpusImpl *this, float a2)
{
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float v19;
  int **v20;
  double v21;
  uint64_t v22;
  int **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;

  v2 = a2;
  v4 = *((_QWORD *)this + 29);
  if (v4)
  {
    (*(void (**)(uint64_t, float))(*(_QWORD *)v4 + 24))(v4, a2);
    webrtc::AudioEncoderOpusImpl::ApplyAudioNetworkAdaptor(this);
  }
  v5 = *((_QWORD *)this + 24);
  if (rtc::g_clock)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v6 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  v13 = v6 / 1000000;
  v14 = *(float *)(v5 + 12);
  if (v14 != -1.0)
  {
    v15 = v13 - *(_QWORD *)v5;
    v16 = *(float *)(v5 + 8);
    if (v15 != 1)
      v16 = powf(v16, (float)v15);
    v2 = (float)((float)(1.0 - v16) * v2) + (float)(v16 * v14);
  }
  v17 = *(float *)(v5 + 16);
  if (v2 <= v17 || v17 == -1.0)
    v17 = v2;
  *(float *)(v5 + 12) = v17;
  *(_QWORD *)v5 = v13;
  v19 = *(float *)(*((_QWORD *)this + 24) + 12);
  if (v19 == -1.0)
    v19 = 0.0;
  if (v19 < 0.0)
    v19 = 0.0;
  if (v19 > 0.2)
    v19 = 0.2;
  if (*((float *)this + 32) != v19)
  {
    *((float *)this + 32) = v19;
    v20 = (int **)*((_QWORD *)this + 20);
    v21 = (float)(v19 * 100.0) + 0.5;
    v22 = (int)v21;
    if (!v20)
    {
      v23 = 0;
      goto LABEL_32;
    }
    if (*v20)
    {
      if (!(unsigned __int16)opus_encoder_ctl(*v20, 4014, v7, v8, v9, v10, v11, v12, (int)v21))
        return;
      goto LABEL_30;
    }
    if ((unsigned __int16)opus_multistream_encoder_ctl(v20[1], 4014, v7, v8, v9, v10, v11, v12, (int)v21))
    {
LABEL_30:
      v23 = (int **)*((_QWORD *)this + 20);
      v22 = (int)((float)(*((float *)this + 32) * 100.0) + 0.5);
LABEL_32:
      WebRtcOpus_SetPacketLossRate(v23, v22, v7, v8, v9, v10, v11, v12);
      v28 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 736, "0 == WebRtcOpus_SetPacketLossRate( inst_, static_cast<int32_t>(packet_loss_rate_ * 100 + .5))", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v24, v25, v26, v27, 0);
      webrtc::AudioEncoderOpusImpl::ApplyAudioNetworkAdaptor((webrtc::AudioEncoderOpusImpl *)v28);
    }
  }
}

void webrtc::AudioEncoderOpusImpl::ApplyAudioNetworkAdaptor(webrtc::AudioEncoderOpusImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  BOOL v19;
  char v20;
  unint64_t v21;
  char v22;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 29) + 56))(&v16);
  if (BYTE4(v16))
    webrtc::AudioEncoderOpusImpl::SetTargetBitrate(this, v16, v2, v3, v4, v5, v6, v7);
  if (v18)
  {
    v8 = v17;
    if (*((_DWORD *)this + 46) != v17 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v9, v2, v3, v4, v5, v6, v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc");
    *((_DWORD *)this + 46) = v8;
  }
  if (v20)
    webrtc::AudioEncoderOpusImpl::SetDtx(this, v19, v2, v3, v4, v5, v6, v7);
  if (v22)
  {
    v10 = v21;
    if (*((_QWORD *)this + 22) != v21)
    {
      v11 = (int **)*((_QWORD *)this + 20);
      if (!v11)
        goto LABEL_21;
      if (v21)
      {
        if (v21 > 2)
          goto LABEL_21;
        if (!*v11)
          goto LABEL_22;
        if ((unsigned __int16)opus_encoder_ctl(*v11, 4022, v2, v3, v4, v5, v6, v7, v21))
          goto LABEL_20;
LABEL_25:
        *((_QWORD *)this + 22) = v10;
        return;
      }
      if (*v11)
      {
        if (!(unsigned __int16)opus_encoder_ctl(*v11, 4022, v2, v3, v4, v5, v6, v7, 4294966296))
          goto LABEL_25;
      }
      else if (!(unsigned __int16)opus_multistream_encoder_ctl(v11[1], 4022, v2, v3, v4, v5, v6, v7, 4294966296))
      {
        goto LABEL_25;
      }
      do
      {
LABEL_20:
        v11 = (int **)*((_QWORD *)this + 20);
LABEL_21:
        WebRtcOpus_SetForceChannels(v11, v10, v2, v3, v4, v5, v6, v7);
        v11 = (int **)rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 726, "0 == WebRtcOpus_SetForceChannels(inst_, num_channels_to_encode)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v12, v13, v14, v15, 0);
LABEL_22:
        ;
      }
      while ((unsigned __int16)opus_multistream_encoder_ctl(v11[1], 4022, v2, v3, v4, v5, v6, v7, v10));
      goto LABEL_25;
    }
  }
}

void webrtc::AudioEncoderOpusImpl::SetTargetBitrate(webrtc::AudioEncoderOpusImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  int **v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  uint64_t v21;
  int **v22;
  int **v23;
  int **v24;
  uint64_t MultipliedBitrate;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string *v40;

  if ((int)a2 >= 510000)
    v8 = 510000;
  else
    v8 = a2;
  if (v8 <= 6000)
    v9 = 6000;
  else
    v9 = v8;
  if (!*((_BYTE *)this + 32))
    goto LABEL_35;
  if (*((_DWORD *)this + 7) == (_DWORD)v9)
    goto LABEL_19;
  *((_DWORD *)this + 7) = v9;
  *((_BYTE *)this + 32) = 1;
  v11 = (int **)*((_QWORD *)this + 20);
  v12 = v9 / 0x3E8uLL;
  a2 = *((_QWORD *)this + 13);
  a3 = *((_QWORD *)this + 14);
  v13 = (a3 - a2) >> 2;
  v14 = v9;
  if (v13 + 5 > v12)
  {
    if (v13 > v12 - 5)
    {
      v14 = (int)(float)(*(float *)(a2 + 4 * (v12 - 5)) * (float)(int)v9);
      goto LABEL_12;
    }
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
LABEL_12:
  if (!v11)
  {
LABEL_36:
    v23 = 0;
    goto LABEL_37;
  }
  if (*v11)
  {
    if (!(unsigned __int16)opus_encoder_ctl(*v11, 4002, a3, a4, a5, a6, a7, a8, v14))
      goto LABEL_15;
LABEL_32:
    v23 = (int **)*((_QWORD *)this + 20);
    a2 = *((_QWORD *)this + 13);
    a3 = *((_QWORD *)this + 14);
LABEL_37:
    WebRtcOpus_SetBitRate(v23, MultipliedBitrate, v26, v27, v28, v29, v30, v31);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 750, "0 == WebRtcOpus_SetBitRate( inst_, GetMultipliedBitrate(bitrate, bitrate_multipliers_))", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v32, v33, v34, v35, 0);
    goto LABEL_38;
  }
  if ((unsigned __int16)opus_multistream_encoder_ctl(v11[1], 4002, a3, a4, a5, a6, a7, a8, v14))
    goto LABEL_32;
LABEL_15:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, a2, a3, a4, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc");
  *((_BYTE *)this + 102) = 1;
  if (!*((_BYTE *)this + 32))
    goto LABEL_35;
  LODWORD(v9) = *((_DWORD *)this + 7);
LABEL_19:
  v15 = *((_DWORD *)this + 13);
  v16 = *((_DWORD *)this + 14);
  v17 = v15 - v16;
  v18 = v16 + v15;
  if ((int)v9 <= v15)
    v19 = (char *)this + 48;
  else
    v19 = (char *)this + 44;
  if ((int)v9 >= v17 && (int)v9 <= v18)
    return;
  v21 = *(unsigned int *)v19;
  if (*((_DWORD *)this + 47) == (_DWORD)v21)
    return;
  *((_DWORD *)this + 47) = v21;
  v22 = (int **)*((_QWORD *)this + 20);
  if (!v22)
  {
LABEL_38:
    v24 = 0;
    goto LABEL_39;
  }
  if (*v22)
  {
    if (!(unsigned __int16)opus_encoder_ctl(*v22, 4010, a3, a4, a5, a6, a7, a8, v21))
      return;
    goto LABEL_34;
  }
  if ((unsigned __int16)opus_multistream_encoder_ctl(v22[1], 4010, a3, a4, a5, a6, a7, a8, v21))
  {
LABEL_34:
    v24 = (int **)*((_QWORD *)this + 20);
    v21 = *((unsigned int *)this + 47);
LABEL_39:
    WebRtcOpus_SetComplexity(v24, v21, a3, a4, a5, a6, a7, a8);
    v40 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 758, "0 == WebRtcOpus_SetComplexity(inst_, complexity_)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v36, v37, v38, v39, 0);
    webrtc::AudioEncoderOpusImpl::OnReceivedUplinkBandwidth((webrtc::AudioEncoderOpusImpl *)v40);
  }
}

void webrtc::AudioEncoderOpusImpl::OnReceivedUplinkBandwidth(webrtc::AudioEncoderOpusImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  char v11;
  char v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;

  v8 = a2;
  v10 = *((_QWORD *)this + 29);
  if (v10)
  {
    v11 = a6;
    v13 = a4;
    v14 = a3;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, a2);
    if (*((_BYTE *)this + 100))
    {
      if (v11)
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 29) + 16))(*((_QWORD *)this + 29), a5);
    }
    else
    {
      if (v13)
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 32) + 32))(*((_QWORD *)this + 32), (4 * v14));
      (*(void (**)(_QWORD, float))(**((_QWORD **)this + 32) + 16))(*((_QWORD *)this + 32), (float)v8);
    }
    webrtc::AudioEncoderOpusImpl::ApplyAudioNetworkAdaptor(this);
  }
  else if (*((_BYTE *)this + 248))
  {
    v15 = *((_DWORD *)this + 2);
    if (v15 % 10)
    {
      v25 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, (v15 % 10));
      webrtc::AudioEncoderOpusImpl::OnReceivedUplinkBandwidth(v25);
    }
    else
    {
      v16 = a2 - 800 * *((_QWORD *)this + 30) / (unint64_t)(v15 / 10);
      if (v16 <= 6000)
        v16 = 6000;
      if (v16 >= 0x7C830)
        v17 = 510000;
      else
        v17 = v16;
      webrtc::AudioEncoderOpusImpl::SetTargetBitrate(this, v17, a3, a4, a5, a6, a7, a8);
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc");
  }
}

void webrtc::AudioEncoderOpusImpl::OnReceivedUplinkBandwidth(webrtc::AudioEncoderOpusImpl *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  webrtc::AudioEncoderOpusImpl::OnReceivedUplinkBandwidth(a1, a2, a3, a4, 0, 0, a7, a8);
}

void webrtc::AudioEncoderOpusImpl::OnReceivedUplinkAllocation(webrtc::AudioEncoderOpusImpl *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = a2[4];
  v9 = v8 / 0x3E8uLL;
  if (v8 % 0x3E8uLL > 0x1F3)
    ++v9;
  if (-v8 % 0x3E8uLL <= 0x1F4)
    v10 = 0;
  else
    v10 = -1;
  if (v8 < 0)
    v11 = v10 - -v8 / 0x3E8uLL;
  else
    v11 = v9;
  webrtc::AudioEncoderOpusImpl::OnReceivedUplinkBandwidth(a1, *a2, v11, 1, a2[1], 1, a7, a8);
}

void webrtc::AudioEncoderOpusImpl::OnReceivedRtt(webrtc::AudioEncoderOpusImpl *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 29);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    webrtc::AudioEncoderOpusImpl::ApplyAudioNetworkAdaptor(this);
  }
}

void webrtc::AudioEncoderOpusImpl::OnReceivedOverhead(webrtc::AudioEncoderOpusImpl *this, uint64_t a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 29);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    webrtc::AudioEncoderOpusImpl::ApplyAudioNetworkAdaptor(this);
  }
  else
  {
    *((_QWORD *)this + 30) = a2;
    *((_BYTE *)this + 248) = 1;
  }
}

uint64_t *webrtc::AudioEncoderOpusImpl::SetReceiverFrameLengthRange(webrtc::AudioEncoderOpusImpl *this, int a2, int a3)
{
  uint64_t *result;
  uint64_t v6;
  uint64_t *v7;

  v6 = *((_QWORD *)this + 8);
  result = (uint64_t *)((char *)this + 64);
  result[1] = v6;
  v7 = result;
  if (a2 <= 20 && a3 >= 20)
  if (a2 <= 40 && a3 >= 40)
    result = std::back_insert_iterator<std::vector<int>>::operator=[abi:sn180100]((uint64_t *)&v7, &dword_208F05024);
  if (a2 <= 60 && a3 >= 60)
    return std::back_insert_iterator<std::vector<int>>::operator=[abi:sn180100]((uint64_t *)&v7, &dword_208F05028);
  return result;
}

unint64_t webrtc::AudioEncoderOpusImpl::EncodeImpl@<X0>(unint64_t __src@<X2>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int **v44;
  int **v45;
  int v46;
  BOOL v47;
  int v48;
  int v49;
  int v50;
  int **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::string *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;

  if (*(_QWORD *)(a2 + 232) && !*(_BYTE *)(a2 + 100))
  {
    if (rtc::g_clock)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v12 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    v13 = v12 / 1000000;
    if (!*(_BYTE *)(a2 + 272) || v13 - *(_QWORD *)(a2 + 264) >= *(int *)(a2 + 88))
    {
      v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 256) + 24))(*(_QWORD *)(a2 + 256));
      if ((v14 & 0xFF00000000) != 0)
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 232) + 16))(*(_QWORD *)(a2 + 232), (int)*(float *)&v14);
      *(_QWORD *)(a2 + 264) = v13;
      *(_BYTE *)(a2 + 272) = 1;
    }
  }
  v15 = *(char **)(a2 + 144);
  if (*(char **)(a2 + 136) == v15)
    *(_DWORD *)(a2 + 168) = a3;
  std::vector<short>::__insert_with_size[abi:sn180100]<short const*,short const*>(a2 + 136, v15, (char *)__src, (char *)(__src + 2 * a4), (2 * a4) >> 1);
  result = *(unsigned int *)(a2 + 8);
  v23 = (int)result / 10;
  v24 = ((int)result % 10);
  if ((_DWORD)v24)
    goto LABEL_71;
  v25 = *(_DWORD *)(a2 + 12);
  v26 = v25 / 100;
  if (v25 % 100)
  {
    result = (unint64_t)rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, (uint64_t)v18, v19, v20, v21, (v25 % 100));
    goto LABEL_73;
  }
  v27 = *(_QWORD *)(a2 + 136);
  v24 = *(_QWORD *)(a2 + 144);
  __src = (v24 - v27) >> 1;
  v28 = v23 * (uint64_t)v26 * *(_QWORD *)(a2 + 16);
  if (__src < v28)
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_WORD *)(a6 + 16) = 256;
    *(_QWORD *)(a6 + 20) = 0;
    *(_QWORD *)(a6 + 36) = 0;
    *(_QWORD *)(a6 + 28) = 0;
    *(_DWORD *)(a6 + 44) = 0;
    return result;
  }
  if (__src != v28)
    goto LABEL_73;
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_70;
  v29 = 20 * v23 * (uint64_t)(*(_DWORD *)(a2 + 28) / 8000 + 1);
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 24) = 0;
  v31 = *(_QWORD *)a5;
  v30 = *(_QWORD *)(a5 + 8);
  v32 = v29 + *(_QWORD *)a5;
  if (v30 < v32)
  {
    if (v30 + (v30 >> 1) <= v32)
      v33 = v29 + *(_QWORD *)a5;
    else
      v33 = v30 + (v30 >> 1);
    v34 = (void *)operator new[]();
    v35 = v34;
    v36 = *(_QWORD *)(a5 + 16);
    if (v36)
    {
      memcpy(v34, *(const void **)(a5 + 16), *(_QWORD *)a5);
      *(_QWORD *)(a5 + 16) = v35;
      MEMORY[0x20BD0ADD4](v36, 0x1000C8077774924);
    }
    else
    {
      *(_QWORD *)(a5 + 16) = v34;
    }
    *(_QWORD *)(a5 + 8) = v33;
    v27 = *(_QWORD *)(a2 + 136);
    v24 = *(_QWORD *)(a2 + 144);
    __src = (v24 - v27) >> 1;
  }
  *(_QWORD *)a5 = v32;
  v18 = v29 ? (unsigned __int8 *)(*(_QWORD *)(a5 + 16) + v31) : 0;
  if (v24 == v27)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    result = (unint64_t)rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, (uint64_t)v18, v19, v20, v21, v24);
LABEL_73:
    webrtc::AudioEncoderMultiChannelOpusImpl::Num10msFramesPerPacket((webrtc::AudioEncoderMultiChannelOpusImpl *)result, v27, v16, v17, (uint64_t)v18, v19, v20, v21);
    webrtc::AudioEncoderOpusImpl::SamplesPer10msFrame((webrtc::AudioEncoderOpusImpl *)a2, v52, v53, v54, v55, v56, v57, v58);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 593, "input_buffer_.size() == Num10msFramesPerPacket() * SamplesPer10msFrame()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v59, v60, v61, v62, __src);
    goto LABEL_74;
  }
  v37 = *(_QWORD *)(a2 + 16);
  v38 = __src % v37;
  if (__src % v37)
  {
LABEL_74:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, (uint64_t)v18, v19, v20, v21, v38);
LABEL_75:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 604, "status >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, (uint64_t)v18, v19, v20, v21, __src);
    goto LABEL_76;
  }
  if (v29 >= 0x7FFF)
    v39 = 0x7FFFLL;
  else
    v39 = v29;
  result = WebRtcOpus_Encode(*(_QWORD *)(a2 + 160), v27, __src / v37, v39, v18);
  __src = result;
  if ((result & 0x80000000) != 0)
    goto LABEL_75;
  v42 = result;
  if (v29 < result)
  {
LABEL_76:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/buffer.h", 328, "written_elements <= max_elements", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, (uint64_t)v18, v19, v20, v21, v42);
    goto LABEL_77;
  }
  *(_QWORD *)a5 = v31 + result;
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + 184);
  if (*(_BYTE *)(a2 + 101) && *(_BYTE *)(a2 + 102))
  {
    v24 = *(unsigned __int8 *)(a2 + 32);
    if (*(_BYTE *)(a2 + 32))
    {
      v43 = *(_DWORD *)(a2 + 28);
      if (v43 > 11000)
      {
        a5 = 4294966296;
        v44 = *(int ***)(a2 + 160);
        if (!v44)
          goto LABEL_69;
LABEL_55:
        if (*v44)
        {
          result = opus_encoder_ctl(*v44, 4008, v40, v41, (uint64_t)v18, v19, v20, v21, a5);
          if ((_WORD)result)
            goto LABEL_77;
          goto LABEL_59;
        }
        result = opus_multistream_encoder_ctl(v44[1], 4008, v40, v41, (uint64_t)v18, v19, v20, v21, a5);
        if (!(_WORD)result)
        {
LABEL_59:
          *(_BYTE *)(a2 + 102) = 0;
          goto LABEL_60;
        }
LABEL_77:
        v51 = *(int ***)(a2 + 160);
        goto LABEL_78;
      }
      v45 = *(int ***)(a2 + 160);
      if (v45)
      {
        v75 = 0;
        if (*v45)
          result = opus_encoder_ctl(*v45, 4009, v40, v41, (uint64_t)v18, v19, v20, v21, (uint64_t)&v75);
        else
          result = opus_multistream_encoder_ctl(v45[1], 4009, v40, v41, (uint64_t)v18, v19, v20, v21, (uint64_t)&v75);
        v46 = v75;
        if ((_DWORD)result)
          v46 = -1;
      }
      else
      {
        v46 = -1;
      }
      if (v43 < 9001 || v46 >= 1103)
      {
        if (v43 > 7999 || v46 < 1102)
          goto LABEL_59;
        a5 = 1101;
        v44 = *(int ***)(a2 + 160);
        if (v44)
          goto LABEL_55;
      }
      else
      {
        a5 = 1103;
        v44 = *(int ***)(a2 + 160);
        if (v44)
          goto LABEL_55;
      }
LABEL_69:
      v51 = 0;
LABEL_78:
      WebRtcOpus_SetBandwidth(v51, a5, v40, v41, (uint64_t)v18, v19, v20, v21);
      v67 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/opus/audio_encoder_opus.cc", 618, "0 == WebRtcOpus_SetBandwidth(inst_, *bandwidth)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v63, v64, v65, v66, 0);
      return webrtc::AudioEncoderOpusImpl::SamplesPer10msFrame((webrtc::AudioEncoderOpusImpl *)v67, v68, v69, v70, v71, v72, v73, v74);
    }
    goto LABEL_70;
  }
LABEL_60:
  v47 = __src > 2;
  v48 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a6 + 12) = v48;
  *(_BYTE *)(a6 + 16) = 1;
  v49 = *(_DWORD *)(a2 + 280);
  if (__src <= 2)
    v50 = v49 + 1;
  else
    v50 = 0;
  if (v49 == 20)
    v47 = 0;
  *(_BYTE *)(a6 + 17) = v47;
  *(_DWORD *)(a6 + 20) = 1;
  *(_DWORD *)(a2 + 280) = v50;
  return result;
}

uint64_t webrtc::AudioEncoderOpusImpl::SamplesPer10msFrame(webrtc::AudioEncoderOpusImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;

  v8 = *((_DWORD *)this + 3);
  if (!(v8 % 100))
    return *((_QWORD *)this + 2) * (v8 / 100);
  v10 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, (v8 % 100));
}

uint64_t webrtc::`anonymous namespace'::GetMultipliedBitrate(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = result / 0x3E8uLL;
  v4 = (a3 - a2) >> 2;
  if (v4 + 5 > v3)
  {
    v5 = v3 - 5;
    if (v4 <= v5)
      __break(1u);
    else
      return (int)(float)(*(float *)(a2 + 4 * v5) * (float)(int)result);
  }
  return result;
}

uint64_t webrtc::AudioEncoderOpusImpl::GetANAStats@<X0>(webrtc::AudioEncoderOpusImpl *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 29);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  *a2 = 0;
  a2[4] = 0;
  a2[8] = 0;
  a2[12] = 0;
  a2[16] = 0;
  a2[20] = 0;
  a2[24] = 0;
  a2[28] = 0;
  a2[32] = 0;
  a2[36] = 0;
  a2[40] = 0;
  a2[44] = 0;
  a2[48] = 0;
  a2[52] = 0;
  return result;
}

uint64_t webrtc::AudioEncoderOpusImpl::GetFrameLengthRange@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(this + 232))
  {
    v3 = *(int **)(this + 64);
    v2 = *(int **)(this + 72);
    if (v3 == v2)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 16) = 0;
    }
    else
    {
      v4 = 1000 * *(v2 - 1);
      *(_QWORD *)a2 = 1000 * *v3;
      *(_QWORD *)(a2 + 8) = v4;
      *(_BYTE *)(a2 + 16) = 1;
    }
  }
  else
  {
    v5 = 1000 * *(int *)(this + 8);
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return this;
}

void std::__function::__func<webrtc::AudioEncoderOpusImpl::AudioEncoderOpusImpl(webrtc::AudioEncoderOpusConfig const&,int)::$_0,std::allocator<webrtc::AudioEncoderOpusImpl::AudioEncoderOpusImpl(webrtc::AudioEncoderOpusConfig const&,int)::$_0>,std::unique_ptr<webrtc::AudioNetworkAdaptor> ()(std::string_view,webrtc::RtcEventLog *)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::AudioEncoderOpusImpl::AudioEncoderOpusImpl(webrtc::AudioEncoderOpusConfig const&,int)::$_0,std::allocator<webrtc::AudioEncoderOpusImpl::AudioEncoderOpusImpl(webrtc::AudioEncoderOpusConfig const&,int)::$_0>,std::unique_ptr<webrtc::AudioNetworkAdaptor> ()(std::string_view,webrtc::RtcEventLog *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0ADBC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::AudioEncoderOpusImpl::AudioEncoderOpusImpl(webrtc::AudioEncoderOpusConfig const&,int)::$_0,std::allocator<webrtc::AudioEncoderOpusImpl::AudioEncoderOpusImpl(webrtc::AudioEncoderOpusConfig const&,int)::$_0>,std::unique_ptr<webrtc::AudioNetworkAdaptor> ()(std::string_view,webrtc::RtcEventLog *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0ADBC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::AudioEncoderOpusImpl::AudioEncoderOpusImpl(webrtc::AudioEncoderOpusConfig const&,int)::$_0,std::allocator<webrtc::AudioEncoderOpusImpl::AudioEncoderOpusImpl(webrtc::AudioEncoderOpusConfig const&,int)::$_0>,std::unique_ptr<webrtc::AudioNetworkAdaptor> ()(std::string_view,webrtc::RtcEventLog *)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  result = operator new();
  if (*(_BYTE *)(v4 + 32))
  {
    v7 = result;
    *(_QWORD *)result = &unk_24C0AE1B0;
    *(_QWORD *)(result + 8) = v5;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (v5)
    {
      result = operator new();
      *(_QWORD *)result = v5;
      *(_DWORD *)(result + 8) = 5000;
      *(_QWORD *)(result + 12) = 0x3F0000003E800000;
      *(_BYTE *)(result + 24) = 0;
      *(_BYTE *)(result + 28) = 0;
      *(_BYTE *)(result + 32) = 0;
      *(_BYTE *)(result + 36) = 0;
      *(_BYTE *)(result + 40) = 0;
      *(_BYTE *)(result + 44) = 0;
      *(_BYTE *)(result + 56) = 0;
      *(_BYTE *)(result + 64) = 0;
      *(_BYTE *)(result + 72) = 0;
      *(_DWORD *)(result + 48) = 0;
    }
    else
    {
      result = 0;
    }
    *(_QWORD *)(v7 + 32) = result;
    *(_BYTE *)(v7 + 40) = 0;
    *(_BYTE *)(v7 + 44) = 0;
    *(_BYTE *)(v7 + 48) = 0;
    *(_BYTE *)(v7 + 52) = 0;
    *(_BYTE *)(v7 + 56) = 0;
    *(_BYTE *)(v7 + 60) = 0;
    *(_BYTE *)(v7 + 64) = 0;
    *(_BYTE *)(v7 + 68) = 0;
    *(_BYTE *)(v7 + 72) = 0;
    *(_BYTE *)(v7 + 80) = 0;
    *(_BYTE *)(v7 + 88) = 0;
    *(_BYTE *)(v7 + 144) = 0;
    *(_BYTE *)(v7 + 152) = 0;
    *(_BYTE *)(v7 + 156) = 0;
    *(_BYTE *)(v7 + 160) = 0;
    *(_BYTE *)(v7 + 164) = 0;
    *(_BYTE *)(v7 + 168) = 0;
    *(_BYTE *)(v7 + 172) = 0;
    *(_BYTE *)(v7 + 176) = 0;
    *(_BYTE *)(v7 + 180) = 0;
    *(_BYTE *)(v7 + 184) = 0;
    *(_BYTE *)(v7 + 188) = 0;
    *(_BYTE *)(v7 + 192) = 0;
    *(_BYTE *)(v7 + 196) = 0;
    *(_BYTE *)(v7 + 200) = 0;
    *(_BYTE *)(v7 + 204) = 0;
    *a3 = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t webrtc::AudioEncoderPcm::SampleRateHz(webrtc::AudioEncoderPcm *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t webrtc::AudioEncoderPcm::NumChannels(webrtc::AudioEncoderPcm *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t webrtc::AudioEncoderPcm::Num10MsFramesInNextPacket(webrtc::AudioEncoderPcm *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t webrtc::AudioEncoderPcm::Max10MsFramesInAPacket(webrtc::AudioEncoderPcm *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t webrtc::AudioEncoderPcm::GetTargetBitrate(webrtc::AudioEncoderPcm *this)
{
  int v2;
  int v3;

  v2 = (*(uint64_t (**)(webrtc::AudioEncoderPcm *))(*(_QWORD *)this + 248))(this);
  v3 = v2 * (*(uint64_t (**)(webrtc::AudioEncoderPcm *))(*(_QWORD *)this + 16))(this);
  return 8 * v3 * (*(unsigned int (**)(webrtc::AudioEncoderPcm *))(*(_QWORD *)this + 24))(this);
}

char *webrtc::AudioEncoderPcm::EncodeImpl@<X0>(_QWORD *a1@<X0>, int a2@<W1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  char *v11;
  char *v12;
  char *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;

  v12 = (char *)a1[6];
  v11 = (char *)a1[7];
  v10 = (uint64_t)(a1 + 6);
  if (v12 == v11)
    *((_DWORD *)a1 + 18) = a2;
  result = std::vector<short>::__insert_with_size[abi:sn180100]<short const*,short const*>(v10, v11, a3, &a3[2 * a4], (2 * a4) >> 1);
  v18 = a1[5];
  v19 = (uint64_t)(a1[7] - a1[6]) >> 1;
  if (v19 < v18)
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_WORD *)(a6 + 16) = 256;
    *(_QWORD *)(a6 + 20) = 0;
    *(_QWORD *)(a6 + 36) = 0;
    *(_QWORD *)(a6 + 28) = 0;
    *(_DWORD *)(a6 + 44) = 0;
    return result;
  }
  if (v19 != v18)
    goto LABEL_18;
  *(_WORD *)(a6 + 16) = 256;
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = 0;
  *(_QWORD *)(a6 + 24) = 0;
  v20 = *((_DWORD *)a1 + 6);
  *(_DWORD *)(a6 + 8) = *((_DWORD *)a1 + 18);
  *(_DWORD *)(a6 + 12) = v20;
  v21 = (*(uint64_t (**)(_QWORD *))(*a1 + 248))(a1);
  v22 = v21 * v19;
  v24 = *(_QWORD *)a5;
  v23 = *(_QWORD *)(a5 + 8);
  v25 = *(_QWORD *)a5 + v21 * v19;
  if (v23 < v25)
  {
    v26 = v23 + (v23 >> 1);
    if (v26 <= v25)
      v19 = *(_QWORD *)a5 + v21 * v19;
    else
      v19 = v26;
    v27 = (void *)operator new[]();
    v28 = v27;
    v29 = *(_QWORD *)(a5 + 16);
    if (v29)
    {
      memcpy(v27, *(const void **)(a5 + 16), *(_QWORD *)a5);
      *(_QWORD *)(a5 + 16) = v28;
      MEMORY[0x20BD0ADD4](v29, 0x1000C8077774924);
    }
    else
    {
      *(_QWORD *)(a5 + 16) = v27;
    }
    *(_QWORD *)(a5 + 8) = v19;
  }
  *(_QWORD *)a5 = v25;
  if (a1[7] == a1[6])
  {
    __break(1u);
LABEL_18:
    v30 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/codecs/g711/audio_encoder_pcm.cc", 73, "speech_buffer_.size() == full_frame_samples_", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v14, v15, v16, v17, v19);
    goto LABEL_19;
  }
  v30 = (std::string *)(*(uint64_t (**)(_QWORD *))(*a1 + 240))(a1);
  if ((unint64_t)v30 <= v22)
  {
    *(_QWORD *)a5 = (char *)v30 + v24;
    *(_QWORD *)a6 = v30;
    a1[7] = a1[6];
    result = (char *)(*(uint64_t (**)(_QWORD *))(*a1 + 256))(a1);
    *(_DWORD *)(a6 + 20) = (_DWORD)result;
    return result;
  }
LABEL_19:
  v35 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/buffer.h", 328, "written_elements <= max_elements", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v31, v32, v33, v34, (uint64_t)v30);
  return (char *)webrtc::AudioEncoderPcm::Reset((uint64_t)v35);
}

uint64_t webrtc::AudioEncoderPcm::Reset(uint64_t this)
{
  *(_QWORD *)(this + 56) = *(_QWORD *)(this + 48);
  return this;
}

uint64_t webrtc::AudioEncoderPcm::GetFrameLengthRange@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = 10000 * *(_QWORD *)(this + 32);
  *(_QWORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = 1;
  return this;
}

unint64_t webrtc::AudioEncoderPcmA::EncodeCall(webrtc::AudioEncoderPcmA *this, unsigned __int8 *a2, unint64_t a3, int8x16_t *a4)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  const __int16 *v8;
  BOOL v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  char v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  unint64_t v30;
  int8x16_t v31;
  int8x16_t *v32;
  unsigned __int8 *v33;
  int8x16_t v34;
  int16x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int8x16_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int32x4_t v97;
  int8x16_t v98;
  int32x4_t v99;
  unint64_t v100;
  const __int16 *v101;
  unsigned __int8 *v102;
  unint64_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int8x16_t v118;
  int8x16_t v119;
  uint32x4_t v120;
  uint32x4_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int8x16x2_t v144;
  int8x16x4_t v145;

  result = a3;
  if (!a3)
    return result;
  if (a3 >= 8 && (&a2[2 * a3] <= (unsigned __int8 *)a4 || &a4->i8[a3] <= (__int8 *)a2))
  {
    if (a3 >= 0x10)
    {
      v5 = a3 & 0xFFFFFFFFFFFFFFF0;
      v21.i64[0] = 0x800000008;
      v21.i64[1] = 0x800000008;
      v22.i64[0] = 0xF0F0F0F0F0F0F0F0;
      v22.i64[1] = 0xF0F0F0F0F0F0F0F0;
      v23.i64[0] = 0x400000004;
      v23.i64[1] = 0x400000004;
      v24.i64[0] = 0xCCCCCCCCCCCCCCCCLL;
      v24.i64[1] = 0xCCCCCCCCCCCCCCCCLL;
      v25.i64[0] = 0xAAAAAAAAAAAAAAAALL;
      v25.i64[1] = 0xAAAAAAAAAAAAAAAALL;
      v26.i64[0] = 0xF0000000FLL;
      v26.i64[1] = 0xF0000000FLL;
      v27.i64[0] = 0x600000006;
      v27.i64[1] = 0x600000006;
      v28.i64[0] = 0x300000003;
      v28.i64[1] = 0x300000003;
      v29.i64[0] = 0x7F0000007FLL;
      v29.i64[1] = 0x7F0000007FLL;
      v30 = a3 & 0xFFFFFFFFFFFFFFF0;
      v31.i64[0] = 0xD5000000D5;
      v31.i64[1] = 0xD5000000D5;
      v32 = a4;
      v33 = a2;
      v34.i64[0] = 0x5500000055;
      v34.i64[1] = 0x5500000055;
      do
      {
        v35 = *((int16x8_t *)v33 + 1);
        v36 = vmovl_s16(*(int16x4_t *)v33);
        v37 = vmovl_s16(*(int16x4_t *)v35.i8);
        v38 = vmovl_high_s16(*(int16x8_t *)v33);
        v39 = vmovl_high_s16(v35);
        v40 = (int8x16_t)vcltzq_s32(v39);
        v41 = (int8x16_t)vcltzq_s32(v38);
        v42 = (int8x16_t)vcltzq_s32(v37);
        v43 = (int8x16_t)vcltzq_s32(v36);
        v44 = (uint32x4_t)veorq_s8(v43, (int8x16_t)v36);
        v45 = (uint32x4_t)veorq_s8(v42, (int8x16_t)v37);
        v46 = (uint32x4_t)veorq_s8(v41, (int8x16_t)v38);
        v47 = (uint32x4_t)veorq_s8(v40, (int8x16_t)v39);
        v48 = (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)&v47 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v49 = (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)&v44 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v50 = vbslq_s8(v49, (int8x16_t)(*(_OWORD *)&v44 | __PAIR128__(0xFF000000FFLL, 0xFF000000FFLL)), (int8x16_t)(*(_OWORD *)&v44 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v51 = (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)&v45 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v52 = vbslq_s8(v51, (int8x16_t)(*(_OWORD *)&v45 | __PAIR128__(0xFF000000FFLL, 0xFF000000FFLL)), (int8x16_t)(*(_OWORD *)&v45 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v53 = (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)&v46 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v54 = vbslq_s8(v53, (int8x16_t)(*(_OWORD *)&v46 | __PAIR128__(0xFF000000FFLL, 0xFF000000FFLL)), (int8x16_t)(*(_OWORD *)&v46 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v55 = vbslq_s8(v48, (int8x16_t)(*(_OWORD *)&v47 | __PAIR128__(0xFF000000FFLL, 0xFF000000FFLL)), (int8x16_t)(*(_OWORD *)&v47 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v56 = vbicq_s8(v21, v48);
        v57 = vbicq_s8(v21, v53);
        v58 = vbicq_s8(v21, v51);
        v59 = vbicq_s8(v21, v49);
        v60 = (int32x4_t)vandq_s8(v55, v22);
        v61 = (int8x16_t)vceqzq_s32(v60);
        v62 = vbslq_s8(v61, v55, (int8x16_t)v60);
        v63 = vbslq_s8(v61, v56, (int8x16_t)(*(_OWORD *)&v56 | __PAIR128__(0x400000004, 0x400000004)));
        v64 = (int32x4_t)vandq_s8(v54, v22);
        v65 = (int8x16_t)vceqzq_s32(v64);
        v66 = vbslq_s8(v65, v54, (int8x16_t)v64);
        v67 = vbslq_s8(v65, v57, (int8x16_t)(*(_OWORD *)&v57 | __PAIR128__(0x400000004, 0x400000004)));
        v68 = (int32x4_t)vandq_s8(v52, v22);
        v69 = (int8x16_t)vceqzq_s32(v68);
        v70 = vbslq_s8(v69, v52, (int8x16_t)v68);
        v71 = vbslq_s8(v69, v58, (int8x16_t)(*(_OWORD *)&v58 | __PAIR128__(0x400000004, 0x400000004)));
        v72 = (int32x4_t)vandq_s8(v50, v22);
        v73 = (int8x16_t)vceqzq_s32(v72);
        v74 = vbslq_s8(v73, v50, (int8x16_t)v72);
        v75 = vbslq_s8(v73, v59, (int8x16_t)(*(_OWORD *)&v59 | __PAIR128__(0x400000004, 0x400000004)));
        v76 = (int32x4_t)vandq_s8(v62, v24);
        v77 = (int8x16_t)vceqzq_s32(v76);
        v78 = (int32x4_t)vbslq_s8(v77, v62, (int8x16_t)v76);
        v79 = (int32x4_t)vbslq_s8(v77, v63, (int8x16_t)(*(_OWORD *)&v63 | __PAIR128__(0x200000002, 0x200000002)));
        v80 = (int32x4_t)vandq_s8(v66, v24);
        v81 = (int8x16_t)vceqzq_s32(v80);
        v82 = (int32x4_t)vbslq_s8(v81, v66, (int8x16_t)v80);
        v83 = (int32x4_t)vbslq_s8(v81, v67, (int8x16_t)(*(_OWORD *)&v67 | __PAIR128__(0x200000002, 0x200000002)));
        v84 = (int32x4_t)vandq_s8(v70, v24);
        v85 = (int8x16_t)vceqzq_s32(v84);
        v86 = (int32x4_t)vbslq_s8(v85, v70, (int8x16_t)v84);
        v87 = (int32x4_t)vbslq_s8(v85, v71, (int8x16_t)(*(_OWORD *)&v71 | __PAIR128__(0x200000002, 0x200000002)));
        v88 = (int32x4_t)vandq_s8(v74, v24);
        v89 = (int8x16_t)vceqzq_s32(v88);
        v90 = vsubq_s32((int32x4_t)vbslq_s8(v89, v75, (int8x16_t)(*(_OWORD *)&v75 | __PAIR128__(0x200000002, 0x200000002))), vtstq_s32((int32x4_t)vbslq_s8(v89, v74, (int8x16_t)v88), v25));
        v91 = vsubq_s32(v87, vtstq_s32(v86, v25));
        v92 = vsubq_s32(v83, vtstq_s32(v82, v25));
        v93 = vsubq_s32(v79, vtstq_s32(v78, v25));
        v94 = vaddq_s32(v93, v27);
        v95 = vaddq_s32(v92, v27);
        v96 = (int8x16_t)vsliq_n_s32((int32x4_t)vshlq_u32(v47, (uint32x4_t)vnegq_s32((int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32(v94), v23, (int8x16_t)vaddq_s32(v93, v28)))), v94, 4uLL);
        v97 = vaddq_s32(v91, v27);
        v145.val[3] = veorq_s8(vbslq_s8((int8x16_t)vceqq_s32(v93, v26), v29, v96), vbslq_s8(v40, v34, v31));
        v145.val[1] = veorq_s8(vbslq_s8((int8x16_t)vceqq_s32(v92, v26), v29, (int8x16_t)vsliq_n_s32((int32x4_t)vshlq_u32(v46, (uint32x4_t)vnegq_s32((int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32(v95), v23, (int8x16_t)vaddq_s32(v92, v28)))), v95, 4uLL)), vbslq_s8(v41, v34, v31));
        v98 = vbslq_s8((int8x16_t)vceqq_s32(v91, v26), v29, (int8x16_t)vsliq_n_s32((int32x4_t)vshlq_u32(v45, (uint32x4_t)vnegq_s32((int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32(v97), v23, (int8x16_t)vaddq_s32(v91, v28)))), v97, 4uLL));
        v99 = vaddq_s32(v90, v27);
        v145.val[2] = veorq_s8(v98, vbslq_s8(v42, v34, v31));
        v145.val[0] = veorq_s8(vbslq_s8((int8x16_t)vceqq_s32(v90, v26), v29, (int8x16_t)vsliq_n_s32((int32x4_t)vshlq_u32(v44, (uint32x4_t)vnegq_s32((int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32(v99), v23, (int8x16_t)vaddq_s32(v90, v28)))), v99, 4uLL)), vbslq_s8(v43, v34, v31));
        *v32++ = vqtbl4q_s8(v145, (int8x16_t)xmmword_208F05040);
        v33 += 32;
        v30 -= 16;
      }
      while (v30);
      if (v5 == a3)
        return result;
      if ((a3 & 8) == 0)
        goto LABEL_6;
    }
    else
    {
      v5 = 0;
    }
    v100 = v5;
    v5 = a3 & 0xFFFFFFFFFFFFFFF8;
    v101 = (const __int16 *)&a2[2 * v100];
    v102 = &a4->u8[v100];
    v103 = v100 - (a3 & 0xFFFFFFFFFFFFFFF8);
    v104.i64[0] = 0x800000008;
    v104.i64[1] = 0x800000008;
    v105.i64[0] = 0xF0F0F0F0F0F0F0F0;
    v105.i64[1] = 0xF0F0F0F0F0F0F0F0;
    v106.i64[0] = 0x400000004;
    v106.i64[1] = 0x400000004;
    v107.i64[0] = 0xCCCCCCCCCCCCCCCCLL;
    v107.i64[1] = 0xCCCCCCCCCCCCCCCCLL;
    v108.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v108.i64[1] = 0xAAAAAAAAAAAAAAAALL;
    v109.i64[0] = 0xF0000000FLL;
    v109.i64[1] = 0xF0000000FLL;
    v110.i64[0] = 0x600000006;
    v110.i64[1] = 0x600000006;
    v111.i64[0] = 0x300000003;
    v111.i64[1] = 0x300000003;
    v112.i64[0] = 0x7F0000007FLL;
    v112.i64[1] = 0x7F0000007FLL;
    v113.i64[0] = 0xD5000000D5;
    v113.i64[1] = 0xD5000000D5;
    v114.i64[0] = 0x5500000055;
    v114.i64[1] = 0x5500000055;
    do
    {
      v115 = *(int16x8_t *)v101;
      v101 += 8;
      v116 = vmovl_s16(*(int16x4_t *)v115.i8);
      v117 = vmovl_high_s16(v115);
      v118 = (int8x16_t)vcltzq_s32(v117);
      v119 = (int8x16_t)vcltzq_s32(v116);
      v120 = (uint32x4_t)veorq_s8(v119, (int8x16_t)v116);
      v121 = (uint32x4_t)veorq_s8(v118, (int8x16_t)v117);
      v122 = (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)&v121 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
      v123 = (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)&v120 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
      v124 = vbslq_s8(v123, (int8x16_t)(*(_OWORD *)&v120 | __PAIR128__(0xFF000000FFLL, 0xFF000000FFLL)), (int8x16_t)(*(_OWORD *)&v120 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
      v125 = vbslq_s8(v122, (int8x16_t)(*(_OWORD *)&v121 | __PAIR128__(0xFF000000FFLL, 0xFF000000FFLL)), (int8x16_t)(*(_OWORD *)&v121 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
      v126 = vbicq_s8(v104, v122);
      v127 = vbicq_s8(v104, v123);
      v128 = (int32x4_t)vandq_s8(v125, v105);
      v129 = (int32x4_t)vandq_s8(v124, v105);
      v130 = (int8x16_t)vceqzq_s32(v129);
      v131 = (int8x16_t)vceqzq_s32(v128);
      v132 = vbslq_s8(v131, v125, (int8x16_t)v128);
      v133 = vbslq_s8(v130, v124, (int8x16_t)v129);
      v134 = vbslq_s8(v131, v126, (int8x16_t)(*(_OWORD *)&v126 | __PAIR128__(0x400000004, 0x400000004)));
      v135 = vbslq_s8(v130, v127, (int8x16_t)(*(_OWORD *)&v127 | __PAIR128__(0x400000004, 0x400000004)));
      v136 = (int32x4_t)vandq_s8(v133, v107);
      v137 = (int32x4_t)vandq_s8(v132, v107);
      v138 = (int8x16_t)vceqzq_s32(v137);
      v139 = (int8x16_t)vceqzq_s32(v136);
      v140 = vsubq_s32((int32x4_t)vbslq_s8(v139, v135, (int8x16_t)(*(_OWORD *)&v135 | __PAIR128__(0x200000002, 0x200000002))), vtstq_s32((int32x4_t)vbslq_s8(v139, v133, (int8x16_t)v136), v108));
      v141 = vsubq_s32((int32x4_t)vbslq_s8(v138, v134, (int8x16_t)(*(_OWORD *)&v134 | __PAIR128__(0x200000002, 0x200000002))), vtstq_s32((int32x4_t)vbslq_s8(v138, v132, (int8x16_t)v137), v108));
      v142 = vaddq_s32(v141, v110);
      v143 = vaddq_s32(v140, v110);
      v144.val[1] = veorq_s8(vbslq_s8((int8x16_t)vceqq_s32(v141, v109), v112, (int8x16_t)vsliq_n_s32((int32x4_t)vshlq_u32(v121, (uint32x4_t)vnegq_s32((int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32(v142), v106, (int8x16_t)vaddq_s32(v141, v111)))), v142, 4uLL)), vbslq_s8(v118, v114, v113));
      v144.val[0] = veorq_s8(vbslq_s8((int8x16_t)vceqq_s32(v140, v109), v112, (int8x16_t)vsliq_n_s32((int32x4_t)vshlq_u32(v120, (uint32x4_t)vnegq_s32((int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32(v143), v106, (int8x16_t)vaddq_s32(v140, v111)))), v143, 4uLL)), vbslq_s8(v119, v114, v113));
      *(_QWORD *)v102 = vqtbl2q_s8(v144, (int8x16_t)xmmword_208F05050).u64[0];
      v102 += 8;
      v103 += 8;
    }
    while (v103);
    if (v5 == a3)
      return result;
  }
  else
  {
    v5 = 0;
  }
LABEL_6:
  v6 = a3 - v5;
  v7 = &a4->u8[v5];
  v8 = (const __int16 *)&a2[2 * v5];
  do
  {
    while (1)
    {
      v15 = *v8++;
      v14 = v15;
      v16 = v15 ^ (v15 >> 31);
      v17 = v16 | 0xFF;
      if ((v16 & 0xFF00FF00) != 0)
        v17 = v16 & 0xFF00FF00;
      v18 = 8 * ((v16 & 0xFF00FF00) != 0);
      if ((v17 & 0xF0F0F0F0) != 0)
      {
        v17 &= 0xF0F0F0F0;
        v18 = (8 * ((v16 & 0xFF00FF00) != 0)) | 4;
      }
      if ((v17 & 0xCCCCCCCC) != 0)
      {
        v17 &= 0xCCCCCCCC;
        v18 |= 2u;
      }
      v19 = v18 | ((v17 & 0xAAAAAAAA) != 0);
      if (v19 != 15)
        break;
      if (v14 >= 0)
        v20 = -43;
      else
        v20 = 85;
      *v7++ = v20 ^ 0x7F;
      if (!--v6)
        return result;
    }
    v10 = v19 - 7;
    v9 = v19 == 7;
    v11 = v19 - 4;
    if (v9)
      v11 = 4;
    v12 = (v16 >> v11) & 0xF | (16 * v10);
    if (v14 >= 0)
      v13 = -43;
    else
      v13 = 85;
    *v7++ = v12 ^ v13;
    --v6;
  }
  while (v6);
  return result;
}

uint64_t webrtc::AudioEncoderPcmA::BytesPerSample(webrtc::AudioEncoderPcmA *this)
{
  return 1;
}

uint64_t webrtc::AudioEncoderPcmA::GetCodecType(webrtc::AudioEncoderPcmA *this)
{
  return 3;
}

unint64_t webrtc::AudioEncoderPcmU::EncodeCall(webrtc::AudioEncoderPcmU *this, unsigned __int8 *a2, unint64_t a3, int8x16_t *a4)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  const __int16 *v8;
  int v9;
  char v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  char v18;
  int32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  unint64_t v28;
  int32x4_t v29;
  int8x16_t *v30;
  unsigned __int8 *v31;
  int8x16_t v32;
  int16x8_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int8x16_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int8x16_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  unint64_t v94;
  const __int16 *v95;
  unsigned __int8 *v96;
  unint64_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int8x16_t v108;
  int16x8_t v109;
  int8x16_t v110;
  int8x16_t v111;
  uint32x4_t v112;
  uint32x4_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int8x16x2_t v134;
  int8x16x4_t v135;

  result = a3;
  if (!a3)
    return result;
  if (a3 >= 8 && (&a2[2 * a3] <= (unsigned __int8 *)a4 || &a4->i8[a3] <= (__int8 *)a2))
  {
    if (a3 >= 0x10)
    {
      v5 = a3 & 0xFFFFFFFFFFFFFFF0;
      v19.i64[0] = 0x8300000083;
      v19.i64[1] = 0x8300000083;
      v20.i64[0] = 0x8400000084;
      v20.i64[1] = 0x8400000084;
      v21.i64[0] = 0xFF000000FFLL;
      v21.i64[1] = 0xFF000000FFLL;
      v22.i64[0] = 0x800000008;
      v22.i64[1] = 0x800000008;
      v23.i64[0] = 0xF0F0F0F0F0F0F0F0;
      v23.i64[1] = 0xF0F0F0F0F0F0F0F0;
      v24.i64[0] = 0xCCCCCCCCCCCCCCCCLL;
      v24.i64[1] = 0xCCCCCCCCCCCCCCCCLL;
      v25.i64[0] = 0xAAAAAAAAAAAAAAAALL;
      v25.i64[1] = 0xAAAAAAAAAAAAAAAALL;
      v26.i64[0] = 0xF0000000FLL;
      v26.i64[1] = 0xF0000000FLL;
      v27.i64[0] = 0x400000004;
      v27.i64[1] = 0x400000004;
      v28 = a3 & 0xFFFFFFFFFFFFFFF0;
      v29.i64[0] = 0x9000000090;
      v29.i64[1] = 0x9000000090;
      v30 = a4;
      v31 = a2;
      v32.i64[0] = 0x7F0000007FLL;
      v32.i64[1] = 0x7F0000007FLL;
      do
      {
        v33 = *((int16x8_t *)v31 + 1);
        v34 = (int8x16_t)vcltzq_s32(vmovl_high_s16(v33));
        v35 = (int8x16_t)vcltzq_s32(vmovl_high_s16(*(int16x8_t *)v31));
        v36 = (int8x16_t)vcltzq_s32(vmovl_s16(*(int16x4_t *)v33.i8));
        v37 = (int8x16_t)vcltzq_s32(vmovl_s16(*(int16x4_t *)v31));
        v38 = (int8x16_t)vsubw_high_s16(v19, v33);
        v39 = (int8x16_t)vsubw_s16(v19, *(int16x4_t *)v33.i8);
        v40 = (int8x16_t)vaddw_high_s16(v20, v33);
        v41 = (int8x16_t)vaddw_s16(v20, *(int16x4_t *)v33.i8);
        v42 = (uint32x4_t)vbslq_s8(v37, (int8x16_t)vsubw_s16(v19, *(int16x4_t *)v31), (int8x16_t)vaddw_s16(v20, *(int16x4_t *)v31));
        v43 = (uint32x4_t)vbslq_s8(v36, v39, v41);
        v44 = (uint32x4_t)vbslq_s8(v35, (int8x16_t)vsubw_high_s16(v19, *(int16x8_t *)v31), (int8x16_t)vaddw_high_s16(v20, *(int16x8_t *)v31));
        v45 = (uint32x4_t)vbslq_s8(v34, v38, v40);
        v46 = (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)&v45 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v47 = (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)&v42 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v48 = vbslq_s8(v47, (int8x16_t)(*(_OWORD *)&v42 | __PAIR128__(0xFF000000FFLL, 0xFF000000FFLL)), (int8x16_t)(*(_OWORD *)&v42 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v49 = (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)&v43 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v50 = vbslq_s8(v49, (int8x16_t)(*(_OWORD *)&v43 | __PAIR128__(0xFF000000FFLL, 0xFF000000FFLL)), (int8x16_t)(*(_OWORD *)&v43 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v51 = (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)&v44 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v52 = vbslq_s8(v51, (int8x16_t)(*(_OWORD *)&v44 | __PAIR128__(0xFF000000FFLL, 0xFF000000FFLL)), (int8x16_t)(*(_OWORD *)&v44 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v53 = vbslq_s8(v46, (int8x16_t)(*(_OWORD *)&v45 | __PAIR128__(0xFF000000FFLL, 0xFF000000FFLL)), (int8x16_t)(*(_OWORD *)&v45 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
        v54 = vbicq_s8(v22, v46);
        v55 = vbicq_s8(v22, v51);
        v56 = vbicq_s8(v22, v49);
        v57 = vbicq_s8(v22, v47);
        v58 = (int32x4_t)vandq_s8(v53, v23);
        v59 = (int8x16_t)vceqzq_s32(v58);
        v60 = vbslq_s8(v59, v53, (int8x16_t)v58);
        v61 = vbslq_s8(v59, v54, (int8x16_t)(*(_OWORD *)&v54 | __PAIR128__(0x400000004, 0x400000004)));
        v62 = (int32x4_t)vandq_s8(v52, v23);
        v63 = (int8x16_t)vceqzq_s32(v62);
        v64 = vbslq_s8(v63, v52, (int8x16_t)v62);
        v65 = vbslq_s8(v63, v55, (int8x16_t)(*(_OWORD *)&v55 | __PAIR128__(0x400000004, 0x400000004)));
        v66 = (int32x4_t)vandq_s8(v50, v23);
        v67 = (int8x16_t)vceqzq_s32(v66);
        v68 = vbslq_s8(v67, v50, (int8x16_t)v66);
        v69 = vbslq_s8(v67, v56, (int8x16_t)(*(_OWORD *)&v56 | __PAIR128__(0x400000004, 0x400000004)));
        v70 = (int32x4_t)vandq_s8(v48, v23);
        v71 = (int8x16_t)vceqzq_s32(v70);
        v72 = vbslq_s8(v71, v48, (int8x16_t)v70);
        v73 = vbslq_s8(v71, v57, (int8x16_t)(*(_OWORD *)&v57 | __PAIR128__(0x400000004, 0x400000004)));
        v74 = (int32x4_t)vandq_s8(v60, v24);
        v75 = (int8x16_t)vceqzq_s32(v74);
        v76 = (int32x4_t)vbslq_s8(v75, v60, (int8x16_t)v74);
        v77 = (int32x4_t)vbslq_s8(v75, v61, (int8x16_t)(*(_OWORD *)&v61 | __PAIR128__(0x200000002, 0x200000002)));
        v78 = (int32x4_t)vandq_s8(v64, v24);
        v79 = (int8x16_t)vceqzq_s32(v78);
        v80 = (int32x4_t)vbslq_s8(v79, v64, (int8x16_t)v78);
        v81 = (int32x4_t)vbslq_s8(v79, v65, (int8x16_t)(*(_OWORD *)&v65 | __PAIR128__(0x200000002, 0x200000002)));
        v82 = (int32x4_t)vandq_s8(v68, v24);
        v83 = (int8x16_t)vceqzq_s32(v82);
        v84 = (int32x4_t)vbslq_s8(v83, v68, (int8x16_t)v82);
        v85 = (int32x4_t)vbslq_s8(v83, v69, (int8x16_t)(*(_OWORD *)&v69 | __PAIR128__(0x200000002, 0x200000002)));
        v86 = (int32x4_t)vandq_s8(v72, v24);
        v87 = (int8x16_t)vceqzq_s32(v86);
        v88 = (int32x4_t)vbslq_s8(v87, v72, (int8x16_t)v86);
        v89 = (int32x4_t)vbslq_s8(v87, v73, (int8x16_t)(*(_OWORD *)&v73 | __PAIR128__(0x200000002, 0x200000002)));
        v90 = vsubq_s32(v81, vtstq_s32(v80, v25));
        v91 = vsubq_s32(v77, vtstq_s32(v76, v25));
        v135.val[3] = veorq_s8(vbslq_s8((int8x16_t)vceqq_s32(v91, v26), v32, (int8x16_t)vaddq_s32(vsliq_n_s32((int32x4_t)vshlq_u32(v45, (uint32x4_t)vsubq_s32(v27, v91)), v91, 4uLL), v29)), vbslq_s8(v34, v32, v21));
        v135.val[1] = veorq_s8(vbslq_s8((int8x16_t)vceqq_s32(v90, v26), v32, (int8x16_t)vaddq_s32(vsliq_n_s32((int32x4_t)vshlq_u32(v44, (uint32x4_t)vsubq_s32(v27, v90)), v90, 4uLL), v29)), vbslq_s8(v35, v32, v21));
        v92 = vsubq_s32(v85, vtstq_s32(v84, v25));
        v135.val[2] = veorq_s8(vbslq_s8((int8x16_t)vceqq_s32(v92, v26), v32, (int8x16_t)vaddq_s32(vsliq_n_s32((int32x4_t)vshlq_u32(v43, (uint32x4_t)vsubq_s32(v27, v92)), v92, 4uLL), v29)), vbslq_s8(v36, v32, v21));
        v93 = vsubq_s32(v89, vtstq_s32(v88, v25));
        v135.val[0] = veorq_s8(vbslq_s8((int8x16_t)vceqq_s32(v93, v26), v32, (int8x16_t)vaddq_s32(vsliq_n_s32((int32x4_t)vshlq_u32(v42, (uint32x4_t)vsubq_s32(v27, v93)), v93, 4uLL), v29)), vbslq_s8(v37, v32, v21));
        *v30++ = vqtbl4q_s8(v135, (int8x16_t)xmmword_208F05040);
        v31 += 32;
        v28 -= 16;
      }
      while (v28);
      if (v5 == a3)
        return result;
      if ((a3 & 8) == 0)
        goto LABEL_6;
    }
    else
    {
      v5 = 0;
    }
    v94 = v5;
    v5 = a3 & 0xFFFFFFFFFFFFFFF8;
    v95 = (const __int16 *)&a2[2 * v94];
    v96 = &a4->u8[v94];
    v97 = v94 - (a3 & 0xFFFFFFFFFFFFFFF8);
    v98.i64[0] = 0x8300000083;
    v98.i64[1] = 0x8300000083;
    v99.i64[0] = 0x8400000084;
    v99.i64[1] = 0x8400000084;
    v100.i64[0] = 0xFF000000FFLL;
    v100.i64[1] = 0xFF000000FFLL;
    v101.i64[0] = 0x800000008;
    v101.i64[1] = 0x800000008;
    v102.i64[0] = 0xF0F0F0F0F0F0F0F0;
    v102.i64[1] = 0xF0F0F0F0F0F0F0F0;
    v103.i64[0] = 0xCCCCCCCCCCCCCCCCLL;
    v103.i64[1] = 0xCCCCCCCCCCCCCCCCLL;
    v104.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v104.i64[1] = 0xAAAAAAAAAAAAAAAALL;
    v105.i64[0] = 0xF0000000FLL;
    v105.i64[1] = 0xF0000000FLL;
    v106.i64[0] = 0x400000004;
    v106.i64[1] = 0x400000004;
    v107.i64[0] = 0x9000000090;
    v107.i64[1] = 0x9000000090;
    v108.i64[0] = 0x7F0000007FLL;
    v108.i64[1] = 0x7F0000007FLL;
    do
    {
      v109 = *(int16x8_t *)v95;
      v95 += 8;
      v110 = (int8x16_t)vcltzq_s32(vmovl_high_s16(v109));
      v111 = (int8x16_t)vcltzq_s32(vmovl_s16(*(int16x4_t *)v109.i8));
      v112 = (uint32x4_t)vbslq_s8(v111, (int8x16_t)vsubw_s16(v98, *(int16x4_t *)v109.i8), (int8x16_t)vaddw_s16(v99, *(int16x4_t *)v109.i8));
      v113 = (uint32x4_t)vbslq_s8(v110, (int8x16_t)vsubw_high_s16(v98, v109), (int8x16_t)vaddw_high_s16(v99, v109));
      v114 = (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)&v113 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
      v115 = (int8x16_t)vceqzq_s32((int32x4_t)(*(_OWORD *)&v112 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
      v116 = vbslq_s8(v115, (int8x16_t)(*(_OWORD *)&v112 | __PAIR128__(0xFF000000FFLL, 0xFF000000FFLL)), (int8x16_t)(*(_OWORD *)&v112 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
      v117 = vbslq_s8(v114, (int8x16_t)(*(_OWORD *)&v113 | __PAIR128__(0xFF000000FFLL, 0xFF000000FFLL)), (int8x16_t)(*(_OWORD *)&v113 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)));
      v118 = vbicq_s8(v101, v114);
      v119 = vbicq_s8(v101, v115);
      v120 = (int32x4_t)vandq_s8(v117, v102);
      v121 = (int32x4_t)vandq_s8(v116, v102);
      v122 = (int8x16_t)vceqzq_s32(v121);
      v123 = (int8x16_t)vceqzq_s32(v120);
      v124 = vbslq_s8(v123, v117, (int8x16_t)v120);
      v125 = vbslq_s8(v122, v116, (int8x16_t)v121);
      v126 = vbslq_s8(v123, v118, (int8x16_t)(*(_OWORD *)&v118 | __PAIR128__(0x400000004, 0x400000004)));
      v127 = vbslq_s8(v122, v119, (int8x16_t)(*(_OWORD *)&v119 | __PAIR128__(0x400000004, 0x400000004)));
      v128 = (int32x4_t)vandq_s8(v125, v103);
      v129 = (int32x4_t)vandq_s8(v124, v103);
      v130 = (int8x16_t)vceqzq_s32(v129);
      v131 = (int8x16_t)vceqzq_s32(v128);
      v132 = vsubq_s32((int32x4_t)vbslq_s8(v131, v127, (int8x16_t)(*(_OWORD *)&v127 | __PAIR128__(0x200000002, 0x200000002))), vtstq_s32((int32x4_t)vbslq_s8(v131, v125, (int8x16_t)v128), v104));
      v133 = vsubq_s32((int32x4_t)vbslq_s8(v130, v126, (int8x16_t)(*(_OWORD *)&v126 | __PAIR128__(0x200000002, 0x200000002))), vtstq_s32((int32x4_t)vbslq_s8(v130, v124, (int8x16_t)v129), v104));
      v134.val[1] = veorq_s8(vbslq_s8((int8x16_t)vceqq_s32(v133, v105), v108, (int8x16_t)vaddq_s32(vsliq_n_s32((int32x4_t)vshlq_u32(v113, (uint32x4_t)vsubq_s32(v106, v133)), v133, 4uLL), v107)), vbslq_s8(v110, v108, v100));
      v134.val[0] = veorq_s8(vbslq_s8((int8x16_t)vceqq_s32(v132, v105), v108, (int8x16_t)vaddq_s32(vsliq_n_s32((int32x4_t)vshlq_u32(v112, (uint32x4_t)vsubq_s32(v106, v132)), v132, 4uLL), v107)), vbslq_s8(v111, v108, v100));
      *(_QWORD *)v96 = vqtbl2q_s8(v134, (int8x16_t)xmmword_208F05050).u64[0];
      v96 += 8;
      v97 += 8;
    }
    while (v97);
    if (v5 == a3)
      return result;
  }
  else
  {
    v5 = 0;
  }
LABEL_6:
  v6 = a3 - v5;
  v7 = &a4->u8[v5];
  v8 = (const __int16 *)&a2[2 * v5];
  do
  {
    while (1)
    {
      v12 = *v8++;
      v11 = v12;
      v13 = 131 - v12;
      v14 = v12 + 132;
      if (v12 >= 0)
        v13 = v14;
      v15 = v13 | 0xFF;
      if ((v13 & 0xFF00FF00) != 0)
        v15 = v13 & 0xFF00FF00;
      v16 = 8 * ((v13 & 0xFF00FF00) != 0);
      if ((v15 & 0xF0F0F0F0) != 0)
      {
        v15 &= 0xF0F0F0F0;
        v16 = (8 * ((v13 & 0xFF00FF00) != 0)) | 4;
      }
      if ((v15 & 0xCCCCCCCC) != 0)
      {
        v15 &= 0xCCCCCCCC;
        v16 |= 2u;
      }
      v17 = v16 | ((v15 & 0xAAAAAAAA) != 0);
      if (v17 != 15)
        break;
      if (v11 >= 0)
        v18 = -1;
      else
        v18 = 127;
      *v7++ = v18 ^ 0x7F;
      if (!--v6)
        return result;
    }
    v9 = ((v13 >> (v17 - 4)) & 0xF | (16 * v17)) + 144;
    if (v11 >= 0)
      v10 = -1;
    else
      v10 = 127;
    *v7++ = v9 ^ v10;
    --v6;
  }
  while (v6);
  return result;
}

uint64_t webrtc::AudioEncoderPcmU::BytesPerSample(webrtc::AudioEncoderPcmU *this)
{
  return 1;
}

uint64_t webrtc::AudioEncoderPcmU::GetCodecType(webrtc::AudioEncoderPcmU *this)
{
  return 4;
}

void webrtc::AudioEncoderPcmA::~AudioEncoderPcmA(webrtc::AudioEncoderPcmA *this)
{
  void *v2;

  *(_QWORD *)this = off_24C0ADC10;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_24C0ADC10;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::AudioEncoderPcmU::~AudioEncoderPcmU(webrtc::AudioEncoderPcmU *this)
{
  void *v2;

  *(_QWORD *)this = off_24C0ADC10;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_24C0ADC10;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

unint64_t webrtc::AudioEncoderPcm16B::EncodeCall(webrtc::AudioEncoderPcm16B *this, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;
  char *v10;
  const __int16 *v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  char *v17;
  unint64_t v18;
  const __int16 *v19;
  char *v20;
  unint64_t v21;
  int16x8_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  const __int16 *v26;
  unsigned int v27;
  int8x8x2_t v28;
  int8x16x2_t v29;
  int8x16x2_t v30;

  result = 2 * a3;
  if (!a3)
    return result;
  if (a3 < 8)
    goto LABEL_3;
  v5 = 0;
  v6 = 2 * (a3 - 1);
  v7 = &a4[v6];
  v8 = &a4[v6 + 1];
  v9 = v7 >= a4 && v8 >= a4 + 1;
  if (!v9 || ((a3 - 1) & 0x8000000000000000) != 0)
    goto LABEL_21;
  if (&a2[result] > a4 && &a4[result] > a2)
  {
LABEL_3:
    v5 = 0;
    goto LABEL_21;
  }
  if (a3 >= 0x20)
  {
    v5 = a3 & 0xFFFFFFFFFFFFFFE0;
    v10 = (char *)(a4 + 32);
    v11 = (const __int16 *)(a2 + 32);
    v12 = a3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v14 = *((int8x16_t *)v11 - 2);
      v13 = *((int8x16_t *)v11 - 1);
      v16 = *(int8x16_t *)v11;
      v15 = *((int8x16_t *)v11 + 1);
      v11 += 32;
      v30.val[0] = vuzp2q_s8(v14, v13);
      v30.val[1] = vuzp1q_s8(v14, v13);
      v17 = v10 - 32;
      vst2q_s8(v17, v30);
      v29.val[0] = vuzp2q_s8(v16, v15);
      v29.val[1] = vuzp1q_s8(v16, v15);
      vst2q_s8(v10, v29);
      v10 += 64;
      v12 -= 32;
    }
    while (v12);
    if (v5 == a3)
      return result;
    if ((a3 & 0x18) != 0)
      goto LABEL_18;
LABEL_21:
    v23 = a3 - v5;
    v24 = 2 * v5;
    v25 = &a4[2 * v5 + 1];
    v26 = (const __int16 *)&a2[v24];
    do
    {
      v27 = *(unsigned __int16 *)v26++;
      *(_WORD *)(v25 - 1) = bswap32(v27) >> 16;
      v25 += 2;
      --v23;
    }
    while (v23);
    return result;
  }
  v5 = 0;
LABEL_18:
  v18 = v5;
  v5 = a3 & 0xFFFFFFFFFFFFFFF8;
  v19 = (const __int16 *)&a2[2 * v18];
  v20 = (char *)&a4[2 * v18];
  v21 = v18 - (a3 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v22 = *(int16x8_t *)v19;
    v19 += 8;
    v28.val[0] = vshrn_n_s16(v22, 8uLL);
    v28.val[1] = vmovn_s16(v22);
    vst2_s8(v20, v28);
    v20 += 16;
    v21 += 8;
  }
  while (v21);
  if (v5 != a3)
    goto LABEL_21;
  return result;
}

uint64_t webrtc::AudioEncoderPcm16B::BytesPerSample(webrtc::AudioEncoderPcm16B *this)
{
  return 2;
}

uint64_t webrtc::AudioEncoderPcm16B::GetCodecType(webrtc::AudioEncoderPcm16B *this)
{
  return 0;
}

void webrtc::AudioEncoderPcm16B::~AudioEncoderPcm16B(webrtc::AudioEncoderPcm16B *this)
{
  void *v2;

  *(_QWORD *)this = off_24C0ADC10;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = off_24C0ADC10;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

std::string *webrtc::SdpAudioFormat::SdpAudioFormat(std::string *this, const webrtc::SdpAudioFormat *a2)
{
  __int128 v4;
  __int128 v5;
  char *v6;
  char *v7;
  char *v9;
  char *v10;
  BOOL v11;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(_OWORD *)((char *)a2 + 24);
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&this[2];
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  this[2].__r_.__value_.__l.__size_ = 0;
  v6 = (char *)*((_QWORD *)a2 + 5);
  v7 = (char *)a2 + 48;
  if (v6 != v7)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)&this[1].__r_.__value_.__r.__words[2], (uint64_t *)&this[2], (uint64_t)(v6 + 32), (uint64_t)(v6 + 32));
      v9 = (char *)*((_QWORD *)v6 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)*((_QWORD *)v6 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
    }
    while (v10 != v7);
  }
  return this;
}

_BYTE *webrtc::SdpAudioFormat::SdpAudioFormat(_BYTE *a1, _BYTE *__src, size_t __len, int a4, uint64_t a5, _QWORD *a6)
{
  _BYTE *v11;
  size_t v12;
  size_t v13;
  _BYTE *v14;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_23:
    abort();
  v11 = a1;
  if (__len > 0x16)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    a1 = operator new(v12 + 1);
    *((_QWORD *)v11 + 1) = __len;
    *((_QWORD *)v11 + 2) = v13 | 0x8000000000000000;
    *(_QWORD *)v11 = a1;
  }
  else
  {
    a1[23] = __len;
  }
  v14 = &a1[__len];
  if (a1 <= __src && v14 > __src)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (__len)
    memmove(a1, __src, __len);
  *v14 = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 5) = v11 + 48;
  *((_DWORD *)v11 + 6) = a4;
  *((_QWORD *)v11 + 4) = a5;
  *((_QWORD *)v11 + 7) = 0;
  v18 = (_QWORD *)*a6;
  v16 = a6 + 1;
  v17 = v18;
  if (v18 != v16)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)v11 + 5, (uint64_t *)v11 + 6, (uint64_t)(v17 + 4), (uint64_t)(v17 + 4));
      v20 = (_QWORD *)v17[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v17[2];
          v22 = *v21 == (_QWORD)v17;
          v17 = v21;
        }
        while (!v22);
      }
      v17 = v21;
    }
    while (v21 != v16);
  }
  return v11;
}

void webrtc::SdpAudioFormat::~SdpAudioFormat(webrtc::SdpAudioFormat *this)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 40, *((_QWORD *)this + 6));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

std::string *webrtc::SdpAudioFormat::operator=(std::string *this, std::string *a2)
{
  std::string *v3;
  __int128 v4;
  size_t size;

  if (this != a2)
  {
    v3 = a2;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      else
      {
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
        size = v3->__r_.__value_.__l.__size_;
      }
      std::string::__assign_no_alias<false>(this, (const std::string::value_type *)a2, size);
    }
    else if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v3[1].__r_.__value_.__l.__data_;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&this[1].__r_.__value_.__r.__words[2], (char *)v3[1].__r_.__value_.__r.__words[2], (char *)&v3[2]);
  }
  return this;
}

uint64_t webrtc::operator==(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  BOOL v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char v18;

  if (*(char *)(result + 23) < 0)
  {
    v2 = *(_QWORD *)(result + 8);
    if (v2 < 0)
      goto LABEL_44;
    v3 = *(unsigned __int8 **)result;
    v4 = v2 && v3 == 0;
    if (v4)
      goto LABEL_44;
  }
  else
  {
    v2 = *(unsigned __int8 *)(result + 23);
    v3 = (unsigned __int8 *)result;
  }
  if (((char)a2[23] & 0x80000000) == 0)
  {
    v5 = a2[23];
    v6 = a2;
    goto LABEL_13;
  }
  v5 = *((_QWORD *)a2 + 1);
  if (v5 < 0 || (v6 = *(unsigned __int8 **)a2, v5) && !v6)
  {
LABEL_44:
    __break(1u);
    return result;
  }
LABEL_13:
  if (v2 != v5)
    return 0;
  if (!v2)
  {
LABEL_15:
    if (*(_DWORD *)(result + 24) == *((_DWORD *)a2 + 6)
      && *(_QWORD *)(result + 32) == *((_QWORD *)a2 + 4)
      && *(_QWORD *)(result + 56) == *((_QWORD *)a2 + 7))
    {
      v7 = *(unsigned __int8 **)(result + 40);
      v8 = result + 48;
      if (v7 == (unsigned __int8 *)(result + 48))
        return 1;
      v9 = (unsigned __int8 *)*((_QWORD *)a2 + 5);
      do
      {
        result = std::__equal_to::operator()[abi:sn180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>((uint64_t)&v18, v7 + 32, v9 + 32);
        if (!(_DWORD)result)
          break;
        v14 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
        v15 = v7;
        if (v14)
        {
          do
          {
            v7 = v14;
            v14 = *(unsigned __int8 **)v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v7 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
            v4 = *(_QWORD *)v7 == (_QWORD)v15;
            v15 = v7;
          }
          while (!v4);
        }
        v16 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = *(unsigned __int8 **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (unsigned __int8 *)*((_QWORD *)v9 + 2);
            v4 = *(_QWORD *)v17 == (_QWORD)v9;
            v9 = v17;
          }
          while (!v4);
        }
        v9 = v17;
      }
      while (v7 != (unsigned __int8 *)v8);
      return result;
    }
    return 0;
  }
  while (1)
  {
    v11 = *v3++;
    v10 = v11;
    v13 = *v6++;
    v12 = v13;
    if (v10 != v13)
    {
      if ((v10 - 65) < 0x1A)
        LOBYTE(v10) = v10 + 32;
      if ((v12 - 65) < 0x1A)
        LOBYTE(v12) = v12 + 32;
      if (v10 != v12)
        return 0;
    }
    if (!--v2)
      goto LABEL_15;
  }
}

uint64_t std::__equal_to::operator()[abi:sn180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const void **v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v28;

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5))
      return 0;
  }
  else if ((_DWORD)v4)
  {
    v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4)
        goto LABEL_19;
    }
    return 0;
  }
LABEL_19:
  v13 = a2[47];
  if ((v13 & 0x80u) == 0)
    v14 = a2[47];
  else
    v14 = *((_QWORD *)a2 + 4);
  v15 = a3[47];
  v16 = (char)v15;
  if ((v15 & 0x80u) != 0)
    v15 = *((_QWORD *)a3 + 4);
  if (v14 != v15)
    return 0;
  v17 = (const void **)(a2 + 24);
  v20 = (unsigned __int8 *)*((_QWORD *)a3 + 3);
  v19 = a3 + 24;
  v18 = v20;
  if (v16 >= 0)
    v21 = v19;
  else
    v21 = v18;
  if ((v13 & 0x80) != 0)
    return memcmp(*v17, v21, *((_QWORD *)a2 + 4)) == 0;
  if (!a2[47])
    return 1;
  v22 = v13 - 1;
  do
  {
    v24 = *(unsigned __int8 *)v17;
    v17 = (const void **)((char *)v17 + 1);
    v23 = v24;
    v26 = *v21++;
    v25 = v26;
    v28 = v22-- != 0;
    result = v23 == v25;
  }
  while (v23 == v25 && v28);
  return result;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t a1, char *a2, char *a3)
{
  char *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t *leaf_high;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *i;
  char *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24[2];

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v8 = v6[1] ? v6[1] : (uint64_t)v6;
    if (v8)
    {
      v9 = *(_QWORD **)(v8 + 16);
      if (v9)
      {
        v10 = (_QWORD *)*v9;
        if (*v9 == v8)
        {
          *v9 = 0;
          while (1)
          {
            v23 = (_QWORD *)v9[1];
            if (!v23)
              break;
            do
            {
              v9 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
        }
        else
        {
          for (v9[1] = 0; v10; v10 = (_QWORD *)v9[1])
          {
            do
            {
              v9 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
        }
      }
      if (a2 != a3)
      {
        v11 = a2;
        do
        {
          v12 = v8;
          v8 = (uint64_t)v9;
          v24[0] = v12 + 32;
          v24[1] = v12 + 56;
          std::pair<std::string &,std::string &>::operator=[abi:sn180100]<std::string const,std::string,(void *)0>(v24, v11 + 32);
          leaf_high = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(a1, v24, (const void **)(v12 + 32));
          v14 = v24[0];
          *(_QWORD *)v12 = 0;
          *(_QWORD *)(v12 + 8) = 0;
          *(_QWORD *)(v12 + 16) = v14;
          *leaf_high = v12;
          v15 = **(_QWORD **)a1;
          if (v15)
          {
            *(_QWORD *)a1 = v15;
            v12 = *leaf_high;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), (uint64_t *)v12);
          ++*(_QWORD *)(a1 + 16);
          if (v9)
          {
            v9 = (_QWORD *)v9[2];
            if (v9)
            {
              v18 = (_QWORD *)*v9;
              if (*v9 == v8)
              {
                *v9 = 0;
                while (1)
                {
                  v19 = (_QWORD *)v9[1];
                  if (!v19)
                    break;
                  do
                  {
                    v9 = v19;
                    v19 = (_QWORD *)*v19;
                  }
                  while (v19);
                }
              }
              else
              {
                for (v9[1] = 0; v18; v18 = (_QWORD *)v9[1])
                {
                  do
                  {
                    v9 = v18;
                    v18 = (_QWORD *)*v18;
                  }
                  while (v18);
                }
              }
            }
          }
          else
          {
            v9 = 0;
          }
          v16 = (char *)*((_QWORD *)v11 + 1);
          if (v16)
          {
            do
            {
              v4 = v16;
              v16 = *(char **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v4 = (char *)*((_QWORD *)v11 + 2);
              v17 = *(_QWORD *)v4 == (_QWORD)v11;
              v11 = v4;
            }
            while (!v17);
          }
          if (!v8)
            break;
          v11 = v4;
        }
        while (v4 != a3);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, v8);
      if (v9)
      {
        for (i = (_QWORD *)v9[2]; i; i = (_QWORD *)i[2])
          v9 = i;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, (uint64_t)v9);
      }
    }
  }
  if (v4 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(a1, (uint64_t)(v4 + 32));
      v21 = (char *)*((_QWORD *)v4 + 1);
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = *(char **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (char *)*((_QWORD *)v4 + 2);
          v17 = *(_QWORD *)v22 == (_QWORD)v4;
          v4 = v22;
        }
        while (!v17);
      }
      v4 = v22;
    }
    while (v22 != a3);
  }
}

uint64_t *std::pair<std::string &,std::string &>::operator=[abi:sn180100]<std::string const,std::string,(void *)0>(uint64_t *a1, char *a2)
{
  char *v2;
  uint64_t v4;
  __int128 v5;
  char *v6;
  uint64_t v7;
  size_t v8;
  char v9;
  __int128 v10;
  const std::string::value_type *v12;
  size_t v13;

  v2 = a2;
  v4 = *a1;
  if ((char *)v4 != a2)
  {
    if ((*(char *)(v4 + 23) & 0x80000000) == 0)
    {
      if (a2[23] < 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)v4, *(char **)a2, *((_QWORD *)a2 + 1));
        v6 = v2 + 24;
        v7 = a1[1];
        if ((char *)v7 == v2 + 24)
          return a1;
      }
      else
      {
        v5 = *(_OWORD *)a2;
        *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v4 = v5;
        v6 = a2 + 24;
        v7 = a1[1];
        if ((char *)v7 == a2 + 24)
          return a1;
      }
      goto LABEL_11;
    }
    if (a2[23] >= 0)
    {
      v8 = a2[23];
    }
    else
    {
      a2 = *(char **)a2;
      v8 = *((_QWORD *)v2 + 1);
    }
    std::string::__assign_no_alias<false>((std::string *)v4, a2, v8);
  }
  v6 = v2 + 24;
  v7 = a1[1];
  if ((char *)v7 == v2 + 24)
    return a1;
LABEL_11:
  v9 = v2[47];
  if (*(char *)(v7 + 23) < 0)
  {
    if (v9 >= 0)
      v12 = v6;
    else
      v12 = (const std::string::value_type *)*((_QWORD *)v2 + 3);
    if (v9 >= 0)
      v13 = v2[47];
    else
      v13 = *((_QWORD *)v2 + 4);
    std::string::__assign_no_alias<false>((std::string *)v7, v12, v13);
    return a1;
  }
  else
  {
    if ((v2[47] & 0x80) == 0)
    {
      v10 = *(_OWORD *)v6;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v7 = v10;
      return a1;
    }
    std::string::__assign_no_alias<true>((_QWORD *)v7, *((char **)v2 + 3), *((_QWORD *)v2 + 4));
    return a1;
  }
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, const void **__s1)
{
  uint64_t v4;
  _QWORD *v5;
  const void *v7;
  size_t v8;
  BOOL v9;
  int v10;
  _QWORD *result;
  _QWORD *v12;
  int v13;
  size_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  size_t v19;
  size_t v21;
  int v22;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
  {
    result = (_QWORD *)(a1 + 8);
LABEL_28:
    *a2 = v5;
    return result;
  }
  v7 = *__s1;
  v8 = (size_t)__s1[1];
  if (v8)
    v9 = v7 == 0;
  else
    v9 = 0;
  v10 = !v9;
  if ((*((char *)__s1 + 23) & 0x80000000) == 0)
  {
    v7 = (const void *)*((unsigned __int8 *)__s1 + 23);
    while (1)
    {
      v5 = (_QWORD *)v4;
      v12 = (_QWORD *)(v4 + 32);
      v13 = *(char *)(v4 + 55);
      if (v13 < 0)
      {
        v8 = v5[5];
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_31;
        v12 = (_QWORD *)*v12;
        if (v8 && v12 == 0)
          goto LABEL_31;
      }
      else
      {
        v8 = v13;
      }
      if (v8 >= (unint64_t)v7)
        v15 = (size_t)v7;
      else
        v15 = v8;
      v16 = memcmp(__s1, v12, v15);
      if (v16)
      {
        if (v16 < 0)
          goto LABEL_10;
LABEL_25:
        v4 = v5[1];
        if (!v4)
          goto LABEL_48;
      }
      else
      {
        if (v8 <= (unint64_t)v7)
          goto LABEL_25;
LABEL_10:
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_28;
      }
    }
  }
  if ((v8 & 0x8000000000000000) != 0 || !v10)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    v4 = *v5;
    result = v5;
    if (*v5)
      goto LABEL_33;
    goto LABEL_28;
  }
  do
  {
LABEL_33:
    v5 = (_QWORD *)v4;
    v17 = (_QWORD *)(v4 + 32);
    v18 = *(char *)(v4 + 55);
    if (v18 < 0)
    {
      v19 = v5[5];
      if ((v19 & 0x8000000000000000) != 0)
        goto LABEL_31;
      v17 = (_QWORD *)*v17;
      if (v19 && v17 == 0)
        goto LABEL_31;
    }
    else
    {
      v19 = v18;
    }
    if (v19 >= v8)
      v21 = v8;
    else
      v21 = v19;
    v22 = memcmp(v7, v17, v21);
    if (v22)
    {
      if (v22 < 0)
        goto LABEL_32;
    }
    else if (v8 < v19)
    {
      goto LABEL_32;
    }
    v4 = v5[1];
  }
  while (v4);
LABEL_48:
  result = v5 + 1;
  *a2 = v5;
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  const void **v6;
  std::string *v7;
  uint64_t **leaf_high;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;

  v4 = (char *)operator new(0x50uLL);
  v5 = v4;
  v6 = (const void **)(v4 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 32), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = (std::string *)(v5 + 7);
    if ((*(char *)(a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)a2;
    *((_QWORD *)v4 + 6) = *(_QWORD *)(a2 + 16);
    v7 = (std::string *)(v4 + 56);
    if ((*(char *)(a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
      v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
LABEL_6:
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(a1, &v13, v6);
  v9 = v13;
  *v5 = 0;
  v5[1] = 0;
  v5[2] = v9;
  *leaf_high = v5;
  v10 = **(_QWORD **)a1;
  v11 = v5;
  if (v10)
  {
    *(_QWORD *)a1 = v10;
    v11 = *leaf_high;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v11);
  ++*(_QWORD *)(a1 + 16);
  return v5;
}

unint64_t rtc::ToString@<X0>(rtc *this@<X0>, char *a2@<X8>)
{
  unint64_t v5;
  rtc *v6;
  size_t v7;
  size_t v8;
  char *v9;
  size_t v10;
  size_t v11;
  size_t v12;
  rtc *v13;
  const char *v14;
  _QWORD *v15;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  _QWORD *v21;
  size_t v22;
  size_t v23;
  rtc *v24;
  rtc *v25;
  BOOL v26;
  size_t v27;
  char *v28;
  unint64_t result;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *__s;
  uint64_t v36;
  size_t v37;
  char v38[1024];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  __s = v38;
  v36 = 1024;
  strcpy(v38, "{name: ");
  if (*((char *)this + 23) < 0)
  {
    v5 = *((_QWORD *)this + 1);
    if ((v5 & 0x8000000000000000) != 0)
      goto LABEL_66;
    v6 = *(rtc **)this;
    if (v5)
    {
      if (!v6)
        goto LABEL_66;
    }
  }
  else
  {
    v5 = *((unsigned __int8 *)this + 23);
    v6 = this;
  }
  if (v5 >= 0x3F8)
    v7 = 1016;
  else
    v7 = v5;
  memcpy(&v38[7], v6, v7);
  v8 = v7 + 7;
  v9 = &v38[v7 + 7];
  *v9 = 0;
  if (1016 - v7 >= 0x10)
    v10 = 16;
  else
    v10 = 1016 - v7;
  memcpy(v9, ", clockrate_hz: ", v10);
  v37 = v10 + v8;
  v38[v37] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 6));
  if (v36 + ~v37 >= 0x10)
    v11 = 16;
  else
    v11 = v36 + ~v37;
  memcpy(&__s[v37], ", num_channels: ", v11);
  v37 += v11;
  __s[v37] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lu", *((_QWORD *)this + 4));
  if (v36 + ~v37 >= 0xF)
    v12 = 15;
  else
    v12 = v36 + ~v37;
  memcpy(&__s[v37], ", parameters: {", v12);
  v37 += v12;
  __s[v37] = 0;
  v13 = (rtc *)*((_QWORD *)this + 5);
  if (v13 != (rtc *)((char *)this + 48))
  {
    v14 = &byte_208EB9246;
    do
    {
      v15 = (_QWORD *)((char *)v13 + 32);
      v16 = strlen(v14);
      if (v16 >= v36 + ~v37)
        v17 = v36 + ~v37;
      else
        v17 = v16;
      memcpy(&__s[v37], v14, v17);
      v37 += v17;
      __s[v37] = 0;
      if (*((char *)v13 + 55) < 0)
      {
        v18 = *((_QWORD *)v13 + 5);
        if ((v18 & 0x8000000000000000) != 0)
          goto LABEL_66;
        v15 = (_QWORD *)*v15;
        if (v18)
        {
          if (!v15)
            goto LABEL_66;
        }
      }
      else
      {
        v18 = *((unsigned __int8 *)v13 + 55);
      }
      if (v18 >= v36 + ~v37)
        v19 = v36 + ~v37;
      else
        v19 = v18;
      memcpy(&__s[v37], v15, v19);
      v37 += v19;
      __s[v37] = 0;
      if (v36 + ~v37 >= 2)
        v20 = 2;
      else
        v20 = v36 + ~v37;
      memcpy(&__s[v37], ": ", v20);
      v37 += v20;
      __s[v37] = 0;
      v21 = (_QWORD *)((char *)v13 + 56);
      if (*((char *)v13 + 79) < 0)
      {
        v22 = *((_QWORD *)v13 + 8);
        if ((v22 & 0x8000000000000000) != 0)
          goto LABEL_66;
        v21 = (_QWORD *)*v21;
        if (v22)
        {
          if (!v21)
            goto LABEL_66;
        }
      }
      else
      {
        v22 = *((unsigned __int8 *)v13 + 79);
      }
      if (v22 >= v36 + ~v37)
        v23 = v36 + ~v37;
      else
        v23 = v22;
      memcpy(&__s[v37], v21, v23);
      v37 += v23;
      __s[v37] = 0;
      v24 = (rtc *)*((_QWORD *)v13 + 1);
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = *(rtc **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (rtc *)*((_QWORD *)v13 + 2);
          v26 = *(_QWORD *)v25 == (_QWORD)v13;
          v13 = v25;
        }
        while (!v26);
      }
      v14 = ", ";
      v13 = v25;
    }
    while (v25 != (rtc *)((char *)this + 48));
  }
  if (v36 + ~v37 >= 2)
    v27 = 2;
  else
    v27 = v36 + ~v37;
  memcpy(&__s[v37], "}}", v27);
  v37 += v27;
  __s[v37] = 0;
  v28 = __s;
  if (!__s)
    goto LABEL_66;
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_67;
  v30 = result;
  if (result > 0x16)
  {
    v31 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v31 = result | 7;
    v32 = v31 + 1;
    result = (unint64_t)operator new(v31 + 1);
    *((_QWORD *)a2 + 1) = v30;
    *((_QWORD *)a2 + 2) = v32 | 0x8000000000000000;
    *(_QWORD *)a2 = result;
    a2 = (char *)result;
  }
  else
  {
    a2[23] = result;
  }
  v33 = &a2[v30];
  if (a2 <= v28 && v33 > v28)
  {
LABEL_66:
    __break(1u);
LABEL_67:
    abort();
  }
  if (v30)
    result = (unint64_t)memmove(a2, v28, v30);
  *v33 = 0;
  return result;
}

uint64_t webrtc::AudioFrame::Reset(uint64_t this)
{
  _BYTE *v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v1 = (_BYTE *)(this + 15432);
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 8) = -1;
  *(_QWORD *)(this + 16) = -1;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 15436) = 0;
  *(_QWORD *)(this + 48) = 0x200000004;
  v2 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 16);
        v7 = *(void **)(v2 + 8);
        if (v6 != v5)
        {
          do
          {
            v8 = *(void **)(v6 - 96);
            if (v8)
            {
              *(_QWORD *)(v6 - 88) = v8;
              operator delete(v8);
            }
            v6 -= 104;
          }
          while (v6 != v5);
          v7 = *(void **)(v2 + 8);
        }
        *(_QWORD *)(v2 + 16) = v5;
        operator delete(v7);
      }
      this = MEMORY[0x20BD0ADEC](v2, 0x1020C40E72D6CFBLL);
    }
  }
  if (v1[16])
    v1[16] = 0;
  *v1 = 1;
  return this;
}

void webrtc::AudioFrame::CopyFrom(webrtc::AudioFrame *this, const webrtc::AudioFrame *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  char *v26;
  void *v27;
  std::string *v28;
  unint64_t v29;
  webrtc::AudioFrame *v30;

  if (this != a2)
  {
    v10 = (char *)this + 15432;
    if (*((_BYTE *)this + 15432) && !*((_BYTE *)a2 + 15432))
      bzero((char *)this + 72, 0x3C00uLL);
    *(_DWORD *)this = *(_DWORD *)a2;
    *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
    v11 = (unsigned int *)*((_QWORD *)a2 + 8);
    if (v11)
    {
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *((_QWORD *)this + 8);
    if (v13)
    {
      do
      {
        v14 = __ldaxr((unsigned int *)v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unsigned int *)v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(v13 + 8);
        if (v16)
        {
          v17 = *(_QWORD *)(v13 + 16);
          v18 = *(void **)(v13 + 8);
          if (v17 != v16)
          {
            do
            {
              v19 = *(void **)(v17 - 96);
              if (v19)
              {
                *(_QWORD *)(v17 - 88) = v19;
                operator delete(v19);
              }
              v17 -= 104;
            }
            while (v17 != v16);
            v18 = *(void **)(v13 + 8);
          }
          *(_QWORD *)(v13 + 16) = v16;
          operator delete(v18);
        }
        MEMORY[0x20BD0ADEC](v13, 0x1020C40E72D6CFBLL);
      }
    }
    *((_QWORD *)this + 8) = v11;
    v20 = *((unsigned __int8 *)a2 + 15432);
    *v10 = v20;
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
    *((_DWORD *)this + 3859) = *((_DWORD *)a2 + 3859);
    v21 = *((_QWORD *)a2 + 1931);
    *((_QWORD *)this + 1930) = *((_QWORD *)a2 + 1930);
    v10[16] = v21;
    v22 = *((_QWORD *)a2 + 3);
    v23 = *((_QWORD *)a2 + 5);
    v24 = v23 * v22;
    if (*((_BYTE *)a2 + 15432))
    {
      {
        v27 = (void *)operator new[]();
        bzero(v27, 0x3C00uLL);
        webrtc::AudioFrame::zeroed_data(void)::null_data = (uint64_t)v27;
      }
      if (v24 >= 0x1E00)
        v24 = 7680;
      if (v24)
        v26 = (char *)webrtc::AudioFrame::zeroed_data(void)::null_data;
      else
        v26 = 0;
      v20 = *v10;
    }
    else
    {
      if (v24)
        v26 = (char *)a2 + 72;
      else
        v26 = 0;
      if (v24 >= 0x1E01)
      {
        v28 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/audio/audio_frame.cc", 118, "data.size() <= kMaxDataSizeSamples", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, v23 * v22);
        webrtc::RemixFrame((webrtc *)v28, v29, v30);
        return;
      }
    }
    if (!v20)
    {
      if (v24)
        memcpy((char *)this + 72, v26, 2 * v24);
    }
  }
}

void webrtc::RemixFrame(unint64_t this, uint64_t a2, webrtc::AudioFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  webrtc *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  _WORD *v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  void *v30;
  char *v31;
  void *v32;
  void *v33;
  unint64_t v34[3];
  void *v35[2];
  __int128 v36;
  uint64_t v37;
  BOOL TransformationMatrix;
  _BYTE v39[32];
  void *__p;
  void *v41;

  v8 = *(webrtc **)(a2 + 40);
  if (v8 == (webrtc *)this)
    return;
  if (this <= 2 && (unint64_t)v8 <= 2)
  {
    if ((unint64_t)v8 <= this)
    {
      if (v8 == (webrtc *)1)
      {
        v13 = *(_QWORD *)(a2 + 24);
        if (v13 * this <= 0x1E00)
        {
          v14 = *(unsigned __int8 *)(a2 + 15432);
          *(_QWORD *)(a2 + 40) = this;
          if (!v14)
          {
            v15 = v13 * this ? a2 + 72 : 0;
            v16 = (v13 - 1);
            if ((int)v16 >= 0)
            {
              v17 = (_WORD *)(v15 + 2 * this * v16);
              do
              {
                v18 = v17;
                v19 = this;
                do
                {
                  *v18++ = *(_WORD *)(v15 + 2 * v16);
                  --v19;
                }
                while (v19);
                v17 -= this;
              }
              while (v16-- > 0);
            }
          }
        }
      }
    }
    else
    {
      webrtc::AudioFrameOperations::DownmixChannels(this, a2, v8, a4, this, a6, a7, a8);
    }
    return;
  }
  if ((this - 1) > 7)
  {
    v10 = 1;
    v11 = (_DWORD)v8 - 1;
    if (((_DWORD)v8 - 1) > 7)
      goto LABEL_8;
LABEL_23:
    v12 = dword_208F05060[v11];
    goto LABEL_24;
  }
  v10 = dword_208F05060[(int)this - 1];
  v11 = (_DWORD)v8 - 1;
  if (((_DWORD)v8 - 1) <= 7)
    goto LABEL_23;
LABEL_8:
  v12 = 1;
LABEL_24:
  v34[0] = __PAIR64__(v10, v12);
  v34[1] = (unint64_t)v8;
  v34[2] = this;
  *(_OWORD *)v35 = 0u;
  v36 = 0u;
  v37 = 0;
  webrtc::ChannelMixingMatrix::ChannelMixingMatrix((uint64_t)v39, (std::string *)v12, (int)v8, (std::string *)v10, this);
  TransformationMatrix = webrtc::ChannelMixingMatrix::CreateTransformationMatrix((uint64_t)v39, (uint64_t)v35);
  if (__p)
  {
    v41 = __p;
    operator delete(__p);
  }
  webrtc::ChannelMixer::Transform(v34, (webrtc::AudioFrame *)a2, v21, v22, v23, v24, v25, v26);
  v27 = *((_QWORD *)&v36 + 1);
  *((_QWORD *)&v36 + 1) = 0;
  if (v27)
    MEMORY[0x20BD0ADD4](v27, 0x1000C80BDFB0063);
  v28 = (char *)v35[0];
  if (v35[0])
  {
    v29 = v35[1];
    v30 = v35[0];
    if (v35[1] != v35[0])
    {
      v31 = (char *)v35[1];
      do
      {
        v33 = (void *)*((_QWORD *)v31 - 3);
        v31 -= 24;
        v32 = v33;
        if (v33)
        {
          *(v29 - 2) = v32;
          operator delete(v32);
        }
        v29 = v31;
      }
      while (v31 != v28);
      v30 = v35[0];
    }
    v35[1] = v28;
    operator delete(v30);
  }
}

unint64_t webrtc::AudioFrameOperations::DownmixChannels(unint64_t this, uint64_t a2, webrtc::AudioFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  unint64_t v12;
  uint64_t v13;
  __int16 *v14;
  int v15;
  __int16 *v16;
  __int16 *v17;
  unint64_t v18;
  uint64_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int16x8_t *v22;
  unint64_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int16x8_t v26;
  __int16 *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int16 *v36;
  _WORD *v37;
  unint64_t v38;
  __int16 *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  __int16 *v45;
  const __int16 *v46;
  std::string *v47;
  int16x8x2_t v48;
  int16x8x4_t v49;

  v8 = *(_QWORD *)(a2 + 40);
  if (this == 1 && v8 >= 2)
  {
    if (!*(_BYTE *)(a2 + 15432))
    {
      v9 = *(_QWORD *)(a2 + 24);
      v10 = (int)v8 * v9;
      if (v10 >= 1)
      {
        v11 = (__int16 *)(a2 + 72);
        v12 = a2 + 72 + 2 * v10;
        if ((int)v8 <= 1)
        {
          v38 = a2 + 2 * v9 * (int)v8 + 72;
          v39 = (__int16 *)(a2 + 74);
          if (v38 <= a2 + 74)
            v38 = a2 + 74;
          v40 = v38 - a2 - 73;
          if (v40 < 2)
            goto LABEL_56;
          v41 = (v40 >> 1) + 1;
          v11 += v41 & 0xFFFFFFFFFFFFFFFELL;
          v42 = v41 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v43 = *v39;
            *(v39 - 1) /= (int)v8;
            *v39 = v43 / (int)v8;
            v39 += 2;
            v42 -= 2;
          }
          while (v42);
          if (v41 != (v41 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_56:
            do
              *v11++ /= (int)v8;
            while ((unint64_t)v11 < v12);
          }
        }
        else
        {
          v13 = (int)v8;
          v14 = (__int16 *)(a2 + 72);
          do
          {
            v16 = v14 + 2;
            v15 = *v14;
            v17 = v14 + 1;
            this = (unint64_t)&v14[v13];
            if (&v14[v13] > v14 + 2)
              v16 = &v14[v13];
            v18 = (char *)v16 - (char *)v14 - 3;
            if (v18 < 0x1E)
              goto LABEL_20;
            v19 = (v18 >> 1) + 1;
            this = v19 & 0xFFFFFFFFFFFFFFF0;
            v17 += v19 & 0xFFFFFFFFFFFFFFF0;
            v20 = 0uLL;
            v21 = (int32x4_t)*v14;
            v22 = (int16x8_t *)(v14 + 9);
            v23 = v19 & 0xFFFFFFFFFFFFFFF0;
            v24 = 0uLL;
            v25 = 0uLL;
            do
            {
              v26 = v22[-1];
              v20 = vaddw_high_s16(v20, v26);
              v21 = vaddw_s16(v21, *(int16x4_t *)v26.i8);
              v25 = vaddw_high_s16(v25, *v22);
              v24 = vaddw_s16(v24, *(int16x4_t *)v22->i8);
              v22 += 2;
              v23 -= 16;
            }
            while (v23);
            v15 = vaddvq_s32(vaddq_s32(vaddq_s32(v24, v21), vaddq_s32(v25, v20)));
            if (v19 != this)
            {
LABEL_20:
              v27 = &v14[(int)v8];
              do
              {
                v28 = *v17++;
                v15 += v28;
              }
              while (v17 < v27);
            }
            *v11++ = v15 / (int)v8;
            v14 = v17;
          }
          while ((unint64_t)v17 < v12);
        }
      }
    }
    *(_QWORD *)(a2 + 40) = 1;
    return this;
  }
  if (this == 2 && v8 == 4)
  {
    if (*(_BYTE *)(a2 + 15432))
    {
      *(_QWORD *)(a2 + 40) = 2;
      return this;
    }
    v29 = *(_QWORD *)(a2 + 24);
    if ((v29 & 0x3FFFFFFFFFFFFFFFLL) != 0)
      v30 = a2 + 72;
    else
      v30 = 0;
    v31 = 2 * v29;
    if (2 * v29 >= 0x1E01)
    {
      v47 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/audio/audio_frame.cc", 167, "total_samples <= kMaxDataSizeSamples", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, v31);
      return webrtc::ProcessAudioFrame(v47);
    }
    *(_QWORD *)(a2 + 40) = 2;
    v32 = v31 ? a2 + 72 : 0;
    if (v29)
    {
      if (v29 < 8)
        goto LABEL_37;
      v33 = 0;
      v34 = 4 * (v29 - 1);
      if (v32 + v34 < v32 || v32 + 2 + v34 < v32 + 2 || (v29 - 1) >> 62)
        goto LABEL_38;
      if (v30 + 8 * v29 <= v32 || v30 >= v32 + 4 * v29)
      {
        v33 = v29 & 0xFFFFFFFFFFFFFFF8;
        v44 = v29 & 0xFFFFFFFFFFFFFFF8;
        v45 = (__int16 *)v32;
        v46 = (const __int16 *)v30;
        do
        {
          v49 = vld4q_s16(v46);
          v46 += 32;
          v48.val[0] = vhaddq_s16(v49.val[1], v49.val[0]);
          v48.val[1] = vhaddq_s16(v49.val[3], v49.val[2]);
          vst2q_s16(v45, v48);
          v45 += 16;
          v44 -= 8;
        }
        while (v44);
        if (v29 == v33)
          return this;
      }
      else
      {
LABEL_37:
        v33 = 0;
      }
LABEL_38:
      v35 = v29 - v33;
      v36 = (__int16 *)(v30 + 8 * v33 + 4);
      v37 = (_WORD *)(v32 + 4 * v33 + 2);
      do
      {
        *(v37 - 1) = (*(v36 - 1) + *(v36 - 2)) >> 1;
        *v37 = (v36[1] + *v36) >> 1;
        v37 += 2;
        v36 += 4;
        --v35;
      }
      while (v35);
    }
  }
  return this;
}

uint64_t webrtc::ProcessAudioFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE *v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  int v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v2 = 4294967291;
  if (a1 && a2)
  {
    v5 = *(_QWORD *)(a2 + 40);
    v17 = *(_DWORD *)(a2 + 32);
    v18 = v5;
    v19 = v17 / 100;
    v14 = v17;
    v15 = v5;
    v16 = v19;
    v6 = (_BYTE *)(a2 + 15432);
    if (*(_BYTE *)(a2 + 15432))
    {
      v8 = &qword_254572000;
      if ((v7 & 1) == 0)
      {
        v6 = (_BYTE *)(a2 + 15432);
        if (v11)
        {
          v12 = (void *)operator new[]();
          bzero(v12, 0x3C00uLL);
          webrtc::AudioFrame::zeroed_data(void)::null_data = (uint64_t)v12;
          v8 = &qword_254572000;
          v6 = (_BYTE *)(a2 + 15432);
        }
      }
      v9 = v8[163];
      if (*v6)
        bzero((void *)(a2 + 72), 0x3C01uLL);
    }
    else
    {
      v9 = a2 + 72;
    }
    v2 = (*(uint64_t (**)(uint64_t, uint64_t, int *, int *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v9, &v17, &v14, a2 + 72);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 248))(&v13, a1);
    if (BYTE1(v13))
      *(_DWORD *)(a2 + 52) = (_BYTE)v13 == 0;
  }
  return v2;
}

uint64_t webrtc::ProcessReverseAudioFrame(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v8;
  _BYTE *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  void *v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  result = 4294967291;
  if (!a1 || !a2)
    return result;
  v5 = *(_DWORD *)(a2 + 32);
  result = 4294967289;
  if (v5 > 31999)
  {
    if (v5 != 48000 && v5 != 32000)
      return result;
  }
  else if (v5 != 8000 && v5 != 16000)
  {
    return result;
  }
  v8 = *(_QWORD *)(a2 + 40);
  if (!v8)
    return 4294967287;
  v19 = *(_DWORD *)(a2 + 32);
  v20 = v8;
  v21 = (unsigned __int16)v5 / 0x64u;
  v16 = v5;
  v17 = v8;
  v18 = v21;
  v9 = (_BYTE *)(a2 + 15432);
  if (*(_BYTE *)(a2 + 15432))
  {
    v11 = &qword_254572000;
    if ((v10 & 1) == 0)
    {
      v15 = (_BYTE *)(a2 + 15432);
      v9 = (_BYTE *)(a2 + 15432);
      if (v13)
      {
        v14 = (void *)operator new[]();
        bzero(v14, 0x3C00uLL);
        webrtc::AudioFrame::zeroed_data(void)::null_data = (uint64_t)v14;
        v11 = &qword_254572000;
        v9 = v15;
      }
    }
    v12 = v11[163];
    if (*v9)
      bzero((void *)(a2 + 72), 0x3C01uLL);
  }
  else
  {
    v12 = a2 + 72;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, int *, uint64_t))(*(_QWORD *)a1 + 144))(a1, v12, &v19, &v16, a2 + 72);
}

void webrtc::AudioMixerImpl::~AudioMixerImpl(webrtc::AudioMixerImpl *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  *(_QWORD *)this = &unk_24C0AE070;
  webrtc::FrameCombiner::~FrameCombiner((webrtc::AudioMixerImpl *)((char *)this + 112));
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 24);
    if (v3)
    {
      *(_QWORD *)(v2 + 32) = v3;
      operator delete(v3);
    }
    v4 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v4;
      operator delete(v4);
    }
    MEMORY[0x20BD0ADEC](v2, 0x90C40E792C71BLL);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 10);
  if (v5)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 11);
    v7 = (void *)*((_QWORD *)this + 10);
    if (v6 != v5)
    {
      do
      {
        v10 = *--v6;
        v9 = v10;
        *v6 = 0;
        if (v10)
        {
          v11 = *(_QWORD *)(v9 + 72);
          if (v11)
          {
            do
            {
              v12 = __ldaxr((unsigned int *)v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, (unsigned int *)v11));
            if (!v13)
            {
              v14 = *(_QWORD *)(v11 + 8);
              if (v14)
              {
                v15 = *(_QWORD *)(v11 + 16);
                v8 = *(void **)(v11 + 8);
                if (v15 != v14)
                {
                  do
                  {
                    v16 = *(void **)(v15 - 96);
                    if (v16)
                    {
                      *(_QWORD *)(v15 - 88) = v16;
                      operator delete(v16);
                    }
                    v15 -= 104;
                  }
                  while (v15 != v14);
                  v8 = *(void **)(v11 + 8);
                }
                *(_QWORD *)(v11 + 16) = v14;
                operator delete(v8);
              }
              MEMORY[0x20BD0ADEC](v11, 0x1020C40E72D6CFBLL);
            }
          }
          MEMORY[0x20BD0ADEC](v9, 0x1020C40FA38BBC1);
        }
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v5;
    operator delete(v7);
  }
  v17 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

void webrtc::AudioMixerImpl::Create(uint64_t *a1@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pthread_mutexattr_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)operator new();
  *v3 = &unk_24C0B2FA0;
  v4 = operator new();
  *(_QWORD *)v4 = &unk_24C0AE070;
  pthread_mutexattr_init(&v10);
  pthread_mutexattr_setpolicy_np(&v10, 3);
  pthread_mutex_init((pthread_mutex_t *)(v4 + 8), &v10);
  pthread_mutexattr_destroy(&v10);
  *(_QWORD *)(v4 + 72) = v3;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  v5 = (_OWORD *)operator new();
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  *(_QWORD *)(v4 + 104) = v5;
  *(_QWORD *)(v4 + 112) = operator new();
  v6 = (void *)operator new();
  bzero(v6, 0x3C00uLL);
  *(_QWORD *)(v4 + 120) = v6;
  v7 = *(_QWORD *)(v4 + 112);
  webrtc::InterpolatedGainCurve::InterpolatedGainCurve(v4 + 128, v7, "AudioMixer", 0xAuLL);
  *(_QWORD *)(v4 + 216) = v7;
  *(_DWORD *)(v4 + 224) = 0;
  *(_QWORD *)(v4 + 228) = 0x18000001E0;
  *(_QWORD *)(v4 + 240) = v7;
  bzero((void *)(v4 + 248), 0x7D4uLL);
  *(_DWORD *)(v4 + 2252) = 1065353216;
  *(_BYTE *)(v4 + 2256) = 1;
  *(_QWORD *)(v4 + 2264) = 0;
  *(_QWORD *)v4 = off_24C0AE0B8;
  v8 = (unsigned int *)(v4 + 2272);
  *(_DWORD *)(v4 + 2272) = 0;
  *a1 = v4;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
}

uint64_t webrtc::AudioMixerImpl::Mix(webrtc::AudioMixerImpl *this, unint64_t a2, webrtc::AudioFrame *a3)
{
  _QWORD **v5;
  unint64_t v6;
  _DWORD *v7;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int64_t v27;
  pthread_mutex_t *v29;

  v29 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v6 = *((_QWORD *)this + 10);
  v5 = (_QWORD **)*((_QWORD *)this + 11);
  if ((_QWORD **)v6 == v5)
  {
    v10 = 0;
  }
  else
  {
    v7 = *(_DWORD **)(*((_QWORD *)this + 13) + 24);
    v8 = (_QWORD **)*((_QWORD *)this + 10);
    do
    {
      v9 = *v8++;
      *v7++ = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
    }
    while (v8 != v5);
    v10 = *(_QWORD *)(*((_QWORD *)this + 13) + 24);
  }
  v11 = (uint64_t)((uint64_t)v5 - v6) >> 3;
  v13 = (***((uint64_t (****)(_QWORD, uint64_t, unint64_t))this + 9))(*((_QWORD *)this + 9), v10, v11);
  v14 = (_QWORD **)*((_QWORD *)this + 10);
  v15 = (_QWORD **)*((_QWORD *)this + 11);
  if (v14 == v15)
  {
LABEL_17:
    v27 = 0;
    v26 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      result = (**(uint64_t (***)(_QWORD, uint64_t, uint64_t))**v14)(**v14, v13, (uint64_t)(*v14 + 1));
      if ((_DWORD)result)
      {
        if ((_DWORD)result == 2 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        {
          v6 = v6 & 0xFFFFFFFF00000000 | 0x44A;
          rtc::webrtc_logging_impl::Log("\r\t\t\t", v18, v19, v20, v21, v22, v23, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_mixer/audio_mixer_impl.cc");
        }
      }
      else
      {
        v24 = v16;
        v25 = **((_QWORD **)this + 13);
        if (v16 >= (unint64_t)((*(_QWORD *)(*((_QWORD *)this + 13) + 8) - v25) >> 3))
        {
          __break(1u);
          return result;
        }
        ++v16;
        *(_QWORD *)(v25 + 8 * v24) = *v14 + 1;
      }
      ++v14;
    }
    while (v14 != v15);
    if (!v16)
      goto LABEL_17;
    v26 = (uint64_t *)**((_QWORD **)this + 13);
    v27 = v16;
  }
  webrtc::FrameCombiner::Combine((uint64_t)this + 112, v26, v27, a2, v13, v11, (uint64_t)a3, v12);
  return pthread_mutex_unlock(v29);
}

uint64_t webrtc::AudioMixerImpl::AddSource(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  std::vector<unsigned int> *v40;
  uint64_t v41;
  unint64_t v42;
  char *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int *value;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  char *v54;
  unsigned int *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  std::vector<unsigned int>::pointer v67;
  unint64_t v68;
  pthread_mutex_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  pthread_mutex_t *v75;

  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  v5 = operator new();
  v6 = v5;
  *(_QWORD *)v5 = a2;
  *(_DWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = -1;
  *(_QWORD *)(v5 + 24) = -1;
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0x200000004;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_BYTE *)(v5 + 15440) = 1;
  *(_BYTE *)(v5 + 15448) = 0;
  *(_BYTE *)(v5 + 15456) = 0;
  v8 = *(uint64_t **)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v9 = v8;
  *(_DWORD *)(v5 + 15444) = 0;
  v75 = v4;
  if ((unint64_t)v8 >= v7)
  {
    v11 = *(char **)(a1 + 80);
    v12 = ((char *)v8 - v11) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      goto LABEL_75;
    v14 = v7 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8;
    v16 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v15)
      v16 = v13;
    if (!v16)
      goto LABEL_74;
    if (v16 >> 61)
      goto LABEL_76;
    v17 = 8 * v16;
    v18 = (char *)operator new(8 * v16);
    v19 = (uint64_t *)&v18[8 * v12];
    v20 = &v18[v17];
    *v19 = v6;
    v10 = v19 + 1;
    if (v8 == (uint64_t *)v11)
    {
      *(_QWORD *)(a1 + 80) = v19;
      *(_QWORD *)(a1 + 88) = v10;
      *(_QWORD *)(a1 + 96) = v20;
    }
    else
    {
      v21 = (char *)v8 - v11 - 8;
      if (v21 < 0x78
        || (uint64_t *)((char *)v8 - (v21 & 0xFFFFFFFFFFFFFFF8) - 8) < v19
        && &v18[(char *)v8 - v11 - (v21 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v8)
      {
        goto LABEL_79;
      }
      v22 = (v21 >> 3) + 1;
      v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      v9 = &v8[v23 / 0xFFFFFFFFFFFFFFF8];
      v19 = (uint64_t *)((char *)v19 - v23);
      v24 = &v18[8 * v12 - 16];
      v25 = v8 - 2;
      v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *((_OWORD *)v25 - 1);
        v27 = *(_OWORD *)v25;
        *((_OWORD *)v25 - 1) = 0uLL;
        *(_OWORD *)v25 = 0uLL;
        *((_OWORD *)v24 - 1) = v28;
        *(_OWORD *)v24 = v27;
        v24 -= 32;
        v25 -= 4;
        v26 -= 4;
      }
      while (v26);
      if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_79:
        do
        {
          v29 = *--v9;
          *v9 = 0;
          *--v19 = v29;
        }
        while (v9 != (uint64_t *)v11);
      }
      v9 = *(uint64_t **)(a1 + 80);
      v30 = *(uint64_t **)(a1 + 88);
      *(_QWORD *)(a1 + 80) = v19;
      *(_QWORD *)(a1 + 88) = v10;
      *(_QWORD *)(a1 + 96) = v20;
      while (v30 != v9)
      {
        v33 = *--v30;
        v32 = v33;
        *v30 = 0;
        if (v33)
        {
          v34 = *(_QWORD *)(v32 + 72);
          if (v34)
          {
            do
            {
              v35 = __ldaxr((unsigned int *)v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, (unsigned int *)v34));
            if (!v36)
            {
              v37 = *(_QWORD *)(v34 + 8);
              if (v37)
              {
                v38 = *(_QWORD *)(v34 + 16);
                v31 = *(void **)(v34 + 8);
                if (v38 != v37)
                {
                  do
                  {
                    v39 = *(void **)(v38 - 96);
                    if (v39)
                    {
                      *(_QWORD *)(v38 - 88) = v39;
                      operator delete(v39);
                    }
                    v38 -= 104;
                  }
                  while (v38 != v37);
                  v31 = *(void **)(v34 + 8);
                }
                *(_QWORD *)(v34 + 16) = v37;
                operator delete(v31);
              }
              MEMORY[0x20BD0ADEC](v34, 0x1020C40E72D6CFBLL);
            }
          }
          MEMORY[0x20BD0ADEC](v32, 0x1020C40FA38BBC1);
        }
      }
    }
    if (v9)
      operator delete(v9);
  }
  else
  {
    if (!v8)
      goto LABEL_74;
    *v8 = v5;
    v10 = v8 + 1;
  }
  *(_QWORD *)(a1 + 88) = v10;
  v40 = *(std::vector<unsigned int> **)(a1 + 104);
  v41 = (uint64_t)v10 - *(_QWORD *)(a1 + 80);
  v42 = v41 >> 3;
  begin = v40->__begin_;
  end = (char *)v40->__end_;
  v45 = end - (char *)v40->__begin_;
  v46 = v45 >> 3;
  v47 = (v41 >> 3) - (v45 >> 3);
  if (v41 >> 3 > (unint64_t)(v45 >> 3))
  {
    value = v40->__end_cap_.__value_;
    if (v47 > ((char *)value - end) >> 3)
    {
      if ((v41 & 0x8000000000000000) == 0)
      {
        v49 = (char *)value - (char *)begin;
        v50 = value - begin;
        if (v50 <= v42)
          v50 = v41 >> 3;
        v15 = v49 >= 0x7FFFFFFFFFFFFFF8;
        v51 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v15)
          v51 = v50;
        if (!(v51 >> 61))
        {
          v52 = 8 * v51;
          v53 = operator new(8 * v51);
          v54 = &v53[8 * v46];
          v55 = (unsigned int *)&v53[v52];
          bzero(v54, ((v41 - v45 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
          v42 = v41 >> 3;
          if (end != (char *)begin)
          {
            v56 = end - (char *)begin - 8;
            if (v56 < 0x58)
              goto LABEL_80;
            if ((unint64_t)(&end[-v45] - v53) < 0x20)
              goto LABEL_80;
            v57 = (v56 >> 3) + 1;
            v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
            v59 = &end[-v58];
            v54 -= v58;
            v60 = &v53[8 * v46 - 16];
            v61 = end - 16;
            v62 = v57 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v63 = *(_OWORD *)v61;
              *(v60 - 1) = *((_OWORD *)v61 - 1);
              *v60 = v63;
              v60 -= 2;
              v61 -= 32;
              v62 -= 4;
            }
            while (v62);
            end = v59;
            if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_80:
              do
              {
                v64 = *((_QWORD *)end - 1);
                end -= 8;
                *((_QWORD *)v54 - 1) = v64;
                v54 -= 8;
              }
              while (end != (char *)begin);
            }
            end = (char *)begin;
          }
          v40->__begin_ = (std::vector<unsigned int>::pointer)v54;
          v40->__end_ = (std::vector<unsigned int>::pointer)&v53[8 * (v41 >> 3)];
          v40->__end_cap_.__value_ = v55;
          if (end)
          {
            operator delete(end);
            v42 = v41 >> 3;
          }
          goto LABEL_62;
        }
LABEL_76:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
LABEL_75:
      abort();
    }
    v65 = (unsigned int *)&end[8 * v47];
    v66 = 8 * v42 - 8 * v46;
    while (end)
    {
      *(_QWORD *)end = 0;
      end += 8;
      v66 -= 8;
      if (!v66)
        goto LABEL_61;
    }
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (v41 >> 3 < (unint64_t)(v45 >> 3))
  {
    v65 = &begin[2 * v42];
LABEL_61:
    v40->__end_ = v65;
  }
LABEL_62:
  v67 = v40[1].__begin_;
  v68 = v40[1].__end_ - v67;
  if (v42 <= v68)
  {
    v69 = v75;
    if (v42 < v68)
      v40[1].__end_ = &v67[v42];
  }
  else
  {
    std::vector<int>::__append(v40 + 1, v42 - v68);
    v69 = v75;
  }
  v70 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80);
  v71 = v70 >> 3;
  if ((unint64_t)(v70 >> 3) > *(_QWORD *)(a1 + 2264))
  {
    v72 = atomic_load(&webrtc::AudioMixerImpl::UpdateSourceCountStats(void)::atomic_histogram_pointer);
    if (v72)
    {
      webrtc::metrics::HistogramAdd(v72, (unint64_t)v70 >> 3);
    }
    else
    {
      while (!__ldaxr(&webrtc::AudioMixerImpl::UpdateSourceCountStats(void)::atomic_histogram_pointer))
      {
        if (!__stlxr(0, &webrtc::AudioMixerImpl::UpdateSourceCountStats(void)::atomic_histogram_pointer))
          goto LABEL_72;
      }
      __clrex();
    }
LABEL_72:
    *(_QWORD *)(a1 + 2264) = v71;
  }
  pthread_mutex_unlock(v69);
  return 1;
}

uint64_t webrtc::AudioMixerImpl::RemoveSource(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  v5 = *(_QWORD ***)(a1 + 80);
  v6 = *(_QWORD **)(a1 + 88);
  if (v5 == v6)
    goto LABEL_5;
  do
  {
    if (**v5 == a2)
      goto LABEL_5;
    ++v5;
  }
  while (v5 != v6);
  do
  {
    __break(1u);
LABEL_5:
    ;
  }
  while (v6 == v5);
  v7 = v5 + 1;
  if (v5 + 1 != v6)
  {
    do
    {
      v9 = (_QWORD *)*v7;
      *v7 = 0;
      v10 = *v5;
      *v5 = v9;
      if (v10)
      {
        v11 = v10[9];
        if (v11)
        {
          do
          {
            v12 = __ldaxr((unsigned int *)v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, (unsigned int *)v11));
          if (!v13)
          {
            v14 = *(_QWORD *)(v11 + 8);
            if (v14)
            {
              v15 = *(_QWORD *)(v11 + 16);
              v8 = *(void **)(v11 + 8);
              if (v15 != v14)
              {
                do
                {
                  v16 = *(void **)(v15 - 96);
                  if (v16)
                  {
                    *(_QWORD *)(v15 - 88) = v16;
                    operator delete(v16);
                  }
                  v15 -= 104;
                }
                while (v15 != v14);
                v8 = *(void **)(v11 + 8);
              }
              *(_QWORD *)(v11 + 16) = v14;
              operator delete(v8);
            }
            MEMORY[0x20BD0ADEC](v11, 0x1020C40E72D6CFBLL);
          }
        }
        MEMORY[0x20BD0ADEC](v10, 0x1020C40FA38BBC1);
      }
      ++v7;
      ++v5;
    }
    while (v7 != v6);
    v6 = *(_QWORD **)(a1 + 88);
  }
  while (v6 != v5)
  {
    v19 = *--v6;
    v18 = v19;
    *v6 = 0;
    if (v19)
    {
      v20 = *(_QWORD *)(v18 + 72);
      if (v20)
      {
        do
        {
          v21 = __ldaxr((unsigned int *)v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, (unsigned int *)v20));
        if (!v22)
        {
          v23 = *(_QWORD *)(v20 + 8);
          if (v23)
          {
            v24 = *(_QWORD *)(v20 + 16);
            v17 = *(void **)(v20 + 8);
            if (v24 != v23)
            {
              do
              {
                v25 = *(void **)(v24 - 96);
                if (v25)
                {
                  *(_QWORD *)(v24 - 88) = v25;
                  operator delete(v25);
                }
                v24 -= 104;
              }
              while (v24 != v23);
              v17 = *(void **)(v20 + 8);
            }
            *(_QWORD *)(v20 + 16) = v23;
            operator delete(v17);
          }
          MEMORY[0x20BD0ADEC](v20, 0x1020C40E72D6CFBLL);
        }
      }
      MEMORY[0x20BD0ADEC](v18, 0x1020C40FA38BBC1);
    }
  }
  *(_QWORD *)(a1 + 88) = v5;
  return pthread_mutex_unlock(v4);
}

void std::vector<int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v6;
  std::vector<unsigned int>::pointer begin;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  std::vector<unsigned int>::size_type v14;
  unsigned int *v15;
  std::vector<unsigned int>::size_type v16;
  unsigned int *v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  unsigned int v26;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v6 = end;
  if (__n > value - end)
  {
    begin = this->__begin_;
    v8 = (char *)end - (char *)this->__begin_;
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + __n;
    if (!(v10 >> 62))
    {
      v11 = (char *)value - (char *)begin;
      if (v11 >> 1 > v10)
        v10 = v11 >> 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 62)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v13 = operator new(4 * v12);
      }
      else
      {
        v13 = 0;
      }
      v15 = (unsigned int *)&v13[4 * v9];
      v16 = 4 * __n;
      v17 = &v15[__n];
      v18 = v15;
      do
      {
        if (!v18)
          goto LABEL_31;
        *v18++ = 0;
        v16 -= 4;
      }
      while (v16);
      if (end != begin)
      {
        v19 = (char *)end - (char *)begin - 4;
        if (v19 < 0x2C)
          goto LABEL_36;
        if ((unint64_t)((char *)end - &v13[v8]) < 0x20)
          goto LABEL_36;
        v20 = (v19 >> 2) + 1;
        v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
        v6 = &end[v21 / 0xFFFFFFFFFFFFFFFCLL];
        v15 = (unsigned int *)((char *)v15 - v21);
        v22 = &v13[4 * v9 - 16];
        v23 = (__int128 *)(end - 4);
        v24 = v20 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v25 = *v23;
          *(v22 - 1) = *(v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 2;
          v24 -= 8;
        }
        while (v24);
        if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_36:
          do
          {
            v26 = *--v6;
            *--v15 = v26;
          }
          while (v6 != begin);
        }
      }
      this->__begin_ = v15;
      this->__end_ = v17;
      this->__end_cap_.__value_ = (unsigned int *)&v13[4 * v12];
      if (begin)
        operator delete(begin);
      return;
    }
LABEL_32:
    abort();
  }
  if (!__n)
    goto LABEL_16;
  v14 = 4 * __n;
  do
  {
    if (!v6)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    *v6++ = 0;
    v14 -= 4;
  }
  while (v14);
  v6 = &end[__n];
LABEL_16:
  this->__end_ = v6;
}

uint64_t rtc::RefCountedObject<webrtc::AudioMixerImpl>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 2272);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::AudioMixerImpl>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 568;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::AudioMixerImpl>::~RefCountedObject(webrtc::AudioMixerImpl *a1)
{
  webrtc::AudioMixerImpl::~AudioMixerImpl(a1);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::AudioMixerImpl>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 2272));
  return v1 == 1;
}

webrtc::AudioMultiVector *webrtc::AudioMultiVector::AudioMultiVector(webrtc::AudioMultiVector *this, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t **v29;
  uint64_t v30;

  v3 = 0;
  *(_QWORD *)this = &off_24C0AE108;
  *((_QWORD *)this + 1) = 0;
  v29 = (uint64_t **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2 <= 1)
    v4 = 1;
  else
    v4 = a2;
  do
  {
    v6 = operator new();
    *(_QWORD *)v6 = &off_24C0AEF80;
    v7 = (_QWORD *)operator new[]();
    *(_QWORD *)(v6 + 8) = v7;
    *(_OWORD *)(v6 + 16) = xmmword_208F05090;
    *(_QWORD *)(v6 + 32) = 10;
    *v7 = 0;
    v7[1] = 0;
    *(_QWORD *)((char *)v7 + 14) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v9 = (uint64_t *)*((_QWORD *)this + 2);
    v8 = *((_QWORD *)this + 3);
    if ((unint64_t)v9 < v8)
    {
      if (!v9)
        goto LABEL_28;
      *v9 = v6;
      v5 = v9 + 1;
      goto LABEL_6;
    }
    v10 = *v29;
    v11 = (char *)v9 - (char *)*v29;
    v12 = v11 >> 3;
    v13 = (v11 >> 3) + 1;
    if (v13 >> 61)
      goto LABEL_29;
    v14 = v8 - (_QWORD)v10;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8;
    v16 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v15)
      v16 = v13;
    if (!v16)
    {
LABEL_28:
      __break(1u);
LABEL_29:
      abort();
    }
    if (v16 >> 61)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v30 = 8 * v16;
    v17 = operator new(8 * v16);
    v18 = (uint64_t *)&v17[8 * v12];
    *v18 = v6;
    v5 = v18 + 1;
    if (v9 == v10)
      goto LABEL_22;
    v19 = (char *)v9 - (char *)v10 - 8;
    if (v19 >= 0x58 && (unint64_t)((char *)v9 - &v17[v11]) >= 0x20)
    {
      v20 = (v19 >> 3) + 1;
      v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v22 = &v9[v21 / 0xFFFFFFFFFFFFFFF8];
      v18 = (uint64_t *)((char *)v18 - v21);
      v23 = &v17[8 * v12 - 16];
      v24 = v9 - 2;
      v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 4;
        v25 -= 4;
      }
      while (v25);
      v9 = v22;
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v9 = v10;
LABEL_22:
        *((_QWORD *)this + 1) = v18;
        *((_QWORD *)this + 2) = v5;
        *((_QWORD *)this + 3) = &v17[v30];
        if (v9)
          goto LABEL_26;
        goto LABEL_6;
      }
    }
    do
    {
      v27 = *--v9;
      *--v18 = v27;
    }
    while (v9 != v10);
    v9 = v10;
    *((_QWORD *)this + 1) = v18;
    *((_QWORD *)this + 2) = v5;
    *((_QWORD *)this + 3) = &v17[v30];
    if (v10)
LABEL_26:
      operator delete(v9);
LABEL_6:
    *((_QWORD *)this + 2) = v5;
    ++v3;
  }
  while (v3 != v4);
  *((_QWORD *)this + 4) = v4;
  return this;
}

webrtc::AudioMultiVector *webrtc::AudioMultiVector::AudioMultiVector(webrtc::AudioMultiVector *this, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  webrtc::AudioMultiVector *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void (**v9)(webrtc::AudioVector *__hidden);
  _QWORD *v10;
  void *v11;
  unint64_t v12;
  char *v13;
  webrtc::AudioMultiVector *v14;
  void (**v15)(webrtc::AudioVector *__hidden);
  size_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v41;
  char **v42;
  uint64_t v43;

  v3 = a3;
  v4 = this;
  v5 = 0;
  *(_QWORD *)this = &off_24C0AE108;
  *((_QWORD *)this + 1) = 0;
  v42 = (char **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2 <= 1)
    v6 = 1;
  else
    v6 = a2;
  v7 = a3 + 1;
  v8 = 2 * (a3 + 1);
  v9 = &off_24C0AEF80;
  v41 = v6;
  do
  {
    while (1)
    {
      v10 = (_QWORD *)operator new();
      *v10 = v9;
      v11 = (void *)operator new[]();
      v10[1] = v11;
      v10[2] = v7;
      v10[3] = 0;
      v10[4] = v3;
      bzero(v11, v8);
      v13 = (char *)*((_QWORD *)v4 + 2);
      v12 = *((_QWORD *)v4 + 3);
      if ((unint64_t)v13 < v12)
        break;
      v14 = v4;
      v15 = v9;
      v16 = v8;
      v17 = v7;
      v18 = *v42;
      v19 = v13 - *v42;
      v20 = v19 >> 3;
      v21 = (v19 >> 3) + 1;
      if (v21 >> 61)
        goto LABEL_33;
      v22 = v12 - (_QWORD)v18;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      v23 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8;
      v24 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v23)
        v24 = v21;
      if (!v24)
      {
LABEL_32:
        __break(1u);
LABEL_33:
        abort();
      }
      if (v24 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v43 = 8 * v24;
      v25 = operator new(8 * v24);
      v26 = &v25[8 * v20];
      *v26 = v10;
      v27 = v26 + 1;
      if (v13 == v18)
      {
        v7 = v17;
        v8 = v16;
        v9 = v15;
        v4 = v14;
        *((_QWORD *)v14 + 1) = v26;
        *((_QWORD *)v14 + 2) = v27;
        *((_QWORD *)v14 + 3) = &v25[v43];
        if (!v13)
          goto LABEL_5;
        goto LABEL_30;
      }
      v28 = v13 - v18 - 8;
      if (v28 >= 0x58)
      {
        v29 = &v13[-v19] - v25;
        v7 = v17;
        v8 = v16;
        v9 = v15;
        v4 = v14;
        if (v29 >= 0x20)
        {
          v30 = (v28 >> 3) + 1;
          v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
          v32 = &v13[-v31];
          v26 = (_QWORD *)((char *)v26 - v31);
          v33 = &v25[8 * v20 - 16];
          v34 = v13 - 16;
          v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v36 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            *v33 = v36;
            v33 -= 2;
            v34 -= 32;
            v35 -= 4;
          }
          while (v35);
          v13 = v32;
          if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
          {
            v13 = v18;
            *((_QWORD *)v14 + 1) = v26;
            *((_QWORD *)v14 + 2) = v27;
            *((_QWORD *)v14 + 3) = &v25[v43];
            if (!v18)
              goto LABEL_5;
            goto LABEL_30;
          }
        }
      }
      else
      {
        v7 = v17;
        v8 = v16;
        v9 = v15;
        v4 = v14;
      }
      do
      {
        v37 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        *--v26 = v37;
      }
      while (v13 != v18);
      v13 = v18;
      *((_QWORD *)v4 + 1) = v26;
      *((_QWORD *)v4 + 2) = v27;
      *((_QWORD *)v4 + 3) = &v25[v43];
      if (!v18)
        goto LABEL_5;
LABEL_30:
      v38 = v27;
      operator delete(v13);
      v27 = v38;
LABEL_5:
      v3 = a3;
      v6 = v41;
      *((_QWORD *)v4 + 2) = v27;
      if (++v5 == v41)
        goto LABEL_31;
    }
    if (!v13)
      goto LABEL_32;
    *(_QWORD *)v13 = v10;
    *((_QWORD *)v4 + 2) = v13 + 8;
    ++v5;
  }
  while (v5 != v6);
LABEL_31:
  *((_QWORD *)v4 + 4) = v6;
  return v4;
}

void webrtc::AudioMultiVector::~AudioMultiVector(webrtc::AudioMultiVector *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24C0AE108;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3 == v2)
  {
    if (!v3)
      return;
    goto LABEL_3;
  }
  do
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      v2 = (_QWORD *)*((_QWORD *)this + 2);
    }
    ++v3;
  }
  while (v3 != v2);
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3)
  {
LABEL_3:
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24C0AE108;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3 == v2)
  {
    if (!v3)
      goto LABEL_9;
  }
  else
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        v2 = (_QWORD *)*((_QWORD *)this + 2);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = (_QWORD *)*((_QWORD *)this + 1);
    if (!v3)
LABEL_9:
      JUMPOUT(0x20BD0ADECLL);
  }
  *((_QWORD *)this + 2) = v3;
  operator delete(v3);
  goto LABEL_9;
}

_QWORD *webrtc::AudioMultiVector::Clear(_QWORD *this)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;

  if (this[4])
  {
    v1 = this;
    v2 = 0;
    while (1)
    {
      v3 = v1[1];
      if (v2 >= (v1[2] - v3) >> 3)
        break;
      this = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v2) + 16))(*(_QWORD *)(v3 + 8 * v2));
      if (++v2 >= v1[4])
        return this;
    }
    __break(1u);
  }
  return this;
}

_QWORD *webrtc::AudioMultiVector::Zeros(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (this[4])
  {
    v3 = this;
    v4 = 0;
    while (1)
    {
      v5 = v3[1];
      if (v4 >= (v3[2] - v5) >> 3)
        break;
      this = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 8 * v4) + 16))(*(_QWORD *)(v5 + 8 * v4));
      v6 = v3[1];
      if (v4 >= (v3[2] - v6) >> 3)
        break;
      this = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 8 * v4) + 96))(*(_QWORD *)(v6 + 8 * v4), a2);
      if (++v4 >= v3[4])
        return this;
    }
    __break(1u);
  }
  return this;
}

_QWORD *webrtc::AudioMultiVector::CopyTo(_QWORD *this, webrtc::AudioMultiVector *a2)
{
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2)
  {
    v2 = this;
    if (this[4])
    {
      v4 = 0;
      while (1)
      {
        v5 = v2[1];
        if (v4 >= (v2[2] - v5) >> 3)
          break;
        v6 = *((_QWORD *)a2 + 1);
        if (v4 >= (*((_QWORD *)a2 + 2) - v6) >> 3)
          break;
        this = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 8 * v4) + 24))(*(_QWORD *)(v5 + 8 * v4), *(_QWORD *)(v6 + 8 * v4));
        if (++v4 >= v2[4])
          return this;
      }
      __break(1u);
    }
  }
  return this;
}

_QWORD *webrtc::AudioMultiVector::PushBackInterleaved(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  unint64_t v21;
  _WORD *v22;
  _WORD *v23;
  uint64_t v24;
  uint64_t v25;

  if (a3)
  {
    v5 = result;
    v6 = result[4];
    if (v6 == 1)
    {
      v7 = (_QWORD *)result[1];
      if ((_QWORD *)result[2] != v7)
        return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v7 + 72))(*v7, a2, a3);
    }
    else
    {
      v8 = a3 / v6;
      v9 = operator new[]();
      v10 = v5[4];
      if (!v10)
LABEL_28:
        JUMPOUT(0x20BD0ADD4);
      if (v6 <= a3)
      {
        v13 = 0;
        if (v8 <= 1)
          v14 = 1;
        else
          v14 = v8;
        v15 = (__int128 *)(a2 + 16);
        while (1)
        {
          v16 = 0;
          if (v14 < 0x10)
            goto LABEL_22;
          if (v10 != 1)
            goto LABEL_22;
          if (v9 - (a2 + 2 * v13) < 0x20)
            goto LABEL_22;
          v17 = v14 & 0xFFFFFFFFFFFFFFF0;
          v18 = (_OWORD *)(v9 + 16);
          v19 = v15;
          do
          {
            v20 = *v19;
            *(v18 - 1) = *(v19 - 1);
            *v18 = v20;
            v19 += 2;
            v18 += 2;
            v17 -= 16;
          }
          while (v17);
          v16 = v14 & 0xFFFFFFFFFFFFFFF0;
          if (v14 != (v14 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_22:
            v21 = v14 - v16;
            v22 = (_WORD *)(v9 + 2 * v16);
            v23 = (_WORD *)(a2 + 2 * (v13 + v10 * v16));
            v24 = 2 * v10;
            do
            {
              *v22++ = *v23;
              v23 = (_WORD *)((char *)v23 + v24);
              --v21;
            }
            while (v21);
          }
          v25 = v5[1];
          if (v13 >= (v5[2] - v25) >> 3)
            break;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v25 + 8 * v13) + 72))(*(_QWORD *)(v25 + 8 * v13), v9, v8);
          ++v13;
          v10 = v5[4];
          v15 = (__int128 *)((char *)v15 + 2);
          if (v13 >= v10)
            goto LABEL_28;
        }
      }
      else
      {
        v11 = 0;
        while (1)
        {
          v12 = v5[1];
          if (v11 >= (v5[2] - v12) >> 3)
            break;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(v12 + 8 * v11) + 72))(*(_QWORD *)(v12 + 8 * v11), v9, a3 / v6);
          if (++v11 >= v5[4])
            goto LABEL_28;
        }
      }
    }
    __break(1u);
    goto LABEL_28;
  }
  return result;
}

_QWORD *webrtc::AudioMultiVector::PushBack(_QWORD *this, const webrtc::AudioMultiVector *a2)
{
  uint64_t v2;
  BOOL v3;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = this[4];
  if (v2)
    v3 = v2 == *((_QWORD *)a2 + 4);
  else
    v3 = 0;
  if (v3)
  {
    v5 = this;
    v6 = 0;
    while (1)
    {
      v7 = v5[1];
      if (v6 >= (v5[2] - v7) >> 3)
        break;
      v8 = *((_QWORD *)a2 + 1);
      if (v6 >= (*((_QWORD *)a2 + 2) - v8) >> 3)
        break;
      this = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 8 * v6) + 56))(*(_QWORD *)(v7 + 8 * v6), *(_QWORD *)(v8 + 8 * v6));
      if (++v6 >= v5[4])
        return this;
    }
    __break(1u);
  }
  return this;
}

uint64_t webrtc::AudioMultiVector::PushBackFromIndex(webrtc::AudioMultiVector *this, const webrtc::AudioMultiVector *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (*(uint64_t (**)(const webrtc::AudioMultiVector *))(*(_QWORD *)a2 + 120))(a2);
  if (v6 - 1 < a3)
    a3 = v6 - 1;
  result = (*(uint64_t (**)(const webrtc::AudioMultiVector *))(*(_QWORD *)a2 + 120))(a2);
  v8 = *((_QWORD *)this + 4);
  if (v8)
    v9 = v8 == *((_QWORD *)a2 + 4);
  else
    v9 = 0;
  if (v9)
  {
    v10 = 0;
    v11 = result - a3;
    while (1)
    {
      v12 = *((_QWORD *)this + 1);
      if (v10 >= (*((_QWORD *)this + 2) - v12) >> 3)
        break;
      v13 = *((_QWORD *)a2 + 1);
      if (v10 >= (*((_QWORD *)a2 + 2) - v13) >> 3)
        break;
      result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unint64_t))(**(_QWORD **)(v12 + 8 * v10) + 64))(*(_QWORD *)(v12 + 8 * v10), *(_QWORD *)(v13 + 8 * v10), v11, a3);
      if (++v10 >= *((_QWORD *)this + 4))
        return result;
    }
    __break(1u);
  }
  return result;
}

_QWORD *webrtc::AudioMultiVector::PopFront(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;

  if (this[4])
  {
    v3 = this;
    v4 = 0;
    while (1)
    {
      v5 = v3[1];
      if (v4 >= (v3[2] - v5) >> 3)
        break;
      this = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 8 * v4) + 80))(*(_QWORD *)(v5 + 8 * v4), a2);
      if (++v4 >= v3[4])
        return this;
    }
    __break(1u);
  }
  return this;
}

_QWORD *webrtc::AudioMultiVector::PopBack(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;

  if (this[4])
  {
    v3 = this;
    v4 = 0;
    while (1)
    {
      v5 = v3[1];
      if (v4 >= (v3[2] - v5) >> 3)
        break;
      this = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 8 * v4) + 88))(*(_QWORD *)(v5 + 8 * v4), a2);
      if (++v4 >= v3[4])
        return this;
    }
    __break(1u);
  }
  return this;
}

uint64_t webrtc::AudioMultiVector::ReadInterleaved(webrtc::AudioMultiVector *this, uint64_t a2, __int16 *a3)
{
  return (*(uint64_t (**)(webrtc::AudioMultiVector *, _QWORD, uint64_t, __int16 *))(*(_QWORD *)this + 80))(this, 0, a2, a3);
}

unint64_t webrtc::AudioMultiVector::ReadInterleavedFromIndex(webrtc::AudioMultiVector *this, unint64_t a2, unint64_t a3, __int16 *a4)
{
  unint64_t v8;
  unint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v8 = (*(uint64_t (**)(webrtc::AudioMultiVector *))(*(_QWORD *)this + 120))(this);
  if (v8 < a2)
    a2 = v8;
  result = (*(uint64_t (**)(webrtc::AudioMultiVector *))(*(_QWORD *)this + 120))(this);
  if (a2 + a3 > result)
  {
    result = (*(uint64_t (**)(webrtc::AudioMultiVector *))(*(_QWORD *)this + 120))(this);
    a3 = result - a2;
  }
  v10 = *((_QWORD *)this + 4);
  if (v10 == 1)
  {
    v11 = (_QWORD *)*((_QWORD *)this + 1);
    if (*((_QWORD **)this + 2) != v11)
    {
      (*(void (**)(_QWORD, unint64_t, unint64_t, __int16 *))(*(_QWORD *)*v11 + 32))(*v11, a3, a2, a4);
      return a3;
    }
    goto LABEL_18;
  }
  result = 0;
  if (a3 && v10)
  {
    v12 = 0;
    result = 0;
    v13 = (_QWORD *)*((_QWORD *)this + 1);
    v14 = (uint64_t)(*((_QWORD *)this + 2) - (_QWORD)v13) >> 3;
LABEL_11:
    v15 = v14;
    v16 = v10;
    v17 = v13;
    while (v15)
    {
      v18 = (_QWORD *)*v17++;
      v19 = v18[2];
      v20 = v12 + a2 + v18[3];
      v21 = v18[1];
      if (v20 < v19)
        v19 = 0;
      a4[result++] = *(_WORD *)(v21 + 2 * (v20 - v19));
      --v15;
      if (!--v16)
      {
        if (++v12 != a3)
          goto LABEL_11;
        return result;
      }
    }
LABEL_18:
    __break(1u);
  }
  return result;
}

uint64_t webrtc::AudioMultiVector::ReadInterleavedFromEnd(webrtc::AudioMultiVector *this, unint64_t a2, __int16 *a3)
{
  unint64_t v6;
  unint64_t v7;

  v6 = (*(uint64_t (**)(webrtc::AudioMultiVector *))(*(_QWORD *)this + 120))(this);
  if (v6 < a2)
    a2 = v6;
  v7 = (*(uint64_t (**)(webrtc::AudioMultiVector *))(*(_QWORD *)this + 120))(this) - a2;
  return (*(uint64_t (**)(webrtc::AudioMultiVector *, unint64_t, unint64_t, __int16 *))(*(_QWORD *)this + 80))(this, v7, a2, a3);
}

unint64_t webrtc::AudioMultiVector::OverwriteAt(webrtc::AudioMultiVector *this, const webrtc::AudioMultiVector *a2, unint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = (*(uint64_t (**)(const webrtc::AudioMultiVector *))(*(_QWORD *)a2 + 120))(a2);
  if (result < a3)
    a3 = result;
  v9 = *((_QWORD *)this + 4);
  if (v9)
    v10 = v9 == *((_QWORD *)a2 + 4);
  else
    v10 = 0;
  if (v10)
  {
    v11 = 0;
    while (1)
    {
      v12 = *((_QWORD *)this + 1);
      if (v11 >= (*((_QWORD *)this + 2) - v12) >> 3)
        break;
      v13 = *((_QWORD *)a2 + 1);
      if (v11 >= (*((_QWORD *)a2 + 2) - v13) >> 3)
        break;
      result = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t, uint64_t))(**(_QWORD **)(v12 + 8 * v11)
                                                                                    + 120))(*(_QWORD *)(v12 + 8 * v11), *(_QWORD *)(v13 + 8 * v11), a3, a4);
      if (++v11 >= *((_QWORD *)this + 4))
        return result;
    }
    __break(1u);
  }
  return result;
}

_QWORD *webrtc::AudioMultiVector::CrossFade(_QWORD *this, const webrtc::AudioMultiVector *a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = this[4];
  if (v3)
    v4 = v3 == *((_QWORD *)a2 + 4);
  else
    v4 = 0;
  if (v4)
  {
    v7 = this;
    v8 = 0;
    while (1)
    {
      v9 = v7[1];
      if (v8 >= (v7[2] - v9) >> 3)
        break;
      v10 = *((_QWORD *)a2 + 1);
      if (v8 >= (*((_QWORD *)a2 + 2) - v10) >> 3)
        break;
      this = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v9 + 8 * v8) + 136))(*(_QWORD *)(v9 + 8 * v8), *(_QWORD *)(v10 + 8 * v8), a3);
      if (++v8 >= v7[4])
        return this;
    }
    __break(1u);
  }
  return this;
}

uint64_t webrtc::AudioMultiVector::Channels(webrtc::AudioMultiVector *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t webrtc::AudioMultiVector::Size(uint64_t this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(this + 8);
  if (*(_QWORD **)(this + 16) != v1)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 144))(*v1);
  __break(1u);
  return this;
}

unint64_t webrtc::AudioMultiVector::AssertSize(webrtc::AudioMultiVector *this, unint64_t a2)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(webrtc::AudioMultiVector *))(*(_QWORD *)this + 120))(this);
  if (result < a2)
  {
    result = (*(uint64_t (**)(webrtc::AudioMultiVector *))(*(_QWORD *)this + 120))(this);
    if (*((_QWORD *)this + 4))
    {
      v5 = 0;
      v6 = a2 - result;
      while (1)
      {
        v7 = *((_QWORD *)this + 1);
        if (v5 >= (*((_QWORD *)this + 2) - v7) >> 3)
          break;
        result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v7 + 8 * v5) + 96))(*(_QWORD *)(v7 + 8 * v5), v6);
        if (++v5 >= *((_QWORD *)this + 4))
          return result;
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t webrtc::AudioMultiVector::Empty(uint64_t this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(this + 8);
  if (*(_QWORD **)(this + 16) != v1)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 152))(*v1);
  __break(1u);
  return this;
}

uint64_t webrtc::AudioMultiVector::CopyChannel(uint64_t this, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(this + 8);
  v4 = (*(_QWORD *)(this + 16) - v3) >> 3;
  if (v4 > a2 && v4 > a3)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 8 * a2) + 24))(*(_QWORD *)(v3 + 8 * a2), *(_QWORD *)(v3 + 8 * a3));
  __break(1u);
  return this;
}

void webrtc::AudioNetworkAdaptorImpl::~AudioNetworkAdaptorImpl(webrtc::AudioNetworkAdaptorImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x20BD0ADEC](v2, 0x1060C40A44DC76DLL);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x20BD0ADEC](v2, 0x1060C40A44DC76DLL);
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::AudioNetworkAdaptorImpl::SetUplinkBandwidth(webrtc::AudioNetworkAdaptorImpl *this, int a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;

  *((_DWORD *)this + 10) = a2;
  v4 = (char *)this + 40;
  *((_BYTE *)this + 44) = 1;
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    if (rtc::g_clock)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v6 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v5 + 24))(v5, v4, v6 / 1000000);
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v10 = a2;
  v11 = 1;
  (*(void (**)(uint64_t **__return_ptr))(**((_QWORD **)this + 2) + 24))(&v20);
  v7 = v20;
  v8 = v21;
  if (v20 != v21)
  {
    do
    {
      v9 = *v7++;
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 16))(v9, &v10);
    }
    while (v7 != v8);
    v7 = v20;
  }
  if (v7)
  {
    v21 = v7;
    operator delete(v7);
  }
}

void webrtc::AudioNetworkAdaptorImpl::SetUplinkPacketLossFraction(webrtc::AudioNetworkAdaptorImpl *this, float a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE v9[8];
  float v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t *v18;
  uint64_t *v19;

  *((float *)this + 12) = a2;
  *((_BYTE *)this + 52) = 1;
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    if (rtc::g_clock)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v5 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v4 + 24))(v4, (char *)this + 40, v5 / 1000000);
  }
  v9[0] = 0;
  v9[4] = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v10 = a2;
  v11 = 1;
  (*(void (**)(uint64_t **__return_ptr))(**((_QWORD **)this + 2) + 24))(&v18);
  v6 = v18;
  v7 = v19;
  if (v18 != v19)
  {
    do
    {
      v8 = *v6++;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, v9);
    }
    while (v6 != v7);
    v6 = v18;
  }
  if (v6)
  {
    v19 = v6;
    operator delete(v6);
  }
}

void webrtc::AudioNetworkAdaptorImpl::SetRtt(webrtc::AudioNetworkAdaptorImpl *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char v12;
  char v13;
  uint64_t *v14;
  uint64_t *v15;

  *((_DWORD *)this + 16) = a2;
  *((_BYTE *)this + 68) = 1;
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    if (rtc::g_clock)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v5 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v4 + 24))(v4, (char *)this + 40, v5 / 1000000);
  }
  v9[0] = 0;
  v9[4] = 0;
  v9[8] = 0;
  v9[12] = 0;
  v9[16] = 0;
  v9[20] = 0;
  v12 = 0;
  v13 = 0;
  v10 = a2;
  v11 = 1;
  (*(void (**)(uint64_t **__return_ptr))(**((_QWORD **)this + 2) + 24))(&v14);
  v6 = v14;
  v7 = v15;
  if (v14 != v15)
  {
    do
    {
      v8 = *v6++;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, v9);
    }
    while (v6 != v7);
    v6 = v14;
  }
  if (v6)
  {
    v15 = v6;
    operator delete(v6);
  }
}

void webrtc::AudioNetworkAdaptorImpl::SetTargetAudioBitrate(webrtc::AudioNetworkAdaptorImpl *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE v9[16];
  int v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;

  *((_DWORD *)this + 14) = a2;
  *((_BYTE *)this + 60) = 1;
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    if (rtc::g_clock)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v5 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v4 + 24))(v4, (char *)this + 40, v5 / 1000000);
  }
  v9[0] = 0;
  v9[4] = 0;
  v9[8] = 0;
  v9[12] = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v10 = a2;
  v11 = 1;
  (*(void (**)(uint64_t **__return_ptr))(**((_QWORD **)this + 2) + 24))(&v16);
  v6 = v16;
  v7 = v17;
  if (v16 != v17)
  {
    do
    {
      v8 = *v6++;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, v9);
    }
    while (v6 != v7);
    v6 = v16;
  }
  if (v6)
  {
    v17 = v6;
    operator delete(v6);
  }
}

void webrtc::AudioNetworkAdaptorImpl::SetOverhead(webrtc::AudioNetworkAdaptorImpl *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE v9[32];
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t *v13;

  *((_QWORD *)this + 9) = a2;
  *((_BYTE *)this + 80) = 1;
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    if (rtc::g_clock)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v5 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v4 + 24))(v4, (char *)this + 40, v5 / 1000000);
  }
  v9[0] = 0;
  v9[4] = 0;
  v9[8] = 0;
  v9[12] = 0;
  v9[16] = 0;
  v9[20] = 0;
  v9[24] = 0;
  v9[28] = 0;
  v10 = a2;
  v11 = 1;
  (*(void (**)(uint64_t **__return_ptr))(**((_QWORD **)this + 2) + 24))(&v12);
  v6 = v12;
  v7 = v13;
  if (v12 != v13)
  {
    do
    {
      v8 = *v6++;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 16))(v8, v9);
    }
    while (v6 != v7);
    v6 = v12;
  }
  if (v6)
  {
    v13 = v6;
    operator delete(v6);
  }
}

double webrtc::AudioNetworkAdaptorImpl::GetEncoderRuntimeConfig@<D0>(webrtc::AudioNetworkAdaptorImpl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  _BYTE *v17;
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v24;
  uint64_t *v25;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  (*(void (**)(uint64_t **__return_ptr, _QWORD, char *))(**((_QWORD **)this + 2) + 16))(&v24, *((_QWORD *)this + 2), (char *)this + 40);
  v4 = v24;
  v5 = v25;
  if (v24 != v25)
  {
    do
    {
      v6 = *v4++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2);
    }
    while (v4 != v5);
    v4 = v24;
  }
  if (v4)
  {
    v25 = v4;
    operator delete(v4);
  }
  v7 = (_OWORD *)((char *)this + 88);
  if (!*((_BYTE *)this + 144))
  {
    v8 = *(_OWORD *)(a2 + 16);
    *v7 = *(_OWORD *)a2;
    *(_OWORD *)((char *)this + 104) = v8;
    v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)((char *)this + 120) = v9;
    *((_BYTE *)this + 136) = *(_BYTE *)(a2 + 48);
    *((_BYTE *)this + 144) = 1;
    v10 = *((_QWORD *)this + 3);
    if (!v10)
      goto LABEL_64;
    goto LABEL_58;
  }
  if (*(_BYTE *)(a2 + 4) && *((_BYTE *)this + 92))
  {
    if (*(_DWORD *)a2 == *(_DWORD *)v7)
      goto LABEL_18;
  }
  else if ((*(_BYTE *)(a2 + 4) != 0) == (*((_BYTE *)this + 92) != 0))
  {
    goto LABEL_18;
  }
  if (*((_BYTE *)this + 156))
    v11 = *((_DWORD *)this + 38) + 1;
  else
    v11 = 1;
  *((_DWORD *)this + 38) = v11;
  *((_BYTE *)this + 156) = 1;
LABEL_18:
  if (*(_BYTE *)(a2 + 27) && *((_BYTE *)this + 115))
  {
    if (*(unsigned __int8 *)(a2 + 26) == *((unsigned __int8 *)this + 114))
      goto LABEL_27;
  }
  else if ((*(_BYTE *)(a2 + 27) != 0) == (*((_BYTE *)this + 115) != 0))
  {
    goto LABEL_27;
  }
  if (*((_BYTE *)this + 172))
    v12 = *((_DWORD *)this + 42) + 1;
  else
    v12 = 1;
  *((_DWORD *)this + 42) = v12;
  *((_BYTE *)this + 172) = 1;
LABEL_27:
  if (*(_BYTE *)(a2 + 25) && *((_BYTE *)this + 113))
  {
    if (*(unsigned __int8 *)(a2 + 24) == *((unsigned __int8 *)this + 112))
      goto LABEL_36;
  }
  else if ((*(_BYTE *)(a2 + 25) != 0) == (*((_BYTE *)this + 113) != 0))
  {
    goto LABEL_36;
  }
  if (*((_BYTE *)this + 180))
    v13 = *((_DWORD *)this + 44) + 1;
  else
    v13 = 1;
  *((_DWORD *)this + 44) = v13;
  *((_BYTE *)this + 180) = 1;
LABEL_36:
  if (*(_BYTE *)(a2 + 12) && *((_BYTE *)this + 100))
  {
    v14 = *(_DWORD *)(a2 + 8);
    v15 = *((_DWORD *)this + 24);
    if (v14 <= v15)
    {
      if (v14 >= v15)
        goto LABEL_46;
      v16 = (char *)this + 192;
      v17 = (char *)this + 196;
    }
    else
    {
      v16 = (char *)this + 184;
      v17 = (char *)this + 188;
    }
    if (*v17)
      v18 = *(_DWORD *)v16 + 1;
    else
      v18 = 1;
    *(_DWORD *)v16 = v18;
    *v17 = 1;
  }
LABEL_46:
  if (*(_BYTE *)(a2 + 40) && *((_BYTE *)this + 128))
  {
    if (*(_QWORD *)(a2 + 32) == *((_QWORD *)this + 15))
      goto LABEL_55;
  }
  else if ((*(_BYTE *)(a2 + 40) != 0) == (*((_BYTE *)this + 128) != 0))
  {
    goto LABEL_55;
  }
  if (*((_BYTE *)this + 164))
    v19 = *((_DWORD *)this + 40) + 1;
  else
    v19 = 1;
  *((_DWORD *)this + 40) = v19;
  *((_BYTE *)this + 164) = 1;
LABEL_55:
  if (*(_BYTE *)(a2 + 20))
  {
    *((_DWORD *)this + 50) = *(_DWORD *)(a2 + 16);
    *((_BYTE *)this + 204) = 1;
  }
  v20 = *(_OWORD *)(a2 + 16);
  *v7 = *(_OWORD *)a2;
  *(_OWORD *)((char *)this + 104) = v20;
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)((char *)this + 120) = v9;
  *((_BYTE *)this + 136) = *(_BYTE *)(a2 + 48);
  v10 = *((_QWORD *)this + 3);
  if (v10)
  {
LABEL_58:
    if (rtc::g_clock)
    {
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v21 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, a2, v21 / 1000000);
  }
LABEL_64:
  v22 = (uint64_t *)*((_QWORD *)this + 4);
  if (v22)
    *(_QWORD *)&v9 = webrtc::EventLogWriter::MaybeLogEncoderConfig(v22, a2).n128_u64[0];
  return *(double *)&v9;
}

uint64_t webrtc::AudioNetworkAdaptorImpl::StartDebugDump(webrtc::AudioNetworkAdaptorImpl *this, __sFILE *a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)operator new();
  *v3 = &unk_24C0B2CB0;
  v3[1] = 0;
  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t webrtc::AudioNetworkAdaptorImpl::StopDebugDump(webrtc::AudioNetworkAdaptorImpl *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

__n128 webrtc::AudioNetworkAdaptorImpl::GetStats@<Q0>(webrtc::AudioNetworkAdaptorImpl *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)((char *)this + 168);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 152);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)((char *)this + 184);
  *(__n128 *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 45) = *(_QWORD *)((char *)this + 197);
  return result;
}

void cricket::AudioOptions::~AudioOptions(void **this)
{
  if (*((_BYTE *)this + 64))
  {
    if (*((char *)this + 63) < 0)
      operator delete(this[5]);
  }
}

void cricket::AudioOptions::SetAll(cricket::AudioOptions *this, const cricket::AudioOptions *a2)
{
  int v4;
  int v5;

  if (*((_BYTE *)a2 + 1))
    *(_WORD *)this = *(_WORD *)a2;
  if (*((_BYTE *)a2 + 3))
    *((_WORD *)this + 1) = *((_WORD *)a2 + 1);
  if (*((_BYTE *)a2 + 5))
    *((_WORD *)this + 2) = *((_WORD *)a2 + 2);
  if (*((_BYTE *)a2 + 7))
    *((_WORD *)this + 3) = *((_WORD *)a2 + 3);
  if (*((_BYTE *)a2 + 9))
    *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  if (*((_BYTE *)a2 + 11))
    *((_WORD *)this + 5) = *((_WORD *)a2 + 5);
  if (*((_BYTE *)a2 + 16))
  {
    v4 = *((_DWORD *)a2 + 3);
    *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
    *((_DWORD *)this + 3) = v4;
  }
  if (*((_BYTE *)a2 + 21))
    *((_WORD *)this + 10) = *((_WORD *)a2 + 10);
  if (*((_BYTE *)a2 + 28))
  {
    v5 = *((_DWORD *)a2 + 6);
    *((_BYTE *)this + 28) = *((_BYTE *)a2 + 28);
    *((_DWORD *)this + 6) = v5;
  }
  if (*((_BYTE *)a2 + 33))
    *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  if (*((_BYTE *)a2 + 64))
    std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)((char *)this + 40), (std::string *)((char *)a2 + 40));
  if (*((_BYTE *)a2 + 73))
    *((_WORD *)this + 36) = *((_WORD *)a2 + 36);
}

uint64_t std::operator==[abi:sn180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2;
  _BOOL8 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;

  if (a1[24])
    v2 = a2[24] == 0;
  else
    v2 = 1;
  if (v2)
    return (a1[24] != 0) == (a2[24] != 0);
  v5 = a1[23];
  if ((v5 & 0x80u) == 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  v7 = a2[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a2 + 1);
  if (v6 != v7)
    return 0;
  if (v8 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v5 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (a1[23])
  {
    v9 = v5 - 1;
    do
    {
      v11 = *a1++;
      v10 = v11;
      v13 = *a2++;
      v12 = v13;
      v15 = v9-- != 0;
      v2 = v10 == v12;
      v3 = v10 == v12;
    }
    while (v2 && v15);
    return v3;
  }
  return 1;
}

unint64_t cricket::AudioOptions::ToString@<X0>(cricket::AudioOptions *this@<X0>, char *a2@<X8>)
{
  char *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t result;
  size_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *__s;
  __int128 v47;
  char v48[1024];
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = v48;
  __s = v48;
  strcpy(v48, "AudioOptions {");
  v47 = xmmword_208F050A0;
  if (*((_BYTE *)this + 1))
  {
    strcpy(&v48[14], "aec: ");
    *((_QWORD *)&v47 + 1) = 19;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *(unsigned __int8 *)this);
    if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
      v5 = 2;
    else
      v5 = v47 + ~*((_QWORD *)&v47 + 1);
    memcpy(&__s[*((_QWORD *)&v47 + 1)], ", ", v5);
    *((_QWORD *)&v47 + 1) += v5;
    __s[*((_QWORD *)&v47 + 1)] = 0;
    v6 = *((_QWORD *)&v47 + 1);
    v7 = v47;
    v4 = __s;
    if (!*((_BYTE *)this + 3))
    {
LABEL_6:
      if (!*((_BYTE *)this + 5))
        goto LABEL_7;
      goto LABEL_28;
    }
  }
  else
  {
    v7 = 1024;
    v6 = 14;
    if (!*((_BYTE *)this + 3))
      goto LABEL_6;
  }
  if ((unint64_t)(v7 + ~v6) >= 0x1B)
    v8 = 27;
  else
    v8 = v7 + ~v6;
  memcpy(&v4[v6], "ios_force_software_aec_HACK", v8);
  *((_QWORD *)&v47 + 1) += v8;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v9 = 2;
  else
    v9 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ": ", v9);
  *((_QWORD *)&v47 + 1) += v9;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if (!*((_BYTE *)this + 3))
    goto LABEL_141;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 2));
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v10 = 2;
  else
    v10 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ", ", v10);
  *((_QWORD *)&v47 + 1) += v10;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  v6 = *((_QWORD *)&v47 + 1);
  v7 = v47;
  v4 = __s;
  if (!*((_BYTE *)this + 5))
  {
LABEL_7:
    if (!*((_BYTE *)this + 7))
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_28:
  if ((unint64_t)(v7 + ~v6) >= 3)
    v11 = 3;
  else
    v11 = v7 + ~v6;
  memcpy(&v4[v6], "agc", v11);
  *((_QWORD *)&v47 + 1) += v11;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v12 = 2;
  else
    v12 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ": ", v12);
  *((_QWORD *)&v47 + 1) += v12;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if (!*((_BYTE *)this + 5))
    goto LABEL_141;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 4));
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v13 = 2;
  else
    v13 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ", ", v13);
  *((_QWORD *)&v47 + 1) += v13;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  v6 = *((_QWORD *)&v47 + 1);
  v7 = v47;
  v4 = __s;
  if (!*((_BYTE *)this + 7))
  {
LABEL_8:
    if (!*((_BYTE *)this + 9))
      goto LABEL_9;
    goto LABEL_50;
  }
LABEL_39:
  if ((unint64_t)(v7 + ~v6) >= 2)
    v14 = 2;
  else
    v14 = v7 + ~v6;
  memcpy(&v4[v6], "ns", v14);
  *((_QWORD *)&v47 + 1) += v14;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v15 = 2;
  else
    v15 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ": ", v15);
  *((_QWORD *)&v47 + 1) += v15;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if (!*((_BYTE *)this + 7))
    goto LABEL_141;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 6));
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v16 = 2;
  else
    v16 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ", ", v16);
  *((_QWORD *)&v47 + 1) += v16;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  v6 = *((_QWORD *)&v47 + 1);
  v7 = v47;
  v4 = __s;
  if (!*((_BYTE *)this + 9))
  {
LABEL_9:
    if (!*((_BYTE *)this + 11))
      goto LABEL_10;
    goto LABEL_61;
  }
LABEL_50:
  if ((unint64_t)(v7 + ~v6) >= 2)
    v17 = 2;
  else
    v17 = v7 + ~v6;
  memcpy(&v4[v6], "hf", v17);
  *((_QWORD *)&v47 + 1) += v17;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v18 = 2;
  else
    v18 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ": ", v18);
  *((_QWORD *)&v47 + 1) += v18;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if (!*((_BYTE *)this + 9))
    goto LABEL_141;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 8));
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v19 = 2;
  else
    v19 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ", ", v19);
  *((_QWORD *)&v47 + 1) += v19;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  v6 = *((_QWORD *)&v47 + 1);
  v7 = v47;
  v4 = __s;
  if (!*((_BYTE *)this + 11))
  {
LABEL_10:
    if (!*((_BYTE *)this + 16))
      goto LABEL_11;
    goto LABEL_72;
  }
LABEL_61:
  if ((unint64_t)(v7 + ~v6) >= 4)
    v20 = 4;
  else
    v20 = v7 + ~v6;
  memcpy(&v4[v6], "swap", v20);
  *((_QWORD *)&v47 + 1) += v20;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v21 = 2;
  else
    v21 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ": ", v21);
  *((_QWORD *)&v47 + 1) += v21;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if (!*((_BYTE *)this + 11))
    goto LABEL_141;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 10));
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v22 = 2;
  else
    v22 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ", ", v22);
  *((_QWORD *)&v47 + 1) += v22;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  v6 = *((_QWORD *)&v47 + 1);
  v7 = v47;
  v4 = __s;
  if (!*((_BYTE *)this + 16))
  {
LABEL_11:
    if (!*((_BYTE *)this + 21))
      goto LABEL_12;
    goto LABEL_83;
  }
LABEL_72:
  if ((unint64_t)(v7 + ~v6) >= 0x1F)
    v23 = 31;
  else
    v23 = v7 + ~v6;
  memcpy(&v4[v6], "audio_jitter_buffer_max_packets", v23);
  *((_QWORD *)&v47 + 1) += v23;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v24 = 2;
  else
    v24 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ": ", v24);
  *((_QWORD *)&v47 + 1) += v24;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if (!*((_BYTE *)this + 16))
    goto LABEL_141;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 3));
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v25 = 2;
  else
    v25 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ", ", v25);
  *((_QWORD *)&v47 + 1) += v25;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  v6 = *((_QWORD *)&v47 + 1);
  v7 = v47;
  v4 = __s;
  if (!*((_BYTE *)this + 21))
  {
LABEL_12:
    if (!*((_BYTE *)this + 28))
      goto LABEL_13;
LABEL_94:
    if ((unint64_t)(v7 + ~v6) >= 0x20)
      v29 = 32;
    else
      v29 = v7 + ~v6;
    memcpy(&v4[v6], "audio_jitter_buffer_min_delay_ms", v29);
    *((_QWORD *)&v47 + 1) += v29;
    __s[*((_QWORD *)&v47 + 1)] = 0;
    if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
      v30 = 2;
    else
      v30 = v47 + ~*((_QWORD *)&v47 + 1);
    memcpy(&__s[*((_QWORD *)&v47 + 1)], ": ", v30);
    *((_QWORD *)&v47 + 1) += v30;
    __s[*((_QWORD *)&v47 + 1)] = 0;
    if (!*((_BYTE *)this + 28))
      goto LABEL_141;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 6));
    if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
      v31 = 2;
    else
      v31 = v47 + ~*((_QWORD *)&v47 + 1);
    memcpy(&__s[*((_QWORD *)&v47 + 1)], ", ", v31);
    *((_QWORD *)&v47 + 1) += v31;
    __s[*((_QWORD *)&v47 + 1)] = 0;
    v6 = *((_QWORD *)&v47 + 1);
    v7 = v47;
    v4 = __s;
    if (!*((_BYTE *)this + 33))
      goto LABEL_14;
    goto LABEL_105;
  }
LABEL_83:
  if ((unint64_t)(v7 + ~v6) >= 0x23)
    v26 = 35;
  else
    v26 = v7 + ~v6;
  memcpy(&v4[v6], "audio_jitter_buffer_fast_accelerate", v26);
  *((_QWORD *)&v47 + 1) += v26;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v27 = 2;
  else
    v27 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ": ", v27);
  *((_QWORD *)&v47 + 1) += v27;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if (!*((_BYTE *)this + 21))
    goto LABEL_141;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 20));
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v28 = 2;
  else
    v28 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ", ", v28);
  *((_QWORD *)&v47 + 1) += v28;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  v6 = *((_QWORD *)&v47 + 1);
  v7 = v47;
  v4 = __s;
  if (*((_BYTE *)this + 28))
    goto LABEL_94;
LABEL_13:
  if (!*((_BYTE *)this + 33))
  {
LABEL_14:
    if (!*((_BYTE *)this + 73))
      goto LABEL_127;
    goto LABEL_116;
  }
LABEL_105:
  if ((unint64_t)(v7 + ~v6) >= 0x15)
    v32 = 21;
  else
    v32 = v7 + ~v6;
  memcpy(&v4[v6], "audio_network_adaptor", v32);
  *((_QWORD *)&v47 + 1) += v32;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v33 = 2;
  else
    v33 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ": ", v33);
  *((_QWORD *)&v47 + 1) += v33;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  if (!*((_BYTE *)this + 33))
    goto LABEL_141;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 32));
  if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
    v34 = 2;
  else
    v34 = v47 + ~*((_QWORD *)&v47 + 1);
  memcpy(&__s[*((_QWORD *)&v47 + 1)], ", ", v34);
  *((_QWORD *)&v47 + 1) += v34;
  __s[*((_QWORD *)&v47 + 1)] = 0;
  v6 = *((_QWORD *)&v47 + 1);
  v7 = v47;
  v4 = __s;
  if (*((_BYTE *)this + 73))
  {
LABEL_116:
    if ((unint64_t)(v7 + ~v6) >= 0x16)
      v35 = 22;
    else
      v35 = v7 + ~v6;
    memcpy(&v4[v6], "init_recording_on_send", v35);
    *((_QWORD *)&v47 + 1) += v35;
    __s[*((_QWORD *)&v47 + 1)] = 0;
    if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
      v36 = 2;
    else
      v36 = v47 + ~*((_QWORD *)&v47 + 1);
    memcpy(&__s[*((_QWORD *)&v47 + 1)], ": ", v36);
    *((_QWORD *)&v47 + 1) += v36;
    __s[*((_QWORD *)&v47 + 1)] = 0;
    if (*((_BYTE *)this + 73))
    {
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 72));
      if ((_QWORD)v47 + ~*((_QWORD *)&v47 + 1) >= 2uLL)
        v37 = 2;
      else
        v37 = v47 + ~*((_QWORD *)&v47 + 1);
      memcpy(&__s[*((_QWORD *)&v47 + 1)], ", ", v37);
      *((_QWORD *)&v47 + 1) += v37;
      __s[*((_QWORD *)&v47 + 1)] = 0;
      v6 = *((_QWORD *)&v47 + 1);
      v7 = v47;
      v4 = __s;
      goto LABEL_127;
    }
LABEL_141:
    __break(1u);
LABEL_142:
    abort();
  }
LABEL_127:
  v38 = v6 + 1;
  memcpy(&v4[v6], "}", v7 != v6 + 1);
  v39 = *((_QWORD *)&v47 + 1);
  if (v7 != v38)
    v39 = *((_QWORD *)&v47 + 1) + 1;
  *((_QWORD *)&v47 + 1) = v39;
  __s[v39] = 0;
  v40 = __s;
  if (!__s)
    goto LABEL_141;
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_142;
  v42 = result;
  if (result <= 0x16)
  {
    a2[23] = result;
    v43 = &a2[result];
    if (a2 > v40)
      goto LABEL_138;
    goto LABEL_137;
  }
  v44 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((result | 7) != 0x17)
    v44 = result | 7;
  v45 = v44 + 1;
  result = (unint64_t)operator new(v44 + 1);
  *((_QWORD *)a2 + 1) = v42;
  *((_QWORD *)a2 + 2) = v45 | 0x8000000000000000;
  *(_QWORD *)a2 = result;
  a2 = (char *)result;
  v43 = (char *)(result + v42);
  if (result <= (unint64_t)v40)
  {
LABEL_137:
    if (v43 <= v40)
      goto LABEL_138;
    goto LABEL_141;
  }
LABEL_138:
  if (v42)
    result = (unint64_t)memmove(a2, v40, v42);
  *v43 = 0;
  return result;
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, std::string *a2)
{
  __int128 v3;
  __int128 v4;
  size_t size;
  size_t v6;

  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this != a2 && this[1].__r_.__value_.__s.__data_[0])
    {
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      {
        size = a2->__r_.__value_.__l.__size_;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        {
          v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        }
        else
        {
          a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
          v6 = size;
        }
        std::string::__assign_no_alias<false>(this, (const std::string::value_type *)a2, v6);
      }
      else if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }
      else
      {
        v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
      }
    }
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(this->__r_.__value_.__l.__data_);
      this[1].__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      this[1].__r_.__value_.__s.__data_[0] = 0;
    }
  }
  else if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

BOOL webrtc::AudioProcessing::Config::GainController1::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2
      && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)
      && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2)
      && *((_DWORD *)a1 + 3) == *((_DWORD *)a2 + 3)
      && a1[16] == a2[16]
      && a1[20] == a2[20]
      && *((_DWORD *)a1 + 6) == *((_DWORD *)a2 + 6)
      && *((_DWORD *)a1 + 7) == *((_DWORD *)a2 + 7)
      && a1[32] == a2[32]
      && *((_DWORD *)a1 + 9) == *((_DWORD *)a2 + 9)
      && *((float *)a1 + 10) == *((float *)a2 + 10)
      && *((_DWORD *)a1 + 11) == *((_DWORD *)a2 + 11)
      && *((_DWORD *)a1 + 13) == *((_DWORD *)a2 + 13)
      && *((_DWORD *)a1 + 14) == *((_DWORD *)a2 + 14)
      && *((_DWORD *)a1 + 15) == *((_DWORD *)a2 + 15)
      && *((_DWORD *)a1 + 16) == *((_DWORD *)a2 + 16)
      && *((float *)a1 + 17) == *((float *)a2 + 17)
      && *((float *)a1 + 18) == *((float *)a2 + 18)
      && a1[76] == a2[76];
}

unint64_t webrtc::AudioProcessing::Config::ToString@<X0>(webrtc::AudioProcessing::Config *this@<X0>, char *a2@<X8>)
{
  size_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  rtc::webrtc_checks_impl *v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  int v26;
  unint64_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  size_t v38;
  size_t v39;
  size_t v40;
  size_t v41;
  size_t v42;
  size_t v43;
  size_t v44;
  size_t v45;
  size_t v46;
  size_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  size_t v51;
  size_t v52;
  size_t v53;
  size_t v54;
  size_t v55;
  size_t v56;
  char *v57;
  unint64_t result;
  size_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void *__p[2];
  char v64;
  void *__src;
  _BYTE v66[15];
  char v67;
  char *__s;
  __int128 v69;
  char v70[2056];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  __s = v70;
  strcpy(v70, "AudioProcessing::Config{ pipeline: { maximum_internal_processing_rate: ");
  v69 = xmmword_208F050B0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *(_DWORD *)this);
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x18uLL)
    v4 = 24;
  else
    v4 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], ", multi_channel_render: ", v4);
  *((_QWORD *)&v69 + 1) += v4;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 4));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x19uLL)
    v5 = 25;
  else
    v5 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], ", multi_channel_capture: ", v5);
  *((_QWORD *)&v69 + 1) += v5;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 5));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x1EuLL)
    v6 = 30;
  else
    v6 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], " }, pre_amplifier: { enabled: ", v6);
  *((_QWORD *)&v69 + 1) += v6;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 12));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x15uLL)
    v7 = 21;
  else
    v7 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], ", fixed_gain_factor: ", v7);
  *((_QWORD *)&v69 + 1) += v7;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%g", *((float *)this + 4));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x28uLL)
    v8 = 40;
  else
    v8 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], " },capture_level_adjustment: { enabled: ", v8);
  *((_QWORD *)&v69 + 1) += v8;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 20));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x13uLL)
    v9 = 19;
  else
    v9 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], ", pre_gain_factor: ", v9);
  *((_QWORD *)&v69 + 1) += v9;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%g", *((float *)this + 6));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x14uLL)
    v10 = 20;
  else
    v10 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], ", post_gain_factor: ", v10);
  *((_QWORD *)&v69 + 1) += v10;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%g", *((float *)this + 7));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x28uLL)
    v11 = 40;
  else
    v11 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], ", analog_mic_gain_emulation: { enabled: ", v11);
  *((_QWORD *)&v69 + 1) += v11;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 32));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x11uLL)
    v12 = 17;
  else
    v12 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], ", initial_level: ", v12);
  *((_QWORD *)&v69 + 1) += v12;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 9));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x22uLL)
    v13 = 34;
  else
    v13 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], " }}, high_pass_filter: { enabled: ", v13);
  *((_QWORD *)&v69 + 1) += v13;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 40));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x1FuLL)
    v14 = 31;
  else
    v14 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], " }, echo_canceller: { enabled: ", v14);
  *((_QWORD *)&v69 + 1) += v14;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 42));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0xFuLL)
    v15 = 15;
  else
    v15 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], ", mobile_mode: ", v15);
  *((_QWORD *)&v69 + 1) += v15;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 43));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x1FuLL)
    v16 = 31;
  else
    v16 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], ", enforce_high_pass_filtering: ", v16);
  *((_QWORD *)&v69 + 1) += v16;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 45));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x22uLL)
    v17 = 34;
  else
    v17 = v69 + ~*((_QWORD *)&v69 + 1);
  memcpy(&__s[*((_QWORD *)&v69 + 1)], " }, noise_suppression: { enabled: ", v17);
  *((_QWORD *)&v69 + 1) += v17;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 48));
  if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 9uLL)
    v18 = 9;
  else
    v18 = v69 + ~*((_QWORD *)&v69 + 1);
  v19 = (rtc::webrtc_checks_impl *)memcpy(&__s[*((_QWORD *)&v69 + 1)], ", level: ", v18);
  *((_QWORD *)&v69 + 1) += v18;
  __s[*((_QWORD *)&v69 + 1)] = 0;
  switch(*((_DWORD *)this + 13))
  {
    case 0:
      v67 = 3;
      if (&__src <= (void **)"Low" && (char *)&__src + 3 > "Low")
        goto LABEL_188;
      LODWORD(__src) = 7827276;
      v20 = 3;
      goto LABEL_60;
    case 1:
      v67 = 8;
      if (&__src <= (void **)"Moderate" && v66 > "Moderate")
        goto LABEL_188;
      v21 = 0x6574617265646F4DLL;
      goto LABEL_59;
    case 2:
      v67 = 4;
      if (&__src <= (void **)"High" && (char *)&__src + 4 > "High")
        goto LABEL_188;
      strcpy((char *)&__src, "High");
      v20 = 4;
      goto LABEL_60;
    case 3:
      v67 = 8;
      if (&__src <= (void **)"VeryHigh" && v66 > "VeryHigh")
        goto LABEL_188;
      v21 = 0x6867694879726556;
LABEL_59:
      __src = (void *)v21;
      v66[0] = 0;
      v20 = 8;
LABEL_60:
      if (v20 >= (_QWORD)v69 + ~*((_QWORD *)&v69 + 1))
        v22 = v69 + ~*((_QWORD *)&v69 + 1);
      else
        v22 = v20;
      memcpy(&__s[*((_QWORD *)&v69 + 1)], &__src, v22);
      *((_QWORD *)&v69 + 1) += v22;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x26uLL)
        v23 = 38;
      else
        v23 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], " }, transient_suppression: { enabled: ", v23);
      *((_QWORD *)&v69 + 1) += v23;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 60));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x21uLL)
        v24 = 33;
      else
        v24 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], " }, gain_controller1: { enabled: ", v24);
      *((_QWORD *)&v69 + 1) += v24;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 64));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 8uLL)
        v25 = 8;
      else
        v25 = v69 + ~*((_QWORD *)&v69 + 1);
      v19 = (rtc::webrtc_checks_impl *)memcpy(&__s[*((_QWORD *)&v69 + 1)], ", mode: ", v25);
      *((_QWORD *)&v69 + 1) += v25;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      v26 = *((_DWORD *)this + 17);
      if (v26 == 2)
      {
        v64 = 12;
        if (__p <= (void **)"FixedDigital" && (char *)&__p[1] + 4 > "FixedDigital")
          goto LABEL_188;
        strcpy((char *)__p, "FixedDigital");
        v27 = 12;
      }
      else if (v26 == 1)
      {
        v64 = 15;
        if (__p <= (void **)"AdaptiveDigital" && (char *)&__p[1] + 7 > "AdaptiveDigital")
          goto LABEL_188;
        strcpy((char *)__p, "AdaptiveDigital");
        v27 = 15;
      }
      else
      {
        if (v26)
LABEL_190:
          rtc::webrtc_checks_impl::UnreachableCodeReached(v19);
        v64 = 14;
        if (__p <= (void **)"AdaptiveAnalog" && (char *)&__p[1] + 6 > "AdaptiveAnalog")
          goto LABEL_188;
        strcpy((char *)__p, "AdaptiveAnalog");
        v27 = 14;
      }
      if (v27 >= (_QWORD)v69 + ~*((_QWORD *)&v69 + 1))
        v28 = v69 + ~*((_QWORD *)&v69 + 1);
      else
        v28 = v27;
      memcpy(&__s[*((_QWORD *)&v69 + 1)], __p, v28);
      *((_QWORD *)&v69 + 1) += v28;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x15uLL)
        v29 = 21;
      else
        v29 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", target_level_dbfs: ", v29);
      *((_QWORD *)&v69 + 1) += v29;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 18));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x17uLL)
        v30 = 23;
      else
        v30 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", compression_gain_db: ", v30);
      *((_QWORD *)&v69 + 1) += v30;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 19));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x12uLL)
        v31 = 18;
      else
        v31 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", enable_limiter: ", v31);
      *((_QWORD *)&v69 + 1) += v31;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 80));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x24uLL)
        v32 = 36;
      else
        v32 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", analog_gain_controller { enabled: ", v32);
      *((_QWORD *)&v69 + 1) += v32;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 84));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x16uLL)
        v33 = 22;
      else
        v33 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", startup_min_volume: ", v33);
      *((_QWORD *)&v69 + 1) += v33;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 22));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x15uLL)
        v34 = 21;
      else
        v34 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", clipped_level_min: ", v34);
      *((_QWORD *)&v69 + 1) += v34;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 23));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x1BuLL)
        v35 = 27;
      else
        v35 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", enable_digital_adaptive: ", v35);
      *((_QWORD *)&v69 + 1) += v35;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 96));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x16uLL)
        v36 = 22;
      else
        v36 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", clipped_level_step: ", v36);
      *((_QWORD *)&v69 + 1) += v36;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 25));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x1BuLL)
        v37 = 27;
      else
        v37 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", clipped_ratio_threshold: ", v37);
      *((_QWORD *)&v69 + 1) += v37;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%g", *((float *)this + 26));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x17uLL)
        v38 = 23;
      else
        v38 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", clipped_wait_frames: ", v38);
      *((_QWORD *)&v69 + 1) += v38;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 27));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x22uLL)
        v39 = 34;
      else
        v39 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", clipping_predictor:  { enabled: ", v39);
      *((_QWORD *)&v69 + 1) += v39;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 112));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 8uLL)
        v40 = 8;
      else
        v40 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", mode: ", v40);
      *((_QWORD *)&v69 + 1) += v40;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 29));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x11uLL)
        v41 = 17;
      else
        v41 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", window_length: ", v41);
      *((_QWORD *)&v69 + 1) += v41;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 30));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x1BuLL)
        v42 = 27;
      else
        v42 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", reference_window_length: ", v42);
      *((_QWORD *)&v69 + 1) += v42;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 31));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x1AuLL)
        v43 = 26;
      else
        v43 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", reference_window_delay: ", v43);
      *((_QWORD *)&v69 + 1) += v43;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 32));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x16uLL)
        v44 = 22;
      else
        v44 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", clipping_threshold: ", v44);
      *((_QWORD *)&v69 + 1) += v44;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%g", *((float *)this + 33));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x17uLL)
        v45 = 23;
      else
        v45 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", crest_factor_margin: ", v45);
      *((_QWORD *)&v69 + 1) += v45;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%g", *((float *)this + 34));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x16uLL)
        v46 = 22;
      else
        v46 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", use_predicted_step: ", v46);
      *((_QWORD *)&v69 + 1) += v46;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 140));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x23uLL)
        v47 = 35;
      else
        v47 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], " }}}, gain_controller2: { enabled: ", v47);
      *((_QWORD *)&v69 + 1) += v47;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 144));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x1CuLL)
        v48 = 28;
      else
        v48 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", fixed_digital: { gain_db: ", v48);
      *((_QWORD *)&v69 + 1) += v48;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%g", *((float *)this + 43));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x21uLL)
        v49 = 33;
      else
        v49 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], " }, adaptive_digital: { enabled: ", v49);
      *((_QWORD *)&v69 + 1) += v49;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 148));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0xFuLL)
        v50 = 15;
      else
        v50 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", headroom_db: ", v50);
      *((_QWORD *)&v69 + 1) += v50;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%g", *((float *)this + 38));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0xFuLL)
        v51 = 15;
      else
        v51 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", max_gain_db: ", v51);
      *((_QWORD *)&v69 + 1) += v51;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%g", *((float *)this + 39));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x13uLL)
        v52 = 19;
      else
        v52 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", initial_gain_db: ", v52);
      *((_QWORD *)&v69 + 1) += v52;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%g", *((float *)this + 40));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x21uLL)
        v53 = 33;
      else
        v53 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", max_gain_change_db_per_second: ", v53);
      *((_QWORD *)&v69 + 1) += v53;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%g", *((float *)this + 41));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x1FuLL)
        v54 = 31;
      else
        v54 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], ", max_output_noise_level_dbfs: ", v54);
      *((_QWORD *)&v69 + 1) += v54;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%g", *((float *)this + 42));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 0x25uLL)
        v55 = 37;
      else
        v55 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], " }, input_volume_control : { enabled ", v55);
      *((_QWORD *)&v69 + 1) += v55;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((unsigned __int8 *)this + 145));
      if ((_QWORD)v69 + ~*((_QWORD *)&v69 + 1) >= 2uLL)
        v56 = 2;
      else
        v56 = v69 + ~*((_QWORD *)&v69 + 1);
      memcpy(&__s[*((_QWORD *)&v69 + 1)], "}}", v56);
      *((_QWORD *)&v69 + 1) += v56;
      __s[*((_QWORD *)&v69 + 1)] = 0;
      if (v64 < 0)
      {
        operator delete(__p[0]);
        if ((v67 & 0x80000000) == 0)
        {
LABEL_173:
          v57 = __s;
          if (!__s)
            goto LABEL_188;
          goto LABEL_177;
        }
      }
      else if ((v67 & 0x80000000) == 0)
      {
        goto LABEL_173;
      }
      operator delete(__src);
      v57 = __s;
      if (!__s)
        goto LABEL_188;
LABEL_177:
      result = strlen(v57);
      if (result >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_189;
      v59 = result;
      if (result <= 0x16)
      {
        a2[23] = result;
        v60 = &a2[result];
        if (a2 > v57)
          goto LABEL_185;
        goto LABEL_184;
      }
      v61 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((result | 7) != 0x17)
        v61 = result | 7;
      v62 = v61 + 1;
      result = (unint64_t)operator new(v61 + 1);
      *((_QWORD *)a2 + 1) = v59;
      *((_QWORD *)a2 + 2) = v62 | 0x8000000000000000;
      *(_QWORD *)a2 = result;
      a2 = (char *)result;
      v60 = (char *)(result + v59);
      if (result <= (unint64_t)v57)
      {
LABEL_184:
        if (v60 <= v57)
          goto LABEL_185;
LABEL_188:
        __break(1u);
LABEL_189:
        abort();
      }
LABEL_185:
      if (v59)
        result = (unint64_t)memmove(a2, v57, v59);
      *v60 = 0;
      return result;
    default:
      goto LABEL_190;
  }
}

uint64_t rtc::RefCountedObject<webrtc::AudioProcessingImpl>::RefCountedObject<webrtc::AudioProcessing::Config &,std::unique_ptr<webrtc::CustomProcessing>,std::unique_ptr<webrtc::CustomProcessing>,std::unique_ptr<webrtc::EchoControlFactory>,webrtc::scoped_refptr<webrtc::EchoDetector>,std::unique_ptr<webrtc::CustomAudioAnalyzer>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = *a3;
  *a3 = 0;
  v22 = v8;
  v9 = *a4;
  *a4 = 0;
  v10 = *a5;
  *a5 = 0;
  v20 = v10;
  v21 = v9;
  v11 = *a6;
  *a6 = 0;
  v12 = *a7;
  *a7 = 0;
  v18 = v12;
  v19 = v11;
  webrtc::AudioProcessingImpl::AudioProcessingImpl(a1, a2, &v22, &v21, &v20, &v19, &v18);
  v13 = v18;
  v18 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v14 = v20;
  v20 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  v15 = v21;
  v21 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  v16 = v22;
  v22 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  *(_QWORD *)a1 = off_24C0AE218;
  *(_DWORD *)(a1 + 1824) = 0;
  return a1;
}

uint64_t rtc::RefCountedObject<webrtc::AudioProcessingImpl>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 1824);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::AudioProcessingImpl>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 456;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::AudioProcessingImpl>::~RefCountedObject(webrtc::AudioProcessingImpl *a1)
{
  webrtc::AudioProcessingImpl::~AudioProcessingImpl(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioProcessingImpl::GetStatistics@<X0>(webrtc::AudioProcessingImpl *this@<X0>, __int128 *a2@<X8>)
{
  pthread_mutex_t *v4;
  uint64_t result;
  __int128 *v6;
  unint64_t *v7;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[32];

  v4 = (pthread_mutex_t *)((char *)this + 1144);
  result = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 1144));
  v6 = (__int128 *)((char *)this + 1208);
  v7 = (unint64_t *)((char *)this + 1344);
  if (!atomic_load((unint64_t *)this + 168))
    goto LABEL_9;
  v9 = *((_QWORD *)this + 167);
  v10 = *((_QWORD *)this + 169);
  if (0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 170) - v10) >> 4) > v9)
  {
    v11 = (__int128 *)(v10 + 112 * v9);
    v27 = *(_OWORD *)((char *)this + 1272);
    *(_OWORD *)v28 = *(_OWORD *)((char *)this + 1288);
    *(_OWORD *)&v28[13] = *(_OWORD *)((char *)this + 1301);
    v23 = *v6;
    v24 = *(_OWORD *)((char *)this + 1224);
    v25 = *(_OWORD *)((char *)this + 1240);
    v26 = *(_OWORD *)((char *)this + 1256);
    v13 = v11[1];
    v12 = v11[2];
    *v6 = *v11;
    *(_OWORD *)((char *)this + 1224) = v13;
    *(_OWORD *)((char *)this + 1240) = v12;
    v14 = v11[6];
    v16 = v11[3];
    v15 = v11[4];
    *(_OWORD *)((char *)this + 1288) = v11[5];
    *(_OWORD *)((char *)this + 1304) = v14;
    *(_OWORD *)((char *)this + 1256) = v16;
    *(_OWORD *)((char *)this + 1272) = v15;
    *v11 = v23;
    v11[1] = v24;
    v11[5] = *(_OWORD *)v28;
    v11[6] = *(_OWORD *)&v28[16];
    v11[2] = v25;
    v11[3] = v26;
    v11[4] = v27;
    do
      v17 = __ldxr(v7);
    while (__stlxr(v17 - 1, v7));
    v18 = *((_QWORD *)this + 167);
    if (v18 + 1 == 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 170) - *((_QWORD *)this + 169)) >> 4))
      v19 = 0;
    else
      v19 = v18 + 1;
    *((_QWORD *)this + 167) = v19;
LABEL_9:
    v20 = *(_OWORD *)((char *)this + 1288);
    a2[4] = *(_OWORD *)((char *)this + 1272);
    a2[5] = v20;
    *(__int128 *)((char *)a2 + 93) = *(_OWORD *)((char *)this + 1301);
    v21 = *(_OWORD *)((char *)this + 1224);
    *a2 = *v6;
    a2[1] = v21;
    v22 = *(_OWORD *)((char *)this + 1256);
    a2[2] = *(_OWORD *)((char *)this + 1240);
    a2[3] = v22;
    return pthread_mutex_unlock(v4);
  }
  __break(1u);
  return result;
}

uint64_t webrtc::AudioProcessingImpl::GetStatistics(webrtc::AudioProcessingImpl *this)
{
  return (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 248))(this);
}

BOOL rtc::RefCountedObject<webrtc::AudioProcessingImpl>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 1824));
  return v1 == 1;
}

void webrtc::AudioProcessingImpl::AdjustConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  BOOL v16;
  BOOL v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (*(_BYTE *)(a3 + 76) && (v3 = *(unsigned __int8 *)(a3 + 68), v4 = *(unsigned __int8 *)(a3 + 72), v3 | v4))
  {
    v10 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v10;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    v12 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v12;
    v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    v14 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v14;
    if (v4)
      *(_BYTE *)(a1 + 60) = 0;
    if (*(_BYTE *)(a2 + 64))
    {
      v15 = *(unsigned __int8 *)(a2 + 84);
      v16 = *(_DWORD *)(a2 + 68) && v15 == 0;
      v17 = v16;
      if (v3 && !v17)
      {
        v18 = v15 == 0;
        if (*(_BYTE *)(a2 + 96))
          v19 = 1;
        else
          v19 = v15 == 0;
        v20 = *(unsigned __int8 *)(a2 + 144);
        if (!*(_BYTE *)(a2 + 96))
          v18 = 1;
        if (!*(_BYTE *)(a2 + 144))
          v19 = 1;
        if (v19)
          v21 = 0;
        else
          v21 = *(unsigned __int8 *)(a2 + 148);
        if (v18)
          v22 = 0;
        else
          v22 = v20 ^ 1;
        if (*(_BYTE *)(a2 + 145))
          v23 = v20 != 0;
        else
          v23 = 0;
        if (v21 == v22 || v23)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc");
          if (v21 == v22 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc");
          if (v23 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc");
        }
        else
        {
          *(_BYTE *)(a1 + 64) = 0;
          *(_BYTE *)(a1 + 84) = 0;
          *(_WORD *)(a1 + 144) = 257;
          *(_OWORD *)(a1 + 148) = *(_OWORD *)(a3 + 44);
          *(_QWORD *)(a1 + 164) = *(_QWORD *)(a3 + 60);
          *(_BYTE *)(a1 + 148) = 1;
        }
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v5;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    v6 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v6;
    v7 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v7;
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
  }
}

uint64_t webrtc::AudioProcessingImpl::AudioProcessingImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  int v12;
  void *sig;
  char *v14;
  void *v15;
  _DWORD *v16;
  char *v17;
  BOOL v20;
  size_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  void *v25;
  char *v26;
  void *v27;
  _DWORD *v28;
  char *v29;
  _BYTE *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  size_t v39;
  uint64_t v40;
  char *p_p;
  int v42;
  int v43;
  float v44;
  int v45;
  char v46;
  int v47;
  int v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  char v57;
  char v58;
  int v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  BOOL v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  void *v75;
  char *v76;
  char *v77;
  void *v78;
  _DWORD *v79;
  char *v80;
  BOOL v83;
  uint64_t v84;
  int v85;
  void *v86;
  char *v87;
  char *v88;
  void *v89;
  _DWORD *v90;
  char *v91;
  BOOL v94;
  uint64_t v95;
  int v96;
  void *v97;
  char *v98;
  char *v99;
  void *v100;
  _DWORD *v101;
  char *v102;
  BOOL v105;
  uint64_t v106;
  int v107;
  void *v108;
  char *v109;
  char *v110;
  void *v111;
  _DWORD *v112;
  char *v113;
  BOOL v116;
  uint64_t v117;
  int v118;
  void *v119;
  char *v120;
  char *v121;
  void *v122;
  _DWORD *v123;
  char *v124;
  BOOL v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v149;
  BOOL v151;
  void *__p;
  uint64_t v153;
  unsigned __int8 v154;
  void (**v155)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v156;
  void *v157;
  uint64_t v158;
  void *v159;
  __int128 v160;
  __int16 v161;
  void (**v162)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v163;
  void *v164;
  uint64_t v165;
  void *v166;
  __int128 v167;
  char v168;
  double v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (**v174)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v175;
  void *v176;
  uint64_t v177;
  void *v178;
  __int128 v179;
  char v180;
  double v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  void (**v185)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v186;
  void *v187;
  uint64_t v188;
  void *v189[2];
  char v190;
  char v191;
  double v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  void (**v196)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v197;
  void *v198;
  uint64_t v199;
  void *v200[2];
  char v201;
  char v202;
  double v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  void (**v207)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v208;
  void *v209;
  uint64_t v210;
  void *v211[2];
  char v212;
  char v213;
  double v214;
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  void (**v218)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v219;
  void *v220;
  uint64_t v221;
  void *v222[3];
  char v223;
  double v224;
  __int128 v225;
  __int128 v226;
  const char *v227;
  void *v228;
  void *v229;
  uint64_t v230;
  void *v231;
  __int128 v232;
  char v233;
  double v234;
  __int128 v235;
  __int128 v236;
  void (**v237)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v238;
  void *v239;
  uint64_t v240;
  void *v241;
  __int128 v242;
  char v243;
  int v244;
  __int128 v245;
  void (**v246)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v247;
  void *v248;
  uint64_t v249;
  void *v250[3];
  char v251;
  int v252;
  __int128 v253;
  void (**v254)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v255;
  void *v256;
  uint64_t v257;
  void *v258[3];
  char v259;
  int v260;
  __int128 v261;
  void (**v262)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v263;
  void *v264;
  uint64_t v265;
  void *v266;
  __int128 v267;
  __int16 v268;
  void (**v269)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v270;
  void *v271;
  uint64_t v272;
  void *v273[3];
  char v274;
  int v275;
  __int128 v276;
  unint64_t v277;
  void *v278;
  void *v279;
  uint64_t v280;
  void *v281;
  __int128 v282;
  char v283;
  double v284;
  __int128 v285;
  __int128 v286;
  void (**v287)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v288;
  void *v289;
  uint64_t v290;
  void *v291[3];
  char v292;
  int v293;
  __int128 v294;
  void (**v295)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v296;
  void *v297;
  uint64_t v298;
  void *v299[3];
  char v300;
  int v301;
  __int128 v302;
  void (**v303)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v304;
  void *v305;
  uint64_t v306;
  void *v307[3];
  char v308;
  int v309;
  __int128 v310;
  void (**v311)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v312;
  void *v313;
  uint64_t v314;
  void *v315[2];
  char v316;
  __int16 v317;
  void (**v318)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v319;
  void *v320;
  uint64_t v321;
  void *v322[2];
  char v323;
  __int16 v324;
  pthread_mutexattr_t v325;
  void (***v326)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v327)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v328)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v329)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v330)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v331)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v332)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v333)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v334)(webrtc::FieldTrialParameterInterface *__hidden);
  const char **v335;
  void (***v336)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v337)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v338)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v339)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v340)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v341)(webrtc::FieldTrialParameterInterface *__hidden);
  void (***v342)(webrtc::FieldTrialParameterInterface *__hidden);
  char __s[40];
  uint64_t v344;

  v344 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &unk_24C0AE348;
  v8 = operator new();
  do
    v9 = __ldaxr((unsigned int *)&webrtc::AudioProcessingImpl::instance_count_);
  while (__stlxr(v9 + 1, (unsigned int *)&webrtc::AudioProcessingImpl::instance_count_));
  *(_QWORD *)(a1 + 8) = v8;
  v10 = (char *)&v325;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-Aec3SetupSpecificDefaultConfigDefaultsKillSwitch", 0x37uLL, (size_t *)&v325);
  v11 = HIBYTE(v326);
  v12 = SHIBYTE(v326);
  sig = (void *)v325.__sig;
  if (SHIBYTE(v326) < 0)
  {
    v11 = *(_QWORD *)v325.__opaque;
    v10 = (char *)v325.__sig;
  }
  v14 = &v10[v11];
  if (v11 >= 7)
  {
    v15 = v10;
    do
    {
      v16 = memchr(v15, 69, v11 - 6);
      if (!v16)
        break;
      v17 = (char *)v16;
      if (*v16 == 1650552389 && *(_DWORD *)((char *)v16 + 3) == 1684368482)
        goto LABEL_14;
      v15 = (char *)v16 + 1;
      v11 = v14 - (v17 + 1);
    }
    while (v11 > 6);
  }
  v17 = v14;
LABEL_14:
  if (v12 < 0)
    operator delete(sig);
  v20 = v17 == v14 || v17 != v10;
  *(_BYTE *)(a1 + 16) = v20;
  strcpy(__s, "WebRTC-Audio-GainController2");
  v21 = strlen(__s);
  v22 = (char *)&v325;
  webrtc::field_trial::FindFullName((size_t)__s, v21, (size_t *)&v325);
  v23 = HIBYTE(v326);
  v24 = SHIBYTE(v326);
  v25 = (void *)v325.__sig;
  if (SHIBYTE(v326) < 0)
  {
    v23 = *(_QWORD *)v325.__opaque;
    v22 = (char *)v325.__sig;
  }
  v26 = &v22[v23];
  if (v23 >= 7)
  {
    v27 = v22;
    do
    {
      v28 = memchr(v27, 69, v23 - 6);
      if (!v28)
        break;
      v29 = (char *)v28;
      if (*v28 == 1650552389 && *(_DWORD *)((char *)v28 + 3) == 1684368482)
        goto LABEL_33;
      v27 = (char *)v28 + 1;
      v23 = v26 - (v29 + 1);
    }
    while (v23 > 6);
  }
  v29 = v26;
LABEL_33:
  if (v24 < 0)
  {
    operator delete(v25);
    v31 = (_BYTE *)(a1 + 20);
    if (v29 == v26)
    {
LABEL_78:
      *(_BYTE *)(a1 + 20) = 0;
      *(_BYTE *)(a1 + 96) = 0;
      goto LABEL_165;
    }
  }
  else
  {
    v31 = (_BYTE *)(a1 + 20);
    if (v29 == v26)
      goto LABEL_78;
  }
  if (v29 != v22)
    goto LABEL_78;
  v318 = off_24C0B4170;
  v319 = 0;
  v321 = 0;
  v320 = 0;
  v323 = 7;
  if (v322 <= (void **)"Enabled" && (char *)v322 + 7 > "Enabled")
    goto LABEL_275;
  strcpy((char *)v322, "Enabled");
  v324 = 0;
  v318 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B41A0;
  v311 = off_24C0B4170;
  v312 = 0;
  v314 = 0;
  v313 = 0;
  v316 = 14;
  if (v315 <= (void **)"switch_to_agc2" && (char *)&v315[1] + 6 > "switch_to_agc2")
    goto LABEL_275;
  strcpy((char *)v315, "switch_to_agc2");
  v317 = 256;
  v311 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FC0;
  v303 = off_24C0B4170;
  v304 = 0;
  v306 = 0;
  v305 = 0;
  HIBYTE(v307[2]) = 16;
  if (v307 <= (void **)"min_input_volume" && &v307[2] > (void **)"min_input_volume")
    goto LABEL_275;
  strcpy((char *)v307, "min_input_volume");
  v308 = 0;
  v303 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B40B0;
  v309 = 20;
  v310 = xmmword_208F05100;
  v295 = off_24C0B4170;
  v296 = 0;
  v298 = 0;
  v297 = 0;
  HIBYTE(v299[2]) = 17;
  if (v299 <= (void **)"clipped_level_min" && (char *)&v299[2] + 1 > "clipped_level_min")
    goto LABEL_275;
  strcpy((char *)v299, "clipped_level_min");
  v300 = 0;
  v295 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B40B0;
  v301 = 70;
  v302 = xmmword_208F05100;
  v287 = off_24C0B4170;
  v288 = 0;
  HIBYTE(v291[2]) = 18;
  v290 = 0;
  v289 = 0;
  if (v291 <= (void **)"clipped_level_step" && (char *)&v291[2] + 2 > "clipped_level_step")
    goto LABEL_275;
  strcpy((char *)v291, "clipped_level_step");
  v292 = 0;
  v287 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B40B0;
  v293 = 15;
  v294 = xmmword_208F05100;
  v277 = (unint64_t)off_24C0B4170;
  v278 = 0;
  v280 = 0;
  v279 = 0;
  v32 = (char *)operator new(0x19uLL);
  v281 = v32;
  v282 = xmmword_208F05110;
  if (v32 <= "clipped_ratio_threshold" && v32 + 23 > "clipped_ratio_threshold")
    goto LABEL_275;
  strcpy(v32, "clipped_ratio_threshold");
  v283 = 0;
  v277 = (unint64_t)&unk_24C0B4080;
  v284 = 0.100000001;
  v285 = xmmword_208F05120;
  v286 = xmmword_208F05130;
  v269 = off_24C0B4170;
  v270 = 0;
  HIBYTE(v273[2]) = 19;
  v272 = 0;
  v271 = 0;
  if (v273 <= (void **)"clipped_wait_frames" && (char *)&v273[2] + 3 > "clipped_wait_frames")
    goto LABEL_275;
  strcpy((char *)v273, "clipped_wait_frames");
  v274 = 0;
  v269 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B40B0;
  v275 = 300;
  v276 = xmmword_208F05140;
  v262 = off_24C0B4170;
  v263 = 0;
  v265 = 0;
  v264 = 0;
  v33 = (char *)operator new(0x20uLL);
  v266 = v33;
  v267 = xmmword_208F05150;
  if (v33 <= "enable_clipping_predictor" && v33 + 25 > "enable_clipping_predictor")
    goto LABEL_275;
  strcpy(v33, "enable_clipping_predictor");
  v268 = 256;
  v262 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FC0;
  v254 = off_24C0B4170;
  v255 = 0;
  v257 = 0;
  v256 = 0;
  HIBYTE(v258[2]) = 21;
  if (v258 <= (void **)"target_range_max_dbfs" && (char *)&v258[2] + 5 > "target_range_max_dbfs")
    goto LABEL_275;
  strcpy((char *)v258, "target_range_max_dbfs");
  v259 = 0;
  v254 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B40B0;
  v260 = -30;
  v261 = xmmword_208F05160;
  v246 = off_24C0B4170;
  v247 = 0;
  HIBYTE(v250[2]) = 21;
  v249 = 0;
  v248 = 0;
  if (v250 <= (void **)"target_range_min_dbfs" && (char *)&v250[2] + 5 > "target_range_min_dbfs")
    goto LABEL_275;
  strcpy((char *)v250, "target_range_min_dbfs");
  v251 = 0;
  v246 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B40B0;
  v252 = -50;
  v253 = xmmword_208F05160;
  v237 = off_24C0B4170;
  v238 = 0;
  v240 = 0;
  v239 = 0;
  v34 = (char *)operator new(0x20uLL);
  v241 = v34;
  v242 = xmmword_208F05170;
  if (v34 <= "update_input_volume_wait_frames" && v34 + 31 > "update_input_volume_wait_frames")
    goto LABEL_275;
  strcpy(v34, "update_input_volume_wait_frames");
  v243 = 0;
  v237 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B40B0;
  v244 = 100;
  v245 = xmmword_208F05140;
  v227 = (const char *)off_24C0B4170;
  v228 = 0;
  v230 = 0;
  v229 = 0;
  v35 = (char *)operator new(0x20uLL);
  v231 = v35;
  v232 = xmmword_208F05180;
  if (v35 <= "speech_probability_threshold" && v35 + 28 > "speech_probability_threshold")
    goto LABEL_275;
  strcpy(v35, "speech_probability_threshold");
  v233 = 0;
  v227 = (const char *)&unk_24C0B4080;
  v234 = 0.699999988;
  v235 = xmmword_208F05120;
  v236 = xmmword_208F05130;
  v218 = off_24C0B4170;
  v219 = 0;
  HIBYTE(v222[2]) = 22;
  v221 = 0;
  v220 = 0;
  if (v222 <= (void **)"speech_ratio_threshold" && (char *)&v222[2] + 6 > "speech_ratio_threshold")
    goto LABEL_275;
  strcpy((char *)v222, "speech_ratio_threshold");
  v223 = 0;
  v218 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4080;
  v224 = 0.600000024;
  v225 = xmmword_208F05120;
  v226 = xmmword_208F05130;
  v207 = off_24C0B4170;
  v208 = 0;
  v210 = 0;
  v209 = 0;
  v212 = 11;
  if (v211 <= (void **)"headroom_db" && (char *)&v211[1] + 3 > "headroom_db")
    goto LABEL_275;
  strcpy((char *)v211, "headroom_db");
  v213 = 0;
  v207 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4080;
  v215 = xmmword_208F05120;
  v217 = 0;
  v214 = 5.0;
  v216 = 0;
  v196 = off_24C0B4170;
  v197 = 0;
  v201 = 11;
  v199 = 0;
  v198 = 0;
  if (v200 <= (void **)"max_gain_db" && (char *)&v200[1] + 3 > "max_gain_db")
    goto LABEL_275;
  strcpy((char *)v200, "max_gain_db");
  v202 = 0;
  v196 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4080;
  v204 = xmmword_208F05120;
  v206 = 0;
  v203 = 50.0;
  v205 = 0;
  v185 = off_24C0B4170;
  v186 = 0;
  v187 = 0;
  v188 = 0;
  v190 = 15;
  if (v189 <= (void **)"initial_gain_db" && (char *)&v189[1] + 7 > "initial_gain_db")
    goto LABEL_275;
  strcpy((char *)v189, "initial_gain_db");
  v191 = 0;
  v185 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4080;
  v193 = xmmword_208F05120;
  v195 = 0;
  v192 = 15.0;
  v194 = 0;
  v174 = off_24C0B4170;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v36 = (char *)operator new(0x20uLL);
  v178 = v36;
  v179 = xmmword_208F05190;
  if (v36 <= "max_gain_change_db_per_second" && v36 + 29 > "max_gain_change_db_per_second")
    goto LABEL_275;
  strcpy(v36, "max_gain_change_db_per_second");
  v180 = 0;
  v174 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4080;
  v182 = xmmword_208F05120;
  v183 = 0;
  v184 = 0;
  v181 = 6.0;
  v162 = off_24C0B4170;
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v37 = (char *)operator new(0x20uLL);
  v166 = v37;
  v167 = xmmword_208F051A0;
  if (v37 <= "max_output_noise_level_dbfs" && v37 + 27 > "max_output_noise_level_dbfs")
    goto LABEL_275;
  strcpy(v37, "max_output_noise_level_dbfs");
  v168 = 0;
  v162 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4080;
  v169 = -50.0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v173 = 1;
  v155 = off_24C0B4170;
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v38 = (char *)operator new(0x28uLL);
  v159 = v38;
  v160 = xmmword_208F051B0;
  if (v38 <= "disallow_transient_suppressor_usage" && v38 + 35 > "disallow_transient_suppressor_usage")
    goto LABEL_275;
  strcpy(v38, "disallow_transient_suppressor_usage");
  v161 = 0;
  v155 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B3FC0;
  v325.__sig = (uint64_t)&v318;
  *(_QWORD *)v325.__opaque = &v311;
  v326 = &v303;
  v327 = &v295;
  v328 = &v287;
  v329 = (void (***)(webrtc::FieldTrialParameterInterface *__hidden))&v277;
  v330 = &v269;
  v331 = &v262;
  v332 = &v254;
  v333 = &v246;
  v334 = &v237;
  v335 = &v227;
  v336 = &v218;
  v337 = &v207;
  v338 = &v196;
  v339 = &v185;
  v340 = &v174;
  v341 = &v162;
  v342 = &v155;
  v39 = strlen(__s);
  webrtc::field_trial::FindFullName((size_t)__s, v39, (size_t *)&__p);
  if (((char)v154 & 0x80000000) == 0)
  {
    v40 = v154;
    p_p = (char *)&__p;
    goto LABEL_82;
  }
  v40 = v153;
  if (v153 < 0 || (p_p = (char *)__p, v153) && !__p)
LABEL_275:
    __break(1u);
LABEL_82:
  webrtc::ParseFieldTrial(&v325, 19, p_p, v40);
  if ((char)v154 < 0)
  {
    operator delete(__p);
    if (HIBYTE(v317))
      goto LABEL_84;
  }
  else if (HIBYTE(v317))
  {
LABEL_84:
    v42 = v301;
    v43 = v293;
    v44 = v284;
    v45 = v275;
    v46 = HIBYTE(v268);
    v47 = v260;
    v48 = v252;
    v49 = v244;
    v50 = v234;
    v51 = v224;
    v52 = v214;
    v53 = v203;
    v54 = v192;
    v55 = v181;
    v56 = v169;
    v57 = HIBYTE(v161);
    *(_DWORD *)(a1 + 20) = v309;
    *(_DWORD *)(a1 + 24) = v42;
    *(_DWORD *)(a1 + 28) = v43;
    *(float *)(a1 + 32) = v44;
    *(_DWORD *)(a1 + 36) = v45;
    *(_BYTE *)(a1 + 40) = v46;
    *(_DWORD *)(a1 + 44) = v47;
    *(_DWORD *)(a1 + 48) = v48;
    *(_DWORD *)(a1 + 52) = v49;
    *(float *)(a1 + 56) = v50;
    *(float *)(a1 + 60) = v51;
    *(_BYTE *)(a1 + 64) = 0;
    *(float *)(a1 + 68) = v52;
    *(float *)(a1 + 72) = v53;
    *(float *)(a1 + 76) = v54;
    *(float *)(a1 + 80) = v55;
    v58 = 1;
    *(float *)(a1 + 84) = v56;
LABEL_88:
    *(_BYTE *)(a1 + 88) = v58;
    *(_BYTE *)(a1 + 92) = v57;
    v58 = 1;
    goto LABEL_89;
  }
  v58 = 0;
  v59 = HIBYTE(v161);
  *v31 = 0;
  if (v59)
  {
    v57 = 1;
    goto LABEL_88;
  }
LABEL_89:
  *(_BYTE *)(a1 + 96) = v58;
  v155 = off_24C0B4170;
  if (SHIBYTE(v160) < 0)
    operator delete(v159);
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  v162 = off_24C0B4170;
  if (SHIBYTE(v167) < 0)
    operator delete(v166);
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  v174 = off_24C0B4170;
  if (SHIBYTE(v179) < 0)
    operator delete(v178);
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  v185 = off_24C0B4170;
  if (v190 < 0)
    operator delete(v189[0]);
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  v196 = off_24C0B4170;
  if (v201 < 0)
    operator delete(v200[0]);
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  v207 = off_24C0B4170;
  if (v212 < 0)
    operator delete(v211[0]);
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  v218 = off_24C0B4170;
  if (SHIBYTE(v222[2]) < 0)
    operator delete(v222[0]);
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  v227 = (const char *)off_24C0B4170;
  if (SHIBYTE(v232) < 0)
    operator delete(v231);
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
  v237 = off_24C0B4170;
  if (SHIBYTE(v242) < 0)
    operator delete(v241);
  if (v238)
  {
    v239 = v238;
    operator delete(v238);
  }
  v246 = off_24C0B4170;
  if (SHIBYTE(v250[2]) < 0)
    operator delete(v250[0]);
  if (v247)
  {
    v248 = v247;
    operator delete(v247);
  }
  v254 = off_24C0B4170;
  if (SHIBYTE(v258[2]) < 0)
    operator delete(v258[0]);
  if (v255)
  {
    v256 = v255;
    operator delete(v255);
  }
  v262 = off_24C0B4170;
  if (SHIBYTE(v267) < 0)
    operator delete(v266);
  if (v263)
  {
    v264 = v263;
    operator delete(v263);
  }
  v269 = off_24C0B4170;
  if (SHIBYTE(v273[2]) < 0)
    operator delete(v273[0]);
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  v277 = (unint64_t)off_24C0B4170;
  if (SHIBYTE(v282) < 0)
    operator delete(v281);
  if (v278)
  {
    v279 = v278;
    operator delete(v278);
  }
  v287 = off_24C0B4170;
  if (SHIBYTE(v291[2]) < 0)
    operator delete(v291[0]);
  if (v288)
  {
    v289 = v288;
    operator delete(v288);
  }
  v295 = off_24C0B4170;
  if (SHIBYTE(v299[2]) < 0)
    operator delete(v299[0]);
  if (v296)
  {
    v297 = v296;
    operator delete(v296);
  }
  v303 = off_24C0B4170;
  if (SHIBYTE(v307[2]) < 0)
    operator delete(v307[0]);
  if (v304)
  {
    v305 = v304;
    operator delete(v304);
  }
  v311 = off_24C0B4170;
  if (v316 < 0)
    operator delete(v315[0]);
  if (v312)
  {
    v313 = v312;
    operator delete(v312);
  }
  v318 = off_24C0B4170;
  if (v323 < 0)
    operator delete(v322[0]);
  if (v319)
  {
    v320 = v319;
    operator delete(v319);
  }
LABEL_165:
  *(_DWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v60 = (char *)operator new(0x4B0uLL);
  v61 = 0;
  *(_QWORD *)(a1 + 136) = v60;
  *(_QWORD *)(a1 + 152) = v60 + 1200;
  do
  {
    v62 = &v60[v61];
    *(_QWORD *)v62 = 0;
    *(_QWORD *)(v62 + 12) = 0;
    v61 += 24;
  }
  while (v61 != 1200);
  *(_QWORD *)(a1 + 144) = v60 + 1200;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v63 = (char *)operator new(0x4B0uLL);
  v64 = 0;
  *(_QWORD *)(a1 + 192) = v63;
  *(_QWORD *)(a1 + 208) = v63 + 1200;
  do
  {
    v65 = &v63[v64];
    *(_QWORD *)v65 = 0;
    *(_QWORD *)(v65 + 12) = 0;
    v64 += 24;
  }
  while (v64 != 1200);
  *(_QWORD *)(a1 + 200) = v63 + 1200;
  *(_QWORD *)(a1 + 216) = a1 + 104;
  *(_QWORD *)(a1 + 224) = a1 + 160;
  v66 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 260) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 268) = 0;
  *(_DWORD *)(a1 + 271) = 0;
  *(_DWORD *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 279) = 0;
  *(_QWORD *)(a1 + 232) = v66;
  *(_QWORD *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 284) = 1065353216;
  *(_BYTE *)(a1 + 311) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  pthread_mutexattr_init(&v325);
  pthread_mutexattr_setpolicy_np(&v325, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 312), &v325);
  pthread_mutexattr_destroy(&v325);
  pthread_mutexattr_init(&v325);
  pthread_mutexattr_setpolicy_np(&v325, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 376), &v325);
  pthread_mutexattr_destroy(&v325);
  webrtc::AudioProcessingImpl::AdjustConfig(a1 + 440, a2, (uint64_t)v31);
  *(_BYTE *)(a1 + 616) = 0;
  v67 = *a4 != 0;
  v68 = *a7 != 0;
  *(_BYTE *)(a1 + 617) = *a3 != 0;
  *(_BYTE *)(a1 + 618) = v67;
  *(_BYTE *)(a1 + 619) = v68;
  *(_QWORD *)(a1 + 620) = 0;
  *(_BYTE *)(a1 + 628) = 0;
  *(_BYTE *)(a1 + 629) = 1;
  v69 = *a3;
  *a3 = 0;
  v70 = *a4;
  *a4 = 0;
  v71 = *a6;
  *a6 = 0;
  v72 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 632) = v71;
  *(_QWORD *)(a1 + 640) = v69;
  *(_QWORD *)(a1 + 648) = v70;
  *(_QWORD *)(a1 + 656) = v72;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 744) = 16000;
  *(_OWORD *)(a1 + 752) = xmmword_208F051C0;
  *(_DWORD *)(a1 + 768) = 16000;
  *(_QWORD *)(a1 + 776) = 1;
  *(_QWORD *)(a1 + 784) = 160;
  *(_DWORD *)(a1 + 792) = 16000;
  *(_OWORD *)(a1 + 800) = xmmword_208F051C0;
  *(_DWORD *)(a1 + 816) = 16000;
  *(_QWORD *)(a1 + 824) = 1;
  *(_QWORD *)(a1 + 832) = 160;
  *(_DWORD *)(a1 + 840) = 16000;
  *(_OWORD *)(a1 + 848) = xmmword_208F051C0;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-ApmExperimentalMultiChannelRenderKillSwitch", 0x32uLL, (size_t *)&v325);
  v73 = HIBYTE(v326);
  v74 = SHIBYTE(v326);
  v75 = (void *)v325.__sig;
  if (SHIBYTE(v326) >= 0)
  {
    v76 = (char *)&v325;
  }
  else
  {
    v73 = *(_QWORD *)v325.__opaque;
    v76 = (char *)v325.__sig;
  }
  v77 = &v76[v73];
  if (v73 >= 7)
  {
    v78 = v76;
    do
    {
      v79 = memchr(v78, 69, v73 - 6);
      if (!v79)
        break;
      v80 = (char *)v79;
      if (*v79 == 1650552389 && *(_DWORD *)((char *)v79 + 3) == 1684368482)
        goto LABEL_181;
      v78 = (char *)v79 + 1;
      v73 = v77 - (v80 + 1);
    }
    while (v73 > 6);
  }
  v80 = v77;
LABEL_181:
  if (v74 < 0)
    operator delete(v75);
  v83 = v80 == v77 || v80 != v76;
  v151 = v83;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-ApmExperimentalMultiChannelCaptureKillSwitch", 0x33uLL, (size_t *)&v325);
  v84 = HIBYTE(v326);
  v85 = SHIBYTE(v326);
  v86 = (void *)v325.__sig;
  if (SHIBYTE(v326) >= 0)
  {
    v87 = (char *)&v325;
  }
  else
  {
    v84 = *(_QWORD *)v325.__opaque;
    v87 = (char *)v325.__sig;
  }
  v88 = &v87[v84];
  if (v84 >= 7)
  {
    v89 = v87;
    do
    {
      v90 = memchr(v89, 69, v84 - 6);
      if (!v90)
        break;
      v91 = (char *)v90;
      if (*v90 == 1650552389 && *(_DWORD *)((char *)v90 + 3) == 1684368482)
        goto LABEL_201;
      v89 = (char *)v90 + 1;
      v84 = v88 - (v91 + 1);
    }
    while (v84 > 6);
  }
  v91 = v88;
LABEL_201:
  if (v85 < 0)
    operator delete(v86);
  v94 = v91 == v88 || v91 != v87;
  v149 = v94;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-FullBandHpfKillSwitch", 0x1CuLL, (size_t *)&v325);
  v95 = HIBYTE(v326);
  v96 = SHIBYTE(v326);
  v97 = (void *)v325.__sig;
  if (SHIBYTE(v326) >= 0)
  {
    v98 = (char *)&v325;
  }
  else
  {
    v95 = *(_QWORD *)v325.__opaque;
    v98 = (char *)v325.__sig;
  }
  v99 = &v98[v95];
  if (v95 >= 7)
  {
    v100 = v98;
    do
    {
      v101 = memchr(v100, 69, v95 - 6);
      if (!v101)
        break;
      v102 = (char *)v101;
      if (*v101 == 1650552389 && *(_DWORD *)((char *)v101 + 3) == 1684368482)
        goto LABEL_221;
      v100 = (char *)v101 + 1;
      v95 = v99 - (v102 + 1);
    }
    while (v95 > 6);
  }
  v102 = v99;
LABEL_221:
  if (v96 < 0)
    operator delete(v97);
  v105 = v102 != v99 && v102 == v98;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-MutedStateKillSwitch", 0x1BuLL, (size_t *)&v325);
  v106 = HIBYTE(v326);
  v107 = SHIBYTE(v326);
  v108 = (void *)v325.__sig;
  if (SHIBYTE(v326) >= 0)
  {
    v109 = (char *)&v325;
  }
  else
  {
    v106 = *(_QWORD *)v325.__opaque;
    v109 = (char *)v325.__sig;
  }
  v110 = &v109[v106];
  if (v106 >= 7)
  {
    v111 = v109;
    do
    {
      v112 = memchr(v111, 69, v106 - 6);
      if (!v112)
        break;
      v113 = (char *)v112;
      if (*v112 == 1650552389 && *(_DWORD *)((char *)v112 + 3) == 1684368482)
        goto LABEL_241;
      v111 = (char *)v112 + 1;
      v106 = v110 - (v113 + 1);
    }
    while (v106 > 6);
  }
  v113 = v110;
LABEL_241:
  if (v107 < 0)
    operator delete(v108);
  v116 = v113 == v110 || v113 != v109;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-TransientSuppressorForcedOff", 0x23uLL, (size_t *)&v325);
  v117 = HIBYTE(v326);
  v118 = SHIBYTE(v326);
  v119 = (void *)v325.__sig;
  if (SHIBYTE(v326) >= 0)
  {
    v120 = (char *)&v325;
  }
  else
  {
    v117 = *(_QWORD *)v325.__opaque;
    v120 = (char *)v325.__sig;
  }
  v121 = &v120[v117];
  if (v117 >= 7)
  {
    v122 = v120;
    do
    {
      v123 = memchr(v122, 69, v117 - 6);
      if (!v123)
        break;
      v124 = (char *)v123;
      if (*v123 == 1650552389 && *(_DWORD *)((char *)v123 + 3) == 1684368482)
        goto LABEL_261;
      v122 = (char *)v123 + 1;
      v117 = v121 - (v124 + 1);
    }
    while (v117 > 6);
  }
  v124 = v121;
LABEL_261:
  if (v118 < 0)
    operator delete(v119);
  *(_BYTE *)(a1 + 864) = v151;
  v127 = v124 != v121 && v124 == v120;
  *(_BYTE *)(a1 + 865) = v149;
  *(_BYTE *)(a1 + 866) = v105;
  *(_BYTE *)(a1 + 867) = v116;
  *(_BYTE *)(a1 + 868) = v127;
  *(_DWORD *)(a1 + 872) = 65792;
  *(_QWORD *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_DWORD *)(a1 + 904) = 16000;
  *(_OWORD *)(a1 + 912) = xmmword_208F051D0;
  *(_DWORD *)(a1 + 928) = 16000;
  *(_BYTE *)(a1 + 932) = 0;
  *(_QWORD *)(a1 + 936) = -1082130432;
  *(_DWORD *)(a1 + 944) = -1;
  *(_WORD *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 960) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  *(_BYTE *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_BYTE *)(a1 + 1012) = 0;
  *(_BYTE *)(a1 + 1016) = 0;
  *(_BYTE *)(a1 + 1020) = 0;
  *(_BYTE *)(a1 + 1024) = 0;
  *(_BYTE *)(a1 + 1032) = 0;
  *(_BYTE *)(a1 + 1040) = 0;
  *(_BYTE *)(a1 + 1048) = 0;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1060) = 0;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_BYTE *)(a1 + 1068) = 0;
  *(_BYTE *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1076) = 0;
  *(_BYTE *)(a1 + 1080) = 0;
  *(_DWORD *)(a1 + 1088) = 16000;
  *(_QWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1104) = 160;
  *(_QWORD *)(a1 + 1112) = 16000;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  pthread_mutexattr_init(&v325);
  pthread_mutexattr_setpolicy_np(&v325, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1144), &v325);
  pthread_mutexattr_destroy(&v325);
  *(_WORD *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 1216) = 0;
  *(_BYTE *)(a1 + 1224) = 0;
  *(_BYTE *)(a1 + 1232) = 0;
  *(_BYTE *)(a1 + 1240) = 0;
  *(_BYTE *)(a1 + 1248) = 0;
  *(_BYTE *)(a1 + 1256) = 0;
  *(_BYTE *)(a1 + 1264) = 0;
  *(_BYTE *)(a1 + 1268) = 0;
  *(_BYTE *)(a1 + 1272) = 0;
  *(_BYTE *)(a1 + 1276) = 0;
  *(_BYTE *)(a1 + 1280) = 0;
  *(_BYTE *)(a1 + 1288) = 0;
  *(_BYTE *)(a1 + 1296) = 0;
  *(_BYTE *)(a1 + 1304) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1316) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  v128 = (char *)operator new(0x70uLL);
  *(_QWORD *)(a1 + 1352) = v128;
  *(_QWORD *)(a1 + 1368) = v128 + 112;
  *(_WORD *)v128 = 0;
  v128[8] = 0;
  v128[16] = 0;
  v128[24] = 0;
  v128[32] = 0;
  v128[40] = 0;
  v128[48] = 0;
  v128[56] = 0;
  v128[60] = 0;
  v128[64] = 0;
  v128[68] = 0;
  v128[72] = 0;
  v128[80] = 0;
  v128[88] = 0;
  v128[96] = 0;
  v128[104] = 0;
  v128[108] = 0;
  *(_QWORD *)(a1 + 1360) = v128 + 112;
  *(_BYTE *)(a1 + 1560) = 0;
  *(_BYTE *)(a1 + 1568) = 0;
  *(_QWORD *)(a1 + 1544) = 0;
  *(_DWORD *)(a1 + 1552) = 0;
  *(_BYTE *)(a1 + 1600) = 0;
  *(_BYTE *)(a1 + 1608) = 0;
  *(_DWORD *)(a1 + 1576) = 0;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_DWORD *)(a1 + 1592) = 0;
  *(_DWORD *)(a1 + 1616) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_DWORD *)(a1 + 1536) = 0;
  webrtc::InputVolumeStatsReporter::InputVolumeStatsReporter(a1 + 1624);
  webrtc::InputVolumeStatsReporter::InputVolumeStatsReporter(a1 + 1712);
  *(_QWORD *)(a1 + 1816) = 0;
  *(_OWORD *)(a1 + 1800) = 0u;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    v325.__sig = (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modu"
                          "les/audio_processing/audio_processing_impl.cc";
    *(_QWORD *)v325.__opaque = 5577;
    v326 = &v218;
    v227 = "Injected APM submodules:\nEcho control factory: ";
    v228 = &v325;
    v277 = *(_QWORD *)(a1 + 232) != 0;
    v278 = &v227;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v129, v130, v131, v132, v133, v134, v135, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc");
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    webrtc::AudioProcessing::Config::ToString((webrtc::AudioProcessing::Config *)(a1 + 440), (char *)&v325);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v136, v137, v138, v139, v140, v141, v142, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc");
    if (SHIBYTE(v326) < 0)
      operator delete((void *)v325.__sig);
  }
  *(_BYTE *)(a1 + 1120) = *(_QWORD *)(a1 + 232) != 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return a1;
}

void webrtc::AudioProcessingImpl::~AudioProcessingImpl(webrtc::AudioProcessingImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  webrtc::NoiseSuppressor *v38;
  webrtc::EchoControlMobileImpl *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  webrtc::GainController2 *v51;
  uint64_t v52;
  webrtc::AgcManagerDirect *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;

  *(_QWORD *)this = &unk_24C0AE348;
  v2 = *((_QWORD *)this + 227);
  *((_QWORD *)this + 227) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 40);
      v5 = *(void **)(v2 + 32);
      if (v4 != v3)
      {
        v6 = *(_QWORD *)(v2 + 40);
        do
        {
          v8 = *(void **)(v6 - 24);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v4 - 16) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = *(void **)(v2 + 32);
      }
      *(_QWORD *)(v2 + 40) = v3;
      operator delete(v5);
    }
    MEMORY[0x20BD0ADEC](v2, 0x1020C40D7793CB0);
  }
  v9 = *((_QWORD *)this + 226);
  *((_QWORD *)this + 226) = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 32);
    if (v10)
    {
      v11 = *(_QWORD *)(v9 + 40);
      v12 = *(void **)(v9 + 32);
      if (v11 != v10)
      {
        v13 = *(_QWORD *)(v9 + 40);
        do
        {
          v15 = *(void **)(v13 - 24);
          v13 -= 24;
          v14 = v15;
          if (v15)
          {
            *(_QWORD *)(v11 - 16) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(void **)(v9 + 32);
      }
      *(_QWORD *)(v9 + 40) = v10;
      operator delete(v12);
    }
    MEMORY[0x20BD0ADEC](v9, 0x1020C40D7793CB0);
  }
  v16 = *((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = 0;
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 32);
    if (v17)
    {
      v18 = *(_QWORD *)(v16 + 40);
      v19 = *(void **)(v16 + 32);
      if (v18 != v17)
      {
        v20 = *(_QWORD *)(v16 + 40);
        do
        {
          v22 = *(void **)(v20 - 24);
          v20 -= 24;
          v21 = v22;
          if (v22)
          {
            *(_QWORD *)(v18 - 16) = v21;
            operator delete(v21);
          }
          v18 = v20;
        }
        while (v20 != v17);
        v19 = *(void **)(v16 + 32);
      }
      *(_QWORD *)(v16 + 40) = v17;
      operator delete(v19);
    }
    MEMORY[0x20BD0ADEC](v16, 0x1020C40D7793CB0);
  }
  v23 = (void *)*((_QWORD *)this + 189);
  if (v23)
  {
    *((_QWORD *)this + 190) = v23;
    operator delete(v23);
  }
  v24 = (void *)*((_QWORD *)this + 186);
  if (v24)
  {
    *((_QWORD *)this + 187) = v24;
    operator delete(v24);
  }
  v25 = (void *)*((_QWORD *)this + 182);
  if (v25)
  {
    *((_QWORD *)this + 183) = v25;
    operator delete(v25);
  }
  v26 = (void *)*((_QWORD *)this + 179);
  if (v26)
  {
    *((_QWORD *)this + 180) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 175);
  if (v27)
  {
    *((_QWORD *)this + 176) = v27;
    operator delete(v27);
  }
  v28 = (void *)*((_QWORD *)this + 172);
  if (v28)
  {
    *((_QWORD *)this + 173) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 169);
  if (v29)
  {
    *((_QWORD *)this + 170) = v29;
    operator delete(v29);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 1144));
  v31 = *((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v36)
    MEMORY[0x20BD0ADEC](v36, 0x1000C4025072006);
  v37 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = (webrtc::NoiseSuppressor *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v38)
  {
    webrtc::NoiseSuppressor::~NoiseSuppressor(v38);
    MEMORY[0x20BD0ADEC]();
  }
  v39 = (webrtc::EchoControlMobileImpl *)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v39)
  {
    webrtc::EchoControlMobileImpl::~EchoControlMobileImpl(v39, v30);
    MEMORY[0x20BD0ADEC]();
  }
  v40 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 72))(v40);
  v41 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v41)
  {
    v42 = *(_QWORD **)(v41 + 8);
    if (v42)
    {
      v43 = *(_QWORD **)(v41 + 16);
      v44 = *(void **)(v41 + 8);
      if (v43 != v42)
      {
        do
        {
          v46 = *--v43;
          v45 = v46;
          *v43 = 0;
          if (v46)
          {
            v47 = *(void **)v45;
            if (*(_QWORD *)v45)
            {
              *(_QWORD *)(v45 + 8) = v47;
              operator delete(v47);
            }
            MEMORY[0x20BD0ADEC](v45, 0x20C40960023A9);
          }
        }
        while (v43 != v42);
        v44 = *(void **)(v41 + 8);
      }
      *(_QWORD *)(v41 + 16) = v42;
      operator delete(v44);
    }
    MEMORY[0x20BD0ADEC](v41, 0x1020C40E72D6CFBLL);
  }
  v48 = (_QWORD *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v48)
  {
    v49 = (void *)v48[12];
    if (v49)
    {
      v48[13] = v49;
      operator delete(v49);
    }
    v50 = v48[11];
    v48[11] = 0;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    webrtc::PushResampler<float>::~PushResampler(v48 + 2);
    MEMORY[0x20BD0ADEC](v48, 0x10A0C40915EBB22);
  }
  v51 = (webrtc::GainController2 *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v51)
  {
    webrtc::GainController2::~GainController2(v51);
    MEMORY[0x20BD0ADEC]();
  }
  v52 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 120))(v52);
  v53 = (webrtc::AgcManagerDirect *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v53)
  {
    webrtc::AgcManagerDirect::~AgcManagerDirect(v53);
    MEMORY[0x20BD0ADEC]();
  }
  v54 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 32))(v54);
  v55 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55);
  v56 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
  v57 = *((_QWORD *)this + 79);
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 376));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 312));
  if ((*((char *)this + 311) & 0x80000000) == 0)
  {
    v58 = *((_QWORD *)this + 30);
    *((_QWORD *)this + 30) = 0;
    if (!v58)
      goto LABEL_100;
    goto LABEL_99;
  }
  operator delete(*((void **)this + 36));
  v58 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v58)
LABEL_99:
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
LABEL_100:
  v59 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
  v60 = (void *)*((_QWORD *)this + 24);
  if (v60)
  {
    *((_QWORD *)this + 25) = v60;
    operator delete(v60);
  }
  v61 = (void *)*((_QWORD *)this + 17);
  if (v61)
  {
    *((_QWORD *)this + 18) = v61;
    operator delete(v61);
  }
  v62 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v62)
    MEMORY[0x20BD0ADEC](v62, 0xC400A2AC0F1);
}

uint64_t webrtc::AudioProcessingImpl::Initialize(webrtc::AudioProcessingImpl *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 312);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 312));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
  (*(void (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 272))(this);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 376));
  pthread_mutex_unlock(v2);
  return 0;
}

uint64_t webrtc::AudioProcessingImpl::Initialize(uint64_t a1, _OWORD *a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 312);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 312));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 376));
  webrtc::AudioProcessingImpl::InitializeLocked(a1, a2);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 376));
  pthread_mutex_unlock(v4);
  return 0;
}

uint64_t webrtc::AudioProcessingImpl::InitializeLocked(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  webrtc::AudioProcessingImpl::UpdateActiveSubmoduleStates((webrtc::AudioProcessingImpl *)a1);
  v4 = a2[1];
  *(_OWORD *)(a1 + 744) = *a2;
  *(_OWORD *)(a1 + 760) = v4;
  v5 = a2[5];
  v7 = a2[2];
  v6 = a2[3];
  *(_OWORD *)(a1 + 808) = a2[4];
  *(_OWORD *)(a1 + 824) = v5;
  *(_OWORD *)(a1 + 776) = v7;
  *(_OWORD *)(a1 + 792) = v6;
  v8 = *(_DWORD *)(a1 + 440);
  v9 = 32000;
  if (v8 == 32000)
    v10 = 32000;
  else
    v10 = 48000;
  if (*(_DWORD *)(a1 + 768) >= *(_DWORD *)(a1 + 744))
    v11 = *(_DWORD *)(a1 + 744);
  else
    v11 = *(_DWORD *)(a1 + 768);
  v12 = *(unsigned __int8 *)(a1 + 620);
  if (*(_BYTE *)(a1 + 620)
    || *(_BYTE *)(a1 + 621)
    || *(_BYTE *)(a1 + 622)
    || *(_BYTE *)(a1 + 623)
    || *(_BYTE *)(a1 + 627))
  {
    v13 = (int)v11 > 16000;
    if (v11 <= 0x7D00)
      v14 = 32000;
    else
      v14 = v10;
    if (v8 != 32000)
      v9 = v14;
  }
  else
  {
    v13 = (int)v11 > 16000;
    if (v11 <= 0x7D00)
      v9 = 32000;
    else
      v9 = 48000;
  }
  if (!v13)
    v9 = 16000;
  *(_DWORD *)(a1 + 1088) = v9;
  *(_QWORD *)(a1 + 1096) = 0;
  *(_QWORD *)(a1 + 1104) = (unsigned __int16)v9 / 0x64u;
  v15 = v9;
  if (*(_BYTE *)(a1 + 1120))
  {
    if (*(_BYTE *)(a1 + 621))
      goto LABEL_41;
  }
  else
  {
    v16 = *(_DWORD *)(a1 + 792);
    if (*(_DWORD *)(a1 + 816) < v16)
      v16 = *(_DWORD *)(a1 + 816);
    if (!v12 && !*(_BYTE *)(a1 + 621) && !*(_BYTE *)(a1 + 622) && !*(_BYTE *)(a1 + 623) && !*(_BYTE *)(a1 + 627))
      v10 = 48000;
    if (v16 <= 0x7D00)
      v17 = 32000;
    else
      v17 = v10;
    if (v10 > 0x7D00)
      v10 = v17;
    if (v16 >= 16001)
      v15 = v10;
    else
      v15 = 16000;
    if (*(_BYTE *)(a1 + 621))
      goto LABEL_41;
  }
  if (!*(_BYTE *)(a1 + 623) && !*(_BYTE *)(a1 + 627))
  {
    v15 = *(_DWORD *)(a1 + 792);
    v18 = *(_QWORD *)(a1 + 800);
    v19 = v15 / 100;
    goto LABEL_46;
  }
LABEL_41:
  if (*(_BYTE *)(a1 + 444) && *(_BYTE *)(a1 + 864))
    v18 = *(int *)(a1 + 800);
  else
    v18 = 1;
  v19 = (unsigned __int16)v15 / 0x64u;
LABEL_46:
  *(_DWORD *)(a1 + 840) = v15;
  *(_QWORD *)(a1 + 848) = v18;
  *(_QWORD *)(a1 + 856) = v19;
  v20 = (unsigned __int16)v9;
  if ((unsigned __int16)v9 == 48000)
    v9 = 16000;
  if (v20 == 32000)
    v9 = 16000;
  *(_DWORD *)(a1 + 1112) = v9;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
}

uint64_t webrtc::AudioProcessingImpl::InitializeLocked(webrtc::AudioProcessingImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  webrtc::AudioBuffer *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  webrtc::AudioConverter *v8;
  webrtc::AudioConverter *v9;
  __darwin_time_t tv_sec;
  uint64_t v11;
  __darwin_time_t v12;
  uint64_t v13;
  webrtc::AudioBuffer *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  webrtc::AudioBuffer *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _OWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  _QWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (***v89)(_QWORD, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (***v93)(_QWORD, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (***v97)(_QWORD, _QWORD, _QWORD);
  float v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  int v103;
  float v104;
  float v105;
  uint64_t result;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  timeval v110;

  webrtc::AudioProcessingImpl::UpdateActiveSubmoduleStates(this);
  if (!*((_QWORD *)this + 100))
  {
    v13 = *((_QWORD *)this + 142);
    *((_QWORD *)this + 142) = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_13:
    v12 = *((_QWORD *)this + 141);
    *((_QWORD *)this + 141) = 0;
    if (!v12)
      goto LABEL_15;
    goto LABEL_14;
  }
  v2 = 816;
  if (!*((_QWORD *)this + 104))
    v2 = 840;
  v3 = *(int *)((char *)this + v2);
  v4 = (webrtc::AudioBuffer *)operator new();
  webrtc::AudioBuffer::AudioBuffer(v4, *((_DWORD *)this + 198), *((_QWORD *)this + 100), *((_DWORD *)this + 210), *((_QWORD *)this + 106), v3, v5, v6);
  v7 = *((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = v4;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (webrtc::AudioConverter *)*((_QWORD *)this + 100);
  v9 = (webrtc::AudioConverter *)*((_QWORD *)this + 103);
  if (*((_DWORD *)this + 198) == *((_DWORD *)this + 204) && v8 == v9)
    goto LABEL_13;
  webrtc::AudioConverter::Create(v8, *((_QWORD *)this + 101), v9, *((_QWORD *)this + 104), &v110);
  tv_sec = v110.tv_sec;
  v110.tv_sec = 0;
  v11 = *((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = tv_sec;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v110.tv_sec;
    v110.tv_sec = 0;
    if (v12)
LABEL_14:
      (*(void (**)(__darwin_time_t))(*(_QWORD *)v12 + 8))(v12);
  }
LABEL_15:
  v14 = (webrtc::AudioBuffer *)operator new();
  webrtc::AudioBuffer::AudioBuffer(v14, *((_DWORD *)this + 186), *((_QWORD *)this + 94), *((_DWORD *)this + 272), *((_QWORD *)this + 97), *((int *)this + 192), v15, v16);
  v18 = *((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v17 = *((_QWORD *)this + 110);
  }
  v19 = *((_DWORD *)this + 112);
  if (v19 == 1)
  {
    *(_BYTE *)(v17 + 152) = 0;
    *(_QWORD *)(v17 + 160) = 0;
    if (*((int *)this + 272) > 47999)
      goto LABEL_30;
  }
  else
  {
    if (!v19)
      *(_BYTE *)(v17 + 152) = 1;
    if (*((int *)this + 272) > 47999)
      goto LABEL_30;
  }
  if (*((_DWORD *)this + 192) != 48000)
  {
LABEL_30:
    v26 = *((_QWORD *)this + 111);
    *((_QWORD *)this + 111) = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
LABEL_32:
    if (*((_QWORD *)this + 178) <= 0x9FuLL)
      goto LABEL_33;
    goto LABEL_43;
  }
  v20 = (webrtc::AudioBuffer *)operator new();
  webrtc::AudioBuffer::AudioBuffer(v20, *((_DWORD *)this + 186), *((_QWORD *)this + 94), *((_DWORD *)this + 192), *((_QWORD *)this + 97), *((int *)this + 192), v21, v22);
  v24 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = v23;
  if (v24)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v23 = *((_QWORD *)this + 111);
  }
  v25 = *((_DWORD *)this + 112);
  if (v25 != 1)
  {
    if (!v25)
    {
      *(_BYTE *)(v23 + 152) = 1;
      if (*((_QWORD *)this + 178) <= 0x9FuLL)
        goto LABEL_33;
      goto LABEL_43;
    }
    goto LABEL_32;
  }
  *(_BYTE *)(v23 + 152) = 0;
  *(_QWORD *)(v23 + 160) = 0;
  if (*((_QWORD *)this + 178) <= 0x9FuLL)
  {
LABEL_33:
    *((_QWORD *)this + 178) = 160;
    v27 = operator new(0x140uLL);
    *v27 = 0u;
    v27[1] = 0u;
    v27[2] = 0u;
    v27[3] = 0u;
    v27[4] = 0u;
    v27[5] = 0u;
    v27[6] = 0u;
    v27[7] = 0u;
    v27[8] = 0u;
    v27[9] = 0u;
    v27[10] = 0u;
    v27[11] = 0u;
    v27[12] = 0u;
    v27[13] = 0u;
    v27[14] = 0u;
    v27[15] = 0u;
    v27[16] = 0u;
    v27[17] = 0u;
    v27[18] = 0u;
    v27[19] = 0u;
    v28 = (_QWORD *)operator new();
    v29 = *((_QWORD *)this + 178);
    *v28 = v29;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = 0;
    v30 = (char *)operator new(0x960uLL);
    v31 = 0;
    v28[4] = v30;
    v28[6] = v30 + 2400;
    do
    {
      v32 = &v30[v31];
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = 0;
      v33 = operator new(0x140uLL);
      *(_QWORD *)v32 = v33;
      v34 = (unint64_t)v33 + 320;
      memcpy(v33, v27, 0x140uLL);
      *(int64x2_t *)(v32 + 8) = vdupq_n_s64(v34);
      v31 += 24;
    }
    while (v31 != 2400);
    v28[5] = v30 + 2400;
    v35 = *((_QWORD *)this + 226);
    *((_QWORD *)this + 226) = v28;
    if (v35)
    {
      v36 = *(_QWORD *)(v35 + 32);
      if (v36)
      {
        v37 = *(_QWORD *)(v35 + 40);
        v38 = *(void **)(v35 + 32);
        if (v37 != v36)
        {
          v39 = *(_QWORD *)(v35 + 40);
          do
          {
            v41 = *(void **)(v39 - 24);
            v39 -= 24;
            v40 = v41;
            if (v41)
            {
              *(_QWORD *)(v37 - 16) = v40;
              operator delete(v40);
            }
            v37 = v39;
          }
          while (v39 != v36);
          v38 = *(void **)(v35 + 32);
        }
        *(_QWORD *)(v35 + 40) = v36;
        operator delete(v38);
      }
      MEMORY[0x20BD0ADEC](v35, 0x1020C40D7793CB0);
      v29 = *((_QWORD *)this + 178);
    }
    v49 = *((_QWORD *)this + 179);
    v50 = (*((_QWORD *)this + 180) - v49) >> 1;
    if (v29 <= v50)
    {
      if (v29 < v50)
        *((_QWORD *)this + 180) = v49 + 2 * v29;
    }
    else
    {
      std::vector<short>::__append((uint64_t)this + 1432, v29 - v50);
      v29 = *((_QWORD *)this + 178);
    }
    v51 = *((_QWORD *)this + 182);
    v52 = (*((_QWORD *)this + 183) - v51) >> 1;
    if (v29 <= v52)
    {
      if (v29 < v52)
        *((_QWORD *)this + 183) = v51 + 2 * v29;
    }
    else
    {
      std::vector<short>::__append((uint64_t)this + 1456, v29 - v52);
    }
    operator delete(v27);
    goto LABEL_60;
  }
LABEL_43:
  v42 = (_QWORD *)*((_QWORD *)this + 226);
  v43 = v42 + 3;
  do
    v44 = __ldxr(v43);
  while (__stxr(0, v43));
  v45 = v42[2] + v44;
  v42[2] = v45;
  v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42[5] - v42[4]) >> 3);
  v47 = v45 >= v46;
  v48 = v45 - v46;
  if (v47)
    v42[2] = v48;
LABEL_60:
  if (*((_QWORD *)this + 79))
  {
    if (*((_QWORD *)this + 185) > 0x1DFuLL)
    {
      v68 = (_QWORD *)*((_QWORD *)this + 227);
      v69 = v68 + 3;
      do
        v70 = __ldxr(v69);
      while (__stxr(0, v69));
      v71 = v68[2] + v70;
      v68[2] = v71;
      v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68[5] - v68[4]) >> 3);
      v47 = v71 >= v72;
      v73 = v71 - v72;
      if (v47)
        v68[2] = v73;
    }
    else
    {
      *((_QWORD *)this + 185) = 480;
      v53 = operator new(0x780uLL);
      bzero(v53, 0x780uLL);
      v54 = (_QWORD *)operator new();
      v55 = *((_QWORD *)this + 185);
      *v54 = v55;
      v54[1] = 0;
      v54[2] = 0;
      v54[3] = 0;
      v56 = (char *)operator new(0x960uLL);
      v57 = 0;
      v54[4] = v56;
      v54[6] = v56 + 2400;
      do
      {
        v58 = &v56[v57];
        *((_QWORD *)v58 + 1) = 0;
        *((_QWORD *)v58 + 2) = 0;
        v59 = operator new(0x780uLL);
        *(_QWORD *)v58 = v59;
        v60 = (unint64_t)v59 + 1920;
        memcpy(v59, v53, 0x780uLL);
        *(int64x2_t *)(v58 + 8) = vdupq_n_s64(v60);
        v57 += 24;
      }
      while (v57 != 2400);
      v54[5] = v56 + 2400;
      v61 = *((_QWORD *)this + 227);
      *((_QWORD *)this + 227) = v54;
      if (v61)
      {
        v62 = *(_QWORD *)(v61 + 32);
        if (v62)
        {
          v63 = *(_QWORD *)(v61 + 40);
          v64 = *(void **)(v61 + 32);
          if (v63 != v62)
          {
            v65 = *(_QWORD *)(v61 + 40);
            do
            {
              v67 = *(void **)(v65 - 24);
              v65 -= 24;
              v66 = v67;
              if (v67)
              {
                *(_QWORD *)(v63 - 16) = v66;
                operator delete(v66);
              }
              v63 = v65;
            }
            while (v65 != v62);
            v64 = *(void **)(v61 + 32);
          }
          *(_QWORD *)(v61 + 40) = v62;
          operator delete(v64);
        }
        MEMORY[0x20BD0ADEC](v61, 0x1020C40D7793CB0);
        v55 = *((_QWORD *)this + 185);
      }
      v74 = *((_QWORD *)this + 186);
      v75 = (*((_QWORD *)this + 187) - v74) >> 2;
      if (v55 <= v75)
      {
        if (v55 < v75)
          *((_QWORD *)this + 187) = v74 + 4 * v55;
      }
      else
      {
        std::vector<float>::__append((uint64_t)this + 1488, v55 - v75);
        v55 = *((_QWORD *)this + 185);
      }
      v76 = *((_QWORD *)this + 189);
      v77 = (*((_QWORD *)this + 190) - v76) >> 2;
      if (v55 <= v77)
      {
        if (v55 < v77)
          *((_QWORD *)this + 190) = v76 + 4 * v55;
      }
      else
      {
        std::vector<float>::__append((uint64_t)this + 1512, v55 - v77);
      }
      operator delete(v53);
    }
  }
  webrtc::AudioProcessingImpl::InitializeGainController1(this);
  webrtc::AudioProcessingImpl::InitializeTransientSuppressor(this);
  webrtc::AudioProcessingImpl::InitializeHighPassFilter((unint64_t)this, 1);
  v79 = *((_QWORD *)this + 79);
  if (v79)
  {
    v80 = *((_QWORD *)this + 111);
    if (v80)
      v81 = (100 * *(_DWORD *)(v80 + 24));
    else
      v81 = *((unsigned int *)this + 272);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v79 + 32))(v79, v81, 1, *((unsigned int *)this + 210), 1);
  }
  webrtc::AudioProcessingImpl::InitializeEchoController(this, v78);
  webrtc::AudioProcessingImpl::InitializeGainController2(this);
  webrtc::AudioProcessingImpl::InitializeVoiceActivityDetector((uint64_t)this, v82, v83, v84, v85, v86, v87, v88);
  webrtc::AudioProcessingImpl::InitializeNoiseSuppressor(this);
  v89 = (void (***)(_QWORD, uint64_t, uint64_t))*((_QWORD *)this + 82);
  if (v89)
  {
    v90 = *((_QWORD *)this + 111);
    if (v90)
      v91 = (100 * *(_DWORD *)(v90 + 24));
    else
      v91 = *((unsigned int *)this + 272);
    v92 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 80))(this);
    (**v89)(v89, v91, v92);
  }
  v93 = (void (***)(_QWORD, uint64_t, uint64_t))*((_QWORD *)this + 80);
  if (v93)
  {
    v94 = *((_QWORD *)this + 111);
    if (v94)
      v95 = (100 * *(_DWORD *)(v94 + 24));
    else
      v95 = *((unsigned int *)this + 272);
    v96 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 80))(this);
    (**v93)(v93, v95, v96);
  }
  v97 = (void (***)(_QWORD, _QWORD, _QWORD))*((_QWORD *)this + 81);
  if (v97)
    (**v97)(v97, *((unsigned int *)this + 210), *((unsigned int *)this + 212));
  if (*((_BYTE *)this + 452))
  {
    v98 = *((float *)this + 114);
    if (!*((_BYTE *)this + 460))
    {
LABEL_110:
      v99 = operator new();
      v100 = v99;
      v101 = *((unsigned __int8 *)this + 472);
      v102 = *((_DWORD *)this + 119);
      v103 = *((_DWORD *)this + 117);
      *(_BYTE *)v99 = v101;
      *(_DWORD *)(v99 + 4) = v102;
      v104 = (float)v102 * 0.0039216;
      if (!v101)
        v104 = 1.0;
      v105 = v98 * v104;
      *(float *)(v99 + 8) = v98;
      *(float *)(v99 + 12) = v105;
      *(float *)(v99 + 16) = v105;
      *(float *)(v99 + 20) = v105;
      *(_QWORD *)(v99 + 24) = 0xBF800000FFFFFFFFLL;
      *(_DWORD *)(v99 + 32) = v103;
      *(_DWORD *)(v99 + 36) = v103;
      *(_QWORD *)(v99 + 40) = 0xBF800000FFFFFFFFLL;
      result = *((_QWORD *)this + 92);
      *((_QWORD *)this + 92) = v100;
      if (result)
        goto LABEL_113;
      goto LABEL_114;
    }
LABEL_109:
    v98 = v98 * *((float *)this + 116);
    goto LABEL_110;
  }
  v98 = 1.0;
  if (*((_BYTE *)this + 460))
    goto LABEL_109;
  result = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (result)
LABEL_113:
    result = MEMORY[0x20BD0ADEC](result, 0x1000C4025072006);
LABEL_114:
  v107 = *((_QWORD *)this + 30);
  if (v107)
  {
    v108 = (char *)this + 744;
    if (rtc::g_clock)
    {
      v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock) / 1000;
    }
    else
    {
      gettimeofday(&v110, 0);
      v109 = v110.tv_usec + 1000000 * v110.tv_sec;
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v107 + 16))(v107, v108, v109 / 1000);
  }
  return result;
}

uint64_t webrtc::AudioProcessingImpl::UpdateActiveSubmoduleStates(webrtc::AudioProcessingImpl *this)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v17;
  int v18;
  uint64_t v19;

  v1 = *((unsigned __int8 *)this + 480);
  if (*((_BYTE *)this + 452))
    v2 = 1;
  else
    v2 = *((_BYTE *)this + 460) != 0;
  v3 = *((_QWORD *)this + 86) != 0;
  v4 = *((_QWORD *)this + 85) != 0;
  v5 = *((_QWORD *)this + 84) != 0;
  v6 = *((_QWORD *)this + 90) != 0;
  v7 = *((_QWORD *)this + 89) != 0;
  v8 = *((unsigned __int8 *)this + 1120);
  v9 = *((_QWORD *)this + 91) != 0;
  v17 = *((unsigned __int8 *)this + 620) == v1
     && *((unsigned __int8 *)this + 621) == v7
     && *((unsigned __int8 *)this + 622) == v6
     && *((unsigned __int8 *)this + 623) == v5
     && *((unsigned __int8 *)this + 625) == v4
     && *((unsigned __int8 *)this + 624) == v3
     && *((unsigned __int8 *)this + 626) == v2
     && *((unsigned __int8 *)this + 627) == v8
     && *((unsigned __int8 *)this + 628) == v9;
  v18 = !v17;
  if (!v17)
  {
    *((_BYTE *)this + 620) = v1;
    *((_BYTE *)this + 621) = v7;
    *((_BYTE *)this + 622) = v6;
    *((_BYTE *)this + 623) = v5;
    *((_BYTE *)this + 625) = v4;
    *((_BYTE *)this + 624) = v3;
    *((_BYTE *)this + 626) = v2;
    *((_BYTE *)this + 627) = v8;
    *((_BYTE *)this + 628) = v9;
  }
  v19 = *((unsigned __int8 *)this + 629) | v18;
  *((_BYTE *)this + 629) = 0;
  return v19;
}

void webrtc::AudioProcessingImpl::InitializeGainController1(webrtc::AudioProcessingImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  webrtc::AgcManagerDirect *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  webrtc::AgcManagerDirect *v19;
  uint64_t v20;
  webrtc::AgcManagerDirect *v21;
  int v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  uint64_t j;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t i;
  int v50;
  BOOL v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;

  if (*((_BYTE *)this + 584)
    && *((_BYTE *)this + 585)
    && *((_BYTE *)this + 504)
    && (!*((_DWORD *)this + 127) || *((_BYTE *)this + 524))
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc");
  }
  if (*((_BYTE *)this + 504))
  {
    v9 = *((_QWORD *)this + 84);
    if (!v9)
    {
      v9 = operator new();
      *(_QWORD *)v9 = &off_24C0B4850;
      *(_QWORD *)(v9 + 8) = operator new();
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 24) = 255;
      *(_BYTE *)(v9 + 28) = 1;
      *(_QWORD *)(v9 + 32) = 0x900000003;
      *(_DWORD *)(v9 + 40) = 0;
      *(_WORD *)(v9 + 44) = 0;
      *(_BYTE *)(v9 + 104) = 0;
      *(_BYTE *)(v9 + 112) = 0;
      *(_BYTE *)(v9 + 116) = 0;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(_BYTE *)(v9 + 96) = 0;
      v10 = *((_QWORD *)this + 84);
      *((_QWORD *)this + 84) = v9;
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10);
        v9 = *((_QWORD *)this + 84);
      }
    }
    v11 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 80))(this);
    v12 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 56))(this);
    webrtc::GainControlImpl::Initialize((webrtc::GainControlImpl *)v9, v11, v12);
    if (*((_BYTE *)this + 524))
    {
      v14 = *((_QWORD *)this + 83);
      if (!v14)
        goto LABEL_24;
      v15 = *(_DWORD *)(v14 + 24);
      v13 = (webrtc::AgcManagerDirect *)(*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 80))(this);
      v16 = (unsigned __int8 *)*((_QWORD *)this + 83);
      if (v15 == (_DWORD)v13)
      {
LABEL_56:
        v40 = *((_QWORD *)v16 + 8);
        v41 = *((_QWORD *)v16 + 9);
        v42 = v41 - v40;
        if (v41 != v40)
        {
          v43 = 0;
          v44 = v42 >> 3;
          if ((unint64_t)(v42 >> 3) <= 1)
            v45 = 1;
          else
            v45 = v42 >> 3;
          do
          {
            v46 = *(_QWORD *)(v40 + 8 * v43);
            *(_QWORD *)(v46 + 20) = 0xC000000FFLL;
            if (*(_BYTE *)(v46 + 4))
              v47 = 0;
            else
              v47 = 7;
            *(_DWORD *)(v46 + 28) = v47;
            *(_DWORD *)(v46 + 32) = v47;
            *(float *)(v46 + 36) = (float)v47;
            *(_WORD *)(v46 + 40) = 257;
            *(_DWORD *)(v46 + 64) = 0;
            *(_BYTE *)(v46 + 68) = 1;
            ++v43;
          }
          while (v45 != v43);
          v16[40] = 1;
          v48 = *(_DWORD *)(*(_QWORD *)v40 + 44);
          *((_DWORD *)v16 + 11) = 0;
          if ((unint64_t)v42 >= 9)
          {
            if (v44 <= 2)
              v44 = 2;
            for (i = 1; i != v44; ++i)
            {
              v50 = *(_DWORD *)(*(_QWORD *)(v40 + 8 * i) + 44);
              if (v50 < v48)
              {
                *((_DWORD *)v16 + 11) = i;
                v48 = v50;
              }
            }
          }
          if (v16[8])
            v51 = v48 <= 0;
          else
            v51 = 1;
          if (!v51 && v48 <= *((_DWORD *)v16 + 1))
            v48 = *((_DWORD *)v16 + 1);
          if (*v16)
            *((_DWORD *)v16 + 9) = v48;
          *(_QWORD *)(v16 + 124) = 0;
          webrtc::AgcManagerDirect::SetupDigitalGainControl((uint64_t)v16, *((_QWORD *)this + 84));
          v52 = *((_QWORD *)this + 83);
          v53 = *((unsigned __int8 *)this + 873);
          v54 = *(uint64_t **)(v52 + 64);
          v55 = *(_QWORD *)(v52 + 72) - (_QWORD)v54;
          if (v55)
          {
            v56 = v55 >> 3;
            if (v56 <= 1)
              v56 = 1;
            if (*((_BYTE *)this + 873))
            {
              do
              {
                v57 = *v54;
                if (*(unsigned __int8 *)(*v54 + 40) != v53)
                {
                  *(_BYTE *)(v57 + 40) = v53;
                  *(_BYTE *)(v57 + 41) = 1;
                }
                ++v54;
                --v56;
              }
              while (v56);
            }
            else
            {
              do
              {
                if (*(_BYTE *)(*v54 + 40))
                  *(_BYTE *)(*v54 + 40) = 0;
                ++v54;
                --v56;
              }
              while (v56);
            }
          }
          *(_BYTE *)(v52 + 40) = v53;
          return;
        }
        v16[40] = 1;
        goto LABEL_93;
      }
      if (v16)
      {
        v17 = *((_DWORD *)v16 + 9);
        v18 = 1;
      }
      else
      {
LABEL_24:
        v18 = 0;
        v17 = -1;
      }
      v16 = (unsigned __int8 *)operator new();
      v22 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 80))(this);
      webrtc::AgcManagerDirect::AgcManagerDirect((uint64_t)v16, v22, (uint64_t)this + 524);
      v13 = (webrtc::AgcManagerDirect *)*((_QWORD *)this + 83);
      *((_QWORD *)this + 83) = v16;
      if (v13)
      {
        webrtc::AgcManagerDirect::~AgcManagerDirect(v13);
        v13 = (webrtc::AgcManagerDirect *)MEMORY[0x20BD0ADEC]();
        v16 = (unsigned __int8 *)*((_QWORD *)this + 83);
      }
      if (!v18)
        goto LABEL_56;
      v23 = *v16;
      if (!*v16)
        *((_DWORD *)v16 + 9) = v17;
      v24 = (char *)*((_QWORD *)v16 + 8);
      v25 = (char *)*((_QWORD *)v16 + 9);
      v26 = v25 - v24;
      if (v25 == v24)
      {
LABEL_93:
        __break(1u);
LABEL_94:
        rtc::webrtc_checks_impl::UnreachableCodeReached(v13);
      }
      v27 = v26 >> 3;
      if ((unint64_t)(v26 >> 3) <= 1)
        v28 = 1;
      else
        v28 = v26 >> 3;
      if (v28 >= 2)
      {
        v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
        v30 = (uint64_t *)(v24 + 8);
        v31 = v28 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v32 = *v30;
          *(_DWORD *)(*(v30 - 1) + 44) = v17;
          *(_DWORD *)(v32 + 44) = v17;
          v30 += 2;
          v31 -= 2;
        }
        while (v31);
        if (v28 == v29)
          goto LABEL_41;
      }
      else
      {
        v29 = 0;
      }
      v33 = v28 - v29;
      v34 = (uint64_t *)&v24[8 * v29];
      do
      {
        v35 = *v34++;
        *(_DWORD *)(v35 + 44) = v17;
        --v33;
      }
      while (v33);
LABEL_41:
      v36 = *(_DWORD *)(*(_QWORD *)v24 + 44);
      *((_DWORD *)v16 + 11) = 0;
      if ((unint64_t)v26 >= 9)
      {
        if (v27 <= 2)
          v27 = 2;
        for (j = 1; j != v27; ++j)
        {
          v38 = *(_DWORD *)(*(_QWORD *)&v24[8 * j] + 44);
          if (v38 < v36)
          {
            *((_DWORD *)v16 + 11) = j;
            v36 = v38;
          }
        }
      }
      if (v16[8])
        v39 = v36 <= 0;
      else
        v39 = 1;
      if (!v39 && v36 <= *((_DWORD *)v16 + 1))
        v36 = *((_DWORD *)v16 + 1);
      if (v23)
        *((_DWORD *)v16 + 9) = v36;
      goto LABEL_56;
    }
    if (*((_DWORD *)this + 127) >= 3u)
      goto LABEL_94;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 84) + 16))(*((_QWORD *)this + 84));
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 84) + 32))(*((_QWORD *)this + 84), *((unsigned int *)this + 128));
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 84) + 48))(*((_QWORD *)this + 84), *((unsigned int *)this + 129));
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 84) + 64))(*((_QWORD *)this + 84), *((unsigned __int8 *)this + 520));
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 84) + 80))(*((_QWORD *)this + 84), 0, 255);
    v21 = (webrtc::AgcManagerDirect *)*((_QWORD *)this + 83);
    *((_QWORD *)this + 83) = 0;
    if (v21)
    {
      webrtc::AgcManagerDirect::~AgcManagerDirect(v21);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    v19 = (webrtc::AgcManagerDirect *)*((_QWORD *)this + 83);
    *((_QWORD *)this + 83) = 0;
    if (v19)
    {
      webrtc::AgcManagerDirect::~AgcManagerDirect(v19);
      MEMORY[0x20BD0ADEC]();
    }
    v20 = *((_QWORD *)this + 84);
    *((_QWORD *)this + 84) = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 120))(v20);
  }
}

void webrtc::AudioProcessingImpl::InitializeTransientSuppressor(webrtc::AudioProcessingImpl *this)
{
  int v2;
  BOOL v3;
  BOOL v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = 0;
  if (*((_BYTE *)this + 500))
    v3 = *((_BYTE *)this + 584) == 0;
  else
    v3 = 1;
  if (v3)
  {
    if (!*((_BYTE *)this + 500))
    {
LABEL_17:
      v6 = *((_QWORD *)this + 91);
      *((_QWORD *)this + 91) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      return;
    }
    goto LABEL_13;
  }
  if (*((unsigned __int8 *)this + 585) | *((unsigned __int8 *)this + 588))
    v4 = *((_BYTE *)this + 96) == 0;
  else
    v4 = 1;
  if (v4)
  {
LABEL_13:
    v5 = 0;
    goto LABEL_16;
  }
  v5 = *((unsigned __int8 *)this + 88);
  if (*((_BYTE *)this + 88))
  {
    v5 = 1;
    *((_DWORD *)this + 25) = 1;
  }
LABEL_16:
  if (*((_BYTE *)this + 868))
    goto LABEL_17;
  v7 = *((_QWORD *)this + 91);
  if (v7 && v2 == v5)
  {
    v8 = *((_QWORD *)this + 111);
    if (v8)
      v9 = (100 * *(_DWORD *)(v8 + 24));
    else
      v9 = *((unsigned int *)this + 272);
    v18 = *((unsigned int *)this + 278);
    v19 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 80))(this);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v9, v18, v19);
  }
  else
  {
    (*(void (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 80))(this);
    v10 = *((_QWORD *)this + 91);
    *((_QWORD *)this + 91) = 0;
    if (!v10 || ((*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10), !*((_QWORD *)this + 91)))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc");
    }
  }
}

unint64_t webrtc::AudioProcessingImpl::InitializeHighPassFilter(unint64_t this, char a2)
{
  _QWORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  webrtc::HighPassFilter *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v3 = (_QWORD *)this;
  v4 = *(unsigned __int8 *)(this + 482);
  if (*(_BYTE *)(this + 482))
  {
    v4 = *(unsigned __int8 *)(this + 485);
    if (*(_BYTE *)(this + 485))
      v4 = *(_BYTE *)(this + 483) == 0;
  }
  if (*(_BYTE *)(this + 620) || *(_BYTE *)(this + 621) || ((*(_BYTE *)(this + 622) == 0) & ~v4) == 0)
  {
    if (*(_BYTE *)(this + 481) && !*(_BYTE *)(this + 866))
    {
      v17 = *(_QWORD *)(this + 888);
      if (v17)
        v5 = 100 * *(_DWORD *)(v17 + 24);
      else
        v5 = *(_DWORD *)(this + 1088);
      v6 = 11;
    }
    else
    {
      v5 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)this + 64))(this);
      v6 = 10;
    }
    this = (*(uint64_t (**)(_QWORD *))(*v3 + 8 * v6))(v3);
    v7 = this;
    v8 = v3[87];
    if (!v8
      || v5 != *(_DWORD *)v8
      || (a2 & 1) != 0
      || this != (uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 3)
    {
      v9 = (webrtc::HighPassFilter *)operator new();
      this = (unint64_t)webrtc::HighPassFilter::HighPassFilter(v9, v5, v7);
      v10 = v3[87];
      v3[87] = this;
      if (v10)
      {
LABEL_15:
        v11 = *(_QWORD **)(v10 + 8);
        if (v11)
        {
          v12 = *(_QWORD **)(v10 + 16);
          v13 = *(void **)(v10 + 8);
          if (v12 != v11)
          {
            do
            {
              v15 = *--v12;
              v14 = v15;
              *v12 = 0;
              if (v15)
              {
                v16 = *(void **)v14;
                if (*(_QWORD *)v14)
                {
                  *(_QWORD *)(v14 + 8) = v16;
                  operator delete(v16);
                }
                MEMORY[0x20BD0ADEC](v14, 0x20C40960023A9);
              }
            }
            while (v12 != v11);
            v13 = *(void **)(v10 + 8);
          }
          *(_QWORD *)(v10 + 16) = v11;
          operator delete(v13);
        }
        JUMPOUT(0x20BD0ADECLL);
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)(this + 696);
    *(_QWORD *)(this + 696) = 0;
    if (v10)
      goto LABEL_15;
  }
  return this;
}

void webrtc::AudioProcessingImpl::InitializeEchoController(webrtc::AudioProcessingImpl *this, void *a2)
{
  void (***v3)(_OWORD *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  webrtc::AudioBuffer *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  webrtc::EchoControlMobileImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  webrtc::EchoControlMobileImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  __n128 v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  webrtc::EchoControlMobileImpl *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  webrtc::EchoControlMobileImpl *v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[7];
  char v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD v90[5];
  _OWORD v91[2];
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _OWORD v110[3];
  _OWORD v111[7];
  char v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _QWORD v125[5];
  _OWORD v126[2];
  int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _OWORD v145[3];
  char v146;
  _BYTE v147[624];

  v3 = (void (***)(_OWORD *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))*((_QWORD *)this + 29);
  if (v3)
  {
    v4 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 56))(this);
    v5 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 96))(this);
    v6 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 80))(this);
    (**v3)(v111, v3, v4, v5, v6);
    v8 = *(_QWORD *)&v111[0];
    *(_QWORD *)&v111[0] = 0;
    v9 = *((_QWORD *)this + 88);
    *((_QWORD *)this + 88) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
      v10 = *(_QWORD *)&v111[0];
      *(_QWORD *)&v111[0] = 0;
      if (v10)
LABEL_4:
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
    }
LABEL_5:
    if (*((_BYTE *)this + 484))
    {
      v11 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 80))(this);
      v12 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 80))(this);
      (*(void (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 80))(this);
      v13 = (webrtc::AudioBuffer *)operator new();
      webrtc::AudioBuffer::AudioBuffer(v13, 16000, v11, 16000, v12, 16000, v14, v15);
      v16 = *((_QWORD *)this + 112);
      *((_QWORD *)this + 112) = v13;
      if (!v16)
      {
LABEL_8:
        *((_BYTE *)this + 1120) = 1;
        v17 = (webrtc::EchoControlMobileImpl *)*((_QWORD *)this + 89);
        *((_QWORD *)this + 89) = 0;
        if (v17)
        {
          webrtc::EchoControlMobileImpl::~EchoControlMobileImpl(v17, v7);
          MEMORY[0x20BD0ADEC]();
        }
        v18 = *((_QWORD *)this + 225);
        *((_QWORD *)this + 225) = 0;
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 32);
          if (v19)
          {
            v20 = *(_QWORD *)(v18 + 40);
            v21 = *(void **)(v18 + 32);
            if (v20 != v19)
            {
              v22 = *(_QWORD *)(v18 + 40);
              do
              {
                v24 = *(void **)(v22 - 24);
                v22 -= 24;
                v23 = v24;
                if (v24)
                {
                  *(_QWORD *)(v20 - 16) = v23;
                  operator delete(v23);
                }
                v20 = v22;
              }
              while (v22 != v19);
              v21 = *(void **)(v18 + 32);
            }
            *(_QWORD *)(v18 + 40) = v19;
            operator delete(v21);
          }
          MEMORY[0x20BD0ADEC](v18, 0x1020C40D7793CB0);
        }
        return;
      }
    }
    else
    {
      v16 = *((_QWORD *)this + 112);
      *((_QWORD *)this + 112) = 0;
      if (!v16)
        goto LABEL_8;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    goto LABEL_8;
  }
  if (*((_BYTE *)this + 482) && !*((_BYTE *)this + 483))
  {
    v52.n128_f64[0] = webrtc::EchoCanceller3Config::EchoCanceller3Config((webrtc::EchoCanceller3Config *)v147);
    LOBYTE(v111[0]) = 0;
    v146 = 0;
    if (*((_BYTE *)this + 16))
    {
      webrtc::EchoCanceller3Config::EchoCanceller3Config((webrtc::EchoCanceller3Config *)v76);
      *(_QWORD *)&v80 = 11;
      DWORD2(v80) = 1064514355;
      *(_QWORD *)&v83 = 11;
      DWORD2(v83) = 1064514355;
      v98 = 0x3EB333333FC00000;
      v111[4] = v76[4];
      v111[5] = v76[5];
      v111[6] = v76[6];
      v112 = v77;
      v111[0] = v76[0];
      v111[1] = v76[1];
      v111[2] = v76[2];
      v111[3] = v76[3];
      *(_QWORD *)((char *)&v125[1] + 6) = *(_QWORD *)((char *)&v90[1] + 6);
      v124 = v89;
      *(_OWORD *)v125 = *(_OWORD *)v90;
      v122 = v87;
      v123 = v88;
      v118 = v83;
      v117 = v82;
      v116 = v81;
      v114 = v79;
      v113 = v78;
      v121 = v86;
      v120 = v85;
      v119 = v84;
      v115 = v80;
      *(_OWORD *)((char *)v126 + 9) = *(_OWORD *)((char *)v91 + 9);
      *(_OWORD *)&v125[3] = *(_OWORD *)&v90[3];
      v126[0] = v91[0];
      v127 = v92;
      v128 = v93;
      v129 = v94;
      v130 = v95;
      v131 = v96;
      v132 = v97;
      v133 = 0x3EB333333FC00000;
      v134 = v99;
      v135 = v100;
      v136 = v101;
      v137 = v102;
      v138 = v103;
      *(_OWORD *)((char *)v145 + 9) = *(_OWORD *)((char *)v110 + 9);
      v144 = v109;
      v143 = v108;
      v142 = v107;
      v141 = v106;
      v140 = v105;
      v139 = v104;
      v52 = (__n128)v110[0];
      v145[0] = v110[0];
      v145[2] = v110[2];
      v146 = 1;
    }
    v53 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *, __n128))(*(_QWORD *)this + 56))(this, v52);
    v54 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 96))(this);
    v55 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 80))(this);
    v56 = operator new();
    webrtc::EchoCanceller3::EchoCanceller3(v56, (const webrtc::EchoCanceller3Config *)v147, (uint64_t)v111, v53, v54, v55);
    v10 = *((_QWORD *)this + 88);
    *((_QWORD *)this + 88) = v56;
    if (v10)
      goto LABEL_4;
    goto LABEL_5;
  }
  v25 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
  *((_BYTE *)this + 1120) = 0;
  v26 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (*((_BYTE *)this + 482))
  {
    if (*((_BYTE *)this + 483))
    {
      v27 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 88))(this);
      v28 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 96))(this);
      if ((unint64_t)(160 * v27 * v28) <= 1)
        v29 = 1;
      else
        v29 = 160 * v27 * v28;
      if ((v29 & 0x8000000000000000) != 0)
        abort();
      v30 = operator new(2 * v29);
      bzero(v30, 2 * v29);
      v31 = (_QWORD *)operator new();
      *v31 = v29;
      v31[1] = 0;
      v31[2] = 0;
      v31[3] = 0;
      v32 = (char *)operator new(0x960uLL);
      v33 = 0;
      v31[4] = v32;
      v31[6] = v32 + 2400;
      do
      {
        v34 = &v32[v33];
        *((_QWORD *)v34 + 1) = 0;
        *((_QWORD *)v34 + 2) = 0;
        v35 = operator new(2 * v29);
        *(_QWORD *)v34 = v35;
        v36 = (unint64_t)v35 + 2 * v29;
        memcpy(v35, v30, 2 * v29);
        *(int64x2_t *)(v34 + 8) = vdupq_n_s64(v36);
        v33 += 24;
      }
      while (v33 != 2400);
      v31[5] = v32 + 2400;
      v37 = *((_QWORD *)this + 225);
      *((_QWORD *)this + 225) = v31;
      if (v37)
      {
        v38 = *(_QWORD *)(v37 + 32);
        if (v38)
        {
          v39 = *(_QWORD *)(v37 + 40);
          v40 = *(void **)(v37 + 32);
          if (v39 != v38)
          {
            v41 = *(_QWORD *)(v37 + 40);
            do
            {
              v43 = *(void **)(v41 - 24);
              v41 -= 24;
              v42 = v43;
              if (v43)
              {
                *(_QWORD *)(v39 - 16) = v42;
                operator delete(v42);
              }
              v39 = v41;
            }
            while (v41 != v38);
            v40 = *(void **)(v37 + 32);
          }
          *(_QWORD *)(v37 + 40) = v38;
          operator delete(v40);
        }
        MEMORY[0x20BD0ADEC](v37, 0x1020C40D7793CB0);
      }
      v62 = *((_QWORD *)this + 172);
      v63 = (*((_QWORD *)this + 173) - v62) >> 1;
      if (v29 <= v63)
      {
        if (v29 < v63)
          *((_QWORD *)this + 173) = v62 + 2 * v29;
      }
      else
      {
        std::vector<short>::__append((uint64_t)this + 1376, v29 - v63);
      }
      v64 = *((_QWORD *)this + 175);
      v65 = (*((_QWORD *)this + 176) - v64) >> 1;
      if (v29 <= v65)
      {
        if (v29 < v65)
          *((_QWORD *)this + 176) = v64 + 2 * v29;
      }
      else
      {
        std::vector<short>::__append((uint64_t)this + 1400, v29 - v65);
      }
      v67 = operator new();
      *(_DWORD *)v67 = 3;
      *(_BYTE *)(v67 + 4) = 0;
      *(_OWORD *)(v67 + 8) = 0u;
      *(_OWORD *)(v67 + 24) = 0u;
      *(_OWORD *)(v67 + 40) = 0u;
      *(_OWORD *)(v67 + 49) = 0u;
      v68 = (webrtc::EchoControlMobileImpl *)*((_QWORD *)this + 89);
      *((_QWORD *)this + 89) = v67;
      if (v68)
      {
        webrtc::EchoControlMobileImpl::~EchoControlMobileImpl(v68, v66);
        MEMORY[0x20BD0ADEC]();
        v67 = *((_QWORD *)this + 89);
      }
      v69 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 64))(this);
      v70 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 96))(this);
      v71 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 88))(this);
      webrtc::EchoControlMobileImpl::Initialize((webrtc::EchoControlMobileImpl *)v67, v69, v70, v71, v72, v73, v74, v75);
      operator delete(v30);
      return;
    }
    v57 = (webrtc::EchoControlMobileImpl *)*((_QWORD *)this + 89);
    *((_QWORD *)this + 89) = 0;
    if (v57)
    {
      webrtc::EchoControlMobileImpl::~EchoControlMobileImpl(v57, a2);
      MEMORY[0x20BD0ADEC]();
    }
    v45 = *((_QWORD *)this + 225);
    *((_QWORD *)this + 225) = 0;
    if (v45)
    {
      v46 = *(_QWORD *)(v45 + 32);
      if (!v46)
        goto LABEL_84;
      v58 = *(_QWORD *)(v45 + 40);
      v48 = *(void **)(v45 + 32);
      if (v58 == v46)
      {
LABEL_67:
        *(_QWORD *)(v45 + 40) = v46;
        operator delete(v48);
LABEL_84:
        JUMPOUT(0x20BD0ADECLL);
      }
      v59 = *(_QWORD *)(v45 + 40);
      do
      {
        v61 = *(void **)(v59 - 24);
        v59 -= 24;
        v60 = v61;
        if (v61)
        {
          *(_QWORD *)(v58 - 16) = v60;
          operator delete(v60);
        }
        v58 = v59;
      }
      while (v59 != v46);
LABEL_66:
      v48 = *(void **)(v45 + 32);
      goto LABEL_67;
    }
  }
  else
  {
    v44 = (webrtc::EchoControlMobileImpl *)*((_QWORD *)this + 89);
    *((_QWORD *)this + 89) = 0;
    if (v44)
    {
      webrtc::EchoControlMobileImpl::~EchoControlMobileImpl(v44, a2);
      MEMORY[0x20BD0ADEC]();
    }
    v45 = *((_QWORD *)this + 225);
    *((_QWORD *)this + 225) = 0;
    if (v45)
    {
      v46 = *(_QWORD *)(v45 + 32);
      if (!v46)
        goto LABEL_84;
      v47 = *(_QWORD *)(v45 + 40);
      v48 = *(void **)(v45 + 32);
      if (v47 == v46)
        goto LABEL_67;
      v49 = *(_QWORD *)(v45 + 40);
      do
      {
        v51 = *(void **)(v49 - 24);
        v49 -= 24;
        v50 = v51;
        if (v51)
        {
          *(_QWORD *)(v47 - 16) = v50;
          operator delete(v50);
        }
        v47 = v49;
      }
      while (v49 != v46);
      goto LABEL_66;
    }
  }
}

webrtc::GainController2 *webrtc::AudioProcessingImpl::InitializeGainController2(webrtc::AudioProcessingImpl *this)
{
  int v2;
  __int128 v3;
  char *v4;
  _BOOL4 v5;
  webrtc::GainController2 *result;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  webrtc::GainController2 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  _BYTE v23[28];

  if (*((_BYTE *)this + 584))
  {
    v2 = *((unsigned __int8 *)this + 96);
    if (*((_BYTE *)this + 96) && *((_BYTE *)this + 88))
    {
      v3 = *(_OWORD *)((char *)this + 36);
      v22 = *(_OWORD *)((char *)this + 20);
      *(_OWORD *)v23 = v3;
      *(_OWORD *)&v23[12] = *((_OWORD *)this + 3);
      v4 = (char *)this + 584;
      if (!*((_BYTE *)this + 500))
      {
LABEL_5:
        v5 = 1;
LABEL_12:
        v7 = *((_QWORD *)this + 111);
        if (v7)
          v8 = 100 * *(_DWORD *)(v7 + 24);
        else
          v8 = *((_DWORD *)this + 272);
        v9 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 88))(this);
        v10 = operator new();
        result = (webrtc::GainController2 *)webrtc::GainController2::GainController2(v10, (uint64_t)v4, (uint64_t)&v22, v8, v9, v5);
        v11 = (webrtc::GainController2 *)*((_QWORD *)this + 85);
        *((_QWORD *)this + 85) = result;
        if (v11)
        {
          webrtc::GainController2::~GainController2(v11);
          MEMORY[0x20BD0ADEC](v12, 0x1060C40BDA6ED9ELL, v13, v14, v15, v16);
          result = (webrtc::GainController2 *)*((_QWORD *)this + 85);
        }
        v17 = *((_QWORD *)result + 6);
        if (v17)
        {
          v18 = *((unsigned __int8 *)this + 873);
          v19 = *(uint64_t **)(v17 + 72);
          v20 = *(uint64_t **)(v17 + 80);
          if (v19 != v20)
          {
            if (*((_BYTE *)this + 873))
            {
              do
              {
                v21 = *v19;
                if (*(unsigned __int8 *)(*v19 + 16) != v18)
                {
                  *(_BYTE *)(v21 + 16) = v18;
                  *(_BYTE *)(v21 + 17) = 1;
                }
                ++v19;
              }
              while (v19 != v20);
            }
            else
            {
              do
              {
                if (*(_BYTE *)(*v19 + 16))
                  *(_BYTE *)(*v19 + 16) = 0;
                ++v19;
              }
              while (v19 != v20);
            }
          }
          *(_BYTE *)(v17 + 20) = v18;
        }
        return result;
      }
    }
    else
    {
      *(_QWORD *)&v22 = 0x4600000014;
      *((_QWORD *)&v22 + 1) = 0x3DCCCCCD0000000FLL;
      *(_DWORD *)v23 = 300;
      v23[4] = 1;
      *(_QWORD *)&v23[8] = 0xFFFFFFCEFFFFFFE2;
      *(_DWORD *)&v23[16] = 100;
      *(_QWORD *)&v23[20] = 0x3F19999A3F333333;
      v4 = (char *)this + 584;
      if (!*((_BYTE *)this + 500))
        goto LABEL_5;
    }
    v5 = 1;
    if (v2 && *((unsigned __int8 *)this + 585) | *((unsigned __int8 *)this + 588))
      v5 = *((_BYTE *)this + 88) == 0;
    goto LABEL_12;
  }
  result = (webrtc::GainController2 *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (result)
  {
    webrtc::GainController2::~GainController2(result);
    JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

uint64_t webrtc::AudioProcessingImpl::InitializeVoiceActivityDetector(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  __int16 *v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  std::string *v26;
  __int16 v27;
  char v28;

  v8 = this;
  if (*(_BYTE *)(this + 500))
    v9 = *(_BYTE *)(this + 584) == 0;
  else
    v9 = 1;
  if (v9
    || (*(unsigned __int8 *)(this + 585) | *(unsigned __int8 *)(this + 588)
      ? (v10 = *(_BYTE *)(this + 96) == 0)
      : (v10 = 1),
        v10 || !*(_BYTE *)(this + 88)))
  {
    v14 = *(_QWORD **)(this + 688);
    *(_QWORD *)(this + 688) = 0;
    if (v14)
    {
      v15 = (void *)v14[12];
      if (v15)
      {
        v14[13] = v15;
        operator delete(v15);
      }
      v16 = v14[11];
      v14[11] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      webrtc::PushResampler<float>::~PushResampler(v14 + 2);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    v11 = *(_QWORD *)(this + 688);
    if (v11)
    {
      v12 = *(_QWORD *)(this + 888);
      if (v12)
        v13 = 100 * *(_DWORD *)(v12 + 24);
      else
        v13 = *(_DWORD *)(this + 1088);
      if (v13 % 100)
      {
        v26 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, (v13 % 100));
        return webrtc::AudioProcessingImpl::InitializeNoiseSuppressor((webrtc::AudioProcessingImpl *)v26);
      }
      else
      {
        *(_DWORD *)(v11 + 4) = v13 / 100;
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 88) + 16))(*(_QWORD *)(v11 + 88));
        webrtc::PushResampler<float>::InitializeIfNeeded(v11 + 16, v13, v21, 1);
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 88) + 24))(*(_QWORD *)(v11 + 88));
      }
    }
    else
    {
      v17 = *(__int16 **)(this + 680);
      v18 = *v17;
      v28 = *((_BYTE *)v17 + 2);
      v27 = v18;
      v19 = *(_QWORD *)(this + 888);
      if (v19)
        v20 = 100 * *(_DWORD *)(v19 + 24);
      else
        v20 = *(_DWORD *)(this + 1088);
      v22 = operator new();
      this = webrtc::VoiceActivityDetectorWrapper::VoiceActivityDetectorWrapper(v22, (uint64_t)&v27, v20);
      v23 = *(_QWORD **)(v8 + 688);
      *(_QWORD *)(v8 + 688) = this;
      if (v23)
      {
        v24 = (void *)v23[12];
        if (v24)
        {
          v23[13] = v24;
          operator delete(v24);
        }
        v25 = v23[11];
        v23[11] = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        webrtc::PushResampler<float>::~PushResampler(v23 + 2);
        return MEMORY[0x20BD0ADEC](v23, 0x10A0C40915EBB22);
      }
    }
  }
  return this;
}

webrtc::NoiseSuppressor *webrtc::AudioProcessingImpl::InitializeNoiseSuppressor(webrtc::AudioProcessingImpl *this)
{
  webrtc::NoiseSuppressor *result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  result = (webrtc::NoiseSuppressor *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (result)
  {
    webrtc::NoiseSuppressor::~NoiseSuppressor(result);
    result = (webrtc::NoiseSuppressor *)MEMORY[0x20BD0ADEC]();
  }
  if (*((_BYTE *)this + 488))
  {
    if (*((_DWORD *)this + 123) >= 4u)
      rtc::webrtc_checks_impl::UnreachableCodeReached(result);
    v6 = *((_DWORD *)this + 123);
    v3 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 56))(this);
    v4 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 80))(this);
    v5 = operator new();
    webrtc::NoiseSuppressor::NoiseSuppressor(v5, &v6, v3, v4);
    result = (webrtc::NoiseSuppressor *)*((_QWORD *)this + 90);
    *((_QWORD *)this + 90) = v5;
    if (result)
    {
      webrtc::NoiseSuppressor::~NoiseSuppressor(result);
      return (webrtc::NoiseSuppressor *)MEMORY[0x20BD0ADEC]();
    }
  }
  return result;
}

uint64_t webrtc::AudioProcessingImpl::ApplyConfig(webrtc::AudioProcessingImpl *this, const webrtc::AudioProcessing::Config *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  void *v15;
  BOOL v16;
  BOOL v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  pthread_mutex_t *v45;
  pthread_mutex_t *v46;
  _BOOL4 v47;
  float v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  float v55;
  float v56;
  uint64_t v57;
  _BOOL4 v59;
  pthread_mutex_t *v60;
  void *__p;
  char v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[5];
  __int128 v68;
  __int128 v69;

  v4 = (pthread_mutex_t *)((char *)this + 312);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 312));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
  webrtc::AudioProcessingImpl::AdjustConfig((uint64_t)&v63, (uint64_t)a2, (uint64_t)this + 20);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0
    && (webrtc::AudioProcessing::Config::ToString((webrtc::AudioProcessing::Config *)&v63, (char *)&__p),
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc"), v62 < 0))
  {
    operator delete(__p);
    v12 = (char *)this + 440;
    if (*((unsigned __int8 *)this + 444) != BYTE4(v63))
      goto LABEL_9;
  }
  else
  {
    v12 = (char *)this + 440;
    if (*((unsigned __int8 *)this + 444) != BYTE4(v63))
      goto LABEL_9;
  }
  if (*((unsigned __int8 *)this + 445) != BYTE5(v63) || *(_DWORD *)v12 != (_DWORD)v63)
  {
LABEL_9:
    v13 = 1;
    if (*((unsigned __int8 *)this + 482) != BYTE10(v65))
      goto LABEL_7;
LABEL_10:
    v14 = *((unsigned __int8 *)this + 483) != BYTE11(v65);
    goto LABEL_11;
  }
  v13 = *((_DWORD *)this + 112) != DWORD2(v63);
  if (*((unsigned __int8 *)this + 482) == BYTE10(v65))
    goto LABEL_10;
LABEL_7:
  v14 = 1;
LABEL_11:
  v16 = webrtc::AudioProcessing::Config::GainController1::operator==((unsigned __int8 *)this + 504, (unsigned __int8 *)v67);
  v60 = v4;
  v59 = v13;
  v17 = *((unsigned __int8 *)this + 584) == v68
     && *((float *)this + 153) == *((float *)&v69 + 3)
     && *((unsigned __int8 *)this + 588) == BYTE4(v68)
     && *((float *)this + 148) == *((float *)&v68 + 2)
     && *((float *)this + 149) == *((float *)&v68 + 3)
     && *((float *)this + 150) == *(float *)&v69
     && *((float *)this + 151) == *((float *)&v69 + 1)
     && *((float *)this + 152) == *((float *)&v69 + 2)
     && *((unsigned __int8 *)this + 585) == BYTE1(v68);
  if (*((unsigned __int8 *)this + 488) == v66)
  {
    v18 = *((_DWORD *)this + 123) != DWORD1(v66);
    if (*((unsigned __int8 *)this + 452) != BYTE12(v63))
      goto LABEL_23;
LABEL_26:
    v19 = *((float *)this + 114) != *(float *)&v64;
    if (*((unsigned __int8 *)this + 460) != BYTE4(v64))
      goto LABEL_31;
    goto LABEL_27;
  }
  v18 = 1;
  if (*((unsigned __int8 *)this + 452) == BYTE12(v63))
    goto LABEL_26;
LABEL_23:
  v19 = 1;
  if (*((unsigned __int8 *)this + 460) != BYTE4(v64))
    goto LABEL_31;
LABEL_27:
  if (*((float *)this + 116) == *((float *)&v64 + 2)
    && *((float *)this + 117) == *((float *)&v64 + 3)
    && *((unsigned __int8 *)this + 472) == v65)
  {
    v20 = *((_DWORD *)this + 119) != DWORD1(v65);
    goto LABEL_32;
  }
LABEL_31:
  v20 = 1;
LABEL_32:
  v21 = *((unsigned __int8 *)this + 500);
  v22 = BYTE12(v66);
  v23 = v67[3];
  v24 = v68;
  v25 = v69;
  *((_OWORD *)v12 + 8) = v67[4];
  *((_OWORD *)v12 + 9) = v24;
  *((_OWORD *)v12 + 10) = v25;
  v26 = v67[1];
  *((_OWORD *)v12 + 4) = v67[0];
  *((_OWORD *)v12 + 5) = v26;
  *((_OWORD *)v12 + 6) = v67[2];
  *((_OWORD *)v12 + 7) = v23;
  v27 = v64;
  *(_OWORD *)v12 = v63;
  *((_OWORD *)v12 + 1) = v27;
  v28 = v66;
  *((_OWORD *)v12 + 2) = v65;
  *((_OWORD *)v12 + 3) = v28;
  if (v14)
  {
    webrtc::AudioProcessingImpl::InitializeEchoController(this, v15);
    if (!v18)
      goto LABEL_34;
  }
  else if (!v18)
  {
LABEL_34:
    if (v21 == v22)
      goto LABEL_35;
LABEL_51:
    webrtc::AudioProcessingImpl::InitializeTransientSuppressor(this);
    webrtc::AudioProcessingImpl::InitializeHighPassFilter((unint64_t)this, 0);
    if (v16)
      goto LABEL_37;
    goto LABEL_36;
  }
  webrtc::AudioProcessingImpl::InitializeNoiseSuppressor(this);
  if (v21 != v22)
    goto LABEL_51;
LABEL_35:
  webrtc::AudioProcessingImpl::InitializeHighPassFilter((unint64_t)this, 0);
  if (!v16)
LABEL_36:
    webrtc::AudioProcessingImpl::InitializeGainController1(this);
LABEL_37:
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vtrn2_s16(vrev32_s16(vmovn_s32(vcgezq_f32(*((float32x4_t *)this + 37)))), vmovn_s32(vcgtzq_f32(*((float32x4_t *)this + 37)))), 0xFuLL))) & 1) != 0&& (v29 = *((float *)this + 153), v29 >= 0.0)&& v29 < 50.0&& *((float *)this + 152) <= 0.0)
  {
    if (v21 != v22 || !v17)
      goto LABEL_47;
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc");
    *((_QWORD *)this + 73) = 0;
    *((_OWORD *)this + 37) = xmmword_208F050F0;
    *((_QWORD *)this + 76) = 3259498496;
    if (v21 != v22 || !v17)
    {
LABEL_47:
      webrtc::AudioProcessingImpl::InitializeGainController2(this);
      webrtc::AudioProcessingImpl::InitializeVoiceActivityDetector((uint64_t)this, v38, v39, v40, v41, v42, v43, v44);
      v46 = (pthread_mutex_t *)((char *)this + 376);
      v45 = v60;
      v47 = v59;
      if (!v19 && !v20)
        goto LABEL_67;
      goto LABEL_58;
    }
  }
  v46 = (pthread_mutex_t *)((char *)this + 376);
  v45 = v60;
  v47 = v59;
  if (!v19 && !v20)
    goto LABEL_67;
LABEL_58:
  if (*((_BYTE *)this + 452))
  {
    v49 = *((float *)this + 114);
    if (!*((_BYTE *)this + 460))
    {
LABEL_63:
      v50 = operator new();
      v51 = v50;
      v52 = *((unsigned __int8 *)this + 472);
      v53 = *((_DWORD *)this + 119);
      v54 = *((_DWORD *)this + 117);
      *(_BYTE *)v50 = v52;
      *(_DWORD *)(v50 + 4) = v53;
      v55 = (float)v53 * 0.0039216;
      if (!v52)
        v55 = 1.0;
      v56 = v49 * v55;
      *(float *)(v50 + 8) = v49;
      *(float *)(v50 + 12) = v56;
      *(float *)(v50 + 16) = v56;
      *(float *)(v50 + 20) = v56;
      *(_QWORD *)(v50 + 24) = 0xBF800000FFFFFFFFLL;
      *(_DWORD *)(v50 + 32) = v54;
      *(_DWORD *)(v50 + 36) = v54;
      *(_QWORD *)(v50 + 40) = 0xBF800000FFFFFFFFLL;
      v57 = *((_QWORD *)this + 92);
      *((_QWORD *)this + 92) = v51;
      if (v57)
        goto LABEL_66;
      goto LABEL_67;
    }
LABEL_62:
    v49 = v49 * *((float *)this + 116);
    goto LABEL_63;
  }
  v49 = 1.0;
  if (*((_BYTE *)this + 460))
    goto LABEL_62;
  v57 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v57)
LABEL_66:
    MEMORY[0x20BD0ADEC](v57, 0x1000C4025072006);
LABEL_67:
  if (v47)
    webrtc::AudioProcessingImpl::InitializeLocked((uint64_t)this, (webrtc::AudioProcessingImpl *)((char *)this + 744));
  pthread_mutex_unlock(v46);
  return pthread_mutex_unlock(v45);
}

uint64_t webrtc::AudioProcessingImpl::proc_sample_rate_hz(webrtc::AudioProcessingImpl *this)
{
  return *((unsigned int *)this + 272);
}

uint64_t webrtc::AudioProcessingImpl::proc_split_sample_rate_hz(webrtc::AudioProcessingImpl *this)
{
  return *((unsigned int *)this + 278);
}

uint64_t webrtc::AudioProcessingImpl::num_reverse_channels(webrtc::AudioProcessingImpl *this)
{
  return *((_QWORD *)this + 106);
}

uint64_t webrtc::AudioProcessingImpl::num_input_channels(webrtc::AudioProcessingImpl *this)
{
  return *((_QWORD *)this + 94);
}

uint64_t webrtc::AudioProcessingImpl::num_proc_channels(webrtc::AudioProcessingImpl *this)
{
  char v1;

  v1 = *((_BYTE *)this + 445);
  if (v1)
    v1 = *((_BYTE *)this + 865) != 0;
  if ((v1 & 1) != 0 || !*((_BYTE *)this + 1120))
    return (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 88))(this);
  else
    return 1;
}

uint64_t webrtc::AudioProcessingImpl::num_output_channels(webrtc::AudioProcessingImpl *this)
{
  return *((_QWORD *)this + 97);
}

uint64_t webrtc::AudioProcessingImpl::set_output_will_be_muted(webrtc::AudioProcessingImpl *this, int a2)
{
  pthread_mutex_t *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v4 = (pthread_mutex_t *)((char *)this + 376);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
  if (a2)
  {
    v5 = *((_BYTE *)this + 867) == 0;
    *((_BYTE *)this + 873) = v5;
    v6 = *((_QWORD *)this + 83);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v5 = 1;
    *((_BYTE *)this + 873) = 1;
    v6 = *((_QWORD *)this + 83);
    if (!v6)
      goto LABEL_17;
  }
  v7 = *(uint64_t **)(v6 + 64);
  v8 = *(_QWORD *)(v6 + 72) - (_QWORD)v7;
  if (v8)
  {
    v9 = v8 >> 3;
    if (v9 <= 1)
      v9 = 1;
    if ((v5 & 1) != 0)
    {
      do
      {
        v10 = *v7;
        if (*(unsigned __int8 *)(*v7 + 40) != v5)
        {
          *(_BYTE *)(v10 + 40) = v5;
          *(_BYTE *)(v10 + 41) = 1;
        }
        ++v7;
        --v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        if (*(unsigned __int8 *)(*v7 + 40) != v5)
          *(_BYTE *)(*v7 + 40) = v5;
        ++v7;
        --v9;
      }
      while (v9);
    }
  }
  *(_BYTE *)(v6 + 40) = v5;
LABEL_17:
  v11 = *((_QWORD *)this + 88);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
  v12 = *((_QWORD *)this + 90);
  if (v12)
    *(_BYTE *)(v12 + 80) = *((_BYTE *)this + 873);
  v13 = *((_QWORD *)this + 85);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 48);
    if (v14)
    {
      v15 = *((unsigned __int8 *)this + 873);
      v16 = *(uint64_t **)(v14 + 72);
      v17 = *(uint64_t **)(v14 + 80);
      if (v16 != v17)
      {
        if (*((_BYTE *)this + 873))
        {
          do
          {
            v18 = *v16;
            if (*(unsigned __int8 *)(*v16 + 16) != v15)
            {
              *(_BYTE *)(v18 + 16) = v15;
              *(_BYTE *)(v18 + 17) = 1;
            }
            ++v16;
          }
          while (v16 != v17);
        }
        else
        {
          do
          {
            if (*(_BYTE *)(*v16 + 16))
              *(_BYTE *)(*v16 + 16) = 0;
            ++v16;
          }
          while (v16 != v17);
        }
      }
      *(_BYTE *)(v14 + 20) = v15;
    }
  }
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::AudioProcessingImpl::SetRuntimeSetting(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, a2, a3);
}

void webrtc::AudioProcessingImpl::PostRuntimeSetting(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  if (a2 > 8)
    return;
  if (((1 << a2) & 0x18E) != 0)
  {
    v6 = *(_QWORD **)(a1 + 216);
    v7 = v6 + 3;
    v8 = atomic_load(v6 + 3);
    v9 = v6[4];
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6[5] - v9) >> 2);
    if (v8 == v10)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        return;
LABEL_9:
      rtc::webrtc_logging_impl::Log("\r\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc");
      return;
    }
    v22 = v6[1];
    if (v10 > v22)
    {
      v23 = v9 + 12 * v22;
      *(_QWORD *)v23 = a2;
      *(_DWORD *)(v23 + 8) = a3;
      do
        v24 = __ldxr(v7);
      while (__stlxr(v24 + 1, v7));
      goto LABEL_28;
    }
    goto LABEL_45;
  }
  if (((1 << a2) & 0x60) != 0)
  {
    v6 = *(_QWORD **)(a1 + 224);
    v18 = v6 + 3;
    v19 = atomic_load(v6 + 3);
    v20 = v6[4];
    v21 = 0xAAAAAAAAAAAAAAABLL * ((v6[5] - v20) >> 2);
    if (v19 == v21)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        return;
      goto LABEL_9;
    }
    v35 = v6[1];
    if (v21 > v35)
    {
      v36 = v20 + 12 * v35;
      *(_QWORD *)v36 = a2;
      *(_DWORD *)(v36 + 8) = a3;
      do
        v37 = __ldxr(v18);
      while (__stlxr(v37 + 1, v18));
LABEL_28:
      v38 = v6[1];
      if (v38 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[5] - v6[4]) >> 2))
        v39 = 0;
      else
        v39 = v38 + 1;
      v6[1] = v39;
      return;
    }
LABEL_45:
    __break(1u);
    return;
  }
  if ((_DWORD)a2 != 4)
    return;
  v25 = *(_QWORD **)(a1 + 216);
  v26 = v25 + 3;
  v27 = atomic_load(v25 + 3);
  v28 = v25[4];
  v29 = 0xAAAAAAAAAAAAAAABLL * ((v25[5] - v28) >> 2);
  if (v27 == v29)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc");
  }
  else
  {
    v30 = v25[1];
    if (v29 <= v30)
      goto LABEL_45;
    v31 = v28 + 12 * v30;
    *(_QWORD *)v31 = a2;
    *(_DWORD *)(v31 + 8) = a3;
    do
      v32 = __ldxr(v26);
    while (__stlxr(v32 + 1, v26));
    v33 = v25[1];
    if (v33 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25[5] - v25[4]) >> 2))
      v34 = 0;
    else
      v34 = v33 + 1;
    v25[1] = v34;
  }
  v47 = *(_QWORD **)(a1 + 224);
  v48 = v47 + 3;
  v49 = atomic_load(v47 + 3);
  v50 = v47[4];
  v51 = 0xAAAAAAAAAAAAAAABLL * ((v47[5] - v50) >> 2);
  if (v49 != v51)
  {
    v52 = v47[1];
    if (v51 > v52)
    {
      v53 = v50 + 12 * v52;
      *(_QWORD *)v53 = a2;
      *(_DWORD *)(v53 + 8) = a3;
      do
        v54 = __ldxr(v48);
      while (__stlxr(v54 + 1, v48));
      v55 = v47[1];
      if (v55 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47[5] - v47[4]) >> 2))
        v56 = 0;
      else
        v56 = v55 + 1;
      v47[1] = v56;
      return;
    }
    goto LABEL_45;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v57, v58, v59, v60, v61, v62, v63, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc");
}

uint64_t webrtc::AudioProcessingImpl::MaybeInitializeCapture(uint64_t a1, __int128 *a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int updated;
  uint64_t result;
  BOOL v12;
  BOOL v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v6 = (pthread_mutex_t *)(a1 + 376);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 376));
  v7 = *(_OWORD *)(a1 + 792);
  *(_OWORD *)&v19[16] = *(_OWORD *)(a1 + 776);
  v20 = v7;
  v8 = *(_OWORD *)(a1 + 824);
  v21 = *(_OWORD *)(a1 + 808);
  v22 = v8;
  v9 = *(_OWORD *)(a1 + 760);
  v18 = *(_OWORD *)(a1 + 744);
  *(_OWORD *)v19 = v9;
  updated = webrtc::AudioProcessingImpl::UpdateActiveSubmoduleStates((webrtc::AudioProcessingImpl *)a1);
  result = pthread_mutex_unlock(v6);
  if (*(_DWORD *)&v19[8] != *(_DWORD *)a3
    || (*(_QWORD *)&v19[16] == *(_QWORD *)(a3 + 8) ? (v12 = (_DWORD)v18 == *(_DWORD *)a2) : (v12 = 0),
        v12 ? (v13 = *((_QWORD *)&v18 + 1) == *((_QWORD *)a2 + 1)) : (v13 = 0),
        !v13 ? (v14 = 1) : (v14 = updated),
        v14 == 1))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 312));
    pthread_mutex_lock(v6);
    v15 = *(_OWORD *)(a1 + 824);
    v21 = *(_OWORD *)(a1 + 808);
    v22 = v15;
    v16 = *(_OWORD *)(a1 + 760);
    v17 = *(_OWORD *)(a1 + 792);
    *(_OWORD *)&v19[16] = *(_OWORD *)(a1 + 776);
    v20 = v17;
    v18 = *a2;
    *(_OWORD *)v19 = v16;
    *(_QWORD *)v19 = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v19[8] = *(_OWORD *)a3;
    *(_QWORD *)&v19[24] = *(_QWORD *)(a3 + 16);
    webrtc::AudioProcessingImpl::InitializeLocked(a1, &v18);
    pthread_mutex_unlock(v6);
    return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 312));
  }
  return result;
}

uint64_t webrtc::AudioProcessingImpl::ProcessStream(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t StatusReg;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  char v27;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
  if ((StatusReg & 0x1000000) == 0)
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg | 0x1000000);
  if ((_DWORD)v11)
  {
    if ((StatusReg & 0x1000000) == 0)
LABEL_5:
      _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
  }
  else
  {
    webrtc::AudioProcessingImpl::MaybeInitializeCapture(a1, (__int128 *)a3, a4);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 376));
    if (*(_QWORD *)(a1 + 240))
    {
      webrtc::AudioProcessingImpl::WriteAecDumpConfigMessage((webrtc::AudioProcessingImpl *)a1, 0);
      v13 = *(_QWORD *)(a1 + 240);
      v25 = a2;
      v26 = (unint64_t)vmovn_s64(*(int64x2_t *)(a1 + 752));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 24))(v13, &v25);
      v25 = (void *)*(unsigned int *)(a1 + 1116);
      LODWORD(v26) = *(_DWORD *)(a1 + 1064);
      BYTE4(v26) = *(_BYTE *)(a1 + 1068);
      v27 = *(_BYTE *)(a1 + 875);
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 240) + 56))(*(_QWORD *)(a1 + 240), &v25);
    }
    webrtc::AudioBuffer::CopyFrom(*(_QWORD *)(a1 + 880), (uint64_t)a2);
    v14 = *(_QWORD *)(a1 + 888);
    if (v14)
      webrtc::AudioBuffer::CopyFrom(v14, (uint64_t)a2);
    webrtc::AudioProcessingImpl::ProcessCaptureStreamLocked((webrtc::AudioProcessingImpl *)a1);
    v11 = v20;
    if (!(_DWORD)v20)
    {
      v21 = *(_QWORD **)(a1 + 888);
      if (!v21)
        v21 = *(_QWORD **)(a1 + 880);
      webrtc::AudioBuffer::CopyTo(v21, a1 + 768, (const void **)a5, v15, v16, v17, v18, v19);
      v22 = *(_QWORD *)(a1 + 240);
      if (v22)
      {
        v23 = *(_QWORD *)(a1 + 784);
        v24 = *(_QWORD *)(a1 + 776);
        v25 = a5;
        v26 = __PAIR64__(v23, v24);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 32))(v22, &v25);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 64))(*(_QWORD *)(a1 + 240));
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 376));
    if ((StatusReg & 0x1000000) == 0)
      goto LABEL_5;
  }
  return v11;
}

uint64_t webrtc::`anonymous namespace'::HandleUnsupportedAudioFormats(const void **a1, int a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  _BOOL4 v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  signed int v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const void *v19;
  void *v20;
  void *v22;

  v7 = a3;
  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(_DWORD *)a4;
  v11 = a2 >> 6 < 0x7D || a2 > 0x5DC00;
  if (a3)
    v12 = v11;
  else
    v12 = 3;
  if (a2 >= 0)
    v13 = v12;
  else
    v13 = 2;
  if ((v10 & 0x80000000) != 0)
  {
    v14 = 2;
  }
  else if (v9)
  {
    if (v10 >> 6 >= 0x7D)
    {
      v14 = v10 > 0x5DC00;
      if (!v13 && v10 <= 0x5DC00)
      {
        v16 = 0;
        if (v9 == 1 || v9 == a3)
          return v16;
        v16 = 4294967287;
        if (v10 == a2)
          goto LABEL_23;
        goto LABEL_32;
      }
    }
    else
    {
      v14 = 1;
    }
  }
  else
  {
    v14 = 3;
  }
  v15 = v13 - 1;
  if (v13 - 1 >= 3 && (v15 = v14 - 1, v14 - 1 > 2))
  {
    v16 = 4294967287;
    if (v14 > 1)
      return v16;
  }
  else
  {
    v16 = dword_208F0522C[v15];
    if (v14 > 1)
      return v16;
  }
  if (v13 <= 1 && v10 == a2)
  {
LABEL_23:
    if (v9 == a3)
    {
      if (v9)
      {
        do
        {
          v18 = *a5++;
          v17 = v18;
          v19 = *a1++;
          memcpy(v17, v19, 4 * *(_QWORD *)(a4 + 16));
          --v7;
        }
        while (v7);
      }
    }
    else
    {
      for (; v9; --v9)
      {
        v22 = *a5++;
        memcpy(v22, *a1, 4 * *(_QWORD *)(a4 + 16));
      }
    }
    return v16;
  }
LABEL_32:
  while (v9)
  {
    v20 = *a5++;
    bzero(v20, 4 * *(_QWORD *)(a4 + 16));
    --v9;
  }
  return v16;
}

void webrtc::AudioProcessingImpl::ProcessCaptureStreamLocked(webrtc::AudioProcessingImpl *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  int8x16_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char *v16;
  unsigned int v18;
  unint64_t StatusReg;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  const webrtc::AudioBuffer *v64;
  uint64_t v65;
  float32x4_t *v66;
  __int32 v67;
  char v68;
  unsigned __int8 *v69;
  int v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float *v86;
  float v87;
  float v88;
  float *v89;
  uint64_t v90;
  float v91;
  float v92;
  void (***v93)(_QWORD);
  uint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  int v100;
  uint64_t i;
  int v102;
  BOOL v103;
  float32x4_t *v104;
  uint64_t v105;
  unint64_t v106;
  float *v107;
  unint64_t v108;
  uint64_t v109;
  float32x4_t *v110;
  uint64_t v111;
  int8x16_t v112;
  int8x16_t v113;
  float *v114;
  float v115;
  float v116;
  int v117;
  unint64_t v118;
  float v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v126;
  uint64_t v128;
  int v129;
  uint64_t v130;
  float v131;
  float v132;
  int v133;
  BOOL v134;
  int v135;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float *v156;
  float v157;
  float v158;
  float *v159;
  uint64_t v160;
  float v161;
  float v162;
  uint64_t v163;
  webrtc::NoiseSuppressor *v164;
  webrtc::EchoControlMobileImpl *v165;
  webrtc::NoiseSuppressor *v166;
  int8x16_t v167;
  __int16 v168;
  double v169;
  double v170;
  double v171;
  int8x16_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  webrtc::NoiseSuppressor *v176;
  webrtc::NoiseSuppressor *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  webrtc::GainControlImpl *v184;
  int v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char **v191;
  uint64_t v192;
  int v193;
  BOOL v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  float v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  float v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t v208;
  float v209;
  uint64_t v210;
  uint64_t v211;
  float v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  float32x4_t *v216;
  uint64_t v217;
  unint64_t v218;
  float v219;
  float *v220;
  unint64_t v221;
  uint64_t v222;
  float32x4_t *v223;
  int8x16_t v224;
  int8x16_t v225;
  uint64_t v226;
  int8x16_t v227;
  int8x16_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float *v231;
  float v232;
  float v233;
  unint64_t v234;
  float v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  float v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v243;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  _OWORD *v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  _BYTE *v262;
  uint64_t v263;
  float32x4_t *v264;
  uint64_t v265;
  int v266;
  int v267;
  float v268;
  float v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  void **v273;
  size_t v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  _BYTE v283[29];
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  _BYTE v289[32];

  webrtc::AudioProcessingImpl::EmptyQueuedRenderAudioLocked((uint64_t)this);
  *(_QWORD *)&v284 = 0;
  v16 = (char *)this + 128;
  if (!atomic_load((unint64_t *)this + 16))
    goto LABEL_92;
  v18 = 0;
  StatusReg = 998277249;
  v1 = 1;
  while (2)
  {
    v21 = v18;
    v22 = *((_QWORD *)this + 15);
    v23 = *((_QWORD *)this + 17);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 18) - v23) >> 2) <= v22)
      goto LABEL_418;
    v24 = v23 + 12 * v22;
    v25 = DWORD2(v284);
    v26 = v284;
    v27 = *(_DWORD *)(v24 + 8);
    *(_QWORD *)&v284 = *(_QWORD *)v24;
    DWORD2(v284) = v27;
    *(_QWORD *)v24 = v26;
    *(_DWORD *)(v24 + 8) = v25;
    do
      v28 = __ldxr((unint64_t *)v16);
    while (__stlxr(v28 - 1, (unint64_t *)v16));
    v29 = *((_QWORD *)this + 15);
    if (v29 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 18) - *((_QWORD *)this + 17)) >> 2))
      v30 = 0;
    else
      v30 = v29 + 1;
    *((_QWORD *)this + 15) = v30;
    v31 = *((_QWORD *)this + 30);
    if (v31)
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v31 + 88))(v31, &v284);
    switch((int)v284)
    {
      case 1:
        if (*((_BYTE *)this + 452))
        {
          LODWORD(v9) = DWORD1(v284);
          *((_DWORD *)this + 114) = DWORD1(v284);
          if (!*((_BYTE *)this + 460))
            goto LABEL_34;
          v32 = *((float *)this + 116);
        }
        else
        {
          if (!*((_BYTE *)this + 460))
            goto LABEL_4;
          v32 = *((float *)&v284 + 1);
          *((_DWORD *)this + 116) = DWORD1(v284);
          LODWORD(v9) = 1.0;
        }
        *(float *)&v9 = v32 * *(float *)&v9;
LABEL_34:
        v38 = *((_QWORD *)this + 92);
        v11.i32[0] = 998277249;
        v39 = (float)*(int *)(v38 + 4) * 0.0039216;
        if (!*(_BYTE *)v38)
          v39 = 1.0;
        *(float *)v10.i32 = *(float *)&v9 * v39;
        *(_DWORD *)(v38 + 8) = LODWORD(v9);
        *(_DWORD *)(v38 + 12) = v10.i32[0];
        *(_DWORD *)(v38 + 20) = v10.i32[0];
        goto LABEL_4;
      case 2:
        if (!*((_QWORD *)this + 83) && (!*((_QWORD *)this + 85) || !*((_BYTE *)this + 585)))
        {
          *(float *)&v9 = *((float *)&v284 + 1) + 0.5;
          *((_DWORD *)this + 129) = (int)(float)(*((float *)&v284 + 1) + 0.5);
          v33 = *((_QWORD *)this + 84);
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 48))(v33);
        }
        goto LABEL_4;
      case 3:
        v34 = *((_QWORD *)this + 85);
        if (v34)
        {
          v35 = *((float *)&v284 + 1);
          *((_DWORD *)this + 153) = DWORD1(v284);
          *(float *)&v9 = __exp10f(v35 / 20.0);
          v10.i32[0] = *(_DWORD *)(v34 + 12);
          if (*(float *)v10.i32 != *(float *)&v9)
            *(_DWORD *)(v34 + 168) = 0;
          *(_DWORD *)(v34 + 12) = LODWORD(v9);
        }
        goto LABEL_4;
      case 4:
        *((_DWORD *)this + 235) = DWORD1(v284);
        goto LABEL_4;
      case 7:
        if (*((_BYTE *)this + 460))
        {
          LODWORD(v9) = DWORD1(v284);
          *((_DWORD *)this + 117) = DWORD1(v284);
          *(_DWORD *)(*((_QWORD *)this + 92) + 36) = LODWORD(v9);
        }
        goto LABEL_4;
      case 8:
        if (BYTE4(v284))
        {
          v36 = 1;
          *((_BYTE *)this + 873) = 1;
          v37 = *((_QWORD *)this + 83);
          if (!v37)
            goto LABEL_50;
        }
        else
        {
          v36 = *((_BYTE *)this + 867) == 0;
          *((_BYTE *)this + 873) = v36;
          v37 = *((_QWORD *)this + 83);
          if (!v37)
            goto LABEL_50;
        }
        v40 = *(uint64_t **)(v37 + 64);
        v41 = *(_QWORD *)(v37 + 72) - (_QWORD)v40;
        if (v41)
        {
          v42 = v41 >> 3;
          if (v42 <= 1)
            v42 = 1;
          if ((v36 & 1) != 0)
          {
            do
            {
              v43 = *v40;
              if (*(unsigned __int8 *)(*v40 + 40) != v36)
              {
                *(_BYTE *)(v43 + 40) = v36;
                *(_BYTE *)(v43 + 41) = 1;
              }
              ++v40;
              --v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              if (*(unsigned __int8 *)(*v40 + 40) != v36)
                *(_BYTE *)(*v40 + 40) = v36;
              ++v40;
              --v42;
            }
            while (v42);
          }
        }
        *(_BYTE *)(v37 + 40) = v36;
LABEL_50:
        v44 = *((_QWORD *)this + 88);
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44);
        v45 = *((_QWORD *)this + 90);
        if (v45)
          *(_BYTE *)(v45 + 80) = *((_BYTE *)this + 873);
        v46 = *((_QWORD *)this + 85);
        if (v46)
        {
          v47 = *(_QWORD *)(v46 + 48);
          if (v47)
          {
            v48 = *((unsigned __int8 *)this + 873);
            v49 = *(uint64_t **)(v47 + 72);
            v50 = *(uint64_t **)(v47 + 80);
            if (v49 != v50)
            {
              if (*((_BYTE *)this + 873))
              {
                do
                {
                  v51 = *v49;
                  if (*(unsigned __int8 *)(*v49 + 16) != v48)
                  {
                    *(_BYTE *)(v51 + 16) = v48;
                    *(_BYTE *)(v51 + 17) = 1;
                  }
                  ++v49;
                }
                while (v49 != v50);
              }
              else
              {
                do
                {
                  if (*(_BYTE *)(*v49 + 16))
                    *(_BYTE *)(*v49 + 16) = 0;
                  ++v49;
                }
                while (v49 != v50);
              }
            }
            *(_BYTE *)(v47 + 20) = v48;
          }
        }
LABEL_4:
        v18 = v21 + 1;
        if (atomic_load((unint64_t *)v16))
          continue;
        if (v21 >= 0x63)
        {
          *((_BYTE *)this + 873) = 1;
          v52 = *((_QWORD *)this + 83);
          if (v52)
          {
            v53 = *(_QWORD *)(v52 + 64);
            v54 = *(_QWORD *)(v52 + 72) - v53;
            if (v54)
            {
              v55 = v54 >> 3;
              if (v55 <= 1)
                v55 = 1;
              do
              {
                if (!*(_BYTE *)(*(_QWORD *)v53 + 40))
                  *(_WORD *)(*(_QWORD *)v53 + 40) = 257;
                v53 += 8;
                --v55;
              }
              while (v55);
            }
            *(_BYTE *)(v52 + 40) = 1;
          }
          v56 = *((_QWORD *)this + 88);
          if (v56)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 48))(v56, 1);
          v57 = *((_QWORD *)this + 90);
          if (v57)
            *(_BYTE *)(v57 + 80) = *((_BYTE *)this + 873);
          v58 = *((_QWORD *)this + 85);
          if (v58)
          {
            v59 = *(_QWORD *)(v58 + 48);
            if (v59)
            {
              v60 = *((unsigned __int8 *)this + 873);
              v61 = *(uint64_t **)(v59 + 72);
              v62 = *(uint64_t **)(v59 + 80);
              if (v61 != v62)
              {
                if (*((_BYTE *)this + 873))
                {
                  do
                  {
                    v63 = *v61;
                    if (*(unsigned __int8 *)(*v61 + 16) != v60)
                    {
                      *(_BYTE *)(v63 + 16) = v60;
                      *(_BYTE *)(v63 + 17) = 1;
                    }
                    ++v61;
                  }
                  while (v61 != v62);
                }
                else
                {
                  do
                  {
                    if (*(_BYTE *)(*v61 + 16))
                      *(_BYTE *)(*v61 + 16) = 0;
                    ++v61;
                  }
                  while (v61 != v62);
                }
              }
              *(_BYTE *)(v59 + 20) = v60;
            }
          }
        }
LABEL_92:
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
        if ((StatusReg & 0x1000000) == 0)
          _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg | 0x1000000);
        v16 = (char *)*((_QWORD *)this + 110);
        v64 = (const webrtc::AudioBuffer *)*((_QWORD *)this + 112);
        v65 = *((_QWORD *)this + 87);
        if (v65)
        {
          if (*((_BYTE *)this + 481))
          {
            if (!*((_BYTE *)this + 866))
            {
              v77 = *((_QWORD *)v16 + 7);
              if (v77)
              {
                v78 = 0;
                v80 = v65 + 8;
                v79 = *(_QWORD *)(v65 + 8);
                v81 = (*(_QWORD *)(v80 + 8) - v79) >> 3;
                do
                {
                  if (v78 == v81)
                    goto LABEL_418;
                  v82 = *(uint64_t **)(v79 + 8 * v78);
                  v83 = *v82;
                  v84 = v82[1];
                  if (v83 != v84)
                  {
                    v85 = *((_QWORD *)v16 + 3);
                    v86 = *(float **)(*(_QWORD *)(*((_QWORD *)v16 + 10) + 8) + 8 * v78);
                    if (v85)
                    {
                      do
                      {
                        LODWORD(v9) = *(_DWORD *)v83;
                        v10.i32[0] = *(_DWORD *)(v83 + 4);
                        v15.i32[0] = *(_DWORD *)(v83 + 28);
                        v11.i32[0] = *(_DWORD *)(v83 + 32);
                        v87 = *(float *)(v83 + 20);
                        v88 = *(float *)(v83 + 24);
                        v12.i32[0] = *(_DWORD *)(v83 + 8);
                        v13.f32[0] = -*(float *)(v83 + 12);
                        *(float *)v14.i32 = -*(float *)(v83 + 16);
                        v89 = v86;
                        v90 = v85;
                        do
                        {
                          v91 = v87;
                          v92 = *(float *)v11.i32;
                          v11.i32[0] = v15.i32[0];
                          v87 = *v89;
                          *(float *)v15.i32 = (float)((float)((float)((float)(*(float *)v10.i32 * v91)
                                                                    + (float)(*(float *)&v9 * *v89))
                                                            + (float)(v12.f32[0] * v88))
                                                    + (float)(v13.f32[0] * *(float *)v15.i32))
                                            + (float)(*(float *)v14.i32 * v92);
                          *v89++ = *(float *)v15.i32;
                          v88 = v91;
                          --v90;
                        }
                        while (v90);
                        *(float *)(v83 + 20) = v87;
                        *(float *)(v83 + 24) = v91;
                        *(_DWORD *)(v83 + 28) = v15.i32[0];
                        *(_DWORD *)(v83 + 32) = v11.i32[0];
                        v83 += 36;
                      }
                      while (v83 != v84);
                    }
                  }
                  ++v78;
                }
                while (v78 != v77);
              }
            }
          }
        }
        v1 = (uint64_t)this + 1064;
        v66 = (float32x4_t *)*((_QWORD *)this + 92);
        if (v66)
        {
          if (*((_BYTE *)this + 472))
          {
            v67 = v66->i32[1];
            v68 = *((_BYTE *)this + 1068);
            if (v68)
              v68 = *(_DWORD *)v1 != v67;
            *((_BYTE *)this + 1072) = v68;
            *((_DWORD *)this + 266) = v67;
            *((_BYTE *)this + 1068) = 1;
            if (*((_BYTE *)this + 1080))
              *((_BYTE *)this + 1080) = 0;
            v69 = (unsigned __int8 *)*((_QWORD *)this + 83);
            if (v69)
            {
              v70 = *v69;
              if (!*v69)
                *((_DWORD *)v69 + 9) = v67;
              v71 = (char *)*((_QWORD *)v69 + 8);
              v72 = (char *)*((_QWORD *)v69 + 9);
              v73 = v72 - v71;
              if (v72 == v71)
                goto LABEL_418;
              v74 = v73 >> 3;
              if ((unint64_t)(v73 >> 3) <= 1)
                v75 = 1;
              else
                v75 = v73 >> 3;
              if (v75 < 2)
              {
                v76 = 0;
                goto LABEL_127;
              }
              v76 = v75 & 0xFFFFFFFFFFFFFFFELL;
              v94 = (uint64_t *)(v71 + 8);
              v95 = v75 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v96 = *v94;
                *(_DWORD *)(*(v94 - 1) + 44) = v67;
                *(_DWORD *)(v96 + 44) = v67;
                v94 += 2;
                v95 -= 2;
              }
              while (v95);
              if (v75 != v76)
              {
LABEL_127:
                v97 = v75 - v76;
                v98 = (uint64_t *)&v71[8 * v76];
                do
                {
                  v99 = *v98++;
                  *(_DWORD *)(v99 + 44) = v67;
                  --v97;
                }
                while (v97);
              }
              v100 = *(_DWORD *)(*(_QWORD *)v71 + 44);
              *((_DWORD *)v69 + 11) = 0;
              if ((unint64_t)v73 >= 9)
              {
                if (v74 <= 2)
                  v74 = 2;
                for (i = 1; i != v74; ++i)
                {
                  v102 = *(_DWORD *)(*(_QWORD *)&v71[8 * i] + 44);
                  if (v102 < v100)
                  {
                    *((_DWORD *)v69 + 11) = i;
                    v100 = v102;
                  }
                }
              }
              if (v69[8])
                v103 = v100 <= 0;
              else
                v103 = 1;
              if (!v103 && v100 <= *((_DWORD *)v69 + 1))
                v100 = *((_DWORD *)v69 + 1);
              if (v70)
                *((_DWORD *)v69 + 9) = v100;
            }
            else
            {
              v93 = (void (***)(_QWORD))*((_QWORD *)this + 84);
              if (v93)
              {
                (**v93)(v93);
                v66 = (float32x4_t *)*((_QWORD *)this + 92);
              }
            }
          }
          webrtc::AudioSamplesScaler::Process(v66 + 1, (webrtc::AudioBuffer *)v16);
        }
        v104 = **(float32x4_t ***)(*((_QWORD *)v16 + 10) + 8);
        v105 = *((_QWORD *)this + 138);
        if (v105)
        {
          if (*((_BYTE *)this + 1568) && *((_QWORD *)this + 195) == v105)
          {
            v106 = (v105 - 1) & 0x3FFFFFFFFFFFFFFFLL;
            if (v106 < 7)
              goto LABEL_149;
LABEL_151:
            v108 = v106 + 1;
            v109 = (v106 + 1) & 0x7FFFFFFFFFFFFFF8;
            v107 = &v104->f32[v109];
            v110 = v104 + 1;
            LODWORD(v9) = 0;
            v10.i64[0] = 0xC7000000C7000000;
            v10.i64[1] = 0xC7000000C7000000;
            v11 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
            v111 = v109;
            do
            {
              v112 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v10, v110[-1]), v10, (int8x16_t)v110[-1]);
              v113 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v10, *v110), v10, *(int8x16_t *)v110);
              v14 = (int8x16_t)vcgtq_f32((float32x4_t)v112, (float32x4_t)v11);
              v15 = (int8x16_t)vcgtq_f32((float32x4_t)v113, (float32x4_t)v11);
              *(int16x4_t *)v112.i8 = vmovn_s32(vcvtq_s32_f32((float32x4_t)vbslq_s8(v14, v11, v112)));
              *(int16x4_t *)v113.i8 = vmovn_s32(vcvtq_s32_f32((float32x4_t)vbslq_s8(v15, v11, v113)));
              v12 = vcvtq_f32_s32(vmull_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v112.i8));
              v14.i32[0] = v12.i32[3];
              v15.i32[0] = v12.i32[2];
              v13 = vcvtq_f32_s32(vmull_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v113.i8));
              *(float *)&v9 = (float)((float)((float)((float)((float)((float)((float)(*(float *)&v9 + v12.f32[0])
                                                                            + v12.f32[1])
                                                                    + v12.f32[2])
                                                            + v12.f32[3])
                                                    + v13.f32[0])
                                            + v13.f32[1])
                                    + v13.f32[2])
                            + v13.f32[3];
              v110 += 2;
              v111 -= 8;
            }
            while (v111);
            if (v108 != v109)
              goto LABEL_154;
          }
          else
          {
            *((_DWORD *)this + 384) = 0;
            *((_QWORD *)this + 193) = 0;
            *((_DWORD *)this + 388) = 0;
            *((_QWORD *)this + 195) = v105;
            *((_BYTE *)this + 1568) = 1;
            v106 = (v105 - 1) & 0x3FFFFFFFFFFFFFFFLL;
            if (v106 >= 7)
              goto LABEL_151;
LABEL_149:
            LODWORD(v9) = 0;
            v107 = (float *)v104;
LABEL_154:
            v114 = &v104->f32[v105];
            v10.i32[1] = -956301312;
            do
            {
              v115 = *v107++;
              v116 = v115;
              if (v115 < -32768.0)
                v116 = -32768.0;
              v12.i32[0] = 1191181824;
              if (v116 > 32767.0)
                v116 = 32767.0;
              *(float *)v11.i32 = (float)((int)v116 * (int)v116);
              *(float *)&v9 = *(float *)&v9 + *(float *)v11.i32;
            }
            while (v107 != v114);
          }
          *((float *)this + 384) = *(float *)&v9 + *((float *)this + 384);
          *((_QWORD *)this + 193) += v105;
          v10.i32[0] = *((_DWORD *)this + 388);
          if (*(float *)v10.i32 >= *(float *)&v9)
            LODWORD(v9) = *((_DWORD *)this + 388);
          *((_DWORD *)this + 388) = LODWORD(v9);
        }
        v117 = *((_DWORD *)this + 404);
        *((_DWORD *)this + 404) = v117 + 1;
        if (v117 < 999)
          goto LABEL_186;
        *((_DWORD *)this + 404) = 0;
        v118 = *((_QWORD *)this + 193);
        if (v118)
        {
          v119 = *((float *)this + 384) / (float)v118;
          if (v119 <= 0.00021424)
            v120 = 127;
          else
            v120 = (int)(float)((float)(log10f(v119 * 9.3132e-10) * -10.0) + 0.5);
          if (!*((_BYTE *)this + 1568))
            goto LABEL_418;
          *(float *)&v9 = *((float *)this + 388) / (float)*((unint64_t *)this + 195);
          v10.i32[0] = 962635141;
          if (*(float *)&v9 <= 0.00021424)
          {
            v124 = 0x7F00000000;
          }
          else
          {
            *(float *)&v9 = log10f(*(float *)&v9 * 9.3132e-10);
            v10.i32[0] = 0.5;
            *(float *)&v9 = (float)(*(float *)&v9 * -10.0) + 0.5;
            v124 = (unint64_t)(int)*(float *)&v9 << 32;
          }
          *((_DWORD *)this + 384) = 0;
          *((_QWORD *)this + 193) = 0;
          v122 = v124 | v120;
          *((_DWORD *)this + 388) = 0;
          goto LABEL_176;
        }
        v121 = *((unsigned __int8 *)this + 1568);
        *((_DWORD *)this + 384) = 0;
        *((_QWORD *)this + 193) = 0;
        v122 = 0x7F0000007FLL;
        *((_DWORD *)this + 388) = 0;
        if (v121)
        {
LABEL_176:
          *((_BYTE *)this + 1568) = 0;
          v123 = atomic_load(&_MergedGlobals_4);
          if (!v123)
            goto LABEL_179;
          goto LABEL_177;
        }
        v123 = atomic_load(&_MergedGlobals_4);
        if (v123)
        {
LABEL_177:
          webrtc::metrics::HistogramAdd(v123, v122);
          goto LABEL_181;
        }
LABEL_179:
        while (!__ldaxr(&_MergedGlobals_4))
        {
          if (!__stlxr(0, &_MergedGlobals_4))
            goto LABEL_181;
        }
        __clrex();
LABEL_181:
        v126 = atomic_load(&qword_253EA54E8);
        if (v126)
        {
          webrtc::metrics::HistogramAdd(v126, SHIDWORD(v122));
        }
        else
        {
          while (!__ldaxr(&qword_253EA54E8))
          {
            if (!__stlxr(0, &qword_253EA54E8))
              goto LABEL_186;
          }
          __clrex();
        }
LABEL_186:
        if (*((_BYTE *)this + 1068))
          webrtc::InputVolumeStatsReporter::UpdateStatistics((uint64_t)this + 1624, *((_DWORD *)this + 266));
        v128 = *((_QWORD *)this + 88);
        if (v128)
        {
          v129 = *((unsigned __int8 *)this + 1072);
          v130 = *((_QWORD *)this + 92);
          if (v130)
          {
            v131 = *(float *)(v130 + 12);
            if (*((_BYTE *)this + 1072))
            {
              v129 = 1;
            }
            else
            {
              v132 = *((float *)this + 234);
              v129 = v132 != v131 && v132 >= 0.0;
            }
            *((float *)this + 234) = v131;
          }
          if (v129)
          {
            v133 = *((_DWORD *)this + 235);
            v134 = 1;
          }
          else
          {
            v135 = *((_DWORD *)this + 236);
            v133 = *((_DWORD *)this + 235);
            v134 = v135 >= 0 && v135 != v133;
          }
          *((_BYTE *)this + 932) = v134;
          *((_DWORD *)this + 236) = v133;
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v128 + 8))(v128, v16);
        }
        v137 = *((_QWORD *)this + 83);
        if (v137)
          webrtc::AgcManagerDirect::AnalyzePreProcess(v137, (const webrtc::AudioBuffer *)v16);
        v138 = *((_QWORD *)this + 85);
        if (v138 && *((_BYTE *)this + 585) && *((_BYTE *)this + 1068))
        {
          v139 = *(_DWORD *)v1;
          if (*(_BYTE *)(v138 + 2208))
            *(_BYTE *)(v138 + 2208) = 0;
          v140 = *(_QWORD *)(v138 + 48);
          if (v140)
            webrtc::InputVolumeController::AnalyzeInputAudio(v140, v139, (const webrtc::AudioBuffer *)v16);
        }
        if (*((_BYTE *)this + 620)
          || *((_BYTE *)this + 621)
          || *((_BYTE *)this + 622)
          || *((_BYTE *)this + 623)
          || *((_BYTE *)this + 627))
        {
          v141 = *((_DWORD *)this + 272);
          if (v141 == 48000 || v141 == 32000)
            webrtc::SplittingFilter::Analysis(*((_QWORD *)v16 + 12), *((_QWORD *)v16 + 10), *((_QWORD **)v16 + 11));
        }
        v142 = *((_BYTE *)this + 445);
        if (v142)
          v142 = *((_BYTE *)this + 865) != 0;
        if ((v142 & 1) == 0)
        {
          if (*((_QWORD *)this + 88))
          {
            *((_QWORD *)v16 + 7) = 1;
            *(_QWORD *)(*((_QWORD *)v16 + 10) + 48) = 1;
            v143 = *((_QWORD *)v16 + 11);
            if (v143)
              *(_QWORD *)(v143 + 48) = 1;
          }
        }
        v144 = *((_QWORD *)this + 87);
        if (v144 && (!*((_BYTE *)this + 481) || *((_BYTE *)this + 866)))
        {
          v145 = *((_QWORD *)v16 + 7);
          if (v145)
          {
            v146 = 0;
            v147 = *((_QWORD *)v16 + 11);
            v149 = v144 + 8;
            v148 = *(_QWORD *)(v144 + 8);
            v150 = (*(_QWORD *)(v149 + 8) - v148) >> 3;
            do
            {
              v151 = v147;
              if (!v147)
                v151 = *((_QWORD *)v16 + 10);
              if (v146 == v150)
                goto LABEL_418;
              v152 = *(uint64_t **)(v148 + 8 * v146);
              v153 = *v152;
              v154 = v152[1];
              if (v153 != v154)
              {
                v155 = *((_QWORD *)v16 + 9);
                v156 = *(float **)(*(_QWORD *)(v151 + 16) + 8 * *(_QWORD *)(v151 + 56) * v146);
                if (v155)
                {
                  do
                  {
                    LODWORD(v9) = *(_DWORD *)v153;
                    v10.i32[0] = *(_DWORD *)(v153 + 4);
                    v15.i32[0] = *(_DWORD *)(v153 + 28);
                    v11.i32[0] = *(_DWORD *)(v153 + 32);
                    v157 = *(float *)(v153 + 20);
                    v158 = *(float *)(v153 + 24);
                    v12.i32[0] = *(_DWORD *)(v153 + 8);
                    v13.f32[0] = -*(float *)(v153 + 12);
                    *(float *)v14.i32 = -*(float *)(v153 + 16);
                    v159 = v156;
                    v160 = v155;
                    do
                    {
                      v161 = v157;
                      v162 = *(float *)v11.i32;
                      v11.i32[0] = v15.i32[0];
                      v157 = *v159;
                      *(float *)v15.i32 = (float)((float)((float)((float)(*(float *)v10.i32 * v161)
                                                                + (float)(*(float *)&v9 * *v159))
                                                        + (float)(v12.f32[0] * v158))
                                                + (float)(v13.f32[0] * *(float *)v15.i32))
                                        + (float)(*(float *)v14.i32 * v162);
                      *v159++ = *(float *)v15.i32;
                      v158 = v161;
                      --v160;
                    }
                    while (v160);
                    *(float *)(v153 + 20) = v157;
                    *(float *)(v153 + 24) = v161;
                    *(_DWORD *)(v153 + 28) = v15.i32[0];
                    *(_DWORD *)(v153 + 32) = v11.i32[0];
                    v153 += 36;
                  }
                  while (v153 != v154);
                }
              }
              ++v146;
            }
            while (v146 != v145);
          }
        }
        v163 = *((_QWORD *)this + 84);
        if (v163
          && webrtc::GainControlImpl::AnalyzeCaptureAudio(v163, (const webrtc::AudioBuffer *)v16, v9, v10, *(double *)v11.i64, *(double *)v12.i64, *(double *)v13.i64, *(double *)v14.i64, v15))
        {
          goto LABEL_314;
        }
        if (!*((_BYTE *)this + 496) || !v64 || *((_QWORD *)this + 89))
        {
          v164 = (webrtc::NoiseSuppressor *)*((_QWORD *)this + 90);
          if (v164)
            webrtc::NoiseSuppressor::Analyze(v164, (const webrtc::AudioBuffer *)v16);
        }
        v165 = (webrtc::EchoControlMobileImpl *)*((_QWORD *)this + 89);
        if (!v165)
        {
          if (*((_QWORD *)this + 88))
          {
            (*(void (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 200))(this);
            if (*((_BYTE *)this + 872))
            {
              v174 = *((_QWORD *)this + 88);
              v175 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 200))(this);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v174 + 40))(v174, v175);
            }
            (*(void (**)(_QWORD, char *, const webrtc::AudioBuffer *, _QWORD))(**((_QWORD **)this + 88) + 24))(*((_QWORD *)this + 88), v16, v64, *((unsigned __int8 *)this + 932));
          }
          if (*((_BYTE *)this + 496))
          {
            if (v64)
            {
              v176 = (webrtc::NoiseSuppressor *)*((_QWORD *)this + 90);
              if (v176)
                webrtc::NoiseSuppressor::Analyze(v176, v64);
            }
          }
          v177 = (webrtc::NoiseSuppressor *)*((_QWORD *)this + 90);
          if (v177)
            webrtc::NoiseSuppressor::Process(v177, (webrtc::AudioBuffer *)v16);
          goto LABEL_266;
        }
        if (!*((_BYTE *)this + 872))
          goto LABEL_314;
        v166 = (webrtc::NoiseSuppressor *)*((_QWORD *)this + 90);
        if (v166)
        {
          webrtc::NoiseSuppressor::Process(v166, (webrtc::AudioBuffer *)v16);
          v165 = (webrtc::EchoControlMobileImpl *)*((_QWORD *)this + 89);
        }
        *(double *)v167.i64 = (*(double (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 200))(this);
        webrtc::EchoControlMobileImpl::ProcessCaptureAudio(v165, (webrtc::AudioBuffer *)v16, v168, v167, v169, v170, v171, v172);
        if (v173)
          goto LABEL_314;
LABEL_266:
        v178 = *((_QWORD *)this + 83);
        if (!v178)
          goto LABEL_271;
        webrtc::AgcManagerDirect::Process(v178, (uint64_t)v16);
        v179 = *((_QWORD *)this + 83);
        v180 = *(int *)(v179 + 44);
        v182 = v179 + 88;
        v181 = *(_QWORD *)(v179 + 88);
        if (v180 >= (*(_QWORD *)(v182 + 8) - v181) >> 3)
          goto LABEL_418;
        if ((*(_QWORD *)(v181 + 8 * v180) & 0xFF00000000) == 0)
        {
LABEL_271:
          v184 = (webrtc::GainControlImpl *)*((_QWORD *)this + 84);
          if (!v184
            || !webrtc::GainControlImpl::ProcessCaptureAudio(v184, (webrtc::AudioBuffer *)v16, 0, v9, v10, *(double *)v11.i64, *(double *)v12.i64, *(double *)v13.i64, *(double *)v14.i64, v15))
          {
            goto LABEL_273;
          }
LABEL_314:
          if ((StatusReg & 0x1000000) != 0)
            return;
          goto LABEL_315;
        }
        v183 = *((_QWORD *)this + 84);
        if (v183)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v183 + 48))(v183);
          goto LABEL_271;
        }
LABEL_273:
        if (*((_BYTE *)this + 620)
          || *((_BYTE *)this + 621)
          || *((_BYTE *)this + 622)
          || *((_BYTE *)this + 623)
          || *((_BYTE *)this + 627))
        {
          v185 = *((_DWORD *)this + 272);
          if (v185 == 48000 || v185 == 32000)
            webrtc::SplittingFilter::Synthesis(*((_QWORD *)v16 + 12), *((_QWORD **)v16 + 11), *((_QWORD **)v16 + 10));
        }
        if (*((_BYTE *)this + 873))
        {
          if (*((_QWORD *)this + 111))
          {
            v186 = *((_QWORD *)this + 88);
            if (v186)
              LOBYTE(v186) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v186 + 56))(v186);
            if (*((_BYTE *)this + 620) || *((_BYTE *)this + 621) || *((_BYTE *)this + 622) || *((_BYTE *)this + 623))
              goto LABEL_292;
            v187 = v186 ^ 1;
            if (!*((_BYTE *)this + 627))
              v187 = 1;
            if ((v187 & 1) == 0)
LABEL_292:
              webrtc::AudioBuffer::CopyTo((uint64_t *)v16, *((webrtc::AudioBuffer **)this + 111), v3, v4, v5, v6, v7, v8);
            v16 = (char *)*((_QWORD *)this + 111);
          }
          v188 = *((_QWORD *)this + 79);
          if (v188)
          {
            if (*((_QWORD *)v16 + 3))
              v189 = **(_QWORD **)(*((_QWORD *)v16 + 10) + 8);
            else
              v189 = 0;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v188 + 48))(v188, v189);
          }
          v190 = *((_QWORD *)this + 86);
          if (v190)
          {
            v191 = *(char ***)(*((_QWORD *)v16 + 10) + 8);
            v192 = *((_QWORD *)v16 + 3) << 32;
            v193 = *(_DWORD *)(v190 + 8);
            v194 = __OFSUB__(v193--, 1);
            *(_DWORD *)(v190 + 8) = v193;
            if ((v193 < 0) ^ v194 | (v193 == 0))
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v190 + 88) + 24))(*(_QWORD *)(v190 + 88));
              *(_DWORD *)(v190 + 8) = *(_DWORD *)v190;
            }
            if (v192)
              v195 = *v191;
            else
              v195 = 0;
            v196 = *(_QWORD *)(v190 + 104) - *(_QWORD *)(v190 + 96);
            if (v196)
              v197 = *(char **)(v190 + 96);
            else
              v197 = 0;
            webrtc::PushResampler<float>::Resample(v190 + 16, v195, v192 >> 32, v197, v196 >> 2, v6, v7, v8);
            v198 = *(_QWORD *)(v190 + 104) - *(_QWORD *)(v190 + 96);
            if (v198)
              v199 = *(_QWORD *)(v190 + 96);
            else
              v199 = 0;
            v200 = (*(float (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v190 + 88) + 32))(*(_QWORD *)(v190 + 88), v199, v198 >> 2);
            v201 = 0x100000000;
            v202 = *((_QWORD *)this + 91);
            if (!v202)
              goto LABEL_331;
          }
          else
          {
            v201 = 0;
            v200 = 0.0;
            v202 = *((_QWORD *)this + 91);
            if (!v202)
              goto LABEL_331;
          }
          v203 = *((_DWORD *)this + 25);
          if (v203 == 1)
          {
            v204 = v200;
            if (!v190)
              goto LABEL_418;
          }
          else
          {
            v204 = 1.0;
            if (!v203)
            {
              v205 = *((_QWORD *)this + 83);
              if (v205)
              {
                v206 = *(uint64_t **)(v205 + 64);
                v207 = *(uint64_t **)(v205 + 72);
                v204 = 0.0;
                if (v206 != v207)
                {
                  do
                  {
                    v208 = *v206++;
                    v209 = (*(float (**)(_QWORD))(**(_QWORD **)(v208 + 8) + 56))(*(_QWORD *)(v208 + 8));
                    if (v204 < v209)
                      v204 = v209;
                  }
                  while (v206 != v207);
                  v202 = *((_QWORD *)this + 91);
                }
              }
            }
          }
          v210 = *((_QWORD *)v16 + 10);
          v211 = **(_QWORD **)(v210 + 8);
          if (*((_QWORD *)v16 + 11))
            v210 = *((_QWORD *)v16 + 11);
          (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float, _BYTE))(*(_QWORD *)v202 + 24))(v202, v211, *((_QWORD *)v16 + 3), *((unsigned int *)v16 + 14), **(_QWORD **)(v210 + 16), *((_QWORD *)v16 + 9), 0, 0, v204, *((_BYTE *)this + 875));
          if (v190)
            v200 = v212;
LABEL_331:
          v213 = *((_QWORD *)this + 82);
          if (v213)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v213 + 8))(v213, v16);
          v214 = *((_QWORD *)this + 85);
          if (v214)
            webrtc::GainController2::Process(v214, v201 | LODWORD(v200), *((unsigned __int8 *)this + 1072), (uint64_t)v16, v5, v6, v7, v8);
          v215 = *((_QWORD *)this + 80);
          if (v215)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)v215 + 8))(v215, v16);
          v216 = **(float32x4_t ***)(*((_QWORD *)v16 + 10) + 8);
          v217 = *((_QWORD *)this + 138);
          if (v217)
          {
            if (*((_BYTE *)this + 1608) && *((_QWORD *)this + 200) == v217)
            {
              v218 = (v217 - 1) & 0x3FFFFFFFFFFFFFFFLL;
              if (v218 < 7)
                goto LABEL_341;
LABEL_343:
              v221 = v218 + 1;
              v222 = (v218 + 1) & 0x7FFFFFFFFFFFFFF8;
              v220 = &v216->f32[v222];
              v223 = v216 + 1;
              v219 = 0.0;
              v224.i64[0] = 0xC7000000C7000000;
              v224.i64[1] = 0xC7000000C7000000;
              v225 = (int8x16_t)vdupq_n_s32(0x46FFFE00u);
              v226 = v222;
              do
              {
                v227 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v224, v223[-1]), v224, (int8x16_t)v223[-1]);
                v228 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v224, *v223), v224, *(int8x16_t *)v223);
                *(int16x4_t *)v227.i8 = vmovn_s32(vcvtq_s32_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v227, (float32x4_t)v225), v225, v227)));
                *(int16x4_t *)v228.i8 = vmovn_s32(vcvtq_s32_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v228, (float32x4_t)v225), v225, v228)));
                v229 = vcvtq_f32_s32(vmull_s16(*(int16x4_t *)v227.i8, *(int16x4_t *)v227.i8));
                v230 = vcvtq_f32_s32(vmull_s16(*(int16x4_t *)v228.i8, *(int16x4_t *)v228.i8));
                v219 = (float)((float)((float)((float)((float)((float)((float)(v219 + v229.f32[0]) + v229.f32[1])
                                                             + v229.f32[2])
                                                     + v229.f32[3])
                                             + v230.f32[0])
                                     + v230.f32[1])
                             + v230.f32[2])
                     + v230.f32[3];
                v223 += 2;
                v226 -= 8;
              }
              while (v226);
              if (v221 != v222)
                goto LABEL_346;
            }
            else
            {
              *((_DWORD *)this + 394) = 0;
              *((_QWORD *)this + 198) = 0;
              *((_DWORD *)this + 398) = 0;
              *((_QWORD *)this + 200) = v217;
              *((_BYTE *)this + 1608) = 1;
              v218 = (v217 - 1) & 0x3FFFFFFFFFFFFFFFLL;
              if (v218 >= 7)
                goto LABEL_343;
LABEL_341:
              v219 = 0.0;
              v220 = (float *)v216;
LABEL_346:
              v231 = &v216->f32[v217];
              do
              {
                v232 = *v220++;
                v233 = v232;
                if (v232 < -32768.0)
                  v233 = -32768.0;
                if (v233 > 32767.0)
                  v233 = 32767.0;
                v219 = v219 + (float)((int)v233 * (int)v233);
              }
              while (v220 != v231);
            }
            *((float *)this + 394) = v219 + *((float *)this + 394);
            *((_QWORD *)this + 198) += v217;
            if (*((float *)this + 398) >= v219)
              v219 = *((float *)this + 398);
            *((float *)this + 398) = v219;
          }
          if (v117 >= 999)
          {
            v234 = *((_QWORD *)this + 198);
            if (v234)
            {
              v235 = *((float *)this + 394) / (float)v234;
              if (v235 <= 0.00021424)
                v236 = 127;
              else
                v236 = (int)(float)((float)(log10f(v235 * 9.3132e-10) * -10.0) + 0.5);
              if (!*((_BYTE *)this + 1608))
                goto LABEL_418;
              v239 = *((float *)this + 398) / (float)*((unint64_t *)this + 200);
              if (v239 <= 0.00021424)
                v240 = 0x7F00000000;
              else
                v240 = (unint64_t)(int)(float)((float)(log10f(v239 * 9.3132e-10) * -10.0) + 0.5) << 32;
              *((_DWORD *)this + 394) = 0;
              *((_QWORD *)this + 198) = 0;
              v238 = v240 | v236;
              *((_DWORD *)this + 398) = 0;
LABEL_367:
              *((_BYTE *)this + 1608) = 0;
            }
            else
            {
              v237 = *((unsigned __int8 *)this + 1608);
              *((_DWORD *)this + 394) = 0;
              *((_QWORD *)this + 198) = 0;
              v238 = 0x7F0000007FLL;
              *((_DWORD *)this + 398) = 0;
              if (v237)
                goto LABEL_367;
            }
            v241 = atomic_load(&qword_253EA54F0);
            if (v241)
            {
              webrtc::metrics::HistogramAdd(v241, v238);
            }
            else
            {
              while (!__ldaxr(&qword_253EA54F0))
              {
                if (!__stlxr(0, &qword_253EA54F0))
                  goto LABEL_373;
              }
              __clrex();
            }
LABEL_373:
            v243 = atomic_load(&qword_253EA54F8);
            if (v243)
            {
              webrtc::metrics::HistogramAdd(v243, SHIDWORD(v238));
            }
            else
            {
              while (!__ldaxr(&qword_253EA54F8))
              {
                if (!__stlxr(0, &qword_253EA54F8))
                  goto LABEL_378;
              }
              __clrex();
            }
          }
LABEL_378:
          v245 = *((_QWORD *)this + 79);
          if (v245)
          {
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v245 + 56))(&v284);
            *((_QWORD *)this + 128) = v284;
            *((_BYTE *)this + 1032) = BYTE8(v284);
            *((_QWORD *)this + 130) = v285;
            *((_BYTE *)this + 1048) = BYTE8(v285);
          }
        }
        v246 = *((_QWORD *)this + 88);
        if (v246)
        {
          v284 = 0uLL;
          *(_QWORD *)&v285 = 0;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v246 + 32))(&v284);
          v247 = *((_QWORD *)&v284 + 1);
          *((_QWORD *)this + 120) = v284;
          *((_BYTE *)this + 968) = 1;
          *((_QWORD *)this + 122) = v247;
          *((_BYTE *)this + 984) = 1;
          *((_DWORD *)this + 264) = v285;
          *((_BYTE *)this + 1060) = 1;
        }
        *(_OWORD *)v283 = *(_OWORD *)((char *)this + 1032);
        *(_OWORD *)&v283[13] = *(_OWORD *)((char *)this + 1045);
        v279 = *(_OWORD *)((char *)this + 952);
        v280 = *(_OWORD *)((char *)this + 968);
        v281 = *(_OWORD *)((char *)this + 984);
        v282 = *(_OWORD *)((char *)this + 1000);
        v248 = (unint64_t *)((char *)this + 1344);
        v249 = atomic_load((unint64_t *)this + 168);
        v250 = *((_QWORD *)this + 169);
        v251 = 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 170) - v250) >> 4);
        if (v249 != v251)
        {
          v252 = *((_QWORD *)this + 166);
          if (v251 <= v252)
            goto LABEL_418;
          v253 = (_OWORD *)(v250 + 112 * v252);
          v288 = *(_OWORD *)((char *)this + 1016);
          *(_OWORD *)v289 = *(_OWORD *)v283;
          *(_OWORD *)&v289[13] = *(_OWORD *)&v283[13];
          v284 = v279;
          v285 = v280;
          v286 = v281;
          v287 = v282;
          v253[1] = v280;
          v253[2] = v281;
          *v253 = v279;
          v254 = v287;
          v255 = v288;
          v256 = *(_OWORD *)&v289[16];
          v253[5] = *(_OWORD *)v289;
          v253[6] = v256;
          v253[3] = v254;
          v253[4] = v255;
          do
            v257 = __ldxr(v248);
          while (__stlxr(v257 + 1, v248));
          v258 = *((_QWORD *)this + 166);
          if (v258 + 1 == 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 170) - *((_QWORD *)this + 169)) >> 4))
            v259 = 0;
          else
            v259 = v258 + 1;
          *((_QWORD *)this + 166) = v259;
        }
        if (*((_BYTE *)this + 1068))
        {
          v260 = *((_QWORD *)this + 83);
          if (v260)
          {
            v261 = *(_DWORD *)(v260 + 36);
          }
          else
          {
            v263 = *((_QWORD *)this + 84);
            if (!v263)
            {
              v276 = *((_QWORD *)this + 85);
              if (v276 && *((_BYTE *)this + 585))
              {
                v277 = *(_QWORD *)(v276 + 2204);
                *((_DWORD *)this + 269) = v277;
                *((_BYTE *)this + 1080) = BYTE4(v277);
                v278 = BYTE4(v277);
                goto LABEL_420;
              }
              goto LABEL_419;
            }
            v261 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v263 + 8))(v263);
          }
          *((_DWORD *)this + 269) = v261;
          v262 = (char *)this + 1080;
          *((_BYTE *)this + 1080) = 1;
          goto LABEL_398;
        }
        v262 = (char *)this + 1080;
        if (*((_BYTE *)this + 1080))
          *v262 = 0;
        while (1)
        {
          v264 = (float32x4_t *)*((_QWORD *)this + 92);
          if (!v264)
            goto LABEL_407;
          webrtc::AudioSamplesScaler::Process(v264 + 2, (webrtc::AudioBuffer *)v16);
          if (!*((_BYTE *)this + 472))
            goto LABEL_407;
          if (*v262)
            break;
LABEL_418:
          __break(1u);
LABEL_419:
          *((_DWORD *)this + 269) = *(_DWORD *)v1;
          v278 = *(unsigned __int8 *)(v1 + 4);
          *((_BYTE *)this + 1080) = v278;
LABEL_420:
          v262 = (char *)this + 1080;
          if (v278)
          {
            v261 = *((_DWORD *)this + 269);
LABEL_398:
            webrtc::InputVolumeStatsReporter::UpdateStatistics((uint64_t)this + 1712, v261);
            continue;
          }
        }
        v265 = *((_QWORD *)this + 92);
        v266 = *((_DWORD *)this + 269);
        if (v266 >= 255)
          v266 = 255;
        v267 = v266 & ~(v266 >> 31);
        *(_DWORD *)(v265 + 4) = v267;
        v268 = (float)v267 * 0.0039216;
        if (!*(_BYTE *)v265)
          v268 = 1.0;
        v269 = *(float *)(v265 + 8) * v268;
        *(float *)(v265 + 12) = v269;
        *(float *)(v265 + 20) = v269;
LABEL_407:
        v270 = *((_BYTE *)this + 873);
        if (!*((_BYTE *)this + 874))
        {
          if (*((_BYTE *)this + 873))
          {
            v271 = *((_QWORD *)v16 + 7);
            if (v271)
            {
              v272 = *((_QWORD *)v16 + 3);
              if (v272 >= 1)
              {
                v273 = *(void ***)(*((_QWORD *)v16 + 10) + 8);
                v274 = 4 * (v272 - ((v272 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4;
                do
                {
                  v275 = *v273++;
                  bzero(v275, v274);
                  --v271;
                }
                while (v271);
              }
            }
          }
        }
        *((_BYTE *)this + 874) = v270;
        *((_BYTE *)this + 872) = 0;
        if ((StatusReg & 0x1000000) == 0)
LABEL_315:
          _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
        return;
      default:
        goto LABEL_4;
    }
  }
}

uint64_t webrtc::AudioProcessingImpl::EmptyQueuedRenderAudioLocked(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t *i;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t **v18;
  uint64_t **v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  _QWORD *v42;
  unint64_t *j;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 *v55;
  _QWORD *v57;
  unint64_t *v58;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v1 = this;
  if (*(_QWORD *)(this + 712))
  {
    v2 = *(_QWORD **)(this + 1800);
    for (i = v2 + 3; atomic_load(v2 + 3); i = v2 + 3)
    {
      v6 = v2[2];
      v7 = v2[4];
      if (0xAAAAAAAAAAAAAAABLL * ((v2[5] - v7) >> 3) <= v6)
        goto LABEL_81;
      v8 = (_QWORD *)(v7 + 24 * v6);
      v9 = *(_QWORD *)(v1 + 1400);
      *(_QWORD *)(v1 + 1400) = *v8;
      *v8 = v9;
      v10 = *(_QWORD *)(v1 + 1408);
      *(_QWORD *)(v1 + 1408) = v8[1];
      v8[1] = v10;
      v11 = *(_QWORD *)(v1 + 1416);
      *(_QWORD *)(v1 + 1416) = v8[2];
      v8[2] = v11;
      do
        v12 = __ldxr(i);
      while (__stlxr(v12 - 1, i));
      v13 = v2[2];
      if (v13 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2[5] - v2[4]) >> 3))
        v14 = 0;
      else
        v14 = v13 + 1;
      v2[2] = v14;
      v15 = *(_QWORD **)(v1 + 712);
      v16 = *(_QWORD *)(v1 + 1408) - *(_QWORD *)(v1 + 1400);
      if (v16)
        v17 = *(char **)(v1 + 1400);
      else
        v17 = 0;
      v19 = (uint64_t **)v15[1];
      v18 = (uint64_t **)v15[2];
      if (v19 != v18)
      {
        if (v17)
        {
          v20 = (unint64_t)(v16 >> 1) / (*(_QWORD *)(v15[4] + 8) * *(_QWORD *)(v15[4] + 16));
          if (v20 == 160 || v20 == 80)
          {
            do
            {
              v21 = **v19;
              if (v21 && *(_WORD *)(v21 + 336) == 42)
              {
                if (!*(_DWORD *)(v21 + 356))
                {
                  v22 = *(uint64_t **)(v21 + 376);
                  if (v22)
                  {
                    v23 = *v22;
                    v24 = *((_DWORD *)v22 + 8) ? v22[2] - v23 + v22[1] : v22[1] - v23;
                  }
                  else
                  {
                    LODWORD(v24) = 0;
                  }
                  v25 = *(__int16 *)(*(_QWORD *)(v21 + 384) + 568);
                  v26 = 8 * *(__int16 *)(v21 + 346) * v25;
                  if (v26 - (int)v24 > -80 * v25 + 256)
                  {
                    if (v22)
                    {
                      v27 = (v26 >> 1) - v24;
                      if (v27 <= 80)
                        v27 = 80;
                      if (v27 >= 0x320)
                        v28 = 800;
                      else
                        v28 = v27;
                      v29 = *((_DWORD *)v22 + 4);
                      v30 = *((_DWORD *)v22 + 8);
                      v31 = *(_DWORD *)v22;
                      v32 = *((_DWORD *)v22 + 2);
                      v33 = v30 == 0;
                      if (v30)
                        v34 = *((_DWORD *)v22 + 4);
                      else
                        v34 = 0;
                      if (v33)
                        v35 = *((_DWORD *)v22 + 4);
                      else
                        v35 = 0;
                      v36 = v34 - v31 + v32;
                      v37 = v32 - v31 - v35;
                      if (v36 >= -v28)
                        v38 = -v28;
                      else
                        v38 = v36;
                      if (v38 <= v37)
                        v38 = v37;
                      v39 = v38 + v31;
                      if (v38 + v31 <= v29)
                        v40 = 0;
                      else
                        v40 = *((_DWORD *)v22 + 4);
                      v41 = v39 - v40;
                      if (v39 > v29 || v41 < 0)
                        *((_DWORD *)v22 + 8) = v41 >> 31;
                      *v22 = (v29 & (v41 >> 31)) + v41;
                    }
                    *(_DWORD *)(v21 + 364) = 1;
                  }
                }
                this = WebRtc_WriteBuffer(*(uint64_t **)(v21 + 376), v17, v20);
              }
              ++v19;
              v17 += 2 * v20;
            }
            while (v19 != v18);
          }
        }
      }
      v2 = *(_QWORD **)(v1 + 1800);
    }
  }
  if (*(_QWORD *)(v1 + 672))
  {
    v42 = *(_QWORD **)(v1 + 1808);
    for (j = v42 + 3; atomic_load(v42 + 3); j = v42 + 3)
    {
      v45 = v42[2];
      v46 = v42[4];
      if (0xAAAAAAAAAAAAAAABLL * ((v42[5] - v46) >> 3) <= v45)
        goto LABEL_81;
      v47 = (_QWORD *)(v46 + 24 * v45);
      v48 = *(_QWORD *)(v1 + 1456);
      *(_QWORD *)(v1 + 1456) = *v47;
      *v47 = v48;
      v49 = *(_QWORD *)(v1 + 1464);
      *(_QWORD *)(v1 + 1464) = v47[1];
      v47[1] = v49;
      v50 = *(_QWORD *)(v1 + 1472);
      *(_QWORD *)(v1 + 1472) = v47[2];
      v47[2] = v50;
      do
        v51 = __ldxr(j);
      while (__stlxr(v51 - 1, j));
      v52 = v42[2];
      if (v52 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42[5] - v42[4]) >> 3))
        v53 = 0;
      else
        v53 = v52 + 1;
      v42[2] = v53;
      v54 = *(_QWORD *)(v1 + 1464) - *(_QWORD *)(v1 + 1456);
      if (v54)
        v55 = *(__int16 **)(v1 + 1456);
      else
        v55 = 0;
      this = webrtc::GainControlImpl::ProcessRenderAudio(*(_QWORD *)(v1 + 672), v55, v54 >> 1);
      v42 = *(_QWORD **)(v1 + 1808);
    }
  }
  if (*(_QWORD *)(v1 + 632))
  {
    v57 = *(_QWORD **)(v1 + 1816);
    v58 = v57 + 3;
    if (atomic_load(v57 + 3))
    {
      while (1)
      {
        v60 = v57[2];
        v61 = v57[4];
        if (0xAAAAAAAAAAAAAAABLL * ((v57[5] - v61) >> 3) <= v60)
          break;
        v62 = (_QWORD *)(v61 + 24 * v60);
        v63 = *(_QWORD *)(v1 + 1512);
        *(_QWORD *)(v1 + 1512) = *v62;
        *v62 = v63;
        v64 = *(_QWORD *)(v1 + 1520);
        *(_QWORD *)(v1 + 1520) = v62[1];
        v62[1] = v64;
        v65 = *(_QWORD *)(v1 + 1528);
        *(_QWORD *)(v1 + 1528) = v62[2];
        v62[2] = v65;
        do
          v66 = __ldxr(v58);
        while (__stlxr(v66 - 1, v58));
        v67 = v57[2];
        if (v67 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57[5] - v57[4]) >> 3))
          v68 = 0;
        else
          v68 = v67 + 1;
        v57[2] = v68;
        v69 = *(_QWORD *)(v1 + 1520) - *(_QWORD *)(v1 + 1512);
        if (v69)
          v70 = *(_QWORD *)(v1 + 1512);
        else
          v70 = 0;
        this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 632) + 40))(*(_QWORD *)(v1 + 632), v70, v69 >> 2);
        v57 = *(_QWORD **)(v1 + 1816);
        v58 = v57 + 3;
        if (!atomic_load(v57 + 3))
          return this;
      }
LABEL_81:
      __break(1u);
    }
  }
  return this;
}

uint64_t webrtc::AudioProcessingImpl::ProcessStream(uint64_t a1, unsigned __int16 *__src, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD v17[3];
  char v18;
  char v19;

  if (!(_DWORD)v10)
  {
    webrtc::AudioProcessingImpl::MaybeInitializeCapture(a1, (__int128 *)a3, a4);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 376));
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
    if ((StatusReg & 0x1000000) == 0)
      _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg | 0x1000000);
    if (*(_QWORD *)(a1 + 240))
    {
      webrtc::AudioProcessingImpl::WriteAecDumpConfigMessage((webrtc::AudioProcessingImpl *)a1, 0);
      (*(void (**)(_QWORD, unsigned __int16 *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 240) + 40))(*(_QWORD *)(a1 + 240), __src, *(unsigned int *)(a3 + 8), *(unsigned int *)(a3 + 16));
      v17[0] = *(_DWORD *)(a1 + 1116);
      v17[1] = 0;
      v17[2] = *(_DWORD *)(a1 + 1064);
      v18 = *(_BYTE *)(a1 + 1068);
      v19 = *(_BYTE *)(a1 + 875);
      (*(void (**)(_QWORD, _DWORD *))(**(_QWORD **)(a1 + 240) + 56))(*(_QWORD *)(a1 + 240), v17);
    }
    webrtc::AudioBuffer::CopyFrom(*(_QWORD *)(a1 + 880), (uint64_t)__src);
    v12 = *(_QWORD *)(a1 + 888);
    if (v12)
      webrtc::AudioBuffer::CopyFrom(v12, (uint64_t)__src);
    webrtc::AudioProcessingImpl::ProcessCaptureStreamLocked((webrtc::AudioProcessingImpl *)a1);
    v10 = v13;
    if (!(_DWORD)v13)
    {
      if (*(_BYTE *)(a1 + 620)
        || *(_BYTE *)(a1 + 621)
        || *(_BYTE *)(a1 + 622)
        || *(_BYTE *)(a1 + 623)
        || *(_BYTE *)(a1 + 627)
        || *(_BYTE *)(a1 + 625)
        || *(_BYTE *)(a1 + 617)
        || *(_BYTE *)(a1 + 626))
      {
        v14 = *(_QWORD *)(a1 + 888);
        if (!v14)
          v14 = *(_QWORD *)(a1 + 880);
        webrtc::AudioBuffer::CopyTo(v14, a4);
      }
      v15 = *(_QWORD *)(a1 + 240);
      if (v15)
      {
        (*(void (**)(uint64_t, char *, _QWORD, _QWORD))(*(_QWORD *)v15 + 48))(v15, a5, *(unsigned int *)(a4 + 8), *(unsigned int *)(a4 + 16));
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 240) + 64))(*(_QWORD *)(a1 + 240));
      }
    }
    if ((StatusReg & 0x1000000) == 0)
      _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 376));
  }
  return v10;
}

uint64_t webrtc::`anonymous namespace'::HandleUnsupportedAudioFormats(unsigned __int16 *__src, int a2, uint64_t a3, uint64_t a4, char *__dst)
{
  unsigned int v6;
  unint64_t v7;
  _BOOL4 v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int16x8_t *v18;
  unsigned int v19;
  unint64_t v20;
  int16x8_t v21;
  unint64_t v22;
  int16x8_t *v23;
  unint64_t v24;
  char *v25;

  v6 = *(_DWORD *)a4;
  v7 = *(_QWORD *)(a4 + 8);
  v8 = a2 >> 6 < 0x7D || a2 > 0x5DC00;
  if (a3)
    v9 = v8;
  else
    v9 = 3;
  if (a2 >= 0)
    v10 = v9;
  else
    v10 = 2;
  if ((v6 & 0x80000000) != 0)
  {
    v11 = 2;
    goto LABEL_16;
  }
  if (!v7)
  {
    v11 = 3;
    goto LABEL_16;
  }
  if (v6 >> 6 < 0x7D)
  {
    v11 = 1;
    goto LABEL_16;
  }
  v11 = v6 > 0x5DC00;
  if (v10 || v6 > 0x5DC00)
  {
LABEL_16:
    v12 = v10 - 1;
    if (v10 - 1 >= 3 && (v12 = v11 - 1, v11 - 1 > 2))
    {
      v13 = 4294967287;
      if (v11 > 1)
        return v13;
    }
    else
    {
      v13 = dword_208F0522C[v12];
      if (v11 > 1)
        return v13;
    }
    if (v10 <= 1 && v6 == a2)
      goto LABEL_23;
    goto LABEL_30;
  }
  v13 = 0;
  if (v7 == 1 || v7 == a3)
    return v13;
  v13 = 4294967287;
  if (v6 == a2)
  {
LABEL_23:
    v15 = *(_QWORD *)(a4 + 16);
    if (v7 == a3)
    {
      memcpy(__dst, __src, 2 * a3 * v15);
      return v13;
    }
    if (!v15 || !v7)
      return v13;
    v16 = 0;
    v17 = 0;
    v18 = (int16x8_t *)(__dst + 16);
    while (1)
    {
      v19 = __src[v17 * a3];
      if (v7 >= 0x10)
      {
        v21 = vdupq_n_s16(v19);
        v22 = v7 & 0xFFFFFFFFFFFFFFF0;
        v23 = v18;
        do
        {
          v23[-1] = v21;
          *v23 = v21;
          v23 += 2;
          v22 -= 16;
        }
        while (v22);
        v20 = v7 & 0xFFFFFFFFFFFFFFF0;
        if (v7 == (v7 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_34;
      }
      else
      {
        v20 = 0;
      }
      v24 = v7 - v20;
      v25 = &__dst[2 * v20 + 2 * v16];
      do
      {
        *(_WORD *)v25 = v19;
        v25 += 2;
        --v24;
      }
      while (v24);
LABEL_34:
      ++v17;
      v18 = (int16x8_t *)((char *)v18 + 2 * v7);
      v16 += v7;
      if (v17 == v15)
        return v13;
    }
  }
LABEL_30:
  bzero(__dst, 2 * v7 * *(_QWORD *)(a4 + 16));
  return v13;
}

uint64_t webrtc::AudioProcessingImpl::AnalyzeReverseStream(uint64_t a1, uint64_t a2, __int128 *a3)
{
  pthread_mutex_t *v6;
  unint64_t StatusReg;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __n128 v13;
  float32x4_t v14;
  double v15;
  int8x16_t v16;
  double v17;
  double v18;
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v6 = (pthread_mutex_t *)(a1 + 312);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 312));
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
  if ((StatusReg & 0x1000000) == 0)
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg | 0x1000000);
  if ((*(_DWORD *)a3 & 0x80000000) != 0)
    goto LABEL_6;
  if (!*((_QWORD *)a3 + 1))
  {
    v8 = 4294967287;
    if ((StatusReg & 0x1000000) != 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  if ((*(_DWORD *)a3 - 384001) < 0xFFFA433F)
  {
LABEL_6:
    v8 = 4294967289;
    if ((StatusReg & 0x1000000) == 0)
LABEL_7:
      _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
  }
  else
  {
    v10 = *(_OWORD *)(a1 + 760);
    v20 = *(_OWORD *)(a1 + 744);
    v21 = v10;
    v11 = *a3;
    v22 = *(_OWORD *)(a1 + 776);
    v23 = v11;
    v24 = *((_QWORD *)a3 + 2);
    v25 = v11;
    v26 = v24;
    if ((_DWORD)v20 != *(_DWORD *)(a1 + 744)
      || *((_QWORD *)&v20 + 1) != *(_QWORD *)(a1 + 752)
      || DWORD2(v21) != *(_DWORD *)(a1 + 768)
      || (_QWORD)v22 != *(_QWORD *)(a1 + 776)
      || (_DWORD)v23 != *(_DWORD *)(a1 + 792)
      || *((_QWORD *)&v23 + 1) != *(_QWORD *)(a1 + 800)
      || (_DWORD)v25 != *(_DWORD *)(a1 + 816)
      || *((_QWORD *)&v25 + 1) != *(_QWORD *)(a1 + 824))
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 376));
      webrtc::AudioProcessingImpl::InitializeLocked(a1, &v20);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 376));
    }
    v12 = *(_QWORD *)(a1 + 240);
    if (v12)
    {
      *(_QWORD *)&v20 = a2;
      *((int32x2_t *)&v20 + 1) = vmovn_s64(*(int64x2_t *)(a1 + 800));
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v12 + 80))(v12, &v20);
    }
    webrtc::AudioBuffer::CopyFrom(*(_QWORD *)(a1 + 1136), a2);
    webrtc::AudioProcessingImpl::ProcessRenderStreamLocked((webrtc::AudioProcessingImpl *)a1, v13, v14, v15, v16, v17, v18, v19);
    v8 = 0;
    if ((StatusReg & 0x1000000) == 0)
      goto LABEL_7;
  }
LABEL_8:
  pthread_mutex_unlock(v6);
  return v8;
}

uint64_t webrtc::AudioProcessingImpl::ProcessReverseStream(uint64_t a1, const void **a2, __int128 *a3, uint64_t a4, void **a5)
{
  pthread_mutex_t *v10;
  unint64_t StatusReg;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __n128 v16;
  float32x4_t v17;
  double v18;
  int8x16_t v19;
  double v20;
  double v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v10 = (pthread_mutex_t *)(a1 + 312);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 312));
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
  if ((StatusReg & 0x1000000) == 0)
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg | 0x1000000);
  if (!(_DWORD)v12)
  {
    v13 = *(_OWORD *)(a1 + 760);
    v32 = *(_OWORD *)(a1 + 744);
    v33 = v13;
    v14 = *a3;
    v34 = *(_OWORD *)(a1 + 776);
    v35 = v14;
    v36 = *((_QWORD *)a3 + 2);
    v37 = *(_OWORD *)a4;
    v38 = *(_QWORD *)(a4 + 16);
    if ((_DWORD)v32 != *(_DWORD *)(a1 + 744)
      || *((_QWORD *)&v32 + 1) != *(_QWORD *)(a1 + 752)
      || DWORD2(v33) != *(_DWORD *)(a1 + 768)
      || (_QWORD)v34 != *(_QWORD *)(a1 + 776)
      || (_DWORD)v35 != *(_DWORD *)(a1 + 792)
      || *((_QWORD *)&v35 + 1) != *(_QWORD *)(a1 + 800)
      || (_DWORD)v37 != *(_DWORD *)(a1 + 816)
      || *((_QWORD *)&v37 + 1) != *(_QWORD *)(a1 + 824))
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 376));
      webrtc::AudioProcessingImpl::InitializeLocked(a1, &v32);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 376));
    }
    v15 = *(_QWORD *)(a1 + 240);
    if (v15)
    {
      *(_QWORD *)&v32 = a2;
      *((int32x2_t *)&v32 + 1) = vmovn_s64(*(int64x2_t *)(a1 + 800));
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 80))(v15, &v32);
    }
    webrtc::AudioBuffer::CopyFrom(*(_QWORD *)(a1 + 1136), (uint64_t)a2);
    webrtc::AudioProcessingImpl::ProcessRenderStreamLocked((webrtc::AudioProcessingImpl *)a1, v16, v17, v18, v19, v20, v21, v22);
    if (*(_BYTE *)(a1 + 618))
    {
      webrtc::AudioBuffer::CopyTo(*(_QWORD **)(a1 + 1136), a1 + 816, (const void **)a5, v23, v24, v25, v26, v27);
LABEL_26:
      v12 = 0;
      goto LABEL_27;
    }
    if (*(_DWORD *)(a1 + 792) != *(_DWORD *)(a1 + 816) || *(_QWORD *)(a1 + 800) != *(_QWORD *)(a1 + 824))
    {
      (*(void (**)(_QWORD, const void **, _QWORD, void **, _QWORD))(**(_QWORD **)(a1 + 1128) + 16))(*(_QWORD *)(a1 + 1128), a2, *((_QWORD *)a3 + 2) * *((_QWORD *)a3 + 1), a5, *(_QWORD *)(a4 + 16) * *(_QWORD *)(a4 + 8));
      goto LABEL_26;
    }
    if ((int)*((_QWORD *)a3 + 1) < 1)
      goto LABEL_26;
    v28 = *((_QWORD *)a3 + 2);
    if (!(_DWORD)v28)
      goto LABEL_26;
    v29 = *((_QWORD *)a3 + 1);
    v30 = 4 * (int)v28;
    do
    {
      if (*a2 != *a5)
        memmove(*a5, *a2, v30);
      v12 = 0;
      ++a5;
      ++a2;
      --v29;
    }
    while (v29);
  }
LABEL_27:
  if ((StatusReg & 0x1000000) == 0)
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
  pthread_mutex_unlock(v10);
  return v12;
}

uint64_t (***webrtc::AudioProcessingImpl::ProcessRenderStreamLocked(webrtc::AudioProcessingImpl *this, __n128 a2, float32x4_t a3, double a4, int8x16_t a5, double a6, double a7, int8x16_t a8))(_QWORD, uint64_t)
{
  unint64_t v8;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t StatusReg;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __n128 *v34;
  unsigned __int32 *v35;
  unsigned __int32 *v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t *v39;
  __n128 *v40;
  float32x4_t *v41;
  uint64_t v42;
  unsigned __int32 v43;
  _QWORD *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v64;
  uint64_t v65;
  int8x16_t v66;
  double v67;
  double v68;
  double v69;
  int8x16_t v70;
  _QWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t (***result)(_QWORD, uint64_t);
  uint64_t v106;
  unsigned int v107;

  v10 = *((_QWORD *)this + 142);
  v106 = 0;
  v11 = (unint64_t *)((char *)this + 184);
  while (atomic_load(v11))
  {
    v14 = *((_QWORD *)this + 22);
    v15 = *((_QWORD *)this + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 25) - v15) >> 2) <= v14)
      goto LABEL_87;
    v16 = (uint64_t *)(v15 + 12 * v14);
    v17 = v107;
    v18 = v106;
    v19 = *((_DWORD *)v16 + 2);
    v106 = *v16;
    v107 = v19;
    *v16 = v18;
    *((_DWORD *)v16 + 2) = v17;
    do
      v20 = __ldxr(v11);
    while (__stlxr(v20 - 1, v11));
    v21 = *((_QWORD *)this + 22);
    if (v21 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 25) - *((_QWORD *)this + 24)) >> 2))
      v22 = 0;
    else
      v22 = v21 + 1;
    *((_QWORD *)this + 22) = v22;
    v23 = *((_QWORD *)this + 30);
    if (v23)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v23 + 88))(v23, &v106);
    if ((v106 - 4) <= 2)
    {
      v24 = *((_QWORD *)this + 81);
      if (v24)
      {
        v8 = v8 & 0xFFFFFFFF00000000 | v107;
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v24 + 24))(v24, v106, v8);
      }
    }
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
  if ((StatusReg & 0x1000000) == 0)
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg | 0x1000000);
  v26 = *((_QWORD *)this + 81);
  if (v26)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 8))(v26, v10);
  if (!*((_QWORD *)this + 79))
    goto LABEL_49;
  v27 = (char *)*((_QWORD *)this + 186);
  *((_QWORD *)this + 187) = v27;
  v28 = *(_QWORD *)(v10 + 24);
  v29 = v28 - 1;
  if (v28 >= 1)
  {
    v30 = **(float32x4_t ***)(*(_QWORD *)(v10 + 80) + 8);
    v31 = *((_QWORD *)this + 188) - (_QWORD)v27;
    if (v28 <= v31 >> 2)
    {
      memmove(v27, **(const void ***)(*(_QWORD *)(v10 + 80) + 8), 4 * v28);
      *((_QWORD *)this + 187) = &v27[4 * v28];
      goto LABEL_40;
    }
    if ((unint64_t)v28 >> 62)
      goto LABEL_88;
    v32 = v31 >> 1;
    if (v31 >> 1 <= (unint64_t)v28)
      v32 = *(_QWORD *)(v10 + 24);
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
      v33 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v33 = v32;
    if (v33 >> 62)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v34 = (__n128 *)operator new(4 * v33);
    v35 = (unsigned __int32 *)v34 + v28;
    if ((v29 & 0x3FFFFFFFFFFFFFFFuLL) < 7)
    {
      v36 = (unsigned __int32 *)v34;
    }
    else
    {
      v36 = (unsigned __int32 *)v34;
      if ((unint64_t)((char *)v34 - (char *)v30) >= 0x20)
      {
        v37 = (v29 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
        v39 = (float32x4_t *)((char *)v30 + v38);
        v36 = (unsigned __int32 *)((char *)v34 + v38);
        v40 = v34 + 1;
        v41 = v30 + 1;
        v42 = v37 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          a2 = (__n128)v41[-1];
          a3 = *v41;
          v40[-1] = a2;
          *v40 = (__n128)a3;
          v40 += 2;
          v41 += 2;
          v42 -= 8;
        }
        while (v42);
        v30 = v39;
        if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          *((_QWORD *)this + 186) = v34;
          *((_QWORD *)this + 187) = v35;
          *((_QWORD *)this + 188) = (char *)v34 + 4 * v33;
          if (v27)
            operator delete(v27);
          goto LABEL_40;
        }
      }
    }
    do
    {
      v43 = v30->i32[0];
      v30 = (float32x4_t *)((char *)v30 + 4);
      a2.n128_u32[0] = v43;
      *v36++ = v43;
    }
    while (v36 != v35);
    goto LABEL_38;
  }
LABEL_40:
  v44 = (_QWORD *)*((_QWORD *)this + 227);
  v45 = v44 + 3;
  v46 = atomic_load(v44 + 3);
  v47 = v44 + 4;
  v48 = v44[4];
  v49 = v44 + 5;
  v50 = 0xAAAAAAAAAAAAAAABLL * ((v44[5] - v48) >> 3);
  if (v46 != v50)
    goto LABEL_42;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
  webrtc::AudioProcessingImpl::EmptyQueuedRenderAudioLocked((uint64_t)this);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 376));
  v44 = (_QWORD *)*((_QWORD *)this + 227);
  v45 = v44 + 3;
  v51 = atomic_load(v44 + 3);
  v47 = v44 + 4;
  v48 = v44[4];
  v49 = v44 + 5;
  v50 = 0xAAAAAAAAAAAAAAABLL * ((v44[5] - v48) >> 3);
  if (v51 != v50)
  {
LABEL_42:
    v54 = v44[1];
    v52 = v44 + 1;
    v53 = v54;
    if (v50 <= v54)
      goto LABEL_87;
    v55 = (_QWORD *)(v48 + 24 * v53);
    v56 = *((_QWORD *)this + 186);
    *((_QWORD *)this + 186) = *v55;
    *v55 = v56;
    v57 = *((_QWORD *)this + 187);
    *((_QWORD *)this + 187) = v55[1];
    v55[1] = v57;
    v58 = *((_QWORD *)this + 188);
    *((_QWORD *)this + 188) = v55[2];
    v55[2] = v58;
    do
      v59 = __ldxr(v45);
    while (__stlxr(v59 + 1, v45));
    if (*v52 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v49 - *v47) >> 3))
      v60 = 0;
    else
      v60 = *v52 + 1;
    *v52 = v60;
  }
LABEL_49:
  v61 = *((unsigned __int8 *)this + 621);
  if (*((_BYTE *)this + 621) || *((_BYTE *)this + 623) || *((_BYTE *)this + 627))
  {
    v62 = *((_DWORD *)this + 210);
    if (v62 == 48000 || v62 == 32000)
    {
      webrtc::SplittingFilter::Analysis(*(_QWORD *)(v10 + 96), *(_QWORD *)(v10 + 80), *(_QWORD **)(v10 + 88));
      v61 = *((unsigned __int8 *)this + 621);
    }
    if (v61 || *((_BYTE *)this + 623))
      goto LABEL_92;
  }
  if (*((_BYTE *)this + 627))
  {
LABEL_92:
    if (*((_QWORD *)this + 89))
    {
      v64 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 88))(this);
      v65 = (*(uint64_t (**)(webrtc::AudioProcessingImpl *))(*(_QWORD *)this + 96))(this);
      webrtc::EchoControlMobileImpl::PackRenderAudioBuffer((_QWORD *)v10, v64, v66, v67, v68, v69, v70, v65, (_QWORD *)this + 172);
      v71 = (_QWORD *)*((_QWORD *)this + 225);
      v72 = v71 + 3;
      v73 = atomic_load(v71 + 3);
      v74 = v71 + 4;
      v75 = v71[4];
      v76 = v71 + 5;
      v77 = 0xAAAAAAAAAAAAAAABLL * ((v71[5] - v75) >> 3);
      if (v73 != v77)
        goto LABEL_64;
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
      webrtc::AudioProcessingImpl::EmptyQueuedRenderAudioLocked((uint64_t)this);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 376));
      v71 = (_QWORD *)*((_QWORD *)this + 225);
      v72 = v71 + 3;
      v78 = atomic_load(v71 + 3);
      v74 = v71 + 4;
      v75 = v71[4];
      v76 = v71 + 5;
      v77 = 0xAAAAAAAAAAAAAAABLL * ((v71[5] - v75) >> 3);
      if (v78 != v77)
      {
LABEL_64:
        v81 = v71[1];
        v79 = v71 + 1;
        v80 = v81;
        if (v77 <= v81)
          goto LABEL_87;
        v82 = (_QWORD *)(v75 + 24 * v80);
        v83 = *((_QWORD *)this + 172);
        *((_QWORD *)this + 172) = *v82;
        *v82 = v83;
        v84 = *((_QWORD *)this + 173);
        *((_QWORD *)this + 173) = v82[1];
        v82[1] = v84;
        v85 = *((_QWORD *)this + 174);
        *((_QWORD *)this + 174) = v82[2];
        v82[2] = v85;
        do
          v86 = __ldxr(v72);
        while (__stlxr(v86 + 1, v72));
        if (*v79 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v76 - *v74) >> 3))
          v87 = 0;
        else
          v87 = *v79 + 1;
        *v79 = v87;
      }
    }
    if (!*((_QWORD *)this + 83))
    {
      if (*((_QWORD *)this + 84))
      {
        webrtc::GainControlImpl::PackRenderAudioBuffer((char *)v10, (char **)this + 179, a2.n128_f64[0], a3, a4, a5, a6, a7, a8);
        v88 = (_QWORD *)*((_QWORD *)this + 226);
        v89 = v88 + 3;
        v90 = atomic_load(v88 + 3);
        v91 = v88 + 4;
        v92 = v88[4];
        v93 = v88 + 5;
        v94 = 0xAAAAAAAAAAAAAAABLL * ((v88[5] - v92) >> 3);
        if (v90 != v94)
          goto LABEL_75;
        pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
        webrtc::AudioProcessingImpl::EmptyQueuedRenderAudioLocked((uint64_t)this);
        pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 376));
        v88 = (_QWORD *)*((_QWORD *)this + 226);
        v89 = v88 + 3;
        v95 = atomic_load(v88 + 3);
        v91 = v88 + 4;
        v92 = v88[4];
        v93 = v88 + 5;
        v94 = 0xAAAAAAAAAAAAAAABLL * ((v88[5] - v92) >> 3);
        if (v95 != v94)
        {
LABEL_75:
          v98 = v88[1];
          v96 = v88 + 1;
          v97 = v98;
          if (v94 > v98)
          {
            v99 = (_QWORD *)(v92 + 24 * v97);
            v100 = *((_QWORD *)this + 179);
            *((_QWORD *)this + 179) = *v99;
            *v99 = v100;
            v101 = *((_QWORD *)this + 180);
            *((_QWORD *)this + 180) = v99[1];
            v99[1] = v101;
            v102 = *((_QWORD *)this + 181);
            *((_QWORD *)this + 181) = v99[2];
            v99[2] = v102;
            do
              v103 = __ldxr(v89);
            while (__stlxr(v103 + 1, v89));
            if (*v96 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v93 - *v91) >> 3))
              v104 = 0;
            else
              v104 = *v96 + 1;
            *v96 = v104;
            goto LABEL_82;
          }
LABEL_87:
          __break(1u);
LABEL_88:
          abort();
        }
      }
    }
  }
LABEL_82:
  result = (uint64_t (***)(_QWORD, uint64_t))*((_QWORD *)this + 88);
  if (result)
    result = (uint64_t (***)(_QWORD, uint64_t))(**result)(result, v10);
  if ((StatusReg & 0x1000000) == 0)
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
  return result;
}

uint64_t webrtc::AudioProcessingImpl::ProcessReverseStream(uint64_t a1, unsigned __int16 *a2, __int128 *a3, uint64_t a4, char *a5)
{
  pthread_mutex_t *v10;
  unint64_t StatusReg;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __n128 v16;
  float32x4_t v17;
  double v18;
  int8x16_t v19;
  double v20;
  double v21;
  int8x16_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v10 = (pthread_mutex_t *)(a1 + 312);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 312));
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
  if ((StatusReg & 0x1000000) == 0)
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg | 0x1000000);
  if (!(_DWORD)v12)
  {
    v13 = *(_OWORD *)(a1 + 760);
    v24 = *(_OWORD *)(a1 + 744);
    v25 = v13;
    v14 = *a3;
    v26 = *(_OWORD *)(a1 + 776);
    v27 = v14;
    v28 = *((_QWORD *)a3 + 2);
    v29 = *(_OWORD *)a4;
    v30 = *(_QWORD *)(a4 + 16);
    if ((_DWORD)v24 != *(_DWORD *)(a1 + 744)
      || *((_QWORD *)&v24 + 1) != *(_QWORD *)(a1 + 752)
      || DWORD2(v25) != *(_DWORD *)(a1 + 768)
      || (_QWORD)v26 != *(_QWORD *)(a1 + 776)
      || (_DWORD)v27 != *(_DWORD *)(a1 + 792)
      || *((_QWORD *)&v27 + 1) != *(_QWORD *)(a1 + 800)
      || (_DWORD)v29 != *(_DWORD *)(a1 + 816)
      || *((_QWORD *)&v29 + 1) != *(_QWORD *)(a1 + 824))
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 376));
      webrtc::AudioProcessingImpl::InitializeLocked(a1, &v24);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 376));
    }
    v15 = *(_QWORD *)(a1 + 240);
    if (v15)
      (*(void (**)(uint64_t, unsigned __int16 *, _QWORD, _QWORD))(*(_QWORD *)v15 + 72))(v15, a2, *((unsigned int *)a3 + 4), *((unsigned int *)a3 + 2));
    webrtc::AudioBuffer::CopyFrom(*(_QWORD *)(a1 + 1136), (uint64_t)a2);
    webrtc::AudioProcessingImpl::ProcessRenderStreamLocked((webrtc::AudioProcessingImpl *)a1, v16, v17, v18, v19, v20, v21, v22);
    if (*(_BYTE *)(a1 + 618))
      webrtc::AudioBuffer::CopyTo(*(_QWORD *)(a1 + 1136), a4);
  }
  if ((StatusReg & 0x1000000) == 0)
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
  pthread_mutex_unlock(v10);
  return v12;
}

uint64_t webrtc::AudioProcessingImpl::set_stream_delay_ms(webrtc::AudioProcessingImpl *this, int a2)
{
  unsigned int v3;
  int v4;
  pthread_mutex_t *v5;
  uint64_t v7;

  v3 = a2 & ~(a2 >> 31);
  if (v3 >= 0x1F4)
    v4 = 500;
  else
    v4 = a2 & ~(a2 >> 31);
  v5 = (pthread_mutex_t *)((char *)this + 376);
  if (v3 > 0x1F4 || a2 < 0)
    v7 = 4294967283;
  else
    v7 = 0;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
  *((_BYTE *)this + 872) = 1;
  *((_DWORD *)this + 279) = v4;
  pthread_mutex_unlock(v5);
  return v7;
}

BOOL webrtc::AudioProcessingImpl::GetLinearAecOutput(uint64_t a1, int8x16_t *a2)
{
  pthread_mutex_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t *v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t *v19;
  float32x4_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float *v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float32x4_t *v29;
  unint64_t v30;
  int8x16_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = (pthread_mutex_t *)(a1 + 376);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 376));
  v5 = *(_QWORD **)(a1 + 896);
  if (v5)
  {
    v6 = v5[7];
    if (v6)
    {
      v7 = v5[3];
      if (v7)
      {
        v8 = 0;
        v9 = *(_QWORD *)(v5[10] + 8);
        v10 = a2 + 1;
        v11.i64[0] = 0x4700000047000000;
        v11.i64[1] = 0x4700000047000000;
        v12.i64[0] = 0xC7000000C7000000;
        v12.i64[1] = 0xC7000000C7000000;
        v13.i64[0] = 0x3800000038000000;
        v13.i64[1] = 0x3800000038000000;
        __asm { FMOV            V7.4S, #-1.0 }
        v19 = a2;
        while (1)
        {
          v20 = *(float32x4_t **)(v9 + 8 * v8);
          if (v7 < 8 || (unint64_t)((char *)&a2[40 * v8] - (char *)v20) < 0x20)
            break;
          v29 = v20 + 1;
          v30 = v7 & 0xFFFFFFFFFFFFFFF8;
          v31 = v10;
          do
          {
            v32 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v29[-1], (float32x4_t)v11), v11, (int8x16_t)v29[-1]);
            v33 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*v29, (float32x4_t)v11), v11, *(int8x16_t *)v29);
            v31[-1] = vbslq_s8((int8x16_t)vcgtq_f32(v12, v32), _Q7, (int8x16_t)vmulq_f32(v32, v13));
            *v31 = vbslq_s8((int8x16_t)vcgtq_f32(v12, v33), _Q7, (int8x16_t)vmulq_f32(v33, v13));
            v29 += 2;
            v31 += 2;
            v30 -= 8;
          }
          while (v30);
          v21 = v7 & 0xFFFFFFFFFFFFFFF8;
          if (v7 != (v7 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_9;
LABEL_5:
          ++v8;
          v10 += 40;
          v19 += 40;
          if (v8 == v6)
            goto LABEL_23;
        }
        v21 = 0;
LABEL_9:
        v22 = v7 - v21;
        v23 = v21;
        v24 = (float *)&v19->i32[v21];
        v25 = &v20->f32[v23];
        do
        {
          v26 = *v25++;
          v27 = v26;
          if (v26 > 32768.0)
            v27 = 32768.0;
          if (v27 >= -32768.0)
            v28 = v27 * 0.000030518;
          else
            v28 = -1.0;
          *v24++ = v28;
          --v22;
        }
        while (v22);
        goto LABEL_5;
      }
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v34, v35, v36, v37, v38, v39, v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc");
  }
LABEL_23:
  pthread_mutex_unlock(v4);
  return v5 != 0;
}

uint64_t webrtc::AudioProcessingImpl::stream_delay_ms(webrtc::AudioProcessingImpl *this)
{
  return *((unsigned int *)this + 279);
}

uint64_t webrtc::AudioProcessingImpl::set_stream_key_pressed(webrtc::AudioProcessingImpl *this, char a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 376);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
  *((_BYTE *)this + 875) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::AudioProcessingImpl::set_stream_analog_level(webrtc::AudioProcessingImpl *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t result;
  char v6;
  unsigned __int8 *v7;
  int v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void (***v15)(_QWORD, uint64_t);
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t i;
  int v24;
  BOOL v25;

  v4 = (pthread_mutex_t *)((char *)this + 376);
  result = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
  v6 = *((_BYTE *)this + 1068);
  if (v6)
    v6 = *((_DWORD *)this + 266) != (_DWORD)a2;
  *((_BYTE *)this + 1072) = v6;
  *((_DWORD *)this + 266) = a2;
  *((_BYTE *)this + 1068) = 1;
  if (*((_BYTE *)this + 1080))
    *((_BYTE *)this + 1080) = 0;
  v7 = (unsigned __int8 *)*((_QWORD *)this + 83);
  if (!v7)
  {
    v15 = (void (***)(_QWORD, uint64_t))*((_QWORD *)this + 84);
    if (v15)
      (**v15)(v15, a2);
    return pthread_mutex_unlock(v4);
  }
  v8 = *v7;
  if (!*v7)
    *((_DWORD *)v7 + 9) = a2;
  v9 = (char *)*((_QWORD *)v7 + 8);
  v10 = (char *)*((_QWORD *)v7 + 9);
  v11 = v10 - v9;
  if (v10 != v9)
  {
    v12 = v11 >> 3;
    if ((unint64_t)(v11 >> 3) <= 1)
      v13 = 1;
    else
      v13 = v11 >> 3;
    if (v13 >= 2)
    {
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      v16 = (uint64_t *)(v9 + 8);
      v17 = v13 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v18 = *v16;
        *(_DWORD *)(*(v16 - 1) + 44) = a2;
        *(_DWORD *)(v18 + 44) = a2;
        v16 += 2;
        v17 -= 2;
      }
      while (v17);
      if (v13 == v14)
      {
LABEL_22:
        v22 = *(_DWORD *)(*(_QWORD *)v9 + 44);
        *((_DWORD *)v7 + 11) = 0;
        if ((unint64_t)v11 >= 9)
        {
          if (v12 <= 2)
            v12 = 2;
          for (i = 1; i != v12; ++i)
          {
            v24 = *(_DWORD *)(*(_QWORD *)&v9[8 * i] + 44);
            if (v24 < v22)
            {
              *((_DWORD *)v7 + 11) = i;
              v22 = v24;
            }
          }
        }
        if (v7[8])
          v25 = v22 <= 0;
        else
          v25 = 1;
        if (!v25 && v22 <= *((_DWORD *)v7 + 1))
          v22 = *((_DWORD *)v7 + 1);
        if (v8)
        {
          *((_DWORD *)v7 + 9) = v22;
          return pthread_mutex_unlock(v4);
        }
        return pthread_mutex_unlock(v4);
      }
    }
    else
    {
      v14 = 0;
    }
    v19 = v13 - v14;
    v20 = (uint64_t *)&v9[8 * v14];
    do
    {
      v21 = *v20++;
      *(_DWORD *)(v21 + 44) = a2;
      --v19;
    }
    while (v19);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t webrtc::AudioProcessingImpl::recommended_stream_analog_level(webrtc::AudioProcessingImpl *this)
{
  pthread_mutex_t *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (pthread_mutex_t *)((char *)this + 376);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
  if (*((_BYTE *)this + 1068))
  {
    v3 = (unsigned int *)((char *)this + 1076);
    v4 = *((unsigned int *)this + 266);
    if (!*((_BYTE *)v3 + 4))
      goto LABEL_9;
    goto LABEL_8;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/audio_processing_impl.cc");
  v3 = (unsigned int *)((char *)this + 1076);
  if (!*((_BYTE *)this + 1068))
  {
    v4 = 255;
    if (!*((_BYTE *)v3 + 4))
      goto LABEL_9;
    goto LABEL_8;
  }
  v4 = *((unsigned int *)this + 266);
  if (*((_BYTE *)v3 + 4))
LABEL_8:
    v4 = *v3;
LABEL_9:
  pthread_mutex_unlock(v2);
  return v4;
}

uint64_t webrtc::AudioProcessingImpl::CreateAndAttachAecDump()
{
  return 0;
}

{
  return 0;
}

uint64_t webrtc::AudioProcessingImpl::AttachAecDump(uint64_t a1, _QWORD *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  timeval v9;

  v4 = (pthread_mutex_t *)(a1 + 312);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 312));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 376));
  v5 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = *a2;
  *a2 = v5;
  webrtc::AudioProcessingImpl::WriteAecDumpConfigMessage((webrtc::AudioProcessingImpl *)a1, 1);
  v6 = *(_QWORD *)(a1 + 240);
  if (rtc::g_clock)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock) / 1000;
  }
  else
  {
    gettimeofday(&v9, 0);
    v7 = v9.tv_usec + 1000000 * v9.tv_sec;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a1 + 744, v7 / 1000);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 376));
  return pthread_mutex_unlock(v4);
}

void webrtc::AudioProcessingImpl::WriteAecDumpConfigMessage(webrtc::AudioProcessingImpl *this, char a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  int v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string *v10;
  char *v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type size;
  std::string *v15;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  std::string *v28;
  std::string *p_p;
  size_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  std::string __p;
  std::string v35;

  if (!*((_QWORD *)this + 30))
    return;
  *((_BYTE *)&v35.__r_.__value_.__s + 23) = 0;
  v35.__r_.__value_.__s.__data_[0] = 0;
  v5 = *((_QWORD *)this + 80);
  if (v5)
  {
    v6 = v35.__r_.__value_.__r.__words[2];
    if (&v35 <= (std::string *)"CapturePostProcessor;"
      && (char *)&v35.__r_.__value_.__r.__words[2] + 5 > "CapturePostProcessor;")
    {
      goto LABEL_96;
    }
    qmemcpy(&v35, "CapturePostProcessor;", 21);
    if ((v6 & 0x8000000000000000) == 0)
    {
      LODWORD(v5) = 21;
      *((_BYTE *)&v35.__r_.__value_.__s + 23) = 21;
      v2 = 0x65636F725074736FLL;
      v35.__r_.__value_.__s.__data_[21] = 0;
      if (!*((_QWORD *)this + 81))
        goto LABEL_7;
LABEL_12:
      v7 = (char)v5;
      if ((v5 & 0x80u) == 0)
        v8 = 22;
      else
        v8 = (v35.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v5 & 0x80u) == 0)
        v9 = v5;
      else
        v9 = v2;
      if (v8 - v9 >= 0x13)
      {
        v10 = (std::string *)v35.__r_.__value_.__r.__words[0];
        if (v7 >= 0)
          v10 = &v35;
        v11 = (char *)v10 + v9;
        if ((char *)v10 + v9 <= "RenderPreProcessor;" && v11 + 19 > "RenderPreProcessor;")
          goto LABEL_96;
        *(_DWORD *)(v11 + 15) = 997355379;
        *(_OWORD *)v11 = *(_OWORD *)"RenderPreProcessor;";
        v12 = v9 + 19;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        {
          v35.__r_.__value_.__l.__size_ = v9 + 19;
          v10->__r_.__value_.__s.__data_[v12] = 0;
          if (!*((_BYTE *)this + 1120))
            goto LABEL_37;
          goto LABEL_29;
        }
        *((_BYTE *)&v35.__r_.__value_.__s + 23) = v12 & 0x7F;
        v10->__r_.__value_.__s.__data_[v12] = 0;
        if (*((_BYTE *)this + 1120))
          goto LABEL_29;
      }
      else
      {
        std::string::__grow_by_and_replace(&v35, v8, v9 - v8 + 19, v9, v9, 0, 0x13uLL, "RenderPreProcessor;");
        if (*((_BYTE *)this + 1120))
          goto LABEL_29;
      }
LABEL_37:
      if (!*((_BYTE *)this + 584))
        goto LABEL_67;
      goto LABEL_49;
    }
    v5 = HIBYTE(v6);
    v2 = 21;
    v35.__r_.__value_.__l.__size_ = 21;
    v35.__r_.__value_.__s.__data_[21] = 0;
    if (*((_QWORD *)this + 81))
      goto LABEL_12;
  }
  else if (*((_QWORD *)this + 81))
  {
    goto LABEL_12;
  }
LABEL_7:
  if (!*((_BYTE *)this + 1120))
    goto LABEL_37;
LABEL_29:
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = 22;
  else
    v13 = (v35.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  else
    size = v35.__r_.__value_.__l.__size_;
  if (v13 - size < 0xF)
  {
    std::string::__grow_by_and_replace(&v35, v13, size - v13 + 15, size, size, 0, 0xFuLL, "EchoController;");
    goto LABEL_37;
  }
  v15 = &v35;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((char *)v15 + size <= "EchoController;"
    && (char *)&v15->__r_.__value_.__r.__words[1] + size + 7 > "EchoController;")
  {
    goto LABEL_96;
  }
  qmemcpy((char *)v15 + size, "EchoController;", 15);
  v17 = size + 15;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    v35.__r_.__value_.__l.__size_ = size + 15;
    v15->__r_.__value_.__s.__data_[v17] = 0;
    if (!*((_BYTE *)this + 584))
      goto LABEL_67;
  }
  else
  {
    *((_BYTE *)&v35.__r_.__value_.__s + 23) = v17 & 0x7F;
    v15->__r_.__value_.__s.__data_[v17] = 0;
    if (!*((_BYTE *)this + 584))
      goto LABEL_67;
  }
LABEL_49:
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = 22;
  else
    v18 = (v35.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  else
    v19 = v35.__r_.__value_.__l.__size_;
  if (v18 - v19 < 0x10)
  {
    std::string::__grow_by_and_replace(&v35, v18, v19 - v18 + 16, v19, v19, 0, 0x10uLL, "GainController2;");
    goto LABEL_67;
  }
  v20 = &v35;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((char *)v20 + v19 <= "GainController2;" && (char *)&v20->__r_.__value_.__r.__words[2] + v19 > "GainController2;")
  {
LABEL_96:
    __break(1u);
    return;
  }
  *(_OWORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = *(_OWORD *)"GainController2;";
  v22 = v19 + 16;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    v35.__r_.__value_.__l.__size_ = v19 + 16;
  else
    *((_BYTE *)&v35.__r_.__value_.__s + 23) = v22 & 0x7F;
  v20->__r_.__value_.__s.__data_[v22] = 0;
LABEL_67:
  *(_QWORD *)&v31 = 0;
  DWORD1(v32) = 0;
  LOWORD(v33) = 0;
  BYTE2(v33) = 0;
  HIDWORD(v33) = 1065353216;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  LOBYTE(v31) = *((_BYTE *)this + 482);
  v23 = *((_QWORD *)this + 89);
  BYTE8(v31) = v23 != 0;
  if (v23)
  {
    v24 = *(_BYTE *)(v23 + 4);
    LODWORD(v23) = *(_DWORD *)v23;
  }
  else
  {
    v24 = 0;
  }
  BYTE9(v31) = v24;
  HIDWORD(v31) = v23;
  v25 = *((_QWORD *)this + 84);
  LOBYTE(v32) = v25 != 0;
  if (v25)
  {
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
    v25 = *((_QWORD *)this + 84);
    DWORD1(v32) = v26;
    if (v25)
      LOBYTE(v25) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
  }
  BYTE8(v32) = v25;
  BYTE1(v33) = *((_QWORD *)this + 83) != 0;
  BYTE9(v32) = *((_BYTE *)this + 480);
  BYTE10(v32) = *((_BYTE *)this + 488);
  HIDWORD(v32) = *((_DWORD *)this + 123);
  LOBYTE(v33) = *((_BYTE *)this + 500);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__assign_no_alias<true>(&__p, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    BYTE2(v33) = *((_BYTE *)this + 452);
    HIDWORD(v33) = *((_DWORD *)this + 114);
    if ((a2 & 1) != 0)
      goto LABEL_78;
  }
  else
  {
    __p = v35;
    BYTE2(v33) = *((_BYTE *)this + 452);
    HIDWORD(v33) = *((_DWORD *)this + 114);
    if ((a2 & 1) != 0)
      goto LABEL_78;
  }
  if (webrtc::InternalAPMConfig::operator==((unsigned __int8 *)&v31, (unsigned __int8 *)this + 248))
    goto LABEL_90;
LABEL_78:
  (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)this + 30) + 96))(*((_QWORD *)this + 30), &v31);
  v27 = v32;
  *(_OWORD *)((char *)this + 248) = v31;
  *(_OWORD *)((char *)this + 264) = v27;
  *((_QWORD *)this + 35) = v33;
  if ((__int128 *)((char *)this + 248) == &v31)
    goto LABEL_90;
  v28 = (std::string *)((char *)this + 288);
  if (*((char *)this + 311) < 0)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v30 = __p.__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>(v28, (const std::string::value_type *)p_p, v30);
LABEL_90:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_94;
    goto LABEL_91;
  }
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_94:
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_95:
      operator delete(v35.__r_.__value_.__l.__data_);
      return;
    }
LABEL_91:
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_95;
  }
  *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 38) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_95;
}

uint64_t webrtc::AudioProcessingImpl::DetachAecDump(webrtc::AudioProcessingImpl *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (pthread_mutex_t *)((char *)this + 312);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 312));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 376));
  result = pthread_mutex_unlock(v2);
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

uint64_t webrtc::AudioProcessingImpl::GetConfig@<X0>(webrtc::AudioProcessingImpl *this@<X0>, _OWORD *a2@<X8>)
{
  pthread_mutex_t *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = (pthread_mutex_t *)((char *)this + 312);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 312));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
  v5 = *(_OWORD *)((char *)this + 584);
  a2[8] = *(_OWORD *)((char *)this + 568);
  a2[9] = v5;
  a2[10] = *(_OWORD *)((char *)this + 600);
  v6 = *(_OWORD *)((char *)this + 520);
  a2[4] = *(_OWORD *)((char *)this + 504);
  a2[5] = v6;
  v7 = *(_OWORD *)((char *)this + 552);
  a2[6] = *(_OWORD *)((char *)this + 536);
  a2[7] = v7;
  v8 = *(_OWORD *)((char *)this + 456);
  *a2 = *(_OWORD *)((char *)this + 440);
  a2[1] = v8;
  v9 = *(_OWORD *)((char *)this + 488);
  a2[2] = *(_OWORD *)((char *)this + 472);
  a2[3] = v9;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 376));
  return pthread_mutex_unlock(v4);
}

void webrtc::NoiseSuppressor::~NoiseSuppressor(webrtc::NoiseSuppressor *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = (_QWORD *)*((_QWORD *)this + 23);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 24);
    v4 = (void *)*((_QWORD *)this + 23);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = *(void **)(v5 + 22032);
          if (v7)
          {
            *(_QWORD *)(v5 + 22040) = v7;
            operator delete(v7);
          }
          MEMORY[0x20BD0ADEC](v5, 0x1060C409552E4C7);
        }
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 23);
    }
    *((_QWORD *)this + 24) = v2;
    operator delete(v4);
  }
  v8 = (void *)*((_QWORD *)this + 20);
  if (v8)
  {
    *((_QWORD *)this + 21) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 17);
  if (v9)
  {
    *((_QWORD *)this + 18) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 14);
  if (v10)
  {
    *((_QWORD *)this + 15) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 11);
  if (v11)
  {
    *((_QWORD *)this + 12) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 7);
  if (v12)
  {
    *((_QWORD *)this + 8) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 4);
  if (v13)
  {
    *((_QWORD *)this + 5) = v13;
    operator delete(v13);
  }
}

void std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy(a1, *((_QWORD *)a2 + 1));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(a2 + 80), *((_QWORD *)a2 + 11));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

uint64_t webrtc::`anonymous namespace'::CreateChannelReceive(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  void (***v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  void (***v16)(_QWORD);
  void (***v17)(_QWORD);
  uint64_t result;
  uint64_t v19;
  int v20;
  int v21;
  void (***v25)(_QWORD);
  void (***v26)(_QWORD);
  void (***v27)(_QWORD);

  v20 = *(_DWORD *)a5;
  v21 = *(_DWORD *)(a5 + 4);
  v9 = *(_QWORD *)(a5 + 16);
  v19 = *(_QWORD *)(a5 + 24);
  v10 = *(unsigned __int8 *)(a5 + 32);
  v11 = *(_DWORD *)(a5 + 36);
  v12 = *(unsigned __int8 *)(a5 + 12);
  v13 = *(void (****)(_QWORD))(a5 + 88);
  v27 = v13;
  if (v13)
    (**v13)(v13);
  v14 = *(_QWORD *)(a5 + 96);
  v15 = *(_QWORD *)(a5 + 104);
  v16 = *(void (****)(_QWORD))(a5 + 120);
  v26 = v16;
  if (v16)
    (**v16)(v16);
  v17 = *(void (****)(_QWORD))(a5 + 128);
  v25 = v17;
  if (v17)
    (**v17)(v17);
  webrtc::voe::CreateChannelReceive(a2, a4, a3, v9, a6, v21, v20, v19, a1, v10 != 0, v11, v12 != 0, (uint64_t *)&v27, v14, v15, (uint64_t *)&v26, a5 + 112, (uint64_t *)&v25);
  if (v25)
    (*v25)[1](v25);
  if (v26)
    (*v26)[1](v26);
  result = (uint64_t)v27;
  if (v27)
    return ((uint64_t (*)(uint64_t))(*v27)[1])((uint64_t)v27);
  return result;
}

uint64_t webrtc::AudioReceiveStreamImpl::AudioReceiveStreamImpl(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, void (****a5)(_QWORD), uint64_t a6, uint64_t *a7)
{
  __int128 v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  void (***v17)(_QWORD);
  void (***v18)(_QWORD);
  void (***v19)(_QWORD);
  void (***v20)(_QWORD);
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)a1 = &off_24C0AE470;
  *(_QWORD *)(a1 + 8) = &unk_24C0AE548;
  *(_QWORD *)(a1 + 16) = &unk_24C0AE580;
  v13 = *a4;
  v14 = a4[1];
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 4);
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 24) = v13;
  v15 = (std::string *)(a1 + 64);
  if (*((char *)a4 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)a4 + 5), *((_QWORD *)a4 + 6));
  }
  else
  {
    v16 = *(__int128 *)((char *)a4 + 40);
    v15->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 7);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  std::map<int,webrtc::SdpAudioFormat>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::SdpAudioFormat>,std::__tree_node<std::__value_type<int,webrtc::SdpAudioFormat>,void *> *,long>>>((uint64_t *)(a1 + 88), *((_QWORD **)a4 + 8), (_QWORD *)a4 + 9);
  v17 = (void (***)(_QWORD))*((_QWORD *)a4 + 11);
  *(_QWORD *)(a1 + 112) = v17;
  if (v17)
    (**v17)(v17);
  *(_OWORD *)(a1 + 120) = a4[6];
  *(_DWORD *)(a1 + 136) = 65537;
  *(_BYTE *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a4 + 28);
  *(_BYTE *)(a1 + 140) = *((_BYTE *)a4 + 116);
  v18 = (void (***)(_QWORD))*((_QWORD *)a4 + 15);
  *(_QWORD *)(a1 + 144) = v18;
  if (v18)
    (**v18)(v18);
  v19 = (void (***)(_QWORD))*((_QWORD *)a4 + 16);
  *(_QWORD *)(a1 + 152) = v19;
  if (v19)
    (**v19)(v19);
  v20 = *a5;
  *(_QWORD *)(a1 + 160) = *a5;
  if (v20)
    (**v20)(v20);
  *(_QWORD *)(a1 + 176) = a2;
  *(_QWORD *)(a1 + 184) = a1 + 184;
  *(_QWORD *)(a1 + 192) = a1 + 184;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 1065353216;
  v21 = operator new();
  *(_DWORD *)v21 = 0;
  *(_BYTE *)(v21 + 4) = 1;
  *(_QWORD *)(a1 + 248) = v21;
  do
    v22 = __ldxr((unsigned int *)v21);
  while (__stxr(v22 + 1, (unsigned int *)v21));
  v23 = *a7;
  *a7 = 0;
  *(_QWORD *)(a1 + 256) = v23;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_receive_stream.cc");
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 256) + 184))(*(_QWORD *)(a1 + 256), a3);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 256) + 240))(*(_QWORD *)(a1 + 256), a1 + 168);
  (*(void (**)(_QWORD, BOOL, _QWORD))(**(_QWORD **)(a1 + 256) + 208))(*(_QWORD *)(a1 + 256), *((_DWORD *)a4 + 2) != 0, (*((_DWORD *)a4 + 2) / 20));
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 256) + 32))(*(_QWORD *)(a1 + 256), a4 + 4);
  return a1;
}

void webrtc::AudioReceiveStreamImpl::~AudioReceiveStreamImpl(webrtc::AudioReceiveStreamImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  webrtc::AudioReceiveStreamImpl *v38;
  uint64_t v39;
  uint64_t v40;
  webrtc::AudioReceiveStreamImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_receive_stream.cc");
  if (*((_BYTE *)this + 272))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_receive_stream.cc");
    (*(void (**)(_QWORD))(**((_QWORD **)this + 32) + 48))(*((_QWORD *)this + 32));
    *((_BYTE *)this + 272) = 0;
    v16 = *((_QWORD *)this + 20);
    v17 = *(char **)(v16 + 15808);
    v18 = *(char **)(v16 + 15816);
    if (v18 == v17)
    {
      v20 = *(char **)(v16 + 15816);
      v25 = v20;
    }
    else
    {
      v19 = (v18 - v17) >> 3;
      v20 = *(char **)(v16 + 15808);
      do
      {
        v21 = v19 >> 1;
        v22 = (unint64_t *)&v20[8 * (v19 >> 1)];
        v24 = *v22;
        v23 = (char *)(v22 + 1);
        v19 += ~(v19 >> 1);
        if (v24 < (unint64_t)this)
          v20 = v23;
        else
          v19 = v21;
      }
      while (v19);
      v25 = v20;
      if (v18 != v20)
      {
        if (*(_QWORD *)v20 <= (unint64_t)this)
          v25 = v20 + 8;
        else
          v25 = v20;
      }
    }
    v26 = (v20 - v17) >> 3;
    v27 = (v25 - v17) >> 3;
    if (v27 < v26)
    {
      __break(1u);
      return;
    }
    if (v26 != v27)
    {
      v28 = v18 - v25;
      if (v18 != v25)
        memmove(v20, v25, v18 - v25);
      *(_QWORD *)(v16 + 15816) = &v20[v28];
    }
    if (this)
      v29 = (char *)this + 8;
    else
      v29 = 0;
    (*(void (**)(_QWORD, char *))(**(_QWORD **)(v16 + 16) + 40))(*(_QWORD *)(v16 + 16), v29);
    webrtc::internal::AudioState::UpdateNullAudioPollerState(v16);
    if (*(_QWORD *)(v16 + 15808) == *(_QWORD *)(v16 + 15816))
      (*(void (**)(_QWORD))(**(_QWORD **)(v16 + 32) + 192))(*(_QWORD *)(v16 + 32));
  }
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 32) + 248))(*((_QWORD *)this + 32), 0);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 32) + 192))(*((_QWORD *)this + 32));
  v30 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *((_QWORD *)this + 31);
  *(_BYTE *)(v32 + 4) = 0;
  do
  {
    v33 = __ldaxr((unsigned int *)v32);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, (unsigned int *)v32));
  if (!v34)
    MEMORY[0x20BD0ADEC]();
  v35 = (_QWORD *)*((_QWORD *)this + 28);
  if (v35)
  {
    do
    {
      v36 = (_QWORD *)*v35;
      operator delete(v35);
      v35 = v36;
    }
    while (v36);
  }
  v37 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v37)
    operator delete(v37);
  if (*((_QWORD *)this + 25))
  {
    v39 = *((_QWORD *)this + 23);
    v38 = (webrtc::AudioReceiveStreamImpl *)*((_QWORD *)this + 24);
    v40 = *(_QWORD *)v38;
    *(_QWORD *)(v40 + 8) = *(_QWORD *)(v39 + 8);
    **(_QWORD **)(v39 + 8) = v40;
    *((_QWORD *)this + 25) = 0;
    if (v38 != (webrtc::AudioReceiveStreamImpl *)((char *)this + 184))
    {
      do
      {
        v41 = (webrtc::AudioReceiveStreamImpl *)*((_QWORD *)v38 + 1);
        operator delete(v38);
        v38 = v41;
      }
      while (v41 != (webrtc::AudioReceiveStreamImpl *)((char *)this + 184));
    }
  }
  v42 = *((_QWORD *)this + 20);
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *((_QWORD *)this + 19);
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *((_QWORD *)this + 18);
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *((_QWORD *)this + 14);
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy((uint64_t)this + 88, *((char **)this + 12));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
}

{
  webrtc::AudioReceiveStreamImpl::~AudioReceiveStreamImpl(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioReceiveStreamImpl::remote_ssrc(webrtc::AudioReceiveStreamImpl *this)
{
  return *((unsigned int *)this + 6);
}

unint64_t webrtc::AudioReceiveStreamImpl::Stop(unint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;

  if (*(_BYTE *)(this + 272))
  {
    v1 = this;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_receive_stream.cc");
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 256) + 48))(*(_QWORD *)(v1 + 256));
    *(_BYTE *)(v1 + 272) = 0;
    v9 = *(_QWORD *)(v1 + 160);
    v10 = *(_QWORD **)(v9 + 15808);
    v11 = *(unint64_t **)(v9 + 15816);
    if (v11 == v10)
    {
      v13 = *(unint64_t **)(v9 + 15816);
      v18 = v13;
    }
    else
    {
      v12 = v11 - v10;
      v13 = *(unint64_t **)(v9 + 15808);
      do
      {
        v14 = v12 >> 1;
        v15 = &v13[v12 >> 1];
        v17 = *v15;
        v16 = v15 + 1;
        v12 += ~(v12 >> 1);
        if (v17 < v1)
          v13 = v16;
        else
          v12 = v14;
      }
      while (v12);
      v18 = v13;
      if (v11 != v13)
      {
        if (*v13 <= v1)
          v18 = v13 + 1;
        else
          v18 = v13;
      }
    }
    v19 = v13 - v10;
    v20 = v18 - v10;
    if (v20 < v19)
    {
      __break(1u);
    }
    else
    {
      if (v19 != v20)
      {
        v21 = (char *)v11 - (char *)v18;
        if (v11 != v18)
          memmove(v13, v18, (char *)v11 - (char *)v18);
        *(_QWORD *)(v9 + 15816) = (char *)v13 + v21;
      }
      if (v1)
        v22 = v1 + 8;
      else
        v22 = 0;
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v9 + 16) + 40))(*(_QWORD *)(v9 + 16), v22);
      this = webrtc::internal::AudioState::UpdateNullAudioPollerState(v9);
      if (*(_QWORD *)(v9 + 15808) == *(_QWORD *)(v9 + 15816))
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 192))(*(_QWORD *)(v9 + 32));
    }
  }
  return this;
}

void `non-virtual thunk to'webrtc::AudioReceiveStreamImpl::~AudioReceiveStreamImpl(webrtc::AudioReceiveStreamImpl *this)
{
  webrtc::AudioReceiveStreamImpl::~AudioReceiveStreamImpl((webrtc::AudioReceiveStreamImpl *)((char *)this - 8));
}

{
  webrtc::AudioReceiveStreamImpl::~AudioReceiveStreamImpl((webrtc::AudioReceiveStreamImpl *)((char *)this - 16));
}

{
  webrtc::AudioReceiveStreamImpl::~AudioReceiveStreamImpl((webrtc::AudioReceiveStreamImpl *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::AudioReceiveStreamImpl::~AudioReceiveStreamImpl((webrtc::AudioReceiveStreamImpl *)((char *)this - 16));
  JUMPOUT(0x20BD0ADECLL);
}

unint64_t webrtc::AudioReceiveStreamImpl::Start(unint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!*(_BYTE *)(this + 272))
  {
    v1 = this;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_receive_stream.cc");
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 256) + 40))(*(_QWORD *)(v1 + 256));
    *(_BYTE *)(v1 + 272) = 1;
    return webrtc::internal::AudioState::AddReceivingStream(*(_QWORD *)(v1 + 160), v1);
  }
  return this;
}

uint64_t webrtc::AudioReceiveStreamImpl::IsRunning(webrtc::AudioReceiveStreamImpl *this)
{
  return *((unsigned __int8 *)this + 272);
}

uint64_t webrtc::AudioReceiveStreamImpl::SetDepacketizerToDecoderFrameTransformer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 256);
  v3 = *a2;
  *a2 = 0;
  v5 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 256))(v2, &v5);
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

uint64_t webrtc::AudioReceiveStreamImpl::SetDecoderMap(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (_QWORD *)(a1 + 96);
  v5 = (_QWORD *)(a1 + 88);
  std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy(a1 + 88, *(char **)(a1 + 96));
  *(v4 - 1) = *a2;
  v6 = a2 + 1;
  v7 = a2[1];
  *v4 = v7;
  v8 = a2[2];
  v4[1] = v8;
  if (v8)
  {
    *(_QWORD *)(v7 + 16) = v4;
    *a2 = v6;
    *v6 = 0;
    a2[2] = 0;
  }
  else
  {
    *v5 = v4;
  }
  return (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 256) + 32))(*(_QWORD *)(a1 + 256), v5);
}

uint64_t webrtc::AudioReceiveStreamImpl::SetNackHistory(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 32) != a2)
  {
    *(_DWORD *)(this + 32) = a2;
    return (*(uint64_t (**)(_QWORD, BOOL, _QWORD))(**(_QWORD **)(this + 256) + 208))(*(_QWORD *)(this + 256), a2 != 0, (a2 / 20));
  }
  return this;
}

uint64_t webrtc::AudioReceiveStreamImpl::SetNonSenderRttMeasurement(webrtc::AudioReceiveStreamImpl *this, char a2)
{
  *((_BYTE *)this + 36) = a2;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 216))(*((_QWORD *)this + 32));
}

uint64_t webrtc::AudioReceiveStreamImpl::SetFrameDecryptor(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 256);
  v3 = *a2;
  *a2 = 0;
  v5 = v3;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 264))(v2, &v5);
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

void webrtc::AudioReceiveStreamImpl::GetStats(webrtc::AudioReceiveStreamImpl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  const std::string::value_type *p_p;
  size_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  float32x4_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64x2_t v27;
  _OWORD v28[3];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 __p;
  uint64_t v35;
  int v36;
  uint64_t v37[3];
  char v38;
  uint64_t v39;
  __int128 v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;

  *(_QWORD *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  v6 = a3 + 72;
  *(_BYTE *)(a3 + 100) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  v7 = (unsigned int *)(a3 + 104);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_DWORD *)(a3 + 120) = -1;
  *(_BYTE *)(a3 + 304) = 0;
  *(_BYTE *)(a3 + 344) = 0;
  *(_BYTE *)(a3 + 352) = 0;
  *(_BYTE *)(a3 + 360) = 0;
  *(_BYTE *)(a3 + 368) = 0;
  *(_BYTE *)(a3 + 376) = 0;
  *(_BYTE *)(a3 + 416) = 0;
  *(_QWORD *)(a3 + 424) = 0;
  *(_DWORD *)(a3 + 432) = 0;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 281) = 0u;
  *(_QWORD *)(a3 + 320) = 0;
  *(_QWORD *)(a3 + 328) = 0;
  *(_QWORD *)(a3 + 312) = 0;
  *(_BYTE *)(a3 + 336) = 0;
  *(_QWORD *)(a3 + 392) = 0;
  *(_QWORD *)(a3 + 400) = 0;
  *(_QWORD *)(a3 + 384) = 0;
  *(_BYTE *)(a3 + 408) = 0;
  *(_DWORD *)a3 = *((_DWORD *)this + 6);
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 32) + 200))(&v39);
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 32) + 56))(&v33);
  if (!v38)
    return;
  *(_OWORD *)(a3 + 8) = v40;
  v8 = v39;
  *(_DWORD *)(a3 + 24) = v41;
  *(_DWORD *)(a3 + 48) = v8;
  *(_DWORD *)(a3 + 64) = v42;
  v9 = v44;
  *(_QWORD *)(a3 + 288) = v43;
  *(_QWORD *)(a3 + 296) = v9;
  *(_BYTE *)(a3 + 304) = v45;
  if ((__int128 *)v6 == &__p)
  {
LABEL_14:
    if (!v38)
      goto LABEL_27;
    goto LABEL_15;
  }
  if (*(char *)(a3 + 95) < 0)
  {
    if (v35 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v35 >= 0)
      v11 = HIBYTE(v35);
    else
      v11 = *((_QWORD *)&__p + 1);
    std::string::__assign_no_alias<false>((std::string *)v6, p_p, v11);
    goto LABEL_14;
  }
  if ((v35 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)v6 = __p;
    *(_QWORD *)(v6 + 16) = v35;
    if (!v38)
      goto LABEL_27;
    goto LABEL_15;
  }
  std::string::__assign_no_alias<true>((_QWORD *)v6, (char *)__p, *((size_t *)&__p + 1));
  if (!v38)
  {
LABEL_27:
    __break(1u);
    return;
  }
LABEL_15:
  v12 = v36;
  *(_DWORD *)(a3 + 96) = v33;
  *(_BYTE *)(a3 + 100) = 1;
  if (v12 >= 1000)
    *v7 = HIDWORD(v39) / (v12 / 0x3E8u);
  *(_DWORD *)(a3 + 116) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 120))(*((_QWORD *)this + 32));
  *(_DWORD *)(a3 + 120) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 80))(*((_QWORD *)this + 32));
  *(double *)(a3 + 128) = (*(double (**)(_QWORD))(**((_QWORD **)this + 32) + 88))(*((_QWORD *)this + 32));
  *(double *)(a3 + 144) = (*(double (**)(_QWORD))(**((_QWORD **)this + 32) + 96))(*((_QWORD *)this + 32));
  v13 = *((_QWORD *)this + 32);
  if (rtc::g_clock)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v14 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
        / dword_253EA791C;
  }
  *(_QWORD *)(a3 + 336) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 152))(v13, v14 / 1000000);
  *(_BYTE *)(a3 + 344) = v15;
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  memset(v28, 0, sizeof(v28));
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 32) + 104))(&v24, *((_QWORD *)this + 32), a2);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)((char *)&v28[1] + 8);
  *(_OWORD *)(a3 + 152) = v25;
  *(double *)(a3 + 176) = (double)*((unint64_t *)&v26 + 1) / 1000.0;
  v16 = *(_OWORD *)((char *)v28 + 8);
  *(float64x2_t *)(a3 + 192) = vdivq_f64(vcvtq_f64_u64(v27), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL));
  *(_OWORD *)(a3 + 208) = v16;
  v17 = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)vzip1_s32(*(int32x2_t *)&v29, *(int32x2_t *)((char *)&v29 + 8)))), (float32x4_t)vdupq_n_s32(0x38800000u));
  *(float32x4_t *)(a3 + 224) = v17;
  v17.i16[0] = WORD3(v29);
  LOWORD(v18) = WORD2(v29);
  *(_QWORD *)(a3 + 56) = *((_QWORD *)&v28[2] + 1);
  v19 = WORD1(v24);
  *(_DWORD *)(a3 + 108) = (unsigned __int16)v24;
  *(_DWORD *)(a3 + 112) = v19;
  *(_QWORD *)(a3 + 136) = *((_QWORD *)&v24 + 1);
  *(_QWORD *)(a3 + 168) = v26;
  *(_QWORD *)(a3 + 184) = *(_QWORD *)&v28[0];
  *(float *)(a3 + 240) = (float)v17.u32[0] * 0.000061035;
  *(float *)(a3 + 244) = (float)v18 * 0.000061035;
  v20 = v31;
  *(_QWORD *)(a3 + 312) = *((_QWORD *)&v30 + 1);
  *(_QWORD *)(a3 + 248) = v20;
  *(_QWORD *)&v16 = v32;
  *(double *)(a3 + 320) = (double)*((unint64_t *)&v31 + 1) / 1000.0;
  *(_QWORD *)(a3 + 328) = v16;
  (*(void (**)(_OWORD *__return_ptr))(**((_QWORD **)this + 32) + 112))(v23);
  v21 = v23[1];
  *(_OWORD *)(a3 + 256) = v23[0];
  *(_OWORD *)(a3 + 272) = v21;
  *(_QWORD *)(a3 + 352) = v46;
  *(_BYTE *)(a3 + 360) = v47;
  *(_QWORD *)(a3 + 368) = v48;
  *(_BYTE *)(a3 + 376) = v49;
  *(_OWORD *)(a3 + 384) = v50;
  *(_BYTE *)(a3 + 416) = v53;
  v22 = v52;
  *(_QWORD *)(a3 + 400) = v51;
  *(_QWORD *)(a3 + 408) = v22;
  *(_DWORD *)(a3 + 432) = v55;
  *(_QWORD *)(a3 + 424) = v54;
  if (v38)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v37, v37[1]);
    if (SHIBYTE(v35) < 0)
      operator delete((void *)__p);
  }
}

uint64_t webrtc::AudioReceiveStreamImpl::SetSink(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 24))(*(_QWORD *)(a1 + 256));
}

uint64_t webrtc::AudioReceiveStreamImpl::SetGain(webrtc::AudioReceiveStreamImpl *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 32) + 72))(*((_QWORD *)this + 32), a2);
}

uint64_t webrtc::AudioReceiveStreamImpl::SetBaseMinimumPlayoutDelayMs(webrtc::AudioReceiveStreamImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 160))(*((_QWORD *)this + 32));
}

uint64_t webrtc::AudioReceiveStreamImpl::GetBaseMinimumPlayoutDelayMs(webrtc::AudioReceiveStreamImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 168))(*((_QWORD *)this + 32));
}

void webrtc::AudioReceiveStreamImpl::GetSources(webrtc::AudioReceiveStreamImpl *this@<X0>, uint64_t a2@<X8>)
{
  webrtc::SourceTracker::GetSources((webrtc::AudioReceiveStreamImpl *)((char *)this + 168), a2);
}

uint64_t webrtc::AudioReceiveStreamImpl::GetAudioFrameWithInfo(webrtc::AudioReceiveStreamImpl *this, int a2, webrtc::AudioFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v8;
  unsigned int *v9;
  unsigned int v10;
  RtpPacketInfos v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unsigned int *v20;

  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 224))(*((_QWORD *)this + 32));
  if ((_DWORD)v5 == 2)
    return v5;
  v6 = *((_QWORD *)a3 + 8);
  if (v6)
  {
    if (*(_QWORD *)(v6 + 8) == *(_QWORD *)(v6 + 16))
      return v5;
  }
  else
  {
    {
      v19 = operator new();
      *(_QWORD *)(v19 + 8) = 0;
      *(_QWORD *)(v19 + 16) = 0;
      *(_QWORD *)v19 = 0;
      webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v19;
    }
    if (*(_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value == *((_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value
                                                                          + 1))
      return v5;
  }
  v9 = (unsigned int *)*((_QWORD *)a3 + 8);
  v20 = v9;
  if (v9)
  {
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11.var0.var0 = (Data *)&v20;
  webrtc::SourceTracker::OnFrameDelivered((webrtc::AudioReceiveStreamImpl *)((char *)this + 168), v11);
  v12 = v20;
  if (!v20)
    return v5;
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (v14)
    return v5;
  v15 = *((_QWORD *)v12 + 1);
  if (v15)
  {
    v16 = *((_QWORD *)v12 + 2);
    v17 = (void *)*((_QWORD *)v12 + 1);
    if (v16 != v15)
    {
      do
      {
        v18 = *(void **)(v16 - 96);
        if (v18)
        {
          *(_QWORD *)(v16 - 88) = v18;
          operator delete(v18);
        }
        v16 -= 104;
      }
      while (v16 != v15);
      v17 = (void *)*((_QWORD *)v12 + 1);
    }
    *((_QWORD *)v12 + 2) = v15;
    operator delete(v17);
  }
  MEMORY[0x20BD0ADEC](v12, 0x1020C40E72D6CFBLL);
  return v5;
}

uint64_t `non-virtual thunk to'webrtc::AudioReceiveStreamImpl::GetAudioFrameWithInfo(webrtc::AudioReceiveStreamImpl *this, int a2, webrtc::AudioFrame *a3)
{
  return webrtc::AudioReceiveStreamImpl::GetAudioFrameWithInfo((webrtc::AudioReceiveStreamImpl *)((char *)this - 8), a2, a3);
}

uint64_t webrtc::AudioReceiveStreamImpl::Ssrc(webrtc::AudioReceiveStreamImpl *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t `non-virtual thunk to'webrtc::AudioReceiveStreamImpl::Ssrc(webrtc::AudioReceiveStreamImpl *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t webrtc::AudioReceiveStreamImpl::PreferredSampleRate(webrtc::AudioReceiveStreamImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 232))(*((_QWORD *)this + 32));
}

uint64_t `non-virtual thunk to'webrtc::AudioReceiveStreamImpl::PreferredSampleRate(webrtc::AudioReceiveStreamImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 31) + 232))(*((_QWORD *)this + 31));
}

uint64_t webrtc::AudioReceiveStreamImpl::id(webrtc::AudioReceiveStreamImpl *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t `non-virtual thunk to'webrtc::AudioReceiveStreamImpl::id(webrtc::AudioReceiveStreamImpl *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t webrtc::AudioReceiveStreamImpl::GetInfo(webrtc::AudioReceiveStreamImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 176))(*((_QWORD *)this + 32));
}

uint64_t `non-virtual thunk to'webrtc::AudioReceiveStreamImpl::GetInfo(webrtc::AudioReceiveStreamImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 176))(*((_QWORD *)this + 30));
}

uint64_t webrtc::AudioReceiveStreamImpl::GetPlayoutRtpTimestamp(webrtc::AudioReceiveStreamImpl *this, unsigned int *a2, uint64_t *a3)
{
  return (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t *))(**((_QWORD **)this + 32) + 136))(*((_QWORD *)this + 32), a2, a3);
}

uint64_t `non-virtual thunk to'webrtc::AudioReceiveStreamImpl::GetPlayoutRtpTimestamp(webrtc::AudioReceiveStreamImpl *this, unsigned int *a2, uint64_t *a3)
{
  return (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t *))(**((_QWORD **)this + 30) + 136))(*((_QWORD *)this + 30), a2, a3);
}

uint64_t webrtc::AudioReceiveStreamImpl::SetEstimatedPlayoutNtpTimestampMs(webrtc::AudioReceiveStreamImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 144))(*((_QWORD *)this + 32));
}

uint64_t `non-virtual thunk to'webrtc::AudioReceiveStreamImpl::SetEstimatedPlayoutNtpTimestampMs(webrtc::AudioReceiveStreamImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 144))(*((_QWORD *)this + 30));
}

uint64_t webrtc::AudioReceiveStreamImpl::SetMinimumPlayoutDelay(webrtc::AudioReceiveStreamImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 128))(*((_QWORD *)this + 32));
}

uint64_t `non-virtual thunk to'webrtc::AudioReceiveStreamImpl::SetMinimumPlayoutDelay(webrtc::AudioReceiveStreamImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 30) + 128))(*((_QWORD *)this + 30));
}

uint64_t *std::map<int,webrtc::SdpAudioFormat>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::SdpAudioFormat>,std::__tree_node<std::__value_type<int,webrtc::SdpAudioFormat>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  __int128 v14;
  void **v15;
  _QWORD **v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  const void **v22;
  _QWORD *v23;
  const void **v24;
  char *v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  uint64_t *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char **v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54[13];

  if (a2 != a3)
  {
    v54[11] = v3;
    v54[12] = v4;
    v5 = a3;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    v48 = result;
    v47 = result + 1;
    while (1)
    {
      result = std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::__find_equal<int>(v7, v8, &v52, &v51, (int *)v6 + 8);
      if (*result)
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_14;
        goto LABEL_16;
      }
      v10 = result;
      v11 = (char *)operator new(0x68uLL);
      *((_DWORD *)v11 + 8) = *((_DWORD *)v6 + 8);
      v12 = (std::string *)(v11 + 40);
      v50 = v10;
      if (*((char *)v6 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v6[5], v6[6]);
      }
      else
      {
        v13 = *(_OWORD *)(v6 + 5);
        *((_QWORD *)v11 + 7) = v6[7];
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v14 = *((_OWORD *)v6 + 4);
      *((_QWORD *)v11 + 11) = 0;
      v15 = (void **)(v11 + 88);
      *((_QWORD *)v11 + 10) = v11 + 88;
      v16 = (_QWORD **)(v11 + 80);
      *((_OWORD *)v11 + 4) = v14;
      *((_QWORD *)v11 + 12) = 0;
      v17 = (_QWORD *)v6[10];
      if (v17 != v6 + 11)
        break;
LABEL_11:
      v18 = v52;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = v18;
      *v50 = (uint64_t)v11;
      v7 = v48;
      v19 = *(_QWORD *)*v48;
      if (v19)
      {
        *v48 = v19;
        v11 = (char *)*v50;
      }
      result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v48[1], (uint64_t *)v11);
      ++v48[2];
      v5 = a3;
      v8 = v47;
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
LABEL_14:
          v20 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
        goto LABEL_3;
      }
      do
      {
LABEL_16:
        v20 = (_QWORD *)v6[2];
        v21 = *v20 == (_QWORD)v6;
        v6 = v20;
      }
      while (!v21);
LABEL_3:
      v6 = v20;
      if (v20 == v5)
        return result;
    }
LABEL_20:
    v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)v11 + 10, (uint64_t *)v11 + 11, v54, &v53, (uint64_t)(v17 + 4));
    if (*v22)
    {
      v23 = (_QWORD *)v17[1];
      if (!v23)
        goto LABEL_54;
      goto LABEL_48;
    }
    v24 = v22;
    v25 = (char *)operator new(0x50uLL);
    v26 = (std::string *)(v25 + 32);
    if (*((char *)v17 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(v26, (const std::string::value_type *)v17[4], v17[5]);
      v28 = (std::string *)(v25 + 56);
      if ((*((char *)v17 + 79) & 0x80000000) == 0)
        goto LABEL_25;
    }
    else
    {
      v27 = *((_OWORD *)v17 + 2);
      *((_QWORD *)v25 + 6) = v17[6];
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      v28 = (std::string *)(v25 + 56);
      if ((*((char *)v17 + 79) & 0x80000000) == 0)
      {
LABEL_25:
        v29 = *(_OWORD *)(v17 + 7);
        v28->__r_.__value_.__r.__words[2] = v17[9];
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
        goto LABEL_28;
      }
    }
    std::string::__init_copy_ctor_external(v28, (const std::string::value_type *)v17[7], v17[8]);
LABEL_28:
    v30 = v54[0];
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = v30;
    *v24 = v25;
    v31 = (_QWORD *)**v16;
    if (v31)
    {
      *v16 = v31;
      v25 = (char *)*v24;
    }
    v32 = (char *)*v15;
    v21 = v25 == *v15;
    v25[24] = v21;
    if (v21)
    {
LABEL_47:
      ++*((_QWORD *)v11 + 12);
      v23 = (_QWORD *)v17[1];
      if (!v23)
        goto LABEL_54;
      goto LABEL_48;
    }
    while (1)
    {
      v33 = *((_QWORD *)v25 + 2);
      if (*(_BYTE *)(v33 + 24))
        goto LABEL_47;
      v34 = *(char **)(v33 + 16);
      v35 = *(_QWORD *)v34;
      if (*(_QWORD *)v34 == v33)
      {
        v38 = *((_QWORD *)v34 + 1);
        if (!v38 || (v39 = *(unsigned __int8 *)(v38 + 24), v36 = (_BYTE *)(v38 + 24), v39))
        {
          if (*(char **)v33 == v25)
          {
            *(_BYTE *)(v33 + 24) = 1;
            v34[24] = 0;
            v42 = *(_QWORD *)(v33 + 8);
            *(_QWORD *)v34 = v42;
            if (v42)
              goto LABEL_45;
          }
          else
          {
            v40 = *(uint64_t **)(v33 + 8);
            v41 = *v40;
            *(_QWORD *)(v33 + 8) = *v40;
            if (v41)
            {
              *(_QWORD *)(v41 + 16) = v33;
              v34 = *(char **)(v33 + 16);
            }
            v40[2] = (uint64_t)v34;
            *(_QWORD *)(*(_QWORD *)(v33 + 16) + 8 * (**(_QWORD **)(v33 + 16) != v33)) = v40;
            *v40 = v33;
            *(_QWORD *)(v33 + 16) = v40;
            v34 = (char *)v40[2];
            v33 = *(_QWORD *)v34;
            *((_BYTE *)v40 + 24) = 1;
            v34[24] = 0;
            v42 = *(_QWORD *)(v33 + 8);
            *(_QWORD *)v34 = v42;
            if (v42)
LABEL_45:
              *(_QWORD *)(v42 + 16) = v34;
          }
          *(_QWORD *)(v33 + 16) = *((_QWORD *)v34 + 2);
          *(_QWORD *)(*((_QWORD *)v34 + 2) + 8 * (**((_QWORD **)v34 + 2) != (_QWORD)v34)) = v33;
          *(_QWORD *)(v33 + 8) = v34;
          *((_QWORD *)v34 + 2) = v33;
          goto LABEL_47;
        }
      }
      else if (!v35 || (v37 = *(unsigned __int8 *)(v35 + 24), v36 = (_BYTE *)(v35 + 24), v37))
      {
        if (*(char **)v33 == v25)
        {
          v46 = *((_QWORD *)v25 + 1);
          *(_QWORD *)v33 = v46;
          if (v46)
          {
            *(_QWORD *)(v46 + 16) = v33;
            v34 = *(char **)(v33 + 16);
          }
          *((_QWORD *)v25 + 2) = v34;
          *(_QWORD *)(*(_QWORD *)(v33 + 16) + 8 * (**(_QWORD **)(v33 + 16) != v33)) = v25;
          *((_QWORD *)v25 + 1) = v33;
          *(_QWORD *)(v33 + 16) = v25;
          v34 = (char *)*((_QWORD *)v25 + 2);
          v25[24] = 1;
          v34[24] = 0;
          v44 = (char **)*((_QWORD *)v34 + 1);
          v45 = *v44;
          *((_QWORD *)v34 + 1) = *v44;
          if (v45)
LABEL_52:
            *((_QWORD *)v45 + 2) = v34;
        }
        else
        {
          *(_BYTE *)(v33 + 24) = 1;
          v34[24] = 0;
          v44 = (char **)*((_QWORD *)v34 + 1);
          v45 = *v44;
          *((_QWORD *)v34 + 1) = *v44;
          if (v45)
            goto LABEL_52;
        }
        v44[2] = (char *)*((_QWORD *)v34 + 2);
        *(_QWORD *)(*((_QWORD *)v34 + 2) + 8 * (**((_QWORD **)v34 + 2) != (_QWORD)v34)) = v44;
        *v44 = v34;
        *((_QWORD *)v34 + 2) = v44;
        ++*((_QWORD *)v11 + 12);
        v23 = (_QWORD *)v17[1];
        if (!v23)
        {
          do
          {
LABEL_54:
            v43 = (_QWORD *)v17[2];
            v21 = *v43 == (_QWORD)v17;
            v17 = v43;
          }
          while (!v21);
          goto LABEL_19;
        }
        do
        {
LABEL_48:
          v43 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
LABEL_19:
        v17 = v43;
        if (v43 == v6 + 11)
          goto LABEL_11;
        goto LABEL_20;
      }
      *(_BYTE *)(v33 + 24) = 1;
      v25 = v34;
      v34[24] = v34 == v32;
      *v36 = 1;
      if (v34 == v32)
        goto LABEL_47;
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::__find_equal<int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,webrtc::SdpAudioFormat>,std::__tree_node<std::__value_type<int,webrtc::SdpAudioFormat>,void *> *,long>>(uint64_t a1, char **a2, char **a3)
{
  char **v3;
  uint64_t *v5;
  uint64_t v6;
  char ***v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  std::string *v13;
  char v14;
  __int128 v15;
  const std::string::value_type *v16;
  size_t v17;
  char **v18;
  char **v19;
  char **v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  char *v24;
  char *v25;
  char *i;
  char *v27;
  std::string *v28;
  __int128 v29;
  __int128 v30;
  void **v31;
  _QWORD **v32;
  char **v33;
  void **v34;
  void **v35;
  void **v36;
  const void **v37;
  char *v38;
  const void **v39;
  char *v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  uint64_t *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _BYTE *v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char **v58;
  char **v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char **v64;
  char *v65;
  void **v66;
  uint64_t v67;
  uint64_t *v69;
  uint64_t *v70;

  v3 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = *(uint64_t **)a1;
    v7 = (char ***)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v8 = v5[1] ? (char *)v5[1] : (char *)v5;
    if (v8)
    {
      v9 = (char *)*((_QWORD *)v8 + 2);
      if (v9)
      {
        v10 = *(char **)v9;
        if (*(char **)v9 == v8)
        {
          *(_QWORD *)v9 = 0;
          while (1)
          {
            v65 = (char *)*((_QWORD *)v9 + 1);
            if (!v65)
              break;
            do
            {
              v9 = v65;
              v65 = *(char **)v65;
            }
            while (v65);
          }
        }
        else
        {
          for (*((_QWORD *)v9 + 1) = 0; v10; v10 = (char *)*((_QWORD *)v9 + 1))
          {
            do
            {
              v9 = v10;
              v10 = *(char **)v10;
            }
            while (v10);
          }
        }
      }
      if (a2 != a3)
      {
        v11 = (char *)a2;
        v12 = v8;
        while (1)
        {
          v8 = v9;
          *((_DWORD *)v12 + 8) = *((_DWORD *)v11 + 8);
          if (v12 != v11)
          {
            v13 = (std::string *)(v12 + 40);
            v14 = v11[63];
            if (v12[63] < 0)
            {
              if (v14 >= 0)
                v16 = v11 + 40;
              else
                v16 = (const std::string::value_type *)*((_QWORD *)v11 + 5);
              if (v14 >= 0)
                v17 = v11[63];
              else
                v17 = *((_QWORD *)v11 + 6);
              std::string::__assign_no_alias<false>(v13, v16, v17);
            }
            else if (v11[63] < 0)
            {
              std::string::__assign_no_alias<true>(v13, *((char **)v11 + 5), *((_QWORD *)v11 + 6));
            }
            else
            {
              v15 = *(_OWORD *)(v11 + 40);
              *((_QWORD *)v12 + 7) = *((_QWORD *)v11 + 7);
              *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
            }
            *((_OWORD *)v12 + 4) = *((_OWORD *)v11 + 4);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)(v12 + 80), *((char **)v11 + 10), v11 + 88);
          }
          v18 = *v7;
          v19 = (char **)(a1 + 8);
          v20 = (char **)(a1 + 8);
          if (*v7)
            break;
LABEL_31:
          *(_QWORD *)v12 = 0;
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v12 + 2) = v19;
          *v20 = v12;
          v21 = **(_QWORD **)a1;
          if (v21)
            goto LABEL_32;
LABEL_33:
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), (uint64_t *)v12);
          ++*(_QWORD *)(a1 + 16);
          if (v9)
          {
            v9 = (char *)*((_QWORD *)v9 + 2);
            if (v9)
            {
              v24 = *(char **)v9;
              if (*(char **)v9 == v8)
              {
                *(_QWORD *)v9 = 0;
                while (1)
                {
                  v25 = (char *)*((_QWORD *)v9 + 1);
                  if (!v25)
                    break;
                  do
                  {
                    v9 = v25;
                    v25 = *(char **)v25;
                  }
                  while (v25);
                }
              }
              else
              {
                for (*((_QWORD *)v9 + 1) = 0; v24; v24 = (char *)*((_QWORD *)v9 + 1))
                {
                  do
                  {
                    v9 = v24;
                    v24 = *(char **)v24;
                  }
                  while (v24);
                }
              }
            }
          }
          else
          {
            v9 = 0;
          }
          v22 = (char *)*((_QWORD *)v11 + 1);
          if (v22)
          {
            do
            {
              v3 = (char **)v22;
              v22 = *(char **)v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v3 = (char **)*((_QWORD *)v11 + 2);
              v23 = *v3 == v11;
              v11 = (char *)v3;
            }
            while (!v23);
          }
          if (v8)
          {
            v11 = (char *)v3;
            v12 = v8;
            if (v3 != a3)
              continue;
          }
          goto LABEL_55;
        }
        do
        {
          while (1)
          {
            v19 = v18;
            if (*((_DWORD *)v12 + 8) >= *((_DWORD *)v18 + 8))
              break;
            v18 = (char **)*v18;
            v20 = v19;
            if (!*v19)
              goto LABEL_31;
          }
          v18 = (char **)v18[1];
        }
        while (v18);
        v20 = v19 + 1;
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *((_QWORD *)v12 + 2) = v19;
        v19[1] = v12;
        v21 = **(_QWORD **)a1;
        if (!v21)
          goto LABEL_33;
LABEL_32:
        *(_QWORD *)a1 = v21;
        v12 = *v20;
        goto LABEL_33;
      }
LABEL_55:
      std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy(a1, v8);
      if (v9)
      {
        for (i = (char *)*((_QWORD *)v9 + 2); i; i = (char *)*((_QWORD *)i + 2))
          v9 = i;
        std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy(a1, v9);
      }
    }
  }
  if (v3 != a3)
  {
    v66 = (void **)(a1 + 8);
    v67 = a1;
    while (1)
    {
      v27 = (char *)operator new(0x68uLL);
      *((_DWORD *)v27 + 8) = *((_DWORD *)v3 + 8);
      v28 = (std::string *)(v27 + 40);
      if (*((char *)v3 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(v28, v3[5], (std::string::size_type)v3[6]);
      }
      else
      {
        v29 = *(_OWORD *)(v3 + 5);
        *((_QWORD *)v27 + 7) = v3[7];
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      }
      v30 = *((_OWORD *)v3 + 4);
      *((_QWORD *)v27 + 11) = 0;
      v31 = (void **)(v27 + 88);
      *((_QWORD *)v27 + 10) = v27 + 88;
      v32 = (_QWORD **)(v27 + 80);
      *((_OWORD *)v27 + 4) = v30;
      *((_QWORD *)v27 + 12) = 0;
      v33 = (char **)v3[10];
      if (v33 != v3 + 11)
        break;
LABEL_66:
      v34 = v66;
      v35 = (void **)*v66;
      v36 = v66;
      if (*v66)
      {
        do
        {
          while (1)
          {
            v36 = v35;
            if (*((_DWORD *)v27 + 8) >= *((_DWORD *)v35 + 8))
              break;
            v35 = (void **)*v35;
            v34 = v36;
            if (!*v36)
              goto LABEL_115;
          }
          v35 = (void **)v35[1];
        }
        while (v35);
        v34 = v36 + 1;
        *(_QWORD *)v27 = 0;
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = v36;
        v36[1] = v27;
        v62 = **(_QWORD **)v67;
        if (!v62)
          goto LABEL_117;
LABEL_116:
        *(_QWORD *)v67 = v62;
        v27 = (char *)*v34;
        goto LABEL_117;
      }
LABEL_115:
      *(_QWORD *)v27 = 0;
      *((_QWORD *)v27 + 1) = 0;
      *((_QWORD *)v27 + 2) = v36;
      *v34 = v27;
      v62 = **(_QWORD **)v67;
      if (v62)
        goto LABEL_116;
LABEL_117:
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v67 + 8), (uint64_t *)v27);
      ++*(_QWORD *)(v67 + 16);
      v63 = v3[1];
      if (v63)
      {
        do
        {
          v64 = (char **)v63;
          v63 = *(char **)v63;
        }
        while (v63);
      }
      else
      {
        do
        {
          v64 = (char **)v3[2];
          v23 = *v64 == (char *)v3;
          v3 = v64;
        }
        while (!v23);
      }
      v3 = v64;
      if (v64 == a3)
        return;
    }
LABEL_69:
    v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)v27 + 10, (uint64_t *)v27 + 11, &v70, &v69, (uint64_t)(v33 + 4));
    if (*v37)
    {
      v38 = v33[1];
      if (!v38)
        goto LABEL_103;
      goto LABEL_97;
    }
    v39 = v37;
    v40 = (char *)operator new(0x50uLL);
    v41 = (std::string *)(v40 + 32);
    if (*((char *)v33 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(v41, v33[4], (std::string::size_type)v33[5]);
      v43 = (std::string *)(v40 + 56);
      if ((*((char *)v33 + 79) & 0x80000000) == 0)
        goto LABEL_74;
    }
    else
    {
      v42 = *((_OWORD *)v33 + 2);
      *((_QWORD *)v40 + 6) = v33[6];
      *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
      v43 = (std::string *)(v40 + 56);
      if ((*((char *)v33 + 79) & 0x80000000) == 0)
      {
LABEL_74:
        v44 = *(_OWORD *)(v33 + 7);
        v43->__r_.__value_.__r.__words[2] = (std::string::size_type)v33[9];
        *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v44;
        goto LABEL_77;
      }
    }
    std::string::__init_copy_ctor_external(v43, v33[7], (std::string::size_type)v33[8]);
LABEL_77:
    v45 = v70;
    *(_QWORD *)v40 = 0;
    *((_QWORD *)v40 + 1) = 0;
    *((_QWORD *)v40 + 2) = v45;
    *v39 = v40;
    v46 = (_QWORD *)**v32;
    if (v46)
    {
      *v32 = v46;
      v40 = (char *)*v39;
    }
    v47 = (char *)*v31;
    v23 = v40 == *v31;
    v40[24] = v23;
    if (v23)
    {
LABEL_96:
      ++*((_QWORD *)v27 + 12);
      v38 = v33[1];
      if (!v38)
        goto LABEL_103;
      goto LABEL_97;
    }
    while (1)
    {
      v48 = *((_QWORD *)v40 + 2);
      if (*(_BYTE *)(v48 + 24))
        goto LABEL_96;
      v49 = *(char **)(v48 + 16);
      v50 = *(_QWORD *)v49;
      if (*(_QWORD *)v49 == v48)
      {
        v53 = *((_QWORD *)v49 + 1);
        if (!v53 || (v54 = *(unsigned __int8 *)(v53 + 24), v51 = (_BYTE *)(v53 + 24), v54))
        {
          if (*(char **)v48 == v40)
          {
            *(_BYTE *)(v48 + 24) = 1;
            v49[24] = 0;
            v57 = *(_QWORD *)(v48 + 8);
            *(_QWORD *)v49 = v57;
            if (v57)
              goto LABEL_94;
          }
          else
          {
            v55 = *(uint64_t **)(v48 + 8);
            v56 = *v55;
            *(_QWORD *)(v48 + 8) = *v55;
            if (v56)
            {
              *(_QWORD *)(v56 + 16) = v48;
              v49 = *(char **)(v48 + 16);
            }
            v55[2] = (uint64_t)v49;
            *(_QWORD *)(*(_QWORD *)(v48 + 16) + 8 * (**(_QWORD **)(v48 + 16) != v48)) = v55;
            *v55 = v48;
            *(_QWORD *)(v48 + 16) = v55;
            v49 = (char *)v55[2];
            v48 = *(_QWORD *)v49;
            *((_BYTE *)v55 + 24) = 1;
            v49[24] = 0;
            v57 = *(_QWORD *)(v48 + 8);
            *(_QWORD *)v49 = v57;
            if (v57)
LABEL_94:
              *(_QWORD *)(v57 + 16) = v49;
          }
          *(_QWORD *)(v48 + 16) = *((_QWORD *)v49 + 2);
          *(_QWORD *)(*((_QWORD *)v49 + 2) + 8 * (**((_QWORD **)v49 + 2) != (_QWORD)v49)) = v48;
          *(_QWORD *)(v48 + 8) = v49;
          *((_QWORD *)v49 + 2) = v48;
          goto LABEL_96;
        }
      }
      else if (!v50 || (v52 = *(unsigned __int8 *)(v50 + 24), v51 = (_BYTE *)(v50 + 24), v52))
      {
        if (*(char **)v48 == v40)
        {
          v61 = *((_QWORD *)v40 + 1);
          *(_QWORD *)v48 = v61;
          if (v61)
          {
            *(_QWORD *)(v61 + 16) = v48;
            v49 = *(char **)(v48 + 16);
          }
          *((_QWORD *)v40 + 2) = v49;
          *(_QWORD *)(*(_QWORD *)(v48 + 16) + 8 * (**(_QWORD **)(v48 + 16) != v48)) = v40;
          *((_QWORD *)v40 + 1) = v48;
          *(_QWORD *)(v48 + 16) = v40;
          v49 = (char *)*((_QWORD *)v40 + 2);
          v40[24] = 1;
          v49[24] = 0;
          v59 = (char **)*((_QWORD *)v49 + 1);
          v60 = *v59;
          *((_QWORD *)v49 + 1) = *v59;
          if (v60)
LABEL_101:
            *((_QWORD *)v60 + 2) = v49;
        }
        else
        {
          *(_BYTE *)(v48 + 24) = 1;
          v49[24] = 0;
          v59 = (char **)*((_QWORD *)v49 + 1);
          v60 = *v59;
          *((_QWORD *)v49 + 1) = *v59;
          if (v60)
            goto LABEL_101;
        }
        v59[2] = (char *)*((_QWORD *)v49 + 2);
        *(_QWORD *)(*((_QWORD *)v49 + 2) + 8 * (**((_QWORD **)v49 + 2) != (_QWORD)v49)) = v59;
        *v59 = v49;
        *((_QWORD *)v49 + 2) = v59;
        ++*((_QWORD *)v27 + 12);
        v38 = v33[1];
        if (!v38)
        {
          do
          {
LABEL_103:
            v58 = (char **)v33[2];
            v23 = *v58 == (char *)v33;
            v33 = v58;
          }
          while (!v23);
          goto LABEL_68;
        }
        do
        {
LABEL_97:
          v58 = (char **)v38;
          v38 = *(char **)v38;
        }
        while (v38);
LABEL_68:
        v33 = v58;
        if (v58 == v3 + 11)
          goto LABEL_66;
        goto LABEL_69;
      }
      *(_BYTE *)(v48 + 24) = 1;
      v40 = v49;
      v49[24] = v49 == v47;
      *v51 = 1;
      if (v49 == v47)
        goto LABEL_96;
    }
  }
}

uint64_t webrtc::AudioRtpReceiver::AudioRtpReceiver(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, int a5, uint64_t a6)
{
  void **v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void **i;
  __int128 v19;
  void **v20;
  __int128 v21;
  void *__p;
  char *v23;

  v11 = *(void ***)a4;
  v20 = *(void ***)a4;
  v19 = *(_OWORD *)(a4 + 8);
  v21 = v19;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  webrtc::RtpReceiverInternal::CreateStreamsFromIds((uint64_t)&v20, &__p);
  webrtc::AudioRtpReceiver::AudioRtpReceiver(a1, a2, a3, (uint64_t)&__p, a5, a6);
  v12 = (char *)__p;
  if (__p)
  {
    v13 = v23;
    v14 = __p;
    if (v23 != __p)
    {
      do
      {
        v16 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        v15 = v16;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      while (v13 != v12);
      v14 = __p;
    }
    v23 = v12;
    operator delete(v14);
  }
  if (v11)
  {
    for (i = (void **)v19; i != v11; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v11);
  }
  return a1;
}

{
  char *v9;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  rtc::Thread *v17;
  unsigned int *v18;
  unsigned int v19;
  void *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  pthread_mutexattr_t v36;
  uint64_t v37;

  v9 = (char *)a3;
  v37 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = &unk_24C0AE6B0;
  v12 = a1 + 8;
  *(_QWORD *)a1 = &off_24C0AE5C8;
  *(_QWORD *)(a1 + 16) = &unk_24C0AE6D8;
  *(_QWORD *)(a1 + 24) = &unk_24C0AE7D8;
  *(_QWORD *)(a1 + 32) = a2;
  v13 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v14 = *a3;
    v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v15 = a5 ^ 1;
  v16 = operator new();
  *(_QWORD *)(v16 + 16) = v16 + 16;
  *(_QWORD *)(v16 + 24) = v16 + 16;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)v16 = &unk_24C0BB448;
  *(_QWORD *)(v16 + 8) = &unk_24C0BB4C8;
  *(_QWORD *)(v16 + 48) = a2;
  *(_DWORD *)(v16 + 56) = v15;
  *(_QWORD *)(v16 + 64) = v16 + 64;
  *(_QWORD *)(v16 + 72) = v16 + 64;
  *(_QWORD *)(v16 + 80) = 0;
  pthread_mutexattr_init(&v36);
  pthread_mutexattr_setpolicy_np(&v36, 3);
  pthread_mutex_init((pthread_mutex_t *)(v16 + 88), &v36);
  v17 = (rtc::Thread *)pthread_mutexattr_destroy(&v36);
  *(_QWORD *)(v16 + 152) = v16 + 152;
  *(_QWORD *)(v16 + 160) = v16 + 152;
  *(_QWORD *)(v16 + 168) = 0;
  *(_QWORD *)v16 = off_24C0AE800;
  *(_QWORD *)(v16 + 8) = &unk_24C0AE888;
  *(_DWORD *)(v16 + 180) = 0;
  v18 = (unsigned int *)(v16 + 180);
  *(_DWORD *)(v16 + 176) = 0;
  *(_QWORD *)(a1 + 64) = v16;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  v20 = rtc::Thread::Current(v17);
  if (v9[23] < 0)
  {
    v21 = *((_QWORD *)v9 + 1);
    if ((v21 & 0x8000000000000000) != 0 || (v9 = *(char **)v9, v21) && !v9)
      __break(1u);
  }
  else
  {
    v21 = v9[23];
  }
  v22 = *(_QWORD *)(a1 + 64);
  v36.__sig = v22;
  if (v22)
    (**(void (***)(uint64_t))v22)(v22);
  v23 = operator new();
  v24 = webrtc::AudioTrack::AudioTrack(v23, v9, v21, &v36);
  *(_QWORD *)v24 = off_24C0AEE00;
  *(_QWORD *)(v24 + 8) = &unk_24C0AEEA0;
  *(_QWORD *)(v24 + 80) = &unk_24C0AEED0;
  *(_DWORD *)(v24 + 100) = 0;
  v25 = (unsigned int *)(v24 + 100);
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  v27 = operator new();
  *(_QWORD *)(v27 + 16) = v20;
  *(_QWORD *)(v27 + 24) = v23;
  *(_QWORD *)v27 = off_24C0AE8B8;
  *(_QWORD *)(v27 + 8) = &unk_24C0AE950;
  *(_DWORD *)(v27 + 32) = 0;
  v28 = (unsigned int *)(v27 + 32);
  *(_QWORD *)(a1 + 72) = v27;
  do
    v29 = __ldxr(v28);
  while (__stxr(v29 + 1, v28));
  if (v22)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v27 = *(_QWORD *)(a1 + 72);
  }
  *(_QWORD *)(a1 + 80) = a6;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v27 + 24) + 48))(*(_QWORD *)(v27 + 24));
  *(_QWORD *)(a1 + 128) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  do
  {
    v30 = __ldaxr((unsigned int *)&webrtc::RtpReceiverInternal::GenerateUniqueId(void)::g_unique_id);
    v31 = v30 + 1;
  }
  while (__stlxr(v31, (unsigned int *)&webrtc::RtpReceiverInternal::GenerateUniqueId(void)::g_unique_id));
  *(_DWORD *)(a1 + 148) = v31;
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  v32 = operator new();
  *(_DWORD *)v32 = 0;
  *(_BYTE *)(v32 + 4) = 0;
  *(_QWORD *)(a1 + 192) = v32;
  do
    v33 = __ldxr((unsigned int *)v32);
  while (__stxr(v33 + 1, (unsigned int *)v32));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 112))(*(_QWORD *)(a1 + 72), a1);
  v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 72))(*(_QWORD *)(a1 + 72));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 56))(v34, v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, a4);
  return a1;
}

void webrtc::AudioRtpReceiver::~AudioRtpReceiver(webrtc::AudioRtpReceiver *this)
{
  char *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = &off_24C0AE5C8;
  *((_QWORD *)this + 1) = &unk_24C0AE6B0;
  v2 = (char *)this + 8;
  *((_QWORD *)this + 2) = &unk_24C0AE6D8;
  *((_QWORD *)this + 3) = &unk_24C0AE7D8;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 72))(*((_QWORD *)this + 9));
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 64))(v3, v2);
  (*(void (**)(_QWORD, webrtc::AudioRtpReceiver *))(**((_QWORD **)this + 9) + 120))(*((_QWORD *)this + 9), this);
  v4 = (unsigned int *)*((_QWORD *)this + 24);
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      MEMORY[0x20BD0ADEC]();
  }
  v7 = *((_QWORD *)this + 23);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 20);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 19);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 12);
  if (v10)
  {
    v11 = *((_QWORD *)this + 13);
    v12 = (void *)*((_QWORD *)this + 12);
    if (v11 != v10)
    {
      do
      {
        v14 = *(_QWORD *)(v11 - 8);
        v11 -= 8;
        v13 = v14;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
      while (v11 != v10);
      v12 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v10;
    operator delete(v12);
  }
  v15 = *((_QWORD *)this + 9);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 8);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
}

uint64_t webrtc::AudioRtpReceiver::OnChanged(webrtc::AudioRtpReceiver *this)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  char v9;
  _QWORD v10[2];
  uint64_t (*v11)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v12)(uint64_t);

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 9) + 24) + 48))(*(_QWORD *)(*((_QWORD *)this + 9) + 24));
  if (*((unsigned __int8 *)this + 120) != (_DWORD)result)
  {
    v3 = result;
    *((_BYTE *)this + 120) = result;
    v4 = *((_QWORD *)this + 4);
    v5 = (unsigned int *)*((_QWORD *)this + 24);
    if (v5)
    {
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = operator new();
    *(_QWORD *)v7 = v5;
    *(_QWORD *)(v7 + 8) = this;
    *(_BYTE *)(v7 + 16) = v3;
    *(_QWORD *)(v7 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
    *(_QWORD *)(v7 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::AudioRtpReceiver::OnChanged(void)::$_1 &&>;
    v10[0] = v7;
    v11 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v12 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v10, &v9, &v8);
    return v11(1, v10, v10);
  }
  return result;
}

uint64_t webrtc::AudioRtpReceiver::OnSetVolume(webrtc::AudioRtpReceiver *this, double a2)
{
  uint64_t v3;
  char v5;
  _QWORD v6[3];
  char v7;
  double v8;

  v8 = a2;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 9) + 24) + 48))(*(_QWORD *)(*((_QWORD *)this + 9) + 24));
  v3 = *((_QWORD *)this + 4);
  v6[0] = this;
  v6[1] = &v8;
  v6[2] = &v7;
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v3 + 96))(v3, v6, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::AudioRtpReceiver::OnSetVolume(double)::$_1>, &v5);
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpReceiver::OnSetVolume(webrtc::AudioRtpReceiver *this, double a2)
{
  char *v3;
  uint64_t v4;
  char v6;
  _QWORD v7[3];
  char v8;
  double v9;

  v3 = (char *)this - 8;
  v9 = a2;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 8) + 24) + 48))(*(_QWORD *)(*((_QWORD *)this + 8) + 24));
  v4 = *((_QWORD *)this + 3);
  v7[0] = v3;
  v7[1] = &v9;
  v7[2] = &v8;
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v4 + 96))(v4, v7, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::AudioRtpReceiver::OnSetVolume(double)::$_1>, &v6);
}

uint64_t (***webrtc::AudioRtpReceiver::dtls_transport@<X0>(webrtc::AudioRtpReceiver *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 20);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t (***`non-virtual thunk to'webrtc::AudioRtpReceiver::dtls_transport@<X0>(webrtc::AudioRtpReceiver *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 18);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

__n128 webrtc::AudioRtpReceiver::stream_ids@<Q0>(webrtc::AudioRtpReceiver *this@<X0>, void ***a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  size_t v8;
  void **v9;
  void **v10;
  unint64_t v11;
  __n128 result;
  __n128 v13;
  void *v14;

  v4 = *((_QWORD *)this + 12);
  v3 = *((_QWORD *)this + 13);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = v3 - v4;
  if (v5)
  {
    if ((unint64_t)v5 < 0x5555555555555551)
    {
      v7 = v5 >> 3;
      v8 = 3 * (v5 >> 3);
      v9 = (void **)operator new(v8 * 8);
      *a2 = v9;
      v10 = &v9[v8];
      a2[2] = &v9[v8];
      bzero(v9, 24 * ((v8 * 8 - 24) / 0x18) + 24);
      v11 = 0;
      a2[1] = v10;
      while (1)
      {
        (*(void (**)(__n128 *__return_ptr))(**(_QWORD **)(v4 + 8 * v11) + 32))(&v13);
        if (v7 == v11)
          break;
        if (*((char *)v9 + 23) < 0)
          operator delete(*v9);
        result = v13;
        *(__n128 *)v9 = v13;
        v9[2] = v14;
        ++v11;
        v4 = *((_QWORD *)this + 12);
        v9 += 3;
        if (v11 >= (*((_QWORD *)this + 13) - v4) >> 3)
          return result;
      }
      __break(1u);
    }
    abort();
  }
  return result;
}

double `non-virtual thunk to'webrtc::AudioRtpReceiver::stream_ids@<D0>(webrtc::AudioRtpReceiver *this@<X0>, void ***a2@<X8>)
{
  double result;

  *(_QWORD *)&result = webrtc::AudioRtpReceiver::stream_ids((webrtc::AudioRtpReceiver *)((char *)this - 16), a2).n128_u64[0];
  return result;
}

uint64_t webrtc::AudioRtpReceiver::streams@<X0>(webrtc::AudioRtpReceiver *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 12);
  v3 = *((_QWORD *)this + 13);
  result = v3 - v2;
  if (v3 != v2)
  {
    if (result < 0)
      abort();
    v6 = result >> 3;
    v7 = (char *)operator new(result);
    v8 = 0;
    *a2 = v7;
    a2[2] = &v7[8 * v6];
    do
    {
      result = *(_QWORD *)(v2 + v8);
      *(_QWORD *)&v7[v8] = result;
      if (result)
        result = (**(uint64_t (***)(uint64_t))result)(result);
      v8 += 8;
    }
    while (v2 + v8 != v3);
    a2[1] = &v7[v8];
  }
  return result;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpReceiver::streams@<X0>(webrtc::AudioRtpReceiver *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 10);
  v3 = *((_QWORD *)this + 11);
  result = v3 - v2;
  if (v3 != v2)
  {
    if (result < 0)
      abort();
    v6 = result >> 3;
    v7 = (char *)operator new(result);
    v8 = 0;
    *a2 = v7;
    a2[2] = &v7[8 * v6];
    do
    {
      result = *(_QWORD *)(v2 + v8);
      *(_QWORD *)&v7[v8] = result;
      if (result)
        result = (**(uint64_t (***)(uint64_t))result)(result);
      v8 += 8;
    }
    while (v2 + v8 != v3);
    a2[1] = &v7[v8];
  }
  return result;
}

_QWORD *webrtc::AudioRtpReceiver::GetParameters@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  if (this[10])
  {
    v2 = this;
    v3 = (*(uint64_t (**)(_QWORD *))(*this + 128))(this);
    if ((v3 & 0xFF00000000) != 0)
      return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v2[10] + 152))(v2[10], v3);
    else
      return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v2[10] + 168))(v2[10]);
  }
  else
  {
    *(_BYTE *)(a2 + 124) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_WORD *)(a2 + 152) = 256;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 105) = 0u;
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 164) = 0;
  }
  return this;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpReceiver::GetParameters@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(this + 64))
  {
    v2 = this;
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 16) + 128))(this - 16);
    if ((v3 & 0xFF00000000) != 0)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 64) + 152))(*(_QWORD *)(v2 + 64), v3);
    else
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 64) + 168))(*(_QWORD *)(v2 + 64));
  }
  else
  {
    *(_BYTE *)(a2 + 124) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_WORD *)(a2 + 152) = 256;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 105) = 0u;
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 164) = 0;
  }
  return this;
}

uint64_t webrtc::AudioRtpReceiver::SetFrameDecryptor(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v3;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v5 = *(_QWORD *)(a1 + 80);
  if (v5 && *(_BYTE *)(a1 + 92))
  {
    v6 = *(unsigned int *)(a1 + 88);
    v7 = *(void (****)(_QWORD))(a1 + 152);
    v8 = v7;
    if (v7)
      (**v7)(v7);
    (*(void (**)(uint64_t, uint64_t, void (****)(_QWORD)))(*(_QWORD *)v5 + 112))(v5, v6, &v8);
    result = (uint64_t)v8;
    if (v8)
      return ((uint64_t (*)(_QWORD))(*v8)[1])(v8);
  }
  return result;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpReceiver::SetFrameDecryptor(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v3;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v5 = *(_QWORD *)(a1 + 64);
  if (v5 && *(_BYTE *)(a1 + 76))
  {
    v6 = *(unsigned int *)(a1 + 72);
    v7 = *(void (****)(_QWORD))(a1 + 136);
    v8 = v7;
    if (v7)
      (**v7)(v7);
    (*(void (**)(uint64_t, uint64_t, void (****)(_QWORD)))(*(_QWORD *)v5 + 112))(v5, v6, &v8);
    result = (uint64_t)v8;
    if (v8)
      return ((uint64_t (*)(_QWORD))(*v8)[1])(v8);
  }
  return result;
}

uint64_t (***webrtc::AudioRtpReceiver::GetFrameDecryptor@<X0>(webrtc::AudioRtpReceiver *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 19);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t (***`non-virtual thunk to'webrtc::AudioRtpReceiver::GetFrameDecryptor@<X0>(webrtc::AudioRtpReceiver *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 17);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

_QWORD *webrtc::AudioRtpReceiver::Stop(webrtc::AudioRtpReceiver *this)
{
  uint64_t v2;
  _QWORD *result;
  int v4;

  v2 = *((_QWORD *)this + 8);
  if (*(_DWORD *)(v2 + 176) != 2)
  {
    *(_DWORD *)(v2 + 176) = 2;
    webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged((_QWORD *)v2);
  }
  result = *(_QWORD **)(*((_QWORD *)this + 9) + 24);
  v4 = *((_DWORD *)result + 18);
  *((_DWORD *)result + 18) = 1;
  if (v4 != 1)
    return webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(result);
  return result;
}

_QWORD *`non-virtual thunk to'webrtc::AudioRtpReceiver::Stop(webrtc::AudioRtpReceiver *this)
{
  uint64_t v2;
  _QWORD *result;
  int v4;

  v2 = *((_QWORD *)this + 6);
  if (*(_DWORD *)(v2 + 176) != 2)
  {
    *(_DWORD *)(v2 + 176) = 2;
    webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged((_QWORD *)v2);
  }
  result = *(_QWORD **)(*((_QWORD *)this + 7) + 24);
  v4 = *((_DWORD *)result + 18);
  *((_DWORD *)result + 18) = 1;
  if (v4 != 1)
    return webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(result);
  return result;
}

void (***webrtc::AudioRtpReceiver::Reconfigure(webrtc::AudioRtpReceiver *this, int a2, __n128 a3))(_QWORD, __n128)
{
  uint64_t v4;
  void (***v5)(_QWORD, __n128);
  uint64_t v6;
  uint64_t v7;
  void (***result)(_QWORD, __n128);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  a3.n128_u64[0] = 0;
  if (a2)
    a3.n128_u64[0] = *((_QWORD *)this + 16);
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    if (!*((_BYTE *)this + 92))
    {
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v4 + 192))(v4, a3);
      if (!*((_BYTE *)this + 92))
        goto LABEL_11;
      goto LABEL_7;
    }
    (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v4 + 184))(v4, *((unsigned int *)this + 22), a3);
  }
  if (!*((_BYTE *)this + 92))
    goto LABEL_11;
LABEL_7:
  v5 = (void (***)(_QWORD, __n128))*((_QWORD *)this + 19);
  if (v5)
  {
    v6 = *((_QWORD *)this + 10);
    v7 = *((unsigned int *)this + 22);
    v12 = *((_QWORD *)this + 19);
    (**v5)(v5, a3);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v6 + 112))(v6, v7, &v12);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
LABEL_11:
  result = (void (***)(_QWORD, __n128))*((_QWORD *)this + 23);
  if (result)
  {
    v9 = *((_QWORD *)this + 10);
    if (*((_BYTE *)this + 92))
      v10 = *((unsigned int *)this + 22);
    else
      v10 = 0;
    v11 = (uint64_t)result;
    (**result)(result, a3);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v9 + 120))(v9, v10, &v11);
    result = (void (***)(_QWORD, __n128))v11;
    if (v11)
      return (void (***)(_QWORD, __n128))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return result;
}

_QWORD *webrtc::AudioRtpReceiver::SetupMediaChannel(webrtc::AudioRtpReceiver *this, unsigned int a2)
{
  uint64_t v3;
  _QWORD *result;
  char v5;
  _QWORD v6[4];
  int v7;
  char v8;
  uint64_t v9;

  v9 = a2 | 0x100000000;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 9) + 24) + 48))(*(_QWORD *)(*((_QWORD *)this + 9) + 24));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 32))(*((_QWORD *)this + 8));
  v3 = *((_QWORD *)this + 4);
  v6[0] = this;
  v6[1] = &v9;
  v6[2] = &v8;
  v6[3] = &v7;
  (*(void (**)(uint64_t, _QWORD *, uint64_t *(*)(uint64_t *), char *))(*(_QWORD *)v3 + 96))(v3, v6, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::AudioRtpReceiver::RestartMediaChannel(std::optional<unsigned int>)::$_1>, &v5);
  result = (_QWORD *)*((_QWORD *)this + 8);
  if (*((_DWORD *)result + 44) != 1)
  {
    *((_DWORD *)result + 44) = 1;
    return webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(result);
  }
  return result;
}

_QWORD *`non-virtual thunk to'webrtc::AudioRtpReceiver::SetupMediaChannel(webrtc::AudioRtpReceiver *this, unsigned int a2)
{
  char *v3;
  uint64_t v4;
  _QWORD *result;
  char v6;
  _QWORD v7[4];
  int v8;
  char v9;
  uint64_t v10;

  v3 = (char *)this - 16;
  v10 = a2 | 0x100000000;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) + 24) + 48))(*(_QWORD *)(*((_QWORD *)this + 7) + 24));
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6));
  v4 = *((_QWORD *)this + 2);
  v7[0] = v3;
  v7[1] = &v10;
  v7[2] = &v9;
  v7[3] = &v8;
  (*(void (**)(uint64_t, _QWORD *, uint64_t *(*)(uint64_t *), char *))(*(_QWORD *)v4 + 96))(v4, v7, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::AudioRtpReceiver::RestartMediaChannel(std::optional<unsigned int>)::$_1>, &v6);
  result = (_QWORD *)*((_QWORD *)this + 6);
  if (*((_DWORD *)result + 44) != 1)
  {
    *((_DWORD *)result + 44) = 1;
    return webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(result);
  }
  return result;
}

_QWORD *webrtc::AudioRtpReceiver::SetupUnsignaledMediaChannel(webrtc::AudioRtpReceiver *this)
{
  uint64_t v2;
  _QWORD *result;
  char v4;
  _QWORD v5[4];
  int v6;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 9) + 24) + 48))(*(_QWORD *)(*((_QWORD *)this + 9) + 24));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 32))(*((_QWORD *)this + 8));
  v2 = *((_QWORD *)this + 4);
  v5[0] = this;
  v5[1] = &v8;
  v5[2] = &v7;
  v5[3] = &v6;
  (*(void (**)(uint64_t, _QWORD *, uint64_t *(*)(uint64_t *), char *))(*(_QWORD *)v2 + 96))(v2, v5, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::AudioRtpReceiver::RestartMediaChannel(std::optional<unsigned int>)::$_1>, &v4);
  result = (_QWORD *)*((_QWORD *)this + 8);
  if (*((_DWORD *)result + 44) != 1)
  {
    *((_DWORD *)result + 44) = 1;
    return webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(result);
  }
  return result;
}

_QWORD *`non-virtual thunk to'webrtc::AudioRtpReceiver::SetupUnsignaledMediaChannel(webrtc::AudioRtpReceiver *this)
{
  char *v2;
  uint64_t v3;
  _QWORD *result;
  char v5;
  _QWORD v6[4];
  int v7;
  char v8;
  uint64_t v9;

  v2 = (char *)this - 16;
  v9 = 0;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 7) + 24) + 48))(*(_QWORD *)(*((_QWORD *)this + 7) + 24));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6));
  v3 = *((_QWORD *)this + 2);
  v6[0] = v2;
  v6[1] = &v9;
  v6[2] = &v8;
  v6[3] = &v7;
  (*(void (**)(uint64_t, _QWORD *, uint64_t *(*)(uint64_t *), char *))(*(_QWORD *)v3 + 96))(v3, v6, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::AudioRtpReceiver::RestartMediaChannel(std::optional<unsigned int>)::$_1>, &v5);
  result = (_QWORD *)*((_QWORD *)this + 6);
  if (*((_DWORD *)result + 44) != 1)
  {
    *((_DWORD *)result + 44) = 1;
    return webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(result);
  }
  return result;
}

uint64_t webrtc::AudioRtpReceiver::ssrc(webrtc::AudioRtpReceiver *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 92))
    return *((_QWORD *)this + 11);
  v2 = *((_QWORD *)this + 10);
  if (!v2)
    return *((_QWORD *)this + 11);
  else
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 80))(*((_QWORD *)this + 10));
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpReceiver::ssrc(webrtc::AudioRtpReceiver *this)
{
  uint64_t v2;

  if (*((_BYTE *)this + 76))
    return *((_QWORD *)this + 9);
  v2 = *((_QWORD *)this + 8);
  if (!v2)
    return *((_QWORD *)this + 9);
  else
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 80))(*((_QWORD *)this + 8));
}

void webrtc::AudioRtpReceiver::set_stream_ids(uint64_t a1, uint64_t a2)
{
  void **v3;
  char *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void **i;
  __int128 v10;
  void **v11;
  __int128 v12;
  void *__p;
  char *v14;

  v3 = *(void ***)a2;
  v11 = *(void ***)a2;
  v10 = *(_OWORD *)(a2 + 8);
  v12 = v10;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  webrtc::RtpReceiverInternal::CreateStreamsFromIds((uint64_t)&v11, &__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 160))(a1, &__p);
  v4 = (char *)__p;
  if (__p)
  {
    v5 = v14;
    v6 = __p;
    if (v14 != __p)
    {
      do
      {
        v8 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        v7 = v8;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      while (v5 != v4);
      v6 = __p;
    }
    v14 = v4;
    operator delete(v6);
  }
  if (v3)
  {
    for (i = (void **)v10; i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

void `non-virtual thunk to'webrtc::AudioRtpReceiver::set_stream_ids(uint64_t a1, uint64_t a2)
{
  webrtc::AudioRtpReceiver::set_stream_ids(a1 - 16, a2);
}

uint64_t webrtc::AudioRtpReceiver::set_transport(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpReceiver::set_transport(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t **webrtc::AudioRtpReceiver::SetStreams(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int8 v8;
  size_t v9;
  uint64_t v10;
  int v11;
  void **v12;
  uint64_t v13;
  void **p_s1;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  void (***v23)(_QWORD);
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  size_t v29;
  uint64_t v30;
  int v31;
  void **v32;
  uint64_t v33;
  void **v34;
  int v35;
  int v36;
  int v37;
  int v38;
  char v39;
  BOOL v40;
  uint64_t v41;
  void (***v42)(_QWORD);
  uint64_t **result;
  uint64_t **v44;
  void (***v45)(_QWORD);
  void (***v46)(_QWORD);
  void *__p;
  uint64_t v48;
  unsigned __int8 v49;
  void *__s1;
  size_t __n;
  unsigned __int8 v52;

  v4 = (uint64_t *)a1[12];
  v44 = (uint64_t **)(a1 + 12);
  v5 = (uint64_t *)a1[13];
  if (v4 != v5)
  {
    v6 = *a2;
    v7 = a2[1];
    if (*a2 != v7)
      goto LABEL_6;
    while (1)
    {
LABEL_35:
      v22 = *v4;
      v23 = (void (***)(_QWORD))a1[9];
      v46 = v23;
      if (v23)
        (**v23)(v23);
      (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v22 + 88))(v22, &v46);
      if (v46)
        (*v46)[1](v46);
LABEL_4:
      if (++v4 == v5)
        break;
      v6 = *a2;
      v7 = a2[1];
      if (*a2 != v7)
      {
        while (1)
        {
LABEL_6:
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*v4 + 32))(&__s1);
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*v6 + 32))(&__p);
          v8 = v52;
          if ((v52 & 0x80u) == 0)
            v9 = v52;
          else
            v9 = __n;
          v10 = v49;
          v11 = (char)v49;
          if ((v49 & 0x80u) != 0)
            v10 = v48;
          if (v9 != v10)
          {
            v21 = 0;
            if (((char)v49 & 0x80000000) == 0)
              goto LABEL_28;
            goto LABEL_32;
          }
          v12 = (v49 & 0x80u) == 0 ? &__p : (void **)__p;
          if ((char)v52 < 0)
            break;
          if (v52)
          {
            v13 = v52 - 1;
            p_s1 = &__s1;
            do
            {
              v16 = *(unsigned __int8 *)p_s1;
              p_s1 = (void **)((char *)p_s1 + 1);
              v15 = v16;
              v18 = *(unsigned __int8 *)v12;
              v12 = (void **)((char *)v12 + 1);
              v17 = v18;
              v19 = v13-- != 0;
              v20 = v19;
              v21 = v15 == v17;
            }
            while (v15 == v17 && (v20 & 1) != 0);
LABEL_27:
            if ((v11 & 0x80000000) == 0)
              goto LABEL_28;
            goto LABEL_32;
          }
          v21 = 1;
          if (((char)v49 & 0x80000000) == 0)
          {
LABEL_28:
            if ((v8 & 0x80) != 0)
              goto LABEL_33;
            goto LABEL_29;
          }
LABEL_32:
          operator delete(__p);
          if ((v52 & 0x80) != 0)
          {
LABEL_33:
            operator delete(__s1);
            if (v21)
              goto LABEL_4;
            goto LABEL_34;
          }
LABEL_29:
          if (v21)
            goto LABEL_4;
LABEL_34:
          if (++v6 == v7)
            goto LABEL_35;
        }
        v21 = memcmp(__s1, v12, __n) == 0;
        goto LABEL_27;
      }
    }
  }
  v24 = *a2;
  v25 = a2[1];
  if (*a2 != v25)
  {
    v26 = a1[12];
    v27 = a1[13];
    if (v26 != v27)
      goto LABEL_44;
    while (1)
    {
LABEL_73:
      v41 = *v24;
      v42 = (void (***)(_QWORD))a1[9];
      v45 = v42;
      if (v42)
        (**v42)(v42);
      (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v41 + 72))(v41, &v45);
      if (v45)
        (*v45)[1](v45);
LABEL_42:
      if (++v24 == v25)
        break;
      v26 = a1[12];
      v27 = a1[13];
      if (v26 != v27)
      {
        while (1)
        {
LABEL_44:
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*v24 + 32))(&__s1);
          (*(void (**)(void **__return_ptr))(**(_QWORD **)v26 + 32))(&__p);
          v28 = v52;
          if ((v52 & 0x80u) == 0)
            v29 = v52;
          else
            v29 = __n;
          v30 = v49;
          v31 = (char)v49;
          if ((v49 & 0x80u) != 0)
            v30 = v48;
          if (v29 != v30)
          {
            v40 = 0;
            if (((char)v49 & 0x80000000) == 0)
              goto LABEL_66;
            goto LABEL_70;
          }
          v32 = (v49 & 0x80u) == 0 ? &__p : (void **)__p;
          if ((char)v52 < 0)
            break;
          if (v52)
          {
            v33 = v52 - 1;
            v34 = &__s1;
            do
            {
              v36 = *(unsigned __int8 *)v34;
              v34 = (void **)((char *)v34 + 1);
              v35 = v36;
              v38 = *(unsigned __int8 *)v32;
              v32 = (void **)((char *)v32 + 1);
              v37 = v38;
              v19 = v33-- != 0;
              v39 = v19;
              v40 = v35 == v37;
            }
            while (v35 == v37 && (v39 & 1) != 0);
LABEL_65:
            if ((v31 & 0x80000000) == 0)
              goto LABEL_66;
            goto LABEL_70;
          }
          v40 = 1;
          if (((char)v49 & 0x80000000) == 0)
          {
LABEL_66:
            if ((v28 & 0x80) != 0)
              goto LABEL_71;
            goto LABEL_67;
          }
LABEL_70:
          operator delete(__p);
          if ((v52 & 0x80) != 0)
          {
LABEL_71:
            operator delete(__s1);
            if (v40)
              goto LABEL_42;
            goto LABEL_72;
          }
LABEL_67:
          if (v40)
            goto LABEL_42;
LABEL_72:
          v26 += 8;
          if (v26 == v27)
            goto LABEL_73;
        }
        v40 = memcmp(__s1, v32, __n) == 0;
        goto LABEL_65;
      }
    }
  }
  result = v44;
  if (v44 != a2)
    return (uint64_t **)std::vector<webrtc::scoped_refptr<webrtc::MediaStreamInterface>>::__assign_with_size[abi:sn180100]<webrtc::scoped_refptr<webrtc::MediaStreamInterface>*,webrtc::scoped_refptr<webrtc::MediaStreamInterface>*>(v44, *a2, a2[1], a2[1] - *a2);
  return result;
}

uint64_t **`non-virtual thunk to'webrtc::AudioRtpReceiver::SetStreams(uint64_t a1, uint64_t **a2)
{
  return webrtc::AudioRtpReceiver::SetStreams((_QWORD *)(a1 - 16), a2);
}

uint64_t webrtc::AudioRtpReceiver::GetSources@<X0>(webrtc::AudioRtpReceiver *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v4 = (*(uint64_t (**)(webrtc::AudioRtpReceiver *))(*(_QWORD *)this + 128))(this);
  result = *((_QWORD *)this + 10);
  if (result)
    v6 = (v4 & 0xFF00000000) == 0;
  else
    v6 = 1;
  if (!v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpReceiver::GetSources@<X0>(webrtc::AudioRtpReceiver *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v3 = (char *)this - 16;
  v4 = (*(uint64_t (**)(char *))(*((_QWORD *)this - 2) + 128))((char *)this - 16);
  result = *((_QWORD *)v3 + 10);
  if (result)
    v6 = (v4 & 0xFF00000000) == 0;
  else
    v6 = 1;
  if (!v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t webrtc::AudioRtpReceiver::SetFrameTransformer(uint64_t a1, void (****a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  uint64_t result;
  void (***v9)(_QWORD);

  v4 = *(_QWORD *)(a1 + 80);
  if (!v4)
    goto LABEL_7;
  if (*(_BYTE *)(a1 + 92))
  {
    v5 = *(unsigned int *)(a1 + 88);
    v6 = *a2;
    v9 = v6;
    if (!v6)
      goto LABEL_5;
    goto LABEL_4;
  }
  v5 = 0;
  v6 = *a2;
  v9 = v6;
  if (v6)
LABEL_4:
    (**v6)(v6);
LABEL_5:
  (*(void (**)(uint64_t, uint64_t, void (****)(_QWORD)))(*(_QWORD *)v4 + 120))(v4, v5, &v9);
  if (v9)
    (*v9)[1](v9);
LABEL_7:
  v7 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v7;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpReceiver::SetFrameTransformer(uint64_t a1, void (****a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  uint64_t result;
  void (***v9)(_QWORD);

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_7;
  if (*(_BYTE *)(a1 + 76))
  {
    v5 = *(unsigned int *)(a1 + 72);
    v6 = *a2;
    v9 = v6;
    if (!v6)
      goto LABEL_5;
    goto LABEL_4;
  }
  v5 = 0;
  v6 = *a2;
  v9 = v6;
  if (v6)
LABEL_4:
    (**v6)(v6);
LABEL_5:
  (*(void (**)(uint64_t, uint64_t, void (****)(_QWORD)))(*(_QWORD *)v4 + 120))(v4, v5, &v9);
  if (v9)
    (*v9)[1](v9);
LABEL_7:
  v7 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v7;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  uint64_t result;
  void (***v9)(_QWORD);

  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
    goto LABEL_7;
  if (*(_BYTE *)(a1 + 68))
  {
    v5 = *(unsigned int *)(a1 + 64);
    v6 = *a2;
    v9 = v6;
    if (!v6)
      goto LABEL_5;
    goto LABEL_4;
  }
  v5 = 0;
  v6 = *a2;
  v9 = v6;
  if (v6)
LABEL_4:
    (**v6)(v6);
LABEL_5:
  (*(void (**)(uint64_t, uint64_t, void (****)(_QWORD)))(*(_QWORD *)v4 + 120))(v4, v5, &v9);
  if (v9)
    (*v9)[1](v9);
LABEL_7:
  v7 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v7;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t webrtc::AudioRtpReceiver::SetObserver(uint64_t result, uint64_t (***a2)(_QWORD, uint64_t))
{
  uint64_t v3;

  *(_QWORD *)(result + 136) = a2;
  if (a2)
  {
    if (*(_BYTE *)(result + 144))
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
      return (**a2)(a2, v3);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpReceiver::SetObserver(uint64_t result, uint64_t (***a2)(_QWORD, uint64_t))
{
  uint64_t v3;

  *(_QWORD *)(result + 120) = a2;
  if (a2)
  {
    if (*(_BYTE *)(result + 128))
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result - 16) + 64))(result - 16);
      return (**a2)(a2, v3);
    }
  }
  return result;
}

uint64_t webrtc::AudioRtpReceiver::SetJitterBufferMinimumDelay(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  double v5;

  *(double *)(a1 + 168) = *(double *)&a2;
  *(_BYTE *)(a1 + 176) = a3;
  result = *(_QWORD *)(a1 + 80);
  if (result && *(_BYTE *)(a1 + 92))
  {
    v5 = *(double *)&a2 * 1000.0;
    if (!a3)
      v5 = 0.0;
    __asm { BR              X11 }
  }
  return result;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpReceiver::SetJitterBufferMinimumDelay(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  double v5;

  *(double *)(a1 + 152) = *(double *)&a2;
  *(_BYTE *)(a1 + 160) = a3;
  result = *(_QWORD *)(a1 + 64);
  if (result && *(_BYTE *)(a1 + 76))
  {
    v5 = *(double *)&a2 * 1000.0;
    if (!a3)
      v5 = 0.0;
    __asm { BR              X11 }
  }
  return result;
}

_QWORD *webrtc::AudioRtpReceiver::SetMediaChannel(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  v2 = result;
  if (a2)
  {
    *(_BYTE *)(result[24] + 4) = 1;
    result[10] = a2;
  }
  else
  {
    result = (_QWORD *)result[10];
    if (result)
    {
      if (*((_BYTE *)v2 + 92))
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, double))(*result + 184))(result, *((unsigned int *)v2 + 22), 0.0);
      else
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, double))(*result + 192))(result, 0.0);
    }
    *(_BYTE *)(v2[24] + 4) = 0;
    v2[10] = 0;
  }
  return result;
}

_QWORD *`non-virtual thunk to'webrtc::AudioRtpReceiver::SetMediaChannel(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  v2 = result;
  if (a2)
  {
    *(_BYTE *)(result[22] + 4) = 1;
    result[8] = a2;
  }
  else
  {
    result = (_QWORD *)result[8];
    if (result)
    {
      if (*((_BYTE *)v2 + 76))
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, double))(*result + 184))(result, *((unsigned int *)v2 + 18), 0.0);
      else
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, double))(*result + 192))(result, 0.0);
    }
    *(_BYTE *)(v2[22] + 4) = 0;
    v2[8] = 0;
  }
  return result;
}

_QWORD *webrtc::AudioRtpReceiver::NotifyFirstPacketReceived(_QWORD *this)
{
  _QWORD *v1;
  uint64_t (***v2)(_QWORD, uint64_t);
  uint64_t v3;

  v1 = this;
  v2 = (uint64_t (***)(_QWORD, uint64_t))this[17];
  if (v2)
  {
    v3 = (*(uint64_t (**)(_QWORD *))(*this + 64))(this);
    this = (_QWORD *)(**v2)(v2, v3);
  }
  *((_BYTE *)v1 + 144) = 1;
  return this;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpReceiver::NotifyFirstPacketReceived(uint64_t this)
{
  uint64_t v1;
  uint64_t (***v2)(_QWORD, uint64_t);
  uint64_t v3;

  v1 = this;
  v2 = *(uint64_t (****)(_QWORD, uint64_t))(this + 120);
  if (v2)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 16) + 64))(this - 16);
    this = (**v2)(v2, v3);
  }
  *(_BYTE *)(v1 + 128) = 1;
  return this;
}

uint64_t (***webrtc::AudioRtpReceiver::track@<X0>(webrtc::AudioRtpReceiver *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 9);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t webrtc::AudioRtpReceiver::media_type(webrtc::AudioRtpReceiver *this)
{
  return 0;
}

void webrtc::AudioRtpReceiver::id(webrtc::AudioRtpReceiver *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
  }
}

uint64_t webrtc::AudioRtpReceiver::AttachmentId(webrtc::AudioRtpReceiver *this)
{
  return *((unsigned int *)this + 37);
}

uint64_t (***`non-virtual thunk to'webrtc::AudioRtpReceiver::track@<X0>(webrtc::AudioRtpReceiver *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 7);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpReceiver::media_type(webrtc::AudioRtpReceiver *this)
{
  return 0;
}

void `non-virtual thunk to'webrtc::AudioRtpReceiver::id(webrtc::AudioRtpReceiver *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

uint64_t webrtc::RtpReceiverInterface::SetParameters()
{
  return 0;
}

uint64_t webrtc::RtpReceiverInterface::SetDepacketizerToDecoderFrameTransformer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *a2;
  *a2 = 0;
  v4 = v2;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 152))(a1, &v4);
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpReceiver::AttachmentId(webrtc::AudioRtpReceiver *this)
{
  return *((unsigned int *)this + 33);
}

_QWORD *std::vector<webrtc::scoped_refptr<webrtc::MediaStreamInterface>>::__assign_with_size[abi:sn180100]<webrtc::scoped_refptr<webrtc::MediaStreamInterface>*,webrtc::scoped_refptr<webrtc::MediaStreamInterface>*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;
  _QWORD **v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  unint64_t v15;
  _QWORD **v16;
  uint64_t v17;
  void (***v18)(_QWORD);
  _QWORD **v19;
  void (***v20)(_QWORD);
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD **v26;
  _QWORD *v27;
  _QWORD *v28;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (_QWORD **)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      v10 = (_QWORD **)result[1];
      v11 = (_QWORD **)*result;
      if (v10 != v9)
      {
        do
        {
          v13 = (uint64_t)*--v10;
          v12 = v13;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        while (v10 != v9);
        v11 = (_QWORD **)*v7;
      }
      v7[1] = v9;
      operator delete(v11);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (!(a4 >> 61))
    {
      v21 = v8 >> 2;
      if (v8 >> 2 <= a4)
        v21 = a4;
      v22 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
      v23 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v22)
        v23 = v21;
      if (!(v23 >> 61))
      {
        v24 = v23;
        result = operator new(8 * v23);
        v25 = result;
        *v7 = result;
        v7[1] = result;
        v7[2] = &result[v24];
        while (v6 != a3)
        {
          result = (_QWORD *)*v6;
          *v25 = *v6;
          if (result)
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *))*result)(result);
          ++v6;
          ++v25;
        }
        v7[1] = v25;
        return result;
      }
    }
LABEL_52:
    abort();
  }
  v14 = (_QWORD **)result[1];
  v15 = v14 - v9;
  if (v15 < a4)
  {
    v16 = (_QWORD **)&a2[v15];
    if (v14 != v9)
    {
      v17 = 8 * v15;
      do
      {
        v18 = (void (***)(_QWORD))*v6;
        if (*v6)
          (**v18)(*v6);
        result = *v9;
        if (*v9)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        *v9++ = v18;
        ++v6;
        v17 -= 8;
      }
      while (v17);
      v9 = (_QWORD **)v7[1];
    }
    v26 = v9;
    if (v16 == a3)
    {
LABEL_44:
      v7[1] = v26;
      return result;
    }
    v26 = v9;
    v27 = v9;
    while (v27)
    {
      result = *v16;
      *v27 = *v16;
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))*result)(result);
      ++v16;
      ++v27;
      ++v26;
      if (v16 == a3)
        goto LABEL_44;
    }
    __break(1u);
    goto LABEL_52;
  }
  if (a2 == a3)
  {
    v19 = (_QWORD **)*result;
  }
  else
  {
    v19 = (_QWORD **)*result;
    do
    {
      v20 = (void (***)(_QWORD))*v6;
      if (*v6)
        (**v20)(*v6);
      result = *v9;
      if (*v9)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
      *v9++ = v20;
      ++v6;
      ++v19;
    }
    while (v6 != a3);
    v14 = (_QWORD **)v7[1];
  }
  while (v14 != v19)
  {
    v28 = *--v14;
    result = v28;
    if (v28)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v7[1] = v19;
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::RemoteAudioSource>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 180);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::RemoteAudioSource>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 45;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::RemoteAudioSource>::~RefCountedObject(webrtc::RemoteAudioSource *a1)
{
  webrtc::RemoteAudioSource::~RemoteAudioSource(a1);
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webrtc::Notifier<webrtc::AudioSourceInterface>::RegisterObserver(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[2];
  a1 += 2;
  result[1] = a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void webrtc::Notifier<webrtc::AudioSourceInterface>::UnregisterObserver(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (uint64_t *)a1[3];
  if (v2 != a1 + 2)
  {
    while (1)
    {
      v3 = (_QWORD *)v2[1];
      if (v2[2] == a2)
        break;
      v2 = (uint64_t *)v2[1];
      if (v3 == a1 + 2)
        return;
    }
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)v2[1] = v4;
    --a1[4];
    operator delete(v2);
  }
}

BOOL rtc::RefCountedObject<webrtc::RemoteAudioSource>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 180));
  return v1 == 1;
}

_QWORD *`non-virtual thunk to'webrtc::Notifier<webrtc::AudioSourceInterface>::RegisterObserver(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[1];
  result[1] = ++a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void `non-virtual thunk to'webrtc::Notifier<webrtc::AudioSourceInterface>::UnregisterObserver(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (uint64_t *)a1[2];
  if (v2 != a1 + 1)
  {
    while (1)
    {
      v3 = (_QWORD *)v2[1];
      if (v2[2] == a2)
        break;
      v2 = (uint64_t *)v2[1];
      if (v3 == a1 + 1)
        return;
    }
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)v2[1] = v4;
    --a1[3];
    operator delete(v2);
  }
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::RemoteAudioSource>::~RefCountedObject(uint64_t a1)
{
  webrtc::RemoteAudioSource::~RemoteAudioSource((webrtc::RemoteAudioSource *)(a1 - 8));
}

{
  webrtc::RemoteAudioSource::~RemoteAudioSource((webrtc::RemoteAudioSource *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::RefCountedObject<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 8;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>>::~RefCountedObject(_QWORD *a1)
{
  webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::~AudioTrackProxyWithInternal(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::kind(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::id(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::enabled(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  char v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F05250;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::AudioTrackInterface,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16 != 0;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::set_enabled(uint64_t a1, char a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, _QWORD);
  _QWORD *v5;
  uint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  char v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  char v18;
  char *v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F05260;
  v19 = &v10;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, _QWORD))v17;
    v5 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v17);
    v6 = v4(v5, *v19);
    v18 = v6;
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,BOOL,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
    v6 = v18 != 0;
  }
  pthread_mutex_destroy(&v20);
  pthread_cond_destroy(&v21);
  return v6;
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::state(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F05270;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::AudioTrackInterface,webrtc::MediaStreamTrackInterface::TrackState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::GetSource(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::AddSink(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F05280;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,void,webrtc::AudioTrackSinkInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::RemoveSink(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F05290;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,void,webrtc::AudioTrackSinkInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::GetSignalLevel(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  uint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t *v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F052A0;
  v19 = &v10;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, uint64_t))v17;
    v5 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v17);
    v6 = v4(v5, *v19);
    v18 = v6;
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,BOOL,int *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
    v6 = v18 != 0;
  }
  pthread_mutex_destroy(&v20);
  pthread_cond_destroy(&v21);
  return v6;
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::GetAudioProcessor@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F052B0;
  v7 = 0;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  webrtc::MethodCall<webrtc::AudioTrackInterface,webrtc::scoped_refptr<webrtc::AudioProcessorInterface>>::Marshal(*(rtc::Thread **)(a1 + 16), &v5, a2);
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::RegisterObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F052C0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::UnregisterObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F052D0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

BOOL rtc::RefCountedObject<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 32));
  return v1 == 1;
}

uint64_t `non-virtual thunk to'webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::RegisterObserver(uint64_t a1, uint64_t a2)
{
  return webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::RegisterObserver(a1 - 8, a2);
}

uint64_t `non-virtual thunk to'webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::UnregisterObserver(uint64_t a1, uint64_t a2)
{
  return webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::UnregisterObserver(a1 - 8, a2);
}

_QWORD *`non-virtual thunk to'rtc::RefCountedObject<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>>::~RefCountedObject(uint64_t a1)
{
  return webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::~AudioTrackProxyWithInternal((_QWORD *)(a1 - 8));
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>>::~RefCountedObject(uint64_t a1)
{
  webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::~AudioTrackProxyWithInternal((_QWORD *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::~AudioTrackProxyWithInternal(_QWORD *a1)
{
  rtc::Thread *v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  char v7;
  char v8;
  __n128 v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C0AE980;
  a1[1] = &unk_24C0AEA10;
  v12 = a1;
  v13 = webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::DestroyInternal;
  v14 = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = (rtc::Thread *)a1[2];
  if (rtc::Thread::IsCurrent(v2))
  {
    v13((uint64_t)v12 + (v14 >> 1));
  }
  else
  {
    v9.n128_u64[0] = (unint64_t)&v12;
    v10 = absl::internal_any_invocable::LocalManagerTrivial;
    v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v9, &v8, &v7);
    v10(1, &v9, &v9);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v3, v4);
  }
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrack>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::AudioTrackInterface,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_BYTE *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,BOOL,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  unsigned __int8 *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(unsigned __int8 **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v2);
  *(_BYTE *)(v1 + 24) = v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::AudioTrackInterface,webrtc::MediaStreamTrackInterface::TrackState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_DWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,void,webrtc::AudioTrackSinkInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,BOOL,int *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v2);
  *(_BYTE *)(v1 + 24) = v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t webrtc::MethodCall<webrtc::AudioTrackInterface,webrtc::scoped_refptr<webrtc::AudioProcessorInterface>>::Marshal@<X0>(rtc::Thread *this@<X1>, _QWORD *a2@<X0>, _QWORD *a3@<X8>)
{
  void (*v6)(__n128 *__return_ptr, _QWORD *);
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t result;
  TimeDelta v11;
  TimeDelta v12;
  uint64_t v13;
  char v14;
  char v15;
  __n128 v16;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v18)(uint64_t *);

  if (rtc::Thread::IsCurrent(this))
  {
    v6 = (void (*)(__n128 *__return_ptr, _QWORD *))a2[1];
    v7 = a2[2];
    v8 = (_QWORD *)(*a2 + (v7 >> 1));
    if ((v7 & 1) != 0)
      v6 = *(void (**)(__n128 *__return_ptr, _QWORD *))(*v8 + v6);
    v6(&v16, v8);
    v9 = v16.n128_u64[0];
    v16.n128_u64[0] = 0;
    result = a2[3];
    a2[3] = v9;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      result = v16.n128_u64[0];
      if (v16.n128_u64[0])
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v16.n128_u64[0] + 8))(v16.n128_u64[0]);
    }
  }
  else
  {
    v16.n128_u64[0] = (unint64_t)a2;
    v17 = absl::internal_any_invocable::LocalManagerTrivial;
    v18 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,webrtc::scoped_refptr<webrtc::AudioProcessorInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)this + 8))(this, &v16, &v15, &v14);
    v17(1, &v16, &v16);
    v11.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v12.var0 = 3000000;
    result = rtc::Event::Wait((rtc::Event *)(a2 + 5), v11, v12);
  }
  v13 = a2[3];
  a2[3] = 0;
  *a3 = v13;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,webrtc::scoped_refptr<webrtc::AudioProcessorInterface>>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*v4 + v2);
  v2(&v8, v4);
  v5 = v8;
  v8 = 0;
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

void (***absl::internal_any_invocable::LocalInvoker<false,void,webrtc::AudioRtpReceiver::OnChanged(void)::$_1 &&>(uint64_t a1, __n128 a2))(_QWORD, __n128)
{
  return webrtc::AudioRtpReceiver::Reconfigure(*(webrtc::AudioRtpReceiver **)a1, *(unsigned __int8 *)(a1 + 8), a2);
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::AudioRtpReceiver::OnSetVolume(double)::$_1>(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  double v3;

  v1 = *(_QWORD *)result;
  v2 = *(_QWORD **)(result + 8);
  *(_QWORD *)(*(_QWORD *)result + 128) = *v2;
  if (**(_BYTE **)(result + 16))
  {
    result = *(_QWORD *)(v1 + 80);
    if (result)
    {
      v3 = *(double *)v2;
      if (*(_BYTE *)(v1 + 92))
        return (*(uint64_t (**)(uint64_t, _QWORD, double))(*(_QWORD *)result + 184))(result, *(unsigned int *)(v1 + 88), v3);
      else
        return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)result + 192))(result, v3);
    }
  }
  return result;
}

_QWORD *webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = result + 2;
  v11 = &v10;
  v2 = (_QWORD *)result[3];
  if (v2 != result + 2)
  {
    v3 = 0;
    result = &v10;
    do
    {
      v4 = result;
      result = operator new(0x18uLL);
      v5 = v2[2];
      result[1] = &v10;
      result[2] = v5;
      *result = v4;
      v4[1] = result;
      ++v3;
      v2 = (_QWORD *)v2[1];
    }
    while (v2 != v1);
    v10 = result;
    v12 = v3;
    v6 = v11;
    if (v11 != &v10)
    {
      do
      {
        result = (_QWORD *)(**(uint64_t (***)(_QWORD))v6[2])(v6[2]);
        v6 = (_QWORD *)v6[1];
      }
      while (v6 != &v10);
      v3 = v12;
    }
    if (v3)
    {
      v7 = v10;
      result = v11;
      v8 = *v11;
      *(_QWORD *)(v8 + 8) = v10[1];
      *(_QWORD *)v7[1] = v8;
      v12 = 0;
      if (result != &v10)
      {
        do
        {
          v9 = (_QWORD *)result[1];
          operator delete(result);
          result = v9;
        }
        while (v9 != &v10);
      }
    }
  }
  return result;
}

uint64_t *rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::AudioRtpReceiver::RestartMediaChannel(std::optional<unsigned int>)::$_1>(uint64_t *result)
{
  uint64_t v1;
  void (*v2)(_QWORD, __n128);
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  void (***v8)(_QWORD);
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  _QWORD *v12;
  double v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = *result;
  v2 = *(void (**)(_QWORD, __n128))(*result + 80);
  if (!v2)
    return result;
  v3 = *(_QWORD *)result[1];
  v4 = *(unsigned __int8 *)result[2];
  v5 = *(_DWORD *)result[3];
  *(_BYTE *)(*(_QWORD *)(v1 + 192) + 4) = 1;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v1 + 92);
    if (BYTE4(v3))
      v7 = v6 == 0;
    else
      v7 = 1;
    if (v7)
    {
      if ((BYTE4(v3) != 0) == (v6 != 0))
        return result;
    }
    else if (*(_DWORD *)(v1 + 88) == (_DWORD)v3)
    {
      return result;
    }
    if ((*(_QWORD *)(v1 + 88) & 0xFF00000000) != 0)
    {
      v15 = 0;
      (*(void (**)(void (*)(_QWORD, __n128)))(*(_QWORD *)v2 + 200))(v2);
      v15 = 0;
    }
    else
    {
      v15 = 0;
      (*(void (**)(void (*)(_QWORD, __n128), _QWORD **))(*(_QWORD *)v2 + 208))(v2, &v15);
      v14 = v15;
      v15 = 0;
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    }
    v2 = *(void (**)(_QWORD, __n128))(v1 + 80);
  }
  *(_DWORD *)(v1 + 88) = v3;
  *(_BYTE *)(v1 + 92) = BYTE4(v3);
  v8 = *(void (****)(_QWORD))(v1 + 64);
  v9 = *(_QWORD *)(v1 + 88);
  v10 = (_QWORD *)operator new();
  *v10 = off_24C0BB4F8;
  v10[1] = v8;
  if ((v9 & 0xFF00000000) != 0)
  {
    if (v8)
      (**v8)(v8);
    v15 = v10;
    (*(void (**)(void (*)(_QWORD, __n128), uint64_t, _QWORD **))(*(_QWORD *)v2 + 200))(v2, v9, &v15);
    v12 = v15;
    v15 = 0;
    if (!v12)
      goto LABEL_18;
  }
  else
  {
    if (v8)
      (**v8)(v8);
    v15 = v10;
    (*(void (**)(void (*)(_QWORD, __n128), _QWORD **))(*(_QWORD *)v2 + 208))(v2, &v15);
    v12 = v15;
    v15 = 0;
    if (!v12)
      goto LABEL_18;
  }
  (*(void (**)(_QWORD *))(*v12 + 8))(v12);
LABEL_18:
  if (*(_BYTE *)(v1 + 92))
  {
    if (*(_BYTE *)(v1 + 176))
      v13 = *(double *)(v1 + 168) * 1000.0;
    else
      v13 = 0.0;
    __asm { BR              X11 }
  }
  return (uint64_t *)webrtc::AudioRtpReceiver::Reconfigure((webrtc::AudioRtpReceiver *)v1, v4 != 0, v11);
}

float32x4_t *webrtc::AudioSamplesScaler::Process(float32x4_t *this, webrtc::AudioBuffer *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float *v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t v16;
  float *v17;
  float v18;
  uint64_t v19;
  float *v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float *v32;
  float32x4_t *v33;
  uint64_t v34;
  int8x16_t v35;
  float v36;
  float v37;

  v2 = *((_QWORD *)a2 + 3);
  if (this->i32[2] != (_DWORD)v2)
  {
    this->i32[2] = v2;
    this->f32[3] = 1.0 / (float)(int)v2;
  }
  v3 = this->f32[0];
  v4 = this->f32[1];
  if (v4 != 1.0 || v3 != 1.0)
  {
    if (v3 == v4)
    {
      v6 = *((_QWORD *)a2 + 7);
      if (v6)
      {
        if ((_DWORD)v2)
        {
          v7 = 0;
          v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8);
          v9 = (int)v2;
          v10 = 4 * (int)v2 - 4;
          v11 = (v10 >> 2) + 1;
          do
          {
            v12 = *(float32x4_t **)(v8 + 8 * v7);
            v13 = (float *)v12;
            if (v10 < 0x1C)
              goto LABEL_16;
            v13 = &v12->f32[v11 & 0x7FFFFFFFFFFFFFF8];
            v14 = v12 + 1;
            v15 = v11 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v16 = vmulq_n_f32(*v14, v3);
              v14[-1] = vmulq_n_f32(v14[-1], v3);
              *v14 = v16;
              v14 += 2;
              v15 -= 8;
            }
            while (v15);
            if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_16:
              v17 = &v12->f32[(int)v2];
              do
              {
                *v13 = v3 * *v13;
                ++v13;
              }
              while (v13 != v17);
            }
            ++v7;
          }
          while (v7 != v6);
LABEL_37:
          this->i32[0] = this->i32[1];
          v27 = 0;
          v28 = (v9 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          v29 = (v28 + 1) & 0x7FFFFFFFFFFFFFF8;
          v30.i64[0] = 0xC7000000C7000000;
          v30.i64[1] = 0xC7000000C7000000;
          v31 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
          do
          {
            this = *(float32x4_t **)(v8 + 8 * v27);
            v32 = (float *)this;
            if (v28 < 7)
              goto LABEL_44;
            v32 = &this->f32[v29];
            v33 = this + 1;
            v34 = (v28 + 1) & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v35 = vbslq_s8((int8x16_t)vcgeq_f32(v30, *v33), (int8x16_t)v30, vbslq_s8((int8x16_t)vcgeq_f32(*v33, v31), (int8x16_t)v31, *(int8x16_t *)v33));
              v33[-1] = (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(v30, v33[-1]), (int8x16_t)v30, vbslq_s8((int8x16_t)vcgeq_f32(v33[-1], v31), (int8x16_t)v31, (int8x16_t)v33[-1]));
              *v33 = (float32x4_t)v35;
              v33 += 2;
              v34 -= 8;
            }
            while (v34);
            if (v28 + 1 != v29)
            {
LABEL_44:
              this = (float32x4_t *)((char *)this + 4 * v9);
              do
              {
                v36 = 32767.0;
                if (*v32 < 32767.0)
                  v36 = *v32;
                if (*v32 > -32768.0)
                  v37 = v36;
                else
                  v37 = -32768.0;
                *v32++ = v37;
              }
              while (v32 != (float *)this);
            }
            ++v27;
          }
          while (v27 != v6);
          return this;
        }
        goto LABEL_52;
      }
    }
    else
    {
      v18 = (float)(v4 - v3) * this->f32[3];
      v6 = *((_QWORD *)a2 + 7);
      if (v18 <= 0.0)
      {
        if (v6)
        {
          if ((_DWORD)v2)
          {
            v23 = 0;
            v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8);
            v9 = (int)v2;
            do
            {
              v24 = *(float **)(v8 + 8 * v23);
              v25 = this->f32[0];
              v26 = 4 * (int)v2;
              do
              {
                v25 = v18 + v25;
                if (v25 < this->f32[1])
                  v25 = this->f32[1];
                *v24 = *v24 * v25;
                ++v24;
                v26 -= 4;
              }
              while (v26);
              ++v23;
            }
            while (v23 != v6);
            goto LABEL_37;
          }
LABEL_52:
          v4 = this->f32[1];
        }
      }
      else if (v6)
      {
        if ((_DWORD)v2)
        {
          v19 = 0;
          v8 = *(_QWORD *)(*((_QWORD *)a2 + 10) + 8);
          v9 = (int)v2;
          do
          {
            v20 = *(float **)(v8 + 8 * v19);
            v21 = this->f32[0];
            v22 = 4 * (int)v2;
            do
            {
              v21 = v18 + v21;
              if (this->f32[1] < v21)
                v21 = this->f32[1];
              *v20 = *v20 * v21;
              ++v20;
              v22 -= 4;
            }
            while (v22);
            ++v19;
          }
          while (v19 != v6);
          goto LABEL_37;
        }
        goto LABEL_52;
      }
    }
    this->f32[0] = v4;
  }
  return this;
}

std::string::size_type webrtc::internal::AudioSendStream::AudioSendStream(std::string::size_type a1, uint64_t a2, unsigned int *a3, void (****a4)(_QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9, uint64_t *a10, uint64_t a11)
{
  pthread_mutexattr_t *sig;
  unint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  pthread_mutexattr_t *p_p;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  unint64_t v29;
  pthread_mutexattr_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (***v39)(_QWORD);
  uint64_t v40;
  pthread_mutexattr_t *v41;
  unint64_t v42;
  unsigned int *v43;
  BOOL v44;
  int v45;
  int v46;
  pthread_mutexattr_t *v48;
  unint64_t v49;
  BOOL v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v61;
  _BYTE v62[16];
  void (*v63)(uint64_t, _BYTE *, _BYTE *);
  uint64_t v64;
  pthread_mutexattr_t __p;
  unsigned __int8 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0AEA40;
  *(_QWORD *)(a1 + 8) = &unk_24C0AEAB0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a11;
  *(_DWORD *)(a1 + 40) = 0;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a11 + 16))(&__p, a11, "WebRTC-Audio-ABWENoTWCC", 23);
  if ((char)v66 < 0)
  {
    v18 = *(_QWORD *)__p.__opaque;
    if ((*(_QWORD *)__p.__opaque & 0x8000000000000000) != 0)
      goto LABEL_71;
    sig = (pthread_mutexattr_t *)__p.__sig;
    if (*(_QWORD *)__p.__opaque)
    {
      if (!__p.__sig)
        goto LABEL_71;
    }
  }
  else
  {
    sig = &__p;
    v18 = v66;
  }
  if (v18 < 7)
  {
    v19 = 0;
    if ((v66 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v20 = sig->__sig;
  v21 = *(_DWORD *)((char *)&sig->__sig + 3);
  v19 = v20 == 1650552389 && v21 == 1684368482;
  if ((v66 & 0x80) != 0)
LABEL_16:
    operator delete((void *)__p.__sig);
LABEL_17:
  *(_BYTE *)(a1 + 56) = v19;
  *(_BYTE *)(a1 + 57) = v19;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 24)
                                                                                           + 16))(&__p, *(_QWORD *)(a1 + 24), "WebRTC-Audio-AlrProbing", 23);
  if ((char)v66 < 0)
  {
    v24 = *(_QWORD *)__p.__opaque;
    if ((*(_QWORD *)__p.__opaque & 0x8000000000000000) != 0)
      goto LABEL_71;
    p_p = (pthread_mutexattr_t *)__p.__sig;
    if (*(_QWORD *)__p.__opaque)
    {
      if (!__p.__sig)
        goto LABEL_71;
    }
  }
  else
  {
    p_p = &__p;
    v24 = v66;
  }
  if (v24 >= 8)
  {
    v25 = p_p->__sig != 0x64656C6261736944;
    v61 = a3;
    if ((v66 & 0x80) == 0)
      goto LABEL_27;
  }
  else
  {
    v25 = 1;
    v61 = a3;
    if ((v66 & 0x80) == 0)
      goto LABEL_27;
  }
  operator delete((void *)__p.__sig);
LABEL_27:
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 58) = v25;
  v26 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  v27 = operator new(0xA0uLL);
  *v27 = "min";
  v27[1] = a1 + 64;
  v27[2] = webrtc::struct_parser_impl::TypedParser<std::optional<webrtc::DataRate>>::Parse;
  v27[3] = webrtc::struct_parser_impl::TypedParser<std::optional<webrtc::DataRate>>::Encode;
  v27[4] = "max";
  v27[5] = a1 + 80;
  v27[6] = webrtc::struct_parser_impl::TypedParser<std::optional<webrtc::DataRate>>::Parse;
  v27[7] = webrtc::struct_parser_impl::TypedParser<std::optional<webrtc::DataRate>>::Encode;
  v27[8] = "prio_rate";
  v27[9] = a1 + 96;
  v27[10] = webrtc::struct_parser_impl::TypedParser<webrtc::DataRate>::Parse;
  v27[11] = webrtc::struct_parser_impl::TypedParser<webrtc::DataRate>::Encode;
  v27[12] = "prio_rate_raw";
  v27[13] = a1 + 104;
  v27[14] = webrtc::struct_parser_impl::TypedParser<std::optional<webrtc::DataRate>>::Parse;
  v27[15] = webrtc::struct_parser_impl::TypedParser<std::optional<webrtc::DataRate>>::Encode;
  v27[16] = "rate_prio";
  v27[17] = a1 + 120;
  v27[18] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Parse;
  v27[19] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Encode;
  v28 = (uint64_t *)operator new();
  *v28 = (uint64_t)v27;
  v28[1] = (uint64_t)(v27 + 20);
  v28[2] = (uint64_t)(v27 + 20);
  (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v26 + 16))(&__p, v26, "WebRTC-Audio-Allocation", 23);
  if ((char)v66 < 0)
  {
    v29 = *(_QWORD *)__p.__opaque;
    if ((*(_QWORD *)__p.__opaque & 0x8000000000000000) != 0)
      goto LABEL_71;
    v30 = (pthread_mutexattr_t *)__p.__sig;
    if (*(_QWORD *)__p.__opaque)
    {
      if (!__p.__sig)
        goto LABEL_71;
    }
  }
  else
  {
    v29 = v66;
    v30 = &__p;
  }
  webrtc::StructParametersParser::Parse(v28, (uint64_t)v30, v29);
  if ((char)v66 < 0)
    operator delete((void *)__p.__sig);
  v31 = (void *)*v28;
  if (*v28)
  {
    v28[1] = (uint64_t)v31;
    operator delete(v31);
  }
  MEMORY[0x20BD0ADEC](v28, 0x20C40960023A9);
  if (*(_BYTE *)(a1 + 112) && *(_QWORD *)(a1 + 96) && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc");
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_BYTE *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = 5000;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = -1;
  *(_QWORD *)(a1 + 272) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 480) = 65537;
  *(_BYTE *)(a1 + 484) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  v39 = *a4;
  *(_QWORD *)(a1 + 504) = *a4;
  if (v39)
    (**v39)(v39);
  v40 = *a10;
  *a10 = 0;
  *(_QWORD *)(a1 + 512) = v40;
  *(_QWORD *)(a1 + 520) = a8;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 24)
                                                                                           + 16))(&__p, *(_QWORD *)(a1 + 24), "WebRTC-Audio-LegacyOverhead", 27);
  if ((char)v66 < 0)
  {
    v42 = *(_QWORD *)__p.__opaque;
    v43 = v61;
    if ((*(_QWORD *)__p.__opaque & 0x8000000000000000) != 0)
      goto LABEL_71;
    v41 = (pthread_mutexattr_t *)__p.__sig;
    if (*(_QWORD *)__p.__opaque)
    {
      if (!__p.__sig)
        goto LABEL_71;
    }
  }
  else
  {
    v41 = &__p;
    v42 = v66;
    v43 = v61;
  }
  if (v42 < 7)
  {
    v44 = 0;
    if ((v66 & 0x80) == 0)
      goto LABEL_58;
    goto LABEL_57;
  }
  v45 = v41->__sig;
  v46 = *(_DWORD *)((char *)&v41->__sig + 3);
  v44 = v45 == 1650552389 && v46 == 1684368482;
  if ((v66 & 0x80) != 0)
LABEL_57:
    operator delete((void *)__p.__sig);
LABEL_58:
  *(_BYTE *)(a1 + 528) = v44;
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 24)
                                                                                           + 16))(&__p, *(_QWORD *)(a1 + 24), "WebRTC-Audio-PriorityBitrate", 28);
  if (((char)v66 & 0x80000000) == 0)
  {
    v48 = &__p;
    v49 = v66;
    goto LABEL_63;
  }
  v49 = *(_QWORD *)__p.__opaque;
  if ((*(_QWORD *)__p.__opaque & 0x8000000000000000) != 0
    || (v48 = (pthread_mutexattr_t *)__p.__sig, *(_QWORD *)__p.__opaque) && !__p.__sig)
  {
LABEL_71:
    __break(1u);
  }
LABEL_63:
  if (v49 >= 8)
  {
    v50 = v48->__sig != 0x64656C6261736944;
    if ((v66 & 0x80) == 0)
      goto LABEL_68;
  }
  else
  {
    v50 = 1;
    if ((v66 & 0x80) == 0)
      goto LABEL_68;
  }
  operator delete((void *)__p.__sig);
LABEL_68:
  *(_BYTE *)(a1 + 529) = v50;
  *(_DWORD *)(a1 + 532) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  pthread_mutexattr_init(&__p);
  pthread_mutexattr_setpolicy_np(&__p, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 552), &__p);
  pthread_mutexattr_destroy(&__p);
  pthread_mutexattr_init(&__p);
  pthread_mutexattr_setpolicy_np(&__p, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 616), &__p);
  pthread_mutexattr_destroy(&__p);
  *(_DWORD *)(a1 + 680) = 0;
  *(_WORD *)(a1 + 684) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_QWORD *)(a1 + 704) = a7;
  *(_QWORD *)(a1 + 712) = a6;
  *(_QWORD *)(a1 + 720) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 512) + 160))(*(_QWORD *)(a1 + 512));
  v52 = a9[1];
  v51 = a9[2];
  *(_OWORD *)(a1 + 728) = *a9;
  *(_OWORD *)(a1 + 744) = v52;
  *(_OWORD *)(a1 + 760) = v51;
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 816) = 0;
  *(_BYTE *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_BYTE *)(a1 + 792) = 0;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v53, v54, v55, v56, v57, v58, v59, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc");
  v63 = (void (*)(uint64_t, _BYTE *, _BYTE *))absl::internal_any_invocable::EmptyManager;
  v64 = 0;
  webrtc::internal::AudioSendStream::ConfigureStream(a1, v43, 1, (uint64_t)v62);
  v63(1, v62, v62);
  return a1;
}

std::string::size_type webrtc::internal::AudioSendStream::AudioSendStream(std::string::size_type a1, uint64_t a2, uint64_t a3, void (****a4)(_QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  void (***v18)(_QWORD);
  void (***v19)(_QWORD);
  uint64_t v20;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  void *v34;
  uint64_t v35;

  v11 = a6;
  v13 = a2;
  v14 = *(_QWORD *)(a3 + 120);
  v15 = *(unsigned __int8 *)(a3 + 56);
  v16 = *(_DWORD *)(a3 + 112);
  v17 = *(_DWORD *)a3;
  v19 = *(void (****)(_QWORD))(a3 + 352);
  v18 = *(void (****)(_QWORD))(a3 + 360);
  v34 = v18;
  if (v18)
  {
    v28 = v15;
    v20 = a5;
    v22 = v14;
    v23 = v16;
    v24 = v17;
    (**v18)(v18);
    v15 = v28;
    v17 = v24;
    v16 = v23;
    v14 = v22;
    v13 = a2;
    a5 = v20;
    v11 = a6;
  }
  webrtc::voe::CreateChannelSend(v13, a5, v14, a9, a8, v19, a3 + 344, v15 != 0, &v35, v16, v17, &v34, v11, a11);
  webrtc::internal::AudioSendStream::AudioSendStream(a1, v13, (unsigned int *)a3, a4, v25, v11, a7, a8, a10, &v35, a11);
  v26 = v35;
  v35 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (v34)
    (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
  return a1;
}

uint64_t webrtc::internal::AudioSendStream::ConfigureStream(std::string::size_type a1, unsigned int *a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const void **v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  char *v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  std::string::size_type v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void **v51;
  unsigned __int8 *v52;
  _QWORD *v53;
  uint64_t v54;
  void (***v55)(_QWORD, unsigned __int8 *);
  uint64_t v56;
  void (***v57)(_QWORD);
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  const void **v68;
  unsigned __int8 *v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  const void **v81;
  unsigned __int8 *v82;
  int v83;
  int v84;
  int v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  void (*v103)(uint64_t, std::string *);
  std::string::size_type v104;
  std::string::size_type v105;
  unsigned int *v106;
  std::string::size_type v107;
  uint64_t v108;
  uint64_t v109;
  std::string::size_type v110;
  std::string *p_p;
  unsigned int *v112;
  unsigned int *v113;
  int v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  std::string::size_type v118;
  std::string::size_type v119;
  std::string::size_type v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  const void **v130;
  unsigned __int8 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  const void **v137;
  unsigned __int8 *v138;
  BOOL v139;
  BOOL v140;
  void (*v141)(void);
  std::string *v142;
  char v143;
  __int128 v144;
  std::string *v145;
  unsigned int *v146;
  size_t v147;
  __int128 v148;
  const std::string::value_type *v149;
  size_t v150;
  const std::string::value_type *v151;
  size_t v152;
  std::string *v153;
  char v154;
  __int128 v155;
  const std::string::value_type *v156;
  size_t v157;
  __int128 v158;
  __int128 v159;
  std::string *v160;
  char v161;
  __int128 v162;
  std::string *v163;
  __int128 v164;
  const std::string::value_type *v165;
  size_t v166;
  unsigned int *v167;
  unsigned int *v168;
  unsigned int *v169;
  __int128 v170;
  __int128 v171;
  void (***v172)(_QWORD);
  uint64_t v173;
  uint64_t v174;
  std::string *v175;
  char v176;
  __int128 v177;
  unsigned int v178;
  void (***v179)(_QWORD);
  const std::string::value_type *v180;
  size_t v181;
  unsigned int v182;
  uint64_t v183;
  void (***v184)(_QWORD);
  uint64_t result;
  void (*v186)(uint64_t, std::string *);
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int *v199;
  __int16 v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  int v204;
  unsigned int v205;
  _DWORD v206[7];
  void (***v207)(_QWORD);
  void (***v208)(_QWORD, unsigned __int8 *);
  std::string::size_type v209;
  std::string *v210;
  std::string::size_type v211;
  std::string __p;
  __int128 v213;
  uint64_t *v214;
  uint64_t v215[3];
  std::string::size_type v216[3];

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0
    && (webrtc::AudioSendStream::Config::ToString((webrtc::AudioSendStream::Config *)a2, &__p),
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc"), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v15 = *(_QWORD *)(a1 + 520);
    v199 = (unsigned int *)(a1 + 136);
    if (a3)
      v16 = 0;
    else
      v16 = a1 + 136;
    if ((a3 & 1) != 0)
      goto LABEL_49;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 520);
    v199 = (unsigned int *)(a1 + 136);
    if (a3)
      v16 = 0;
    else
      v16 = a1 + 136;
    if ((a3 & 1) != 0)
      goto LABEL_49;
  }
  if (*a2 != *v199)
    goto LABEL_49;
  v18 = *((_QWORD *)a2 + 8);
  v17 = *((_QWORD *)a2 + 9);
  v19 = *(unsigned __int8 ***)(a1 + 200);
  if (v17 - v18 != *(_QWORD *)(a1 + 208) - (_QWORD)v19)
    goto LABEL_49;
  if (v18 == v17)
  {
LABEL_29:
    if (*((_BYTE *)a2 + 288) && *(_BYTE *)(v16 + 288))
    {
      v26 = *((unsigned __int8 *)a2 + 215);
      if ((v26 & 0x80u) == 0)
        v27 = *((unsigned __int8 *)a2 + 215);
      else
        v27 = *((_QWORD *)a2 + 25);
      v28 = *(unsigned __int8 *)(v16 + 215);
      v29 = (char)v28;
      if ((v28 & 0x80u) != 0)
        v28 = *(_QWORD *)(v16 + 200);
      if (v27 != v28)
        goto LABEL_49;
      v30 = (const void **)(a2 + 48);
      if (v29 >= 0)
        v31 = (unsigned __int8 *)(v16 + 192);
      else
        v31 = *(unsigned __int8 **)(v16 + 192);
      if ((v26 & 0x80) != 0)
      {
        if (memcmp(*v30, v31, *((_QWORD *)a2 + 25)))
          goto LABEL_49;
      }
      else if (*((_BYTE *)a2 + 215))
      {
        while (*(unsigned __int8 *)v30 == *v31)
        {
          v30 = (const void **)((char *)v30 + 1);
          ++v31;
          if (!--v26)
            goto LABEL_428;
        }
        goto LABEL_49;
      }
LABEL_428:
      if (a2[46] == *(_DWORD *)(v16 + 184))
        goto LABEL_79;
    }
    else if (!(*(unsigned __int8 *)(v16 + 288) | *((unsigned __int8 *)a2 + 288)))
    {
      goto LABEL_79;
    }
  }
  else
  {
    while (1)
    {
      v20 = *(unsigned __int8 *)(v18 + 23);
      if ((v20 & 0x80u) == 0)
        v21 = (unsigned __int8 *)*(unsigned __int8 *)(v18 + 23);
      else
        v21 = *(unsigned __int8 **)(v18 + 8);
      v22 = (unsigned __int8 *)*((unsigned __int8 *)v19 + 23);
      v23 = (char)v22;
      if ((char)v22 < 0)
        v22 = v19[1];
      if (v21 != v22)
        break;
      if (v23 >= 0)
        v24 = (unsigned __int8 *)v19;
      else
        v24 = *v19;
      if ((v20 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v18, v24, *(_QWORD *)(v18 + 8)))
          break;
      }
      else if (*(_BYTE *)(v18 + 23))
      {
        v25 = 0;
        while (*(unsigned __int8 *)(v18 + v25) == v24[v25])
        {
          if (v20 == ++v25)
            goto LABEL_26;
        }
        break;
      }
LABEL_26:
      if (*(_DWORD *)(v18 + 24) != *((_DWORD *)v19 + 6)
        || *(unsigned __int8 *)(v18 + 28) != *((unsigned __int8 *)v19 + 28))
      {
        break;
      }
      v18 += 32;
      v19 += 4;
      if (v18 == v17)
        goto LABEL_29;
    }
  }
LABEL_49:
  v32 = operator new();
  *(_DWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 48) = 0;
  *(_QWORD *)(v32 + 56) = 0;
  *(_QWORD *)(v32 + 64) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 32) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  *(_BYTE *)(v32 + 40) = 0;
  *(_DWORD *)(v32 + 72) = 2;
  *(_QWORD *)(v32 + 80) = 0;
  *(_QWORD *)(v32 + 88) = 0;
  *(_QWORD *)(v32 + 96) = 0;
  *(_QWORD *)v32 = *a2;
  if ((unsigned int *)(v32 + 48) != a2 + 16)
    std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(v32 + 48), *((_QWORD *)a2 + 8), *((_QWORD *)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 5);
  if (!*((_BYTE *)a2 + 288))
    goto LABEL_72;
  v33 = v15;
  v34 = a4;
  v35 = (int *)(a2 + 46);
  v36 = (char *)(a2 + 48);
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  v37 = *(_QWORD *)(v32 + 88);
  if (v37 < *(_QWORD *)(v32 + 96))
  {
    if (!v37)
      goto LABEL_445;
    if (*((char *)a2 + 215) < 0)
    {
      v38 = *((_QWORD *)a2 + 25);
      if ((v38 & 0x8000000000000000) != 0)
        goto LABEL_445;
      v36 = *(char **)v36;
      if (v38)
      {
        if (!v36)
          goto LABEL_445;
      }
      if (v38 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_446;
    }
    else
    {
      v38 = *((unsigned __int8 *)a2 + 215);
    }
    v198 = *v35;
    if (v38 > 0x16)
    {
      v42 = (v38 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v42 = v38 | 7;
      v43 = v42 + 1;
      v40 = (char *)operator new(v42 + 1);
      *(_QWORD *)(v37 + 8) = v38;
      *(_QWORD *)(v37 + 16) = v43 | 0x8000000000000000;
      *(_QWORD *)v37 = v40;
      v41 = &v40[v38];
      if (v40 > v36)
        goto LABEL_68;
    }
    else
    {
      *(_BYTE *)(v37 + 23) = v38;
      v40 = (char *)v37;
      v41 = (char *)(v37 + v38);
      if (v37 > (unint64_t)v36)
      {
LABEL_68:
        if (v38)
          memmove(v40, v36, v38);
        *v41 = 0;
        v39 = (char *)(v37 + 32);
        *(_QWORD *)(v37 + 24) = v198;
        goto LABEL_71;
      }
    }
    if (v41 > v36)
      goto LABEL_445;
    goto LABEL_68;
  }
  v39 = std::vector<webrtc::rtclog::StreamConfig::Codec>::__emplace_back_slow_path<std::string const&,int const&,int>((void **)(v32 + 80), (char *)a2 + 192, v35, (int *)&__p);
LABEL_71:
  *(_QWORD *)(v32 + 88) = v39;
  a4 = v34;
  v15 = v33;
LABEL_72:
  v44 = (_QWORD *)operator new();
  *v44 = &unk_24C0BBBD0;
  if (rtc::g_clock)
  {
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v45 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
        / dword_253EA791C;
  }
  *v44 = &unk_24C0BBCE8;
  v44[1] = 1000 * (v45 / 1000000);
  v44[2] = v32;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 40))(v15, &__p);
  v46 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v46)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v46 + 8))(v46);
LABEL_79:
  if (*(_BYTE *)(a1 + 768) && a3)
    (*(void (**)(_QWORD, std::string::size_type))(**(_QWORD **)(a1 + 720) + 168))(*(_QWORD *)(a1 + 720), a1 + 728);
  if (a3)
  {
    LOBYTE(v47) = *((_BYTE *)a2 + 111);
  }
  else
  {
    v48 = *(unsigned __int8 *)(a1 + 247);
    if ((v48 & 0x80u) == 0)
      v49 = *(unsigned __int8 *)(a1 + 247);
    else
      v49 = *(_QWORD *)(a1 + 232);
    v50 = *((unsigned __int8 *)a2 + 111);
    v47 = (char)v50;
    if ((v50 & 0x80u) != 0)
      v50 = *((_QWORD *)a2 + 12);
    if (v49 == v50)
    {
      v51 = (const void **)(a1 + 224);
      if (v47 >= 0)
        v52 = (unsigned __int8 *)(a2 + 22);
      else
        v52 = (unsigned __int8 *)*((_QWORD *)a2 + 11);
      if ((v48 & 0x80) != 0)
      {
        if (!memcmp(*v51, v52, *(_QWORD *)(a1 + 232)))
          goto LABEL_106;
      }
      else
      {
        if (!*(_BYTE *)(a1 + 247))
          goto LABEL_106;
        while (*(unsigned __int8 *)v51 == *v52)
        {
          v51 = (const void **)((char *)v51 + 1);
          ++v52;
          if (!--v48)
            goto LABEL_106;
        }
      }
    }
  }
  v53 = a2 + 22;
  if ((v47 & 0x80) != 0)
  {
    v54 = *((_QWORD *)a2 + 12);
    if (v54 < 0)
      goto LABEL_445;
    v53 = (_QWORD *)*v53;
    if (v54)
    {
      if (!v53)
        goto LABEL_445;
    }
  }
  else
  {
    v54 = v47;
  }
  (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 512) + 56))(*(_QWORD *)(a1 + 512), v53, v54);
  if (!a3)
  {
LABEL_106:
    v55 = (void (***)(_QWORD, unsigned __int8 *))*((_QWORD *)a2 + 44);
    if (v55 == *(void (****)(_QWORD, unsigned __int8 *))(a1 + 488))
      goto LABEL_113;
    goto LABEL_107;
  }
  v55 = (void (***)(_QWORD, unsigned __int8 *))*((_QWORD *)a2 + 44);
LABEL_107:
  v56 = *(_QWORD *)(a1 + 512);
  v208 = v55;
  if (v55)
    (**v55)(v55, v52);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v56 + 192))(v56, &v208);
  if (v208)
    ((void (*)(void (***)(_QWORD, unsigned __int8 *)))(*v208)[1])(v208);
  if (a3)
  {
    v57 = (void (***)(_QWORD))*((_QWORD *)a2 + 45);
    goto LABEL_114;
  }
LABEL_113:
  v57 = (void (***)(_QWORD))*((_QWORD *)a2 + 45);
  if (v57 == *(void (****)(_QWORD))(a1 + 496))
    goto LABEL_120;
LABEL_114:
  v58 = *(_QWORD *)(a1 + 512);
  v207 = v57;
  if (v57)
    (**v57)(v57);
  (*(void (**)(uint64_t, void (****)(_QWORD)))(*(_QWORD *)v58 + 200))(v58, &v207);
  if (v207)
    (*v207)[1](v207);
  if (!a3)
  {
LABEL_120:
    v59 = *((unsigned __int8 *)a2 + 56);
    if (v59 == *(unsigned __int8 *)(a1 + 192))
      goto LABEL_122;
    goto LABEL_121;
  }
  v59 = *((unsigned __int8 *)a2 + 56);
LABEL_121:
  (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(a1 + 720) + 96))(*(_QWORD *)(a1 + 720), v59 != 0);
LABEL_122:
  webrtc::internal::AudioSendStream::FindExtensionIds((uint64_t)v206, *(uint64_t **)(a1 + 200), *(uint64_t **)(a1 + 208));
  webrtc::internal::AudioSendStream::FindExtensionIds((uint64_t)&v201, *((uint64_t **)a2 + 8), *((uint64_t **)a2 + 9));
  if ((a3 & 1) != 0)
  {
    (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(a1 + 512) + 64))(*(_QWORD *)(a1 + 512), v201 != 0);
    v60 = v202;
    goto LABEL_127;
  }
  if (v201 != v206[0])
    (*(void (**)(_QWORD, BOOL))(**(_QWORD **)(a1 + 512) + 64))(*(_QWORD *)(a1 + 512), v201 != 0);
  v60 = v202;
  if (v202 != v206[1])
  {
LABEL_127:
    (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 720) + 112))(*(_QWORD *)(a1 + 720), "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time", 58);
    if ((_DWORD)v60)
      (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 720) + 104))(*(_QWORD *)(a1 + 720), "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time", 58, v60);
    if ((a3 & 1) != 0)
      goto LABEL_133;
  }
  if (v204 == v206[3] || *(_BYTE *)(a1 + 56))
    goto LABEL_139;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 512) + 80))(*(_QWORD *)(a1 + 512));
LABEL_133:
  if (!*(_BYTE *)(a1 + 56))
  {
    if (v204)
    {
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 720) + 104))(*(_QWORD *)(a1 + 720), "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01", 73);
      if (*(_BYTE *)(a1 + 58))
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 712) + 160))(*(_QWORD *)(a1 + 712), 1);
    }
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 512) + 72))(*(_QWORD *)(a1 + 512), *(_QWORD *)(a1 + 712));
  if (!a3)
  {
LABEL_139:
    v61 = v205;
    if (v205 != v206[4])
      goto LABEL_155;
    v62 = *((unsigned __int8 *)a2 + 55);
    v63 = v62;
    v64 = *((_QWORD *)a2 + 5);
    if ((v62 & 0x80u) == 0)
      v65 = *((unsigned __int8 *)a2 + 55);
    else
      v65 = *((_QWORD *)a2 + 5);
    v66 = *(unsigned __int8 *)(a1 + 191);
    v67 = (char)v66;
    if ((v66 & 0x80u) != 0)
      v66 = *(_QWORD *)(a1 + 176);
    if (v65 == v66)
    {
      v68 = (const void **)(a2 + 8);
      if (v67 >= 0)
        v69 = (unsigned __int8 *)(a1 + 168);
      else
        v69 = *(unsigned __int8 **)(a1 + 168);
      if ((char)v62 < 0)
      {
        v71 = memcmp(*v68, v69, *((_QWORD *)a2 + 5)) == 0;
        if (!(_DWORD)v61)
          goto LABEL_171;
LABEL_160:
        if (v71)
          goto LABEL_171;
        goto LABEL_161;
      }
      if (!(_BYTE)v62)
        goto LABEL_173;
      v70 = *((unsigned __int8 *)a2 + 55);
      while (*(unsigned __int8 *)v68 == *v69)
      {
        v68 = (const void **)((char *)v68 + 1);
        ++v69;
        if (!--v70)
          goto LABEL_171;
      }
    }
    v71 = 0;
    if (!v205)
      goto LABEL_171;
    goto LABEL_160;
  }
  v61 = v205;
LABEL_155:
  if (!(_DWORD)v61)
    goto LABEL_171;
  v62 = *((unsigned __int8 *)a2 + 55);
  v64 = *((_QWORD *)a2 + 5);
  v63 = *((_BYTE *)a2 + 55);
LABEL_161:
  if (v63 >= 0)
    v72 = v62;
  else
    v72 = v64;
  if (v72)
  {
    v73 = a2 + 8;
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 720) + 104))(*(_QWORD *)(a1 + 720), "urn:ietf:params:rtp-hdrext:sdes:mid", 35, v61);
    if (*((char *)a2 + 55) < 0)
    {
      v74 = *((_QWORD *)a2 + 5);
      if (v74 < 0)
        goto LABEL_445;
      v73 = (_QWORD *)*v73;
      if (v74)
      {
        if (!v73)
          goto LABEL_445;
      }
    }
    else
    {
      v74 = *((unsigned __int8 *)a2 + 55);
    }
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 720) + 216))(*(_QWORD *)(a1 + 720), v73, v74);
  }
LABEL_171:
  if (a3)
  {
    v75 = v203;
    goto LABEL_174;
  }
LABEL_173:
  v75 = v203;
  if (v203 != v206[2])
  {
LABEL_174:
    (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 720) + 112))(*(_QWORD *)(a1 + 720), "http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time", 61);
    if ((_DWORD)v75)
      (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 720) + 104))(*(_QWORD *)(a1 + 720), "http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time", 61, v75);
  }
  if (!*((_BYTE *)a2 + 288))
    goto LABEL_264;
  v76 = a2 + 46;
  if (!*(_BYTE *)(a1 + 424))
    goto LABEL_207;
  if (webrtc::AudioSendStream::Config::SendCodecSpec::operator==((uint64_t)(a2 + 46), a1 + 320))
  {
    if (*((_BYTE *)a2 + 176) && *(_BYTE *)(a1 + 312))
    {
      v77 = *((unsigned __int8 *)a2 + 175);
      if ((v77 & 0x80u) == 0)
        v78 = *((unsigned __int8 *)a2 + 175);
      else
        v78 = *((_QWORD *)a2 + 20);
      v79 = *(unsigned __int8 *)(a1 + 311);
      v80 = (char)v79;
      if ((v79 & 0x80u) != 0)
        v79 = *(_QWORD *)(a1 + 296);
      if (v78 == v79)
      {
        v81 = (const void **)(a2 + 38);
        if (v80 >= 0)
          v82 = (unsigned __int8 *)(a1 + 288);
        else
          v82 = *(unsigned __int8 **)(a1 + 288);
        if ((v77 & 0x80) != 0)
        {
          if (!memcmp(*v81, v82, *((_QWORD *)a2 + 20)))
            goto LABEL_264;
        }
        else
        {
          if (!*((_BYTE *)a2 + 175))
            goto LABEL_264;
          while (*(unsigned __int8 *)v81 == *v82)
          {
            v81 = (const void **)((char *)v81 + 1);
            ++v82;
            if (!--v77)
              goto LABEL_264;
          }
        }
      }
    }
    else if ((*((_BYTE *)a2 + 176) != 0) == (*(_BYTE *)(a1 + 312) != 0))
    {
      goto LABEL_264;
    }
  }
  v83 = *((unsigned __int8 *)a2 + 288);
  if (!*(_BYTE *)(a1 + 424))
    goto LABEL_206;
  if (!*((_BYTE *)a2 + 288))
    goto LABEL_445;
  v84 = webrtc::operator==((uint64_t)(a2 + 48), (unsigned __int8 *)(a1 + 328));
  v83 = *((unsigned __int8 *)a2 + 288);
  if (!v84)
  {
LABEL_206:
    if (v83)
      goto LABEL_207;
LABEL_445:
    __break(1u);
LABEL_446:
    abort();
  }
  if (!*((_BYTE *)a2 + 288) || !*(_BYTE *)(a1 + 424))
    goto LABEL_445;
  if (*v76 != *(_DWORD *)(a1 + 320))
    goto LABEL_207;
  if (*((_BYTE *)a2 + 272) && *(_BYTE *)(a1 + 408))
  {
    if (a2[67] == *(_DWORD *)(a1 + 404))
      goto LABEL_291;
LABEL_207:
    (*(void (**)(std::string::size_type *__return_ptr, _QWORD, _QWORD, unsigned int *, _QWORD, _QWORD))(**((_QWORD **)a2 + 37) + 48))(v216, *((_QWORD *)a2 + 37), a2[46], a2 + 48, *((_QWORD *)a2 + 38), *((_QWORD *)a2 + 39));
    if (!v216[0])
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v94, v95, v96, v97, v98, v99, v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc");
      v101 = (char *)operator new(0x28uLL);
      v102 = v101;
      if (v101 > "Failed to set up send codec state." || v101 + 34 <= "Failed to set up send codec state.")
      {
        strcpy(v101, "Failed to set up send codec state.");
        if (*(_QWORD *)(a4 + 24))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 10;
          std::string::__init_copy_ctor_external((std::string *)&__p.__r_.__value_.__r.__words[1], v101, 0x22uLL);
          v103 = *(void (**)(uint64_t, std::string *))(a4 + 24);
          DWORD2(v213) = 0;
          BYTE12(v213) = 0;
          BYTE14(v213) = 0;
          v103(a4, &__p);
          if (SBYTE7(v213) < 0)
            operator delete((void *)__p.__r_.__value_.__l.__size_);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(1, a4, a4);
          *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
          *(_QWORD *)(a4 + 24) = 0;
        }
        operator delete(v102);
        goto LABEL_264;
      }
      goto LABEL_445;
    }
    if (*((_BYTE *)a2 + 280))
      (*(void (**)(void))(*(_QWORD *)v216[0] + 160))();
    if (*((_BYTE *)a2 + 176))
    {
      v85 = (*(uint64_t (**)(std::string::size_type, unsigned int *, _QWORD))(*(_QWORD *)v216[0] + 128))(v216[0], a2 + 38, *(_QWORD *)(a1 + 520));
      v86 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
      if (v85)
      {
        if ((v86 & 1) != 0)
          goto LABEL_225;
      }
      else if ((v86 & 1) != 0)
      {
        goto LABEL_225;
      }
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v87, v88, v89, v90, v91, v92, v93, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc");
    }
LABEL_225:
    if (*((_BYTE *)a2 + 264))
    {
      *(_QWORD *)((char *)&v213 + 4) = 0x800000064;
      v214 = 0;
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v216[0] + 24))(v216[0]);
      if (!*((_BYTE *)a2 + 264))
        goto LABEL_445;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = a2[65];
      v104 = v216[0];
      v216[0] = 0;
      __p.__r_.__value_.__r.__words[2] = v104;
      LODWORD(v213) = 0;
      webrtc::CreateComfortNoiseEncoder((uint64_t)&__p, &v210);
      v105 = v216[0];
      v216[0] = (std::string::size_type)v210;
      if (v105)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v105 + 8))(v105);
      if (!*((_BYTE *)a2 + 264) || !*((_BYTE *)a2 + 288))
        goto LABEL_445;
      (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 512) + 104))(*(_QWORD *)(a1 + 512), a2[65], a2[54]);
      if (__p.__r_.__value_.__r.__words[2])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__r.__words[2] + 8))(__p.__r_.__value_.__r.__words[2]);
    }
    if (*((char *)a2 + 215) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 24), *((_QWORD *)a2 + 25));
    else
      __p = *(std::string *)((_BYTE *)a2 + 8);
    v213 = *(_OWORD *)(a2 + 54);
    v215[0] = 0;
    v215[1] = 0;
    v214 = v215;
    v106 = (unsigned int *)*((_QWORD *)a2 + 29);
    if (v106 != a2 + 60)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v214, v215, (uint64_t)(v106 + 8), (uint64_t)(v106 + 8));
        v112 = (unsigned int *)*((_QWORD *)v106 + 1);
        if (v112)
        {
          do
          {
            v113 = v112;
            v112 = *(unsigned int **)v112;
          }
          while (v112);
        }
        else
        {
          do
          {
            v113 = (unsigned int *)*((_QWORD *)v106 + 2);
            v139 = *(_QWORD *)v113 == (_QWORD)v106;
            v106 = v113;
          }
          while (!v139);
        }
        v106 = v113;
      }
      while (v113 != a2 + 60);
    }
    v107 = v216[0];
    if (*((_BYTE *)a2 + 272))
    {
      LODWORD(v210) = a2[67];
      v216[0] = 0;
      v211 = v107;
      v108 = *(_QWORD *)(a1 + 24);
      v109 = operator new();
      webrtc::AudioEncoderCopyRed::AudioEncoderCopyRed(v109, (uint64_t)&v210, v108);
      v110 = v216[0];
      v216[0] = v109;
      if (v110)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v110 + 8))(v110);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        __p.__r_.__value_.__l.__size_ = 3;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
        p_p = &__p;
      }
      LOWORD(p_p->__r_.__value_.__l.__data_) = cricket::kRedCodecName;
      p_p->__r_.__value_.__s.__data_[2] = 100;
      p_p->__r_.__value_.__s.__data_[3] = 0;
      if (v211)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v211 + 8))(v211);
      v107 = v216[0];
    }
    if (*(_QWORD *)(a1 + 784))
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v107 + 192))(v107);
      v107 = v216[0];
    }
    v114 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v107 + 16))(v107);
    v115 = (uint64_t *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v216[0] + 24))(v216[0]);
    *(_DWORD *)(a1 + 532) = v114;
    *(_QWORD *)(a1 + 536) = v115;
    if (*(_BYTE *)(a1 + 544))
      webrtc::internal::AudioState::AddSendingStream(*(webrtc::internal::AudioState **)(a1 + 504), (uint64_t *)a1, v114, v115);
    if (*((_BYTE *)a2 + 288))
    {
      v116 = *(_QWORD *)(a1 + 512);
      v117 = *v76;
      v118 = v216[0];
      v216[0] = 0;
      v209 = v118;
      (*(void (**)(uint64_t, uint64_t, std::string *, std::string::size_type *))(*(_QWORD *)v116 + 32))(v116, v117, &__p, &v209);
      v119 = v209;
      v209 = 0;
      if (v119)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v119 + 8))(v119);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v214, v215[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v120 = v216[0];
      v216[0] = 0;
      if (v120)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v120 + 8))(v120);
      goto LABEL_264;
    }
    goto LABEL_445;
  }
  if ((*((_BYTE *)a2 + 272) != 0) != (*(_BYTE *)(a1 + 408) != 0))
    goto LABEL_207;
LABEL_291:
  if (*((_BYTE *)a2 + 280) && (!*(_BYTE *)(a1 + 416) || a2[69] != *(_DWORD *)(a1 + 412)))
  {
    v132 = *(_QWORD *)(a1 + 512);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(a2 + 69);
    (*(void (**)(uint64_t, std::string *, unsigned int **(*)(unsigned int **, uint64_t)))(*(_QWORD *)v132 + 48))(v132, &__p, rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::internal::AudioSendStream::ReconfigureSendCodec(webrtc::AudioSendStream::Config const&)::$_0>);
  }
  if (*((_BYTE *)a2 + 176) && *(_BYTE *)(a1 + 312))
  {
    v133 = *((unsigned __int8 *)a2 + 175);
    if ((v133 & 0x80u) == 0)
      v134 = *((unsigned __int8 *)a2 + 175);
    else
      v134 = *((_QWORD *)a2 + 20);
    v135 = *(unsigned __int8 *)(a1 + 311);
    v136 = (char)v135;
    if ((v135 & 0x80u) != 0)
      v135 = *(_QWORD *)(a1 + 296);
    if (v134 != v135)
      goto LABEL_433;
    v137 = (const void **)(a2 + 38);
    if (v136 >= 0)
      v138 = (unsigned __int8 *)(a1 + 288);
    else
      v138 = *(unsigned __int8 **)(a1 + 288);
    if ((v133 & 0x80) != 0)
    {
      if (!memcmp(*v137, v138, *((_QWORD *)a2 + 20)))
        goto LABEL_434;
LABEL_433:
      v195 = *(_QWORD *)(a1 + 512);
      __p.__r_.__value_.__r.__words[0] = a1;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)a2;
      (*(void (**)(uint64_t, std::string *, void (*)(_QWORD *, uint64_t)))(*(_QWORD *)v195 + 48))(v195, &__p, rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::internal::AudioSendStream::ReconfigureANA(webrtc::AudioSendStream::Config const&)::$_0>);
      goto LABEL_434;
    }
    if (!*((_BYTE *)a2 + 175))
      goto LABEL_434;
    while (*(unsigned __int8 *)v137 == *v138)
    {
      v137 = (const void **)((char *)v137 + 1);
      ++v138;
      if (!--v133)
        goto LABEL_434;
    }
  }
  else if ((*((_BYTE *)a2 + 176) != 0) == (*(_BYTE *)(a1 + 312) != 0))
  {
    goto LABEL_434;
  }
  if (*((_BYTE *)a2 + 176))
    goto LABEL_433;
  (*(void (**)(_QWORD, std::string *, uint64_t (*)(uint64_t, uint64_t)))(**(_QWORD **)(a1 + 512)
                                                                                          + 48))(*(_QWORD *)(a1 + 512), &__p, rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::internal::AudioSendStream::ReconfigureANA(webrtc::AudioSendStream::Config const&)::$_1>);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v188, v189, v190, v191, v192, v193, v194, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc");
LABEL_434:
  if (!*((_BYTE *)a2 + 288) || !*(_BYTE *)(a1 + 424))
    goto LABEL_445;
  if (*((_BYTE *)a2 + 264) && *(_BYTE *)(a1 + 400))
  {
    v196 = a2[65];
    if ((_DWORD)v196 != *(_DWORD *)(a1 + 396))
      goto LABEL_443;
  }
  else if ((*((_BYTE *)a2 + 264) != 0) != (*(_BYTE *)(a1 + 400) != 0))
  {
    if (!*((_BYTE *)a2 + 264))
    {
LABEL_444:
      v197 = *(_QWORD *)(a1 + 512);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      (*(void (**)(uint64_t, std::string *, uint64_t (*)(uint64_t *, uint64_t *)))(*(_QWORD *)v197 + 40))(v197, &__p, rtc::FunctionView<void ()(std::unique_ptr<webrtc::AudioEncoder> *)>::CallVoidPtr<webrtc::internal::AudioSendStream::ReconfigureCNG(webrtc::AudioSendStream::Config const&)::$_0>);
      goto LABEL_264;
    }
    v196 = a2[65];
LABEL_443:
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 512) + 104))(*(_QWORD *)(a1 + 512), v196, a2[54]);
    goto LABEL_444;
  }
LABEL_264:
  v121 = *(_QWORD *)(a1 + 776);
  v122 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 432))(*(_QWORD *)(a1 + 720));
  __p.__r_.__value_.__r.__words[0] = v122 + v121;
  if (*(_QWORD *)(a1 + 784) != v122 + v121)
  {
    *(_QWORD *)(a1 + 784) = v122 + v121;
    v123 = *(_QWORD *)(a1 + 512);
    v210 = &__p;
    (*(void (**)(uint64_t, std::string **, uint64_t (*)(_QWORD **, uint64_t)))(*(_QWORD *)v123 + 48))(v123, &v210, rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::internal::AudioSendStream::UpdateOverheadPerPacket(void)::$_1>);
    if (*(_BYTE *)(a1 + 792))
      webrtc::internal::AudioSendStream::ConfigureBitrateObserver((webrtc::internal::AudioSendStream *)a1);
  }
  v124 = *(_QWORD *)(a1 + 512);
  __p.__r_.__value_.__r.__words[0] = a1;
  (*(void (**)(uint64_t, std::string *, double (*)(uint64_t *, uint64_t)))(*(_QWORD *)v124 + 48))(v124, &__p, _ZN3rtc12FunctionViewIFvPN6webrtc12AudioEncoderEEE11CallVoidPtrIZNS1_8internal15AudioSendStream15ConfigureStreamERKNS1_15AudioSendStream6ConfigEbN4absl12AnyInvocableIFvNS1_8RTCErrorEOEEEE3__0EEvNS5_9VoidUnionES3_);
  if (*(_BYTE *)(a1 + 544))
  {
    if (*(_DWORD *)(a1 + 264) == a2[32]
      && *(_DWORD *)(a1 + 268) == a2[33]
      && *(double *)(a1 + 272) == *((double *)a2 + 17))
    {
      webrtc::internal::AudioSendStream::FindExtensionIds((uint64_t)&__p, *(uint64_t **)(a1 + 200), *(uint64_t **)(a1 + 208));
      v125 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
      webrtc::internal::AudioSendStream::FindExtensionIds((uint64_t)&__p, *((uint64_t **)a2 + 8), *((uint64_t **)a2 + 9));
      if (v125 == HIDWORD(__p.__r_.__value_.__r.__words[1]))
      {
        if (*(_BYTE *)(a1 + 312) && *((_BYTE *)a2 + 176))
        {
          v126 = *(unsigned __int8 *)(a1 + 311);
          if ((v126 & 0x80u) == 0)
            v127 = *(unsigned __int8 *)(a1 + 311);
          else
            v127 = *(_QWORD *)(a1 + 296);
          v128 = *((unsigned __int8 *)a2 + 175);
          v129 = (char)v128;
          if ((v128 & 0x80u) != 0)
            v128 = *((_QWORD *)a2 + 20);
          if (v127 == v128)
          {
            v130 = (const void **)(a1 + 288);
            if (v129 >= 0)
              v131 = (unsigned __int8 *)(a2 + 38);
            else
              v131 = (unsigned __int8 *)*((_QWORD *)a2 + 19);
            if ((v126 & 0x80) != 0)
            {
              if (!memcmp(*v130, v131, *(_QWORD *)(a1 + 296)))
                goto LABEL_323;
            }
            else
            {
              if (!*(_BYTE *)(a1 + 311))
                goto LABEL_323;
              while (*(unsigned __int8 *)v130 == *v131)
              {
                v130 = (const void **)((char *)v130 + 1);
                ++v131;
                if (!--v126)
                  goto LABEL_323;
              }
            }
          }
        }
        else if ((*(_BYTE *)(a1 + 312) != 0) == (*((_BYTE *)a2 + 176) != 0))
        {
          goto LABEL_323;
        }
      }
    }
    if (*((_BYTE *)a2 + 144))
      v139 = 1;
    else
      v139 = a2[32] == -1;
    v140 = v139 || a2[33] == -1;
    if (v140
      || (webrtc::internal::AudioSendStream::FindExtensionIds((uint64_t)&__p, *((uint64_t **)a2 + 8), *((uint64_t **)a2 + 9)), !HIDWORD(__p.__r_.__value_.__r.__words[1])))
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 712) + 208))(*(_QWORD *)(a1 + 712), 0);
      *(_BYTE *)(a1 + 792) = 0;
      (*(void (**)(_QWORD, std::string::size_type))(**(_QWORD **)(a1 + 704) + 8))(*(_QWORD *)(a1 + 704), a1 + 8);
      v141 = *(void (**)(void))(**(_QWORD **)(a1 + 720) + 304);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 712) + 208))(*(_QWORD *)(a1 + 712), 1);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 712) + 216))(*(_QWORD *)(a1 + 712));
      *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 16);
      *(_QWORD *)(a1 + 272) = *((_QWORD *)a2 + 17);
      webrtc::internal::AudioSendStream::ConfigureBitrateObserver((webrtc::internal::AudioSendStream *)a1);
      v141 = *(void (**)(void))(**(_QWORD **)(a1 + 720) + 304);
    }
    v141();
  }
LABEL_323:
  *(_DWORD *)(a1 + 136) = *a2;
  if (v199 == a2)
    goto LABEL_357;
  v142 = (std::string *)(a1 + 144);
  v143 = *((_BYTE *)a2 + 31);
  if (*(char *)(a1 + 167) < 0)
  {
    if (v143 >= 0)
      v149 = (const std::string::value_type *)(a2 + 2);
    else
      v149 = (const std::string::value_type *)*((_QWORD *)a2 + 1);
    if (v143 >= 0)
      v150 = *((unsigned __int8 *)a2 + 31);
    else
      v150 = *((_QWORD *)a2 + 2);
    std::string::__assign_no_alias<false>(v142, v149, v150);
    v145 = (std::string *)(a1 + 168);
    v146 = a2 + 8;
    v147 = *((unsigned __int8 *)a2 + 55);
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
      goto LABEL_327;
    goto LABEL_336;
  }
  if ((*((_BYTE *)a2 + 31) & 0x80) == 0)
  {
    v144 = *(_OWORD *)(a2 + 2);
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v142->__r_.__value_.__l.__data_ = v144;
    v145 = (std::string *)(a1 + 168);
    v146 = a2 + 8;
    v147 = *((unsigned __int8 *)a2 + 55);
    if ((*(char *)(a1 + 191) & 0x80000000) == 0)
      goto LABEL_327;
LABEL_336:
    if ((v147 & 0x80u) == 0)
      v151 = (const std::string::value_type *)v146;
    else
      v151 = (const std::string::value_type *)*((_QWORD *)a2 + 4);
    if ((v147 & 0x80u) == 0)
      v152 = v147;
    else
      v152 = *((_QWORD *)a2 + 5);
    std::string::__assign_no_alias<false>(v145, v151, v152);
    goto LABEL_346;
  }
  std::string::__assign_no_alias<true>(v142, *((char **)a2 + 1), *((_QWORD *)a2 + 2));
  v145 = (std::string *)(a1 + 168);
  v146 = a2 + 8;
  v147 = *((unsigned __int8 *)a2 + 55);
  if (*(char *)(a1 + 191) < 0)
    goto LABEL_336;
LABEL_327:
  if ((v147 & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v145, *((char **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v148 = *(_OWORD *)v146;
    v145->__r_.__value_.__r.__words[2] = *((_QWORD *)v146 + 2);
    *(_OWORD *)&v145->__r_.__value_.__l.__data_ = v148;
  }
LABEL_346:
  *(_BYTE *)(a1 + 192) = *((_BYTE *)a2 + 56);
  std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(a1 + 200), *((_QWORD *)a2 + 8), *((_QWORD *)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 5);
  v153 = (std::string *)(a1 + 224);
  v154 = *((_BYTE *)a2 + 111);
  if (*(char *)(a1 + 247) < 0)
  {
    if (v154 >= 0)
      v156 = (const std::string::value_type *)(a2 + 22);
    else
      v156 = (const std::string::value_type *)*((_QWORD *)a2 + 11);
    if (v154 >= 0)
      v157 = *((unsigned __int8 *)a2 + 111);
    else
      v157 = *((_QWORD *)a2 + 12);
    std::string::__assign_no_alias<false>(v153, v156, v157);
  }
  else if ((*((_BYTE *)a2 + 111) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v153, *((char **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v155 = *(_OWORD *)(a2 + 22);
    *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 13);
    *(_OWORD *)&v153->__r_.__value_.__l.__data_ = v155;
  }
LABEL_357:
  v158 = *((_OWORD *)a2 + 7);
  v159 = *((_OWORD *)a2 + 8);
  *(_BYTE *)(a1 + 280) = *((_BYTE *)a2 + 144);
  *(_OWORD *)(a1 + 264) = v159;
  *(_OWORD *)(a1 + 248) = v158;
  std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 288), (std::string *)(a2 + 38));
  if (*(unsigned __int8 *)(a1 + 424) == *((unsigned __int8 *)a2 + 288))
  {
    if (*(_BYTE *)(a1 + 424))
    {
      *(_DWORD *)(a1 + 320) = a2[46];
      if (v199 != a2)
      {
        v160 = (std::string *)(a1 + 328);
        v161 = *((_BYTE *)a2 + 215);
        if (*(char *)(a1 + 351) < 0)
        {
          if (v161 >= 0)
            v165 = (const std::string::value_type *)(a2 + 48);
          else
            v165 = (const std::string::value_type *)*((_QWORD *)a2 + 24);
          if (v161 >= 0)
            v166 = *((unsigned __int8 *)a2 + 215);
          else
            v166 = *((_QWORD *)a2 + 25);
          std::string::__assign_no_alias<false>(v160, v165, v166);
        }
        else if ((*((_BYTE *)a2 + 215) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v160, *((char **)a2 + 24), *((_QWORD *)a2 + 25));
        }
        else
        {
          v162 = *((_OWORD *)a2 + 12);
          *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 26);
          *(_OWORD *)&v160->__r_.__value_.__l.__data_ = v162;
        }
        *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 54);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(a1 + 368, *((char **)a2 + 29), (char *)a2 + 240);
      }
      v171 = *((_OWORD *)a2 + 16);
      *(_OWORD *)(a1 + 401) = *(_OWORD *)((char *)a2 + 265);
      *(_OWORD *)(a1 + 392) = v171;
    }
  }
  else if (*(_BYTE *)(a1 + 424))
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 368, *(_QWORD *)(a1 + 376));
    if (*(char *)(a1 + 351) < 0)
      operator delete(*(void **)(a1 + 328));
    *(_BYTE *)(a1 + 424) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 320) = a2[46];
    v163 = (std::string *)(a1 + 328);
    if (*((char *)a2 + 215) < 0)
    {
      std::string::__init_copy_ctor_external(v163, *((const std::string::value_type **)a2 + 24), *((_QWORD *)a2 + 25));
    }
    else
    {
      v164 = *((_OWORD *)a2 + 12);
      *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 26);
      *(_OWORD *)&v163->__r_.__value_.__l.__data_ = v164;
    }
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 54);
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 368) = a1 + 376;
    v167 = (unsigned int *)*((_QWORD *)a2 + 29);
    if (v167 != a2 + 60)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)(a1 + 368), (uint64_t *)(a1 + 376), (uint64_t)(v167 + 8), (uint64_t)(v167 + 8));
        v168 = (unsigned int *)*((_QWORD *)v167 + 1);
        if (v168)
        {
          do
          {
            v169 = v168;
            v168 = *(unsigned int **)v168;
          }
          while (v168);
        }
        else
        {
          do
          {
            v169 = (unsigned int *)*((_QWORD *)v167 + 2);
            v139 = *(_QWORD *)v169 == (_QWORD)v167;
            v167 = v169;
          }
          while (!v139);
        }
        v167 = v169;
      }
      while (v169 != a2 + 60);
    }
    v170 = *((_OWORD *)a2 + 16);
    *(_OWORD *)(a1 + 401) = *(_OWORD *)((char *)a2 + 265);
    *(_OWORD *)(a1 + 392) = v170;
    *(_BYTE *)(a1 + 424) = 1;
  }
  v172 = (void (***)(_QWORD))*((_QWORD *)a2 + 37);
  if (v172)
    (**v172)(*((_QWORD *)a2 + 37));
  v173 = *(_QWORD *)(a1 + 432);
  if (v173)
    (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
  *(_QWORD *)(a1 + 432) = v172;
  v174 = *((_QWORD *)a2 + 38);
  *(_BYTE *)(a1 + 448) = *((_BYTE *)a2 + 312);
  *(_QWORD *)(a1 + 440) = v174;
  if (v199 == a2)
  {
LABEL_406:
    v182 = a2[86];
    *(_BYTE *)(a1 + 484) = *((_BYTE *)a2 + 348);
    *(_DWORD *)(a1 + 480) = v182;
    v179 = (void (***)(_QWORD))*((_QWORD *)a2 + 44);
    if (!v179)
      goto LABEL_408;
    goto LABEL_407;
  }
  v175 = (std::string *)(a1 + 456);
  v176 = *((_BYTE *)a2 + 343);
  if (*(char *)(a1 + 479) < 0)
  {
    if (v176 >= 0)
      v180 = (const std::string::value_type *)(a2 + 80);
    else
      v180 = (const std::string::value_type *)*((_QWORD *)a2 + 40);
    if (v176 >= 0)
      v181 = *((unsigned __int8 *)a2 + 343);
    else
      v181 = *((_QWORD *)a2 + 41);
    std::string::__assign_no_alias<false>(v175, v180, v181);
    goto LABEL_406;
  }
  if ((*((_BYTE *)a2 + 343) & 0x80) == 0)
  {
    v177 = *((_OWORD *)a2 + 20);
    *(_QWORD *)(a1 + 472) = *((_QWORD *)a2 + 42);
    *(_OWORD *)&v175->__r_.__value_.__l.__data_ = v177;
    v178 = a2[86];
    *(_BYTE *)(a1 + 484) = *((_BYTE *)a2 + 348);
    *(_DWORD *)(a1 + 480) = v178;
    v179 = (void (***)(_QWORD))*((_QWORD *)a2 + 44);
    if (!v179)
      goto LABEL_408;
LABEL_407:
    (**v179)(v179);
    goto LABEL_408;
  }
  std::string::__assign_no_alias<true>(v175, *((char **)a2 + 40), *((_QWORD *)a2 + 41));
  v187 = a2[86];
  *(_BYTE *)(a1 + 484) = *((_BYTE *)a2 + 348);
  *(_DWORD *)(a1 + 480) = v187;
  v179 = (void (***)(_QWORD))*((_QWORD *)a2 + 44);
  if (v179)
    goto LABEL_407;
LABEL_408:
  v183 = *(_QWORD *)(a1 + 488);
  if (v183)
    (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
  *(_QWORD *)(a1 + 488) = v179;
  v184 = (void (***)(_QWORD))*((_QWORD *)a2 + 45);
  if (v184)
    (**v184)(v184);
  result = *(_QWORD *)(a1 + 496);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 496) = v184;
  LOBYTE(v200) = 0;
  v186 = *(void (**)(uint64_t, std::string *))(a4 + 24);
  if (v186)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    *(_QWORD *)&v213 = 0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    DWORD2(v213) = 0;
    WORD6(v213) = v200;
    BYTE14(v213) = 0;
    v186(a4, &__p);
    if (SBYTE7(v213) < 0)
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(1, a4, a4);
    *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a4 + 24) = 0;
  }
  return result;
}

void webrtc::internal::AudioSendStream::~AudioSendStream(webrtc::internal::AudioSendStream *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc");
  (*(void (**)(_QWORD))(**((_QWORD **)this + 64) + 80))(*((_QWORD *)this + 64));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 616));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 552));
  v9 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 63);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  webrtc::AudioSendStream::Config::~Config((webrtc::internal::AudioSendStream *)((char *)this + 136));
}

{
  webrtc::internal::AudioSendStream::~AudioSendStream(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::internal::AudioSendStream::~AudioSendStream(webrtc::internal::AudioSendStream *this)
{
  webrtc::internal::AudioSendStream::~AudioSendStream((webrtc::internal::AudioSendStream *)((char *)this - 8));
}

{
  webrtc::internal::AudioSendStream::~AudioSendStream((webrtc::internal::AudioSendStream *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::internal::AudioSendStream::GetConfig(webrtc::internal::AudioSendStream *this)
{
  return (uint64_t)this + 136;
}

uint64_t webrtc::internal::AudioSendStream::Reconfigure(std::string::size_type a1, unsigned int *a2, uint64_t a3)
{
  _BYTE v7[16];
  __int128 v8;

  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a3 + 16))(0, a3, v7);
  v8 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a3 + 24) = 0;
  webrtc::internal::AudioSendStream::ConfigureStream(a1, a2, 0, (uint64_t)v7);
  return ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v8)(1, v7, v7);
}

uint64_t webrtc::internal::AudioSendStream::FindExtensionIds(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  _DWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  BOOL v76;
  BOOL v77;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  BOOL v94;
  BOOL v95;
  BOOL v96;
  _DWORD *v97;
  _DWORD *v98;
  _DWORD *v99;
  _DWORD *v100;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  if (a2 != a3)
  {
    v4 = a2;
    v5 = (_DWORD *)result;
    v97 = (_DWORD *)(result + 8);
    v98 = (_DWORD *)(result + 24);
    v99 = (_DWORD *)(result + 20);
    v100 = (_DWORD *)(result + 16);
    v6 = (_DWORD *)(result + 12);
    v7 = (_DWORD *)(result + 4);
    while (1)
    {
      v8 = *((unsigned __int8 *)v4 + 23);
      v9 = v4;
      v10 = v8;
      if (*((char *)v4 + 23) < 0)
      {
        v10 = v4[1];
        if (v10 < 0)
          break;
        v9 = (uint64_t *)*v4;
        if (v10 && v9 == 0)
          break;
      }
      if (v10 == 43)
      {
        v12 = *v9;
        v13 = v9[1];
        v14 = v9[2];
        v15 = v9[3];
        v16 = v9[4];
        v17 = *(uint64_t *)((char *)v9 + 35);
        v18 = v12 == 0x667465693A6E7275 && v13 == 0x3A736D617261703ALL;
        v19 = v18 && v14 == 0x657264682D707472;
        v20 = v19 && v15 == 0x2D637273733A7478;
        v21 = v20 && v16 == 0x656C2D6F69647561;
        v22 = v21 && v17 == 0x6C6576656C2D6F69;
        v23 = v5;
        if (v22)
          goto LABEL_3;
      }
      v24 = v4;
      v25 = *((unsigned __int8 *)v4 + 23);
      if ((v8 & 0x80) != 0)
      {
        v25 = v4[1];
        if (v25 < 0)
          break;
        v24 = (uint64_t *)*v4;
        if (v25)
        {
          if (!v24)
            break;
        }
      }
      if (v25 == 58)
      {
        v26 = *v24;
        v27 = v24[1];
        v28 = v24[2];
        v29 = v24[3];
        v30 = v24[4];
        v31 = v24[5];
        v32 = v24[6];
        v33 = *((unsigned __int16 *)v24 + 28);
        v34 = v26 == 0x772F2F3A70747468 && v27 == 0x74726265772E7777;
        v35 = v34 && v28 == 0x78652F67726F2E63;
        v36 = v35 && v29 == 0x746E656D69726570;
        v37 = v36 && v30 == 0x64682D7074722F73;
        v38 = v37 && v31 == 0x7362612F74786572;
        v39 = v38 && v32 == 0x69742D646E65732DLL;
        v40 = v39 && v33 == 25965;
        v23 = v7;
        if (v40)
          goto LABEL_3;
      }
      result = (uint64_t)v4;
      v41 = *((unsigned __int8 *)v4 + 23);
      if ((v8 & 0x80) != 0)
      {
        v41 = v4[1];
        if (v41 < 0)
          break;
        result = *v4;
        if (v41)
        {
          if (!result)
            break;
        }
      }
      if (v41 == 73)
      {
        result = memcmp((const void *)result, "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01", 0x49uLL);
        v23 = v6;
        if (!(_DWORD)result)
          goto LABEL_3;
      }
      v42 = v4;
      v43 = v8;
      if ((v8 & 0x80) != 0)
      {
        v43 = v4[1];
        if (v43 < 0)
          break;
        v42 = (uint64_t *)*v4;
        if (v43)
        {
          if (!v42)
            break;
        }
      }
      if (v43 == 35)
      {
        v44 = *v42;
        v45 = v42[1];
        v46 = v42[2];
        v47 = v42[3];
        v48 = *(uint64_t *)((char *)v42 + 27);
        v49 = v44 == 0x667465693A6E7275 && v45 == 0x3A736D617261703ALL;
        v50 = v49 && v46 == 0x657264682D707472;
        v51 = v50 && v47 == 0x3A736564733A7478;
        v52 = v51 && v48 == 0x64696D3A73656473;
        v23 = v100;
        if (v52)
          goto LABEL_3;
      }
      v53 = v4;
      v54 = v8;
      if ((v8 & 0x80) != 0)
      {
        v54 = v4[1];
        if (v54 < 0)
          break;
        v53 = (uint64_t *)*v4;
        if (v54)
        {
          if (!v53)
            break;
        }
      }
      if (v54 == 45)
      {
        v55 = *v53;
        v56 = v53[1];
        v57 = v53[2];
        v58 = v53[3];
        v59 = v53[4];
        v60 = *(uint64_t *)((char *)v53 + 37);
        v61 = v55 == 0x667465693A6E7275 && v56 == 0x3A736D617261703ALL;
        v62 = v61 && v57 == 0x657264682D707472;
        v63 = v62 && v58 == 0x3A736564733A7478;
        v64 = v63 && v59 == 0x657274732D707472;
        v65 = v64 && v60 == 0x64692D6D61657274;
        v23 = v99;
        if (v65)
          goto LABEL_3;
      }
      v66 = v4;
      v67 = v8;
      if ((v8 & 0x80) != 0)
      {
        v67 = v4[1];
        if (v67 < 0)
          break;
        v66 = (uint64_t *)*v4;
        if (v67)
        {
          if (!v66)
            break;
        }
      }
      if (v67 == 54)
      {
        v68 = *v66;
        v69 = v66[1];
        v70 = v66[2];
        v71 = v66[3];
        v72 = v66[4];
        v73 = v66[5];
        v74 = *(uint64_t *)((char *)v66 + 46);
        v75 = v68 == 0x667465693A6E7275 && v69 == 0x3A736D617261703ALL;
        v76 = v75 && v70 == 0x657264682D707472;
        v77 = v76 && v71 == 0x3A736564733A7478;
        v78 = v77 && v72 == 0x6465726961706572;
        v79 = v78 && v73 == 0x7274732D7074722DLL;
        v80 = v79 && v74 == 0x64692D6D61657274;
        v23 = v98;
        if (v80)
          goto LABEL_3;
      }
      v81 = v4;
      if ((v8 & 0x80) != 0)
      {
        v8 = v4[1];
        if (v8 < 0)
          break;
        v81 = (uint64_t *)*v4;
        if (v8)
        {
          if (!v81)
            break;
        }
      }
      if (v8 == 61)
      {
        v82 = *v81;
        v83 = v81[1];
        v84 = v81[2];
        v85 = v81[3];
        v86 = v81[4];
        v87 = v81[5];
        v88 = v81[6];
        v89 = *(uint64_t *)((char *)v81 + 53);
        v90 = v82 == 0x772F2F3A70747468 && v83 == 0x74726265772E7777;
        v91 = v90 && v84 == 0x78652F67726F2E63;
        v92 = v91 && v85 == 0x746E656D69726570;
        v93 = v92 && v86 == 0x64682D7074722F73;
        v94 = v93 && v87 == 0x7362612F74786572;
        v95 = v94 && v88 == 0x657275747061632DLL;
        v96 = v95 && v89 == 0x656D69742D657275;
        v23 = v97;
        if (v96)
LABEL_3:
          *v23 = *((_DWORD *)v4 + 6);
      }
      v4 += 4;
      if (v4 == a3)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t webrtc::internal::AudioSendStream::Start(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[12];
  int v10;

  if (!*(_BYTE *)(this + 544))
  {
    v1 = this;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc");
    if (*(_BYTE *)(v1 + 280)
      || *(_DWORD *)(v1 + 264) == -1
      || *(_DWORD *)(v1 + 268) == -1
      || !*(_BYTE *)(v1 + 56)
      && (webrtc::internal::AudioSendStream::FindExtensionIds((uint64_t)v9, *(uint64_t **)(v1 + 200), *(uint64_t **)(v1 + 208)), !v10))
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 720) + 304))(*(_QWORD *)(v1 + 720), 0);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 712) + 208))(*(_QWORD *)(v1 + 712), 1);
      (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 712) + 216))(*(_QWORD *)(v1 + 712));
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 720) + 304))(*(_QWORD *)(v1 + 720), 1);
      webrtc::internal::AudioSendStream::ConfigureBitrateObserver((webrtc::internal::AudioSendStream *)v1);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 512) + 176))(*(_QWORD *)(v1 + 512));
    *(_BYTE *)(v1 + 544) = 1;
    return webrtc::internal::AudioState::AddSendingStream(*(webrtc::internal::AudioState **)(v1 + 504), (uint64_t *)v1, *(_DWORD *)(v1 + 532), *(uint64_t **)(v1 + 536));
  }
  return this;
}

void webrtc::internal::AudioSendStream::ConfigureBitrateObserver(webrtc::internal::AudioSendStream *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  void (***v8)(_QWORD, char *, int32x2_t *);
  uint64_t v9;
  int32x2_t v10;
  int v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  int64x2_t v15;
  char v16;

  webrtc::internal::AudioSendStream::GetMinMaxBitrateConstraints((webrtc::internal::AudioSendStream *)&v15, (uint64_t)this);
  v2 = *((_QWORD *)this + 12);
  if (*((_BYTE *)this + 528))
  {
    v3 = 0x7FFFFFFFFFFFFFFFLL;
    v4 = v2 + 20000;
    if (v2 == 0x8000000000000000)
      v4 = 0x8000000000000000;
    if (v2 != 0x7FFFFFFFFFFFFFFFLL)
      v3 = v4;
  }
  else
  {
    if (!*((_BYTE *)this + 816))
    {
LABEL_23:
      __break(1u);
      return;
    }
    v3 = 0x7FFFFFFFFFFFFFFFLL;
    if (v2 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v5 = 8000000 * *((_QWORD *)this + 98) / *((_QWORD *)this + 101);
      if (v5 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v3 = 0x8000000000000000;
        v6 = v5 == 0x8000000000000000 || v2 == 0x8000000000000000;
        v7 = v5 + v2;
        if (!v6)
          v3 = v7;
      }
    }
  }
  if (*((_BYTE *)this + 112))
    v3 = *((_QWORD *)this + 13);
  if (!v16)
    goto LABEL_23;
  v8 = (void (***)(_QWORD, char *, int32x2_t *))*((_QWORD *)this + 88);
  if (!*((_BYTE *)this + 529))
    v3 = 0;
  v10 = vmovn_s64(v15);
  v11 = 0;
  v12 = v3;
  v13 = 1;
  v9 = 120;
  if (!*((_BYTE *)this + 128))
    v9 = 272;
  v14 = *(_QWORD *)((char *)this + v9);
  (**v8)(v8, (char *)this + 8, &v10);
  *((_BYTE *)this + 792) = 1;
}

unint64_t webrtc::internal::AudioSendStream::Stop(unint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(this + 544))
  {
    v1 = this;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc");
    *(_BYTE *)(v1 + 792) = 0;
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v1 + 704) + 8))(*(_QWORD *)(v1 + 704), v1 + 8);
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 512) + 184))(*(_QWORD *)(v1 + 512));
    *(_BYTE *)(v1 + 544) = 0;
    return webrtc::internal::AudioState::RemoveSendingStream(*(webrtc::internal::AudioState **)(v1 + 504), v1);
  }
  return this;
}

uint64_t webrtc::internal::AudioSendStream::SendAudioData(uint64_t a1, uint64_t *a2)
{
  _opaque_pthread_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  double v12;
  unsigned int v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  std::string *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = pthread_self();
  v5 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v5 + 1;
  if (!v5)
    *(_QWORD *)(a1 + 48) = v4;
  if (pthread_equal(*(pthread_t *)(a1 + 48), v4))
  {
    v10 = *(_QWORD *)(*a2 + 24);
    v33 = *(int *)(*a2 + 32);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 552));
    if (*(_BYTE *)(*a2 + 15432))
      v11 = 0;
    else
      v11 = WebRtcSpl_MaxAbsValueW16C((int16x8_t *)(*a2 + 72), *(_QWORD *)(*a2 + 40) * *(_QWORD *)(*a2 + 24));
    v12 = (double)v10;
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 616));
    v13 = *(__int16 *)(a1 + 680);
    if (v11 > (int)v13)
    {
      *(_WORD *)(a1 + 680) = v11;
      v13 = v11;
    }
    v14 = *(unsigned __int16 *)(a1 + 682);
    *(_WORD *)(a1 + 682) = v14 + 1;
    v15 = v12 / (double)v33;
    if (v14 == 10)
    {
      *(_WORD *)(a1 + 684) = v13;
      *(_WORD *)(a1 + 682) = 0;
      *(_WORD *)(a1 + 680) = v13 >> 2;
    }
    else
    {
      LOWORD(v13) = *(_WORD *)(a1 + 684);
    }
    *(double *)(a1 + 688) = *(double *)(a1 + 688)
                          + (double)(__int16)v13 / 32767.0 * ((double)(__int16)v13 / 32767.0) * v15;
    *(double *)(a1 + 696) = v15 + *(double *)(a1 + 696);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 616));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 552));
    v16 = *(_QWORD *)(a1 + 512);
    v17 = *a2;
    *a2 = 0;
    v34 = v17;
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 152))(v16, &v34);
    v19 = v34;
    v34 = 0;
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 64);
      if (v20)
      {
        do
        {
          v21 = __ldaxr((unsigned int *)v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, (unsigned int *)v20));
        if (!v22)
        {
          v23 = *(_QWORD *)(v20 + 8);
          if (v23)
          {
            v24 = *(_QWORD *)(v20 + 16);
            v25 = *(void **)(v20 + 8);
            if (v24 != v23)
            {
              do
              {
                v26 = *(void **)(v24 - 96);
                if (v26)
                {
                  *(_QWORD *)(v24 - 88) = v26;
                  operator delete(v26);
                }
                v24 -= 104;
              }
              while (v24 != v23);
              v25 = *(void **)(v20 + 8);
            }
            *(_QWORD *)(v20 + 16) = v23;
            operator delete(v25);
          }
          MEMORY[0x20BD0ADEC](v20, 0x1020C40E72D6CFBLL);
        }
      }
      result = MEMORY[0x20BD0ADEC](v19, 0x1020C40C39A3FA5);
    }
    --*(_DWORD *)(a1 + 40);
  }
  else
  {
    v27 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc", 383, "!race_checker383.RaceDetected()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v6, v7, v8, v9, v32);
    return webrtc::internal::AudioSendStream::SendTelephoneEvent((webrtc::internal::AudioSendStream *)v27, v28, v29, v30, v31);
  }
  return result;
}

uint64_t webrtc::internal::AudioSendStream::SendTelephoneEvent(webrtc::internal::AudioSendStream *this, int a2, int a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 64) + 112))(*((_QWORD *)this + 64));
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 64) + 120))(*((_QWORD *)this + 64), a4, a5);
}

uint64_t webrtc::internal::AudioSendStream::SetMuted(webrtc::internal::AudioSendStream *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 64) + 144))(*((_QWORD *)this + 64));
}

double webrtc::internal::AudioSendStream::GetStats@<D0>(webrtc::internal::AudioSendStream *this@<X0>, uint64_t a2@<X8>)
{
  return webrtc::internal::AudioSendStream::GetStats(this, 1, a2);
}

double webrtc::internal::AudioSendStream::GetStats@<D0>(webrtc::internal::AudioSendStream *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  _OWORD *v7;
  char v8;
  const std::string::value_type *v9;
  size_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  double result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  int v42;

  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v6 = (std::string *)(a3 + 64);
  *(_QWORD *)(a3 + 56) = 0xBF800000FFFFFFFFLL;
  *(_BYTE *)(a3 + 92) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 88) = 0;
  *(_DWORD *)(a3 + 96) = -1;
  *(_QWORD *)(a3 + 104) = -1;
  *(_WORD *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 140) = 0;
  *(_BYTE *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 148) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_BYTE *)(a3 + 156) = 0;
  *(_BYTE *)(a3 + 160) = 0;
  *(_BYTE *)(a3 + 164) = 0;
  *(_BYTE *)(a3 + 168) = 0;
  *(_BYTE *)(a3 + 172) = 0;
  *(_BYTE *)(a3 + 176) = 0;
  *(_BYTE *)(a3 + 180) = 0;
  *(_BYTE *)(a3 + 184) = 0;
  *(_BYTE *)(a3 + 188) = 0;
  *(_WORD *)(a3 + 192) = 0;
  v7 = (_OWORD *)(a3 + 192);
  *(_BYTE *)(a3 + 200) = 0;
  *(_BYTE *)(a3 + 208) = 0;
  *(_BYTE *)(a3 + 216) = 0;
  *(_BYTE *)(a3 + 224) = 0;
  *(_BYTE *)(a3 + 232) = 0;
  *(_BYTE *)(a3 + 240) = 0;
  *(_BYTE *)(a3 + 248) = 0;
  *(_BYTE *)(a3 + 252) = 0;
  *(_BYTE *)(a3 + 256) = 0;
  *(_BYTE *)(a3 + 260) = 0;
  *(_BYTE *)(a3 + 264) = 0;
  *(_BYTE *)(a3 + 272) = 0;
  *(_BYTE *)(a3 + 280) = 0;
  *(_BYTE *)(a3 + 288) = 0;
  *(_BYTE *)(a3 + 296) = 0;
  *(_BYTE *)(a3 + 300) = 0;
  *(_DWORD *)(a3 + 336) = 0;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 136) = 0;
  *(_DWORD *)a3 = *((_DWORD *)this + 34);
  *(_QWORD *)(a3 + 304) = (*(int (**)(_QWORD))(**((_QWORD **)this + 64) + 136))(*((_QWORD *)this + 64));
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 64) + 24))(&v35);
  *(_OWORD *)(a3 + 8) = v36;
  *(_QWORD *)(a3 + 24) = v37;
  *(_DWORD *)(a3 + 32) = v38;
  *(_OWORD *)(a3 + 40) = v39;
  if (v35 >= 1)
    *(_QWORD *)(a3 + 104) = v35;
  if (*((_BYTE *)this + 424))
  {
    if (v6 != (std::string *)((char *)this + 328))
    {
      v8 = *((_BYTE *)this + 351);
      if (*(char *)(a3 + 87) < 0)
      {
        if (v8 >= 0)
          v9 = (char *)this + 328;
        else
          v9 = (const std::string::value_type *)*((_QWORD *)this + 41);
        if (v8 >= 0)
          v10 = *((unsigned __int8 *)this + 351);
        else
          v10 = *((_QWORD *)this + 42);
        std::string::__assign_no_alias<false>(v6, v9, v10);
      }
      else if ((*((_BYTE *)this + 351) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v6, *((char **)this + 41), *((_QWORD *)this + 42));
      }
      else
      {
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 328);
        v6->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 43);
      }
    }
    *(_DWORD *)(a3 + 88) = *((_DWORD *)this + 80);
    *(_BYTE *)(a3 + 92) = 1;
    (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)this + 64) + 88))(&v28);
    v12 = (void *)v28;
    if ((_QWORD)v28 != *((_QWORD *)&v28 + 1))
    {
      v13 = v28;
      while (*(_DWORD *)(v13 + 4) != *(_DWORD *)a3)
      {
        v13 += 56;
        if (v13 == *((_QWORD *)&v28 + 1))
          goto LABEL_26;
      }
      *(_DWORD *)(a3 + 56) = *(_DWORD *)(v13 + 12);
      LOBYTE(v11) = *(_BYTE *)(v13 + 8);
      v14 = (double)v11 * 0.00390625;
      *(float *)(a3 + 60) = v14;
      v15 = *((unsigned int *)this + 88);
      if ((int)v15 >= 1)
      {
        v16 = 1000000 * (unint64_t)*(unsigned int *)(v13 + 20) / v15;
        if (v16 % 0x3E8 <= 0x1F3)
          v17 = v16 / 0x3E8;
        else
          v17 = v16 / 0x3E8 + 1;
        *(_DWORD *)(a3 + 96) = v17;
      }
    }
LABEL_26:
    if (v12)
    {
      *((_QWORD *)&v28 + 1) = v12;
      operator delete(v12);
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 552));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 616));
  v18 = *((_WORD *)this + 342);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 616));
  *(_WORD *)(a3 + 112) = v18;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 616));
  v19 = *((_QWORD *)this + 86);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 616));
  *(_QWORD *)(a3 + 120) = v19;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 616));
  v20 = *((_QWORD *)this + 87);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 616));
  *(_QWORD *)(a3 + 128) = v20;
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 552));
  (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)this + 64) + 96))(&v28);
  v21 = v29;
  *(_OWORD *)(a3 + 136) = v28;
  *(_OWORD *)(a3 + 152) = v21;
  *(_OWORD *)(a3 + 168) = v30;
  *(_QWORD *)(a3 + 184) = v31;
  v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 63) + 32))(*((_QWORD *)this + 63));
  if (v22)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v22 + 256))(&v28, v22, a2);
    v23 = v33;
    v7[4] = v32;
    v7[5] = v23;
    v7[6] = v34;
    v24 = v29;
    *v7 = v28;
    v7[1] = v24;
    v25 = v31;
    v7[2] = v30;
    v7[3] = v25;
  }
  v26 = *(void **)(a3 + 312);
  if (v26)
  {
    *(_QWORD *)(a3 + 320) = v26;
    operator delete(v26);
  }
  result = *(double *)&v40;
  *(_OWORD *)(a3 + 312) = v40;
  *(_QWORD *)(a3 + 328) = v41;
  *(_DWORD *)(a3 + 336) = v42;
  return result;
}

uint64_t webrtc::internal::AudioSendStream::OnBitrateUpdated(uint64_t a1, uint64_t a2)
{
  const double *v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD v11[3];
  double v12;
  _BYTE v13[24];

  webrtc::internal::AudioSendStream::GetMinMaxBitrateConstraints((webrtc::internal::AudioSendStream *)&v12, a1);
  if (v13[8])
  {
    v4 = (const double *)v13;
    v5 = (int64x2_t)vld1q_dup_f64(v4);
    v6 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, *(int64x2_t *)a2), *(int8x16_t *)a2, (int8x16_t)v5);
    v7 = (int64x2_t)vld1q_dup_f64(&v12);
    *(int8x16_t *)a2 = vbslq_s8((int8x16_t)vcgtq_s64(v6, v7), (int8x16_t)v6, (int8x16_t)v7);
  }
  v8 = *(_QWORD *)(a1 + 512);
  v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  v11[2] = *(_OWORD *)(a2 + 32);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v8 + 128))(v8, v11);
  return 0;
}

void webrtc::internal::AudioSendStream::GetMinMaxBitrateConstraints(webrtc::internal::AudioSendStream *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = *(unsigned int *)(a2 + 264);
  if ((v3 & 0x80000000) != 0 || (v4 = *(unsigned int *)(a2 + 268), (v4 & 0x80000000) != 0))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc");
    goto LABEL_14;
  }
  if (*(_BYTE *)(a2 + 72))
    v3 = *(_QWORD *)(a2 + 64);
  if (*(_BYTE *)(a2 + 88))
    v4 = *(_QWORD *)(a2 + 80);
  if (*(_BYTE *)(a2 + 840))
  {
    v3 = *(_QWORD *)(a2 + 824);
    v4 = *(_QWORD *)(a2 + 832);
  }
  if (v4 < v3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc");
LABEL_14:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 16) = 0;
    return;
  }
  if (*(_BYTE *)(a2 + 528))
  {
    v19 = v3 + 6666;
    if (v3 == 0x8000000000000000)
      v19 = 0x8000000000000000;
    if (v3 != 0x7FFFFFFFFFFFFFFFLL)
      v3 = v19;
    v20 = v4 + 6666;
    if (v4 == 0x8000000000000000)
      v20 = 0x8000000000000000;
    if (v4 == 0x7FFFFFFFFFFFFFFFLL)
      v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 816))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc");
      goto LABEL_14;
    }
    v21 = 8000000 * *(_QWORD *)(a2 + 784);
    v22 = v21 / *(_QWORD *)(a2 + 808);
    v20 = 0x7FFFFFFFFFFFFFFFLL;
    v23 = 0x8000000000000000;
    if (v22 != 0x8000000000000000 && v3 != 0x8000000000000000)
      v23 = v22 + v3;
    if (v22 == 0x7FFFFFFFFFFFFFFFLL)
      v25 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v3 == 0x7FFFFFFFFFFFFFFFLL)
      v3 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v3 = v25;
    if (v4 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v26 = v21 / *(_QWORD *)(a2 + 800);
      if (v26 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v20 = 0x8000000000000000;
        v27 = v26 == 0x8000000000000000 || v4 == 0x8000000000000000;
        v28 = v26 + v4;
        if (!v27)
          v20 = v28;
      }
    }
  }
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = v20;
  *((_BYTE *)this + 16) = 1;
}

uint64_t `non-virtual thunk to'webrtc::internal::AudioSendStream::OnBitrateUpdated(uint64_t a1, uint64_t a2)
{
  const double *v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD v11[3];
  double v12;
  _BYTE v13[24];

  webrtc::internal::AudioSendStream::GetMinMaxBitrateConstraints((webrtc::internal::AudioSendStream *)&v12, a1 - 8);
  if (v13[8])
  {
    v4 = (const double *)v13;
    v5 = (int64x2_t)vld1q_dup_f64(v4);
    v6 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, *(int64x2_t *)a2), *(int8x16_t *)a2, (int8x16_t)v5);
    v7 = (int64x2_t)vld1q_dup_f64(&v12);
    *(int8x16_t *)a2 = vbslq_s8((int8x16_t)vcgtq_s64(v6, v7), (int8x16_t)v6, (int8x16_t)v7);
  }
  v8 = *(_QWORD *)(a1 + 504);
  v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  v11[2] = *(_OWORD *)(a2 + 32);
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v8 + 128))(v8, v11);
  return 0;
}

void std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>(std::string **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const std::string::value_type *v17;
  size_t v18;
  int v19;
  char *v20;
  __int128 *v21;
  char v22;
  __int128 v23;
  unint64_t v24;
  const std::string::value_type *v25;
  size_t v26;
  int v27;
  char *v28;
  __int128 *v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  std::string *v36;
  std::string *v37;
  uint64_t v38;
  __int128 v39;
  char *v40;
  int v41;
  std::string *v42;
  __int128 *v43;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (a4 > (v8 - (uint64_t)*a1) >> 5)
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (v10[-1].__r_.__value_.__s.__data_[15] < 0)
            operator delete((void *)v10[-2].__r_.__value_.__r.__words[2]);
          v10 = (std::string *)((char *)v10 - 32);
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (!(a4 >> 59))
    {
      v32 = v8 >> 4;
      if (v8 >> 4 <= a4)
        v32 = a4;
      v33 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
      v34 = 0x7FFFFFFFFFFFFFFLL;
      if (!v33)
        v34 = v32;
      if (!(v34 >> 59))
      {
        v35 = 32 * v34;
        v36 = (std::string *)operator new(32 * v34);
        *a1 = v36;
        a1[1] = v36;
        a1[2] = (std::string *)((char *)v36 + v35);
        while (v6 != a3)
        {
          if (*(char *)(v6 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
          }
          else
          {
            *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
            v36->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
          }
          LODWORD(v36[1].__r_.__value_.__l.__data_) = *(_DWORD *)(v6 + 24);
          v36[1].__r_.__value_.__s.__data_[4] = *(_BYTE *)(v6 + 28);
          v6 += 32;
          v36 = (std::string *)((char *)v36 + 32);
        }
        a1[1] = v36;
        return;
      }
    }
LABEL_71:
    abort();
  }
  v12 = a1[1];
  v13 = ((char *)v12 - (char *)v9) >> 5;
  if (v13 < a4)
  {
    v14 = a2 + 32 * v13;
    if (v12 != v9)
    {
      v15 = 0;
      v16 = 32 * v13;
      do
      {
        v20 = (char *)v9 + v15;
        v21 = (__int128 *)(v6 + v15);
        if ((std::string *)v6 != v9)
        {
          v22 = *((_BYTE *)v21 + 23);
          if (v20[23] < 0)
          {
            if (v22 >= 0)
              v17 = (const std::string::value_type *)(v6 + v15);
            else
              v17 = *(const std::string::value_type **)(v6 + v15);
            if (v22 >= 0)
              v18 = *((unsigned __int8 *)v21 + 23);
            else
              v18 = *(_QWORD *)(v6 + v15 + 8);
            std::string::__assign_no_alias<false>((std::string *)((char *)v9 + v15), v17, v18);
          }
          else if ((*((_BYTE *)v21 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(&v9->__r_.__value_.__r.__words[v15 / 8], *(char **)(v6 + v15), *(_QWORD *)(v6 + v15 + 8));
          }
          else
          {
            v23 = *v21;
            *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
            *(_OWORD *)v20 = v23;
          }
        }
        v19 = *((_DWORD *)v21 + 6);
        v20[28] = *((_BYTE *)v21 + 28);
        *((_DWORD *)v20 + 6) = v19;
        v15 += 32;
      }
      while (v16 != v15);
      v9 = a1[1];
    }
    v37 = v9;
    if (v14 == a3)
    {
LABEL_69:
      a1[1] = v37;
      return;
    }
    v38 = 0;
    while (1)
    {
      v42 = (std::string *)((char *)v9 + v38);
      if (!(std::string *)((char *)v9 + v38))
        break;
      v43 = (__int128 *)(v14 + v38);
      if (*(char *)(v14 + v38 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)(v14 + v38), *(_QWORD *)(v14 + v38 + 8));
      }
      else
      {
        v39 = *v43;
        v42->__r_.__value_.__r.__words[2] = *((_QWORD *)v43 + 2);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v39;
      }
      v40 = (char *)v9 + v38;
      v41 = *(_DWORD *)(v14 + v38 + 24);
      v40[28] = *(_BYTE *)(v14 + v38 + 28);
      *((_DWORD *)v40 + 6) = v41;
      v38 += 32;
      if (v14 + v38 == a3)
      {
        v37 = (std::string *)((char *)v9 + v38);
        goto LABEL_69;
      }
    }
    __break(1u);
    goto LABEL_71;
  }
  if (a2 != a3)
  {
    v24 = 0;
    do
    {
      v28 = (char *)v9 + v24;
      v29 = (__int128 *)(v6 + v24);
      if ((std::string *)v6 != v9)
      {
        v30 = *((_BYTE *)v29 + 23);
        if (v28[23] < 0)
        {
          if (v30 >= 0)
            v25 = (const std::string::value_type *)(v6 + v24);
          else
            v25 = *(const std::string::value_type **)(v6 + v24);
          if (v30 >= 0)
            v26 = *((unsigned __int8 *)v29 + 23);
          else
            v26 = *(_QWORD *)(v6 + v24 + 8);
          std::string::__assign_no_alias<false>((std::string *)((char *)v9 + v24), v25, v26);
        }
        else if ((*((_BYTE *)v29 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(&v9->__r_.__value_.__r.__words[v24 / 8], *(char **)(v6 + v24), *(_QWORD *)(v6 + v24 + 8));
        }
        else
        {
          v31 = *v29;
          *((_QWORD *)v28 + 2) = *((_QWORD *)v29 + 2);
          *(_OWORD *)v28 = v31;
        }
      }
      v27 = *((_DWORD *)v29 + 6);
      v28[28] = *((_BYTE *)v29 + 28);
      *((_DWORD *)v28 + 6) = v27;
      v24 += 32;
    }
    while (v6 + v24 != a3);
    v12 = a1[1];
    v9 = (std::string *)((char *)v9 + v24);
  }
  while (v12 != v9)
  {
    if (v12[-1].__r_.__value_.__s.__data_[15] < 0)
      operator delete((void *)v12[-2].__r_.__value_.__r.__words[2]);
    v12 = (std::string *)((char *)v12 - 32);
  }
  a1[1] = v9;
}

char *std::vector<webrtc::rtclog::StreamConfig::Codec>::__emplace_back_slow_path<std::string const&,int const&,int>(void **a1, char *a2, int *a3, int *a4)
{
  void **v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  void **v27;
  int v29;
  int v30;

  v5 = (void **)*a1;
  v4 = (void **)a1[1];
  v6 = ((char *)v4 - (_BYTE *)*a1) >> 5;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59)
LABEL_35:
    abort();
  v9 = (_BYTE *)a1[2] - (_BYTE *)v5;
  if (v9 >> 4 > v7)
    v7 = v9 >> 4;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v7)
    goto LABEL_34;
  if (v7 >> 59)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v13 = 32 * v7;
  v14 = (char *)operator new(32 * v7);
  v15 = v14;
  if ((a2[23] & 0x80000000) == 0)
  {
    v16 = a4;
    v17 = a2[23];
    goto LABEL_14;
  }
  v17 = *((_QWORD *)a2 + 1);
  if ((v17 & 0x8000000000000000) != 0 || (a2 = *(char **)a2, v17) && !a2)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v16 = a4;
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_35;
LABEL_14:
  v18 = &v14[32 * v6];
  v29 = *v16;
  v30 = *a3;
  if (v17 <= 0x16)
  {
    v18[23] = v17;
    v19 = &v14[32 * v6];
    v20 = &v18[v17];
    if (v18 > a2)
      goto LABEL_21;
    goto LABEL_20;
  }
  v21 = (v17 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v17 | 7) != 0x17)
    v21 = v17 | 7;
  v22 = v21 + 1;
  v19 = (char *)operator new(v21 + 1);
  *((_QWORD *)v18 + 1) = v17;
  *((_QWORD *)v18 + 2) = v22 | 0x8000000000000000;
  *(_QWORD *)v18 = v19;
  v20 = &v19[v17];
  if (v19 <= a2)
  {
LABEL_20:
    if (v20 <= a2)
      goto LABEL_21;
    goto LABEL_34;
  }
LABEL_21:
  if (v17)
    memmove(v19, a2, v17);
  v23 = &v15[v13];
  *v20 = 0;
  v24 = &v15[32 * v6];
  *((_DWORD *)v24 + 6) = v30;
  *((_DWORD *)v24 + 7) = v29;
  v25 = v18 + 32;
  if (v4 == v5)
  {
    *a1 = v18;
    a1[1] = v25;
    a1[2] = v23;
  }
  else
  {
    do
    {
      v26 = *((_OWORD *)v4 - 2);
      *((_QWORD *)v18 - 2) = *(v4 - 2);
      *((_OWORD *)v18 - 2) = v26;
      *(v4 - 3) = 0;
      *(v4 - 2) = 0;
      *(v4 - 4) = 0;
      *((_QWORD *)v18 - 1) = *(v4 - 1);
      v18 -= 32;
      v4 -= 4;
    }
    while (v4 != v5);
    v4 = (void **)*a1;
    v27 = (void **)a1[1];
    *a1 = v18;
    a1[1] = v25;
    a1[2] = v23;
    while (v27 != v4)
    {
      if (*((char *)v27 - 9) < 0)
        operator delete(*(v27 - 4));
      v27 -= 4;
    }
  }
  if (v4)
    operator delete(v4);
  return v25;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

double _ZN3rtc12FunctionViewIFvPN6webrtc12AudioEncoderEEE11CallVoidPtrIZNS1_8internal15AudioSendStream15ConfigureStreamERKNS1_15AudioSendStream6ConfigEbN4absl12AnyInvocableIFvNS1_8RTCErrorEOEEEE3__0EEvNS5_9VoidUnionES3_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  double result;
  _OWORD *v6;
  __int128 v7;
  unsigned __int8 v8;

  if (a2)
  {
    v3 = *a1;
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 216))(&v7, a2);
    v4 = (_OWORD *)(v3 + 800);
    if (*(unsigned __int8 *)(v3 + 816) == v8)
    {
      if (*(_BYTE *)(v3 + 816))
        *v4 = v7;
    }
    else if (*(_BYTE *)(v3 + 816))
    {
      *(_BYTE *)(v3 + 816) = 0;
    }
    else
    {
      *v4 = v7;
      *(_BYTE *)(v3 + 816) = 1;
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 224))(&v7, a2);
    v6 = (_OWORD *)(v3 + 824);
    if (*(unsigned __int8 *)(v3 + 840) == v8)
    {
      if (*(_BYTE *)(v3 + 840))
      {
        result = *(double *)&v7;
        *v6 = v7;
      }
    }
    else if (*(_BYTE *)(v3 + 840))
    {
      *(_BYTE *)(v3 + 840) = 0;
    }
    else
    {
      result = *(double *)&v7;
      *v6 = v7;
      *(_BYTE *)(v3 + 840) = 1;
    }
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::internal::AudioSendStream::UpdateOverheadPerPacket(void)::$_1>(_QWORD **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, **a1);
}

unsigned int **rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::internal::AudioSendStream::ReconfigureSendCodec(webrtc::AudioSendStream::Config const&)::$_0>(unsigned int **result, uint64_t a2)
{
  if (*((_BYTE *)*result + 4))
    return (unsigned int **)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 160))(a2, **result);
  __break(1u);
  return result;
}

void rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::internal::AudioSendStream::ReconfigureANA(webrtc::AudioSendStream::Config const&)::$_0>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[1];
  if (*(_BYTE *)(v2 + 176))
  {
    v4 = *a1;
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, v2 + 152, *(_QWORD *)(*a1 + 520));
    v6 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
    if (v5)
    {
      if ((v6 & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc");
      if (*(_QWORD *)(v4 + 784))
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
    }
    else if ((v6 & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_send_stream.cc");
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::internal::AudioSendStream::ReconfigureANA(webrtc::AudioSendStream::Config const&)::$_1>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2);
}

uint64_t rtc::FunctionView<void ()(std::unique_ptr<webrtc::AudioEncoder> *)>::CallVoidPtr<webrtc::internal::AudioSendStream::ReconfigureCNG(webrtc::AudioSendStream::Config const&)::$_0>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  *a2 = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 120))(v4);
  if (v6)
  {
    v7 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v4 = v7;
  }
  if (!*(_BYTE *)(*a1 + 288))
    goto LABEL_14;
  if (*(_BYTE *)(*a1 + 264))
  {
    v15 = 0x800000064;
    v16 = 0;
    v13 = v4;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v11 = result;
    v8 = *a1;
    if (*(_BYTE *)(*a1 + 288) && *(_BYTE *)(v8 + 264))
    {
      v12 = *(_DWORD *)(v8 + 260);
      v14 = 0;
      webrtc::CreateComfortNoiseEncoder((uint64_t)&v11, &v10);
      v9 = *a2;
      *a2 = v10;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      result = v13;
      if (v13)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      return result;
    }
LABEL_14:
    __break(1u);
    return result;
  }
  result = *a2;
  *a2 = v4;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void webrtc::AudioSendStream::Config::~Config(webrtc::AudioSendStream::Config *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 45);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 44);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*((char *)this + 343) < 0)
  {
    operator delete(*((void **)this + 40));
    v4 = *((_QWORD *)this + 37);
    if (!v4)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4 = *((_QWORD *)this + 37);
  if (v4)
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
LABEL_8:
  if (*((_BYTE *)this + 288)
    && (std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 232, *((_QWORD *)this + 30)), *((char *)this + 215) < 0))
  {
    operator delete(*((void **)this + 24));
    if (!*((_BYTE *)this + 176))
      goto LABEL_12;
  }
  else if (!*((_BYTE *)this + 176))
  {
LABEL_12:
    webrtc::AudioSendStream::Config::Rtp::~Rtp(this);
    return;
  }
  if ((*((char *)this + 175) & 0x80000000) == 0)
    goto LABEL_12;
  operator delete(*((void **)this + 19));
  webrtc::AudioSendStream::Config::Rtp::~Rtp(this);
}

double webrtc::AudioSendStream::Config::ToString@<D0>(webrtc::AudioSendStream::Config *this@<X0>, std::string *a2@<X8>)
{
  std::string *v2;
  unint64_t i;
  int64_t v4;
  const char *v5;
  const char *v6;
  size_t v7;
  std::string::size_type v9;
  _QWORD *v10;
  size_t v11;
  int v12;
  size_t v13;
  _QWORD *v14;
  size_t v15;
  size_t v16;
  size_t v17;
  unint64_t v18;
  const char *v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  const void *p_src;
  size_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  _QWORD *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  size_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  std::string::size_type v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string::size_type size;
  char *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  std::string *v48;
  char *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string::size_type v52;
  std::string::size_type v53;
  std::string::size_type v54;
  uint64_t v55;
  const char *v56;
  size_t v57;
  std::string::size_type v58;
  std::string::size_type v59;
  char *v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string::size_type v63;
  std::string::size_type v64;
  std::string::size_type v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string::size_type v68;
  std::string::size_type v69;
  std::string::size_type v70;
  std::string::size_type v71;
  std::string *v72;
  char *v73;
  std::string::size_type v74;
  const char *v75;
  size_t v76;
  std::string::size_type v77;
  std::string::size_type v78;
  char *v79;
  std::string::size_type v80;
  std::string::size_type v81;
  std::string::size_type v82;
  std::string::size_type v83;
  std::string::size_type v84;
  const char *v85;
  size_t v86;
  std::string::size_type v87;
  std::string::size_type v88;
  char *v89;
  std::string::size_type v90;
  std::string::size_type v91;
  std::string::size_type v92;
  size_t v93;
  const char *v94;
  size_t v95;
  size_t v96;
  const char *v97;
  uint64_t v98;
  size_t v99;
  const char *v100;
  char *v101;
  int v102;
  size_t v103;
  char *v104;
  std::string::size_type v105;
  std::string::size_type v106;
  uint64_t v107;
  uint64_t v108;
  const void *p_p;
  size_t v110;
  char *v111;
  size_t v112;
  char *v113;
  int v114;
  size_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  const void *v119;
  size_t v120;
  size_t v121;
  size_t v122;
  const void *v123;
  size_t v124;
  uint64_t v125;
  unint64_t v126;
  size_t v127;
  size_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  std::string::size_type v134;
  std::string::size_type v135;
  std::string *v136;
  char *v137;
  std::string::size_type v138;
  std::string::size_type v139;
  std::string::size_type v140;
  _BYTE *v141;
  std::string::size_type v142;
  double result;
  std::string v144;
  void *__p;
  size_t v146;
  unint64_t v147;
  void *__src;
  uint64_t v149;
  unint64_t v150;
  char v151[1024];
  char __str[8];
  __int128 v153;
  uint64_t v154;

  v7 = (size_t)this;
  v154 = *MEMORY[0x24BDAC8D0];
  memset(&v144, 0, sizeof(v144));
  if (&v144 <= (std::string *)"{rtp: ")
  {
    v9 = (std::string::size_type)v144.__r_.__value_.__r.__words + 6;
    if ((char *)v144.__r_.__value_.__r.__words + 6 > "{rtp: ")
      goto LABEL_442;
  }
  v4 = (int64_t)__str;
  strcpy((char *)&v144, "{rtp: ");
  *((_BYTE *)&v144.__r_.__value_.__s + 23) = 6;
  *(_QWORD *)__str = v151;
  strcpy(v151, "{ssrc: ");
  v153 = xmmword_208F05480;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)__str, "%u", *(_DWORD *)this);
  if ((*(char *)(v7 + 31) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v7 + 31))
      goto LABEL_5;
LABEL_11:
    v12 = *(char *)(v7 + 55);
    if (v12 < 0)
      goto LABEL_21;
LABEL_12:
    if (!(_BYTE)v12)
      goto LABEL_34;
    goto LABEL_22;
  }
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_11;
LABEL_5:
  v10 = (_QWORD *)(v7 + 8);
  if ((_QWORD)v153 + ~*((_QWORD *)&v153 + 1) >= 7uLL)
    v11 = 7;
  else
    v11 = v153 + ~*((_QWORD *)&v153 + 1);
  memcpy((void *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)), ", rid: ", v11);
  *((_QWORD *)&v153 + 1) += v11;
  *(_BYTE *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)) = 0;
  if (*(char *)(v7 + 31) < 0)
  {
    v9 = *(_QWORD *)(v7 + 16);
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_442;
    v10 = (_QWORD *)*v10;
    if (v9)
    {
      if (!v10)
        goto LABEL_442;
    }
  }
  else
  {
    v9 = *(unsigned __int8 *)(v7 + 31);
  }
  if (v9 >= (_QWORD)v153 + ~*((_QWORD *)&v153 + 1))
    v13 = v153 + ~*((_QWORD *)&v153 + 1);
  else
    v13 = v9;
  memcpy((void *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)), v10, v13);
  *((_QWORD *)&v153 + 1) += v13;
  *(_BYTE *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)) = 0;
  v12 = *(char *)(v7 + 55);
  if ((v12 & 0x80000000) == 0)
    goto LABEL_12;
LABEL_21:
  if (!*(_QWORD *)(v7 + 40))
    goto LABEL_34;
LABEL_22:
  v14 = (_QWORD *)(v7 + 32);
  if ((_QWORD)v153 + ~*((_QWORD *)&v153 + 1) >= 7uLL)
    v15 = 7;
  else
    v15 = v153 + ~*((_QWORD *)&v153 + 1);
  memcpy((void *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)), ", mid: ", v15);
  *((_QWORD *)&v153 + 1) += v15;
  *(_BYTE *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)) = 0;
  if (*(char *)(v7 + 55) < 0)
  {
    v9 = *(_QWORD *)(v7 + 40);
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_442;
    v14 = (_QWORD *)*v14;
    if (v9)
    {
      if (!v14)
        goto LABEL_442;
    }
  }
  else
  {
    v9 = *(unsigned __int8 *)(v7 + 55);
  }
  if (v9 >= (_QWORD)v153 + ~*((_QWORD *)&v153 + 1))
    v16 = v153 + ~*((_QWORD *)&v153 + 1);
  else
    v16 = v9;
  memcpy((void *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)), v14, v16);
  *((_QWORD *)&v153 + 1) += v16;
  *(_BYTE *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)) = 0;
LABEL_34:
  if ((_QWORD)v153 + ~*((_QWORD *)&v153 + 1) >= 0x16uLL)
    v17 = 22;
  else
    v17 = v153 + ~*((_QWORD *)&v153 + 1);
  memcpy((void *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)), ", extmap-allow-mixed: ", v17);
  *((_QWORD *)&v153 + 1) += v17;
  *(_BYTE *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)) = 0;
  v18 = 4;
  v5 = "true";
  if (!*(_BYTE *)(v7 + 56))
    v18 = 5;
  v6 = "false";
  if (*(_BYTE *)(v7 + 56))
    v19 = "true";
  else
    v19 = "false";
  if (v18 >= (_QWORD)v153 + ~*((_QWORD *)&v153 + 1))
    v20 = v153 + ~*((_QWORD *)&v153 + 1);
  else
    v20 = v18;
  memcpy((void *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)), v19, v20);
  *((_QWORD *)&v153 + 1) += v20;
  *(_BYTE *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)) = 0;
  if ((_QWORD)v153 + ~*((_QWORD *)&v153 + 1) >= 0xFuLL)
    v21 = 15;
  else
    v21 = v153 + ~*((_QWORD *)&v153 + 1);
  memcpy((void *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)), ", extensions: [", v21);
  *((_QWORD *)&v153 + 1) += v21;
  *(_BYTE *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)) = 0;
  v22 = *(_QWORD *)(v7 + 64);
  if (*(_QWORD *)(v7 + 72) != v22)
  {
    v2 = 0;
    for (i = 0; i < v25; ++i)
    {
      webrtc::RtpExtension::ToString((webrtc::RtpExtension *)((char *)v2 + v22), (char *)&__src);
      if (SHIBYTE(v150) < 0)
      {
        v9 = v149;
        if (v149 < 0)
          goto LABEL_442;
        p_src = __src;
        if (v149)
        {
          if (!__src)
            goto LABEL_442;
        }
      }
      else
      {
        v9 = HIBYTE(v150);
        p_src = &__src;
      }
      if (v9 >= (_QWORD)v153 + ~*((_QWORD *)&v153 + 1))
        v24 = v153 + ~*((_QWORD *)&v153 + 1);
      else
        v24 = v9;
      memcpy((void *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)), p_src, v24);
      *((_QWORD *)&v153 + 1) += v24;
      *(_BYTE *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)) = 0;
      if (SHIBYTE(v150) < 0)
      {
        operator delete(__src);
        v22 = *(_QWORD *)(v7 + 64);
        v25 = (*(_QWORD *)(v7 + 72) - v22) >> 5;
        if (i != v25 - 1)
        {
LABEL_63:
          if ((_QWORD)v153 + ~*((_QWORD *)&v153 + 1) >= 2uLL)
            v26 = 2;
          else
            v26 = v153 + ~*((_QWORD *)&v153 + 1);
          memcpy((void *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)), ", ", v26);
          *((_QWORD *)&v153 + 1) += v26;
          *(_BYTE *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)) = 0;
          v22 = *(_QWORD *)(v7 + 64);
          v25 = (*(_QWORD *)(v7 + 72) - v22) >> 5;
        }
      }
      else
      {
        v22 = *(_QWORD *)(v7 + 64);
        v25 = (*(_QWORD *)(v7 + 72) - v22) >> 5;
        if (i != v25 - 1)
          goto LABEL_63;
      }
      v2 = (std::string *)((char *)v2 + 32);
    }
  }
  LOBYTE(__src) = 93;
  v27 = v153;
  v28 = *((_QWORD *)&v153 + 1) + 1;
  memcpy((void *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)), &__src, v153 != *((_QWORD *)&v153 + 1) + 1);
  v29 = *((_QWORD *)&v153 + 1);
  if (v27 != v28)
    v29 = *((_QWORD *)&v153 + 1) + 1;
  *((_QWORD *)&v153 + 1) = v29;
  *(_BYTE *)(*(_QWORD *)__str + v29) = 0;
  if ((_QWORD)v153 + ~*((_QWORD *)&v153 + 1) >= 0xAuLL)
    v30 = 10;
  else
    v30 = v153 + ~*((_QWORD *)&v153 + 1);
  memcpy((void *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)), ", c_name: ", v30);
  *((_QWORD *)&v153 + 1) += v30;
  *(_BYTE *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)) = 0;
  v31 = (_QWORD *)(v7 + 88);
  if (*(char *)(v7 + 111) < 0)
  {
    v9 = *(_QWORD *)(v7 + 96);
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_442;
    v31 = (_QWORD *)*v31;
    if (v9)
    {
      if (!v31)
        goto LABEL_442;
    }
  }
  else
  {
    v9 = *(unsigned __int8 *)(v7 + 111);
  }
  if (v9 >= (_QWORD)v153 + ~*((_QWORD *)&v153 + 1))
    v32 = v153 + ~*((_QWORD *)&v153 + 1);
  else
    v32 = v9;
  memcpy((void *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)), v31, v32);
  *((_QWORD *)&v153 + 1) += v32;
  *(_BYTE *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)) = 0;
  LOBYTE(__src) = 125;
  v33 = v153;
  v34 = *((_QWORD *)&v153 + 1) + 1;
  memcpy((void *)(*(_QWORD *)__str + *((_QWORD *)&v153 + 1)), &__src, v153 != *((_QWORD *)&v153 + 1) + 1);
  v9 = *((_QWORD *)&v153 + 1);
  if (v33 != v34)
    v9 = *((_QWORD *)&v153 + 1) + 1;
  *((_QWORD *)&v153 + 1) = v9;
  *(_BYTE *)(*(_QWORD *)__str + v9) = 0;
  v35 = *(const char **)__str;
  if (!*(_QWORD *)__str)
    goto LABEL_442;
  i = 0x7FFFFFFFFFFFFFF7;
  v36 = strlen(*(const char **)__str);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
LABEL_447:
    abort();
  v37 = v36;
  if (v36 > 0x16)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (char *)operator new(v39 + 1);
    v9 = v40 | 0x8000000000000000;
    v149 = v37;
    v150 = v40 | 0x8000000000000000;
    __src = v38;
    v2 = (std::string *)&v38[v37];
    if (v38 > v35)
      goto LABEL_91;
LABEL_90:
    if (v2 > (std::string *)v35)
      goto LABEL_442;
    goto LABEL_91;
  }
  HIBYTE(v150) = v36;
  v38 = (char *)&__src;
  v2 = (std::string *)((char *)&__src + v37);
  if ((unint64_t)&__src <= *(_QWORD *)__str)
    goto LABEL_90;
LABEL_91:
  if (v37)
    memmove(v38, v35, v37);
  v2->__r_.__value_.__s.__data_[0] = 0;
  v9 = SHIBYTE(v150);
  if ((v9 & 0x80000000) != 0)
  {
    v41 = v149;
    if (v149 < 0)
      goto LABEL_442;
    v42 = (const std::string::value_type *)__src;
    v9 = v149 == 0;
    if (v149)
    {
      if (!__src)
        goto LABEL_442;
    }
  }
  else
  {
    v41 = HIBYTE(v150);
    LOBYTE(v9) = HIBYTE(v150) == 0;
    v42 = (const std::string::value_type *)&__src;
  }
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = 22;
  else
    v43 = (v144.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    size = v144.__r_.__value_.__l.__size_;
  if (v43 - size < v41)
  {
    std::string::__grow_by_and_replace(&v144, v43, size + v41 - v43, size, size, 0, v41, v42);
    if ((SHIBYTE(v150) & 0x80000000) == 0)
      goto LABEL_116;
    goto LABEL_106;
  }
  if ((v9 & 1) == 0)
  {
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v2 = &v144;
    else
      v2 = (std::string *)v144.__r_.__value_.__r.__words[0];
    v45 = (char *)v2 + size;
    if ((char *)v2 + size <= v42)
    {
      v9 = (std::string::size_type)&v45[v41];
      if (&v45[v41] > v42)
        goto LABEL_442;
    }
    memmove(v45, v42, v41);
    v9 = size + v41;
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_443;
    *((_BYTE *)&v144.__r_.__value_.__s + 23) = v9 & 0x7F;
    v2->__r_.__value_.__s.__data_[v9] = 0;
  }
  if (SHIBYTE(v150) < 0)
  {
LABEL_106:
    operator delete(__src);
    goto LABEL_116;
  }
  while (1)
  {
LABEL_116:
    v9 = v144.__r_.__value_.__r.__words[2];
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = 22;
    else
      v46 = (v144.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v47 = v144.__r_.__value_.__l.__size_;
    if (v46 - v47 >= 0x1B)
    {
      v48 = &v144;
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v48 = (std::string *)v144.__r_.__value_.__r.__words[0];
      v49 = (char *)v48 + v47;
      if ((char *)v48 + v47 <= ", rtcp_report_interval_ms: " && v49 + 27 > ", rtcp_report_interval_ms: ")
        goto LABEL_442;
      qmemcpy(v49, ", rtcp_report_interval_ms: ", 27);
      v50 = v47 + 27;
      if ((v9 & 0x8000000000000000) != 0)
        v144.__r_.__value_.__l.__size_ = v47 + 27;
      else
        *((_BYTE *)&v144.__r_.__value_.__s + 23) = v50 & 0x7F;
      v48->__r_.__value_.__s.__data_[v50] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v144, v46, v47 - v46 + 27, v47, v47, 0, 0x1BuLL, ", rtcp_report_interval_ms: ");
    }
    rtc::StringBuilder::operator<<(&v144, *(_DWORD *)(v7 + 112));
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = 22;
    else
      v51 = (v144.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v52 = v144.__r_.__value_.__l.__size_;
    if (v51 - v52 >= 0x12)
    {
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = (std::string::size_type)&v144;
      else
        v9 = v144.__r_.__value_.__r.__words[0];
      v53 = v9 + v52;
      if (v9 + v52 <= (unint64_t)", send_transport: " && v53 + 18 > (unint64_t)", send_transport: ")
        goto LABEL_442;
      *(_WORD *)(v53 + 16) = 8250;
      *(_OWORD *)v53 = *(_OWORD *)", send_transport: ";
      v54 = v52 + 18;
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        v144.__r_.__value_.__l.__size_ = v52 + 18;
      else
        *((_BYTE *)&v144.__r_.__value_.__s + 23) = v54 & 0x7F;
      *(_BYTE *)(v9 + v54) = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v144, v51, v52 - v51 + 18, v52, v52, 0, 0x12uLL, ", send_transport: ");
    }
    v55 = *(_QWORD *)(v7 + 120);
    if (v55)
      v56 = "(Transport)";
    else
      v56 = "null";
    if (v55)
      v57 = 11;
    else
      v57 = 4;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = 22;
    else
      v58 = (v144.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v59 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v59 = v144.__r_.__value_.__l.__size_;
    if (v58 - v59 >= v57)
    {
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v2 = &v144;
      else
        v2 = (std::string *)v144.__r_.__value_.__r.__words[0];
      v60 = (char *)v2 + v59;
      if ((char *)v2 + v59 <= v56)
      {
        v9 = (std::string::size_type)&v60[v57];
        if (&v60[v57] > v56)
          goto LABEL_442;
      }
      memcpy(v60, v56, v57);
      v61 = v59 + v57;
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        v144.__r_.__value_.__l.__size_ = v59 + v57;
      else
        *((_BYTE *)&v144.__r_.__value_.__s + 23) = v61 & 0x7F;
      v2->__r_.__value_.__s.__data_[v61] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v144, v58, v59 + v57 - v58, v59, v59, 0, v57, v56);
    }
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v62 = 22;
    else
      v62 = (v144.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v63 = v144.__r_.__value_.__l.__size_;
    if (v62 - v63 >= 0x13)
    {
      v9 = (std::string::size_type)&v144;
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = v144.__r_.__value_.__r.__words[0];
      v64 = v9 + v63;
      if (v9 + v63 <= (unint64_t)", min_bitrate_bps: " && v64 + 19 > (unint64_t)", min_bitrate_bps: ")
        goto LABEL_442;
      *(_DWORD *)(v64 + 15) = 540701552;
      *(_OWORD *)v64 = *(_OWORD *)", min_bitrate_bps: ";
      v65 = v63 + 19;
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        v144.__r_.__value_.__l.__size_ = v63 + 19;
      else
        *((_BYTE *)&v144.__r_.__value_.__s + 23) = v65 & 0x7F;
      *(_BYTE *)(v9 + v65) = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v144, v62, v63 - v62 + 19, v63, v63, 0, 0x13uLL, ", min_bitrate_bps: ");
    }
    rtc::StringBuilder::operator<<(&v144, *(_DWORD *)(v7 + 128));
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = 22;
    else
      v66 = (v144.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v67 = v144.__r_.__value_.__l.__size_;
    if (v66 - v67 >= 0x13)
    {
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = (std::string::size_type)&v144;
      else
        v9 = v144.__r_.__value_.__r.__words[0];
      v68 = v9 + v67;
      if (v9 + v67 <= (unint64_t)", max_bitrate_bps: " && v68 + 19 > (unint64_t)", max_bitrate_bps: ")
        goto LABEL_442;
      *(_DWORD *)(v68 + 15) = 540701552;
      *(_OWORD *)v68 = *(_OWORD *)", max_bitrate_bps: ";
      v69 = v67 + 19;
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        v144.__r_.__value_.__l.__size_ = v67 + 19;
      else
        *((_BYTE *)&v144.__r_.__value_.__s + 23) = v69 & 0x7F;
      *(_BYTE *)(v9 + v69) = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v144, v66, v67 - v66 + 19, v67, v67, 0, 0x13uLL, ", max_bitrate_bps: ");
    }
    rtc::StringBuilder::operator<<(&v144, *(_DWORD *)(v7 + 132));
    v9 = v144.__r_.__value_.__r.__words[2];
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = 22;
    else
      v70 = (v144.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v71 = v144.__r_.__value_.__l.__size_;
    if (v70 - v71 >= 0x24)
    {
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = &v144;
      else
        v72 = (std::string *)v144.__r_.__value_.__r.__words[0];
      v73 = (char *)v72 + v71;
      if ((char *)v72 + v71 <= ", has audio_network_adaptor_config: "
        && v73 + 36 > ", has audio_network_adaptor_config: ")
      {
        goto LABEL_442;
      }
      qmemcpy(v73, ", has audio_network_adaptor_config: ", 36);
      v74 = v71 + 36;
      if ((v9 & 0x8000000000000000) != 0)
        v144.__r_.__value_.__l.__size_ = v71 + 36;
      else
        *((_BYTE *)&v144.__r_.__value_.__s + 23) = v74 & 0x7F;
      v72->__r_.__value_.__s.__data_[v74] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v144, v70, v71 - v70 + 36, v71, v71, 0, 0x24uLL, ", has audio_network_adaptor_config: ");
    }
    if (*(_BYTE *)(v7 + 176))
      v75 = v5;
    else
      v75 = v6;
    if (*(_BYTE *)(v7 + 176))
      v76 = 4;
    else
      v76 = 5;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v77 = 22;
    else
      v77 = (v144.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v78 = v144.__r_.__value_.__l.__size_;
    if (v77 - v78 >= v76)
    {
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v2 = &v144;
      else
        v2 = (std::string *)v144.__r_.__value_.__r.__words[0];
      v79 = (char *)v2 + v78;
      if ((char *)v2 + v78 <= v75)
      {
        v9 = (std::string::size_type)&v79[v76];
        if (&v79[v76] > v75)
          goto LABEL_442;
      }
      memcpy(v79, v75, v76);
      v80 = v78 + v76;
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        v144.__r_.__value_.__l.__size_ = v78 + v76;
      else
        *((_BYTE *)&v144.__r_.__value_.__s + 23) = v80 & 0x7F;
      v2->__r_.__value_.__s.__data_[v80] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v144, v77, v78 + v76 - v77, v78, v78, 0, v76, v75);
    }
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = 22;
    else
      v81 = (v144.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v82 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v82 = v144.__r_.__value_.__l.__size_;
    if (v81 - v82 >= 0xC)
    {
      v9 = (std::string::size_type)&v144;
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = v144.__r_.__value_.__r.__words[0];
      v83 = v9 + v82;
      if (v9 + v82 <= (unint64_t)", has_dscp: " && v83 + 12 > (unint64_t)", has_dscp: ")
        goto LABEL_442;
      *(_DWORD *)(v83 + 8) = 540700771;
      *(_QWORD *)v83 = *(_QWORD *)", has_dscp: ";
      v84 = v82 + 12;
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        v144.__r_.__value_.__l.__size_ = v82 + 12;
      else
        *((_BYTE *)&v144.__r_.__value_.__s + 23) = v84 & 0x7F;
      *(_BYTE *)(v9 + v84) = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v144, v81, v82 - v81 + 12, v82, v82, 0, 0xCuLL, ", has_dscp: ");
    }
    if (*(_BYTE *)(v7 + 144))
      v85 = v5;
    else
      v85 = v6;
    if (*(_BYTE *)(v7 + 144))
      v86 = 4;
    else
      v86 = 5;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v87 = 22;
    else
      v87 = (v144.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v88 = v144.__r_.__value_.__l.__size_;
    if (v87 - v88 >= v86)
    {
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v2 = &v144;
      else
        v2 = (std::string *)v144.__r_.__value_.__r.__words[0];
      v89 = (char *)v2 + v88;
      if ((char *)v2 + v88 <= v85)
      {
        v9 = (std::string::size_type)&v89[v86];
        if (&v89[v86] > v85)
          goto LABEL_442;
      }
      memcpy(v89, v85, v86);
      v90 = v88 + v86;
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        v144.__r_.__value_.__l.__size_ = v88 + v86;
      else
        *((_BYTE *)&v144.__r_.__value_.__s + 23) = v90 & 0x7F;
      v2->__r_.__value_.__s.__data_[v90] = 0;
    }
    else
    {
      std::string::__grow_by_and_replace(&v144, v87, v88 + v86 - v87, v88, v88, 0, v86, v85);
    }
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v91 = 22;
    else
      v91 = (v144.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v92 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    else
      v92 = v144.__r_.__value_.__l.__size_;
    if (v91 - v92 >= 0x13)
    {
      v9 = (std::string::size_type)&v144;
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = v144.__r_.__value_.__r.__words[0];
      v105 = v9 + v92;
      if (v9 + v92 <= (unint64_t)", send_codec_spec: " && v105 + 19 > (unint64_t)", send_codec_spec: ")
        goto LABEL_442;
      *(_DWORD *)(v105 + 15) = 540697445;
      *(_OWORD *)v105 = *(_OWORD *)", send_codec_spec: ";
      v106 = v92 + 19;
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      {
        v144.__r_.__value_.__l.__size_ = v92 + 19;
        *(_BYTE *)(v9 + v106) = 0;
        if (!*(_BYTE *)(v7 + 288))
        {
LABEL_321:
          HIBYTE(v153) = 7;
          if (__str <= "<unset>")
          {
            v9 = (std::string::size_type)&__str[7];
            if (&__str[7] > "<unset>")
              goto LABEL_442;
          }
          *(_DWORD *)(v4 + 3) = 1047815539;
          *(_DWORD *)__str = 1936618812;
          __str[7] = 0;
          LODWORD(v9) = 7;
          goto LABEL_394;
        }
      }
      else
      {
        *((_BYTE *)&v144.__r_.__value_.__s + 23) = v106 & 0x7F;
        *(_BYTE *)(v9 + v106) = 0;
        if (!*(_BYTE *)(v7 + 288))
          goto LABEL_321;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v144, v91, v92 - v91 + 19, v92, v92, 0, 0x13uLL, ", send_codec_spec: ");
      if (!*(_BYTE *)(v7 + 288))
        goto LABEL_321;
    }
    v2 = (std::string *)v151;
    __src = v151;
    v149 = 1024;
    strcpy(v151, "{nack_enabled: ");
    if (*(_BYTE *)(v7 + 256))
      v93 = 4;
    else
      v93 = 5;
    if (*(_BYTE *)(v7 + 256))
      v94 = v5;
    else
      v94 = v6;
    memcpy(&v151[15], v94, v93);
    qmemcpy(&v151[v93 + 15], ", transport_cc_enabled: ", 24);
    v95 = v93 + 39;
    v151[v95] = 0;
    if (*(_BYTE *)(v7 + 257))
      v96 = 4;
    else
      v96 = 5;
    if (*(_BYTE *)(v7 + 257))
      v97 = v5;
    else
      v97 = v6;
    memcpy(&v151[v95], v97, v96);
    qmemcpy(&v151[v96 + v95], ", enable_non_sender_rtt: ", 25);
    v98 = v96 + v95 + 25;
    v150 = v98;
    v151[v98] = 0;
    if (*(_BYTE *)(v7 + 258))
      v99 = 4;
    else
      v99 = 5;
    if (*(_BYTE *)(v7 + 258))
      v100 = v5;
    else
      v100 = v6;
    memcpy(&v151[v98], v100, v99);
    v5 = (const char *)(v99 + v98);
    v101 = &v151[v99 + v98];
    *((_DWORD *)v101 + 4) = 540697968;
    *(_OWORD *)v101 = *(_OWORD *)", cng_payload_type: ";
    v4 = v99 + v98 + 20;
    v151[v4] = 0;
    if (!*(_BYTE *)(v7 + 264))
    {
      HIBYTE(v147) = 7;
      if (&__p <= (void **)"<unset>")
      {
        v9 = (std::string::size_type)&__p + 7;
        if ((char *)&__p + 7 > "<unset>")
          goto LABEL_442;
      }
      strcpy((char *)&__p, "<unset>");
      LOBYTE(v9) = 7;
LABEL_334:
      v9 = v9;
      p_p = &__p;
      goto LABEL_335;
    }
    v102 = snprintf(__str, 0x20uLL, "%d", *(_DWORD *)(v7 + 260));
    if (v102 < 0)
      goto LABEL_447;
    v103 = v102;
    if (v102 > 0x16)
    {
      v107 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v102 | 7) != 0x17)
        v107 = v102 | 7;
      v108 = v107 + 1;
      v104 = (char *)operator new(v107 + 1);
      v146 = v103;
      v147 = v108 | 0x8000000000000000;
      __p = v104;
      v2 = (std::string *)&v104[v103];
      v9 = &v104[v103] > __str;
      if (v104 > __str)
        goto LABEL_331;
    }
    else
    {
      HIBYTE(v147) = v102;
      v104 = (char *)&__p;
      v2 = (std::string *)((char *)&__p + v103);
      v9 = (char *)&__p + v103 > __str;
      if (&__p > (void **)__str)
        goto LABEL_331;
    }
    if ((_DWORD)v9)
      goto LABEL_442;
LABEL_331:
    if ((_DWORD)v103)
      memcpy(v104, __str, v103);
    v2->__r_.__value_.__s.__data_[0] = 0;
    LOBYTE(v9) = HIBYTE(v147);
    if ((SHIBYTE(v147) & 0x80000000) == 0)
      goto LABEL_334;
    v9 = v146;
    if ((v146 & 0x8000000000000000) != 0)
      goto LABEL_442;
    p_p = __p;
    if (v146)
    {
      if (!__p)
        goto LABEL_442;
    }
LABEL_335:
    if (v9 >= 1003 - (uint64_t)v5)
      v110 = 1003 - (_QWORD)v5;
    else
      v110 = v9;
    memcpy(&v151[v4], p_p, v110);
    v2 = (std::string *)(v110 + v4);
    v150 = v110 + v4;
    v5 = v151;
    v111 = &v151[v110 + v4];
    *v111 = 0;
    if (SHIBYTE(v147) < 0)
      operator delete(__p);
    if ((unint64_t)(1023 - (_QWORD)v2) >= 0x14)
      v112 = 20;
    else
      v112 = 1023 - (_QWORD)v2;
    memcpy(v111, ", red_payload_type: ", v112);
    v4 = (int64_t)v2 + v112;
    v113 = &v151[(_QWORD)v2 + v112];
    *v113 = 0;
    if (!*(_BYTE *)(v7 + 272))
    {
      HIBYTE(v147) = 7;
      if (&__p <= (void **)"<unset>")
      {
        v9 = (std::string::size_type)&__p + 7;
        if ((char *)&__p + 7 > "<unset>")
          goto LABEL_442;
      }
      strcpy((char *)&__p, "<unset>");
      LOBYTE(v9) = 7;
LABEL_358:
      v9 = v9;
      v119 = &__p;
      goto LABEL_359;
    }
    v114 = snprintf(__str, 0x20uLL, "%d", *(_DWORD *)(v7 + 268));
    if (v114 < 0)
      goto LABEL_447;
    v115 = v114;
    if (v114 > 0x16)
    {
      v117 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v114 | 7) != 0x17)
        v117 = v114 | 7;
      v118 = v117 + 1;
      v116 = (char *)operator new(v117 + 1);
      v146 = v115;
      v147 = v118 | 0x8000000000000000;
      __p = v116;
      v2 = (std::string *)&v116[v115];
      v9 = &v116[v115] > __str;
      if (v116 > __str)
        goto LABEL_355;
    }
    else
    {
      HIBYTE(v147) = v114;
      v116 = (char *)&__p;
      v2 = (std::string *)((char *)&__p + v115);
      v9 = (char *)&__p + v115 > __str;
      if (&__p > (void **)__str)
        goto LABEL_355;
    }
    if ((_DWORD)v9)
      goto LABEL_442;
LABEL_355:
    if ((_DWORD)v115)
      memcpy(v116, __str, v115);
    v2->__r_.__value_.__s.__data_[0] = 0;
    LOBYTE(v9) = HIBYTE(v147);
    if ((SHIBYTE(v147) & 0x80000000) == 0)
      goto LABEL_358;
    v9 = v146;
    if ((v146 & 0x8000000000000000) != 0)
      goto LABEL_442;
    v119 = __p;
    if (v146)
    {
      if (!__p)
        goto LABEL_442;
    }
LABEL_359:
    if (v9 >= 1023 - v4)
      v120 = 1023 - v4;
    else
      v120 = v9;
    memcpy(v113, v119, v120);
    v4 += v120;
    v150 = v4;
    v2 = (std::string *)v151;
    v151[v4] = 0;
    if (SHIBYTE(v147) < 0)
      operator delete(__p);
    v121 = (unint64_t)(1023 - v4) >= 0x10 ? 16 : 1023 - v4;
    memcpy(&v151[v4], ", payload_type: ", v121);
    v150 = v121 + v4;
    v151[v150] = 0;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__src, "%d", *(_DWORD *)(v7 + 184));
    v122 = v149 + ~v150 >= 0xA ? 10 : v149 + ~v150;
    memcpy((char *)__src + v150, ", format: ", v122);
    v150 += v122;
    *((_BYTE *)__src + v150) = 0;
    rtc::ToString((rtc *)(v7 + 192), __str);
    if (SHIBYTE(v153) < 0)
    {
      v9 = v153;
      if ((v153 & 0x8000000000000000) != 0)
        goto LABEL_442;
      v123 = *(const void **)__str;
      if ((_QWORD)v153)
      {
        if (!*(_QWORD *)__str)
          goto LABEL_442;
      }
    }
    else
    {
      v9 = HIBYTE(v153);
      v123 = __str;
    }
    if (v9 >= v149 + ~v150)
      v124 = v149 + ~v150;
    else
      v124 = v9;
    memcpy((char *)__src + v150, v123, v124);
    v150 += v124;
    *((_BYTE *)__src + v150) = 0;
    if (SHIBYTE(v153) < 0)
      operator delete(*(void **)__str);
    __str[0] = 125;
    v125 = v149;
    v126 = v150 + 1;
    memcpy((char *)__src + v150, __str, v149 != v150 + 1);
    v9 = v150;
    if (v125 != v126)
      v9 = v150 + 1;
    v150 = v9;
    *((_BYTE *)__src + v9) = 0;
    v7 = (size_t)__src;
    if (__src)
      break;
LABEL_442:
    __break(1u);
LABEL_443:
    v144.__r_.__value_.__l.__size_ = v9;
    v2->__r_.__value_.__s.__data_[v9] = 0;
    if (SHIBYTE(v150) < 0)
      goto LABEL_106;
  }
  v127 = strlen((const char *)__src);
  if (v127 > i)
    goto LABEL_447;
  v128 = v127;
  if (v127 > 0x16)
  {
    v131 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v127 | 7) != 0x17)
      v131 = v127 | 7;
    v132 = v131 + 1;
    v129 = (char *)operator new(v131 + 1);
    v9 = v132 | 0x8000000000000000;
    *(_QWORD *)&v153 = v128;
    *((_QWORD *)&v153 + 1) = v132 | 0x8000000000000000;
    *(_QWORD *)__str = v129;
    v130 = &v129[v128];
    if ((unint64_t)v129 <= v7)
      goto LABEL_390;
  }
  else
  {
    HIBYTE(v153) = v127;
    v129 = __str;
    v130 = &__str[v128];
    if (__str > __src)
      goto LABEL_391;
LABEL_390:
    if ((unint64_t)v130 > v7)
      goto LABEL_442;
  }
LABEL_391:
  if (v128)
    memmove(v129, (const void *)v7, v128);
  *v130 = 0;
  v9 = HIBYTE(v153);
  if ((HIBYTE(v153) & 0x80) == 0)
  {
LABEL_394:
    v7 = v9;
    LOBYTE(v9) = (_DWORD)v9 == 0;
    v133 = __str;
    goto LABEL_395;
  }
  v7 = v153;
  if ((v153 & 0x8000000000000000) != 0)
    goto LABEL_442;
  v133 = *(char **)__str;
  v9 = v153 == 0;
  if ((_QWORD)v153)
  {
    if (!*(_QWORD *)__str)
      goto LABEL_442;
  }
LABEL_395:
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v134 = 22;
  else
    v134 = (v144.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v135 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  else
    v135 = v144.__r_.__value_.__l.__size_;
  if (v134 - v135 >= v7)
  {
    if ((v9 & 1) == 0)
    {
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v136 = &v144;
      else
        v136 = (std::string *)v144.__r_.__value_.__r.__words[0];
      v137 = (char *)v136 + v135;
      if ((char *)v136 + v135 <= v133)
      {
        v9 = (std::string::size_type)&v137[v7];
        if (&v137[v7] > v133)
          goto LABEL_442;
      }
      memmove(v137, v133, v7);
      v138 = v135 + v7;
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      {
        v144.__r_.__value_.__l.__size_ = v135 + v7;
        v136->__r_.__value_.__s.__data_[v138] = 0;
        if ((SHIBYTE(v153) & 0x80000000) == 0)
          goto LABEL_413;
LABEL_403:
        operator delete(*(void **)__str);
        goto LABEL_413;
      }
      *((_BYTE *)&v144.__r_.__value_.__s + 23) = v138 & 0x7F;
      v136->__r_.__value_.__s.__data_[v138] = 0;
    }
    if ((SHIBYTE(v153) & 0x80000000) == 0)
      goto LABEL_413;
    goto LABEL_403;
  }
  std::string::__grow_by_and_replace(&v144, v134, v135 + v7 - v134, v135, v135, 0, v7, v133);
  if (SHIBYTE(v153) < 0)
    goto LABEL_403;
LABEL_413:
  v139 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v140 = 22;
  else
    v140 = (v144.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v139 = v144.__r_.__value_.__l.__size_;
  if (v140 == v139)
  {
    std::string::__grow_by_and_replace(&v144, v140, 1uLL, v140, v140, 0, 1uLL, "}");
    goto LABEL_434;
  }
  v9 = (std::string::size_type)&v144;
  if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = v144.__r_.__value_.__r.__words[0];
  v141 = (_BYTE *)(v9 + v139);
  if (v9 + v139 <= (unint64_t)"}" && v141 + 1 > "}")
    goto LABEL_442;
  *v141 = 125;
  v142 = v139 + 1;
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    v144.__r_.__value_.__l.__size_ = v142;
  else
    *((_BYTE *)&v144.__r_.__value_.__s + 23) = v142 & 0x7F;
  *(_BYTE *)(v9 + v142) = 0;
LABEL_434:
  result = *(double *)&v144.__r_.__value_.__l.__data_;
  *a2 = v144;
  return result;
}

void webrtc::AudioSendStream::Config::Rtp::~Rtp(webrtc::AudioSendStream::Config::Rtp *this)
{
  void **v2;
  void **v3;
  void *v4;

  if ((*((char *)this + 111) & 0x80000000) == 0)
  {
    v2 = (void **)*((_QWORD *)this + 8);
    if (!v2)
      goto LABEL_3;
LABEL_7:
    v3 = (void **)*((_QWORD *)this + 9);
    if (v3 == v2)
    {
      *((_QWORD *)this + 9) = v2;
      operator delete(v2);
      if (*((char *)this + 55) < 0)
        goto LABEL_14;
    }
    else
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 8);
      *((_QWORD *)this + 9) = v2;
      operator delete(v4);
      if (*((char *)this + 55) < 0)
        goto LABEL_14;
    }
LABEL_4:
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(*((void **)this + 1));
    return;
  }
  operator delete(*((void **)this + 11));
  v2 = (void **)*((_QWORD *)this + 8);
  if (v2)
    goto LABEL_7;
LABEL_3:
  if ((*((char *)this + 55) & 0x80000000) == 0)
    goto LABEL_4;
LABEL_14:
  operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    goto LABEL_15;
}

webrtc::AudioSendStream::Config::SendCodecSpec *webrtc::AudioSendStream::Config::SendCodecSpec::SendCodecSpec(webrtc::AudioSendStream::Config::SendCodecSpec *this, int a2, const webrtc::SdpAudioFormat *a3)
{
  std::string *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  char *v9;
  char *v11;
  char *v12;
  BOOL v13;

  *(_DWORD *)this = a2;
  v5 = (std::string *)((char *)this + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *(_OWORD *)a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_OWORD *)((char *)a3 + 24);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  *((_OWORD *)this + 2) = v7;
  *((_QWORD *)this + 8) = 0;
  v8 = (char *)*((_QWORD *)a3 + 5);
  v9 = (char *)a3 + 48;
  if (v8 != v9)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)this + 6, (uint64_t *)this + 7, (uint64_t)(v8 + 32), (uint64_t)(v8 + 32));
      v11 = (char *)*((_QWORD *)v8 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v8 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v8;
          v8 = v12;
        }
        while (!v13);
      }
      v8 = v12;
    }
    while (v12 != v9);
  }
  *((_WORD *)this + 36) = 0;
  *((_BYTE *)this + 74) = 0;
  *((_BYTE *)this + 76) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 84) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 92) = 0;
  *((_BYTE *)this + 96) = 0;
  return this;
}

void webrtc::AudioSendStream::Config::SendCodecSpec::~SendCodecSpec(webrtc::AudioSendStream::Config::SendCodecSpec *this)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 48, *((_QWORD *)this + 7));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t webrtc::AudioSendStream::Config::SendCodecSpec::operator==(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  if (*(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)(a2 + 72)
    || *(unsigned __int8 *)(a1 + 73) != *(unsigned __int8 *)(a2 + 73)
    || *(unsigned __int8 *)(a1 + 74) != *(unsigned __int8 *)(a2 + 74))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 80) && *(_BYTE *)(a2 + 80))
  {
    if (*(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 76))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 80) != 0) != (*(_BYTE *)(a2 + 80) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 88) && *(_BYTE *)(a2 + 88))
  {
    if (*(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 88) != 0) != (*(_BYTE *)(a2 + 88) != 0))
  {
    return 0;
  }
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && webrtc::operator==(a1 + 8, (unsigned __int8 *)(a2 + 8)))
  {
    if (*(_BYTE *)(a1 + 96) && *(_BYTE *)(a2 + 96))
    {
      v4 = *(_DWORD *)(a1 + 92);
      v5 = *(_DWORD *)(a2 + 92);
    }
    else
    {
      v5 = *(unsigned __int8 *)(a2 + 96) != 0;
      v4 = *(unsigned __int8 *)(a1 + 96) != 0;
    }
    if (v4 == v5)
      return 1;
  }
  return 0;
}

uint64_t webrtc::internal::AudioState::audio_processing(webrtc::internal::AudioState *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t webrtc::internal::AudioState::audio_transport(webrtc::internal::AudioState *this)
{
  return (uint64_t)this + 56;
}

uint64_t webrtc::internal::AudioState::AddReceivingStream(uint64_t a1, unint64_t a2)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;

  v13 = a2;
  v3 = *(unint64_t **)(a1 + 15808);
  v4 = *(unint64_t **)(a1 + 15816);
  if (v4 == v3)
  {
    v3 = *(unint64_t **)(a1 + 15816);
LABEL_11:
    std::vector<webrtc::AudioReceiveStreamInterface *>::emplace<webrtc::AudioReceiveStreamInterface * const&>((unint64_t *)(a1 + 15808), v3, (uint64_t *)&v13);
    a2 = v13;
    goto LABEL_12;
  }
  v5 = v4 - v3;
  do
  {
    v6 = v5 >> 1;
    v7 = &v3[v5 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v5 += ~(v5 >> 1);
    if (v9 < a2)
      v3 = v8;
    else
      v5 = v6;
  }
  while (v5);
  if (v3 == v4 || *v3 > a2)
    goto LABEL_11;
LABEL_12:
  if (a2)
    v10 = a2 + 8;
  else
    v10 = 0;
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v10);
  webrtc::internal::AudioState::UpdateNullAudioPollerState(a1);
  v11 = *(_QWORD *)(a1 + 32);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 200))(v11);
  if ((result & 1) == 0)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 144))(v11);
    if (!(_DWORD)result)
    {
      if (*(_BYTE *)(a1 + 49))
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 184))(v11);
    }
  }
  return result;
}

uint64_t webrtc::internal::AudioState::UpdateNullAudioPollerState(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  _QWORD v19[2];
  __n128 (*v20)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v21)(uint64_t *);
  unsigned int *v22;

  v1 = this;
  if (*(_QWORD *)(this + 15808) == *(_QWORD *)(this + 15816) || *(_BYTE *)(this + 49))
  {
    this = *(_QWORD *)(this + 15800);
    if (this)
    {
      *(_BYTE *)(this + 4) = 0;
      do
      {
        v2 = __ldaxr((unsigned int *)this);
        v3 = v2 - 1;
      }
      while (__stlxr(v3, (unsigned int *)this));
      if (!v3)
        this = MEMORY[0x20BD0ADEC]();
      *(_QWORD *)(v1 + 15800) = 0;
    }
  }
  else if (!*(_QWORD *)(this + 15800))
  {
    v19[0] = v5;
    v20 = absl::internal_any_invocable::LocalManagerTrivial;
    v21 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::internal::AudioState::UpdateNullAudioPollerState(void)::$_0 &>;
    v6 = &unk_253EA7000;
    if ((v5 & 1) == 0)
    {
      v17 = v4;
      v6 = (_QWORD *)&unk_253EA7000;
      v15 = v14;
      v4 = v17;
      if (v15)
      {
        v16 = (_QWORD *)operator new();
        *v16 = &unk_24C0B13E8;
        webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v16;
        v6 = (_QWORD *)&unk_253EA7000;
        v4 = v17;
      }
    }
    webrtc::RepeatingTaskHandle::Start(v4, (uint64_t)v19, 0, v6[153], (uint64_t)&v18, &v22);
    v7 = v22;
    v22 = 0;
    v8 = *(unsigned int **)(v1 + 15800);
    *(_QWORD *)(v1 + 15800) = v7;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        MEMORY[0x20BD0ADEC]();
      v11 = v22;
      if (v22)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
          MEMORY[0x20BD0ADEC]();
      }
    }
    return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *))v20)(1, v19, v19);
  }
  return this;
}

uint64_t webrtc::internal::AudioState::AddSendingStream(webrtc::internal::AudioState *this, uint64_t *a2, int a3, uint64_t *a4)
{
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;

  v8 = (uint64_t *)*((_QWORD *)this + 1980);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v8;
        v11 = v8[4];
        if (v11 <= (unint64_t)a2)
          break;
        v8 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_8;
      }
      if (v11 >= (unint64_t)a2)
        break;
      v8 = v10[1];
      if (!v8)
      {
        v9 = v10 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v9 = (uint64_t **)((char *)this + 15840);
    v10 = (uint64_t **)((char *)this + 15840);
LABEL_8:
    v12 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0x38uLL);
    v10[5] = 0;
    v10[6] = 0;
    v10[4] = a2;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v9 = (uint64_t *)v10;
    v13 = **((_QWORD **)this + 1979);
    v14 = (uint64_t *)v10;
    if (v13)
    {
      *((_QWORD *)this + 1979) = v13;
      v14 = *v9;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 1980), v14);
    ++*((_QWORD *)this + 1981);
  }
  *((_DWORD *)v10 + 10) = a3;
  v10[6] = a4;
  webrtc::internal::AudioState::UpdateAudioTransportWithSendingStreams(this);
  v15 = *((_QWORD *)this + 4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 224))(v15);
  if ((result & 1) == 0)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 168))(v15);
    if (!(_DWORD)result)
    {
      if (*((_BYTE *)this + 48))
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 208))(v15);
    }
  }
  return result;
}

uint64_t webrtc::internal::AudioState::UpdateAudioTransportWithSendingStreams(webrtc::internal::AudioState *this)
{
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  void *v34;
  char *v37;
  uint64_t v38;

  v1 = (char *)*((_QWORD *)this + 1979);
  v2 = (char *)this + 15840;
  if (v1 != (char *)this + 15840)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 8000;
    v7 = 1;
    v37 = (char *)this + 15840;
    while (1)
    {
      v8 = *((_QWORD *)v1 + 4);
      if (v4 < v5)
      {
        if (!v4)
          goto LABEL_44;
        *(_QWORD *)v4 = v8;
        v4 += 8;
        goto LABEL_21;
      }
      v9 = (v4 - v3) >> 3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        goto LABEL_45;
      v11 = v5 - v3;
      v12 = (v5 - v3) >> 2;
      if (v12 > v10)
        v10 = v12;
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v10)
      {
LABEL_44:
        __break(1u);
LABEL_45:
        abort();
      }
      if (v10 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v13 = v6;
      v38 = 8 * v10;
      v14 = (char *)operator new(8 * v10);
      v15 = &v14[8 * v9];
      *(_QWORD *)v15 = v8;
      v16 = v15 + 8;
      if (v4 == v3)
      {
        v5 = &v14[v38];
        if (!v3)
          goto LABEL_20;
LABEL_19:
        v21 = v3;
        v22 = v5;
        operator delete(v21);
        v5 = v22;
        goto LABEL_20;
      }
      v17 = v4 - v3 - 8;
      if (v17 < 0x168)
        break;
      v26 = (v4 - 8 - v3) & 0xFFFFFFFFFFFFFFF8;
      if (&v14[v4 - v3 - 8 - v26] > &v14[v4 - v3 - 8] || &v4[-v26 - 8] > v4 - 8 || (unint64_t)(v3 - v14) < 0x20)
        break;
      v27 = (v17 >> 3) + 1;
      v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      v18 = &v4[-v28];
      v15 -= v28;
      v29 = &v14[8 * v9 - 16];
      v30 = v4 - 16;
      v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v32 = *(_OWORD *)v30;
        *((_OWORD *)v29 - 1) = *((_OWORD *)v30 - 1);
        *(_OWORD *)v29 = v32;
        v29 -= 32;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v19 = v38;
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_17;
LABEL_18:
      v5 = &v14[v19];
      if (v3)
        goto LABEL_19;
LABEL_20:
      v3 = v15;
      v4 = v16;
      v6 = v13;
      v2 = v37;
LABEL_21:
      if (v6 <= *((_DWORD *)v1 + 10))
        v6 = *((_DWORD *)v1 + 10);
      if (v7 <= *((_QWORD *)v1 + 6))
        v7 = *((_QWORD *)v1 + 6);
      v23 = (char *)*((_QWORD *)v1 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = *(char **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (char *)*((_QWORD *)v1 + 2);
          v25 = *(_QWORD *)v24 == (_QWORD)v1;
          v1 = v24;
        }
        while (!v25);
      }
      v1 = v24;
      if (v24 == v2)
        goto LABEL_41;
    }
    v18 = v4;
    v19 = v38;
    do
    {
LABEL_17:
      v20 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *((_QWORD *)v15 - 1) = v20;
      v15 -= 8;
    }
    while (v18 != v3);
    goto LABEL_18;
  }
  v5 = 0;
  v4 = 0;
  v3 = 0;
  v6 = 8000;
  v7 = 1;
LABEL_41:
  v33 = v5;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
  v34 = (void *)*((_QWORD *)this + 18);
  if (v34)
  {
    *((_QWORD *)this + 19) = v34;
    operator delete(v34);
  }
  *((_QWORD *)this + 18) = v3;
  *((_QWORD *)this + 19) = v4;
  *((_QWORD *)this + 20) = v33;
  *((_DWORD *)this + 42) = v6;
  *((_QWORD *)this + 22) = v7;
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 80));
}

uint64_t webrtc::internal::AudioState::RemoveSendingStream(webrtc::internal::AudioState *this, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t result;

  v3 = (uint64_t *)*((_QWORD *)this + 1980);
  if (v3)
  {
    v4 = (uint64_t *)((char *)this + 15840);
    v5 = v3;
    do
    {
      v6 = v5[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (uint64_t **)v5;
      else
        v8 = (uint64_t **)(v5 + 1);
      if (v7)
        v4 = v5;
      v5 = *v8;
    }
    while (*v8);
    if (v4 != (uint64_t *)((char *)this + 15840) && v4[4] <= a2)
    {
      v9 = (uint64_t *)v4[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        v11 = v4;
        do
        {
          v10 = (uint64_t *)v11[2];
          v12 = *v10 == (_QWORD)v11;
          v11 = v10;
        }
        while (!v12);
      }
      if (*((uint64_t **)this + 1979) == v4)
        *((_QWORD *)this + 1979) = v10;
      --*((_QWORD *)this + 1981);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v3, v4);
      operator delete(v4);
    }
  }
  result = webrtc::internal::AudioState::UpdateAudioTransportWithSendingStreams(this);
  if (!*((_QWORD *)this + 1981))
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 216))(*((_QWORD *)this + 4));
  return result;
}

void webrtc::internal::AudioState::SetPlayout(webrtc::internal::AudioState *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_state.cc");
  if (*((unsigned __int8 *)this + 49) != a2)
  {
    *((_BYTE *)this + 49) = a2;
    if (a2)
    {
      webrtc::internal::AudioState::UpdateNullAudioPollerState((uint64_t)this);
      if (*((_QWORD *)this + 1976) != *((_QWORD *)this + 1977))
        (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 184))(*((_QWORD *)this + 4));
    }
    else
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 192))(*((_QWORD *)this + 4));
      webrtc::internal::AudioState::UpdateNullAudioPollerState((uint64_t)this);
    }
  }
}

void webrtc::internal::AudioState::SetRecording(webrtc::internal::AudioState *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_state.cc");
  if (*((unsigned __int8 *)this + 48) != a2)
  {
    *((_BYTE *)this + 48) = a2;
    if (a2)
    {
      if (!*((_QWORD *)this + 1981))
        return;
      v11 = 26;
    }
    else
    {
      v11 = 27;
    }
    (*(void (**)(void))(**((_QWORD **)this + 4) + 8 * v11))();
  }
}

uint64_t webrtc::internal::AudioState::SetStereoChannelSwapping(webrtc::internal::AudioState *this, char a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 80);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 80));
  *((_BYTE *)this + 184) = a2;
  return pthread_mutex_unlock(v4);
}

void std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*a1);
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

char *std::vector<webrtc::AudioReceiveStreamInterface *>::emplace<webrtc::AudioReceiveStreamInterface * const&>(unint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v6 = *a1;
  v5 = a1[1];
  v7 = (uint64_t)a2 - *a1;
  v8 = v7 >> 3;
  v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 != (char *)v5)
    {
      v11 = *a3;
      v12 = v5 - (_QWORD)(v9 + 8);
      v13 = v12 >> 3;
      v14 = (uint64_t *)(v5 - 8);
      if (v5 < 8)
      {
        v18 = (_QWORD *)a1[1];
      }
      else
      {
        v15 = (v7 & 0xFFFFFFFFFFFFFFF8) + v12;
        v16 = v15 + v6 + 8;
        if (v5 > v16)
          v16 = a1[1];
        v17 = v16 + ~v6 - v15;
        if (v17 >= 0x58)
        {
          v18 = (_QWORD *)a1[1];
          if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
          {
            v44 = (v17 >> 3) + 1;
            v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
            v14 = (uint64_t *)((char *)v14 + v45);
            v18 = (_QWORD *)(v5 + v45);
            v46 = (_OWORD *)(v5 + 16);
            v47 = (__int128 *)(8 * v13 + 8 * v8 + v6 + 16);
            v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v49 = *v47;
              *(v46 - 1) = *(v47 - 1);
              *v46 = v49;
              v46 += 2;
              v47 += 2;
              v48 -= 4;
            }
            while (v48);
            if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_50;
          }
        }
        else
        {
          v18 = (_QWORD *)a1[1];
        }
        do
        {
          v50 = *v14++;
          *v18++ = v50;
        }
        while ((unint64_t)v14 < v5);
      }
LABEL_50:
      a1[1] = (unint64_t)v18;
      if ((char *)v5 != v9 + 8)
        memmove((void *)(v5 - 8 * v13), v9, v12);
      *(_QWORD *)v9 = v11;
      return v9;
    }
    if (v6)
    {
      *(_QWORD *)v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    goto LABEL_54;
  }
  v19 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v19 >> 61)
    goto LABEL_55;
  v21 = v10 - v6;
  if (v21 >> 2 > v19)
    v19 = v21 >> 2;
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
    v22 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v22 = v19;
  if (v22)
  {
    if (v22 >> 61)
      goto LABEL_56;
    v23 = (char *)operator new(8 * v22);
    v24 = &v23[8 * v8];
    if (v8 != v22)
      goto LABEL_25;
LABEL_21:
    if (v7 >= 1)
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v24 -= 8 * (v25 >> 1);
      goto LABEL_25;
    }
    v42 = v7 >> 2;
    if ((_QWORD *)v6 == a2)
      v42 = 1;
    if (!(v42 >> 61))
    {
      v43 = 8 * v42;
      v24 = (char *)operator new(8 * v42);
      v26 = &v24[v43];
      if (v23)
        operator delete(v23);
      goto LABEL_27;
    }
LABEL_56:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v23 = 0;
  v24 = (char *)(8 * v8);
  if (!v8)
    goto LABEL_21;
LABEL_25:
  if (!v24)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    abort();
  }
  v26 = &v23[8 * v22];
LABEL_27:
  *(_QWORD *)v24 = *a3;
  v27 = (char *)*a1;
  v28 = v24;
  if ((char *)*a1 != v9)
  {
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v30 = v29 - v27 - 8;
    v31 = v9;
    v28 = v24;
    if (v30 < 0x58)
      goto LABEL_59;
    v31 = v9;
    v28 = v24;
    if ((unint64_t)(v29 - v24) < 0x20)
      goto LABEL_59;
    v32 = (v30 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v9[-v33];
    v28 = &v24[-v33];
    v34 = v24 - 16;
    v35 = (__int128 *)(v6 + 8 * v8 - 16);
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 32;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        v38 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *((_QWORD *)v28 - 1) = v38;
        v28 -= 8;
      }
      while (v31 != v27);
    }
  }
  v39 = (char *)a1[1];
  v40 = v39 - v9;
  if (v39 != v9)
    memmove(v24 + 8, v9, v39 - v9);
  v41 = (_QWORD *)*a1;
  *a1 = (unint64_t)v28;
  a1[1] = (unint64_t)&v24[v40 + 8];
  a1[2] = (unint64_t)v26;
  if (v41)
    operator delete(v41);
  return v24;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::internal::AudioState::UpdateNullAudioPollerState(void)::$_0 &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[960];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v4 = 0;
  v5 = 0;
  v3 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v1 + 16))(v1, 480, 2, 1, 48000, v6, &v5, &v4, &v3);
  return 10000;
}

uint64_t rtc::RefCountedObject<webrtc::internal::AudioState>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 15856);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::internal::AudioState>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 3964;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::internal::AudioState>::~RefCountedObject(uint64_t a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &unk_24C0AEAD8;
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*(_QWORD **)(a1 + 15840));
  v2 = *(void **)(a1 + 15808);
  if (v2)
  {
    *(_QWORD *)(a1 + 15816) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int **)(a1 + 15800);
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
  }
  webrtc::AudioTransportImpl::~AudioTransportImpl((webrtc::AudioTransportImpl *)(a1 + 56));
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

void rtc::RefCountedObject<webrtc::internal::AudioState>::~RefCountedObject(uint64_t a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &unk_24C0AEAD8;
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*(_QWORD **)(a1 + 15840));
  v2 = *(void **)(a1 + 15808);
  if (v2)
  {
    *(_QWORD *)(a1 + 15816) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int **)(a1 + 15800);
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
  }
  webrtc::AudioTransportImpl::~AudioTransportImpl((webrtc::AudioTransportImpl *)(a1 + 56));
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::internal::AudioState>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 15856));
  return v1 == 1;
}

uint64_t webrtc::AudioTrack::AudioTrack(uint64_t a1, char *__src, size_t __len, void (****a4)(_QWORD))
{
  char *v8;
  char *v9;
  size_t v10;
  size_t v11;
  void (***v12)(_QWORD);
  uint64_t v13;

  *(_QWORD *)(a1 + 16) = a1 + 16;
  *(_QWORD *)(a1 + 24) = a1 + 16;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &unk_24C0AEC80;
  *(_QWORD *)(a1 + 8) = &unk_24C0AED10;
  *(_BYTE *)(a1 + 40) = 1;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_16;
  if (__len <= 0x16)
  {
    v8 = (char *)(a1 + 48);
    *(_BYTE *)(a1 + 71) = __len;
    v9 = (char *)(a1 + 48 + __len);
    if (a1 + 48 > (unint64_t)__src)
      goto LABEL_9;
    goto LABEL_8;
  }
  v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((__len | 7) != 0x17)
    v10 = __len | 7;
  v11 = v10 + 1;
  v8 = (char *)operator new(v10 + 1);
  *(_QWORD *)(a1 + 56) = __len;
  *(_QWORD *)(a1 + 64) = v11 | 0x8000000000000000;
  *(_QWORD *)(a1 + 48) = v8;
  v9 = &v8[__len];
  if (v8 <= __src)
  {
LABEL_8:
    if (v9 <= __src)
      goto LABEL_9;
    __break(1u);
LABEL_16:
    abort();
  }
LABEL_9:
  if (__len)
    memmove(v8, __src, __len);
  *v9 = 0;
  *(_QWORD *)(a1 + 80) = &unk_24C0AEC58;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)a1 = &unk_24C0AEB90;
  *(_QWORD *)(a1 + 8) = &unk_24C0AEC28;
  v12 = *a4;
  *(_QWORD *)(a1 + 88) = *a4;
  if (v12)
  {
    (**v12)(v12);
    v13 = *(_QWORD *)(a1 + 88);
    if (v13)
    {
      (**(void (***)(uint64_t, uint64_t))(v13 + 8))(v13 + 8, a1 + 80);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    }
  }
  return a1;
}

void webrtc::AudioTrack::~AudioTrack(webrtc::AudioTrack *this)
{
  char *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  webrtc::AudioTrack *v6;
  uint64_t v7;
  uint64_t v8;
  webrtc::AudioTrack *v9;

  *(_QWORD *)this = &unk_24C0AEB90;
  *((_QWORD *)this + 1) = &unk_24C0AEC28;
  *((_QWORD *)this + 10) = &unk_24C0AEC58;
  v2 = (char *)this + 80;
  v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = 1;
  if (v3 != 1)
    webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(this);
  v4 = *((_QWORD *)this + 11);
  if (v4)
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)(v4 + 8) + 8))(v4 + 8, v2);
    v5 = *((_QWORD *)this + 11);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  *(_QWORD *)this = &unk_24C0AEC80;
  *((_QWORD *)this + 1) = &unk_24C0AED10;
  if (*((char *)this + 71) < 0)
  {
    operator delete(*((void **)this + 6));
    *(_QWORD *)this = &unk_24C0AED40;
    *((_QWORD *)this + 1) = &unk_24C0AEDD0;
    if (!*((_QWORD *)this + 4))
      return;
  }
  else
  {
    *(_QWORD *)this = &unk_24C0AED40;
    *((_QWORD *)this + 1) = &unk_24C0AEDD0;
    if (!*((_QWORD *)this + 4))
      return;
  }
  v7 = *((_QWORD *)this + 2);
  v6 = (webrtc::AudioTrack *)*((_QWORD *)this + 3);
  v8 = *(_QWORD *)v6;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
  **(_QWORD **)(v7 + 8) = v8;
  *((_QWORD *)this + 4) = 0;
  if (v6 != (webrtc::AudioTrack *)((char *)this + 16))
  {
    do
    {
      v9 = (webrtc::AudioTrack *)*((_QWORD *)v6 + 1);
      operator delete(v6);
      v6 = v9;
    }
    while (v9 != (webrtc::AudioTrack *)((char *)this + 16));
  }
}

void webrtc::AudioTrack::kind(unint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 5;
  if (a1 <= (unint64_t)"audio" && a1 + 5 > (unint64_t)"audio")
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)"audio";
    *(_WORD *)(a1 + 4) = cricket::kMediaTypeAudio[4];
  }
}

uint64_t webrtc::AudioTrack::GetSource(webrtc::AudioTrack *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t webrtc::AudioTrack::AddSink(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 88);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

uint64_t webrtc::AudioTrack::RemoveSink(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 88);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

_QWORD *webrtc::AudioTrack::OnChanged(webrtc::AudioTrack *this)
{
  _QWORD *result;
  int v3;

  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 32))(*((_QWORD *)this + 11));
  v3 = *((_DWORD *)this + 18);
  if ((_DWORD)result == 2)
  {
    *((_DWORD *)this + 18) = 1;
    if (v3 == 1)
      return result;
    return webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(this);
  }
  *((_DWORD *)this + 18) = 0;
  if (v3)
    return webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(this);
  return result;
}

_QWORD *`non-virtual thunk to'webrtc::AudioTrack::OnChanged(webrtc::AudioTrack *this)
{
  _QWORD *result;
  int v3;

  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v3 = *((_DWORD *)this - 2);
  if ((_DWORD)result == 2)
  {
    *((_DWORD *)this - 2) = 1;
    if (v3 == 1)
      return result;
    return webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged((_QWORD *)this - 10);
  }
  *((_DWORD *)this - 2) = 0;
  if (v3)
    return webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged((_QWORD *)this - 10);
  return result;
}

void webrtc::MediaStreamTrack<webrtc::AudioTrackInterface>::id(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 48);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 64);
  }
}

uint64_t webrtc::MediaStreamTrack<webrtc::AudioTrackInterface>::enabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

BOOL webrtc::MediaStreamTrack<webrtc::AudioTrackInterface>::set_enabled(uint64_t a1, int a2)
{
  int v3;

  v3 = *(unsigned __int8 *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = a2;
  if (v3 != a2)
    webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged((_QWORD *)a1);
  return v3 != a2;
}

uint64_t webrtc::MediaStreamTrack<webrtc::AudioTrackInterface>::state(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

_QWORD *webrtc::Notifier<webrtc::AudioTrackInterface>::RegisterObserver(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[2];
  a1 += 2;
  result[1] = a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void webrtc::Notifier<webrtc::AudioTrackInterface>::UnregisterObserver(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (uint64_t *)a1[3];
  if (v2 != a1 + 2)
  {
    while (1)
    {
      v3 = (_QWORD *)v2[1];
      if (v2[2] == a2)
        break;
      v2 = (uint64_t *)v2[1];
      if (v3 == a1 + 2)
        return;
    }
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)v2[1] = v4;
    --a1[4];
    operator delete(v2);
  }
}

_QWORD *`non-virtual thunk to'webrtc::Notifier<webrtc::AudioTrackInterface>::RegisterObserver(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[1];
  result[1] = ++a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void `non-virtual thunk to'webrtc::Notifier<webrtc::AudioTrackInterface>::UnregisterObserver(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (uint64_t *)a1[2];
  if (v2 != a1 + 1)
  {
    while (1)
    {
      v3 = (_QWORD *)v2[1];
      if (v2[2] == a2)
        break;
      v2 = (uint64_t *)v2[1];
      if (v3 == a1 + 1)
        return;
    }
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)v2[1] = v4;
    --a1[3];
    operator delete(v2);
  }
}

uint64_t rtc::RefCountedObject<webrtc::AudioTrack>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 100);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::AudioTrack>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 25;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::AudioTrack>::~RefCountedObject(webrtc::AudioTrack *a1)
{
  webrtc::AudioTrack::~AudioTrack(a1);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::AudioTrack>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 100));
  return v1 == 1;
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::AudioTrack>::~RefCountedObject(uint64_t a1)
{
  webrtc::AudioTrack::~AudioTrack((webrtc::AudioTrack *)(a1 - 8));
}

{
  webrtc::AudioTrack::~AudioTrack((webrtc::AudioTrack *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::AudioTrack::~AudioTrack((webrtc::AudioTrack *)(a1 - 80));
}

{
  webrtc::AudioTrack::~AudioTrack((webrtc::AudioTrack *)(a1 - 80));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioTransportImpl::AudioTransportImpl(uint64_t a1, void (***a2)(_QWORD), uint64_t a3, uint64_t *a4)
{
  _BYTE *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  _QWORD *v13;
  pthread_mutexattr_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v6 = (_BYTE *)(a1 + 15648);
  *(_QWORD *)a1 = &off_24C0AEEF8;
  *(_QWORD *)(a1 + 8) = a3;
  v7 = (_QWORD *)(a1 + 16);
  if (!a4)
  {
    *v7 = 0;
    goto LABEL_10;
  }
  v12[0] = &off_24C0AEF38;
  v12[1] = a1;
  v13 = v12;
  if (a4[2])
  {
    std::make_unique[abi:sn180100]<webrtc::AsyncAudioProcessing,std::unique_ptr<webrtc::AudioFrameProcessor>,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>>(a4 + 2, a4[3], v12, v7);
    v8 = v13;
    if (v13 != v12)
    {
LABEL_4:
      if (!v8)
        goto LABEL_10;
      v9 = 5;
      goto LABEL_9;
    }
  }
  else
  {
    std::make_unique[abi:sn180100]<webrtc::AsyncAudioProcessing,webrtc::AudioFrameProcessor &,webrtc::TaskQueueFactory &,std::function<void ()(std::unique_ptr<webrtc::AudioFrame>)>>(a4[1], a4[3], v12, v7);
    v8 = v13;
    if (v13 != v12)
      goto LABEL_4;
  }
  v9 = 4;
  v8 = v12;
LABEL_9:
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_10:
  pthread_mutexattr_init(&v14);
  pthread_mutexattr_setpolicy_np(&v14, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 24), &v14);
  pthread_mutexattr_destroy(&v14);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 8000;
  *(_QWORD *)(a1 + 120) = 1;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &unk_24C0BAE48;
  v10 = 0uLL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = a2;
  if (a2)
  {
    (**a2)(a2);
    v10 = 0uLL;
  }
  *(_DWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = -1;
  *(_QWORD *)(a1 + 232) = -1;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0x200000004;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *v6 = 1;
  *(_DWORD *)(a1 + 15652) = 0;
  v6[8] = 0;
  v6[16] = 0;
  *(_QWORD *)(a1 + 15672) = &unk_24C0BAE48;
  *(_OWORD *)(a1 + 15680) = v10;
  *(_OWORD *)(a1 + 15696) = v10;
  *(_OWORD *)(a1 + 15712) = v10;
  *(_OWORD *)(a1 + 15728) = v10;
  return a1;
}

void webrtc::AudioTransportImpl::~AudioTransportImpl(webrtc::AudioTransportImpl *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  webrtc::AsyncAudioProcessing *v11;

  *(_QWORD *)this = &off_24C0AEEF8;
  webrtc::PushResampler<short>::~PushResampler((_QWORD *)this + 1959);
  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v2 + 16);
        v7 = *(void **)(v2 + 8);
        if (v6 != v5)
        {
          do
          {
            v8 = *(void **)(v6 - 96);
            if (v8)
            {
              *(_QWORD *)(v6 - 88) = v8;
              operator delete(v8);
            }
            v6 -= 104;
          }
          while (v6 != v5);
          v7 = *(void **)(v2 + 8);
        }
        *(_QWORD *)(v2 + 16) = v5;
        operator delete(v7);
      }
      MEMORY[0x20BD0ADEC](v2, 0x1020C40E72D6CFBLL);
    }
  }
  v9 = *((_QWORD *)this + 26);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  webrtc::PushResampler<short>::~PushResampler((_QWORD *)this + 17);
  v10 = (void *)*((_QWORD *)this + 11);
  if (v10)
  {
    *((_QWORD *)this + 12) = v10;
    operator delete(v10);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));
  v11 = (webrtc::AsyncAudioProcessing *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    webrtc::AsyncAudioProcessing::~AsyncAudioProcessing(v11);
    MEMORY[0x20BD0ADEC]();
  }
}

{
  webrtc::AudioTransportImpl::~AudioTransportImpl(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioTransportImpl::RecordedDataIsAvailable(webrtc::AudioTransportImpl *this, const void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned int a7, int a8, unsigned int a9, BOOL a10, unsigned int *a11)
{
  return (*(uint64_t (**)(webrtc::AudioTransportImpl *, const void *))(*(_QWORD *)this + 8))(this, a2);
}

uint64_t webrtc::AudioTransportImpl::RecordedDataIsAvailable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, unsigned int a7, uint64_t a8, int a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, char a13)
{
  pthread_mutex_t *v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  __int16 *v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t i;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int16 *v34;
  unint64_t v35;
  __int16 *v36;
  int16x8_t v37;
  int16x8_t v38;
  __int16 *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t *, uint64_t *);
  uint64_t (*v44)(_QWORD *);
  const webrtc::AudioFrame *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  const webrtc::AudioFrame *v55;
  char v56;
  char v57;
  uint64_t v58;
  __int16 *v59;
  void (*v60)(uint64_t, uint64_t *, uint64_t *);
  uint64_t (*v61)(_QWORD *);
  int16x8x2_t v62;
  int16x8x2_t v63;

  v18 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  v19 = *(_DWORD *)(a1 + 112);
  v20 = *(_QWORD *)(a1 + 120);
  v21 = *(unsigned __int8 *)(a1 + 128);
  pthread_mutex_unlock(v18);
  v22 = operator new();
  v23 = (__int16 *)v22;
  *(_DWORD *)v22 = 0;
  v24 = v22 + 15432;
  *(_QWORD *)(v22 + 8) = -1;
  *(_QWORD *)(v22 + 16) = -1;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 48) = 0x200000004;
  *(_QWORD *)(v22 + 56) = 0;
  *(_QWORD *)(v22 + 64) = 0;
  *(_BYTE *)(v22 + 15432) = 1;
  *(_DWORD *)(v22 + 15436) = 0;
  *(_BYTE *)(v22 + 15440) = 0;
  if (v19 >= a6)
    v25 = a6;
  else
    v25 = v19;
  *(_DWORD *)(v22 + 32) = 8000;
  *(_BYTE *)(v22 + 15448) = 0;
  if (v25 >= 8001)
  {
    *(_DWORD *)(v22 + 32) = 16000;
    if (v25 >= 0x3E81)
    {
      if (v25 <= 0x7D00)
        v26 = 32000;
      else
        v26 = 48000;
      *(_DWORD *)(v22 + 32) = v26;
    }
  }
  if (v20 >= a5)
    v27 = a5;
  else
    v27 = v20;
  *(_QWORD *)(v22 + 40) = v27;
  webrtc::voe::RemixAndResample(a2, a3);
  v28 = *(_QWORD *)(a1 + 8);
  if (v28)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v28 + 192))(*(_QWORD *)(a1 + 8), a7);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 208))(v28, a10);
    webrtc::ProcessAudioFrame(v28, (uint64_t)v23);
  }
  if (v21)
  {
    if (*((_QWORD *)v23 + 5) == 2 && !*(_BYTE *)v24)
    {
      v29 = 2 * *((_QWORD *)v23 + 3);
      if (v29)
      {
        if (v29 < 0x1F)
        {
          for (i = 0; i < v29; i += 2)
          {
LABEL_27:
            v39 = &v23[i];
            HIDWORD(v40) = *((_DWORD *)v39 + 18);
            LODWORD(v40) = HIDWORD(v40);
            *((_DWORD *)v39 + 18) = v40 >> 16;
          }
          goto LABEL_28;
        }
        i = 0;
        v31 = v29 - 1;
        v32 = (2 * (v29 - 1)) & 0xFFFFFFFFFFFFFFFCLL;
        if ((__int16 *)((char *)v23 + v32 + 74) < v23 + 37)
          goto LABEL_27;
        if ((__int16 *)((char *)v23 + v32 + 72) < v23 + 36)
          goto LABEL_27;
        if ((v31 & 0x8000000000000000) != 0)
          goto LABEL_27;
        v33 = (v31 >> 1) + 1;
        i = 2 * (v33 & 0xFFFFFFFFFFFFFFF0);
        v34 = v23 + 52;
        v35 = v33 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v36 = v34 - 16;
          v62 = vld2q_s16(v36);
          v63 = vld2q_s16(v34);
          v37 = v62.val[0];
          v38 = v63.val[0];
          vst2q_s16(v36, *(int16x8x2_t *)((char *)&v62 + 16));
          vst2q_s16(v34, *(int16x8x2_t *)((char *)&v63 + 16));
          v34 += 32;
          v35 -= 16;
        }
        while (v35);
        if (v33 != (v33 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_27;
      }
    }
  }
LABEL_28:
  if (a13)
  {
    *(_QWORD *)(v24 + 8) = a12 / 1000000;
    *(_BYTE *)(v24 + 16) = 1;
  }
  v41 = *(_QWORD *)(a1 + 16);
  if (v41)
  {
    v42 = *(_QWORD *)(v41 + 48);
    if (*(_QWORD *)(v41 + 40))
    {
      v58 = *(_QWORD *)(a1 + 16);
      v59 = v23;
      v43 = (void (*)(uint64_t, uint64_t *, uint64_t *))absl::internal_any_invocable::LocalManagerNontrivial<webrtc::AsyncAudioProcessing::Process(std::unique_ptr<webrtc::AudioFrame>)::$_0>;
      v44 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::AsyncAudioProcessing::Process(std::unique_ptr<webrtc::AudioFrame>)::$_0 &&>;
    }
    else
    {
      v58 = *(_QWORD *)(a1 + 16);
      v59 = v23;
      v43 = (void (*)(uint64_t, uint64_t *, uint64_t *))absl::internal_any_invocable::LocalManagerNontrivial<webrtc::AsyncAudioProcessing::Process(std::unique_ptr<webrtc::AudioFrame>)::$_1>;
      v44 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::AsyncAudioProcessing::Process(std::unique_ptr<webrtc::AudioFrame>)::$_1 &&>;
    }
    v60 = v43;
    v61 = v44;
    (*(void (**)(uint64_t, uint64_t *, char *, char *))(*(_QWORD *)v42 + 8))(v42, &v58, &v57, &v56);
    v60(1, &v58, &v58);
  }
  else
  {
    v55 = (const webrtc::AudioFrame *)v23;
    webrtc::AudioTransportImpl::SendProcessedData(a1, &v55);
    v45 = v55;
    v55 = 0;
    if (v45)
    {
      v46 = *((_QWORD *)v45 + 8);
      if (v46)
      {
        do
        {
          v47 = __ldaxr((unsigned int *)v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, (unsigned int *)v46));
        if (!v48)
        {
          v49 = *(_QWORD *)(v46 + 8);
          if (v49)
          {
            v50 = *(_QWORD *)(v46 + 16);
            v51 = *(void **)(v46 + 8);
            if (v50 != v49)
            {
              do
              {
                v52 = *(void **)(v50 - 96);
                if (v52)
                {
                  *(_QWORD *)(v50 - 88) = v52;
                  operator delete(v52);
                }
                v50 -= 104;
              }
              while (v50 != v49);
              v51 = *(void **)(v46 + 8);
            }
            *(_QWORD *)(v46 + 16) = v49;
            operator delete(v51);
          }
          MEMORY[0x20BD0ADEC](v46, 0x1020C40E72D6CFBLL);
        }
      }
      MEMORY[0x20BD0ADEC](v45, 0x1020C40C39A3FA5);
    }
  }
  return 0;
}

uint64_t webrtc::AudioTransportImpl::SendProcessedData(uint64_t a1, const webrtc::AudioFrame **a2)
{
  pthread_mutex_t *v4;
  void (****v5)(_QWORD, _QWORD);
  void (****v6)(_QWORD, _QWORD);
  void (****v7)(_QWORD, uint64_t *);
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (***v16)(_QWORD, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void (***v24)(_QWORD, const webrtc::AudioFrame **);
  const webrtc::AudioFrame *v25;
  const webrtc::AudioFrame *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  pthread_mutex_t *v35;
  const webrtc::AudioFrame *v36;
  uint64_t v37;

  v4 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  v5 = *(void (*****)(_QWORD, _QWORD))(a1 + 88);
  v6 = *(void (*****)(_QWORD, _QWORD))(a1 + 96);
  if (v5 != v6)
  {
    v7 = (void (****)(_QWORD, uint64_t *))(v5 + 1);
    if (v5 + 1 != v6)
    {
      v35 = v4;
      do
      {
        v9 = operator new();
        *(_DWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = -1;
        *(_QWORD *)(v9 + 16) = -1;
        *(_QWORD *)(v9 + 24) = 0;
        *(_DWORD *)(v9 + 32) = 0;
        *(_QWORD *)(v9 + 40) = 0;
        *(_QWORD *)(v9 + 48) = 0x200000004;
        *(_QWORD *)(v9 + 56) = 0;
        *(_QWORD *)(v9 + 64) = 0;
        *(_BYTE *)(v9 + 15432) = 1;
        *(_DWORD *)(v9 + 15436) = 0;
        *(_BYTE *)(v9 + 15440) = 0;
        *(_BYTE *)(v9 + 15448) = 0;
        webrtc::AudioFrame::CopyFrom((webrtc::AudioFrame *)v9, *a2, v10, v11, v12, v13, v14, v15);
        v16 = *v7;
        v37 = v9;
        (**v16)(v16, &v37);
        v17 = v37;
        v37 = 0;
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 64);
          if (v18)
          {
            do
            {
              v19 = __ldaxr((unsigned int *)v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, (unsigned int *)v18));
            if (!v20)
            {
              v21 = *(_QWORD *)(v18 + 8);
              if (v21)
              {
                v22 = *(_QWORD *)(v18 + 16);
                v8 = *(void **)(v18 + 8);
                if (v22 != v21)
                {
                  do
                  {
                    v23 = *(void **)(v22 - 96);
                    if (v23)
                    {
                      *(_QWORD *)(v22 - 88) = v23;
                      operator delete(v23);
                    }
                    v22 -= 104;
                  }
                  while (v22 != v21);
                  v8 = *(void **)(v18 + 8);
                }
                *(_QWORD *)(v18 + 16) = v21;
                operator delete(v8);
              }
              MEMORY[0x20BD0ADEC](v18, 0x1020C40E72D6CFBLL);
            }
          }
          MEMORY[0x20BD0ADEC](v17, 0x1020C40C39A3FA5);
        }
        ++v7;
      }
      while (v7 != *(void (*****)(_QWORD, uint64_t *))(a1 + 96));
      v5 = *(void (*****)(_QWORD, _QWORD))(a1 + 88);
      v4 = v35;
    }
    v24 = (void (***)(_QWORD, const webrtc::AudioFrame **))*v5;
    v25 = *a2;
    *a2 = 0;
    v36 = v25;
    (**v24)(v24, &v36);
    v26 = v36;
    v36 = 0;
    if (v26)
    {
      v27 = *((_QWORD *)v26 + 8);
      if (v27)
      {
        do
        {
          v28 = __ldaxr((unsigned int *)v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, (unsigned int *)v27));
        if (!v29)
        {
          v30 = *(_QWORD *)(v27 + 8);
          if (v30)
          {
            v31 = *(_QWORD *)(v27 + 16);
            v32 = *(void **)(v27 + 8);
            if (v31 != v30)
            {
              do
              {
                v33 = *(void **)(v31 - 96);
                if (v33)
                {
                  *(_QWORD *)(v31 - 88) = v33;
                  operator delete(v33);
                }
                v31 -= 104;
              }
              while (v31 != v30);
              v32 = *(void **)(v27 + 8);
            }
            *(_QWORD *)(v27 + 16) = v30;
            operator delete(v32);
          }
          MEMORY[0x20BD0ADEC](v27, 0x1020C40E72D6CFBLL);
        }
      }
      MEMORY[0x20BD0ADEC](v26, 0x1020C40C39A3FA5);
    }
  }
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::AudioTransportImpl::NeedMorePlayData(webrtc::AudioTransportImpl *this, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, char *a6, unint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  char *v28;
  char *v29;
  char *v30;
  unint64_t v32;
  int v33;
  void *v34;

  (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)this + 26) + 48))(*((_QWORD *)this + 26), a4, (char *)this + 216);
  *a8 = *((_QWORD *)this + 28);
  *a9 = *((_QWORD *)this + 29);
  v20 = *((_QWORD *)this + 1);
  if (v20)
    webrtc::ProcessReverseAudioFrame(v20, (uint64_t)this + 216);
  v21 = a4 * a2;
  v22 = *((_QWORD *)this + 32);
  if (v21 != v22 * ((int)a5 / 100))
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_transport_impl.cc", 80, "destination.size() == frame.num_channels_ * target_number_of_samples_per_channel", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v16, v17, v18, v19, v21);
LABEL_18:
    v32 = v26;
    v26 = v32;
    if (v33)
    {
      v34 = (void *)operator new[]();
      bzero(v34, 0x3C00uLL);
      a5[163] = (uint64_t)v34;
      v26 = v32;
    }
    goto LABEL_6;
  }
  a2 = (unint64_t)this + 15672;
  webrtc::PushResampler<short>::InitializeIfNeeded((uint64_t)this + 15672, *((_DWORD *)this + 62), (int)a5, (int)v22);
  v26 = *((_QWORD *)this + 32) * *((_QWORD *)this + 30);
  if (!*((_BYTE *)this + 15648))
  {
    v28 = (char *)this + 288;
    goto LABEL_10;
  }
  a5 = &qword_254572000;
  if ((v27 & 1) == 0)
    goto LABEL_18;
LABEL_6:
  v28 = (char *)a5[163];
  if (v26 >= 0x1E00)
    v26 = 7680;
LABEL_10:
  if (v26)
    v29 = v28;
  else
    v29 = 0;
  if (v21)
    v30 = a6;
  else
    v30 = 0;
  *a7 = (int)webrtc::PushResampler<short>::Resample(a2, v29, v26, v30, v21, v23, v24, v25);
  return 0;
}

unint64_t webrtc::AudioTransportImpl::PullRenderData(webrtc::AudioTransportImpl *this, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v30;
  int v31;
  void *v32;

  (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)this + 26) + 48))(*((_QWORD *)this + 26), a4, (char *)this + 216);
  *a7 = *((_QWORD *)this + 28);
  *a8 = *((_QWORD *)this + 29);
  v19 = a5 * a4;
  v20 = *((_QWORD *)this + 32);
  if (a5 * a4 != v20 * ((int)a3 / 100))
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/audio_transport_impl.cc", 80, "destination.size() == frame.num_channels_ * target_number_of_samples_per_channel", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v15, v16, v17, v18, a5 * a4);
LABEL_16:
    v30 = v24;
    v24 = v30;
    if (v31)
    {
      v32 = (void *)operator new[]();
      bzero(v32, 0x3C00uLL);
      a3[163] = (uint64_t)v32;
      v24 = v30;
    }
    goto LABEL_4;
  }
  a7 = (uint64_t *)((char *)this + 15672);
  webrtc::PushResampler<short>::InitializeIfNeeded((uint64_t)this + 15672, *((_DWORD *)this + 62), (int)a3, (int)v20);
  v24 = *((_QWORD *)this + 32) * *((_QWORD *)this + 30);
  if (!*((_BYTE *)this + 15648))
  {
    v26 = (char *)this + 288;
    goto LABEL_8;
  }
  a3 = &qword_254572000;
  if ((v25 & 1) == 0)
    goto LABEL_16;
LABEL_4:
  v26 = (char *)a3[163];
  if (v24 >= 0x1E00)
    v24 = 7680;
LABEL_8:
  if (v24)
    v27 = v26;
  else
    v27 = 0;
  if (v19)
    v28 = a6;
  else
    v28 = 0;
  return webrtc::PushResampler<short>::Resample((unint64_t)a7, v27, v24, v28, v19, v21, v22, v23);
}

void std::__function::__func<webrtc::AudioTransportImpl::AudioTransportImpl(webrtc::AudioMixer *,webrtc::AudioProcessing *,webrtc::AsyncAudioProcessing::Factory *)::$_0,std::allocator<webrtc::AudioTransportImpl::AudioTransportImpl(webrtc::AudioMixer *,webrtc::AudioProcessing *,webrtc::AsyncAudioProcessing::Factory *)::$_0>,void ()(std::unique_ptr<webrtc::AudioFrame>)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::AudioTransportImpl::AudioTransportImpl(webrtc::AudioMixer *,webrtc::AudioProcessing *,webrtc::AsyncAudioProcessing::Factory *)::$_0,std::allocator<webrtc::AudioTransportImpl::AudioTransportImpl(webrtc::AudioMixer *,webrtc::AudioProcessing *,webrtc::AsyncAudioProcessing::Factory *)::$_0>,void ()(std::unique_ptr<webrtc::AudioFrame>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0AEF38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::AudioTransportImpl::AudioTransportImpl(webrtc::AudioMixer *,webrtc::AudioProcessing *,webrtc::AsyncAudioProcessing::Factory *)::$_0,std::allocator<webrtc::AudioTransportImpl::AudioTransportImpl(webrtc::AudioMixer *,webrtc::AudioProcessing *,webrtc::AsyncAudioProcessing::Factory *)::$_0>,void ()(std::unique_ptr<webrtc::AudioFrame>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0AEF38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::AudioTransportImpl::AudioTransportImpl(webrtc::AudioMixer *,webrtc::AudioProcessing *,webrtc::AsyncAudioProcessing::Factory *)::$_0,std::allocator<webrtc::AudioTransportImpl::AudioTransportImpl(webrtc::AudioMixer *,webrtc::AudioProcessing *,webrtc::AsyncAudioProcessing::Factory *)::$_0>,void ()(std::unique_ptr<webrtc::AudioFrame>)>::operator()(uint64_t a1, const webrtc::AudioFrame **a2)
{
  const webrtc::AudioFrame *v2;
  uint64_t v3;
  uint64_t result;
  const webrtc::AudioFrame *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const webrtc::AudioFrame *v13;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  v13 = v2;
  result = webrtc::AudioTransportImpl::SendProcessedData(v3, &v13);
  v5 = v13;
  v13 = 0;
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 8);
    if (v6)
    {
      do
      {
        v7 = __ldaxr((unsigned int *)v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)v6));
      if (!v8)
      {
        v9 = *(_QWORD *)(v6 + 8);
        if (v9)
        {
          v10 = *(_QWORD *)(v6 + 16);
          v11 = *(void **)(v6 + 8);
          if (v10 != v9)
          {
            do
            {
              v12 = *(void **)(v10 - 96);
              if (v12)
              {
                *(_QWORD *)(v10 - 88) = v12;
                operator delete(v12);
              }
              v10 -= 104;
            }
            while (v10 != v9);
            v11 = *(void **)(v6 + 8);
          }
          *(_QWORD *)(v6 + 16) = v9;
          operator delete(v11);
        }
        MEMORY[0x20BD0ADEC](v6, 0x1020C40E72D6CFBLL);
      }
    }
    JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

void webrtc::AudioVector::~AudioVector(webrtc::AudioVector *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24C0AEF80;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C80BDFB0063);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24C0AEF80;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C80BDFB0063);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioVector::Clear(uint64_t this)
{
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

uint64_t webrtc::AudioVector::CopyTo(webrtc::AudioVector *this, webrtc::AudioVector *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this);
  if (*((_QWORD *)a2 + 2) <= v4)
  {
    v5 = v4;
    v6 = (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)a2 + 144))(a2);
    v7 = v5 + 1;
    v8 = operator new[]();
    (*(void (**)(webrtc::AudioVector *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v6, 0, v8);
    v9 = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = v6;
    *((_QWORD *)a2 + 1) = v8;
    *((_QWORD *)a2 + 2) = v7;
    if (v9)
      MEMORY[0x20BD0ADD4](v9, 0x1000C80BDFB0063);
  }
  v10 = (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this);
  (*(void (**)(webrtc::AudioVector *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 32))(this, v10, 0, *((_QWORD *)a2 + 1));
  *((_QWORD *)a2 + 3) = 0;
  result = (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this);
  *((_QWORD *)a2 + 4) = result;
  return result;
}

void *webrtc::AudioVector::CopyTo(void *this, unint64_t a2, uint64_t a3, __int16 *a4)
{
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (a2)
  {
    v6 = a2;
    v7 = this;
    v8 = (*(uint64_t (**)(void *))(*(_QWORD *)this + 144))(this);
    if (v8 - a3 < v6)
      v6 = v8 - a3;
    v9 = *((_QWORD *)v7 + 2);
    v10 = (*((_QWORD *)v7 + 3) + a3) % v9;
    v11 = v9 - v10;
    if (v9 - v10 >= v6)
      v12 = v6;
    else
      v12 = v9 - v10;
    this = memcpy(a4, (const void *)(*((_QWORD *)v7 + 1) + 2 * v10), 2 * v12);
    if (v6 > v11)
      return memcpy(&a4[v12], *((const void **)v7 + 1), 2 * (v6 - v12));
  }
  return this;
}

unint64_t webrtc::AudioVector::PushFront(webrtc::AudioVector *this, const webrtc::AudioVector *a2)
{
  unint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  result = (*(uint64_t (**)(const webrtc::AudioVector *))(*(_QWORD *)a2 + 144))(a2);
  if (result)
  {
    v5 = result;
    v6 = (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this) + result;
    if (*((_QWORD *)this + 2) <= v6)
    {
      v7 = (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this);
      v8 = v6 + 1;
      v9 = operator new[]();
      (*(void (**)(webrtc::AudioVector *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 32))(this, v7, 0, v9);
      v10 = *((_QWORD *)this + 1);
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = v7;
      *((_QWORD *)this + 1) = v9;
      *((_QWORD *)this + 2) = v8;
      if (v10)
        MEMORY[0x20BD0ADD4](v10, 0x1000C80BDFB0063);
    }
    v11 = *((_QWORD *)a2 + 3);
    v12 = *((_QWORD *)a2 + 2) - v11;
    if (v12 >= v5)
      v13 = v5;
    else
      v13 = *((_QWORD *)a2 + 2) - v11;
    if (v5 > v12)
    {
      (*(void (**)(webrtc::AudioVector *, _QWORD, unint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)a2 + 1), v5 - v13);
      v11 = *((_QWORD *)a2 + 3);
    }
    return (*(uint64_t (**)(webrtc::AudioVector *, uint64_t, unint64_t))(*(_QWORD *)this + 48))(this, *((_QWORD *)a2 + 1) + 2 * v11, v13);
  }
  return result;
}

_QWORD *webrtc::AudioVector::PushFront(_QWORD *this, const __int16 *a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if (a3)
  {
    v5 = this;
    v6 = (*(uint64_t (**)(_QWORD *))(*this + 144))(this) + a3;
    if (v5[2] <= v6)
    {
      v7 = (*(uint64_t (**)(_QWORD *))(*v5 + 144))(v5);
      v8 = v6 + 1;
      v9 = operator new[]();
      (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v5 + 32))(v5, v7, 0, v9);
      v10 = v5[1];
      v5[3] = 0;
      v5[4] = v7;
      v5[1] = v9;
      v5[2] = v8;
      if (v10)
        MEMORY[0x20BD0ADD4](v10, 0x1000C80BDFB0063);
    }
    v11 = v5[3];
    if (v11 >= a3)
      v12 = a3;
    else
      v12 = v5[3];
    v13 = a3 - v12;
    this = memcpy((void *)(v5[1] + 2 * (v11 - v12)), &a2[a3 - v12], 2 * v12);
    if (v11 < a3)
      this = memcpy((void *)(v5[1] + 2 * (v5[2] - v13)), a2, 2 * v13);
    v5[3] = (v5[3] - a3 + v5[2]) % v5[2];
  }
  return this;
}

uint64_t webrtc::AudioVector::PushBack(webrtc::AudioVector *this, const webrtc::AudioVector *a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(const webrtc::AudioVector *))(*(_QWORD *)a2 + 144))(a2);
  return (*(uint64_t (**)(webrtc::AudioVector *, const webrtc::AudioVector *, uint64_t, _QWORD))(*(_QWORD *)this + 64))(this, a2, v4, 0);
}

_QWORD *webrtc::AudioVector::PushBack(_QWORD *this, const webrtc::AudioVector *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (a3)
  {
    v7 = this;
    v8 = (*(uint64_t (**)(_QWORD *))(*this + 144))(this) + a3;
    if (v7[2] <= v8)
    {
      v9 = (*(uint64_t (**)(_QWORD *))(*v7 + 144))(v7);
      v10 = v8 + 1;
      v11 = operator new[]();
      (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v7 + 32))(v7, v9, 0, v11);
      v12 = v7[1];
      v7[3] = 0;
      v7[4] = v9;
      v7[1] = v11;
      v7[2] = v10;
      if (v12)
        MEMORY[0x20BD0ADD4](v12, 0x1000C80BDFB0063);
    }
    v13 = *((_QWORD *)a2 + 2);
    v14 = (*((_QWORD *)a2 + 3) + a4) % v13;
    v15 = v13 - v14;
    if (v13 - v14 >= a3)
      v16 = a3;
    else
      v16 = v13 - v14;
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, unint64_t))(*v7 + 72))(v7, *((_QWORD *)a2 + 1) + 2 * v14, v16);
    if (v15 < a3)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, unint64_t))(*v7 + 72))(v7, *((_QWORD *)a2 + 1), a3 - v16);
  }
  return this;
}

_QWORD *webrtc::AudioVector::PushBack(_QWORD *this, const __int16 *a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if (a3)
  {
    v5 = this;
    v6 = (*(uint64_t (**)(_QWORD *))(*this + 144))(this) + a3;
    v7 = v5[2];
    if (v7 <= v6)
    {
      v8 = (*(uint64_t (**)(_QWORD *))(*v5 + 144))(v5);
      v7 = v6 + 1;
      v9 = operator new[]();
      (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v5 + 32))(v5, v8, 0, v9);
      v10 = v5[1];
      v5[3] = 0;
      v5[4] = v8;
      v5[1] = v9;
      v5[2] = v7;
      if (v10)
      {
        MEMORY[0x20BD0ADD4](v10, 0x1000C80BDFB0063);
        v7 = v5[2];
      }
    }
    v11 = v5[4];
    v12 = v7 - v11;
    if (v7 - v11 >= a3)
      v13 = a3;
    else
      v13 = v7 - v11;
    this = memcpy((void *)(v5[1] + 2 * v11), a2, 2 * v13);
    if (v12 < a3)
      this = memcpy((void *)v5[1], &a2[v13], 2 * (a3 - v13));
    v5[4] = (v5[4] + a3) % v5[2];
  }
  return this;
}

unint64_t webrtc::AudioVector::PopFront(unint64_t this, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  if (a2)
  {
    v3 = this;
    this = (*(uint64_t (**)(unint64_t))(*(_QWORD *)this + 144))(this);
    if (this >= a2)
      v4 = a2;
    else
      v4 = this;
    *(_QWORD *)(v3 + 24) = (*(_QWORD *)(v3 + 24) + v4) % *(_QWORD *)(v3 + 16);
  }
  return this;
}

unint64_t webrtc::AudioVector::PopBack(unint64_t this, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  if (a2)
  {
    v3 = this;
    this = (*(uint64_t (**)(unint64_t))(*(_QWORD *)this + 144))(this);
    if (this >= a2)
      v4 = a2;
    else
      v4 = this;
    *(_QWORD *)(v3 + 32) = (*(_QWORD *)(v3 + 32) - v4 + *(_QWORD *)(v3 + 16)) % *(_QWORD *)(v3 + 16);
  }
  return this;
}

void webrtc::AudioVector::Extend(webrtc::AudioVector *this, unint64_t a2)
{
  uint64_t v4;

  if (a2)
  {
    v4 = (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this);
    webrtc::AudioVector::InsertZerosByPushBack(this, a2, v4);
  }
}

void webrtc::AudioVector::InsertZerosByPushBack(webrtc::AudioVector *this, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v6 = (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this);
  v7 = v6 - a3;
  if (v6 == a3)
  {
    v8 = 0;
  }
  else
  {
    v8 = operator new[]();
    (*(void (**)(webrtc::AudioVector *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 32))(this, v7, a3, v8);
    (*(void (**)(webrtc::AudioVector *, uint64_t))(*(_QWORD *)this + 88))(this, v7);
  }
  v9 = v7 + a2 + (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this);
  v10 = *((_QWORD *)this + 2);
  if (v10 <= v9)
  {
    v11 = (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this);
    v10 = v9 + 1;
    v12 = operator new[]();
    (*(void (**)(webrtc::AudioVector *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 32))(this, v11, 0, v12);
    v13 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = v11;
    *((_QWORD *)this + 1) = v12;
    *((_QWORD *)this + 2) = v10;
    if (v13)
    {
      MEMORY[0x20BD0ADD4](v13, 0x1000C80BDFB0063);
      v10 = *((_QWORD *)this + 2);
    }
  }
  v14 = *((_QWORD *)this + 4);
  v15 = v10 - v14;
  if (v10 - v14 >= a2)
    v16 = a2;
  else
    v16 = v10 - v14;
  bzero((void *)(*((_QWORD *)this + 1) + 2 * v14), 2 * v16);
  if (v15 < a2)
    bzero(*((void **)this + 1), 2 * (a2 - v16));
  *((_QWORD *)this + 4) = (*((_QWORD *)this + 4) + a2) % *((_QWORD *)this + 2);
  if (v6 != a3)
    (*(void (**)(webrtc::AudioVector *, uint64_t, uint64_t))(*(_QWORD *)this + 72))(this, v8, v7);
  if (v8)
    JUMPOUT(0x20BD0ADD4);
}

_QWORD *webrtc::AudioVector::InsertAt(_QWORD *this, const __int16 *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a3)
  {
    v7 = this;
    v8 = (*(uint64_t (**)(_QWORD *))(*this + 144))(this);
    if (v8 < a4)
      a4 = v8;
    if (a4 <= (*(uint64_t (**)(_QWORD *))(*v7 + 144))(v7) - a4)
    {
      if (a4)
      {
        v12 = operator new[]();
        (*(void (**)(_QWORD *, unint64_t, _QWORD, uint64_t))(*v7 + 32))(v7, a4, 0, v12);
        (*(void (**)(_QWORD *, unint64_t))(*v7 + 80))(v7, a4);
      }
      else
      {
        v12 = 0;
      }
      v18 = a4 + a3 + (*(uint64_t (**)(_QWORD *))(*v7 + 144))(v7);
      if (v7[2] <= v18)
      {
        v19 = (*(uint64_t (**)(_QWORD *))(*v7 + 144))(v7);
        v20 = v18 + 1;
        v21 = operator new[]();
        (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v7 + 32))(v7, v19, 0, v21);
        v22 = v7[1];
        v7[3] = 0;
        v7[4] = v19;
        v7[1] = v21;
        v7[2] = v20;
        if (v22)
          MEMORY[0x20BD0ADD4](v22, 0x1000C80BDFB0063);
      }
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *, const __int16 *, uint64_t))(*v7 + 48))(v7, a2, a3);
      if (a4)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(*v7 + 48))(v7, v12, a4);
      if (v12)
LABEL_25:
        JUMPOUT(0x20BD0ADD4);
    }
    else
    {
      v9 = (*(uint64_t (**)(_QWORD *))(*v7 + 144))(v7);
      v10 = v9 - a4;
      if (v9 == a4)
      {
        v11 = 0;
      }
      else
      {
        v11 = operator new[]();
        (*(void (**)(_QWORD *, unint64_t, unint64_t, uint64_t))(*v7 + 32))(v7, v10, a4, v11);
        (*(void (**)(_QWORD *, unint64_t))(*v7 + 88))(v7, v10);
      }
      v13 = v10 + a3 + (*(uint64_t (**)(_QWORD *))(*v7 + 144))(v7);
      if (v7[2] <= v13)
      {
        v14 = (*(uint64_t (**)(_QWORD *))(*v7 + 144))(v7);
        v15 = v13 + 1;
        v16 = operator new[]();
        (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v7 + 32))(v7, v14, 0, v16);
        v17 = v7[1];
        v7[3] = 0;
        v7[4] = v14;
        v7[1] = v16;
        v7[2] = v15;
        if (v17)
          MEMORY[0x20BD0ADD4](v17, 0x1000C80BDFB0063);
      }
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *, const __int16 *, uint64_t))(*v7 + 72))(v7, a2, a3);
      if (v9 != a4)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, unint64_t))(*v7 + 72))(v7, v11, v10);
      if (v11)
        goto LABEL_25;
    }
  }
  return this;
}

void webrtc::AudioVector::InsertZerosAt(webrtc::AudioVector *this, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (a2)
  {
    v6 = (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this);
    if (v6 < a3)
      a3 = v6;
    if (a3 <= (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this) - a3)
    {
      if (a3)
      {
        v7 = operator new[]();
        (*(void (**)(webrtc::AudioVector *, unint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 32))(this, a3, 0, v7);
        (*(void (**)(webrtc::AudioVector *, unint64_t))(*(_QWORD *)this + 80))(this, a3);
      }
      else
      {
        v7 = 0;
      }
      v8 = a3 + a2 + (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this);
      if (*((_QWORD *)this + 2) <= v8)
      {
        v9 = (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this);
        v10 = v8 + 1;
        v11 = operator new[]();
        (*(void (**)(webrtc::AudioVector *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)this + 32))(this, v9, 0, v11);
        v12 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 3) = 0;
        *((_QWORD *)this + 4) = v9;
        *((_QWORD *)this + 1) = v11;
        *((_QWORD *)this + 2) = v10;
        if (v12)
          MEMORY[0x20BD0ADD4](v12, 0x1000C80BDFB0063);
      }
      v13 = *((_QWORD *)this + 3);
      if (v13 >= a2)
        v14 = a2;
      else
        v14 = *((_QWORD *)this + 3);
      bzero((void *)(*((_QWORD *)this + 1) + 2 * (v13 - v14)), 2 * v14);
      if (v13 < a2)
        bzero((void *)(*((_QWORD *)this + 1) + 2 * (*((_QWORD *)this + 2) - (a2 - v14))), 2 * (a2 - v14));
      *((_QWORD *)this + 3) = (*((_QWORD *)this + 3) - a2 + *((_QWORD *)this + 2)) % *((_QWORD *)this + 2);
      if (a3)
        (*(void (**)(webrtc::AudioVector *, uint64_t, unint64_t))(*(_QWORD *)this + 48))(this, v7, a3);
      if (v7)
        JUMPOUT(0x20BD0ADD4);
    }
    else
    {
      webrtc::AudioVector::InsertZerosByPushBack(this, a2, a3);
    }
  }
}

_QWORD *webrtc::AudioVector::OverwriteAt(_QWORD *this, const webrtc::AudioVector *a2, unint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (a3)
  {
    v7 = this;
    v8 = (*(uint64_t (**)(_QWORD *))(*this + 144))(this);
    if (v8 < a4)
      a4 = v8;
    v9 = (*(uint64_t (**)(_QWORD *))(*v7 + 144))(v7);
    if (v9 <= a4 + a3)
      v10 = a4 + a3;
    else
      v10 = v9;
    if (v7[2] <= v10)
    {
      v11 = (*(uint64_t (**)(_QWORD *))(*v7 + 144))(v7);
      v12 = v10 + 1;
      v13 = operator new[]();
      (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v7 + 32))(v7, v11, 0, v13);
      v14 = v7[1];
      v7[3] = 0;
      v7[4] = v11;
      v7[1] = v13;
      v7[2] = v12;
      if (v14)
        MEMORY[0x20BD0ADD4](v14, 0x1000C80BDFB0063);
    }
    v15 = *((_QWORD *)a2 + 3);
    v16 = *((_QWORD *)a2 + 2) - v15;
    if (v16 >= a3)
      v17 = a3;
    else
      v17 = *((_QWORD *)a2 + 2) - v15;
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, unint64_t, unint64_t))(*v7 + 128))(v7, *((_QWORD *)a2 + 1) + 2 * v15, v17, a4);
    if (v16 < a3)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, unint64_t, unint64_t))(*v7 + 128))(v7, *((_QWORD *)a2 + 1), a3 - v17, v17 + a4);
  }
  return this;
}

_QWORD *webrtc::AudioVector::OverwriteAt(_QWORD *this, const __int16 *a2, unint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  if (a3)
  {
    v7 = this;
    v8 = (*(uint64_t (**)(_QWORD *))(*this + 144))(this);
    if (v8 >= a4)
      v9 = a4;
    else
      v9 = v8;
    v10 = (*(uint64_t (**)(_QWORD *))(*v7 + 144))(v7);
    if (v10 <= v9 + a3)
      v11 = v9 + a3;
    else
      v11 = v10;
    v12 = v7[2];
    if (v12 <= v11)
    {
      v13 = (*(uint64_t (**)(_QWORD *))(*v7 + 144))(v7);
      v12 = v11 + 1;
      v14 = operator new[]();
      (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v7 + 32))(v7, v13, 0, v14);
      v15 = v7[1];
      v7[3] = 0;
      v7[4] = v13;
      v7[1] = v14;
      v7[2] = v11 + 1;
      if (v15)
      {
        MEMORY[0x20BD0ADD4](v15, 0x1000C80BDFB0063);
        v12 = v7[2];
      }
    }
    v16 = (v7[3] + v9) % v12;
    v17 = v12 - v16;
    if (v12 - v16 >= a3)
      v18 = a3;
    else
      v18 = v12 - v16;
    this = memcpy((void *)(v7[1] + 2 * v16), a2, 2 * v18);
    if (v17 < a3)
      this = memcpy((void *)v7[1], &a2[v18], 2 * (a3 - v18));
    v7[4] = (v7[3] + v11) % v7[2];
  }
  return this;
}

uint64_t webrtc::AudioVector::CrossFade(webrtc::AudioVector *this, const webrtc::AudioVector *a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t result;

  v6 = (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this);
  if (v6 < a3)
    a3 = v6;
  v7 = (*(uint64_t (**)(const webrtc::AudioVector *))(*(_QWORD *)a2 + 144))(a2);
  if (v7 < a3)
    a3 = v7;
  v8 = (*(uint64_t (**)(webrtc::AudioVector *))(*(_QWORD *)this + 144))(this);
  if (a3)
  {
    v9 = *((_QWORD *)this + 2);
    v10 = 0x4000 / ((int)a3 + 1);
    v11 = *((_QWORD *)this + 1);
    v13 = *((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 3);
    v14 = *((_QWORD *)a2 + 1);
    v15 = -(uint64_t)a3;
    v16 = v8 + *((_QWORD *)this + 3);
    v17 = 0x4000 - v10;
    v18 = v10;
    do
    {
      if (v12 >= v13)
        v19 = v13;
      else
        v19 = 0;
      *(_WORD *)(v11 + 2 * ((v16 + v15) % v9)) = (v18 * *(__int16 *)(v14 - 2 * v19 + 2 * v12++)
                                                              + v17 * *(__int16 *)(v11 + 2 * ((v16 + v15) % v9))
                                                              + 0x2000) >> 14;
      v18 += v10;
      v17 -= v10;
    }
    while (!__CFADD__(v15++, 1));
  }
  result = (*(uint64_t (**)(const webrtc::AudioVector *))(*(_QWORD *)a2 + 144))(a2);
  if (result != a3)
    return (*(uint64_t (**)(webrtc::AudioVector *, const webrtc::AudioVector *, unint64_t, unint64_t))(*(_QWORD *)this + 64))(this, a2, result - a3, a3);
  return result;
}

uint64_t webrtc::AudioVector::Size(webrtc::AudioVector *this)
{
  return (*((_QWORD *)this + 2) + *((_QWORD *)this + 4) - *((_QWORD *)this + 3)) % *((_QWORD *)this + 2);
}

BOOL webrtc::AudioVector::Empty(webrtc::AudioVector *this)
{
  return *((_QWORD *)this + 3) == *((_QWORD *)this + 4);
}

uint64_t WebRtcSpl_AutoCorrelation(int16x8_t *a1, unint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5)
{
  int v10;
  signed int v11;
  signed int v12;
  unsigned int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int32x4_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int32x4_t v31;
  int16x8_t *v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  const __int16 *v36;
  const __int16 *v37;
  const __int16 *i16;
  __int16 *v39;
  unint64_t v40;
  unint64_t v41;
  int32x4_t v42;
  int32x4_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int16x8_t *v47;
  int32x4_t v48;
  int32x4_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8x4_t v54;
  int16x8x4_t v55;
  int16x8x4_t v56;
  int16x8x4_t v57;

  v10 = WebRtcSpl_MaxAbsValueW16C(a1, a2);
  v11 = 32 - __clz(a2);
  v12 = __clz(v10 * v10) - 1;
  if (v12 <= v11)
    v13 = (unsigned __int16)v11 - v12;
  else
    v13 = 0;
  if (!v10)
    v13 = 0;
  result = a3 + 1;
  if (a3 != -1)
  {
    v15 = 0;
    v16 = 0;
    v17 = -4;
    v18 = 7;
    v19 = vnegq_s32(vdupq_n_s32(v13));
    v20 = a2;
    while (1)
    {
      if (a2 <= v18)
        v22 = v18;
      else
        v22 = a2;
      if (a2 <= v16 + 7)
        v23 = v16 + 7;
      else
        v23 = a2;
      v24 = v16 + 3;
      if (v16 + 3 >= a2)
      {
        v27 = 0;
        v26 = 0;
        goto LABEL_25;
      }
      v25 = v23 - v16 - 4;
      if (v25 < 0x3C)
        break;
      v29 = (((v22 + v17) >> 2) + 1) & 0x7FFFFFFFFFFFFFF0;
      v30 = (v25 >> 2) + 1;
      v26 = 4 * (v30 & 0x7FFFFFFFFFFFFFF0);
      v24 += v26;
      v28 = v16 + v26;
      v31 = 0uLL;
      v32 = a1;
      v33 = 0uLL;
      v34 = 0uLL;
      v35 = 0uLL;
      do
      {
        v36 = (const __int16 *)v32;
        v54 = vld4q_s16(v36);
        v37 = &v36[v15];
        i16 = v32[4].i16;
        v55 = vld4q_s16(i16);
        v56 = vld4q_s16(v37);
        v37 += 32;
        v57 = vld4q_s16(v37);
        v33 = vaddq_s32(vaddq_s32(vaddq_s32(vshlq_s32(vmull_high_s16(v56.val[0], v54.val[0]), v19), v33), vaddq_s32(vshlq_s32(vmull_high_s16(v56.val[1], v54.val[1]), v19), vshlq_s32(vmull_high_s16(v56.val[2], v54.val[2]), v19))), vshlq_s32(vmull_high_s16(v56.val[3], v54.val[3]), v19));
        v31 = vaddq_s32(vaddq_s32(vaddq_s32(vshlq_s32(vmull_s16(*(int16x4_t *)v56.val[0].i8, *(int16x4_t *)v54.val[0].i8), v19), v31), vaddq_s32(vshlq_s32(vmull_s16(*(int16x4_t *)v56.val[1].i8, *(int16x4_t *)v54.val[1].i8), v19), vshlq_s32(vmull_s16(*(int16x4_t *)v56.val[2].i8, *(int16x4_t *)v54.val[2].i8), v19))), vshlq_s32(vmull_s16(*(int16x4_t *)v56.val[3].i8, *(int16x4_t *)v54.val[3].i8), v19));
        v35 = vaddq_s32(vaddq_s32(vaddq_s32(vshlq_s32(vmull_high_s16(v57.val[0], v55.val[0]), v19), v35), vaddq_s32(vshlq_s32(vmull_high_s16(v57.val[1], v55.val[1]), v19), vshlq_s32(vmull_high_s16(v57.val[2], v55.val[2]), v19))), vshlq_s32(vmull_high_s16(v57.val[3], v55.val[3]), v19));
        v34 = vaddq_s32(vaddq_s32(vaddq_s32(vshlq_s32(vmull_s16(*(int16x4_t *)v57.val[0].i8, *(int16x4_t *)v55.val[0].i8), v19), v34), vaddq_s32(vshlq_s32(vmull_s16(*(int16x4_t *)v57.val[1].i8, *(int16x4_t *)v55.val[1].i8), v19), vshlq_s32(vmull_s16(*(int16x4_t *)v57.val[2].i8, *(int16x4_t *)v55.val[2].i8), v19))), vshlq_s32(vmull_s16(*(int16x4_t *)v57.val[3].i8, *(int16x4_t *)v55.val[3].i8), v19));
        v32 += 8;
        v29 -= 16;
      }
      while (v29);
      v27 = vaddvq_s32(vaddq_s32(vaddq_s32(v34, v31), vaddq_s32(v35, v33)));
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF0))
        goto LABEL_23;
LABEL_25:
      if (v26 < a2 - v16)
      {
        v40 = a2 - (v16 + v26);
        if (v40 >= 0x10)
        {
          v41 = v26 + (v40 & 0xFFFFFFFFFFFFFFF0);
          v42 = 0uLL;
          v43 = (int32x4_t)v27;
          v44 = (v20 - v26) & 0xFFFFFFFFFFFFFFF0;
          v45 = 2 * v26;
          v46 = v15 * 2 + v45;
          v47 = a1;
          v48 = 0uLL;
          v49 = 0uLL;
          do
          {
            v50 = *(int16x8_t *)((char *)v47 + v45);
            v51 = *(int16x8_t *)((char *)&v47[1] + v45);
            v52 = *(int16x8_t *)((char *)v47 + v46);
            v53 = *(int16x8_t *)((char *)&v47[1] + v46);
            v42 = vaddq_s32(vshlq_s32(vmull_high_s16(v52, v50), v19), v42);
            v43 = vaddq_s32(vshlq_s32(vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v50.i8), v19), v43);
            v49 = vaddq_s32(vshlq_s32(vmull_high_s16(v53, v51), v19), v49);
            v48 = vaddq_s32(vshlq_s32(vmull_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v51.i8), v19), v48);
            v47 += 2;
            v44 -= 16;
          }
          while (v44);
          v27 = vaddvq_s32(vaddq_s32(vaddq_s32(v48, v43), vaddq_s32(v49, v42)));
          if (v40 == (v40 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_9;
        }
        else
        {
          v41 = v26;
        }
        do
        {
          v27 += (a1->i16[v41 + v15] * a1->i16[v41]) >> v13;
          ++v41;
        }
        while (v41 < a2 - v16);
      }
LABEL_9:
      *a4++ = v27;
      ++v15;
      ++v18;
      --v17;
      --v20;
      if (v16++ == a3)
        goto LABEL_7;
    }
    v26 = 0;
    v27 = 0;
    v28 = v16;
LABEL_23:
    v39 = &a1->i16[v26 + 2];
    do
    {
      v27 += ((a1->i16[v28] * *(v39 - 2)) >> v13)
           + ((a1->i16[v28 + 1] * *(v39 - 1)) >> v13)
           + ((a1->i16[v28 + 2] * *v39) >> v13)
           + ((a1->i16[v24] * v39[1]) >> v13);
      v26 += 4;
      v28 = v26 + v16;
      v24 = v26 + v16 + 3;
      v39 += 4;
    }
    while (v24 < a2);
    goto LABEL_25;
  }
LABEL_7:
  *a5 = v13;
  return result;
}

webrtc::rnn_vad::AutoCorrelationCalculator *webrtc::rnn_vad::AutoCorrelationCalculator::AutoCorrelationCalculator(webrtc::rnn_vad::AutoCorrelationCalculator *this)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)this = 512;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = pffft_new_setup(512, 0);
  v2 = (unint64_t)malloc_type_malloc(4 * (*(_QWORD *)this << (*((_DWORD *)this + 2) != 0)) + 64, 0x9F4221E6uLL);
  if (v2)
  {
    v3 = (v2 & 0xFFFFFFFFFFFFFFC0) + 64;
    *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFC0) + 0x38) = v2;
  }
  else
  {
    v3 = 0;
  }
  *((_QWORD *)this + 3) = v3;
  v4 = (_QWORD *)operator new();
  v5 = *(_QWORD *)this << (*((_DWORD *)this + 2) != 0);
  *v4 = v5;
  v6 = (unint64_t)malloc_type_malloc(4 * v5 + 64, 0x9F4221E6uLL);
  if (v6)
  {
    v7 = (v6 & 0xFFFFFFFFFFFFFFC0) + 64;
    *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFC0) + 0x38) = v6;
  }
  else
  {
    v7 = 0;
  }
  v4[1] = v7;
  *((_QWORD *)this + 4) = v4;
  v8 = (_QWORD *)operator new();
  v9 = *(_QWORD *)this << (*((_DWORD *)this + 2) != 0);
  *v8 = v9;
  v10 = (unint64_t)malloc_type_malloc(4 * v9 + 64, 0x9F4221E6uLL);
  if (v10)
  {
    v11 = (v10 & 0xFFFFFFFFFFFFFFC0) + 64;
    *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFC0) + 0x38) = v10;
  }
  else
  {
    v11 = 0;
  }
  v8[1] = v11;
  *((_QWORD *)this + 5) = v8;
  v12 = (_QWORD *)operator new();
  v13 = *(_QWORD *)this << (*((_DWORD *)this + 2) != 0);
  *v12 = v13;
  v14 = (unint64_t)malloc_type_malloc(4 * v13 + 64, 0x9F4221E6uLL);
  if (v14)
  {
    *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFC0) + 0x38) = v14;
    v12[1] = (v14 & 0xFFFFFFFFFFFFFFC0) + 64;
  }
  else
  {
    v12[1] = 0;
  }
  *((_QWORD *)this + 6) = v12;
  return this;
}

void webrtc::rnn_vad::AutoCorrelationCalculator::~AutoCorrelationCalculator(webrtc::rnn_vad::AutoCorrelationCalculator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      free(*(void **)(v3 - 8));
    MEMORY[0x20BD0ADEC](v2, 0x10C0C4003E0BC0ALL);
  }
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      free(*(void **)(v5 - 8));
    MEMORY[0x20BD0ADEC](v4, 0x10C0C4003E0BC0ALL);
  }
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      free(*(void **)(v7 - 8));
    MEMORY[0x20BD0ADEC](v6, 0x10C0C4003E0BC0ALL);
  }
  v8 = (_QWORD *)*((_QWORD *)this + 2);
  v9 = v8[9];
  if (v9)
    free(*(void **)(v9 - 8));
  free(v8);
  v10 = *((_QWORD *)this + 3);
  if (v10)
    free(*(void **)(v10 - 8));
}

void *webrtc::rnn_vad::AutoCorrelationCalculator::ComputeOnPitchBuffer(uint64_t *a1, int32x4_t *a2, void *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  int32x4_t *v12;
  int8x16_t *v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  _DWORD *v17;

  v6 = (uint64_t *)a1[4];
  v8 = *v6;
  v7 = v6[1];
  if (*v6)
    v9 = v6[1];
  else
    v9 = 0;
  if ((unint64_t)&a2[108] <= v9 || (unint64_t)&a2[48] >= v9 + 960)
  {
    v11 = 0;
    v12 = a2 + 107;
    do
    {
      v13 = (int8x16_t *)(v9 + v11);
      v14 = (int8x16_t)vrev64q_s32(*v12);
      v15 = (int8x16_t)vrev64q_s32(v12[-1]);
      *v13 = vextq_s8(v14, v14, 8uLL);
      v13[1] = vextq_s8(v15, v15, 8uLL);
      v12 -= 2;
      v11 += 32;
    }
    while (v11 != 960);
  }
  else
  {
    v16 = 431;
    v17 = (_DWORD *)v9;
    do
      *v17++ = a2->i32[v16--];
    while (v16 != 191);
  }
  if (v8 >= 241)
    bzero((void *)(v9 + 960), 4 * (v8 + 0x3FFFFFFFFFFFFF10 - (((v8 + 0x3FFFFFFFFFFFFF10) & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  pffft_transform_internal(a1[2], v7, *(float32x4_t **)(a1[6] + 8), a1[3], 0, 0);
  memmove((void *)v9, a2, 0x60CuLL);
  if (v8 >= 388)
    bzero((void *)(v9 + 1548), 4 * (v8 + 0x3FFFFFFFFFFFFE7DLL - (((v8 + 0x3FFFFFFFFFFFFE7DLL) & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  pffft_transform_internal(a1[2], *(_QWORD *)(a1[4] + 8), *(float32x4_t **)(a1[5] + 8), a1[3], 0, 0);
  if (4 * v8 >= 1)
    bzero((void *)v9, 4 * (((unint64_t)(4 * v8) >> 2) - ((unint64_t)(4 * v8) > 3)) + 4);
  pffft_zconvolve_accumulate(a1[2], *(float **)(a1[5] + 8), *(float **)(a1[6] + 8), *(float **)(a1[4] + 8), 1.65436159e-24);
  pffft_transform_internal(a1[2], *(_QWORD *)(a1[4] + 8), *(float32x4_t **)(a1[4] + 8), a1[3], 1, 0);
  return memmove(a3, (const void *)(v9 + 956), 0x24CuLL);
}

uint64_t **webrtc::ParseSdpForAV1Profile(uint64_t **result)
{
  uint64_t **v2;
  uint64_t **v3;
  char v4;
  size_t v5;
  _QWORD *v6;
  size_t v7;
  size_t v9;
  int v10;
  size_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  char v15;
  void *__s1;
  size_t v17;
  char v18;

  v18 = 7;
  if (&__s1 <= (void **)"profile" && (char *)&__s1 + 7 > "profile")
    goto LABEL_44;
  strcpy((char *)&__s1, "profile");
  v2 = result + 1;
  result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)result, (const void **)&__s1, result[1], (uint64_t *)result + 1);
  if (v2 == result)
  {
    v4 = v18;
    goto LABEL_24;
  }
  v3 = result;
  v4 = v18;
  if (v18 < 0)
  {
    v5 = v17;
    if ((v17 & 0x8000000000000000) != 0)
      goto LABEL_44;
    result = (uint64_t **)__s1;
    if (v17)
    {
      if (!__s1)
        goto LABEL_44;
    }
  }
  else
  {
    v5 = v18;
    result = (uint64_t **)&__s1;
  }
  v6 = v3 + 4;
  if (*((char *)v3 + 55) < 0)
  {
    v7 = (size_t)v3[5];
    if ((v7 & 0x8000000000000000) != 0)
      goto LABEL_44;
    v6 = (_QWORD *)*v6;
    if (v7 && v6 == 0)
      goto LABEL_44;
  }
  else
  {
    v7 = *((unsigned __int8 *)v3 + 55);
  }
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(result, v6, v9);
  if (v10)
  {
    if ((v10 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (v5 < v7)
LABEL_24:
    v3 = v2;
LABEL_25:
  if (v4 < 0)
  {
    operator delete(__s1);
    if (v3 != v2)
      goto LABEL_27;
LABEL_30:
    v12 = 0;
    v13 = 0x100000000;
    return (uint64_t **)(v13 | v12);
  }
  if (v3 == v2)
    goto LABEL_30;
LABEL_27:
  result = v3 + 7;
  if ((*((char *)v3 + 79) & 0x80000000) == 0)
  {
    v11 = *((unsigned __int8 *)v3 + 79);
    goto LABEL_34;
  }
  v11 = (size_t)v3[8];
  if ((v11 & 0x8000000000000000) == 0)
  {
    result = (uint64_t **)*result;
    if (!v11 || result)
    {
LABEL_34:
      v14 = rtc::string_to_number_internal::ParseSigned((void **)result, v11, 10);
      v12 = 0;
      if (v15 && v14 >= (uint64_t)0xFFFFFFFF80000000)
      {
        v13 = 0;
        if (v14 <= 0x7FFFFFFF)
        {
          v12 = v14;
          if (v14 >= 3)
            v12 = 0;
          v13 = (unint64_t)(v14 < 3) << 32;
        }
      }
      else
      {
        v13 = 0;
      }
      return (uint64_t **)(v13 | v12);
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t webrtc::SetAv1SvcConfig(webrtc *this, webrtc::VideoCodec *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  signed int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  signed int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  float v61;
  char v62;
  char *v63;
  int *v64;
  uint64_t v65;
  int v66;
  int v67;
  int *v68;
  double v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v82;
  int v83;
  char *v84;
  __int128 v85;
  int v86;
  char __s[8];
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v9 = *((unsigned __int16 *)this + 186);
  if (v9 <= 0xFF)
  {
    v11 = (int)a2;
    v84 = __s;
    strcpy(__s, "L");
    v85 = xmmword_208F05490;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v84, "%d", a3);
    v12 = v85;
    v13 = *((_QWORD *)&v85 + 1) + 1;
    memcpy(&v84[*((_QWORD *)&v85 + 1)], "T", v85 != *((_QWORD *)&v85 + 1) + 1);
    v14 = *((_QWORD *)&v85 + 1);
    if (v12 != v13)
      v14 = *((_QWORD *)&v85 + 1) + 1;
    *((_QWORD *)&v85 + 1) = v14;
    v84[v14] = 0;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v84, "%d", v11);
    if (a3 >= 2)
    {
      if ((_QWORD)v85 + ~*((_QWORD *)&v85 + 1) >= 4uLL)
        v15 = 4;
      else
        v15 = v85 + ~*((_QWORD *)&v85 + 1);
      memcpy(&v84[*((_QWORD *)&v85 + 1)], "_KEY", v15);
      *((_QWORD *)&v85 + 1) += v15;
      v84[*((_QWORD *)&v85 + 1)] = 0;
    }
    v16 = strlen(__s);
    v17 = 0;
    {
      v17 += 48;
      if (v17 == 1632)
        goto LABEL_16;
    }
  }
  if (v9 >= 0x22u)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/svc/scalability_mode_util.cc", 309, "index < kNumScalabilityModes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, v9);
LABEL_16:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/av1_svc_config.cc");
    LOBYTE(v9) = 0;
  }
  v26 = *((unsigned __int16 *)this + 2);
  v27 = *((unsigned __int16 *)this + 3);
  if (v26 >= v27)
    v28 = 240.0;
  else
    v28 = 135.0;
  if (v26 >= v27)
    v29 = 135.0;
  else
    v29 = 240.0;
  v30 = log2f((float)v26 / v28);
  if (v30 <= 0.0)
    v31 = 1.0;
  else
    v31 = v30 + 1.0;
  v32 = vcvtms_s32_f32(v31);
  v39 = log2f((float)v27 / v29);
  if (v39 <= 0.0)
    v40 = 1.0;
  else
    v40 = v39 + 1.0;
  v41 = vcvtms_s32_f32(v40);
  if (v41 >= v32)
    v42 = v32;
  else
    v42 = v41;
  v43 = webrtc::LimitNumSpatialLayers(v9, v42, v33, v34, v35, v36, v37, v38);
  if (v9 != v43)
  {
    v44 = v43;
    v45 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
    if ((v45 & 1) == 0)
    {
      if (v9 >= 0x22u
        || (v53 = v9,
            v54 = *(_QWORD *)((char *)&unk_208F054B0 + v53 * 8),
            v84 = off_24C0AF130[v53],
            *(_QWORD *)&v85 = v54,
            v44 >= 0x22))
      {
        rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v45);
      }
      v55 = (char)v44;
      v56 = *(_QWORD *)((char *)&unk_208F054B0 + v55 * 8);
      *(_QWORD *)__s = off_24C0AF130[v55];
      v88 = v56;
      rtc::webrtc_logging_impl::Log("\r\t\v\t\v", v46, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/av1_svc_config.cc");
    }
    LOBYTE(v9) = v44;
  }
  if (v9 >= 0x22u)
  {
    *(_QWORD *)__s = 0;
  }
  else
  {
    (*((void (**)(char *__return_ptr))*(&off_24C0AF020 + (char)v9) + 1))(__s);
    v57 = *(_QWORD *)__s;
    if (*(_QWORD *)__s)
    {
      *((_WORD *)this + 186) = v9 | 0x100;
      (*(void (**)(char **__return_ptr))(*(_QWORD *)v57 + 16))(&v84);
      v58 = v84;
      if ((int)v84 < 1)
      {
        if (v25 != 1)
          goto LABEL_60;
      }
      else
      {
        v59 = *((unsigned __int16 *)this + 2);
        v60 = *((unsigned __int16 *)this + 3);
        v61 = (float)*((unsigned int *)this + 5);
        v62 = BYTE4(v84);
        v63 = (char *)this + 144;
        v64 = &v86;
        v65 = v84;
        do
        {
          v66 = *(v64 - 4);
          v67 = *v64++;
          *(_DWORD *)v63 = v66 * v59 / v67;
          *((_DWORD *)v63 + 1) = v66 * v60 / v67;
          *((float *)v63 + 2) = v61;
          v63[12] = v62;
          v63[32] = 1;
          v63 += 36;
          --v65;
        }
        while (v65);
        if (v25 != 1)
        {
          v68 = (int *)((char *)this + 168);
          do
          {
            v69 = (double)(*(v68 - 5) * *(v68 - 6));
            v70 = (int)((sqrt(v69) * 480.0 + -95000.0) / 1000.0);
            if (v70 <= 20)
              v70 = 20;
            *v68 = v70;
            v71 = (int)(v69 * 1.6 / 1000.0) + 50;
            *(v68 - 2) = v71;
            *(v68 - 1) = (v70 + v71) >> 1;
            v68 += 9;
            --v58;
          }
          while (v58);
LABEL_60:
          v79 = 1;
          v80 = *(_QWORD *)__s;
          *(_QWORD *)__s = 0;
          if (!v80)
            return v79;
          goto LABEL_56;
        }
      }
      v83 = *((_DWORD *)this + 3);
      v82 = *((_DWORD *)this + 4);
      *((_DWORD *)this + 42) = v82;
      *((_DWORD *)this + 40) = v83;
      *((_DWORD *)this + 41) = (v83 + v82) >> 1;
      goto LABEL_60;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
  {
    v79 = 0;
    v80 = *(_QWORD *)__s;
    *(_QWORD *)__s = 0;
    if (!v80)
      return v79;
    goto LABEL_56;
  }
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v72, v73, v74, v75, v76, v77, v78, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/codecs/av1/av1_svc_config.cc");
  v79 = 0;
  v80 = *(_QWORD *)__s;
  *(_QWORD *)__s = 0;
  if (v80)
LABEL_56:
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  return v79;
}

void webrtc::BackgroundNoise::~BackgroundNoise(webrtc::BackgroundNoise *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C0AF250;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8021716A34);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24C0AF250;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8021716A34);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::BackgroundNoise::Update(webrtc::BackgroundNoise *this, const webrtc::AudioMultiVector *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  __int16 v11;
  __int16 v12;
  int v13;
  int v14;
  __int16 v16;
  int v18;
  int v19;
  unsigned int v20;
  char v21;
  __int32 v22;
  uint64_t v23;
  int *v24;
  __int32 v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int32x4_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __int128 v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  int *v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  char v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  __int128 v127;
  __int16 v128;
  __int16 v129[8];
  __int16 v130;
  __int16 v131;
  __int16 v132;
  __int16 v133;
  __int16 v134;
  __int16 v135;
  __int16 v136;
  __int16 v137;
  __int16 v138;
  __int16 v139;
  __int16 v140;
  __int16 v141;
  __int16 v142;
  __int16 v143;
  __int16 v144;
  __int16 v145;
  __int16 v146;
  __int16 v147;
  __int16 v148;
  __int16 v149;
  __int16 v150;
  __int16 v151;
  __int16 v152;
  __int16 v153;
  __int16 v154;
  __int16 v155;
  __int16 v156;
  __int16 v157;
  __int16 v158;
  __int16 v159;
  __int16 v160;
  __int16 v161;
  __int16 v162;
  __int16 v163;
  __int16 v164;
  __int16 v165;
  __int16 v166;
  __int16 v167;
  __int16 v168;
  __int16 v169;
  __int16 v170;
  __int16 v171;
  __int16 v172;
  __int16 v173;
  __int16 v174;
  __int16 v175;
  __int16 v176;
  __int16 v177;
  __int16 v178;
  __int16 v179;
  __int16 v180;
  __int16 v181;
  __int16 v182;
  __int16 v183;
  __int16 v184;
  __int16 v185;
  __int16 v186;
  __int16 v187;
  __int16 v188;
  __int16 v189;
  __int16 v190;
  __int16 v191;
  __int16 v192;
  __int16 v193;
  uint32x4_t v194[2];
  uint64_t v195;

  v195 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 1))
  {
    v4 = 0;
    v93 = 0;
    while (1)
    {
      v5 = *((_QWORD *)this + 2);
      bzero(&v94, 0x210uLL);
      v6 = *((_QWORD *)a2 + 1);
      if (v4 >= (*((_QWORD *)a2 + 2) - v6) >> 3)
        __break(1u);
      v7 = *(_QWORD *)(v6 + 8 * v4);
      v8 = (*(uint64_t (**)(const webrtc::AudioMultiVector *))(*(_QWORD *)a2 + 120))(a2);
      (*(void (**)(uint64_t, uint64_t, uint64_t, int16x8_t *))(*(_QWORD *)v7 + 32))(v7, 256, v8 - 256, &v95);
      v9 = vminq_s16(v125, vminq_s16(v123, vminq_s16(v121, vminq_s16(v119, vminq_s16(v117, vminq_s16(v115, vminq_s16(v113, vminq_s16(v111, vminq_s16(v109, vminq_s16(v107,
                               vminq_s16(v105, vminq_s16(v103, vminq_s16(v101, vminq_s16(v99, vminq_s16(v97, v95)))))))))))))));
      v10 = vmaxq_s16(v125, vmaxq_s16(v123, vmaxq_s16(v121, vmaxq_s16(v119, vmaxq_s16(v117, vmaxq_s16(v115, vmaxq_s16(v113, vmaxq_s16(v111, vmaxq_s16(v109, vmaxq_s16(v107,
                                vmaxq_s16(v105, vmaxq_s16(v103, vmaxq_s16(v101, vmaxq_s16(v99, vmaxq_s16(v97, v95)))))))))))))));
      v11 = vminvq_s16(vminq_s16(v9, vminq_s16(v126, vminq_s16(v124, vminq_s16(v122, vminq_s16(v120, vminq_s16(v118, vminq_s16(v116, vminq_s16(v114, vminq_s16(v112, vminq_s16(
                                  v110,
                                  vminq_s16(v108, vminq_s16(v106, vminq_s16(v104, vminq_s16(v102, vminq_s16(v100, vminq_s16(v98, v96)))))))))))))))));
      v12 = vmaxvq_s16(vmaxq_s16(v10, vmaxq_s16(v126, vmaxq_s16(v124, vmaxq_s16(v122, vmaxq_s16(v120, vmaxq_s16(v118, vmaxq_s16(v116, vmaxq_s16(v114, vmaxq_s16(v112, vmaxq_s16(
                                  v110,
                                  vmaxq_s16(v108, vmaxq_s16(v106, vmaxq_s16(v104, vmaxq_s16(v102, vmaxq_s16(v100, vmaxq_s16(v98, v96)))))))))))))))));
      v13 = vmaxvq_s16(vmaxq_s16(vmaxq_s16(v124, vmaxq_s16(v122, vmaxq_s16(v120, vmaxq_s16(v118, vmaxq_s16(v116, vmaxq_s16(v114, vmaxq_s16(v112, vmaxq_s16(v110, vmaxq_s16(v108,
                                  vmaxq_s16(v106, vmaxq_s16(v104, vmaxq_s16(v102, vmaxq_s16(v100, vmaxq_s16(v98, vmaxq_s16(v96, v94))))))))))))))), v10));
      v14 = vminvq_s16(vminq_s16(vminq_s16(v124, vminq_s16(v122, vminq_s16(v120, vminq_s16(v118, vminq_s16(v116, vminq_s16(v114, vminq_s16(v112, vminq_s16(v110, vminq_s16(v108,
                                  vminq_s16(v106, vminq_s16(v104, vminq_s16(v102, vminq_s16(v100, vminq_s16(v98, vminq_s16(v96, v94))))))))))))))), v9));
      if (v126.i16[0] < v14)
        v14 = v126.i16[0];
      if (v126.i16[0] > v13)
        v13 = v126.i16[0];
      if (v126.i16[1] < v14)
        v14 = v126.i16[1];
      if (v126.i16[1] > v13)
        v13 = v126.i16[1];
      if (v126.i16[2] < v14)
        v14 = v126.i16[2];
      if (v126.i16[2] > v13)
        v13 = v126.i16[2];
      if (v126.i16[3] < v14)
        v14 = v126.i16[3];
      if (v126.i16[3] > v13)
        v13 = v126.i16[3];
      if (v126.i16[4] < v14)
        v14 = v126.i16[4];
      if (v126.i16[4] > v13)
        v13 = v126.i16[4];
      if (v126.i16[5] < v14)
        v14 = v126.i16[5];
      if (v126.i16[5] > v13)
        v13 = v126.i16[5];
      if (v126.i16[6] < v14)
        v14 = v126.i16[6];
      if (v126.i16[6] > v13)
        v13 = v126.i16[6];
      if (v126.i16[7] < v14)
        v14 = v126.i16[7];
      if (v126.i16[7] > v13)
        v13 = v126.i16[7];
      if (v11 < -v12 || v11 == v12)
        v16 = v11;
      else
        v16 = v12;
      if (v14 < -v13 || v14 == v13)
        v18 = v14;
      else
        v18 = v13;
      v19 = v18 * v16;
      if (v19 < 0)
        v19 = -v19;
      v20 = 32 - __clz(v19 >> 23);
      if (v19 >= 0x800000)
        v21 = v20;
      else
        v21 = 0;
      WebRtcSpl_CrossCorrelationC(v194[0].i32, (uint64_t)&v95, (uint64_t)&v95, 0x100uLL, 9, v21, -1);
      v22 = v194[0].i32[0] >> (8 - v21);
      v23 = v5 + 56 * v4;
      v25 = *(_DWORD *)(v23 + 8);
      v24 = (int *)(v23 + 8);
      if (v22 >= v25)
      {
        v84 = *((_QWORD *)this + 2) + 56 * v4;
        v86 = *(_DWORD *)(v84 + 8);
        v87 = *(_DWORD *)(v84 + 12);
        v85 = (int *)(v84 + 8);
        v88 = v87 + ((229 * v87) >> 16) + 229 * v86 + 58624 * BYTE1(v86);
        v89 = v86 + 229 * (v86 >> 16) + (v88 >> 16);
        *v85 = v89;
        v85[1] = (unsigned __int16)v88;
        v90 = *(v85 - 1) - (*(v85 - 1) >> 10);
        if (v90 <= v22)
          v90 = v22;
        *(v85 - 1) = v90;
        v91 = (v90 + 0x80000) >> 20;
        if (v91 > v89)
          *v85 = v91;
      }
      else
      {
        if (v194[0].i32[0] < 1)
          return v93 & 1;
        v26 = v22 <= 1 ? 1 : v22;
        *v24 = v26;
        *(_DWORD *)(v5 + 56 * v4 + 12) = 0;
        if (WebRtcSpl_LevinsonDurbin(v194, &v127, v129, 8uLL) != 1)
          return v93 & 1;
        v27 = 0;
        v28 = v128;
        v29 = SHIWORD(v127);
        v30 = SWORD6(v127);
        v31 = SWORD5(v127);
        v32 = SWORD4(v127);
        v33 = SWORD3(v127);
        v34 = SWORD2(v127);
        v35 = SWORD1(v127);
        v36 = (__int16)v127;
        v37.i64[0] = 0xF8000000F8000000;
        v37.i64[1] = 0xF8000000F8000000;
        do
        {
          v38 = vdupq_n_s16(v36);
          v39 = *(int16x8_t *)((char *)&v118 + v27 + 14);
          v40 = vdupq_n_s16(v35);
          v41 = vmull_high_s16(v40, v39);
          v42 = vmull_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v39.i8);
          v44 = *(int16x8_t *)((char *)&v118 + v27);
          v43 = *(int16x8_t *)((char *)&v119 + v27);
          v45 = vmlal_s16(v42, *(int16x4_t *)v38.i8, *(int16x4_t *)v43.i8);
          v46 = vmlal_high_s16(v41, v38, v43);
          v47 = *(int16x8_t *)((char *)&v118 + v27 + 12);
          v48 = vdupq_n_s16(v34);
          v49 = vmlal_high_s16(v46, v48, v47);
          v50 = vmlal_s16(v45, *(int16x4_t *)v48.i8, *(int16x4_t *)v47.i8);
          v51 = *(int16x8_t *)((char *)&v118 + v27 + 10);
          v52 = vdupq_n_s16(v33);
          v53 = vmlal_s16(v50, *(int16x4_t *)v52.i8, *(int16x4_t *)v51.i8);
          v54 = vmlal_high_s16(v49, v52, v51);
          v55 = *(int16x8_t *)((char *)&v118 + v27 + 8);
          v56 = vdupq_n_s16(v32);
          v57 = vmlal_high_s16(v54, v56, v55);
          v58 = vmlal_s16(v53, *(int16x4_t *)v56.i8, *(int16x4_t *)v55.i8);
          v59 = *(int16x8_t *)((char *)&v118 + v27 + 6);
          v60 = vdupq_n_s16(v31);
          v61 = vmlal_s16(v58, *(int16x4_t *)v60.i8, *(int16x4_t *)v59.i8);
          v62 = vmlal_high_s16(v57, v60, v59);
          v63 = vdupq_n_s16(v30);
          v64 = vmlal_high_s16(v62, v63, *(int16x8_t *)((char *)&v118 + v27 + 4));
          v65 = vmlal_s16(v61, *(int16x4_t *)v63.i8, *(int16x4_t *)((char *)&v118.i64[v27 / 8] + 4));
          v66 = vdupq_n_s16(v29);
          v67 = vdupq_n_s16(v28);
          v68 = vmaxq_s32(vmlal_s16(vmlal_s16(v65, *(int16x4_t *)v66.i8, *(int16x4_t *)&v118.i16[v27 / 2 + 1]), *(int16x4_t *)v67.i8, *(int16x4_t *)v44.i8), v37);
          v69 = vmaxq_s32(vmlal_high_s16(vmlal_high_s16(v64, v66, *(int16x8_t *)((char *)&v118 + v27 + 2)), v67, v44), v37);
          v70 = vdupq_n_s32(0x7FFF7FFu);
          *(int16x8_t *)((char *)&v130 + v27) = vrshrn_high_n_s32(vrshrn_n_s32(vminq_s32(v68, v70), 0xCuLL), vminq_s32(v69, v70), 0xCuLL);
          v27 += 16;
        }
        while (v27 != 128);
        v71 = (v131 * v131 + v130 * v130)
            + (v132 * v132)
            + (unint64_t)(v133 * v133)
            + (v134 * v134)
            + (v135 * v135)
            + (v136 * v136)
            + (v137 * v137)
            + (unint64_t)(v138 * v138)
            + (v139 * v139)
            + (v140 * v140)
            + (v141 * v141)
            + (v142 * v142)
            + (v143 * v143)
            + (unint64_t)(v144 * v144)
            + (v145 * v145)
            + (v146 * v146)
            + (v147 * v147)
            + (v148 * v148)
            + (v149 * v149);
        v72 = v71
            + (v150 * v150)
            + (unint64_t)(v151 * v151)
            + (v152 * v152)
            + (v153 * v153)
            + (v154 * v154)
            + (v155 * v155)
            + (v156 * v156)
            + (v157 * v157)
            + (v158 * v158)
            + (unint64_t)(v159 * v159)
            + (v160 * v160)
            + (v161 * v161)
            + (v162 * v162)
            + (v163 * v163)
            + (v164 * v164)
            + (v165 * v165)
            + (v166 * v166);
        v73 = v72
            + (v167 * v167)
            + (unint64_t)(v168 * v168)
            + (v169 * v169)
            + (v170 * v170)
            + (v171 * v171)
            + (v172 * v172)
            + (v173 * v173)
            + (v174 * v174)
            + (v175 * v175)
            + (v176 * v176)
            + (v177 * v177)
            + (unint64_t)(v178 * v178)
            + (v179 * v179)
            + (v180 * v180)
            + (v181 * v181)
            + (v182 * v182)
            + (v183 * v183)
            + (v184 * v184)
            + (v185 * v185)
            + (v186 * v186)
            + (v187 * v187);
        v74 = v73
            + (v188 * v188)
            + (unint64_t)(v189 * v189)
            + (v190 * v190)
            + (v191 * v191)
            + (v192 * v192)
            + (v193 * v193);
        if (v74 >= 0x7FFFFFFF)
          v74 = 0x7FFFFFFFLL;
        if (v22 >= 1 && 5 * v74 >= 16 * (unint64_t)v22)
        {
          v75 = *((_QWORD *)this + 2) + 56 * v4;
          v76 = v127;
          *(_WORD *)(v75 + 48) = v128;
          *(_OWORD *)(v75 + 32) = v76;
          *(int16x8_t *)(v75 + 16) = v126;
          *(_DWORD *)v75 = v22;
          *(_DWORD *)(v75 + 8) = v22;
          *(_DWORD *)(v75 + 12) = 0;
          v77 = __clz(v74) - 1;
          if (!(_DWORD)v74)
            v77 = 0;
          v78 = v77 - 1;
          v79 = v77 - 2;
          if ((v78 & 1) != 0)
            v80 = v79;
          else
            v80 = v78;
          v81 = (_DWORD)v74 << v80;
          v82 = v74 >> -(char)v80;
          if (v80 >= 0)
            v83 = v81;
          else
            v83 = v82;
          *(_WORD *)(v75 + 52) = WebRtcSpl_SqrtFloor(v83);
          *(_WORD *)(v75 + 54) = ((v80 + 6) >> 1) + 13;
          v93 = 1;
          *((_BYTE *)this + 24) = 1;
        }
      }
      if (++v4 >= *((_QWORD *)this + 1))
        return v93 & 1;
    }
  }
  v93 = 0;
  return v93 & 1;
}

void webrtc::BackgroundNoise::GenerateBackgroundNoise(uint64_t a1, int16x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  int32x4_t v14;
  int16x4_t *v15;
  int16x8_t *v16;
  int16x8_t v17;
  int32x4_t v18;
  unint64_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  unint64_t v24;
  uint64_t v25;
  _WORD *v26;
  int16x4_t *v27;
  int v28;
  __int16 *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int16 *v39;
  __int16 *v40;
  unint64_t v41;
  unint64_t v42;
  __int16 *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  signed int v49;
  unint64_t v51;
  int16x4_t *v52;
  int16x8_t v53;
  unint64_t v54;
  int16x8_t v55;
  unint64_t v56;
  __int16 *v57;
  _WORD v58[8];
  _BYTE v59[1492];

  *(_QWORD *)&v59[1484] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 24))
  {
    bzero((void *)(a8 + 16), 2 * a7);
    return;
  }
  v8 = 56 * a4;
  *(_OWORD *)a8 = *(_OWORD *)(*(_QWORD *)(a1 + 16) + 56 * a4 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned __int16 *)(v9 + 56 * a4 + 54);
  if ((__int16)v10 <= 1)
    v11 = 0;
  else
    v11 = 1 << (v10 - 1);
  if (a7)
  {
    v12 = *(__int16 *)(v9 + 56 * a4 + 52);
    if (a7 >= 0x10)
    {
      v13 = a7 & 0xFFFFFFFFFFFFFFF0;
      v14 = vdupq_n_s32(v11);
      v15 = a2 + 2;
      v16 = (int16x8_t *)v59;
      v17 = vdupq_n_s16(v12);
      v18 = vnegq_s32(vdupq_n_s32(v10));
      v19 = a7 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v20 = *(int16x8_t *)v15[-2].i8;
        v21 = vmlal_s16(v14, *(int16x4_t *)v17.i8, *(int16x4_t *)v20.i8);
        v22 = vmlal_high_s16(v14, v17, v20);
        v23 = vuzp1q_s16((int16x8_t)vshlq_s32(vmlal_s16(v14, *(int16x4_t *)v17.i8, *v15), v18), (int16x8_t)vshlq_s32(vmlal_high_s16(v14, v17, *(int16x8_t *)v15->i8), v18));
        v16[-1] = vuzp1q_s16((int16x8_t)vshlq_s32(v21, v18), (int16x8_t)vshlq_s32(v22, v18));
        *v16 = v23;
        v15 += 4;
        v16 += 2;
        v19 -= 16;
      }
      while (v19);
      if (v13 == a7)
      {
LABEL_14:
        v29 = (__int16 *)(v9 + 56 * a4);
        v30 = v29[16];
        v31 = v29[24];
        v32 = v29[23];
        v33 = v29[22];
        v34 = v29[21];
        v35 = v29[20];
        v36 = v29[19];
        v37 = v29[18];
        v38 = v29[17];
        v39 = (__int16 *)(a8 + 8);
        v40 = v58;
        LOWORD(v41) = *(_WORD *)(a8 + 14);
        v42 = a7;
        v43 = (__int16 *)(a8 + 8);
        do
        {
          v44 = v43[1];
          ++v43;
          v45 = *(v39 - 4) * (uint64_t)v31
              + *(v39 - 3) * (uint64_t)v32
              + *(v39 - 2) * (uint64_t)v33
              + *(v39 - 1) * (uint64_t)v34
              + *v39 * (uint64_t)v35
              + v44 * (uint64_t)v36
              + v39[2] * (uint64_t)v37
              + (__int16)v41 * (uint64_t)v38;
          v46 = *v40++;
          v47 = v46 * (uint64_t)v30 - v45;
          if (v47 <= -134217728)
            v47 = -134217728;
          if (v47 >= 134215679)
            v47 = 134215679;
          v41 = (unint64_t)(v47 + 2048) >> 12;
          v39[4] = v41;
          v39 = v43;
          --v42;
        }
        while (v42);
        v9 = *(_QWORD *)(a1 + 16);
        goto LABEL_21;
      }
    }
    else
    {
      v13 = 0;
    }
    v24 = a7 - v13;
    v25 = 2 * v13;
    v26 = &v58[v13];
    v27 = (int16x4_t *)((char *)a2 + v25);
    do
    {
      v28 = v27->i16[0];
      v27 = (int16x4_t *)((char *)v27 + 2);
      *v26++ = (int)(v28 * v12 + v11) >> v10;
      --v24;
    }
    while (v24);
    goto LABEL_14;
  }
LABEL_21:
  *(_OWORD *)(v9 + v8 + 16) = *(_OWORD *)(a8 + 2 * a7);
  v48 = *(_QWORD *)(a1 + 16);
  v49 = *(__int16 *)(v48 + v8 + 50);
  if (v49 >= 0x4000 || a7 == 0)
    goto LABEL_33;
  if (a7 >= 0x10)
  {
    v51 = a7 & 0xFFFFFFFFFFFFFFF0;
    v52 = (int16x4_t *)(a8 + 32);
    v53 = vdupq_n_s16(v49);
    v54 = a7 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v55 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v53.i8, *v52), 0xEuLL), vmull_high_s16(v53, *(int16x8_t *)v52->i8), 0xEuLL);
      *(int16x8_t *)v52[-2].i8 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v53.i8, v52[-2]), 0xEuLL), vmull_high_s16(v53, *(int16x8_t *)v52[-2].i8), 0xEuLL);
      *(int16x8_t *)v52->i8 = v55;
      v52 += 4;
      v54 -= 16;
    }
    while (v54);
    if (v51 == a7)
      goto LABEL_32;
  }
  else
  {
    v51 = 0;
  }
  v56 = a7 - v51;
  v57 = (__int16 *)(a8 + 2 * v51 + 16);
  do
  {
    *v57 = (*v57 * v49 + 0x2000) >> 14;
    ++v57;
    --v56;
  }
  while (v56);
LABEL_32:
  v48 = *(_QWORD *)(a1 + 16);
LABEL_33:
  *(_WORD *)(v48 + 56 * a4 + 50) = v49;
}

void absl::variant_internal::ThrowBadVariantAccess(absl::variant_internal *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  absl::raw_log_internal::RawLog(3, (uint64_t)"bad_variant_access.cc", 44, "Bad variant access", a5, a6, a7, a8, vars0);
  __break(1u);
}

void webrtc::BalancedConstraint::IsAdaptationUpAllowed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  webrtc::BalancedConstraint *v11;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40)) == 3)
  {
    if ((*(_QWORD *)(a2 + 4) & 0xFF00000000) == 0)
    {
      std::__throw_bad_optional_access[abi:sn180100]();
      webrtc::BalancedConstraint::~BalancedConstraint(v11);
      return;
    }
    if ((*(_QWORD *)(a2 + 24) & 0xFF00000000) != 0)
      v8 = *(_QWORD *)(a2 + 24);
    else
      v8 = *(_QWORD *)(a2 + 4);
    v9 = *(_DWORD *)(a2 + 16);
    if (*(_BYTE *)(a1 + 12))
    {
      if (!webrtc::BalancedDegradationSettings::CanAdaptUp(a1 + 16, v9, v8, *(_DWORD *)(a1 + 8)))
        return;
    }
    else if (!webrtc::BalancedDegradationSettings::CanAdaptUp(a1 + 16, v9, v8, 0))
    {
      return;
    }
    if (*(_BYTE *)(a3 + 8) && (!*(_BYTE *)(a4 + 8) || *(_QWORD *)a4 > *(_QWORD *)a3))
    {
      v10 = *(_DWORD *)(a2 + 16);
      if (*(_BYTE *)(a1 + 12))
        webrtc::BalancedDegradationSettings::CanAdaptUpResolution(a1 + 16, v10, v8, *(_DWORD *)(a1 + 8));
      else
        webrtc::BalancedDegradationSettings::CanAdaptUpResolution(a1 + 16, v10, v8, 0);
    }
  }
}

void webrtc::BalancedConstraint::~BalancedConstraint(webrtc::BalancedConstraint *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0AF270;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0AF270;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::BalancedConstraint::Name(char *a1@<X8>)
{
  a1[23] = 18;
  if (a1 <= "BalancedConstraint" && a1 + 18 > "BalancedConstraint")
    __break(1u);
  else
    strcpy(a1, "BalancedConstraint");
}

void **webrtc::BalancedDegradationSettings::BalancedDegradationSettings(void **a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  const void *v37;
  int64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  unint64_t v54;
  int *v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  _OWORD *v70;
  char *v71;
  void *v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (***v79)();
  void *__p;
  uint64_t v81;
  uint64_t v82;
  void **p_p;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (**v110)();
  void *v111;
  void *v112;
  uint64_t (***v113)();
  void *v114;
  char v115;
  _QWORD *v116;
  _QWORD *v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;

  v121 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = (char *)operator new();
  __p = &off_24C0AF2D0;
  LOBYTE(v81) = 0;
  p_p = &__p;
  v5 = (uint64_t)&unk_24C0AF318;
  *(_QWORD *)v4 = &unk_24C0AF318;
  *((_QWORD *)v4 + 1) = off_24C0B4170;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 2) = 0;
  v4[63] = 6;
  if (v4 + 40 <= "pixels" && v4 + 46 > "pixels")
    goto LABEL_129;
  strcpy(v4 + 40, "pixels");
  *((_WORD *)v4 + 32) = 0;
  v4[66] = 0;
  *((_QWORD *)v4 + 1) = &unk_24C0AF348;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = 0;
  *((_QWORD *)v4 + 9) = 0;
  *((_QWORD *)v4 + 12) = &off_24C0AF2D0;
  *((_QWORD *)v4 + 15) = v4 + 96;
  v4[104] = 0;
  __p = v4;
  v6 = operator new();
  v110 = &off_24C0AF380;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v6 = &unk_24C0AF318;
  *(_QWORD *)(v6 + 8) = off_24C0B4170;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 63) = 3;
  *(_QWORD *)(v6 + 16) = 0;
  if (v6 + 40 <= (unint64_t)"fps" && v6 + 43 > (unint64_t)"fps")
    goto LABEL_129;
  *(_BYTE *)(v6 + 42) = 115;
  *(_WORD *)(v6 + 40) = 28774;
  *(_BYTE *)(v6 + 43) = 0;
  *(_WORD *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 66) = 0;
  *(_QWORD *)(v6 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 96) = &off_24C0AF380;
  *(_QWORD *)(v6 + 120) = v6 + 96;
  *(_BYTE *)(v6 + 104) = 0;
  v81 = v6;
  v7 = operator new();
  v110 = &off_24C0AF3C8;
  LOBYTE(v111) = 0;
  v113 = &v110;
  v5 = (uint64_t)&unk_24C0AF318;
  *(_QWORD *)v7 = &unk_24C0AF318;
  *(_QWORD *)(v7 + 8) = off_24C0B4170;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_BYTE *)(v7 + 63) = 4;
  *(_QWORD *)(v7 + 16) = 0;
  if (v7 + 40 <= (unint64_t)"kbps" && v7 + 44 > (unint64_t)"kbps")
    goto LABEL_129;
  strcpy((char *)(v7 + 40), "kbps");
  *(_WORD *)(v7 + 64) = 0;
  *(_BYTE *)(v7 + 66) = 0;
  *(_QWORD *)(v7 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 96) = &off_24C0AF3C8;
  *(_QWORD *)(v7 + 120) = v7 + 96;
  *(_BYTE *)(v7 + 104) = 0;
  v82 = v7;
  v8 = operator new();
  v110 = &off_24C0AF410;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v8 = &unk_24C0AF318;
  *(_QWORD *)(v8 + 8) = off_24C0B4170;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v5 = 8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 63) = 8;
  if (v8 + 40 <= (unint64_t)"kbps_res" && v8 + 48 > (unint64_t)"kbps_res")
    goto LABEL_129;
  strcpy((char *)(v8 + 40), "kbps_res");
  *(_WORD *)(v8 + 64) = 0;
  *(_BYTE *)(v8 + 66) = 0;
  *(_QWORD *)(v8 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 96) = &off_24C0AF410;
  *(_QWORD *)(v8 + 120) = v8 + 96;
  *(_BYTE *)(v8 + 104) = 0;
  p_p = (void **)v8;
  v9 = operator new();
  v110 = &off_24C0AF458;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v9 = &unk_24C0AF318;
  *(_QWORD *)(v9 + 8) = off_24C0B4170;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_BYTE *)(v9 + 63) = 8;
  *(_QWORD *)(v9 + 16) = 0;
  if (v9 + 40 <= (unint64_t)"fps_diff" && v9 + 48 > (unint64_t)"fps_diff")
    goto LABEL_129;
  strcpy((char *)(v9 + 40), "fps_diff");
  *(_WORD *)(v9 + 64) = 0;
  *(_BYTE *)(v9 + 66) = 0;
  v5 = (uint64_t)&unk_24C0AF348;
  *(_QWORD *)(v9 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 96) = &off_24C0AF458;
  *(_QWORD *)(v9 + 120) = v9 + 96;
  *(_BYTE *)(v9 + 104) = 0;
  v84 = v9;
  v10 = operator new();
  v110 = &off_24C0AF4A0;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v10 = &unk_24C0AF318;
  *(_QWORD *)(v10 + 8) = off_24C0B4170;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_BYTE *)(v10 + 63) = 10;
  *(_QWORD *)(v10 + 16) = 0;
  if (v10 + 40 <= (unint64_t)"vp8_qp_low" && v10 + 50 > (unint64_t)"vp8_qp_low")
    goto LABEL_129;
  strcpy((char *)(v10 + 40), "vp8_qp_low");
  *(_WORD *)(v10 + 64) = 0;
  *(_BYTE *)(v10 + 66) = 0;
  *(_QWORD *)(v10 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 96) = &off_24C0AF4A0;
  *(_QWORD *)(v10 + 120) = v10 + 96;
  *(_BYTE *)(v10 + 104) = 0;
  v85 = v10;
  v11 = operator new();
  v110 = &off_24C0AF4E8;
  LOBYTE(v111) = 0;
  v113 = &v110;
  v5 = (uint64_t)&unk_24C0AF318;
  *(_QWORD *)v11 = &unk_24C0AF318;
  *(_QWORD *)(v11 + 8) = off_24C0B4170;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_BYTE *)(v11 + 63) = 11;
  *(_QWORD *)(v11 + 16) = 0;
  if (v11 + 40 <= (unint64_t)"vp8_qp_high" && v11 + 51 > (unint64_t)"vp8_qp_high")
    goto LABEL_129;
  strcpy((char *)(v11 + 40), "vp8_qp_high");
  *(_WORD *)(v11 + 64) = 0;
  *(_BYTE *)(v11 + 66) = 0;
  *(_QWORD *)(v11 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 96) = &off_24C0AF4E8;
  *(_QWORD *)(v11 + 120) = v11 + 96;
  *(_BYTE *)(v11 + 104) = 0;
  v86 = v11;
  v12 = operator new();
  v110 = &off_24C0AF530;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v12 = &unk_24C0AF318;
  *(_QWORD *)(v12 + 8) = off_24C0B4170;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 63) = 7;
  *(_QWORD *)(v12 + 16) = 0;
  if (v12 + 40 <= (unint64_t)"vp8_fps" && v12 + 47 > (unint64_t)"vp8_fps")
    goto LABEL_129;
  strcpy((char *)(v12 + 40), "vp8_fps");
  *(_WORD *)(v12 + 64) = 0;
  *(_BYTE *)(v12 + 66) = 0;
  *(_QWORD *)(v12 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 96) = &off_24C0AF530;
  *(_QWORD *)(v12 + 120) = v12 + 96;
  *(_BYTE *)(v12 + 104) = 0;
  v87 = v12;
  v13 = operator new();
  v110 = &off_24C0AF578;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v13 = &unk_24C0AF318;
  *(_QWORD *)(v13 + 8) = off_24C0B4170;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_BYTE *)(v13 + 63) = 8;
  *(_QWORD *)(v13 + 16) = 0;
  if (v13 + 40 <= (unint64_t)"vp8_kbps" && v13 + 48 > (unint64_t)"vp8_kbps")
    goto LABEL_129;
  v5 = 0x7370626B5F387076;
  strcpy((char *)(v13 + 40), "vp8_kbps");
  *(_WORD *)(v13 + 64) = 0;
  *(_BYTE *)(v13 + 66) = 0;
  *(_QWORD *)(v13 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v13 + 80) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 96) = &off_24C0AF578;
  *(_QWORD *)(v13 + 120) = v13 + 96;
  *(_BYTE *)(v13 + 104) = 0;
  v88 = v13;
  v14 = operator new();
  v110 = &off_24C0AF5C0;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v14 = &unk_24C0AF318;
  *(_QWORD *)(v14 + 8) = off_24C0B4170;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_BYTE *)(v14 + 63) = 12;
  *(_QWORD *)(v14 + 16) = 0;
  if (v14 + 40 <= (unint64_t)"vp8_kbps_res" && v14 + 52 > (unint64_t)"vp8_kbps_res")
    goto LABEL_129;
  strcpy((char *)(v14 + 40), "vp8_kbps_res");
  *(_WORD *)(v14 + 64) = 0;
  *(_BYTE *)(v14 + 66) = 0;
  *(_QWORD *)(v14 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 88) = 0;
  *(_QWORD *)(v14 + 72) = 0;
  *(_QWORD *)(v14 + 96) = &off_24C0AF5C0;
  *(_QWORD *)(v14 + 120) = v14 + 96;
  *(_BYTE *)(v14 + 104) = 0;
  v89 = v14;
  v15 = operator new();
  v110 = &off_24C0AF608;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v15 = &unk_24C0AF318;
  *(_QWORD *)(v15 + 8) = off_24C0B4170;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_BYTE *)(v15 + 63) = 10;
  *(_QWORD *)(v15 + 16) = 0;
  if (v15 + 40 <= (unint64_t)"vp9_qp_low" && v15 + 50 > (unint64_t)"vp9_qp_low")
    goto LABEL_129;
  strcpy((char *)(v15 + 40), "vp9_qp_low");
  *(_WORD *)(v15 + 64) = 0;
  *(_BYTE *)(v15 + 66) = 0;
  *(_QWORD *)(v15 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v15 + 80) = 0;
  *(_QWORD *)(v15 + 88) = 0;
  *(_QWORD *)(v15 + 72) = 0;
  *(_QWORD *)(v15 + 96) = &off_24C0AF608;
  *(_QWORD *)(v15 + 120) = v15 + 96;
  *(_BYTE *)(v15 + 104) = 0;
  v90 = v15;
  v16 = operator new();
  v110 = &off_24C0AF650;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v16 = &unk_24C0AF318;
  *(_QWORD *)(v16 + 8) = off_24C0B4170;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_BYTE *)(v16 + 63) = 11;
  *(_QWORD *)(v16 + 16) = 0;
  if (v16 + 40 <= (unint64_t)"vp9_qp_high" && v16 + 51 > (unint64_t)"vp9_qp_high")
    goto LABEL_129;
  strcpy((char *)(v16 + 40), "vp9_qp_high");
  *(_WORD *)(v16 + 64) = 0;
  *(_BYTE *)(v16 + 66) = 0;
  *(_QWORD *)(v16 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 88) = 0;
  *(_QWORD *)(v16 + 72) = 0;
  *(_QWORD *)(v16 + 96) = &off_24C0AF650;
  *(_QWORD *)(v16 + 120) = v16 + 96;
  *(_BYTE *)(v16 + 104) = 0;
  v91 = v16;
  v17 = operator new();
  v110 = &off_24C0AF698;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v17 = &unk_24C0AF318;
  *(_QWORD *)(v17 + 8) = off_24C0B4170;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_BYTE *)(v17 + 63) = 7;
  *(_QWORD *)(v17 + 16) = 0;
  if (v17 + 40 <= (unint64_t)"vp9_fps" && v17 + 47 > (unint64_t)"vp9_fps")
    goto LABEL_129;
  strcpy((char *)(v17 + 40), "vp9_fps");
  *(_WORD *)(v17 + 64) = 0;
  *(_BYTE *)(v17 + 66) = 0;
  *(_QWORD *)(v17 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v17 + 80) = 0;
  *(_QWORD *)(v17 + 88) = 0;
  *(_QWORD *)(v17 + 72) = 0;
  *(_QWORD *)(v17 + 96) = &off_24C0AF698;
  *(_QWORD *)(v17 + 120) = v17 + 96;
  *(_BYTE *)(v17 + 104) = 0;
  v92 = v17;
  v18 = operator new();
  v110 = &off_24C0AF6E0;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v18 = &unk_24C0AF318;
  *(_QWORD *)(v18 + 8) = off_24C0B4170;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = 0;
  *(_BYTE *)(v18 + 63) = 8;
  *(_QWORD *)(v18 + 16) = 0;
  if (v18 + 40 <= (unint64_t)"vp9_kbps" && v18 + 48 > (unint64_t)"vp9_kbps")
    goto LABEL_129;
  strcpy((char *)(v18 + 40), "vp9_kbps");
  *(_WORD *)(v18 + 64) = 0;
  *(_BYTE *)(v18 + 66) = 0;
  *(_QWORD *)(v18 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v18 + 80) = 0;
  *(_QWORD *)(v18 + 88) = 0;
  *(_QWORD *)(v18 + 72) = 0;
  *(_QWORD *)(v18 + 96) = &off_24C0AF6E0;
  *(_QWORD *)(v18 + 120) = v18 + 96;
  *(_BYTE *)(v18 + 104) = 0;
  v93 = v18;
  v19 = operator new();
  v110 = &off_24C0AF728;
  LOBYTE(v111) = 0;
  v113 = &v110;
  v5 = (uint64_t)&unk_24C0AF318;
  *(_QWORD *)v19 = &unk_24C0AF318;
  *(_QWORD *)(v19 + 8) = off_24C0B4170;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_BYTE *)(v19 + 63) = 12;
  *(_QWORD *)(v19 + 16) = 0;
  if (v19 + 40 <= (unint64_t)"vp9_kbps_res" && v19 + 52 > (unint64_t)"vp9_kbps_res")
    goto LABEL_129;
  strcpy((char *)(v19 + 40), "vp9_kbps_res");
  *(_WORD *)(v19 + 64) = 0;
  *(_BYTE *)(v19 + 66) = 0;
  *(_QWORD *)(v19 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v19 + 80) = 0;
  *(_QWORD *)(v19 + 88) = 0;
  *(_QWORD *)(v19 + 72) = 0;
  *(_QWORD *)(v19 + 96) = &off_24C0AF728;
  *(_QWORD *)(v19 + 120) = v19 + 96;
  *(_BYTE *)(v19 + 104) = 0;
  v94 = v19;
  v20 = operator new();
  v110 = &off_24C0AF770;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v20 = &unk_24C0AF318;
  *(_QWORD *)(v20 + 8) = off_24C0B4170;
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 32) = 0;
  *(_BYTE *)(v20 + 63) = 11;
  *(_QWORD *)(v20 + 16) = 0;
  if (v20 + 40 <= (unint64_t)"h264_qp_low" && v20 + 51 > (unint64_t)"h264_qp_low")
    goto LABEL_129;
  strcpy((char *)(v20 + 40), "h264_qp_low");
  *(_WORD *)(v20 + 64) = 0;
  *(_BYTE *)(v20 + 66) = 0;
  *(_QWORD *)(v20 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v20 + 80) = 0;
  *(_QWORD *)(v20 + 88) = 0;
  *(_QWORD *)(v20 + 72) = 0;
  *(_QWORD *)(v20 + 96) = &off_24C0AF770;
  *(_QWORD *)(v20 + 120) = v20 + 96;
  *(_BYTE *)(v20 + 104) = 0;
  v95 = v20;
  v21 = operator new();
  v110 = &off_24C0AF7B8;
  LOBYTE(v111) = 0;
  v113 = &v110;
  v5 = (uint64_t)&unk_24C0AF318;
  *(_QWORD *)v21 = &unk_24C0AF318;
  *(_QWORD *)(v21 + 8) = off_24C0B4170;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  *(_BYTE *)(v21 + 63) = 12;
  *(_QWORD *)(v21 + 16) = 0;
  if (v21 + 40 <= (unint64_t)"h264_qp_high" && v21 + 52 > (unint64_t)"h264_qp_high")
    goto LABEL_129;
  strcpy((char *)(v21 + 40), "h264_qp_high");
  *(_WORD *)(v21 + 64) = 0;
  *(_BYTE *)(v21 + 66) = 0;
  *(_QWORD *)(v21 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v21 + 80) = 0;
  *(_QWORD *)(v21 + 88) = 0;
  *(_QWORD *)(v21 + 72) = 0;
  *(_QWORD *)(v21 + 96) = &off_24C0AF7B8;
  *(_QWORD *)(v21 + 120) = v21 + 96;
  *(_BYTE *)(v21 + 104) = 0;
  v96 = v21;
  v22 = operator new();
  v110 = &off_24C0AF800;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v22 = &unk_24C0AF318;
  *(_QWORD *)(v22 + 8) = off_24C0B4170;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 32) = 0;
  *(_BYTE *)(v22 + 63) = 8;
  *(_QWORD *)(v22 + 16) = 0;
  if (v22 + 40 <= (unint64_t)"h264_fps" && v22 + 48 > (unint64_t)"h264_fps")
    goto LABEL_129;
  strcpy((char *)(v22 + 40), "h264_fps");
  *(_WORD *)(v22 + 64) = 0;
  *(_BYTE *)(v22 + 66) = 0;
  *(_QWORD *)(v22 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v22 + 80) = 0;
  *(_QWORD *)(v22 + 88) = 0;
  *(_QWORD *)(v22 + 72) = 0;
  *(_QWORD *)(v22 + 96) = &off_24C0AF800;
  *(_QWORD *)(v22 + 120) = v22 + 96;
  *(_BYTE *)(v22 + 104) = 0;
  v97 = v22;
  v23 = operator new();
  v110 = &off_24C0AF848;
  LOBYTE(v111) = 0;
  v113 = &v110;
  v5 = (uint64_t)&unk_24C0AF318;
  *(_QWORD *)v23 = &unk_24C0AF318;
  *(_QWORD *)(v23 + 8) = off_24C0B4170;
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = 0;
  *(_BYTE *)(v23 + 63) = 9;
  *(_QWORD *)(v23 + 16) = 0;
  if (v23 + 40 <= (unint64_t)"h264_kbps" && v23 + 49 > (unint64_t)"h264_kbps")
    goto LABEL_129;
  strcpy((char *)(v23 + 40), "h264_kbps");
  *(_WORD *)(v23 + 64) = 0;
  *(_BYTE *)(v23 + 66) = 0;
  *(_QWORD *)(v23 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v23 + 80) = 0;
  *(_QWORD *)(v23 + 88) = 0;
  *(_QWORD *)(v23 + 72) = 0;
  *(_QWORD *)(v23 + 96) = &off_24C0AF848;
  *(_QWORD *)(v23 + 120) = v23 + 96;
  *(_BYTE *)(v23 + 104) = 0;
  v98 = v23;
  v24 = operator new();
  v110 = &off_24C0AF890;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v24 = &unk_24C0AF318;
  *(_QWORD *)(v24 + 8) = off_24C0B4170;
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = 0;
  *(_BYTE *)(v24 + 63) = 13;
  *(_QWORD *)(v24 + 16) = 0;
  if (v24 + 40 <= (unint64_t)"h264_kbps_res" && v24 + 53 > (unint64_t)"h264_kbps_res")
    goto LABEL_129;
  strcpy((char *)(v24 + 40), "h264_kbps_res");
  *(_WORD *)(v24 + 64) = 0;
  *(_BYTE *)(v24 + 66) = 0;
  *(_QWORD *)(v24 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v24 + 80) = 0;
  *(_QWORD *)(v24 + 88) = 0;
  *(_QWORD *)(v24 + 72) = 0;
  *(_QWORD *)(v24 + 96) = &off_24C0AF890;
  *(_QWORD *)(v24 + 120) = v24 + 96;
  *(_BYTE *)(v24 + 104) = 0;
  v99 = v24;
  v25 = operator new();
  v110 = &off_24C0AF8D8;
  LOBYTE(v111) = 0;
  v113 = &v110;
  v5 = (uint64_t)&unk_24C0AF318;
  *(_QWORD *)v25 = &unk_24C0AF318;
  *(_QWORD *)(v25 + 8) = off_24C0B4170;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_BYTE *)(v25 + 63) = 10;
  *(_QWORD *)(v25 + 16) = 0;
  if (v25 + 40 <= (unint64_t)"av1_qp_low" && v25 + 50 > (unint64_t)"av1_qp_low")
    goto LABEL_129;
  strcpy((char *)(v25 + 40), "av1_qp_low");
  *(_WORD *)(v25 + 64) = 0;
  *(_BYTE *)(v25 + 66) = 0;
  *(_QWORD *)(v25 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v25 + 80) = 0;
  *(_QWORD *)(v25 + 88) = 0;
  *(_QWORD *)(v25 + 72) = 0;
  *(_QWORD *)(v25 + 96) = &off_24C0AF8D8;
  *(_QWORD *)(v25 + 120) = v25 + 96;
  *(_BYTE *)(v25 + 104) = 0;
  v100 = v25;
  v26 = operator new();
  v110 = &off_24C0AF920;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v26 = &unk_24C0AF318;
  *(_QWORD *)(v26 + 8) = off_24C0B4170;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  *(_BYTE *)(v26 + 63) = 11;
  *(_QWORD *)(v26 + 16) = 0;
  if (v26 + 40 <= (unint64_t)"av1_qp_high" && v26 + 51 > (unint64_t)"av1_qp_high")
    goto LABEL_129;
  strcpy((char *)(v26 + 40), "av1_qp_high");
  *(_WORD *)(v26 + 64) = 0;
  *(_BYTE *)(v26 + 66) = 0;
  *(_QWORD *)(v26 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v26 + 80) = 0;
  *(_QWORD *)(v26 + 88) = 0;
  *(_QWORD *)(v26 + 72) = 0;
  *(_QWORD *)(v26 + 96) = &off_24C0AF920;
  *(_QWORD *)(v26 + 120) = v26 + 96;
  *(_BYTE *)(v26 + 104) = 0;
  v101 = v26;
  v27 = operator new();
  v110 = &off_24C0AF968;
  LOBYTE(v111) = 0;
  v113 = &v110;
  v5 = (uint64_t)&unk_24C0AF318;
  *(_QWORD *)v27 = &unk_24C0AF318;
  *(_QWORD *)(v27 + 8) = off_24C0B4170;
  *(_QWORD *)(v27 + 24) = 0;
  *(_QWORD *)(v27 + 32) = 0;
  *(_BYTE *)(v27 + 63) = 7;
  *(_QWORD *)(v27 + 16) = 0;
  if (v27 + 40 <= (unint64_t)"av1_fps" && v27 + 47 > (unint64_t)"av1_fps")
    goto LABEL_129;
  strcpy((char *)(v27 + 40), "av1_fps");
  *(_WORD *)(v27 + 64) = 0;
  *(_BYTE *)(v27 + 66) = 0;
  *(_QWORD *)(v27 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v27 + 80) = 0;
  *(_QWORD *)(v27 + 88) = 0;
  *(_QWORD *)(v27 + 72) = 0;
  *(_QWORD *)(v27 + 96) = &off_24C0AF968;
  *(_QWORD *)(v27 + 120) = v27 + 96;
  *(_BYTE *)(v27 + 104) = 0;
  v102 = v27;
  v28 = operator new();
  v110 = &off_24C0AF9B0;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v28 = &unk_24C0AF318;
  *(_QWORD *)(v28 + 8) = off_24C0B4170;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  *(_BYTE *)(v28 + 63) = 8;
  *(_QWORD *)(v28 + 16) = 0;
  if (v28 + 40 <= (unint64_t)"av1_kbps" && v28 + 48 > (unint64_t)"av1_kbps")
    goto LABEL_129;
  strcpy((char *)(v28 + 40), "av1_kbps");
  *(_WORD *)(v28 + 64) = 0;
  *(_BYTE *)(v28 + 66) = 0;
  *(_QWORD *)(v28 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v28 + 80) = 0;
  *(_QWORD *)(v28 + 88) = 0;
  *(_QWORD *)(v28 + 72) = 0;
  *(_QWORD *)(v28 + 96) = &off_24C0AF9B0;
  *(_QWORD *)(v28 + 120) = v28 + 96;
  *(_BYTE *)(v28 + 104) = 0;
  v103 = v28;
  v29 = operator new();
  v110 = &off_24C0AF9F8;
  LOBYTE(v111) = 0;
  v113 = &v110;
  v5 = (uint64_t)&unk_24C0AF318;
  *(_QWORD *)v29 = &unk_24C0AF318;
  *(_QWORD *)(v29 + 8) = off_24C0B4170;
  *(_QWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 32) = 0;
  *(_BYTE *)(v29 + 63) = 12;
  *(_QWORD *)(v29 + 16) = 0;
  if (v29 + 40 <= (unint64_t)"av1_kbps_res" && v29 + 52 > (unint64_t)"av1_kbps_res")
    goto LABEL_129;
  strcpy((char *)(v29 + 40), "av1_kbps_res");
  *(_WORD *)(v29 + 64) = 0;
  *(_BYTE *)(v29 + 66) = 0;
  *(_QWORD *)(v29 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v29 + 80) = 0;
  *(_QWORD *)(v29 + 88) = 0;
  *(_QWORD *)(v29 + 72) = 0;
  *(_QWORD *)(v29 + 96) = &off_24C0AF9F8;
  *(_QWORD *)(v29 + 120) = v29 + 96;
  *(_BYTE *)(v29 + 104) = 0;
  v104 = v29;
  v30 = operator new();
  v110 = &off_24C0AFA40;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v30 = &unk_24C0AF318;
  *(_QWORD *)(v30 + 8) = off_24C0B4170;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  *(_BYTE *)(v30 + 63) = 14;
  *(_QWORD *)(v30 + 16) = 0;
  if (v30 + 40 <= (unint64_t)"generic_qp_low" && v30 + 54 > (unint64_t)"generic_qp_low")
    goto LABEL_129;
  strcpy((char *)(v30 + 40), "generic_qp_low");
  *(_WORD *)(v30 + 64) = 0;
  *(_BYTE *)(v30 + 66) = 0;
  *(_QWORD *)(v30 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v30 + 80) = 0;
  *(_QWORD *)(v30 + 88) = 0;
  *(_QWORD *)(v30 + 72) = 0;
  *(_QWORD *)(v30 + 96) = &off_24C0AFA40;
  *(_QWORD *)(v30 + 120) = v30 + 96;
  *(_BYTE *)(v30 + 104) = 0;
  v105 = v30;
  v31 = operator new();
  v110 = &off_24C0AFA88;
  LOBYTE(v111) = 0;
  v113 = &v110;
  v5 = (uint64_t)&unk_24C0AF318;
  *(_QWORD *)v31 = &unk_24C0AF318;
  *(_QWORD *)(v31 + 8) = off_24C0B4170;
  *(_QWORD *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 32) = 0;
  *(_BYTE *)(v31 + 63) = 15;
  *(_QWORD *)(v31 + 16) = 0;
  if (v31 + 40 <= (unint64_t)"generic_qp_high" && v31 + 55 > (unint64_t)"generic_qp_high")
    goto LABEL_129;
  strcpy((char *)(v31 + 40), "generic_qp_high");
  *(_WORD *)(v31 + 64) = 0;
  *(_BYTE *)(v31 + 66) = 0;
  *(_QWORD *)(v31 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v31 + 80) = 0;
  *(_QWORD *)(v31 + 88) = 0;
  *(_QWORD *)(v31 + 72) = 0;
  *(_QWORD *)(v31 + 96) = &off_24C0AFA88;
  *(_QWORD *)(v31 + 120) = v31 + 96;
  *(_BYTE *)(v31 + 104) = 0;
  v106 = v31;
  v32 = operator new();
  v110 = &off_24C0AFAD0;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v32 = &unk_24C0AF318;
  *(_QWORD *)(v32 + 8) = off_24C0B4170;
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 32) = 0;
  *(_BYTE *)(v32 + 63) = 11;
  *(_QWORD *)(v32 + 16) = 0;
  if (v32 + 40 <= (unint64_t)"generic_fps" && v32 + 51 > (unint64_t)"generic_fps")
    goto LABEL_129;
  strcpy((char *)(v32 + 40), "generic_fps");
  *(_WORD *)(v32 + 64) = 0;
  *(_BYTE *)(v32 + 66) = 0;
  *(_QWORD *)(v32 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v32 + 80) = 0;
  *(_QWORD *)(v32 + 88) = 0;
  *(_QWORD *)(v32 + 72) = 0;
  *(_QWORD *)(v32 + 96) = &off_24C0AFAD0;
  *(_QWORD *)(v32 + 120) = v32 + 96;
  *(_BYTE *)(v32 + 104) = 0;
  v107 = v32;
  v33 = operator new();
  v110 = &off_24C0AFB18;
  LOBYTE(v111) = 0;
  v113 = &v110;
  v5 = (uint64_t)off_24C0B4170;
  *(_QWORD *)v33 = &unk_24C0AF318;
  *(_QWORD *)(v33 + 8) = off_24C0B4170;
  *(_QWORD *)(v33 + 24) = 0;
  *(_QWORD *)(v33 + 32) = 0;
  *(_BYTE *)(v33 + 63) = 12;
  *(_QWORD *)(v33 + 16) = 0;
  if (v33 + 40 <= (unint64_t)"generic_kbps" && v33 + 52 > (unint64_t)"generic_kbps")
    goto LABEL_129;
  strcpy((char *)(v33 + 40), "generic_kbps");
  *(_WORD *)(v33 + 64) = 0;
  *(_BYTE *)(v33 + 66) = 0;
  *(_QWORD *)(v33 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v33 + 80) = 0;
  *(_QWORD *)(v33 + 88) = 0;
  *(_QWORD *)(v33 + 72) = 0;
  *(_QWORD *)(v33 + 96) = &off_24C0AFB18;
  *(_QWORD *)(v33 + 120) = v33 + 96;
  *(_BYTE *)(v33 + 104) = 0;
  v108 = v33;
  v34 = operator new();
  v110 = &off_24C0AFB60;
  LOBYTE(v111) = 0;
  v113 = &v110;
  *(_QWORD *)v34 = &unk_24C0AF318;
  *(_QWORD *)(v34 + 8) = off_24C0B4170;
  *(_QWORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 32) = 0;
  *(_BYTE *)(v34 + 63) = 16;
  *(_QWORD *)(v34 + 16) = 0;
  if (v34 + 40 <= (unint64_t)"generic_kbps_res" && v34 + 56 > (unint64_t)"generic_kbps_res")
    goto LABEL_129;
  strcpy((char *)(v34 + 40), "generic_kbps_res");
  *(_WORD *)(v34 + 64) = 0;
  *(_BYTE *)(v34 + 66) = 0;
  *(_QWORD *)(v34 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v34 + 80) = 0;
  *(_QWORD *)(v34 + 88) = 0;
  *(_QWORD *)(v34 + 72) = 0;
  *(_QWORD *)(v34 + 96) = &off_24C0AFB60;
  *(_QWORD *)(v34 + 120) = v34 + 96;
  *(_BYTE *)(v34 + 104) = 0;
  v109 = v34;
  webrtc::FieldTrialStructListBase::FieldTrialStructListBase((uint64_t)&v110, &__p, 30);
  v5 = (uint64_t)off_24C0AF2A0;
  v110 = off_24C0AF2A0;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v79 = &v110;
  (*(void (**)(void **__return_ptr, int *, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-Video-BalancedDegradationSettings", 40);
  if (SHIBYTE(v82) < 0)
  {
    v35 = v81;
    if ((v81 & 0x8000000000000000) == 0)
    {
      v36 = (char *)__p;
      if (!v81 || __p)
        goto LABEL_66;
    }
LABEL_129:
    __break(1u);
LABEL_130:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
LABEL_131:
      rtc::webrtc_logging_impl::Log("\r\t", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/balanced_degradation_settings.cc");
      goto LABEL_132;
    }
    goto LABEL_132;
  }
  v35 = HIBYTE(v82);
  v36 = (char *)&__p;
LABEL_66:
  webrtc::ParseFieldTrial(&v79, 1, v36, v35);
  if (SHIBYTE(v82) < 0)
  {
    operator delete(__p);
    v37 = v118;
    v38 = v119 - v118;
    if (v119 != v118)
    {
LABEL_68:
      v39 = v38 / 120;
      if ((unint64_t)(v38 / 120) >= 0x222222222222223)
        abort();
      a2 = (int *)operator new(v38);
      memcpy(a2, v37, v38);
      if (v39 >= 2)
      {
        v47 = 0;
        v48 = 120 * v39;
        while ((a2[v47 / 4 + 1] - 101) > 0xFFFFFF9B)
        {
          v47 += 120;
          if (v48 == v47)
          {
            v49 = a2[2];
            v50 = v39 - 1;
            v51 = 32;
            while (1)
            {
              v52 = a2[v51];
              if (v52 >= 1)
              {
                v53 = v52 < v49;
                v49 = a2[v51];
                if (v53)
                  break;
              }
              v51 += 30;
              if (!--v50)
              {
                v54 = v39 - 1;
                v55 = a2 + 30;
                v56 = *a2;
                v57 = v38 / 120 - 1;
                while (1)
                {
                  v58 = v56;
                  v56 = *v55;
                  if (*v55 < v58 || v55[1] < *(v55 - 29))
                    goto LABEL_130;
                  if (v55[5] < 1 == *(v55 - 25) > 0)
                    goto LABEL_125;
                  if (v55[6] < 1 == *(v55 - 24) > 0)
                    goto LABEL_125;
                  v59 = v55[7];
                  v60 = *(v55 - 23);
                  if (v59 < 1 == v60 > 0)
                    goto LABEL_125;
                  if (v59 >= 1 && v59 < v60)
                  {
LABEL_127:
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                      goto LABEL_132;
                    goto LABEL_131;
                  }
                  if (!v57)
                    goto LABEL_129;
                  if (v55[10] < 1 == *(v55 - 20) > 0
                    || v55[11] < 1 == *(v55 - 19) > 0
                    || (v61 = v55[12], v62 = *(v55 - 18), v61 < 1 == v62 > 0))
                  {
LABEL_125:
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                      goto LABEL_132;
                    goto LABEL_131;
                  }
                  if (v61 >= 1 && v61 < v62)
                    goto LABEL_127;
                  if (v55[15] < 1 == *(v55 - 15) > 0)
                    goto LABEL_125;
                  if (v55[16] < 1 == *(v55 - 14) > 0)
                    goto LABEL_125;
                  v63 = v55[17];
                  v64 = *(v55 - 13);
                  if (v63 < 1 == v64 > 0)
                    goto LABEL_125;
                  if (v63 >= 1 && v63 < v64)
                    goto LABEL_127;
                  if (v55[20] < 1 == *(v55 - 10) > 0)
                    goto LABEL_125;
                  if (v55[21] < 1 == *(v55 - 9) > 0)
                    goto LABEL_125;
                  v65 = v55[22];
                  v66 = *(v55 - 8);
                  if (v65 < 1 == v66 > 0)
                    goto LABEL_125;
                  if (v65 >= 1 && v65 < v66)
                    goto LABEL_127;
                  if (v55[25] < 1 == *(v55 - 5) > 0)
                    goto LABEL_125;
                  if (v55[26] < 1 == *(v55 - 4) > 0)
                    goto LABEL_125;
                  v67 = v55[27];
                  v68 = *(v55 - 3);
                  if (v67 < 1 == v68 > 0)
                    goto LABEL_125;
                  if (v67 >= 1 && v67 < v68)
                    goto LABEL_127;
                  --v57;
                  v55 += 30;
                  if (!--v54)
                  {
                    v69 = 0;
                    {
                      v69 += 120;
                      if (v48 == v69)
                      {
                        v70 = operator new(v38);
                        v71 = (char *)v70 + 120 * v39;
                        memcpy(v70, a2, v38);
                        goto LABEL_133;
                      }
                    }
                    goto LABEL_132;
                  }
                }
              }
            }
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
              goto LABEL_132;
            goto LABEL_131;
          }
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          goto LABEL_132;
      }
      else if (v38 != 120 || (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      {
        goto LABEL_132;
      }
      goto LABEL_131;
    }
  }
  else
  {
    v37 = v118;
    v38 = v119 - v118;
    if (v119 != v118)
      goto LABEL_68;
  }
  a2 = 0;
LABEL_132:
  v70 = operator new(0x168uLL);
  v71 = (char *)v70 + 360;
  *v70 = xmmword_208F055D0;
  *((_DWORD *)v70 + 4) = -100;
  *(_OWORD *)((char *)v70 + 20) = 0u;
  *(_OWORD *)((char *)v70 + 36) = 0u;
  *(_OWORD *)((char *)v70 + 52) = 0u;
  *(_OWORD *)((char *)v70 + 68) = 0u;
  *(_OWORD *)((char *)v70 + 84) = 0u;
  *(_OWORD *)((char *)v70 + 100) = 0u;
  *((_DWORD *)v70 + 29) = 0;
  *(_OWORD *)((char *)v70 + 120) = xmmword_208F055E0;
  *((_DWORD *)v70 + 34) = 1;
  *(_OWORD *)((char *)v70 + 140) = 0u;
  *(_OWORD *)((char *)v70 + 156) = 0u;
  *(_OWORD *)((char *)v70 + 172) = 0u;
  *(_OWORD *)((char *)v70 + 188) = 0u;
  *(_OWORD *)((char *)v70 + 204) = 0u;
  *(_OWORD *)((char *)v70 + 220) = 0u;
  *((_DWORD *)v70 + 59) = 0;
  v70[15] = xmmword_208F055F0;
  *((_DWORD *)v70 + 64) = 1;
  *(_OWORD *)((char *)v70 + 260) = 0u;
  *(_OWORD *)((char *)v70 + 276) = 0u;
  *(_OWORD *)((char *)v70 + 292) = 0u;
  *(_OWORD *)((char *)v70 + 308) = 0u;
  *(_OWORD *)((char *)v70 + 324) = 0u;
  *(_OWORD *)((char *)v70 + 340) = 0u;
  *((_DWORD *)v70 + 89) = 0;
LABEL_133:
  v72 = *a1;
  if (*a1)
  {
    a1[1] = v72;
    operator delete(v72);
  }
  *a1 = v70;
  a1[1] = v71;
  a1[2] = v71;
  if (a2)
    operator delete(a2);
  v110 = (uint64_t (**)())v5;
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  v110 = (uint64_t (**)())off_24C0B3F90;
  v73 = v116;
  if (v116)
  {
    v74 = v117;
    v75 = v116;
    if (v117 != v116)
    {
      do
      {
        v77 = *--v74;
        v76 = v77;
        *v74 = 0;
        if (v77)
          (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
      }
      while (v74 != v73);
      v75 = v116;
    }
    v117 = v73;
    operator delete(v75);
  }
  v110 = (uint64_t (**)())off_24C0B4170;
  if (v115 < 0)
    operator delete(v114);
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  return a1;
}

uint64_t webrtc::FieldTrialStructList<webrtc::BalancedDegradationSettings::Config>::~FieldTrialStructList(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)a1 = off_24C0AF2A0;
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_24C0B3F90;
  v3 = *(_QWORD **)(a1 + 64);
  if (v3)
  {
    v4 = *(_QWORD **)(a1 + 72);
    v5 = *(void **)(a1 + 64);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v5);
  }
  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v8 = *(void **)(a1 + 8);
    if (!v8)
      return a1;
    goto LABEL_13;
  }
  v8 = *(void **)(a1 + 8);
  if (v8)
  {
LABEL_13:
    *(_QWORD *)(a1 + 16) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t webrtc::BalancedDegradationSettings::MinFps(uint64_t a1, int a2, int a3)
{
  _DWORD *v3;
  _DWORD *v4;
  unsigned int v6;
  int v7;

  v4 = *(_DWORD **)a1;
  v3 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 == v3)
    return 0x7FFFFFFFLL;
  while (*v4 < a3)
  {
    v4 += 30;
    if (v4 == v3)
      return 0x7FFFFFFFLL;
  }
  v6 = v4[1];
  switch(a2)
  {
    case 0:
      v7 = v4[27];
      goto LABEL_11;
    case 1:
      v7 = v4[7];
      goto LABEL_11;
    case 2:
    case 5:
      v7 = v4[12];
      goto LABEL_11;
    case 3:
      v7 = v4[22];
      goto LABEL_11;
    case 4:
      v7 = v4[17];
LABEL_11:
      if (v7 > 0)
        v6 = v7 & 0xFFFFFF00 | (v7 & ~(v7 >> 31));
      break;
    default:
      break;
  }
  if (v6 == 100)
    return 0x7FFFFFFFLL;
  else
    return v6;
}

uint64_t webrtc::BalancedDegradationSettings::MaxFps(uint64_t result, int a2, signed int a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int *i;
  unsigned int v6;
  int v7;

  v3 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
  if (v3 == 1)
    return 0x7FFFFFFFLL;
  v4 = 0;
  for (i = (unsigned int *)(*(_QWORD *)result + 124); ; i += 30)
  {
    if (v3 == v4)
      goto LABEL_19;
    ++v4;
    if ((int)*(i - 31) >= a3)
      break;
    if (v3 - 1 == v4)
      return 0x7FFFFFFFLL;
  }
  if (v3 <= v4)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  v6 = *i;
  switch(a2)
  {
    case 0:
      v7 = i[26];
      goto LABEL_14;
    case 1:
      v7 = i[6];
      goto LABEL_14;
    case 2:
    case 5:
      v7 = i[11];
      goto LABEL_14;
    case 3:
      v7 = i[21];
      goto LABEL_14;
    case 4:
      v7 = i[16];
LABEL_14:
      if (v7 > 0)
        v6 = v7 & 0xFFFFFF00 | (v7 & ~(v7 >> 31));
      break;
    default:
      break;
  }
  if (v6 == 100)
    return 0x7FFFFFFFLL;
  else
    return v6;
}

uint64_t webrtc::BalancedDegradationSettings::CanAdaptUp(uint64_t result, int a2, int a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  int v7;
  int v8;
  int v9;
  _BOOL4 v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v4 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
  if (v4 == 1)
    return 1;
  v5 = 0;
  for (i = *(_QWORD *)result + 128; ; i += 120)
  {
    if (v4 == v5)
      goto LABEL_21;
    ++v5;
    if (*(_DWORD *)(i - 128) >= a3)
      break;
    if (v4 - 1 == v5)
      return 1;
  }
  if (v4 <= v5)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v7 = *(_DWORD *)i;
  switch(a2)
  {
    case 0:
      v9 = *(_DWORD *)(i + 104);
      v10 = v9 > 0;
      LODWORD(i) = v9 & ~(v9 >> 31);
      LODWORD(v11) = i >> 8;
      if (v10)
        goto LABEL_19;
      goto LABEL_11;
    case 1:
      v13 = *(_DWORD *)(i + 24);
      v14 = v13 > 0;
      i = v13 & ~(v13 >> 31);
      v11 = (i | (unint64_t)(v14 << 32)) >> 8;
      if (!(_DWORD)v14)
        goto LABEL_11;
      goto LABEL_19;
    case 2:
    case 5:
      v8 = *(_DWORD *)(i + 44);
      goto LABEL_18;
    case 3:
      v8 = *(_DWORD *)(i + 84);
      goto LABEL_18;
    case 4:
      v8 = *(_DWORD *)(i + 64);
LABEL_18:
      v15 = v8 > 0;
      i = v8 & ~(v8 >> 31);
      v11 = (i | (unint64_t)(v15 << 32)) >> 8;
      if (!(_DWORD)v15)
        goto LABEL_11;
LABEL_19:
      v12 = (_DWORD)v11 << 8;
      LOBYTE(v7) = i;
      if (a4)
        goto LABEL_20;
      return 1;
    default:
LABEL_11:
      if (v7 < 1)
        return 1;
      v12 = v7 & 0x7FFFFF00;
      if (!a4)
        return 1;
LABEL_20:
      result = 1000 * (v12 | v7) <= a4;
      break;
  }
  return result;
}

uint64_t webrtc::BalancedDegradationSettings::CanAdaptUpResolution(uint64_t result, int a2, int a3, unsigned int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  int v7;
  int v8;
  int v9;
  _BOOL4 v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v4 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 3);
  if (v4 == 1)
    return 1;
  v5 = 0;
  for (i = *(_QWORD *)result + 236; ; i += 120)
  {
    if (v4 == v5)
      goto LABEL_21;
    ++v5;
    if (*(_DWORD *)(i - 236) >= a3)
      break;
    if (v4 - 1 == v5)
      return 1;
  }
  if (v4 <= v5)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v7 = *(_DWORD *)(i - 104);
  switch(a2)
  {
    case 0:
      v9 = *(_DWORD *)i;
      v10 = v9 > 0;
      LODWORD(i) = v9 & ~(v9 >> 31);
      LODWORD(v11) = i >> 8;
      if (v10)
        goto LABEL_19;
      goto LABEL_11;
    case 1:
      v13 = *(_DWORD *)(i - 80);
      v14 = v13 > 0;
      i = v13 & ~(v13 >> 31);
      v11 = (i | (unint64_t)(v14 << 32)) >> 8;
      if (!(_DWORD)v14)
        goto LABEL_11;
      goto LABEL_19;
    case 2:
    case 5:
      v8 = *(_DWORD *)(i - 60);
      goto LABEL_18;
    case 3:
      v8 = *(_DWORD *)(i - 20);
      goto LABEL_18;
    case 4:
      v8 = *(_DWORD *)(i - 40);
LABEL_18:
      v15 = v8 > 0;
      i = v8 & ~(v8 >> 31);
      v11 = (i | (unint64_t)(v15 << 32)) >> 8;
      if (!(_DWORD)v15)
        goto LABEL_11;
LABEL_19:
      v12 = (_DWORD)v11 << 8;
      LOBYTE(v7) = i;
      if (a4)
        goto LABEL_20;
      return 1;
    default:
LABEL_11:
      if (v7 < 1)
        return 1;
      v12 = v7 & 0x7FFFFF00;
      if (!a4)
        return 1;
LABEL_20:
      result = 1000 * (v12 | v7) <= a4;
      break;
  }
  return result;
}

unint64_t webrtc::BalancedDegradationSettings::GetQpThresholds(unint64_t result, unsigned int a2, int a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_DWORD **)result;
  v4 = *(_DWORD **)(result + 8);
  if (*(_DWORD **)result == v4)
  {
    __break(1u);
  }
  else
  {
    while (*v3 < a3)
    {
      v3 += 30;
      if (v3 == v4)
      {
        v3 = v4 - 30;
        break;
      }
    }
    if (a2 > 5)
      return 0;
    v5 = 8 * (int)a2;
    v6 = *(_QWORD *)&aH_0[v5];
    v7 = *(_DWORD *)((char *)v3 + *(_QWORD *)((char *)&unk_208F05678 + v5));
    v8 = *(_DWORD *)((char *)v3 + v6);
    v9 = v7 <= 0 ? 0 : v7 & 0xFFFFFF00;
    v10 = v8 <= 0 ? 0 : v8 & 0xFFFFFF00;
    if (v7 < 1 || v8 < 1)
    {
      return 0;
    }
    else
    {
      v12 = v9 & 0xFFFFFF00 | (v7 & ~(v7 >> 31));
      v13 = v10 & 0xFFFFFF00 | (v8 & ~(v8 >> 31));
      v14 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
      if ((v14 & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/balanced_degradation_settings.cc");
      return v12 & 0xFFFFFF00 | (unint64_t)(v13 << 32) | v12;
    }
  }
  return result;
}

uint64_t webrtc::`anonymous namespace'::IsValidConfig(int32x2_t *a1)
{
  int8x8_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t v9;

  v1 = (int8x8_t)vcgtz_s32(*a1);
  if (v1.i32[0] != v1.i32[1])
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      goto LABEL_9;
    return 0;
  }
  v9 = (int32x2_t)vorr_s8(vand_s8((int8x8_t)(*(_QWORD *)a1 & 0xFFFFFF00FFFFFF00), v1), vand_s8((int8x8_t)vmax_s32(*a1, 0), (int8x8_t)0xFF000000FFLL));
  if ((v1.i32[0] & v1.i32[1] & vcge_s32(v9, vdup_lane_s32(v9, 1)).u32[0] & 1) != 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      goto LABEL_9;
    return 0;
  }
  if (a1[1].i32[0] >= 101)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_9:
      rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/balanced_degradation_settings.cc");
    return 0;
  }
  return 1;
}

void webrtc::FieldTrialStructList<webrtc::BalancedDegradationSettings::Config>::~FieldTrialStructList(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)a1 = off_24C0AF2A0;
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_24C0B3F90;
  v3 = *(_QWORD **)(a1 + 64);
  if (v3)
  {
    v4 = *(_QWORD **)(a1 + 72);
    v5 = *(void **)(a1 + 64);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v5);
  }
  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v8 = *(void **)(a1 + 8);
    if (!v8)
      goto LABEL_16;
  }
  else
  {
    v8 = *(void **)(a1 + 8);
    if (!v8)
      goto LABEL_16;
  }
  *(_QWORD *)(a1 + 16) = v8;
  operator delete(v8);
LABEL_16:
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::FieldTrialStructList<webrtc::BalancedDegradationSettings::Config>::ParseDone(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19;

  v1 = (_QWORD *)a1[8];
  v2 = (_QWORD *)a1[9];
  if (v1 != v2)
  {
    v4 = -1;
    do
    {
      if (*(_BYTE *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1) + 57))
        return;
      if (*(_BYTE *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1) + 58))
      {
        v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
        v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
        if (v4 == -1)
        {
          v4 = v6;
        }
        else if (v4 != v6)
        {
          return;
        }
      }
      ++v1;
    }
    while (v1 != v2);
    if (v4 != -1)
    {
      if (v4)
      {
        if (v4 < 0)
          goto LABEL_30;
        v7 = v4;
        v8 = (char *)operator new(120 * v4);
        v9 = &v8[120 * v4];
        v10 = v8;
        do
        {
          *(_QWORD *)v10 = 0;
          *((_QWORD *)v10 + 1) = 0;
          *((_DWORD *)v10 + 4) = -100;
          *(_OWORD *)(v10 + 20) = 0uLL;
          *(_OWORD *)(v10 + 36) = 0uLL;
          *(_OWORD *)(v10 + 52) = 0uLL;
          *(_OWORD *)(v10 + 68) = 0uLL;
          *(_OWORD *)(v10 + 84) = 0uLL;
          *(_OWORD *)(v10 + 100) = 0uLL;
          *((_DWORD *)v10 + 29) = 0;
          v10 += 120;
        }
        while (v10 != v9);
        v11 = (_QWORD *)a1[8];
        v12 = (_QWORD *)a1[9];
        if (v11 != v12)
        {
          v13 = v4;
          while (!*(_BYTE *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 24))(*v11) + 58))
          {
LABEL_17:
            if (++v11 == v12)
              goto LABEL_26;
          }
          v14 = 0;
          v15 = v8;
          while (v7 != v14)
          {
            (*(void (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*v11 + 16))(*v11, v15, v14++);
            v15 += 120;
            if (v13 == v14)
              goto LABEL_17;
          }
          __break(1u);
LABEL_30:
          abort();
        }
      }
      else
      {
        v16 = (uint64_t *)a1[8];
        v17 = (uint64_t *)a1[9];
        while (v16 != v17)
        {
          v18 = *v16++;
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        }
        v8 = 0;
        v9 = 0;
      }
LABEL_26:
      v19 = (void *)a1[11];
      a1[11] = v8;
      a1[12] = v9;
      a1[13] = v9;
      if (v19)
        operator delete(v19);
    }
  }
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF2D0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF2D0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_0)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, _DWORD **a2, _DWORD *a3)
{
  **a2 = *a3;
}

uint64_t webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<int>::~TypedFieldTrialListWrapper(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &unk_24C0AF318;
  v2 = (_QWORD *)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 120);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 + 8) = &unk_24C0AF348;
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  *(_QWORD *)(a1 + 8) = off_24C0B4170;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v6 = *(void **)(a1 + 16);
    if (!v6)
      return a1;
    goto LABEL_10;
  }
  v6 = *(void **)(a1 + 16);
  if (v6)
  {
LABEL_10:
    *(_QWORD *)(a1 + 24) = v6;
    operator delete(v6);
  }
  return a1;
}

void webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<int>::~TypedFieldTrialListWrapper(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &unk_24C0AF318;
  v2 = (_QWORD *)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 120);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 + 8) = &unk_24C0AF348;
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  *(_QWORD *)(a1 + 8) = off_24C0B4170;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v6 = *(void **)(a1 + 16);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
    v6 = *(void **)(a1 + 16);
    if (!v6)
      goto LABEL_13;
  }
  *(_QWORD *)(a1 + 24) = v6;
  operator delete(v6);
LABEL_13:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<int>::WriteElement(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = a1[9];
  if (a3 >= (unint64_t)((a1[10] - v3) >> 2))
  {
    __break(1u);
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 4 * a3);
    v9 = a2;
    v8 = v4;
    v5 = a1[15];
    if (v5)
      return (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v5 + 48))(v5, &v9, &v8);
  }
  v7 = std::__throw_bad_function_call[abi:sn180100]();
  return webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<int>::GetList(v7);
}

uint64_t webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<int>::GetList(uint64_t a1)
{
  return a1 + 8;
}

uint64_t webrtc::FieldTrialList<int>::~FieldTrialList(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &unk_24C0AF348;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v3 = *(void **)(a1 + 8);
    if (!v3)
      return a1;
    goto LABEL_5;
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
LABEL_5:
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void webrtc::FieldTrialList<int>::~FieldTrialList(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &unk_24C0AF348;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v3 = *(void **)(a1 + 8);
    if (!v3)
      goto LABEL_8;
  }
  else
  {
    v3 = *(void **)(a1 + 8);
    if (!v3)
      goto LABEL_8;
  }
  *(_QWORD *)(a1 + 16) = v3;
  operator delete(v3);
LABEL_8:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::FieldTrialList<int>::Parse(uint64_t a1, size_t __sz)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  char *v28;
  void *__p;
  char *v31;

  *(_BYTE *)(a1 + 58) = 1;
  if (!*(_BYTE *)(__sz + 24))
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
    return 1;
  }
  if (*(char *)(__sz + 23) < 0)
  {
    v3 = *(_QWORD *)(__sz + 8);
    if ((v3 & 0x8000000000000000) != 0 || (__sz = *(_QWORD *)__sz, v3) && !__sz)
    {
LABEL_47:
      __break(1u);
LABEL_48:
      abort();
    }
  }
  else
  {
    v3 = *(unsigned __int8 *)(__sz + 23);
  }
  rtc::split(__sz, v3, 0x7Cu, (char **)&__p);
  v5 = (char *)__p;
  v6 = v31;
  if (__p != v31)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      while (1)
      {
        v10 = webrtc::ParseTypedParameter<int>(*(char **)v5, *((_QWORD *)v5 + 1));
        if ((v10 & 0xFF00000000) == 0)
        {
          *(_BYTE *)(a1 + 57) = 1;
          if (__p)
          {
            v31 = (char *)__p;
            operator delete(__p);
          }
          v4 = 0;
          if (v7)
            goto LABEL_39;
          return v4;
        }
        v11 = v10;
        if (v8 >= v9)
          break;
        if (!v8)
          goto LABEL_47;
        *(_DWORD *)v8 = v10;
        v8 += 4;
        v5 += 16;
        if (v5 == v6)
        {
LABEL_45:
          v5 = (char *)__p;
          if (__p)
            goto LABEL_37;
          goto LABEL_38;
        }
      }
      v12 = (v8 - v7) >> 2;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        goto LABEL_48;
      if ((v9 - v7) >> 1 > v13)
        v13 = (v9 - v7) >> 1;
      if ((unint64_t)(v9 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v13)
        goto LABEL_47;
      if (v13 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v14 = 4 * v13;
      v15 = operator new(4 * v13);
      v16 = &v15[4 * v12];
      *(_DWORD *)v16 = v11;
      v17 = v16;
      if (v8 != v7)
      {
        v18 = v8 - v7 - 4;
        if (v18 < 0xBC
          || (v21 = (v8 - 4 - v7) & 0xFFFFFFFFFFFFFFFCLL, &v15[v8 - v7 - 4 - v21] > &v15[v8 - v7 - 4])
          || &v8[-v21 - 4] > v8 - 4
          || (unint64_t)(v7 - v15) < 0x20)
        {
          v19 = v8;
          v17 = &v15[4 * v12];
        }
        else
        {
          v22 = (v18 >> 2) + 1;
          v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
          v19 = &v8[-v23];
          v17 = &v16[-v23];
          v24 = &v15[4 * v12 - 16];
          v25 = v8 - 16;
          v26 = v22 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 8;
          }
          while (v26);
          if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_27;
        }
        do
        {
          v20 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v17 - 1) = v20;
          v17 -= 4;
        }
        while (v19 != v7);
      }
LABEL_27:
      v9 = &v15[v14];
      if (v7)
        operator delete(v7);
      v7 = v17;
      v8 = v16 + 4;
      v5 += 16;
      if (v5 == v6)
        goto LABEL_45;
    }
  }
  v9 = 0;
  v8 = 0;
  v7 = 0;
  if (__p)
  {
LABEL_37:
    v31 = v5;
    operator delete(v5);
  }
LABEL_38:
  v28 = *(char **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  v4 = 1;
  v7 = v28;
  if (v28)
LABEL_39:
    operator delete(v7);
  return v4;
}

uint64_t webrtc::FieldTrialList<int>::Size(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 2;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF380;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF380;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_1)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 4) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF3C8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF3C8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_2)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 8) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF410;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF410;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_3)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 12) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF458;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF458;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_4)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 16) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF4A0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF4A0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_5)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 20) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF4E8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF4E8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_6)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 24) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF530;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF530;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_7)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 28) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF578;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF578;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_8)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 32) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF5C0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF5C0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_9)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 36) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF608;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF608;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_10)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 40) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF650;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF650;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_11)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 44) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF698;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF698;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_12)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 48) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF6E0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF6E0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_13)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 52) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF728;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF728;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_14)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 56) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF770;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF770;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_15)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 60) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF7B8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF7B8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_16)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 64) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF800;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF800;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_17)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 68) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF848;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF848;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_18)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 72) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF890;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF890;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_19)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 76) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF8D8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF8D8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_20)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 80) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF920;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF920;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_21)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 84) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF968;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF968;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_22)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 88) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF9B0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF9B0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_23)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 92) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AF9F8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AF9F8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_24)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 96) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AFA40;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AFA40;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_25)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 100) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AFA88;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AFA88;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_26)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 104) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AFAD0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AFAD0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_27)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 108) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AFB18;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AFB18;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_28)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 112) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0AFB60;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0AFB60;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29>>(std::string_view,webrtc::BalancedDegradationSettings::BalancedDegradationSettings(webrtc::FieldTrialsView const&)::$_29)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 116) = *a3;
}

uint64_t webrtc::FieldTrialStructListBase::FieldTrialStructListBase(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v34;
  uint64_t **v35;
  uint64_t v36;

  *(_QWORD *)(a1 + 8) = 0;
  v35 = (uint64_t **)(a1 + 8);
  *(_WORD *)(a1 + 55) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_24C0B3F90;
  *(_QWORD *)(a1 + 64) = 0;
  v34 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  if (a3)
  {
    v4 = a2;
    v5 = &a2[a3];
    do
    {
      v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 24))(*v4);
      v7 = v6;
      v9 = *(uint64_t **)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v9 >= v8)
      {
        v11 = *v35;
        v12 = (char *)v9 - (char *)*v35;
        v13 = v12 >> 3;
        v14 = (v12 >> 3) + 1;
        if (v14 >> 61)
          goto LABEL_32;
        v15 = v8 - (_QWORD)v11;
        if (v15 >> 2 > v14)
          v14 = v15 >> 2;
        v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8;
        v17 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v16)
          v17 = v14;
        if (!v17)
        {
LABEL_31:
          __break(1u);
LABEL_32:
          abort();
        }
        if (v17 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v18 = 8 * v17;
        v19 = operator new(8 * v17);
        v20 = (uint64_t *)&v19[8 * v13];
        *v20 = v7;
        v10 = v20 + 1;
        if (v9 != v11)
        {
          v21 = (char *)v9 - (char *)v11 - 8;
          if (v21 < 0x58)
            goto LABEL_36;
          if ((unint64_t)((char *)v9 - v12 - v19) < 0x20)
            goto LABEL_36;
          v22 = (v21 >> 3) + 1;
          v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          v24 = &v9[v23 / 0xFFFFFFFFFFFFFFF8];
          v20 = (uint64_t *)((char *)v20 - v23);
          v25 = &v19[8 * v13 - 16];
          v26 = v9 - 2;
          v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v28 = *(_OWORD *)v26;
            *(v25 - 1) = *((_OWORD *)v26 - 1);
            *v25 = v28;
            v25 -= 2;
            v26 -= 4;
            v27 -= 4;
          }
          while (v27);
          v9 = v24;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_36:
            do
            {
              v29 = *--v9;
              *--v20 = v29;
            }
            while (v9 != v11);
          }
          v9 = v11;
        }
        *(_QWORD *)(a1 + 8) = v20;
        *(_QWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 24) = &v19[v18];
        if (v9)
          operator delete(v9);
      }
      else
      {
        if (!v9)
          goto LABEL_31;
        *v9 = v6;
        v10 = v9 + 1;
      }
      *(_QWORD *)(a1 + 16) = v10;
      v30 = *v4;
      v36 = *v4;
      v31 = *(_QWORD **)(a1 + 72);
      if ((unint64_t)v31 >= *(_QWORD *)(a1 + 80))
      {
        *(_QWORD *)(a1 + 72) = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>(v34, &v36);
        v32 = v36;
        v36 = 0;
        if (v32)
          goto LABEL_29;
      }
      else
      {
        if (!v31)
          goto LABEL_31;
        v36 = 0;
        *v31 = v30;
        *(_QWORD *)(a1 + 72) = v31 + 1;
        v32 = v36;
        v36 = 0;
        if (v32)
LABEL_29:
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return a1;
}

uint64_t webrtc::BandwidthQualityScaler::BandwidthQualityScaler(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  char v18;
  char v19;
  _QWORD v20[2];
  uint64_t (*v21)(uint64_t, _QWORD **, _QWORD *);
  _QWORD **(*v22)(_QWORD **);

  *(_QWORD *)a1 = &off_24C0AFBA8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = -1;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 100) = 0x45FA000000000000;
  *(int64x2_t *)(a1 + 112) = vdupq_n_s64(0x1388uLL);
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = a1;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v4 = (_QWORD *)operator new();
  *v4 = 1;
  v5 = (unsigned int *)v4 + 1;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v7 = *(_QWORD *)(a1 + 136);
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 4);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      MEMORY[0x20BD0ADEC]();
  }
  *(_QWORD *)(a1 + 136) = v4;
  do
    v11 = __ldxr(v5);
  while (__stxr(v11 + 1, v5));
  v12 = *(_QWORD *)(a1 + 144);
  do
    v13 = __ldxr(v5);
  while (__stxr(v13 + 1, v5));
  do
  {
    v14 = __ldaxr(v5);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v5));
  if (!v15)
    MEMORY[0x20BD0ADEC](v4, 0x1000C404A09149ALL);
  v16 = (_QWORD *)operator new();
  *v16 = v4;
  v16[1] = v12;
  v16[2] = a1;
  v20[0] = v16;
  v21 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::BandwidthQualityScaler::StartCheckForBitrate(void)::$_1>;
  v22 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::BandwidthQualityScaler::StartCheckForBitrate(void)::$_1 &&>;
  v19 = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, char *, char *))(*(_QWORD *)v3 + 16))(v3, v20, 5000000, &v19, &v18);
  v21(1, (_QWORD **)v20, v20);
  return a1;
}

void webrtc::BandwidthQualityScaler::~BandwidthQualityScaler(webrtc::BandwidthQualityScaler *this)
{
  void *v2;
  _BYTE *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_24C0AFBA8;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  *((_QWORD *)this + 18) = 0;
  v3 = (_BYTE *)*((_QWORD *)this + 17);
  if (v3)
  {
    *v3 = 0;
    v4 = (unsigned int *)(v3 + 4);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 17) = 0;
  }
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 4);
}

{
  void *v2;
  _BYTE *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_24C0AFBA8;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  *((_QWORD *)this + 18) = 0;
  v3 = (_BYTE *)*((_QWORD *)this + 17);
  if (v3)
  {
    *v3 = 0;
    v4 = (unsigned int *)(v3 + 4);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 17) = 0;
  }
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 4);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::BandwidthQualityScaler::SetResolutionBitrateLimits(_QWORD *a1, char **a2)
{
  char *v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  void *v9;

  v4 = *a2;
  v5 = a2[1];
  if (v4 == v5)
  {
    v7 = operator new(0x70uLL);
    v8 = (char *)(v7 + 14);
    *v7 = 0;
    v7[1] = 0;
    *((_OWORD *)v7 + 1) = xmmword_208F056B0;
    *((_OWORD *)v7 + 2) = xmmword_208F056C0;
    *((_OWORD *)v7 + 3) = xmmword_208F056D0;
    *((_OWORD *)v7 + 4) = xmmword_208F056E0;
    *((_OWORD *)v7 + 5) = xmmword_208F056F0;
    *((_OWORD *)v7 + 6) = xmmword_208F05700;
    v9 = (void *)a1[19];
    if (v9)
    {
      a1[20] = v9;
      operator delete(v9);
    }
    a1[19] = v7;
    a1[20] = v8;
    a1[21] = v8;
  }
  else
  {
    v6 = a1 + 19;
    if (a1 + 19 != a2)
      std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits>::__assign_with_size[abi:sn180100]<webrtc::VideoEncoder::ResolutionBitrateLimits*,webrtc::VideoEncoder::ResolutionBitrateLimits*>(v6, v4, v5, (v5 - v4) >> 4);
  }
}

_QWORD *std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits>::__assign_with_size[abi:sn180100]<webrtc::VideoEncoder::ResolutionBitrateLimits*,webrtc::VideoEncoder::ResolutionBitrateLimits*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      abort();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

_QWORD **absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::BandwidthQualityScaler::StartCheckForBitrate(void)::$_1 &&>(_QWORD **result)
{
  _BYTE **v1;
  _BYTE *v2;
  _BYTE *v4;
  unint64_t v5;
  __n128 v6;
  char v7;
  uint64_t v8;
  float v9;
  void (*v10)(void);
  float v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  char v30;
  char v31;
  _QWORD *v32;
  int v33;
  uint64_t (*v34)(uint64_t, _QWORD **, _QWORD *);
  uint64_t (*v35)();

  v1 = (_BYTE **)*result;
  v2 = (_BYTE *)**result;
  if (v2)
  {
    if (*v2 && v1[1] != 0)
    {
      v4 = v1[2];
      if (!v4[132])
        goto LABEL_24;
      if (!v4[24])
        goto LABEL_24;
      v5 = webrtc::RateStatistics::Rate((webrtc::RateStatistics *)(v4 + 32), *((_QWORD *)v4 + 2));
      if (!v7)
        goto LABEL_24;
      v8 = v5;
      webrtc::EncoderInfoSettings::GetSinglecastBitrateLimitForResolutionWhenQpIsUntrusted(*((_QWORD *)v4 + 16), (uint64_t)(v4 + 152), (uint64_t)&v32, v6);
      if (!(_BYTE)v34)
        goto LABEL_24;
      v9 = (float)v8;
      if ((float)((float)v33 * 0.95) >= (float)v8)
      {
        v11 = (float)SHIDWORD(v32) * 0.8;
        if (v11 == v9)
          v12 = 0;
        else
          v12 = -127;
        if (v11 < v9)
          v12 = 1;
        if (v11 > v9)
          v12 = -1;
        if (v12 == -127 || (v12 & 0x80) == 0)
        {
LABEL_24:
          v14 = *((_QWORD *)v4 + 17);
          if (v14 && (v15 = atomic_load((unsigned int *)(v14 + 4)), v15 != 1))
          {
            v16 = (_QWORD *)*((_QWORD *)v4 + 17);
            if (!v16)
            {
              v25 = *((_QWORD *)v4 + 18);
LABEL_43:
              v29 = (_QWORD *)operator new();
              *v29 = v16;
              v29[1] = v25;
              v29[2] = v4;
              v32 = v29;
              v34 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::BandwidthQualityScaler::StartCheckForBitrate(void)::$_1>;
              v35 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::BandwidthQualityScaler::StartCheckForBitrate(void)::$_1 &&>;
              v31 = 0;
              (*(void (**)(uint64_t, _QWORD **, uint64_t, char *, char *))(*(_QWORD *)v13 + 16))(v13, &v32, 5000000, &v31, &v30);
              return (_QWORD **)v34(1, &v32, &v32);
            }
          }
          else
          {
            v16 = (_QWORD *)operator new();
            *v16 = 1;
            v17 = (unsigned int *)v16 + 1;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
            v19 = *((_QWORD *)v4 + 17);
            if (v19)
            {
              v20 = (unsigned int *)(v19 + 4);
              do
              {
                v21 = __ldaxr(v20);
                v22 = v21 - 1;
              }
              while (__stlxr(v22, v20));
              if (!v22)
                MEMORY[0x20BD0ADEC]();
            }
            *((_QWORD *)v4 + 17) = v16;
          }
          v23 = (unsigned int *)v16 + 1;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
          v25 = *((_QWORD *)v4 + 18);
          do
            v26 = __ldxr(v23);
          while (__stxr(v26 + 1, v23));
          do
          {
            v27 = __ldaxr(v23);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v23));
          if (!v28)
            MEMORY[0x20BD0ADEC](v16, 0x1000C404A09149ALL);
          goto LABEL_43;
        }
        v10 = *(void (**)(void))(**((_QWORD **)v4 + 1) + 16);
      }
      else
      {
        v10 = *(void (**)(void))(**((_QWORD **)v4 + 1) + 24);
      }
      v10();
      if (v4[132])
        v4[132] = 0;
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::BandwidthQualityScaler::StartCheckForBitrate(void)::$_1>(uint64_t result, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*v3)
      {
        v4 = (unsigned int *)(*v3 + 4);
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          MEMORY[0x20BD0ADEC]();
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t webrtc::BandwidthQualityScalerResource::Create@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  pthread_mutexattr_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = operator new();
  v4 = (char *)operator new(0x20uLL);
  v5 = v4;
  if (v4 <= "BandwidthQualityScalerResource" && v4 + 30 > "BandwidthQualityScalerResource")
    __break(1u);
  strcpy(v4, "BandwidthQualityScalerResource");
  *(_QWORD *)v3 = &unk_24C0C4D88;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 8) = 0u;
  pthread_mutexattr_init(&v9);
  pthread_mutexattr_setpolicy_np(&v9, 3);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 8), &v9);
  result = pthread_mutexattr_destroy(&v9);
  *(_QWORD *)(v3 + 72) = v5;
  *(_OWORD *)(v3 + 80) = xmmword_208F05710;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)v3 = off_24C0AFC48;
  *(_QWORD *)(v3 + 112) = &unk_24C0AFCA0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_DWORD *)(v3 + 128) = 0;
  v7 = (unsigned int *)(v3 + 128);
  *a1 = v3;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  return result;
}

void webrtc::BandwidthQualityScalerResource::StartCheckForOveruse(uint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = operator new();
  if (a1)
    v5 = a1 + 112;
  else
    v5 = 0;
  v6 = (_QWORD *)webrtc::BandwidthQualityScaler::BandwidthQualityScaler(v4, v5);
  v7 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = *(_QWORD **)(a1 + 120);
  }
  webrtc::BandwidthQualityScaler::SetResolutionBitrateLimits(v6, a2);
}

uint64_t webrtc::BandwidthQualityScalerResource::OnReportUsageBandwidthHigh(webrtc::BandwidthQualityScalerResource *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  webrtc::BandwidthQualityScalerResource *v5;

  v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    v5 = this;
    (**(void (***)(webrtc::BandwidthQualityScalerResource *))this)(this);
    (*(void (**)(uint64_t, webrtc::BandwidthQualityScalerResource **, _QWORD))(*(_QWORD *)v3 + 16))(v3, &v5, 0);
    if (v5)
      (*(void (**)(webrtc::BandwidthQualityScalerResource *))(*(_QWORD *)v5 + 8))(v5);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t `non-virtual thunk to'webrtc::BandwidthQualityScalerResource::OnReportUsageBandwidthHigh(webrtc::BandwidthQualityScalerResource *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  void (**v4)(char *);
  char *v6;

  v2 = (pthread_mutex_t *)((char *)this - 104);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this - 104));
  v3 = *((_QWORD *)this - 1);
  if (v3)
  {
    v4 = (void (**)(char *))*((_QWORD *)this - 14);
    v6 = (char *)this - 112;
    (*v4)((char *)this - 112);
    (*(void (**)(uint64_t, char **, _QWORD))(*(_QWORD *)v3 + 16))(v3, &v6, 0);
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t webrtc::BandwidthQualityScalerResource::OnReportUsageBandwidthLow(webrtc::BandwidthQualityScalerResource *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  webrtc::BandwidthQualityScalerResource *v5;

  v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    v5 = this;
    (**(void (***)(webrtc::BandwidthQualityScalerResource *))this)(this);
    (*(void (**)(uint64_t, webrtc::BandwidthQualityScalerResource **, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v5, 1);
    if (v5)
      (*(void (**)(webrtc::BandwidthQualityScalerResource *))(*(_QWORD *)v5 + 8))(v5);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t `non-virtual thunk to'webrtc::BandwidthQualityScalerResource::OnReportUsageBandwidthLow(webrtc::BandwidthQualityScalerResource *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  void (**v4)(char *);
  char *v6;

  v2 = (pthread_mutex_t *)((char *)this - 104);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this - 104));
  v3 = *((_QWORD *)this - 1);
  if (v3)
  {
    v4 = (void (**)(char *))*((_QWORD *)this - 14);
    v6 = (char *)this - 112;
    (*v4)((char *)this - 112);
    (*(void (**)(uint64_t, char **, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v6, 1);
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t rtc::RefCountedObject<webrtc::BandwidthQualityScalerResource>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 128);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::BandwidthQualityScalerResource>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 32;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::BandwidthQualityScalerResource>::~RefCountedObject(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_24C0AFBC8;
  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = &unk_24C0AFC18;
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = &unk_24C0C4D88;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
  return a1;
}

void rtc::RefCountedObject<webrtc::BandwidthQualityScalerResource>::~RefCountedObject(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_24C0AFBC8;
  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = &unk_24C0AFC18;
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = &unk_24C0C4D88;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::BandwidthQualityScalerResource>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 128));
  return v1 == 1;
}

uint64_t `non-virtual thunk to'rtc::RefCountedObject<webrtc::BandwidthQualityScalerResource>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;

  *(a1 - 14) = &unk_24C0AFBC8;
  v2 = a1[1];
  *a1 = &unk_24C0AFC18;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(a1 - 14) = &unk_24C0C4D88;
  if (*((char *)a1 - 17) < 0)
    operator delete((void *)*(a1 - 5));
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 - 13));
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::BandwidthQualityScalerResource>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;

  *(a1 - 14) = &unk_24C0AFBC8;
  v2 = a1[1];
  *a1 = &unk_24C0AFC18;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(a1 - 14) = &unk_24C0C4D88;
  if (*((char *)a1 - 17) < 0)
    operator delete((void *)*(a1 - 5));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 - 13));
  JUMPOUT(0x20BD0ADECLL);
}

std::string *rtc::Base64::EncodeFromArray(std::string *result, unint64_t a2, std::string *this)
{
  std::string *v5;
  int v6;
  unint64_t v7;
  std::string::size_type v8;
  unint64_t v9;
  std::string::size_type v10;
  std::string *v11;
  int v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  std::string::size_type v16;
  std::string::size_type v17;
  int v18;
  std::string::size_type v19;
  std::string::size_type v20;
  char v21;
  std::string *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;

  v5 = result;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
    v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    v7 = (2 * (((a2 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
    if (v6 < 0)
    {
      if (v7)
      {
        result = std::string::append(this, (2 * (((a2 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (a2)
          goto LABEL_8;
      }
      else
      {
        *this->__r_.__value_.__l.__data_ = 0;
        if (a2)
          goto LABEL_8;
      }
      return result;
    }
  }
  else
  {
    LOBYTE(v6) = 0;
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    v7 = (2 * (((a2 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  }
  if (v7 > v6)
  {
    result = std::string::append(this, v7 - v6, 0);
    if (!a2)
      return result;
    goto LABEL_8;
  }
  *((_BYTE *)&this->__r_.__value_.__s + 23) = v7 & 0x7C;
  this->__r_.__value_.__s.__data_[v7] = 0;
  if (a2)
  {
LABEL_8:
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      {
        if (this->__r_.__value_.__l.__size_ < v8)
          goto LABEL_59;
      }
      else if (v10 < v8)
      {
        goto LABEL_59;
      }
      v11 = this;
      if ((v10 & 0x80) != 0)
        v11 = (std::string *)this->__r_.__value_.__r.__words[0];
      v11->__r_.__value_.__s.__data_[v8] = rtc::Base64::Base64Table[(unint64_t)v5->__r_.__value_.__s.__data_[v9] >> 2];
      v12 = 16 * (v5->__r_.__value_.__s.__data_[v9] & 3);
      v13 = v9 + 1;
      if (v9 + 1 < a2)
        v12 |= v5->__r_.__value_.__s.__data_[v13] >> 4;
      v14 = rtc::Base64::Base64Table[v12];
      v15 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      {
        v16 = v8 + 1;
        if (this->__r_.__value_.__l.__size_ < v8 + 1)
          goto LABEL_59;
      }
      else
      {
        v16 = v8 + 1;
        if (v15 < v8 + 1)
          goto LABEL_59;
      }
      if ((v15 & 0x80) != 0)
      {
        v17 = v8 + 2;
        *(_BYTE *)(this->__r_.__value_.__r.__words[0] + v8 + 1) = v14;
        if (v13 >= a2)
          goto LABEL_30;
LABEL_24:
        v18 = 4 * (v5->__r_.__value_.__s.__data_[v13] & 0xF);
        v13 = v9 + 2;
        if (v9 + 2 < a2)
          v18 |= v5->__r_.__value_.__s.__data_[v13] >> 6;
        v19 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          if (this->__r_.__value_.__l.__size_ < v17)
            goto LABEL_59;
        }
        else if (v19 < v17)
        {
          goto LABEL_59;
        }
        v21 = rtc::Base64::Base64Table[v18];
        v22 = this;
        if ((v19 & 0x80) != 0)
          goto LABEL_42;
LABEL_38:
        v22->__r_.__value_.__s.__data_[v8 + 2] = v21;
        v23 = v8 + 3;
        if (v13 >= a2)
          goto LABEL_43;
LABEL_39:
        v24 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          if (this->__r_.__value_.__l.__size_ < v23)
            goto LABEL_59;
        }
        else if (v24 < v23)
        {
          goto LABEL_59;
        }
        v26 = this;
        if ((v24 & 0x80) != 0)
          v26 = (std::string *)this->__r_.__value_.__r.__words[0];
        v26->__r_.__value_.__s.__data_[v8 + 3] = rtc::Base64::Base64Table[v5->__r_.__value_.__s.__data_[v13] & 0x3F];
        v8 = v16 + 3;
        v9 = v13 + 1;
        if (v13 + 1 >= a2)
          return result;
      }
      else
      {
        v17 = v8 + 2;
        this->__r_.__value_.__s.__data_[v8 + 1] = v14;
        if (v13 < a2)
          goto LABEL_24;
LABEL_30:
        v20 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          if (this->__r_.__value_.__l.__size_ < v17)
            goto LABEL_59;
        }
        else if (v20 < v17)
        {
          goto LABEL_59;
        }
        v21 = 61;
        v22 = this;
        if ((v20 & 0x80) == 0)
          goto LABEL_38;
LABEL_42:
        *(_BYTE *)(this->__r_.__value_.__r.__words[0] + v8 + 2) = v21;
        v23 = v8 + 3;
        if (v13 < a2)
          goto LABEL_39;
LABEL_43:
        v25 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          if (this->__r_.__value_.__l.__size_ < v23)
          {
LABEL_59:
            __break(1u);
            return result;
          }
        }
        else if (v25 < v23)
        {
          goto LABEL_59;
        }
        v27 = this;
        if ((v25 & 0x80) != 0)
          v27 = (std::string *)this->__r_.__value_.__r.__words[0];
        v27->__r_.__value_.__s.__data_[v8 + 3] = 61;
        v8 = v16 + 3;
        v9 = v13;
        if (v13 >= a2)
          return result;
      }
    }
  }
  return result;
}

unint64_t rtc::Base64::GetNextQuantum(rtc::Base64 *this, char a2, uint64_t a3, const char *a4, unint64_t *a5, unint64_t *a6, unsigned __int8 *a7, BOOL *a8)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;

  v10 = *a5;
  if ((_DWORD)this == 3)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (v10 < (unint64_t)a4)
    {
      v19 = *(unsigned __int8 *)(a3 + v10);
      v17 = v19 == 61;
      v20 = rtc::Base64::DecodeTable[v19];
      *((_BYTE *)a6 + v13) = v20;
      if (v17)
        v21 = a2;
      else
        v21 = 0;
      if (v20 != 255 && (v21 & 1) == 0 && v20 != 254)
      {
        if (v20 == 253)
        {
          if (v13 >= 2 && v13 + v12 <= 3)
          {
            if (v12)
            {
              ++v12;
            }
            else
            {
              v11 = *a5;
              v12 = 1;
            }
          }
        }
        else
        {
          v12 = 0;
          ++v13;
        }
      }
      v10 = *a5 + 1;
      *a5 = v10;
      if (v13 >= 4)
        goto LABEL_57;
    }
  }
  else if ((_DWORD)this == 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (v10 < (unint64_t)a4)
    {
      v14 = *(unsigned __int8 *)(a3 + v10);
      v17 = v14 == 61;
      v15 = rtc::Base64::DecodeTable[v14];
      *((_BYTE *)a6 + v13) = v15;
      v16 = v17 ? a2 : 0;
      if (v15 == 255 || (v16 & 1) != 0)
        break;
      if (v15 == 253)
      {
        if (v13 < 2 || v13 + v12 > 3)
          break;
        v17 = v12++ == 0;
        v18 = *a5;
        if (v17)
          v11 = *a5;
      }
      else
      {
        v17 = v15 != 254 && v12 == 0;
        if (!v17)
          break;
        v12 = 0;
        ++v13;
        v18 = *a5;
      }
      v10 = v18 + 1;
      *a5 = v10;
      if (v13 >= 4)
        goto LABEL_57;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (v10 < (unint64_t)a4)
    {
      v22 = *(unsigned __int8 *)(a3 + v10);
      v17 = v22 == 61;
      v23 = rtc::Base64::DecodeTable[v22];
      *((_BYTE *)a6 + v13) = v23;
      v24 = v17 ? a2 : 0;
      if (v23 == 255 || (v24 & 1) != 0)
        break;
      if (v23 != 254)
      {
        if (v23 == 253)
        {
          if (v13 < 2 || v13 + v12 > 3)
            break;
          if (v12)
          {
            ++v12;
          }
          else
          {
            v11 = *a5;
            v12 = 1;
          }
        }
        else
        {
          if (v12)
            break;
          ++v13;
        }
      }
      v10 = *a5 + 1;
      *a5 = v10;
      if (v13 >= 4)
        goto LABEL_57;
    }
  }
  bzero((char *)a6 + v13, 4 - v13);
LABEL_57:
  if (v13 + v12 == 4)
  {
    *a7 = 1;
    return v13;
  }
  *a7 = 0;
  if (!v12)
    return v13;
  *a5 = v11;
  return v13;
}

BOOL rtc::Base64::DecodeFromArrayTemplate<std::string>(uint64_t a1, const char *__requested_capacity, char a3, std::string *this, const char **a5)
{
  int v10;
  BOOL *v11;
  rtc::Base64 *v12;
  int v13;
  unint64_t NextQuantum;
  int v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  char v19;
  const char *v20;
  _BOOL4 v22;
  BOOL v23;
  _BYTE v26[13];

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v10 = a3 & 0x30;
  std::string::reserve(this, (std::string::size_type)__requested_capacity);
  *(_QWORD *)&v26[5] = 0;
  v26[4] = 0;
  if (__requested_capacity)
  {
    v12 = (rtc::Base64 *)(a3 & 3);
    v13 = a3 & 0xC;
    while (1)
    {
      NextQuantum = rtc::Base64::GetNextQuantum(v12, v13 == 12, a1, __requested_capacity, (unint64_t *)&v26[5], (unint64_t *)v26, &v26[4], v11);
      v15 = v26[1];
      v16 = (4 * v26[0]) | (v26[1] >> 4) & 3;
      if (NextQuantum < 2)
        break;
      v17 = NextQuantum;
      std::string::push_back(this, (4 * v26[0]) | (v26[1] >> 4) & 3);
      v18 = 16 * v15;
      v19 = v26[2];
      v16 = v18 & 0xFFFFFFF0 | (v26[2] >> 2) & 0xF;
      if (v17 == 2)
        break;
      std::string::push_back(this, v16);
      LOBYTE(v16) = v26[3] | (v19 << 6);
      if (v17 <= 3)
        break;
      std::string::push_back(this, v26[3] | (v19 << 6));
      v20 = *(const char **)&v26[5];
      if (*(_QWORD *)&v26[5] >= (unint64_t)__requested_capacity)
        goto LABEL_25;
    }
    v22 = v13 != 4 || v26[4] != 0;
    if ((_BYTE)v16)
      v23 = v10 == 48;
    else
      v23 = 1;
    if (!v23)
      v22 = 0;
    v20 = *(const char **)&v26[5];
    if (!a5)
      return (v10 != 16 || v20 == __requested_capacity) && v22;
LABEL_26:
    *a5 = v20;
    return (v10 != 16 || v20 == __requested_capacity) && v22;
  }
  v20 = 0;
LABEL_25:
  v22 = 1;
  if (a5)
    goto LABEL_26;
  return (v10 != 16 || v20 == __requested_capacity) && v22;
}

uint64_t rtc::Base64::DecodeFromArrayTemplate<std::vector<unsigned char>>(uint64_t a1, size_t __sz, char a3, uint64_t a4, const char **a5, uint64_t a6, uint64_t a7, BOOL *a8)
{
  const char *v10;
  char *v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  unint64_t NextQuantum;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  __int128 *v33;
  unint64_t v34;
  __int128 v35;
  char *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  int v42;
  char v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  _BYTE *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  size_t v62;
  _BYTE *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  unint64_t v73;
  __int128 v74;
  _QWORD *v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  __int128 *v80;
  unint64_t v81;
  __int128 v82;
  _QWORD *v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  const char **v87;
  int v88;
  _BOOL4 v90;
  BOOL v91;
  unsigned int v92;
  int v95;
  const char *v97;
  unsigned int v98;
  int v99;
  _BYTE v100[13];

  v10 = (const char *)__sz;
  v95 = a3 & 0x30;
  v12 = *(char **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  if (*(_QWORD *)(a4 + 16) - (_QWORD)v12 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      goto LABEL_125;
    v13 = operator new(__sz);
    *(_QWORD *)a4 = v13;
    *(_QWORD *)(a4 + 8) = v13;
    *(_QWORD *)(a4 + 16) = &v10[(_QWORD)v13];
    if (v12)
      operator delete(v12);
    *(_QWORD *)&v100[5] = 0;
    v100[4] = 0;
    goto LABEL_7;
  }
  *(_QWORD *)&v100[5] = 0;
  v100[4] = 0;
  if (__sz)
  {
LABEL_7:
    v98 = a3 & 3;
    v99 = a3 & 0xC;
    v97 = v10;
    while (1)
    {
      NextQuantum = rtc::Base64::GetNextQuantum((rtc::Base64 *)v98, v99 == 12, a1, v10, (unint64_t *)&v100[5], (unint64_t *)v100, &v100[4], a8);
      v17 = v100[1];
      v18 = (4 * v100[0]) | (v100[1] >> 4) & 3;
      if (NextQuantum < 2)
      {
LABEL_101:
        v87 = a5;
        v88 = v95;
        v90 = v99 != 4 || v100[4] != 0;
        if ((_BYTE)v18)
          v91 = v95 == 48;
        else
          v91 = 1;
        v92 = v91 && v90;
        v15 = *(const char **)&v100[5];
        if (a5)
          goto LABEL_114;
        goto LABEL_115;
      }
      v19 = NextQuantum;
      v21 = *(char **)(a4 + 8);
      v20 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v21 >= v20)
        break;
      if (!v21)
        goto LABEL_124;
      *v21 = v18;
      v22 = v21 + 1;
LABEL_40:
      *(_QWORD *)(a4 + 8) = v22;
      v42 = 16 * v17;
      v43 = v100[2];
      v18 = v42 & 0xFFFFFFF0 | (v100[2] >> 2) & 0xF;
      if (v19 == 2)
        goto LABEL_101;
      v44 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v22 < v44)
      {
        *v22 = v18;
        v45 = v22 + 1;
        goto LABEL_60;
      }
      v46 = *(char **)a4;
      v47 = (unint64_t)&v22[-*(_QWORD *)a4];
      v48 = v47 + 1;
      if ((uint64_t)(v47 + 1) < 0)
        goto LABEL_125;
      v49 = v44 - (_QWORD)v46;
      if (2 * v49 > v48)
        v48 = 2 * v49;
      if (v49 >= 0x3FFFFFFFFFFFFFFFLL)
        v50 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      if (!v50)
        goto LABEL_124;
      v51 = operator new(v50);
      v52 = &v51[v50];
      v53 = &v51[v47];
      v51[v47] = v18;
      v45 = &v51[v47 + 1];
      if (v22 == v46)
      {
        *(_QWORD *)a4 = v53;
        *(_QWORD *)(a4 + 8) = v45;
        *(_QWORD *)(a4 + 16) = v52;
LABEL_59:
        operator delete(v22);
        goto LABEL_60;
      }
      if (v47 < 8 || (unint64_t)(v46 - v51) < 0x20)
      {
        v54 = v22;
        goto LABEL_54;
      }
      if (v47 >= 0x20)
      {
        v69 = v47 & 0xFFFFFFFFFFFFFFE0;
        v71 = &v51[v47 - 16];
        v72 = (__int128 *)(v22 - 16);
        v73 = v47 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v74 = *v72;
          *(v71 - 1) = *(v72 - 1);
          *v71 = v74;
          v71 -= 2;
          v72 -= 2;
          v73 -= 32;
        }
        while (v73);
        if (v47 == v69)
          goto LABEL_56;
        if ((v47 & 0x18) == 0)
        {
          v53 -= v69;
          v54 = &v22[-v69];
LABEL_54:
          v55 = v53 - 1;
          do
          {
            v56 = *--v54;
            *v55-- = v56;
          }
          while (v54 != v46);
          goto LABEL_56;
        }
      }
      else
      {
        v69 = 0;
      }
      v54 = &v22[-(v47 & 0xFFFFFFFFFFFFFFF8)];
      v53 -= v47 & 0xFFFFFFFFFFFFFFF8;
      v75 = &v51[&v22[-v69] - v46 - 8];
      v76 = (uint64_t *)&v22[-v69 - 8];
      v77 = v69 - (v47 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v78 = *v76--;
        *v75-- = v78;
        v77 += 8;
      }
      while (v77);
      if (v47 != (v47 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_54;
LABEL_56:
      *(_QWORD *)a4 = v51;
      *(_QWORD *)(a4 + 8) = v45;
      v22 = v46;
      *(_QWORD *)(a4 + 16) = v52;
      if (v46)
        goto LABEL_59;
LABEL_60:
      *(_QWORD *)(a4 + 8) = v45;
      LOBYTE(v18) = v100[3] | (v43 << 6);
      if (v19 < 4)
        goto LABEL_101;
      v57 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v45 >= v57)
      {
        v58 = *(char **)a4;
        v59 = (unint64_t)&v45[-*(_QWORD *)a4];
        v60 = v59 + 1;
        if ((uint64_t)(v59 + 1) < 0)
          goto LABEL_125;
        v61 = v57 - (_QWORD)v58;
        if (2 * v61 > v60)
          v60 = 2 * v61;
        if (v61 >= 0x3FFFFFFFFFFFFFFFLL)
          v62 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (!v62)
        {
LABEL_124:
          __break(1u);
LABEL_125:
          abort();
        }
        v63 = operator new(v62);
        v64 = &v63[v62];
        v65 = &v63[v59];
        v63[v59] = v18;
        v14 = (uint64_t)&v63[v59 + 1];
        if (v45 == v58)
        {
          *(_QWORD *)a4 = v65;
          *(_QWORD *)(a4 + 8) = v14;
          *(_QWORD *)(a4 + 16) = v64;
        }
        else
        {
          if (v59 < 8 || (unint64_t)(v58 - v63) < 0x20)
          {
            v66 = v45;
            goto LABEL_73;
          }
          if (v59 >= 0x20)
          {
            v70 = v59 & 0xFFFFFFFFFFFFFFE0;
            v79 = &v63[v59 - 16];
            v80 = (__int128 *)(v45 - 16);
            v81 = v59 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v82 = *v80;
              *(v79 - 1) = *(v80 - 1);
              *v79 = v82;
              v79 -= 2;
              v80 -= 2;
              v81 -= 32;
            }
            while (v81);
            if (v59 != v70)
            {
              if ((v59 & 0x18) == 0)
              {
                v65 -= v70;
                v66 = &v45[-v70];
                goto LABEL_73;
              }
              goto LABEL_95;
            }
          }
          else
          {
            v70 = 0;
LABEL_95:
            v66 = &v45[-(v59 & 0xFFFFFFFFFFFFFFF8)];
            v65 -= v59 & 0xFFFFFFFFFFFFFFF8;
            v83 = &v63[&v45[-v70] - v58 - 8];
            v84 = (uint64_t *)&v45[-v70 - 8];
            v85 = v70 - (v59 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v86 = *v84--;
              *v83-- = v86;
              v85 += 8;
            }
            while (v85);
            if (v59 != (v59 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_73:
              v67 = v65 - 1;
              do
              {
                v68 = *--v66;
                *v67-- = v68;
              }
              while (v66 != v58);
            }
          }
          *(_QWORD *)a4 = v63;
          *(_QWORD *)(a4 + 8) = v14;
          v45 = v58;
          *(_QWORD *)(a4 + 16) = v64;
          if (!v58)
            goto LABEL_9;
        }
        operator delete(v45);
        goto LABEL_9;
      }
      *v45 = v18;
      v14 = (uint64_t)(v45 + 1);
LABEL_9:
      *(_QWORD *)(a4 + 8) = v14;
      v15 = *(const char **)&v100[5];
      if (*(_QWORD *)&v100[5] >= (unint64_t)v10)
        goto LABEL_122;
    }
    v23 = a1;
    v24 = *(char **)a4;
    v25 = (unint64_t)&v21[-*(_QWORD *)a4];
    v26 = v25 + 1;
    if ((uint64_t)(v25 + 1) < 0)
      goto LABEL_125;
    v27 = v20 - (_QWORD)v24;
    if (2 * v27 > v26)
      v26 = 2 * v27;
    if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
      v28 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (!v28)
      goto LABEL_124;
    v29 = (char *)operator new(v28);
    v30 = &v29[v25];
    v29[v25] = v18;
    v22 = &v29[v25 + 1];
    if (v21 == v24)
    {
LABEL_38:
      a1 = v23;
      *(_QWORD *)a4 = v30;
      *(_QWORD *)(a4 + 8) = v22;
      *(_QWORD *)(a4 + 16) = &v29[v28];
      v10 = v97;
      if (v21)
        operator delete(v21);
      goto LABEL_40;
    }
    if (v25 >= 8 && (unint64_t)(v24 - v29) >= 0x20)
    {
      if (v25 < 0x20)
      {
        v31 = 0;
        goto LABEL_30;
      }
      v31 = v25 & 0xFFFFFFFFFFFFFFE0;
      v32 = &v29[v25 - 16];
      v33 = (__int128 *)(v21 - 16);
      v34 = v25 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 32;
      }
      while (v34);
      if (v25 == v31)
        goto LABEL_37;
      if ((v25 & 0x18) != 0)
      {
LABEL_30:
        v30 -= v25 & 0xFFFFFFFFFFFFFFF8;
        v36 = &v29[&v21[-v31] - v24 - 8];
        v37 = (uint64_t *)&v21[-v31 - 8];
        v38 = v31 - (v25 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v39 = *v37--;
          *(_QWORD *)v36 = v39;
          v36 -= 8;
          v38 += 8;
        }
        while (v38);
        v21 -= v25 & 0xFFFFFFFFFFFFFFF8;
        if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_37;
        goto LABEL_35;
      }
      v30 -= v31;
      v21 -= v31;
    }
LABEL_35:
    v40 = v30 - 1;
    do
    {
      v41 = *--v21;
      *v40-- = v41;
    }
    while (v21 != v24);
LABEL_37:
    v21 = v24;
    v30 = v29;
    goto LABEL_38;
  }
  v15 = 0;
LABEL_122:
  v92 = 1;
  v87 = a5;
  v88 = v95;
  if (a5)
LABEL_114:
    *v87 = v15;
LABEL_115:
  if (v88 != 16 || v15 == v10)
    return v92;
  else
    return 0;
}

uint64_t webrtc::BasicAsyncDnsResolverFactory::Create@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t result;
  unsigned int v9;
  pthread_mutexattr_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C0ACD18;
  v4 = operator new();
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  *(_QWORD *)(v3 + 8) = v4;
  do
    v5 = __ldxr((unsigned int *)v4);
  while (__stxr(v5 + 1, (unsigned int *)v4));
  v6 = operator new();
  v7 = (unsigned int *)(v6 + 8);
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_QWORD *)v6 = &off_24C0ACD80;
  pthread_mutexattr_init(&v10);
  pthread_mutexattr_setpolicy_np(&v10, 3);
  pthread_mutex_init((pthread_mutex_t *)(v6 + 16), &v10);
  result = pthread_mutexattr_destroy(&v10);
  *(_DWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v3 + 16) = v6;
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_QWORD *)(v3 + 24) = off_24C0ACD50;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_BYTE *)(v3 + 96) = 0;
  *(_WORD *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 92) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 56) = &unk_24C0ACDA0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 152) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(v3 + 160) = 0;
  *a1 = v3;
  return result;
}

uint64_t webrtc::BasicAsyncDnsResolverFactory::CreateAndResolve@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _BYTE v13[16];
  __int128 v14;
  pthread_mutexattr_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_QWORD *)v6 = &off_24C0ACD18;
  v7 = operator new();
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_QWORD *)(v6 + 8) = v7;
  do
    v8 = __ldxr((unsigned int *)v7);
  while (__stxr(v8 + 1, (unsigned int *)v7));
  v9 = operator new();
  v10 = (unsigned int *)(v9 + 8);
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_QWORD *)(v9 + 80) = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)v9 = &off_24C0ACD80;
  pthread_mutexattr_init(&v15);
  pthread_mutexattr_setpolicy_np(&v15, 3);
  pthread_mutex_init((pthread_mutex_t *)(v9 + 16), &v15);
  pthread_mutexattr_destroy(&v15);
  *(_DWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v6 + 16) = v9;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  *(_QWORD *)(v6 + 24) = off_24C0ACD50;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 96) = 0;
  *(_WORD *)(v6 + 88) = 0;
  *(_DWORD *)(v6 + 92) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 56) = &unk_24C0ACDA0;
  *(_DWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 152) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(v6 + 160) = 0;
  *a3 = v6;
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a2 + 16))(0, a2, v13);
  v14 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, a1, v13);
  return ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v14)(1, v13, v13);
}

uint64_t webrtc::BasicAsyncDnsResolverFactory::CreateAndResolve@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _BYTE v15[16];
  __int128 v16;
  pthread_mutexattr_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_QWORD *)v8 = &off_24C0ACD18;
  v9 = operator new();
  *(_DWORD *)v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  *(_QWORD *)(v8 + 8) = v9;
  do
    v10 = __ldxr((unsigned int *)v9);
  while (__stxr(v10 + 1, (unsigned int *)v9));
  v11 = operator new();
  v12 = (unsigned int *)(v11 + 8);
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_QWORD *)(v11 + 80) = 0;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_QWORD *)v11 = &off_24C0ACD80;
  pthread_mutexattr_init(&v17);
  pthread_mutexattr_setpolicy_np(&v17, 3);
  pthread_mutex_init((pthread_mutex_t *)(v11 + 16), &v17);
  pthread_mutexattr_destroy(&v17);
  *(_DWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v8 + 16) = v11;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  *(_QWORD *)(v8 + 24) = off_24C0ACD50;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 96) = 0;
  *(_WORD *)(v8 + 88) = 0;
  *(_DWORD *)(v8 + 92) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 56) = &unk_24C0ACDA0;
  *(_DWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 152) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(v8 + 160) = 0;
  *a4 = v8;
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a3 + 16))(0, a3, v15);
  v16 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a3 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 24))(v8, a1, a2, v15);
  return ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v16)(1, v15, v15);
}

void webrtc::BasicAsyncDnsResolverFactory::~BasicAsyncDnsResolverFactory(webrtc::BasicAsyncDnsResolverFactory *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::BasicIceController::BasicIceController(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  *(_QWORD *)a1 = &off_24C0AFD08;
  v4 = a1 + 8;
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      *(_QWORD *)(a1 + 32) = v4;
      (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 24))(a2[3]);
      v6 = (_QWORD *)a2[7];
      if (!v6)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 16))(v5, v4);
      v6 = (_QWORD *)a2[7];
      if (!v6)
      {
LABEL_10:
        *(_QWORD *)(a1 + 64) = 0;
        v7 = (_QWORD *)a2[11];
        if (v7)
          goto LABEL_11;
LABEL_14:
        *(_QWORD *)(a1 + 96) = 0;
        goto LABEL_16;
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    v6 = (_QWORD *)a2[7];
    if (!v6)
      goto LABEL_10;
  }
  if (v6 != a2 + 4)
  {
    *(_QWORD *)(a1 + 64) = (*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    v7 = (_QWORD *)a2[11];
    if (v7)
      goto LABEL_11;
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 64) = a1 + 40;
  (*(void (**)(_QWORD))(*(_QWORD *)a2[7] + 24))(a2[7]);
  v7 = (_QWORD *)a2[11];
  if (!v7)
    goto LABEL_14;
LABEL_11:
  if (v7 == a2 + 8)
  {
    *(_QWORD *)(a1 + 96) = a1 + 72;
    (*(void (**)(_QWORD))(*(_QWORD *)a2[11] + 24))(a2[11]);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = (*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
  }
LABEL_16:
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 116) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 2;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 164) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 172) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 188) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 196) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 204) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 212) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = a2[12];
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_QWORD *)(a1 + 320) = 0;
  return a1;
}

void cricket::BasicIceController::~BasicIceController(cricket::BasicIceController *this)
{
  void *v2;
  cricket::BasicIceController *v3;
  uint64_t v4;
  cricket::BasicIceController *v5;
  uint64_t v6;
  cricket::BasicIceController *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24C0AFD08;
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 38));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 35));
  v2 = (void *)*((_QWORD *)this + 31);
  if (v2)
  {
    *((_QWORD *)this + 32) = v2;
    operator delete(v2);
  }
  v3 = (cricket::BasicIceController *)*((_QWORD *)this + 12);
  if (v3 == (cricket::BasicIceController *)((char *)this + 72))
  {
    v4 = 4;
    v3 = (cricket::BasicIceController *)((char *)this + 72);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (cricket::BasicIceController *)*((_QWORD *)this + 8);
  if (v5 == (cricket::BasicIceController *)((char *)this + 40))
  {
    v6 = 4;
    v5 = (cricket::BasicIceController *)((char *)this + 40);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  v7 = (cricket::BasicIceController *)*((_QWORD *)this + 4);
  if (v7 == (cricket::BasicIceController *)((char *)this + 8))
  {
    v8 = 4;
    v7 = (cricket::BasicIceController *)((char *)this + 8);
  }
  else
  {
    if (!v7)
      return;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
}

{
  cricket::BasicIceController::~BasicIceController(this);
  JUMPOUT(0x20BD0ADECLL);
}

__n128 cricket::BasicIceController::SetIceConfig(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  *(_OWORD *)(a1 + 152) = a2[3];
  *(_OWORD *)(a1 + 136) = v4;
  *(_OWORD *)(a1 + 120) = v3;
  *(_OWORD *)(a1 + 104) = v2;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 212) = *(__int128 *)((char *)a2 + 108);
  *(_OWORD *)(a1 + 200) = v7;
  *(_OWORD *)(a1 + 184) = v6;
  *(__n128 *)(a1 + 168) = result;
  return result;
}

uint64_t cricket::BasicIceController::SetSelectedConnection(uint64_t this, const Connection *a2)
{
  *(_QWORD *)(this + 240) = a2;
  return this;
}

void cricket::BasicIceController::AddConnection(cricket::BasicIceController *this, const Connection *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;

  v5 = (char *)*((_QWORD *)this + 32);
  v4 = *((_QWORD *)this + 33);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    if (v5)
    {
      *(_QWORD *)v5 = a2;
      v7 = v5 + 8;
      goto LABEL_21;
    }
    goto LABEL_33;
  }
  v8 = (char *)*((_QWORD *)this + 31);
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    goto LABEL_34;
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
  v13 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v12)
    v13 = v10;
  if (!v13)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    abort();
  }
  if (v13 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v14 = 8 * v13;
  v15 = (char *)operator new(8 * v13);
  v16 = &v15[v14];
  v17 = &v15[8 * v9];
  *(_QWORD *)v17 = a2;
  v7 = v17 + 8;
  if (v5 != v8)
  {
    v18 = v5 - v8 - 8;
    if (v18 < 0x58)
      goto LABEL_38;
    if ((unint64_t)(v8 - v15) < 0x20)
      goto LABEL_38;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v17 -= v20;
    v21 = &v15[8 * v9 - 16];
    v22 = (__int128 *)(v5 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_38:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v17 - 1) = v25;
        v17 -= 8;
      }
      while (v6 != v8);
    }
    v6 = v8;
  }
  *((_QWORD *)this + 31) = v17;
  *((_QWORD *)this + 32) = v7;
  *((_QWORD *)this + 33) = v16;
  if (v6)
    operator delete(v6);
LABEL_21:
  *((_QWORD *)this + 32) = v7;
  v26 = (uint64_t *)*((_QWORD *)this + 38);
  if (v26)
  {
    while (1)
    {
      while (1)
      {
        v28 = (uint64_t **)v26;
        v29 = v26[4];
        if (v29 <= (unint64_t)a2)
          break;
        v26 = *v28;
        v27 = v28;
        if (!*v28)
          goto LABEL_28;
      }
      if (v29 >= (unint64_t)a2)
        break;
      v26 = v28[1];
      if (!v26)
      {
        v27 = v28 + 1;
        goto LABEL_28;
      }
    }
  }
  else
  {
    v27 = (uint64_t **)((char *)this + 304);
    v28 = (uint64_t **)((char *)this + 304);
LABEL_28:
    v30 = (uint64_t *)operator new(0x28uLL);
    v30[4] = (uint64_t)a2;
    *v30 = 0;
    v30[1] = 0;
    v30[2] = (uint64_t)v28;
    *v27 = v30;
    v31 = **((_QWORD **)this + 37);
    if (v31)
    {
      *((_QWORD *)this + 37) = v31;
      v32 = *v27;
    }
    else
    {
      v32 = v30;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 38), v32);
    ++*((_QWORD *)this + 39);
  }
}

void cricket::BasicIceController::OnConnectionDestroyed(cricket::BasicIceController *this, const Connection *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const Connection **v23;
  const Connection **v24;
  int64_t v25;

  v4 = (uint64_t *)*((_QWORD *)this + 35);
  if (v4)
  {
    v5 = (uint64_t *)((char *)this + 280);
    v6 = v4;
    do
    {
      v7 = v6[4];
      v8 = v7 >= (unint64_t)a2;
      if (v7 >= (unint64_t)a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != (uint64_t *)((char *)this + 280) && v5[4] <= (unint64_t)a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*((uint64_t **)this + 34) == v5)
        *((_QWORD *)this + 34) = v11;
      --*((_QWORD *)this + 36);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v4, v5);
      operator delete(v5);
    }
  }
  v14 = (uint64_t *)*((_QWORD *)this + 38);
  if (v14)
  {
    v15 = (uint64_t *)((char *)this + 304);
    v16 = (_QWORD *)*((_QWORD *)this + 38);
    do
    {
      v17 = v16[4];
      v18 = v17 >= (unint64_t)a2;
      if (v17 >= (unint64_t)a2)
        v19 = v16;
      else
        v19 = v16 + 1;
      if (v18)
        v15 = v16;
      v16 = (_QWORD *)*v19;
    }
    while (*v19);
    if (v15 != (uint64_t *)((char *)this + 304) && v15[4] <= (unint64_t)a2)
    {
      v20 = (uint64_t *)v15[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        v22 = v15;
        do
        {
          v21 = (uint64_t *)v22[2];
          v13 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (!v13);
      }
      if (*((uint64_t **)this + 37) == v15)
        *((_QWORD *)this + 37) = v21;
      --*((_QWORD *)this + 39);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v14, v15);
      operator delete(v15);
    }
  }
  v24 = (const Connection **)*((_QWORD *)this + 31);
  v23 = (const Connection **)*((_QWORD *)this + 32);
  if (v24 != v23)
  {
    while (*v24 != a2)
    {
      if (++v24 == v23)
      {
        v24 = (const Connection **)*((_QWORD *)this + 32);
        break;
      }
    }
  }
  if (v23 == v24)
  {
    __break(1u);
  }
  else
  {
    v25 = (char *)v23 - (char *)(v24 + 1);
    if (v23 != v24 + 1)
      memmove(v24, v24 + 1, (char *)v23 - (char *)(v24 + 1));
    *((_QWORD *)this + 32) = (char *)v24 + v25;
    if (*((const Connection **)this + 30) == a2)
      *((_QWORD *)this + 30) = 0;
  }
}

uint64_t cricket::BasicIceController::HasPingableConnection(cricket::BasicIceController *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  BOOL v8;

  if (!rtc::g_clock)
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v2 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
    v3 = *((_QWORD *)this + 31);
    v4 = *((_QWORD *)this + 32);
    if (v3 != v4)
      goto LABEL_3;
    return 0;
  }
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  v3 = *((_QWORD *)this + 31);
  v4 = *((_QWORD *)this + 32);
  if (v3 == v4)
    return 0;
LABEL_3:
  v5 = v2 / 1000000;
  v6 = v3 + 8;
  do
  {
    result = cricket::BasicIceController::IsPingable(this, *(const Connection **)(v6 - 8), v5);
    if ((result & 1) != 0)
      break;
    v8 = v6 == v4;
    v6 += 8;
  }
  while (!v8);
  return result;
}

uint64_t cricket::BasicIceController::SelectConnectionToPing@<X0>(cricket::BasicIceController *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t i;
  int v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  int *v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  int v19;

  for (i = *((_QWORD *)this + 31); ; i += 8)
  {
    if (i == *((_QWORD *)this + 32))
    {
      v7 = 0;
      v8 = *((_QWORD *)this + 30);
      if (!v8)
        goto LABEL_10;
      goto LABEL_9;
    }
    if (*(_DWORD *)(*(_QWORD *)i + 2328) != 3 && *(int *)(*(_QWORD *)i + 2592) < 3)
      break;
  }
  v7 = 1;
  v8 = *((_QWORD *)this + 30);
  if (!v8)
    goto LABEL_10;
LABEL_9:
  if (!*(_DWORD *)(v8 + 2328) && *(_BYTE *)(v8 + 2332) && ((*(_BYTE *)(v8 + 2333) != 0) & ~v7) != 0)
  {
    v14 = (int *)((char *)this + 160);
    if (!*((_BYTE *)this + 164))
      v14 = (int *)&cricket::STRONG_PING_INTERVAL;
    v10 = *v14;
    if (!*((_BYTE *)this + 180))
    {
LABEL_23:
      if (v10 <= -1)
        v11 = -1;
      else
        v11 = v10;
      v12 = rtc::g_clock;
      if (!rtc::g_clock)
        goto LABEL_27;
LABEL_17:
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
      goto LABEL_30;
    }
  }
  else
  {
LABEL_10:
    v9 = (int *)((char *)this + 168);
    if (!*((_BYTE *)this + 172))
      v9 = (int *)&cricket::WEAK_PING_INTERVAL;
    v10 = *v9;
    if (!*((_BYTE *)this + 180))
      goto LABEL_23;
  }
  if (v10 <= *((_DWORD *)this + 44))
    v11 = *((_DWORD *)this + 44);
  else
    v11 = v10;
  v12 = rtc::g_clock;
  if (rtc::g_clock)
    goto LABEL_17;
LABEL_27:
  if (!dword_253EA791C)
    mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
  result = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
         / dword_253EA791C;
LABEL_30:
  if (result / 1000000 >= a2 + v11)
  {
    result = (*(uint64_t (**)(cricket::BasicIceController *))(*(_QWORD *)this + 88))(this);
    v17 = (int *)((char *)this + 104);
    if (!*((_BYTE *)this + 108))
      v17 = (int *)&cricket::RECEIVING_TIMEOUT;
    v16 = *v17;
    if (result)
    {
      *(_QWORD *)a3 = result;
      v18 = 1;
      goto LABEL_39;
    }
  }
  else
  {
    v15 = (int *)((char *)this + 104);
    if (!*((_BYTE *)this + 108))
      v15 = (int *)&cricket::RECEIVING_TIMEOUT;
    v16 = *v15;
  }
  v18 = 0;
  *(_BYTE *)a3 = 0;
LABEL_39:
  v19 = v16 / 10;
  if (v19 <= 50)
    v19 = 50;
  if (v19 >= v11)
    v19 = v11;
  *(_BYTE *)(a3 + 8) = v18;
  *(_DWORD *)(a3 + 16) = v19;
  return result;
}

void cricket::BasicIceController::MarkConnectionPinged(cricket::BasicIceController *this, const Connection *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;

  if (a2)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 35);
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          v6 = (uint64_t **)v4;
          v7 = v4[4];
          if (v7 <= (unint64_t)a2)
            break;
          v4 = *v6;
          v5 = v6;
          if (!*v6)
            goto LABEL_9;
        }
        if (v7 >= (unint64_t)a2)
          break;
        v4 = v6[1];
        if (!v4)
        {
          v5 = v6 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      v5 = (uint64_t **)((char *)this + 280);
      v6 = (uint64_t **)((char *)this + 280);
LABEL_9:
      v8 = (uint64_t *)operator new(0x28uLL);
      v8[4] = (uint64_t)a2;
      *v8 = 0;
      v8[1] = 0;
      v8[2] = (uint64_t)v6;
      *v5 = v8;
      v9 = **((_QWORD **)this + 34);
      if (v9)
      {
        *((_QWORD *)this + 34) = v9;
        v10 = *v5;
      }
      else
      {
        v10 = v8;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 35), v10);
      ++*((_QWORD *)this + 36);
      v11 = (uint64_t *)*((_QWORD *)this + 38);
      if (v11)
      {
        v12 = (uint64_t *)((char *)this + 304);
        v13 = (_QWORD *)*((_QWORD *)this + 38);
        do
        {
          v14 = v13[4];
          v15 = v14 >= (unint64_t)a2;
          if (v14 >= (unint64_t)a2)
            v16 = v13;
          else
            v16 = v13 + 1;
          if (v15)
            v12 = v13;
          v13 = (_QWORD *)*v16;
        }
        while (*v16);
        if (v12 != (uint64_t *)((char *)this + 304) && v12[4] <= (unint64_t)a2)
        {
          v17 = (uint64_t *)v12[1];
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = (uint64_t *)*v17;
            }
            while (v17);
          }
          else
          {
            v19 = v12;
            do
            {
              v18 = (uint64_t *)v19[2];
              v20 = *v18 == (_QWORD)v19;
              v19 = v18;
            }
            while (!v20);
          }
          if (*((uint64_t **)this + 37) == v12)
            *((_QWORD *)this + 37) = v18;
          --*((_QWORD *)this + 39);
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v11, v12);
          operator delete(v12);
        }
      }
    }
  }
}

char *cricket::BasicIceController::FindNextPingableConnection(cricket::BasicIceController *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string::__raw *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t v33;
  int *v34;
  int v35;
  int *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  void **p_data;
  void **p_size;
  std::string::size_type v44;
  void **v45;
  std::string::size_type v46;
  std::string::size_type v47;
  const Connection **v48;
  const Connection **v49;
  const Connection *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int *v60;
  int v61;
  int v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t *v71;
  _QWORD *v72;
  _QWORD *v73;
  char *v74;
  unint64_t v75;
  uint64_t **v76;
  uint64_t **v77;
  unint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char **v86;
  std::string::size_type size;
  char **v88;
  BOOL v89;
  char *v90;
  char *v91;
  char *v92;
  _BOOL4 v93;
  _BOOL4 v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const void *v100;
  size_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v105;
  unsigned __int16 *v106;
  uint64_t v107;
  int v109;
  int v110;
  _BOOL4 v112;
  uint64_t v113;
  unsigned __int16 *v114;
  uint64_t v115;
  int v117;
  int v118;
  _BOOL4 v120;
  int *v121;
  int v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t v126;
  std::string *p_p;
  void **v128;
  uint64_t v129;
  std::string __p;

  if (rtc::g_clock)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v2 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  v7 = v2 / 1000000;
  v8 = (char *)*((_QWORD *)this + 30);
  if (v8 && v8[2333] && !*((_DWORD *)v8 + 582))
  {
    if (*((int *)v8 + 648) <= 2)
    {
      v60 = (int *)((char *)this + 168);
      if (!*((_BYTE *)this + 172))
        v60 = (int *)&cricket::WEAK_PING_INTERVAL;
      v61 = *v60;
      if (*((_BYTE *)this + 180))
        v62 = *((_DWORD *)this + 44);
      else
        v62 = -1;
      if (v61 <= v62)
        v61 = v62;
      goto LABEL_252;
    }
    goto LABEL_235;
  }
LABEL_9:
  v126 = v7;
  p_p = 0;
  v128 = 0;
  v129 = 0;
  cricket::BasicIceController::GetBestConnectionByNetwork((uint64_t *)&__p, this);
  v9 = (std::string::__raw *)__p.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
  {
    v8 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = v9[1].__words[2];
      if (!*(_DWORD *)(v14 + 2328))
      {
        if (*(_BYTE *)(v14 + 2333))
          break;
      }
LABEL_13:
      v15 = (std::string *)v9->__words[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (std::string *)v15->__r_.__value_.__r.__words[0];
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (std::string *)v9->__words[2];
          v89 = v16->__r_.__value_.__r.__words[0] == (_QWORD)v9;
          v9 = (std::string::__raw *)v16;
        }
        while (!v89);
      }
      v9 = (std::string::__raw *)v16;
      if (v16 == (std::string *)&__p.__r_.__value_.__r.__words[1])
        goto LABEL_48;
    }
    if (v12 < v11)
    {
      if (!v12)
        goto LABEL_256;
      *(_QWORD *)v12 = v14;
      v12 += 8;
      v10 = v12;
      goto LABEL_13;
    }
    v17 = v12 - v13;
    v18 = (v12 - v13) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      goto LABEL_257;
    if ((v11 - v13) >> 2 > v19)
      v19 = (v11 - v13) >> 2;
    if ((unint64_t)(v11 - v13) >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v19)
    {
LABEL_256:
      __break(1u);
LABEL_257:
      abort();
    }
    if (v19 >> 61)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v20 = 8 * v19;
    v21 = operator new(8 * v19);
    v8 = &v21[8 * v18];
    *(_QWORD *)v8 = v14;
    v10 = v8 + 8;
    if (v12 != v13)
    {
      v22 = v12 - v13 - 8;
      if (v22 >= 0x168)
      {
        v25 = (v12 - 8 - v13) & 0xFFFFFFFFFFFFFFF8;
        if (&v21[v17 - 8 - v25] > &v21[v17 - 8])
        {
          v23 = v12;
        }
        else if (&v12[-v25 - 8] > v12 - 8)
        {
          v23 = v12;
        }
        else if ((unint64_t)(v13 - v21) >= 0x20)
        {
          v26 = (v22 >> 3) + 1;
          v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
          v23 = &v12[-v27];
          v8 -= v27;
          v28 = &v21[v17 - 16];
          v29 = v12 - 16;
          v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v31 = *(_OWORD *)v29;
            *(v28 - 1) = *((_OWORD *)v29 - 1);
            *v28 = v31;
            v28 -= 2;
            v29 -= 32;
            v30 -= 4;
          }
          while (v30);
          if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_34;
        }
        else
        {
          v23 = v12;
        }
      }
      else
      {
        v23 = v12;
      }
      do
      {
        v24 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v8 - 1) = v24;
        v8 -= 8;
      }
      while (v23 != v13);
    }
LABEL_34:
    v11 = &v21[v20];
    if (v13)
      operator delete(v13);
    v12 = v10;
    v13 = v8;
    goto LABEL_13;
  }
  v8 = 0;
  v10 = 0;
LABEL_48:
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy((_QWORD *)__p.__r_.__value_.__l.__size_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
  v7 = v126;
  if (v8 != v10)
  {
    v32 = (uint64_t *)v8;
    do
    {
      v33 = *v32;
      if (*(int *)(*v32 + 2592) > 2)
      {
        if (*((_BYTE *)this + 132))
          v36 = (int *)((char *)this + 128);
        else
          v36 = (int *)&cricket::STRONG_AND_STABLE_WRITABLE_CONNECTION_PING_INTERVAL;
        v37 = *v36;
        if (*v36 >= 900)
          v38 = 900;
        else
          v38 = *v36;
        v39 = *((_QWORD *)this + 30);
        if (v39)
        {
          if (!*(_DWORD *)(v39 + 2328))
          {
            if (*(_BYTE *)(v39 + 2332))
            {
              if (*(_BYTE *)(v39 + 2333))
              {
                if (*(int *)(v33 + 2420) >= 5)
                {
                  v40 = *(_QWORD *)(v33 + 2480);
                  if (v40 == *(_QWORD *)(v33 + 2488) || v126 - *(_QWORD *)(v40 + 24) <= 2 * *(int *)(v33 + 2416))
                    v38 = v37;
                }
              }
            }
          }
        }
      }
      else
      {
        if (*((_BYTE *)this + 172))
          v34 = (int *)((char *)this + 168);
        else
          v34 = (int *)&cricket::WEAK_PING_INTERVAL;
        if (*((_BYTE *)this + 180))
          v35 = *((_DWORD *)this + 44);
        else
          v35 = -1;
        v38 = *v34;
        if (v38 <= v35)
          v38 = v35;
      }
      if (*(_QWORD *)(v33 + 2440) + v38 <= v126)
        std::back_insert_iterator<std::vector<cricket::Connection const*>>::operator=[abi:sn180100]((void ***)&__p, v33);
      ++v32;
    }
    while (v32 != (uint64_t *)v10);
  }
  if (v8)
    operator delete(v8);
  v41 = v128;
  p_data = (void **)&p_p->__r_.__value_.__l.__data_;
  if (p_p != (std::string *)v128)
  {
    p_size = (void **)&p_p->__r_.__value_.__l.__size_;
    p_data = (void **)&p_p->__r_.__value_.__l.__data_;
    if (&p_p->__r_.__value_.__r.__words[1] != (std::string::size_type *)v128)
    {
      v44 = p_p->__r_.__value_.__r.__words[0];
      p_data = (void **)&p_p->__r_.__value_.__l.__data_;
      v45 = (void **)&p_p->__r_.__value_.__l.__size_;
      do
      {
        v47 = (std::string::size_type)*v45++;
        v46 = v47;
        if (*(_QWORD *)(v47 + 2440) < *(_QWORD *)(v44 + 2440))
        {
          v44 = v46;
          p_data = p_size;
        }
        p_size = v45;
      }
      while (v45 != v128);
    }
  }
  if (p_data != v128)
  {
    v8 = (char *)*p_data;
    if (!p_p)
      goto LABEL_87;
    goto LABEL_86;
  }
  if (p_p)
  {
LABEL_86:
    v128 = (void **)&p_p->__r_.__value_.__l.__data_;
    operator delete(p_p);
  }
LABEL_87:
  if (p_data != v41)
    return v8;
  while (1)
  {
    v48 = (const Connection **)*((_QWORD *)this + 31);
    v49 = (const Connection **)*((_QWORD *)this + 32);
    if (v48 == v49)
    {
      if (!(*((_QWORD *)this + 39) + *((_QWORD *)this + 36)))
        break;
      goto LABEL_234;
    }
    v8 = 0;
    do
    {
      v50 = *v48;
      if (cricket::BasicIceController::IsPingable(this, *v48, v7))
      {
        if (*((_DWORD *)v50 + 582))
        {
          v51 = *((_QWORD *)v50 + 306);
          if (v51 > *((_QWORD *)v50 + 305) && (!v8 || v51 < *((_QWORD *)v8 + 306)))
            v8 = (char *)v50;
        }
      }
      ++v48;
    }
    while (v48 != v49);
    if (v8)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
        return v8;
      cricket::Connection::ToString((cricket::Connection *)v8, &__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v52, v53, v54, v55, v56, v57, v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_ice_controller.cc");
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v8;
      v59 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_248:
      operator delete(v59);
      return v8;
    }
    if (*((_QWORD *)this + 39) + *((_QWORD *)this + 36) == (uint64_t)(*((_QWORD *)this + 32) - *((_QWORD *)this + 31)) >> 3)
      break;
LABEL_234:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_ice_controller.cc", 173, "connections_.size() == pinged_connections_.size() + unpinged_connections_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v3, v4, v5, v6, v125);
LABEL_235:
    v121 = (int *)((char *)this + 128);
    if (!*((_BYTE *)this + 132))
      v121 = (int *)&cricket::STRONG_AND_STABLE_WRITABLE_CONNECTION_PING_INTERVAL;
    v122 = *v121;
    if (*v121 >= 900)
      v61 = 900;
    else
      v61 = *v121;
    if (v8[2332])
    {
      if (*((int *)v8 + 605) >= 5)
      {
        v123 = *((_QWORD *)v8 + 310);
        if (v123 == *((_QWORD *)v8 + 311) || v7 - *(_QWORD *)(v123 + 24) <= 2 * *((int *)v8 + 604))
          v61 = v122;
      }
    }
LABEL_252:
    if (*((_QWORD *)v8 + 305) + v61 <= v7)
      return v8;
    if (!v8[2332])
      goto LABEL_9;
  }
  v63 = v7;
  v64 = (char *)*((_QWORD *)this + 37);
  v65 = (char *)this + 304;
  if (v64 == (char *)this + 304)
  {
LABEL_111:
    v66 = (char *)*((_QWORD *)this + 34);
    v67 = (char *)this + 280;
    if (v66 == (char *)this + 280)
    {
LABEL_112:
      std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 35));
      *((_QWORD *)this + 35) = 0;
      *((_QWORD *)this + 36) = 0;
      *((_QWORD *)this + 34) = v67;
      goto LABEL_113;
    }
    while (2)
    {
      v71 = (uint64_t *)*((_QWORD *)this + 38);
      v72 = (_QWORD *)((char *)this + 304);
      if (*((char **)this + 37) == v65)
        goto LABEL_131;
      v73 = (_QWORD *)*((_QWORD *)this + 38);
      v74 = (char *)this + 304;
      if (v71)
      {
        do
        {
          v72 = v73;
          v73 = (_QWORD *)v73[1];
        }
        while (v73);
      }
      else
      {
        do
        {
          v72 = (_QWORD *)*((_QWORD *)v74 + 2);
          v89 = *v72 == (_QWORD)v74;
          v74 = (char *)v72;
        }
        while (v89);
      }
      v75 = *((_QWORD *)v66 + 4);
      if (v72[4] < v75)
      {
LABEL_131:
        if (v71)
          v76 = (uint64_t **)v72;
        else
          v76 = (uint64_t **)((char *)this + 304);
        if (v71)
          v77 = (uint64_t **)(v72 + 1);
        else
          v77 = (uint64_t **)((char *)this + 304);
        if (!*v77)
        {
LABEL_146:
          v79 = (uint64_t *)operator new(0x28uLL);
          v79[4] = *((_QWORD *)v66 + 4);
          *v79 = 0;
          v79[1] = 0;
          v79[2] = (uint64_t)v76;
          *v77 = v79;
          v80 = **((_QWORD **)this + 37);
          if (v80)
          {
            *((_QWORD *)this + 37) = v80;
            v81 = *v77;
          }
          else
          {
            v81 = v79;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 38), v81);
          ++*((_QWORD *)this + 39);
        }
      }
      else
      {
        v77 = (uint64_t **)((char *)this + 304);
        v76 = (uint64_t **)((char *)this + 304);
        if (!v71)
          goto LABEL_146;
        while (1)
        {
          while (1)
          {
            v76 = (uint64_t **)v71;
            v78 = v71[4];
            if (v78 <= v75)
              break;
            v71 = *v76;
            v77 = v76;
            if (!*v76)
              goto LABEL_146;
          }
          if (v78 >= v75)
            break;
          v71 = v76[1];
          if (!v71)
          {
            v77 = v76 + 1;
            goto LABEL_146;
          }
        }
      }
      v82 = (char *)*((_QWORD *)v66 + 1);
      if (v82)
      {
        do
        {
          v83 = v82;
          v82 = *(char **)v82;
        }
        while (v82);
      }
      else
      {
        do
        {
          v83 = (char *)*((_QWORD *)v66 + 2);
          v89 = *(_QWORD *)v83 == (_QWORD)v66;
          v66 = v83;
        }
        while (!v89);
      }
      v66 = v83;
      if (v83 == v67)
        goto LABEL_112;
      continue;
    }
  }
  while ((cricket::BasicIceController::IsPingable(this, *((const Connection **)v64 + 4), v63) & 1) == 0)
  {
    v84 = (char *)*((_QWORD *)v64 + 1);
    if (v84)
    {
      do
      {
        v85 = v84;
        v84 = *(char **)v84;
      }
      while (v84);
    }
    else
    {
      do
      {
        v85 = (char *)*((_QWORD *)v64 + 2);
        v89 = *(_QWORD *)v85 == (_QWORD)v64;
        v64 = v85;
      }
      while (!v89);
    }
    v64 = v85;
    if (v85 == v65)
      goto LABEL_111;
  }
LABEL_113:
  memset(&__p, 0, sizeof(__p));
  v68 = (char *)*((_QWORD *)this + 37);
  p_p = &__p;
  if (v68 == v65)
  {
LABEL_246:
    v8 = 0;
    v59 = (void *)__p.__r_.__value_.__r.__words[0];
    if (!__p.__r_.__value_.__r.__words[0])
      return v8;
    goto LABEL_247;
  }
  do
  {
    if (cricket::BasicIceController::IsPingable(this, *((const Connection **)v68 + 4), v63))
      std::back_insert_iterator<std::vector<cricket::Connection const*>>::operator=[abi:sn180100]((void ***)&p_p, *((_QWORD *)v68 + 4));
    v69 = (char *)*((_QWORD *)v68 + 1);
    if (v69)
    {
      do
      {
        v70 = v69;
        v69 = *(char **)v69;
      }
      while (v69);
    }
    else
    {
      do
      {
        v70 = (char *)*((_QWORD *)v68 + 2);
        v89 = *(_QWORD *)v70 == (_QWORD)v68;
        v68 = v70;
      }
      while (!v89);
    }
    v68 = v70;
  }
  while (v70 != v65);
  size = __p.__r_.__value_.__l.__size_;
  v86 = (char **)__p.__r_.__value_.__r.__words[0];
  v88 = (char **)(__p.__r_.__value_.__r.__words[0] + 8);
  v89 = __p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_
     || v88 == (char **)__p.__r_.__value_.__l.__size_;
  if (v89)
  {
    if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
      goto LABEL_246;
    goto LABEL_170;
  }
  while (2)
  {
    v91 = *v86;
    v92 = *v88;
    if (*v86 == *v88)
      goto LABEL_175;
    v90 = *v86;
    if (!*((_BYTE *)this + 124))
      goto LABEL_188;
    v93 = *(_DWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v91 + 16))(*v86) + 208) == 3
       && *(_DWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v91 + 24))(v91) + 208) == 3;
    if (*(_DWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v92 + 16))(v92) + 208) != 3)
    {
      v94 = 0;
      v95 = !v93;
      if (!v93)
        goto LABEL_186;
LABEL_185:
      if (v94)
        goto LABEL_186;
      goto LABEL_173;
    }
    v94 = *(_DWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v92 + 24))(v92) + 208) == 3;
    v95 = !v93;
    if (v93)
      goto LABEL_185;
LABEL_186:
    v96 = !v94;
    if ((v96 | v93) != 1)
      goto LABEL_172;
    if (((v95 | v96) & 1) != 0)
      goto LABEL_188;
    v105 = (*(uint64_t (**)(char *))(*(_QWORD *)v91 + 16))(v91);
    v106 = (unsigned __int16 *)(v105 + 56);
    if (*(char *)(v105 + 79) < 0)
    {
      v107 = *(_QWORD *)(v105 + 64);
      if (v107 < 0)
        goto LABEL_256;
      v106 = *(unsigned __int16 **)v106;
      if (v107 && v106 == 0)
        goto LABEL_256;
    }
    else
    {
      v107 = *(unsigned __int8 *)(v105 + 79);
    }
    if (v107 == 3)
    {
      v109 = *v106;
      v110 = *((unsigned __int8 *)v106 + 2);
      v112 = v109 != (unsigned __int16)cricket::UDP_PROTOCOL_NAME || v110 != 112;
    }
    else
    {
      v112 = 1;
    }
    v113 = (*(uint64_t (**)(char *))(*(_QWORD *)v92 + 16))(v92);
    v114 = (unsigned __int16 *)(v113 + 56);
    if (*(char *)(v113 + 79) < 0)
    {
      v115 = *(_QWORD *)(v113 + 64);
      if (v115 < 0)
        goto LABEL_256;
      v114 = *(unsigned __int16 **)v114;
      if (v115 && v114 == 0)
        goto LABEL_256;
    }
    else
    {
      v115 = *(unsigned __int8 *)(v113 + 79);
    }
    if (v115 == 3)
    {
      v117 = *v114;
      v118 = *((unsigned __int8 *)v114 + 2);
      v120 = v117 == (unsigned __int16)cricket::UDP_PROTOCOL_NAME && v118 == 112;
      if (!v112 && !v120)
        goto LABEL_173;
LABEL_231:
      if (!v120 || v112)
      {
LABEL_188:
        v97 = *((_QWORD *)v91 + 305);
        v98 = *((_QWORD *)v92 + 305);
        if (v97 >= v98)
        {
          v90 = v92;
          if (v97 <= v98)
          {
            v99 = *((_QWORD *)this + 32);
            v100 = (const void *)*((_QWORD *)this + 31);
            v101 = v99 - (_QWORD)v100;
            if (v99 - (uint64_t)v100 < 0)
              goto LABEL_257;
            v102 = (char *)operator new(v99 - (_QWORD)v100);
            memcpy(v102, v100, v101);
            v103 = 0;
            while (1)
            {
              v90 = *(char **)&v102[v103];
              if (v90 == v91 || v90 == v92)
                break;
              v103 += 8;
              if (8 * (v101 >> 3) == v103)
              {
                v90 = *(char **)&v102[8 * (v101 >> 3)];
                break;
              }
            }
            operator delete(v102);
          }
        }
        goto LABEL_173;
      }
LABEL_172:
      v90 = v92;
      goto LABEL_173;
    }
    v120 = 0;
    if (v112)
      goto LABEL_231;
LABEL_173:
    if (v90 == v92)
      v86 = v88;
LABEL_175:
    if (++v88 != (char **)size)
      continue;
    break;
  }
  if (v86 == (char **)__p.__r_.__value_.__l.__size_)
    goto LABEL_246;
LABEL_170:
  v8 = *v86;
  v59 = (void *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
LABEL_247:
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v59;
    goto LABEL_248;
  }
  return v8;
}

BOOL cricket::BasicIceController::WritableConnectionPastPingInterval(cricket::BasicIceController *this, const Connection *a2, uint64_t a3)
{
  int *v3;
  int v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v11;

  if (*((int *)a2 + 648) > 2)
  {
    v6 = (int *)((char *)this + 128);
    if (!*((_BYTE *)this + 132))
      v6 = (int *)&cricket::STRONG_AND_STABLE_WRITABLE_CONNECTION_PING_INTERVAL;
    v7 = *v6;
    if (*v6 >= 900)
      v8 = 900;
    else
      v8 = *v6;
    v9 = *((_QWORD *)this + 30);
    if (v9
      && !*(_DWORD *)(v9 + 2328)
      && *(_BYTE *)(v9 + 2332)
      && *(_BYTE *)(v9 + 2333)
      && *((int *)a2 + 605) >= 5
      && ((v11 = *((_QWORD *)a2 + 310), v11 == *((_QWORD *)a2 + 311))
       || a3 - *(_QWORD *)(v11 + 24) <= 2 * *((int *)a2 + 604)))
    {
      return *((_QWORD *)a2 + 305) + v7 <= a3;
    }
    else
    {
      return *((_QWORD *)a2 + 305) + v8 <= a3;
    }
  }
  else
  {
    v3 = (int *)((char *)this + 168);
    if (!*((_BYTE *)this + 172))
      v3 = (int *)&cricket::WEAK_PING_INTERVAL;
    v4 = *v3;
    if (*((_BYTE *)this + 180))
      v5 = *((_DWORD *)this + 44);
    else
      v5 = -1;
    if (v4 <= v5)
      v4 = v5;
    return *((_QWORD *)a2 + 305) + v4 <= a3;
  }
}

uint64_t cricket::BasicIceController::IsPingable(cricket::BasicIceController *this, const Connection *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  cricket::BasicIceController *v15;

  v6 = (*(uint64_t (**)(const Connection *))(*(_QWORD *)a2 + 24))(a2);
  v7 = *(unsigned __int8 *)(v6 + 183);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(v6 + 168);
  if (!v7)
    return 0;
  v8 = *(unsigned __int8 *)(v6 + 207);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(v6 + 192);
  if (!v8 || *((_DWORD *)a2 + 640) == 3 || !*((_BYTE *)a2 + 2333) && *((_DWORD *)a2 + 582))
    return 0;
  v10 = *((_QWORD *)this + 29);
  if (*(_BYTE *)(v10 + 8))
  {
    if (*(_DWORD *)(v10 + 4) <= (signed int)(-858993459 * ((*((_QWORD *)a2 + 311) - *((_QWORD *)a2 + 310)) >> 3)))
      return 0;
  }
  v11 = *((_QWORD *)this + 30);
  if (!v11 || *(_DWORD *)(v11 + 2328) || !*(_BYTE *)(v11 + 2332) || !*(_BYTE *)(v11 + 2333))
    return 1;
  v12 = *((_QWORD *)this + 4);
  if (v12)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12) != 2
      || *((const Connection **)this + 30) == a2
      || *((_DWORD *)a2 + 582) == 3)
    {
      v13 = *((_DWORD *)a2 + 582);
      if (v13 != 3)
      {
        if (!v13)
          return cricket::BasicIceController::WritableConnectionPastPingInterval(this, a2, a3);
        return 1;
      }
      return 0;
    }
    if (!*((_DWORD *)a2 + 605))
      return 1;
    v14 = (int *)((char *)this + 112);
    if (!*((_BYTE *)this + 116))
      v14 = (int *)&cricket::BACKUP_CONNECTION_PING_INTERVAL;
    return *((_QWORD *)a2 + 308) + *v14 <= a3;
  }
  else
  {
    v15 = (cricket::BasicIceController *)std::__throw_bad_function_call[abi:sn180100]();
    return cricket::BasicIceController::GetBestConnectionByNetwork(v15);
  }
}

uint64_t *cricket::BasicIceController::GetBestConnectionByNetwork(uint64_t *this, _QWORD *a2)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v3 = (uint64_t)this;
  this[1] = 0;
  v4 = (uint64_t **)(this + 1);
  this[2] = 0;
  *this = (uint64_t)(this + 1);
  v5 = (uint64_t *)a2[30];
  if (v5)
  {
    this = (uint64_t *)(*(uint64_t (**)(_QWORD))(*v5 + 32))(a2[30]);
    v6 = this;
    v7 = *v4;
    v8 = v4;
    v9 = v4;
    if (*v4)
    {
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v7;
          v10 = v7[4];
          if ((unint64_t)this >= v10)
            break;
          v7 = *v9;
          v8 = v9;
          if (!*v9)
            goto LABEL_9;
        }
        if (v10 >= (unint64_t)this)
          break;
        v7 = v9[1];
        if (!v7)
        {
          v8 = v9 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      v11 = (uint64_t *)v9;
      v9 = (uint64_t **)operator new(0x30uLL);
      v9[4] = v6;
      v9[5] = 0;
      *v9 = 0;
      v9[1] = 0;
      v9[2] = v11;
      *v8 = (uint64_t *)v9;
      v12 = **(_QWORD **)v3;
      v13 = (uint64_t *)v9;
      if (v12)
      {
        *(_QWORD *)v3 = v12;
        v13 = *v8;
      }
      this = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 8), v13);
      ++*(_QWORD *)(v3 + 16);
    }
    v9[5] = v5;
  }
  v14 = (uint64_t *)a2[31];
  v15 = (uint64_t *)a2[32];
  while (v14 != v15)
  {
    v17 = *v14;
    this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v14 + 32))(*v14);
    v18 = this;
    v19 = *v4;
    v20 = v4;
    v21 = v4;
    if (*v4)
    {
      while (1)
      {
        while (1)
        {
          v21 = (uint64_t **)v19;
          v22 = v19[4];
          if ((unint64_t)this >= v22)
            break;
          v19 = *v21;
          v20 = v21;
          if (!*v21)
            goto LABEL_25;
        }
        if (v22 >= (unint64_t)this)
          break;
        v19 = v21[1];
        if (!v19)
        {
          v20 = v21 + 1;
          goto LABEL_25;
        }
      }
    }
    else
    {
LABEL_25:
      v23 = (uint64_t *)operator new(0x30uLL);
      v23[4] = (uint64_t)v18;
      v23[5] = v17;
      *v23 = 0;
      v23[1] = 0;
      v23[2] = (uint64_t)v21;
      *v20 = v23;
      v24 = **(_QWORD **)v3;
      if (v24)
      {
        *(_QWORD *)v3 = v24;
        v16 = *v20;
      }
      else
      {
        v16 = v23;
      }
      this = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 8), v16);
      ++*(_QWORD *)(v3 + 16);
    }
    ++v14;
  }
  return this;
}

void cricket::BasicIceController::ShouldSwitchConnection(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  if (!a3)
    goto LABEL_14;
  v8 = *(_DWORD *)(a3 + 2328);
  if (v8 >= 2
    && (v8 != 2
     || !*(_BYTE *)(a1 + 136)
     || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3) + 208) != 3
     || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3) + 208) != 3
     && *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3) + 208) != 2))
  {
    goto LABEL_14;
  }
  v9 = *(_QWORD *)(a1 + 240);
  if (v9 == a3)
    goto LABEL_14;
  if (!v9)
  {
    v13 = *(_QWORD *)(a1 + 232);
    if (!*(_BYTE *)(v13 + 16))
    {
      v14 = *(unsigned __int8 *)(v13 + 24);
      if (!v14)
        goto LABEL_78;
    }
    if (rtc::g_clock)
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v15 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    v22 = v15 / 1000000;
    v23 = *(_QWORD *)(a1 + 232);
    if (*(uint64_t *)(a3 + 2448) >= 1 && *(_BYTE *)(v23 + 24))
    {
      v24 = (int *)(v23 + 20);
    }
    else
    {
      if (!*(_BYTE *)(v23 + 16))
      {
        v25 = 0;
        v26 = *(_QWORD *)(a1 + 320);
        if (v26)
          v44 = *(_QWORD *)(a1 + 320);
        else
          v44 = v15 / 1000000;
        if (v22 < v44)
          goto LABEL_56;
        goto LABEL_75;
      }
      v24 = (int *)(v23 + 12);
    }
    v25 = *v24;
    v26 = *(_QWORD *)(a1 + 320);
    if (v26)
      v27 = *(_QWORD *)(a1 + 320);
    else
      v27 = v15 / 1000000;
    if (v22 < v27 + v25)
    {
LABEL_56:
      if (!v26)
      {
        *(_QWORD *)(a1 + 320) = v22;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_ice_controller.cc");
        v23 = *(_QWORD *)(a1 + 232);
      }
      if (*(_BYTE *)(v23 + 16))
      {
        v35 = *(_DWORD *)(v23 + 12);
        if (v35 >= (int)v25)
          v25 = v25;
        else
          v25 = v35;
      }
      if (*(_BYTE *)(v23 + 24))
      {
        v36 = *(_DWORD *)(v23 + 20);
        if (v36 >= (int)v25)
          v25 = v25;
        else
          v25 = v36;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v37, v38, v39, v40, v41, v42, v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_ice_controller.cc");
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = (v25 << 32) | 0xA;
      LOBYTE(v14) = 1;
      goto LABEL_79;
    }
LABEL_75:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v45, v46, v47, v48, v49, v50, v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_ice_controller.cc");
    LOBYTE(v14) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    goto LABEL_78;
  }
  if (cricket::BasicIceController::CompareCandidatePairNetworks(a1, a3, v9) != -1
    || *(_BYTE *)(a3 + 2332))
  {
    v52 = 0;
    if (rtc::g_clock)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v10 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    if (*(_BYTE *)(a1 + 152))
      v16 = (int *)(a1 + 148);
    else
      v16 = (int *)&cricket::RECEIVING_SWITCHING_DELAY;
    v17 = cricket::BasicIceController::CompareConnections(a1, *(_QWORD *)(a1 + 240), (_DWORD *)a3, v10 / 1000000 - *v16, 1, &v52, v11, v12);
    LOBYTE(v14) = v52;
    if (v52)
    {
      if (*(_BYTE *)(a1 + 152))
        v19 = (int *)(a1 + 148);
      else
        v19 = (int *)&cricket::RECEIVING_SWITCHING_DELAY;
      v18 = *v19;
      v20 = a2;
      if (!*v19)
        v20 = 0;
      if (v18)
        v21 = a2 & 0xFFFFFF00;
      else
        v21 = 0;
      LOBYTE(v14) = v18 != 0;
      if (!v18)
        v18 = 0;
      if (v17 < 0)
        goto LABEL_43;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      if (v17 < 0)
      {
LABEL_43:
        LOBYTE(v14) = 0;
LABEL_78:
        *(_QWORD *)a4 = a3;
        *(_BYTE *)(a4 + 8) = 1;
        *(_BYTE *)(a4 + 16) = 0;
        goto LABEL_79;
      }
    }
    if (v17 || *(_DWORD *)(a3 + 2416) > *(_DWORD *)(*(_QWORD *)(a1 + 240) + 2416) - 10)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = v21 | v20;
      *(_DWORD *)(a4 + 20) = v18;
LABEL_79:
      *(_BYTE *)(a4 + 24) = v14;
      goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_14:
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 24) = 0;
LABEL_15:
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 32) = 0;
}

uint64_t cricket::BasicIceController::CompareCandidatePairNetworks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v9;
  int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  int v14;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_QWORD *)(a1 + 216);
  v7 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 272);
  v8 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) + 272) == (_DWORD)v6
    && (v6 & 0xFF00000000) != 0;
  v9 = v7 != (_DWORD)v6 || (v6 & 0xFF00000000) == 0;
  v10 = v9 | v8;
  if (v7 == (_DWORD)v6)
    v8 = 0;
  v11 = v8 << 31 >> 31;
  if (v10)
    result = v11;
  else
    result = 1;
  if (!(_DWORD)result)
  {
    v13 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 272);
    v14 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) + 272);
    switch(*(_DWORD *)(a1 + 224))
    {
      case 1:
      case 3:
        if (v13 == 8 && v14 != 8)
          goto LABEL_41;
        if (v13 != 8 && v14 == 8)
          goto LABEL_40;
        goto LABEL_34;
      case 2:
      case 4:
        if (v13 != 8 || v14 == 8)
        {
          if (v13 != 8 && v14 == 8)
          {
LABEL_41:
            result = 1;
          }
          else
          {
LABEL_34:
            v19 = *(unsigned __int16 *)(a2 + 1098)
                + (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 256) + 312))(*(_QWORD *)(a2 + 256));
            v20 = *(unsigned __int16 *)(a3 + 1098)
                + (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a3 + 256) + 312))(*(_QWORD *)(a3 + 256));
            v21 = v19 >= v20;
            if (v19 <= v20)
              v22 = 0;
            else
              v22 = -1;
            if (v21)
              result = v22;
            else
              result = 1;
          }
        }
        else
        {
LABEL_40:
          result = 0xFFFFFFFFLL;
        }
        break;
      default:
        goto LABEL_34;
    }
  }
  return result;
}

uint64_t cricket::BasicIceController::CompareConnections(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _BYTE *a6, uint64_t a7, uint64_t a8)
{
  char v10;
  int v14;
  _BOOL4 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (!a2)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_ice_controller.cc", 698, "a != nullptr", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, (uint64_t)a6, a7, a8, v27);
    goto LABEL_52;
  }
  if (!a3)
  {
LABEL_52:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_ice_controller.cc", 699, "b != nullptr", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, (uint64_t)a6, a7, a8, v27);
    goto LABEL_53;
  }
  v10 = a5;
  v14 = *(_DWORD *)(a2 + 2328);
  if (!v14)
    goto LABEL_8;
  if (v14 != 2
    || !*(_BYTE *)(a1 + 136)
    || *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) + 208) != 3)
  {
    v15 = 0;
    v16 = a3[582];
    if (!v16)
      goto LABEL_25;
    goto LABEL_11;
  }
  if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) + 208) != 3)
  {
    v15 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) + 208) == 2;
    v16 = a3[582];
    if (!v16)
      goto LABEL_25;
LABEL_11:
    if (v16 == 2)
    {
      v17 = *(unsigned __int8 *)(a1 + 136);
      if (*(_BYTE *)(a1 + 136))
      {
        if (*(_DWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a3 + 16))(a3) + 208) == 3)
        {
          if (*(_DWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a3 + 24))(a3) + 208) == 3)
            goto LABEL_25;
          v17 = *(_DWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a3 + 24))(a3) + 208) == 2;
          if (!v15)
          {
LABEL_20:
            if ((v15 | v17 ^ 1) != 1)
              return 0xFFFFFFFFLL;
            goto LABEL_26;
          }
        }
        else
        {
          v17 = 0;
          if (!v15)
            goto LABEL_20;
        }
LABEL_19:
        if (!v17)
          return 1;
        goto LABEL_20;
      }
    }
    else
    {
      v17 = 0;
    }
    if (!v15)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_8:
  v15 = 1;
  v16 = a3[582];
  if (v16)
    goto LABEL_11;
LABEL_25:
  if (!v15)
    return 0xFFFFFFFFLL;
LABEL_26:
  v18 = *(_DWORD *)(a2 + 2328);
  v19 = a3[582];
  if (v18 < v19)
    return 1;
  if (v19 < v18)
    return 0xFFFFFFFFLL;
  if (*(_BYTE *)(a2 + 2332))
  {
    if (!*((_BYTE *)a3 + 2332))
      return 1;
  }
  else if (*((_BYTE *)a3 + 2332))
  {
    if (!v10 || *(_QWORD *)(a2 + 2472) <= a4 && *((_QWORD *)a3 + 309) <= a4)
      return 0xFFFFFFFFLL;
    *a6 = 1;
  }
  if (!(v19 | v18))
  {
    if (*(_BYTE *)(a2 + 2333))
    {
      if (!*((_BYTE *)a3 + 2333))
        return 1;
    }
    else if (*((_BYTE *)a3 + 2333))
    {
      return 0xFFFFFFFFLL;
    }
  }
  v21 = *(_QWORD *)(a1 + 64);
  if (v21)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21) != 1)
      return cricket::BasicIceController::CompareConnectionCandidates((cricket::BasicIceController *)a1, (const Connection *)a2, (const Connection *)a3);
    v22 = *(_DWORD *)(a2 + 2348);
    v23 = a3[587];
    if (v22 > v23)
      return 1;
    if (v22 >= v23)
    {
      v24 = *(_QWORD *)(a2 + 2456);
      v25 = *((_QWORD *)a3 + 307);
      if (v24 > v25)
        return 1;
      if (v24 >= v25)
        return cricket::BasicIceController::CompareConnectionCandidates((cricket::BasicIceController *)a1, (const Connection *)a2, (const Connection *)a3);
    }
    return 0xFFFFFFFFLL;
  }
LABEL_53:
  v26 = std::__throw_bad_function_call[abi:sn180100]();
  return cricket::BasicIceController::SortAndSwitchConnection(v26);
}

uint64_t cricket::BasicIceController::SortAndSwitchConnection(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t *v11;
  uint64_t *v12;
  const std::nothrow_t *v13;
  unint64_t v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string __p;

  v11 = (uint64_t *)a1[31];
  v12 = (uint64_t *)a1[32];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
  if ((char *)v12 - (char *)v11 < 1025)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(v11, v12, (uint64_t *)&__p, v12 - v11, 0, 0, a7, a8);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      goto LABEL_8;
LABEL_9:
    if (a1[32] != a1[31])
      goto LABEL_10;
LABEL_19:
    v36 = 0;
    return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*a1 + 104))(a1, a2, v36);
  }
  v13 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v14 = v12 - v11;
  while (1)
  {
    v15 = (uint64_t *)operator new(8 * v14, v13);
    if (v15)
      break;
    v16 = v14 > 1;
    v14 >>= 1;
    if (!v16)
      goto LABEL_5;
  }
  v8 = (unint64_t)v15;
  std::__stable_sort<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(v11, v12, (uint64_t *)&__p, v12 - v11, v15, v14, a7, a8);
  operator delete((void *)v8);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
    goto LABEL_9;
LABEL_8:
  cricket::IceSwitchReasonToString(a2, (unint64_t)&__p);
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_ice_controller.cc");
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_9;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (a1[32] == a1[31])
    goto LABEL_19;
LABEL_10:
  v24 = 0;
  do
  {
    result = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>();
    if ((result & 1) == 0)
    {
      v28 = a1[31];
      if (v24 >= (a1[32] - v28) >> 3)
      {
        __break(1u);
        return result;
      }
      v8 = v8 & 0xFFFFFFFF00000000 | 0x1110;
      cricket::Connection::ToString(*(cricket::Connection **)(v28 + 8 * v24), &__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_ice_controller.cc");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    ++v24;
    v25 = (uint64_t *)a1[31];
    v26 = (uint64_t *)a1[32];
  }
  while (v24 < v26 - v25);
  if (v25 == v26)
    goto LABEL_19;
  v36 = *v25;
  return (*(uint64_t (**)(_QWORD *, char *, uint64_t))(*a1 + 104))(a1, a2, v36);
}

uint64_t cricket::BasicIceController::CompareConnectionCandidates(cricket::BasicIceController *this, const Connection *a2, const Connection *a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  cricket::BasicIceController *v17;
  const Connection *v18;

  result = cricket::BasicIceController::CompareCandidatePairNetworks((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  if ((_DWORD)result)
    return result;
  v7 = (*(uint64_t (**)(const Connection *))(*(_QWORD *)a2 + 48))(a2);
  if (v7 > (*(uint64_t (**)(const Connection *))(*(_QWORD *)a3 + 48))(a3))
    return 1;
  v8 = (*(uint64_t (**)(const Connection *))(*(_QWORD *)a2 + 48))(a2);
  if (v8 < (*(uint64_t (**)(const Connection *))(*(_QWORD *)a3 + 48))(a3))
    return 0xFFFFFFFFLL;
  v9 = *(_DWORD *)((*(uint64_t (**)(const Connection *))(*(_QWORD *)a2 + 24))(a2) + 248);
  v10 = (*(uint64_t (**)(const Connection *))(*(_QWORD *)a2 + 40))(a2);
  v11 = *(_DWORD *)((*(uint64_t (**)(const Connection *))(*(_QWORD *)a3 + 24))(a3) + 248);
  v12 = v11 + (*(uint64_t (**)(const Connection *))(*(_QWORD *)a3 + 40))(a3);
  result = (v10 + v9 - v12);
  if (v10 + v9 == v12)
  {
    v18 = a2;
    v13 = *((_QWORD *)this + 12);
    if (!v13
      || (v14 = (*(uint64_t (**)(uint64_t, const Connection **))(*(_QWORD *)v13 + 48))(v13, &v18),
          v18 = a3,
          (v15 = *((_QWORD *)this + 12)) == 0))
    {
      v17 = (cricket::BasicIceController *)std::__throw_bad_function_call[abi:sn180100]();
      return cricket::BasicIceController::PruneConnections(v17);
    }
    v16 = (*(uint64_t (**)(uint64_t, const Connection **))(*(_QWORD *)v15 + 48))(v15, &v18) ^ 1;
    if ((v14 | v16) == 1)
      return ((v14 & v16) << 31 >> 31);
    return 1;
  }
  return result;
}

void cricket::BasicIceController::PruneConnections(cricket::BasicIceController *this@<X0>, const Connection ***a2@<X8>)
{
  const Connection **v4;
  const Connection **v5;
  const Connection **v6;
  const Connection *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;
  unint64_t v21;
  const Connection **v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  _BYTE *v29;
  const Connection **v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const Connection **v35;
  _OWORD *v36;
  const Connection **v37;
  uint64_t v38;
  __int128 v39;
  const Connection *v40;
  uint64_t v41;
  char v42[8];
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  cricket::BasicIceController::GetBestConnectionByNetwork((uint64_t *)&v46, this);
  v4 = (const Connection **)*((_QWORD *)this + 31);
  v5 = (const Connection **)*((_QWORD *)this + 32);
  while (v4 != v5)
  {
    v7 = *v4;
    v8 = (uint64_t *)*((_QWORD *)this + 30);
    v9 = (*(uint64_t (**)(const Connection *))(*(_QWORD *)*v4 + 32))(*v4);
    rtc::Network::GetBestIP(v9, (uint64_t)v42);
    if (v43 == 2)
    {
      if (!(_DWORD)v44)
        goto LABEL_31;
    }
    else if (v43 == 30)
    {
      v50 = *MEMORY[0x24BDAE878];
      if (v44 == (_QWORD)v50 && v45 == *((_QWORD *)&v50 + 1))
        goto LABEL_31;
      v49 = rtc::kV4MappedPrefix;
      if (v44 == (_QWORD)rtc::kV4MappedPrefix && v45 == *((_QWORD *)&v49 + 1))
        goto LABEL_31;
    }
    v12 = (*(uint64_t (**)(const Connection *))(*(_QWORD *)v7 + 32))(v7);
    v13 = (uint64_t *)v12;
    v14 = v47;
    v15 = &v47;
    v16 = &v47;
    if (v47)
    {
      while (1)
      {
        while (1)
        {
          v16 = (uint64_t **)v14;
          v17 = v14[4];
          if (v12 >= v17)
            break;
          v14 = *v16;
          v15 = v16;
          if (!*v16)
            goto LABEL_27;
        }
        if (v17 >= v12)
          break;
        v14 = v16[1];
        if (!v14)
        {
          v15 = v16 + 1;
          goto LABEL_27;
        }
      }
    }
    else
    {
LABEL_27:
      v18 = (uint64_t *)v16;
      v16 = (uint64_t **)operator new(0x30uLL);
      v16[4] = v13;
      v16[5] = 0;
      *v16 = 0;
      v16[1] = 0;
      v16[2] = v18;
      *v15 = (uint64_t *)v16;
      v19 = (uint64_t *)v16;
      if (*v46)
      {
        v46 = (uint64_t *)*v46;
        v19 = *v15;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v47, v19);
      ++v48;
    }
    v8 = v16[5];
LABEL_31:
    if (v8)
      v20 = v7 == (const Connection *)v8;
    else
      v20 = 1;
    if (v20
      || *((_DWORD *)v8 + 582)
      || !*((_BYTE *)v8 + 2332)
      || !*((_BYTE *)v8 + 2333)
      || (cricket::BasicIceController::CompareConnectionCandidates(this, (const Connection *)v8, v7) & 0x80000000) != 0)
    {
      goto LABEL_6;
    }
    v22 = a2[1];
    v21 = (unint64_t)a2[2];
    if ((unint64_t)v22 < v21)
    {
      if (!v22)
        goto LABEL_60;
      *v22 = v7;
      v6 = v22 + 1;
      goto LABEL_5;
    }
    v23 = (char *)*a2;
    v24 = (char *)v22 - (char *)*a2;
    v25 = (v24 >> 3) + 1;
    if (v25 >> 61)
      abort();
    v26 = v21 - (_QWORD)v23;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    v27 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8;
    v28 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v27)
      v28 = v25;
    if (!v28)
    {
LABEL_60:
      __break(1u);
LABEL_61:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    if (v28 >> 61)
      goto LABEL_61;
    v41 = 8 * v28;
    v29 = operator new(8 * v28);
    v30 = (const Connection **)&v29[8 * (v24 >> 3)];
    *v30 = v7;
    v6 = v30 + 1;
    if (v22 == (const Connection **)v23)
    {
      *a2 = v30;
      a2[2] = (const Connection **)&v29[v41];
      if (!v22)
        goto LABEL_5;
LABEL_58:
      operator delete(v22);
      goto LABEL_5;
    }
    v31 = (char *)v22 - v23 - 8;
    if (v31 < 0x58)
    {
      v32 = v41;
      do
      {
LABEL_56:
        v40 = *--v22;
        *--v30 = v40;
      }
      while (v22 != (const Connection **)v23);
      goto LABEL_57;
    }
    v32 = v41;
    if ((unint64_t)((char *)v22 - &v29[v24]) < 0x20)
      goto LABEL_56;
    v33 = (v31 >> 3) + 1;
    v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    v35 = &v22[v34 / 0xFFFFFFFFFFFFFFF8];
    v30 = (const Connection **)((char *)v30 - v34);
    v36 = &v29[v24 - 16];
    v37 = v22 - 2;
    v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 4;
      v38 -= 4;
    }
    while (v38);
    v22 = v35;
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_56;
LABEL_57:
    v22 = (const Connection **)v23;
    *a2 = v30;
    a2[2] = (const Connection **)&v29[v32];
    if (v23)
      goto LABEL_58;
LABEL_5:
    a2[1] = v6;
LABEL_6:
    ++v4;
  }
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v47);
}

uint64_t cricket::BasicIceController::GetUseCandidateAttr(const Connection **a1, Connection *a2, int a3, int a4)
{
  const Connection *v6;
  unsigned int v7;

  if (a3 != 2)
  {
    if (a3 == 1)
    {
      if (a4 == 1)
        return (*((uint64_t (**)(const Connection **, Connection *, _QWORD))*a1 + 10))(a1, a2, 0);
      else
        return 1;
    }
    return 0;
  }
  v6 = a1[30];
  if (a4 == 1)
  {
    if (v6 == a2)
      return *((_DWORD *)a2 + 582) == 0;
    return 0;
  }
  if (!v6 || *((_DWORD *)v6 + 582))
    return 1;
  v7 = cricket::BasicIceController::CompareConnectionCandidates((cricket::BasicIceController *)a1, a1[30], a2) >> 31;
  if (v6 == a2)
    return 1;
  else
    return v7;
}

uint64_t cricket::BasicIceController::GetConnections(cricket::BasicIceController *this)
{
  if (*((_QWORD *)this + 32) == *((_QWORD *)this + 31))
    return 0;
  else
    return *((_QWORD *)this + 31);
}

uint64_t cricket::BasicIceController::connections(cricket::BasicIceController *this)
{
  if (*((_QWORD *)this + 32) == *((_QWORD *)this + 31))
    return 0;
  else
    return *((_QWORD *)this + 31);
}

void ***std::back_insert_iterator<std::vector<cricket::Connection const*>>::operator=[abi:sn180100](void ***a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = *a1;
  v6 = (char *)(*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    if (v6)
    {
      *(_QWORD *)v6 = a2;
      v8 = v6 + 8;
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v9 = (char *)*v4;
  v10 = v6 - (_BYTE *)*v4;
  v11 = v10 >> 3;
  v12 = (v10 >> 3) + 1;
  if (v12 >> 61)
    goto LABEL_23;
  v13 = v5 - (_QWORD)v9;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
  v15 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v14)
    v15 = v12;
  if (!v15)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    abort();
  }
  if (v15 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v16 = 8 * v15;
  v17 = operator new(8 * v15);
  v18 = &v17[v16];
  v19 = &v17[8 * v11];
  *v19 = a2;
  v8 = v19 + 1;
  if (v6 != v9)
  {
    v20 = v6 - v9 - 8;
    if (v20 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(&v6[-v10] - v17) < 0x20)
      goto LABEL_27;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v22];
    v19 = (_QWORD *)((char *)v19 - v22);
    v23 = &v17[8 * v11 - 16];
    v24 = (__int128 *)(v6 - 16);
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v24;
      *(v23 - 1) = *(v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v27 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v19 = v27;
      }
      while (v7 != v9);
    }
    v7 = v9;
  }
  *v4 = v19;
  v4[1] = v8;
  v4[2] = v18;
  if (v7)
    operator delete(v7);
LABEL_21:
  v4[1] = v8;
  return a1;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __n128 result;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  __int128 v66;

  if (a4 < 2)
    return result;
  v10 = a1;
  if (a4 != 2)
  {
    if ((uint64_t)a4 <= 128)
    {
      if (a1 == a2)
        return result;
      v16 = a1 + 1;
      if (a1 + 1 == a2)
        return result;
      v17 = 0;
      v18 = a1;
LABEL_13:
      v19 = v18;
      v18 = v16;
      v20 = *v16;
      v21 = *v19;
      v22 = cricket::BasicIceController::CompareConnections(*a3, *v16, (_DWORD *)*v19, 0, 0, 0, a7, a8);
      if (v22)
      {
        if (v22 <= 0)
          goto LABEL_12;
      }
      else if (*(_DWORD *)(v20 + 2416) >= *(_DWORD *)(v21 + 2416))
      {
        goto LABEL_12;
      }
      v23 = *v18;
      *v18 = *v19;
      if (v19 == v10)
      {
LABEL_10:
        v19 = v10;
        goto LABEL_11;
      }
      v24 = v17;
      while (1)
      {
        v25 = *(_DWORD **)((char *)v10 + v24 - 8);
        v26 = cricket::BasicIceController::CompareConnections(*a3, v23, v25, 0, 0, 0, a7, a8);
        if (v26)
        {
          if (v26 <= 0)
            goto LABEL_11;
        }
        else if (*(_DWORD *)(v23 + 2416) >= v25[604])
        {
          v19 = (uint64_t *)((char *)v10 + v24);
LABEL_11:
          *v19 = v23;
LABEL_12:
          v16 = v18 + 1;
          v17 += 8;
          if (v18 + 1 == a2)
            return result;
          goto LABEL_13;
        }
        --v19;
        *(uint64_t *)((char *)v10 + v24) = *(uint64_t *)((char *)v10 + v24 - 8);
        v24 -= 8;
        if (!v24)
          goto LABEL_10;
      }
    }
    v28 = a4 >> 1;
    v29 = &a1[a4 >> 1];
    v30 = a4 >> 1;
    if ((uint64_t)a4 > a6)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(a1, v29, a3, v30, a5, a6);
      std::__stable_sort<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(&v10[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
      result.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(v10, &v10[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), (uint64_t)a5, a6).n128_u64[0];
      return result;
    }
    std::__stable_sort_move<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(a1, v29, a3, v30, a5, a6, a7, a8);
    v32 = &a5[v28];
    result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(&v10[a4 >> 1], a2, a3, a4 - (a4 >> 1), v32, v33, v34, v35).n128_u64[0];
    v38 = v32;
    v39 = a5;
    v40 = v10;
    v41 = &a5[a4];
    while (1)
    {
      if (v38 == v41)
      {
        if (v39 == v32)
          return result;
        v51 = (char *)&a5[a4 >> 1] - (char *)v39 - 8;
        if (v51 >= 0x38 && (unint64_t)((char *)v10 - (char *)v39) >= 0x20)
        {
          v61 = 0;
          v62 = (v51 >> 3) + 1;
          v63 = v62 & 0x3FFFFFFFFFFFFFFCLL;
          v52 = &v39[v63];
          v53 = &v40[v63];
          v64 = v62 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v65 = &v40[v61];
            result = *(__n128 *)&v39[v61];
            v66 = *(_OWORD *)&v39[v61 + 2];
            *(__n128 *)v65 = result;
            *((_OWORD *)v65 + 1) = v66;
            v61 += 4;
            v64 -= 4;
          }
          while (v64);
          if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v52 = v39;
          v53 = v40;
        }
        do
        {
          v54 = *v52++;
          *v53++ = v54;
        }
        while (v52 != v32);
        return result;
      }
      v43 = *v38;
      v44 = *v39;
      v45 = cricket::BasicIceController::CompareConnections(*a3, *v38, (_DWORD *)*v39, 0, 0, 0, v36, v37);
      if (v45)
      {
        if (v45 <= 0)
          goto LABEL_31;
LABEL_37:
        v46 = *v38++;
        *v40++ = v46;
        ++v10;
        if (v39 == v32)
        {
LABEL_38:
          if (v38 == v41)
            return result;
          v47 = (char *)&a5[a4] - (char *)v38 - 8;
          if (v47 < 0x48 || (unint64_t)((char *)v10 - (char *)v38) < 0x20)
          {
            v48 = v38;
            v49 = v40;
            do
            {
LABEL_42:
              v50 = *v48++;
              *v49++ = v50;
            }
            while (v48 != v41);
            return result;
          }
          v55 = 0;
          v56 = (v47 >> 3) + 1;
          v57 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          v48 = &v38[v57];
          v49 = &v40[v57];
          v58 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v59 = &v40[v55];
            result = *(__n128 *)&v38[v55];
            v60 = *(_OWORD *)&v38[v55 + 2];
            *(__n128 *)v59 = result;
            *((_OWORD *)v59 + 1) = v60;
            v55 += 4;
            v58 -= 4;
          }
          while (v58);
          if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_42;
          return result;
        }
      }
      else
      {
        if (*(_DWORD *)(v43 + 2416) < *(_DWORD *)(v44 + 2416))
          goto LABEL_37;
LABEL_31:
        v42 = *v39++;
        *v40++ = v42;
        ++v10;
        if (v39 == v32)
          goto LABEL_38;
      }
    }
  }
  v11 = *(a2 - 1);
  v12 = *a1;
  v13 = cricket::BasicIceController::CompareConnections(*a3, v11, (_DWORD *)*a1, 0, 0, 0, a7, a8);
  if (v13)
  {
    if (v13 <= 0)
      return result;
  }
  else if (*(_DWORD *)(v11 + 2416) >= *(_DWORD *)(v12 + 2416))
  {
    return result;
  }
  v31 = *v10;
  *v10 = *(a2 - 1);
  *(a2 - 1) = v31;
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  __n128 result;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  __int128 v65;

  if (!a4)
    return result;
  v8 = a5;
  if (a4 == 1)
  {
    v14 = a1;
LABEL_44:
    *v8 = *v14;
    return result;
  }
  v12 = a2;
  if (a4 == 2)
  {
    v14 = a2 - 1;
    v13 = *(a2 - 1);
    v15 = *a1;
    v16 = cricket::BasicIceController::CompareConnections(*a3, v13, (_DWORD *)*a1, 0, 0, 0, a7, a8);
    if (v16)
    {
      if (v16 > 0)
      {
LABEL_6:
        v18 = v14;
        v14 = a1;
LABEL_43:
        *v8++ = *v18;
        goto LABEL_44;
      }
    }
    else if (*(_DWORD *)(v13 + 2416) < *(_DWORD *)(v15 + 2416))
    {
      goto LABEL_6;
    }
    v18 = a1;
    goto LABEL_43;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (a1 == a2)
      return result;
    v19 = a1 + 1;
    *a5 = *a1;
    if (a1 + 1 == a2)
      return result;
    v20 = 0;
    v21 = a5;
LABEL_15:
    v24 = v21;
    v26 = (_DWORD *)*v21++;
    v25 = v26;
    v27 = *v19;
    v28 = cricket::BasicIceController::CompareConnections(*a3, *v19, v26, 0, 0, 0, a7, a8);
    if (v28)
    {
      v22 = v21;
      if (v28 <= 0)
        goto LABEL_14;
    }
    else
    {
      v22 = v21;
      if (*(_DWORD *)(v27 + 2416) >= v25[604])
        goto LABEL_14;
    }
    v24[1] = *v24;
    v22 = v8;
    if (v24 == v8)
      goto LABEL_14;
    v29 = v20;
    while (1)
    {
      v30 = *v19;
      v31 = *(_DWORD **)((char *)v8 + v29 - 8);
      v32 = cricket::BasicIceController::CompareConnections(*a3, *v19, v31, 0, 0, 0, a7, a8);
      if (v32)
      {
        if (v32 <= 0)
        {
          v22 = v24;
          goto LABEL_13;
        }
      }
      else if (*(_DWORD *)(v30 + 2416) >= v31[604])
      {
        v22 = (uint64_t *)((char *)v8 + v29);
LABEL_13:
        v12 = a2;
LABEL_14:
        v23 = *v19++;
        *v22 = v23;
        v20 += 8;
        if (v19 == v12)
          return result;
        goto LABEL_15;
      }
      --v24;
      *(uint64_t *)((char *)v8 + v29) = *(uint64_t *)((char *)v8 + v29 - 8);
      v29 -= 8;
      if (!v29)
      {
        v22 = v8;
        goto LABEL_13;
      }
    }
  }
  v33 = a4 >> 1;
  v34 = a4 >> 1;
  v35 = &a1[v34];
  std::__stable_sort<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(a1, &a1[v34], a3, a4 >> 1, a5, a4 >> 1);
  std::__stable_sort<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(&a1[v34], v12, a3, a4 - v33, &v8[v34], a4 - v33);
  v38 = v8;
  v39 = (char *)a1;
  v40 = v35;
  do
  {
    while (1)
    {
      if (v40 == a2)
      {
        if (v39 == (char *)v35)
          return result;
        v50 = (char *)&a1[v33] - v39 - 8;
        if (v50 >= 0x38 && (unint64_t)((char *)v38 - v39) >= 0x20)
        {
          v60 = 0;
          v61 = (v50 >> 3) + 1;
          v62 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          v51 = &v8[v62];
          v52 = &v39[v62 * 8];
          v63 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v64 = &v8[v60];
            result = *(__n128 *)&v39[v60 * 8];
            v65 = *(_OWORD *)&v39[v60 * 8 + 16];
            *(__n128 *)v64 = result;
            *((_OWORD *)v64 + 1) = v65;
            v60 += 4;
            v63 -= 4;
          }
          while (v63);
          if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v51 = v8;
          v52 = v39;
        }
        do
        {
          v53 = *(_QWORD *)v52;
          v52 += 8;
          *v51++ = v53;
        }
        while (v52 != (char *)v35);
        return result;
      }
      v42 = *v40;
      v43 = *(_QWORD *)v39;
      v44 = cricket::BasicIceController::CompareConnections(*a3, *v40, *(_DWORD **)v39, 0, 0, 0, v36, v37);
      if (v44)
        break;
      if (*(_DWORD *)(v42 + 2416) >= *(_DWORD *)(v43 + 2416))
        goto LABEL_34;
LABEL_28:
      v41 = *v40++;
      *v8++ = v41;
      ++v38;
      if (v39 == (char *)v35)
        goto LABEL_35;
    }
    if (v44 > 0)
      goto LABEL_28;
LABEL_34:
    v45 = *(_QWORD *)v39;
    v39 += 8;
    *v8++ = v45;
    ++v38;
  }
  while (v39 != (char *)v35);
LABEL_35:
  if (v40 == a2)
    return result;
  v46 = (char *)a2 - (char *)v40 - 8;
  if (v46 < 0x48 || (unint64_t)((char *)v38 - (char *)v40) < 0x20)
  {
    v47 = v8;
    v48 = v40;
    do
    {
LABEL_39:
      v49 = *v48++;
      *v47++ = v49;
    }
    while (v48 != a2);
    return result;
  }
  v54 = 0;
  v55 = (v46 >> 3) + 1;
  v56 = v55 & 0x3FFFFFFFFFFFFFFCLL;
  v47 = &v8[v56];
  v48 = &v40[v56];
  v57 = v55 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v58 = &v8[v54];
    result = *(__n128 *)&v40[v54];
    v59 = *(_OWORD *)&v40[v54 + 2];
    *(__n128 *)v58 = result;
    *((_OWORD *)v58 + 1) = v59;
    v54 += 4;
    v57 -= 4;
  }
  while (v57);
  if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_39;
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v9;
  char *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  __n128 result;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  char *v39;
  _DWORD *v40;
  uint64_t *v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int64_t v52;
  size_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  BOOL v76;
  char v77;
  uint64_t v78;
  int64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  __n128 *v85;
  __n128 *v86;
  uint64_t v87;
  __n128 v88;
  unint64_t v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  __n128 *v94;
  __n128 *v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  char *v111;
  uint64_t *v112;
  _DWORD *v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  uint64_t *v117;
  char *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  char *__src;
  char *__srca;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t *v135;

  v132 = a6;
  if (!a6)
    return result;
  v8 = a8;
  v9 = (char *)a7;
  while (a5 > v8 && v132 > v8)
  {
    if (!a5)
      return result;
    v12 = 0;
    v13 = -a5;
    v135 = a1;
    while (1)
    {
      v15 = a2;
      v16 = *a2;
      v17 = *(_DWORD **)&v12[(_QWORD)a1];
      v18 = cricket::BasicIceController::CompareConnections(*a4, *a2, v17, 0, 0, 0, a7, a8);
      if (!v18)
      {
        if (*(_DWORD *)(v16 + 2416) < v17[604])
          break;
        goto LABEL_8;
      }
      if (v18 > 0)
        break;
LABEL_8:
      v12 += 8;
      v14 = __CFADD__(v13++, 1);
      a1 = v135;
      a2 = v15;
      if (v14)
        return result;
    }
    v20 = -v13;
    v21 = v135;
    v22 = (uint64_t *)&v12[(_QWORD)v135];
    v23 = v132;
    v24 = v15;
    v130 = v8;
    v131 = a3;
    if (-v13 >= v132)
    {
      if (v13 == -1)
      {
        v105 = *(_QWORD *)&v12[(_QWORD)v135];
        *(_QWORD *)&v12[(_QWORD)v135] = *v15;
        *v15 = v105;
        return result;
      }
      if (v13 > 0)
        v20 = 1 - v13;
      v129 = v20 >> 1;
      v22 = (uint64_t *)((char *)&v135[v20 >> 1] + (_QWORD)v12);
      __srca = v9;
      v35 = 0;
      if (v15 == a3)
      {
LABEL_28:
        v26 = &v24[v35];
        v36 = (8 * v35) >> 3;
        v27 = v22;
        v9 = __srca;
        v21 = v135;
        v23 = v132;
        v37 = v26;
        if (v22 != v24)
          goto LABEL_32;
        goto LABEL_48;
      }
      v134 = *a4;
      v43 = a3 - v15;
      while (2)
      {
        v44 = v43 >> 1;
        v45 = v35;
        v46 = (v43 >> 1) + v35;
        v47 = v24[v46];
        v48 = v22;
        v49 = *v22;
        v50 = cricket::BasicIceController::CompareConnections(v134, v47, (_DWORD *)*v22, 0, 0, 0, a7, a8);
        if (v50)
        {
          v24 = v15;
          v22 = v48;
          v35 = v45;
          if (v50 <= 0)
            goto LABEL_40;
        }
        else
        {
          v24 = v15;
          v22 = v48;
          v35 = v45;
          if (*(_DWORD *)(v47 + 2416) >= *(_DWORD *)(v49 + 2416))
          {
LABEL_40:
            v43 = v44;
            if (!v44)
              goto LABEL_28;
            continue;
          }
        }
        break;
      }
      v35 = v46 + 1;
      v44 = v43 + ~v44;
      goto LABEL_40;
    }
    if (v132 >= 0)
      v25 = v132;
    else
      v25 = v132 + 1;
    v126 = v25 >> 1;
    v26 = &v15[v25 >> 1];
    v27 = v15;
    if ((char *)((char *)v15 - (char *)v135) != v12)
    {
      v133 = &v15[v25 >> 1];
      __src = v9;
      v28 = ((char *)v15 - (char *)v135 - (uint64_t)v12) >> 3;
      v22 = (uint64_t *)&v12[(_QWORD)v135];
      while (1)
      {
        v29 = v28 >> 1;
        v30 = v22;
        v31 = &v22[v28 >> 1];
        v32 = *v133;
        v33 = *v31;
        v34 = cricket::BasicIceController::CompareConnections(*a4, *v133, (_DWORD *)*v31, 0, 0, 0, a7, a8);
        if (v34)
        {
          v22 = v30;
          if (v34 > 0)
            goto LABEL_18;
        }
        else
        {
          v22 = v30;
          if (*(_DWORD *)(v32 + 2416) < *(_DWORD *)(v33 + 2416))
            goto LABEL_18;
        }
        v22 = v31 + 1;
        v29 = v28 + ~v29;
LABEL_18:
        v28 = v29;
        if (!v29)
        {
          v27 = v22;
          v9 = __src;
          v26 = v133;
          v21 = v135;
          v24 = v15;
          v23 = v132;
          break;
        }
      }
    }
    v129 = ((char *)v27 - (char *)v21 - (uint64_t)v12) >> 3;
    v35 = v126;
    v36 = v126;
    v37 = v26;
    if (v22 != v24)
    {
LABEL_32:
      v37 = v27;
      if (v35)
      {
        v38 = v22 + 1;
        if (v22 + 1 == v24)
        {
          v39 = v9;
          v51 = *v22;
          v52 = (char *)v26 - (char *)v24;
          v53 = (char *)v26 - (char *)v24;
          v54 = v26;
          v55 = v22;
          memmove(v22, v24, v53);
          v21 = v135;
          v37 = (uint64_t *)((char *)v55 + v52);
          v26 = v54;
          *v37 = v51;
          goto LABEL_47;
        }
        if (v35 == 1)
        {
          v39 = v9;
          v40 = (_DWORD *)*v24;
          v37 = v27 + 1;
          if (v24 != v22)
          {
            v41 = v26;
            v42 = v22;
            memmove(v27 + 1, v22, (char *)v24 - (char *)v27);
            v22 = v42;
            v26 = v41;
            v21 = v135;
          }
          *v22 = (uint64_t)v40;
LABEL_47:
          v9 = v39;
          v23 = v132;
        }
        else
        {
          v59 = v35;
          v60 = v24 - v27;
          v61 = v26 - v24;
          if (v60 == v61)
          {
            v62 = 8 * v59 - 8;
            v63 = v24;
            do
            {
              v64 = *(v38 - 1);
              *(v38 - 1) = *v63;
              *v63++ = v64;
              if (v38 == v24)
                break;
              ++v38;
              v65 = v62;
              v62 -= 8;
            }
            while (v65);
            v37 = v24;
          }
          else
          {
            v66 = v26 - v24;
            v67 = v24 - v27;
            do
            {
              v68 = v67;
              v67 = v66;
              v66 = v68 % v66;
            }
            while (v66);
            if (v67)
            {
              v69 = &v22[v67];
              do
              {
                v71 = *--v69;
                v70 = v71;
                v72 = &v69[v60];
                v73 = v69;
                do
                {
                  v74 = v72;
                  *v73 = *v72;
                  v75 = v26 - v72;
                  v76 = __OFSUB__(v60, v75);
                  v78 = v60 - v75;
                  v77 = (v78 < 0) ^ v76;
                  v72 = &v22[v78];
                  if (v77)
                    v72 = &v74[v60];
                  v73 = v74;
                }
                while (v72 != v69);
                *v74 = v70;
              }
              while (v69 != v22);
            }
            v37 = &v22[v61];
          }
        }
      }
    }
LABEL_48:
    a5 = -(v129 + v13);
    v56 = v23 - v36;
    if (v129 + v36 >= v23 - (v129 + v36) - v13)
    {
      std::__inplace_merge<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(v37, v26, v131, a4, a5, v23 - v36, v9, v130);
      v58 = v27;
      v8 = v130;
      a5 = v129;
      v132 = v36;
      a1 = (uint64_t *)&v12[(_QWORD)v135];
      a2 = v58;
      a3 = v37;
      if (!v36)
        return result;
    }
    else
    {
      v57 = v27;
      v8 = v130;
      std::__inplace_merge<std::_ClassicAlgPolicy,cricket::BasicIceController::SortAndSwitchConnection(cricket::IceSwitchReason)::$_0 &,std::__wrap_iter<cricket::Connection const**>>(&v12[(_QWORD)v21], v57, v37, a4, v129, v36, v9, v130);
      a1 = v37;
      v132 = v56;
      a2 = v26;
      a3 = v131;
      if (!v56)
        return result;
    }
  }
  if (a5 <= v132)
  {
    if (a1 == a2)
      return result;
    v89 = (char *)a2 - (char *)a1 - 8;
    v90 = v9;
    v91 = a1;
    if (v89 < 0x18)
      goto LABEL_118;
    v90 = v9;
    v91 = a1;
    if ((unint64_t)(v9 - (char *)a1) < 0x20)
      goto LABEL_118;
    v92 = (v89 >> 3) + 1;
    v93 = v92 & 0x3FFFFFFFFFFFFFFCLL;
    v90 = &v9[v93 * 8];
    v91 = &a1[v93];
    v94 = (__n128 *)(a1 + 2);
    v95 = (__n128 *)(v9 + 16);
    v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = v94[-1];
      v97 = *v94;
      v95[-1] = result;
      *v95 = v97;
      v94 += 2;
      v95 += 2;
      v96 -= 4;
    }
    while (v96);
    if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_118:
      do
      {
        v98 = *v91++;
        *(_QWORD *)v90 = v98;
        v90 += 8;
      }
      while (v91 != a2);
    }
    if (v90 == v9)
      return result;
    while (1)
    {
      if (a2 == a3)
      {
        memmove(a1, v9, v90 - v9);
        return result;
      }
      v99 = a1;
      v100 = a2;
      v101 = *a2;
      v102 = *(_QWORD *)v9;
      v103 = cricket::BasicIceController::CompareConnections(*a4, *a2, *(_DWORD **)v9, 0, 0, 0, a7, a8);
      if (v103)
      {
        if (v103 <= 0)
          goto LABEL_91;
LABEL_85:
        a2 = v100 + 1;
        *v99 = *v100;
        a1 = v99 + 1;
        if (v9 == v90)
          return result;
      }
      else
      {
        if (*(_DWORD *)(v101 + 2416) < *(_DWORD *)(v102 + 2416))
          goto LABEL_85;
LABEL_91:
        v104 = *(_QWORD *)v9;
        v9 += 8;
        *v99 = v104;
        a2 = v100;
        a1 = v99 + 1;
        if (v9 == v90)
          return result;
      }
    }
  }
  v79 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v80 = v79 - 8;
  if ((unint64_t)(v79 - 8) < 0x18)
  {
    v81 = v9;
    v82 = a2;
    do
    {
LABEL_96:
      v106 = *v82++;
      *(_QWORD *)v81 = v106;
      v81 += 8;
    }
    while (v82 != a3);
    goto LABEL_97;
  }
  v81 = v9;
  v82 = a2;
  if ((unint64_t)(v9 - (char *)a2) < 0x20)
    goto LABEL_96;
  v83 = (v80 >> 3) + 1;
  v84 = v83 & 0x3FFFFFFFFFFFFFFCLL;
  v81 = &v9[v84 * 8];
  v82 = &a2[v84];
  v85 = (__n128 *)(a2 + 2);
  v86 = (__n128 *)(v9 + 16);
  v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = v85[-1];
    v88 = *v85;
    v86[-1] = result;
    *v86 = v88;
    v85 += 2;
    v86 += 2;
    v87 -= 4;
  }
  while (v87);
  if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_96;
LABEL_97:
  if (v81 == v9)
    return result;
  v107 = a3;
  while (2)
  {
    if (a2 != a1)
    {
      v109 = a1;
      v110 = a3;
      v111 = v9;
      v112 = a2;
      v108 = a2 - 1;
      v113 = (_DWORD *)*(a2 - 1);
      v114 = *((_QWORD *)v81 - 1);
      v115 = cricket::BasicIceController::CompareConnections(*a4, v114, v113, 0, 0, 0, a7, a8);
      if (v115)
      {
        a2 = v108;
        if (v115 <= 0)
        {
LABEL_99:
          v108 = (uint64_t *)(v81 - 8);
          a2 = v112;
          v81 -= 8;
        }
      }
      else
      {
        a2 = v108;
        if (*(_DWORD *)(v114 + 2416) >= v113[604])
          goto LABEL_99;
      }
      *(v110 - 1) = *v108;
      --v107;
      v9 = v111;
      a3 = v110 - 1;
      a1 = v109;
      if (v81 == v9)
        return result;
      continue;
    }
    break;
  }
  v116 = v81 - v9 - 8;
  if (v116 < 0x58 || (unint64_t)(v81 - (char *)v107) < 0x20)
  {
    v117 = a3;
    v118 = v81;
    goto LABEL_110;
  }
  v121 = 0;
  v122 = (v116 >> 3) + 1;
  v123 = 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
  v117 = &a3[v123 / 0xFFFFFFFFFFFFFFF8];
  v118 = &v81[-v123];
  v124 = v122 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = *(__n128 *)&v81[v121 * 8 - 16];
    v125 = &a3[v121];
    *((_OWORD *)v125 - 2) = *(_OWORD *)&v81[v121 * 8 - 32];
    *((__n128 *)v125 - 1) = result;
    v121 -= 4;
    v124 -= 4;
  }
  while (v124);
  if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_110:
    v119 = v117 - 1;
    do
    {
      v120 = *((_QWORD *)v118 - 1);
      v118 -= 8;
      *v119-- = v120;
    }
    while (v118 != v9);
  }
  return result;
}

_QWORD *rtc::BasicPacketSocketFactory::BasicPacketSocketFactory(_QWORD *result, uint64_t a2)
{
  *result = &off_24C0AFD98;
  result[1] = a2;
  return result;
}

void rtc::BasicPacketSocketFactory::~BasicPacketSocketFactory(rtc::BasicPacketSocketFactory *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::BasicPacketSocketFactory::CreateUdpSocket(rtc::BasicPacketSocketFactory *this, const rtc::SocketAddress *a2, unsigned int a3, unsigned int a4)
{
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  void *v21;
  int v22;
  __int128 v23;
  __int16 v24;
  int v25;
  char v26;

  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((unsigned int *)a2 + 8), 2);
  if (result)
  {
    v8 = result;
    if (a4 | a3)
    {
      if (a3 <= a4)
      {
        do
        {
          __p[0] = 0;
          __p[1] = 0;
          v20 = 0;
          v21 = &unk_24C0ACDA0;
          v9 = *((_DWORD *)a2 + 8);
          v26 = 0;
          v22 = v9;
          v23 = *(_OWORD *)((char *)a2 + 36);
          v25 = 0;
          v24 = a3;
          v10 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, __p);
          if (SHIBYTE(v20) < 0)
            operator delete(__p[0]);
          if (a3 >= a4)
            break;
          ++a3;
        }
        while (v10 < 0);
        if ((v10 & 0x80000000) == 0)
          goto LABEL_9;
      }
    }
    else if (((*(uint64_t (**)(uint64_t, const rtc::SocketAddress *))(*(_QWORD *)result + 32))(result, a2) & 0x80000000) == 0)
    {
LABEL_9:
      v11 = operator new();
      return rtc::AsyncUDPSocket::AsyncUDPSocket(v11, v8);
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_packet_socket_factory.cc");
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return 0;
  }
  return result;
}

uint64_t rtc::BasicPacketSocketFactory::CreateServerTcpSocket(rtc::BasicPacketSocketFactory *this, const rtc::SocketAddress *a2, unsigned int a3, unsigned int a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  void *v38;
  int v39;
  __int128 v40;
  __int16 v41;
  int v42;
  char v43;

  if ((a5 & 2) != 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
LABEL_14:
    rtc::webrtc_logging_impl::Log("\r\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_packet_socket_factory.cc");
    return 0;
  }
  if ((a5 & 1) != 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_14;
  }
  v9 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((unsigned int *)a2 + 8), 1);
  if (!v9)
    return 0;
  v10 = v9;
  if (a4 | a3)
  {
    if (a3 > a4)
    {
LABEL_22:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 112))(v10);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_packet_socket_factory.cc");
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      return 0;
    }
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      v37 = 0;
      v38 = &unk_24C0ACDA0;
      v11 = *((_DWORD *)a2 + 8);
      v43 = 0;
      v39 = v11;
      v40 = *(_OWORD *)((char *)a2 + 36);
      v42 = 0;
      v41 = a3;
      v16 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, __p);
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
      if (a3 >= a4)
        break;
      ++a3;
    }
    while (v16 < 0);
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t, const rtc::SocketAddress *))(*(_QWORD *)v9 + 32))(v9, a2);
  }
  if (v16 < 0)
    goto LABEL_22;
  if ((a5 & 4) == 0)
  {
    v24 = operator new();
    v35 = v10;
    rtc::AsyncTcpListenSocket::AsyncTcpListenSocket(v24, &v35);
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    return v24;
  }
  v33 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_packet_socket_factory.cc", 81, "!(opts & PacketSocketFactory::OPT_STUN)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v12, v13, v14, v15, v34);
  return rtc::BasicPacketSocketFactory::CreateClientTcpSocket(v33);
}

rtc::AsyncTCPSocketBase *rtc::BasicPacketSocketFactory::CreateClientTcpSocket(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  rtc::AsyncTCPSocketBase *result;
  rtc::Socket *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  rtc::AsyncSocketAdapter *v17;
  rtc::AsyncSocketAdapter *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  const char *v26;
  size_t v27;
  int v28;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  rtc::AsyncTCPSocketBase *v39;
  char *v40;
  rtc::AsyncSocketAdapter *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  result = (rtc::AsyncTCPSocketBase *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a2 + 32), 1);
  if (!result)
    return result;
  v8 = result;
  if (((*(uint64_t (**)(rtc::AsyncTCPSocketBase *, uint64_t))(*(_QWORD *)result + 32))(result, a2) & 0x80000000) != 0)
  {
    v28 = *(_DWORD *)(a2 + 32);
    if (v28 == 2)
    {
      if (*(_DWORD *)(a2 + 36))
      {
LABEL_50:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          (*(void (**)(rtc::Socket *))(*(_QWORD *)v8 + 112))(v8);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v49, v50, v51, v52, v53, v54, v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_packet_socket_factory.cc");
        }
        (*(void (**)(rtc::Socket *))(*(_QWORD *)v8 + 8))(v8);
        return 0;
      }
    }
    else
    {
      if (v28 != 30)
        goto LABEL_50;
      if ((*(_QWORD *)(a2 + 36) != *MEMORY[0x24BDAE878]
         || *(_QWORD *)(a2 + 44) != *(_QWORD *)(MEMORY[0x24BDAE878] + 8))
        && (*(_QWORD *)(a2 + 36) != (_QWORD)rtc::kV4MappedPrefix
         || *(_QWORD *)(a2 + 44) != *((_QWORD *)&rtc::kV4MappedPrefix + 1)))
      {
        goto LABEL_50;
      }
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      (*(void (**)(rtc::Socket *))(*(_QWORD *)v8 + 112))(v8);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_packet_socket_factory.cc");
    }
  }
  if ((*(unsigned int (**)(rtc::Socket *, uint64_t, uint64_t))(*(_QWORD *)v8 + 144))(v8, 3, 1)
    && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    (*(void (**)(rtc::Socket *))(*(_QWORD *)v8 + 112))(v8);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_packet_socket_factory.cc");
  }
  v16 = *a4;
  if ((*a4 & 0xA) != 0)
  {
    v17 = (rtc::AsyncSocketAdapter *)operator new();
    v18 = rtc::AsyncSocketAdapter::AsyncSocketAdapter(v17, v8);
    *(_QWORD *)v18 = &unk_24C0B7DB0;
    *((_QWORD *)v18 + 45) = &unk_24C0B7EC0;
    v19 = (char *)v18 + 424;
    *((_QWORD *)v18 + 56) = 0;
    *(_QWORD *)((char *)v18 + 454) = 0;
    *((_OWORD *)v18 + 29) = 0u;
    *((_OWORD *)v18 + 30) = 0u;
    *((_OWORD *)v18 + 31) = 0u;
    *((_OWORD *)v18 + 32) = 0u;
    *(_QWORD *)((char *)v18 + 525) = 0;
    *(_OWORD *)((char *)v18 + 536) = 0u;
    *(_OWORD *)((char *)v18 + 552) = 0u;
    *(_OWORD *)((char *)v18 + 568) = 0u;
    *((_BYTE *)v18 + 584) = 0;
    *((_QWORD *)v18 + 53) = 0;
    *((_QWORD *)v18 + 54) = 0;
    *((_DWORD *)v18 + 110) = 0;
    v20 = operator new();
    *(_DWORD *)v20 = 0;
    *(_BYTE *)(v20 + 4) = 1;
    *((_QWORD *)v17 + 74) = v20;
    do
      v21 = __ldxr((unsigned int *)v20);
    while (__stxr(v21 + 1, (unsigned int *)v20));
    if (*(_QWORD *)v19)
    {
      v22 = *(unsigned int **)(*(_QWORD *)v19 + 8);
      *((_QWORD *)v17 + 62) = v22;
      v23 = atomic_load(v22);
      if (v23 != -1)
      {
        while (1)
        {
          v24 = __ldaxr(v22);
          if (v24 == v23)
          {
            if (!__stlxr(v23 + 1, v22))
            {
              v25 = 1;
              goto LABEL_16;
            }
          }
          else
          {
            __clrex();
          }
          v25 = 0;
LABEL_16:
          if ((v25 & 1) == 0)
          {
            v23 = v24;
            if (v24 != -1)
              continue;
          }
          break;
        }
      }
    }
    if ((v16 & 8) != 0)
      (*(void (**)(rtc::AsyncSocketAdapter *, uint64_t))(*(_QWORD *)v17 + 184))(v17, 1);
    (*(void (**)(rtc::AsyncSocketAdapter *, int *))(*(_QWORD *)v17 + 192))(v17, a4 + 2);
    (*(void (**)(rtc::AsyncSocketAdapter *, int *))(*(_QWORD *)v17 + 200))(v17, a4 + 8);
    result = (rtc::AsyncTCPSocketBase *)(*(uint64_t (**)(rtc::AsyncSocketAdapter *, _QWORD))(*(_QWORD *)v17 + 216))(v17, *((_QWORD *)a4 + 7));
    v26 = (const char *)a3;
    if (*(char *)(a3 + 23) < 0)
    {
      v26 = *(const char **)a3;
      if (!*(_QWORD *)a3)
      {
        __break(1u);
        return result;
      }
    }
    v27 = strlen(v26);
    if ((*(unsigned int (**)(rtc::AsyncSocketAdapter *, const char *, size_t))(*(_QWORD *)v17 + 240))(v17, v26, v27))
    {
      goto LABEL_48;
    }
  }
  else
  {
    if ((v16 & 1) != 0)
    {
      v17 = (rtc::AsyncSocketAdapter *)operator new();
      v41 = rtc::AsyncSocketAdapter::AsyncSocketAdapter(v17, v8);
      *(_QWORD *)v41 = off_24C0C0F48;
      *((_QWORD *)v41 + 45) = &unk_24C0C1018;
      *((_OWORD *)v41 + 27) = xmmword_208F05840;
      *((_BYTE *)v41 + 448) = 0;
      *((_QWORD *)v17 + 53) = operator new[]();
      *(_QWORD *)v17 = &unk_24C0C1038;
      *((_QWORD *)v17 + 45) = &unk_24C0C1108;
      if ((rtc::AsyncSSLSocket::Connect((uint64_t)v17) & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_46;
    }
    v17 = v8;
  }
  if (((*(uint64_t (**)(rtc::AsyncSocketAdapter *, uint64_t))(*(_QWORD *)v17 + 40))(v17, a3) & 0x80000000) != 0)
  {
LABEL_46:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      (*(void (**)(rtc::AsyncSocketAdapter *))(*(_QWORD *)v17 + 112))(v17);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v42, v43, v44, v45, v46, v47, v48, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/basic_packet_socket_factory.cc");
    }
LABEL_48:
    (*(void (**)(rtc::AsyncSocketAdapter *))(*(_QWORD *)v17 + 8))(v17);
    return 0;
  }
LABEL_40:
  v38 = *a4;
  v39 = (rtc::AsyncTCPSocketBase *)operator new();
  if ((v38 & 4) != 0)
  {
    result = rtc::AsyncTCPSocketBase::AsyncTCPSocketBase(v39, v17, 65556);
  }
  else
  {
    result = rtc::AsyncTCPSocketBase::AsyncTCPSocketBase(v39, v17, 65538);
  }
  *(_QWORD *)result = v40 + 16;
  return result;
}

uint64_t rtc::BasicPacketSocketFactory::CreateAsyncDnsResolver@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t result;
  unsigned int v9;
  pthread_mutexattr_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C0ACD18;
  v4 = operator new();
  *(_DWORD *)v4 = 0;
  *(_BYTE *)(v4 + 4) = 1;
  *(_QWORD *)(v3 + 8) = v4;
  do
    v5 = __ldxr((unsigned int *)v4);
  while (__stxr(v5 + 1, (unsigned int *)v4));
  v6 = operator new();
  v7 = (unsigned int *)(v6 + 8);
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_QWORD *)v6 = &off_24C0ACD80;
  pthread_mutexattr_init(&v10);
  pthread_mutexattr_setpolicy_np(&v10, 3);
  pthread_mutex_init((pthread_mutex_t *)(v6 + 16), &v10);
  result = pthread_mutexattr_destroy(&v10);
  *(_DWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v3 + 16) = v6;
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_QWORD *)(v3 + 24) = off_24C0ACD50;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_BYTE *)(v3 + 96) = 0;
  *(_WORD *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 92) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 56) = &unk_24C0ACDA0;
  *(_DWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 152) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(v3 + 160) = 0;
  *a1 = v3;
  return result;
}

uint64_t cricket::BasicPortAllocator::BasicPortAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  rtc *RandomId;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  void *v19;
  _OWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  int v26;
  char v27;
  void *__p;
  void **v29;
  uint64_t v30;
  char **v31;
  char *v32[2];

  *(_QWORD *)(a1 + 16) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *(_QWORD *)(a1 + 24) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = off_24C0BAC10;
  *(_QWORD *)(a1 + 8) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 64) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 72) = a1 + 72;
  *(_QWORD *)(a1 + 80) = a1 + 72;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 72;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 116) = xmmword_208F05850;
  *(_DWORD *)(a1 + 132) = 1000;
  *(_BYTE *)(a1 + 136) = 1;
  *(_DWORD *)(a1 + 140) = 7;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 276) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  RandomId = (rtc *)rtc::CreateRandomId((rtc *)a1);
  *(_QWORD *)(a1 + 288) = rtc::CreateRandomId(RandomId) | ((_QWORD)RandomId << 32);
  *(_QWORD *)a1 = &off_24C0AFDD8;
  if (a6)
  {
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = a6;
    *(_QWORD *)(a1 + 312) = a2;
    *(_QWORD *)(a1 + 320) = a3;
    *(_DWORD *)(a1 + 328) = 16;
    if (a5)
      goto LABEL_3;
LABEL_11:
    v22 = (_QWORD *)operator new();
    *v22 = &unk_24C0C2D78;
    v23 = *(_QWORD *)(a1 + 320);
    *(_QWORD *)(a1 + 336) = v22;
    *(_QWORD *)(a1 + 344) = v22;
    if (v23)
      goto LABEL_4;
LABEL_12:
    v24 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc", 184, "socket_factory_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v13, v14, v15, v16, v25);
    return cricket::BasicPortAllocator::BasicPortAllocator(v24);
  }
  v21 = (_OWORD *)operator new();
  *v21 = 0u;
  v21[1] = 0u;
  *(_QWORD *)v21 = &unk_24C0B3F60;
  *(_QWORD *)(a1 + 296) = v21;
  *(_QWORD *)(a1 + 304) = v21;
  *(_QWORD *)(a1 + 312) = a2;
  *(_QWORD *)(a1 + 320) = a3;
  *(_DWORD *)(a1 + 328) = 16;
  if (!a5)
    goto LABEL_11;
LABEL_3:
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = a5;
  if (!a3)
    goto LABEL_12;
LABEL_4:
  v32[0] = 0;
  v32[1] = 0;
  v30 = 0;
  v31 = v32;
  __p = 0;
  v29 = 0;
  LOBYTE(v26) = 0;
  v27 = 0;
  cricket::PortAllocator::SetConfiguration(a1, (uint64_t)&v31, (void ****)&__p, 0, 0, a4, &v26);
  v17 = (void **)__p;
  if (__p)
  {
    v18 = v29;
    v19 = __p;
    if (v29 != __p)
    {
      do
        cricket::RelayServerConfig::~RelayServerConfig(v18 - 20);
      while (v18 != v17);
      v19 = __p;
    }
    v29 = v17;
    operator delete(v19);
  }
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)&v31, v32[0]);
  return a1;
}

void cricket::BasicPortAllocator::~BasicPortAllocator(cricket::BasicPortAllocator *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C0AFDD8;
  v2 = (_QWORD *)*((_QWORD *)this + 29);
  v3 = (_QWORD *)*((_QWORD *)this + 30);
  while (v3 != v2)
  {
    v5 = *--v3;
    v4 = v5;
    *v3 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_QWORD *)this + 30) = v2;
  v6 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  cricket::PortAllocator::~PortAllocator(this);
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C0AFDD8;
  v2 = (_QWORD *)*((_QWORD *)this + 29);
  v3 = (_QWORD *)*((_QWORD *)this + 30);
  while (v3 != v2)
  {
    v5 = *--v3;
    v4 = v5;
    *v3 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_QWORD *)this + 30) = v2;
  v6 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  cricket::PortAllocator::~PortAllocator(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::BasicPortAllocator::SetNetworkIgnoreMask(uint64_t this, int a2)
{
  *(_DWORD *)(this + 328) = a2;
  return this;
}

uint64_t cricket::BasicPortAllocator::CreateSessionInternal(uint64_t a1, void **a2, size_t a3, int a4, void **a5, size_t a6, void **a7, size_t a8)
{
  uint64_t v15;
  uint64_t v16;
  void **p_src;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  void **v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  void **p_p;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  rtc::Thread *v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  void *__p;
  size_t v44;
  unint64_t v45;
  void *v46;
  size_t v47;
  unint64_t v48;
  void *__src;
  size_t v50;
  unint64_t v51;

  v15 = operator new();
  if (a3 > 0x7FFFFFFFFFFFFFF7)
LABEL_56:
    abort();
  v16 = v15;
  if (a3 > 0x16)
  {
    v19 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v19 = a3 | 7;
    v20 = v19 + 1;
    p_src = (void **)operator new(v19 + 1);
    v50 = a3;
    v51 = v20 | 0x8000000000000000;
    __src = p_src;
    v18 = (void **)((char *)p_src + a3);
    if (p_src > a2)
      goto LABEL_9;
  }
  else
  {
    HIBYTE(v51) = a3;
    p_src = &__src;
    v18 = (void **)((char *)&__src + a3);
    if (&__src > a2)
      goto LABEL_9;
  }
  if (v18 > a2)
    goto LABEL_55;
LABEL_9:
  if (a3)
    memmove(p_src, a2, a3);
  *(_BYTE *)v18 = 0;
  if (SHIBYTE(v51) < 0)
  {
    v21 = v50;
    if ((v50 & 0x8000000000000000) != 0)
      goto LABEL_55;
    v22 = (char *)__src;
    if (v50)
    {
      if (!__src)
        goto LABEL_55;
    }
  }
  else
  {
    v21 = HIBYTE(v51);
    v22 = (char *)&__src;
  }
  if (a6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_56;
  if (a6 > 0x16)
  {
    v25 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v25 = a6 | 7;
    v26 = v25 + 1;
    v23 = (void **)operator new(v25 + 1);
    v47 = a6;
    v48 = v26 | 0x8000000000000000;
    v46 = v23;
    v24 = (void **)((char *)v23 + a6);
    if (v23 > a5)
      goto LABEL_24;
  }
  else
  {
    HIBYTE(v48) = a6;
    v23 = &v46;
    v24 = (void **)((char *)&v46 + a6);
    if (&v46 > a5)
      goto LABEL_24;
  }
  if (v24 > a5)
    goto LABEL_55;
LABEL_24:
  if (a6)
    memmove(v23, a5, a6);
  *(_BYTE *)v24 = 0;
  if (SHIBYTE(v48) < 0)
  {
    v27 = v47;
    if ((v47 & 0x8000000000000000) != 0)
      goto LABEL_55;
    v28 = (char *)v46;
    if (v47)
    {
      if (!v46)
        goto LABEL_55;
    }
  }
  else
  {
    v27 = HIBYTE(v48);
    v28 = (char *)&v46;
  }
  if (a8 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_56;
  if (a8 <= 0x16)
  {
    HIBYTE(v45) = a8;
    p_p = &__p;
    v30 = (void **)((char *)&__p + a8);
    if (&__p > a7)
      goto LABEL_39;
    goto LABEL_38;
  }
  v31 = (a8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a8 | 7) != 0x17)
    v31 = a8 | 7;
  v32 = v31 + 1;
  p_p = (void **)operator new(v31 + 1);
  v44 = a8;
  v45 = v32 | 0x8000000000000000;
  __p = p_p;
  v30 = (void **)((char *)p_p + a8);
  if (p_p <= a7)
  {
LABEL_38:
    if (v30 <= a7)
      goto LABEL_39;
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
LABEL_39:
  if (a8)
    memmove(p_p, a7, a8);
  *(_BYTE *)v30 = 0;
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    v33 = HIBYTE(v45);
    v34 = (char *)&__p;
    goto LABEL_46;
  }
  v33 = v44;
  if ((v44 & 0x8000000000000000) != 0)
    goto LABEL_55;
  v34 = (char *)__p;
  if (v44)
  {
    if (!__p)
      goto LABEL_55;
  }
LABEL_46:
  v35 = (rtc::Thread *)cricket::PortAllocatorSession::PortAllocatorSession((_QWORD *)v16, v22, v21, a4, v28, v27, v34, v33, *(_DWORD *)(a1 + 116));
  *(_QWORD *)v16 = &off_24C0AFE38;
  *(_QWORD *)(v16 + 544) = a1;
  *(_QWORD *)(v16 + 552) = rtc::Thread::Current(v35);
  *(_QWORD *)(v16 + 560) = *(_QWORD *)(a1 + 320);
  *(_WORD *)(v16 + 568) = 0;
  *(_BYTE *)(v16 + 570) = 0;
  *(_OWORD *)(v16 + 576) = 0u;
  *(_OWORD *)(v16 + 592) = 0u;
  *(_OWORD *)(v16 + 608) = 0u;
  *(_OWORD *)(v16 + 624) = 0u;
  *(_OWORD *)(v16 + 640) = 0u;
  *(_OWORD *)(v16 + 656) = 0u;
  *(_DWORD *)(v16 + 672) = 7;
  *(_DWORD *)(v16 + 676) = *(_DWORD *)(a1 + 256);
  *(_QWORD *)(v16 + 680) = 1;
  v36 = operator new();
  *(_DWORD *)v36 = 0;
  *(_BYTE *)(v36 + 4) = 1;
  *(_QWORD *)(v16 + 688) = v36;
  do
    v37 = __ldxr((unsigned int *)v36);
  while (__stxr(v37 + 1, (unsigned int *)v36));
  v38 = *(_QWORD **)(*(_QWORD *)(v16 + 544) + 312);
  v39 = operator new(0x30uLL);
  v39[2] = sigslot::_opaque_connection::emitter<cricket::BasicPortAllocatorSession>;
  v39[3] = v16;
  v39[4] = cricket::BasicPortAllocatorSession::OnNetworksChanged;
  v39[5] = 0;
  v40 = v38[4];
  v38 += 4;
  *v39 = v40;
  v39[1] = v38;
  *(_QWORD *)(v40 + 8) = v39;
  *v38 = v39;
  ++v38[2];
  (*(void (**)(uint64_t, _QWORD *))(v16 + 8))(v16, v38 - 2);
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v16 + 544) + 312) + 32))(*(_QWORD *)(*(_QWORD *)(v16 + 544) + 312));
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v48) & 0x80000000) == 0)
      goto LABEL_50;
LABEL_53:
    operator delete(v46);
    if ((SHIBYTE(v51) & 0x80000000) == 0)
      return v16;
LABEL_54:
    operator delete(__src);
    return v16;
  }
  operator delete(__p);
  if (SHIBYTE(v48) < 0)
    goto LABEL_53;
LABEL_50:
  if (SHIBYTE(v51) < 0)
    goto LABEL_54;
  return v16;
}

void cricket::BasicPortAllocatorSession::OnNetworksChanged(cricket::BasicPortAllocatorSession *this)
{
  uint64_t *v2;
  uint64_t *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  void (*v40)(_QWORD *, cricket::BasicPortAllocatorSession *, _QWORD);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  void *__p;
  _QWORD *v55;

  cricket::BasicPortAllocatorSession::GetNetworks((cricket::BasicPortAllocatorSession *)&__p, (uint64_t)this);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 75);
  v3 = (uint64_t *)*((_QWORD *)this + 76);
  if (v2 != v3)
  {
    v4 = 0;
    v5 = 0;
    while (1)
    {
      v6 = *v2;
      if (*(_BYTE *)(*v2 + 8))
        goto LABEL_4;
      v7 = __p;
      if (__p != v55)
      {
        while (*v7 != *(_QWORD *)(v6 + 16))
        {
          if (++v7 == v55)
          {
            v7 = v55;
            break;
          }
        }
      }
      if (v7 != v55)
        goto LABEL_4;
      *(_BYTE *)(v6 + 8) = 1;
      v8 = *(_QWORD *)(v6 + 96);
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 88))(v8, 50);
        (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 96) + 48))(*(_QWORD *)(v6 + 96));
      }
      *(_BYTE *)(v6 + 8) = 1;
      if (*(_DWORD *)(v6 + 64) == 1)
      {
        *(_DWORD *)(v6 + 64) = 2;
        ++*(_DWORD *)(v6 + 176);
      }
      v9 = *(_QWORD *)(v6 + 16);
      if (v4 < v53)
      {
        if (!v4)
          goto LABEL_63;
        *(_QWORD *)v4 = v9;
        v10 = v4 + 8;
        goto LABEL_34;
      }
      v11 = (v4 - v5) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        goto LABEL_64;
      v13 = v53 - v5;
      if ((v53 - v5) >> 2 > v12)
        v12 = v13 >> 2;
      v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
      v15 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v14)
        v15 = v12;
      if (!v15)
      {
LABEL_63:
        __break(1u);
LABEL_64:
        abort();
      }
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v48 = 8 * v15;
      v16 = operator new(8 * v15);
      v17 = &v16[8 * v11];
      *(_QWORD *)v17 = v9;
      v10 = v17 + 8;
      if (v4 == v5)
      {
        v53 = &v16[v48];
        if (!v5)
          goto LABEL_33;
LABEL_32:
        operator delete(v5);
        goto LABEL_33;
      }
      v18 = v4 - v5 - 8;
      if (v18 < 0x168)
        break;
      v19 = (v4 - 8 - v5) & 0xFFFFFFFFFFFFFFF8;
      if (&v16[v4 - v5 - 8 - v19] > &v16[v4 - v5 - 8] || &v4[-v19 - 8] > v4 - 8 || (unint64_t)(v5 - v16) < 0x20)
        break;
      v23 = (v18 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v20 = &v4[-v24];
      v17 -= v24;
      v25 = &v16[8 * v11 - 16];
      v26 = v4 - 16;
      v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *(_OWORD *)v26;
        *(v25 - 1) = *((_OWORD *)v26 - 1);
        *v25 = v28;
        v25 -= 2;
        v26 -= 32;
        v27 -= 4;
      }
      while (v27);
      v21 = v48;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_30;
LABEL_31:
      v53 = &v16[v21];
      if (v5)
        goto LABEL_32;
LABEL_33:
      v5 = v17;
LABEL_34:
      v52 = v10;
      v4 = v10;
LABEL_4:
      if (++v2 == v3)
        goto LABEL_42;
    }
    v20 = v4;
    v21 = v48;
    do
    {
LABEL_30:
      v22 = *((_QWORD *)v20 - 1);
      v20 -= 8;
      *((_QWORD *)v17 - 1) = v22;
      v17 -= 8;
    }
    while (v20 != v5);
    goto LABEL_31;
  }
  v5 = 0;
LABEL_42:
  v51 = v5;
  cricket::BasicPortAllocatorSession::GetUnprunedPorts(&v49, *((_QWORD *)this + 78), *((_QWORD *)this + 79), (uint64_t)&v51);
  v29 = (uint64_t *)v49;
  v30 = (uint64_t *)v50;
  if (v49 != v50)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    cricket::BasicPortAllocatorSession::PrunePortsAndRemoveCandidates(this, v29, v30, v33, v34, v35, v36, v37);
  }
  if (*((_BYTE *)this + 568)
    && ((*(uint64_t (**)(cricket::BasicPortAllocatorSession *))(*(_QWORD *)this + 64))(this) & 1) == 0)
  {
    if (*((_BYTE *)this + 569))
    {
      v38 = (_QWORD *)*((_QWORD *)this + 52);
      for (*((_QWORD *)this + 54) = v38; v38 != (_QWORD *)((char *)this + 408); v38 = (_QWORD *)*((_QWORD *)this + 54))
      {
        v40 = (void (*)(_QWORD *, cricket::BasicPortAllocatorSession *, _QWORD))v38[2];
        v39 = v38 + 2;
        *((_QWORD *)this + 54) = *(v39 - 1);
        v40(v39, this, 0);
      }
    }
    cricket::BasicPortAllocatorSession::DoAllocate(this);
  }
  if (!*((_BYTE *)this + 569))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v41, v42, v43, v44, v45, v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    *((_BYTE *)this + 569) = 1;
  }
  if (v29)
    operator delete(v29);
  if (v5)
    operator delete(v5);
  if (__p)
    operator delete(__p);
}

void cricket::BasicPortAllocatorSession::~BasicPortAllocatorSession(cricket::BasicPortAllocatorSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)this = &off_24C0AFE38;
  (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 68) + 312) + 40))(*(_QWORD *)(*((_QWORD *)this + 68) + 312));
  v2 = *((_QWORD *)this + 76);
  v3 = *((_QWORD *)this + 75);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v5 = 0;
    v6 = v4 >> 3;
    do
    {
      v7 = *(_QWORD **)(v3 + 8 * v5);
      v7[13] = 0;
      v7[15] = v7[14];
      ++v5;
    }
    while (v6 > v5);
  }
  v8 = (_QWORD *)*((_QWORD *)this + 78);
  v9 = (_QWORD *)*((_QWORD *)this + 79);
  while (v8 != v9)
  {
    if (*v8)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 8))(*v8);
      v9 = (_QWORD *)*((_QWORD *)this + 79);
    }
    v8 += 3;
  }
  v10 = (_QWORD *)*((_QWORD *)this + 73);
  v11 = (_QWORD *)*((_QWORD *)this + 72);
  while (v10 != v11)
  {
    v13 = *--v10;
    v12 = v13;
    *v10 = 0;
    if (v13)
      std::default_delete<cricket::PortConfiguration>::operator()[abi:sn180100](v12);
  }
  *((_QWORD *)this + 73) = v11;
  v14 = *((_QWORD *)this + 76);
  v15 = *((_QWORD *)this + 75);
  if (v14 != v15)
  {
    v16 = 0;
    v17 = 0;
    while (1)
    {
      v18 = *(_QWORD **)(v15 + 8 * v16);
      if (v18)
        break;
LABEL_16:
      v16 = ++v17;
      if (v17 >= (unint64_t)((v14 - v15) >> 3))
        goto LABEL_33;
    }
    v19 = v18[23];
    *(_BYTE *)(v19 + 4) = 0;
    do
    {
      v20 = __ldaxr((unsigned int *)v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)v19));
    if (!v21)
      MEMORY[0x20BD0ADEC]();
    v22 = (_QWORD *)v18[21];
    if (v22 == v18 + 18)
    {
      v22 = v18 + 18;
      v23 = 4;
    }
    else
    {
      if (!v22)
      {
LABEL_27:
        v24 = (void *)v18[14];
        if (v24)
        {
          v18[15] = v24;
          operator delete(v24);
        }
        v25 = v18[12];
        v18[12] = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        v26 = (void *)v18[9];
        if (v26)
        {
          v18[10] = v26;
          operator delete(v26);
        }
        MEMORY[0x20BD0ADEC](v18, 0x10F0C40F5186CF0);
        v14 = *((_QWORD *)this + 76);
        v15 = *((_QWORD *)this + 75);
        goto LABEL_16;
      }
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
    goto LABEL_27;
  }
LABEL_33:
  v27 = *((_QWORD *)this + 86);
  *(_BYTE *)(v27 + 4) = 0;
  do
  {
    v28 = __ldaxr((unsigned int *)v27);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, (unsigned int *)v27));
  if (!v29)
    MEMORY[0x20BD0ADEC]();
  v30 = *((_QWORD *)this + 81);
  if (v30)
  {
    v31 = *((_QWORD *)this + 82);
    v32 = (void *)*((_QWORD *)this + 81);
    if (v31 == v30)
    {
LABEL_49:
      *((_QWORD *)this + 82) = v30;
      operator delete(v32);
      goto LABEL_50;
    }
    while (1)
    {
      if (*(char *)(v31 - 1) < 0)
      {
        operator delete(*(void **)(v31 - 24));
        if ((*(char *)(v31 - 33) & 0x80000000) == 0)
        {
LABEL_43:
          if (*(char *)(v31 - 65) < 0)
            goto LABEL_47;
          goto LABEL_40;
        }
      }
      else if ((*(char *)(v31 - 33) & 0x80000000) == 0)
      {
        goto LABEL_43;
      }
      operator delete(*(void **)(v31 - 56));
      if (*(char *)(v31 - 65) < 0)
LABEL_47:
        operator delete(*(void **)(v31 - 88));
LABEL_40:
      v31 -= 88;
      if (v31 == v30)
      {
        v32 = (void *)*((_QWORD *)this + 81);
        goto LABEL_49;
      }
    }
  }
LABEL_50:
  v33 = (void *)*((_QWORD *)this + 78);
  if (v33)
  {
    *((_QWORD *)this + 79) = v33;
    operator delete(v33);
  }
  v34 = (void *)*((_QWORD *)this + 75);
  if (v34)
  {
    *((_QWORD *)this + 76) = v34;
    operator delete(v34);
  }
  v35 = (_QWORD *)*((_QWORD *)this + 72);
  if (v35)
  {
    v36 = (_QWORD *)*((_QWORD *)this + 73);
    v37 = (void *)*((_QWORD *)this + 72);
    if (v36 != v35)
    {
      do
      {
        v39 = *--v36;
        v38 = v39;
        *v36 = 0;
        if (v39)
          std::default_delete<cricket::PortConfiguration>::operator()[abi:sn180100](v38);
      }
      while (v36 != v35);
      v37 = (void *)*((_QWORD *)this + 72);
    }
    *((_QWORD *)this + 73) = v35;
    operator delete(v37);
  }
  cricket::PortAllocatorSession::~PortAllocatorSession((void **)this);
}

{
  cricket::BasicPortAllocatorSession::~BasicPortAllocatorSession(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::BasicPortAllocatorSession::allocator(cricket::BasicPortAllocatorSession *this)
{
  return *((_QWORD *)this + 68);
}

uint64_t cricket::BasicPortAllocatorSession::SetCandidateFilter(uint64_t this, int a2)
{
  int v2;
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  BOOL v15;
  int v16;
  int v17;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  BOOL v26;
  _BOOL4 v27;
  BOOL v29;
  unsigned __int16 *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v41;
  int v42;
  int v46;
  _QWORD *v47;
  _QWORD *v48;
  void (*v49)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v50;
  BOOL v51;
  unsigned int v52;
  _BOOL4 v55;
  _QWORD *v56;
  int v57;
  char v58;
  char v59;
  char v60;

  v2 = *(_DWORD *)(this + 672);
  v59 = a2;
  if (v2 != a2)
  {
    v3 = (_DWORD *)this;
    *(_DWORD *)(this + 672) = a2;
    v4 = *(_QWORD **)(this + 624);
    v5 = *(_QWORD **)(this + 632);
    if (v4 != v5)
    {
      v60 = v2;
      v56 = *(_QWORD **)(this + 632);
      while (1)
      {
        v6 = *((_DWORD *)v4 + 5);
        if ((v6 & 0xFFFFFFFE) == 2)
          goto LABEL_6;
        v7 = (_QWORD *)*v4;
        this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 136))(*v4);
        v8 = *(_QWORD *)this;
        v9 = *(_QWORD *)(this + 8);
        if (*(_QWORD *)this != v9)
          break;
        *((_DWORD *)v4 + 5) = v6;
        v5 = v56;
LABEL_5:
        *((_BYTE *)v4 + 16) = 0;
LABEL_6:
        v4 += 3;
        if (v4 == v5)
          return this;
      }
      v57 = v6;
      v58 = 0;
      v10 = 0;
      v11 = v7 + 38;
      while (1)
      {
        if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 64))(v3) & 1) != 0)
          goto LABEL_12;
        v17 = *(_DWORD *)(v8 + 112);
        if (v17 == 2)
        {
          if (!*(_DWORD *)(v8 + 116))
            goto LABEL_12;
        }
        else if (v17 == 30)
        {
          if (*(_QWORD *)(v8 + 116) == *MEMORY[0x24BDAE878]
            && *(_QWORD *)(v8 + 124) == *(_QWORD *)(MEMORY[0x24BDAE878] + 8))
          {
            goto LABEL_142;
          }
          if (*(_QWORD *)(v8 + 116) == (_QWORD)rtc::kV4MappedPrefix
            && *(_QWORD *)(v8 + 124) == *((_QWORD *)&rtc::kV4MappedPrefix + 1))
          {
            goto LABEL_142;
          }
        }
        v25 = *(_DWORD *)(v8 + 208);
        if (v25)
        {
          if (v25 == 1)
          {
            if ((v60 & 2) != 0)
              goto LABEL_12;
          }
          else if (v25 == 3 && (v60 & 4) != 0)
          {
            goto LABEL_12;
          }
        }
        else
        {
          if ((v60 & 2) != 0)
          {
            if (v17 == 2)
            {
              LODWORD(v35) = *(_DWORD *)(v8 + 116);
              v36 = 1;
              if ((unsigned __int16)v35 != 65193 && *(_DWORD *)(v8 + 116) != 127)
              {
                v39 = bswap32(v35);
                if ((v39 & 0xFFFF0000) != 0xC0A80000
                  && (v39 & 0xFF000000) != 0xA000000
                  && (v39 & 0xFFF00000) != 0xAC100000)
                {
                  goto LABEL_132;
                }
              }
            }
            else
            {
              if (v17 != 30)
              {
                LODWORD(v35) = *(_DWORD *)(v8 + 116);
                goto LABEL_132;
              }
              v35 = *(_QWORD *)(v8 + 116);
              if ((v35 & 0xC0FF) == 0x80FE)
              {
                v36 = 1;
                goto LABEL_138;
              }
              v41 = *(_QWORD *)(v8 + 116) != *MEMORY[0x24BDAE880]
                 || *(_QWORD *)(v8 + 124) != *(_QWORD *)(MEMORY[0x24BDAE880] + 8);
              v36 = 1;
              if (*(_QWORD *)(v8 + 116) != 253 && v41)
              {
LABEL_132:
                v42 = v35 & 0xC0FF;
                v36 = v17 == 2 && v42 == 16484;
              }
            }
LABEL_138:
            if ((v60 & 1) != 0 || !v36)
              goto LABEL_12;
            goto LABEL_140;
          }
          if ((v60 & 1) != 0)
            goto LABEL_12;
        }
LABEL_140:
        if (v17 == 2)
        {
          if (!*(_DWORD *)(v8 + 116))
            goto LABEL_12;
          goto LABEL_153;
        }
        if (v17 != 30)
          goto LABEL_153;
LABEL_142:
        if (*(_QWORD *)(v8 + 116) == *MEMORY[0x24BDAE878]
          && *(_QWORD *)(v8 + 124) == *(_QWORD *)(MEMORY[0x24BDAE878] + 8))
        {
          goto LABEL_12;
        }
        if (*(_QWORD *)(v8 + 116) == (_QWORD)rtc::kV4MappedPrefix
          && *(_QWORD *)(v8 + 124) == *((_QWORD *)&rtc::kV4MappedPrefix + 1))
        {
          goto LABEL_12;
        }
LABEL_153:
        v46 = *(_DWORD *)(v8 + 208);
        if (v46)
        {
          if (v46 == 1)
          {
            if ((v59 & 2) == 0)
              goto LABEL_12;
          }
          else if (v46 != 3 || (v59 & 4) == 0)
          {
            goto LABEL_12;
          }
        }
        else
        {
          if ((v59 & 2) != 0)
          {
            if (v17 == 2)
            {
              LODWORD(v50) = *(_DWORD *)(v8 + 116);
              v51 = 1;
              if ((unsigned __int16)v50 == 65193)
                goto LABEL_184;
              if (*(_DWORD *)(v8 + 116) == 127)
                goto LABEL_184;
              v52 = bswap32(v50);
              if ((v52 & 0xFFFF0000) == 0xC0A80000
                || (v52 & 0xFF000000) == 0xA000000
                || (v52 & 0xFFF00000) == 0xAC100000)
              {
                goto LABEL_184;
              }
            }
            else if (v17 == 30)
            {
              v50 = *(_QWORD *)(v8 + 116);
              if ((v50 & 0xC0FF) == 0x80FE)
              {
                v51 = 1;
                goto LABEL_184;
              }
              v55 = *(_QWORD *)(v8 + 116) != *MEMORY[0x24BDAE880]
                 || *(_QWORD *)(v8 + 124) != *(_QWORD *)(MEMORY[0x24BDAE880] + 8);
              v51 = 1;
              if (*(_QWORD *)(v8 + 116) == 253 || !v55)
              {
LABEL_184:
                if ((v59 & 1) == 0 && v51)
                  goto LABEL_12;
                goto LABEL_162;
              }
            }
            else
            {
              LODWORD(v50) = *(_DWORD *)(v8 + 116);
            }
            v51 = v17 == 2 && (v50 & 0xC0FF) == 16484;
            goto LABEL_184;
          }
          if ((v59 & 1) == 0)
            goto LABEL_12;
        }
LABEL_162:
        if ((v58 & 1) == 0)
          *((_DWORD *)v4 + 5) = 0;
        v47 = (_QWORD *)v7[39];
        for (v7[41] = v47; v47 != v11; v47 = (_QWORD *)v7[41])
        {
          v49 = (void (*)(_QWORD *, _QWORD *, uint64_t))v47[2];
          v48 = v47 + 2;
          v7[41] = *(v48 - 1);
          v49(v48, v7, v8);
        }
        v58 = 1;
LABEL_12:
        v12 = v3[168];
        v13 = *(_DWORD *)(v8 + 112);
        if (v13 == 2)
        {
          if (!*(_DWORD *)(v8 + 116))
          {
            v16 = 0;
            v23 = 1;
            goto LABEL_76;
          }
        }
        else if (v13 == 30)
        {
          v14 = *(_QWORD *)(v8 + 116) == *MEMORY[0x24BDAE878]
             && *(_QWORD *)(v8 + 124) == *(_QWORD *)(MEMORY[0x24BDAE878] + 8);
          if (v14
            || (*(_QWORD *)(v8 + 116) == (_QWORD)rtc::kV4MappedPrefix
              ? (v15 = *(_QWORD *)(v8 + 124) == *((_QWORD *)&rtc::kV4MappedPrefix + 1))
              : (v15 = 0),
                v15))
          {
            v16 = 0;
            goto LABEL_69;
          }
        }
        v20 = *(_DWORD *)(v8 + 208);
        if (v20)
        {
          v21 = (v12 >> 1) & 1;
          v22 = (v12 >> 2) & 1;
          if (v20 != 3)
            v22 = 0;
          if (v20 == 1)
            v16 = v21;
          else
            v16 = v22;
          goto LABEL_45;
        }
        if ((v12 & 2) == 0)
          goto LABEL_44;
        if (v13 == 2)
        {
          v37 = *(_DWORD *)(v8 + 116);
          if ((unsigned __int16)v37 == 65193
            || *(_DWORD *)(v8 + 116) == 127
            || (v38 = bswap32(v37), (v38 & 0xFFFF0000) == 0xC0A80000)
            || (v38 & 0xFF000000) == 0xA000000
            || (v38 & 0xFFF00000) == 0xAC100000
            || (v16 = 1, (*(_DWORD *)(v8 + 116) & 0xC0FF) == 0x4064))
          {
LABEL_44:
            v16 = v3[168] & 1;
          }
LABEL_45:
          if (v13 != 30)
          {
            if (v13 != 2)
            {
              v24 = 0;
              this = (*(uint64_t (**)(_QWORD *))(*v7 + 64))(v7);
              if ((this & 1) != 0)
                goto LABEL_80;
              goto LABEL_83;
            }
            v23 = *(_DWORD *)(v8 + 116) == 0;
            goto LABEL_76;
          }
          goto LABEL_69;
        }
        if (v13 != 30)
        {
          v16 = 1;
          goto LABEL_45;
        }
        if ((*(_QWORD *)(v8 + 116) & 0xC0FFLL) == 0x80FE)
          goto LABEL_44;
        v26 = *(_QWORD *)(v8 + 116) == *MEMORY[0x24BDAE880]
           && *(_QWORD *)(v8 + 124) == *(_QWORD *)(MEMORY[0x24BDAE880] + 8);
        v27 = !v26;
        if (*(_QWORD *)(v8 + 116) == 253 || !v27)
          goto LABEL_44;
        v16 = 1;
LABEL_69:
        if (*(_QWORD *)(v8 + 116) == *MEMORY[0x24BDAE878]
          && *(_QWORD *)(v8 + 124) == *(_QWORD *)(MEMORY[0x24BDAE878] + 8))
        {
          v24 = 1;
          this = (*(uint64_t (**)(_QWORD *))(*v7 + 64))(v7);
          if ((this & 1) != 0)
            goto LABEL_80;
          goto LABEL_83;
        }
        v23 = *(_QWORD *)(v8 + 116) == (_QWORD)rtc::kV4MappedPrefix
           && *(_QWORD *)(v8 + 124) == *((_QWORD *)&rtc::kV4MappedPrefix + 1);
LABEL_76:
        v24 = v23;
        this = (*(uint64_t (**)(_QWORD *))(*v7 + 64))(v7);
        if ((this & 1) != 0)
        {
LABEL_80:
          v29 = 1;
          if (((v16 | v24 ^ 1) & 1) == 0)
            goto LABEL_98;
          goto LABEL_10;
        }
LABEL_83:
        v30 = (unsigned __int16 *)(v8 + 32);
        if (*(char *)(v8 + 55) < 0)
        {
          v31 = *(_QWORD *)(v8 + 40);
          if (v31 < 0 || (v30 = *(unsigned __int16 **)v30, v31) && !v30)
          {
            __break(1u);
            return this;
          }
        }
        else
        {
          v31 = *(unsigned __int8 *)(v8 + 55);
        }
        if (v31 == 3)
        {
          v32 = *v30;
          v33 = *((unsigned __int8 *)v30 + 2);
          v29 = v32 == (unsigned __int16)cricket::TCP_PROTOCOL_NAME && v33 == 112;
          if (((v16 | v24 ^ 1) & 1) != 0)
            goto LABEL_10;
LABEL_98:
          LOBYTE(v16) = v29 & v3[168];
          goto LABEL_10;
        }
        v29 = 0;
        if (((v16 | v24 ^ 1) & 1) == 0)
          goto LABEL_98;
LABEL_10:
        v10 |= v16;
        v8 += 432;
        if (v8 == v9)
        {
          *((_DWORD *)v4 + 5) = v57;
          v5 = v56;
          if ((v10 & 1) == 0)
            goto LABEL_5;
          goto LABEL_6;
        }
      }
    }
  }
  return this;
}

void cricket::BasicPortAllocatorSession::StartGettingPorts(cricket::BasicPortAllocatorSession *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v17)(uint64_t);

  *((_DWORD *)this + 170) = 0;
  v2 = *((_QWORD *)this + 69);
  v3 = (unsigned int *)*((_QWORD *)this + 86);
  if (v3)
  {
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = (_QWORD *)operator new();
  *v5 = v3;
  v5[1] = this;
  v5[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v5[4] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::BasicPortAllocatorSession::StartGettingPorts(void)::$_1 &&>;
  v15[0] = v5;
  v16 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v17 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v2 + 8))(v2, v15, &v14, &v13);
  v16(1, v15, v15);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
}

uint64_t cricket::BasicPortAllocatorSession::StopGettingPorts(cricket::BasicPortAllocatorSession *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(cricket::BasicPortAllocatorSession *))(*(_QWORD *)this + 48))(this);
  *((_DWORD *)this + 170) = 2;
  return result;
}

uint64_t cricket::BasicPortAllocatorSession::ClearGettingPorts(cricket::BasicPortAllocatorSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t result;
  char v13;
  char v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v17)(uint64_t);

  ++*((_DWORD *)this + 171);
  v2 = *((_QWORD *)this + 76);
  v3 = *((_QWORD *)this + 75);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v5 = 0;
    v6 = v4 >> 3;
    do
    {
      v7 = *(_QWORD *)(v3 + 8 * v5);
      if (*(_DWORD *)(v7 + 64) == 1)
      {
        *(_DWORD *)(v7 + 64) = 2;
        ++*(_DWORD *)(v7 + 176);
      }
      ++v5;
    }
    while (v6 > v5);
  }
  v8 = *((_QWORD *)this + 69);
  v9 = (unsigned int *)*((_QWORD *)this + 86);
  if (v9)
  {
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (_QWORD *)operator new();
  *v11 = v9;
  v11[1] = this;
  v11[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v11[4] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::BasicPortAllocatorSession::ClearGettingPorts(void)::$_1 &&>;
  v15[0] = v11;
  v16 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v17 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v8 + 8))(v8, v15, &v14, &v13);
  result = v16(1, v15, v15);
  *((_DWORD *)this + 170) = 1;
  return result;
}

BOOL cricket::BasicPortAllocatorSession::IsGettingPorts(cricket::BasicPortAllocatorSession *this)
{
  return *((_DWORD *)this + 170) == 0;
}

BOOL cricket::BasicPortAllocatorSession::IsCleared(cricket::BasicPortAllocatorSession *this)
{
  return *((_DWORD *)this + 170) == 1;
}

BOOL cricket::BasicPortAllocatorSession::IsStopped(cricket::BasicPortAllocatorSession *this)
{
  return *((_DWORD *)this + 170) == 2;
}

std::string *cricket::BasicPortAllocatorSession::GetNetworks(cricket::BasicPortAllocatorSession *this, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  int v6;
  int v7;
  std::string::size_type v8;
  std::string::size_type size;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  rtc::Network **v19;
  rtc::Network **v20;
  rtc::Network *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string::size_type v29;
  _QWORD *v30;
  std::string::size_type **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  std::string *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  unsigned __int16 v44;
  uint64_t v45;
  unsigned int Cost;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  std::string::size_type *v54;
  std::string::size_type *v55;
  std::string::size_type *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  std::string::size_type v68;
  std::string::size_type *v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  std::string::size_type *v79;
  char *v80;
  char *v81;
  _OWORD *v82;
  char *v83;
  uint64_t v84;
  unsigned int v85;
  char *v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  std::string::size_type v92;
  int v93;
  std::string::size_type *v94;
  unint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  char *v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  std::string *result;
  uint64_t v110;
  std::string::size_type *v111;
  void *v112;
  cricket::BasicPortAllocatorSession *v113;
  _QWORD v114[3];
  _QWORD *v115;
  std::string v116;
  _QWORD v117[3];
  _QWORD *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t *v122;
  std::string v123;
  _QWORD v124[3];
  _QWORD *v125;
  std::string __p;
  _QWORD v127[3];
  _QWORD *v128;
  _QWORD v129[3];
  _QWORD *v130;
  std::string v131;
  _QWORD v132[3];
  _QWORD *v133;
  std::string v134;
  std::string *v135;
  std::string v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 544) + 312);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  v7 = *(_DWORD *)(a2 + 448);
  if (v6 == 1)
  {
    v7 |= 0x400u;
    *(_DWORD *)(a2 + 448) = v7;
  }
  v113 = this;
  if ((v7 & 0x400) != 0)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v5 + 64))(&v134, v5);
    v29 = v134.__r_.__value_.__r.__words[2];
    *(_OWORD *)this = *(_OWORD *)&v134.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 2) = v29;
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v5 + 48))(&v134, v5);
    v8 = v134.__r_.__value_.__r.__words[0];
    *(_QWORD *)this = v134.__r_.__value_.__r.__words[0];
    size = v134.__r_.__value_.__l.__size_;
    *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v134.__r_.__value_.__r.__words[1];
    v10 = size;
    if (v8 == size || (*(_BYTE *)(a2 + 449) & 0x80) != 0)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v5 + 64))(&v134, v5);
      std::vector<rtc::Network const*>::__insert_with_size[abi:sn180100]<std::__wrap_iter<rtc::Network const**>,std::__wrap_iter<rtc::Network const**>>((uint64_t)this, v10, v134.__r_.__value_.__l.__data_, (char *)v134.__r_.__value_.__l.__size_, (uint64_t)(v134.__r_.__value_.__l.__size_ - v134.__r_.__value_.__r.__words[0]) >> 3);
      if (v134.__r_.__value_.__r.__words[0])
      {
        v134.__r_.__value_.__l.__size_ = v134.__r_.__value_.__r.__words[0];
        operator delete(v134.__r_.__value_.__l.__data_);
      }
    }
    v11 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
    v19 = *(rtc::Network ***)this;
    v20 = (rtc::Network **)*((_QWORD *)this + 1);
    if ((v11 & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    for (; v19 != v20; ++v19)
    {
      v21 = *v19;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        v2 = v2 & 0xFFFFFFFF00000000 | 0x1651;
        rtc::Network::ToString(v21, &v134);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v134.__r_.__value_.__l.__data_);
      }
    }
  }
  if ((*(_BYTE *)(a2 + 450) & 1) != 0)
  {
    v132[0] = &off_24C0AFF50;
    v133 = v132;
    v30 = v133;
    if (v133 == v132)
    {
      v32 = 4;
      v30 = v132;
      v31 = (std::string::size_type **)v113;
    }
    else
    {
      v31 = (std::string::size_type **)v113;
      if (!v133)
        goto LABEL_23;
      v32 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v32))();
LABEL_23:
    if (v135)
    {
      if (v135 == &v134)
      {
        v130 = v129;
        (*(void (**)(std::string *, _QWORD *))(v134.__r_.__value_.__r.__words[0] + 24))(&v134, v129);
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_33;
      }
      else
      {
        v130 = (_QWORD *)(*(uint64_t (**)(void))(v135->__r_.__value_.__r.__words[0] + 16))();
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_33:
          std::string::__init_copy_ctor_external(&v131, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
          if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_34:
            operator delete(v131.__r_.__value_.__l.__data_);
            v33 = v130;
            if (v130 == v129)
              goto LABEL_35;
            goto LABEL_30;
          }
LABEL_29:
          v33 = v130;
          if (v130 == v129)
          {
LABEL_35:
            v34 = 4;
            v33 = v129;
            goto LABEL_36;
          }
LABEL_30:
          if (!v33)
            goto LABEL_37;
          v34 = 5;
LABEL_36:
          (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_37:
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v136.__r_.__value_.__l.__data_);
            v35 = v135;
            if (v135 != &v134)
              goto LABEL_39;
          }
          else
          {
            v35 = v135;
            if (v135 != &v134)
            {
LABEL_39:
              if (!v35)
                goto LABEL_44;
              v36 = 5;
              goto LABEL_43;
            }
          }
          v36 = 4;
          v35 = &v134;
LABEL_43:
          (*(void (**)(void))(v35->__r_.__value_.__r.__words[0] + 8 * v36))();
          goto LABEL_44;
        }
      }
    }
    else
    {
      v130 = 0;
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_33;
    }
    v131 = v136;
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_34;
    goto LABEL_29;
  }
LABEL_44:
  v127[0] = &off_24C0AFF98;
  v127[1] = a2;
  v128 = v127;
  v37 = v128;
  if (v128 == v127)
  {
    v39 = 4;
    v37 = v127;
    v38 = (uint64_t)v113;
  }
  else
  {
    v38 = (uint64_t)v113;
    if (!v128)
      goto LABEL_49;
    v39 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v39))();
LABEL_49:
  if (!v135)
  {
    v125 = 0;
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_59;
    goto LABEL_54;
  }
  if (v135 == &v134)
  {
    v125 = v124;
    (*(void (**)(std::string *, _QWORD *))(v134.__r_.__value_.__r.__words[0] + 24))(&v134, v124);
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_59;
LABEL_54:
    __p = v136;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_60;
    goto LABEL_55;
  }
  v125 = (_QWORD *)(*(uint64_t (**)(void))(v135->__r_.__value_.__r.__words[0] + 16))();
  if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_54;
LABEL_59:
  std::string::__init_copy_ctor_external(&__p, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_60:
    operator delete(__p.__r_.__value_.__l.__data_);
    v40 = v125;
    if (v125 == v124)
      goto LABEL_61;
    goto LABEL_56;
  }
LABEL_55:
  v40 = v125;
  if (v125 == v124)
  {
LABEL_61:
    v41 = 4;
    v40 = v124;
    goto LABEL_62;
  }
LABEL_56:
  if (!v40)
    goto LABEL_63;
  v41 = 5;
LABEL_62:
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_63:
  if ((*(_BYTE *)(a2 + 449) & 0x20) == 0)
    goto LABEL_101;
  v42 = *(uint64_t **)v38;
  v43 = *(uint64_t **)(v38 + 8);
  v44 = 999;
  if (*(uint64_t **)v38 != v43)
  {
    do
    {
      v47 = *v42;
      rtc::Network::GetBestIP(*v42, (uint64_t)&v119);
      if (v120 == 2)
      {
        if ((__int16)v121 != -343)
          goto LABEL_66;
      }
      else if (v120 != 30 || (v121 & 0xC0FF) != 0x80FE)
      {
LABEL_66:
        v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 152))(a2);
        Cost = rtc::Network::GetCost(v47, *(_QWORD *)(v45 + 304));
        if (Cost < v44)
          v44 = Cost;
      }
      ++v42;
    }
    while (v42 != v43);
  }
  v117[0] = &off_24C0AFFE0;
  v117[1] = v44;
  v117[2] = a2;
  v118 = v117;
  v48 = v118;
  if (v118 == v117)
  {
    v49 = 4;
    v48 = v117;
  }
  else
  {
    if (!v118)
      goto LABEL_80;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_80:
  if (!v122)
  {
    v115 = 0;
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_90;
    goto LABEL_85;
  }
  if (v122 == &v119)
  {
    v115 = v114;
    (*(void (**)(uint64_t *, _QWORD *))(v119 + 24))(&v119, v114);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_90;
LABEL_85:
    v116 = v123;
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_91;
    goto LABEL_86;
  }
  v115 = (_QWORD *)(*(uint64_t (**)(void))(*v122 + 16))();
  if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_85;
LABEL_90:
  std::string::__init_copy_ctor_external(&v116, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_91:
    operator delete(v116.__r_.__value_.__l.__data_);
    v50 = v115;
    if (v115 == v114)
      goto LABEL_92;
    goto LABEL_87;
  }
LABEL_86:
  v50 = v115;
  if (v115 == v114)
  {
LABEL_92:
    v51 = 4;
    v50 = v114;
    goto LABEL_93;
  }
LABEL_87:
  if (!v50)
    goto LABEL_94;
  v51 = 5;
LABEL_93:
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_94:
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v123.__r_.__value_.__l.__data_);
    v52 = v122;
    if (v122 != &v119)
      goto LABEL_96;
LABEL_99:
    v53 = 4;
    v52 = &v119;
    goto LABEL_100;
  }
  v52 = v122;
  if (v122 == &v119)
    goto LABEL_99;
LABEL_96:
  if (!v52)
    goto LABEL_101;
  v53 = 5;
LABEL_100:
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_101:
  v55 = *(std::string::size_type **)v38;
  v54 = *(std::string::size_type **)(v38 + 8);
  if (*(std::string::size_type **)v38 == v54)
  {
    v77 = *(_DWORD *)(*(_QWORD *)(a2 + 544) + 128);
    if ((v77 & 0x80000000) == 0)
    {
      v80 = 0;
      v81 = 0;
      goto LABEL_201;
    }
    v79 = 0;
    v57 = 0;
    v56 = 0;
LABEL_145:
    v82 = operator new(0x1CuLL);
    *v82 = xmmword_208F05888;
    v112 = v82;
    *(_OWORD *)((char *)v82 + 12) = *(__int128 *)((char *)&xmmword_208F05888 + 12);
    if (v77 < 1)
    {
      v81 = 0;
      v80 = 0;
LABEL_199:
      operator delete(v112);
      v38 = (uint64_t)v113;
      if (!v56)
        goto LABEL_201;
LABEL_200:
      operator delete(v56);
      goto LABEL_201;
    }
    v81 = 0;
    v80 = 0;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 7 * v77;
    v111 = v79;
    while (1)
    {
      v88 = (v57 - (char *)v79) >> 3;
      if ((int)v88 >= 1)
        break;
LABEL_195:
      v84 = (v86 - v81) >> 3;
      if (v77 > (int)v84 && (int)++v85 < v87)
        continue;
      goto LABEL_199;
    }
    v89 = *((_DWORD *)v112 + v85 % 7);
    v90 = ((unint64_t)(v57 - (char *)v79) >> 3);
    if (v89 == 4)
    {
      v91 = 0;
      while (v88 != v91)
      {
        v92 = v56[v91];
        v93 = *(_DWORD *)(v92 + 272);
        if (v93 <= 127)
        {
          if (v93 == 4 || v93 == 64)
            goto LABEL_159;
        }
        else if (v93 == 128 || v93 == 256 || v93 == 512)
        {
          goto LABEL_159;
        }
        if (v90 == ++v91)
          goto LABEL_195;
      }
LABEL_213:
      __break(1u);
LABEL_214:
      abort();
    }
    v91 = 0;
    while (1)
    {
      if (v88 == v91)
        goto LABEL_213;
      v92 = v56[v91];
      if (v89 == *(_DWORD *)(v92 + 272))
        break;
      if (v90 == ++v91)
        goto LABEL_195;
    }
LABEL_159:
    v94 = &v56[v91];
    if (v86 < v83)
    {
      if (!v86)
        goto LABEL_213;
      *(_QWORD *)v86 = v92;
      v80 = v86 + 8;
      goto LABEL_191;
    }
    v95 = v84 + 1;
    if ((unint64_t)(v84 + 1) >> 61)
      goto LABEL_214;
    if ((v83 - v81) >> 2 > v95)
      v95 = (v83 - v81) >> 2;
    if ((unint64_t)(v83 - v81) >= 0x7FFFFFFFFFFFFFF8)
      v95 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v95)
      goto LABEL_213;
    if (v95 >> 61)
      goto LABEL_215;
    v96 = 8 * v95;
    v97 = operator new(8 * v95);
    v98 = &v97[8 * v84];
    *(_QWORD *)v98 = *v94;
    v80 = v98 + 8;
    if (v86 == v81)
    {
LABEL_188:
      v81 = v98;
      v83 = &v97[v96];
      if (v86)
        operator delete(v86);
      v87 = 7 * v77;
LABEL_191:
      if (v57 == (char *)v94)
        goto LABEL_213;
      if (v57 != (char *)(v94 + 1))
      {
        memmove(v94, v94 + 1, v57 - (char *)(v94 + 1));
        v87 = 7 * v77;
      }
      v57 -= 8;
      v86 = v80;
      v79 = v111;
      goto LABEL_195;
    }
    v99 = v86 - v81 - 8;
    if (v99 >= 0x168)
    {
      v101 = (v86 - 8 - v81) & 0xFFFFFFFFFFFFFFF8;
      if (&v97[8 * v84 - 8 - v101] > &v97[8 * v84 - 8])
      {
        v100 = v86;
      }
      else if (&v86[-v101 - 8] > v86 - 8)
      {
        v100 = v86;
      }
      else if ((unint64_t)(v86 - &v97[8 * v84]) >= 0x20)
      {
        v102 = (v99 >> 3) + 1;
        v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
        v100 = &v86[-v103];
        v98 -= v103;
        v104 = &v97[8 * v84 - 16];
        v105 = v86 - 16;
        v106 = v102 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v107 = *(_OWORD *)v105;
          *(v104 - 1) = *((_OWORD *)v105 - 1);
          *v104 = v107;
          v104 -= 2;
          v105 -= 32;
          v106 -= 4;
        }
        while (v106);
        if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_187;
      }
      else
      {
        v100 = v86;
      }
    }
    else
    {
      v100 = v86;
    }
    do
    {
      v108 = *((_QWORD *)v100 - 1);
      v100 -= 8;
      *((_QWORD *)v98 - 1) = v108;
      v98 -= 8;
    }
    while (v100 != v81);
LABEL_187:
    v86 = v81;
    goto LABEL_188;
  }
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  do
  {
    while (*(_DWORD *)(*v55 + 184) != 30)
    {
      if (++v55 == v54)
        goto LABEL_136;
    }
    if (v59 >= v58)
    {
      v61 = (v59 - v60) >> 3;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61)
        goto LABEL_214;
      if ((v58 - v60) >> 2 > v62)
        v62 = (v58 - v60) >> 2;
      if ((unint64_t)(v58 - v60) >= 0x7FFFFFFFFFFFFFF8)
        v62 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v62)
        goto LABEL_213;
      if (v62 >> 61)
LABEL_215:
        std::__throw_bad_array_new_length[abi:sn180100]();
      v63 = 8 * v62;
      v64 = operator new(8 * v62);
      v56 = (std::string::size_type *)&v64[8 * v61];
      *v56 = *v55;
      v57 = (char *)(v56 + 1);
      if (v59 == v60)
      {
        v38 = (uint64_t)v113;
        v58 = &v64[v63];
        if (!v60)
          goto LABEL_124;
        goto LABEL_123;
      }
      v65 = v59 - v60 - 8;
      if (v65 >= 0x168
        && (v66 = (v59 - 8 - v60) & 0xFFFFFFFFFFFFFFF8, &v64[v59 - v60 - 8 - v66] <= &v64[v59 - v60 - 8])
        && &v59[-v66 - 8] <= v59 - 8
        && (unint64_t)(v60 - v64) >= 0x20)
      {
        v71 = (v65 >> 3) + 1;
        v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v59[-v72];
        v56 = (std::string::size_type *)((char *)v56 - v72);
        v73 = &v64[8 * v61 - 16];
        v74 = v59 - 16;
        v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
        v38 = (uint64_t)v113;
        do
        {
          v76 = *(_OWORD *)v74;
          *(v73 - 1) = *((_OWORD *)v74 - 1);
          *v73 = v76;
          v73 -= 2;
          v74 -= 32;
          v75 -= 4;
        }
        while (v75);
        if (v71 == (v71 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_122:
          v58 = &v64[v63];
          if (!v60)
          {
LABEL_124:
            v60 = (char *)v56;
            goto LABEL_125;
          }
LABEL_123:
          operator delete(v60);
          goto LABEL_124;
        }
      }
      else
      {
        v67 = v59;
        v38 = (uint64_t)v113;
      }
      do
      {
        v68 = *((_QWORD *)v67 - 1);
        v67 -= 8;
        *--v56 = v68;
      }
      while (v67 != v60);
      goto LABEL_122;
    }
    if (!v59)
      goto LABEL_213;
    *(_QWORD *)v59 = *v55;
    v57 = v59 + 8;
LABEL_125:
    v69 = *(std::string::size_type **)(v38 + 8);
    if (v69 == v55)
      goto LABEL_213;
    v70 = (char *)v69 - (char *)(v55 + 1);
    if (v69 != v55 + 1)
      memmove(v55, v55 + 1, (char *)v69 - (char *)(v55 + 1));
    v54 = (std::string::size_type *)((char *)v55 + v70);
    *(_QWORD *)(v38 + 8) = (char *)v55 + v70;
    v59 = v57;
  }
  while (v55 != (std::string::size_type *)((char *)v55 + v70));
LABEL_136:
  v77 = *(_DWORD *)(*(_QWORD *)(a2 + 544) + 128);
  v78 = (v57 - (char *)v56) >> 3;
  if (v77 < (int)v78)
  {
    v79 = v56;
    goto LABEL_145;
  }
  if (v57 == (char *)v56)
  {
    v81 = 0;
    v80 = 0;
    if (!v56)
      goto LABEL_201;
    goto LABEL_200;
  }
  if (v57 - (char *)v56 < 0)
    goto LABEL_214;
  v81 = (char *)operator new(v57 - (char *)v56);
  v80 = &v81[8 * v78];
  memcpy(v81, v56, v57 - (char *)v56);
  if (v56)
    goto LABEL_200;
LABEL_201:
  std::vector<rtc::Network const*>::__insert_with_size[abi:sn180100]<std::__wrap_iter<rtc::Network const**>,std::__wrap_iter<rtc::Network const**>>(v38, *(_QWORD *)(v38 + 8), v81, v80, (v80 - v81) >> 3);
  if (v81)
    operator delete(v81);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v136.__r_.__value_.__l.__data_);
    result = v135;
    if (v135 == &v134)
      goto LABEL_208;
LABEL_205:
    if (result)
    {
      v110 = 5;
      return (std::string *)(*(uint64_t (**)(void))(result->__r_.__value_.__r.__words[0] + 8 * v110))();
    }
  }
  else
  {
    result = v135;
    if (v135 != &v134)
      goto LABEL_205;
LABEL_208:
    v110 = 4;
    result = &v134;
    return (std::string *)(*(uint64_t (**)(void))(result->__r_.__value_.__r.__words[0] + 8 * v110))();
  }
  return result;
}

void cricket::BasicPortAllocatorSession::RegatherOnFailedNetworks(cricket::BasicPortAllocatorSession *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  const void **v9;
  char *v10;
  uint64_t **v11;
  uint64_t *v12;
  std::string *v13;
  __int128 v14;
  uint64_t *v15;
  char **v16;
  uint64_t v17;
  const void **v18;
  uint64_t *v19;
  size_t v20;
  BOOL v21;
  _QWORD *v22;
  size_t v23;
  size_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  const void **v29;
  uint64_t *v30;
  size_t v31;
  _QWORD *v33;
  size_t v34;
  size_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *i;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  void (*v62)(_QWORD *, cricket::BasicPortAllocatorSession *, uint64_t);
  _QWORD *v63;
  _QWORD *v64;
  uint64_t **v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  char **v70;
  char *v71[2];

  cricket::BasicPortAllocatorSession::GetNetworks((cricket::BasicPortAllocatorSession *)&v63, (uint64_t)this);
  v71[0] = 0;
  v71[1] = 0;
  v70 = v71;
  v2 = (_QWORD *)*((_QWORD *)this + 78);
  v3 = (_QWORD *)*((_QWORD *)this + 79);
  if (v2 == v3)
  {
    v5 = v63;
    v4 = v64;
    v66 = 0;
    v67 = 0;
    v65 = &v66;
    goto LABEL_7;
  }
  do
  {
    if (*(_QWORD *)(*v2 + 688))
    {
      v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 24))(*v2);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v70, (const void **)(v6 + 128), v6 + 128);
    }
    v2 += 3;
  }
  while (v2 != v3);
  v7 = (char *)v70;
  v5 = v63;
  v4 = v64;
  v66 = 0;
  v67 = 0;
  v65 = &v66;
  if (v70 != v71)
  {
    do
    {
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)&v65, (uint64_t *)&v66, &v69, &v68, (uint64_t)(v7 + 32));
      if (*v9)
      {
        v10 = (char *)*((_QWORD *)v7 + 1);
        if (v10)
          goto LABEL_19;
      }
      else
      {
        v11 = (uint64_t **)v9;
        v12 = (uint64_t *)operator new(0x38uLL);
        v13 = (std::string *)(v12 + 4);
        if (v7[55] < 0)
        {
          std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)v7 + 4), *((_QWORD *)v7 + 5));
        }
        else
        {
          v14 = *((_OWORD *)v7 + 2);
          v12[6] = *((_QWORD *)v7 + 6);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
        }
        v15 = v69;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v15;
        *v11 = v12;
        if (*v65)
        {
          v65 = (uint64_t **)*v65;
          v12 = *v11;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v66, v12);
        ++v67;
        v10 = (char *)*((_QWORD *)v7 + 1);
        if (v10)
        {
          do
          {
LABEL_19:
            v16 = (char **)v10;
            v10 = *(char **)v10;
          }
          while (v10);
          goto LABEL_9;
        }
      }
      do
      {
        v16 = (char **)*((_QWORD *)v7 + 2);
        v21 = *v16 == v7;
        v7 = (char *)v16;
      }
      while (!v21);
LABEL_9:
      v7 = (char *)v16;
    }
    while (v16 != v71);
  }
LABEL_7:
  v8 = v4;
  if (v5 != v4)
  {
    do
    {
      v17 = *v5;
      v18 = (const void **)(*v5 + 128);
      v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)&v65, v18, v66, (uint64_t *)&v66);
      if (&v66 != (uint64_t **)v19)
      {
        if (*(char *)(v17 + 151) < 0)
        {
          v20 = *(_QWORD *)(v17 + 136);
          if ((v20 & 0x8000000000000000) != 0)
            goto LABEL_109;
          v18 = (const void **)*v18;
          v21 = v20 && v18 == 0;
          if (v21)
            goto LABEL_109;
        }
        else
        {
          v20 = *(unsigned __int8 *)(v17 + 151);
        }
        v22 = v19 + 4;
        if (*((char *)v19 + 55) < 0)
        {
          v23 = v19[5];
          if ((v23 & 0x8000000000000000) != 0)
            goto LABEL_109;
          v22 = (_QWORD *)*v22;
          if (v23 && v22 == 0)
            goto LABEL_109;
        }
        else
        {
          v23 = *((unsigned __int8 *)v19 + 55);
        }
        if (v23 >= v20)
          v25 = v20;
        else
          v25 = v23;
        v26 = memcmp(v18, v22, v25);
        if (v26)
        {
          if ((v26 & 0x80000000) == 0)
          {
LABEL_46:
            v8 = v4;
            if (v5 == v4)
              goto LABEL_75;
            v27 = v5 + 1;
            v8 = v5;
            while (2)
            {
              if (v27 == v4)
                goto LABEL_75;
              v28 = *v27;
              v29 = (const void **)(*v27 + 128);
              v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)&v65, v29, v66, (uint64_t *)&v66);
              if (&v66 == (uint64_t **)v30)
              {
LABEL_48:
                *v8++ = *v27;
              }
              else
              {
                if (*(char *)(v28 + 151) < 0)
                {
                  v31 = *(_QWORD *)(v28 + 136);
                  if ((v31 & 0x8000000000000000) != 0)
                    goto LABEL_109;
                  v29 = (const void **)*v29;
                  if (v31 && v29 == 0)
                    goto LABEL_109;
                }
                else
                {
                  v31 = *(unsigned __int8 *)(v28 + 151);
                }
                v33 = v30 + 4;
                if (*((char *)v30 + 55) < 0)
                {
                  v34 = v30[5];
                  if ((v34 & 0x8000000000000000) != 0)
                    goto LABEL_109;
                  v33 = (_QWORD *)*v33;
                  if (v34 && v33 == 0)
                    goto LABEL_109;
                }
                else
                {
                  v34 = *((unsigned __int8 *)v30 + 55);
                }
                if (v34 >= v31)
                  v36 = v31;
                else
                  v36 = v34;
                v37 = memcmp(v29, v33, v36);
                if (v37)
                {
                  if (v37 < 0)
                    goto LABEL_48;
                }
                else if (v31 < v34)
                {
                  goto LABEL_48;
                }
              }
              ++v27;
              continue;
            }
          }
        }
        else if (v20 >= v23)
        {
          goto LABEL_46;
        }
      }
      ++v5;
    }
    while (v5 != v4);
    v8 = v4;
  }
LABEL_75:
  if (v4 < v8)
  {
LABEL_109:
    __break(1u);
  }
  else
  {
    v38 = v63;
    if (v8 == v4)
      v8 = v64;
    else
      v64 = v8;
    std::__tree<rtc::SocketAddress>::destroy((uint64_t)&v65, (char *)v66);
    std::__tree<rtc::SocketAddress>::destroy((uint64_t)&v70, v71[0]);
    if (v38 != v8)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
      v46 = (uint64_t *)*((_QWORD *)this + 75);
      for (i = (uint64_t *)*((_QWORD *)this + 76); v46 != i; ++v46)
      {
        v48 = *v46;
        if (!*(_BYTE *)(*v46 + 8))
        {
          v49 = v38;
          while (*v49 != *(_QWORD *)(v48 + 16))
          {
            if (++v49 == v8)
            {
              v49 = v8;
              break;
            }
          }
          if (v49 != v8)
          {
            *(_BYTE *)(v48 + 8) = 1;
            v50 = *(_QWORD *)(v48 + 96);
            if (v50)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 88))(v50, 50);
              (*(void (**)(_QWORD))(**(_QWORD **)(v48 + 96) + 48))(*(_QWORD *)(v48 + 96));
            }
          }
        }
      }
      cricket::BasicPortAllocatorSession::GetUnprunedPorts((char **)&v70, *((_QWORD *)this + 78), *((_QWORD *)this + 79), (uint64_t)&v63);
      v51 = (uint64_t *)v70;
      v52 = (uint64_t *)v71[0];
      if (v70 != (char **)v71[0])
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v53, v54, v55, v56, v57, v58, v59, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
        cricket::BasicPortAllocatorSession::PrunePortsAndRemoveCandidates(this, v51, v52, v55, v56, v57, v58, v59);
      }
      if (*((_BYTE *)this + 568)
        && *((_BYTE *)this + 569)
        && ((*(uint64_t (**)(cricket::BasicPortAllocatorSession *))(*(_QWORD *)this + 64))(this) & 1) == 0)
      {
        v60 = (_QWORD *)*((_QWORD *)this + 52);
        for (*((_QWORD *)this + 54) = v60; v60 != (_QWORD *)((char *)this + 408); v60 = (_QWORD *)*((_QWORD *)this + 54))
        {
          v62 = (void (*)(_QWORD *, cricket::BasicPortAllocatorSession *, uint64_t))v60[2];
          v61 = v60 + 2;
          *((_QWORD *)this + 54) = *(v61 - 1);
          v62(v61, this, 1);
        }
        cricket::BasicPortAllocatorSession::DoAllocate(this);
      }
      if (v51)
        operator delete(v51);
      v38 = v63;
    }
    if (v38)
      operator delete(v38);
  }
}

void cricket::BasicPortAllocatorSession::GetUnprunedPorts(char **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      if (*(_DWORD *)(v6 + 20) == 3)
        goto LABEL_5;
      v10 = *(_QWORD **)a4;
      v11 = *(_QWORD **)(a4 + 8);
      if (*(_QWORD **)a4 != v11)
      {
        while (*v10 != *(_QWORD *)(*(_QWORD *)(v6 + 8) + 16))
        {
          if (++v10 == v11)
          {
            v10 = *(_QWORD **)(a4 + 8);
            break;
          }
        }
      }
      if (v10 == v11)
        goto LABEL_5;
      v12 = (unint64_t)a1[2];
      if ((unint64_t)v8 < v12)
      {
        if (!v8)
          goto LABEL_40;
        *(_QWORD *)v8 = v6;
        v13 = v8 + 8;
        goto LABEL_4;
      }
      v14 = (v8 - v9) >> 3;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        goto LABEL_41;
      v16 = v12 - (_QWORD)v9;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8;
      v18 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v17)
        v18 = v15;
      if (!v18)
      {
LABEL_40:
        __break(1u);
LABEL_41:
        abort();
      }
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v36 = 8 * v18;
      v19 = operator new(8 * v18);
      v20 = &v19[8 * v14];
      *(_QWORD *)v20 = v6;
      v13 = v20 + 8;
      if (v8 != v9)
        break;
      *a1 = v20;
      a1[1] = v13;
      a1[2] = &v19[v36];
      if (v9)
        goto LABEL_34;
LABEL_3:
      v9 = v20;
LABEL_4:
      a1[1] = v13;
      v8 = v13;
LABEL_5:
      v6 += 24;
      if (v6 == a3)
        return;
    }
    v21 = v8 - v9 - 8;
    if (v21 < 0x168
      || ((v22 = (v8 - 8 - v9) & 0xFFFFFFFFFFFFFFF8,
           v23 = (unint64_t)&v19[v8 - v9 - 8],
           v24 = v23 - v22,
           v25 = (unint64_t)&v8[-v22 - 8],
           v24 <= v23)
        ? (v26 = v25 > (unint64_t)(v8 - 8))
        : (v26 = 1),
          v26 || (unint64_t)(v9 - v19) < 0x20))
    {
      v27 = v8;
      v28 = v36;
    }
    else
    {
      v30 = (v21 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v27 = &v8[-v31];
      v20 -= v31;
      v32 = &v19[8 * v14 - 16];
      v33 = v8 - 16;
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *(_OWORD *)v33;
        *(v32 - 1) = *((_OWORD *)v33 - 1);
        *v32 = v35;
        v32 -= 2;
        v33 -= 32;
        v34 -= 4;
      }
      while (v34);
      v28 = v36;
      if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        *a1 = v20;
        a1[1] = v13;
        a1[2] = &v19[v28];
        if (!v9)
          goto LABEL_3;
LABEL_34:
        operator delete(v9);
        goto LABEL_3;
      }
    }
    do
    {
      v29 = *((_QWORD *)v27 - 1);
      v27 -= 8;
      *((_QWORD *)v20 - 1) = v29;
      v20 -= 8;
    }
    while (v27 != v9);
    goto LABEL_31;
  }
}

void cricket::BasicPortAllocatorSession::PrunePortsAndRemoveCandidates(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  cricket::Port *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  _QWORD *v41;
  _QWORD *v42;
  void (*v43)(_QWORD *, _QWORD *, void **);
  void **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void (*v54)(_QWORD *, _QWORD *, void ***);
  void **v55;
  void **v56;
  uint64_t v57;
  void **v58;
  void **v59;
  uint64_t v60;
  void *__p;
  void *v62;
  uint64_t *v63;

  __p = 0;
  v62 = 0;
  v63 = 0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  if (a2 == a3)
    goto LABEL_39;
  v10 = a2;
  v11 = 0;
  do
  {
    v12 = *v10;
    *(_DWORD *)(v12 + 20) = 3;
    v13 = *(cricket::Port **)v12;
    if (!*(_QWORD *)v12)
    {
      v14 = 0;
      v15 = v63;
      if (v11 < v63)
        goto LABEL_6;
LABEL_10:
      v16 = (uint64_t *)__p;
      v17 = (char *)v11 - (_BYTE *)__p;
      v18 = ((char *)v11 - (_BYTE *)__p) >> 3;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        goto LABEL_54;
      v20 = (char *)v15 - (_BYTE *)__p;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8;
      v22 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v21)
        v22 = v19;
      if (!v22)
      {
LABEL_53:
        __break(1u);
LABEL_54:
        abort();
      }
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v57 = 8 * v22;
      v23 = operator new(8 * v22);
      v24 = (uint64_t *)&v23[8 * v18];
      *v24 = v14;
      v25 = v24 + 1;
      if (v11 == v16)
      {
        __p = &v23[8 * v18];
        v62 = v24 + 1;
        v63 = (uint64_t *)&v23[v57];
        if (!v11)
        {
LABEL_28:
          v11 = v25;
          v62 = v25;
          if (!*(_BYTE *)(v12 + 16))
            goto LABEL_3;
LABEL_29:
          cricket::BasicPortAllocatorSession::GetCandidatesFromPort((uint64_t)a1, *(_QWORD *)v12, (uint64_t)&v58, a4, a5, a6, a7, a8);
          *(_BYTE *)(v12 + 16) = 0;
          goto LABEL_3;
        }
LABEL_27:
        operator delete(v11);
        goto LABEL_28;
      }
      v26 = (char *)v11 - (char *)v16 - 8;
      if (v26 < 0x168
        || ((v27 = ((char *)(v11 - 1) - (char *)v16) & 0xFFFFFFFFFFFFFFF8,
             v28 = (unint64_t)&v23[v17 - 8],
             v29 = v28 - v27,
             v30 = (unint64_t)v11 - v27 - 8,
             v29 <= v28)
          ? (v31 = v30 > (unint64_t)(v11 - 1))
          : (v31 = 1),
            v31 || (unint64_t)((char *)v11 - v17 - v23) < 0x20))
      {
        v32 = v11;
        v33 = v57;
      }
      else
      {
        v35 = (v26 >> 3) + 1;
        v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        v32 = &v11[v36 / 0xFFFFFFFFFFFFFFF8];
        v24 = (uint64_t *)((char *)v24 - v36);
        v37 = &v23[8 * v18 - 16];
        v38 = v11 - 2;
        v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v40 = *(_OWORD *)v38;
          *(v37 - 1) = *((_OWORD *)v38 - 1);
          *v37 = v40;
          v37 -= 2;
          v38 -= 4;
          v39 -= 4;
        }
        while (v39);
        v33 = v57;
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_26:
          v11 = v16;
          __p = v24;
          v62 = v25;
          v63 = (uint64_t *)&v23[v33];
          if (!v16)
            goto LABEL_28;
          goto LABEL_27;
        }
      }
      do
      {
        v34 = *--v32;
        *--v24 = v34;
      }
      while (v32 != v16);
      goto LABEL_26;
    }
    *((_DWORD *)v13 + 181) = 2;
    cricket::Port::PostDestroyIfDead(v13, 0);
    v14 = *(_QWORD *)v12;
    v15 = v63;
    if (v11 >= v63)
      goto LABEL_10;
LABEL_6:
    if (!v11)
      goto LABEL_53;
    *v11++ = v14;
    v62 = v11;
    if (*(_BYTE *)(v12 + 16))
      goto LABEL_29;
LABEL_3:
    ++v10;
  }
  while (v10 != a3);
  if (__p != v11)
  {
    v41 = (_QWORD *)a1[17];
    for (a1[19] = v41; v41 != a1 + 16; v41 = (_QWORD *)a1[19])
    {
      v43 = (void (*)(_QWORD *, _QWORD *, void **))v41[2];
      v42 = v41 + 2;
      a1[19] = *(v42 - 1);
      v43(v42, a1, &__p);
    }
  }
LABEL_39:
  v44 = v58;
  if (v58 != v59)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v45, v46, v47, v48, v49, v50, v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    v52 = (_QWORD *)a1[38];
    for (a1[40] = v52; v52 != a1 + 37; v52 = (_QWORD *)a1[40])
    {
      v54 = (void (*)(_QWORD *, _QWORD *, void ***))v52[2];
      v53 = v52 + 2;
      a1[40] = *(v53 - 1);
      v54(v53, a1, &v58);
    }
    v44 = v58;
  }
  if (v44)
  {
    v55 = v59;
    v56 = v44;
    if (v59 != v44)
    {
      do
        cricket::Candidate::~Candidate(v55 - 54);
      while (v55 != v44);
      v56 = v58;
    }
    v59 = v44;
    operator delete(v56);
  }
  if (__p)
  {
    v62 = __p;
    operator delete(__p);
  }
}

void cricket::BasicPortAllocatorSession::DoAllocate(cricket::BasicPortAllocatorSession *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  BOOL v13;
  BOOL v14;
  std::string::size_type v15;
  std::string::size_type v16;
  _BYTE *v17;
  std::string::size_type v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  char v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  char *v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  _QWORD *v104;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char v113;
  _BYTE __p[28];
  _BYTE v115[32];
  int v116;
  __int128 v117;
  __int16 v118;
  int v119;
  char v120;
  _BYTE v121[24];
  _BYTE *v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  cricket::BasicPortAllocatorSession::GetNetworks((cricket::BasicPortAllocatorSession *)&v111, (uint64_t)this);
  v2 = v111;
  v3 = v112;
  if (v111 == v112)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    goto LABEL_177;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    goto LABEL_51;
  memset(v115, 0, 24);
  v9 = v2;
  do
  {
    v11 = (_QWORD *)(*(_QWORD *)v9 + 128);
    if (*(char *)(*(_QWORD *)v9 + 151) < 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)v9 + 136);
      if ((v12 & 0x8000000000000000) != 0
        || ((v11 = (_QWORD *)*v11, v13 = v12 == 0, v12) ? (v14 = v11 == 0) : (v14 = 0), v14))
      {
LABEL_183:
        __break(1u);
      }
    }
    else
    {
      v12 = *(unsigned __int8 *)(*(_QWORD *)v9 + 151);
      v13 = *(_BYTE *)(*(_QWORD *)v9 + 151) == 0;
    }
    if (v115[23] >= 0)
      v15 = 22;
    else
      v15 = (*(_QWORD *)&v115[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v115[23] >= 0)
      v16 = v115[23];
    else
      v16 = *(_QWORD *)&v115[8];
    if (v15 - v16 >= v12)
    {
      if (!v13)
      {
        if (v115[23] >= 0)
          v17 = v115;
        else
          v17 = *(_BYTE **)v115;
        if (&v17[v16] <= (_BYTE *)v11 && &v17[v16 + v12] > (_BYTE *)v11)
          goto LABEL_183;
        memmove(&v17[v16], v11, v12);
        v19 = v16 + v12;
        if ((v115[23] & 0x80000000) != 0)
          *(_QWORD *)&v115[8] = v16 + v12;
        else
          v115[23] = v19 & 0x7F;
        v17[v19] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace((std::string *)v115, v15, v16 + v12 - v15, v16, v16, 0, v12, (const std::string::value_type *)v11);
    }
    v20 = v115[23];
    if (v115[23] >= 0)
      v10 = 22;
    else
      v10 = (*(_QWORD *)&v115[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v115[23] < 0)
      v20 = *(_QWORD *)&v115[8];
    if (v10 == v20)
    {
      std::string::__grow_by_and_replace((std::string *)v115, v10, 1uLL, v10, v10, 0, 1uLL, " ");
    }
    else
    {
      if (v115[23] >= 0)
        v21 = v115;
      else
        v21 = *(_BYTE **)v115;
      v22 = &v21[v20];
      if (&v21[v20] <= " " && v22 + 1 > " ")
        goto LABEL_183;
      *v22 = 32;
      v23 = v20 + 1;
      if ((v115[23] & 0x80000000) != 0)
        *(_QWORD *)&v115[8] = v23;
      else
        v115[23] = v23 & 0x7F;
      v21[v23] = 0;
    }
    v9 += 8;
  }
  while (v9 != v3);
  *(_OWORD *)__p = *(_OWORD *)v115;
  *(_QWORD *)&__p[16] = *(_QWORD *)&v115[16];
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v10, v4, v5, v6, v7, v8, (uint64_t)v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    v31 = *((_QWORD *)this + 73);
    if (*((_QWORD *)this + 72) != v31)
      goto LABEL_52;
  }
  else
  {
LABEL_51:
    v31 = *((_QWORD *)this + 73);
    if (*((_QWORD *)this + 72) != v31)
    {
LABEL_52:
      v32 = *(_QWORD *)(v31 - 8);
      goto LABEL_55;
    }
  }
  v32 = 0;
LABEL_55:
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v110 = v32;
LABEL_56:
  v108 = v35;
  do
  {
    v36 = *((_DWORD *)this + 112);
    if ((~v36 & 0xF) == 0)
      goto LABEL_177;
    if (!v32 || *(_QWORD *)(v32 + 152) == *(_QWORD *)(v32 + 160))
    {
      v36 |= 4u;
      if ((v36 & 0x40) != 0)
        goto LABEL_65;
    }
    else if ((v36 & 0x40) != 0)
    {
      goto LABEL_65;
    }
    rtc::Network::GetBestIP(*(_QWORD *)&v2[8 * v33], (uint64_t)v115);
    if (*(_DWORD *)&v115[8] == 30)
      goto LABEL_57;
LABEL_65:
    if ((v36 & 0x4000) != 0)
    {
      v37 = (v3 - v2) >> 3;
    }
    else
    {
      v37 = (v3 - v2) >> 3;
      if (v37 <= v33)
        goto LABEL_183;
      rtc::Network::GetBestIP(*(_QWORD *)&v2[8 * v33], (uint64_t)v115);
      if (*(_DWORD *)&v115[8] == 30 && *(_DWORD *)(*(_QWORD *)&v2[8 * v33] + 272) == 2)
        goto LABEL_57;
    }
    if (v37 <= v33)
      goto LABEL_183;
    v38 = *((_QWORD *)this + 75);
    if (*((_QWORD *)this + 76) != v38)
    {
      v39 = 0;
      v40 = 0;
      v41 = *(_QWORD *)&v2[8 * v33];
      do
      {
        if ((~v36 & 0xF) == 0)
          break;
        v42 = *(_QWORD *)(v38 + 8 * v39);
        if (!*(_BYTE *)(v42 + 8) && *(_QWORD *)(v42 + 16) == v41)
        {
          rtc::Network::GetBestIP(v41, (uint64_t)v115);
          v43 = *(_DWORD *)(v42 + 32);
          if (v43 == *(_DWORD *)&v115[8])
          {
            switch(v43)
            {
              case 30:
                if (*(_QWORD *)(v42 + 36) == *(_QWORD *)&v115[12] && *(_QWORD *)(v42 + 44) == *(_QWORD *)&v115[20])
                {
LABEL_94:
                  v45 = *(_DWORD **)(*(_QWORD *)v42 + 624);
                  v46 = *(_DWORD **)(*(_QWORD *)v42 + 632);
                  while (v45 != v46)
                  {
                    if (v45[5] != 3
                      && (*(uint64_t (**)(_QWORD))(**(_QWORD **)v45 + 24))(*(_QWORD *)v45) == *(_QWORD *)(v42 + 16)
                      && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)v45 + 128))(*(_QWORD *)v45)
                      && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)v45 + 16))(*(_QWORD *)v45)
                      && v45[5] != 2)
                    {
                      v36 |= 1u;
                      break;
                    }
                    v45 += 6;
                  }
                  v47 = *(_DWORD **)(*(_QWORD *)v42 + 624);
                  v48 = *(_DWORD **)(*(_QWORD *)v42 + 632);
                  while (v47 != v48)
                  {
                    if (v47[5] != 3
                      && (*(uint64_t (**)(_QWORD))(**(_QWORD **)v47 + 24))(*(_QWORD *)v47) == *(_QWORD *)(v42 + 16)
                      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)v47 + 128))(*(_QWORD *)v47) == 1
                      && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)v47 + 16))(*(_QWORD *)v47)
                      && v47[5] != 2)
                    {
                      v36 |= 8u;
                      break;
                    }
                    v47 += 6;
                  }
                  v32 = v110;
                  if (!v110)
                    break;
                  v49 = *(_QWORD *)(v42 + 56);
                  if (!v49)
                    break;
                  cricket::PortConfiguration::StunServers((cricket::PortConfiguration *)v115, v49);
                  cricket::PortConfiguration::StunServers((cricket::PortConfiguration *)__p, v110);
                  if (*(_QWORD *)&v115[16] == *(_QWORD *)&__p[16])
                  {
                    v50 = *(_QWORD **)v115;
                    if (*(_BYTE **)v115 != &v115[8])
                    {
                      v51 = *(_QWORD **)__p;
                      while (rtc::SocketAddress::EqualIPs((rtc::SocketAddress *)(v50 + 4), (const rtc::SocketAddress *)(v51 + 4))&& *((unsigned __int16 *)v50 + 44) == *((unsigned __int16 *)v51 + 44))
                      {
                        v52 = (_QWORD *)v50[1];
                        v53 = v50;
                        if (v52)
                        {
                          do
                          {
                            v50 = v52;
                            v52 = (_QWORD *)*v52;
                          }
                          while (v52);
                        }
                        else
                        {
                          do
                          {
                            v50 = (_QWORD *)v53[2];
                            v14 = *v50 == (_QWORD)v53;
                            v53 = v50;
                          }
                          while (!v14);
                        }
                        v54 = (_QWORD *)v51[1];
                        if (v54)
                        {
                          do
                          {
                            v55 = v54;
                            v54 = (_QWORD *)*v54;
                          }
                          while (v54);
                        }
                        else
                        {
                          do
                          {
                            v55 = (_QWORD *)v51[2];
                            v14 = *v55 == (_QWORD)v51;
                            v51 = v55;
                          }
                          while (!v14);
                        }
                        v51 = v55;
                        if (v50 == (_QWORD *)&v115[8])
                          goto LABEL_131;
                      }
                      goto LABEL_74;
                    }
LABEL_131:
                    std::__tree<rtc::SocketAddress>::destroy((uint64_t)__p, *(char **)&__p[8]);
                    std::__tree<rtc::SocketAddress>::destroy((uint64_t)v115, *(char **)&v115[8]);
                    v36 |= 2 * (v36 & 1);
                  }
                  else
                  {
LABEL_74:
                    std::__tree<rtc::SocketAddress>::destroy((uint64_t)__p, *(char **)&__p[8]);
                    std::__tree<rtc::SocketAddress>::destroy((uint64_t)v115, *(char **)&v115[8]);
                  }
                  if (*(_QWORD *)(*(_QWORD *)(v42 + 56) + 152) != *(_QWORD *)(*(_QWORD *)(v42 + 56) + 160))
                    v36 |= 4u;
                  v32 = v110;
                }
                break;
              case 2:
                if (*(_DWORD *)(v42 + 36) == *(_DWORD *)&v115[12])
                  goto LABEL_94;
                break;
              case 0:
                goto LABEL_94;
            }
          }
        }
        v38 = *((_QWORD *)this + 75);
        v39 = ++v40;
      }
      while (v40 < (unint64_t)((*((_QWORD *)this + 76) - v38) >> 3));
    }
    if ((~v36 & 0xF) != 0)
    {
      v56 = operator new();
      v2 = v111;
      v3 = v112;
      if ((v112 - v111) >> 3 <= v33)
        goto LABEL_183;
      v57 = (_QWORD *)v56;
      v109 = (v112 - v111) >> 3;
      v58 = *(_QWORD *)&v111[8 * v33];
      v59 = (unsigned int *)*((_QWORD *)this + 86);
      if (v59)
      {
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      v61 = operator new(0x18uLL);
      *v61 = &off_24C0B0028;
      v61[1] = this;
      v61[2] = v59;
      *v57 = this;
      *((_BYTE *)v57 + 8) = 0;
      v57[2] = v58;
      v57[3] = &unk_24C0ACDA0;
      v57[4] = 0;
      v57[5] = 0;
      *((_DWORD *)v57 + 12) = 0;
      v57[7] = v32;
      *((_DWORD *)v57 + 16) = 0;
      *((_DWORD *)v57 + 17) = v36;
      *(_OWORD *)(v57 + 9) = 0u;
      *(_OWORD *)(v57 + 11) = 0u;
      *(_OWORD *)(v57 + 13) = 0u;
      *(_OWORD *)(v57 + 15) = 0u;
      *((_DWORD *)v57 + 34) = 0;
      v57[21] = v61;
      v122 = 0;
      *((_DWORD *)v57 + 44) = 0;
      v62 = operator new();
      *(_DWORD *)v62 = 0;
      *(_BYTE *)(v62 + 4) = 1;
      v57[23] = v62;
      do
        v63 = __ldxr((unsigned int *)v62);
      while (__stxr(v63 + 1, (unsigned int *)v62));
      v64 = v122;
      if (v122 == v121)
      {
        v64 = v121;
        v65 = 4;
LABEL_143:
        (*(void (**)(void))(*v64 + 8 * v65))();
      }
      else if (v122)
      {
        v65 = 5;
        goto LABEL_143;
      }
      if ((*((_BYTE *)v57 + 69) & 1) != 0)
      {
        v66 = *(_QWORD *)(*v57 + 560);
        rtc::Network::GetBestIP(v57[2], (uint64_t)__p);
        memset(v115, 0, 24);
        *(_QWORD *)&v115[24] = &unk_24C0ACDA0;
        v120 = 0;
        v116 = *(_DWORD *)&__p[8];
        v117 = *(_OWORD *)&__p[12];
        v119 = 0;
        v118 = 0;
        v67 = *(unsigned __int16 *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v57 + 152))(*v57) + 120);
        v68 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v57 + 152))(*v57);
        v73 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v66 + 16))(v66, v115, v67, *(unsigned __int16 *)(v68 + 124));
        v74 = v57[12];
        v57[12] = v73;
        if (v74)
          (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
        if ((v115[23] & 0x80000000) != 0)
          operator delete(*(void **)v115);
        v75 = v57[12];
        if (v75)
        {
          *(_QWORD *)v115 = v57;
          if (*(_QWORD *)(v75 + 336))
          {
            v105 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/async_packet_socket.cc", 47, "!received_packet_callback_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v69, v70, v71, v72, v106);
            cricket::BasicPortAllocatorSession::GetCandidateStatsFromReadyPorts(v105);
            return;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 328))(1, v75 + 312, v75 + 312);
          *(_OWORD *)(v75 + 312) = *(_OWORD *)v115;
          *(_QWORD *)(v75 + 328) = absl::internal_any_invocable::LocalManagerTrivial;
          *(_QWORD *)(v75 + 336) = absl::internal_any_invocable::LocalInvoker<false,void,cricket::AllocationSequence::Init(void)::$_0 &,rtc::AsyncPacketSocket *,rtc::ReceivedPacket const&>;
          *(_QWORD *)&v115[16] = absl::internal_any_invocable::EmptyManager;
          *(_QWORD *)&v115[24] = 0;
          absl::internal_any_invocable::EmptyManager(1, v115, v115);
        }
      }
      *((_DWORD *)v57 + 16) = 1;
      v76 = *(_QWORD *)(*v57 + 552);
      v77 = (unsigned int *)v57[23];
      if (v77)
      {
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      v79 = *((_DWORD *)v57 + 44);
      v80 = operator new();
      *(_QWORD *)v80 = v77;
      *(_QWORD *)(v80 + 8) = v57;
      *(_DWORD *)(v80 + 16) = v79;
      *(_QWORD *)(v80 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
      *(_QWORD *)(v80 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,cricket::AllocationSequence::Start(void)::$_0 &&>;
      *(_QWORD *)v115 = v80;
      *(_QWORD *)&v115[16] = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
      *(_QWORD *)&v115[24] = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
      (*(void (**)(uint64_t, _BYTE *, _BYTE *, char *))(*(_QWORD *)v76 + 8))(v76, v115, __p, &v113);
      (*(void (**)(uint64_t, _BYTE *, _BYTE *))&v115[16])(1, v115, v115);
      rtc::Network::GetBestIP(v57[2], (uint64_t)v115);
      *((_DWORD *)v57 + 8) = *(_DWORD *)&v115[8];
      *(_OWORD *)((char *)v57 + 36) = *(_OWORD *)&v115[12];
      v81 = (char *)*((_QWORD *)this + 76);
      v82 = *((_QWORD *)this + 77);
      if ((unint64_t)v81 >= v82)
      {
        v84 = (char *)*((_QWORD *)this + 75);
        v85 = (v81 - v84) >> 3;
        v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 61)
          abort();
        v87 = v82 - (_QWORD)v84;
        if (v87 >> 2 > v86)
          v86 = v87 >> 2;
        v88 = (unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8;
        v89 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v88)
          v89 = v86;
        if (!v89)
          goto LABEL_183;
        if (v89 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v107 = 8 * v89;
        v90 = (char *)operator new(8 * v89);
        v91 = &v90[8 * v85];
        *(_QWORD *)v91 = v57;
        v83 = v91 + 8;
        if (v81 != v84)
        {
          v92 = v81 - v84 - 8;
          if (v92 < 0x58)
            goto LABEL_189;
          if ((unint64_t)(v84 - v90) < 0x20)
            goto LABEL_189;
          v93 = (v92 >> 3) + 1;
          v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
          v95 = &v81[-v94];
          v91 -= v94;
          v96 = &v90[v81 - v84 - 16];
          v97 = (__int128 *)(v81 - 16);
          v98 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v99 = *v97;
            *((_OWORD *)v96 - 1) = *(v97 - 1);
            *(_OWORD *)v96 = v99;
            v96 -= 32;
            v97 -= 2;
            v98 -= 4;
          }
          while (v98);
          v81 = v95;
          if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_189:
            do
            {
              v100 = *((_QWORD *)v81 - 1);
              v81 -= 8;
              *((_QWORD *)v91 - 1) = v100;
              v91 -= 8;
            }
            while (v81 != v84);
          }
          v81 = v84;
        }
        *((_QWORD *)this + 75) = v91;
        *((_QWORD *)this + 76) = v83;
        *((_QWORD *)this + 77) = &v90[v107];
        v32 = v110;
        if (v81)
          operator delete(v81);
      }
      else
      {
        if (!v81)
          goto LABEL_183;
        *(_QWORD *)v81 = v57;
        v83 = v81 + 8;
      }
      *((_QWORD *)this + 76) = v83;
      v35 = 1;
      v33 = ++v34;
      if (v109 <= v34)
        goto LABEL_177;
      goto LABEL_56;
    }
    v2 = v111;
    v3 = v112;
LABEL_57:
    v33 = ++v34;
  }
  while (v34 < (unint64_t)((v3 - v2) >> 3));
  if ((v108 & 1) == 0)
    goto LABEL_180;
LABEL_177:
  v101 = *((_QWORD *)this + 69);
  v102 = (unsigned int *)*((_QWORD *)this + 86);
  if (v102)
  {
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  v104 = (_QWORD *)operator new();
  *v104 = v102;
  v104[1] = this;
  v104[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v104[4] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_2 &&>;
  *(_QWORD *)v115 = v104;
  *(_QWORD *)&v115[16] = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  *(_QWORD *)&v115[24] = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _BYTE *, _BYTE *, char *))(*(_QWORD *)v101 + 8))(v101, v115, __p, &v113);
  (*(void (**)(uint64_t, _BYTE *, _BYTE *))&v115[16])(1, v115, v115);
LABEL_180:
  if (v2)
  {
    v112 = v2;
    operator delete(v2);
  }
}

