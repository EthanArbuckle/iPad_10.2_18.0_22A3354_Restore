uint64_t vpx_highbd_convolve8_avg_neon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10, signed int a11, int a12)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint16x4_t *v22;
  uint16x4_t *v23;
  signed int v24;
  unsigned int v25;
  uint64_t v26;
  int16x8_t v27;
  int16x8_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int32x4_t v37;
  int16x4_t v38;
  uint64_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint64_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int32x4_t v45;
  int16x4_t v46;
  uint64_t v47;
  int32x4_t v48;
  int16x4_t v49;
  int32x4_t v50;
  int16x4_t v51;
  uint64_t v52;
  int32x4_t v53;
  uint16x4_t v54;
  int16x4_t v55;
  int16x4_t v56;
  int16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v60;
  int16x4_t v61;
  uint64_t v62;
  int16x4_t v63;
  int16x4_t v64;
  int16x4_t v65;
  int16x4_t v66;
  int32x4_t v67;
  int16x4_t v68;
  uint64_t v69;
  int32x4_t v70;
  int16x4_t v71;
  int16x4_t v72;
  int32x4_t v73;
  int16x4_t v74;
  uint64_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int16x4_t v79;
  int32x4_t v80;
  int16x4_t v81;
  int32x4_t v82;
  int16x4_t v83;
  uint64_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  uint16x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  uint16x4_t v94;
  int v95;
  _WORD *v96;
  uint64_t v97;
  unint64_t v98;
  uint16x8_t *v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint64_t v102;
  uint64_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int32x4_t v110;
  uint64_t v111;
  int32x4_t v112;
  int16x8_t v113;
  int32x4_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int16x8_t v117;
  int32x4_t v118;
  int16x8_t v119;
  int32x4_t v120;
  int16x8_t v121;
  int16x8_t v122;
  uint16x8_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int16x8_t v126;
  uint64_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int16x8_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int16x8_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int16x8_t v140;
  uint16x8_t v141;
  int16x8_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int16x8_t v145;
  uint64_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int16x8_t v156;
  uint16x8_t v157;
  int16x8_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int16x8_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int16x8_t v164;
  uint64_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int16x8_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int16x8_t v171;
  int16x8_t v172;
  uint16x8_t v173;
  int16x8_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int16x8_t v181;
  uint64_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int16x8_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int16x8_t v188;
  uint16x8_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int16x8_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int16x8_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int16x8_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int16x8_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int16x8_t v204;
  uint64_t v205;
  uint16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  uint16x8_t *v214;
  uint64_t v215;
  signed int v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int16x8_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int16x8_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int16x8_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int16x8_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int16x8_t v238;
  int16x8_t v239;
  uint64_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int16x8_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int16x8_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int16x8_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int16x8_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int16x8_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int16x8_t v258;
  uint16x8_t v259;
  int16x8_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int16x8_t v263;
  uint16x8_t v264;
  int16x8_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int16x8_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int16x8_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int16x8_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int16x8_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int16x8_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int16x8_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int16x8_t v288;
  int32x4_t v289;
  int32x4_t v290;
  uint16x8_t v291;
  int32x4_t v292;
  int32x4_t v293;
  uint16x8_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int16x8_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  uint16x8_t v301;
  uint16x8_t v302;
  uint16x8_t v303;
  uint16x8_t v304;
  _WORD v305[4100];
  uint64_t v306;
  _QWORD v307[2113];

  result = MEMORY[0x24BDAC7A8](a1, a2);
  v19 = v18;
  v20 = v15;
  v21 = v14;
  v23 = v22;
  v24 = a11;
  v25 = a10;
  v307[2112] = *MEMORY[0x24BDAC8D0];
  if (v17 != 16 || a9 != 16)
  {
    highbd_convolve_horiz(result - 6 * v13, v13, (uint64_t)&v306, 64, v15, v16, v17, a10, ((v18 + (a11 - 1) * a9) >> 4) + 8, a12);
    result = highbd_convolve_vert((uint64_t)v307, 64, v305, 64, v20, v19, a9, a10, a11, a12);
    if ((int)a10 < 1 || a11 < 1)
      return result;
    v95 = 0;
    v96 = v305;
    while (1)
    {
      if (a10 >= 0x10)
      {
        v98 = 0;
        do
        {
          v99 = (uint16x8_t *)&v23[v98 / 8];
          v100 = vrhaddq_u16(*(uint16x8_t *)v23[v98 / 8 + 2].i8, *(uint16x8_t *)&v96[v98 / 2 + 8]);
          *v99 = vrhaddq_u16(*(uint16x8_t *)v23[v98 / 8].i8, *(uint16x8_t *)&v96[v98 / 2]);
          v99[1] = v100;
          v98 += 32;
        }
        while (((2 * a10) & 0x1FFFFFFE0) != v98);
        v97 = a10 & 0x7FFFFFF0;
        if ((a10 & 0xFFFFFFF0) == (unint64_t)a10)
          goto LABEL_10;
      }
      else
      {
        v97 = 0;
      }
      do
      {
        v23->i16[v97] = (v23->u16[v97] + (unsigned __int16)v96[v97] + 1) >> 1;
        ++v97;
      }
      while (a10 != v97);
LABEL_10:
      v96 += 64;
      ++v95;
      v23 = (uint16x4_t *)((char *)v23 + 2 * v21);
      if (v95 == a11)
        return result;
    }
  }
  v26 = result - 6 * v13 - 6;
  v27 = *(int16x8_t *)(v15 + 16 * v16);
  v28 = *(int16x8_t *)(v15 + 16 * v18);
  v29 = ~(-1 << a12);
  if (a10 == 4)
  {
    v30 = 2 * v13;
    v31 = v26 + 2 * v13;
    v32 = *(int16x4_t *)(v31 + 4);
    v33 = *(int16x4_t *)(v31 + 6);
    v34 = *(int16x4_t *)(v31 + 8);
    v35 = *(int16x4_t *)(v31 + 10);
    v36 = *(int16x4_t *)(v31 + 12);
    v37 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(v31 + 2), *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v31, *(int16x4_t *)v27.i8, 0);
    v38 = *(int16x4_t *)(v31 + 14);
    v39 = v26 + 4 * v13;
    v40 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v37, v32, *(int16x4_t *)v27.i8, 2), v33, *(int16x4_t *)v27.i8, 3), v34, v27, 4), v35, v27, 5), v36, v27, 6), v38, v27, 7);
    v41 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(v39 + 2), *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v39, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)(v39 + 4), *(int16x4_t *)v27.i8, 2), *(int16x4_t *)(v39 + 6), *(int16x4_t *)v27.i8, 3), *(int16x4_t *)(v39 + 8), v27, 4),
                *(int16x4_t *)(v39 + 10),
                v27,
                5),
              *(int16x4_t *)(v39 + 12),
              v27,
              6),
            *(int16x4_t *)(v39 + 14),
            v27,
            7);
    v42 = v26 + 8 * v13;
    v43 = *(int16x4_t *)(v42 + 10);
    v44 = *(int16x4_t *)(v42 + 12);
    v45 = vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(v42 + 2), *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v42, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)(v42 + 4), *(int16x4_t *)v27.i8, 2), *(int16x4_t *)(v42 + 6), *(int16x4_t *)v27.i8, 3), *(int16x4_t *)(v42 + 8), v27, 4);
    v46 = *(int16x4_t *)(v42 + 14);
    v47 = v26 + 10 * v13;
    v48 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v45, v43, v27, 5), v44, v27, 6), v46, v27, 7);
    v49 = *(int16x4_t *)(v47 + 12);
    v50 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(v47 + 2), *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v47, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)(v47 + 4), *(int16x4_t *)v27.i8, 2), *(int16x4_t *)(v47 + 6), *(int16x4_t *)v27.i8, 3), *(int16x4_t *)(v47 + 8), v27, 4), *(int16x4_t *)(v47 + 10), v27,
            5);
    v51 = *(int16x4_t *)(v47 + 14);
    v52 = v26 + 12 * v13;
    v53 = vmlal_laneq_s16(vmlal_laneq_s16(v50, v49, v27, 6), v51, v27, 7);
    v54 = (uint16x4_t)vdup_n_s16(v29);
    v55 = (int16x4_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(result - 6 * v13 - 4), *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v26, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)(result - 6 * v13 - 2), *(int16x4_t *)v27.i8, 2), *(int16x4_t *)(result - 6 * v13),
                                               *(int16x4_t *)v27.i8,
                                               3),
                                             *(int16x4_t *)(result - 6 * v13 + 2),
                                             v27,
                                             4),
                                           *(int16x4_t *)(result - 6 * v13 + 4),
                                           v27,
                                           5),
                                         *(int16x4_t *)(result - 6 * v13 + 6),
                                         v27,
                                         6),
                                       *(int16x4_t *)(result - 6 * v13 + 8),
                                       v27,
                                       7),
                                     7uLL),
                       v54);
    v56 = (int16x4_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v40, 7uLL), v54);
    v57 = (int16x4_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v41, 7uLL), v54);
    v58 = (int16x4_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(result - 4), *(int16x4_t *)v27.i8, 1), *(int16x4_t *)(result - 6), *(int16x4_t *)v27.i8, 0), *(int16x4_t *)(result - 2), *(int16x4_t *)v27.i8, 2), *(int16x4_t *)result, *(int16x4_t *)v27.i8, 3), *(int16x4_t *)(result + 2),
                                             v27,
                                             4),
                                           *(int16x4_t *)(result + 4),
                                           v27,
                                           5),
                                         *(int16x4_t *)(result + 6),
                                         v27,
                                         6),
                                       *(int16x4_t *)(result + 8),
                                       v27,
                                       7),
                                     7uLL),
                       v54);
    v59 = (int16x4_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v48, 7uLL), v54);
    v60 = (int16x4_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v53, 7uLL), v54);
    v61 = (int16x4_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(v52 + 2), *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v52, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)(v52 + 4), *(int16x4_t *)v27.i8, 2), *(int16x4_t *)(v52 + 6), *(int16x4_t *)v27.i8, 3), *(int16x4_t *)(v52 + 8),
                                             v27,
                                             4),
                                           *(int16x4_t *)(v52 + 10),
                                           v27,
                                           5),
                                         *(int16x4_t *)(v52 + 12),
                                         v27,
                                         6),
                                       *(int16x4_t *)(v52 + 14),
                                       v27,
                                       7),
                                     7uLL),
                       v54);
    v62 = v26 + 14 * v13;
    do
    {
      v63 = *(int16x4_t *)(v62 + 8);
      v64 = *(int16x4_t *)(v62 + 6);
      v65 = *(int16x4_t *)(v62 + 10);
      v66 = *(int16x4_t *)(v62 + 12);
      v67 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(v62 + 2), *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v62, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)(v62 + 4), *(int16x4_t *)v27.i8, 2);
      v68 = *(int16x4_t *)(v62 + 14);
      v69 = v62 + v30;
      v70 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v67, v64, *(int16x4_t *)v27.i8, 3), v63, v27, 4), v65, v27, 5), v66, v27, 6);
      v71 = *(int16x4_t *)(v69 + 10);
      v72 = *(int16x4_t *)(v69 + 12);
      v73 = vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(v69 + 2), *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v69, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)(v69 + 4), *(int16x4_t *)v27.i8, 2), *(int16x4_t *)(v69 + 6), *(int16x4_t *)v27.i8, 3), *(int16x4_t *)(v69 + 8), v27, 4);
      v74 = *(int16x4_t *)(v69 + 14);
      v75 = v69 + v30;
      v76 = vmlal_laneq_s16(v73, v71, v27, 5);
      v77 = vmlal_lane_s16(vmull_lane_s16(v56, *(int16x4_t *)v28.i8, 1), v55, *(int16x4_t *)v28.i8, 0);
      v55 = v59;
      v78 = vmlal_laneq_s16(v70, v68, v27, 7);
      v79 = *(int16x4_t *)(v75 + 10);
      v80 = vmlal_laneq_s16(vmlal_laneq_s16(v76, v72, v27, 6), v74, v27, 7);
      v81 = *(int16x4_t *)(v75 + 12);
      v82 = vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(v75 + 2), *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v75, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)(v75 + 4), *(int16x4_t *)v27.i8, 2), *(int16x4_t *)(v75 + 6), *(int16x4_t *)v27.i8, 3), *(int16x4_t *)(v75 + 8), v27, 4);
      v83 = *(int16x4_t *)(v75 + 14);
      v84 = v75 + v30;
      v85 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v82, v79, v27, 5), v81, v27, 6), v83, v27, 7);
      v86 = vmlal_lane_s16(vmull_lane_s16(v57, *(int16x4_t *)v28.i8, 1), v56, *(int16x4_t *)v28.i8, 0);
      v56 = v60;
      v87 = vmlal_lane_s16(v77, v57, *(int16x4_t *)v28.i8, 2);
      v88 = vmlal_lane_s16(vmull_lane_s16(v58, *(int16x4_t *)v28.i8, 1), v57, *(int16x4_t *)v28.i8, 0);
      v57 = v61;
      v89 = (uint16x4_t)vqrshrun_n_s32(v78, 7uLL);
      *(int16x4_t *)v78.i8 = vqrshrun_n_s32(v80, 7uLL);
      v90 = vmlal_lane_s16(v87, v58, *(int16x4_t *)v28.i8, 3);
      v91 = vmlal_lane_s16(v86, v58, *(int16x4_t *)v28.i8, 2);
      v92 = vmlal_lane_s16(vmull_lane_s16(v55, *(int16x4_t *)v28.i8, 1), v58, *(int16x4_t *)v28.i8, 0);
      v58 = (int16x4_t)vmin_u16(v89, v54);
      v93 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(v84 + 2), *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v84, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)(v84 + 4), *(int16x4_t *)v27.i8, 2), *(int16x4_t *)(v84 + 6), *(int16x4_t *)v27.i8, 3), *(int16x4_t *)(v84 + 8), v27, 4),
                  *(int16x4_t *)(v84 + 10),
                  v27,
                  5),
                *(int16x4_t *)(v84 + 12),
                v27,
                6),
              *(int16x4_t *)(v84 + 14),
              v27,
              7);
      v59 = (int16x4_t)vmin_u16(*(uint16x4_t *)v78.i8, v54);
      v94 = vrhadd_u16(vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(v90, v55, v28, 4), v56, v28, 5), v61, v28, 6), v58, v28, 7), 7uLL), v54), *v23);
      *(uint16x4_t *)v78.i8 = vrhadd_u16(vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v91, v55, *(int16x4_t *)v28.i8, 3), v56, v28, 4), v57, v28, 5), v58, v28, 6), v59, v28, 7),
                                                7uLL),
                                  v54),
                                *(uint16x4_t *)((char *)v23 + 2 * v14));
      *(uint16x4_t *)v90.i8 = *(uint16x4_t *)((char *)v23 + 4 * v14);
      *(uint16x4_t *)v91.i8 = *(uint16x4_t *)((char *)v23 + 6 * v14);
      *v23 = v94;
      v60 = (int16x4_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v85, 7uLL), v54);
      *(uint16x4_t *)((char *)v23 + 2 * v14) = *(uint16x4_t *)v78.i8;
      v61 = (int16x4_t)vmin_u16((uint16x4_t)vqrshrun_n_s32(v93, 7uLL), v54);
      *(uint16x4_t *)((char *)v23 + 4 * v14) = vrhadd_u16(vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v88, v55, *(int16x4_t *)v28.i8, 2), v56, *(int16x4_t *)v28.i8, 3), v57, v28, 4), v58,
                                                                       v28,
                                                                       5),
                                                                     v59,
                                                                     v28,
                                                                     6),
                                                                   v60,
                                                                   v28,
                                                                   7),
                                                                 7uLL),
                                                   v54),
                                                 *(uint16x4_t *)v90.i8);
      *(uint16x4_t *)((char *)v23 + 6 * v14) = vrhadd_u16(vmin_u16((uint16x4_t)vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(v92, v56, *(int16x4_t *)v28.i8, 2), v57, *(int16x4_t *)v28.i8, 3), v58, v28, 4), v59,
                                                                       v28,
                                                                       5),
                                                                     v60,
                                                                     v28,
                                                                     6),
                                                                   v61,
                                                                   v28,
                                                                   7),
                                                                 7uLL),
                                                   v54),
                                                 *(uint16x4_t *)v91.i8);
      v23 += v14;
      v62 = v84 + v30;
      v24 -= 4;
    }
    while (v24);
  }
  else
  {
    v101 = (uint16x8_t)vdupq_n_s16(v29);
    v102 = 2 * v13;
    v103 = result + 8 * v13 - 6;
    result = 6 * v14;
    do
    {
      v104 = *(int16x8_t *)(v26 + 2);
      v105 = *(int16x8_t *)(v26 + 4);
      v106 = *(int16x8_t *)(v26 + 6);
      v107 = *(int16x8_t *)(v26 + 8);
      v108 = *(int16x8_t *)(v26 + 10);
      v109 = *(int16x8_t *)(v26 + 12);
      v110 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v26, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)v105.i8, *(int16x4_t *)v27.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v27.i8, 3), *(int16x4_t *)v107.i8, v27, 4), *(int16x4_t *)v108.i8,
                 v27,
                 5),
               *(int16x4_t *)v109.i8,
               v27,
               6);
      v111 = v26 + 2 * v13;
      v112 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v104, *(int16x4_t *)v27.i8, 1), *(int16x8_t *)v26, *(int16x4_t *)v27.i8, 0), v105, *(int16x4_t *)v27.i8, 2);
      v113 = *(int16x8_t *)(v111 + 2);
      v114 = vmlal_high_lane_s16(v112, v106, *(int16x4_t *)v27.i8, 3);
      v115 = *(int16x8_t *)(v111 + 4);
      v116 = vmlal_high_laneq_s16(v114, v107, v27, 4);
      v117 = *(int16x8_t *)(v111 + 6);
      v118 = vmlal_high_laneq_s16(v116, v108, v27, 5);
      v119 = *(int16x8_t *)(v111 + 8);
      v120 = vmlal_high_laneq_s16(v118, v109, v27, 6);
      v121 = *(int16x8_t *)(v111 + 10);
      v122 = *(int16x8_t *)(v111 + 12);
      v123 = (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(v110, *(int16x4_t *)(v26 + 14), v27, 7), 7uLL), vmlal_high_laneq_s16(v120, *(int16x8_t *)(v26 + 14), v27, 7), 7uLL);
      v124 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v111, *(int16x4_t *)v27.i8, 0);
      v125 = vmlal_high_lane_s16(vmull_high_lane_s16(v113, *(int16x4_t *)v27.i8, 1), *(int16x8_t *)v111, *(int16x4_t *)v27.i8, 0);
      v126 = *(int16x8_t *)(v111 + 14);
      v127 = v26 + 4 * v13;
      v128 = vmlal_lane_s16(vmlal_lane_s16(v124, *(int16x4_t *)v115.i8, *(int16x4_t *)v27.i8, 2), *(int16x4_t *)v117.i8, *(int16x4_t *)v27.i8, 3);
      v129 = vmlal_high_lane_s16(vmlal_high_lane_s16(v125, v115, *(int16x4_t *)v27.i8, 2), v117, *(int16x4_t *)v27.i8, 3);
      v130 = *(int16x8_t *)(v127 + 2);
      v131 = vmlal_laneq_s16(v128, *(int16x4_t *)v119.i8, v27, 4);
      v132 = vmlal_high_laneq_s16(v129, v119, v27, 4);
      v133 = *(int16x8_t *)(v127 + 4);
      v134 = vmlal_laneq_s16(v131, *(int16x4_t *)v121.i8, v27, 5);
      v135 = vmlal_high_laneq_s16(v132, v121, v27, 5);
      v136 = *(int16x8_t *)(v127 + 6);
      v137 = *(int16x8_t *)(v127 + 8);
      v138 = vmlal_laneq_s16(vmlal_laneq_s16(v134, *(int16x4_t *)v122.i8, v27, 6), *(int16x4_t *)v126.i8, v27, 7);
      v139 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(v135, v122, v27, 6), v126, v27, 7);
      v140 = *(int16x8_t *)(v127 + 10);
      v141 = (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(v138, 7uLL), v139, 7uLL);
      v142 = *(int16x8_t *)(v127 + 12);
      v143 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v127, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)v133.i8, *(int16x4_t *)v27.i8, 2);
      v144 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v130, *(int16x4_t *)v27.i8, 1), *(int16x8_t *)v127, *(int16x4_t *)v27.i8, 0), v133, *(int16x4_t *)v27.i8, 2);
      v145 = *(int16x8_t *)(v127 + 14);
      v146 = v26 + 6 * v13;
      v147 = vmlal_laneq_s16(vmlal_lane_s16(v143, *(int16x4_t *)v136.i8, *(int16x4_t *)v27.i8, 3), *(int16x4_t *)v137.i8, v27, 4);
      v148 = vmlal_high_laneq_s16(vmlal_high_lane_s16(v144, v136, *(int16x4_t *)v27.i8, 3), v137, v27, 4);
      v149 = *(int16x8_t *)(v146 + 2);
      v150 = *(int16x8_t *)(v146 + 4);
      v151 = vmlal_laneq_s16(vmlal_laneq_s16(v147, *(int16x4_t *)v140.i8, v27, 5), *(int16x4_t *)v142.i8, v27, 6);
      v152 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(v148, v140, v27, 5), v142, v27, 6);
      v153 = *(int16x8_t *)(v146 + 6);
      v154 = vmlal_laneq_s16(v151, *(int16x4_t *)v145.i8, v27, 7);
      v155 = vmlal_high_laneq_s16(v152, v145, v27, 7);
      v156 = *(int16x8_t *)(v146 + 8);
      v157 = (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(v154, 7uLL), v155, 7uLL);
      v158 = *(int16x8_t *)(v146 + 10);
      v159 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v149.i8, *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v146, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)v150.i8, *(int16x4_t *)v27.i8, 2);
      v160 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v149, *(int16x4_t *)v27.i8, 1), *(int16x8_t *)v146, *(int16x4_t *)v27.i8, 0), v150, *(int16x4_t *)v27.i8, 2);
      v161 = *(int16x8_t *)(v146 + 12);
      v162 = vmlal_lane_s16(v159, *(int16x4_t *)v153.i8, *(int16x4_t *)v27.i8, 3);
      v163 = vmlal_high_lane_s16(v160, v153, *(int16x4_t *)v27.i8, 3);
      v164 = *(int16x8_t *)(v146 + 14);
      v165 = v26 + 8 * v13;
      v166 = vmlal_laneq_s16(vmlal_laneq_s16(v162, *(int16x4_t *)v156.i8, v27, 4), *(int16x4_t *)v158.i8, v27, 5);
      v167 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(v163, v156, v27, 4), v158, v27, 5);
      v168 = *(int16x8_t *)(v165 + 2);
      v169 = vmlal_laneq_s16(v166, *(int16x4_t *)v161.i8, v27, 6);
      v170 = vmlal_high_laneq_s16(v167, v161, v27, 6);
      v171 = *(int16x8_t *)(v165 + 4);
      v172 = *(int16x8_t *)(v165 + 6);
      v173 = (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(v169, *(int16x4_t *)v164.i8, v27, 7), 7uLL), vmlal_high_laneq_s16(v170, v164, v27, 7), 7uLL);
      v174 = *(int16x8_t *)(v165 + 8);
      v175 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v168.i8, *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v165, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)v171.i8, *(int16x4_t *)v27.i8, 2);
      v176 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v168, *(int16x4_t *)v27.i8, 1), *(int16x8_t *)v165, *(int16x4_t *)v27.i8, 0), v171, *(int16x4_t *)v27.i8, 2);
      v177 = *(int16x8_t *)(v165 + 10);
      v178 = *(int16x8_t *)(v165 + 12);
      v179 = vmlal_laneq_s16(vmlal_lane_s16(v175, *(int16x4_t *)v172.i8, *(int16x4_t *)v27.i8, 3), *(int16x4_t *)v174.i8, v27, 4);
      v180 = vmlal_high_laneq_s16(vmlal_high_lane_s16(v176, v172, *(int16x4_t *)v27.i8, 3), v174, v27, 4);
      v181 = *(int16x8_t *)(v165 + 14);
      v182 = v26 + 10 * v13;
      v183 = vmlal_laneq_s16(vmlal_laneq_s16(v179, *(int16x4_t *)v177.i8, v27, 5), *(int16x4_t *)v178.i8, v27, 6);
      v184 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(v180, v177, v27, 5), v178, v27, 6);
      v185 = *(int16x8_t *)(v182 + 2);
      v186 = vmlal_laneq_s16(v183, *(int16x4_t *)v181.i8, v27, 7);
      v187 = vmlal_high_laneq_s16(v184, v181, v27, 7);
      v188 = *(int16x8_t *)(v182 + 4);
      v189 = (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(v186, 7uLL), v187, 7uLL);
      v190 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v185.i8, *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v182, *(int16x4_t *)v27.i8, 0);
      v191 = vmlal_high_lane_s16(vmull_high_lane_s16(v185, *(int16x4_t *)v27.i8, 1), *(int16x8_t *)v182, *(int16x4_t *)v27.i8, 0);
      v192 = *(int16x8_t *)(v182 + 6);
      v193 = vmlal_lane_s16(v190, *(int16x4_t *)v188.i8, *(int16x4_t *)v27.i8, 2);
      v194 = vmlal_high_lane_s16(v191, v188, *(int16x4_t *)v27.i8, 2);
      v195 = *(int16x8_t *)(v182 + 8);
      v196 = vmlal_lane_s16(v193, *(int16x4_t *)v192.i8, *(int16x4_t *)v27.i8, 3);
      v197 = vmlal_high_lane_s16(v194, v192, *(int16x4_t *)v27.i8, 3);
      v198 = *(int16x8_t *)(v182 + 10);
      v199 = vmlal_laneq_s16(v196, *(int16x4_t *)v195.i8, v27, 4);
      v200 = vmlal_high_laneq_s16(v197, v195, v27, 4);
      v201 = *(int16x8_t *)(v182 + 12);
      v202 = vmlal_laneq_s16(v199, *(int16x4_t *)v198.i8, v27, 5);
      v203 = vmlal_high_laneq_s16(v200, v198, v27, 5);
      v204 = *(int16x8_t *)(v182 + 14);
      v205 = v26 + 12 * v13;
      v206 = (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v202, *(int16x4_t *)v201.i8, v27, 6), *(int16x4_t *)v204.i8, v27, 7), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(v203, v201, v27, 6), v204, v27, 7), 7uLL);
      v207 = (int16x8_t)vminq_u16(v123, v101);
      v208 = (int16x8_t)vminq_u16(v141, v101);
      v209 = (int16x8_t)vminq_u16(v157, v101);
      v210 = (int16x8_t)vminq_u16(v173, v101);
      v211 = (int16x8_t)vminq_u16(v189, v101);
      v212 = (int16x8_t)vminq_u16(v206, v101);
      v213 = (int16x8_t)vminq_u16((uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)(v205 + 2), *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v205, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)(v205 + 4), *(int16x4_t *)v27.i8, 2),
                                                    *(int16x4_t *)(v205 + 6),
                                                    *(int16x4_t *)v27.i8,
                                                    3),
                                                  *(int16x4_t *)(v205 + 8),
                                                  v27,
                                                  4),
                                                *(int16x4_t *)(v205 + 10),
                                                v27,
                                                5),
                                              *(int16x4_t *)(v205 + 12),
                                              v27,
                                              6),
                                            *(int16x4_t *)(v205 + 14),
                                            v27,
                                            7),
                                          7uLL),
                                        vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(*(int16x8_t *)(v205 + 2), *(int16x4_t *)v27.i8, 1), *(int16x8_t *)v205, *(int16x4_t *)v27.i8, 0), *(int16x8_t *)(v205 + 4), *(int16x4_t *)v27.i8, 2), *(int16x8_t *)(v205 + 6), *(int16x4_t *)v27.i8, 3),
                                                *(int16x8_t *)(v205 + 8),
                                                v27,
                                                4),
                                              *(int16x8_t *)(v205 + 10),
                                              v27,
                                              5),
                                            *(int16x8_t *)(v205 + 12),
                                            v27,
                                            6),
                                          *(int16x8_t *)(v205 + 14),
                                          v27,
                                          7),
                                        7uLL),
                          v101);
      v214 = (uint16x8_t *)v23;
      v215 = v103;
      v216 = a11;
      do
      {
        v217 = *(int16x8_t *)(v215 + 2);
        v218 = *(int16x8_t *)(v215 + 4);
        v219 = *(int16x8_t *)(v215 + 6);
        v220 = *(int16x8_t *)(v215 + 8);
        v221 = *(int16x8_t *)(v215 + 10);
        v222 = *(int16x8_t *)(v215 + 12);
        v223 = *(int16x8_t *)(v215 + 2 * v13);
        v224 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v217.i8, *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v215, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)v218.i8, *(int16x4_t *)v27.i8, 2), *(int16x4_t *)v219.i8, *(int16x4_t *)v27.i8, 3);
        v225 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v217, *(int16x4_t *)v27.i8, 1), *(int16x8_t *)v215, *(int16x4_t *)v27.i8, 0), v218, *(int16x4_t *)v27.i8, 2), v219, *(int16x4_t *)v27.i8, 3);
        v226 = *(int16x8_t *)(v215 + v102 + 2);
        v227 = vmlal_laneq_s16(v224, *(int16x4_t *)v220.i8, v27, 4);
        v228 = vmlal_high_laneq_s16(v225, v220, v27, 4);
        v229 = *(int16x8_t *)(v215 + v102 + 4);
        v230 = vmlal_laneq_s16(v227, *(int16x4_t *)v221.i8, v27, 5);
        v231 = vmlal_high_laneq_s16(v228, v221, v27, 5);
        v232 = *(int16x8_t *)(v215 + v102 + 6);
        v233 = vmlal_laneq_s16(v230, *(int16x4_t *)v222.i8, v27, 6);
        v234 = vmlal_high_laneq_s16(v231, v222, v27, 6);
        v235 = *(int16x8_t *)(v215 + v102 + 8);
        v236 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v226.i8, *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v223.i8, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)v229.i8, *(int16x4_t *)v27.i8, 2);
        v237 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v226, *(int16x4_t *)v27.i8, 1), v223, *(int16x4_t *)v27.i8, 0), v229, *(int16x4_t *)v27.i8, 2);
        v238 = *(int16x8_t *)(v215 + v102 + 10);
        v239 = *(int16x8_t *)(v215 + v102 + 12);
        v240 = v215 + v102 + v102;
        v241 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v236, *(int16x4_t *)v232.i8, *(int16x4_t *)v27.i8, 3), *(int16x4_t *)v235.i8, v27, 4), *(int16x4_t *)v238.i8, v27, 5);
        v242 = vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v237, v232, *(int16x4_t *)v27.i8, 3), v235, v27, 4), v238, v27, 5);
        v243 = *(int16x8_t *)(v240 + 2);
        v244 = vmlal_laneq_s16(v241, *(int16x4_t *)v239.i8, v27, 6);
        v245 = vmlal_high_laneq_s16(v242, v239, v27, 6);
        v246 = *(int16x8_t *)(v215 + 14);
        v247 = vmlal_laneq_s16(v233, *(int16x4_t *)v246.i8, v27, 7);
        v248 = vmlal_high_laneq_s16(v234, v246, v27, 7);
        v249 = *(int16x8_t *)(v240 + 4);
        v250 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v243.i8, *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v240, *(int16x4_t *)v27.i8, 0), *(int16x4_t *)v249.i8, *(int16x4_t *)v27.i8, 2);
        v251 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v243, *(int16x4_t *)v27.i8, 1), *(int16x8_t *)v240, *(int16x4_t *)v27.i8, 0), v249, *(int16x4_t *)v27.i8, 2);
        v252 = *(int16x8_t *)(v215 + v102 + 14);
        v253 = vmlal_laneq_s16(v244, *(int16x4_t *)v252.i8, v27, 7);
        v254 = vmlal_high_laneq_s16(v245, v252, v27, 7);
        v255 = *(int16x8_t *)(v240 + 6);
        v256 = vmlal_lane_s16(v250, *(int16x4_t *)v255.i8, *(int16x4_t *)v27.i8, 3);
        v257 = vmlal_high_lane_s16(v251, v255, *(int16x4_t *)v27.i8, 3);
        v258 = *(int16x8_t *)(v240 + 8);
        v259 = (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(v247, 7uLL), v248, 7uLL);
        v260 = *(int16x8_t *)(v240 + 10);
        v261 = vmlal_laneq_s16(v256, *(int16x4_t *)v258.i8, v27, 4);
        v262 = vmlal_high_laneq_s16(v257, v258, v27, 4);
        v263 = *(int16x8_t *)(v240 + 12);
        v264 = (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(v253, 7uLL), v254, 7uLL);
        v265 = *(int16x8_t *)(v240 + 14);
        v266 = vmlal_laneq_s16(v261, *(int16x4_t *)v260.i8, v27, 5);
        v267 = vmlal_high_laneq_s16(v262, v260, v27, 5);
        v268 = *(int16x8_t *)(v240 + 2 * v13);
        v269 = vmlal_laneq_s16(v266, *(int16x4_t *)v263.i8, v27, 6);
        v270 = vmlal_high_laneq_s16(v267, v263, v27, 6);
        v271 = *(int16x8_t *)(v240 + v102 + 2);
        v272 = vmlal_laneq_s16(v269, *(int16x4_t *)v265.i8, v27, 7);
        v273 = vmlal_high_laneq_s16(v270, v265, v27, 7);
        v274 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v271.i8, *(int16x4_t *)v27.i8, 1), *(int16x4_t *)v268.i8, *(int16x4_t *)v27.i8, 0);
        v275 = vmlal_high_lane_s16(vmull_high_lane_s16(v271, *(int16x4_t *)v27.i8, 1), v268, *(int16x4_t *)v27.i8, 0);
        v276 = *(int16x8_t *)(v240 + v102 + 4);
        v277 = vmlal_lane_s16(v274, *(int16x4_t *)v276.i8, *(int16x4_t *)v27.i8, 2);
        v278 = vmlal_high_lane_s16(v275, v276, *(int16x4_t *)v27.i8, 2);
        v279 = *(int16x8_t *)(v240 + v102 + 6);
        v280 = vmlal_lane_s16(v277, *(int16x4_t *)v279.i8, *(int16x4_t *)v27.i8, 3);
        v281 = vmlal_high_lane_s16(v278, v279, *(int16x4_t *)v27.i8, 3);
        v282 = *(int16x8_t *)(v240 + v102 + 8);
        v283 = vmlal_laneq_s16(v280, *(int16x4_t *)v282.i8, v27, 4);
        v284 = vmlal_high_laneq_s16(v281, v282, v27, 4);
        v285 = *(int16x8_t *)(v240 + v102 + 10);
        v286 = vmlal_laneq_s16(v283, *(int16x4_t *)v285.i8, v27, 5);
        v287 = vmlal_high_laneq_s16(v284, v285, v27, 5);
        v288 = *(int16x8_t *)(v240 + v102 + 12);
        v289 = vmlal_laneq_s16(v286, *(int16x4_t *)v288.i8, v27, 6);
        v290 = vmlal_high_laneq_s16(v287, v288, v27, 6);
        v291 = (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(v272, 7uLL), v273, 7uLL);
        v292 = vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v208.i8, *(int16x4_t *)v28.i8, 1), *(int16x4_t *)v207.i8, *(int16x4_t *)v28.i8, 0), *(int16x4_t *)v209.i8, *(int16x4_t *)v28.i8, 2), *(int16x4_t *)v210.i8, *(int16x4_t *)v28.i8, 3), *(int16x4_t *)v211.i8, v28, 4), *(int16x4_t *)v212.i8, v28,
                 5);
        v293 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v208, *(int16x4_t *)v28.i8, 1), v207, *(int16x4_t *)v28.i8, 0), v209, *(int16x4_t *)v28.i8, 2), v210, *(int16x4_t *)v28.i8, 3);
        v294 = (uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(v289, *(int16x4_t *)(v240 + v102 + 14), v27, 7), 7uLL), vmlal_high_laneq_s16(v290, *(int16x8_t *)(v240 + v102 + 14), v27, 7), 7uLL);
        v295 = vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v209.i8, *(int16x4_t *)v28.i8, 1), *(int16x4_t *)v208.i8, *(int16x4_t *)v28.i8, 0), *(int16x4_t *)v210.i8, *(int16x4_t *)v28.i8, 2);
        v296 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v209, *(int16x4_t *)v28.i8, 1), v208, *(int16x4_t *)v28.i8, 0), v210, *(int16x4_t *)v28.i8, 2);
        v297 = (int16x8_t)vminq_u16(v259, v101);
        v298 = (int16x8_t)vminq_u16(v264, v101);
        v299 = (int16x8_t)vminq_u16(v291, v101);
        v300 = (int16x8_t)vminq_u16(v294, v101);
        v301 = vrhaddq_u16(vminq_u16((uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(v292, *(int16x4_t *)v213.i8, v28, 6), *(int16x4_t *)v297.i8, v28, 7), 7uLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(v293, v211, v28, 4), v212, v28, 5), v213, v28, 6), v297, v28, 7), 7uLL),
                   v101),
                 *v214);
        v302 = *(uint16x8_t *)((char *)v214 + 4 * v21);
        v303 = vrhaddq_u16(vminq_u16((uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(v295, *(int16x4_t *)v211.i8, *(int16x4_t *)v28.i8, 3), *(int16x4_t *)v212.i8, v28, 4), *(int16x4_t *)v213.i8, v28, 5), *(int16x4_t *)v297.i8, v28, 6), *(int16x4_t *)v298.i8, v28,
                                     7),
                                   7uLL),
                                 vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(v296, v211, *(int16x4_t *)v28.i8, 3), v212, v28, 4), v213, v28, 5), v297, v28, 6), v298, v28, 7), 7uLL), v101), *(uint16x8_t *)((char *)v214 + 2 * v21));
        v304 = *(uint16x8_t *)((char *)v214 + 6 * v21);
        *v214 = v301;
        *(uint16x8_t *)((char *)v214 + 2 * v21) = v303;
        *(uint16x8_t *)((char *)v214 + 4 * v21) = vrhaddq_u16(vminq_u16((uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v210.i8, *(int16x4_t *)v28.i8, 1), *(int16x4_t *)v209.i8, *(int16x4_t *)v28.i8, 0), *(int16x4_t *)v211.i8, *(int16x4_t *)v28.i8,
                                                                                  2),
                                                                                *(int16x4_t *)v212.i8,
                                                                                *(int16x4_t *)v28.i8,
                                                                                3),
                                                                              *(int16x4_t *)v213.i8,
                                                                              v28,
                                                                              4),
                                                                            *(int16x4_t *)v297.i8,
                                                                            v28,
                                                                            5),
                                                                          *(int16x4_t *)v298.i8,
                                                                          v28,
                                                                          6),
                                                                        *(int16x4_t *)v299.i8,
                                                                        v28,
                                                                        7),
                                                                      7uLL),
                                                                    vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v210, *(int16x4_t *)v28.i8, 1), v209, *(int16x4_t *)v28.i8, 0), v211, *(int16x4_t *)v28.i8, 2), v212, *(int16x4_t *)v28.i8, 3),
                                                                            v213,
                                                                            v28,
                                                                            4),
                                                                          v297,
                                                                          v28,
                                                                          5),
                                                                        v298,
                                                                        v28,
                                                                        6),
                                                                      v299,
                                                                      v28,
                                                                      7),
                                                                    7uLL),
                                                      v101),
                                                    v302);
        *(uint16x8_t *)((char *)v214 + 6 * v21) = vrhaddq_u16(vminq_u16((uint16x8_t)vqrshrun_high_n_s32(vqrshrun_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v211.i8, *(int16x4_t *)v28.i8, 1), *(int16x4_t *)v210.i8, *(int16x4_t *)v28.i8, 0), *(int16x4_t *)v212.i8, *(int16x4_t *)v28.i8,
                                                                                  2),
                                                                                *(int16x4_t *)v213.i8,
                                                                                *(int16x4_t *)v28.i8,
                                                                                3),
                                                                              *(int16x4_t *)v297.i8,
                                                                              v28,
                                                                              4),
                                                                            *(int16x4_t *)v298.i8,
                                                                            v28,
                                                                            5),
                                                                          *(int16x4_t *)v299.i8,
                                                                          v28,
                                                                          6),
                                                                        *(int16x4_t *)v300.i8,
                                                                        v28,
                                                                        7),
                                                                      7uLL),
                                                                    vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v211, *(int16x4_t *)v28.i8, 1), v210, *(int16x4_t *)v28.i8, 0), v212, *(int16x4_t *)v28.i8, 2), v213, *(int16x4_t *)v28.i8, 3),
                                                                            v297,
                                                                            v28,
                                                                            4),
                                                                          v298,
                                                                          v28,
                                                                          5),
                                                                        v299,
                                                                        v28,
                                                                        6),
                                                                      v300,
                                                                      v28,
                                                                      7),
                                                                    7uLL),
                                                      v101),
                                                    v304);
        v207 = v211;
        v208 = v212;
        v209 = v213;
        v214 = (uint16x8_t *)((char *)v214 + 8 * v21);
        v215 = v240 + v102 + v102;
        v210 = v297;
        v211 = v298;
        v212 = v299;
        v213 = v300;
        v216 -= 4;
      }
      while (v216);
      v26 += 16;
      v23 += 2;
      v103 += 16;
      v25 -= 8;
    }
    while (v25);
  }
  return result;
}

uint16x8_t vpx_highbd_convolve_avg_neon(uint16x8_t *a1, uint64_t a2, uint16x8_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  int v11;
  int v12;
  uint16x4_t v13;
  uint16x4_t v14;
  uint16x8_t result;
  int v16;
  uint16x8_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint16x8_t *v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t *v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t *v35;
  uint16x8_t *v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;

  v11 = a11;
  if (a10 > 7)
  {
    if (a10 == 8)
    {
      v16 = a11 + 2;
      do
      {
        result = vrhaddq_u16(*a1, *a3);
        v17 = vrhaddq_u16(*(uint16x8_t *)((char *)a1 + 2 * a2), *(uint16x8_t *)((char *)a3 + 2 * a4));
        *a3 = result;
        *(uint16x8_t *)((char *)a3 + 2 * a4) = v17;
        v16 -= 2;
        a3 = (uint16x8_t *)((char *)a3 + 4 * a4);
        a1 = (uint16x8_t *)((char *)a1 + 4 * a2);
      }
      while (v16 > 2);
    }
    else if (a10 > 0x1F)
    {
      if (a10 == 32)
      {
        v25 = a11 + 2;
        v26 = 2 * a2;
        v27 = 2 * a4;
        do
        {
          v28 = vrhaddq_u16(a1[1], a3[1]);
          v29 = vrhaddq_u16(a1[2], a3[2]);
          v30 = vrhaddq_u16(a1[3], a3[3]);
          *a3 = vrhaddq_u16(*a1, *a3);
          a3[1] = v28;
          a3[2] = v29;
          a3[3] = v30;
          v31 = (uint16x8_t *)((char *)a3 + v27);
          result = vrhaddq_u16(*(uint16x8_t *)((char *)a1 + 2 * a2), *(uint16x8_t *)((char *)a3 + 2 * a4));
          v32 = vrhaddq_u16(*(uint16x8_t *)((char *)&a1[1] + v26), *(uint16x8_t *)((char *)&a3[1] + v27));
          v33 = vrhaddq_u16(*(uint16x8_t *)((char *)&a1[2] + v26), *(uint16x8_t *)((char *)&a3[2] + v27));
          v34 = vrhaddq_u16(*(uint16x8_t *)((char *)&a1[3] + v26), *(uint16x8_t *)((char *)&a3[3] + v27));
          *v31 = result;
          v31[1] = v32;
          v31[2] = v33;
          v31[3] = v34;
          v25 -= 2;
          a1 = (uint16x8_t *)((char *)a1 + v26 + v26);
          a3 = (uint16x8_t *)((char *)a3 + v27 + v27);
        }
        while (v25 > 2);
      }
      else
      {
        v35 = a1 + 4;
        v36 = a3 + 4;
        do
        {
          v37 = vrhaddq_u16(v35[-3], v36[-3]);
          v38 = vrhaddq_u16(v35[-2], v36[-2]);
          v39 = vrhaddq_u16(v35[-1], v36[-1]);
          v36[-4] = vrhaddq_u16(v35[-4], v36[-4]);
          v36[-3] = v37;
          v36[-2] = v38;
          v36[-1] = v39;
          result = vrhaddq_u16(*v35, *v36);
          v40 = vrhaddq_u16(v35[1], v36[1]);
          v41 = vrhaddq_u16(v35[2], v36[2]);
          v42 = vrhaddq_u16(v35[3], v36[3]);
          *v36 = result;
          v36[1] = v40;
          v36[2] = v41;
          v36[3] = v42;
          v35 = (uint16x8_t *)((char *)v35 + 2 * a2);
          v36 = (uint16x8_t *)((char *)v36 + 2 * a4);
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v18 = a11 + 2;
      v19 = 2 * a4;
      v20 = 2 * a2;
      do
      {
        v21 = (uint16x8_t *)((char *)a3 + v19);
        result = vrhaddq_u16(*a1, *a3);
        v22 = vrhaddq_u16(a1[1], a3[1]);
        v23 = vrhaddq_u16(*(uint16x8_t *)((char *)a1 + 2 * a2), *(uint16x8_t *)((char *)a3 + 2 * a4));
        v24 = vrhaddq_u16(*(uint16x8_t *)((char *)&a1[1] + v20), *(uint16x8_t *)((char *)&a3[1] + v19));
        *a3 = result;
        a3[1] = v22;
        *v21 = v23;
        v21[1] = v24;
        v18 -= 2;
        a3 = (uint16x8_t *)((char *)a3 + 4 * a4);
        a1 = (uint16x8_t *)((char *)a1 + v20 + v20);
      }
      while (v18 > 2);
    }
  }
  else
  {
    v12 = a11 + 2;
    do
    {
      v13 = *(uint16x4_t *)&a1->i8[2 * a2];
      v14 = *(uint16x4_t *)&a3->i8[2 * a4];
      *(uint16x4_t *)a3->i8 = vrhadd_u16(*(uint16x4_t *)a1->i8, *(uint16x4_t *)a3->i8);
      *(uint16x4_t *)result.i8 = vrhadd_u16(v13, v14);
      *(uint64_t *)((char *)a3->i64 + 2 * a4) = result.i64[0];
      v12 -= 2;
      a3 = (uint16x8_t *)((char *)a3 + 4 * a4);
      a1 = (uint16x8_t *)((char *)a1 + 4 * a2);
    }
    while (v12 > 2);
  }
  return result;
}

__n128 vpx_highbd_convolve_copy_neon(__n128 *a1, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  __n128 result;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 *v26;
  __n128 *v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;

  if (a10 > 7)
  {
    if (a10 == 8)
    {
      do
      {
        result = *a1;
        v14 = *(__n128 *)((char *)a1 + 2 * a2);
        *a3 = *a1;
        *(__n128 *)((char *)a3 + 2 * a4) = v14;
        a3 = (__n128 *)((char *)a3 + 4 * a4);
        a1 = (__n128 *)((char *)a1 + 4 * a2);
        a11 -= 2;
      }
      while (a11);
    }
    else if (a10 > 0x1F)
    {
      if (a10 == 32)
      {
        v21 = a1 + 2;
        v22 = a3 + 2;
        do
        {
          result = v21[-2];
          v23 = v21[-1];
          v24 = *v21;
          v25 = v21[1];
          v22[-2] = result;
          v22[-1] = v23;
          *v22 = v24;
          v22[1] = v25;
          v21 = (__n128 *)((char *)v21 + 2 * a2);
          v22 = (__n128 *)((char *)v22 + 2 * a4);
          --a11;
        }
        while (a11);
      }
      else
      {
        v26 = a1 + 4;
        v27 = a3 + 4;
        do
        {
          result = v26[-4];
          v28 = v26[-3];
          v29 = v26[-2];
          v30 = v26[-1];
          v31 = *v26;
          v32 = v26[1];
          v33 = v26[2];
          v34 = v26[3];
          v27[-4] = result;
          v27[-3] = v28;
          v27[-2] = v29;
          v27[-1] = v30;
          *v27 = v31;
          v27[1] = v32;
          v26 = (__n128 *)((char *)v26 + 2 * a2);
          v27[2] = v33;
          v27[3] = v34;
          v27 = (__n128 *)((char *)v27 + 2 * a4);
          --a11;
        }
        while (a11);
      }
    }
    else
    {
      v15 = 2 * a2;
      v16 = 2 * a4;
      do
      {
        result = *a1;
        v17 = a1[1];
        v18 = *(__int128 *)((char *)a1 + 2 * a2);
        v19 = *(__int128 *)((char *)&a1[1] + v15);
        *a3 = *a1;
        a3[1] = v17;
        v20 = (_OWORD *)((char *)a3->n128_u64 + v16);
        *v20 = v18;
        v20[1] = v19;
        a1 = (__n128 *)((char *)a1 + v15 + v15);
        a3 = (__n128 *)((char *)a3 + v16 + v16);
        a11 -= 2;
      }
      while (a11);
    }
  }
  else
  {
    do
    {
      result.n128_u64[0] = a1->n128_u64[0];
      v13 = *(unint64_t *)((char *)a1->n128_u64 + 2 * a2);
      a3->n128_u64[0] = a1->n128_u64[0];
      *(unint64_t *)((char *)a3->n128_u64 + 2 * a4) = v13;
      a3 = (__n128 *)((char *)a3 + 4 * a4);
      a1 = (__n128 *)((char *)a1 + 4 * a2);
      a11 -= 2;
    }
    while (a11);
  }
  return result;
}

uint8x16_t vpx_idct16x16_1_add_neon(__int16 *a1, uint8x16_t *a2, int a3)
{
  signed int v3;
  int v4;
  int v5;
  uint8x16_t v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  uint8x16_t *v9;
  uint8x16_t *v10;
  uint8x16_t *v11;
  uint8x16_t *v12;
  uint8x16_t *v13;
  uint8x16_t *v14;
  uint8x16_t *v15;
  uint8x16_t *v16;
  uint8x16_t *v17;
  uint8x16_t *v18;
  uint8x16_t *v19;
  uint8x16_t *v20;
  uint8x16_t result;
  int v22;
  uint8x16_t v23;
  uint8x16_t *v24;
  uint8x16_t *v25;
  uint8x16_t *v26;
  uint8x16_t *v27;
  uint8x16_t *v28;
  uint8x16_t *v29;
  uint8x16_t *v30;
  uint8x16_t *v31;
  uint8x16_t *v32;
  uint8x16_t *v33;
  uint8x16_t *v34;
  uint8x16_t *v35;
  uint8x16_t *v36;
  uint8x16_t *v37;

  v3 = (46340 * ((46340 * *a1 + 0x8000) >> 16) + 0x8000) & 0xFFFF0000;
  v4 = (v3 >> 16) + 32;
  if (v3 < -2162687)
  {
    v22 = (__int16)-(v4 >> 6);
    if (v22 >= 255)
      v22 = 255;
    v23 = (uint8x16_t)vdupq_n_s8(v22 & ~(v22 >> 31));
    *a2 = vqsubq_u8(*a2, v23);
    v24 = (uint8x16_t *)((char *)a2 + a3);
    *v24 = vqsubq_u8(*v24, v23);
    v25 = (uint8x16_t *)((char *)v24 + a3);
    *v25 = vqsubq_u8(*v25, v23);
    v26 = (uint8x16_t *)((char *)v25 + a3);
    *v26 = vqsubq_u8(*v26, v23);
    v27 = (uint8x16_t *)((char *)v26 + a3);
    *v27 = vqsubq_u8(*v27, v23);
    v28 = (uint8x16_t *)((char *)v27 + a3);
    *v28 = vqsubq_u8(*v28, v23);
    v29 = (uint8x16_t *)((char *)v28 + a3);
    *v29 = vqsubq_u8(*v29, v23);
    v30 = (uint8x16_t *)((char *)v29 + a3);
    *v30 = vqsubq_u8(*v30, v23);
    v31 = (uint8x16_t *)((char *)v30 + a3);
    *v31 = vqsubq_u8(*v31, v23);
    v32 = (uint8x16_t *)((char *)v31 + a3);
    *v32 = vqsubq_u8(*v32, v23);
    v33 = (uint8x16_t *)((char *)v32 + a3);
    *v33 = vqsubq_u8(*v33, v23);
    v34 = (uint8x16_t *)((char *)v33 + a3);
    *v34 = vqsubq_u8(*v34, v23);
    v35 = (uint8x16_t *)((char *)v34 + a3);
    *v35 = vqsubq_u8(*v35, v23);
    v36 = (uint8x16_t *)((char *)v35 + a3);
    *v36 = vqsubq_u8(*v36, v23);
    v37 = (uint8x16_t *)((char *)v36 + a3);
    *v37 = vqsubq_u8(*v37, v23);
    result = vqsubq_u8(*(uint8x16_t *)((char *)v37 + a3), v23);
    *(uint8x16_t *)((char *)v37 + a3) = result;
  }
  else
  {
    v5 = v4 >> 6;
    if (v5 >= 255)
      v5 = 255;
    v6 = (uint8x16_t)vdupq_n_s8(v5 & ~(v5 >> 31));
    *a2 = vqaddq_u8(*a2, v6);
    v7 = (uint8x16_t *)((char *)a2 + a3);
    *v7 = vqaddq_u8(*v7, v6);
    v8 = (uint8x16_t *)((char *)v7 + a3);
    *v8 = vqaddq_u8(*v8, v6);
    v9 = (uint8x16_t *)((char *)v8 + a3);
    *v9 = vqaddq_u8(*v9, v6);
    v10 = (uint8x16_t *)((char *)v9 + a3);
    *v10 = vqaddq_u8(*v10, v6);
    v11 = (uint8x16_t *)((char *)v10 + a3);
    *v11 = vqaddq_u8(*v11, v6);
    v12 = (uint8x16_t *)((char *)v11 + a3);
    *v12 = vqaddq_u8(*v12, v6);
    v13 = (uint8x16_t *)((char *)v12 + a3);
    *v13 = vqaddq_u8(*v13, v6);
    v14 = (uint8x16_t *)((char *)v13 + a3);
    *v14 = vqaddq_u8(*v14, v6);
    v15 = (uint8x16_t *)((char *)v14 + a3);
    *v15 = vqaddq_u8(*v15, v6);
    v16 = (uint8x16_t *)((char *)v15 + a3);
    *v16 = vqaddq_u8(*v16, v6);
    v17 = (uint8x16_t *)((char *)v16 + a3);
    *v17 = vqaddq_u8(*v17, v6);
    v18 = (uint8x16_t *)((char *)v17 + a3);
    *v18 = vqaddq_u8(*v18, v6);
    v19 = (uint8x16_t *)((char *)v18 + a3);
    *v19 = vqaddq_u8(*v19, v6);
    v20 = (uint8x16_t *)((char *)v19 + a3);
    *v20 = vqaddq_u8(*v20, v6);
    result = vqaddq_u8(*(uint8x16_t *)((char *)v20 + a3), v6);
    *(uint8x16_t *)((char *)v20 + a3) = result;
  }
  return result;
}

int16x8_t *vpx_idct16x16_256_add_half1d(int16x8_t *result, int16x8_t *a2, int16x8_t *a3, int a4, int a5)
{
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int16x8_t v82;
  int32x4_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int16x8_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int16x8_t v96;
  int32x4_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int16x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int16x8_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  uint64_t v182;
  int16x8_t *v183;
  int16x8_t *v184;
  int16x8_t *v185;
  int16x8_t *v186;
  int16x8_t *v187;
  int16x8_t *v188;
  int16x8_t *v189;
  int16x8_t *v190;
  int16x8_t *v191;
  int16x8_t *v192;
  int16x8_t *v193;
  int16x8_t *v194;
  int16x8_t *v195;
  uint8x8_t *v196;
  uint8x8_t *v197;
  uint8x8_t *v198;
  uint8x8_t *v199;
  uint8x8_t *v200;
  uint8x8_t *v201;
  uint8x8_t *v202;
  uint8x8_t *v203;
  uint8x8_t *v204;
  uint8x8_t *v205;
  uint8x8_t *v206;
  uint8x8_t *v207;
  uint8x8_t *v208;
  uint8x8_t *v209;
  int16x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int16x8_t v222;
  int32x4_t v223;
  int16x8_t v224;
  int32x4_t v225;
  int16x8_t v226;
  int32x4_t v227;

  if (a2)
  {
    v5 = vuzp1q_s16(*result, result[1]);
    v6 = vuzp1q_s16(result[2], result[3]);
    v7 = vuzp1q_s16(result[4], result[5]);
    v8 = vuzp1q_s16(result[6], result[7]);
    v9 = vuzp1q_s16(result[8], result[9]);
    v10 = vuzp1q_s16(result[10], result[11]);
    v11 = vuzp1q_s16(result[12], result[13]);
    v12 = vuzp1q_s16(result[14], result[15]);
    v13 = vuzp1q_s16(result[16], result[17]);
    v14 = vuzp1q_s16(result[18], result[19]);
    v15 = vuzp1q_s16(result[20], result[21]);
    v16 = vuzp1q_s16(result[22], result[23]);
    v17 = vuzp1q_s16(result[24], result[25]);
    v18 = vuzp1q_s16(result[26], result[27]);
    v19 = vuzp1q_s16(result[28], result[29]);
    v20 = vuzp1q_s16(result[30], result[31]);
  }
  else
  {
    v5 = *result;
    v6 = result[1];
    v7 = result[2];
    v8 = result[3];
    v9 = result[4];
    v10 = result[5];
    v11 = result[6];
    v12 = result[7];
    v13 = result[8];
    v14 = result[9];
    v15 = result[10];
    v16 = result[11];
    v17 = result[12];
    v18 = result[13];
    v19 = result[14];
    v20 = result[15];
  }
  v21 = (int32x4_t)vtrn1q_s16(v5, v7);
  v22 = (int32x4_t)vtrn2q_s16(v5, v7);
  v23 = (int32x4_t)vtrn1q_s16(v9, v11);
  v24 = (int32x4_t)vtrn2q_s16(v9, v11);
  v25 = (int32x4_t)vtrn1q_s16(v13, v15);
  v26 = (int32x4_t)vtrn2q_s16(v13, v15);
  v27 = (int32x4_t)vtrn1q_s16(v17, v19);
  v28 = (int32x4_t)vtrn2q_s16(v17, v19);
  v29 = (int64x2_t)vtrn1q_s32(v21, v23);
  v30 = (int64x2_t)vtrn2q_s32(v21, v23);
  v31 = (int64x2_t)vtrn1q_s32(v22, v24);
  v32 = (int64x2_t)vtrn2q_s32(v22, v24);
  v33 = (int64x2_t)vtrn1q_s32(v25, v27);
  v34 = (int64x2_t)vtrn2q_s32(v25, v27);
  v35 = (int64x2_t)vtrn1q_s32(v26, v28);
  v36 = (int64x2_t)vtrn2q_s32(v26, v28);
  v226 = (int16x8_t)vzip1q_s64(v29, v33);
  v222 = (int16x8_t)vzip2q_s64(v29, v33);
  v37 = (int16x8_t)vzip1q_s64(v31, v35);
  v38 = (int16x8_t)vzip2q_s64(v31, v35);
  v39 = (int16x8_t)vzip1q_s64(v30, v34);
  v40 = (int16x8_t)vzip2q_s64(v30, v34);
  v41 = (int16x8_t)vzip1q_s64(v32, v36);
  v42 = (int16x8_t)vzip2q_s64(v32, v36);
  v43 = (int32x4_t)vtrn1q_s16(v6, v8);
  v44 = (int32x4_t)vtrn2q_s16(v6, v8);
  v45 = (int32x4_t)vtrn1q_s16(v10, v12);
  v46 = (int32x4_t)vtrn2q_s16(v10, v12);
  v47 = (int32x4_t)vtrn1q_s16(v14, v16);
  v48 = (int32x4_t)vtrn2q_s16(v14, v16);
  v49 = (int32x4_t)vtrn1q_s16(v18, v20);
  v50 = (int32x4_t)vtrn2q_s16(v18, v20);
  v51 = (int64x2_t)vtrn1q_s32(v43, v45);
  v52 = (int64x2_t)vtrn2q_s32(v43, v45);
  v53 = (int64x2_t)vtrn1q_s32(v44, v46);
  v54 = (int64x2_t)vtrn2q_s32(v44, v46);
  v55 = (int64x2_t)vtrn1q_s32(v47, v49);
  v56 = (int64x2_t)vtrn2q_s32(v47, v49);
  v57 = (int64x2_t)vtrn1q_s32(v48, v50);
  v58 = (int64x2_t)vtrn2q_s32(v48, v50);
  v224 = (int16x8_t)vzip1q_s64(v51, v55);
  v59 = (int16x8_t)vzip2q_s64(v51, v55);
  v60 = (int16x8_t)vzip1q_s64(v53, v57);
  v61 = (int16x8_t)vzip2q_s64(v53, v57);
  v62 = (int16x8_t)vzip1q_s64(v52, v56);
  v63 = (int16x8_t)vzip2q_s64(v52, v56);
  v64 = (int16x8_t)vzip1q_s64(v54, v58);
  v65 = (int16x8_t)vzip2q_s64(v54, v58);
  v66 = vdupq_n_s16(0x646u);
  v67 = vdupq_n_s16(0x3FB1u);
  v68 = vmlsl_high_s16(vmull_high_s16(v37, v66), v65, v67);
  v69 = vmlal_s16(vmull_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v67.i8), *(int16x4_t *)v65.i8, *(int16x4_t *)v66.i8);
  v70 = vmlal_high_s16(vmull_high_s16(v37, v67), v65, v66);
  *(int16x4_t *)v65.i8 = vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v66.i8), *(int16x4_t *)v65.i8, *(int16x4_t *)v67.i8), 0xEuLL);
  v71 = vdupq_n_s16(0x3179u);
  v72 = vdupq_n_s16(0xD766u);
  *(int16x4_t *)v66.i8 = vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v42.i8, *(int16x4_t *)v72.i8), *(int16x4_t *)v60.i8, *(int16x4_t *)v71.i8), 0xEuLL);
  v73 = vsub_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v66.i8);
  *(int16x4_t *)v69.i8 = vrshrn_n_s32(v69, 0xEuLL);
  v74 = vmlal_high_s16(vmull_high_s16(v42, v72), v60, v71);
  v75 = vmlsl_high_s16(vmull_high_s16(v42, v71), v60, v72);
  *(int16x4_t *)v42.i8 = vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v42.i8, *(int16x4_t *)v71.i8), *(int16x4_t *)v60.i8, *(int16x4_t *)v72.i8), 0xEuLL);
  v76 = vdupq_n_s16(0x1E2Bu);
  v77 = vdupq_n_s16(0x3871u);
  v78 = vmlsl_s16(vmull_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v76.i8), *(int16x4_t *)v64.i8, *(int16x4_t *)v77.i8);
  v79 = vmlsl_high_s16(vmull_high_s16(v38, v76), v64, v77);
  v80 = vmlal_s16(vmull_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v77.i8), *(int16x4_t *)v64.i8, *(int16x4_t *)v76.i8);
  v81 = vmull_high_s16(v38, v77);
  v82 = vdupq_n_s16(0x3D3Fu);
  v83 = vmlal_high_s16(v81, v64, v76);
  v84 = vdupq_n_s16(0xED6Cu);
  v85 = vmlal_s16(vmull_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v84.i8), *(int16x4_t *)v61.i8, *(int16x4_t *)v82.i8);
  v86 = vmlal_high_s16(vmull_high_s16(v41, v84), v61, v82);
  v87 = vmlsl_s16(vmull_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v82.i8), *(int16x4_t *)v61.i8, *(int16x4_t *)v84.i8);
  v88 = vmlsl_high_s16(vmull_high_s16(v41, v82), v61, v84);
  v89 = vdupq_n_s16(0xC7Cu);
  v90 = vdupq_n_s16(0x3EC5u);
  v91 = vmlsl_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v89.i8), *(int16x4_t *)v63.i8, *(int16x4_t *)v90.i8);
  v218 = vmlsl_high_s16(vmull_high_s16(v39, v89), v63, v90);
  v92 = vmlal_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v90.i8), *(int16x4_t *)v63.i8, *(int16x4_t *)v89.i8);
  v213 = vmlal_high_s16(vmull_high_s16(v39, v90), v63, v89);
  v93 = vdupq_n_s16(0x3537u);
  v94 = vmull_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v93.i8);
  v95 = vmull_high_s16(v40, v93);
  v96 = vdupq_n_s16(0xDC72u);
  v97 = vmlal_s16(vmull_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v96.i8), *(int16x4_t *)v62.i8, *(int16x4_t *)v93.i8);
  v212 = vmlal_high_s16(vmull_high_s16(v40, v96), v62, v93);
  *(int16x4_t *)v44.i8 = vsub_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v42.i8);
  v98 = vrshrn_high_n_s32(*(int16x4_t *)v42.i8, v75, 0xEuLL);
  *(int16x4_t *)v42.i8 = vrshrn_n_s32(v78, 0xEuLL);
  *(int16x4_t *)v84.i8 = vrshrn_n_s32(v85, 0xEuLL);
  v99 = vmlsl_s16(v94, *(int16x4_t *)v62.i8, *(int16x4_t *)v96.i8);
  v211 = vmlsl_high_s16(v95, v62, v96);
  *(int16x4_t *)v78.i8 = vsub_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v42.i8);
  v100 = vrshrn_high_n_s32(*(int16x4_t *)v42.i8, v79, 0xEuLL);
  *(int16x4_t *)v42.i8 = vrshrn_n_s32(v80, 0xEuLL);
  *(int16x4_t *)v96.i8 = vrshrn_n_s32(v87, 0xEuLL);
  *(int16x4_t *)v80.i8 = vsub_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v42.i8);
  v217 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v66.i8, v74, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v65.i8, v68, 0xEuLL));
  v216 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v84.i8, v86, 0xEuLL), v100);
  v215 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v96.i8, v88, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v42.i8, v83, 0xEuLL));
  v214 = vaddq_s16(v98, vrshrn_high_n_s32(*(int16x4_t *)v69.i8, v70, 0xEuLL));
  v101 = vdupq_n_s16(0x187Eu);
  v102 = vdupq_n_s16(0x3B21u);
  v220 = vmlsl_high_s16(vmull_high_s16(v222, v101), v59, v102);
  v221 = vmlsl_s16(vmull_s16(*(int16x4_t *)v222.i8, *(int16x4_t *)v101.i8), *(int16x4_t *)v59.i8, *(int16x4_t *)v102.i8);
  v219 = vmlal_s16(vmull_s16(*(int16x4_t *)v222.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v59.i8, *(int16x4_t *)v101.i8);
  v223 = vmlal_high_s16(vmull_high_s16(v222, v102), v59, v101);
  *(int16x4_t *)v59.i8 = vrshrn_n_s32(v68, 0xEuLL);
  *(int16x4_t *)v66.i8 = vrshrn_n_s32(v74, 0xEuLL);
  *(int16x4_t *)v74.i8 = vrshrn_n_s32(v83, 0xEuLL);
  v210 = vrshrn_n_s32(v91, 0xEuLL);
  *(int16x4_t *)v68.i8 = vsub_s16(vrshrn_n_s32(v70, 0xEuLL), vrshrn_n_s32(v75, 0xEuLL));
  *(int16x4_t *)v83.i8 = vrshrn_n_s32(v92, 0xEuLL);
  *(int16x4_t *)v66.i8 = vsub_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v66.i8);
  v103 = vmlsl_s16(vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v101.i8), v73, *(int16x4_t *)v102.i8);
  v104 = vmlal_s16(vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v102.i8), v73, *(int16x4_t *)v101.i8);
  v105 = vmlsl_s16(vmull_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v101.i8), *(int16x4_t *)v66.i8, *(int16x4_t *)v102.i8);
  v106 = vmlal_s16(vmull_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v66.i8, *(int16x4_t *)v101.i8);
  *(int16x4_t *)v44.i8 = vsub_s16(vrshrn_n_s32(v88, 0xEuLL), *(int16x4_t *)v74.i8);
  v107 = vsub_s16(vrshrn_n_s32(v86, 0xEuLL), vrshrn_n_s32(v79, 0xEuLL));
  v108 = vmlsl_s16(vmull_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v101.i8), *(int16x4_t *)v78.i8, *(int16x4_t *)v102.i8);
  v86.i64[0] = 0x200000002000;
  v86.i64[1] = 0x200000002000;
  v109 = vmlsl_s16(v86, *(int16x4_t *)v78.i8, *(int16x4_t *)v101.i8);
  v66.i64[0] = 0x200000002000;
  v66.i64[1] = 0x200000002000;
  v110 = vmlsl_s16((int32x4_t)v66, v107, *(int16x4_t *)v101.i8);
  v111 = vmlsl_s16(vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v101.i8), v107, *(int16x4_t *)v102.i8);
  v112 = vdupq_n_s16(0x2D41u);
  *(int16x4_t *)v79.i8 = vrshrn_n_s32(v97, 0xEuLL);
  v113 = vmlsl_s16(v109, *(int16x4_t *)v80.i8, *(int16x4_t *)v102.i8);
  v114 = vmlsl_s16(v110, *(int16x4_t *)v44.i8, *(int16x4_t *)v102.i8);
  v115 = vmlsl_s16(vmull_s16(*(int16x4_t *)v226.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v224.i8, *(int16x4_t *)v112.i8);
  v116 = vmlsl_high_s16(vmull_high_s16(v226, v112), v224, v112);
  v117 = vmlal_s16(vmull_s16(*(int16x4_t *)v224.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v226.i8, *(int16x4_t *)v112.i8);
  v118 = vmlal_high_s16(vmull_high_s16(v224, v112), v226, v112);
  *(int16x4_t *)v70.i8 = vsub_s16(vrshrn_n_s32(v213, 0xEuLL), vrshrn_n_s32(v211, 0xEuLL));
  *(int16x4_t *)v99.i8 = vrshrn_n_s32(v99, 0xEuLL);
  *(int16x4_t *)v102.i8 = vsub_s16(vrshrn_n_s32(v218, 0xEuLL), vrshrn_n_s32(v212, 0xEuLL));
  *(int16x4_t *)v80.i8 = vsub_s16(*(int16x4_t *)v83.i8, *(int16x4_t *)v99.i8);
  *(int16x4_t *)v97.i8 = vsub_s16(v210, *(int16x4_t *)v79.i8);
  v225 = vmlal_s16(vmull_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v80.i8, *(int16x4_t *)v112.i8);
  v227 = vmlsl_s16(vmull_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v97.i8, *(int16x4_t *)v112.i8);
  v119 = vmlsl_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v102.i8, *(int16x4_t *)v112.i8);
  v120 = vmlal_s16(vmull_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v70.i8, *(int16x4_t *)v112.i8);
  *(int16x4_t *)v70.i8 = vsub_s16(vrshrn_n_s32(v106, 0xEuLL), vrshrn_n_s32(v111, 0xEuLL));
  *(int16x4_t *)v42.i8 = vsub_s16(vrshrn_n_s32(v105, 0xEuLL), vshrn_n_s32(v114, 0xEuLL));
  *(int16x4_t *)v98.i8 = vrshrn_n_s32(v103, 0xEuLL);
  *(int16x4_t *)v104.i8 = vrshrn_n_s32(v104, 0xEuLL);
  *(int16x4_t *)v108.i8 = vrshrn_n_s32(v108, 0xEuLL);
  *(int16x4_t *)v113.i8 = vshrn_n_s32(v113, 0xEuLL);
  *(int16x4_t *)v103.i8 = vsub_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v108.i8);
  *(int16x4_t *)v97.i8 = vsub_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v113.i8);
  v121 = vmlsl_s16(vmull_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v97.i8, *(int16x4_t *)v112.i8);
  v122 = vmlal_s16(vmull_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v103.i8, *(int16x4_t *)v112.i8);
  v123 = vmlsl_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v42.i8, *(int16x4_t *)v112.i8);
  v124 = vmlal_s16(vmull_s16(*(int16x4_t *)v42.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v70.i8, *(int16x4_t *)v112.i8);
  v125 = vsubq_s16(v217, v216);
  v126 = vsubq_s16(v214, v215);
  v127 = vmlsl_s16(vmull_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v125.i8, *(int16x4_t *)v112.i8);
  v128 = vmlsl_high_s16(vmull_high_s16(v126, v112), v125, v112);
  v129 = vmlal_s16(vmull_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v126.i8, *(int16x4_t *)v112.i8);
  v130 = vmlal_high_s16(vmull_high_s16(v125, v112), v126, v112);
  v131 = vrshrn_high_n_s32(vrshrn_n_s32(v115, 0xEuLL), v116, 0xEuLL);
  v132 = vrshrn_high_n_s32(vrshrn_n_s32(v117, 0xEuLL), v118, 0xEuLL);
  v133 = vrshrn_high_n_s32(vrshrn_n_s32(v221, 0xEuLL), v220, 0xEuLL);
  v134 = vrshrn_high_n_s32(vrshrn_n_s32(v219, 0xEuLL), v223, 0xEuLL);
  v135 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v79.i8, v212, 0xEuLL), vrshrn_high_n_s32(v210, v218, 0xEuLL));
  v136 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v99.i8, v211, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v83.i8, v213, 0xEuLL));
  v137 = vrshrn_high_n_s32(*(int16x4_t *)v98.i8, v105, 0xEuLL);
  v138 = vrshrn_high_n_s32(*(int16x4_t *)v104.i8, v106, 0xEuLL);
  v139 = vrshrn_high_n_s32(*(int16x4_t *)v108.i8, v111, 0xEuLL);
  v140 = vaddq_s16(v133, v131);
  v141 = vsubq_s16(v131, v133);
  v142 = vaddq_s16(v134, v132);
  v143 = vsubq_s16(v132, v134);
  v144 = vrshrn_high_n_s32(vrshrn_n_s32(v227, 0xEuLL), v119, 0xEuLL);
  v145 = vrshrn_high_n_s32(vrshrn_n_s32(v225, 0xEuLL), v120, 0xEuLL);
  v146 = vaddq_s16(v216, v217);
  v147 = vaddq_s16(vshrn_high_n_s32(*(int16x4_t *)v113.i8, v114, 0xEuLL), v137);
  v148 = vaddq_s16(v139, v138);
  v149 = vaddq_s16(v215, v214);
  v150 = vaddq_s16(v143, v135);
  v151 = vsubq_s16(v143, v135);
  v152 = vaddq_s16(v144, v141);
  v153 = vsubq_s16(v141, v144);
  v154 = vaddq_s16(v145, v140);
  v155 = vsubq_s16(v140, v145);
  v156 = vaddq_s16(v142, v136);
  v157 = vsubq_s16(v142, v136);
  v158 = vrshrn_high_n_s32(vrshrn_n_s32(v121, 0xEuLL), v123, 0xEuLL);
  v159 = vrshrn_high_n_s32(vrshrn_n_s32(v122, 0xEuLL), v124, 0xEuLL);
  v160 = vrshrn_high_n_s32(vrshrn_n_s32(v127, 0xEuLL), v128, 0xEuLL);
  v161 = vrshrn_high_n_s32(vrshrn_n_s32(v129, 0xEuLL), v130, 0xEuLL);
  v162 = vqaddq_s16(v157, v146);
  v163 = vqsubq_s16(v157, v146);
  v164 = vqaddq_s16(v155, v147);
  v165 = vqsubq_s16(v155, v147);
  v166 = vqaddq_s16(v153, v158);
  v167 = vqsubq_s16(v153, v158);
  v168 = vqaddq_s16(v151, v160);
  v169 = vqsubq_s16(v151, v160);
  v170 = vqaddq_s16(v150, v161);
  v171 = vqsubq_s16(v150, v161);
  v172 = vqaddq_s16(v152, v159);
  v173 = vqsubq_s16(v152, v159);
  v174 = vqaddq_s16(v154, v148);
  v175 = vqsubq_s16(v154, v148);
  v176 = vqaddq_s16(v156, v149);
  v177 = vqsubq_s16(v156, v149);
  if (a2)
  {
    *a2 = v176;
    a2[2] = v174;
    a2[4] = v172;
    a2[6] = v170;
    a2[8] = v168;
    a2[10] = v166;
    a2[12] = v164;
    a2[14] = v162;
    a2[16] = v163;
    a2[18] = v165;
    a2[20] = v167;
    a2[22] = v169;
    a2[24] = v171;
    a2[26] = v173;
    a2[28] = v175;
    a2[30] = v177;
  }
  else if (a5)
  {
    v178 = vrshrq_n_s16(v171, 6uLL);
    v179 = vrshrq_n_s16(v173, 6uLL);
    v180 = vrshrq_n_s16(v175, 6uLL);
    v181.i64[0] = 0xFF00FF00FF00FFLL;
    v181.i64[1] = 0xFF00FF00FF00FFLL;
    *a3 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v176, 6uLL), *a3), v181), 0);
    v182 = 2 * a4;
    *(int16x8_t *)((char *)a3 + v182) = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v174, 6uLL), *(int16x8_t *)((char *)a3 + v182)), v181), 0);
    v183 = (int16x8_t *)((char *)a3 + v182 + v182);
    *v183 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v172, 6uLL), *v183), v181), 0);
    v184 = (int16x8_t *)((char *)v183 + v182);
    *v184 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v170, 6uLL), *v184), v181), 0);
    v185 = (int16x8_t *)((char *)v184 + v182);
    *v185 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v168, 6uLL), *v185), v181), 0);
    v186 = (int16x8_t *)((char *)v185 + v182);
    *v186 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v166, 6uLL), *v186), v181), 0);
    v187 = (int16x8_t *)((char *)v186 + v182);
    *v187 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v164, 6uLL), *v187), v181), 0);
    v188 = (int16x8_t *)((char *)v187 + v182);
    *v188 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v162, 6uLL), *v188), v181), 0);
    v189 = (int16x8_t *)((char *)v188 + v182);
    *v189 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v163, 6uLL), *v189), v181), 0);
    v190 = (int16x8_t *)((char *)v189 + v182);
    *v190 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v165, 6uLL), *v190), v181), 0);
    v191 = (int16x8_t *)((char *)v190 + v182);
    *v191 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v167, 6uLL), *v191), v181), 0);
    v192 = (int16x8_t *)((char *)v191 + v182);
    *v192 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v169, 6uLL), *v192), v181), 0);
    v193 = (int16x8_t *)((char *)v192 + v182);
    *v193 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v178, *v193), v181), 0);
    v194 = (int16x8_t *)((char *)v193 + v182);
    *v194 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v179, *v194), v181), 0);
    v195 = (int16x8_t *)((char *)v194 + v182);
    *v195 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v180, *v195), v181), 0);
    *(int16x8_t *)((char *)v195 + v182) = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v177, 6uLL), *(int16x8_t *)((char *)v195 + v182)), v181), 0);
  }
  else
  {
    *(int8x8_t *)a3->i8 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a3->i8), v176, 6uLL));
    v196 = (uint8x8_t *)&a3->i8[a4];
    *v196 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v196), v174, 6uLL));
    v197 = (uint8x8_t *)((char *)v196 + a4);
    *v197 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v197), v172, 6uLL));
    v198 = (uint8x8_t *)((char *)v197 + a4);
    *v198 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v198), v170, 6uLL));
    v199 = (uint8x8_t *)((char *)v198 + a4);
    *v199 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v199), v168, 6uLL));
    v200 = (uint8x8_t *)((char *)v199 + a4);
    *v200 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v200), v166, 6uLL));
    v201 = (uint8x8_t *)((char *)v200 + a4);
    *v201 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v201), v164, 6uLL));
    v202 = (uint8x8_t *)((char *)v201 + a4);
    *v202 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v202), v162, 6uLL));
    v203 = (uint8x8_t *)((char *)v202 + a4);
    *v203 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v203), v163, 6uLL));
    v204 = (uint8x8_t *)((char *)v203 + a4);
    *v204 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v204), v165, 6uLL));
    v205 = (uint8x8_t *)((char *)v204 + a4);
    *v205 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v205), v167, 6uLL));
    v206 = (uint8x8_t *)((char *)v205 + a4);
    *v206 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v206), v169, 6uLL));
    v207 = (uint8x8_t *)((char *)v206 + a4);
    *v207 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v207), v171, 6uLL));
    v208 = (uint8x8_t *)((char *)v207 + a4);
    *v208 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v208), v173, 6uLL));
    v209 = (uint8x8_t *)((char *)v208 + a4);
    *v209 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v209), v175, 6uLL));
    *(int8x8_t *)((char *)v209 + a4) = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v209 + a4)), v177, 6uLL));
  }
  return result;
}

int16x8_t *vpx_idct16x16_38_add_half1d(int16x8_t *result, int16x8_t *a2, int16x8_t *a3, int a4, int a5)
{
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int16x4_t v69;
  int16x8_t v70;
  int16x4_t v71;
  int16x4_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int16x4_t v75;
  int16x8_t v76;
  int32x4_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  uint64_t v132;
  int16x8_t *v133;
  int16x8_t *v134;
  int16x8_t *v135;
  int16x8_t *v136;
  int16x8_t *v137;
  int16x8_t *v138;
  int16x8_t *v139;
  int16x8_t *v140;
  int16x8_t *v141;
  int16x8_t *v142;
  int16x8_t *v143;
  int16x8_t *v144;
  int16x8_t *v145;
  uint8x8_t *v146;
  uint8x8_t *v147;
  uint8x8_t *v148;
  uint8x8_t *v149;
  uint8x8_t *v150;
  uint8x8_t *v151;
  uint8x8_t *v152;
  uint8x8_t *v153;
  uint8x8_t *v154;
  uint8x8_t *v155;
  uint8x8_t *v156;
  uint8x8_t *v157;
  uint8x8_t *v158;
  uint8x8_t *v159;

  if (a2)
  {
    v5 = vuzp1q_s16(*result, result[1]);
    v6 = vuzp1q_s16(result[4], result[5]);
    v7 = vuzp1q_s16(result[8], result[9]);
    v8 = vuzp1q_s16(result[12], result[13]);
    v9 = vuzp1q_s16(result[16], result[17]);
    v10 = vuzp1q_s16(result[20], result[21]);
    v11 = vuzp1q_s16(result[24], result[25]);
    v12 = vuzp1q_s16(result[28], result[29]);
  }
  else
  {
    v5 = *result;
    v6 = result[2];
    v7 = result[4];
    v8 = result[6];
    v9 = result[8];
    v10 = result[10];
    v11 = result[12];
    v12 = result[14];
  }
  v13 = (int32x4_t)vtrn1q_s16(v5, v6);
  v14 = (int32x4_t)vtrn2q_s16(v5, v6);
  v15 = (int32x4_t)vtrn1q_s16(v7, v8);
  v16 = (int32x4_t)vtrn2q_s16(v7, v8);
  v17 = (int32x4_t)vtrn1q_s16(v9, v10);
  v18 = (int32x4_t)vtrn2q_s16(v9, v10);
  v19 = (int32x4_t)vtrn1q_s16(v11, v12);
  v20 = (int32x4_t)vtrn2q_s16(v11, v12);
  v21 = (int64x2_t)vtrn1q_s32(v13, v15);
  v22 = (int64x2_t)vtrn2q_s32(v13, v15);
  v23 = (int64x2_t)vtrn1q_s32(v14, v16);
  v24 = (int64x2_t)vtrn2q_s32(v14, v16);
  v25 = (int64x2_t)vtrn1q_s32(v17, v19);
  v26 = (int64x2_t)vtrn2q_s32(v17, v19);
  v27 = (int64x2_t)vtrn1q_s32(v18, v20);
  v28 = (int64x2_t)vtrn2q_s32(v18, v20);
  v29 = (int16x8_t)vzip1q_s64(v21, v25);
  v30 = (int16x8_t)vzip2q_s64(v21, v25);
  v31 = (int16x8_t)vzip1q_s64(v23, v27);
  v32 = (int16x8_t)vzip2q_s64(v23, v27);
  v33 = (int16x8_t)vzip1q_s64(v22, v26);
  v34 = (int16x8_t)vzip2q_s64(v22, v26);
  v35 = (int16x8_t)vzip1q_s64(v24, v28);
  v36 = (int16x8_t)vzip2q_s64(v24, v28);
  v37 = vqrdmulhq_lane_s16(v31, (int16x4_t)0x3C5670E20C8C7F62, 1);
  v38 = vqrdmulhq_lane_s16(v36, (int16x4_t)0xAECC62F2DAD87A7ELL, 3);
  v39 = vqrdmulhq_lane_s16(v32, (int16x4_t)0x3C5670E20C8C7F62, 3);
  v40 = vqrdmulhq_lane_s16(v35, (int16x4_t)0xAECC62F2DAD87A7ELL, 1);
  v41 = vqrdmulhq_lane_s16(v35, (int16x4_t)0xAECC62F2DAD87A7ELL, 0);
  v42 = vqrdmulhq_lane_s16(v32, (int16x4_t)0x3C5670E20C8C7F62, 2);
  v43 = vqrdmulhq_lane_s16(v36, (int16x4_t)0xAECC62F2DAD87A7ELL, 2);
  v44 = vqrdmulhq_lane_s16(v31, (int16x4_t)0x3C5670E20C8C7F62, 0);
  v45 = vqrdmulhq_lane_s16(v33, (int16x4_t)0x18F8B8E46A6E7D8ALL, 3);
  v46 = vqrdmulhq_lane_s16(v34, (int16x4_t)0x18F8B8E46A6E7D8ALL, 2);
  v47 = vqrdmulhq_lane_s16(v34, (int16x4_t)0x18F8B8E46A6E7D8ALL, 1);
  v48 = vqrdmulhq_lane_s16(v33, (int16x4_t)0x18F8B8E46A6E7D8ALL, 0);
  v49 = vaddq_s16(v38, v37);
  v50 = vsubq_s16(v37, v38);
  v51 = vsubq_s16(v40, v39);
  v52 = vaddq_s16(v40, v39);
  v53 = vaddq_s16(v42, v41);
  v54 = vsubq_s16(v41, v42);
  v55 = vsubq_s16(v44, v43);
  v56 = vaddq_s16(v44, v43);
  v57 = vqrdmulhq_lane_s16(v29, (int16x4_t)0x30FC5A8276428000, 2);
  v58 = vqrdmulhq_lane_s16(v30, (int16x4_t)0x30FC5A8276428000, 3);
  v59 = vqrdmulhq_lane_s16(v30, (int16x4_t)0x30FC5A8276428000, 1);
  v60 = vaddq_s16(v46, v45);
  v61 = vsubq_s16(v45, v46);
  v62 = vsubq_s16(v48, v47);
  v63 = vaddq_s16(v48, v47);
  v64 = vdupq_n_s16(0x187Eu);
  v65 = vdupq_n_s16(0x3B21u);
  v66 = vmlsl_high_s16(vmull_high_s16(v55, v64), v50, v65);
  v67 = vmlal_s16(vmull_s16(*(int16x4_t *)v55.i8, *(int16x4_t *)v65.i8), *(int16x4_t *)v50.i8, *(int16x4_t *)v64.i8);
  v68 = vmlal_high_s16(vmull_high_s16(v55, v65), v50, v64);
  *(int16x4_t *)v50.i8 = vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v55.i8, *(int16x4_t *)v64.i8), *(int16x4_t *)v50.i8, *(int16x4_t *)v65.i8), 0xEuLL);
  *(int16x4_t *)v43.i8 = vrshrn_n_s32(v66, 0xEuLL);
  v55.i64[0] = 0x200000002000;
  v55.i64[1] = 0x200000002000;
  *(int16x4_t *)v55.i8 = vshrn_n_s32(vmlsl_s16(vmlsl_s16((int32x4_t)v55, *(int16x4_t *)v51.i8, *(int16x4_t *)v64.i8), *(int16x4_t *)v54.i8, *(int16x4_t *)v65.i8), 0xEuLL);
  v69 = vsub_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v55.i8);
  v70 = vrshrn_high_n_s32(*(int16x4_t *)v50.i8, v66, 0xEuLL);
  *(int16x4_t *)v66.i8 = vrshrn_n_s32(v67, 0xEuLL);
  *(int16x4_t *)v67.i8 = vrshrn_n_s32(v68, 0xEuLL);
  v71 = vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v54.i8, *(int16x4_t *)v64.i8), *(int16x4_t *)v51.i8, *(int16x4_t *)v65.i8), 0xEuLL);
  v72 = vsub_s16(*(int16x4_t *)v66.i8, v71);
  v73 = vrshrn_high_n_s32(*(int16x4_t *)v66.i8, v68, 0xEuLL);
  v74 = vmlsl_high_s16(vmull_high_s16(v54, v64), v51, v65);
  v75 = vrshrn_n_s32(v74, 0xEuLL);
  v76 = vrshrn_high_n_s32(v71, v74, 0xEuLL);
  v74.i64[0] = 0x200000002000;
  v74.i64[1] = 0x200000002000;
  v77 = vmlsl_high_s16(vmlsl_high_s16(v74, v51, v64), v54, v65);
  *(int16x4_t *)v51.i8 = vshrn_n_s32(v77, 0xEuLL);
  v78 = vshrn_high_n_s32(*(int16x4_t *)v55.i8, v77, 0xEuLL);
  v79 = vaddq_s16(v59, v57);
  v80 = vaddq_s16(v58, v57);
  v81 = vsubq_s16(v57, v58);
  v82 = vsubq_s16(v57, v59);
  v83 = vdupq_n_s16(0x2D41u);
  v84 = vmlal_s16(vmull_s16(*(int16x4_t *)v61.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v62.i8, *(int16x4_t *)v83.i8);
  v85 = vmlal_high_s16(vmull_high_s16(v61, v83), v62, v83);
  v86 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v62.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v61.i8, *(int16x4_t *)v83.i8), 0xEuLL), vmlsl_high_s16(vmull_high_s16(v62, v83), v61, v83), 0xEuLL);
  v87 = vrshrn_high_n_s32(vrshrn_n_s32(v84, 0xEuLL), v85, 0xEuLL);
  v88 = vaddq_s16(v52, v49);
  v89 = vaddq_s16(v78, v70);
  v90 = vsubq_s16(v49, v52);
  v91 = vsubq_s16(v56, v53);
  v92 = vaddq_s16(v76, v73);
  v93 = vaddq_s16(v56, v53);
  v94 = vaddq_s16(v79, v63);
  v95 = vaddq_s16(v87, v80);
  v96 = vaddq_s16(v86, v81);
  v97 = vaddq_s16(v82, v60);
  v98 = vsubq_s16(v82, v60);
  v99 = vsubq_s16(v81, v86);
  v100 = vsubq_s16(v80, v87);
  v101 = vsubq_s16(v79, v63);
  *(int16x4_t *)v82.i8 = vsub_s16(*(int16x4_t *)v67.i8, v75);
  *(int16x4_t *)v51.i8 = vsub_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v51.i8);
  v102 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(v72, *(int16x4_t *)v83.i8), v69, *(int16x4_t *)v83.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v51.i8, *(int16x4_t *)v83.i8), 0xEuLL);
  v103 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(v69, *(int16x4_t *)v83.i8), v72, *(int16x4_t *)v83.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v82.i8, *(int16x4_t *)v83.i8), 0xEuLL);
  v104 = vmlal_s16(vmull_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v91.i8, *(int16x4_t *)v83.i8);
  v105 = vmlal_high_s16(vmull_high_s16(v90, v83), v91, v83);
  v106 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v90.i8, *(int16x4_t *)v83.i8), 0xEuLL), vmlsl_high_s16(vmull_high_s16(v91, v83), v90, v83), 0xEuLL);
  v107 = vrshrn_high_n_s32(vrshrn_n_s32(v104, 0xEuLL), v105, 0xEuLL);
  v108 = vqaddq_s16(v94, v93);
  v109 = vqaddq_s16(v95, v92);
  v110 = vqaddq_s16(v96, v103);
  v111 = vqaddq_s16(v97, v107);
  v112 = vqaddq_s16(v98, v106);
  v113 = vqaddq_s16(v99, v102);
  v114 = vqaddq_s16(v100, v89);
  v115 = vqaddq_s16(v101, v88);
  v116 = vqsubq_s16(v101, v88);
  v117 = vqsubq_s16(v100, v89);
  v118 = vqsubq_s16(v99, v102);
  v119 = vqsubq_s16(v98, v106);
  v120 = vqsubq_s16(v97, v107);
  v121 = vqsubq_s16(v96, v103);
  v122 = vqsubq_s16(v95, v92);
  v123 = vqsubq_s16(v94, v93);
  if (a2)
  {
    *a2 = v108;
    a2[2] = v109;
    a2[4] = v110;
    a2[6] = v111;
    a2[8] = v112;
    a2[10] = v113;
    a2[12] = v114;
    a2[14] = v115;
    a2[16] = v116;
    a2[18] = v117;
    a2[20] = v118;
    a2[22] = v119;
    a2[24] = v120;
    a2[26] = v121;
    a2[28] = v122;
    a2[30] = v123;
  }
  else if (a5)
  {
    v124 = vrshrq_n_s16(v116, 6uLL);
    v125 = vrshrq_n_s16(v117, 6uLL);
    v126 = vrshrq_n_s16(v118, 6uLL);
    v127 = vrshrq_n_s16(v119, 6uLL);
    v128 = vrshrq_n_s16(v120, 6uLL);
    v129 = vrshrq_n_s16(v121, 6uLL);
    v130 = vrshrq_n_s16(v122, 6uLL);
    v131.i64[0] = 0xFF00FF00FF00FFLL;
    v131.i64[1] = 0xFF00FF00FF00FFLL;
    *a3 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v108, 6uLL), *a3), v131), 0);
    v132 = 2 * a4;
    *(int16x8_t *)((char *)a3 + v132) = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v109, 6uLL), *(int16x8_t *)((char *)a3 + v132)), v131), 0);
    v133 = (int16x8_t *)((char *)a3 + v132 + v132);
    *v133 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v110, 6uLL), *v133), v131), 0);
    v134 = (int16x8_t *)((char *)v133 + v132);
    *v134 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v111, 6uLL), *v134), v131), 0);
    v135 = (int16x8_t *)((char *)v134 + v132);
    *v135 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v112, 6uLL), *v135), v131), 0);
    v136 = (int16x8_t *)((char *)v135 + v132);
    *v136 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v113, 6uLL), *v136), v131), 0);
    v137 = (int16x8_t *)((char *)v136 + v132);
    *v137 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v114, 6uLL), *v137), v131), 0);
    v138 = (int16x8_t *)((char *)v137 + v132);
    *v138 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v115, 6uLL), *v138), v131), 0);
    v139 = (int16x8_t *)((char *)v138 + v132);
    *v139 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v124, *v139), v131), 0);
    v140 = (int16x8_t *)((char *)v139 + v132);
    *v140 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v125, *v140), v131), 0);
    v141 = (int16x8_t *)((char *)v140 + v132);
    *v141 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v126, *v141), v131), 0);
    v142 = (int16x8_t *)((char *)v141 + v132);
    *v142 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v127, *v142), v131), 0);
    v143 = (int16x8_t *)((char *)v142 + v132);
    *v143 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v128, *v143), v131), 0);
    v144 = (int16x8_t *)((char *)v143 + v132);
    *v144 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v129, *v144), v131), 0);
    v145 = (int16x8_t *)((char *)v144 + v132);
    *v145 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v130, *v145), v131), 0);
    *(int16x8_t *)((char *)v145 + v132) = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v123, 6uLL), *(int16x8_t *)((char *)v145 + v132)), v131), 0);
  }
  else
  {
    *(int8x8_t *)a3->i8 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a3->i8), v108, 6uLL));
    v146 = (uint8x8_t *)&a3->i8[a4];
    *v146 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v146), v109, 6uLL));
    v147 = (uint8x8_t *)((char *)v146 + a4);
    *v147 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v147), v110, 6uLL));
    v148 = (uint8x8_t *)((char *)v147 + a4);
    *v148 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v148), v111, 6uLL));
    v149 = (uint8x8_t *)((char *)v148 + a4);
    *v149 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v149), v112, 6uLL));
    v150 = (uint8x8_t *)((char *)v149 + a4);
    *v150 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v150), v113, 6uLL));
    v151 = (uint8x8_t *)((char *)v150 + a4);
    *v151 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v151), v114, 6uLL));
    v152 = (uint8x8_t *)((char *)v151 + a4);
    *v152 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v152), v115, 6uLL));
    v153 = (uint8x8_t *)((char *)v152 + a4);
    *v153 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v153), v116, 6uLL));
    v154 = (uint8x8_t *)((char *)v153 + a4);
    *v154 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v154), v117, 6uLL));
    v155 = (uint8x8_t *)((char *)v154 + a4);
    *v155 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v155), v118, 6uLL));
    v156 = (uint8x8_t *)((char *)v155 + a4);
    *v156 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v156), v119, 6uLL));
    v157 = (uint8x8_t *)((char *)v156 + a4);
    *v157 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v157), v120, 6uLL));
    v158 = (uint8x8_t *)((char *)v157 + a4);
    *v158 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v158), v121, 6uLL));
    v159 = (uint8x8_t *)((char *)v158 + a4);
    *v159 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v159), v122, 6uLL));
    *(int8x8_t *)((char *)v159 + a4) = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v159 + a4)), v123, 6uLL));
  }
  return result;
}

int16x4_t vpx_idct16x16_10_add_half1d_pass1(int32x4_t *a1, int16x4_t *a2)
{
  int16x4_t v2;
  int16x4_t v3;
  int16x4_t v4;
  int16x4_t v5;
  int32x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int32x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int32x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int32x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int16x4_t result;

  v2 = vmovn_s32(*a1);
  v3 = vmovn_s32(a1[4]);
  v4 = vmovn_s32(a1[8]);
  v5 = vmovn_s32(a1[12]);
  v6 = (int32x2_t)vtrn1_s16(v2, v3);
  v7 = (int32x2_t)vtrn2_s16(v2, v3);
  v8 = (int32x2_t)vtrn1_s16(v4, v5);
  v9 = (int32x2_t)vtrn2_s16(v4, v5);
  v10 = (int16x4_t)vzip1_s32(v6, v8);
  v11 = (int16x4_t)vzip2_s32(v6, v8);
  v12 = (int16x4_t)vzip1_s32(v7, v9);
  v13 = (int16x4_t)vzip2_s32(v7, v9);
  v14 = vqrdmulh_lane_s16(v12, (int16x4_t)0x3C5670E20C8C7F62, 1);
  v15 = vqrdmulh_lane_s16(v13, (int16x4_t)0xAECC62F2DAD87A7ELL, 1);
  v16 = vqrdmulh_lane_s16(v13, (int16x4_t)0xAECC62F2DAD87A7ELL, 0);
  v17 = vqrdmulh_lane_s16(v12, (int16x4_t)0x3C5670E20C8C7F62, 0);
  v18 = vqrdmulh_lane_s16(v11, (int16x4_t)0x18F8B8E46A6E7D8ALL, 3);
  v19 = vqrdmulh_lane_s16(v11, (int16x4_t)0x18F8B8E46A6E7D8ALL, 0);
  v20 = vqrdmulh_lane_s16(v10, (int16x4_t)0x30FC5A8276428000, 2);
  v21 = vdup_n_s16(0x187Eu);
  v22 = vdup_n_s16(0x3B21u);
  v23 = vrshrn_n_s32(vmlsl_s16(vmull_s16(v17, v21), v14, v22), 0xEuLL);
  v24 = vrshrn_n_s32(vmlal_s16(vmull_s16(v17, v22), v14, v21), 0xEuLL);
  v25 = vrshrn_n_s32(vmlsl_s16(vmull_s16(v16, v21), v15, v22), 0xEuLL);
  v26.i64[0] = 0x200000002000;
  v26.i64[1] = 0x200000002000;
  v27 = vshrn_n_s32(vmlsl_s16(vmlsl_s16(v26, v15, v21), v16, v22), 0xEuLL);
  v28 = vdup_n_s16(0x2D41u);
  *(int16x4_t *)v26.i8 = vrshrn_n_s32(vmlsl_s16(vmull_s16(v19, v28), v18, v28), 0xEuLL);
  v29 = vrshrn_n_s32(vmlal_s16(vmull_s16(v18, v28), v19, v28), 0xEuLL);
  v30 = vsub_s16(v23, v27);
  v31 = vsub_s16(v14, v15);
  v32 = vsub_s16(v17, v16);
  v33 = vsub_s16(v24, v25);
  v34 = vadd_s16(v25, v24);
  v35 = vadd_s16(v17, v16);
  v36 = vadd_s16(v20, v19);
  v37 = vadd_s16(v29, v20);
  v38 = vadd_s16(*(int16x4_t *)v26.i8, v20);
  v39 = vadd_s16(v20, v18);
  v40 = vsub_s16(v20, v18);
  *(int16x4_t *)v26.i8 = vsub_s16(v20, *(int16x4_t *)v26.i8);
  v41 = vmlal_s16(vmull_s16(v30, v28), v33, v28);
  v42 = vrshrn_n_s32(vmlsl_s16(vmull_s16(v33, v28), v30, v28), 0xEuLL);
  v43 = vrshrn_n_s32(v41, 0xEuLL);
  v44 = vmlsl_s16(vmull_s16(v32, v28), v31, v28);
  *a2 = vadd_s16(v36, v35);
  a2[1] = vadd_s16(v37, v34);
  v45 = vrshrn_n_s32(vmlal_s16(vmull_s16(v31, v28), v32, v28), 0xEuLL);
  a2[2] = vadd_s16(v43, v38);
  a2[3] = vadd_s16(v45, v39);
  v46 = vrshrn_n_s32(v44, 0xEuLL);
  a2[4] = vadd_s16(v46, v40);
  a2[5] = vadd_s16(v42, *(int16x4_t *)v26.i8);
  v47 = vadd_s16(v15, v14);
  v48 = vadd_s16(v27, v23);
  v49 = vsub_s16(v20, v29);
  v50 = vsub_s16(v20, v19);
  a2[6] = vadd_s16(v49, v48);
  a2[7] = vadd_s16(v50, v47);
  a2[8] = vsub_s16(v50, v47);
  a2[9] = vsub_s16(v49, v48);
  a2[10] = vsub_s16(*(int16x4_t *)v26.i8, v42);
  a2[11] = vsub_s16(v40, v46);
  a2[12] = vsub_s16(v39, v45);
  a2[13] = vsub_s16(v38, v43);
  result = vsub_s16(v36, v35);
  a2[14] = vsub_s16(v37, v34);
  a2[15] = result;
  return result;
}

uint64_t *vpx_idct16x16_10_add_half1d_pass2(uint64_t *result, int16x8_t *a2, int16x8_t *a3, int a4, int a5)
{
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int32x4_t v30;
  int16x4_t v31;
  int16x8_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x8_t v36;
  int32x4_t v37;
  int16x4_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x4_t v59;
  int32x4_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  uint64_t v91;
  int16x8_t *v92;
  int16x8_t *v93;
  int16x8_t *v94;
  int16x8_t *v95;
  int16x8_t *v96;
  int16x8_t *v97;
  int16x8_t *v98;
  int16x8_t *v99;
  int16x8_t *v100;
  int16x8_t *v101;
  int16x8_t *v102;
  int16x8_t *v103;
  int16x8_t *v104;
  uint8x8_t *v105;
  uint8x8_t *v106;
  uint8x8_t *v107;
  uint8x8_t *v108;
  uint8x8_t *v109;
  uint8x8_t *v110;
  uint8x8_t *v111;
  uint8x8_t *v112;
  uint8x8_t *v113;
  uint8x8_t *v114;
  uint8x8_t *v115;
  uint8x8_t *v116;
  uint8x8_t *v117;
  uint8x8_t *v118;

  v5.i64[0] = *result;
  v6.i64[0] = result[1];
  v7.i64[0] = result[2];
  v8.i64[0] = result[3];
  v5.i64[1] = result[4];
  v6.i64[1] = result[5];
  v7.i64[1] = result[6];
  v8.i64[1] = result[7];
  v9 = (int32x4_t)vtrn1q_s16(v5, v6);
  v10 = (int32x4_t)vtrn2q_s16(v5, v6);
  v11 = (int32x4_t)vtrn1q_s16(v7, v8);
  v12 = (int32x4_t)vtrn2q_s16(v7, v8);
  v13 = (int16x8_t)vtrn1q_s32(v9, v11);
  v14 = (int16x8_t)vtrn2q_s32(v9, v11);
  v15 = (int16x8_t)vtrn1q_s32(v10, v12);
  v16 = (int16x8_t)vtrn2q_s32(v10, v12);
  v17 = vqrdmulhq_lane_s16(v15, (int16x4_t)0x3C5670E20C8C7F62, 1);
  v18 = vqrdmulhq_lane_s16(v16, (int16x4_t)0xAECC62F2DAD87A7ELL, 1);
  v19 = vqrdmulhq_lane_s16(v16, (int16x4_t)0xAECC62F2DAD87A7ELL, 0);
  v20 = vqrdmulhq_lane_s16(v15, (int16x4_t)0x3C5670E20C8C7F62, 0);
  v21 = vqrdmulhq_lane_s16(v14, (int16x4_t)0x18F8B8E46A6E7D8ALL, 3);
  v22 = vqrdmulhq_lane_s16(v14, (int16x4_t)0x18F8B8E46A6E7D8ALL, 0);
  v23 = vqrdmulhq_lane_s16(v13, (int16x4_t)0x30FC5A8276428000, 2);
  v24 = vdupq_n_s16(0x187Eu);
  v25 = vdupq_n_s16(0x3B21u);
  v26 = vmlsl_high_s16(vmull_high_s16(v20, v24), v17, v25);
  v27 = vmlal_high_s16(vmull_high_s16(v20, v25), v17, v24);
  v28 = vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v17.i8, *(int16x4_t *)v25.i8), 0xEuLL);
  v29 = vrshrn_n_s32(v26, 0xEuLL);
  v30.i64[0] = 0x200000002000;
  v30.i64[1] = 0x200000002000;
  *(int16x4_t *)v30.i8 = vshrn_n_s32(vmlsl_s16(vmlsl_s16(v30, *(int16x4_t *)v18.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v25.i8), 0xEuLL);
  v31 = vsub_s16(v28, *(int16x4_t *)v30.i8);
  v32 = vrshrn_high_n_s32(v28, v26, 0xEuLL);
  *(int16x4_t *)v26.i8 = vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v25.i8), *(int16x4_t *)v17.i8, *(int16x4_t *)v24.i8), 0xEuLL);
  v33 = vrshrn_n_s32(v27, 0xEuLL);
  v34 = vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v19.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v18.i8, *(int16x4_t *)v25.i8), 0xEuLL);
  v35 = vsub_s16(*(int16x4_t *)v26.i8, v34);
  v36 = vrshrn_high_n_s32(*(int16x4_t *)v26.i8, v27, 0xEuLL);
  v37 = vmlsl_high_s16(vmull_high_s16(v19, v24), v18, v25);
  v38 = vrshrn_n_s32(v37, 0xEuLL);
  v39 = vrshrn_high_n_s32(v34, v37, 0xEuLL);
  v37.i64[0] = 0x200000002000;
  v37.i64[1] = 0x200000002000;
  v40 = vmlsl_high_s16(vmlsl_high_s16(v37, v18, v24), v19, v25);
  *(int16x4_t *)v24.i8 = vshrn_n_s32(v40, 0xEuLL);
  v41 = vshrn_high_n_s32(*(int16x4_t *)v30.i8, v40, 0xEuLL);
  v42 = vdupq_n_s16(0x2D41u);
  v43 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v42.i8), *(int16x4_t *)v21.i8, *(int16x4_t *)v42.i8), 0xEuLL), vmlsl_high_s16(vmull_high_s16(v22, v42), v21, v42), 0xEuLL);
  v44 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v42.i8), *(int16x4_t *)v22.i8, *(int16x4_t *)v42.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v21, v42), v22, v42), 0xEuLL);
  v45 = vaddq_s16(v18, v17);
  v46 = vaddq_s16(v41, v32);
  v47 = vsubq_s16(v17, v18);
  v48 = vsubq_s16(v20, v19);
  v49 = vaddq_s16(v39, v36);
  v50 = vaddq_s16(v20, v19);
  v51 = vaddq_s16(v23, v22);
  v52 = vaddq_s16(v44, v23);
  v53 = vaddq_s16(v43, v23);
  v54 = vaddq_s16(v23, v21);
  v55 = vsubq_s16(v23, v21);
  v56 = vsubq_s16(v23, v43);
  v57 = vsubq_s16(v23, v44);
  v58 = vsubq_s16(v23, v22);
  *(int16x4_t *)v36.i8 = vsub_s16(v33, v38);
  v59 = vsub_s16(v29, *(int16x4_t *)v24.i8);
  v60 = vmlal_s16(vmull_s16(v31, *(int16x4_t *)v42.i8), v35, *(int16x4_t *)v42.i8);
  v61 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(v35, *(int16x4_t *)v42.i8), v31, *(int16x4_t *)v42.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v42.i8), v59, *(int16x4_t *)v42.i8), 0xEuLL);
  v62 = vrshrn_high_n_s32(vrshrn_n_s32(v60, 0xEuLL), vmlal_s16(vmull_s16(v59, *(int16x4_t *)v42.i8), *(int16x4_t *)v36.i8, *(int16x4_t *)v42.i8), 0xEuLL);
  v63 = vmlal_s16(vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v42.i8), *(int16x4_t *)v48.i8, *(int16x4_t *)v42.i8);
  v64 = vmlal_high_s16(vmull_high_s16(v47, v42), v48, v42);
  v65 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v42.i8), *(int16x4_t *)v47.i8, *(int16x4_t *)v42.i8), 0xEuLL), vmlsl_high_s16(vmull_high_s16(v48, v42), v47, v42), 0xEuLL);
  v66 = vrshrn_high_n_s32(vrshrn_n_s32(v63, 0xEuLL), v64, 0xEuLL);
  v67 = vqaddq_s16(v51, v50);
  v68 = vqaddq_s16(v52, v49);
  v69 = vqaddq_s16(v53, v62);
  v70 = vqaddq_s16(v54, v66);
  v71 = vqaddq_s16(v55, v65);
  v72 = vqaddq_s16(v56, v61);
  v73 = vqaddq_s16(v57, v46);
  v74 = vqaddq_s16(v58, v45);
  v75 = vqsubq_s16(v58, v45);
  v76 = vqsubq_s16(v57, v46);
  v77 = vqsubq_s16(v56, v61);
  v78 = vqsubq_s16(v55, v65);
  v79 = vqsubq_s16(v54, v66);
  v80 = vqsubq_s16(v53, v62);
  v81 = vqsubq_s16(v52, v49);
  v82 = vqsubq_s16(v51, v50);
  if (a2)
  {
    *a2 = v67;
    a2[2] = v68;
    a2[4] = v69;
    a2[6] = v70;
    a2[8] = v71;
    a2[10] = v72;
    a2[12] = v73;
    a2[14] = v74;
    a2[16] = v75;
    a2[18] = v76;
    a2[20] = v77;
    a2[22] = v78;
    a2[24] = v79;
    a2[26] = v80;
    a2[28] = v81;
    a2[30] = v82;
  }
  else if (a5)
  {
    v83 = vrshrq_n_s16(v75, 6uLL);
    v84 = vrshrq_n_s16(v76, 6uLL);
    v85 = vrshrq_n_s16(v77, 6uLL);
    v86 = vrshrq_n_s16(v78, 6uLL);
    v87 = vrshrq_n_s16(v79, 6uLL);
    v88 = vrshrq_n_s16(v80, 6uLL);
    v89 = vrshrq_n_s16(v81, 6uLL);
    v90.i64[0] = 0xFF00FF00FF00FFLL;
    v90.i64[1] = 0xFF00FF00FF00FFLL;
    *a3 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v67, 6uLL), *a3), v90), 0);
    v91 = 2 * a4;
    *(int16x8_t *)((char *)a3 + v91) = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v68, 6uLL), *(int16x8_t *)((char *)a3 + v91)), v90), 0);
    v92 = (int16x8_t *)((char *)a3 + v91 + v91);
    *v92 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v69, 6uLL), *v92), v90), 0);
    v93 = (int16x8_t *)((char *)v92 + v91);
    *v93 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v70, 6uLL), *v93), v90), 0);
    v94 = (int16x8_t *)((char *)v93 + v91);
    *v94 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v71, 6uLL), *v94), v90), 0);
    v95 = (int16x8_t *)((char *)v94 + v91);
    *v95 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v72, 6uLL), *v95), v90), 0);
    v96 = (int16x8_t *)((char *)v95 + v91);
    *v96 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v73, 6uLL), *v96), v90), 0);
    v97 = (int16x8_t *)((char *)v96 + v91);
    *v97 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v74, 6uLL), *v97), v90), 0);
    v98 = (int16x8_t *)((char *)v97 + v91);
    *v98 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v83, *v98), v90), 0);
    v99 = (int16x8_t *)((char *)v98 + v91);
    *v99 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v84, *v99), v90), 0);
    v100 = (int16x8_t *)((char *)v99 + v91);
    *v100 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v85, *v100), v90), 0);
    v101 = (int16x8_t *)((char *)v100 + v91);
    *v101 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v86, *v101), v90), 0);
    v102 = (int16x8_t *)((char *)v101 + v91);
    *v102 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v87, *v102), v90), 0);
    v103 = (int16x8_t *)((char *)v102 + v91);
    *v103 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v88, *v103), v90), 0);
    v104 = (int16x8_t *)((char *)v103 + v91);
    *v104 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v89, *v104), v90), 0);
    *(int16x8_t *)((char *)v104 + v91) = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v82, 6uLL), *(int16x8_t *)((char *)v104 + v91)), v90), 0);
  }
  else
  {
    *(int8x8_t *)a3->i8 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a3->i8), v67, 6uLL));
    v105 = (uint8x8_t *)&a3->i8[a4];
    *v105 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v105), v68, 6uLL));
    v106 = (uint8x8_t *)((char *)v105 + a4);
    *v106 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v106), v69, 6uLL));
    v107 = (uint8x8_t *)((char *)v106 + a4);
    *v107 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v107), v70, 6uLL));
    v108 = (uint8x8_t *)((char *)v107 + a4);
    *v108 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v108), v71, 6uLL));
    v109 = (uint8x8_t *)((char *)v108 + a4);
    *v109 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v109), v72, 6uLL));
    v110 = (uint8x8_t *)((char *)v109 + a4);
    *v110 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v110), v73, 6uLL));
    v111 = (uint8x8_t *)((char *)v110 + a4);
    *v111 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v111), v74, 6uLL));
    v112 = (uint8x8_t *)((char *)v111 + a4);
    *v112 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v112), v75, 6uLL));
    v113 = (uint8x8_t *)((char *)v112 + a4);
    *v113 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v113), v76, 6uLL));
    v114 = (uint8x8_t *)((char *)v113 + a4);
    *v114 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v114), v77, 6uLL));
    v115 = (uint8x8_t *)((char *)v114 + a4);
    *v115 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v115), v78, 6uLL));
    v116 = (uint8x8_t *)((char *)v115 + a4);
    *v116 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v116), v79, 6uLL));
    v117 = (uint8x8_t *)((char *)v116 + a4);
    *v117 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v117), v80, 6uLL));
    v118 = (uint8x8_t *)((char *)v117 + a4);
    *v118 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v118), v81, 6uLL));
    *(int8x8_t *)((char *)v118 + a4) = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v118 + a4)), v82, 6uLL));
  }
  return result;
}

uint64_t *vpx_idct16x16_10_add_neon(int32x4_t *a1, uint64_t a2, int a3)
{
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int32x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int32x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int32x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  uint64_t v55[8];
  uint64_t v56[9];

  v56[8] = *MEMORY[0x24BDAC8D0];
  v5 = vmovn_s32(*a1);
  v6 = vmovn_s32(a1[4]);
  v7 = vmovn_s32(a1[8]);
  v8 = vmovn_s32(a1[12]);
  v9 = (int32x2_t)vtrn1_s16(v5, v6);
  v10 = (int32x2_t)vtrn2_s16(v5, v6);
  v11 = (int32x2_t)vtrn1_s16(v7, v8);
  v12 = (int32x2_t)vtrn2_s16(v7, v8);
  v13 = (int16x4_t)vzip1_s32(v9, v11);
  v14 = (int16x4_t)vzip2_s32(v9, v11);
  v15 = (int16x4_t)vzip1_s32(v10, v12);
  v16 = (int16x4_t)vzip2_s32(v10, v12);
  v17 = vqrdmulh_lane_s16(v15, (int16x4_t)0x3C5670E20C8C7F62, 1);
  v18 = vqrdmulh_lane_s16(v16, (int16x4_t)0xAECC62F2DAD87A7ELL, 1);
  v19 = vqrdmulh_lane_s16(v16, (int16x4_t)0xAECC62F2DAD87A7ELL, 0);
  v20 = vqrdmulh_lane_s16(v15, (int16x4_t)0x3C5670E20C8C7F62, 0);
  v21 = vqrdmulh_lane_s16(v14, (int16x4_t)0x18F8B8E46A6E7D8ALL, 3);
  v22 = vqrdmulh_lane_s16(v14, (int16x4_t)0x18F8B8E46A6E7D8ALL, 0);
  v23 = vqrdmulh_lane_s16(v13, (int16x4_t)0x30FC5A8276428000, 2);
  v24 = vdup_n_s16(0x187Eu);
  v25 = vdup_n_s16(0x3B21u);
  v26 = vrshrn_n_s32(vmlsl_s16(vmull_s16(v20, v24), v17, v25), 0xEuLL);
  v27 = vrshrn_n_s32(vmlal_s16(vmull_s16(v20, v25), v17, v24), 0xEuLL);
  v28 = vrshrn_n_s32(vmlsl_s16(vmull_s16(v19, v24), v18, v25), 0xEuLL);
  v29.i64[0] = 0x200000002000;
  v29.i64[1] = 0x200000002000;
  v30 = vshrn_n_s32(vmlsl_s16(vmlsl_s16(v29, v18, v24), v19, v25), 0xEuLL);
  v31 = vdup_n_s16(0x2D41u);
  *(int16x4_t *)v29.i8 = vrshrn_n_s32(vmlsl_s16(vmull_s16(v22, v31), v21, v31), 0xEuLL);
  v32 = vrshrn_n_s32(vmlal_s16(vmull_s16(v21, v31), v22, v31), 0xEuLL);
  v33 = vsub_s16(v26, v30);
  v34 = vsub_s16(v17, v18);
  v35 = vsub_s16(v20, v19);
  v36 = vsub_s16(v27, v28);
  v37 = vadd_s16(v28, v27);
  v38 = vadd_s16(v20, v19);
  v39 = vadd_s16(v23, v22);
  v40 = vadd_s16(v32, v23);
  v41 = vadd_s16(*(int16x4_t *)v29.i8, v23);
  v42 = vadd_s16(v23, v21);
  v43 = vsub_s16(v23, v21);
  *(int16x4_t *)v29.i8 = vsub_s16(v23, *(int16x4_t *)v29.i8);
  v44 = vmlal_s16(vmull_s16(v33, v31), v36, v31);
  v45 = vrshrn_n_s32(vmlsl_s16(vmull_s16(v36, v31), v33, v31), 0xEuLL);
  v46 = vrshrn_n_s32(v44, 0xEuLL);
  v47 = vmlsl_s16(vmull_s16(v35, v31), v34, v31);
  v55[0] = (uint64_t)vadd_s16(v39, v38);
  v55[1] = (uint64_t)vadd_s16(v40, v37);
  v48 = vrshrn_n_s32(vmlal_s16(vmull_s16(v34, v31), v35, v31), 0xEuLL);
  v55[2] = (uint64_t)vadd_s16(v46, v41);
  v55[3] = (uint64_t)vadd_s16(v48, v42);
  v49 = vrshrn_n_s32(v47, 0xEuLL);
  v55[4] = (uint64_t)vadd_s16(v49, v43);
  v55[5] = (uint64_t)vadd_s16(v45, *(int16x4_t *)v29.i8);
  v50 = vadd_s16(v18, v17);
  v51 = vadd_s16(v30, v26);
  v52 = vsub_s16(v23, v32);
  v53 = vsub_s16(v23, v22);
  v55[6] = (uint64_t)vadd_s16(v52, v51);
  v55[7] = (uint64_t)vadd_s16(v53, v50);
  v56[0] = (uint64_t)vsub_s16(v53, v50);
  v56[1] = (uint64_t)vsub_s16(v52, v51);
  v56[2] = (uint64_t)vsub_s16(*(int16x4_t *)v29.i8, v45);
  v56[3] = (uint64_t)vsub_s16(v43, v49);
  v56[4] = (uint64_t)vsub_s16(v42, v48);
  v56[5] = (uint64_t)vsub_s16(v41, v46);
  v56[6] = (uint64_t)vsub_s16(v40, v37);
  v56[7] = (uint64_t)vsub_s16(v39, v38);
  vpx_idct16x16_10_add_half1d_pass2(v55, 0, (int16x8_t *)a2, a3, 0);
  return vpx_idct16x16_10_add_half1d_pass2(v56, 0, (int16x8_t *)(a2 + 8), a3, 0);
}

int16x8_t vpx_idct32_12_neon(int16x8_t *a1, int16x8_t *a2)
{
  int16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int16x8_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int32x4_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int32x4_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int32x4_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t result;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int16x8_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int16x8_t v180;
  int32x4_t v181;
  int16x8_t v182;
  int32x4_t v183;
  int16x8_t v184;
  int32x4_t v185;
  int16x8_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int16x8_t v189;
  int32x4_t v190;
  int16x8_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int32x4_t v224;

  v2 = vuzp1q_s16(*a1, a1[1]);
  v3 = vuzp1q_s16(a1[8], a1[9]);
  v4 = vuzp1q_s16(a1[16], a1[17]);
  v5 = vuzp1q_s16(a1[24], a1[25]);
  v6 = vuzp1q_s16(a1[32], a1[33]);
  v7 = vuzp1q_s16(a1[40], a1[41]);
  v8 = vuzp1q_s16(a1[48], a1[49]);
  v9 = vuzp1q_s16(a1[56], a1[57]);
  v10 = (int32x4_t)vtrn1q_s16(v2, v3);
  v11 = (int32x4_t)vtrn2q_s16(v2, v3);
  v12 = (int32x4_t)vtrn1q_s16(v4, v5);
  v13 = (int32x4_t)vtrn2q_s16(v4, v5);
  v14 = (int32x4_t)vtrn1q_s16(v6, v7);
  v15 = (int32x4_t)vtrn2q_s16(v6, v7);
  v16 = (int32x4_t)vtrn1q_s16(v8, v9);
  v17 = (int32x4_t)vtrn2q_s16(v8, v9);
  v18 = (int64x2_t)vtrn1q_s32(v10, v12);
  v19 = (int64x2_t)vtrn2q_s32(v10, v12);
  v20 = (int64x2_t)vtrn1q_s32(v11, v13);
  v21 = (int64x2_t)vtrn2q_s32(v11, v13);
  v22 = (int64x2_t)vtrn1q_s32(v14, v16);
  v23 = (int64x2_t)vtrn2q_s32(v14, v16);
  v24 = (int64x2_t)vtrn1q_s32(v15, v17);
  v25 = (int64x2_t)vtrn2q_s32(v15, v17);
  v26 = (int16x8_t)vzip1q_s64(v18, v22);
  v27 = (int16x8_t)vzip2q_s64(v18, v22);
  v28 = (int16x8_t)vzip1q_s64(v20, v24);
  v29 = (int16x8_t)vzip2q_s64(v20, v24);
  v30 = (int16x8_t)vzip1q_s64(v19, v23);
  v31 = (int16x8_t)vzip2q_s64(v19, v23);
  v32 = (int16x8_t)vzip1q_s64(v21, v25);
  v33 = (int16x8_t)vzip2q_s64(v21, v25);
  v34 = vuzp1q_s16(a1[2], a1[34]);
  v35 = vuzp1q_s16(a1[10], a1[42]);
  v36 = vuzp1q_s16(a1[18], a1[50]);
  v37 = vuzp1q_s16(a1[26], a1[58]);
  v38 = (int32x4_t)vtrn1q_s16(v34, v35);
  v39 = (int32x4_t)vtrn2q_s16(v34, v35);
  v40 = (int32x4_t)vtrn1q_s16(v36, v37);
  v41 = (int32x4_t)vtrn2q_s16(v36, v37);
  v42 = (int16x8_t)vtrn1q_s32(v38, v40);
  v43 = (int16x8_t)vtrn2q_s32(v38, v40);
  v44 = (int16x8_t)vtrn1q_s32(v39, v41);
  v45 = (int16x8_t)vtrn2q_s32(v39, v41);
  v46 = vqrdmulhq_s16(v28, vdupq_n_s16(0x648u));
  v47 = vqrdmulhq_s16(v28, vdupq_n_s16(0x7FD8u));
  v48 = vqrdmulhq_s16(v44, vdupq_n_s16(0x36BAu));
  v49 = vqrdmulhq_s16(v44, vdupq_n_s16(0x73B6u));
  v50 = vqrdmulhq_s16(v33, vdupq_n_s16(0xD4E0u));
  v51 = vqrdmulhq_s16(v33, vdupq_n_s16(0x7884u));
  v52 = vqrdmulhq_s16(v29, vdupq_n_s16(0x1F1Au));
  v53 = vqrdmulhq_s16(v29, vdupq_n_s16(0x7C2Au));
  v54 = vqrdmulhq_s16(v45, vdupq_n_s16(0xBE32u));
  v55 = vqrdmulhq_s16(v45, vdupq_n_s16(0x6DCAu));
  v56 = vqrdmulhq_s16(v32, vdupq_n_s16(0xED38u));
  v57 = vqrdmulhq_s16(v32, vdupq_n_s16(0x7E9Eu));
  v211 = vqrdmulhq_s16(v30, vdupq_n_s16(0xC8Cu));
  v213 = vqrdmulhq_s16(v30, vdupq_n_s16(0x7F62u));
  v58 = vqrdmulhq_s16(v43, vdupq_n_s16(0x3C56u));
  v59 = vqrdmulhq_s16(v43, vdupq_n_s16(0x70E2u));
  v60 = vqrdmulhq_s16(v31, vdupq_n_s16(0xDAD8u));
  v61 = vqrdmulhq_s16(v31, vdupq_n_s16(0x7A7Eu));
  v62 = vsubq_s16(v50, v48);
  v222 = vaddq_s16(v50, v48);
  v63 = vaddq_s16(v54, v52);
  v64 = vsubq_s16(v52, v54);
  v65 = vsubq_s16(v53, v55);
  v201 = vaddq_s16(v55, v53);
  v203 = v47;
  v66 = vsubq_s16(v51, v49);
  v209 = vqrdmulhq_s16(v27, vdupq_n_s16(0x18F8u));
  v205 = vaddq_s16(v51, v49);
  v207 = vqrdmulhq_s16(v27, vdupq_n_s16(0x7D8Au));
  v67 = vsubq_s16(v60, v58);
  v215 = vaddq_s16(v60, v58);
  v217 = vaddq_s16(v61, v59);
  v68 = vdupq_n_s16(0xC13Bu);
  v69 = vdupq_n_s16(0xC7Cu);
  v70 = vsubq_s16(v61, v59);
  v220 = v46;
  v71 = vmlal_s16(vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v69.i8), *(int16x4_t *)v46.i8, *(int16x4_t *)v68.i8);
  v72 = vmlal_high_s16(vmull_high_s16(v47, v69), v46, v68);
  v73 = vdupq_n_s16(0x3EC5u);
  v74 = vmlal_s16(vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v73.i8), *(int16x4_t *)v46.i8, *(int16x4_t *)v69.i8);
  v75 = vmlal_high_s16(vmull_high_s16(v47, v73), v46, v69);
  v76 = vdupq_n_s16(0xF384u);
  v77 = vmlal_s16(vmull_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v68.i8), *(int16x4_t *)v62.i8, *(int16x4_t *)v76.i8);
  v78 = vmlal_high_s16(vmull_high_s16(v66, v68), v62, v76);
  v79 = vmlal_s16(vmull_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v69.i8), *(int16x4_t *)v62.i8, *(int16x4_t *)v68.i8);
  v80 = vmlal_high_s16(vmull_high_s16(v66, v69), v62, v68);
  v81 = vdupq_n_s16(0xDC72u);
  v82 = vdupq_n_s16(0x3537u);
  v83 = vmlal_s16(vmull_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v82.i8), *(int16x4_t *)v64.i8, *(int16x4_t *)v81.i8);
  v84 = vdupq_n_s16(0x238Eu);
  v85 = vmull_high_s16(v65, v84);
  v86 = vmlal_high_s16(vmull_high_s16(v65, v82), v64, v81);
  v87 = vmlal_s16(vmull_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v84.i8), *(int16x4_t *)v64.i8, *(int16x4_t *)v82.i8);
  v88 = vdupq_n_s16(0xCAC9u);
  v89 = vmlal_high_s16(v85, v64, v82);
  v90 = vmlal_s16(vmull_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v81.i8), *(int16x4_t *)v56.i8, *(int16x4_t *)v88.i8);
  v91 = vmlal_high_s16(vmull_high_s16(v57, v81), v56, v88);
  v92 = vmlal_s16(vmull_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v82.i8), *(int16x4_t *)v56.i8, *(int16x4_t *)v81.i8);
  v170 = v57;
  v173 = v56;
  v93 = vmlal_high_s16(vmull_high_s16(v57, v82), v56, v81);
  v94 = v56;
  v197 = vqrdmulhq_s16(v42, vdupq_n_s16(0x30FCu));
  v199 = vqrdmulhq_s16(v26, vdupq_n_s16(0x5A82u));
  v195 = vqrdmulhq_s16(v42, vdupq_n_s16(0x7642u));
  v95 = vdupq_n_s16(0xC4DFu);
  v96 = vdupq_n_s16(0xE782u);
  v187 = vmlal_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v67.i8, *(int16x4_t *)v96.i8);
  v190 = vmlal_high_s16(vmull_high_s16(v70, v95), v67, v96);
  v97 = vdupq_n_s16(0x187Eu);
  v188 = vmlal_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v67.i8, *(int16x4_t *)v95.i8);
  v98 = vmlal_high_s16(vmull_high_s16(v70, v97), v67, v95);
  *(int16x4_t *)v84.i8 = vrshrn_n_s32(v71, 0xEuLL);
  *(int16x4_t *)v47.i8 = vrshrn_n_s32(v77, 0xEuLL);
  *(int16x4_t *)v77.i8 = vsub_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v47.i8);
  v99 = vrshrn_high_n_s32(*(int16x4_t *)v84.i8, v72, 0xEuLL);
  *(int16x4_t *)v67.i8 = vsub_s16(vrshrn_n_s32(v72, 0xEuLL), vrshrn_n_s32(v78, 0xEuLL));
  *(int16x4_t *)v56.i8 = vrshrn_n_s32(v74, 0xEuLL);
  *(int16x4_t *)v69.i8 = vrshrn_n_s32(v79, 0xEuLL);
  *(int16x4_t *)v74.i8 = vsub_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v69.i8);
  v100 = vrshrn_high_n_s32(*(int16x4_t *)v56.i8, v75, 0xEuLL);
  v101 = vrshrn_high_n_s32(*(int16x4_t *)v69.i8, v80, 0xEuLL);
  *(int16x4_t *)v72.i8 = vsub_s16(vrshrn_n_s32(v75, 0xEuLL), vrshrn_n_s32(v80, 0xEuLL));
  v193 = vmlal_s16(vmull_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v77.i8, *(int16x4_t *)v95.i8);
  v102 = vdupq_n_s16(0x3B21u);
  v183 = vmlal_s16(vmull_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v77.i8, *(int16x4_t *)v97.i8);
  v192 = vmlal_s16(vmull_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v67.i8, *(int16x4_t *)v95.i8);
  v185 = vmlal_s16(vmull_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v67.i8, *(int16x4_t *)v97.i8);
  v103 = vsubq_s16(v94, v63);
  v104 = vsubq_s16(v57, v201);
  v181 = vmlal_s16(vmull_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v103.i8, *(int16x4_t *)v96.i8);
  v224 = vmlal_high_s16(vmull_high_s16(v104, v95), v103, v96);
  v105 = vmlal_s16(vmull_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v103.i8, *(int16x4_t *)v95.i8);
  v176 = vmlal_high_s16(vmull_high_s16(v104, v97), v103, v95);
  *(int16x4_t *)v103.i8 = vrshrn_n_s32(v83, 0xEuLL);
  *(int16x4_t *)v80.i8 = vrshrn_n_s32(v90, 0xEuLL);
  *(int16x4_t *)v90.i8 = vsub_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v103.i8);
  v106 = vrshrn_high_n_s32(*(int16x4_t *)v103.i8, v86, 0xEuLL);
  v107 = vrshrn_high_n_s32(*(int16x4_t *)v80.i8, v91, 0xEuLL);
  *(int16x4_t *)v88.i8 = vsub_s16(vrshrn_n_s32(v91, 0xEuLL), vrshrn_n_s32(v86, 0xEuLL));
  *(int16x4_t *)v87.i8 = vrshrn_n_s32(v87, 0xEuLL);
  *(int16x4_t *)v86.i8 = vrshrn_n_s32(v92, 0xEuLL);
  *(int16x4_t *)v91.i8 = vsub_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v87.i8);
  v108 = vrshrn_high_n_s32(*(int16x4_t *)v86.i8, v93, 0xEuLL);
  *(int16x4_t *)v93.i8 = vsub_s16(vrshrn_n_s32(v93, 0xEuLL), vrshrn_n_s32(v89, 0xEuLL));
  v179 = vmlal_s16(vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v90.i8, *(int16x4_t *)v96.i8);
  v178 = vmlal_s16(vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v88.i8, *(int16x4_t *)v96.i8);
  v109 = vmlal_s16(vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v90.i8, *(int16x4_t *)v95.i8);
  v110 = vmlal_s16(vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v88.i8, *(int16x4_t *)v95.i8);
  v111 = vmlal_s16(vmull_s16(*(int16x4_t *)v213.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v211.i8, *(int16x4_t *)v95.i8);
  v112 = vmlal_high_s16(vmull_high_s16(v213, v97), v211, v95);
  v113 = vsubq_s16(v220, v222);
  v114 = vsubq_s16(v203, v205);
  v175 = vmlal_s16(vmull_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v113.i8, *(int16x4_t *)v95.i8);
  v115 = vmlal_high_s16(vmull_high_s16(v114, v97), v113, v95);
  v116 = vmlal_s16(vmull_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v113.i8, *(int16x4_t *)v97.i8);
  v117 = vmlal_high_s16(vmull_high_s16(v114, v102), v113, v97);
  v118 = vmlal_s16(vmull_s16(*(int16x4_t *)v213.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v211.i8, *(int16x4_t *)v97.i8);
  v119 = vmlal_high_s16(vmull_high_s16(v213, v102), v211, v97);
  v120 = vaddq_s16(v222, v220);
  v221 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v47.i8, v78, 0xEuLL), v99);
  v223 = v120;
  v219 = vaddq_s16(v107, v106);
  v121 = vaddq_s16(v173, v63);
  v122 = vaddq_s16(v170, v201);
  v171 = vaddq_s16(v108, vrshrn_high_n_s32(*(int16x4_t *)v87.i8, v89, 0xEuLL));
  v174 = v121;
  v123 = vaddq_s16(v101, v100);
  v124 = vaddq_s16(v205, v203);
  v125 = vaddq_s16(v197, v199);
  v126 = vsubq_s16(v199, v197);
  v127 = vaddq_s16(v195, v199);
  v128 = vsubq_s16(v199, v195);
  v129 = vdupq_n_s32(0x2D41u);
  v130 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v207.i8, *(int16x4_t *)v209.i8), v129), 0xEuLL), vmulq_s32(vsubl_high_s16(v207, v209), v129), 0xEuLL);
  v131 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v207.i8, *(int16x4_t *)v209.i8), v129), 0xEuLL), vmulq_s32(vaddl_high_s16(v207, v209), v129), 0xEuLL);
  *(int16x4_t *)v111.i8 = vrshrn_n_s32(v111, 0xEuLL);
  *(int16x4_t *)v121.i8 = vrshrn_n_s32(v187, 0xEuLL);
  *(int16x4_t *)v104.i8 = vsub_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v121.i8);
  v132 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v121.i8, v190, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v111.i8, v112, 0xEuLL));
  v133 = vaddq_s16(v215, v211);
  v134 = vsubq_s16(v211, v215);
  *(int16x4_t *)v77.i8 = vrshrn_n_s32(v118, 0xEuLL);
  *(int16x4_t *)v107.i8 = vrshrn_n_s32(v188, 0xEuLL);
  *(int16x4_t *)v111.i8 = vsub_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v107.i8);
  v135 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v107.i8, v98, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v77.i8, v119, 0xEuLL));
  v136 = vsubq_s16(v213, v217);
  v206 = vaddq_s16(v217, v213);
  v216 = vaddq_s16(v128, v209);
  v137 = vsubq_s16(v128, v209);
  v212 = v135;
  v214 = vaddq_s16(v130, v126);
  v138 = vsubq_s16(v126, v130);
  v210 = vaddq_s16(v131, v125);
  v139 = vsubq_s16(v125, v131);
  v204 = vaddq_s16(v127, v207);
  v140 = vsubq_s16(v127, v207);
  *(int16x4_t *)v119.i8 = vsub_s16(vrshrn_n_s32(v119, 0xEuLL), vrshrn_n_s32(v98, 0xEuLL));
  *(int16x4_t *)v135.i8 = vsub_s16(vrshrn_n_s32(v112, 0xEuLL), vrshrn_n_s32(v190, 0xEuLL));
  v141 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v104.i8), v129), 0xEuLL), vmulq_s32(vsubl_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v135.i8), v129), 0xEuLL);
  v208 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v104.i8), v129), 0xEuLL), vmulq_s32(vaddl_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v135.i8), v129), 0xEuLL);
  v142 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v136.i8, *(int16x4_t *)v134.i8), v129), 0xEuLL), vmulq_s32(vsubl_high_s16(v136, v134), v129), 0xEuLL);
  v202 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v136.i8, *(int16x4_t *)v134.i8), v129), 0xEuLL), vmulq_s32(vaddl_high_s16(v136, v134), v129), 0xEuLL);
  *(int16x4_t *)v134.i8 = vrshrn_n_s32(v116, 0xEuLL);
  *(int16x4_t *)v111.i8 = vrshrn_n_s32(v105, 0xEuLL);
  *(int16x4_t *)v99.i8 = vsub_s16(*(int16x4_t *)v134.i8, *(int16x4_t *)v111.i8);
  v143 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v111.i8, v176, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v134.i8, v117, 0xEuLL));
  *(int16x4_t *)v134.i8 = vrshrn_n_s32(v183, 0xEuLL);
  *(int16x4_t *)v111.i8 = vrshrn_n_s32(v109, 0xEuLL);
  *(int16x4_t *)v136.i8 = vsub_s16(*(int16x4_t *)v134.i8, *(int16x4_t *)v111.i8);
  v218 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v111.i8, v110, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v134.i8, v185, 0xEuLL));
  v144 = vsubq_s16(v123, v171);
  v145 = vsubq_s16(v124, v122);
  v169 = vaddq_s16(v171, v123);
  v172 = vaddq_s16(v122, v124);
  v184 = vaddq_s16(v139, v132);
  v189 = vaddq_s16(v140, v133);
  v191 = vsubq_s16(v139, v132);
  v146 = vaddq_s16(v141, v138);
  v200 = vsubq_s16(v138, v141);
  v147 = vaddq_s16(v142, v137);
  v196 = vsubq_s16(v140, v133);
  v198 = vsubq_s16(v137, v142);
  *(int16x4_t *)v142.i8 = vsub_s16(vrshrn_n_s32(v117, 0xEuLL), vrshrn_n_s32(v176, 0xEuLL));
  *(int16x4_t *)v104.i8 = vrshrn_n_s32(v175, 0xEuLL);
  v148 = vrshrn_high_n_s32(*(int16x4_t *)v104.i8, v115, 0xEuLL);
  *(int16x4_t *)v133.i8 = vsub_s16(vrshrn_n_s32(v115, 0xEuLL), vrshrn_n_s32(v224, 0xEuLL));
  *(int16x4_t *)v140.i8 = vrshrn_n_s32(v181, 0xEuLL);
  *(int16x4_t *)v105.i8 = vsub_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v140.i8);
  v149 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v105.i8), v129), 0xEuLL), vmulq_s32(vsubl_s16(*(int16x4_t *)v142.i8, *(int16x4_t *)v133.i8), v129), 0xEuLL);
  v177 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v105.i8), v129), 0xEuLL), vmulq_s32(vaddl_s16(*(int16x4_t *)v142.i8, *(int16x4_t *)v133.i8), v129), 0xEuLL);
  *(int16x4_t *)v99.i8 = vsub_s16(vrshrn_n_s32(v185, 0xEuLL), vrshrn_n_s32(v110, 0xEuLL));
  *(int16x4_t *)v133.i8 = vsub_s16(vrshrn_n_s32(v192, 0xEuLL), vrshrn_n_s32(v178, 0xEuLL));
  *(int16x4_t *)v105.i8 = vrshrn_n_s32(v193, 0xEuLL);
  *(int16x4_t *)v110.i8 = vrshrn_n_s32(v179, 0xEuLL);
  *(int16x4_t *)v115.i8 = vsub_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v110.i8);
  v150 = vsubl_s16(*(int16x4_t *)v136.i8, *(int16x4_t *)v115.i8);
  v151 = vsubl_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v133.i8);
  v152 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v136.i8, *(int16x4_t *)v115.i8), v129), 0xEuLL), vmulq_s32(vaddl_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v133.i8), v129), 0xEuLL);
  v153 = vsubq_s16(v221, v219);
  v154 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v144.i8, *(int16x4_t *)v153.i8), v129), 0xEuLL), vmulq_s32(vsubl_high_s16(v144, v153), v129), 0xEuLL);
  v155 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v144.i8, *(int16x4_t *)v153.i8), v129), 0xEuLL), vmulq_s32(vaddl_high_s16(v144, v153), v129), 0xEuLL);
  v156 = vsubq_s16(v223, v174);
  v157 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v145.i8, *(int16x4_t *)v156.i8), v129), 0xEuLL), vmulq_s32(vsubl_high_s16(v145, v156), v129), 0xEuLL);
  v194 = vaddq_s16(v204, v206);
  *a2 = vaddq_s16(v194, v172);
  v186 = vaddq_s16(v210, v212);
  a2[2] = vaddq_s16(v186, v169);
  v182 = vaddq_s16(v208, v214);
  a2[4] = vaddq_s16(v182, v218);
  v180 = vaddq_s16(v202, v216);
  a2[6] = vaddq_s16(v180, v143);
  a2[8] = vaddq_s16(v177, v147);
  a2[10] = vaddq_s16(v152, v146);
  v158 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v145.i8, *(int16x4_t *)v156.i8), v129), 0xEuLL), vmulq_s32(vaddl_high_s16(v145, v156), v129), 0xEuLL);
  a2[12] = vaddq_s16(v155, v184);
  a2[14] = vaddq_s16(v158, v189);
  a2[16] = vaddq_s16(v157, v196);
  a2[18] = vaddq_s16(v154, v191);
  v159 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(v150, v129), 0xEuLL), vmulq_s32(v151, v129), 0xEuLL);
  a2[20] = vaddq_s16(v159, v200);
  a2[22] = vaddq_s16(v149, v198);
  v160 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v140.i8, v224, 0xEuLL), v148);
  v161 = vsubq_s16(v216, v202);
  a2[24] = vaddq_s16(v161, v160);
  v162 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v110.i8, v178, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v105.i8, v192, 0xEuLL));
  v163 = vsubq_s16(v214, v208);
  a2[26] = vaddq_s16(v163, v162);
  v164 = vaddq_s16(v219, v221);
  v165 = vsubq_s16(v210, v212);
  a2[28] = vaddq_s16(v165, v164);
  v166 = vaddq_s16(v174, v223);
  v167 = vsubq_s16(v204, v206);
  a2[30] = vaddq_s16(v167, v166);
  a2[32] = vsubq_s16(v167, v166);
  a2[34] = vsubq_s16(v165, v164);
  a2[36] = vsubq_s16(v163, v162);
  a2[38] = vsubq_s16(v161, v160);
  a2[40] = vsubq_s16(v198, v149);
  a2[42] = vsubq_s16(v200, v159);
  a2[44] = vsubq_s16(v191, v154);
  a2[46] = vsubq_s16(v196, v157);
  a2[48] = vsubq_s16(v189, v158);
  a2[50] = vsubq_s16(v184, v155);
  a2[52] = vsubq_s16(v146, v152);
  a2[54] = vsubq_s16(v147, v177);
  a2[56] = vsubq_s16(v180, v143);
  a2[58] = vsubq_s16(v182, v218);
  a2[60] = vsubq_s16(v186, v169);
  result = vsubq_s16(v194, v172);
  a2[62] = result;
  return result;
}

int16x8_t *vpx_idct32_16_neon(int16x8_t *result, int16x8_t *a2, int a3, int a4)
{
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int16x8_t v7;
  int32x4_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int32x4_t v32;
  int16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int32x4_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int32x4_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x4_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x4_t v95;
  int32x4_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int32x4_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  uint64_t v197;
  int16x8_t *v198;
  int16x8_t *v199;
  int16x8_t *v200;
  int16x8_t *v201;
  int16x8_t *v202;
  int16x8_t *v203;
  int16x8_t *v204;
  int16x8_t *v205;
  int16x8_t *v206;
  int16x8_t *v207;
  int16x8_t *v208;
  int16x8_t *v209;
  int16x8_t *v210;
  int16x8_t *v211;
  int16x8_t *v212;
  int16x8_t *v213;
  int16x8_t *v214;
  int16x8_t *v215;
  int16x8_t *v216;
  int16x8_t *v217;
  int16x8_t *v218;
  int16x8_t *v219;
  int16x8_t *v220;
  int16x8_t *v221;
  int16x8_t *v222;
  int16x8_t *v223;
  int16x8_t *v224;
  int16x8_t *v225;
  int16x8_t *v226;
  int16x8_t v227;
  uint8x8_t *v228;
  int16x8_t v229;
  int16x8_t v230;
  uint8x8_t *v231;
  int16x8_t v232;
  int16x8_t v233;
  uint8x8_t *v234;
  int16x8_t v235;
  uint8x8_t *v236;
  int16x8_t v237;
  uint8x8_t *v238;
  int16x8_t v239;
  uint8x8_t *v240;
  int16x8_t v241;
  uint8x8_t *v242;
  int16x8_t v243;
  uint64_t v244;
  int8x8_t *v245;
  int8x8_t *v246;
  int8x8_t *v247;
  int8x8_t *v248;
  int8x8_t *v249;
  int8x8_t *v250;
  int8x8_t *v251;
  uint64_t *v252;
  uint64_t *v253;
  uint64_t *v254;
  uint8x8_t *v255;
  int16x8_t v256;
  uint8x8_t v257;
  uint64_t *v258;
  uint64_t *v259;
  int16x8_t v260;
  uint8x8_t *v261;
  uint8x8_t v262;
  uint8x8_t *v263;
  int16x8_t v264;
  int16x8_t v265;
  int8x8_t *v266;
  int8x8_t *v267;
  int8x8_t *v268;
  int8x8_t *v269;
  int8x8_t *v270;
  int8x8_t *v271;
  int8x8_t *v272;
  int16x8_t *v273;
  uint64_t *v274;
  uint8x8_t *v275;
  uint8x8_t v276;
  uint64_t *v277;
  uint8x8_t *v278;
  uint8x8_t v279;
  uint64_t *v280;
  uint64_t *v281;
  uint8x8_t *v282;
  int16x8_t v283;
  int8x8_t *v284;
  int8x8_t *v285;
  int8x8_t *v286;
  int8x8_t *v287;
  int8x8_t *v288;
  int8x8_t *v289;
  int8x8_t *v290;
  uint64_t *v291;
  uint64_t *v292;
  uint8x8_t *v293;
  uint8x8_t v294;
  uint64_t *v295;
  uint8x8_t *v296;
  uint8x8_t v297;
  uint64_t *v298;
  uint64_t *v299;
  uint8x8_t *v300;
  int16x8_t v301;
  int8x8_t *v302;
  int8x8_t *v303;
  int8x8_t *v304;
  int8x8_t *v305;
  int8x8_t *v306;
  int8x8_t *v307;
  int8x8_t *v308;
  int16x8_t v309;
  int16x8_t v310;
  int16x8_t v311;
  int16x8_t v312;
  int32x4_t v313;
  int16x8_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int16x8_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int32x4_t v322;
  int32x4_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int16x8_t v326;
  int32x4_t v327;
  int16x8_t v328;
  int32x4_t v329;
  int16x8_t v330;
  int16x8_t v331;
  int32x4_t v332;
  int16x8_t v333;
  int16x8_t v334;
  int16x8_t v335;
  int32x4_t v336;
  int16x8_t v337;
  int32x4_t v338;
  int16x8_t v339;
  int32x4_t v340;
  int32x4_t v341;
  int16x8_t v342;
  int32x4_t v343;
  int16x8_t v344;
  int32x4_t v345;
  int16x8_t v346;
  int32x4_t v347;
  int32x4_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int16x8_t v351;
  int32x4_t v352;
  int16x8_t v353;
  int16x8_t v354;
  int32x4_t v355;
  int16x8_t v356;
  int32x4_t v357;
  int16x8_t v358;
  int16x8_t v359;
  int32x4_t v360;
  int16x8_t v361;
  int16x8_t v362;
  int32x4_t v363;
  int16x8_t v364;
  int16x8_t v365;
  int32x4_t v366;
  int16x8_t v367;
  int16x8_t v368;
  int16x8_t v369;
  int32x4_t v370;
  int16x8_t v371;
  int16x8_t v372;
  int16x8_t v373;
  int16x8_t v374;
  int32x4_t v375;
  int16x8_t v376;
  int16x8_t v377;
  int32x4_t v378;
  int16x8_t v379;
  int16x8_t v380;
  int16x8_t v381;
  int32x4_t v382;
  int16x8_t v383;
  int16x8_t v384;
  int32x4_t v385;
  int16x8_t v386;
  int16x8_t v387;
  int16x8_t v388;
  int32x4_t v389;
  int16x8_t v390;
  int32x4_t v391;
  int16x8_t v392;
  int16x8_t v393;
  int16x8_t v394;
  int32x4_t v395;
  int16x8_t v396;
  int16x8_t v397;
  int32x4_t v398;
  int16x8_t v399;
  int16x8_t v400;
  int32x4_t v401;
  int16x8_t v402;
  int16x8_t v403;

  v394 = result[2];
  v369 = result[3];
  v372 = result[1];
  v4 = (int32x4_t)vtrn2q_s16(*result, v394);
  v384 = result[4];
  v388 = result[6];
  v362 = result[7];
  v365 = result[5];
  v5 = (int32x4_t)vtrn2q_s16(v384, v388);
  v377 = result[10];
  v381 = result[8];
  v356 = result[11];
  v359 = result[9];
  v6 = (int32x4_t)vtrn2q_s16(v381, v377);
  v374 = result[12];
  v7 = result[14];
  v351 = result[13];
  v354 = result[15];
  v8 = (int32x4_t)vtrn2q_s16(v374, v7);
  v9 = (int64x2_t)vtrn1q_s32(v4, v5);
  v10 = (int64x2_t)vtrn2q_s32(v4, v5);
  v11 = (int64x2_t)vtrn1q_s32(v6, v8);
  v12 = (int64x2_t)vtrn2q_s32(v6, v8);
  v13 = (int16x8_t)vzip1q_s64(v9, v11);
  v14 = (int16x8_t)vzip2q_s64(v10, v12);
  v15 = (int32x4_t)vtrn2q_s16(v372, v369);
  v16 = (int32x4_t)vtrn2q_s16(v365, v362);
  v17 = (int32x4_t)vtrn2q_s16(v359, v356);
  v18 = (int32x4_t)vtrn2q_s16(v351, v354);
  v19 = (int64x2_t)vtrn1q_s32(v15, v16);
  v20 = (int64x2_t)vtrn2q_s32(v15, v16);
  v21 = (int64x2_t)vtrn1q_s32(v17, v18);
  v22 = (int64x2_t)vtrn2q_s32(v17, v18);
  v23 = (int16x8_t)vzip1q_s64(v19, v21);
  v24 = (int16x8_t)vzip2q_s64(v20, v22);
  v25 = vqrdmulhq_s16(v13, vdupq_n_s16(0x648u));
  v337 = vqrdmulhq_s16(v13, vdupq_n_s16(0x7FD8u));
  v339 = vqrdmulhq_s16(v24, vdupq_n_s16(0xAA0Au));
  v335 = vqrdmulhq_s16(v24, vdupq_n_s16(0x5ED8u));
  v26 = vqrdmulhq_s16(v23, vdupq_n_s16(0x36BAu));
  v326 = vqrdmulhq_s16(v14, vdupq_n_s16(0xD4E0u));
  v328 = vqrdmulhq_s16(v23, vdupq_n_s16(0x73B6u));
  v27 = vqrdmulhq_s16(v14, vdupq_n_s16(0x7884u));
  v28 = vsubq_s16(v25, v339);
  v29 = vdupq_n_s16(0xC13Bu);
  v30 = vdupq_n_s16(0xC7Cu);
  v31 = vsubq_s16(v337, v335);
  v32 = vmlal_s16(vmull_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v30.i8), *(int16x4_t *)v28.i8, *(int16x4_t *)v29.i8);
  v33 = vdupq_n_s16(0x3EC5u);
  v34 = vmlal_high_s16(vmull_high_s16(v31, v30), v28, v29);
  v35 = vmlal_s16(vmull_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v33.i8), *(int16x4_t *)v28.i8, *(int16x4_t *)v30.i8);
  v341 = vmlal_high_s16(vmull_high_s16(v31, v33), v28, v30);
  v36 = vsubq_s16(v326, v26);
  v37 = v26;
  v38 = vsubq_s16(v27, v328);
  v39 = vdupq_n_s16(0xF384u);
  v40 = vmlal_s16(vmull_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v29.i8), *(int16x4_t *)v36.i8, *(int16x4_t *)v39.i8);
  v398 = v34;
  v401 = vmlal_high_s16(vmull_high_s16(v38, v29), v36, v39);
  v41 = vmlal_s16(vmull_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v30.i8), *(int16x4_t *)v36.i8, *(int16x4_t *)v29.i8);
  v332 = vmlal_high_s16(vmull_high_s16(v38, v30), v36, v29);
  v42 = (int16x8_t)vzip2q_s64(v9, v11);
  v43 = (int16x8_t)vzip1q_s64(v10, v12);
  v44 = (int16x8_t)vzip2q_s64(v19, v21);
  v45 = (int16x8_t)vzip1q_s64(v20, v22);
  v46 = vqrdmulhq_s16(v42, vdupq_n_s16(0x1F1Au));
  v47 = vqrdmulhq_s16(v42, vdupq_n_s16(0x7C2Au));
  v48 = vqrdmulhq_s16(v45, vdupq_n_s16(0xBE32u));
  v49 = vqrdmulhq_s16(v45, vdupq_n_s16(0x6DCAu));
  v50 = vqrdmulhq_s16(v44, vdupq_n_s16(0x4C40u));
  v51 = vqrdmulhq_s16(v44, vdupq_n_s16(0x66D0u));
  v52 = vqrdmulhq_s16(v43, vdupq_n_s16(0xED38u));
  v53 = vqrdmulhq_s16(v43, vdupq_n_s16(0x7E9Eu));
  v54 = vsubq_s16(v46, v48);
  v55 = vdupq_n_s16(0xDC72u);
  v56 = vsubq_s16(v47, v49);
  v57 = vdupq_n_s16(0x3537u);
  v349 = vmlal_s16(vmull_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v57.i8), *(int16x4_t *)v54.i8, *(int16x4_t *)v55.i8);
  v58 = vdupq_n_s16(0x238Eu);
  v59 = vmlal_high_s16(vmull_high_s16(v56, v57), v54, v55);
  v345 = vmlal_high_s16(vmull_high_s16(v56, v58), v54, v57);
  v347 = vmlal_s16(vmull_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v58.i8), *(int16x4_t *)v54.i8, *(int16x4_t *)v57.i8);
  v60 = vsubq_s16(v52, v50);
  v61 = vdupq_n_s16(0xCAC9u);
  v62 = vsubq_s16(v53, v51);
  v63 = vmlal_s16(vmull_s16(*(int16x4_t *)v62.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v60.i8, *(int16x4_t *)v61.i8);
  v64 = vmlal_high_s16(vmull_high_s16(v62, v55), v60, v61);
  v65 = vmlal_s16(vmull_s16(*(int16x4_t *)v62.i8, *(int16x4_t *)v57.i8), *(int16x4_t *)v60.i8, *(int16x4_t *)v55.i8);
  v66 = vmlal_high_s16(vmull_high_s16(v62, v57), v60, v55);
  v343 = (int32x4_t)vtrn1q_s16(*result, v394);
  v385 = (int32x4_t)vtrn1q_s16(v384, v388);
  v375 = (int32x4_t)vtrn1q_s16(v374, v7);
  v378 = (int32x4_t)vtrn1q_s16(v381, v377);
  v67 = (int64x2_t)vtrn2q_s32(v343, v385);
  v68 = (int64x2_t)vtrn2q_s32(v378, v375);
  v69 = (int16x8_t)vzip1q_s64(v67, v68);
  v70 = (int16x8_t)vzip2q_s64(v67, v68);
  v71 = (int32x4_t)vtrn1q_s16(v372, v369);
  v370 = (int32x4_t)vtrn1q_s16(v365, v362);
  v363 = (int32x4_t)vtrn1q_s16(v351, v354);
  v366 = (int32x4_t)vtrn1q_s16(v359, v356);
  v72 = (int64x2_t)vtrn2q_s32(v71, v370);
  v73 = (int64x2_t)vtrn2q_s32(v366, v363);
  v74 = (int16x8_t)vzip1q_s64(v72, v73);
  v75 = (int16x8_t)vzip2q_s64(v72, v73);
  v333 = vqrdmulhq_s16(v69, vdupq_n_s16(0xC8Cu));
  v334 = vqrdmulhq_s16(v69, vdupq_n_s16(0x7F62u));
  v330 = vqrdmulhq_s16(v75, vdupq_n_s16(0x62F2u));
  v331 = vqrdmulhq_s16(v75, vdupq_n_s16(0xAECCu));
  v320 = vqrdmulhq_s16(v70, vdupq_n_s16(0xDAD8u));
  v321 = vqrdmulhq_s16(v74, vdupq_n_s16(0x3C56u));
  v318 = vqrdmulhq_s16(v74, vdupq_n_s16(0x70E2u));
  v319 = vqrdmulhq_s16(v70, vdupq_n_s16(0x7A7Eu));
  v309 = vaddq_s16(v339, v25);
  v310 = vaddq_s16(v326, v37);
  v76 = vaddq_s16(v48, v46);
  v77 = vaddq_s16(v52, v50);
  v78 = vaddq_s16(v53, v51);
  v314 = vaddq_s16(v49, v47);
  v311 = vaddq_s16(v335, v337);
  v312 = vaddq_s16(v27, v328);
  v79 = vdupq_n_s16(0xC4DFu);
  v80 = vsubq_s16(v333, v331);
  v81 = vdupq_n_s16(0x187Eu);
  v82 = vsubq_s16(v334, v330);
  v382 = vmlal_s16(vmull_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v81.i8), *(int16x4_t *)v80.i8, *(int16x4_t *)v79.i8);
  v395 = vmlal_high_s16(vmull_high_s16(v82, v81), v80, v79);
  v83 = vdupq_n_s16(0x3B21u);
  v389 = vmlal_s16(vmull_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v80.i8, *(int16x4_t *)v81.i8);
  v391 = vmlal_high_s16(vmull_high_s16(v82, v83), v80, v81);
  v84 = vsubq_s16(v320, v321);
  v85 = vsubq_s16(v319, v318);
  v86 = vdupq_n_s16(0xE782u);
  v338 = vmlal_s16(vmull_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v79.i8), *(int16x4_t *)v84.i8, *(int16x4_t *)v86.i8);
  v357 = vmlal_high_s16(vmull_high_s16(v85, v79), v84, v86);
  v340 = vmlal_s16(vmull_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v81.i8), *(int16x4_t *)v84.i8, *(int16x4_t *)v79.i8);
  v352 = vmlal_high_s16(vmull_high_s16(v85, v81), v84, v79);
  *(int16x4_t *)v47.i8 = vsub_s16(vrshrn_n_s32(v398, 0xEuLL), vrshrn_n_s32(v401, 0xEuLL));
  *(int16x4_t *)v48.i8 = vsub_s16(vrshrn_n_s32(v341, 0xEuLL), vrshrn_n_s32(v332, 0xEuLL));
  *(int16x4_t *)v18.i8 = vrshrn_n_s32(v32, 0xEuLL);
  *(int16x4_t *)v69.i8 = vrshrn_n_s32(v35, 0xEuLL);
  *(int16x4_t *)v32.i8 = vrshrn_n_s32(v40, 0xEuLL);
  *(int16x4_t *)v35.i8 = vrshrn_n_s32(v41, 0xEuLL);
  v87 = vsub_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v32.i8);
  *(int16x4_t *)v49.i8 = vsub_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v35.i8);
  v323 = vmlal_s16(vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v81.i8), v87, *(int16x4_t *)v79.i8);
  v360 = vmlal_s16(vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v83.i8), v87, *(int16x4_t *)v81.i8);
  v336 = vmlal_s16(vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v81.i8), *(int16x4_t *)v47.i8, *(int16x4_t *)v79.i8);
  v355 = vmlal_s16(vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v47.i8, *(int16x4_t *)v81.i8);
  v88 = vsubq_s16(v309, v310);
  v89 = vsubq_s16(v311, v312);
  v329 = vmlal_s16(vmull_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v81.i8), *(int16x4_t *)v88.i8, *(int16x4_t *)v79.i8);
  v324 = vmlal_high_s16(vmull_high_s16(v89, v81), v88, v79);
  v325 = vmlal_s16(vmull_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v88.i8, *(int16x4_t *)v81.i8);
  v327 = vmlal_high_s16(vmull_high_s16(v89, v83), v88, v81);
  v90 = vsubq_s16(v77, v76);
  v91 = v77;
  v92 = v76;
  v93 = vsubq_s16(v78, v314);
  v94 = v78;
  v316 = vmlal_s16(vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v79.i8), *(int16x4_t *)v90.i8, *(int16x4_t *)v86.i8);
  v322 = vmlal_high_s16(vmull_high_s16(v93, v79), v90, v86);
  v315 = vmlal_s16(vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v81.i8), *(int16x4_t *)v90.i8, *(int16x4_t *)v79.i8);
  v317 = vmlal_high_s16(vmull_high_s16(v93, v81), v90, v79);
  *(int16x4_t *)v90.i8 = vsub_s16(vrshrn_n_s32(v64, 0xEuLL), vrshrn_n_s32(v59, 0xEuLL));
  *(int16x4_t *)v93.i8 = vsub_s16(vrshrn_n_s32(v66, 0xEuLL), vrshrn_n_s32(v345, 0xEuLL));
  *(int16x4_t *)v48.i8 = vrshrn_n_s32(v349, 0xEuLL);
  *(int16x4_t *)v77.i8 = vrshrn_n_s32(v347, 0xEuLL);
  *(int16x4_t *)v76.i8 = vrshrn_n_s32(v63, 0xEuLL);
  v95 = vrshrn_n_s32(v65, 0xEuLL);
  *(int16x4_t *)v49.i8 = vsub_s16(*(int16x4_t *)v76.i8, *(int16x4_t *)v48.i8);
  *(int16x4_t *)v89.i8 = vsub_s16(v95, *(int16x4_t *)v77.i8);
  v96 = vmlal_s16(vmull_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v79.i8), *(int16x4_t *)v49.i8, *(int16x4_t *)v86.i8);
  v313 = vmlal_s16(vmull_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v81.i8), *(int16x4_t *)v49.i8, *(int16x4_t *)v79.i8);
  v348 = vmlal_s16(vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v79.i8), *(int16x4_t *)v90.i8, *(int16x4_t *)v86.i8);
  v350 = vmlal_s16(vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v81.i8), *(int16x4_t *)v90.i8, *(int16x4_t *)v79.i8);
  v97 = (int64x2_t)vtrn1q_s32(v343, v385);
  v98 = (int64x2_t)vtrn1q_s32(v378, v375);
  v99 = (int16x8_t)vzip1q_s64(v97, v98);
  v100 = (int16x8_t)vzip2q_s64(v97, v98);
  v101 = (int64x2_t)vtrn1q_s32(v71, v370);
  v102 = (int64x2_t)vtrn1q_s32(v366, v363);
  v103 = (int16x8_t)vzip1q_s64(v101, v102);
  v104 = (int16x8_t)vzip2q_s64(v101, v102);
  v105 = vqrdmulhq_s16(v100, vdupq_n_s16(0x18F8u));
  v106 = vqrdmulhq_s16(v100, vdupq_n_s16(0x7D8Au));
  v107 = vqrdmulhq_s16(v104, vdupq_n_s16(0xB8E4u));
  v108 = vqrdmulhq_s16(v104, vdupq_n_s16(0x6A6Eu));
  v109 = vaddq_s16(v331, v333);
  v110 = vaddq_s16(v320, v321);
  v111 = vaddq_s16(v319, v318);
  v112 = vaddq_s16(v330, v334);
  v113 = vrshrn_high_n_s32(*(int16x4_t *)v76.i8, v64, 0xEuLL);
  v114 = vrshrn_high_n_s32(v95, v66, 0xEuLL);
  v115 = vqrdmulhq_s16(v99, vdupq_n_s16(0x5A82u));
  v116 = vqrdmulhq_s16(v103, vdupq_n_s16(0x30FCu));
  v117 = vqrdmulhq_s16(v103, vdupq_n_s16(0x7642u));
  v118 = vaddq_s16(v107, v105);
  v119 = vsubq_s16(v105, v107);
  v120 = vsubq_s16(v106, v108);
  v121 = vaddq_s16(v108, v106);
  v122 = vaddq_s16(v310, v309);
  v123 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v32.i8, v401, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v18.i8, v398, 0xEuLL));
  v124 = vaddq_s16(v113, vrshrn_high_n_s32(*(int16x4_t *)v48.i8, v59, 0xEuLL));
  v125 = vaddq_s16(v91, v92);
  v399 = vaddq_s16(v114, vrshrn_high_n_s32(*(int16x4_t *)v77.i8, v345, 0xEuLL));
  v402 = vaddq_s16(v94, v314);
  v379 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v35.i8, v332, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v69.i8, v341, 0xEuLL));
  v386 = vaddq_s16(v312, v311);
  v126 = vaddq_s16(v116, v115);
  v127 = vsubq_s16(v115, v116);
  v128 = vaddq_s16(v117, v115);
  v129 = vsubq_s16(v115, v117);
  v130 = vdupq_n_s32(0x2D41u);
  v131 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v120.i8, *(int16x4_t *)v119.i8), v130), 0xEuLL), vmulq_s32(vsubl_high_s16(v120, v119), v130), 0xEuLL);
  v132 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v120.i8, *(int16x4_t *)v119.i8), v130), 0xEuLL), vmulq_s32(vaddl_high_s16(v120, v119), v130), 0xEuLL);
  *(int16x4_t *)v120.i8 = vrshrn_n_s32(v382, 0xEuLL);
  *(int16x4_t *)v119.i8 = vrshrn_n_s32(v338, 0xEuLL);
  *(int16x4_t *)v108.i8 = vsub_s16(*(int16x4_t *)v120.i8, *(int16x4_t *)v119.i8);
  v383 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v119.i8, v357, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v120.i8, v395, 0xEuLL));
  v133 = vaddq_s16(v110, v109);
  v134 = vsubq_s16(v109, v110);
  *(int16x4_t *)v120.i8 = vrshrn_n_s32(v389, 0xEuLL);
  *(int16x4_t *)v119.i8 = vrshrn_n_s32(v340, 0xEuLL);
  *(int16x4_t *)v110.i8 = vsub_s16(*(int16x4_t *)v120.i8, *(int16x4_t *)v119.i8);
  v376 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v119.i8, v352, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v120.i8, v391, 0xEuLL));
  v135 = vsubq_s16(v112, v111);
  v373 = vaddq_s16(v111, v112);
  v136 = vsubq_s16(v129, v118);
  v364 = vaddq_s16(v131, v127);
  v367 = vaddq_s16(v129, v118);
  v137 = vsubq_s16(v127, v131);
  v390 = vaddq_s16(v132, v126);
  v138 = vsubq_s16(v126, v132);
  v371 = vaddq_s16(v128, v121);
  v139 = vsubq_s16(v128, v121);
  *(int16x4_t *)v121.i8 = vsub_s16(vrshrn_n_s32(v391, 0xEuLL), vrshrn_n_s32(v352, 0xEuLL));
  *(int16x4_t *)v127.i8 = vsub_s16(vrshrn_n_s32(v395, 0xEuLL), vrshrn_n_s32(v357, 0xEuLL));
  v140 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v108.i8), v130), 0xEuLL), vmulq_s32(vsubl_s16(*(int16x4_t *)v121.i8, *(int16x4_t *)v127.i8), v130), 0xEuLL);
  v141 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v108.i8), v130), 0xEuLL), vmulq_s32(vaddl_s16(*(int16x4_t *)v121.i8, *(int16x4_t *)v127.i8), v130), 0xEuLL);
  v142 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v135.i8, *(int16x4_t *)v134.i8), v130), 0xEuLL), vmulq_s32(vsubl_high_s16(v135, v134), v130), 0xEuLL);
  v143 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v135.i8, *(int16x4_t *)v134.i8), v130), 0xEuLL), vmulq_s32(vaddl_high_s16(v135, v134), v130), 0xEuLL);
  *(int16x4_t *)v135.i8 = vrshrn_n_s32(v323, 0xEuLL);
  *(int16x4_t *)v121.i8 = vrshrn_n_s32(v96, 0xEuLL);
  *(int16x4_t *)v114.i8 = vsub_s16(*(int16x4_t *)v135.i8, *(int16x4_t *)v121.i8);
  v358 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v121.i8, v348, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v135.i8, v336, 0xEuLL));
  *(int16x4_t *)v135.i8 = vrshrn_n_s32(v329, 0xEuLL);
  *(int16x4_t *)v121.i8 = vrshrn_n_s32(v316, 0xEuLL);
  *(int16x4_t *)v112.i8 = vsub_s16(*(int16x4_t *)v135.i8, *(int16x4_t *)v121.i8);
  v346 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v121.i8, v322, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v135.i8, v324, 0xEuLL));
  v144 = vsubq_s16(v123, v124);
  v392 = vaddq_s16(v125, v122);
  v396 = vaddq_s16(v124, v123);
  v145 = vsubq_s16(v122, v125);
  *(int16x4_t *)v121.i8 = vrshrn_n_s32(v325, 0xEuLL);
  *(int16x4_t *)v125.i8 = vrshrn_n_s32(v315, 0xEuLL);
  *(int16x4_t *)v126.i8 = vsub_s16(*(int16x4_t *)v121.i8, *(int16x4_t *)v125.i8);
  v353 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v125.i8, v317, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v121.i8, v327, 0xEuLL));
  *(int16x4_t *)v121.i8 = vrshrn_n_s32(v360, 0xEuLL);
  *(int16x4_t *)v124.i8 = vrshrn_n_s32(v313, 0xEuLL);
  *(int16x4_t *)v77.i8 = vsub_s16(*(int16x4_t *)v121.i8, *(int16x4_t *)v124.i8);
  v361 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v124.i8, v350, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v121.i8, v355, 0xEuLL));
  v146 = vsubq_s16(v379, v399);
  v380 = vaddq_s16(v399, v379);
  v147 = vsubq_s16(v386, v402);
  v387 = vaddq_s16(v402, v386);
  v148 = vaddq_s16(v139, v133);
  v149 = vsubq_s16(v139, v133);
  v342 = vaddq_s16(v138, v383);
  v150 = vsubq_s16(v138, v383);
  v151 = vaddq_s16(v140, v137);
  v152 = vsubq_s16(v137, v140);
  v344 = vaddq_s16(v142, v136);
  v153 = vsubq_s16(v136, v142);
  v154 = vaddq_s16(v143, v367);
  v155 = vsubq_s16(v367, v143);
  v368 = vaddq_s16(v141, v364);
  v156 = vsubq_s16(v364, v141);
  v157 = vsubq_s16(v390, v376);
  v158 = vaddq_s16(v371, v373);
  v159 = vsubq_s16(v371, v373);
  *(int16x4_t *)v141.i8 = vsub_s16(vrshrn_n_s32(v327, 0xEuLL), vrshrn_n_s32(v317, 0xEuLL));
  *(int16x4_t *)v61.i8 = vsub_s16(vrshrn_n_s32(v324, 0xEuLL), vrshrn_n_s32(v322, 0xEuLL));
  v160 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v112.i8), v130), 0xEuLL), vmulq_s32(vsubl_s16(*(int16x4_t *)v141.i8, *(int16x4_t *)v61.i8), v130), 0xEuLL);
  v161 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v112.i8), v130), 0xEuLL), vmulq_s32(vaddl_s16(*(int16x4_t *)v141.i8, *(int16x4_t *)v61.i8), v130), 0xEuLL);
  *(int16x4_t *)v141.i8 = vsub_s16(vrshrn_n_s32(v355, 0xEuLL), vrshrn_n_s32(v350, 0xEuLL));
  *(int16x4_t *)v126.i8 = vsub_s16(vrshrn_n_s32(v336, 0xEuLL), vrshrn_n_s32(v348, 0xEuLL));
  v162 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v114.i8), v130), 0xEuLL), vmulq_s32(vsubl_s16(*(int16x4_t *)v141.i8, *(int16x4_t *)v126.i8), v130), 0xEuLL);
  v163 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v114.i8), v130), 0xEuLL), vmulq_s32(vaddl_s16(*(int16x4_t *)v141.i8, *(int16x4_t *)v126.i8), v130), 0xEuLL);
  v164 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v146.i8, *(int16x4_t *)v144.i8), v130), 0xEuLL), vmulq_s32(vsubl_high_s16(v146, v144), v130), 0xEuLL);
  v165 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v146.i8, *(int16x4_t *)v144.i8), v130), 0xEuLL), vmulq_s32(vaddl_high_s16(v146, v144), v130), 0xEuLL);
  v166 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v145.i8), v130), 0xEuLL), vmulq_s32(vsubl_high_s16(v147, v145), v130), 0xEuLL);
  v167 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v145.i8), v130), 0xEuLL), vmulq_s32(vaddl_high_s16(v147, v145), v130), 0xEuLL);
  v168 = vqaddq_s16(v159, v392);
  v393 = vqsubq_s16(v159, v392);
  v169 = vqaddq_s16(v157, v396);
  v397 = vqsubq_s16(v157, v396);
  v170 = vqaddq_s16(v156, v358);
  v400 = vqsubq_s16(v156, v358);
  v171 = vqaddq_s16(v155, v346);
  v403 = vqsubq_s16(v155, v346);
  v172 = vqaddq_s16(v153, v160);
  v173 = vqsubq_s16(v153, v160);
  v174 = vqaddq_s16(v152, v162);
  v175 = vqsubq_s16(v152, v162);
  v176 = vqaddq_s16(v150, v164);
  v177 = vqsubq_s16(v150, v164);
  v178 = vqaddq_s16(v149, v166);
  v179 = vqsubq_s16(v149, v166);
  v180 = vqaddq_s16(v148, v167);
  v181 = vqsubq_s16(v148, v167);
  v182 = vqaddq_s16(v342, v165);
  v183 = vqsubq_s16(v342, v165);
  v184 = vqaddq_s16(v151, v163);
  v185 = vqsubq_s16(v151, v163);
  v186 = vqaddq_s16(v344, v161);
  v187 = vqsubq_s16(v344, v161);
  v188 = vqaddq_s16(v154, v353);
  v189 = vqsubq_s16(v154, v353);
  v190 = vqaddq_s16(v368, v361);
  v191 = vqsubq_s16(v368, v361);
  v192 = vaddq_s16(v390, v376);
  v193 = vqaddq_s16(v192, v380);
  v194 = vqsubq_s16(v192, v380);
  v195 = vqaddq_s16(v158, v387);
  v196 = vqsubq_s16(v158, v387);
  if (a4)
  {
    *(uint16x8_t *)a2 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*a2, v195, 6uLL)));
    v197 = 2 * a3;
    *(uint16x8_t *)((char *)a2 + v197) = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*(int16x8_t *)((char *)a2 + v197), v193, 6uLL)));
    v198 = (int16x8_t *)((char *)a2 + v197 + v197);
    *(uint16x8_t *)v198 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v198, v190, 6uLL)));
    v199 = (int16x8_t *)((char *)v198 + v197);
    *(uint16x8_t *)v199 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v199, v188, 6uLL)));
    v200 = (int16x8_t *)((char *)v199 + v197);
    *(uint16x8_t *)v200 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v200, v186, 6uLL)));
    v201 = (int16x8_t *)((char *)v200 + v197);
    *(uint16x8_t *)v201 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v201, v184, 6uLL)));
    v202 = (int16x8_t *)((char *)v201 + v197);
    *(uint16x8_t *)v202 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v202, v182, 6uLL)));
    v203 = (int16x8_t *)((char *)v202 + v197);
    *(uint16x8_t *)v203 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v203, v180, 6uLL)));
    v204 = (int16x8_t *)((char *)v203 + v197);
    *(uint16x8_t *)v204 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v204, v178, 6uLL)));
    v205 = (int16x8_t *)((char *)v204 + v197);
    *(uint16x8_t *)v205 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v205, v176, 6uLL)));
    v206 = (int16x8_t *)((char *)v205 + v197);
    *(uint16x8_t *)v206 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v206, v174, 6uLL)));
    v207 = (int16x8_t *)((char *)v206 + v197);
    *(uint16x8_t *)v207 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v207, v172, 6uLL)));
    v208 = (int16x8_t *)((char *)v207 + v197);
    *(uint16x8_t *)v208 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v208, v171, 6uLL)));
    v209 = (int16x8_t *)((char *)v208 + v197);
    *(uint16x8_t *)v209 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v209, v170, 6uLL)));
    v210 = (int16x8_t *)((char *)v209 + v197);
    *(uint16x8_t *)v210 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v210, v169, 6uLL)));
    v211 = (int16x8_t *)((char *)v210 + v197);
    *(uint16x8_t *)v211 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v211, v168, 6uLL)));
    v212 = (int16x8_t *)((char *)v211 + v197);
    *(uint16x8_t *)v212 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v212, v393, 6uLL)));
    v213 = (int16x8_t *)((char *)v212 + v197);
    *(uint16x8_t *)v213 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v213, v397, 6uLL)));
    v214 = (int16x8_t *)((char *)v213 + v197);
    *(uint16x8_t *)v214 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v214, v400, 6uLL)));
    v215 = (int16x8_t *)((char *)v214 + v197);
    *(uint16x8_t *)v215 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v215, v403, 6uLL)));
    v216 = (int16x8_t *)((char *)v215 + v197);
    *(uint16x8_t *)v216 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v216, v173, 6uLL)));
    v217 = (int16x8_t *)((char *)v216 + v197);
    *(uint16x8_t *)v217 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v217, v175, 6uLL)));
    v218 = (int16x8_t *)((char *)v217 + v197);
    *(uint16x8_t *)v218 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v218, v177, 6uLL)));
    v219 = (int16x8_t *)((char *)v218 + v197);
    *(uint16x8_t *)v219 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v219, v179, 6uLL)));
    v220 = (int16x8_t *)((char *)v219 + v197);
    *(uint16x8_t *)v220 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v220, v181, 6uLL)));
    v221 = (int16x8_t *)((char *)v220 + v197);
    *(uint16x8_t *)v221 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v221, v183, 6uLL)));
    v222 = (int16x8_t *)((char *)v221 + v197);
    *(uint16x8_t *)v222 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v222, v185, 6uLL)));
    v223 = (int16x8_t *)((char *)v222 + v197);
    *(uint16x8_t *)v223 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v223, v187, 6uLL)));
    v224 = (int16x8_t *)((char *)v223 + v197);
    *(uint16x8_t *)v224 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v224, v189, 6uLL)));
    v225 = (int16x8_t *)((char *)v224 + v197);
    *(uint16x8_t *)v225 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v225, v191, 6uLL)));
    v226 = (int16x8_t *)((char *)v225 + v197);
    *(uint16x8_t *)v226 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v226, v194, 6uLL)));
    *(uint16x8_t *)((char *)v226 + v197) = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*(int16x8_t *)((char *)v226 + v197), v196, 6uLL)));
  }
  else
  {
    v227 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a2->i8), v195, 6uLL);
    v228 = (uint8x8_t *)&a2->i8[a3];
    v229 = v185;
    v230 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v228), v193, 6uLL);
    v231 = (uint8x8_t *)((char *)v228 + a3);
    v232 = v179;
    v233 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v231), v190, 6uLL);
    v234 = (uint8x8_t *)((char *)v231 + a3);
    v235 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v234), v188, 6uLL);
    v236 = (uint8x8_t *)((char *)v234 + a3);
    v237 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v236), v186, 6uLL);
    v238 = (uint8x8_t *)((char *)v236 + a3);
    v239 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v238), v184, 6uLL);
    v240 = (uint8x8_t *)((char *)v238 + a3);
    v241 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v240), v182, 6uLL);
    v242 = (uint8x8_t *)((char *)v240 + a3);
    v243 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v242), v180, 6uLL);
    v244 = 7 * a3;
    v245 = (int8x8_t *)((char *)v242 - v244);
    *v245 = vqmovun_s16(v227);
    v246 = (int8x8_t *)((char *)v245 + a3);
    *v246 = vqmovun_s16(v230);
    v247 = (int8x8_t *)((char *)v246 + a3);
    *v247 = vqmovun_s16(v233);
    v248 = (int8x8_t *)((char *)v247 + a3);
    *v248 = vqmovun_s16(v235);
    v249 = (int8x8_t *)((char *)v248 + a3);
    *v249 = vqmovun_s16(v237);
    v250 = (int8x8_t *)((char *)v249 + a3);
    *v250 = vqmovun_s16(v239);
    v251 = (int8x8_t *)((char *)v250 + a3);
    *v251 = vqmovun_s16(v241);
    *(int8x8_t *)((char *)v251 + a3) = vqmovun_s16(v243);
    v252 = &a2->i64[a3];
    v237.i64[0] = *v252;
    v253 = (uint64_t *)((char *)v252 + a3);
    v227.i64[0] = *v253;
    v254 = (uint64_t *)((char *)v253 + a3);
    v230.i64[0] = *v254;
    v255 = (uint8x8_t *)((char *)v254 + a3);
    v256 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v230.i8), v174, 6uLL);
    v257 = *v255;
    v258 = (uint64_t *)((char *)v255 + a3);
    v233.i64[0] = *v258;
    v259 = (uint64_t *)((char *)v258 + a3);
    v260 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v233.i8), v171, 6uLL);
    v235.i64[0] = *v259;
    v261 = (uint8x8_t *)((char *)v259 + a3);
    v262 = *v261;
    v263 = (uint8x8_t *)((char *)v261 + a3);
    v264 = vrsraq_n_s16((int16x8_t)vmovl_u8(v262), v169, 6uLL);
    v265 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v263), v168, 6uLL);
    v266 = (int8x8_t *)((char *)v263 - v244);
    *v266 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v237.i8), v178, 6uLL));
    v267 = (int8x8_t *)((char *)v266 + a3);
    *v267 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v227.i8), v176, 6uLL));
    v268 = (int8x8_t *)((char *)v267 + a3);
    *v268 = vqmovun_s16(v256);
    v269 = (int8x8_t *)((char *)v268 + a3);
    *v269 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(v257), v172, 6uLL));
    v270 = (int8x8_t *)((char *)v269 + a3);
    *v270 = vqmovun_s16(v260);
    v271 = (int8x8_t *)((char *)v270 + a3);
    *v271 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v235.i8), v170, 6uLL));
    v272 = (int8x8_t *)((char *)v271 + a3);
    *v272 = vqmovun_s16(v264);
    *(int8x8_t *)((char *)v272 + a3) = vqmovun_s16(v265);
    v273 = &a2[a3];
    v237.i64[0] = v273->i64[0];
    v274 = (uint64_t *)((char *)v273->i64 + a3);
    v265.i64[0] = *v274;
    v275 = (uint8x8_t *)((char *)v274 + a3);
    v276 = *v275;
    v277 = (uint64_t *)((char *)v275 + a3);
    v227.i64[0] = *v277;
    v278 = (uint8x8_t *)((char *)v277 + a3);
    v279 = *v278;
    v280 = (uint64_t *)((char *)v278 + a3);
    v256.i64[0] = *v280;
    v281 = (uint64_t *)((char *)v280 + a3);
    v260.i64[0] = *v281;
    v282 = (uint8x8_t *)((char *)v281 + a3);
    v283 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v282), v232, 6uLL);
    v284 = (int8x8_t *)((char *)v282 - v244);
    *v284 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v237.i8), v393, 6uLL));
    v285 = (int8x8_t *)((char *)v284 + a3);
    *v285 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v265.i8), v397, 6uLL));
    v286 = (int8x8_t *)((char *)v285 + a3);
    *v286 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(v276), v400, 6uLL));
    v287 = (int8x8_t *)((char *)v286 + a3);
    *v287 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v227.i8), v403, 6uLL));
    v288 = (int8x8_t *)((char *)v287 + a3);
    *v288 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(v279), v173, 6uLL));
    v289 = (int8x8_t *)((char *)v288 + a3);
    *v289 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v256.i8), v175, 6uLL));
    v290 = (int8x8_t *)((char *)v289 + a3);
    *v290 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v260.i8), v177, 6uLL));
    *(int8x8_t *)((char *)v290 + a3) = vqmovun_s16(v283);
    v291 = &a2->i64[3 * a3];
    v237.i64[0] = *v291;
    v292 = (uint64_t *)((char *)v291 + a3);
    v265.i64[0] = *v292;
    v293 = (uint8x8_t *)((char *)v292 + a3);
    v294 = *v293;
    v295 = (uint64_t *)((char *)v293 + a3);
    v227.i64[0] = *v295;
    v296 = (uint8x8_t *)((char *)v295 + a3);
    v297 = *v296;
    v298 = (uint64_t *)((char *)v296 + a3);
    v256.i64[0] = *v298;
    v299 = (uint64_t *)((char *)v298 + a3);
    v260.i64[0] = *v299;
    v300 = (uint8x8_t *)((char *)v299 + a3);
    v301 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v300), v196, 6uLL);
    v302 = (int8x8_t *)((char *)v300 - v244);
    *v302 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v237.i8), v181, 6uLL));
    v303 = (int8x8_t *)((char *)v302 + a3);
    *v303 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v265.i8), v183, 6uLL));
    v304 = (int8x8_t *)((char *)v303 + a3);
    *v304 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(v294), v229, 6uLL));
    v305 = (int8x8_t *)((char *)v304 + a3);
    *v305 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v227.i8), v187, 6uLL));
    v306 = (int8x8_t *)((char *)v305 + a3);
    *v306 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(v297), v189, 6uLL));
    v307 = (int8x8_t *)((char *)v306 + a3);
    *v307 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v256.i8), v191, 6uLL));
    v308 = (int8x8_t *)((char *)v307 + a3);
    *v308 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v260.i8), v194, 6uLL));
    *(int8x8_t *)((char *)v308 + a3) = vqmovun_s16(v301);
  }
  return result;
}

uint8x16_t vpx_idct32x32_1_add_neon(__int16 *a1, uint8x16_t *a2, int a3)
{
  signed int v3;
  int v4;
  int v5;
  uint8x16_t v6;
  uint8x16_t v7;
  uint8x16_t *v8;
  uint8x16_t v9;
  uint8x16_t *v10;
  uint8x16_t v11;
  uint8x16_t *v12;
  uint8x16_t v13;
  uint8x16_t *v14;
  uint8x16_t v15;
  uint8x16_t *v16;
  uint8x16_t v17;
  uint8x16_t *v18;
  uint8x16_t v19;
  uint8x16_t *v20;
  uint8x16_t v21;
  uint8x16_t *v22;
  uint8x16_t v23;
  uint8x16_t *v24;
  uint8x16_t v25;
  uint8x16_t *v26;
  uint8x16_t v27;
  uint8x16_t *v28;
  uint8x16_t v29;
  uint8x16_t *v30;
  uint8x16_t v31;
  uint8x16_t *v32;
  uint8x16_t v33;
  uint8x16_t *v34;
  uint8x16_t v35;
  uint8x16_t *v36;
  uint8x16_t v37;
  uint8x16_t *v38;
  uint8x16_t v39;
  uint8x16_t *v40;
  uint8x16_t v41;
  uint8x16_t *v42;
  uint8x16_t v43;
  uint8x16_t *v44;
  uint8x16_t v45;
  uint8x16_t *v46;
  uint8x16_t v47;
  uint8x16_t *v48;
  uint8x16_t v49;
  uint8x16_t *v50;
  uint8x16_t v51;
  uint8x16_t *v52;
  uint8x16_t v53;
  uint8x16_t *v54;
  uint8x16_t v55;
  uint8x16_t *v56;
  uint8x16_t v57;
  uint8x16_t *v58;
  uint8x16_t v59;
  uint8x16_t *v60;
  uint8x16_t v61;
  uint8x16_t *v62;
  uint8x16_t v63;
  uint8x16_t *v64;
  uint8x16_t v65;
  uint8x16_t *v66;
  uint8x16_t v67;
  uint8x16_t *v68;
  uint8x16_t v69;
  uint8x16_t result;
  int v71;
  uint8x16_t v72;
  uint8x16_t v73;
  uint8x16_t *v74;
  uint8x16_t v75;
  uint8x16_t *v76;
  uint8x16_t v77;
  uint8x16_t *v78;
  uint8x16_t v79;
  uint8x16_t *v80;
  uint8x16_t v81;
  uint8x16_t *v82;
  uint8x16_t v83;
  uint8x16_t *v84;
  uint8x16_t v85;
  uint8x16_t *v86;
  uint8x16_t v87;
  uint8x16_t *v88;
  uint8x16_t v89;
  uint8x16_t *v90;
  uint8x16_t v91;
  uint8x16_t *v92;
  uint8x16_t v93;
  uint8x16_t *v94;
  uint8x16_t v95;
  uint8x16_t *v96;
  uint8x16_t v97;
  uint8x16_t *v98;
  uint8x16_t v99;
  uint8x16_t *v100;
  uint8x16_t v101;
  uint8x16_t *v102;
  uint8x16_t v103;
  uint8x16_t *v104;
  uint8x16_t v105;
  uint8x16_t *v106;
  uint8x16_t v107;
  uint8x16_t *v108;
  uint8x16_t v109;
  uint8x16_t *v110;
  uint8x16_t v111;
  uint8x16_t *v112;
  uint8x16_t v113;
  uint8x16_t *v114;
  uint8x16_t v115;
  uint8x16_t *v116;
  uint8x16_t v117;
  uint8x16_t *v118;
  uint8x16_t v119;
  uint8x16_t *v120;
  uint8x16_t v121;
  uint8x16_t *v122;
  uint8x16_t v123;
  uint8x16_t *v124;
  uint8x16_t v125;
  uint8x16_t *v126;
  uint8x16_t v127;
  uint8x16_t *v128;
  uint8x16_t v129;
  uint8x16_t *v130;
  uint8x16_t v131;
  uint8x16_t *v132;
  uint8x16_t v133;
  uint8x16_t *v134;
  uint8x16_t v135;

  v3 = (46340 * ((46340 * *a1 + 0x8000) >> 16) + 0x8000) & 0xFFFF0000;
  v4 = (v3 >> 16) + 32;
  if (v3 < -2162687)
  {
    v71 = (__int16)-(v4 >> 6);
    if (v71 >= 255)
      v71 = 255;
    v72 = (uint8x16_t)vdupq_n_s8(v71 & ~(v71 >> 31));
    v73 = vqsubq_u8(a2[1], v72);
    *a2 = vqsubq_u8(*a2, v72);
    a2[1] = v73;
    v74 = (uint8x16_t *)((char *)a2 + a3);
    v75 = vqsubq_u8(v74[1], v72);
    *v74 = vqsubq_u8(*v74, v72);
    v74[1] = v75;
    v76 = (uint8x16_t *)((char *)v74 + a3);
    v77 = vqsubq_u8(v76[1], v72);
    *v76 = vqsubq_u8(*v76, v72);
    v76[1] = v77;
    v78 = (uint8x16_t *)((char *)v76 + a3);
    v79 = vqsubq_u8(v78[1], v72);
    *v78 = vqsubq_u8(*v78, v72);
    v78[1] = v79;
    v80 = (uint8x16_t *)((char *)v78 + a3);
    v81 = vqsubq_u8(v80[1], v72);
    *v80 = vqsubq_u8(*v80, v72);
    v80[1] = v81;
    v82 = (uint8x16_t *)((char *)v80 + a3);
    v83 = vqsubq_u8(v82[1], v72);
    *v82 = vqsubq_u8(*v82, v72);
    v82[1] = v83;
    v84 = (uint8x16_t *)((char *)v82 + a3);
    v85 = vqsubq_u8(v84[1], v72);
    *v84 = vqsubq_u8(*v84, v72);
    v84[1] = v85;
    v86 = (uint8x16_t *)((char *)v84 + a3);
    v87 = vqsubq_u8(v86[1], v72);
    *v86 = vqsubq_u8(*v86, v72);
    v86[1] = v87;
    v88 = (uint8x16_t *)((char *)v86 + a3);
    v89 = vqsubq_u8(v88[1], v72);
    *v88 = vqsubq_u8(*v88, v72);
    v88[1] = v89;
    v90 = (uint8x16_t *)((char *)v88 + a3);
    v91 = vqsubq_u8(v90[1], v72);
    *v90 = vqsubq_u8(*v90, v72);
    v90[1] = v91;
    v92 = (uint8x16_t *)((char *)v90 + a3);
    v93 = vqsubq_u8(v92[1], v72);
    *v92 = vqsubq_u8(*v92, v72);
    v92[1] = v93;
    v94 = (uint8x16_t *)((char *)v92 + a3);
    v95 = vqsubq_u8(v94[1], v72);
    *v94 = vqsubq_u8(*v94, v72);
    v94[1] = v95;
    v96 = (uint8x16_t *)((char *)v94 + a3);
    v97 = vqsubq_u8(v96[1], v72);
    *v96 = vqsubq_u8(*v96, v72);
    v96[1] = v97;
    v98 = (uint8x16_t *)((char *)v96 + a3);
    v99 = vqsubq_u8(v98[1], v72);
    *v98 = vqsubq_u8(*v98, v72);
    v98[1] = v99;
    v100 = (uint8x16_t *)((char *)v98 + a3);
    v101 = vqsubq_u8(v100[1], v72);
    *v100 = vqsubq_u8(*v100, v72);
    v100[1] = v101;
    v102 = (uint8x16_t *)((char *)v100 + a3);
    v103 = vqsubq_u8(v102[1], v72);
    *v102 = vqsubq_u8(*v102, v72);
    v102[1] = v103;
    v104 = (uint8x16_t *)((char *)v102 + a3);
    v105 = vqsubq_u8(v104[1], v72);
    *v104 = vqsubq_u8(*v104, v72);
    v104[1] = v105;
    v106 = (uint8x16_t *)((char *)v104 + a3);
    v107 = vqsubq_u8(v106[1], v72);
    *v106 = vqsubq_u8(*v106, v72);
    v106[1] = v107;
    v108 = (uint8x16_t *)((char *)v106 + a3);
    v109 = vqsubq_u8(v108[1], v72);
    *v108 = vqsubq_u8(*v108, v72);
    v108[1] = v109;
    v110 = (uint8x16_t *)((char *)v108 + a3);
    v111 = vqsubq_u8(v110[1], v72);
    *v110 = vqsubq_u8(*v110, v72);
    v110[1] = v111;
    v112 = (uint8x16_t *)((char *)v110 + a3);
    v113 = vqsubq_u8(v112[1], v72);
    *v112 = vqsubq_u8(*v112, v72);
    v112[1] = v113;
    v114 = (uint8x16_t *)((char *)v112 + a3);
    v115 = vqsubq_u8(v114[1], v72);
    *v114 = vqsubq_u8(*v114, v72);
    v114[1] = v115;
    v116 = (uint8x16_t *)((char *)v114 + a3);
    v117 = vqsubq_u8(v116[1], v72);
    *v116 = vqsubq_u8(*v116, v72);
    v116[1] = v117;
    v118 = (uint8x16_t *)((char *)v116 + a3);
    v119 = vqsubq_u8(v118[1], v72);
    *v118 = vqsubq_u8(*v118, v72);
    v118[1] = v119;
    v120 = (uint8x16_t *)((char *)v118 + a3);
    v121 = vqsubq_u8(v120[1], v72);
    *v120 = vqsubq_u8(*v120, v72);
    v120[1] = v121;
    v122 = (uint8x16_t *)((char *)v120 + a3);
    v123 = vqsubq_u8(v122[1], v72);
    *v122 = vqsubq_u8(*v122, v72);
    v122[1] = v123;
    v124 = (uint8x16_t *)((char *)v122 + a3);
    v125 = vqsubq_u8(v124[1], v72);
    *v124 = vqsubq_u8(*v124, v72);
    v124[1] = v125;
    v126 = (uint8x16_t *)((char *)v124 + a3);
    v127 = vqsubq_u8(v126[1], v72);
    *v126 = vqsubq_u8(*v126, v72);
    v126[1] = v127;
    v128 = (uint8x16_t *)((char *)v126 + a3);
    v129 = vqsubq_u8(v128[1], v72);
    *v128 = vqsubq_u8(*v128, v72);
    v128[1] = v129;
    v130 = (uint8x16_t *)((char *)v128 + a3);
    v131 = vqsubq_u8(v130[1], v72);
    *v130 = vqsubq_u8(*v130, v72);
    v130[1] = v131;
    v132 = (uint8x16_t *)((char *)v130 + a3);
    v133 = vqsubq_u8(v132[1], v72);
    *v132 = vqsubq_u8(*v132, v72);
    v132[1] = v133;
    v134 = (uint8x16_t *)((char *)v132 + a3);
    v135 = vqsubq_u8(*v134, v72);
    result = vqsubq_u8(v134[1], v72);
    *v134 = v135;
    v134[1] = result;
  }
  else
  {
    v5 = v4 >> 6;
    if (v5 >= 255)
      v5 = 255;
    v6 = (uint8x16_t)vdupq_n_s8(v5 & ~(v5 >> 31));
    v7 = vqaddq_u8(a2[1], v6);
    *a2 = vqaddq_u8(*a2, v6);
    a2[1] = v7;
    v8 = (uint8x16_t *)((char *)a2 + a3);
    v9 = vqaddq_u8(v8[1], v6);
    *v8 = vqaddq_u8(*v8, v6);
    v8[1] = v9;
    v10 = (uint8x16_t *)((char *)v8 + a3);
    v11 = vqaddq_u8(v10[1], v6);
    *v10 = vqaddq_u8(*v10, v6);
    v10[1] = v11;
    v12 = (uint8x16_t *)((char *)v10 + a3);
    v13 = vqaddq_u8(v12[1], v6);
    *v12 = vqaddq_u8(*v12, v6);
    v12[1] = v13;
    v14 = (uint8x16_t *)((char *)v12 + a3);
    v15 = vqaddq_u8(v14[1], v6);
    *v14 = vqaddq_u8(*v14, v6);
    v14[1] = v15;
    v16 = (uint8x16_t *)((char *)v14 + a3);
    v17 = vqaddq_u8(v16[1], v6);
    *v16 = vqaddq_u8(*v16, v6);
    v16[1] = v17;
    v18 = (uint8x16_t *)((char *)v16 + a3);
    v19 = vqaddq_u8(v18[1], v6);
    *v18 = vqaddq_u8(*v18, v6);
    v18[1] = v19;
    v20 = (uint8x16_t *)((char *)v18 + a3);
    v21 = vqaddq_u8(v20[1], v6);
    *v20 = vqaddq_u8(*v20, v6);
    v20[1] = v21;
    v22 = (uint8x16_t *)((char *)v20 + a3);
    v23 = vqaddq_u8(v22[1], v6);
    *v22 = vqaddq_u8(*v22, v6);
    v22[1] = v23;
    v24 = (uint8x16_t *)((char *)v22 + a3);
    v25 = vqaddq_u8(v24[1], v6);
    *v24 = vqaddq_u8(*v24, v6);
    v24[1] = v25;
    v26 = (uint8x16_t *)((char *)v24 + a3);
    v27 = vqaddq_u8(v26[1], v6);
    *v26 = vqaddq_u8(*v26, v6);
    v26[1] = v27;
    v28 = (uint8x16_t *)((char *)v26 + a3);
    v29 = vqaddq_u8(v28[1], v6);
    *v28 = vqaddq_u8(*v28, v6);
    v28[1] = v29;
    v30 = (uint8x16_t *)((char *)v28 + a3);
    v31 = vqaddq_u8(v30[1], v6);
    *v30 = vqaddq_u8(*v30, v6);
    v30[1] = v31;
    v32 = (uint8x16_t *)((char *)v30 + a3);
    v33 = vqaddq_u8(v32[1], v6);
    *v32 = vqaddq_u8(*v32, v6);
    v32[1] = v33;
    v34 = (uint8x16_t *)((char *)v32 + a3);
    v35 = vqaddq_u8(v34[1], v6);
    *v34 = vqaddq_u8(*v34, v6);
    v34[1] = v35;
    v36 = (uint8x16_t *)((char *)v34 + a3);
    v37 = vqaddq_u8(v36[1], v6);
    *v36 = vqaddq_u8(*v36, v6);
    v36[1] = v37;
    v38 = (uint8x16_t *)((char *)v36 + a3);
    v39 = vqaddq_u8(v38[1], v6);
    *v38 = vqaddq_u8(*v38, v6);
    v38[1] = v39;
    v40 = (uint8x16_t *)((char *)v38 + a3);
    v41 = vqaddq_u8(v40[1], v6);
    *v40 = vqaddq_u8(*v40, v6);
    v40[1] = v41;
    v42 = (uint8x16_t *)((char *)v40 + a3);
    v43 = vqaddq_u8(v42[1], v6);
    *v42 = vqaddq_u8(*v42, v6);
    v42[1] = v43;
    v44 = (uint8x16_t *)((char *)v42 + a3);
    v45 = vqaddq_u8(v44[1], v6);
    *v44 = vqaddq_u8(*v44, v6);
    v44[1] = v45;
    v46 = (uint8x16_t *)((char *)v44 + a3);
    v47 = vqaddq_u8(v46[1], v6);
    *v46 = vqaddq_u8(*v46, v6);
    v46[1] = v47;
    v48 = (uint8x16_t *)((char *)v46 + a3);
    v49 = vqaddq_u8(v48[1], v6);
    *v48 = vqaddq_u8(*v48, v6);
    v48[1] = v49;
    v50 = (uint8x16_t *)((char *)v48 + a3);
    v51 = vqaddq_u8(v50[1], v6);
    *v50 = vqaddq_u8(*v50, v6);
    v50[1] = v51;
    v52 = (uint8x16_t *)((char *)v50 + a3);
    v53 = vqaddq_u8(v52[1], v6);
    *v52 = vqaddq_u8(*v52, v6);
    v52[1] = v53;
    v54 = (uint8x16_t *)((char *)v52 + a3);
    v55 = vqaddq_u8(v54[1], v6);
    *v54 = vqaddq_u8(*v54, v6);
    v54[1] = v55;
    v56 = (uint8x16_t *)((char *)v54 + a3);
    v57 = vqaddq_u8(v56[1], v6);
    *v56 = vqaddq_u8(*v56, v6);
    v56[1] = v57;
    v58 = (uint8x16_t *)((char *)v56 + a3);
    v59 = vqaddq_u8(v58[1], v6);
    *v58 = vqaddq_u8(*v58, v6);
    v58[1] = v59;
    v60 = (uint8x16_t *)((char *)v58 + a3);
    v61 = vqaddq_u8(v60[1], v6);
    *v60 = vqaddq_u8(*v60, v6);
    v60[1] = v61;
    v62 = (uint8x16_t *)((char *)v60 + a3);
    v63 = vqaddq_u8(v62[1], v6);
    *v62 = vqaddq_u8(*v62, v6);
    v62[1] = v63;
    v64 = (uint8x16_t *)((char *)v62 + a3);
    v65 = vqaddq_u8(v64[1], v6);
    *v64 = vqaddq_u8(*v64, v6);
    v64[1] = v65;
    v66 = (uint8x16_t *)((char *)v64 + a3);
    v67 = vqaddq_u8(v66[1], v6);
    *v66 = vqaddq_u8(*v66, v6);
    v66[1] = v67;
    v68 = (uint8x16_t *)((char *)v66 + a3);
    v69 = vqaddq_u8(*v68, v6);
    result = vqaddq_u8(v68[1], v6);
    *v68 = v69;
    v68[1] = result;
  }
  return result;
}

int16x8_t vpx_idct32_6_neon(int16x8_t *a1, int16x8_t *a2)
{
  int16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int32x4_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int32x4_t v65;
  uint32x4_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int32x4_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int16x8_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t result;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int32x4_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  uint32x4_t v145;
  int16x8_t v146;
  uint32x4_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  uint32x4_t v153;
  int16x8_t v154;
  int32x4_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int32x4_t v158;
  int16x8_t v159;

  v2 = vuzp1q_s16(*a1, a1[1]);
  v3 = vuzp1q_s16(a1[8], a1[9]);
  v4 = vuzp1q_s16(a1[16], a1[17]);
  v5 = vuzp1q_s16(a1[24], a1[25]);
  v6 = vuzp1q_s16(a1[32], a1[33]);
  v7 = vuzp1q_s16(a1[40], a1[41]);
  v8 = vuzp1q_s16(a1[48], a1[49]);
  v9 = vuzp1q_s16(a1[56], a1[57]);
  v10 = (int32x4_t)vtrn1q_s16(v2, v3);
  v11 = (int32x4_t)vtrn2q_s16(v2, v3);
  v12 = (int32x4_t)vtrn1q_s16(v4, v5);
  v13 = (int32x4_t)vtrn2q_s16(v4, v5);
  v14 = (int32x4_t)vtrn1q_s16(v6, v7);
  v15 = (int32x4_t)vtrn2q_s16(v6, v7);
  v16 = (int32x4_t)vtrn1q_s16(v8, v9);
  v17 = (int32x4_t)vtrn2q_s16(v8, v9);
  v18 = (int64x2_t)vtrn1q_s32(v10, v12);
  v19 = (int64x2_t)vtrn2q_s32(v10, v12);
  v20 = (int64x2_t)vtrn1q_s32(v11, v13);
  v21 = (int64x2_t)vtrn2q_s32(v11, v13);
  v22 = (int64x2_t)vtrn1q_s32(v14, v16);
  v23 = (int64x2_t)vtrn2q_s32(v14, v16);
  v24 = (int64x2_t)vtrn1q_s32(v15, v17);
  v25 = (int64x2_t)vtrn2q_s32(v15, v17);
  v26 = (int16x8_t)vzip1q_s64(v18, v22);
  v27 = (int16x8_t)vzip2q_s64(v18, v22);
  v28 = (int16x8_t)vzip1q_s64(v20, v24);
  v29 = (int16x8_t)vzip2q_s64(v20, v24);
  v30 = (int16x8_t)vzip1q_s64(v19, v23);
  v31 = (int16x8_t)vzip1q_s64(v21, v25);
  v32 = vqrdmulhq_s16(v28, vdupq_n_s16(0x648u));
  v33 = vqrdmulhq_s16(v28, vdupq_n_s16(0x7FD8u));
  v34 = vqrdmulhq_s16(v29, vdupq_n_s16(0x1F1Au));
  v35 = vqrdmulhq_s16(v29, vdupq_n_s16(0x7C2Au));
  v36 = vqrdmulhq_s16(v31, vdupq_n_s16(0xED38u));
  v37 = vqrdmulhq_s16(v31, vdupq_n_s16(0x7E9Eu));
  v38 = vqrdmulhq_s16(v30, vdupq_n_s16(0xC8Cu));
  v39 = vqrdmulhq_s16(v30, vdupq_n_s16(0x7F62u));
  v40 = vqrdmulhq_s16(v27, vdupq_n_s16(0x18F8u));
  v41 = vdupq_n_s16(0xC13Bu);
  v42 = vdupq_n_s16(0xC7Cu);
  v43 = vqrdmulhq_s16(v27, vdupq_n_s16(0x7D8Au));
  v44 = vmlal_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v42.i8), *(int16x4_t *)v32.i8, *(int16x4_t *)v41.i8);
  v45 = vmlal_high_s16(vmull_high_s16(v33, v42), v32, v41);
  v46 = vdupq_n_s16(0x3EC5u);
  v47 = vmlal_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v46.i8), *(int16x4_t *)v32.i8, *(int16x4_t *)v42.i8);
  v48 = vmlal_high_s16(vmull_high_s16(v33, v46), v32, v42);
  v49 = vdupq_n_s16(0xDC72u);
  v50 = vdupq_n_s16(0x3537u);
  v51 = vmlal_s16(vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v50.i8), *(int16x4_t *)v34.i8, *(int16x4_t *)v49.i8);
  v52 = vdupq_n_s16(0x238Eu);
  v53 = vmlal_high_s16(vmull_high_s16(v35, v50), v34, v49);
  v54 = vmlal_s16(vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v52.i8), *(int16x4_t *)v34.i8, *(int16x4_t *)v50.i8);
  v55 = vmlal_high_s16(vmull_high_s16(v35, v52), v34, v50);
  v56 = vdupq_n_s16(0xCAC9u);
  v57 = vmlal_s16(vmull_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v49.i8), *(int16x4_t *)v36.i8, *(int16x4_t *)v56.i8);
  v58 = vmlal_high_s16(vmull_high_s16(v37, v49), v36, v56);
  v59 = vmlal_s16(vmull_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v50.i8), *(int16x4_t *)v36.i8, *(int16x4_t *)v49.i8);
  v60 = vmlal_high_s16(vmull_high_s16(v37, v50), v36, v49);
  v61 = vqrdmulhq_s16(v26, vdupq_n_s16(0x5A82u));
  v62 = vdupq_n_s16(0xC4DFu);
  v63 = vdupq_n_s16(0x187Eu);
  v64 = vmlal_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v63.i8), *(int16x4_t *)v38.i8, *(int16x4_t *)v62.i8);
  v159 = v39;
  v65 = vmlal_high_s16(vmull_high_s16(v39, v63), v38, v62);
  v50.i64[0] = 0x200000002000;
  v50.i64[1] = 0x200000002000;
  v66 = (uint32x4_t)vaddq_s32(v64, (int32x4_t)v50);
  v153 = (uint32x4_t)vaddq_s32(v65, (int32x4_t)v50);
  v150 = vrshrn_high_n_s32(vrshrn_n_s32(v64, 0xEuLL), v65, 0xEuLL);
  v67 = vdupq_n_s16(0x3B21u);
  v68 = vmlal_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v67.i8), *(int16x4_t *)v38.i8, *(int16x4_t *)v63.i8);
  v69 = vmlal_high_s16(vmull_high_s16(v39, v67), v38, v63);
  v147 = (uint32x4_t)vaddq_s32(v68, (int32x4_t)v50);
  v145 = (uint32x4_t)vaddq_s32(v69, (int32x4_t)v50);
  v152 = vrshrn_high_n_s32(vrshrn_n_s32(v68, 0xEuLL), v69, 0xEuLL);
  *(int16x4_t *)v51.i8 = vrshrn_n_s32(v51, 0xEuLL);
  *(int16x4_t *)v68.i8 = vrshrn_n_s32(v57, 0xEuLL);
  *(int16x4_t *)v69.i8 = vsub_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v51.i8);
  v157 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v68.i8, v58, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v51.i8, v53, 0xEuLL));
  v70 = vsubq_s16(v36, v34);
  v149 = vaddq_s16(v36, v34);
  *(int16x4_t *)v51.i8 = vrshrn_n_s32(v54, 0xEuLL);
  *(int16x4_t *)v36.i8 = vrshrn_n_s32(v59, 0xEuLL);
  *(int16x4_t *)v52.i8 = vsub_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v51.i8);
  v71 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v36.i8, v60, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v51.i8, v55, 0xEuLL));
  v138 = vaddq_s16(v37, v35);
  v72 = vsubq_s16(v37, v35);
  v73 = vdupq_n_s32(0x2D41u);
  v74 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v40.i8), v73), 0xEuLL), vmulq_s32(vsubl_high_s16(v43, v40), v73), 0xEuLL);
  v75 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v40.i8), v73), 0xEuLL), vmulq_s32(vaddl_high_s16(v43, v40), v73), 0xEuLL);
  *(int16x4_t *)v44.i8 = vrshrn_n_s32(v44, 0xEuLL);
  *(int16x4_t *)v39.i8 = vrshrn_n_s32(v47, 0xEuLL);
  v76 = vmlal_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v63.i8), *(int16x4_t *)v44.i8, *(int16x4_t *)v62.i8);
  v77 = vmlal_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v67.i8), *(int16x4_t *)v44.i8, *(int16x4_t *)v63.i8);
  v156 = vrshrn_high_n_s32(*(int16x4_t *)v44.i8, v45, 0xEuLL);
  *(int16x4_t *)v37.i8 = vrshrn_n_s32(v45, 0xEuLL);
  v78 = vrshrn_high_n_s32(*(int16x4_t *)v39.i8, v48, 0xEuLL);
  *(int16x4_t *)v45.i8 = vrshrn_n_s32(v48, 0xEuLL);
  v79 = vmlal_s16(vmull_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v63.i8), *(int16x4_t *)v37.i8, *(int16x4_t *)v62.i8);
  v80 = vmlal_s16(vmull_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v67.i8), *(int16x4_t *)v37.i8, *(int16x4_t *)v63.i8);
  v81 = vdupq_n_s16(0xE782u);
  v82 = vmlal_s16(vmull_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v62.i8), *(int16x4_t *)v70.i8, *(int16x4_t *)v81.i8);
  v158 = vmlal_high_s16(vmull_high_s16(v72, v62), v70, v81);
  v83 = vmlal_s16(vmull_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v63.i8), *(int16x4_t *)v70.i8, *(int16x4_t *)v62.i8);
  v84 = vmlal_high_s16(vmull_high_s16(v72, v63), v70, v62);
  *(int16x4_t *)v72.i8 = vsub_s16(vrshrn_n_s32(v58, 0xEuLL), vrshrn_n_s32(v53, 0xEuLL));
  *(int16x4_t *)v55.i8 = vsub_s16(vrshrn_n_s32(v60, 0xEuLL), vrshrn_n_s32(v55, 0xEuLL));
  v85 = vmlal_s16(vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v62.i8), *(int16x4_t *)v69.i8, *(int16x4_t *)v81.i8);
  v155 = vmlal_s16(vmull_s16(*(int16x4_t *)v55.i8, *(int16x4_t *)v62.i8), *(int16x4_t *)v72.i8, *(int16x4_t *)v81.i8);
  v86 = vmlal_s16(vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v63.i8), *(int16x4_t *)v69.i8, *(int16x4_t *)v62.i8);
  v87 = vmlal_s16(vmull_s16(*(int16x4_t *)v55.i8, *(int16x4_t *)v63.i8), *(int16x4_t *)v72.i8, *(int16x4_t *)v62.i8);
  v140 = v32;
  v88 = vmlal_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v63.i8), *(int16x4_t *)v32.i8, *(int16x4_t *)v62.i8);
  v135 = vmlal_high_s16(vmull_high_s16(v33, v63), v32, v62);
  v89 = vmlal_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v67.i8), *(int16x4_t *)v32.i8, *(int16x4_t *)v63.i8);
  v90 = vmlal_high_s16(vmull_high_s16(v33, v67), v32, v63);
  v143 = vaddq_s16(v61, v40);
  v91 = vsubq_s16(v61, v40);
  v144 = vaddq_s16(v74, v61);
  v92 = vsubq_s16(v61, v74);
  v93 = vsubq_s16(v61, v75);
  v141 = vaddq_s16(v61, v43);
  v142 = vaddq_s16(v75, v61);
  v94 = vsubq_s16(v61, v43);
  v95 = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32(v147, 0xEuLL), 0x10uLL), 0x10uLL);
  v96 = vshlq_n_s32((int32x4_t)vshrq_n_u32(v66, 0xEuLL), 0x10uLL);
  v97 = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32(v145, 0xEuLL), 0x10uLL), 0x10uLL);
  v98 = vshlq_n_s32((int32x4_t)vshrq_n_u32(v153, 0xEuLL), 0x10uLL);
  v99 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubq_s32(v95, vshrq_n_s32(v96, 0x10uLL)), v73), 0xEuLL), vmulq_s32(vsubq_s32(v97, vshrq_n_s32(v98, 0x10uLL)), v73), 0xEuLL);
  v148 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsraq_n_s32(v95, v96, 0x10uLL), v73), 0xEuLL), vmulq_s32(vsraq_n_s32(v97, v98, 0x10uLL), v73), 0xEuLL);
  v100 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v38.i8), v73), 0xEuLL), vmulq_s32(vsubl_high_s16(v159, v38), v73), 0xEuLL);
  v146 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v38.i8), v73), 0xEuLL), vmulq_s32(vaddl_high_s16(v159, v38), v73), 0xEuLL);
  *(int16x4_t *)v89.i8 = vrshrn_n_s32(v89, 0xEuLL);
  *(int16x4_t *)v83.i8 = vrshrn_n_s32(v83, 0xEuLL);
  *(int16x4_t *)v66.i8 = vsub_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v83.i8);
  v101 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v83.i8, v84, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v89.i8, v90, 0xEuLL));
  *(int16x4_t *)v89.i8 = vrshrn_n_s32(v77, 0xEuLL);
  *(int16x4_t *)v83.i8 = vrshrn_n_s32(v86, 0xEuLL);
  *(int16x4_t *)v86.i8 = vsub_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v83.i8);
  v154 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v83.i8, v87, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v89.i8, v80, 0xEuLL));
  v102 = vsubq_s16(v78, v71);
  v103 = vsubq_s16(v33, v138);
  v129 = vaddq_s16(v71, v78);
  v130 = vaddq_s16(v138, v33);
  v104 = vaddq_s16(v94, v38);
  v137 = vsubq_s16(v94, v38);
  v136 = vsubq_s16(v93, v150);
  v133 = vaddq_s16(v93, v150);
  v134 = vaddq_s16(v99, v92);
  v139 = vsubq_s16(v92, v99);
  v105 = vaddq_s16(v100, v91);
  v151 = vsubq_s16(v91, v100);
  *(int16x4_t *)v100.i8 = vsub_s16(vrshrn_n_s32(v90, 0xEuLL), vrshrn_n_s32(v84, 0xEuLL));
  *(int16x4_t *)v84.i8 = vsub_s16(vrshrn_n_s32(v135, 0xEuLL), vrshrn_n_s32(v158, 0xEuLL));
  *(int16x4_t *)v83.i8 = vrshrn_n_s32(v88, 0xEuLL);
  *(int16x4_t *)v94.i8 = vrshrn_n_s32(v82, 0xEuLL);
  *(int16x4_t *)v93.i8 = vsub_s16(*(int16x4_t *)v83.i8, *(int16x4_t *)v94.i8);
  v106 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v93.i8), v73), 0xEuLL), vmulq_s32(vsubl_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v84.i8), v73), 0xEuLL);
  v126 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v93.i8), v73), 0xEuLL), vmulq_s32(vaddl_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v84.i8), v73), 0xEuLL);
  *(int16x4_t *)v100.i8 = vsub_s16(vrshrn_n_s32(v80, 0xEuLL), vrshrn_n_s32(v87, 0xEuLL));
  *(int16x4_t *)v93.i8 = vrshrn_n_s32(v76, 0xEuLL);
  v107 = vrshrn_high_n_s32(*(int16x4_t *)v93.i8, v79, 0xEuLL);
  *(int16x4_t *)v80.i8 = vsub_s16(vrshrn_n_s32(v79, 0xEuLL), vrshrn_n_s32(v155, 0xEuLL));
  *(int16x4_t *)v85.i8 = vrshrn_n_s32(v85, 0xEuLL);
  *(int16x4_t *)v93.i8 = vsub_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v85.i8);
  v108 = vsubl_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v93.i8);
  v109 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v93.i8), v73), 0xEuLL), vmulq_s32(vaddl_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v80.i8), v73), 0xEuLL);
  v110 = vsubq_s16(v156, v157);
  v111 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v110.i8), v73), 0xEuLL), vmulq_s32(vsubl_high_s16(v102, v110), v73), 0xEuLL);
  v112 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v110.i8), v73), 0xEuLL), vmulq_s32(vaddl_high_s16(v102, v110), v73), 0xEuLL);
  v113 = vsubq_s16(v140, v149);
  v114 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v113.i8), v73), 0xEuLL), vmulq_s32(vsubl_high_s16(v103, v113), v73), 0xEuLL);
  v131 = vaddq_s16(v142, v152);
  v132 = vaddq_s16(v141, v159);
  *a2 = vaddq_s16(v132, v130);
  a2[1] = vaddq_s16(v131, v129);
  v127 = vaddq_s16(v146, v143);
  v128 = vaddq_s16(v148, v144);
  a2[2] = vaddq_s16(v128, v154);
  a2[3] = vaddq_s16(v127, v101);
  a2[4] = vaddq_s16(v126, v105);
  a2[5] = vaddq_s16(v109, v134);
  v115 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v113.i8), v73), 0xEuLL), vmulq_s32(vaddl_high_s16(v103, v113), v73), 0xEuLL);
  a2[6] = vaddq_s16(v112, v133);
  a2[7] = vaddq_s16(v115, v104);
  a2[8] = vaddq_s16(v114, v137);
  a2[9] = vaddq_s16(v111, v136);
  v116 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(v108, v73), 0xEuLL), vmulq_s32(vsubl_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v80.i8), v73), 0xEuLL);
  a2[10] = vaddq_s16(v116, v139);
  a2[11] = vaddq_s16(v106, v151);
  v117 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v85.i8, v155, 0xEuLL), v107);
  v118 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v94.i8, v158, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v83.i8, v135, 0xEuLL));
  v119 = vsubq_s16(v143, v146);
  v120 = vsubq_s16(v144, v148);
  a2[12] = vaddq_s16(v119, v118);
  a2[13] = vaddq_s16(v120, v117);
  v121 = vaddq_s16(v149, v140);
  v122 = vaddq_s16(v157, v156);
  v123 = vsubq_s16(v142, v152);
  v124 = vsubq_s16(v141, v159);
  a2[14] = vaddq_s16(v123, v122);
  a2[15] = vaddq_s16(v124, v121);
  a2[16] = vsubq_s16(v124, v121);
  a2[17] = vsubq_s16(v123, v122);
  a2[18] = vsubq_s16(v120, v117);
  a2[19] = vsubq_s16(v119, v118);
  a2[20] = vsubq_s16(v151, v106);
  a2[21] = vsubq_s16(v139, v116);
  a2[22] = vsubq_s16(v136, v111);
  a2[23] = vsubq_s16(v137, v114);
  a2[24] = vsubq_s16(v104, v115);
  a2[25] = vsubq_s16(v133, v112);
  a2[26] = vsubq_s16(v134, v109);
  a2[27] = vsubq_s16(v105, v126);
  a2[28] = vsubq_s16(v127, v101);
  a2[29] = vsubq_s16(v128, v154);
  result = vsubq_s16(v131, v129);
  a2[30] = result;
  a2[31] = vsubq_s16(v132, v130);
  return result;
}

int16x8_t *vpx_idct32_8_neon(int16x8_t *result, int16x8_t *a2, int a3, int a4)
{
  int16x8_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int32x4_t v44;
  int16x4_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int16x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int32x4_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x4_t v69;
  int16x8_t v70;
  int16x4_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int32x4_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  uint64_t v169;
  int16x8_t *v170;
  int16x8_t *v171;
  int16x8_t *v172;
  int16x8_t *v173;
  int16x8_t *v174;
  int16x8_t *v175;
  int16x8_t *v176;
  int16x8_t *v177;
  int16x8_t *v178;
  int16x8_t *v179;
  int16x8_t *v180;
  int16x8_t *v181;
  int16x8_t *v182;
  int16x8_t *v183;
  int16x8_t *v184;
  int16x8_t *v185;
  int16x8_t *v186;
  int16x8_t *v187;
  int16x8_t *v188;
  int16x8_t *v189;
  int16x8_t *v190;
  int16x8_t *v191;
  int16x8_t *v192;
  int16x8_t *v193;
  int16x8_t *v194;
  int16x8_t *v195;
  int16x8_t *v196;
  int16x8_t *v197;
  int16x8_t *v198;
  int16x8_t v199;
  uint8x8_t *v200;
  int16x8_t v201;
  int16x8_t v202;
  uint8x8_t *v203;
  int16x8_t v204;
  uint8x8_t *v205;
  int16x8_t v206;
  uint8x8_t *v207;
  int16x8_t v208;
  uint8x8_t *v209;
  int16x8_t v210;
  uint8x8_t *v211;
  int16x8_t v212;
  uint8x8_t *v213;
  int16x8_t v214;
  uint64_t v215;
  int8x8_t *v216;
  int8x8_t *v217;
  int8x8_t *v218;
  int8x8_t *v219;
  int8x8_t *v220;
  int8x8_t *v221;
  int8x8_t *v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t *v225;
  uint8x8_t *v226;
  int16x8_t v227;
  uint8x8_t v228;
  uint8x8_t *v229;
  int16x8_t v230;
  uint8x8_t v231;
  uint8x8_t *v232;
  int16x8_t v233;
  uint8x8_t v234;
  uint8x8_t *v235;
  int16x8_t v236;
  uint8x8_t v237;
  uint8x8_t *v238;
  int16x8_t v239;
  int16x8_t v240;
  int8x8_t *v241;
  int8x8_t *v242;
  int8x8_t *v243;
  int8x8_t *v244;
  int8x8_t *v245;
  int8x8_t *v246;
  int8x8_t *v247;
  int16x8_t *v248;
  uint64_t *v249;
  uint64_t *v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t *v253;
  uint64_t *v254;
  uint8x8_t *v255;
  int16x8_t v256;
  int8x8_t *v257;
  int8x8_t *v258;
  int8x8_t *v259;
  int8x8_t *v260;
  int8x8_t *v261;
  int8x8_t *v262;
  int8x8_t *v263;
  uint64_t *v264;
  uint64_t *v265;
  uint64_t *v266;
  uint64_t *v267;
  uint64_t *v268;
  uint64_t *v269;
  uint8x8_t *v270;
  int16x8_t v271;
  uint8x8_t v272;
  uint8x8_t *v273;
  int16x8_t v274;
  int8x8_t *v275;
  int8x8_t *v276;
  int8x8_t *v277;
  int8x8_t *v278;
  int8x8_t *v279;
  int8x8_t *v280;
  int8x8_t *v281;
  int16x8_t v282;
  int16x8_t v283;
  int16x8_t v284;
  int16x8_t v285;
  int16x8_t v286;
  int16x8_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int16x8_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int16x8_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int16x8_t v296;
  int32x4_t v297;
  int16x8_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int16x8_t v301;
  int32x4_t v302;
  int16x8_t v303;
  int32x4_t v304;
  int32x4_t v305;
  int32x4_t v306;
  int32x4_t v307;
  int16x8_t v308;
  int16x8_t v309;
  int16x8_t v310;
  int16x8_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int16x8_t v316;
  int16x8_t v317;
  int16x8_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int16x8_t v324;
  int16x8_t v325;
  int16x8_t v326;
  int16x8_t v327;
  int16x8_t v328;
  int16x8_t v329;
  int16x8_t v330;
  int16x8_t v331;
  int16x8_t v332;
  int16x8_t v333;
  int16x8_t v334;

  v4 = result[1];
  v5 = (int32x4_t)vtrn1q_s16(*result, v4);
  v6 = (int32x4_t)vtrn2q_s16(*result, v4);
  v7 = result[2];
  v8 = result[3];
  v9 = (int32x4_t)vtrn1q_s16(v7, v8);
  v10 = (int32x4_t)vtrn2q_s16(v7, v8);
  v11 = result[4];
  v12 = result[5];
  v13 = (int32x4_t)vtrn1q_s16(v11, v12);
  v14 = (int32x4_t)vtrn2q_s16(v11, v12);
  v15 = result[6];
  v16 = result[7];
  v17 = (int32x4_t)vtrn1q_s16(v15, v16);
  v18 = (int32x4_t)vtrn2q_s16(v15, v16);
  v19 = (int64x2_t)vtrn1q_s32(v5, v9);
  v20 = (int64x2_t)vtrn2q_s32(v5, v9);
  v21 = (int64x2_t)vtrn1q_s32(v6, v10);
  v22 = (int64x2_t)vtrn2q_s32(v6, v10);
  v23 = (int64x2_t)vtrn1q_s32(v13, v17);
  v24 = (int64x2_t)vtrn2q_s32(v13, v17);
  v25 = (int64x2_t)vtrn1q_s32(v14, v18);
  v26 = (int64x2_t)vtrn2q_s32(v14, v18);
  v27 = (int16x8_t)vzip1q_s64(v19, v23);
  v28 = (int16x8_t)vzip2q_s64(v19, v23);
  v29 = (int16x8_t)vzip1q_s64(v21, v25);
  v30 = (int16x8_t)vzip2q_s64(v21, v25);
  v31 = (int16x8_t)vzip1q_s64(v20, v24);
  v32 = (int16x8_t)vzip2q_s64(v20, v24);
  v33 = (int16x8_t)vzip1q_s64(v22, v26);
  v34 = (int16x8_t)vzip2q_s64(v22, v26);
  v35 = vqrdmulhq_s16(v29, vdupq_n_s16(0x648u));
  v36 = vqrdmulhq_s16(v34, vdupq_n_s16(0xD4E0u));
  v37 = vqrdmulhq_s16(v34, vdupq_n_s16(0x7884u));
  v38 = vqrdmulhq_s16(v30, vdupq_n_s16(0x1F1Au));
  v39 = vqrdmulhq_s16(v30, vdupq_n_s16(0x7C2Au));
  v40 = vqrdmulhq_s16(v33, vdupq_n_s16(0xED38u));
  v41 = vqrdmulhq_s16(v33, vdupq_n_s16(0x7E9Eu));
  v321 = vqrdmulhq_s16(v31, vdupq_n_s16(0x7F62u));
  v316 = vqrdmulhq_s16(v32, vdupq_n_s16(0x7A7Eu));
  v318 = vqrdmulhq_s16(v32, vdupq_n_s16(0xDAD8u));
  v326 = vqrdmulhq_s16(v28, vdupq_n_s16(0x18F8u));
  v329 = vqrdmulhq_s16(v31, vdupq_n_s16(0xC8Cu));
  v323 = vqrdmulhq_s16(v28, vdupq_n_s16(0x7D8Au));
  v42 = vdupq_n_s16(0xC13Bu);
  v43 = vdupq_n_s16(0xC7Cu);
  v309 = vqrdmulhq_s16(v29, vdupq_n_s16(0x7FD8u));
  v44 = vmlal_high_s16(vmull_high_s16(v309, v43), v35, v42);
  v45 = vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v309.i8, *(int16x4_t *)v43.i8), *(int16x4_t *)v35.i8, *(int16x4_t *)v42.i8), 0xEuLL);
  v46 = vdupq_n_s16(0x3EC5u);
  v47 = vmlal_s16(vmull_s16(*(int16x4_t *)v309.i8, *(int16x4_t *)v46.i8), *(int16x4_t *)v35.i8, *(int16x4_t *)v43.i8);
  v48 = vmlal_high_s16(vmull_high_s16(v309, v46), v35, v43);
  v287 = v35;
  v289 = v36;
  v49 = vdupq_n_s16(0xF384u);
  v332 = v37;
  v50 = vmlal_high_s16(vmull_high_s16(v37, v42), v36, v49);
  v51 = vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v42.i8), *(int16x4_t *)v36.i8, *(int16x4_t *)v49.i8), 0xEuLL);
  v52 = vmlal_s16(vmull_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v43.i8), *(int16x4_t *)v36.i8, *(int16x4_t *)v42.i8);
  v53 = vmlal_high_s16(vmull_high_s16(v37, v43), v36, v42);
  v54 = v36;
  v55 = vdupq_n_s16(0xDC72u);
  v56 = vdupq_n_s16(0x3537u);
  v57 = v39;
  v58 = v38;
  v314 = vmlal_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v38.i8, *(int16x4_t *)v55.i8);
  v59 = vmlal_high_s16(vmull_high_s16(v39, v56), v38, v55);
  v60 = vdupq_n_s16(0x238Eu);
  v312 = vmlal_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v60.i8), *(int16x4_t *)v38.i8, *(int16x4_t *)v56.i8);
  v61 = vmlal_high_s16(vmull_high_s16(v39, v60), v38, v56);
  v62 = vdupq_n_s16(0xCAC9u);
  v63 = vmlal_s16(vmull_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v40.i8, *(int16x4_t *)v62.i8);
  v64 = vmlal_high_s16(vmull_high_s16(v41, v55), v40, v62);
  v65 = vmlal_s16(vmull_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v40.i8, *(int16x4_t *)v55.i8);
  v66 = vmlal_high_s16(vmull_high_s16(v41, v56), v40, v55);
  v67 = vqrdmulhq_s16(v27, vdupq_n_s16(0x5A82u));
  *(int16x4_t *)v36.i8 = vsub_s16(v45, v51);
  v68 = vrshrn_high_n_s32(v45, v44, 0xEuLL);
  v69 = vrshrn_n_s32(v47, 0xEuLL);
  v70 = vrshrn_high_n_s32(v51, v50, 0xEuLL);
  v71 = vrshrn_n_s32(v52, 0xEuLL);
  *(int16x4_t *)v38.i8 = vsub_s16(vrshrn_n_s32(v44, 0xEuLL), vrshrn_n_s32(v50, 0xEuLL));
  *(int16x4_t *)v39.i8 = vsub_s16(v69, v71);
  v72 = vrshrn_high_n_s32(v69, v48, 0xEuLL);
  *(int16x4_t *)v44.i8 = vsub_s16(vrshrn_n_s32(v48, 0xEuLL), vrshrn_n_s32(v53, 0xEuLL));
  v73 = vdupq_n_s16(0xC4DFu);
  v74 = vdupq_n_s16(0x187Eu);
  v297 = vmlal_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v74.i8), *(int16x4_t *)v36.i8, *(int16x4_t *)v73.i8);
  v75 = vdupq_n_s16(0x3B21u);
  v307 = vmlal_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v36.i8, *(int16x4_t *)v74.i8);
  v305 = vmlal_s16(vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v74.i8), *(int16x4_t *)v38.i8, *(int16x4_t *)v73.i8);
  v306 = vmlal_s16(vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v38.i8, *(int16x4_t *)v74.i8);
  v76 = vsubq_s16(v35, v54);
  v77 = vsubq_s16(v309, v332);
  v302 = vmlal_s16(vmull_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v74.i8), *(int16x4_t *)v76.i8, *(int16x4_t *)v73.i8);
  v304 = vmlal_high_s16(vmull_high_s16(v77, v74), v76, v73);
  v300 = vmlal_s16(vmull_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v76.i8, *(int16x4_t *)v74.i8);
  v299 = vmlal_high_s16(vmull_high_s16(v77, v75), v76, v74);
  v78 = vdupq_n_s16(0xE782u);
  v79 = v58;
  v80 = vsubq_s16(v40, v58);
  v81 = v57;
  v82 = v41;
  v83 = vsubq_s16(v41, v81);
  v295 = vmlal_s16(vmull_s16(*(int16x4_t *)v83.i8, *(int16x4_t *)v73.i8), *(int16x4_t *)v80.i8, *(int16x4_t *)v78.i8);
  v294 = vmlal_high_s16(vmull_high_s16(v83, v73), v80, v78);
  v292 = vmlal_s16(vmull_s16(*(int16x4_t *)v83.i8, *(int16x4_t *)v74.i8), *(int16x4_t *)v80.i8, *(int16x4_t *)v73.i8);
  v291 = vmlal_high_s16(vmull_high_s16(v83, v74), v80, v73);
  *(int16x4_t *)v80.i8 = vrshrn_n_s32(v314, 0xEuLL);
  *(int16x4_t *)v83.i8 = vrshrn_n_s32(v63, 0xEuLL);
  *(int16x4_t *)v63.i8 = vsub_s16(*(int16x4_t *)v83.i8, *(int16x4_t *)v80.i8);
  v84 = vrshrn_high_n_s32(*(int16x4_t *)v80.i8, v59, 0xEuLL);
  v85 = vrshrn_high_n_s32(*(int16x4_t *)v83.i8, v64, 0xEuLL);
  *(int16x4_t *)v47.i8 = vsub_s16(vrshrn_n_s32(v64, 0xEuLL), vrshrn_n_s32(v59, 0xEuLL));
  *(int16x4_t *)v80.i8 = vrshrn_n_s32(v312, 0xEuLL);
  *(int16x4_t *)v59.i8 = vrshrn_n_s32(v65, 0xEuLL);
  *(int16x4_t *)v64.i8 = vsub_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v80.i8);
  v86 = vrshrn_high_n_s32(*(int16x4_t *)v80.i8, v61, 0xEuLL);
  v87 = vrshrn_high_n_s32(*(int16x4_t *)v59.i8, v66, 0xEuLL);
  *(int16x4_t *)v61.i8 = vsub_s16(vrshrn_n_s32(v66, 0xEuLL), vrshrn_n_s32(v61, 0xEuLL));
  v88 = vmlal_s16(vmull_s16(*(int16x4_t *)v316.i8, *(int16x4_t *)v73.i8), *(int16x4_t *)v318.i8, *(int16x4_t *)v78.i8);
  v89 = vmlal_high_s16(vmull_high_s16(v316, v73), v318, v78);
  v90 = vmlal_s16(vmull_s16(*(int16x4_t *)v64.i8, *(int16x4_t *)v73.i8), *(int16x4_t *)v63.i8, *(int16x4_t *)v78.i8);
  v313 = vmlal_s16(vmull_s16(*(int16x4_t *)v61.i8, *(int16x4_t *)v73.i8), *(int16x4_t *)v47.i8, *(int16x4_t *)v78.i8);
  v91 = vmlal_s16(vmull_s16(*(int16x4_t *)v64.i8, *(int16x4_t *)v74.i8), *(int16x4_t *)v63.i8, *(int16x4_t *)v73.i8);
  v315 = vmlal_s16(vmull_s16(*(int16x4_t *)v61.i8, *(int16x4_t *)v74.i8), *(int16x4_t *)v47.i8, *(int16x4_t *)v73.i8);
  v92 = vmlal_s16(vmull_s16(*(int16x4_t *)v321.i8, *(int16x4_t *)v74.i8), *(int16x4_t *)v329.i8, *(int16x4_t *)v73.i8);
  v93 = vmlal_high_s16(vmull_high_s16(v321, v74), v329, v73);
  v94 = vmlal_s16(vmull_s16(*(int16x4_t *)v321.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v329.i8, *(int16x4_t *)v74.i8);
  v95 = vmlal_high_s16(vmull_high_s16(v321, v75), v329, v74);
  v96 = vmlal_s16(vmull_s16(*(int16x4_t *)v316.i8, *(int16x4_t *)v74.i8), *(int16x4_t *)v318.i8, *(int16x4_t *)v73.i8);
  v97 = vmlal_high_s16(vmull_high_s16(v316, v74), v318, v73);
  v98 = vaddq_s16(v70, v68);
  v99 = vaddq_s16(v85, v84);
  v285 = vaddq_s16(v40, v79);
  v286 = vaddq_s16(v289, v287);
  v288 = vaddq_s16(v87, v86);
  v290 = vaddq_s16(v82, v81);
  v100 = vaddq_s16(vrshrn_high_n_s32(v71, v53, 0xEuLL), v72);
  v333 = vaddq_s16(v332, v309);
  v101 = vdupq_n_s32(0x2D41u);
  v102 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v323.i8, *(int16x4_t *)v326.i8), v101), 0xEuLL), vmulq_s32(vsubl_high_s16(v323, v326), v101), 0xEuLL);
  v103 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v323.i8, *(int16x4_t *)v326.i8), v101), 0xEuLL), vmulq_s32(vaddl_high_s16(v323, v326), v101), 0xEuLL);
  *(int16x4_t *)v86.i8 = vrshrn_n_s32(v92, 0xEuLL);
  *(int16x4_t *)v88.i8 = vrshrn_n_s32(v88, 0xEuLL);
  *(int16x4_t *)v72.i8 = vsub_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v88.i8);
  v104 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v88.i8, v89, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v86.i8, v93, 0xEuLL));
  v310 = vaddq_s16(v318, v329);
  v105 = vsubq_s16(v329, v318);
  *(int16x4_t *)v88.i8 = vrshrn_n_s32(v94, 0xEuLL);
  *(int16x4_t *)v96.i8 = vrshrn_n_s32(v96, 0xEuLL);
  *(int16x4_t *)v82.i8 = vsub_s16(*(int16x4_t *)v88.i8, *(int16x4_t *)v96.i8);
  v330 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v96.i8, v97, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v88.i8, v95, 0xEuLL));
  v106 = vsubq_s16(v321, v316);
  v107 = vaddq_s16(v316, v321);
  v284 = vaddq_s16(v67, v326);
  v108 = vsubq_s16(v67, v326);
  v317 = vaddq_s16(v102, v67);
  v109 = vsubq_s16(v67, v102);
  v319 = vaddq_s16(v103, v67);
  v322 = v107;
  v110 = vsubq_s16(v67, v103);
  v327 = vaddq_s16(v67, v323);
  v111 = vsubq_s16(v67, v323);
  *(int16x4_t *)v102.i8 = vsub_s16(vrshrn_n_s32(v95, 0xEuLL), vrshrn_n_s32(v97, 0xEuLL));
  *(int16x4_t *)v97.i8 = vsub_s16(vrshrn_n_s32(v93, 0xEuLL), vrshrn_n_s32(v89, 0xEuLL));
  v112 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v72.i8), v101), 0xEuLL), vmulq_s32(vsubl_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v97.i8), v101), 0xEuLL);
  v113 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v72.i8), v101), 0xEuLL), vmulq_s32(vaddl_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v97.i8), v101), 0xEuLL);
  v114 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v105.i8), v101), 0xEuLL), vmulq_s32(vsubl_high_s16(v106, v105), v101), 0xEuLL);
  v115 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v105.i8), v101), 0xEuLL), vmulq_s32(vaddl_high_s16(v106, v105), v101), 0xEuLL);
  *(int16x4_t *)v95.i8 = vrshrn_n_s32(v297, 0xEuLL);
  *(int16x4_t *)v93.i8 = vrshrn_n_s32(v90, 0xEuLL);
  *(int16x4_t *)v72.i8 = vsub_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v93.i8);
  v324 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v93.i8, v313, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v95.i8, v305, 0xEuLL));
  *(int16x4_t *)v95.i8 = vrshrn_n_s32(v302, 0xEuLL);
  *(int16x4_t *)v93.i8 = vrshrn_n_s32(v295, 0xEuLL);
  *(int16x4_t *)v89.i8 = vsub_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v93.i8);
  v298 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v93.i8, v294, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v95.i8, v304, 0xEuLL));
  v116 = vsubq_s16(v98, v99);
  v282 = vaddq_s16(v285, v286);
  v283 = vaddq_s16(v99, v98);
  v117 = vsubq_s16(v286, v285);
  *(int16x4_t *)v82.i8 = vrshrn_n_s32(v300, 0xEuLL);
  *(int16x4_t *)v90.i8 = vrshrn_n_s32(v292, 0xEuLL);
  *(int16x4_t *)v95.i8 = vsub_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v90.i8);
  v303 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v90.i8, v291, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v82.i8, v299, 0xEuLL));
  *(int16x4_t *)v90.i8 = vrshrn_n_s32(v307, 0xEuLL);
  *(int16x4_t *)v99.i8 = vrshrn_n_s32(v91, 0xEuLL);
  *(int16x4_t *)v91.i8 = vsub_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v99.i8);
  v308 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v99.i8, v315, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v90.i8, v306, 0xEuLL));
  v118 = vsubq_s16(v100, v288);
  v301 = vaddq_s16(v288, v100);
  v119 = vsubq_s16(v333, v290);
  v296 = vaddq_s16(v290, v333);
  v293 = vaddq_s16(v111, v310);
  v120 = vsubq_s16(v111, v310);
  v311 = vaddq_s16(v110, v104);
  v121 = vsubq_s16(v110, v104);
  v122 = vaddq_s16(v112, v109);
  v123 = vsubq_s16(v109, v112);
  v124 = vaddq_s16(v114, v108);
  v125 = vsubq_s16(v108, v114);
  v126 = vaddq_s16(v115, v284);
  v127 = vsubq_s16(v284, v115);
  v128 = vaddq_s16(v113, v317);
  v129 = vsubq_s16(v317, v113);
  v130 = vaddq_s16(v319, v330);
  v131 = vsubq_s16(v319, v330);
  v320 = vaddq_s16(v327, v322);
  v132 = vsubq_s16(v327, v322);
  *(int16x4_t *)v115.i8 = vsub_s16(vrshrn_n_s32(v299, 0xEuLL), vrshrn_n_s32(v291, 0xEuLL));
  *(int16x4_t *)v98.i8 = vsub_s16(vrshrn_n_s32(v304, 0xEuLL), vrshrn_n_s32(v294, 0xEuLL));
  v133 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v89.i8), v101), 0xEuLL), vmulq_s32(vsubl_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v98.i8), v101), 0xEuLL);
  v134 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v89.i8), v101), 0xEuLL), vmulq_s32(vaddl_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v98.i8), v101), 0xEuLL);
  *(int16x4_t *)v115.i8 = vsub_s16(vrshrn_n_s32(v306, 0xEuLL), vrshrn_n_s32(v315, 0xEuLL));
  *(int16x4_t *)v95.i8 = vsub_s16(vrshrn_n_s32(v305, 0xEuLL), vrshrn_n_s32(v313, 0xEuLL));
  v135 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v72.i8), v101), 0xEuLL), vmulq_s32(vsubl_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v95.i8), v101), 0xEuLL);
  v136 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v72.i8), v101), 0xEuLL), vmulq_s32(vaddl_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v95.i8), v101), 0xEuLL);
  v137 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v116.i8), v101), 0xEuLL), vmulq_s32(vsubl_high_s16(v118, v116), v101), 0xEuLL);
  v138 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v116.i8), v101), 0xEuLL), vmulq_s32(vaddl_high_s16(v118, v116), v101), 0xEuLL);
  v139 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v117.i8), v101), 0xEuLL), vmulq_s32(vsubl_high_s16(v119, v117), v101), 0xEuLL);
  v140 = vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vaddl_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v117.i8), v101), 0xEuLL), vmulq_s32(vaddl_high_s16(v119, v117), v101), 0xEuLL);
  v328 = vqaddq_s16(v132, v282);
  v331 = vqsubq_s16(v132, v282);
  v141 = vqaddq_s16(v131, v283);
  v142 = vqsubq_s16(v131, v283);
  v143 = vqaddq_s16(v129, v324);
  v144 = vqsubq_s16(v129, v324);
  v145 = vqaddq_s16(v127, v298);
  v325 = vqsubq_s16(v127, v298);
  v146 = vqaddq_s16(v125, v133);
  v147 = vqsubq_s16(v125, v133);
  v148 = vqaddq_s16(v123, v135);
  v149 = vqsubq_s16(v123, v135);
  v150 = vqaddq_s16(v121, v137);
  v151 = vqsubq_s16(v121, v137);
  v152 = vqaddq_s16(v120, v139);
  v334 = vqsubq_s16(v120, v139);
  v153 = vqaddq_s16(v293, v140);
  v154 = vqsubq_s16(v293, v140);
  v155 = vqaddq_s16(v311, v138);
  v156 = vqsubq_s16(v311, v138);
  v157 = vqaddq_s16(v122, v136);
  v158 = vqsubq_s16(v122, v136);
  v159 = vqaddq_s16(v124, v134);
  v160 = vqsubq_s16(v124, v134);
  v161 = vqaddq_s16(v126, v303);
  v162 = vqsubq_s16(v126, v303);
  v163 = vqaddq_s16(v128, v308);
  v164 = vqsubq_s16(v128, v308);
  v165 = vqaddq_s16(v130, v301);
  v166 = vqsubq_s16(v130, v301);
  v167 = vqaddq_s16(v320, v296);
  v168 = vqsubq_s16(v320, v296);
  if (a4)
  {
    *(uint16x8_t *)a2 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*a2, v167, 6uLL)));
    v169 = 2 * a3;
    *(uint16x8_t *)((char *)a2 + v169) = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*(int16x8_t *)((char *)a2 + v169), v165, 6uLL)));
    v170 = (int16x8_t *)((char *)a2 + v169 + v169);
    *(uint16x8_t *)v170 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v170, v163, 6uLL)));
    v171 = (int16x8_t *)((char *)v170 + v169);
    *(uint16x8_t *)v171 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v171, v161, 6uLL)));
    v172 = (int16x8_t *)((char *)v171 + v169);
    *(uint16x8_t *)v172 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v172, v159, 6uLL)));
    v173 = (int16x8_t *)((char *)v172 + v169);
    *(uint16x8_t *)v173 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v173, v157, 6uLL)));
    v174 = (int16x8_t *)((char *)v173 + v169);
    *(uint16x8_t *)v174 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v174, v155, 6uLL)));
    v175 = (int16x8_t *)((char *)v174 + v169);
    *(uint16x8_t *)v175 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v175, v153, 6uLL)));
    v176 = (int16x8_t *)((char *)v175 + v169);
    *(uint16x8_t *)v176 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v176, v152, 6uLL)));
    v177 = (int16x8_t *)((char *)v176 + v169);
    *(uint16x8_t *)v177 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v177, v150, 6uLL)));
    v178 = (int16x8_t *)((char *)v177 + v169);
    *(uint16x8_t *)v178 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v178, v148, 6uLL)));
    v179 = (int16x8_t *)((char *)v178 + v169);
    *(uint16x8_t *)v179 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v179, v146, 6uLL)));
    v180 = (int16x8_t *)((char *)v179 + v169);
    *(uint16x8_t *)v180 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v180, v145, 6uLL)));
    v181 = (int16x8_t *)((char *)v180 + v169);
    *(uint16x8_t *)v181 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v181, v143, 6uLL)));
    v182 = (int16x8_t *)((char *)v181 + v169);
    *(uint16x8_t *)v182 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v182, v141, 6uLL)));
    v183 = (int16x8_t *)((char *)v182 + v169);
    *(uint16x8_t *)v183 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v183, v328, 6uLL)));
    v184 = (int16x8_t *)((char *)v183 + v169);
    *(uint16x8_t *)v184 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v184, v331, 6uLL)));
    v185 = (int16x8_t *)((char *)v184 + v169);
    *(uint16x8_t *)v185 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v185, v142, 6uLL)));
    v186 = (int16x8_t *)((char *)v185 + v169);
    *(uint16x8_t *)v186 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v186, v144, 6uLL)));
    v187 = (int16x8_t *)((char *)v186 + v169);
    *(uint16x8_t *)v187 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v187, v325, 6uLL)));
    v188 = (int16x8_t *)((char *)v187 + v169);
    *(uint16x8_t *)v188 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v188, v147, 6uLL)));
    v189 = (int16x8_t *)((char *)v188 + v169);
    *(uint16x8_t *)v189 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v189, v149, 6uLL)));
    v190 = (int16x8_t *)((char *)v189 + v169);
    *(uint16x8_t *)v190 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v190, v151, 6uLL)));
    v191 = (int16x8_t *)((char *)v190 + v169);
    *(uint16x8_t *)v191 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v191, v334, 6uLL)));
    v192 = (int16x8_t *)((char *)v191 + v169);
    *(uint16x8_t *)v192 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v192, v154, 6uLL)));
    v193 = (int16x8_t *)((char *)v192 + v169);
    *(uint16x8_t *)v193 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v193, v156, 6uLL)));
    v194 = (int16x8_t *)((char *)v193 + v169);
    *(uint16x8_t *)v194 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v194, v158, 6uLL)));
    v195 = (int16x8_t *)((char *)v194 + v169);
    *(uint16x8_t *)v195 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v195, v160, 6uLL)));
    v196 = (int16x8_t *)((char *)v195 + v169);
    *(uint16x8_t *)v196 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v196, v162, 6uLL)));
    v197 = (int16x8_t *)((char *)v196 + v169);
    *(uint16x8_t *)v197 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v197, v164, 6uLL)));
    v198 = (int16x8_t *)((char *)v197 + v169);
    *(uint16x8_t *)v198 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v198, v166, 6uLL)));
    *(uint16x8_t *)((char *)v198 + v169) = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*(int16x8_t *)((char *)v198 + v169), v168, 6uLL)));
  }
  else
  {
    v199 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a2->i8), v167, 6uLL);
    v200 = (uint8x8_t *)&a2->i8[a3];
    v201 = v158;
    v202 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v200), v165, 6uLL);
    v203 = (uint8x8_t *)((char *)v200 + a3);
    v204 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v203), v163, 6uLL);
    v205 = (uint8x8_t *)((char *)v203 + a3);
    v206 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v205), v161, 6uLL);
    v207 = (uint8x8_t *)((char *)v205 + a3);
    v208 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v207), v159, 6uLL);
    v209 = (uint8x8_t *)((char *)v207 + a3);
    v210 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v209), v157, 6uLL);
    v211 = (uint8x8_t *)((char *)v209 + a3);
    v212 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v211), v155, 6uLL);
    v213 = (uint8x8_t *)((char *)v211 + a3);
    v214 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v213), v153, 6uLL);
    v215 = 7 * a3;
    v216 = (int8x8_t *)((char *)v213 - v215);
    *v216 = vqmovun_s16(v199);
    v217 = (int8x8_t *)((char *)v216 + a3);
    *v217 = vqmovun_s16(v202);
    v218 = (int8x8_t *)((char *)v217 + a3);
    *v218 = vqmovun_s16(v204);
    v219 = (int8x8_t *)((char *)v218 + a3);
    *v219 = vqmovun_s16(v206);
    v220 = (int8x8_t *)((char *)v219 + a3);
    *v220 = vqmovun_s16(v208);
    v221 = (int8x8_t *)((char *)v220 + a3);
    *v221 = vqmovun_s16(v210);
    v222 = (int8x8_t *)((char *)v221 + a3);
    *v222 = vqmovun_s16(v212);
    *(int8x8_t *)((char *)v222 + a3) = vqmovun_s16(v214);
    v223 = &a2->i64[a3];
    v208.i64[0] = *v223;
    v224 = (uint64_t *)((char *)v223 + a3);
    v199.i64[0] = *v224;
    v225 = (uint64_t *)((char *)v224 + a3);
    v202.i64[0] = *v225;
    v226 = (uint8x8_t *)((char *)v225 + a3);
    v227 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v202.i8), v148, 6uLL);
    v228 = *v226;
    v229 = (uint8x8_t *)((char *)v226 + a3);
    v230 = vrsraq_n_s16((int16x8_t)vmovl_u8(v228), v146, 6uLL);
    v231 = *v229;
    v232 = (uint8x8_t *)((char *)v229 + a3);
    v233 = vrsraq_n_s16((int16x8_t)vmovl_u8(v231), v145, 6uLL);
    v234 = *v232;
    v235 = (uint8x8_t *)((char *)v232 + a3);
    v236 = vrsraq_n_s16((int16x8_t)vmovl_u8(v234), v143, 6uLL);
    v237 = *v235;
    v238 = (uint8x8_t *)((char *)v235 + a3);
    v239 = vrsraq_n_s16((int16x8_t)vmovl_u8(v237), v141, 6uLL);
    v240 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v238), v328, 6uLL);
    v241 = (int8x8_t *)((char *)v238 - v215);
    *v241 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v208.i8), v152, 6uLL));
    v242 = (int8x8_t *)((char *)v241 + a3);
    *v242 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v199.i8), v150, 6uLL));
    v243 = (int8x8_t *)((char *)v242 + a3);
    *v243 = vqmovun_s16(v227);
    v244 = (int8x8_t *)((char *)v243 + a3);
    *v244 = vqmovun_s16(v230);
    v245 = (int8x8_t *)((char *)v244 + a3);
    *v245 = vqmovun_s16(v233);
    v246 = (int8x8_t *)((char *)v245 + a3);
    *v246 = vqmovun_s16(v236);
    v247 = (int8x8_t *)((char *)v246 + a3);
    *v247 = vqmovun_s16(v239);
    *(int8x8_t *)((char *)v247 + a3) = vqmovun_s16(v240);
    v248 = &a2[a3];
    v208.i64[0] = v248->i64[0];
    v249 = (uint64_t *)((char *)v248->i64 + a3);
    v199.i64[0] = *v249;
    v250 = (uint64_t *)((char *)v249 + a3);
    v227.i64[0] = *v250;
    v251 = (uint64_t *)((char *)v250 + a3);
    v239.i64[0] = *v251;
    v252 = (uint64_t *)((char *)v251 + a3);
    v240.i64[0] = *v252;
    v253 = (uint64_t *)((char *)v252 + a3);
    v236.i64[0] = *v253;
    v254 = (uint64_t *)((char *)v253 + a3);
    v230.i64[0] = *v254;
    v255 = (uint8x8_t *)((char *)v254 + a3);
    v256 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v255), v334, 6uLL);
    v257 = (int8x8_t *)((char *)v255 - v215);
    *v257 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v208.i8), v331, 6uLL));
    v258 = (int8x8_t *)((char *)v257 + a3);
    *v258 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v199.i8), v142, 6uLL));
    v259 = (int8x8_t *)((char *)v258 + a3);
    *v259 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v227.i8), v144, 6uLL));
    v260 = (int8x8_t *)((char *)v259 + a3);
    *v260 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v239.i8), v325, 6uLL));
    v261 = (int8x8_t *)((char *)v260 + a3);
    *v261 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v240.i8), v147, 6uLL));
    v262 = (int8x8_t *)((char *)v261 + a3);
    *v262 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v236.i8), v149, 6uLL));
    v263 = (int8x8_t *)((char *)v262 + a3);
    *v263 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v230.i8), v151, 6uLL));
    *(int8x8_t *)((char *)v263 + a3) = vqmovun_s16(v256);
    v264 = &a2->i64[3 * a3];
    v208.i64[0] = *v264;
    v265 = (uint64_t *)((char *)v264 + a3);
    v199.i64[0] = *v265;
    v266 = (uint64_t *)((char *)v265 + a3);
    v227.i64[0] = *v266;
    v267 = (uint64_t *)((char *)v266 + a3);
    v239.i64[0] = *v267;
    v268 = (uint64_t *)((char *)v267 + a3);
    v240.i64[0] = *v268;
    v269 = (uint64_t *)((char *)v268 + a3);
    v236.i64[0] = *v269;
    v270 = (uint8x8_t *)((char *)v269 + a3);
    v271 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v236.i8), v164, 6uLL);
    v272 = *v270;
    v273 = (uint8x8_t *)((char *)v270 + a3);
    v274 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v273), v168, 6uLL);
    v275 = (int8x8_t *)((char *)v273 - v215);
    *v275 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v208.i8), v154, 6uLL));
    v276 = (int8x8_t *)((char *)v275 + a3);
    *v276 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v199.i8), v156, 6uLL));
    v277 = (int8x8_t *)((char *)v276 + a3);
    *v277 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v227.i8), v201, 6uLL));
    v278 = (int8x8_t *)((char *)v277 + a3);
    *v278 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v239.i8), v160, 6uLL));
    v279 = (int8x8_t *)((char *)v278 + a3);
    *v279 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v240.i8), v162, 6uLL));
    v280 = (int8x8_t *)((char *)v279 + a3);
    *v280 = vqmovun_s16(v271);
    v281 = (int8x8_t *)((char *)v280 + a3);
    *v281 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(v272), v166, 6uLL));
    *(int8x8_t *)((char *)v281 + a3) = vqmovun_s16(v274);
  }
  return result;
}

int16x8_t *vpx_idct32_32_neon()
{
  int16x8_t *result;
  int16x8_t *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char *v9;
  int16x8_t *v10;
  uint8x8_t *v11;
  uint64_t v12;
  char v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int64x2_t v180;
  int64x2_t v181;
  int64x2_t v182;
  int64x2_t v183;
  int64x2_t v184;
  int64x2_t v185;
  int64x2_t v186;
  int64x2_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int64x2_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int64x2_t v228;
  int64x2_t v229;
  int64x2_t v230;
  int64x2_t v231;
  int64x2_t v232;
  int64x2_t v233;
  int64x2_t v234;
  int64x2_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int16x4_t v254;
  int16x8_t v255;
  int32x4_t v256;
  int16x8_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int16x8_t v262;
  int32x4_t v263;
  int16x8_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int16x8_t v269;
  int32x4_t v270;
  int16x8_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int16x8_t v276;
  int32x4_t v277;
  int16x8_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int16x4_t v283;
  int16x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int16x8_t v290;
  int16x8_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int16x8_t v294;
  int16x8_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int16x8_t v299;
  int32x4_t v300;
  int16x8_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int16x8_t v312;
  int16x8_t v313;
  int16x8_t v314;
  int16x8_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int16x8_t v318;
  int16x8_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int32x4_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int16x8_t v326;
  int16x8_t v327;
  int16x8_t v328;
  int16x8_t v329;
  int16x8_t v330;
  int16x8_t v331;
  int16x8_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int16x8_t v337;
  int16x8_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int32x4_t v341;
  int32x4_t v342;
  int16x8_t v343;
  int16x8_t v344;
  int16x8_t v345;
  int32x4_t v346;
  int16x8_t v347;
  int16x8_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int32x4_t v351;
  int32x4_t v352;
  int32x4_t v353;
  int16x8_t v354;
  int16x8_t v355;
  int32x4_t v356;
  int32x4_t v357;
  int32x4_t v358;
  int32x4_t v359;
  int32x4_t v360;
  int32x4_t v361;
  int32x4_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int32x4_t v367;
  int32x4_t v368;
  int32x4_t v369;
  int16x8_t v370;
  int16x8_t v371;
  int16x8_t v372;
  int16x8_t v373;
  int16x8_t v374;
  int16x8_t v375;
  int16x8_t v376;
  int16x8_t v377;
  int16x8_t v378;
  int16x8_t v379;
  int16x8_t v380;
  int16x8_t v381;
  int16x8_t v382;
  int16x8_t v383;
  int16x8_t v384;
  int16x8_t v385;
  int16x8_t v386;
  int16x8_t v387;
  int16x8_t v388;
  int16x8_t v389;
  int16x8_t v390;
  int16x8_t v391;
  int16x8_t v392;
  int16x8_t v393;
  int16x8_t v394;
  int16x8_t v395;
  int16x8_t v396;
  int16x8_t v397;
  int16x8_t v398;
  int16x8_t v399;
  int16x8_t v400;
  int16x8_t v401;
  int16x8_t v402;
  int16x8_t v403;
  int16x8_t v404;
  int16x8_t v405;
  int16x8_t v406;
  int16x8_t *v407;
  int16x8_t v408;
  int16x8_t v409;
  int16x8_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int16x8_t v413;
  int16x8_t v414;
  int16x8_t v415;
  int16x8_t v416;
  int16x8_t v417;
  int16x8_t v418;
  int16x8_t v419;
  int16x8_t v420;
  int16x8_t v421;
  int16x8_t v422;
  int16x8_t *v423;
  int16x8_t *v424;
  int16x8_t *v425;
  uint64_t v426;
  uint64_t v427;
  uint16x8_t v428;
  uint16x8_t v429;
  uint16x8_t v430;
  int16x8_t *v431;
  int16x8_t *v432;
  int16x8_t v433;
  int16x8_t v434;
  int16x8_t v435;
  int16x8_t v436;
  int16x8_t v437;
  uint16x8_t v438;
  int16x8_t *v439;
  int16x8_t *v440;
  int16x8_t v441;
  int16x8_t v442;
  int16x8_t v443;
  int16x8_t v444;
  int16x8_t v445;
  int16x8_t v446;
  int16x8_t v447;
  int16x8_t v448;
  int16x8_t v449;
  int16x8_t v450;
  int16x8_t v451;
  uint16x8_t v452;
  uint16x8_t v453;
  uint16x8_t v454;
  uint16x8_t v455;
  int16x8_t *v456;
  int16x8_t *v457;
  int16x8_t v458;
  int16x8_t v459;
  int16x8_t v460;
  int16x8_t v461;
  int16x8_t v462;
  uint16x8_t v463;
  int16x8_t *v464;
  int16x8_t *v465;
  int16x8_t v466;
  int16x8_t v467;
  int16x8_t v468;
  int16x8_t v469;
  int16x8_t v470;
  int16x8_t v471;
  int16x8_t v472;
  int16x8_t v473;
  int16x8_t v474;
  int16x8_t v475;
  int16x8_t v476;
  uint16x8_t v477;
  uint16x8_t v478;
  uint16x8_t v479;
  uint16x8_t v480;
  int16x8_t *v481;
  int16x8_t *v482;
  int16x8_t v483;
  int16x8_t v484;
  int16x8_t v485;
  int16x8_t v486;
  int16x8_t v487;
  uint16x8_t v488;
  int16x8_t *v489;
  int16x8_t *v490;
  int16x8_t v491;
  int16x8_t v492;
  int16x8_t v493;
  int16x8_t v494;
  int16x8_t v495;
  int16x8_t v496;
  int16x8_t v497;
  int16x8_t v498;
  int16x8_t v499;
  int16x8_t v500;
  int16x8_t v501;
  uint16x8_t v502;
  uint16x8_t v503;
  uint16x8_t v504;
  int16x8_t v505;
  int16x8_t v506;
  int16x8_t v507;
  int16x8_t v508;
  int16x8_t v509;
  uint16x8_t v510;
  int8x8_t *v511;
  int8x8_t *v512;
  int8x8_t *v513;
  int16x8_t v514;
  int8x8_t v515;
  int8x8_t v516;
  uint8x8_t *v517;
  uint8x8_t *v518;
  int16x8_t v519;
  int16x8_t v520;
  int16x8_t v521;
  int16x8_t v522;
  int16x8_t v523;
  int16x8_t v524;
  int16x8_t v525;
  int16x8_t v526;
  int8x8_t *v527;
  uint8x8_t *v528;
  int16x8_t v529;
  int16x8_t v530;
  int16x8_t v531;
  int16x8_t v532;
  int16x8_t v533;
  int16x8_t v534;
  int16x8_t v535;
  int16x8_t v536;
  int16x8_t v537;
  int16x8_t v538;
  int16x8_t v539;
  int16x8_t v540;
  uint8x8_t *v541;
  uint8x8_t *v542;
  int16x8_t v543;
  int16x8_t v544;
  int16x8_t v545;
  int16x8_t v546;
  int16x8_t v547;
  int16x8_t v548;
  int16x8_t v549;
  int16x8_t v550;
  uint8x8_t *v551;
  uint8x8_t *v552;
  int16x8_t v553;
  int16x8_t v554;
  int16x8_t v555;
  int16x8_t v556;
  int16x8_t v557;
  int16x8_t v558;
  int16x8_t v559;
  int16x8_t v560;
  int16x8_t v561;
  int16x8_t v562;
  int16x8_t v563;
  int16x8_t v564;
  uint8x8_t *v565;
  uint8x8_t *v566;
  int16x8_t v567;
  int16x8_t v568;
  int16x8_t v569;
  int16x8_t v570;
  int16x8_t v571;
  int16x8_t v572;
  int16x8_t v573;
  int16x8_t v574;
  uint8x8_t *v575;
  int8x8_t *v576;
  int16x8_t v577;
  int16x8_t v578;
  int16x8_t v579;
  int16x8_t v580;
  int16x8_t v581;
  int16x8_t v582;
  int16x8_t v583;
  int16x8_t v584;
  int16x8_t v585;
  int16x8_t v586;
  int16x8_t v587;
  int16x8_t v588;
  int16x8_t v589;
  int16x8_t v590;
  int16x8_t v591;
  int16x8_t v592;
  int16x8_t v593;
  int16x8_t v594;
  int16x8_t v595;
  int16x8_t v596;
  int16x8_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  int v601;
  int32x4_t v602;
  int16x4_t v603;
  int16x4_t v604;
  int16x4_t v605;
  int16x4_t v606;
  int16x4_t v607;
  int32x4_t v608;
  int32x4_t v609;
  int32x4_t v610;
  int32x4_t v611;
  int16x8_t v612;
  int16x8_t v613;
  int32x4_t v614;
  int32x4_t v615;
  int32x4_t v616;
  int32x4_t v617;
  int32x4_t v618;
  int32x4_t v619;
  int16x8_t v620;
  int32x4_t v621;
  int32x4_t v622;
  int32x4_t v623;
  int16x4_t v624;
  int16x4_t v625;
  int16x4_t v626;
  int16x4_t v627;
  int16x4_t v628;
  int32x4_t v629;
  int32x4_t v630;
  int32x4_t v631;
  int16x8_t v632;
  int32x4_t v633;
  int32x4_t v634;
  int32x4_t v635;
  int32x4_t v636;
  int16x8_t v637;
  int32x4_t v638;
  int32x4_t v639;
  int32x4_t v640;
  int16x8_t v641;
  int32x4_t v642;
  int32x4_t v643;
  int32x4_t v644;
  int16x8_t v645;
  int32x4_t v646;
  int16x8_t v647;
  int32x4_t v648;
  int16x8_t v649;
  int16x8_t v650;
  int32x4_t v651;
  int32x4_t v652;
  int32x4_t v653;
  int32x4_t v654;
  int16x8_t v655;
  int32x4_t v656;
  int16x8_t v657;
  int32x4_t v658;
  int32x4_t v659;
  int32x4_t v660;
  int32x4_t v661;
  int16x4_t v662;
  int32x4_t v663;
  int16x4_t v664;
  int32x4_t v665;
  int16x4_t v666;
  int32x4_t v667;
  int16x4_t v668;
  int32x4_t v669;
  int32x4_t v670;
  int32x4_t v671;
  int32x4_t v672;
  int16x8_t v673;
  int32x4_t v674;
  int16x8_t v675;
  int16x8_t v676;
  int32x4_t v677;
  int32x4_t v678;
  int16x8_t v679;
  int32x4_t v680;
  int16x8_t v681;
  int32x4_t v682;
  int32x4_t v683;
  int32x4_t v684;
  int32x4_t v685;
  int16x8_t v686;
  int32x4_t v687;
  int32x4_t v688;
  int32x4_t v689;
  int32x4_t v690;
  int16x8_t v691;
  int16x8_t v692;
  int16x8_t v693;
  int32x4_t v694;
  int16x8_t v695;
  int16x8_t v696;
  int16x8_t v697;
  int16x8_t v698;
  int16x8_t v699;
  int16x8_t v700;
  int16x8_t v701;
  int32x4_t v702;
  int32x4_t v703;
  int32x4_t v704;
  int16x8_t v705;
  int32x4_t v706;
  int32x4_t v707;
  int32x4_t v708;
  int16x8_t v709;
  int16x8_t v710;
  int32x4_t v711;
  int16x8_t v712;
  int16x8_t v713;
  int32x4_t v714;
  int16x8_t v715;
  int16x8_t v716;
  int32x4_t v717;
  int16x8_t v718;
  char v719;
  _BYTE v720[2048];
  uint64_t v721;

  result = (int16x8_t *)MEMORY[0x24BDAC7A8]();
  v601 = v2;
  v721 = *MEMORY[0x24BDAC8D0];
  v4 = v3;
  v600 = 31 * v3;
  v599 = 2 * v3;
  v598 = 15 * v3;
  v5 = -(uint64_t)v3;
  v6 = 2 * v3;
  v7 = -2 * v3;
  v8 = 1;
  v9 = v720;
  v10 = (int16x8_t *)v720;
  v11 = (uint8x8_t *)v1;
  do
  {
    v12 = 0;
    v13 = v8;
    do
    {
      while (1)
      {
        if ((v13 & 1) != 0)
        {
          v26 = vuzp1q_s16(*result, result[1]);
          v27 = vuzp1q_s16(result[8], result[9]);
          v28 = vuzp1q_s16(result[16], result[17]);
          v29 = vuzp1q_s16(result[24], result[25]);
          v30 = vuzp1q_s16(result[32], result[33]);
          v31 = vuzp1q_s16(result[40], result[41]);
          v32 = vuzp1q_s16(result[48], result[49]);
          v33 = vuzp1q_s16(result[56], result[57]);
          v34 = (int32x4_t)vtrn1q_s16(v26, v27);
          v35 = (int32x4_t)vtrn2q_s16(v26, v27);
          v36 = (int32x4_t)vtrn1q_s16(v28, v29);
          v37 = (int32x4_t)vtrn2q_s16(v28, v29);
          v38 = (int32x4_t)vtrn1q_s16(v30, v31);
          v39 = (int32x4_t)vtrn2q_s16(v30, v31);
          v40 = (int32x4_t)vtrn1q_s16(v32, v33);
          v41 = (int32x4_t)vtrn2q_s16(v32, v33);
          v42 = (int64x2_t)vtrn1q_s32(v34, v36);
          v43 = (int64x2_t)vtrn2q_s32(v34, v36);
          v44 = (int64x2_t)vtrn1q_s32(v35, v37);
          v45 = (int64x2_t)vtrn2q_s32(v35, v37);
          v46 = (int64x2_t)vtrn1q_s32(v38, v40);
          v47 = (int64x2_t)vtrn2q_s32(v38, v40);
          v48 = (int64x2_t)vtrn1q_s32(v39, v41);
          v49 = (int64x2_t)vtrn2q_s32(v39, v41);
          v693 = (int16x8_t)vzip1q_s64(v42, v46);
          v676 = (int16x8_t)vzip2q_s64(v42, v46);
          v50 = (int16x8_t)vzip1q_s64(v44, v48);
          v51 = (int16x8_t)vzip2q_s64(v44, v48);
          v52 = (int16x8_t)vzip1q_s64(v43, v47);
          v650 = (int16x8_t)vzip2q_s64(v43, v47);
          v53 = (int16x8_t)vzip1q_s64(v45, v49);
          v54 = (int16x8_t)vzip2q_s64(v45, v49);
          v55 = vuzp1q_s16(result[2], result[3]);
          v56 = vuzp1q_s16(result[10], result[11]);
          v57 = vuzp1q_s16(result[18], result[19]);
          v58 = vuzp1q_s16(result[26], result[27]);
          v59 = vuzp1q_s16(result[34], result[35]);
          v60 = vuzp1q_s16(result[42], result[43]);
          v61 = vuzp1q_s16(result[50], result[51]);
          v62 = vuzp1q_s16(result[58], result[59]);
          v63 = (int32x4_t)vtrn1q_s16(v55, v56);
          v64 = (int32x4_t)vtrn2q_s16(v55, v56);
          v65 = (int32x4_t)vtrn1q_s16(v57, v58);
          v66 = (int32x4_t)vtrn2q_s16(v57, v58);
          v67 = (int32x4_t)vtrn1q_s16(v59, v60);
          v68 = (int32x4_t)vtrn2q_s16(v59, v60);
          v69 = (int32x4_t)vtrn1q_s16(v61, v62);
          v70 = (int32x4_t)vtrn2q_s16(v61, v62);
          v71 = (int64x2_t)vtrn1q_s32(v63, v65);
          v72 = (int64x2_t)vtrn2q_s32(v63, v65);
          v73 = (int64x2_t)vtrn1q_s32(v64, v66);
          v74 = (int64x2_t)vtrn2q_s32(v64, v66);
          v75 = (int64x2_t)vtrn1q_s32(v67, v69);
          v76 = (int64x2_t)vtrn2q_s32(v67, v69);
          v77 = (int64x2_t)vtrn1q_s32(v68, v70);
          v78 = (int64x2_t)vtrn2q_s32(v68, v70);
          v655 = (int16x8_t)vzip2q_s64(v71, v75);
          v657 = (int16x8_t)vzip1q_s64(v71, v75);
          v79 = (int16x8_t)vzip1q_s64(v73, v77);
          v80 = (int16x8_t)vzip2q_s64(v73, v77);
          v641 = (int16x8_t)vzip1q_s64(v72, v76);
          v716 = (int16x8_t)vzip2q_s64(v72, v76);
          v81 = (int16x8_t)vzip1q_s64(v74, v78);
          v82 = (int16x8_t)vzip2q_s64(v74, v78);
          v83 = vuzp1q_s16(result[4], result[5]);
          v84 = vuzp1q_s16(result[12], result[13]);
          v85 = vuzp1q_s16(result[20], result[21]);
          v86 = vuzp1q_s16(result[28], result[29]);
          v87 = vuzp1q_s16(result[36], result[37]);
          v88 = vuzp1q_s16(result[44], result[45]);
          v89 = vuzp1q_s16(result[52], result[53]);
          v90 = vuzp1q_s16(result[60], result[61]);
          v91 = (int32x4_t)vtrn1q_s16(v83, v84);
          v92 = (int32x4_t)vtrn2q_s16(v83, v84);
          v93 = (int32x4_t)vtrn1q_s16(v85, v86);
          v94 = (int32x4_t)vtrn2q_s16(v85, v86);
          v95 = (int32x4_t)vtrn1q_s16(v87, v88);
          v96 = (int32x4_t)vtrn2q_s16(v87, v88);
          v97 = (int32x4_t)vtrn1q_s16(v89, v90);
          v98 = (int32x4_t)vtrn2q_s16(v89, v90);
          v99 = (int64x2_t)vtrn1q_s32(v91, v93);
          v100 = (int64x2_t)vtrn2q_s32(v91, v93);
          v101 = (int64x2_t)vtrn1q_s32(v92, v94);
          v102 = (int64x2_t)vtrn2q_s32(v92, v94);
          v103 = (int64x2_t)vtrn1q_s32(v95, v97);
          v104 = (int64x2_t)vtrn2q_s32(v95, v97);
          v105 = (int64x2_t)vtrn1q_s32(v96, v98);
          v106 = (int64x2_t)vtrn2q_s32(v96, v98);
          v699 = (int16x8_t)vzip1q_s64(v99, v103);
          v701 = (int16x8_t)vzip2q_s64(v99, v103);
          v107 = (int16x8_t)vzip1q_s64(v101, v105);
          v108 = (int16x8_t)vzip2q_s64(v101, v105);
          v710 = (int16x8_t)vzip1q_s64(v100, v104);
          v713 = (int16x8_t)vzip2q_s64(v100, v104);
          v109 = (int16x8_t)vzip1q_s64(v102, v106);
          v110 = (int16x8_t)vzip2q_s64(v102, v106);
          v111 = vuzp1q_s16(result[6], result[7]);
          v112 = vuzp1q_s16(result[14], result[15]);
          v113 = vuzp1q_s16(result[22], result[23]);
          v114 = vuzp1q_s16(result[30], result[31]);
          v115 = vuzp1q_s16(result[38], result[39]);
          v116 = vuzp1q_s16(result[46], result[47]);
          v117 = vuzp1q_s16(result[54], result[55]);
          v118 = vuzp1q_s16(result[62], result[63]);
          v119 = (int32x4_t)vtrn1q_s16(v111, v112);
          v120 = (int32x4_t)vtrn2q_s16(v111, v112);
          v121 = (int32x4_t)vtrn1q_s16(v113, v114);
          v122 = (int32x4_t)vtrn2q_s16(v113, v114);
          v123 = (int32x4_t)vtrn1q_s16(v115, v116);
          v124 = (int32x4_t)vtrn2q_s16(v115, v116);
          v125 = (int32x4_t)vtrn1q_s16(v117, v118);
          v126 = (int32x4_t)vtrn2q_s16(v117, v118);
          v127 = (int64x2_t)vtrn1q_s32(v119, v121);
          v128 = (int64x2_t)vtrn2q_s32(v119, v121);
          v129 = (int64x2_t)vtrn1q_s32(v120, v122);
          v130 = (int64x2_t)vtrn2q_s32(v120, v122);
          v131 = (int64x2_t)vtrn1q_s32(v123, v125);
          v132 = (int64x2_t)vtrn2q_s32(v123, v125);
          v133 = (int64x2_t)vtrn1q_s32(v124, v126);
          v134 = (int64x2_t)vtrn2q_s32(v124, v126);
          v697 = (int16x8_t)vzip1q_s64(v127, v131);
          v705 = (int16x8_t)vzip2q_s64(v127, v131);
          v135 = (int16x8_t)vzip1q_s64(v129, v133);
          v136 = (int16x8_t)vzip2q_s64(v129, v133);
          v632 = (int16x8_t)vzip1q_s64(v128, v132);
          v137 = (int16x8_t)vzip2q_s64(v128, v132);
          v138 = (int16x8_t)vzip1q_s64(v130, v134);
          v139 = (int16x8_t)vzip2q_s64(v130, v134);
          result += 64;
        }
        else
        {
          v140 = v10[1];
          v141 = v10[4];
          v142 = v10[5];
          v143 = (int32x4_t)vtrn1q_s16(*v10, v141);
          v144 = (int32x4_t)vtrn2q_s16(*v10, v141);
          v145 = v10[8];
          v146 = v10[9];
          v147 = v10[12];
          v148 = v10[13];
          v149 = (int32x4_t)vtrn1q_s16(v145, v147);
          v150 = (int32x4_t)vtrn2q_s16(v145, v147);
          v151 = v10[16];
          v152 = v10[17];
          v153 = v10[20];
          v154 = v10[21];
          v155 = (int32x4_t)vtrn1q_s16(v151, v153);
          v156 = (int32x4_t)vtrn2q_s16(v151, v153);
          v157 = v10[24];
          v158 = v10[25];
          v159 = v10[28];
          v160 = v10[29];
          v161 = (int32x4_t)vtrn1q_s16(v157, v159);
          v162 = (int32x4_t)vtrn2q_s16(v157, v159);
          v163 = (int64x2_t)vtrn1q_s32(v143, v149);
          v164 = (int64x2_t)vtrn2q_s32(v143, v149);
          v165 = (int64x2_t)vtrn1q_s32(v144, v150);
          v166 = (int64x2_t)vtrn2q_s32(v144, v150);
          v167 = (int64x2_t)vtrn1q_s32(v155, v161);
          v168 = (int64x2_t)vtrn2q_s32(v155, v161);
          v169 = (int64x2_t)vtrn1q_s32(v156, v162);
          v170 = (int64x2_t)vtrn2q_s32(v156, v162);
          v693 = (int16x8_t)vzip1q_s64(v163, v167);
          v676 = (int16x8_t)vzip2q_s64(v163, v167);
          v50 = (int16x8_t)vzip1q_s64(v165, v169);
          v51 = (int16x8_t)vzip2q_s64(v165, v169);
          v171 = vzip1q_s64(v164, v168);
          v650 = (int16x8_t)vzip2q_s64(v164, v168);
          v53 = (int16x8_t)vzip1q_s64(v166, v170);
          v54 = (int16x8_t)vzip2q_s64(v166, v170);
          v172 = (int32x4_t)vtrn1q_s16(v140, v142);
          v173 = (int32x4_t)vtrn2q_s16(v140, v142);
          v174 = (int32x4_t)vtrn1q_s16(v146, v148);
          v175 = (int32x4_t)vtrn2q_s16(v146, v148);
          v176 = (int32x4_t)vtrn1q_s16(v152, v154);
          v177 = (int32x4_t)vtrn2q_s16(v152, v154);
          v178 = (int32x4_t)vtrn1q_s16(v158, v160);
          v179 = (int32x4_t)vtrn2q_s16(v158, v160);
          v180 = (int64x2_t)vtrn1q_s32(v172, v174);
          v181 = (int64x2_t)vtrn2q_s32(v172, v174);
          v182 = (int64x2_t)vtrn1q_s32(v173, v175);
          v183 = (int64x2_t)vtrn2q_s32(v173, v175);
          v184 = (int64x2_t)vtrn1q_s32(v176, v178);
          v185 = (int64x2_t)vtrn2q_s32(v176, v178);
          v186 = (int64x2_t)vtrn1q_s32(v177, v179);
          v187 = (int64x2_t)vtrn2q_s32(v177, v179);
          v655 = (int16x8_t)vzip2q_s64(v180, v184);
          v657 = (int16x8_t)vzip1q_s64(v180, v184);
          v79 = (int16x8_t)vzip1q_s64(v182, v186);
          v80 = (int16x8_t)vzip2q_s64(v182, v186);
          v641 = (int16x8_t)vzip1q_s64(v181, v185);
          v716 = (int16x8_t)vzip2q_s64(v181, v185);
          v81 = (int16x8_t)vzip1q_s64(v183, v187);
          v82 = (int16x8_t)vzip2q_s64(v183, v187);
          v188 = v10[2];
          v189 = v10[3];
          v190 = v10[6];
          v191 = v10[7];
          v192 = (int32x4_t)vtrn1q_s16(v188, v190);
          v193 = (int32x4_t)vtrn2q_s16(v188, v190);
          v194 = v10[10];
          v195 = v10[11];
          v196 = v10[14];
          v197 = v10[15];
          v198 = (int32x4_t)vtrn1q_s16(v194, v196);
          v199 = (int32x4_t)vtrn2q_s16(v194, v196);
          v200 = v10[18];
          v201 = v10[19];
          v202 = v10[22];
          v203 = v10[23];
          v204 = (int32x4_t)vtrn1q_s16(v200, v202);
          v205 = (int32x4_t)vtrn2q_s16(v200, v202);
          v206 = v10[26];
          v207 = v10[27];
          v208 = v10[30];
          v209 = v10[31];
          v210 = (int32x4_t)vtrn1q_s16(v206, v208);
          v211 = (int32x4_t)vtrn2q_s16(v206, v208);
          v212 = (int64x2_t)vtrn1q_s32(v192, v198);
          v213 = (int64x2_t)vtrn2q_s32(v192, v198);
          v214 = (int64x2_t)vtrn1q_s32(v193, v199);
          v215 = (int64x2_t)vtrn2q_s32(v193, v199);
          v216 = (int64x2_t)vtrn1q_s32(v204, v210);
          v217 = (int64x2_t)vtrn2q_s32(v204, v210);
          v52 = (int16x8_t)v171;
          v218 = (int64x2_t)vtrn1q_s32(v205, v211);
          v219 = (int64x2_t)vtrn2q_s32(v205, v211);
          v699 = (int16x8_t)vzip1q_s64(v212, v216);
          v701 = (int16x8_t)vzip2q_s64(v212, v216);
          v107 = (int16x8_t)vzip1q_s64(v214, v218);
          v108 = (int16x8_t)vzip2q_s64(v214, v218);
          v710 = (int16x8_t)vzip1q_s64(v213, v217);
          v713 = (int16x8_t)vzip2q_s64(v213, v217);
          v109 = (int16x8_t)vzip1q_s64(v215, v219);
          v110 = (int16x8_t)vzip2q_s64(v215, v219);
          v220 = (int32x4_t)vtrn1q_s16(v189, v191);
          v221 = (int32x4_t)vtrn2q_s16(v189, v191);
          v222 = (int32x4_t)vtrn1q_s16(v195, v197);
          v223 = (int32x4_t)vtrn2q_s16(v195, v197);
          v224 = (int32x4_t)vtrn1q_s16(v201, v203);
          v225 = (int32x4_t)vtrn2q_s16(v201, v203);
          v226 = (int32x4_t)vtrn1q_s16(v207, v209);
          v227 = (int32x4_t)vtrn2q_s16(v207, v209);
          v228 = (int64x2_t)vtrn1q_s32(v220, v222);
          v229 = (int64x2_t)vtrn2q_s32(v220, v222);
          v230 = (int64x2_t)vtrn1q_s32(v221, v223);
          v231 = (int64x2_t)vtrn2q_s32(v221, v223);
          v232 = (int64x2_t)vtrn1q_s32(v224, v226);
          v233 = (int64x2_t)vtrn2q_s32(v224, v226);
          v234 = (int64x2_t)vtrn1q_s32(v225, v227);
          v235 = (int64x2_t)vtrn2q_s32(v225, v227);
          v697 = (int16x8_t)vzip1q_s64(v228, v232);
          v705 = (int16x8_t)vzip2q_s64(v228, v232);
          v135 = (int16x8_t)vzip1q_s64(v230, v234);
          v136 = (int16x8_t)vzip2q_s64(v230, v234);
          v632 = (int16x8_t)vzip1q_s64(v229, v233);
          v137 = (int16x8_t)vzip2q_s64(v229, v233);
          v138 = (int16x8_t)vzip1q_s64(v231, v235);
          v139 = (int16x8_t)vzip2q_s64(v231, v235);
          v10 += 32;
        }
        v236 = vdupq_n_s16(0x324u);
        v237 = vdupq_n_s16(0x3FECu);
        v707 = vmlsl_s16(vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v236.i8), *(int16x4_t *)v139.i8, *(int16x4_t *)v237.i8);
        v694 = vmlsl_high_s16(vmull_high_s16(v50, v236), v139, v237);
        v238 = vmull_s16(*(int16x4_t *)v139.i8, *(int16x4_t *)v236.i8);
        v239 = vmull_high_s16(v139, v236);
        v703 = vmlal_s16(v238, *(int16x4_t *)v50.i8, *(int16x4_t *)v237.i8);
        v240 = vdupq_n_s16(0x2F6Cu);
        v690 = vmlal_high_s16(v239, v50, v237);
        v241 = vdupq_n_s16(0x2AFBu);
        v687 = vmlsl_s16(vmull_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v240.i8), *(int16x4_t *)v82.i8, *(int16x4_t *)v241.i8);
        v685 = vmlsl_high_s16(vmull_high_s16(v107, v240), v82, v241);
        v242 = vmull_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v240.i8);
        v243 = vmull_high_s16(v82, v240);
        v682 = vmlal_s16(v242, *(int16x4_t *)v107.i8, *(int16x4_t *)v241.i8);
        v244 = vdupq_n_s16(0x1B5Du);
        v658 = vmlal_high_s16(v243, v107, v241);
        v245 = vdupq_n_s16(0x39DBu);
        v246 = vmlsl_s16(vmull_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v244.i8), *(int16x4_t *)v110.i8, *(int16x4_t *)v245.i8);
        v678 = vmlsl_high_s16(vmull_high_s16(v79, v244), v110, v245);
        v247 = vmull_high_s16(v110, v244);
        v248 = vmlal_s16(vmull_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v244.i8), *(int16x4_t *)v79.i8, *(int16x4_t *)v245.i8);
        v249 = vdupq_n_s16(0x3C42u);
        v672 = vmlal_high_s16(v247, v79, v245);
        v250 = vdupq_n_s16(0x1590u);
        v251 = vmlsl_s16(vmull_s16(*(int16x4_t *)v135.i8, *(int16x4_t *)v249.i8), *(int16x4_t *)v54.i8, *(int16x4_t *)v250.i8);
        v680 = vmlsl_high_s16(vmull_high_s16(v135, v249), v54, v250);
        v252 = vmlal_s16(vmull_s16(*(int16x4_t *)v54.i8, *(int16x4_t *)v249.i8), *(int16x4_t *)v135.i8, *(int16x4_t *)v250.i8);
        v253 = vmlal_high_s16(vmull_high_s16(v54, v249), v135, v250);
        v254 = vsub_s16(vrshrn_n_s32(v680, 0xEuLL), vrshrn_n_s32(v678, 0xEuLL));
        *(int16x4_t *)v249.i8 = vsub_s16(vrshrn_n_s32(v253, 0xEuLL), vrshrn_n_s32(v672, 0xEuLL));
        v662 = vrshrn_n_s32(v248, 0xEuLL);
        v664 = vrshrn_n_s32(v246, 0xEuLL);
        v666 = vrshrn_n_s32(v251, 0xEuLL);
        v668 = vrshrn_n_s32(v252, 0xEuLL);
        v670 = v253;
        *(int16x4_t *)v246.i8 = vsub_s16(v666, v664);
        *(int16x4_t *)v250.i8 = vdup_n_s16(0xC13Bu);
        *(int16x4_t *)v252.i8 = vsub_s16(v668, v662);
        *(int16x4_t *)v251.i8 = vdup_n_s16(0xF384u);
        v674 = vmlsl_s16(vmull_s16(*(int16x4_t *)v246.i8, *(int16x4_t *)v250.i8), *(int16x4_t *)v252.i8, *(int16x4_t *)v251.i8);
        v660 = vmlal_s16(vmull_s16(*(int16x4_t *)v252.i8, *(int16x4_t *)v250.i8), *(int16x4_t *)v246.i8, *(int16x4_t *)v251.i8);
        v653 = vmlsl_s16(vmull_s16(v254, *(int16x4_t *)v250.i8), *(int16x4_t *)v249.i8, *(int16x4_t *)v251.i8);
        v255 = vdupq_n_s16(0xF8Du);
        v256 = vmlal_s16(vmull_s16(*(int16x4_t *)v249.i8, *(int16x4_t *)v250.i8), v254, *(int16x4_t *)v251.i8);
        v257 = vdupq_n_s16(0x3E15u);
        v258 = vmlsl_s16(vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v255.i8), *(int16x4_t *)v138.i8, *(int16x4_t *)v257.i8);
        v259 = vmlsl_high_s16(vmull_high_s16(v51, v255), v138, v257);
        v260 = vmull_high_s16(v138, v255);
        v261 = vmlal_s16(vmull_s16(*(int16x4_t *)v138.i8, *(int16x4_t *)v255.i8), *(int16x4_t *)v51.i8, *(int16x4_t *)v257.i8);
        v262 = vdupq_n_s16(0x36E5u);
        v263 = vmlal_high_s16(v260, v51, v257);
        v264 = vdupq_n_s16(0x20E7u);
        v265 = vmlsl_s16(vmull_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v262.i8), *(int16x4_t *)v81.i8, *(int16x4_t *)v264.i8);
        v266 = vmlsl_high_s16(vmull_high_s16(v108, v262), v81, v264);
        v267 = vmull_high_s16(v81, v262);
        v268 = vmlal_s16(vmull_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v262.i8), *(int16x4_t *)v108.i8, *(int16x4_t *)v264.i8);
        v269 = vdupq_n_s16(0x2620u);
        v270 = vmlal_high_s16(v267, v108, v264);
        v271 = vdupq_n_s16(0x3368u);
        v272 = vmlsl_s16(vmull_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v269.i8), *(int16x4_t *)v109.i8, *(int16x4_t *)v271.i8);
        v273 = vmlsl_high_s16(vmull_high_s16(v80, v269), v109, v271);
        v274 = vmull_high_s16(v109, v269);
        v275 = vmlal_s16(vmull_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v269.i8), *(int16x4_t *)v80.i8, *(int16x4_t *)v271.i8);
        v276 = vdupq_n_s16(0x3F4Fu);
        v277 = vmlal_high_s16(v274, v80, v271);
        v278 = vdupq_n_s16(0x964u);
        v279 = vmlsl_s16(vmull_s16(*(int16x4_t *)v136.i8, *(int16x4_t *)v276.i8), *(int16x4_t *)v53.i8, *(int16x4_t *)v278.i8);
        v280 = vmlsl_high_s16(vmull_high_s16(v136, v276), v53, v278);
        v281 = vmlal_s16(vmull_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v276.i8), *(int16x4_t *)v136.i8, *(int16x4_t *)v278.i8);
        v282 = vmlal_high_s16(vmull_high_s16(v53, v276), v136, v278);
        *(int16x4_t *)v278.i8 = vsub_s16(vrshrn_n_s32(v280, 0xEuLL), vrshrn_n_s32(v273, 0xEuLL));
        v283 = vsub_s16(vrshrn_n_s32(v282, 0xEuLL), vrshrn_n_s32(v277, 0xEuLL));
        v284 = vrshrn_n_s32(v272, 0xEuLL);
        *(int16x4_t *)v269.i8 = vrshrn_n_s32(v275, 0xEuLL);
        *(int16x4_t *)v276.i8 = vrshrn_n_s32(v279, 0xEuLL);
        *(int16x4_t *)v275.i8 = vrshrn_n_s32(v281, 0xEuLL);
        *(int16x4_t *)v237.i8 = vsub_s16(*(int16x4_t *)v276.i8, v284);
        *(int16x4_t *)v238.i8 = vdup_n_s16(0xDC72u);
        *(int16x4_t *)v281.i8 = vsub_s16(*(int16x4_t *)v275.i8, *(int16x4_t *)v269.i8);
        *(int16x4_t *)v279.i8 = vdup_n_s16(0xCAC9u);
        v285 = vmlsl_s16(vmull_s16(*(int16x4_t *)v237.i8, *(int16x4_t *)v238.i8), *(int16x4_t *)v281.i8, *(int16x4_t *)v279.i8);
        v286 = vmlal_s16(vmull_s16(*(int16x4_t *)v281.i8, *(int16x4_t *)v238.i8), *(int16x4_t *)v237.i8, *(int16x4_t *)v279.i8);
        v630 = vmlsl_s16(vmull_s16(*(int16x4_t *)v278.i8, *(int16x4_t *)v238.i8), v283, *(int16x4_t *)v279.i8);
        v287 = vmull_s16(v283, *(int16x4_t *)v238.i8);
        v288 = vdupq_n_s16(0x646u);
        v610 = vmlal_s16(v287, *(int16x4_t *)v278.i8, *(int16x4_t *)v279.i8);
        v289 = vdupq_n_s16(0x3FB1u);
        v648 = vmlsl_s16(vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v288.i8), *(int16x4_t *)v137.i8, *(int16x4_t *)v289.i8);
        v646 = vmlsl_high_s16(vmull_high_s16(v52, v288), v137, v289);
        v644 = vmlal_s16(vmull_s16(*(int16x4_t *)v137.i8, *(int16x4_t *)v288.i8), *(int16x4_t *)v52.i8, *(int16x4_t *)v289.i8);
        v290 = vdupq_n_s16(0x3179u);
        v640 = vmlal_high_s16(vmull_high_s16(v137, v288), v52, v289);
        v291 = vdupq_n_s16(0x289Au);
        v636 = vmlsl_s16(vmull_s16(*(int16x4_t *)v710.i8, *(int16x4_t *)v290.i8), *(int16x4_t *)v716.i8, *(int16x4_t *)v291.i8);
        v638 = vmlsl_high_s16(vmull_high_s16(v710, v290), v716, v291);
        v292 = vmull_high_s16(v716, v290);
        v293 = vmlal_s16(vmull_s16(*(int16x4_t *)v716.i8, *(int16x4_t *)v290.i8), *(int16x4_t *)v710.i8, *(int16x4_t *)v291.i8);
        v294 = vdupq_n_s16(0x1E2Bu);
        v634 = vmlal_high_s16(v292, v710, v291);
        v635 = v293;
        v295 = vdupq_n_s16(0x3871u);
        v296 = vmlsl_s16(vmull_s16(*(int16x4_t *)v641.i8, *(int16x4_t *)v294.i8), *(int16x4_t *)v713.i8, *(int16x4_t *)v295.i8);
        v629 = vmlsl_high_s16(vmull_high_s16(v641, v294), v713, v295);
        v297 = vmull_high_s16(v713, v294);
        v298 = vmlal_s16(vmull_s16(*(int16x4_t *)v713.i8, *(int16x4_t *)v294.i8), *(int16x4_t *)v641.i8, *(int16x4_t *)v295.i8);
        v299 = vdupq_n_s16(0x3D3Fu);
        v300 = vmlal_high_s16(v297, v641, v295);
        v301 = vdupq_n_s16(0x1294u);
        v302 = vmlsl_s16(vmull_s16(*(int16x4_t *)v632.i8, *(int16x4_t *)v299.i8), *(int16x4_t *)v650.i8, *(int16x4_t *)v301.i8);
        v642 = vmlsl_high_s16(vmull_high_s16(v632, v299), v650, v301);
        v303 = vmlal_s16(vmull_s16(*(int16x4_t *)v650.i8, *(int16x4_t *)v299.i8), *(int16x4_t *)v632.i8, *(int16x4_t *)v301.i8);
        v622 = v300;
        v623 = vmlal_high_s16(vmull_high_s16(v650, v299), v632, v301);
        *(int16x4_t *)v301.i8 = vrshrn_n_s32(v258, 0xEuLL);
        *(int16x4_t *)v299.i8 = vrshrn_n_s32(v265, 0xEuLL);
        *(int16x4_t *)v258.i8 = vsub_s16(*(int16x4_t *)v301.i8, *(int16x4_t *)v299.i8);
        v304 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v299.i8, v266, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v301.i8, v259, 0xEuLL));
        *(int16x4_t *)v301.i8 = vrshrn_n_s32(v261, 0xEuLL);
        *(int16x4_t *)v299.i8 = vrshrn_n_s32(v268, 0xEuLL);
        *(int16x4_t *)v261.i8 = vsub_s16(*(int16x4_t *)v301.i8, *(int16x4_t *)v299.i8);
        v305 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v299.i8, v270, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v301.i8, v263, 0xEuLL));
        v620 = v304;
        *(int16x4_t *)v270.i8 = vsub_s16(vrshrn_n_s32(v263, 0xEuLL), vrshrn_n_s32(v270, 0xEuLL));
        *(int16x4_t *)v263.i8 = vsub_s16(vrshrn_n_s32(v259, 0xEuLL), vrshrn_n_s32(v266, 0xEuLL));
        v306 = vdupq_n_s16(0x3537u);
        v307 = vdupq_n_s16(0x238Eu);
        v308 = vmlsl_s16(vmull_s16(*(int16x4_t *)v261.i8, *(int16x4_t *)v306.i8), *(int16x4_t *)v258.i8, *(int16x4_t *)v307.i8);
        v309 = vmlal_s16(vmull_s16(*(int16x4_t *)v258.i8, *(int16x4_t *)v306.i8), *(int16x4_t *)v261.i8, *(int16x4_t *)v307.i8);
        v310 = vmlsl_s16(vmull_s16(*(int16x4_t *)v270.i8, *(int16x4_t *)v306.i8), *(int16x4_t *)v263.i8, *(int16x4_t *)v307.i8);
        v311 = vmlal_s16(vmull_s16(*(int16x4_t *)v263.i8, *(int16x4_t *)v306.i8), *(int16x4_t *)v270.i8, *(int16x4_t *)v307.i8);
        v612 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v275.i8, v282, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v269.i8, v277, 0xEuLL));
        v613 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v276.i8, v280, 0xEuLL), vrshrn_high_n_s32(v284, v273, 0xEuLL));
        v312 = vsubq_s16(v613, v304);
        v313 = vsubq_s16(v612, v305);
        v314 = vdupq_n_s16(0xC4DFu);
        v315 = vdupq_n_s16(0xE782u);
        v316 = vmlsl_s16(vmull_s16(*(int16x4_t *)v312.i8, *(int16x4_t *)v314.i8), *(int16x4_t *)v313.i8, *(int16x4_t *)v315.i8);
        v711 = vmlsl_high_s16(vmull_high_s16(v312, v314), v313, v315);
        v317 = vmlal_s16(vmull_s16(*(int16x4_t *)v313.i8, *(int16x4_t *)v314.i8), *(int16x4_t *)v312.i8, *(int16x4_t *)v315.i8);
        v609 = vmlal_high_s16(vmull_high_s16(v313, v314), v312, v315);
        *(int16x4_t *)v312.i8 = vsub_s16(vrshrn_n_s32(v610, 0xEuLL), vrshrn_n_s32(v310, 0xEuLL));
        *(int16x4_t *)v277.i8 = vsub_s16(vrshrn_n_s32(v630, 0xEuLL), vrshrn_n_s32(v311, 0xEuLL));
        *(int16x4_t *)v313.i8 = vrshrn_n_s32(v308, 0xEuLL);
        *(int16x4_t *)v269.i8 = vrshrn_n_s32(v309, 0xEuLL);
        *(int16x4_t *)v280.i8 = vrshrn_n_s32(v285, 0xEuLL);
        *(int16x4_t *)v285.i8 = vrshrn_n_s32(v286, 0xEuLL);
        *(int16x4_t *)v286.i8 = vsub_s16(*(int16x4_t *)v285.i8, *(int16x4_t *)v313.i8);
        *(int16x4_t *)v275.i8 = vsub_s16(*(int16x4_t *)v280.i8, *(int16x4_t *)v269.i8);
        v615 = vmlal_s16(vmull_s16(*(int16x4_t *)v275.i8, *(int16x4_t *)v314.i8), *(int16x4_t *)v286.i8, *(int16x4_t *)v315.i8);
        v617 = vmlsl_s16(vmull_s16(*(int16x4_t *)v286.i8, *(int16x4_t *)v314.i8), *(int16x4_t *)v275.i8, *(int16x4_t *)v315.i8);
        v614 = vmlsl_s16(vmull_s16(*(int16x4_t *)v312.i8, *(int16x4_t *)v314.i8), *(int16x4_t *)v277.i8, *(int16x4_t *)v315.i8);
        v717 = vmlal_s16(vmull_s16(*(int16x4_t *)v277.i8, *(int16x4_t *)v314.i8), *(int16x4_t *)v312.i8, *(int16x4_t *)v315.i8);
        *(int16x4_t *)v312.i8 = vsub_s16(vrshrn_n_s32(v642, 0xEuLL), vrshrn_n_s32(v629, 0xEuLL));
        *(int16x4_t *)v286.i8 = vsub_s16(vrshrn_n_s32(v623, 0xEuLL), vrshrn_n_s32(v300, 0xEuLL));
        v624 = vrshrn_n_s32(v296, 0xEuLL);
        v625 = vrshrn_n_s32(v298, 0xEuLL);
        v626 = vrshrn_n_s32(v302, 0xEuLL);
        v627 = vrshrn_n_s32(v303, 0xEuLL);
        *(int16x4_t *)v292.i8 = vsub_s16(v626, v624);
        *(int16x4_t *)v277.i8 = vsub_s16(v627, v625);
        v651 = vmlsl_s16(vmull_s16(*(int16x4_t *)v292.i8, *(int16x4_t *)v314.i8), *(int16x4_t *)v277.i8, *(int16x4_t *)v315.i8);
        v633 = vmlal_s16(vmull_s16(*(int16x4_t *)v277.i8, *(int16x4_t *)v314.i8), *(int16x4_t *)v292.i8, *(int16x4_t *)v315.i8);
        v602 = vmlsl_s16(vmull_s16(*(int16x4_t *)v312.i8, *(int16x4_t *)v314.i8), *(int16x4_t *)v286.i8, *(int16x4_t *)v315.i8);
        v714 = vmlal_s16(vmull_s16(*(int16x4_t *)v286.i8, *(int16x4_t *)v314.i8), *(int16x4_t *)v312.i8, *(int16x4_t *)v315.i8);
        *(int16x4_t *)v298.i8 = vsub_s16(vrshrn_n_s32(v690, 0xEuLL), vrshrn_n_s32(v658, 0xEuLL));
        *(int16x4_t *)v314.i8 = vsub_s16(vrshrn_n_s32(v694, 0xEuLL), vrshrn_n_s32(v685, 0xEuLL));
        *(int16x4_t *)v309.i8 = vrshrn_n_s32(v707, 0xEuLL);
        *(int16x4_t *)v275.i8 = vrshrn_n_s32(v703, 0xEuLL);
        *(int16x4_t *)v277.i8 = vrshrn_n_s32(v687, 0xEuLL);
        *(int16x4_t *)v292.i8 = vrshrn_n_s32(v682, 0xEuLL);
        *(int16x4_t *)v312.i8 = vsub_s16(*(int16x4_t *)v275.i8, *(int16x4_t *)v292.i8);
        *(int16x4_t *)v286.i8 = vsub_s16(*(int16x4_t *)v309.i8, *(int16x4_t *)v277.i8);
        v318 = vdupq_n_s16(0xC7Cu);
        v319 = vdupq_n_s16(0x3EC5u);
        v320 = vmlsl_s16(vmull_s16(*(int16x4_t *)v312.i8, *(int16x4_t *)v318.i8), *(int16x4_t *)v286.i8, *(int16x4_t *)v319.i8);
        v321 = vmlal_s16(vmull_s16(*(int16x4_t *)v286.i8, *(int16x4_t *)v318.i8), *(int16x4_t *)v312.i8, *(int16x4_t *)v319.i8);
        v322 = vmlsl_s16(vmull_s16(*(int16x4_t *)v298.i8, *(int16x4_t *)v318.i8), *(int16x4_t *)v314.i8, *(int16x4_t *)v319.i8);
        v323 = vmlal_s16(vmull_s16(*(int16x4_t *)v314.i8, *(int16x4_t *)v318.i8), *(int16x4_t *)v298.i8, *(int16x4_t *)v319.i8);
        v688 = vmlsl_s16(vmull_s16(*(int16x4_t *)v676.i8, *(int16x4_t *)v318.i8), *(int16x4_t *)v705.i8, *(int16x4_t *)v319.i8);
        v708 = vmlsl_high_s16(vmull_high_s16(v676, v318), v705, v319);
        v683 = vmlal_s16(vmull_s16(*(int16x4_t *)v705.i8, *(int16x4_t *)v318.i8), *(int16x4_t *)v676.i8, *(int16x4_t *)v319.i8);
        v704 = vmlal_high_s16(vmull_high_s16(v705, v318), v676, v319);
        v677 = vmlsl_s16(vmull_s16(*(int16x4_t *)v701.i8, *(int16x4_t *)v306.i8), *(int16x4_t *)v655.i8, *(int16x4_t *)v307.i8);
        v706 = vmlsl_high_s16(vmull_high_s16(v701, v306), v655, v307);
        v324 = vmull_s16(*(int16x4_t *)v655.i8, *(int16x4_t *)v306.i8);
        v325 = vmull_high_s16(v655, v306);
        v656 = vmlal_s16(v324, *(int16x4_t *)v701.i8, *(int16x4_t *)v307.i8);
        v702 = vmlal_high_s16(v325, v701, v307);
        v326 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v277.i8, v685, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v309.i8, v694, 0xEuLL));
        v327 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v292.i8, v658, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v275.i8, v690, 0xEuLL));
        v328 = vaddq_s16(vrshrn_high_n_s32(v668, v670, 0xEuLL), vrshrn_high_n_s32(v662, v672, 0xEuLL));
        v329 = vaddq_s16(vrshrn_high_n_s32(v666, v680, 0xEuLL), vrshrn_high_n_s32(v664, v678, 0xEuLL));
        *(int16x4_t *)v325.i8 = vrshrn_n_s32(v320, 0xEuLL);
        *(int16x4_t *)v320.i8 = vrshrn_n_s32(v660, 0xEuLL);
        *(int16x4_t *)v309.i8 = vsub_s16(*(int16x4_t *)v325.i8, *(int16x4_t *)v320.i8);
        v330 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v320.i8, v256, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v325.i8, v322, 0xEuLL));
        *(int16x4_t *)v325.i8 = vrshrn_n_s32(v321, 0xEuLL);
        *(int16x4_t *)v321.i8 = vrshrn_n_s32(v674, 0xEuLL);
        *(int16x4_t *)v320.i8 = vsub_s16(*(int16x4_t *)v325.i8, *(int16x4_t *)v321.i8);
        v695 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v321.i8, v653, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v325.i8, v323, 0xEuLL));
        *(int16x4_t *)v323.i8 = vsub_s16(vrshrn_n_s32(v323, 0xEuLL), vrshrn_n_s32(v653, 0xEuLL));
        *(int16x4_t *)v325.i8 = vrshrn_n_s32(v322, 0xEuLL);
        v331 = vdupq_n_s16(0x187Eu);
        *(int16x4_t *)v321.i8 = vsub_s16(*(int16x4_t *)v325.i8, vrshrn_n_s32(v256, 0xEuLL));
        v332 = vdupq_n_s16(0x3B21u);
        v333 = vmlsl_s16(vmull_s16(*(int16x4_t *)v320.i8, *(int16x4_t *)v331.i8), *(int16x4_t *)v309.i8, *(int16x4_t *)v332.i8);
        v334 = vmlal_s16(vmull_s16(*(int16x4_t *)v309.i8, *(int16x4_t *)v331.i8), *(int16x4_t *)v320.i8, *(int16x4_t *)v332.i8);
        v335 = vmlsl_s16(vmull_s16(*(int16x4_t *)v323.i8, *(int16x4_t *)v331.i8), *(int16x4_t *)v321.i8, *(int16x4_t *)v332.i8);
        v336 = vmlal_s16(vmull_s16(*(int16x4_t *)v321.i8, *(int16x4_t *)v331.i8), *(int16x4_t *)v323.i8, *(int16x4_t *)v332.i8);
        v686 = vaddq_s16(v329, v326);
        v337 = vsubq_s16(v326, v329);
        v691 = vaddq_s16(v328, v327);
        v338 = vsubq_s16(v327, v328);
        v339 = vmlsl_s16(vmull_s16(*(int16x4_t *)v338.i8, *(int16x4_t *)v331.i8), *(int16x4_t *)v337.i8, *(int16x4_t *)v332.i8);
        v340 = vmlsl_high_s16(vmull_high_s16(v338, v331), v337, v332);
        v341 = vmlal_s16(vmull_s16(*(int16x4_t *)v337.i8, *(int16x4_t *)v331.i8), *(int16x4_t *)v338.i8, *(int16x4_t *)v332.i8);
        v342 = vmlal_high_s16(vmull_high_s16(v337, v331), v338, v332);
        v679 = vaddq_s16(v612, v305);
        v681 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v285.i8, v610, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v313.i8, v310, 0xEuLL));
        v673 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v280.i8, v630, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v269.i8, v311, 0xEuLL));
        v675 = vaddq_s16(v613, v620);
        v343 = vsubq_s16(v330, v681);
        v344 = vsubq_s16(v695, v673);
        v345 = vdupq_n_s16(0x2D41u);
        v346 = vmlsl_s16(vmull_s16(*(int16x4_t *)v344.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v343.i8, *(int16x4_t *)v345.i8);
        v671 = vmlsl_high_s16(vmull_high_s16(v344, v345), v343, v345);
        v667 = vmlal_high_s16(vmull_high_s16(v343, v345), v344, v345);
        v669 = vmlal_s16(vmull_s16(*(int16x4_t *)v343.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v344.i8, *(int16x4_t *)v345.i8);
        v347 = vsubq_s16(v686, v675);
        v348 = vsubq_s16(v691, v679);
        v665 = vmlsl_s16(vmull_s16(*(int16x4_t *)v348.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v347.i8, *(int16x4_t *)v345.i8);
        v663 = vmlsl_high_s16(vmull_high_s16(v348, v345), v347, v345);
        v659 = vmlal_high_s16(vmull_high_s16(v347, v345), v348, v345);
        v661 = vmlal_s16(vmull_s16(*(int16x4_t *)v347.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v348.i8, *(int16x4_t *)v345.i8);
        *(int16x4_t *)v347.i8 = vsub_s16(vrshrn_n_s32(v342, 0xEuLL), vrshrn_n_s32(v711, 0xEuLL));
        *(int16x4_t *)v348.i8 = vsub_s16(vrshrn_n_s32(v340, 0xEuLL), vrshrn_n_s32(v609, 0xEuLL));
        v606 = vrshrn_n_s32(v339, 0xEuLL);
        v607 = vrshrn_n_s32(v341, 0xEuLL);
        *(int16x4_t *)v612.i8 = vrshrn_n_s32(v316, 0xEuLL);
        *(int16x4_t *)v613.i8 = vrshrn_n_s32(v317, 0xEuLL);
        *(int16x4_t *)v339.i8 = vsub_s16(v607, *(int16x4_t *)v612.i8);
        *(int16x4_t *)v341.i8 = vsub_s16(v606, *(int16x4_t *)v613.i8);
        v654 = vmlsl_s16(vmull_s16(*(int16x4_t *)v339.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v341.i8, *(int16x4_t *)v345.i8);
        v631 = vmlal_s16(vmull_s16(*(int16x4_t *)v341.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v339.i8, *(int16x4_t *)v345.i8);
        v619 = vmlal_s16(vmull_s16(*(int16x4_t *)v348.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v347.i8, *(int16x4_t *)v345.i8);
        v621 = vmlsl_s16(vmull_s16(*(int16x4_t *)v347.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v348.i8, *(int16x4_t *)v345.i8);
        *(int16x4_t *)v347.i8 = vsub_s16(vrshrn_n_s32(v336, 0xEuLL), vrshrn_n_s32(v614, 0xEuLL));
        *(int16x4_t *)v348.i8 = vsub_s16(vrshrn_n_s32(v335, 0xEuLL), vrshrn_n_s32(v717, 0xEuLL));
        *(int16x4_t *)v285.i8 = vrshrn_n_s32(v334, 0xEuLL);
        v603 = vrshrn_n_s32(v333, 0xEuLL);
        v604 = vrshrn_n_s32(v617, 0xEuLL);
        v605 = vrshrn_n_s32(v615, 0xEuLL);
        *(int16x4_t *)v339.i8 = vsub_s16(*(int16x4_t *)v285.i8, v604);
        *(int16x4_t *)v341.i8 = vsub_s16(v603, v605);
        v616 = vmlal_s16(vmull_s16(*(int16x4_t *)v341.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v339.i8, *(int16x4_t *)v345.i8);
        v618 = vmlsl_s16(vmull_s16(*(int16x4_t *)v339.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v341.i8, *(int16x4_t *)v345.i8);
        v611 = vmlsl_s16(vmull_s16(*(int16x4_t *)v347.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v348.i8, *(int16x4_t *)v345.i8);
        v608 = vmlal_s16(vmull_s16(*(int16x4_t *)v348.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v347.i8, *(int16x4_t *)v345.i8);
        *(int16x4_t *)v347.i8 = vrshrn_n_s32(v648, 0xEuLL);
        *(int16x4_t *)v348.i8 = vrshrn_n_s32(v636, 0xEuLL);
        *(int16x4_t *)v339.i8 = vsub_s16(*(int16x4_t *)v347.i8, *(int16x4_t *)v348.i8);
        v637 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v348.i8, v638, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v347.i8, v646, 0xEuLL));
        *(int16x4_t *)v347.i8 = vrshrn_n_s32(v644, 0xEuLL);
        *(int16x4_t *)v348.i8 = vrshrn_n_s32(v635, 0xEuLL);
        *(int16x4_t *)v341.i8 = vsub_s16(*(int16x4_t *)v347.i8, *(int16x4_t *)v348.i8);
        v649 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v348.i8, v634, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v347.i8, v640, 0xEuLL));
        *(int16x4_t *)v327.i8 = vsub_s16(vrshrn_n_s32(v640, 0xEuLL), vrshrn_n_s32(v634, 0xEuLL));
        *(int16x4_t *)v348.i8 = vsub_s16(vrshrn_n_s32(v646, 0xEuLL), vrshrn_n_s32(v638, 0xEuLL));
        v349 = vmlsl_s16(vmull_s16(*(int16x4_t *)v341.i8, *(int16x4_t *)v331.i8), *(int16x4_t *)v339.i8, *(int16x4_t *)v332.i8);
        v350 = vmlal_s16(vmull_s16(*(int16x4_t *)v339.i8, *(int16x4_t *)v331.i8), *(int16x4_t *)v341.i8, *(int16x4_t *)v332.i8);
        v351 = vmlsl_s16(vmull_s16(*(int16x4_t *)v327.i8, *(int16x4_t *)v331.i8), *(int16x4_t *)v348.i8, *(int16x4_t *)v332.i8);
        v352 = vmlal_s16(vmull_s16(*(int16x4_t *)v348.i8, *(int16x4_t *)v331.i8), *(int16x4_t *)v327.i8, *(int16x4_t *)v332.i8);
        v645 = vaddq_s16(vrshrn_high_n_s32(v626, v642, 0xEuLL), vrshrn_high_n_s32(v624, v629, 0xEuLL));
        v647 = vaddq_s16(vrshrn_high_n_s32(v627, v623, 0xEuLL), vrshrn_high_n_s32(v625, v622, 0xEuLL));
        *(int16x4_t *)v341.i8 = vsub_s16(vrshrn_n_s32(v352, 0xEuLL), vrshrn_n_s32(v602, 0xEuLL));
        *(int16x4_t *)v327.i8 = vsub_s16(vrshrn_n_s32(v351, 0xEuLL), vrshrn_n_s32(v714, 0xEuLL));
        *(int16x4_t *)v629.i8 = vrshrn_n_s32(v349, 0xEuLL);
        *(int16x4_t *)v634.i8 = vrshrn_n_s32(v350, 0xEuLL);
        *(int16x4_t *)v635.i8 = vrshrn_n_s32(v651, 0xEuLL);
        *(int16x4_t *)v640.i8 = vrshrn_n_s32(v633, 0xEuLL);
        *(int16x4_t *)v350.i8 = vsub_s16(*(int16x4_t *)v634.i8, *(int16x4_t *)v635.i8);
        *(int16x4_t *)v349.i8 = vsub_s16(*(int16x4_t *)v629.i8, *(int16x4_t *)v640.i8);
        v353 = vmlsl_s16(vmull_s16(*(int16x4_t *)v350.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v349.i8, *(int16x4_t *)v345.i8);
        v643 = vmlal_s16(vmull_s16(*(int16x4_t *)v349.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v350.i8, *(int16x4_t *)v345.i8);
        v639 = vmlsl_s16(vmull_s16(*(int16x4_t *)v341.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v327.i8, *(int16x4_t *)v345.i8);
        v652 = vmlal_s16(vmull_s16(*(int16x4_t *)v327.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v341.i8, *(int16x4_t *)v345.i8);
        v354 = vsubq_s16(v637, v645);
        v355 = vsubq_s16(v649, v647);
        v356 = vmlsl_s16(vmull_s16(*(int16x4_t *)v355.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v354.i8, *(int16x4_t *)v345.i8);
        v357 = vmlsl_high_s16(vmull_high_s16(v355, v345), v354, v345);
        v358 = vmlal_s16(vmull_s16(*(int16x4_t *)v354.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v355.i8, *(int16x4_t *)v345.i8);
        v359 = vmlal_high_s16(vmull_high_s16(v354, v345), v355, v345);
        *(int16x4_t *)v280.i8 = vsub_s16(vrshrn_n_s32(v704, 0xEuLL), vrshrn_n_s32(v702, 0xEuLL));
        *(int16x4_t *)v316.i8 = vsub_s16(vrshrn_n_s32(v708, 0xEuLL), vrshrn_n_s32(v706, 0xEuLL));
        *(int16x4_t *)v355.i8 = vrshrn_n_s32(v688, 0xEuLL);
        v628 = vrshrn_n_s32(v683, 0xEuLL);
        *(int16x4_t *)v633.i8 = vrshrn_n_s32(v677, 0xEuLL);
        *(int16x4_t *)v677.i8 = vrshrn_n_s32(v656, 0xEuLL);
        *(int16x4_t *)v347.i8 = vsub_s16(v628, *(int16x4_t *)v677.i8);
        *(int16x4_t *)v354.i8 = vsub_s16(*(int16x4_t *)v355.i8, *(int16x4_t *)v633.i8);
        v360 = vmlsl_s16(vmull_s16(*(int16x4_t *)v347.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v354.i8, *(int16x4_t *)v345.i8);
        v689 = vmlal_s16(vmull_s16(*(int16x4_t *)v354.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v347.i8, *(int16x4_t *)v345.i8);
        v361 = vmlsl_s16(vmull_s16(*(int16x4_t *)v280.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v316.i8, *(int16x4_t *)v345.i8);
        v684 = vmlal_s16(vmull_s16(*(int16x4_t *)v316.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v280.i8, *(int16x4_t *)v345.i8);
        v362 = vmlsl_s16(vmull_s16(*(int16x4_t *)v693.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v699.i8, *(int16x4_t *)v345.i8);
        v363 = vmlsl_high_s16(vmull_high_s16(v693, v345), v699, v345);
        v364 = vmlal_s16(vmull_s16(*(int16x4_t *)v699.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v693.i8, *(int16x4_t *)v345.i8);
        v365 = vmlal_high_s16(vmull_high_s16(v699, v345), v693, v345);
        v366 = vmlsl_s16(vmull_s16(*(int16x4_t *)v657.i8, *(int16x4_t *)v331.i8), *(int16x4_t *)v697.i8, *(int16x4_t *)v332.i8);
        v367 = vmlsl_high_s16(vmull_high_s16(v657, v331), v697, v332);
        v368 = vmlal_s16(vmull_s16(*(int16x4_t *)v697.i8, *(int16x4_t *)v331.i8), *(int16x4_t *)v657.i8, *(int16x4_t *)v332.i8);
        v369 = vmlal_high_s16(vmull_high_s16(v697, v331), v657, v332);
        v370 = vrshrn_high_n_s32(v603, v335, 0xEuLL);
        v371 = vrshrn_high_n_s32(*(int16x4_t *)v285.i8, v336, 0xEuLL);
        v372 = vrshrn_high_n_s32(v607, v342, 0xEuLL);
        v373 = vaddq_s16(v675, v686);
        v374 = vaddq_s16(v681, v330);
        v700 = vaddq_s16(v673, v695);
        v698 = vaddq_s16(v679, v691);
        v375 = vrshrn_high_n_s32(vrshrn_n_s32(v346, 0xEuLL), v671, 0xEuLL);
        v376 = vrshrn_high_n_s32(*(int16x4_t *)v612.i8, v711, 0xEuLL);
        v718 = vaddq_s16(vrshrn_high_n_s32(v605, v717, 0xEuLL), v370);
        v712 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v613.i8, v609, 0xEuLL), vrshrn_high_n_s32(v606, v340, 0xEuLL));
        v696 = vaddq_s16(v376, v372);
        v377 = vaddq_s16(vrshrn_high_n_s32(v604, v614, 0xEuLL), v371);
        v378 = vrshrn_high_n_s32(vrshrn_n_s32(v654, 0xEuLL), v621, 0xEuLL);
        v379 = vrshrn_high_n_s32(vrshrn_n_s32(v631, 0xEuLL), v619, 0xEuLL);
        v380 = vrshrn_high_n_s32(vrshrn_n_s32(v618, 0xEuLL), v611, 0xEuLL);
        v381 = vrshrn_high_n_s32(vrshrn_n_s32(v616, 0xEuLL), v608, 0xEuLL);
        v692 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v640.i8, v714, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v629.i8, v351, 0xEuLL));
        v382 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v635.i8, v602, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v634.i8, v352, 0xEuLL));
        v383 = vaddq_s16(v647, v649);
        v384 = vrshrn_high_n_s32(vrshrn_n_s32(v353, 0xEuLL), v639, 0xEuLL);
        v385 = vrshrn_high_n_s32(vrshrn_n_s32(v643, 0xEuLL), v652, 0xEuLL);
        v386 = vrshrn_high_n_s32(vrshrn_n_s32(v356, 0xEuLL), v357, 0xEuLL);
        v387 = vrshrn_high_n_s32(vrshrn_n_s32(v358, 0xEuLL), v359, 0xEuLL);
        v388 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v633.i8, v706, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v355.i8, v708, 0xEuLL));
        v389 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v677.i8, v702, 0xEuLL), vrshrn_high_n_s32(v628, v704, 0xEuLL));
        v390 = vrshrn_high_n_s32(vrshrn_n_s32(v360, 0xEuLL), v361, 0xEuLL);
        v391 = vrshrn_high_n_s32(vrshrn_n_s32(v689, 0xEuLL), v684, 0xEuLL);
        v392 = vrshrn_high_n_s32(vrshrn_n_s32(v362, 0xEuLL), v363, 0xEuLL);
        v393 = vrshrn_high_n_s32(vrshrn_n_s32(v364, 0xEuLL), v365, 0xEuLL);
        v394 = vrshrn_high_n_s32(vrshrn_n_s32(v366, 0xEuLL), v367, 0xEuLL);
        v395 = vrshrn_high_n_s32(vrshrn_n_s32(v368, 0xEuLL), v369, 0xEuLL);
        v396 = vaddq_s16(v395, v393);
        v397 = vsubq_s16(v393, v395);
        v398 = vsubq_s16(v392, v394);
        v399 = vaddq_s16(v394, v392);
        v400 = vaddq_s16(v397, v388);
        v401 = vsubq_s16(v397, v388);
        v402 = vaddq_s16(v398, v390);
        v403 = vsubq_s16(v398, v390);
        v404 = vaddq_s16(v399, v391);
        v715 = vsubq_s16(v399, v391);
        v405 = vaddq_s16(v396, v389);
        v709 = vsubq_s16(v396, v389);
        v406 = vrshrn_high_n_s32(vrshrn_n_s32(v661, 0xEuLL), v659, 0xEuLL);
        v407 = (int16x8_t *)&v9[v12];
        v407[56] = v382;
        v408 = vaddq_s16(v404, v382);
        v409 = vsubq_s16(v404, v382);
        v407[60] = v383;
        v410 = vaddq_s16(v405, v383);
        v411 = vsubq_s16(v405, v383);
        v412 = vrshrn_high_n_s32(vrshrn_n_s32(v669, 0xEuLL), v667, 0xEuLL);
        v413 = vrshrn_high_n_s32(vrshrn_n_s32(v665, 0xEuLL), v663, 0xEuLL);
        v407[64] = v373;
        v414 = vqaddq_s16(v411, v373);
        v415 = vqsubq_s16(v411, v373);
        v407[68] = v374;
        v416 = vqaddq_s16(v409, v374);
        v417 = vqsubq_s16(v409, v374);
        v418 = vaddq_s16(v645, v637);
        v407[120] = v700;
        v407[124] = v698;
        v407[100] = v412;
        v407[88] = v375;
        v407[96] = v406;
        v407[92] = v413;
        v407[72] = v718;
        v407[76] = v712;
        v407[112] = v696;
        v407[116] = v377;
        v407[80] = v378;
        v407[108] = v379;
        v407[84] = v380;
        v407[104] = v381;
        v407[32] = v418;
        v407[36] = v692;
        v407[52] = v385;
        v407[40] = v384;
        v407[44] = v386;
        v407[48] = v387;
        if ((v13 & 1) == 0)
          break;
        v407[64] = v415;
        v407[68] = v417;
        v407[56] = v416;
        v407[60] = v414;
        v407[120] = vsubq_s16(v408, v700);
        v407[124] = vsubq_s16(v410, v698);
        *v407 = vaddq_s16(v410, v698);
        v407[4] = vaddq_s16(v408, v700);
        v14 = vaddq_s16(v402, v385);
        v15 = vaddq_s16(v400, v387);
        v16 = vsubq_s16(v400, v387);
        v17 = vsubq_s16(v402, v385);
        v407[72] = vsubq_s16(v17, v718);
        v407[76] = vsubq_s16(v16, v712);
        v407[48] = vaddq_s16(v16, v712);
        v407[52] = vaddq_s16(v17, v718);
        v407[112] = vsubq_s16(v15, v696);
        v407[116] = vsubq_s16(v14, v377);
        v407[8] = vaddq_s16(v14, v377);
        v407[12] = vaddq_s16(v15, v696);
        v18 = vaddq_s16(v401, v386);
        v19 = vaddq_s16(v403, v384);
        v20 = vsubq_s16(v403, v384);
        v21 = vsubq_s16(v401, v386);
        v407[80] = vsubq_s16(v21, v378);
        v407[84] = vsubq_s16(v20, v380);
        v407[40] = vaddq_s16(v20, v380);
        v407[44] = vaddq_s16(v21, v378);
        v407[104] = vsubq_s16(v19, v381);
        v407[108] = vsubq_s16(v18, v379);
        v407[16] = vaddq_s16(v18, v379);
        v407[20] = vaddq_s16(v19, v381);
        v22 = vaddq_s16(v715, v692);
        v23 = vaddq_s16(v709, v418);
        v24 = vsubq_s16(v709, v418);
        v25 = vsubq_s16(v715, v692);
        v407[88] = vsubq_s16(v25, v375);
        v407[92] = vsubq_s16(v24, v413);
        v407[32] = vaddq_s16(v24, v413);
        v407[36] = vaddq_s16(v25, v375);
        v407[96] = vsubq_s16(v23, v406);
        v407[100] = vsubq_s16(v22, v412);
        v407[24] = vaddq_s16(v22, v412);
        v407[28] = vaddq_s16(v23, v406);
        v12 += 16;
        if ((_DWORD)v12 == 64)
          goto LABEL_2;
      }
      v419 = vrshrq_n_s16(v415, 6uLL);
      v420 = vrshrq_n_s16(v417, 6uLL);
      v421 = vrshrq_n_s16(v416, 6uLL);
      v422 = vrshrq_n_s16(v414, 6uLL);
      if (v601)
      {
        v423 = (int16x8_t *)((char *)v1 + 2 * v600);
        v424 = &v1[v599];
        v425 = (int16x8_t *)((char *)v1 + 2 * v598);
        v426 = 2 * v4;
        v427 = 2 * v5;
        v428 = vmovl_u8((uint8x8_t)vqmovun_s16(vaddq_s16(*v424, v419)));
        v429 = vmovl_u8((uint8x8_t)vqmovun_s16(vaddq_s16(*(int16x8_t *)((char *)v425 + 2 * v5), v421)));
        v430 = vmovl_u8((uint8x8_t)vqmovun_s16(vaddq_s16(*v425, v422)));
        *(uint16x8_t *)((char *)v424 + v426) = vmovl_u8((uint8x8_t)vqmovun_s16(vaddq_s16(*(int16x8_t *)((char *)v424 + 2 * v4), v420)));
        *v424 = (int16x8_t)v428;
        *(uint16x8_t *)((char *)v425 + v427) = v429;
        *v425 = (int16x8_t)v430;
        v431 = (int16x8_t *)((char *)v424 + 2 * v6);
        v432 = (int16x8_t *)((char *)v425 + 2 * v7);
        v433 = v407[120];
        v434 = v407[124];
        v435 = vqaddq_s16(v408, v433);
        v436 = vrsraq_n_s16(*(int16x8_t *)((char *)v423 + 2 * v5), vqsubq_s16(v408, v433), 6uLL);
        v437 = vrsraq_n_s16(*v423, vqsubq_s16(v410, v434), 6uLL);
        v438 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v1, vqaddq_s16(v410, v434), 6uLL)));
        *(uint16x8_t *)((char *)v1 + v426) = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*(int16x8_t *)((char *)v1 + 2 * v4), v435, 6uLL)));
        *v1 = (int16x8_t)v438;
        *(uint16x8_t *)((char *)v423 + v427) = vmovl_u8((uint8x8_t)vqmovun_s16(v436));
        *(uint16x8_t *)v423 = vmovl_u8((uint8x8_t)vqmovun_s16(v437));
        v439 = (int16x8_t *)((char *)v1 + 2 * v6);
        v440 = (int16x8_t *)((char *)v423 + 2 * v7);
        v441 = v407[48];
        v442 = v407[52];
        v443 = vaddq_s16(v442, v402);
        v444 = vaddq_s16(v441, v400);
        v445 = vsubq_s16(v400, v441);
        v446 = vsubq_s16(v402, v442);
        v447 = v407[72];
        v448 = v407[76];
        v449 = vqaddq_s16(v445, v448);
        v450 = vqaddq_s16(v446, v447);
        v451 = vrsraq_n_s16(*(int16x8_t *)((char *)v431 + 2 * v4), vqsubq_s16(v445, v448), 6uLL);
        v452 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v431, vqsubq_s16(v446, v447), 6uLL)));
        v453 = vmovl_u8((uint8x8_t)vqmovun_s16(v451));
        v454 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*(int16x8_t *)((char *)v432 + 2 * v5), v449, 6uLL)));
        v455 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v432, v450, 6uLL)));
        *(uint16x8_t *)((char *)v431 + v426) = v453;
        *v431 = (int16x8_t)v452;
        *(uint16x8_t *)((char *)v432 + v427) = v454;
        *v432 = (int16x8_t)v455;
        v456 = (int16x8_t *)((char *)v431 + 2 * v6);
        v457 = (int16x8_t *)((char *)v432 + 2 * v7);
        v458 = v407[112];
        v459 = v407[116];
        v460 = vqaddq_s16(v444, v458);
        v461 = vrsraq_n_s16(*(int16x8_t *)((char *)v440 + 2 * v5), vqsubq_s16(v444, v458), 6uLL);
        v462 = vrsraq_n_s16(*v440, vqsubq_s16(v443, v459), 6uLL);
        v463 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v439, vqaddq_s16(v443, v459), 6uLL)));
        *(uint16x8_t *)((char *)v439 + v426) = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*(int16x8_t *)((char *)v439 + 2 * v4), v460, 6uLL)));
        *v439 = (int16x8_t)v463;
        *(uint16x8_t *)((char *)v440 + v427) = vmovl_u8((uint8x8_t)vqmovun_s16(v461));
        *(uint16x8_t *)v440 = vmovl_u8((uint8x8_t)vqmovun_s16(v462));
        v464 = (int16x8_t *)((char *)v439 + 2 * v6);
        v465 = (int16x8_t *)((char *)v440 + 2 * v7);
        v466 = v407[40];
        v467 = v407[44];
        v468 = vaddq_s16(v467, v401);
        v469 = vaddq_s16(v466, v403);
        v470 = vsubq_s16(v403, v466);
        v471 = vsubq_s16(v401, v467);
        v472 = v407[80];
        v473 = v407[84];
        v474 = vqaddq_s16(v470, v473);
        v475 = vqaddq_s16(v471, v472);
        v476 = vrsraq_n_s16(*(int16x8_t *)((char *)v456 + 2 * v4), vqsubq_s16(v470, v473), 6uLL);
        v477 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v456, vqsubq_s16(v471, v472), 6uLL)));
        v478 = vmovl_u8((uint8x8_t)vqmovun_s16(v476));
        v479 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*(int16x8_t *)((char *)v457 + 2 * v5), v474, 6uLL)));
        v480 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v457, v475, 6uLL)));
        *(uint16x8_t *)((char *)v456 + v426) = v478;
        *v456 = (int16x8_t)v477;
        *(uint16x8_t *)((char *)v457 + v427) = v479;
        *v457 = (int16x8_t)v480;
        v481 = (int16x8_t *)((char *)v456 + 2 * v6);
        v482 = (int16x8_t *)((char *)v457 + 2 * v7);
        v483 = v407[104];
        v484 = v407[108];
        v485 = vqaddq_s16(v469, v483);
        v486 = vrsraq_n_s16(*(int16x8_t *)((char *)v465 + 2 * v5), vqsubq_s16(v469, v483), 6uLL);
        v487 = vrsraq_n_s16(*v465, vqsubq_s16(v468, v484), 6uLL);
        v488 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v464, vqaddq_s16(v468, v484), 6uLL)));
        *(uint16x8_t *)((char *)v464 + v426) = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*(int16x8_t *)((char *)v464 + 2 * v4), v485, 6uLL)));
        *v464 = (int16x8_t)v488;
        *(uint16x8_t *)((char *)v465 + v427) = vmovl_u8((uint8x8_t)vqmovun_s16(v486));
        *(uint16x8_t *)v465 = vmovl_u8((uint8x8_t)vqmovun_s16(v487));
        v489 = (int16x8_t *)((char *)v464 + 2 * v6);
        v490 = (int16x8_t *)((char *)v465 + 2 * v7);
        v491 = v407[32];
        v492 = v407[36];
        v493 = vaddq_s16(v492, v715);
        v494 = vaddq_s16(v491, v709);
        v495 = vsubq_s16(v709, v491);
        v496 = vsubq_s16(v715, v492);
        v497 = v407[88];
        v498 = v407[92];
        v499 = vqaddq_s16(v495, v498);
        v500 = vqaddq_s16(v496, v497);
        v501 = vrsraq_n_s16(*(int16x8_t *)((char *)v481 + 2 * v4), vqsubq_s16(v495, v498), 6uLL);
        v502 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v481, vqsubq_s16(v496, v497), 6uLL)));
        v503 = vmovl_u8((uint8x8_t)vqmovun_s16(v501));
        v504 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*(int16x8_t *)((char *)v482 + 2 * v5), v499, 6uLL)));
        *(int8x8_t *)v501.i8 = vqmovun_s16(vrsraq_n_s16(*v482, v500, 6uLL));
        *(uint16x8_t *)((char *)v481 + v426) = v503;
        *v481 = (int16x8_t)v502;
        *(uint16x8_t *)((char *)v482 + v427) = v504;
        *(uint16x8_t *)v482 = vmovl_u8(*(uint8x8_t *)v501.i8);
        v505 = v407[96];
        v506 = v407[100];
        v507 = vqaddq_s16(v494, v505);
        v508 = vrsraq_n_s16(*(int16x8_t *)((char *)v490 + 2 * v5), vqsubq_s16(v494, v505), 6uLL);
        v509 = vrsraq_n_s16(*v490, vqsubq_s16(v493, v506), 6uLL);
        v510 = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*v489, vqaddq_s16(v493, v506), 6uLL)));
        *(uint16x8_t *)((char *)v489 + v426) = vmovl_u8((uint8x8_t)vqmovun_s16(vrsraq_n_s16(*(int16x8_t *)((char *)v489 + 2 * v4), v507, 6uLL)));
        *v489 = (int16x8_t)v510;
        *(uint16x8_t *)((char *)v490 + v427) = vmovl_u8((uint8x8_t)vqmovun_s16(v508));
        *(uint16x8_t *)v490 = vmovl_u8((uint8x8_t)vqmovun_s16(v509));
        ++v1;
      }
      else
      {
        v511 = (int8x8_t *)((char *)v11 + v600);
        v512 = (int8x8_t *)&v11[v599];
        v513 = (int8x8_t *)((char *)v11 + v598);
        v514 = (int16x8_t)vaddw_u8((uint16x8_t)v422, *(uint8x8_t *)((char *)v11 + v598));
        v515 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)v419, v11[v599]));
        v516 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)v421, *(uint8x8_t *)((char *)v11 + v598 + v5)));
        *(int8x8_t *)((char *)v512 + v4) = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)v420, *(uint8x8_t *)((char *)&v11[v599] + v4)));
        *v512 = v515;
        *(int8x8_t *)((char *)v513 + v5) = v516;
        *v513 = vqmovun_s16(v514);
        v517 = (uint8x8_t *)((char *)&v11[v599] + v6);
        v518 = (uint8x8_t *)((char *)v11 + v598 + v7);
        v519 = v407[120];
        v520 = v407[124];
        v521 = vqaddq_s16(v410, v520);
        v522 = vqsubq_s16(v410, v520);
        v523 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v11), v521, 6uLL);
        v524 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v11 + v4)), vqaddq_s16(v408, v519), 6uLL);
        v525 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v11 + v600 + v5)), vqsubq_s16(v408, v519), 6uLL);
        v526 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v11 + v600)), v522, 6uLL);
        *(int8x8_t *)((char *)v11 + v4) = vqmovun_s16(v524);
        *v11 = (uint8x8_t)vqmovun_s16(v523);
        *(int8x8_t *)((char *)v511 + v5) = vqmovun_s16(v525);
        *v511 = vqmovun_s16(v526);
        v527 = (int8x8_t *)((char *)v11 + v6);
        v528 = (uint8x8_t *)((char *)v11 + v600 + v7);
        v529 = v407[48];
        v530 = v407[52];
        v531 = vaddq_s16(v530, v402);
        v532 = vaddq_s16(v529, v400);
        v533 = vsubq_s16(v400, v529);
        v534 = vsubq_s16(v402, v530);
        v535 = v407[72];
        v536 = v407[76];
        v537 = vqaddq_s16(v534, v535);
        v538 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v517), vqsubq_s16(v534, v535), 6uLL);
        v539 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v517 + v4)), vqsubq_s16(v533, v536), 6uLL);
        v540 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v518 + v5)), vqaddq_s16(v533, v536), 6uLL);
        *(int8x8_t *)v536.i8 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v518), v537, 6uLL));
        *(int8x8_t *)((char *)v517 + v4) = vqmovun_s16(v539);
        *v517 = (uint8x8_t)vqmovun_s16(v538);
        *(int8x8_t *)((char *)v518 + v5) = vqmovun_s16(v540);
        *v518 = *(uint8x8_t *)v536.i8;
        v541 = (uint8x8_t *)((char *)v517 + v6);
        v542 = (uint8x8_t *)((char *)v518 + v7);
        v543 = v407[112];
        v544 = v407[116];
        v545 = vqaddq_s16(v531, v544);
        v546 = vqsubq_s16(v531, v544);
        v547 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v11 + v6)), v545, 6uLL);
        v548 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v11 + v6 + v4)), vqaddq_s16(v532, v543), 6uLL);
        v549 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v528 + v5)), vqsubq_s16(v532, v543), 6uLL);
        v550 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v528), v546, 6uLL);
        *(int8x8_t *)((char *)v527 + v4) = vqmovun_s16(v548);
        *v527 = vqmovun_s16(v547);
        *(int8x8_t *)((char *)v528 + v5) = vqmovun_s16(v549);
        *v528 = (uint8x8_t)vqmovun_s16(v550);
        v551 = (uint8x8_t *)((char *)v11 + v6 + v6);
        v552 = (uint8x8_t *)((char *)v528 + v7);
        v553 = v407[40];
        v554 = v407[44];
        v555 = vaddq_s16(v554, v401);
        v556 = vaddq_s16(v553, v403);
        v557 = vsubq_s16(v403, v553);
        v558 = vsubq_s16(v401, v554);
        v559 = v407[80];
        v560 = v407[84];
        v561 = vqaddq_s16(v558, v559);
        v562 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v541), vqsubq_s16(v558, v559), 6uLL);
        v563 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v541 + v4)), vqsubq_s16(v557, v560), 6uLL);
        v564 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v542 + v5)), vqaddq_s16(v557, v560), 6uLL);
        *(int8x8_t *)v560.i8 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v542), v561, 6uLL));
        *(int8x8_t *)((char *)v541 + v4) = vqmovun_s16(v563);
        *v541 = (uint8x8_t)vqmovun_s16(v562);
        *(int8x8_t *)((char *)v542 + v5) = vqmovun_s16(v564);
        *v542 = *(uint8x8_t *)v560.i8;
        v565 = (uint8x8_t *)((char *)v541 + v6);
        v566 = (uint8x8_t *)((char *)v542 + v7);
        v567 = v407[104];
        v568 = v407[108];
        v569 = vqaddq_s16(v555, v568);
        v570 = vqaddq_s16(v556, v567);
        v571 = vqsubq_s16(v555, v568);
        v572 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v551), v569, 6uLL);
        v573 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v552 + v5)), vqsubq_s16(v556, v567), 6uLL);
        v574 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v552), v571, 6uLL);
        *(int8x8_t *)((char *)v551 + v4) = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v551 + v4)), v570, 6uLL));
        *v551 = (uint8x8_t)vqmovun_s16(v572);
        *(int8x8_t *)((char *)v552 + v5) = vqmovun_s16(v573);
        *v552 = (uint8x8_t)vqmovun_s16(v574);
        v575 = (uint8x8_t *)((char *)v551 + v6);
        v576 = (int8x8_t *)((char *)v552 + v7);
        v577 = v407[32];
        v578 = v407[36];
        v579 = vaddq_s16(v578, v715);
        v580 = vaddq_s16(v577, v709);
        v581 = vsubq_s16(v709, v577);
        v582 = vsubq_s16(v715, v578);
        v583 = v407[88];
        v584 = v407[92];
        v585 = vqaddq_s16(v582, v583);
        v586 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v565), vqsubq_s16(v582, v583), 6uLL);
        v587 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v565 + v4)), vqsubq_s16(v581, v584), 6uLL);
        v588 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v566 + v5)), vqaddq_s16(v581, v584), 6uLL);
        v589 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v566), v585, 6uLL);
        *(int8x8_t *)((char *)v565 + v4) = vqmovun_s16(v587);
        *v565 = (uint8x8_t)vqmovun_s16(v586);
        *(int8x8_t *)((char *)v566 + v5) = vqmovun_s16(v588);
        *v566 = (uint8x8_t)vqmovun_s16(v589);
        v590 = v407[96];
        v591 = v407[100];
        v592 = vqaddq_s16(v579, v591);
        v593 = vqaddq_s16(v580, v590);
        v594 = vqsubq_s16(v579, v591);
        v595 = vrsraq_n_s16((int16x8_t)vmovl_u8(*v575), v592, 6uLL);
        v596 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v552 + v7 + v5)), vqsubq_s16(v580, v590), 6uLL);
        v597 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v552 + v7)), v594, 6uLL);
        *(int8x8_t *)((char *)v575 + v4) = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v575 + v4)), v593, 6uLL));
        *v575 = (uint8x8_t)vqmovun_s16(v595);
        *(int8x8_t *)((char *)v576 + v5) = vqmovun_s16(v596);
        *v576 = vqmovun_s16(v597);
        ++v11;
      }
      v12 += 16;
    }
    while ((_DWORD)v12 != 64);
LABEL_2:
    v8 = 0;
    v9 = &v719;
  }
  while ((v13 & 1) != 0);
  return result;
}

int8x8_t vpx_idct4x4_16_add_neon(int16x8_t *a1, __int32 *a2, int a3)
{
  int32x4_t v3;
  int32x4_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x4_t v19;
  int32x4_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  __int32 *v36;
  __int32 *v37;
  int8x8_t result;

  v3 = (int32x4_t)vuzp1q_s16(*a1, a1[1]);
  v4 = (int32x4_t)vuzp1q_s16(a1[2], a1[3]);
  v5 = (int64x2_t)vtrn1q_s32(v3, v4);
  v6 = (int64x2_t)vtrn2q_s32(v3, v4);
  v7 = (int16x8_t)vzip1q_s64(v5, v6);
  v8 = (int16x8_t)vzip2q_s64(v5, v6);
  v9 = vtrn1q_s16(v7, v8);
  v10 = vtrn2q_s16(v7, v8);
  v11 = vdupq_n_s16(0x2D41u);
  v12 = vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v11.i8);
  v13 = vmlsl_high_s16(v12, v9, v11);
  v14 = vmlal_high_s16(v12, v9, v11);
  v15 = vdupq_n_s16(0x187Eu);
  v16 = vdupq_n_s16(0x3B21u);
  v17 = vmlsl_high_s16(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v15.i8), v10, v16);
  v18 = vmlal_high_s16(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v16.i8), v10, v15);
  *(int16x4_t *)v10.i8 = vrshrn_n_s32(v14, 0xEuLL);
  *(int16x4_t *)v18.i8 = vrshrn_n_s32(v18, 0xEuLL);
  v19 = vsub_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v18.i8);
  v20 = (int32x4_t)vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v18.i8, v17, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v10.i8, v13, 0xEuLL));
  *(int16x4_t *)v14.i8 = vsub_s16(vrshrn_n_s32(v13, 0xEuLL), vrshrn_n_s32(v17, 0xEuLL));
  v14.u64[1] = (unint64_t)v19;
  v21 = (int64x2_t)vtrn1q_s32(v20, v14);
  v22 = (int64x2_t)vtrn2q_s32(v20, v14);
  v23 = (int16x8_t)vzip1q_s64(v21, v22);
  v24 = (int16x8_t)vzip2q_s64(v21, v22);
  v25 = vtrn1q_s16(v23, v24);
  v26 = vtrn2q_s16(v23, v24);
  v27 = vmull_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v11.i8);
  v28 = vmlsl_high_s16(v27, v25, v11);
  v29 = vmlal_high_s16(v27, v25, v11);
  v30 = vmlsl_high_s16(vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v15.i8), v26, v16);
  v31 = vmlal_high_s16(vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v16.i8), v26, v15);
  v32 = vrshrn_high_n_s32(vrshrn_n_s32(v29, 0xEuLL), v28, 0xEuLL);
  v33 = vrshrn_high_n_s32(vrshrn_n_s32(v31, 0xEuLL), v30, 0xEuLL);
  v34 = vaddq_s16(v33, v32);
  v35 = vsubq_s16(v32, v33);
  v36 = (__int32 *)((char *)a2 + a3);
  v33.i32[0] = *a2;
  v33.i32[1] = *v36;
  v37 = (__int32 *)((char *)a2 + 2 * a3);
  v29.i32[0] = *(__int32 *)((char *)v37 + a3);
  v29.i32[1] = *v37;
  *(int8x8_t *)v33.i8 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v33.i8), v34, 4uLL));
  *a2 = v33.i32[0];
  *v36 = v33.i32[1];
  result = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v29.i8), v35, 4uLL));
  *v37 = result.i32[1];
  *(__int32 *)((char *)v37 + a3) = result.i32[0];
  return result;
}

uint8x8_t vpx_idct8x8_1_add_neon(__int16 *a1, uint8x8_t *a2, int a3)
{
  signed int v3;
  unsigned int v4;
  uint8x8_t v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  uint8x8_t *v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  uint8x8_t result;
  uint8x8_t v13;
  uint8x8_t *v14;
  uint8x8_t *v15;
  uint8x8_t *v16;
  uint8x8_t *v17;
  uint8x8_t *v18;

  v3 = (46340 * ((46340 * *a1 + 0x8000) >> 16) + 0x8000) & 0xFFFF0000;
  v4 = (v3 >> 16) + 16;
  if (v3 < -1114111)
  {
    v13 = (uint8x8_t)vqmovun_s16(vdupq_n_s16(-(v4 >> 5)));
    *a2 = vqsub_u8(*a2, v13);
    v14 = (uint8x8_t *)((char *)a2 + a3);
    *v14 = vqsub_u8(*v14, v13);
    v15 = (uint8x8_t *)((char *)v14 + a3);
    *v15 = vqsub_u8(*v15, v13);
    v16 = (uint8x8_t *)((char *)v15 + a3);
    *v16 = vqsub_u8(*v16, v13);
    v17 = (uint8x8_t *)((char *)v16 + a3);
    *v17 = vqsub_u8(*v17, v13);
    v18 = (uint8x8_t *)((char *)v17 + a3);
    *v18 = vqsub_u8(*v18, v13);
    v11 = (uint8x8_t *)((char *)v18 + a3);
    *v11 = vqsub_u8(*v11, v13);
    result = vqsub_u8(*(uint8x8_t *)((char *)v11 + a3), v13);
  }
  else
  {
    v5 = (uint8x8_t)vqmovun_s16(vdupq_n_s16(v4 >> 5));
    *a2 = vqadd_u8(*a2, v5);
    v6 = (uint8x8_t *)((char *)a2 + a3);
    *v6 = vqadd_u8(*v6, v5);
    v7 = (uint8x8_t *)((char *)v6 + a3);
    *v7 = vqadd_u8(*v7, v5);
    v8 = (uint8x8_t *)((char *)v7 + a3);
    *v8 = vqadd_u8(*v8, v5);
    v9 = (uint8x8_t *)((char *)v8 + a3);
    *v9 = vqadd_u8(*v9, v5);
    v10 = (uint8x8_t *)((char *)v9 + a3);
    *v10 = vqadd_u8(*v10, v5);
    v11 = (uint8x8_t *)((char *)v10 + a3);
    *v11 = vqadd_u8(*v11, v5);
    result = vqadd_u8(*(uint8x8_t *)((char *)v11 + a3), v5);
  }
  *(uint8x8_t *)((char *)v11 + a3) = result;
  return result;
}

int8x8_t vpx_idct8x8_64_add_neon(int16x8_t *a1, uint8x8_t *a2, int a3)
{
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int16x4_t v46;
  int16x8_t v47;
  int16x4_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x4_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int16x8_t v140;
  int16x8_t v141;
  uint8x8_t *v142;
  uint8x8_t *v143;
  uint8x8_t *v144;
  uint8x8_t *v145;
  uint8x8_t *v146;
  uint8x8_t *v147;
  int8x8_t result;

  v3 = vuzp1q_s16(*a1, a1[1]);
  v4 = vuzp1q_s16(a1[2], a1[3]);
  v5 = vuzp1q_s16(a1[4], a1[5]);
  v6 = vuzp1q_s16(a1[6], a1[7]);
  v7 = vuzp1q_s16(a1[8], a1[9]);
  v8 = vuzp1q_s16(a1[10], a1[11]);
  v9 = vuzp1q_s16(a1[12], a1[13]);
  v10 = vuzp1q_s16(a1[14], a1[15]);
  v11 = (int32x4_t)vtrn1q_s16(v3, v4);
  v12 = (int32x4_t)vtrn2q_s16(v3, v4);
  v13 = (int32x4_t)vtrn1q_s16(v5, v6);
  v14 = (int32x4_t)vtrn2q_s16(v5, v6);
  v15 = (int32x4_t)vtrn1q_s16(v7, v8);
  v16 = (int32x4_t)vtrn2q_s16(v7, v8);
  v17 = (int32x4_t)vtrn1q_s16(v9, v10);
  v18 = (int32x4_t)vtrn2q_s16(v9, v10);
  v19 = (int64x2_t)vtrn1q_s32(v11, v13);
  v20 = (int64x2_t)vtrn2q_s32(v11, v13);
  v21 = (int64x2_t)vtrn1q_s32(v12, v14);
  v22 = (int64x2_t)vtrn2q_s32(v12, v14);
  v23 = (int64x2_t)vtrn1q_s32(v15, v17);
  v24 = (int64x2_t)vtrn2q_s32(v15, v17);
  v25 = (int64x2_t)vtrn1q_s32(v16, v18);
  v26 = (int64x2_t)vtrn2q_s32(v16, v18);
  v27 = (int16x8_t)vzip1q_s64(v19, v23);
  v28 = (int16x8_t)vzip2q_s64(v19, v23);
  v29 = (int16x8_t)vzip1q_s64(v21, v25);
  v30 = (int16x8_t)vzip2q_s64(v21, v25);
  v31 = (int16x8_t)vzip1q_s64(v20, v24);
  v32 = (int16x8_t)vzip2q_s64(v20, v24);
  v33 = (int16x8_t)vzip1q_s64(v22, v26);
  v34 = vdupq_n_s16(0xC7Cu);
  v35 = (int16x8_t)vzip2q_s64(v22, v26);
  v36 = vdupq_n_s16(0xDC72u);
  v37 = vdupq_n_s16(0x3537u);
  v38 = vdupq_n_s16(0x3EC5u);
  v39 = vmlsl_high_s16(vmull_high_s16(v29, v34), v35, v38);
  v40 = vmlal_s16(vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v37.i8), *(int16x4_t *)v33.i8, *(int16x4_t *)v36.i8);
  v41 = vmlal_high_s16(vmull_high_s16(v30, v37), v33, v36);
  v42 = vmlsl_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v37.i8), *(int16x4_t *)v30.i8, *(int16x4_t *)v36.i8);
  v43 = vmlsl_high_s16(vmull_high_s16(v33, v37), v30, v36);
  v44 = vmlal_s16(vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v34.i8), *(int16x4_t *)v29.i8, *(int16x4_t *)v38.i8);
  v45 = vmlal_high_s16(vmull_high_s16(v35, v34), v29, v38);
  *(int16x4_t *)v35.i8 = vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v34.i8), *(int16x4_t *)v35.i8, *(int16x4_t *)v38.i8), 0xEuLL);
  *(int16x4_t *)v29.i8 = vrshrn_n_s32(v39, 0xEuLL);
  v46 = vrshrn_n_s32(v40, 0xEuLL);
  *(int16x4_t *)v40.i8 = vsub_s16(*(int16x4_t *)v35.i8, v46);
  v47 = vrshrn_high_n_s32(*(int16x4_t *)v35.i8, v39, 0xEuLL);
  v48 = vrshrn_n_s32(v41, 0xEuLL);
  v49 = vrshrn_high_n_s32(v46, v41, 0xEuLL);
  *(int16x4_t *)v39.i8 = vrshrn_n_s32(v42, 0xEuLL);
  *(int16x4_t *)v41.i8 = vrshrn_n_s32(v43, 0xEuLL);
  *(int16x4_t *)v42.i8 = vrshrn_n_s32(v44, 0xEuLL);
  *(int16x4_t *)v44.i8 = vsub_s16(*(int16x4_t *)v42.i8, *(int16x4_t *)v39.i8);
  v50 = vrshrn_high_n_s32(*(int16x4_t *)v39.i8, v43, 0xEuLL);
  v51 = vrshrn_n_s32(v45, 0xEuLL);
  v52 = vrshrn_high_n_s32(*(int16x4_t *)v42.i8, v45, 0xEuLL);
  v53 = vdupq_n_s16(0x2D41u);
  v54 = vdupq_n_s16(0x187Eu);
  v55 = vdupq_n_s16(0x3B21u);
  v56 = vmlal_s16(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v27.i8, *(int16x4_t *)v53.i8);
  v57 = vmlal_high_s16(vmull_high_s16(v28, v53), v27, v53);
  v58 = vmlsl_s16(vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v28.i8, *(int16x4_t *)v53.i8);
  v59 = vmlsl_high_s16(vmull_high_s16(v27, v53), v28, v53);
  v60 = vmlsl_s16(vmull_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v54.i8), *(int16x4_t *)v32.i8, *(int16x4_t *)v55.i8);
  v61 = vmlsl_high_s16(vmull_high_s16(v31, v54), v32, v55);
  v62 = vmlal_s16(vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v54.i8), *(int16x4_t *)v31.i8, *(int16x4_t *)v55.i8);
  v63 = vmlal_high_s16(vmull_high_s16(v32, v54), v31, v55);
  v64 = vrshrn_high_n_s32(vrshrn_n_s32(v56, 0xEuLL), v57, 0xEuLL);
  v65 = vrshrn_high_n_s32(vrshrn_n_s32(v58, 0xEuLL), v59, 0xEuLL);
  v66 = vrshrn_high_n_s32(vrshrn_n_s32(v60, 0xEuLL), v61, 0xEuLL);
  v67 = vrshrn_high_n_s32(vrshrn_n_s32(v62, 0xEuLL), v63, 0xEuLL);
  v68 = vaddq_s16(v49, v47);
  v69 = vaddq_s16(v52, v50);
  v70 = vaddq_s16(v67, v64);
  v71 = vaddq_s16(v66, v65);
  v72 = vsubq_s16(v65, v66);
  v73 = vsubq_s16(v64, v67);
  *(int16x4_t *)v41.i8 = vsub_s16(v51, *(int16x4_t *)v41.i8);
  *(int16x4_t *)v29.i8 = vsub_s16(*(int16x4_t *)v29.i8, v48);
  v74 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v40.i8, *(int16x4_t *)v53.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v29.i8, *(int16x4_t *)v53.i8), 0xEuLL);
  v75 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v44.i8, *(int16x4_t *)v53.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v41.i8, *(int16x4_t *)v53.i8), 0xEuLL);
  v76 = vaddq_s16(v70, v69);
  v77 = vaddq_s16(v75, v71);
  v78 = vaddq_s16(v74, v72);
  v79 = vaddq_s16(v73, v68);
  v80 = vsubq_s16(v73, v68);
  v81 = vsubq_s16(v72, v74);
  v82 = vsubq_s16(v71, v75);
  v83 = vsubq_s16(v70, v69);
  v84 = (int32x4_t)vtrn1q_s16(v76, v77);
  v85 = (int32x4_t)vtrn2q_s16(v76, v77);
  v86 = (int32x4_t)vtrn1q_s16(v78, v79);
  v87 = (int32x4_t)vtrn2q_s16(v78, v79);
  v88 = (int32x4_t)vtrn1q_s16(v80, v81);
  v89 = (int32x4_t)vtrn2q_s16(v80, v81);
  v90 = (int32x4_t)vtrn1q_s16(v82, v83);
  v91 = (int32x4_t)vtrn2q_s16(v82, v83);
  v92 = (int64x2_t)vtrn1q_s32(v84, v86);
  v93 = (int64x2_t)vtrn2q_s32(v84, v86);
  v94 = (int64x2_t)vtrn1q_s32(v85, v87);
  v95 = (int64x2_t)vtrn2q_s32(v85, v87);
  v96 = (int64x2_t)vtrn1q_s32(v88, v90);
  v97 = (int64x2_t)vtrn2q_s32(v88, v90);
  v98 = (int64x2_t)vtrn1q_s32(v89, v91);
  v99 = (int64x2_t)vtrn2q_s32(v89, v91);
  v100 = (int16x8_t)vzip1q_s64(v92, v96);
  v101 = (int16x8_t)vzip2q_s64(v92, v96);
  v102 = (int16x8_t)vzip1q_s64(v94, v98);
  v103 = (int16x8_t)vzip2q_s64(v94, v98);
  v104 = (int16x8_t)vzip1q_s64(v93, v97);
  v105 = (int16x8_t)vzip2q_s64(v93, v97);
  v106 = (int16x8_t)vzip1q_s64(v95, v99);
  v107 = (int16x8_t)vzip2q_s64(v95, v99);
  v108 = vmull_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v37.i8);
  v109 = vmull_high_s16(v106, v37);
  v110 = vmlsl_high_s16(vmull_high_s16(v102, v34), v107, v38);
  v111 = vmlal_s16(vmull_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v37.i8), *(int16x4_t *)v106.i8, *(int16x4_t *)v36.i8);
  v112 = vmlal_high_s16(vmull_high_s16(v103, v37), v106, v36);
  v113 = vmlsl_s16(v108, *(int16x4_t *)v103.i8, *(int16x4_t *)v36.i8);
  v114 = vmlsl_high_s16(v109, v103, v36);
  v115 = vmlal_s16(vmull_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v34.i8), *(int16x4_t *)v102.i8, *(int16x4_t *)v38.i8);
  v116 = vmlal_high_s16(vmull_high_s16(v107, v34), v102, v38);
  *(int16x4_t *)v38.i8 = vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v34.i8), *(int16x4_t *)v107.i8, *(int16x4_t *)v38.i8), 0xEuLL);
  *(int16x4_t *)v34.i8 = vrshrn_n_s32(v110, 0xEuLL);
  *(int16x4_t *)v106.i8 = vrshrn_n_s32(v111, 0xEuLL);
  *(int16x4_t *)v102.i8 = vsub_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v106.i8);
  v117 = vrshrn_high_n_s32(*(int16x4_t *)v38.i8, v110, 0xEuLL);
  *(int16x4_t *)v110.i8 = vrshrn_n_s32(v112, 0xEuLL);
  v118 = vrshrn_high_n_s32(*(int16x4_t *)v106.i8, v112, 0xEuLL);
  *(int16x4_t *)v112.i8 = vrshrn_n_s32(v113, 0xEuLL);
  *(int16x4_t *)v113.i8 = vrshrn_n_s32(v114, 0xEuLL);
  *(int16x4_t *)v115.i8 = vrshrn_n_s32(v115, 0xEuLL);
  *(int16x4_t *)v107.i8 = vsub_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v112.i8);
  v119 = vrshrn_high_n_s32(*(int16x4_t *)v112.i8, v114, 0xEuLL);
  *(int16x4_t *)v114.i8 = vrshrn_n_s32(v116, 0xEuLL);
  v120 = vrshrn_high_n_s32(*(int16x4_t *)v115.i8, v116, 0xEuLL);
  v121 = vmlal_s16(vmull_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v100.i8, *(int16x4_t *)v53.i8);
  v122 = vmlal_high_s16(vmull_high_s16(v101, v53), v100, v53);
  v123 = vmlsl_s16(vmull_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v101.i8, *(int16x4_t *)v53.i8);
  v124 = vmlsl_high_s16(vmull_high_s16(v100, v53), v101, v53);
  v125 = vmlsl_s16(vmull_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v54.i8), *(int16x4_t *)v105.i8, *(int16x4_t *)v55.i8);
  v126 = vmlsl_high_s16(vmull_high_s16(v104, v54), v105, v55);
  v127 = vmlal_s16(vmull_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v54.i8), *(int16x4_t *)v104.i8, *(int16x4_t *)v55.i8);
  v128 = vmlal_high_s16(vmull_high_s16(v105, v54), v104, v55);
  v129 = vrshrn_high_n_s32(vrshrn_n_s32(v121, 0xEuLL), v122, 0xEuLL);
  v130 = vrshrn_high_n_s32(vrshrn_n_s32(v123, 0xEuLL), v124, 0xEuLL);
  v131 = vrshrn_high_n_s32(vrshrn_n_s32(v125, 0xEuLL), v126, 0xEuLL);
  v132 = vrshrn_high_n_s32(vrshrn_n_s32(v127, 0xEuLL), v128, 0xEuLL);
  v133 = vaddq_s16(v118, v117);
  v134 = vaddq_s16(v120, v119);
  v135 = vaddq_s16(v132, v129);
  v136 = vaddq_s16(v131, v130);
  v137 = vsubq_s16(v130, v131);
  v138 = vsubq_s16(v129, v132);
  *(int16x4_t *)v132.i8 = vsub_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8);
  *(int16x4_t *)v34.i8 = vsub_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v110.i8);
  v139 = vmlal_s16(vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v132.i8, *(int16x4_t *)v53.i8);
  v140 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v102.i8, *(int16x4_t *)v53.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v34.i8, *(int16x4_t *)v53.i8), 0xEuLL);
  v141 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v107.i8, *(int16x4_t *)v53.i8), 0xEuLL), v139, 0xEuLL);
  *a2 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*a2), vaddq_s16(v135, v134), 5uLL));
  v142 = (uint8x8_t *)((char *)a2 + a3);
  *v142 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v142), vaddq_s16(v141, v136), 5uLL));
  v143 = (uint8x8_t *)((char *)v142 + a3);
  *v143 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v143), vaddq_s16(v140, v137), 5uLL));
  v144 = (uint8x8_t *)((char *)v143 + a3);
  *v144 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v144), vaddq_s16(v138, v133), 5uLL));
  v145 = (uint8x8_t *)((char *)v144 + a3);
  *v145 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v145), vsubq_s16(v138, v133), 5uLL));
  v146 = (uint8x8_t *)((char *)v145 + a3);
  *v146 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v146), vsubq_s16(v137, v140), 5uLL));
  v147 = (uint8x8_t *)((char *)v146 + a3);
  *v147 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v147), vsubq_s16(v136, v141), 5uLL));
  result = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v147 + a3)), vsubq_s16(v135, v134), 5uLL));
  *(int8x8_t *)((char *)v147 + a3) = result;
  return result;
}

int8x8_t vpx_idct8x8_12_add_neon(int32x4_t *a1, uint8x8_t *a2, int a3)
{
  int16x4_t v3;
  int16x4_t v4;
  int16x4_t v5;
  int16x4_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int16x8_t v61;
  int16x8_t v62;
  uint8x8_t *v63;
  uint8x8_t *v64;
  uint8x8_t *v65;
  uint8x8_t *v66;
  uint8x8_t *v67;
  uint8x8_t *v68;
  int8x8_t result;

  v3 = vmovn_s32(*a1);
  v4 = vmovn_s32(a1[2]);
  v5 = vmovn_s32(a1[4]);
  v6 = vmovn_s32(a1[6]);
  v7 = (int32x2_t)vtrn1_s16(v3, v4);
  v8 = (int32x2_t)vtrn2_s16(v3, v4);
  v9 = (int32x2_t)vtrn1_s16(v5, v6);
  v10 = (int32x2_t)vtrn2_s16(v5, v6);
  v11 = (int16x4_t)vzip1_s32(v8, v10);
  v12 = vqrdmulh_lane_s16(v11, (int16x4_t)0x18F8B8E46A6E7D8ALL, 3);
  v13 = (int16x4_t)vzip2_s32(v8, v10);
  v14 = vqrdmulh_lane_s16(v13, (int16x4_t)0x18F8B8E46A6E7D8ALL, 2);
  v15 = vqrdmulh_lane_s16(v13, (int16x4_t)0x18F8B8E46A6E7D8ALL, 1);
  v16 = vqrdmulh_lane_s16(v11, (int16x4_t)0x18F8B8E46A6E7D8ALL, 0);
  v17 = vqrdmulh_lane_s16((int16x4_t)vzip1_s32(v7, v9), (int16x4_t)0x30FC5A8276428000, 2);
  v18 = (int16x4_t)vzip2_s32(v7, v9);
  v19 = vqrdmulh_lane_s16(v18, (int16x4_t)0x30FC5A8276428000, 3);
  v20 = vqrdmulh_lane_s16(v18, (int16x4_t)0x30FC5A8276428000, 1);
  v21 = vadd_s16(v14, v12);
  v22 = vsub_s16(v12, v14);
  v23 = vsub_s16(v16, v15);
  v24 = vadd_s16(v16, v15);
  v25 = vadd_s16(v20, v17);
  v26 = vadd_s16(v19, v17);
  v27 = vsub_s16(v17, v19);
  v28 = vsub_s16(v17, v20);
  v29 = vdupq_n_s16(0x2D41u);
  v30 = (int16x8_t)vmlal_s16(vmull_s16(v22, *(int16x4_t *)v29.i8), v23, *(int16x4_t *)v29.i8);
  v31 = vrshrn_n_s32(vmlsl_s16(vmull_s16(v23, *(int16x4_t *)v29.i8), v22, *(int16x4_t *)v29.i8), 0xEuLL);
  v32 = vrshrn_n_s32((int32x4_t)v30, 0xEuLL);
  *(int16x4_t *)v33.i8 = vadd_s16(v25, v24);
  *(int16x4_t *)v30.i8 = vadd_s16(v32, v26);
  *(int16x4_t *)v34.i8 = vadd_s16(v31, v27);
  *(int16x4_t *)v35.i8 = vadd_s16(v28, v21);
  v33.u64[1] = (unint64_t)vsub_s16(v28, v21);
  v30.u64[1] = (unint64_t)vsub_s16(v27, v31);
  v34.u64[1] = (unint64_t)vsub_s16(v26, v32);
  v35.u64[1] = (unint64_t)vsub_s16(v25, v24);
  v36 = (int32x4_t)vtrn1q_s16(v33, v30);
  v37 = (int32x4_t)vtrn2q_s16(v33, v30);
  v38 = (int32x4_t)vtrn1q_s16(v34, v35);
  v39 = (int32x4_t)vtrn2q_s16(v34, v35);
  v40 = (int16x8_t)vtrn1q_s32(v36, v38);
  v41 = (int16x8_t)vtrn2q_s32(v36, v38);
  v42 = (int16x8_t)vtrn1q_s32(v37, v39);
  v43 = (int16x8_t)vtrn2q_s32(v37, v39);
  v44 = vqrdmulhq_lane_s16(v42, (int16x4_t)0x18F8B8E46A6E7D8ALL, 3);
  v45 = vqrdmulhq_lane_s16(v43, (int16x4_t)0x18F8B8E46A6E7D8ALL, 2);
  v46 = vqrdmulhq_lane_s16(v43, (int16x4_t)0x18F8B8E46A6E7D8ALL, 1);
  v47 = vqrdmulhq_lane_s16(v42, (int16x4_t)0x18F8B8E46A6E7D8ALL, 0);
  v48 = vqrdmulhq_lane_s16(v40, (int16x4_t)0x30FC5A8276428000, 2);
  v49 = vqrdmulhq_lane_s16(v41, (int16x4_t)0x30FC5A8276428000, 3);
  v50 = vqrdmulhq_lane_s16(v41, (int16x4_t)0x30FC5A8276428000, 1);
  v51 = vaddq_s16(v45, v44);
  v52 = vsubq_s16(v44, v45);
  v53 = vsubq_s16(v47, v46);
  v54 = vaddq_s16(v47, v46);
  v55 = vaddq_s16(v50, v48);
  v56 = vaddq_s16(v49, v48);
  v57 = vsubq_s16(v48, v49);
  v58 = vsubq_s16(v48, v50);
  v59 = vmlal_s16(vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v29.i8), *(int16x4_t *)v53.i8, *(int16x4_t *)v29.i8);
  v60 = vmlal_high_s16(vmull_high_s16(v52, v29), v53, v29);
  v61 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v29.i8), *(int16x4_t *)v52.i8, *(int16x4_t *)v29.i8), 0xEuLL), vmlsl_high_s16(vmull_high_s16(v53, v29), v52, v29), 0xEuLL);
  v62 = vrshrn_high_n_s32(vrshrn_n_s32(v59, 0xEuLL), v60, 0xEuLL);
  *a2 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*a2), vaddq_s16(v55, v54), 5uLL));
  v63 = (uint8x8_t *)((char *)a2 + a3);
  *v63 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v63), vaddq_s16(v62, v56), 5uLL));
  v64 = (uint8x8_t *)((char *)v63 + a3);
  *v64 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v64), vaddq_s16(v61, v57), 5uLL));
  v65 = (uint8x8_t *)((char *)v64 + a3);
  *v65 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v65), vaddq_s16(v58, v51), 5uLL));
  v66 = (uint8x8_t *)((char *)v65 + a3);
  *v66 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v66), vsubq_s16(v58, v51), 5uLL));
  v67 = (uint8x8_t *)((char *)v66 + a3);
  *v67 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v67), vsubq_s16(v57, v61), 5uLL));
  v68 = (uint8x8_t *)((char *)v67 + a3);
  *v68 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v68), vsubq_s16(v56, v62), 5uLL));
  result = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v68 + a3)), vsubq_s16(v55, v54), 5uLL));
  *(int8x8_t *)((char *)v68 + a3) = result;
  return result;
}

uint8x8_t *vp8_dequant_idct_add_y_block_neon(uint8x8_t *result, int16x8_t *a2, uint8x8_t *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int16x8_t *v8;
  uint64_t v9;
  uint64_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint16x8_t v16;
  uint16x8_t v17;
  __int32 *v18;
  uint8x8_t v19;
  __int32 *v20;
  uint8x8_t v21;
  uint8x8_t v22;
  __int32 *v23;
  __int32 *v24;
  __int32 *v25;
  int16x8_t v26;
  int8x8_t v27;
  int8x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  uint8x8_t *v35;
  __int32 *v36;
  __int32 *v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int8x16_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  int16x8_t v77;
  int8x8_t v78;
  int8x8_t v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  uint16x8_t v83;
  uint16x8_t v84;
  uint8x8_t v85;
  uint8x8_t v86;
  uint8x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int8x16_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  uint16x8_t v131;
  uint16x8_t v132;
  uint16x8_t v133;
  int16x8_t v134;

  v5 = 0;
  v6 = a4;
  v7 = 4 * a4;
  v8 = (int16x8_t *)&result[8];
  v9 = 2 * a4;
  v10 = 3 * a4;
  v11 = vdupq_n_s16(0x4546u);
  v12 = vdupq_n_s16(0x4E7Bu);
  do
  {
    if (*(_WORD *)(a5 + v5))
    {
      if ((*(_WORD *)(a5 + v5) & 0xFEFE) != 0)
      {
        v29 = *a2;
        v30 = a2[1];
        v31 = v8[-4];
        v32 = v8[-3];
        v8[-4] = 0uLL;
        v8[-3] = 0uLL;
        v33 = v8[-2];
        v34 = v8[-1];
        v8[-2] = 0uLL;
        v8[-1] = 0uLL;
        v35 = (uint8x8_t *)((char *)a3 + v6 + v6);
        v36 = (__int32 *)v35 + 1;
        v37 = (__int32 *)((char *)v35 + v6);
        result = (uint8x8_t *)((char *)v35 + v6 + 4);
        v38 = vmulq_s16(v31, v29);
        v39 = vmulq_s16(v32, v30);
        v40 = vmulq_s16(v33, v29);
        v41 = (int8x16_t)vmulq_s16(v34, v30);
        v33.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
        v38.i64[1] = v40.i64[0];
        v33.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
        v40.i64[0] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
        v39.i64[1] = v41.i64[0];
        v40.i64[1] = vextq_s8(v41, v41, 8uLL).u64[0];
        v42 = vqdmulhq_s16(v40, v11);
        v43 = vqaddq_s16(v38, v39);
        v44 = vqsubq_s16(v38, v39);
        v45 = vqsubq_s16(vqdmulhq_s16(v33, v11), vqaddq_s16(v40, vshrq_n_s16(vqdmulhq_s16(v40, v12), 1uLL)));
        v46 = vqaddq_s16(v42, vqaddq_s16(v33, vshrq_n_s16(vqdmulhq_s16(v33, v12), 1uLL)));
        v47 = (int32x4_t)vqaddq_s16(v43, v46);
        v48 = (int32x4_t)vqaddq_s16(v44, v45);
        v49 = (int32x4_t)vqsubq_s16(v44, v45);
        v50 = (int32x4_t)vqsubq_s16(v43, v46);
        v51 = (int16x8_t)vtrn1q_s32(v47, v49);
        v52 = (int16x8_t)vtrn2q_s32(v47, v49);
        v53 = (int16x8_t)vtrn1q_s32(v48, v50);
        v54 = (int16x8_t)vtrn2q_s32(v48, v50);
        v55 = vtrn1q_s16(v51, v53);
        v56 = vtrn2q_s16(v51, v53);
        v57 = vtrn1q_s16(v52, v54);
        v58 = vtrn2q_s16(v52, v54);
        v59 = vqdmulhq_s16(v58, v11);
        v60 = vqaddq_s16(v55, v57);
        v61 = vqsubq_s16(v55, v57);
        v62 = vqsubq_s16(vqdmulhq_s16(v56, v11), vqaddq_s16(v58, vshrq_n_s16(vqdmulhq_s16(v58, v12), 1uLL)));
        v63 = vqaddq_s16(v59, vqaddq_s16(v56, vshrq_n_s16(vqdmulhq_s16(v56, v12), 1uLL)));
        v64 = vqaddq_s16(v61, v62);
        v65 = vqsubq_s16(v61, v62);
        v66 = (int32x4_t)vrshrq_n_s16(vqaddq_s16(v60, v63), 3uLL);
        v67 = (int32x4_t)vrshrq_n_s16(v64, 3uLL);
        v68 = (int32x4_t)vrshrq_n_s16(v65, 3uLL);
        v69 = (int32x4_t)vrshrq_n_s16(vqsubq_s16(v60, v63), 3uLL);
        v70 = (int16x8_t)vtrn1q_s32(v66, v68);
        v71 = (int16x8_t)vtrn2q_s32(v66, v68);
        v72 = (int16x8_t)vtrn1q_s32(v67, v69);
        v73 = (int16x8_t)vtrn2q_s32(v67, v69);
        v74 = (uint16x8_t)vtrn1q_s16(v70, v72);
        v75 = (uint16x8_t)vtrn2q_s16(v70, v72);
        v76 = (uint16x8_t)vtrn1q_s16(v71, v73);
        v77 = (int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s16(v71, v73), *(uint8x8_t *)((char *)a3 + v10));
        *(int8x8_t *)v73.i8 = vqmovun_s16((int16x8_t)vaddw_u8(v75, *(uint8x8_t *)((char *)a3 + v6)));
        v78 = vqmovun_s16((int16x8_t)vaddw_u8(v76, *(uint8x8_t *)((char *)a3 + v9)));
        v79 = vqmovun_s16(v77);
        *a3 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v74, *a3));
        *(uint8x8_t *)((char *)a3 + v6) = *(uint8x8_t *)v73.i8;
      }
      else
      {
        v80 = a2->i16[0];
        v81 = (v8[-4].i16[0] * v80 + 4) >> 3;
        v82 = (v8[-2].i16[0] * v80 + 4) >> 3;
        v8[-2].i16[0] = 0;
        v8[-4].i16[0] = 0;
        v83 = (uint16x8_t)vdupq_n_s16(v81);
        v84 = (uint16x8_t)vdupq_n_s16(v82);
        v85.i32[0] = a3->i32[0];
        v85.i32[1] = *(__int32 *)((char *)a3->i32 + v6);
        v36 = (__int32 *)((char *)a3 + v6 + 4);
        v86.i32[0] = *(__int32 *)((char *)a3->i32 + v9);
        v86.i32[1] = *(__int32 *)((char *)a3->i32 + v10);
        result = (uint8x8_t *)((char *)a3 + v10 + 4);
        v87 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v83, v85));
        *(int8x8_t *)v83.i8 = vqmovun_s16((int16x8_t)vaddw_u8(v83, v86));
        a3->i32[0] = v87.i32[0];
        *(__int32 *)((char *)a3->i32 + v6) = v87.i32[1];
        *(__int32 *)((char *)a3->i32 + v9) = v83.i32[0];
        *(__int32 *)((char *)a3->i32 + v10) = v83.i32[1];
        v35 = (uint8x8_t *)((char *)a3 + 4);
        v83.i32[0] = a3->i32[1];
        v83.i32[1] = *v36;
        v37 = (__int32 *)((char *)a3 + v9 + 4);
        v87.i32[0] = *v37;
        v87.i32[1] = result->i32[0];
        v88 = (int16x8_t)vaddw_u8(v84, v87);
        v78 = vqmovun_s16((int16x8_t)vaddw_u8(v84, *(uint8x8_t *)v83.i8));
        v79 = vqmovun_s16(v88);
      }
      v35->i32[0] = v78.i32[0];
      *v36 = v78.i32[1];
      *v37 = v79.i32[0];
      result->i32[0] = v79.i32[1];
    }
    if (*(_WORD *)(a5 + v5 + 2))
    {
      if ((*(_WORD *)(a5 + v5 + 2) & 0xFEFE) != 0)
      {
        v89 = *a2;
        v90 = a2[1];
        v91 = *v8;
        v92 = v8[1];
        *v8 = 0uLL;
        v8[1] = 0uLL;
        v93 = v8[2];
        v94 = v8[3];
        v8[2] = 0uLL;
        v8[3] = 0uLL;
        result = (uint8x8_t *)((char *)a3 + 2 * v6 + 8);
        v23 = (__int32 *)((char *)&a3[1] + v6 + v6 + 4);
        v24 = (__int32 *)((char *)result + v6);
        v25 = (__int32 *)((char *)v23 + v6);
        v95 = vmulq_s16(v91, v89);
        v96 = vmulq_s16(v92, v90);
        v97 = vmulq_s16(v93, v89);
        v98 = (int8x16_t)vmulq_s16(v94, v90);
        v93.i64[0] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u64[0];
        v95.i64[1] = v97.i64[0];
        v93.i64[1] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u64[0];
        v97.i64[0] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u64[0];
        v96.i64[1] = v98.i64[0];
        v97.i64[1] = vextq_s8(v98, v98, 8uLL).u64[0];
        v99 = vqdmulhq_s16(v97, v11);
        v100 = vqaddq_s16(v95, v96);
        v101 = vqsubq_s16(v95, v96);
        v102 = vqsubq_s16(vqdmulhq_s16(v93, v11), vqaddq_s16(v97, vshrq_n_s16(vqdmulhq_s16(v97, v12), 1uLL)));
        v103 = vqaddq_s16(v99, vqaddq_s16(v93, vshrq_n_s16(vqdmulhq_s16(v93, v12), 1uLL)));
        v104 = (int32x4_t)vqaddq_s16(v100, v103);
        v105 = (int32x4_t)vqaddq_s16(v101, v102);
        v106 = (int32x4_t)vqsubq_s16(v101, v102);
        v107 = (int32x4_t)vqsubq_s16(v100, v103);
        v108 = (int16x8_t)vtrn1q_s32(v104, v106);
        v109 = (int16x8_t)vtrn2q_s32(v104, v106);
        v110 = (int16x8_t)vtrn1q_s32(v105, v107);
        v111 = (int16x8_t)vtrn2q_s32(v105, v107);
        v112 = vtrn1q_s16(v108, v110);
        v113 = vtrn2q_s16(v108, v110);
        v114 = vtrn1q_s16(v109, v111);
        v115 = vtrn2q_s16(v109, v111);
        v116 = vqdmulhq_s16(v115, v11);
        v117 = vqaddq_s16(v112, v114);
        v118 = vqsubq_s16(v112, v114);
        v119 = vqsubq_s16(vqdmulhq_s16(v113, v11), vqaddq_s16(v115, vshrq_n_s16(vqdmulhq_s16(v115, v12), 1uLL)));
        v120 = vqaddq_s16(v116, vqaddq_s16(v113, vshrq_n_s16(vqdmulhq_s16(v113, v12), 1uLL)));
        v121 = vqaddq_s16(v118, v119);
        v122 = vqsubq_s16(v118, v119);
        v123 = (int32x4_t)vrshrq_n_s16(vqaddq_s16(v117, v120), 3uLL);
        v124 = (int32x4_t)vrshrq_n_s16(v121, 3uLL);
        v125 = (int32x4_t)vrshrq_n_s16(v122, 3uLL);
        v126 = (int32x4_t)vrshrq_n_s16(vqsubq_s16(v117, v120), 3uLL);
        v127 = (int16x8_t)vtrn1q_s32(v123, v125);
        v128 = (int16x8_t)vtrn2q_s32(v123, v125);
        v129 = (int16x8_t)vtrn1q_s32(v124, v126);
        v130 = (int16x8_t)vtrn2q_s32(v124, v126);
        v131 = (uint16x8_t)vtrn1q_s16(v127, v129);
        v132 = (uint16x8_t)vtrn2q_s16(v127, v129);
        v133 = (uint16x8_t)vtrn1q_s16(v128, v130);
        v134 = (int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s16(v128, v130), *(uint8x8_t *)((char *)&a3[1] + v10));
        *(int8x8_t *)v130.i8 = vqmovun_s16((int16x8_t)vaddw_u8(v132, *(uint8x8_t *)((char *)&a3[1] + v6)));
        v27 = vqmovun_s16((int16x8_t)vaddw_u8(v133, *(uint8x8_t *)((char *)&a3[1] + v9)));
        v28 = vqmovun_s16(v134);
        a3[1] = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v131, a3[1]));
        *(uint8x8_t *)((char *)&a3[1] + v6) = *(uint8x8_t *)v130.i8;
      }
      else
      {
        v13 = a2->i16[0];
        v14 = (v8->i16[0] * v13 + 4) >> 3;
        v15 = (v8[2].i16[0] * v13 + 4) >> 3;
        v8[2].i16[0] = 0;
        v8->i16[0] = 0;
        v16 = (uint16x8_t)vdupq_n_s16(v14);
        v17 = (uint16x8_t)vdupq_n_s16(v15);
        v18 = (__int32 *)((char *)&a3[1] + v6);
        v19.i32[0] = a3[1].i32[0];
        v19.i32[1] = *v18;
        v20 = (__int32 *)((char *)&a3[1] + v10);
        v21.i32[0] = *(__int32 *)((char *)a3[1].i32 + v9);
        v21.i32[1] = *v20;
        v22 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v16, v19));
        *(int8x8_t *)v16.i8 = vqmovun_s16((int16x8_t)vaddw_u8(v16, v21));
        a3[1].i32[0] = v22.i32[0];
        *v18 = v22.i32[1];
        *(__int32 *)((char *)a3[1].i32 + v9) = v16.i32[0];
        *v20 = v16.i32[1];
        result = (uint8x8_t *)((char *)a3 + 12);
        v23 = (__int32 *)((char *)&a3[1] + v6 + 4);
        v16.i32[0] = a3[1].i32[1];
        v16.i32[1] = *v23;
        v24 = (__int32 *)((char *)&a3[1] + v9 + 4);
        v25 = (__int32 *)((char *)&a3[1] + v10 + 4);
        v22.i32[0] = *v24;
        v22.i32[1] = *v25;
        v26 = (int16x8_t)vaddw_u8(v17, v22);
        v27 = vqmovun_s16((int16x8_t)vaddw_u8(v17, *(uint8x8_t *)v16.i8));
        v28 = vqmovun_s16(v26);
      }
      result->i32[0] = v27.i32[0];
      *v23 = v27.i32[1];
      *v24 = v28.i32[0];
      *v25 = v28.i32[1];
    }
    a3 = (uint8x8_t *)((char *)a3 + v7);
    v5 += 4;
    v8 += 8;
  }
  while ((_DWORD)v5 != 16);
  return result;
}

int16x8_t *vp8_dequant_idct_add_uv_block_neon(int16x8_t *result, int16x8_t *a2, uint8x8_t *a3, uint8x8_t *a4, int a5, _WORD *a6)
{
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint8x8_t *v12;
  uint8x8_t *v13;
  __int32 *v14;
  uint8x8_t *v15;
  __int32 *v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  uint16x8_t v54;
  int8x8_t v55;
  int8x8_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint8x8_t v62;
  __int32 *v63;
  __int32 *v64;
  __int32 *v65;
  uint8x8_t v66;
  uint8x8_t v67;
  int16x8_t v68;
  uint64_t v69;
  uint8x8_t *v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  uint8x8_t *v77;
  __int32 *v78;
  uint8x8_t *v79;
  __int32 *v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int8x16_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  uint16x8_t v118;
  int8x8_t v119;
  int8x8_t v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  uint8x8_t v124;
  __int32 *v125;
  uint16x8_t v126;
  uint8x8_t v127;
  int8x8_t v128;
  uint8x8_t v129;
  uint8x8_t *v130;
  __int32 v131;
  uint16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  uint8x8_t *v140;
  __int32 *v141;
  uint8x8_t *v142;
  __int32 *v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int8x16_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  uint16x8_t v181;
  int8x8_t v182;
  int8x8_t v183;
  int v184;
  unsigned int v185;
  unsigned int v186;
  uint16x8_t v187;
  uint16x8_t v188;
  uint8x8_t v189;
  __int32 *v190;
  uint8x8_t v191;
  uint8x8_t v192;
  int16x8_t v193;
  uint8x8_t *v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  uint8x8_t *v201;
  __int32 *v202;
  uint8x8_t *v203;
  __int32 *v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int8x16_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  uint16x8_t v242;
  int8x8_t v243;
  int8x8_t v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  uint8x8_t v248;
  __int32 *v249;
  uint16x8_t v250;
  uint8x8_t v251;
  int8x8_t v252;
  uint8x8_t v253;
  uint8x8_t *v254;
  __int32 v255;
  uint16x8_t v256;
  int16x8_t v257;

  if (*a6)
  {
    if ((*a6 & 0xFEFE) != 0)
    {
      v6 = *a2;
      v7 = a2[1];
      v8 = *result;
      v9 = result[1];
      *result = 0u;
      result[1] = 0u;
      v10 = result[2];
      v11 = result[3];
      result[2] = 0u;
      result[3] = 0u;
      v12 = (uint8x8_t *)((char *)a3 + a5);
      v13 = (uint8x8_t *)((char *)v12 + a5);
      v14 = (__int32 *)v13 + 1;
      v15 = (uint8x8_t *)((char *)v13 + a5);
      v16 = (__int32 *)((char *)v13 + a5 + 4);
      v17 = vmulq_s16(v8, v6);
      v18 = vmulq_s16(v9, v7);
      v19 = vmulq_s16(v10, v6);
      v20 = (int8x16_t)vmulq_s16(v11, v7);
      v10.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
      v17.i64[1] = v19.i64[0];
      v10.i64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
      v19.i64[0] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
      v18.i64[1] = v20.i64[0];
      v19.i64[1] = vextq_s8(v20, v20, 8uLL).u64[0];
      v21 = vdupq_n_s16(0x4546u);
      v22 = vqdmulhq_s16(v19, v21);
      v23 = vdupq_n_s16(0x4E7Bu);
      v24 = vqaddq_s16(v17, v18);
      v25 = vqsubq_s16(v17, v18);
      v26 = vqsubq_s16(vqdmulhq_s16(v10, v21), vqaddq_s16(v19, vshrq_n_s16(vqdmulhq_s16(v19, v23), 1uLL)));
      v27 = vqaddq_s16(v22, vqaddq_s16(v10, vshrq_n_s16(vqdmulhq_s16(v10, v23), 1uLL)));
      v28 = (int32x4_t)vqaddq_s16(v24, v27);
      v29 = (int32x4_t)vqaddq_s16(v25, v26);
      v30 = (int32x4_t)vqsubq_s16(v25, v26);
      v31 = (int32x4_t)vqsubq_s16(v24, v27);
      v32 = (int16x8_t)vtrn1q_s32(v28, v30);
      v33 = (int16x8_t)vtrn2q_s32(v28, v30);
      v34 = (int16x8_t)vtrn1q_s32(v29, v31);
      v35 = (int16x8_t)vtrn2q_s32(v29, v31);
      v36 = vtrn1q_s16(v32, v34);
      v37 = vtrn2q_s16(v32, v34);
      v38 = vtrn1q_s16(v33, v35);
      v39 = vtrn2q_s16(v33, v35);
      v40 = vqdmulhq_s16(v37, v21);
      v41 = vqdmulhq_s16(v39, v21);
      v42 = vqaddq_s16(v36, v38);
      v43 = vqsubq_s16(v36, v38);
      v44 = vqsubq_s16(v40, vqaddq_s16(v39, vshrq_n_s16(vqdmulhq_s16(v39, v23), 1uLL)));
      v45 = vqaddq_s16(v41, vqaddq_s16(v37, vshrq_n_s16(vqdmulhq_s16(v37, v23), 1uLL)));
      v46 = (int32x4_t)vrshrq_n_s16(vqaddq_s16(v42, v45), 3uLL);
      v47 = (int32x4_t)vrshrq_n_s16(vqaddq_s16(v43, v44), 3uLL);
      v48 = (int32x4_t)vrshrq_n_s16(vqsubq_s16(v43, v44), 3uLL);
      v49 = (int32x4_t)vrshrq_n_s16(vqsubq_s16(v42, v45), 3uLL);
      v50 = (int16x8_t)vtrn1q_s32(v46, v48);
      v51 = (int16x8_t)vtrn2q_s32(v46, v48);
      v52 = (int16x8_t)vtrn1q_s32(v47, v49);
      v53 = (int16x8_t)vtrn2q_s32(v47, v49);
      v54 = (uint16x8_t)vtrn1q_s16(v50, v52);
      *(int8x8_t *)v52.i8 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s16(v50, v52), *v12));
      v55 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn1q_s16(v51, v53), *v13));
      v56 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s16(v51, v53), *v15));
      *a3 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v54, *a3));
      *v12 = *(uint8x8_t *)v52.i8;
    }
    else
    {
      v57 = a2->i16[0];
      v58 = (result->i16[0] * v57 + 4) >> 3;
      v59 = (result[2].i16[0] * v57 + 4) >> 3;
      result[2].i16[0] = 0;
      result->i16[0] = 0;
      v60 = (uint16x8_t)vdupq_n_s16(v58);
      v61 = (uint16x8_t)vdupq_n_s16(v59);
      v62.i32[0] = a3->i32[0];
      v63 = (__int32 *)((char *)a3 + a5);
      v62.i32[1] = *v63;
      v64 = (__int32 *)((char *)v63 + a5);
      v65 = (__int32 *)((char *)v64 + a5);
      v66.i32[0] = *v64;
      v66.i32[1] = *v65;
      v67 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v60, v62));
      *(int8x8_t *)v60.i8 = vqmovun_s16((int16x8_t)vaddw_u8(v60, v66));
      a3->i32[0] = v67.i32[0];
      *(__int32 *)((char *)a3->i32 + a5) = v67.i32[1];
      *v64 = v60.i32[0];
      *v65 = v60.i32[1];
      v13 = (uint8x8_t *)((char *)a3 + 4);
      v14 = (__int32 *)((char *)a3 + a5 + 4);
      v60.i32[0] = a3->i32[1];
      v60.i32[1] = *v14;
      v15 = (uint8x8_t *)((char *)v14 + a5);
      v16 = (__int32 *)((char *)v15 + a5);
      v67.i32[0] = v15->i32[0];
      v67.i32[1] = *v16;
      v68 = (int16x8_t)vaddw_u8(v61, v67);
      v55 = vqmovun_s16((int16x8_t)vaddw_u8(v61, *(uint8x8_t *)v60.i8));
      v56 = vqmovun_s16(v68);
    }
    v13->i32[0] = v55.i32[0];
    *v14 = v55.i32[1];
    v15->i32[0] = v56.i32[0];
    *v16 = v56.i32[1];
  }
  v69 = 4 * a5;
  if (a6[1])
  {
    v70 = (uint8x8_t *)((char *)a3 + v69);
    if ((a6[1] & 0xFEFE) != 0)
    {
      v71 = *a2;
      v72 = a2[1];
      v73 = result[4];
      v74 = result[5];
      result[4] = 0u;
      result[5] = 0u;
      v75 = result[6];
      v76 = result[7];
      result[6] = 0u;
      result[7] = 0u;
      v77 = (uint8x8_t *)((char *)v70 + a5 + a5);
      v78 = (__int32 *)v77 + 1;
      v79 = (uint8x8_t *)((char *)v77 + a5);
      v80 = (__int32 *)((char *)v77 + a5 + 4);
      v81 = vmulq_s16(v73, v71);
      v82 = vmulq_s16(v74, v72);
      v83 = vmulq_s16(v75, v71);
      v84 = (int8x16_t)vmulq_s16(v76, v72);
      v75.i64[0] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u64[0];
      v81.i64[1] = v83.i64[0];
      v75.i64[1] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u64[0];
      v83.i64[0] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
      v82.i64[1] = v84.i64[0];
      v83.i64[1] = vextq_s8(v84, v84, 8uLL).u64[0];
      v85 = vdupq_n_s16(0x4546u);
      v86 = vqdmulhq_s16(v83, v85);
      v87 = vdupq_n_s16(0x4E7Bu);
      v88 = vqaddq_s16(v81, v82);
      v89 = vqsubq_s16(v81, v82);
      v90 = vqsubq_s16(vqdmulhq_s16(v75, v85), vqaddq_s16(v83, vshrq_n_s16(vqdmulhq_s16(v83, v87), 1uLL)));
      v91 = vqaddq_s16(v86, vqaddq_s16(v75, vshrq_n_s16(vqdmulhq_s16(v75, v87), 1uLL)));
      v92 = (int32x4_t)vqaddq_s16(v88, v91);
      v93 = (int32x4_t)vqaddq_s16(v89, v90);
      v94 = (int32x4_t)vqsubq_s16(v89, v90);
      v95 = (int32x4_t)vqsubq_s16(v88, v91);
      v96 = (int16x8_t)vtrn1q_s32(v92, v94);
      v97 = (int16x8_t)vtrn2q_s32(v92, v94);
      v98 = (int16x8_t)vtrn1q_s32(v93, v95);
      v99 = (int16x8_t)vtrn2q_s32(v93, v95);
      v100 = vtrn1q_s16(v96, v98);
      v101 = vtrn2q_s16(v96, v98);
      v102 = vtrn1q_s16(v97, v99);
      v103 = vtrn2q_s16(v97, v99);
      v104 = vqdmulhq_s16(v101, v85);
      v105 = vqdmulhq_s16(v103, v85);
      v106 = vqaddq_s16(v100, v102);
      v107 = vqsubq_s16(v100, v102);
      v108 = vqsubq_s16(v104, vqaddq_s16(v103, vshrq_n_s16(vqdmulhq_s16(v103, v87), 1uLL)));
      v109 = vqaddq_s16(v105, vqaddq_s16(v101, vshrq_n_s16(vqdmulhq_s16(v101, v87), 1uLL)));
      v110 = (int32x4_t)vrshrq_n_s16(vqaddq_s16(v106, v109), 3uLL);
      v111 = (int32x4_t)vrshrq_n_s16(vqaddq_s16(v107, v108), 3uLL);
      v112 = (int32x4_t)vrshrq_n_s16(vqsubq_s16(v107, v108), 3uLL);
      v113 = (int32x4_t)vrshrq_n_s16(vqsubq_s16(v106, v109), 3uLL);
      v114 = (int16x8_t)vtrn1q_s32(v110, v112);
      v115 = (int16x8_t)vtrn2q_s32(v110, v112);
      v116 = (int16x8_t)vtrn1q_s32(v111, v113);
      v117 = (int16x8_t)vtrn2q_s32(v111, v113);
      v118 = (uint16x8_t)vtrn1q_s16(v114, v116);
      *(int8x8_t *)v116.i8 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s16(v114, v116), *(uint8x8_t *)((char *)v70 + a5)));
      v119 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn1q_s16(v115, v117), *v77));
      v120 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s16(v115, v117), *v79));
      *v70 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v118, *v70));
      *(uint8x8_t *)((char *)v70 + a5) = *(uint8x8_t *)v116.i8;
    }
    else
    {
      v121 = a2->i16[0];
      v122 = (result[4].i16[0] * v121 + 4) >> 3;
      v123 = (result[6].i16[0] * v121 + 4) >> 3;
      result[6].i16[0] = 0;
      result[4].i16[0] = 0;
      v124.i32[0] = v70->i32[0];
      v124.i32[1] = *(__int32 *)((char *)v70->i32 + a5);
      v125 = (__int32 *)((char *)v70 + a5 + a5);
      v126 = (uint16x8_t)vdupq_n_s16(v122);
      v127.i32[0] = *v125;
      v127.i32[1] = *(__int32 *)((char *)v125 + a5);
      v128 = vqmovun_s16((int16x8_t)vaddw_u8(v126, v124));
      v70->i32[0] = v128.i32[0];
      *(__int32 *)((char *)v70->i32 + a5) = v128.i32[1];
      v129 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v126, v127));
      *v125 = v129.i32[0];
      *(__int32 *)((char *)v125 + a5) = v129.i32[1];
      v131 = v70->i32[1];
      v130 = (uint8x8_t *)((char *)v70 + 4);
      v78 = (__int32 *)((char *)v130 + a5);
      v129.i32[0] = v131;
      v129.i32[1] = *v78;
      v79 = (uint8x8_t *)((char *)v78 + a5);
      v132 = (uint16x8_t)vdupq_n_s16(v123);
      v80 = (__int32 *)((char *)v79 + a5);
      v127.i32[0] = v79->i32[0];
      v127.i32[1] = *v80;
      v133 = (int16x8_t)vaddw_u8(v132, v127);
      v119 = vqmovun_s16((int16x8_t)vaddw_u8(v132, v129));
      v120 = vqmovun_s16(v133);
      v77 = v130;
    }
    v77->i32[0] = v119.i32[0];
    *v78 = v119.i32[1];
    v79->i32[0] = v120.i32[0];
    *v80 = v120.i32[1];
  }
  if (a6[2])
  {
    if ((a6[2] & 0xFEFE) != 0)
    {
      v134 = *a2;
      v135 = a2[1];
      v136 = result[8];
      v137 = result[9];
      result[8] = 0u;
      result[9] = 0u;
      v138 = result[10];
      v139 = result[11];
      result[10] = 0u;
      result[11] = 0u;
      v140 = (uint8x8_t *)((char *)a4 + a5 + a5);
      v141 = (__int32 *)v140 + 1;
      v142 = (uint8x8_t *)((char *)v140 + a5);
      v143 = (__int32 *)((char *)v140 + a5 + 4);
      v144 = vmulq_s16(v136, v134);
      v145 = vmulq_s16(v137, v135);
      v146 = vmulq_s16(v138, v134);
      v147 = (int8x16_t)vmulq_s16(v139, v135);
      v138.i64[0] = vextq_s8((int8x16_t)v144, (int8x16_t)v144, 8uLL).u64[0];
      v144.i64[1] = v146.i64[0];
      v138.i64[1] = vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL).u64[0];
      v146.i64[0] = vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL).u64[0];
      v145.i64[1] = v147.i64[0];
      v146.i64[1] = vextq_s8(v147, v147, 8uLL).u64[0];
      v148 = vdupq_n_s16(0x4546u);
      v149 = vqdmulhq_s16(v146, v148);
      v150 = vdupq_n_s16(0x4E7Bu);
      v151 = vqaddq_s16(v144, v145);
      v152 = vqsubq_s16(v144, v145);
      v153 = vqsubq_s16(vqdmulhq_s16(v138, v148), vqaddq_s16(v146, vshrq_n_s16(vqdmulhq_s16(v146, v150), 1uLL)));
      v154 = vqaddq_s16(v149, vqaddq_s16(v138, vshrq_n_s16(vqdmulhq_s16(v138, v150), 1uLL)));
      v155 = (int32x4_t)vqaddq_s16(v151, v154);
      v156 = (int32x4_t)vqaddq_s16(v152, v153);
      v157 = (int32x4_t)vqsubq_s16(v152, v153);
      v158 = (int32x4_t)vqsubq_s16(v151, v154);
      v159 = (int16x8_t)vtrn1q_s32(v155, v157);
      v160 = (int16x8_t)vtrn2q_s32(v155, v157);
      v161 = (int16x8_t)vtrn1q_s32(v156, v158);
      v162 = (int16x8_t)vtrn2q_s32(v156, v158);
      v163 = vtrn1q_s16(v159, v161);
      v164 = vtrn2q_s16(v159, v161);
      v165 = vtrn1q_s16(v160, v162);
      v166 = vtrn2q_s16(v160, v162);
      v167 = vqdmulhq_s16(v164, v148);
      v168 = vqdmulhq_s16(v166, v148);
      v169 = vqaddq_s16(v163, v165);
      v170 = vqsubq_s16(v163, v165);
      v171 = vqsubq_s16(v167, vqaddq_s16(v166, vshrq_n_s16(vqdmulhq_s16(v166, v150), 1uLL)));
      v172 = vqaddq_s16(v168, vqaddq_s16(v164, vshrq_n_s16(vqdmulhq_s16(v164, v150), 1uLL)));
      v173 = (int32x4_t)vrshrq_n_s16(vqaddq_s16(v169, v172), 3uLL);
      v174 = (int32x4_t)vrshrq_n_s16(vqaddq_s16(v170, v171), 3uLL);
      v175 = (int32x4_t)vrshrq_n_s16(vqsubq_s16(v170, v171), 3uLL);
      v176 = (int32x4_t)vrshrq_n_s16(vqsubq_s16(v169, v172), 3uLL);
      v177 = (int16x8_t)vtrn1q_s32(v173, v175);
      v178 = (int16x8_t)vtrn2q_s32(v173, v175);
      v179 = (int16x8_t)vtrn1q_s32(v174, v176);
      v180 = (int16x8_t)vtrn2q_s32(v174, v176);
      v181 = (uint16x8_t)vtrn1q_s16(v177, v179);
      *(int8x8_t *)v179.i8 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s16(v177, v179), *(uint8x8_t *)((char *)a4 + a5)));
      v182 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn1q_s16(v178, v180), *v140));
      v183 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s16(v178, v180), *v142));
      *a4 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v181, *a4));
      *(uint8x8_t *)((char *)a4 + a5) = *(uint8x8_t *)v179.i8;
    }
    else
    {
      v184 = a2->i16[0];
      v185 = (result[8].i16[0] * v184 + 4) >> 3;
      v186 = (result[10].i16[0] * v184 + 4) >> 3;
      result[10].i16[0] = 0;
      result[8].i16[0] = 0;
      v187 = (uint16x8_t)vdupq_n_s16(v185);
      v188 = (uint16x8_t)vdupq_n_s16(v186);
      v189.i32[0] = a4->i32[0];
      v189.i32[1] = *(__int32 *)((char *)a4->i32 + a5);
      v190 = (__int32 *)((char *)a4 + a5 + a5);
      v191.i32[0] = *v190;
      v191.i32[1] = *(__int32 *)((char *)v190 + a5);
      v192 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v187, v189));
      *(int8x8_t *)v187.i8 = vqmovun_s16((int16x8_t)vaddw_u8(v187, v191));
      a4->i32[0] = v192.i32[0];
      *(__int32 *)((char *)a4->i32 + a5) = v192.i32[1];
      *v190 = v187.i32[0];
      *(__int32 *)((char *)v190 + a5) = v187.i32[1];
      v140 = (uint8x8_t *)((char *)a4 + 4);
      v141 = (__int32 *)((char *)a4 + a5 + 4);
      v187.i32[0] = a4->i32[1];
      v187.i32[1] = *v141;
      v142 = (uint8x8_t *)((char *)v141 + a5);
      v143 = (__int32 *)((char *)v142 + a5);
      v192.i32[0] = v142->i32[0];
      v192.i32[1] = *v143;
      v193 = (int16x8_t)vaddw_u8(v188, v192);
      v182 = vqmovun_s16((int16x8_t)vaddw_u8(v188, *(uint8x8_t *)v187.i8));
      v183 = vqmovun_s16(v193);
    }
    v140->i32[0] = v182.i32[0];
    *v141 = v182.i32[1];
    v142->i32[0] = v183.i32[0];
    *v143 = v183.i32[1];
  }
  if (a6[3])
  {
    v194 = (uint8x8_t *)((char *)a4 + v69);
    if ((a6[3] & 0xFEFE) != 0)
    {
      v195 = *a2;
      v196 = a2[1];
      v197 = result[12];
      v198 = result[13];
      result[12] = 0u;
      result[13] = 0u;
      v199 = result[14];
      v200 = result[15];
      result[14] = 0u;
      result[15] = 0u;
      v201 = (uint8x8_t *)((char *)v194 + a5 + a5);
      v202 = (__int32 *)v201 + 1;
      v203 = (uint8x8_t *)((char *)v201 + a5);
      v204 = (__int32 *)((char *)v201 + a5 + 4);
      v205 = vmulq_s16(v197, v195);
      v206 = vmulq_s16(v198, v196);
      v207 = vmulq_s16(v199, v195);
      v208 = (int8x16_t)vmulq_s16(v200, v196);
      v199.i64[0] = vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u64[0];
      v205.i64[1] = v207.i64[0];
      v199.i64[1] = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u64[0];
      v207.i64[0] = vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u64[0];
      v206.i64[1] = v208.i64[0];
      v207.i64[1] = vextq_s8(v208, v208, 8uLL).u64[0];
      v209 = vdupq_n_s16(0x4546u);
      v210 = vqdmulhq_s16(v207, v209);
      v211 = vdupq_n_s16(0x4E7Bu);
      v212 = vqaddq_s16(v205, v206);
      v213 = vqsubq_s16(v205, v206);
      v214 = vqsubq_s16(vqdmulhq_s16(v199, v209), vqaddq_s16(v207, vshrq_n_s16(vqdmulhq_s16(v207, v211), 1uLL)));
      v215 = vqaddq_s16(v210, vqaddq_s16(v199, vshrq_n_s16(vqdmulhq_s16(v199, v211), 1uLL)));
      v216 = (int32x4_t)vqaddq_s16(v212, v215);
      v217 = (int32x4_t)vqaddq_s16(v213, v214);
      v218 = (int32x4_t)vqsubq_s16(v213, v214);
      v219 = (int32x4_t)vqsubq_s16(v212, v215);
      v220 = (int16x8_t)vtrn1q_s32(v216, v218);
      v221 = (int16x8_t)vtrn2q_s32(v216, v218);
      v222 = (int16x8_t)vtrn1q_s32(v217, v219);
      v223 = (int16x8_t)vtrn2q_s32(v217, v219);
      v224 = vtrn1q_s16(v220, v222);
      v225 = vtrn2q_s16(v220, v222);
      v226 = vtrn1q_s16(v221, v223);
      v227 = vtrn2q_s16(v221, v223);
      v228 = vqdmulhq_s16(v225, v209);
      v229 = vqdmulhq_s16(v227, v209);
      v230 = vqaddq_s16(v224, v226);
      v231 = vqsubq_s16(v224, v226);
      v232 = vqsubq_s16(v228, vqaddq_s16(v227, vshrq_n_s16(vqdmulhq_s16(v227, v211), 1uLL)));
      v233 = vqaddq_s16(v229, vqaddq_s16(v225, vshrq_n_s16(vqdmulhq_s16(v225, v211), 1uLL)));
      v234 = (int32x4_t)vrshrq_n_s16(vqaddq_s16(v230, v233), 3uLL);
      v235 = (int32x4_t)vrshrq_n_s16(vqaddq_s16(v231, v232), 3uLL);
      v236 = (int32x4_t)vrshrq_n_s16(vqsubq_s16(v231, v232), 3uLL);
      v237 = (int32x4_t)vrshrq_n_s16(vqsubq_s16(v230, v233), 3uLL);
      v238 = (int16x8_t)vtrn1q_s32(v234, v236);
      v239 = (int16x8_t)vtrn2q_s32(v234, v236);
      v240 = (int16x8_t)vtrn1q_s32(v235, v237);
      v241 = (int16x8_t)vtrn2q_s32(v235, v237);
      v242 = (uint16x8_t)vtrn1q_s16(v238, v240);
      *(int8x8_t *)v240.i8 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s16(v238, v240), *(uint8x8_t *)((char *)v194 + a5)));
      v243 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn1q_s16(v239, v241), *v201));
      v244 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vtrn2q_s16(v239, v241), *v203));
      *v194 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v242, *v194));
      *(uint8x8_t *)((char *)v194 + a5) = *(uint8x8_t *)v240.i8;
    }
    else
    {
      v245 = a2->i16[0];
      v246 = (result[12].i16[0] * v245 + 4) >> 3;
      v247 = (result[14].i16[0] * v245 + 4) >> 3;
      result[14].i16[0] = 0;
      result[12].i16[0] = 0;
      v248.i32[0] = v194->i32[0];
      v248.i32[1] = *(__int32 *)((char *)v194->i32 + a5);
      v249 = (__int32 *)((char *)v194 + a5 + a5);
      v250 = (uint16x8_t)vdupq_n_s16(v246);
      v251.i32[0] = *v249;
      v251.i32[1] = *(__int32 *)((char *)v249 + a5);
      v252 = vqmovun_s16((int16x8_t)vaddw_u8(v250, v248));
      v194->i32[0] = v252.i32[0];
      *(__int32 *)((char *)v194->i32 + a5) = v252.i32[1];
      v253 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v250, v251));
      *v249 = v253.i32[0];
      *(__int32 *)((char *)v249 + a5) = v253.i32[1];
      v255 = v194->i32[1];
      v254 = (uint8x8_t *)((char *)v194 + 4);
      v202 = (__int32 *)((char *)v254 + a5);
      v253.i32[0] = v255;
      v253.i32[1] = *v202;
      v203 = (uint8x8_t *)((char *)v202 + a5);
      v256 = (uint16x8_t)vdupq_n_s16(v247);
      v204 = (__int32 *)((char *)v203 + a5);
      v251.i32[0] = v203->i32[0];
      v251.i32[1] = *v204;
      v257 = (int16x8_t)vaddw_u8(v256, v251);
      v243 = vqmovun_s16((int16x8_t)vaddw_u8(v256, v253));
      v244 = vqmovun_s16(v257);
      v201 = v254;
    }
    v201->i32[0] = v243.i32[0];
    *v202 = v243.i32[1];
    v203->i32[0] = v244.i32[0];
    *v204 = v244.i32[1];
  }
  return result;
}

_DWORD *vpx_he_predictor_4x4_c(_DWORD *result, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  v4 = *a4;
  v5 = a4[1];
  v6 = a4[2];
  v7 = a4[3];
  *result = 16843009 * ((*(unsigned __int8 *)(a3 - 1) + 2 * v4 + v5 + 2) >> 2);
  *(_DWORD *)((char *)result + a2) = 16843009 * ((v4 + 2 * v5 + v6 + 2) >> 2);
  *(_DWORD *)((char *)result + 2 * a2) = 16843009 * ((v5 + 2 + 2 * v6 + v7) >> 2);
  *(_DWORD *)((char *)result + 3 * a2) = 16843009 * ((v6 + 2 + v7 + 2 * v7) >> 2);
  return result;
}

_BYTE *vpx_ve_predictor_4x4_c(_BYTE *result, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  v6 = a3[3];
  v7 = a3[4];
  *result = (*(a3 - 1) + 2 * v3 + v4 + 2) >> 2;
  result[1] = (v3 + 2 * v4 + v5 + 2) >> 2;
  result[2] = (v4 + 2 + 2 * v5 + v6) >> 2;
  result[3] = (v5 + 2 + 2 * v6 + v7) >> 2;
  *(_DWORD *)&result[a2] = *(_DWORD *)result;
  *(_DWORD *)&result[2 * a2] = *(_DWORD *)result;
  *(_DWORD *)&result[3 * a2] = *(_DWORD *)result;
  return result;
}

_BYTE *vpx_d63e_predictor_4x4_c(_BYTE *result, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned int v20;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[2];
  v6 = (v4 + 1 + v5) >> 1;
  v7 = a3[3];
  v8 = a3[4];
  v9 = a3[5];
  v10 = a3[6];
  v11 = a3[7];
  *result = (v4 + 1 + v3) >> 1;
  v12 = &result[2 * a2];
  *v12 = v6;
  result[1] = v6;
  v13 = (v7 + 1 + v5) >> 1;
  v12[1] = v13;
  result[2] = v13;
  v14 = (v7 + 1 + v8) >> 1;
  v12[2] = v14;
  result[3] = v14;
  v15 = v5 + 2;
  v12[3] = (v8 + 2 * v9 + v10 + 2) >> 2;
  v16 = &result[a2];
  *v16 = (v3 + 2 * v4 + v5 + 2) >> 2;
  v17 = (v4 + 2 * v5 + v7 + 2) >> 2;
  v18 = &result[2 * a2 + a2];
  *v18 = v17;
  v16[1] = v17;
  v19 = (v15 + 2 * v7 + v8) >> 2;
  v18[1] = v19;
  v16[2] = v19;
  v20 = (v7 + 2 + 2 * v8 + v9) >> 2;
  v18[2] = v20;
  v16[3] = v20;
  v18[3] = (v9 + 2 * v10 + v11 + 2) >> 2;
  return result;
}

_BYTE *vpx_d45e_predictor_4x4_c(_BYTE *result, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _BYTE *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;

  v3 = a3[1];
  v4 = a3[2];
  v5 = a3[3];
  v6 = a3[4];
  v7 = a3[5];
  v8 = a3[6];
  v9 = (*a3 + 2 * v3 + v4 + 2) >> 2;
  v10 = (v3 + 2 * v4 + v5 + 2) >> 2;
  v11 = a3[7];
  *result = v9;
  v12 = &result[a2];
  *v12 = v10;
  result[1] = v10;
  v13 = (v4 + 2 + 2 * v5 + v6) >> 2;
  v14 = &result[2 * a2];
  *v14 = v13;
  v12[1] = v13;
  result[2] = v13;
  v15 = (v5 + 2 + 2 * v6 + v7) >> 2;
  v16 = &result[2 * a2 + a2];
  *v16 = v15;
  v14[1] = v15;
  v12[2] = v15;
  result[3] = v15;
  v17 = (v8 + 2 + v6 + 2 * v7) >> 2;
  v16[1] = v17;
  v14[2] = v17;
  v12[3] = v17;
  LODWORD(v12) = (v11 + v7 + 2 * v8 + 2) >> 2;
  v16[2] = (_BYTE)v12;
  v14[3] = (_BYTE)v12;
  v16[3] = (v8 + 2 + v11 + 2 * v11) >> 2;
  return result;
}

int8x8_t vpx_dc_predictor_4x4_neon(_DWORD *a1, uint64_t a2, __int32 *a3, __int32 *a4, uint8x8_t a5, uint8x8_t a6)
{
  int16x8_t v6;
  int8x8_t result;
  _DWORD *v8;

  a5.i32[0] = *a3;
  a6.i32[0] = *a4;
  v6 = (int16x8_t)vaddl_u8(a6, a5);
  v6.i16[0] = vaddv_s16(*(int16x4_t *)v6.i8);
  *(int16x4_t *)v6.i8 = vdup_lane_s16(*(int16x4_t *)v6.i8, 0);
  result = vrshrn_n_s16(v6, 3uLL);
  *a1 = result.i32[0];
  *(_DWORD *)((char *)a1 + a2) = result.i32[0];
  v8 = (_DWORD *)((char *)a1 + a2 + a2);
  *v8 = result.i32[0];
  *(_DWORD *)((char *)v8 + a2) = result.i32[0];
  return result;
}

int8x8_t vpx_dc_left_predictor_4x4_neon(_DWORD *a1, uint64_t a2, uint8x8_t a3, uint64_t a4, __int32 *a5)
{
  int8x8_t result;
  _DWORD *v6;

  a3.i32[0] = *a5;
  a3.i16[0] = vaddlv_u8(a3);
  result = vrshrn_n_s16(vdupq_n_s16(a3.u32[0]), 2uLL);
  *a1 = result.i32[0];
  *(_DWORD *)((char *)a1 + a2) = result.i32[0];
  v6 = (_DWORD *)((char *)a1 + a2 + a2);
  *v6 = result.i32[0];
  *(_DWORD *)((char *)v6 + a2) = result.i32[0];
  return result;
}

int8x8_t vpx_dc_top_predictor_4x4_neon(_DWORD *a1, uint64_t a2, __int32 *a3, uint8x8_t a4)
{
  int8x8_t result;
  _DWORD *v5;

  a4.i32[0] = *a3;
  a4.i16[0] = vaddlv_u8(a4);
  result = vrshrn_n_s16(vdupq_n_s16(a4.u32[0]), 2uLL);
  *a1 = result.i32[0];
  *(_DWORD *)((char *)a1 + a2) = result.i32[0];
  v5 = (_DWORD *)((char *)a1 + a2 + a2);
  *v5 = result.i32[0];
  *(_DWORD *)((char *)v5 + a2) = result.i32[0];
  return result;
}

_DWORD *vpx_dc_128_predictor_4x4_neon(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;

  *result = -2139062144;
  *(_DWORD *)((char *)result + a2) = -2139062144;
  v2 = (_DWORD *)((char *)result + a2 + a2);
  *v2 = -2139062144;
  *(_DWORD *)((char *)v2 + a2) = -2139062144;
  return result;
}

int8x8_t vpx_dc_predictor_8x8_neon(int8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint8x8_t *a4)
{
  int8x8_t result;
  int8x8_t *v5;
  int8x8_t *v6;
  int8x8_t *v7;
  int8x8_t *v8;
  int8x8_t *v9;

  result = vrshrn_n_s16(vdupq_n_s16(vaddlvq_u16(vaddl_u8(*a4, *a3))), 4uLL);
  *a1 = result;
  *(int8x8_t *)((char *)a1 + a2) = result;
  v5 = (int8x8_t *)((char *)a1 + a2 + a2);
  *v5 = result;
  v6 = (int8x8_t *)((char *)v5 + a2);
  *v6 = result;
  v7 = (int8x8_t *)((char *)v6 + a2);
  *v7 = result;
  v8 = (int8x8_t *)((char *)v7 + a2);
  *v8 = result;
  v9 = (int8x8_t *)((char *)v8 + a2);
  *v9 = result;
  *(int8x8_t *)((char *)v9 + a2) = result;
  return result;
}

int8x8_t vpx_dc_left_predictor_8x8_neon(int8x8_t *a1, uint64_t a2, uint64_t a3, uint8x8_t *a4)
{
  uint8x8_t v4;
  int8x8_t result;
  int8x8_t *v6;
  int8x8_t *v7;
  int8x8_t *v8;
  int8x8_t *v9;
  int8x8_t *v10;

  v4 = *a4;
  v4.i16[0] = vaddlv_u8(*a4);
  result = vrshrn_n_s16(vdupq_n_s16(v4.u32[0]), 3uLL);
  *a1 = result;
  *(int8x8_t *)((char *)a1 + a2) = result;
  v6 = (int8x8_t *)((char *)a1 + a2 + a2);
  *v6 = result;
  v7 = (int8x8_t *)((char *)v6 + a2);
  *v7 = result;
  v8 = (int8x8_t *)((char *)v7 + a2);
  *v8 = result;
  v9 = (int8x8_t *)((char *)v8 + a2);
  *v9 = result;
  v10 = (int8x8_t *)((char *)v9 + a2);
  *v10 = result;
  *(int8x8_t *)((char *)v10 + a2) = result;
  return result;
}

int8x8_t vpx_dc_top_predictor_8x8_neon(int8x8_t *a1, uint64_t a2, uint8x8_t *a3)
{
  uint8x8_t v3;
  int8x8_t result;
  int8x8_t *v5;
  int8x8_t *v6;
  int8x8_t *v7;
  int8x8_t *v8;
  int8x8_t *v9;

  v3 = *a3;
  v3.i16[0] = vaddlv_u8(*a3);
  result = vrshrn_n_s16(vdupq_n_s16(v3.u32[0]), 3uLL);
  *a1 = result;
  *(int8x8_t *)((char *)a1 + a2) = result;
  v5 = (int8x8_t *)((char *)a1 + a2 + a2);
  *v5 = result;
  v6 = (int8x8_t *)((char *)v5 + a2);
  *v6 = result;
  v7 = (int8x8_t *)((char *)v6 + a2);
  *v7 = result;
  v8 = (int8x8_t *)((char *)v7 + a2);
  *v8 = result;
  v9 = (int8x8_t *)((char *)v8 + a2);
  *v9 = result;
  *(int8x8_t *)((char *)v9 + a2) = result;
  return result;
}

double vpx_dc_128_predictor_8x8_neon(_QWORD *a1, uint64_t a2)
{
  double result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  result = -2.93744652e-306;
  *a1 = 0x8080808080808080;
  *(_QWORD *)((char *)a1 + a2) = 0x8080808080808080;
  v3 = (_QWORD *)((char *)a1 + a2 + a2);
  *v3 = 0x8080808080808080;
  v4 = (_QWORD *)((char *)v3 + a2);
  *v4 = 0x8080808080808080;
  v5 = (_QWORD *)((char *)v4 + a2);
  *v5 = 0x8080808080808080;
  v6 = (_QWORD *)((char *)v5 + a2);
  *v6 = 0x8080808080808080;
  v7 = (_QWORD *)((char *)v6 + a2);
  *v7 = 0x8080808080808080;
  *(_QWORD *)((char *)v7 + a2) = 0x8080808080808080;
  return result;
}

int8x16_t vpx_dc_predictor_16x16_neon(int8x16_t *a1, uint64_t a2, uint8x16_t *a3, uint8x16_t *a4)
{
  int16x8_t v4;
  int8x16_t result;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;

  v4 = *(int16x8_t *)a3;
  v4.i32[0] = vaddlvq_u16(vpadalq_u8(vpaddlq_u8(*a4), *a3));
  result = vdupq_lane_s8(vrshrn_n_s16(v4, 5uLL), 0);
  *a1 = result;
  *(int8x16_t *)((char *)a1 + a2) = result;
  v6 = (int8x16_t *)((char *)a1 + a2 + a2);
  *v6 = result;
  v7 = (int8x16_t *)((char *)v6 + a2);
  *v7 = result;
  v8 = (int8x16_t *)((char *)v7 + a2);
  *v8 = result;
  v9 = (int8x16_t *)((char *)v8 + a2);
  *v9 = result;
  v10 = (int8x16_t *)((char *)v9 + a2);
  *v10 = result;
  v11 = (int8x16_t *)((char *)v10 + a2);
  *v11 = result;
  v12 = (int8x16_t *)((char *)v11 + a2);
  *v12 = result;
  v13 = (int8x16_t *)((char *)v12 + a2);
  *v13 = result;
  v14 = (int8x16_t *)((char *)v13 + a2);
  *v14 = result;
  v15 = (int8x16_t *)((char *)v14 + a2);
  *v15 = result;
  v16 = (int8x16_t *)((char *)v15 + a2);
  *v16 = result;
  v17 = (int8x16_t *)((char *)v16 + a2);
  *v17 = result;
  v18 = (int8x16_t *)((char *)v17 + a2);
  *v18 = result;
  *(int8x16_t *)((char *)v18 + a2) = result;
  return result;
}

int8x16_t vpx_dc_left_predictor_16x16_neon(int8x16_t *a1, uint64_t a2, uint64_t a3, uint8x16_t *a4)
{
  int16x8_t v4;
  int8x16_t result;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;

  v4 = *(int16x8_t *)a4;
  v4.i16[0] = vaddlvq_u8(*a4);
  result = vdupq_lane_s8(vrshrn_n_s16(v4, 4uLL), 0);
  *a1 = result;
  *(int8x16_t *)((char *)a1 + a2) = result;
  v6 = (int8x16_t *)((char *)a1 + a2 + a2);
  *v6 = result;
  v7 = (int8x16_t *)((char *)v6 + a2);
  *v7 = result;
  v8 = (int8x16_t *)((char *)v7 + a2);
  *v8 = result;
  v9 = (int8x16_t *)((char *)v8 + a2);
  *v9 = result;
  v10 = (int8x16_t *)((char *)v9 + a2);
  *v10 = result;
  v11 = (int8x16_t *)((char *)v10 + a2);
  *v11 = result;
  v12 = (int8x16_t *)((char *)v11 + a2);
  *v12 = result;
  v13 = (int8x16_t *)((char *)v12 + a2);
  *v13 = result;
  v14 = (int8x16_t *)((char *)v13 + a2);
  *v14 = result;
  v15 = (int8x16_t *)((char *)v14 + a2);
  *v15 = result;
  v16 = (int8x16_t *)((char *)v15 + a2);
  *v16 = result;
  v17 = (int8x16_t *)((char *)v16 + a2);
  *v17 = result;
  v18 = (int8x16_t *)((char *)v17 + a2);
  *v18 = result;
  *(int8x16_t *)((char *)v18 + a2) = result;
  return result;
}

int8x16_t vpx_dc_top_predictor_16x16_neon(int8x16_t *a1, uint64_t a2, uint8x16_t *a3)
{
  int16x8_t v3;
  int8x16_t result;
  int8x16_t *v5;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;

  v3 = *(int16x8_t *)a3;
  v3.i16[0] = vaddlvq_u8(*a3);
  result = vdupq_lane_s8(vrshrn_n_s16(v3, 4uLL), 0);
  *a1 = result;
  *(int8x16_t *)((char *)a1 + a2) = result;
  v5 = (int8x16_t *)((char *)a1 + a2 + a2);
  *v5 = result;
  v6 = (int8x16_t *)((char *)v5 + a2);
  *v6 = result;
  v7 = (int8x16_t *)((char *)v6 + a2);
  *v7 = result;
  v8 = (int8x16_t *)((char *)v7 + a2);
  *v8 = result;
  v9 = (int8x16_t *)((char *)v8 + a2);
  *v9 = result;
  v10 = (int8x16_t *)((char *)v9 + a2);
  *v10 = result;
  v11 = (int8x16_t *)((char *)v10 + a2);
  *v11 = result;
  v12 = (int8x16_t *)((char *)v11 + a2);
  *v12 = result;
  v13 = (int8x16_t *)((char *)v12 + a2);
  *v13 = result;
  v14 = (int8x16_t *)((char *)v13 + a2);
  *v14 = result;
  v15 = (int8x16_t *)((char *)v14 + a2);
  *v15 = result;
  v16 = (int8x16_t *)((char *)v15 + a2);
  *v16 = result;
  v17 = (int8x16_t *)((char *)v16 + a2);
  *v17 = result;
  *(int8x16_t *)((char *)v17 + a2) = result;
  return result;
}

__n128 vpx_dc_128_predictor_16x16_neon(__n128 *a1, uint64_t a2)
{
  __n128 result;
  __n128 *v3;
  __n128 *v4;
  __n128 *v5;
  __n128 *v6;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;

  result.n128_u64[0] = 0x8080808080808080;
  result.n128_u64[1] = 0x8080808080808080;
  *a1 = result;
  *(__n128 *)((char *)a1 + a2) = result;
  v3 = (__n128 *)((char *)a1 + a2 + a2);
  *v3 = result;
  v4 = (__n128 *)((char *)v3 + a2);
  *v4 = result;
  v5 = (__n128 *)((char *)v4 + a2);
  *v5 = result;
  v6 = (__n128 *)((char *)v5 + a2);
  *v6 = result;
  v7 = (__n128 *)((char *)v6 + a2);
  *v7 = result;
  v8 = (__n128 *)((char *)v7 + a2);
  *v8 = result;
  v9 = (__n128 *)((char *)v8 + a2);
  *v9 = result;
  v10 = (__n128 *)((char *)v9 + a2);
  *v10 = result;
  v11 = (__n128 *)((char *)v10 + a2);
  *v11 = result;
  v12 = (__n128 *)((char *)v11 + a2);
  *v12 = result;
  v13 = (__n128 *)((char *)v12 + a2);
  *v13 = result;
  v14 = (__n128 *)((char *)v13 + a2);
  *v14 = result;
  v15 = (__n128 *)((char *)v14 + a2);
  *v15 = result;
  *(__n128 *)((char *)v15 + a2) = result;
  return result;
}

int8x16_t vpx_dc_predictor_32x32_neon(int8x16_t *a1, uint64_t a2, uint8x16_t *a3, uint8x16_t *a4)
{
  int16x8_t v4;
  int8x16_t result;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16_t *v19;
  int8x16_t *v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t *v24;
  int8x16_t *v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;

  v4 = *(int16x8_t *)a3;
  v4.i32[0] = vaddlvq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8(a3[1]), *a3), *a4), a4[1]));
  result = vdupq_lane_s8(vrshrn_n_s16(v4, 6uLL), 0);
  *a1 = result;
  a1[1] = result;
  v6 = (int8x16_t *)((char *)a1 + a2);
  *v6 = result;
  v6[1] = result;
  v7 = (int8x16_t *)((char *)a1 + a2 + a2);
  *v7 = result;
  v7[1] = result;
  v8 = (int8x16_t *)((char *)v7 + a2);
  *v8 = result;
  v8[1] = result;
  v9 = (int8x16_t *)((char *)v8 + a2);
  *v9 = result;
  v9[1] = result;
  v10 = (int8x16_t *)((char *)v9 + a2);
  *v10 = result;
  v10[1] = result;
  v11 = (int8x16_t *)((char *)v10 + a2);
  *v11 = result;
  v11[1] = result;
  v12 = (int8x16_t *)((char *)v11 + a2);
  *v12 = result;
  v12[1] = result;
  v13 = (int8x16_t *)((char *)v12 + a2);
  *v13 = result;
  v13[1] = result;
  v14 = (int8x16_t *)((char *)v13 + a2);
  *v14 = result;
  v14[1] = result;
  v15 = (int8x16_t *)((char *)v14 + a2);
  *v15 = result;
  v15[1] = result;
  v16 = (int8x16_t *)((char *)v15 + a2);
  *v16 = result;
  v16[1] = result;
  v17 = (int8x16_t *)((char *)v16 + a2);
  *v17 = result;
  v17[1] = result;
  v18 = (int8x16_t *)((char *)v17 + a2);
  *v18 = result;
  v18[1] = result;
  v19 = (int8x16_t *)((char *)v18 + a2);
  *v19 = result;
  v19[1] = result;
  v20 = (int8x16_t *)((char *)v19 + a2);
  *v20 = result;
  v20[1] = result;
  v21 = (int8x16_t *)((char *)v20 + a2);
  *v21 = result;
  v21[1] = result;
  v22 = (int8x16_t *)((char *)v21 + a2);
  *v22 = result;
  v22[1] = result;
  v23 = (int8x16_t *)((char *)v22 + a2);
  *v23 = result;
  v23[1] = result;
  v24 = (int8x16_t *)((char *)v23 + a2);
  *v24 = result;
  v24[1] = result;
  v25 = (int8x16_t *)((char *)v24 + a2);
  *v25 = result;
  v25[1] = result;
  v26 = (int8x16_t *)((char *)v25 + a2);
  *v26 = result;
  v26[1] = result;
  v27 = (int8x16_t *)((char *)v26 + a2);
  *v27 = result;
  v27[1] = result;
  v28 = (int8x16_t *)((char *)v27 + a2);
  *v28 = result;
  v28[1] = result;
  v29 = (int8x16_t *)((char *)v28 + a2);
  *v29 = result;
  v29[1] = result;
  v30 = (int8x16_t *)((char *)v29 + a2);
  *v30 = result;
  v30[1] = result;
  v31 = (int8x16_t *)((char *)v30 + a2);
  *v31 = result;
  v31[1] = result;
  v32 = (int8x16_t *)((char *)v31 + a2);
  *v32 = result;
  v32[1] = result;
  v33 = (int8x16_t *)((char *)v32 + a2);
  *v33 = result;
  v33[1] = result;
  v34 = (int8x16_t *)((char *)v33 + a2);
  *v34 = result;
  v34[1] = result;
  v35 = (int8x16_t *)((char *)v34 + a2);
  *v35 = result;
  v35[1] = result;
  v36 = (int8x16_t *)((char *)v35 + a2);
  *v36 = result;
  v36[1] = result;
  return result;
}

int8x16_t vpx_dc_left_predictor_32x32_neon(int8x16_t *a1, uint64_t a2, uint64_t a3, uint8x16_t *a4)
{
  int16x8_t v4;
  int8x16_t result;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16_t *v19;
  int8x16_t *v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t *v24;
  int8x16_t *v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;

  v4 = *(int16x8_t *)a4;
  v4.i32[0] = vaddlvq_u16(vpadalq_u8(vpaddlq_u8(a4[1]), *a4));
  result = vdupq_lane_s8(vrshrn_n_s16(v4, 5uLL), 0);
  *a1 = result;
  a1[1] = result;
  v6 = (int8x16_t *)((char *)a1 + a2);
  *v6 = result;
  v6[1] = result;
  v7 = (int8x16_t *)((char *)a1 + a2 + a2);
  *v7 = result;
  v7[1] = result;
  v8 = (int8x16_t *)((char *)v7 + a2);
  *v8 = result;
  v8[1] = result;
  v9 = (int8x16_t *)((char *)v8 + a2);
  *v9 = result;
  v9[1] = result;
  v10 = (int8x16_t *)((char *)v9 + a2);
  *v10 = result;
  v10[1] = result;
  v11 = (int8x16_t *)((char *)v10 + a2);
  *v11 = result;
  v11[1] = result;
  v12 = (int8x16_t *)((char *)v11 + a2);
  *v12 = result;
  v12[1] = result;
  v13 = (int8x16_t *)((char *)v12 + a2);
  *v13 = result;
  v13[1] = result;
  v14 = (int8x16_t *)((char *)v13 + a2);
  *v14 = result;
  v14[1] = result;
  v15 = (int8x16_t *)((char *)v14 + a2);
  *v15 = result;
  v15[1] = result;
  v16 = (int8x16_t *)((char *)v15 + a2);
  *v16 = result;
  v16[1] = result;
  v17 = (int8x16_t *)((char *)v16 + a2);
  *v17 = result;
  v17[1] = result;
  v18 = (int8x16_t *)((char *)v17 + a2);
  *v18 = result;
  v18[1] = result;
  v19 = (int8x16_t *)((char *)v18 + a2);
  *v19 = result;
  v19[1] = result;
  v20 = (int8x16_t *)((char *)v19 + a2);
  *v20 = result;
  v20[1] = result;
  v21 = (int8x16_t *)((char *)v20 + a2);
  *v21 = result;
  v21[1] = result;
  v22 = (int8x16_t *)((char *)v21 + a2);
  *v22 = result;
  v22[1] = result;
  v23 = (int8x16_t *)((char *)v22 + a2);
  *v23 = result;
  v23[1] = result;
  v24 = (int8x16_t *)((char *)v23 + a2);
  *v24 = result;
  v24[1] = result;
  v25 = (int8x16_t *)((char *)v24 + a2);
  *v25 = result;
  v25[1] = result;
  v26 = (int8x16_t *)((char *)v25 + a2);
  *v26 = result;
  v26[1] = result;
  v27 = (int8x16_t *)((char *)v26 + a2);
  *v27 = result;
  v27[1] = result;
  v28 = (int8x16_t *)((char *)v27 + a2);
  *v28 = result;
  v28[1] = result;
  v29 = (int8x16_t *)((char *)v28 + a2);
  *v29 = result;
  v29[1] = result;
  v30 = (int8x16_t *)((char *)v29 + a2);
  *v30 = result;
  v30[1] = result;
  v31 = (int8x16_t *)((char *)v30 + a2);
  *v31 = result;
  v31[1] = result;
  v32 = (int8x16_t *)((char *)v31 + a2);
  *v32 = result;
  v32[1] = result;
  v33 = (int8x16_t *)((char *)v32 + a2);
  *v33 = result;
  v33[1] = result;
  v34 = (int8x16_t *)((char *)v33 + a2);
  *v34 = result;
  v34[1] = result;
  v35 = (int8x16_t *)((char *)v34 + a2);
  *v35 = result;
  v35[1] = result;
  v36 = (int8x16_t *)((char *)v35 + a2);
  *v36 = result;
  v36[1] = result;
  return result;
}

int8x16_t vpx_dc_top_predictor_32x32_neon(int8x16_t *a1, uint64_t a2, uint8x16_t *a3)
{
  int16x8_t v3;
  int8x16_t result;
  int8x16_t *v5;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16_t *v19;
  int8x16_t *v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t *v24;
  int8x16_t *v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;

  v3 = *(int16x8_t *)a3;
  v3.i32[0] = vaddlvq_u16(vpadalq_u8(vpaddlq_u8(a3[1]), *a3));
  result = vdupq_lane_s8(vrshrn_n_s16(v3, 5uLL), 0);
  *a1 = result;
  a1[1] = result;
  v5 = (int8x16_t *)((char *)a1 + a2);
  *v5 = result;
  v5[1] = result;
  v6 = (int8x16_t *)((char *)a1 + a2 + a2);
  *v6 = result;
  v6[1] = result;
  v7 = (int8x16_t *)((char *)v6 + a2);
  *v7 = result;
  v7[1] = result;
  v8 = (int8x16_t *)((char *)v7 + a2);
  *v8 = result;
  v8[1] = result;
  v9 = (int8x16_t *)((char *)v8 + a2);
  *v9 = result;
  v9[1] = result;
  v10 = (int8x16_t *)((char *)v9 + a2);
  *v10 = result;
  v10[1] = result;
  v11 = (int8x16_t *)((char *)v10 + a2);
  *v11 = result;
  v11[1] = result;
  v12 = (int8x16_t *)((char *)v11 + a2);
  *v12 = result;
  v12[1] = result;
  v13 = (int8x16_t *)((char *)v12 + a2);
  *v13 = result;
  v13[1] = result;
  v14 = (int8x16_t *)((char *)v13 + a2);
  *v14 = result;
  v14[1] = result;
  v15 = (int8x16_t *)((char *)v14 + a2);
  *v15 = result;
  v15[1] = result;
  v16 = (int8x16_t *)((char *)v15 + a2);
  *v16 = result;
  v16[1] = result;
  v17 = (int8x16_t *)((char *)v16 + a2);
  *v17 = result;
  v17[1] = result;
  v18 = (int8x16_t *)((char *)v17 + a2);
  *v18 = result;
  v18[1] = result;
  v19 = (int8x16_t *)((char *)v18 + a2);
  *v19 = result;
  v19[1] = result;
  v20 = (int8x16_t *)((char *)v19 + a2);
  *v20 = result;
  v20[1] = result;
  v21 = (int8x16_t *)((char *)v20 + a2);
  *v21 = result;
  v21[1] = result;
  v22 = (int8x16_t *)((char *)v21 + a2);
  *v22 = result;
  v22[1] = result;
  v23 = (int8x16_t *)((char *)v22 + a2);
  *v23 = result;
  v23[1] = result;
  v24 = (int8x16_t *)((char *)v23 + a2);
  *v24 = result;
  v24[1] = result;
  v25 = (int8x16_t *)((char *)v24 + a2);
  *v25 = result;
  v25[1] = result;
  v26 = (int8x16_t *)((char *)v25 + a2);
  *v26 = result;
  v26[1] = result;
  v27 = (int8x16_t *)((char *)v26 + a2);
  *v27 = result;
  v27[1] = result;
  v28 = (int8x16_t *)((char *)v27 + a2);
  *v28 = result;
  v28[1] = result;
  v29 = (int8x16_t *)((char *)v28 + a2);
  *v29 = result;
  v29[1] = result;
  v30 = (int8x16_t *)((char *)v29 + a2);
  *v30 = result;
  v30[1] = result;
  v31 = (int8x16_t *)((char *)v30 + a2);
  *v31 = result;
  v31[1] = result;
  v32 = (int8x16_t *)((char *)v31 + a2);
  *v32 = result;
  v32[1] = result;
  v33 = (int8x16_t *)((char *)v32 + a2);
  *v33 = result;
  v33[1] = result;
  v34 = (int8x16_t *)((char *)v33 + a2);
  *v34 = result;
  v34[1] = result;
  v35 = (int8x16_t *)((char *)v34 + a2);
  *v35 = result;
  v35[1] = result;
  return result;
}

__n128 vpx_dc_128_predictor_32x32_neon(__n128 *a1, uint64_t a2)
{
  __n128 result;
  __n128 *v3;
  __n128 *v4;
  __n128 *v5;
  __n128 *v6;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 *v16;
  __n128 *v17;
  __n128 *v18;
  __n128 *v19;
  __n128 *v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  __n128 *v27;
  __n128 *v28;
  __n128 *v29;
  __n128 *v30;
  __n128 *v31;
  __n128 *v32;
  __n128 *v33;

  result.n128_u64[0] = 0x8080808080808080;
  result.n128_u64[1] = 0x8080808080808080;
  *a1 = result;
  a1[1] = result;
  v3 = (__n128 *)((char *)a1 + a2);
  v4 = (__n128 *)((char *)a1 + a2 + a2);
  *v3 = result;
  v3[1] = result;
  v5 = (__n128 *)((char *)v4 + a2);
  *v4 = result;
  v4[1] = result;
  v6 = (__n128 *)((char *)v4 + a2 + a2);
  *v5 = result;
  v5[1] = result;
  v7 = (__n128 *)((char *)v6 + a2);
  *v6 = result;
  v6[1] = result;
  v8 = (__n128 *)((char *)v6 + a2 + a2);
  *v7 = result;
  v7[1] = result;
  v9 = (__n128 *)((char *)v8 + a2);
  *v8 = result;
  v8[1] = result;
  v10 = (__n128 *)((char *)v8 + a2 + a2);
  *v9 = result;
  v9[1] = result;
  v11 = (__n128 *)((char *)v10 + a2);
  *v10 = result;
  v10[1] = result;
  v12 = (__n128 *)((char *)v10 + a2 + a2);
  *v11 = result;
  v11[1] = result;
  v13 = (__n128 *)((char *)v12 + a2);
  *v12 = result;
  v12[1] = result;
  v14 = (__n128 *)((char *)v12 + a2 + a2);
  *v13 = result;
  v13[1] = result;
  v15 = (__n128 *)((char *)v14 + a2);
  *v14 = result;
  v14[1] = result;
  v16 = (__n128 *)((char *)v14 + a2 + a2);
  *v15 = result;
  v15[1] = result;
  v17 = (__n128 *)((char *)v16 + a2);
  *v16 = result;
  v16[1] = result;
  v18 = (__n128 *)((char *)v16 + a2 + a2);
  *v17 = result;
  v17[1] = result;
  v19 = (__n128 *)((char *)v18 + a2);
  *v18 = result;
  v18[1] = result;
  v20 = (__n128 *)((char *)v18 + a2 + a2);
  *v19 = result;
  v19[1] = result;
  v21 = (__n128 *)((char *)v20 + a2);
  *v20 = result;
  v20[1] = result;
  v22 = (__n128 *)((char *)v20 + a2 + a2);
  *v21 = result;
  v21[1] = result;
  v23 = (__n128 *)((char *)v22 + a2);
  *v22 = result;
  v22[1] = result;
  v24 = (__n128 *)((char *)v22 + a2 + a2);
  *v23 = result;
  v23[1] = result;
  v25 = (__n128 *)((char *)v24 + a2);
  *v24 = result;
  v24[1] = result;
  v26 = (__n128 *)((char *)v24 + a2 + a2);
  *v25 = result;
  v25[1] = result;
  v27 = (__n128 *)((char *)v26 + a2);
  *v26 = result;
  v26[1] = result;
  v28 = (__n128 *)((char *)v26 + a2 + a2);
  *v27 = result;
  v27[1] = result;
  v29 = (__n128 *)((char *)v28 + a2);
  *v28 = result;
  v28[1] = result;
  v30 = (__n128 *)((char *)v28 + a2 + a2);
  *v29 = result;
  v29[1] = result;
  v31 = (__n128 *)((char *)v30 + a2);
  *v30 = result;
  v30[1] = result;
  v32 = (__n128 *)((char *)v30 + a2 + a2);
  *v31 = result;
  v31[1] = result;
  v33 = (__n128 *)((char *)v32 + a2);
  *v32 = result;
  v32[1] = result;
  *v33 = result;
  v33[1] = result;
  return result;
}

int8x8_t vpx_d45_predictor_4x4_neon(_DWORD *a1, uint64_t a2, uint8x8_t *a3)
{
  int8x8_t result;
  int8x8_t v4;
  uint64_t v5;

  result = (int8x8_t)*a3;
  v4 = (int8x8_t)vrhadd_u8(vhadd_u8(*a3, (uint8x8_t)vext_s8(result, result, 2uLL)), (uint8x8_t)vext_s8(result, result, 1uLL));
  *a1 = v4.i32[0];
  *(_DWORD *)((char *)a1 + a2) = vext_s8(v4, result, 1uLL).u32[0];
  *(_DWORD *)((char *)a1 + 2 * a2) = vext_s8(v4, result, 2uLL).u32[0];
  v5 = (uint64_t)a1 + 2 * a2 + a2;
  *(_DWORD *)v5 = vext_s8(v4, result, 3uLL).u32[0];
  *(_BYTE *)(v5 + 3) = result.i8[7];
  return result;
}

int8x8_t vpx_d45_predictor_8x8_neon(int8x8_t *a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v3;
  int8x8_t v4;
  int8x8_t v5;
  int8x8_t result;

  v3 = *(int8x8_t *)(a3 + 1);
  v4 = vdup_lane_s8(v3, 6);
  v5 = (int8x8_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(*(int8x8_t *)a3, *(int8x8_t *)a3, 7uLL), (uint8x8_t)v3), *(uint8x8_t *)a3);
  *a1 = vext_s8(v5, v4, 1uLL);
  *(int8x8_t *)((char *)a1 + a2) = vext_s8(v5, v4, 2uLL);
  *(int8x8_t *)((char *)a1 + 2 * a2) = vext_s8(v5, v4, 3uLL);
  *(int8x8_t *)((char *)a1 + 3 * a2) = vext_s8(v5, v4, 4uLL);
  *(int8x8_t *)((char *)a1 + 4 * a2) = vext_s8(v5, v4, 5uLL);
  *(int8x8_t *)((char *)a1 + 5 * a2) = vext_s8(v5, v4, 6uLL);
  result = vext_s8(v5, v4, 7uLL);
  *(int8x8_t *)((char *)a1 + 6 * a2) = result;
  *(int8x8_t *)((char *)&a1[a2] - a2) = v4;
  return result;
}

int8x16_t vpx_d45_predictor_16x16_neon(int8x16_t *a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t result;

  v3 = *(int8x16_t *)(a3 + 1);
  v4 = vdupq_laneq_s8(v3, 14);
  v5 = (int8x16_t)vrhaddq_u8(vhaddq_u8((uint8x16_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 0xFuLL), (uint8x16_t)v3), *(uint8x16_t *)a3);
  *a1 = vextq_s8(v5, v4, 1uLL);
  *(int8x16_t *)((char *)a1 + a2) = vextq_s8(v5, v4, 2uLL);
  *(int8x16_t *)((char *)a1 + 2 * a2) = vextq_s8(v5, v4, 3uLL);
  *(int8x16_t *)((char *)a1 + 3 * a2) = vextq_s8(v5, v4, 4uLL);
  *(int8x16_t *)((char *)a1 + 4 * a2) = vextq_s8(v5, v4, 5uLL);
  *(int8x16_t *)((char *)a1 + 5 * a2) = vextq_s8(v5, v4, 6uLL);
  *(int8x16_t *)((char *)a1 + 6 * a2) = vextq_s8(v5, v4, 7uLL);
  *(int8x16_t *)((char *)a1 + 7 * a2) = vextq_s8(v5, v4, 8uLL);
  *(int8x16_t *)((char *)a1 + 8 * a2) = vextq_s8(v5, v4, 9uLL);
  *(int8x16_t *)((char *)a1 + 9 * a2) = vextq_s8(v5, v4, 0xAuLL);
  *(int8x16_t *)((char *)a1 + 10 * a2) = vextq_s8(v5, v4, 0xBuLL);
  *(int8x16_t *)((char *)a1 + 11 * a2) = vextq_s8(v5, v4, 0xCuLL);
  *(int8x16_t *)((char *)a1 + 12 * a2) = vextq_s8(v5, v4, 0xDuLL);
  *(int8x16_t *)((char *)a1 + 13 * a2) = vextq_s8(v5, v4, 0xEuLL);
  result = vextq_s8(v5, v4, 0xFuLL);
  *(int8x16_t *)((char *)a1 + 14 * a2) = result;
  *(int8x16_t *)((char *)&a1[a2] - a2) = v4;
  return result;
}

int8x16_t vpx_d45_predictor_32x32_neon(int8x16_t *a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v3;
  int8x16_t result;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t *v10;
  int8x16_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t *v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t *v18;
  int8x16_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  int8x16_t v27;
  int8x16_t *v28;
  int8x16_t v29;
  int8x16_t *v30;
  int8x16_t v31;
  int8x16_t *v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t *v35;
  int8x16_t v36;
  int8x16_t *v37;
  int8x16_t *v38;
  uint64_t v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  int8x16_t *v49;
  int8x16_t *v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;

  v3 = *(int8x16_t *)(a3 + 17);
  result = vdupq_laneq_s8(v3, 14);
  v5 = (int8x16_t)vrhaddq_u8(vhaddq_u8((uint8x16_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 0xFuLL), *(uint8x16_t *)(a3 + 1)), *(uint8x16_t *)a3);
  v6 = (int8x16_t)vrhaddq_u8(vhaddq_u8(*(uint8x16_t *)(a3 + 15), (uint8x16_t)v3), *(uint8x16_t *)(a3 + 16));
  v7 = vextq_s8(v6, result, 1uLL);
  *a1 = vextq_s8(v5, v6, 1uLL);
  a1[1] = v7;
  v8 = (int8x16_t *)((char *)a1 + a2);
  v9 = vextq_s8(v6, result, 2uLL);
  *v8 = vextq_s8(v5, v6, 2uLL);
  v8[1] = v9;
  v10 = (int8x16_t *)((char *)a1 + 2 * a2);
  v11 = vextq_s8(v6, result, 3uLL);
  *v10 = vextq_s8(v5, v6, 3uLL);
  v10[1] = v11;
  v12 = (uint64_t)a1->i64 + 2 * a2 + a2;
  v13 = vextq_s8(v6, result, 4uLL);
  *(int8x16_t *)v12 = vextq_s8(v5, v6, 4uLL);
  *(int8x16_t *)(v12 + 16) = v13;
  v14 = (int8x16_t *)((char *)a1 + 4 * a2);
  v15 = vextq_s8(v6, result, 5uLL);
  *v14 = vextq_s8(v5, v6, 5uLL);
  v14[1] = v15;
  v16 = (uint64_t)a1->i64 + 4 * a2 + a2;
  v17 = vextq_s8(v6, result, 6uLL);
  *(int8x16_t *)v16 = vextq_s8(v5, v6, 6uLL);
  *(int8x16_t *)(v16 + 16) = v17;
  v18 = (int8x16_t *)((char *)a1 + 6 * a2);
  v19 = vextq_s8(v6, result, 7uLL);
  *v18 = vextq_s8(v5, v6, 7uLL);
  v18[1] = v19;
  v20 = (int8x16_t *)((char *)a1 + 7 * a2);
  v21 = vextq_s8(v6, result, 8uLL);
  *v20 = vextq_s8(v5, v6, 8uLL);
  v20[1] = v21;
  v22 = (int8x16_t *)((char *)a1 + 8 * a2);
  v23 = vextq_s8(v6, result, 9uLL);
  *v22 = vextq_s8(v5, v6, 9uLL);
  v22[1] = v23;
  v24 = (uint64_t)&a1->i64[a2] + a2;
  v25 = vextq_s8(v6, result, 0xAuLL);
  *(int8x16_t *)v24 = vextq_s8(v5, v6, 0xAuLL);
  *(int8x16_t *)(v24 + 16) = v25;
  v26 = (int8x16_t *)((char *)a1 + 10 * a2);
  v27 = vextq_s8(v6, result, 0xBuLL);
  *v26 = vextq_s8(v5, v6, 0xBuLL);
  v26[1] = v27;
  v28 = (int8x16_t *)((char *)a1 + 11 * a2);
  v29 = vextq_s8(v6, result, 0xCuLL);
  *v28 = vextq_s8(v5, v6, 0xCuLL);
  v28[1] = v29;
  v30 = (int8x16_t *)((char *)a1 + 12 * a2);
  v31 = vextq_s8(v6, result, 0xDuLL);
  *v30 = vextq_s8(v5, v6, 0xDuLL);
  v30[1] = v31;
  v32 = (int8x16_t *)((char *)a1 + 13 * a2);
  v33 = vextq_s8(v6, result, 0xEuLL);
  *v32 = vextq_s8(v5, v6, 0xEuLL);
  v32[1] = v33;
  v34 = vextq_s8(v5, v6, 0xFuLL);
  v35 = (int8x16_t *)((char *)a1 + 14 * a2);
  v36 = vextq_s8(v6, result, 0xFuLL);
  *v35 = v34;
  v35[1] = v36;
  v37 = (int8x16_t *)((char *)a1 + 15 * a2);
  *v37 = v6;
  v37[1] = result;
  v38 = &a1[a2];
  *v38 = v7;
  v38[1] = result;
  v39 = (uint64_t)a1[a2].i64 + a2;
  *(int8x16_t *)v39 = v9;
  *(int8x16_t *)(v39 + 16) = result;
  v40 = (int8x16_t *)((char *)a1 + 18 * a2);
  *v40 = v11;
  v40[1] = result;
  v41 = (int8x16_t *)((char *)a1 + 19 * a2);
  *v41 = v13;
  v41[1] = result;
  v42 = (int8x16_t *)((char *)a1 + 20 * a2);
  *v42 = v15;
  v42[1] = result;
  v43 = (int8x16_t *)((char *)a1 + 21 * a2);
  *v43 = v17;
  v43[1] = result;
  v44 = (int8x16_t *)((char *)a1 + 22 * a2);
  *v44 = v19;
  v44[1] = result;
  v45 = (int8x16_t *)((char *)a1 + 23 * a2);
  *v45 = v21;
  v45[1] = result;
  v46 = (int8x16_t *)((char *)a1 + 24 * a2);
  *v46 = v23;
  v46[1] = result;
  v47 = (int8x16_t *)((char *)a1 + 25 * a2);
  *v47 = v25;
  v47[1] = result;
  v48 = (int8x16_t *)((char *)a1 + 26 * a2);
  *v48 = v27;
  v48[1] = result;
  v49 = (int8x16_t *)((char *)a1 + 27 * a2);
  *v49 = v29;
  v49[1] = result;
  v50 = (int8x16_t *)((char *)a1 + 28 * a2);
  *v50 = v31;
  v50[1] = result;
  v51 = (int8x16_t *)((char *)a1 + 29 * a2);
  *v51 = v33;
  v51[1] = result;
  v52 = (int8x16_t *)((char *)a1 + 30 * a2);
  *v52 = v36;
  v52[1] = result;
  v53 = (int8x16_t *)((char *)&a1[2 * a2] - a2);
  *v53 = result;
  v53[1] = result;
  return result;
}

uint8x8_t vpx_d63_predictor_4x4_neon(unsigned __int32 *a1, uint64_t a2, __int32 *a3, uint8x8_t a4, uint8x8_t a5, uint8x8_t a6, uint8x8_t a7)
{
  unsigned __int32 v7;
  uint8x8_t result;

  a4.i32[0] = *a3;
  a5.i32[0] = *(__int32 *)((char *)a3 + 1);
  a6.i32[0] = *(__int32 *)((char *)a3 + 2);
  a7.i32[0] = *(__int32 *)((char *)a3 + 3);
  v7 = vrhadd_u8(a4, a5).u32[0];
  result = vrhadd_u8(vhadd_u8(a4, a6), a5);
  *a1 = v7;
  *(unsigned __int32 *)((char *)a1 + a2) = result.i32[0];
  *(unsigned __int32 *)((char *)a1 + 2 * a2) = vrhadd_u8(a5, a6).u32[0];
  *(unsigned __int32 *)((char *)a1 + 3 * a2) = vrhadd_u8(vhadd_u8(a5, a7), a6).u32[0];
  return result;
}

int8x8_t vpx_d63_predictor_8x8_neon(int8x8_t *a1, uint64_t a2, uint64_t a3)
{
  uint8x8_t v3;
  int8x8_t v4;
  int8x8_t v5;
  int8x8_t v6;
  int8x8_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t result;

  v3 = *(uint8x8_t *)(a3 + 1);
  v4 = *(int8x8_t *)(a3 + 2);
  v5 = vdup_lane_s8(v4, 5);
  v6 = (int8x8_t)vrhadd_u8(*(uint8x8_t *)a3, v3);
  v7 = (int8x8_t)vrhadd_u8(vhadd_u8(*(uint8x8_t *)a3, (uint8x8_t)v4), v3);
  *a1 = v6;
  *(int8x8_t *)((char *)a1 + a2) = v7;
  v8 = vext_s8(v6, v6, 7uLL);
  v9 = vext_s8(v7, v7, 7uLL);
  *(int8x8_t *)((char *)a1 + 2 * a2) = vext_s8(v8, v5, 2uLL);
  *(int8x8_t *)((char *)a1 + 3 * a2) = vext_s8(v9, v5, 2uLL);
  *(int8x8_t *)((char *)a1 + 4 * a2) = vext_s8(v8, v5, 3uLL);
  *(int8x8_t *)((char *)a1 + 5 * a2) = vext_s8(v9, v5, 3uLL);
  *(int8x8_t *)((char *)a1 + 6 * a2) = vext_s8(v8, v5, 4uLL);
  result = vext_s8(v9, v5, 4uLL);
  *(int8x8_t *)((char *)&a1[a2] - a2) = result;
  return result;
}

int8x16_t vpx_d63_predictor_16x16_neon(int8x16_t *a1, uint64_t a2, uint64_t a3)
{
  uint8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t result;

  v3 = *(uint8x16_t *)(a3 + 1);
  v4 = *(int8x16_t *)(a3 + 2);
  v5 = vdupq_laneq_s8(v4, 13);
  v6 = (int8x16_t)vrhaddq_u8(*(uint8x16_t *)a3, v3);
  v7 = (int8x16_t)vrhaddq_u8(vhaddq_u8(*(uint8x16_t *)a3, (uint8x16_t)v4), v3);
  *a1 = v6;
  *(int8x16_t *)((char *)a1 + a2) = v7;
  v8 = vextq_s8(v6, v6, 0xFuLL);
  v9 = vextq_s8(v7, v7, 0xFuLL);
  *(int8x16_t *)((char *)a1 + 2 * a2) = vextq_s8(v8, v5, 2uLL);
  *(int8x16_t *)((char *)a1 + 3 * a2) = vextq_s8(v9, v5, 2uLL);
  *(int8x16_t *)((char *)a1 + 4 * a2) = vextq_s8(v8, v5, 3uLL);
  *(int8x16_t *)((char *)a1 + 5 * a2) = vextq_s8(v9, v5, 3uLL);
  *(int8x16_t *)((char *)a1 + 6 * a2) = vextq_s8(v8, v5, 4uLL);
  *(int8x16_t *)((char *)a1 + 7 * a2) = vextq_s8(v9, v5, 4uLL);
  *(int8x16_t *)((char *)a1 + 8 * a2) = vextq_s8(v8, v5, 5uLL);
  *(int8x16_t *)((char *)a1 + 9 * a2) = vextq_s8(v9, v5, 5uLL);
  *(int8x16_t *)((char *)a1 + 10 * a2) = vextq_s8(v8, v5, 6uLL);
  *(int8x16_t *)((char *)a1 + 11 * a2) = vextq_s8(v9, v5, 6uLL);
  *(int8x16_t *)((char *)a1 + 12 * a2) = vextq_s8(v8, v5, 7uLL);
  *(int8x16_t *)((char *)a1 + 13 * a2) = vextq_s8(v9, v5, 7uLL);
  *(int8x16_t *)((char *)a1 + 14 * a2) = vextq_s8(v8, v5, 8uLL);
  result = vextq_s8(v9, v5, 8uLL);
  *(int8x16_t *)((char *)&a1[a2] - a2) = result;
  return result;
}

int8x16_t vpx_d63_predictor_32x32_neon(int8x16_t *a1, uint64_t a2, uint64_t a3)
{
  uint8x16_t v3;
  uint8x16_t v4;
  uint8x16_t v5;
  int8x16_t v6;
  int8x16_t result;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16_t *v19;
  int8x16_t *v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t *v24;
  int8x16_t *v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  uint64_t v46;

  v3 = *(uint8x16_t *)(a3 + 16);
  v4 = *(uint8x16_t *)(a3 + 1);
  v5 = *(uint8x16_t *)(a3 + 17);
  v6 = *(int8x16_t *)(a3 + 18);
  result = vdupq_laneq_s8(v6, 13);
  v8 = (int8x16_t)vrhaddq_u8(*(uint8x16_t *)a3, v4);
  v9 = (int8x16_t)vrhaddq_u8(v3, v5);
  v10 = (int8x16_t)vrhaddq_u8(vhaddq_u8(*(uint8x16_t *)a3, *(uint8x16_t *)(a3 + 2)), v4);
  v11 = (int8x16_t)vrhaddq_u8(vhaddq_u8(v3, (uint8x16_t)v6), v5);
  *a1 = v8;
  a1[1] = v9;
  v12 = (int8x16_t *)((char *)a1 + a2);
  *v12 = v10;
  v12[1] = v11;
  v13 = vextq_s8(v8, v9, 0xFuLL);
  v14 = vextq_s8(v8, v8, 0xFuLL);
  v15 = vextq_s8(v10, v11, 0xFuLL);
  v16 = vextq_s8(v10, v10, 0xFuLL);
  v17 = (int8x16_t *)((char *)a1 + 2 * a2);
  *v17 = vextq_s8(v14, v13, 2uLL);
  v17[1] = vextq_s8(v13, result, 2uLL);
  v18 = (int8x16_t *)((char *)a1 + 2 * a2 + a2);
  *v18 = vextq_s8(v16, v15, 2uLL);
  v18[1] = vextq_s8(v15, result, 2uLL);
  v19 = (int8x16_t *)((char *)a1 + 4 * a2);
  *v19 = vextq_s8(v14, v13, 3uLL);
  v19[1] = vextq_s8(v13, result, 3uLL);
  v20 = (int8x16_t *)((char *)a1 + 4 * a2 + a2);
  *v20 = vextq_s8(v16, v15, 3uLL);
  v20[1] = vextq_s8(v15, result, 3uLL);
  v21 = (int8x16_t *)((char *)a1 + 6 * a2);
  *v21 = vextq_s8(v14, v13, 4uLL);
  v21[1] = vextq_s8(v13, result, 4uLL);
  v22 = (int8x16_t *)((char *)a1 + 7 * a2);
  *v22 = vextq_s8(v16, v15, 4uLL);
  v22[1] = vextq_s8(v15, result, 4uLL);
  v23 = (int8x16_t *)((char *)a1 + 8 * a2);
  *v23 = vextq_s8(v14, v13, 5uLL);
  v23[1] = vextq_s8(v13, result, 5uLL);
  v24 = (int8x16_t *)((char *)a1 + 8 * a2 + a2);
  *v24 = vextq_s8(v16, v15, 5uLL);
  v24[1] = vextq_s8(v15, result, 5uLL);
  v25 = (int8x16_t *)((char *)a1 + 10 * a2);
  *v25 = vextq_s8(v14, v13, 6uLL);
  v25[1] = vextq_s8(v13, result, 6uLL);
  v26 = (int8x16_t *)((char *)a1 + 11 * a2);
  *v26 = vextq_s8(v16, v15, 6uLL);
  v26[1] = vextq_s8(v15, result, 6uLL);
  v27 = (int8x16_t *)((char *)a1 + 12 * a2);
  *v27 = vextq_s8(v14, v13, 7uLL);
  v27[1] = vextq_s8(v13, result, 7uLL);
  v28 = (int8x16_t *)((char *)a1 + 13 * a2);
  *v28 = vextq_s8(v16, v15, 7uLL);
  v28[1] = vextq_s8(v15, result, 7uLL);
  v29 = (int8x16_t *)((char *)a1 + 14 * a2);
  *v29 = vextq_s8(v14, v13, 8uLL);
  v29[1] = vextq_s8(v13, result, 8uLL);
  v30 = (int8x16_t *)((char *)a1 + 15 * a2);
  *v30 = vextq_s8(v16, v15, 8uLL);
  v30[1] = vextq_s8(v15, result, 8uLL);
  v31 = &a1[a2];
  *v31 = vextq_s8(v14, v13, 9uLL);
  v31[1] = vextq_s8(v13, result, 9uLL);
  v32 = (int8x16_t *)((char *)&a1[a2] + a2);
  *v32 = vextq_s8(v16, v15, 9uLL);
  v32[1] = vextq_s8(v15, result, 9uLL);
  v33 = (int8x16_t *)((char *)a1 + 18 * a2);
  *v33 = vextq_s8(v14, v13, 0xAuLL);
  v33[1] = vextq_s8(v13, result, 0xAuLL);
  v34 = (int8x16_t *)((char *)a1 + 19 * a2);
  *v34 = vextq_s8(v16, v15, 0xAuLL);
  v34[1] = vextq_s8(v15, result, 0xAuLL);
  v35 = (int8x16_t *)((char *)a1 + 20 * a2);
  *v35 = vextq_s8(v14, v13, 0xBuLL);
  v35[1] = vextq_s8(v13, result, 0xBuLL);
  v36 = (int8x16_t *)((char *)a1 + 21 * a2);
  *v36 = vextq_s8(v16, v15, 0xBuLL);
  v36[1] = vextq_s8(v15, result, 0xBuLL);
  v37 = (int8x16_t *)((char *)a1 + 22 * a2);
  *v37 = vextq_s8(v14, v13, 0xCuLL);
  v37[1] = vextq_s8(v13, result, 0xCuLL);
  v38 = (int8x16_t *)((char *)a1 + 23 * a2);
  *v38 = vextq_s8(v16, v15, 0xCuLL);
  v38[1] = vextq_s8(v15, result, 0xCuLL);
  v39 = (int8x16_t *)((char *)a1 + 24 * a2);
  *v39 = vextq_s8(v14, v13, 0xDuLL);
  v39[1] = vextq_s8(v13, result, 0xDuLL);
  v40 = (int8x16_t *)((char *)a1 + 25 * a2);
  *v40 = vextq_s8(v16, v15, 0xDuLL);
  v40[1] = vextq_s8(v15, result, 0xDuLL);
  v41 = (int8x16_t *)((char *)a1 + 26 * a2);
  *v41 = vextq_s8(v14, v13, 0xEuLL);
  v41[1] = vextq_s8(v13, result, 0xEuLL);
  v42 = (int8x16_t *)((char *)a1 + 27 * a2);
  *v42 = vextq_s8(v16, v15, 0xEuLL);
  v42[1] = vextq_s8(v15, result, 0xEuLL);
  v43 = (int8x16_t *)((char *)a1 + 28 * a2);
  *v43 = vextq_s8(v14, v13, 0xFuLL);
  v43[1] = vextq_s8(v13, result, 0xFuLL);
  v44 = (int8x16_t *)((char *)a1 + 29 * a2);
  *v44 = vextq_s8(v16, v15, 0xFuLL);
  v44[1] = vextq_s8(v15, result, 0xFuLL);
  v45 = (int8x16_t *)((char *)a1 + 30 * a2);
  *v45 = v13;
  v45[1] = result;
  v46 = (uint64_t)a1[2 * a2].i64 - a2;
  *(int8x16_t *)v46 = v15;
  *(int8x16_t *)(v46 + 16) = result;
  return result;
}

int8x8_t vpx_d117_predictor_4x4_neon(_DWORD *a1, uint64_t a2, __int32 *a3, unsigned __int8 *a4, double a5, uint8x8_t a6)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  int8x8_t v9;
  int8x8_t v10;
  int8x8_t result;
  unsigned __int32 v12;

  v6 = *(__int32 *)((char *)a3 - 1);
  a6.i32[0] = *a3;
  v7 = *a4;
  v8 = a4[1];
  v9 = vdup_n_s8((2 * v7 + v6 + v8 + 2) >> 2);
  v10 = (int8x8_t)vrhadd_u8((uint8x8_t)v6, a6);
  result = (int8x8_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(vdup_n_s8(v7), (int8x8_t)v6, 7uLL), a6), (uint8x8_t)v6);
  v12 = vext_s8(vdup_n_s8((v7 + 2 * v8 + a4[2] + 2) >> 2), result, 7uLL).u32[0];
  *a1 = v10.i32[0];
  *(_DWORD *)((char *)a1 + a2) = result.i32[0];
  *(_DWORD *)((char *)a1 + 2 * a2) = vext_s8(v9, v10, 7uLL).u32[0];
  *(_DWORD *)((char *)a1 + 3 * a2) = v12;
  return result;
}

int8x8_t vpx_d117_predictor_8x8_neon(int8x8_t *a1, uint64_t a2, uint8x8_t *a3, int8x8_t *a4)
{
  int8x8_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  int8x8_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t v10;
  int8x8_t v11;
  int8x8_t result;

  v4 = *(int8x8_t *)((char *)&a3[-1] + 7);
  v5 = vld1_dup_s8((const char *)a4);
  v6 = (uint8x8_t)vext_s8(vdup_lane_s8(v4, 0), *a4, 7uLL);
  v7 = (int8x8_t)vrhadd_u8((uint8x8_t)v4, *a3);
  v8 = (int8x8_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v5, v4, 7uLL), *a3), (uint8x8_t)v4);
  v9 = vrev64_s8((int8x8_t)vrhadd_u8(vhadd_u8(v6, (uint8x8_t)vext_s8(*a4, *a4, 1uLL)), (uint8x8_t)*a4));
  v10 = vuzp1_s8(v9, v9);
  *a1 = v7;
  *(int8x8_t *)((char *)a1 + a2) = v8;
  *(int8x8_t *)((char *)a1 + 2 * a2) = vext_s8(v9, v7, 7uLL);
  *(int8x8_t *)((char *)a1 + 3 * a2) = vext_s8(v10, v8, 7uLL);
  v11 = vuzp2_s8(v9, v9);
  *(int8x8_t *)((char *)a1 + 4 * a2) = vext_s8(v11, v7, 6uLL);
  *(int8x8_t *)((char *)a1 + 5 * a2) = vext_s8(v10, v8, 6uLL);
  *(int8x8_t *)((char *)a1 + 6 * a2) = vext_s8(v11, v7, 5uLL);
  result = vext_s8(v10, v8, 5uLL);
  *(int8x8_t *)((char *)&a1[a2] - a2) = result;
  return result;
}

int8x16_t vpx_d117_predictor_16x16_neon(int8x16_t *a1, uint64_t a2, uint8x16_t *a3, int8x16_t *a4)
{
  int8x16_t v4;
  int8x16_t v5;
  uint8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t result;

  v4 = *(int8x16_t *)((char *)&a3[-1] + 15);
  v5 = vld1q_dup_s8(a4->i8);
  v6 = (uint8x16_t)vextq_s8(vdupq_lane_s8(*(int8x8_t *)v4.i8, 0), *a4, 0xFuLL);
  v7 = (int8x16_t)vrhaddq_u8((uint8x16_t)v4, *a3);
  v8 = (int8x16_t)vrhaddq_u8(vhaddq_u8((uint8x16_t)vextq_s8(v5, v4, 0xFuLL), *a3), (uint8x16_t)v4);
  v9 = (int8x16_t)vrhaddq_u8(vhaddq_u8(v6, (uint8x16_t)vextq_s8(*a4, *a4, 1uLL)), *(uint8x16_t *)a4);
  v10 = vrev64q_s8(vextq_s8(v9, v9, 8uLL));
  v11 = vuzp1q_s8(v10, v10);
  v12 = vuzp2q_s8(v10, v10);
  *a1 = v7;
  *(int8x16_t *)((char *)a1 + a2) = v8;
  *(int8x16_t *)((char *)a1 + 2 * a2) = vextq_s8(v10, v7, 0xFuLL);
  *(int8x16_t *)((char *)a1 + 3 * a2) = vextq_s8(v11, v8, 0xFuLL);
  *(int8x16_t *)((char *)a1 + 4 * a2) = vextq_s8(v12, v7, 0xEuLL);
  *(int8x16_t *)((char *)a1 + 5 * a2) = vextq_s8(v11, v8, 0xEuLL);
  *(int8x16_t *)((char *)a1 + 6 * a2) = vextq_s8(v12, v7, 0xDuLL);
  *(int8x16_t *)((char *)a1 + 7 * a2) = vextq_s8(v11, v8, 0xDuLL);
  *(int8x16_t *)((char *)a1 + 8 * a2) = vextq_s8(v12, v7, 0xCuLL);
  *(int8x16_t *)((char *)a1 + 9 * a2) = vextq_s8(v11, v8, 0xCuLL);
  *(int8x16_t *)((char *)a1 + 10 * a2) = vextq_s8(v12, v7, 0xBuLL);
  *(int8x16_t *)((char *)a1 + 11 * a2) = vextq_s8(v11, v8, 0xBuLL);
  *(int8x16_t *)((char *)a1 + 12 * a2) = vextq_s8(v12, v7, 0xAuLL);
  *(int8x16_t *)((char *)a1 + 13 * a2) = vextq_s8(v11, v8, 0xAuLL);
  *(int8x16_t *)((char *)a1 + 14 * a2) = vextq_s8(v12, v7, 9uLL);
  result = vextq_s8(v11, v8, 9uLL);
  *(int8x16_t *)((char *)&a1[a2] - a2) = result;
  return result;
}

int8x16_t vpx_d117_predictor_32x32_neon(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int8x16_t v4;
  uint8x16_t v5;
  uint8x16_t v6;
  uint8x16_t *v7;
  int8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t *v24;
  int8x16_t *v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t *v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t *v48;
  int8x16_t *v49;
  int8x16_t *v50;
  int8x16_t v51;
  uint64_t v52;
  int8x16_t result;

  v4 = *(int8x16_t *)(a3 - 1);
  v5 = *(uint8x16_t *)(a3 + 16);
  v6 = *(uint8x16_t *)(a3 + 15);
  v7 = (uint8x16_t *)a4;
  v8 = vld1q_dup_s8(v7->i8);
  v7 = (uint8x16_t *)((char *)v7 + 1);
  v9 = (uint8x16_t)vextq_s8(v8, v4, 0xFuLL);
  v10 = (uint8x16_t)vextq_s8(vdupq_lane_s8(*(int8x8_t *)v4.i8, 0), *(int8x16_t *)a4, 0xFuLL);
  v11 = (int8x16_t)vrhaddq_u8((uint8x16_t)v4, *(uint8x16_t *)a3);
  v12 = (int8x16_t)vrhaddq_u8(v6, v5);
  v13 = (int8x16_t)vrhaddq_u8(vhaddq_u8(v9, *(uint8x16_t *)a3), (uint8x16_t)v4);
  v14 = (int8x16_t)vrhaddq_u8(vhaddq_u8(*(uint8x16_t *)(a3 + 14), v5), v6);
  v15 = (int8x16_t)vrhaddq_u8(vhaddq_u8(v10, *v7), *(uint8x16_t *)a4);
  v16 = (int8x16_t)vrhaddq_u8(vhaddq_u8(*(uint8x16_t *)(a4 + 15), (uint8x16_t)vextq_s8(*(int8x16_t *)(a4 + 16), *(int8x16_t *)(a4 + 16), 1uLL)), *(uint8x16_t *)(a4 + 16));
  v17 = vrev64q_s8(vextq_s8(v15, v15, 8uLL));
  v18 = vrev64q_s8(vextq_s8(v16, v16, 8uLL));
  *a1 = v11;
  a1[1] = v12;
  v19 = vuzp1q_s8(v18, v17);
  v20 = vuzp2q_s8(v18, v17);
  v21 = (int8x16_t *)((char *)a1 + a2);
  *v21 = v13;
  v21[1] = v14;
  v22 = (int8x16_t *)((char *)a1 + 2 * a2);
  *v22 = vextq_s8(v20, v11, 0xFuLL);
  v22[1] = vextq_s8(v11, v12, 0xFuLL);
  v23 = (int8x16_t *)((char *)a1 + 2 * a2 + a2);
  *v23 = vextq_s8(v19, v13, 0xFuLL);
  v23[1] = vextq_s8(v13, v14, 0xFuLL);
  v24 = (int8x16_t *)((char *)a1 + 4 * a2);
  *v24 = vextq_s8(v20, v11, 0xEuLL);
  v24[1] = vextq_s8(v11, v12, 0xEuLL);
  v25 = (int8x16_t *)((char *)a1 + 4 * a2 + a2);
  *v25 = vextq_s8(v19, v13, 0xEuLL);
  v25[1] = vextq_s8(v13, v14, 0xEuLL);
  v26 = (int8x16_t *)((char *)a1 + 6 * a2);
  *v26 = vextq_s8(v20, v11, 0xDuLL);
  v26[1] = vextq_s8(v11, v12, 0xDuLL);
  v27 = (int8x16_t *)((char *)a1 + 7 * a2);
  *v27 = vextq_s8(v19, v13, 0xDuLL);
  v27[1] = vextq_s8(v13, v14, 0xDuLL);
  v28 = (int8x16_t *)((char *)a1 + 8 * a2);
  *v28 = vextq_s8(v20, v11, 0xCuLL);
  v28[1] = vextq_s8(v11, v12, 0xCuLL);
  v29 = (int8x16_t *)((char *)a1 + 8 * a2 + a2);
  *v29 = vextq_s8(v19, v13, 0xCuLL);
  v29[1] = vextq_s8(v13, v14, 0xCuLL);
  v30 = (int8x16_t *)((char *)a1 + 10 * a2);
  *v30 = vextq_s8(v20, v11, 0xBuLL);
  v30[1] = vextq_s8(v11, v12, 0xBuLL);
  v31 = (int8x16_t *)((char *)a1 + 11 * a2);
  *v31 = vextq_s8(v19, v13, 0xBuLL);
  v31[1] = vextq_s8(v13, v14, 0xBuLL);
  v32 = (int8x16_t *)((char *)a1 + 12 * a2);
  *v32 = vextq_s8(v20, v11, 0xAuLL);
  v32[1] = vextq_s8(v11, v12, 0xAuLL);
  v33 = (int8x16_t *)((char *)a1 + 13 * a2);
  *v33 = vextq_s8(v19, v13, 0xAuLL);
  v33[1] = vextq_s8(v13, v14, 0xAuLL);
  v34 = (int8x16_t *)((char *)a1 + 14 * a2);
  *v34 = vextq_s8(v20, v11, 9uLL);
  v34[1] = vextq_s8(v11, v12, 9uLL);
  v35 = (int8x16_t *)((char *)a1 + 15 * a2);
  *v35 = vextq_s8(v19, v13, 9uLL);
  v35[1] = vextq_s8(v13, v14, 9uLL);
  v36 = &a1[a2];
  *v36 = vextq_s8(v20, v11, 8uLL);
  v36[1] = vextq_s8(v11, v12, 8uLL);
  v37 = (int8x16_t *)((char *)&a1[a2] + a2);
  *v37 = vextq_s8(v19, v13, 8uLL);
  v37[1] = vextq_s8(v13, v14, 8uLL);
  v38 = (int8x16_t *)((char *)a1 + 18 * a2);
  *v38 = vextq_s8(v20, v11, 7uLL);
  v38[1] = vextq_s8(v11, v12, 7uLL);
  v39 = (int8x16_t *)((char *)a1 + 19 * a2);
  *v39 = vextq_s8(v19, v13, 7uLL);
  v39[1] = vextq_s8(v13, v14, 7uLL);
  v40 = (int8x16_t *)((char *)a1 + 20 * a2);
  *v40 = vextq_s8(v20, v11, 6uLL);
  v40[1] = vextq_s8(v11, v12, 6uLL);
  v41 = (int8x16_t *)((char *)a1 + 21 * a2);
  *v41 = vextq_s8(v19, v13, 6uLL);
  v41[1] = vextq_s8(v13, v14, 6uLL);
  v42 = (int8x16_t *)((char *)a1 + 22 * a2);
  *v42 = vextq_s8(v20, v11, 5uLL);
  v42[1] = vextq_s8(v11, v12, 5uLL);
  v43 = (int8x16_t *)((char *)a1 + 23 * a2);
  *v43 = vextq_s8(v19, v13, 5uLL);
  v43[1] = vextq_s8(v13, v14, 5uLL);
  v44 = (int8x16_t *)((char *)a1 + 24 * a2);
  *v44 = vextq_s8(v20, v11, 4uLL);
  v44[1] = vextq_s8(v11, v12, 4uLL);
  v45 = (int8x16_t *)((char *)a1 + 25 * a2);
  *v45 = vextq_s8(v19, v13, 4uLL);
  v45[1] = vextq_s8(v13, v14, 4uLL);
  v46 = (int8x16_t *)((char *)a1 + 26 * a2);
  *v46 = vextq_s8(v20, v11, 3uLL);
  v46[1] = vextq_s8(v11, v12, 3uLL);
  v47 = (int8x16_t *)((char *)a1 + 27 * a2);
  *v47 = vextq_s8(v19, v13, 3uLL);
  v47[1] = vextq_s8(v13, v14, 3uLL);
  v48 = (int8x16_t *)((char *)a1 + 28 * a2);
  *v48 = vextq_s8(v20, v11, 2uLL);
  v48[1] = vextq_s8(v11, v12, 2uLL);
  v49 = (int8x16_t *)((char *)a1 + 29 * a2);
  *v49 = vextq_s8(v19, v13, 2uLL);
  v49[1] = vextq_s8(v13, v14, 2uLL);
  v50 = (int8x16_t *)((char *)a1 + 30 * a2);
  *v50 = vextq_s8(v20, v11, 1uLL);
  v50[1] = vextq_s8(v11, v12, 1uLL);
  v51 = vextq_s8(v19, v13, 1uLL);
  v52 = (uint64_t)a1[2 * a2].i64 - a2;
  result = vextq_s8(v13, v14, 1uLL);
  *(int8x16_t *)v52 = v51;
  *(int8x16_t *)(v52 + 16) = result;
  return result;
}

int8x8_t vpx_d135_predictor_4x4_neon(_DWORD *a1, uint64_t a2, uint64_t a3, int8x8_t *a4)
{
  int8x8_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  int8x8_t v7;
  int8x8_t result;

  v4 = *(int8x8_t *)(a3 - 1);
  v5 = vrev64_s8(*a4);
  v6 = (uint8x8_t)vext_s8(v5, v4, 4uLL);
  v7 = vext_s8(v5, v4, 5uLL);
  result = (int8x8_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v7, v7, 1uLL), v6), (uint8x8_t)v7);
  *a1 = vext_s8(result, result, 3uLL).u32[0];
  *(_DWORD *)((char *)a1 + a2) = vext_s8(result, result, 2uLL).u32[0];
  *(_DWORD *)((char *)a1 + 2 * a2) = vext_s8(result, result, 1uLL).u32[0];
  *(_DWORD *)((char *)a1 + 3 * a2) = result.i32[0];
  return result;
}

int8x16_t vpx_d135_predictor_8x8_neon(_QWORD *a1, uint64_t a2, uint64_t *a3, int8x8_t *a4)
{
  int8x8_t v4;
  uint8x16_t v5;
  uint8x16_t v6;
  uint8x16_t v7;
  int8x16_t result;

  v4 = *(int8x8_t *)((char *)a3 - 1);
  *(int8x8_t *)v5.i8 = vrev64_s8(*a4);
  *(int8x8_t *)v6.i8 = vext_s8(*(int8x8_t *)v5.i8, v4, 1uLL);
  *(int8x8_t *)v7.i8 = vext_s8(*(int8x8_t *)v5.i8, v4, 2uLL);
  v5.u64[1] = (unint64_t)v4;
  v6.i64[1] = *a3;
  v7.i64[1] = *(uint64_t *)((char *)a3 + 1);
  result = (int8x16_t)vrhaddq_u8(vhaddq_u8(v5, v7), v6);
  *a1 = vextq_s8(result, result, 7uLL).u64[0];
  *(_QWORD *)((char *)a1 + a2) = vextq_s8(result, result, 6uLL).u64[0];
  *(_QWORD *)((char *)a1 + 2 * a2) = vextq_s8(result, result, 5uLL).u64[0];
  *(_QWORD *)((char *)a1 + 3 * a2) = vextq_s8(result, result, 4uLL).u64[0];
  *(_QWORD *)((char *)a1 + 4 * a2) = vextq_s8(result, result, 3uLL).u64[0];
  *(_QWORD *)((char *)a1 + 5 * a2) = vextq_s8(result, result, 2uLL).u64[0];
  *(_QWORD *)((char *)a1 + 6 * a2) = vextq_s8(result, result, 1uLL).u64[0];
  *(_QWORD *)((char *)&a1[a2] - a2) = result.i64[0];
  return result;
}

int8x16_t vpx_d135_predictor_16x16_neon(int8x16_t *a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  int8x16_t v4;
  uint8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t result;
  int8x16_t *v23;
  int8x16_t *v24;
  int8x16_t *v25;
  int8x16_t *v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;

  v4 = *(int8x16_t *)(a3 - 1);
  *(int8x8_t *)v5.i8 = vrev64_s8((int8x8_t)*(_OWORD *)&vextq_s8(*a4, *a4, 8uLL));
  v5.u64[1] = (unint64_t)vrev64_s8(*(int8x8_t *)a4->i8);
  v6 = (int8x16_t)vrhaddq_u8(vhaddq_u8(v5, (uint8x16_t)vextq_s8((int8x16_t)v5, v4, 2uLL)), (uint8x16_t)vextq_s8((int8x16_t)v5, v4, 1uLL));
  v7 = (int8x16_t)vrhaddq_u8(vhaddq_u8((uint8x16_t)v4, *(uint8x16_t *)(a3 + 1)), *(uint8x16_t *)a3);
  v8 = vextq_s8(v6, v7, 0xFuLL);
  v9 = vextq_s8(v6, v7, 0xEuLL);
  v10 = vextq_s8(v6, v7, 0xDuLL);
  v11 = vextq_s8(v6, v7, 0xCuLL);
  v12 = vextq_s8(v6, v7, 0xBuLL);
  v13 = vextq_s8(v6, v7, 0xAuLL);
  v14 = vextq_s8(v6, v7, 9uLL);
  v15 = vextq_s8(v6, v7, 8uLL);
  v16 = vextq_s8(v6, v7, 7uLL);
  v17 = vextq_s8(v6, v7, 6uLL);
  v18 = vextq_s8(v6, v7, 5uLL);
  v19 = vextq_s8(v6, v7, 4uLL);
  v20 = vextq_s8(v6, v7, 3uLL);
  v21 = vextq_s8(v6, v7, 2uLL);
  result = vextq_s8(v6, v7, 1uLL);
  *a1 = v8;
  *(int8x16_t *)((char *)a1 + a2) = v9;
  v23 = (int8x16_t *)((char *)a1 + a2 + a2);
  *v23 = v10;
  v24 = (int8x16_t *)((char *)v23 + a2);
  *v24 = v11;
  v25 = (int8x16_t *)((char *)v24 + a2);
  *v25 = v12;
  v26 = (int8x16_t *)((char *)v25 + a2);
  *v26 = v13;
  v27 = (int8x16_t *)((char *)v26 + a2);
  *v27 = v14;
  v28 = (int8x16_t *)((char *)v27 + a2);
  *v28 = v15;
  v29 = (int8x16_t *)((char *)v28 + a2);
  *v29 = v16;
  v30 = (int8x16_t *)((char *)v29 + a2);
  *v30 = v17;
  v31 = (int8x16_t *)((char *)v30 + a2);
  *v31 = v18;
  v32 = (int8x16_t *)((char *)v31 + a2);
  *v32 = v19;
  v33 = (int8x16_t *)((char *)v32 + a2);
  *v33 = v20;
  v34 = (int8x16_t *)((char *)v33 + a2);
  *v34 = v21;
  v35 = (int8x16_t *)((char *)v34 + a2);
  *v35 = result;
  *(int8x16_t *)((char *)v35 + a2) = v6;
  return result;
}

int8x16_t vpx_d135_predictor_32x32_neon(int8x16_t *a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  int8x16_t v4;
  uint8x16_t v5;
  uint8x16_t v6;
  int8x16_t v7;
  int8x16_t result;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t *v17;
  int8x16_t v18;
  int8x16_t *v19;
  int8x16_t *v20;
  int8x16_t v21;
  int8x16_t *v22;
  int8x16_t *v23;
  int8x16_t v24;
  int8x16_t *v25;
  int8x16_t *v26;
  int8x16_t v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t v45;
  int8x16_t *v46;
  int8x16_t *v47;
  int8x16_t v48;
  int8x16_t *v49;
  int8x16_t *v50;
  int8x16_t v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t v54;
  int8x16_t *v55;
  int8x16_t *v56;
  int8x16_t *v57;

  v4 = a4[1];
  *(int8x8_t *)v5.i8 = vrev64_s8((int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
  v5.u64[1] = (unint64_t)vrev64_s8(*(int8x8_t *)v4.i8);
  *(int8x8_t *)v6.i8 = vrev64_s8((int8x8_t)*(_OWORD *)&vextq_s8(*a4, *a4, 8uLL));
  v6.u64[1] = (unint64_t)vrev64_s8(*(int8x8_t *)a4->i8);
  v7 = *(int8x16_t *)(a3 - 1);
  result = (int8x16_t)vrhaddq_u8(vhaddq_u8(v6, (uint8x16_t)vextq_s8((int8x16_t)v6, v7, 2uLL)), (uint8x16_t)vextq_s8((int8x16_t)v6, v7, 1uLL));
  v9 = (int8x16_t)vrhaddq_u8(vhaddq_u8((uint8x16_t)v7, *(uint8x16_t *)(a3 + 1)), *(uint8x16_t *)a3);
  v10 = (int8x16_t)vrhaddq_u8(vhaddq_u8(*(uint8x16_t *)(a3 + 15), *(uint8x16_t *)(a3 + 17)), *(uint8x16_t *)(a3 + 16));
  v11 = vextq_s8(result, v9, 0xFuLL);
  *a1 = v11;
  a1[1] = vextq_s8(v9, v10, 0xFuLL);
  v12 = (int8x16_t)vrhaddq_u8(vhaddq_u8(v5, (uint8x16_t)vextq_s8((int8x16_t)v5, (int8x16_t)v6, 2uLL)), (uint8x16_t)vextq_s8((int8x16_t)v5, (int8x16_t)v6, 1uLL));
  v13 = &a1[a2];
  *v13 = vextq_s8(v12, result, 0xFuLL);
  v13[1] = v11;
  v14 = (int8x16_t *)((char *)a1 + a2);
  v15 = vextq_s8(result, v9, 0xEuLL);
  *v14 = v15;
  v14[1] = vextq_s8(v9, v10, 0xEuLL);
  v16 = (uint64_t)a1[a2].i64 + a2;
  *(int8x16_t *)v16 = vextq_s8(v12, result, 0xEuLL);
  *(int8x16_t *)(v16 + 16) = v15;
  v17 = (int8x16_t *)((char *)a1 + a2 + a2);
  v18 = vextq_s8(result, v9, 0xDuLL);
  *v17 = v18;
  v17[1] = vextq_s8(v9, v10, 0xDuLL);
  v19 = &v17[a2];
  *v19 = vextq_s8(v12, result, 0xDuLL);
  v19[1] = v18;
  v20 = (int8x16_t *)((char *)v17 + a2);
  v21 = vextq_s8(result, v9, 0xCuLL);
  *v20 = v21;
  v20[1] = vextq_s8(v9, v10, 0xCuLL);
  v22 = &v20[a2];
  *v22 = vextq_s8(v12, result, 0xCuLL);
  v22[1] = v21;
  v23 = (int8x16_t *)((char *)v20 + a2);
  v24 = vextq_s8(result, v9, 0xBuLL);
  *v23 = v24;
  v23[1] = vextq_s8(v9, v10, 0xBuLL);
  v25 = &v23[a2];
  *v25 = vextq_s8(v12, result, 0xBuLL);
  v25[1] = v24;
  v26 = (int8x16_t *)((char *)v23 + a2);
  v27 = vextq_s8(result, v9, 0xAuLL);
  *v26 = v27;
  v26[1] = vextq_s8(v9, v10, 0xAuLL);
  v28 = &v26[a2];
  *v28 = vextq_s8(v12, result, 0xAuLL);
  v28[1] = v27;
  v29 = (int8x16_t *)((char *)v26 + a2);
  v30 = vextq_s8(result, v9, 9uLL);
  *v29 = v30;
  v29[1] = vextq_s8(v9, v10, 9uLL);
  v31 = &v29[a2];
  *v31 = vextq_s8(v12, result, 9uLL);
  v31[1] = v30;
  v32 = (int8x16_t *)((char *)v29 + a2);
  v33 = vextq_s8(result, v9, 8uLL);
  *v32 = v33;
  v32[1] = vextq_s8(v9, v10, 8uLL);
  v34 = &v32[a2];
  *v34 = vextq_s8(v12, result, 8uLL);
  v34[1] = v33;
  v35 = (int8x16_t *)((char *)v32 + a2);
  v36 = vextq_s8(result, v9, 7uLL);
  *v35 = v36;
  v35[1] = vextq_s8(v9, v10, 7uLL);
  v37 = &v35[a2];
  *v37 = vextq_s8(v12, result, 7uLL);
  v37[1] = v36;
  v38 = (int8x16_t *)((char *)v35 + a2);
  v39 = vextq_s8(result, v9, 6uLL);
  *v38 = v39;
  v38[1] = vextq_s8(v9, v10, 6uLL);
  v40 = &v38[a2];
  *v40 = vextq_s8(v12, result, 6uLL);
  v40[1] = v39;
  v41 = (int8x16_t *)((char *)v38 + a2);
  v42 = vextq_s8(result, v9, 5uLL);
  *v41 = v42;
  v41[1] = vextq_s8(v9, v10, 5uLL);
  v43 = &v41[a2];
  *v43 = vextq_s8(v12, result, 5uLL);
  v43[1] = v42;
  v44 = (int8x16_t *)((char *)v41 + a2);
  v45 = vextq_s8(result, v9, 4uLL);
  *v44 = v45;
  v44[1] = vextq_s8(v9, v10, 4uLL);
  v46 = &v44[a2];
  *v46 = vextq_s8(v12, result, 4uLL);
  v46[1] = v45;
  v47 = (int8x16_t *)((char *)v44 + a2);
  v48 = vextq_s8(result, v9, 3uLL);
  *v47 = v48;
  v47[1] = vextq_s8(v9, v10, 3uLL);
  v49 = &v47[a2];
  *v49 = vextq_s8(v12, result, 3uLL);
  v49[1] = v48;
  v50 = (int8x16_t *)((char *)v47 + a2);
  v51 = vextq_s8(result, v9, 2uLL);
  *v50 = v51;
  v50[1] = vextq_s8(v9, v10, 2uLL);
  v52 = &v50[a2];
  *v52 = vextq_s8(v12, result, 2uLL);
  v52[1] = v51;
  v53 = (int8x16_t *)((char *)v50 + a2);
  v54 = vextq_s8(result, v9, 1uLL);
  *v53 = v54;
  v53[1] = vextq_s8(v9, v10, 1uLL);
  v55 = &v53[a2];
  *v55 = vextq_s8(v12, result, 1uLL);
  v55[1] = v54;
  v56 = (int8x16_t *)((char *)v53 + a2);
  *v56 = result;
  v56[1] = v9;
  v57 = &v56[a2];
  *v57 = v12;
  v57[1] = result;
  return result;
}

int8x8_t vpx_d153_predictor_4x4_neon(_DWORD *a1, uint64_t a2, __int32 *a3, const char *a4, double a5, uint8x8_t a6, double a7, int8x8_t a8, uint8x8_t a9)
{
  unsigned int v9;
  const char *v10;
  int8x8_t v11;
  uint8x8_t v12;
  int8x8_t v13;
  int8x8_t v14;
  int8x8_t v15;
  int8x8_t v16;
  int8x8_t result;

  v9 = *(__int32 *)((char *)a3 - 1);
  a6.i32[0] = *a3;
  v10 = a4;
  v11 = vld1_dup_s8(v10++);
  a8.i32[0] = *(_DWORD *)a4;
  a9.i32[0] = *(_DWORD *)v10;
  v12 = (uint8x8_t)vext_s8(vdup_n_s8(v9), a8, 7uLL);
  v13 = (int8x8_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v11, (int8x8_t)v9, 7uLL), a6), (uint8x8_t)v9);
  v14 = vrev64_s8(vzip1_s8((int8x8_t)vrhadd_u8(v12, (uint8x8_t)a8), (int8x8_t)vrhadd_u8(vhadd_u8(v12, a9), (uint8x8_t)a8)));
  *a1 = vext_s8(v14, v13, 7uLL).u32[0];
  v15 = vext_s8(v14, v13, 5uLL);
  *(_DWORD *)((char *)a1 + a2) = v15.i32[0];
  v16 = vext_s8(v14, v15, 3uLL);
  *(_DWORD *)((char *)a1 + 2 * a2) = v16.i32[0];
  result = vext_s8(v14, v16, 1uLL);
  *(_DWORD *)((char *)a1 + 3 * a2) = result.i32[0];
  return result;
}

int8x8_t vpx_d153_predictor_8x8_neon(int8x8_t *a1, uint64_t a2, uint8x8_t *a3, int8x8_t *a4)
{
  int8x8_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  int8x8_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t v10;
  int8x8_t v11;
  int8x8_t result;

  v4 = *(int8x8_t *)((char *)&a3[-1] + 7);
  v5 = vld1_dup_s8((const char *)a4);
  v6 = (uint8x8_t)vext_s8(vdup_lane_s8(v4, 0), *a4, 7uLL);
  v7 = (int8x8_t)vrhadd_u8(vhadd_u8((uint8x8_t)vext_s8(v5, v4, 7uLL), *a3), (uint8x8_t)v4);
  v8 = vrev64_s8((int8x8_t)vrhadd_u8(vhadd_u8(v6, (uint8x8_t)vext_s8(*a4, *a4, 1uLL)), (uint8x8_t)*a4));
  v9 = vrev64_s8((int8x8_t)vrhadd_u8(v6, (uint8x8_t)*a4));
  v10 = vzip2_s8(v8, v9);
  *a1 = vext_s8(v10, v7, 7uLL);
  *(int8x8_t *)((char *)a1 + a2) = vext_s8(v10, v7, 5uLL);
  *(int8x8_t *)((char *)a1 + 2 * a2) = vext_s8(v10, v7, 3uLL);
  *(int8x8_t *)((char *)a1 + 3 * a2) = vext_s8(v10, v7, 1uLL);
  v11 = vzip1_s8(v8, v9);
  *(int8x8_t *)((char *)a1 + 4 * a2) = vext_s8(v11, v10, 7uLL);
  *(int8x8_t *)((char *)a1 + 5 * a2) = vext_s8(v11, v10, 5uLL);
  *(int8x8_t *)((char *)a1 + 6 * a2) = vext_s8(v11, v10, 3uLL);
  result = vext_s8(v11, v10, 1uLL);
  *(int8x8_t *)((char *)&a1[a2] - a2) = result;
  return result;
}

int8x16_t vpx_d153_predictor_16x16_neon(int8x16_t *a1, uint64_t a2, uint8x16_t *a3, int8x16_t *a4)
{
  int8x16_t v4;
  int8x16_t v5;
  uint8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t result;

  v4 = *(int8x16_t *)((char *)&a3[-1] + 15);
  v5 = vld1q_dup_s8(a4->i8);
  v6 = (uint8x16_t)vextq_s8(vdupq_lane_s8(*(int8x8_t *)v4.i8, 0), *a4, 0xFuLL);
  v7 = (int8x16_t)vrhaddq_u8(v6, *(uint8x16_t *)a4);
  v8 = (int8x16_t)vrhaddq_u8(vhaddq_u8((uint8x16_t)vextq_s8(v5, v4, 0xFuLL), *a3), (uint8x16_t)v4);
  v9 = (int8x16_t)vrhaddq_u8(vhaddq_u8(v6, (uint8x16_t)vextq_s8(*a4, *a4, 1uLL)), *(uint8x16_t *)a4);
  v10 = vrev64q_s8(vextq_s8(v7, v7, 8uLL));
  v11 = vrev64q_s8(vextq_s8(v9, v9, 8uLL));
  v12 = vzip2q_s8(v11, v10);
  *a1 = vextq_s8(v12, v8, 0xFuLL);
  *(int8x16_t *)((char *)a1 + a2) = vextq_s8(v12, v8, 0xDuLL);
  *(int8x16_t *)((char *)a1 + 2 * a2) = vextq_s8(v12, v8, 0xBuLL);
  *(int8x16_t *)((char *)a1 + 3 * a2) = vextq_s8(v12, v8, 9uLL);
  *(int8x16_t *)((char *)a1 + 4 * a2) = vextq_s8(v12, v8, 7uLL);
  *(int8x16_t *)((char *)a1 + 5 * a2) = vextq_s8(v12, v8, 5uLL);
  v13 = vzip1q_s8(v11, v10);
  *(int8x16_t *)((char *)a1 + 6 * a2) = vextq_s8(v12, v8, 3uLL);
  *(int8x16_t *)((char *)a1 + 7 * a2) = vextq_s8(v12, v8, 1uLL);
  *(int8x16_t *)((char *)a1 + 8 * a2) = vextq_s8(v13, v12, 0xFuLL);
  *(int8x16_t *)((char *)a1 + 9 * a2) = vextq_s8(v13, v12, 0xDuLL);
  *(int8x16_t *)((char *)a1 + 10 * a2) = vextq_s8(v13, v12, 0xBuLL);
  *(int8x16_t *)((char *)a1 + 11 * a2) = vextq_s8(v13, v12, 9uLL);
  *(int8x16_t *)((char *)a1 + 12 * a2) = vextq_s8(v13, v12, 7uLL);
  *(int8x16_t *)((char *)a1 + 13 * a2) = vextq_s8(v13, v12, 5uLL);
  *(int8x16_t *)((char *)a1 + 14 * a2) = vextq_s8(v13, v12, 3uLL);
  result = vextq_s8(v13, v12, 1uLL);
  *(int8x16_t *)((char *)&a1[a2] - a2) = result;
  return result;
}

int8x16_t vpx_d153_predictor_32x32_neon(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int8x16_t v4;
  uint8x16_t *v5;
  int8x16_t v6;
  uint8x16_t v7;
  int8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  int8x16_t v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t *v30;
  int8x16_t v31;
  int8x16_t *v32;
  uint8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t *v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t *v41;
  int8x16_t v42;
  int8x16_t *v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t *v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t *v52;
  int8x16_t v53;
  int8x16_t *v54;
  int8x16_t v55;
  int8x16_t *v56;
  int8x16_t v57;
  int8x16_t *v58;
  int8x16_t v59;
  int8x16_t *v60;
  int8x16_t v61;
  int8x16_t *v62;
  int8x16_t v63;
  int8x16_t *v64;
  int8x16_t v65;
  int8x16_t *v66;
  int8x16_t v67;
  int8x16_t *v68;
  int8x16_t v69;
  int8x16_t *v70;
  int8x16_t v71;
  int8x16_t *v72;
  int8x16_t *v73;
  int8x16_t *v74;
  int8x16_t *v75;
  int8x16_t *v76;
  int8x16_t *v77;
  int8x16_t *v78;
  int8x16_t *v79;
  int8x16_t result;
  uint64_t v81;

  v4 = *(int8x16_t *)(a3 - 1);
  v5 = (uint8x16_t *)a4;
  v6 = vld1q_dup_s8(v5->i8);
  v5 = (uint8x16_t *)((char *)v5 + 1);
  v7 = (uint8x16_t)vextq_s8(v6, v4, 0xFuLL);
  v8 = *(int8x16_t *)(a4 + 16);
  v9 = *(uint8x16_t *)(a4 + 15);
  v10 = (uint8x16_t)vextq_s8(vdupq_lane_s8(*(int8x8_t *)v4.i8, 0), *(int8x16_t *)a4, 0xFuLL);
  v11 = (int8x16_t)vrhaddq_u8(v10, *(uint8x16_t *)a4);
  v12 = (int8x16_t)vrhaddq_u8(vhaddq_u8(v7, *(uint8x16_t *)a3), (uint8x16_t)v4);
  v13 = (int8x16_t)vrhaddq_u8(vhaddq_u8(*(uint8x16_t *)(a3 + 14), *(uint8x16_t *)(a3 + 16)), *(uint8x16_t *)(a3 + 15));
  v14 = (int8x16_t)vrhaddq_u8(vhaddq_u8(v10, *v5), *(uint8x16_t *)a4);
  v15 = vrev64q_s8(vextq_s8(v11, v11, 8uLL));
  v16 = vrev64q_s8(vextq_s8(v14, v14, 8uLL));
  v17 = vzip2q_s8(v16, v15);
  v18 = vextq_s8(v17, v12, 0xFuLL);
  *a1 = v18;
  a1[1] = vextq_s8(v12, v13, 0xFuLL);
  v19 = vextq_s8(v17, v12, 0xDuLL);
  v20 = (int8x16_t *)((char *)a1 + a2);
  *v20 = v19;
  v20[1] = vextq_s8(v12, v13, 0xDuLL);
  v21 = vextq_s8(v17, v12, 0xBuLL);
  v22 = (int8x16_t *)((char *)a1 + 2 * a2);
  *v22 = v21;
  v22[1] = vextq_s8(v12, v13, 0xBuLL);
  v23 = vextq_s8(v17, v12, 9uLL);
  v24 = (uint64_t)a1->i64 + 2 * a2 + a2;
  *(int8x16_t *)v24 = v23;
  *(int8x16_t *)(v24 + 16) = vextq_s8(v12, v13, 9uLL);
  v25 = vextq_s8(v17, v12, 7uLL);
  v26 = (int8x16_t *)((char *)a1 + 4 * a2);
  *v26 = v25;
  v26[1] = vextq_s8(v12, v13, 7uLL);
  v27 = vextq_s8(v17, v12, 5uLL);
  v28 = (uint64_t)a1->i64 + 4 * a2 + a2;
  *(int8x16_t *)v28 = v27;
  *(int8x16_t *)(v28 + 16) = vextq_s8(v12, v13, 5uLL);
  v29 = vextq_s8(v17, v12, 3uLL);
  v30 = (int8x16_t *)((char *)a1 + 6 * a2);
  *v30 = v29;
  v30[1] = vextq_s8(v12, v13, 3uLL);
  v31 = vextq_s8(v17, v12, 1uLL);
  v32 = (int8x16_t *)((char *)a1 + 7 * a2);
  *v32 = v31;
  v32[1] = vextq_s8(v12, v13, 1uLL);
  v33 = vhaddq_u8(v9, (uint8x16_t)vextq_s8(v8, v8, 1uLL));
  v34 = (int8x16_t)vrhaddq_u8(v9, (uint8x16_t)v8);
  v35 = (int8x16_t)vrhaddq_u8(v33, (uint8x16_t)v8);
  v36 = vzip1q_s8(v16, v15);
  v37 = vextq_s8(v36, v17, 0xFuLL);
  v38 = (int8x16_t *)((char *)a1 + 8 * a2);
  *v38 = v37;
  v38[1] = v18;
  v39 = vrev64q_s8(vextq_s8(v34, v34, 8uLL));
  v40 = vextq_s8(v36, v17, 0xDuLL);
  v41 = (int8x16_t *)((char *)a1 + 8 * a2 + a2);
  *v41 = v40;
  v41[1] = v19;
  v42 = vextq_s8(v36, v17, 0xBuLL);
  v43 = (int8x16_t *)((char *)a1 + 10 * a2);
  *v43 = v42;
  v43[1] = v21;
  v44 = vrev64q_s8(vextq_s8(v35, v35, 8uLL));
  v45 = vextq_s8(v36, v17, 9uLL);
  v46 = (int8x16_t *)((char *)a1 + 11 * a2);
  *v46 = v45;
  v46[1] = v23;
  v47 = vzip1q_s8(v44, v39);
  v48 = vextq_s8(v36, v17, 7uLL);
  v49 = (int8x16_t *)((char *)a1 + 12 * a2);
  *v49 = v48;
  v49[1] = v25;
  v50 = vzip2q_s8(v44, v39);
  v51 = vextq_s8(v36, v17, 5uLL);
  v52 = (int8x16_t *)((char *)a1 + 13 * a2);
  *v52 = v51;
  v52[1] = v27;
  v53 = vextq_s8(v36, v17, 3uLL);
  v54 = (int8x16_t *)((char *)a1 + 14 * a2);
  *v54 = v53;
  v54[1] = v29;
  v55 = vextq_s8(v36, v17, 1uLL);
  v56 = (int8x16_t *)((char *)a1 + 15 * a2);
  *v56 = v55;
  v56[1] = v31;
  v57 = vextq_s8(v50, v36, 0xFuLL);
  v58 = &a1[a2];
  *v58 = v57;
  v58[1] = v37;
  v59 = vextq_s8(v50, v36, 0xDuLL);
  v60 = (int8x16_t *)((char *)&a1[a2] + a2);
  *v60 = v59;
  v60[1] = v40;
  v61 = vextq_s8(v50, v36, 0xBuLL);
  v62 = (int8x16_t *)((char *)a1 + 18 * a2);
  *v62 = v61;
  v62[1] = v42;
  v63 = vextq_s8(v50, v36, 9uLL);
  v64 = (int8x16_t *)((char *)a1 + 19 * a2);
  *v64 = v63;
  v64[1] = v45;
  v65 = vextq_s8(v50, v36, 7uLL);
  v66 = (int8x16_t *)((char *)a1 + 20 * a2);
  *v66 = v65;
  v66[1] = v48;
  v67 = vextq_s8(v50, v36, 5uLL);
  v68 = (int8x16_t *)((char *)a1 + 21 * a2);
  *v68 = v67;
  v68[1] = v51;
  v69 = vextq_s8(v50, v36, 3uLL);
  v70 = (int8x16_t *)((char *)a1 + 22 * a2);
  *v70 = v69;
  v70[1] = v53;
  v71 = vextq_s8(v50, v36, 1uLL);
  v72 = (int8x16_t *)((char *)a1 + 23 * a2);
  *v72 = v71;
  v72[1] = v55;
  v73 = (int8x16_t *)((char *)a1 + 24 * a2);
  *v73 = vextq_s8(v47, v50, 0xFuLL);
  v73[1] = v57;
  v74 = (int8x16_t *)((char *)a1 + 25 * a2);
  *v74 = vextq_s8(v47, v50, 0xDuLL);
  v74[1] = v59;
  v75 = (int8x16_t *)((char *)a1 + 26 * a2);
  *v75 = vextq_s8(v47, v50, 0xBuLL);
  v75[1] = v61;
  v76 = (int8x16_t *)((char *)a1 + 27 * a2);
  *v76 = vextq_s8(v47, v50, 9uLL);
  v76[1] = v63;
  v77 = (int8x16_t *)((char *)a1 + 28 * a2);
  *v77 = vextq_s8(v47, v50, 7uLL);
  v77[1] = v65;
  v78 = (int8x16_t *)((char *)a1 + 29 * a2);
  *v78 = vextq_s8(v47, v50, 5uLL);
  v78[1] = v67;
  v79 = (int8x16_t *)((char *)a1 + 30 * a2);
  *v79 = vextq_s8(v47, v50, 3uLL);
  v79[1] = v69;
  result = vextq_s8(v47, v50, 1uLL);
  v81 = (uint64_t)a1[2 * a2].i64 - a2;
  *(int8x16_t *)v81 = result;
  *(int8x16_t *)(v81 + 16) = v71;
  return result;
}

int8x8_t vpx_d207_predictor_4x4_neon(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  int8x8_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  int8x8_t result;
  int8x8_t v8;

  v4 = (int8x8_t)vdup_n_s32(*a4);
  v5 = vdup_n_s8(HIBYTE(*a4));
  v6 = (uint8x8_t)vext_s8(v4, v5, 5uLL);
  result = vzip1_s8((int8x8_t)vrhadd_u8((uint8x8_t)v4, v6), (int8x8_t)vrhadd_u8(vhadd_u8((uint8x8_t)v4, (uint8x8_t)vext_s8(v4, v5, 6uLL)), v6));
  v8 = vext_s8(result, v5, 2uLL);
  *a1 = result.i32[0];
  *(_DWORD *)((char *)a1 + a2) = v8.i32[0];
  *(_DWORD *)((char *)a1 + 2 * a2) = result.i32[1];
  *(_DWORD *)((char *)a1 + 2 * a2 + a2) = v8.i32[1];
  return result;
}

int8x8_t vpx_d207_predictor_8x8_neon(int8x8_t *a1, uint64_t a2, uint64_t a3, int8x8_t *a4)
{
  int8x8_t v4;
  uint8x8_t v5;
  int8x8_t v6;
  int8x8_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t result;

  v4 = vdup_lane_s8(*a4, 7);
  v5 = (uint8x8_t)vext_s8(*a4, v4, 1uLL);
  v6 = (int8x8_t)vrhadd_u8((uint8x8_t)*a4, v5);
  v7 = (int8x8_t)vrhadd_u8(vhadd_u8((uint8x8_t)*a4, (uint8x8_t)vext_s8(*a4, v4, 2uLL)), v5);
  v8 = vzip1_s8(v6, v7);
  v9 = vzip2_s8(v6, v7);
  *a1 = v8;
  *(int8x8_t *)((char *)a1 + a2) = vext_s8(v8, v9, 2uLL);
  *(int8x8_t *)((char *)a1 + 2 * a2) = vext_s8(v8, v9, 4uLL);
  *(int8x8_t *)((char *)a1 + 3 * a2) = vext_s8(v8, v9, 6uLL);
  *(int8x8_t *)((char *)a1 + 4 * a2) = v9;
  *(int8x8_t *)((char *)a1 + 5 * a2) = vext_s8(v9, v4, 2uLL);
  *(int8x8_t *)((char *)a1 + 6 * a2) = vext_s8(v9, v4, 4uLL);
  result = vext_s8(v9, v4, 6uLL);
  *(int8x8_t *)((char *)&a1[a2] - a2) = result;
  return result;
}

int8x16_t vpx_d207_predictor_16x16_neon(int8x16_t *a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  int8x16_t v4;
  uint8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t result;

  v4 = vdupq_laneq_s8(*a4, 15);
  v5 = (uint8x16_t)vextq_s8(*a4, v4, 1uLL);
  v6 = (int8x16_t)vrhaddq_u8(*(uint8x16_t *)a4, v5);
  v7 = (int8x16_t)vrhaddq_u8(vhaddq_u8(*(uint8x16_t *)a4, (uint8x16_t)vextq_s8(*a4, v4, 2uLL)), v5);
  v8 = vzip1q_s8(v6, v7);
  v9 = vzip2q_s8(v6, v7);
  *a1 = v8;
  *(int8x16_t *)((char *)a1 + a2) = vextq_s8(v8, v9, 2uLL);
  *(int8x16_t *)((char *)a1 + 2 * a2) = vextq_s8(v8, v9, 4uLL);
  *(int8x16_t *)((char *)a1 + 3 * a2) = vextq_s8(v8, v9, 6uLL);
  *(int8x16_t *)((char *)a1 + 4 * a2) = vextq_s8(v8, v9, 8uLL);
  *(int8x16_t *)((char *)a1 + 5 * a2) = vextq_s8(v8, v9, 0xAuLL);
  *(int8x16_t *)((char *)a1 + 6 * a2) = vextq_s8(v8, v9, 0xCuLL);
  *(int8x16_t *)((char *)a1 + 7 * a2) = vextq_s8(v8, v9, 0xEuLL);
  *(int8x16_t *)((char *)a1 + 8 * a2) = v9;
  *(int8x16_t *)((char *)a1 + 9 * a2) = vextq_s8(v9, v4, 2uLL);
  *(int8x16_t *)((char *)a1 + 10 * a2) = vextq_s8(v9, v4, 4uLL);
  *(int8x16_t *)((char *)a1 + 11 * a2) = vextq_s8(v9, v4, 6uLL);
  *(int8x16_t *)((char *)a1 + 12 * a2) = vextq_s8(v9, v4, 8uLL);
  *(int8x16_t *)((char *)a1 + 13 * a2) = vextq_s8(v9, v4, 0xAuLL);
  *(int8x16_t *)((char *)a1 + 14 * a2) = vextq_s8(v9, v4, 0xCuLL);
  result = vextq_s8(v9, v4, 0xEuLL);
  *(int8x16_t *)((char *)&a1[a2] - a2) = result;
  return result;
}

int8x16_t vpx_d207_predictor_32x32_neon(int8x16_t *a1, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  int8x16_t v4;
  int8x16_t result;
  uint8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t *v15;
  int8x16_t v16;
  int8x16_t *v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t v20;
  int8x16_t *v21;
  int8x16_t v22;
  uint64_t v23;
  int8x16_t v24;
  int8x16_t *v25;
  int8x16_t v26;
  int8x16_t *v27;
  int8x16_t v28;
  int8x16_t *v29;
  int8x16_t v30;
  int8x16_t *v31;
  int8x16_t v32;
  int8x16_t *v33;
  int8x16_t v34;
  int8x16_t *v35;
  int8x16_t v36;
  int8x16_t *v37;
  int8x16_t v38;
  int8x16_t *v39;
  int8x16_t v40;
  int8x16_t *v41;
  int8x16_t v42;
  int8x16_t *v43;
  int8x16_t v44;
  int8x16_t *v45;
  int8x16_t *v46;
  int8x16_t v47;
  int8x16_t *v48;
  int8x16_t v49;
  int8x16_t *v50;
  int8x16_t v51;
  int8x16_t *v52;
  int8x16_t v53;
  int8x16_t *v54;
  int8x16_t v55;
  int8x16_t *v56;
  int8x16_t v57;
  int8x16_t *v58;
  int8x16_t v59;
  int8x16_t *v60;
  int8x16_t *v61;
  int8x16_t *v62;
  int8x16_t *v63;
  int8x16_t *v64;
  int8x16_t *v65;
  int8x16_t *v66;
  uint64_t v67;

  v4 = a4[1];
  result = vdupq_laneq_s8(v4, 15);
  v6 = (uint8x16_t)vextq_s8(*a4, v4, 1uLL);
  v7 = (int8x16_t)vrhaddq_u8(*(uint8x16_t *)a4, v6);
  v8 = (int8x16_t)vrhaddq_u8(vhaddq_u8(*(uint8x16_t *)a4, (uint8x16_t)vextq_s8(*a4, v4, 2uLL)), v6);
  v9 = vzip1q_s8(v7, v8);
  v10 = vzip2q_s8(v7, v8);
  *a1 = v9;
  a1[1] = v10;
  v11 = (uint8x16_t)vextq_s8(v4, result, 1uLL);
  v12 = (int8x16_t)vrhaddq_u8((uint8x16_t)v4, v11);
  v13 = (int8x16_t)vrhaddq_u8(vhaddq_u8((uint8x16_t)v4, (uint8x16_t)vextq_s8(v4, result, 2uLL)), v11);
  v14 = vzip1q_s8(v12, v13);
  v15 = (int8x16_t *)((char *)a1 + a2);
  v16 = vextq_s8(v10, v14, 2uLL);
  *v15 = vextq_s8(v9, v10, 2uLL);
  v15[1] = v16;
  v17 = (int8x16_t *)((char *)a1 + 2 * a2);
  v18 = vextq_s8(v10, v14, 4uLL);
  *v17 = vextq_s8(v9, v10, 4uLL);
  v17[1] = v18;
  v19 = (uint64_t)a1->i64 + 2 * a2 + a2;
  v20 = vextq_s8(v10, v14, 6uLL);
  *(int8x16_t *)v19 = vextq_s8(v9, v10, 6uLL);
  *(int8x16_t *)(v19 + 16) = v20;
  v21 = (int8x16_t *)((char *)a1 + 4 * a2);
  v22 = vextq_s8(v10, v14, 8uLL);
  *v21 = vextq_s8(v9, v10, 8uLL);
  v21[1] = v22;
  v23 = (uint64_t)a1->i64 + 4 * a2 + a2;
  v24 = vextq_s8(v10, v14, 0xAuLL);
  *(int8x16_t *)v23 = vextq_s8(v9, v10, 0xAuLL);
  *(int8x16_t *)(v23 + 16) = v24;
  v25 = (int8x16_t *)((char *)a1 + 6 * a2);
  v26 = vextq_s8(v10, v14, 0xCuLL);
  *v25 = vextq_s8(v9, v10, 0xCuLL);
  v25[1] = v26;
  v27 = (int8x16_t *)((char *)a1 + 7 * a2);
  v28 = vextq_s8(v10, v14, 0xEuLL);
  *v27 = vextq_s8(v9, v10, 0xEuLL);
  v27[1] = v28;
  v29 = (int8x16_t *)((char *)a1 + 8 * a2);
  *v29 = v10;
  v29[1] = v14;
  v30 = vzip2q_s8(v12, v13);
  v31 = (int8x16_t *)((char *)a1 + 8 * a2 + a2);
  v32 = vextq_s8(v14, v30, 2uLL);
  *v31 = v16;
  v31[1] = v32;
  v33 = (int8x16_t *)((char *)a1 + 10 * a2);
  v34 = vextq_s8(v14, v30, 4uLL);
  *v33 = v18;
  v33[1] = v34;
  v35 = (int8x16_t *)((char *)a1 + 11 * a2);
  v36 = vextq_s8(v14, v30, 6uLL);
  *v35 = v20;
  v35[1] = v36;
  v37 = (int8x16_t *)((char *)a1 + 12 * a2);
  v38 = vextq_s8(v14, v30, 8uLL);
  *v37 = v22;
  v37[1] = v38;
  v39 = (int8x16_t *)((char *)a1 + 13 * a2);
  v40 = vextq_s8(v14, v30, 0xAuLL);
  *v39 = v24;
  v39[1] = v40;
  v41 = (int8x16_t *)((char *)a1 + 14 * a2);
  v42 = vextq_s8(v14, v30, 0xCuLL);
  *v41 = v26;
  v41[1] = v42;
  v43 = (int8x16_t *)((char *)a1 + 15 * a2);
  v44 = vextq_s8(v14, v30, 0xEuLL);
  *v43 = v28;
  v43[1] = v44;
  v45 = &a1[a2];
  *v45 = v14;
  v45[1] = v30;
  v46 = (int8x16_t *)((char *)&a1[a2] + a2);
  v47 = vextq_s8(v30, result, 2uLL);
  *v46 = v32;
  v46[1] = v47;
  v48 = (int8x16_t *)((char *)a1 + 18 * a2);
  v49 = vextq_s8(v30, result, 4uLL);
  *v48 = v34;
  v48[1] = v49;
  v50 = (int8x16_t *)((char *)a1 + 19 * a2);
  v51 = vextq_s8(v30, result, 6uLL);
  *v50 = v36;
  v50[1] = v51;
  v52 = (int8x16_t *)((char *)a1 + 20 * a2);
  v53 = vextq_s8(v30, result, 8uLL);
  *v52 = v38;
  v52[1] = v53;
  v54 = (int8x16_t *)((char *)a1 + 21 * a2);
  v55 = vextq_s8(v30, result, 0xAuLL);
  *v54 = v40;
  v54[1] = v55;
  v56 = (int8x16_t *)((char *)a1 + 22 * a2);
  v57 = vextq_s8(v30, result, 0xCuLL);
  *v56 = v42;
  v56[1] = v57;
  v58 = (int8x16_t *)((char *)a1 + 23 * a2);
  v59 = vextq_s8(v30, result, 0xEuLL);
  *v58 = v44;
  v58[1] = v59;
  v60 = (int8x16_t *)((char *)a1 + 24 * a2);
  *v60 = v30;
  v60[1] = result;
  v61 = (int8x16_t *)((char *)a1 + 25 * a2);
  *v61 = v47;
  v61[1] = result;
  v62 = (int8x16_t *)((char *)a1 + 26 * a2);
  *v62 = v49;
  v62[1] = result;
  v63 = (int8x16_t *)((char *)a1 + 27 * a2);
  *v63 = v51;
  v63[1] = result;
  v64 = (int8x16_t *)((char *)a1 + 28 * a2);
  *v64 = v53;
  v64[1] = result;
  v65 = (int8x16_t *)((char *)a1 + 29 * a2);
  *v65 = v55;
  v65[1] = result;
  v66 = (int8x16_t *)((char *)a1 + 30 * a2);
  *v66 = v57;
  v66[1] = result;
  v67 = (uint64_t)a1[2 * a2].i64 - a2;
  *(int8x16_t *)v67 = v59;
  *(int8x16_t *)(v67 + 16) = result;
  return result;
}

int *vpx_v_predictor_4x4_neon(int *result, uint64_t a2, int *a3)
{
  int v3;
  _DWORD *v4;

  v3 = *a3;
  *result = *a3;
  *(int *)((char *)result + a2) = v3;
  v4 = (int *)((char *)result + a2 + a2);
  *v4 = v3;
  *(_DWORD *)((char *)v4 + a2) = v3;
  return result;
}

double vpx_v_predictor_8x8_neon(_QWORD *a1, uint64_t a2, double *a3)
{
  double result;
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;

  result = *a3;
  *a1 = *(_QWORD *)a3;
  *(double *)((char *)a1 + a2) = result;
  v4 = (double *)((char *)a1 + a2 + a2);
  *v4 = result;
  v5 = (double *)((char *)v4 + a2);
  *v5 = result;
  v6 = (double *)((char *)v5 + a2);
  *v6 = result;
  v7 = (double *)((char *)v6 + a2);
  *v7 = result;
  v8 = (double *)((char *)v7 + a2);
  *v8 = result;
  *(double *)((char *)v8 + a2) = result;
  return result;
}

__n128 vpx_v_predictor_16x16_neon(__n128 *a1, uint64_t a2, __n128 *a3)
{
  __n128 result;
  __n128 *v4;
  __n128 *v5;
  __n128 *v6;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 *v16;

  result = *a3;
  *a1 = *a3;
  *(__n128 *)((char *)a1 + a2) = result;
  v4 = (__n128 *)((char *)a1 + a2 + a2);
  *v4 = result;
  v5 = (__n128 *)((char *)v4 + a2);
  *v5 = result;
  v6 = (__n128 *)((char *)v5 + a2);
  *v6 = result;
  v7 = (__n128 *)((char *)v6 + a2);
  *v7 = result;
  v8 = (__n128 *)((char *)v7 + a2);
  *v8 = result;
  v9 = (__n128 *)((char *)v8 + a2);
  *v9 = result;
  v10 = (__n128 *)((char *)v9 + a2);
  *v10 = result;
  v11 = (__n128 *)((char *)v10 + a2);
  *v11 = result;
  v12 = (__n128 *)((char *)v11 + a2);
  *v12 = result;
  v13 = (__n128 *)((char *)v12 + a2);
  *v13 = result;
  v14 = (__n128 *)((char *)v13 + a2);
  *v14 = result;
  v15 = (__n128 *)((char *)v14 + a2);
  *v15 = result;
  v16 = (__n128 *)((char *)v15 + a2);
  *v16 = result;
  *(__n128 *)((char *)v16 + a2) = result;
  return result;
}

__n128 vpx_v_predictor_32x32_neon(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a1 = *(_OWORD *)a3;
  a1[1] = v4;
  v5 = (char *)a1 + a2;
  *(__n128 *)v5 = result;
  *((_OWORD *)v5 + 1) = v4;
  v6 = (char *)a1 + a2 + a2;
  *(__n128 *)v6 = result;
  *((_OWORD *)v6 + 1) = v4;
  v7 = &v6[a2];
  *(__n128 *)v7 = result;
  *((_OWORD *)v7 + 1) = v4;
  v8 = &v7[a2];
  *(__n128 *)v8 = result;
  *((_OWORD *)v8 + 1) = v4;
  v9 = &v8[a2];
  *(__n128 *)v9 = result;
  *((_OWORD *)v9 + 1) = v4;
  v10 = &v9[a2];
  *(__n128 *)v10 = result;
  *((_OWORD *)v10 + 1) = v4;
  v11 = &v10[a2];
  *(__n128 *)v11 = result;
  *((_OWORD *)v11 + 1) = v4;
  v12 = &v11[a2];
  *(__n128 *)v12 = result;
  *((_OWORD *)v12 + 1) = v4;
  v13 = &v12[a2];
  *(__n128 *)v13 = result;
  *((_OWORD *)v13 + 1) = v4;
  v14 = (uint64_t)&v13[a2];
  *(__n128 *)v14 = result;
  *(_OWORD *)(v14 + 16) = v4;
  v15 = v14 + a2;
  *(__n128 *)v15 = result;
  *(_OWORD *)(v15 + 16) = v4;
  v16 = v15 + a2;
  *(__n128 *)v16 = result;
  *(_OWORD *)(v16 + 16) = v4;
  v17 = v16 + a2;
  *(__n128 *)v17 = result;
  *(_OWORD *)(v17 + 16) = v4;
  v18 = v17 + a2;
  *(__n128 *)v18 = result;
  *(_OWORD *)(v18 + 16) = v4;
  v19 = v18 + a2;
  *(__n128 *)v19 = result;
  *(_OWORD *)(v19 + 16) = v4;
  v20 = v19 + a2;
  *(__n128 *)v20 = result;
  *(_OWORD *)(v20 + 16) = v4;
  v21 = v20 + a2;
  *(__n128 *)v21 = result;
  *(_OWORD *)(v21 + 16) = v4;
  v22 = v21 + a2;
  *(__n128 *)v22 = result;
  *(_OWORD *)(v22 + 16) = v4;
  v23 = v22 + a2;
  *(__n128 *)v23 = result;
  *(_OWORD *)(v23 + 16) = v4;
  v24 = v23 + a2;
  *(__n128 *)v24 = result;
  *(_OWORD *)(v24 + 16) = v4;
  v25 = v24 + a2;
  *(__n128 *)v25 = result;
  *(_OWORD *)(v25 + 16) = v4;
  v26 = v25 + a2;
  *(__n128 *)v26 = result;
  *(_OWORD *)(v26 + 16) = v4;
  v27 = v26 + a2;
  *(__n128 *)v27 = result;
  *(_OWORD *)(v27 + 16) = v4;
  v28 = v27 + a2;
  *(__n128 *)v28 = result;
  *(_OWORD *)(v28 + 16) = v4;
  v29 = v28 + a2;
  *(__n128 *)v29 = result;
  *(_OWORD *)(v29 + 16) = v4;
  v30 = v29 + a2;
  *(__n128 *)v30 = result;
  *(_OWORD *)(v30 + 16) = v4;
  v31 = v30 + a2;
  *(__n128 *)v31 = result;
  *(_OWORD *)(v31 + 16) = v4;
  v32 = v31 + a2;
  *(__n128 *)v32 = result;
  *(_OWORD *)(v32 + 16) = v4;
  v33 = v32 + a2;
  *(__n128 *)v33 = result;
  *(_OWORD *)(v33 + 16) = v4;
  v34 = v33 + a2;
  *(__n128 *)v34 = result;
  *(_OWORD *)(v34 + 16) = v4;
  v35 = v34 + a2;
  *(__n128 *)v35 = result;
  *(_OWORD *)(v35 + 16) = v4;
  return result;
}

int8x8_t vpx_h_predictor_4x4_neon(_DWORD *a1, uint64_t a2, int8x8_t a3, uint64_t a4, __int32 *a5)
{
  _DWORD *v5;
  int8x8_t result;

  a3.i32[0] = *a5;
  *a1 = vdup_lane_s8(a3, 0).u32[0];
  *(_DWORD *)((char *)a1 + a2) = vdup_lane_s8(a3, 1).u32[0];
  v5 = (_DWORD *)((char *)a1 + a2 + a2);
  *v5 = vdup_lane_s8(a3, 2).u32[0];
  result = vdup_lane_s8(a3, 3);
  *(_DWORD *)((char *)v5 + a2) = result.i32[0];
  return result;
}

int8x8_t vpx_h_predictor_8x8_neon(int8x8_t *a1, uint64_t a2, uint64_t a3, int8x8_t *a4)
{
  int8x8_t v4;
  int8x8_t *v5;
  int8x8_t *v6;
  int8x8_t *v7;
  int8x8_t *v8;
  int8x8_t *v9;
  int8x8_t result;

  v4 = *a4;
  *a1 = vdup_lane_s8(*a4, 0);
  *(int8x8_t *)((char *)a1 + a2) = vdup_lane_s8(v4, 1);
  v5 = (int8x8_t *)((char *)a1 + a2 + a2);
  *v5 = vdup_lane_s8(v4, 2);
  v6 = (int8x8_t *)((char *)v5 + a2);
  *v6 = vdup_lane_s8(v4, 3);
  v7 = (int8x8_t *)((char *)v6 + a2);
  *v7 = vdup_lane_s8(v4, 4);
  v8 = (int8x8_t *)((char *)v7 + a2);
  *v8 = vdup_lane_s8(v4, 5);
  v9 = (int8x8_t *)((char *)v8 + a2);
  *v9 = vdup_lane_s8(v4, 6);
  result = vdup_lane_s8(v4, 7);
  *(int8x8_t *)((char *)v9 + a2) = result;
  return result;
}

int8x16_t vpx_h_predictor_16x16_neon(int8x16_t *a1, uint64_t a2, uint64_t a3, int8x8_t *a4)
{
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t *v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t *v25;
  int8x16_t result;
  int8x16_t *v27;
  int8x16_t *v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;

  v4 = *(int8x16_t *)a4->i8;
  v5 = vdupq_lane_s8(*a4, 1);
  v6 = vdupq_lane_s8(*a4, 2);
  v7 = vdupq_lane_s8(*a4, 3);
  v8 = vdupq_lane_s8(*a4, 4);
  v9 = vdupq_lane_s8(*a4, 5);
  v10 = vdupq_lane_s8(*a4, 6);
  v11 = vdupq_lane_s8(*a4, 7);
  *a1 = vdupq_lane_s8(*a4, 0);
  *(int8x16_t *)((char *)a1 + a2) = v5;
  v12 = (int8x16_t *)((char *)a1 + a2 + a2);
  *v12 = v6;
  v13 = (int8x16_t *)((char *)v12 + a2);
  *v13 = v7;
  v14 = (int8x16_t *)((char *)v13 + a2);
  *v14 = v8;
  v15 = (int8x16_t *)((char *)v14 + a2);
  *v15 = v9;
  v16 = (int8x16_t *)((char *)v15 + a2);
  *v16 = v10;
  v17 = (int8x16_t *)((char *)v16 + a2);
  *v17 = v11;
  v18 = vdupq_laneq_s8(v4, 8);
  v19 = vdupq_laneq_s8(v4, 9);
  v20 = vdupq_laneq_s8(v4, 10);
  v21 = vdupq_laneq_s8(v4, 11);
  v22 = vdupq_laneq_s8(v4, 12);
  v23 = vdupq_laneq_s8(v4, 13);
  v24 = vdupq_laneq_s8(v4, 14);
  v25 = (int8x16_t *)((char *)v17 + a2);
  result = vdupq_laneq_s8(v4, 15);
  *v25 = v18;
  v27 = (int8x16_t *)((char *)v25 + a2);
  *v27 = v19;
  v28 = (int8x16_t *)((char *)v27 + a2);
  *v28 = v20;
  v29 = (int8x16_t *)((char *)v28 + a2);
  *v29 = v21;
  v30 = (int8x16_t *)((char *)v29 + a2);
  *v30 = v22;
  v31 = (int8x16_t *)((char *)v30 + a2);
  *v31 = v23;
  v32 = (int8x16_t *)((char *)v31 + a2);
  *v32 = v24;
  *(int8x16_t *)((char *)v32 + a2) = result;
  return result;
}

int8x16_t *vpx_h_predictor_32x32_neon(int8x16_t *result, uint64_t a2, uint64_t a3, int8x16_t *a4)
{
  char v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  char v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t *v17;
  int8x16_t *v18;
  int8x16_t *v19;
  int8x16_t *v20;
  int8x16_t *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t *v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t *v37;

  v4 = 1;
  do
  {
    v5 = *a4++;
    v6 = vdupq_lane_s8(*(int8x8_t *)v5.i8, 0);
    v7 = vdupq_lane_s8(*(int8x8_t *)v5.i8, 1);
    v8 = vdupq_lane_s8(*(int8x8_t *)v5.i8, 2);
    v9 = vdupq_lane_s8(*(int8x8_t *)v5.i8, 3);
    v10 = vdupq_lane_s8(*(int8x8_t *)v5.i8, 4);
    v11 = vdupq_lane_s8(*(int8x8_t *)v5.i8, 5);
    v12 = vdupq_lane_s8(*(int8x8_t *)v5.i8, 6);
    v13 = vdupq_lane_s8(*(int8x8_t *)v5.i8, 7);
    v14 = v4;
    *result = v6;
    result[1] = v6;
    v15 = (int8x16_t *)((char *)result + a2);
    *v15 = v7;
    v15[1] = v7;
    v16 = (int8x16_t *)((char *)result + a2 + a2);
    *v16 = v8;
    v16[1] = v8;
    v17 = (int8x16_t *)((char *)v16 + a2);
    *v17 = v9;
    v17[1] = v9;
    v18 = (int8x16_t *)((char *)v17 + a2);
    *v18 = v10;
    v18[1] = v10;
    v19 = (int8x16_t *)((char *)v18 + a2);
    *v19 = v11;
    v19[1] = v11;
    v20 = (int8x16_t *)((char *)v19 + a2);
    *v20 = v12;
    v20[1] = v12;
    v21 = (int8x16_t *)((char *)v20 + a2);
    *v21 = v13;
    v21[1] = v13;
    v22 = vdupq_laneq_s8(v5, 8);
    v23 = vdupq_laneq_s8(v5, 9);
    v24 = vdupq_laneq_s8(v5, 10);
    v25 = vdupq_laneq_s8(v5, 11);
    v26 = vdupq_laneq_s8(v5, 12);
    v27 = vdupq_laneq_s8(v5, 13);
    v28 = vdupq_laneq_s8(v5, 14);
    v29 = vdupq_laneq_s8(v5, 15);
    v30 = (int8x16_t *)((char *)v21 + a2);
    *v30 = v22;
    v30[1] = v22;
    v31 = (int8x16_t *)((char *)v30 + a2);
    *v31 = v23;
    v31[1] = v23;
    v32 = (int8x16_t *)((char *)v31 + a2);
    *v32 = v24;
    v32[1] = v24;
    v33 = (int8x16_t *)((char *)v32 + a2);
    *v33 = v25;
    v33[1] = v25;
    v34 = (int8x16_t *)((char *)v33 + a2);
    *v34 = v26;
    v34[1] = v26;
    v35 = (int8x16_t *)((char *)v34 + a2);
    *v35 = v27;
    v35[1] = v27;
    v36 = (int8x16_t *)((char *)v35 + a2);
    *v36 = v28;
    v36[1] = v28;
    v37 = (int8x16_t *)((char *)v36 + a2);
    result = (int8x16_t *)((char *)v37 + a2);
    *v37 = v29;
    v37[1] = v29;
    v4 = 0;
  }
  while ((v14 & 1) != 0);
  return result;
}

int8x8_t vpx_tm_predictor_4x4_neon(_DWORD *a1, uint64_t a2, uint8x8_t *a3, uint8x8_t *a4)
{
  const char *v4;
  uint8x8_t v5;
  int16x4_t v6;
  int16x8_t v7;
  int16x8_t v8;
  _DWORD *v9;
  int8x8_t result;

  v4 = (char *)&a3[-1] + 7;
  v5 = (uint8x8_t)vld1_dup_s8(v4);
  v6 = (int16x4_t)vmovl_u8(*a4).u64[0];
  v7 = (int16x8_t)vdupq_lane_s64(vsubl_u8(*a3, v5).i64[0], 0);
  *(int16x4_t *)v8.i8 = vdup_lane_s16(v6, 0);
  v8.u64[1] = (unint64_t)vdup_lane_s16(v6, 1);
  *(int8x8_t *)v8.i8 = vqmovun_s16(vaddq_s16(v8, v7));
  *a1 = v8.i32[0];
  *(_DWORD *)((char *)a1 + a2) = v8.i32[1];
  v9 = (_DWORD *)((char *)a1 + a2 + a2);
  *(int16x4_t *)v8.i8 = vdup_lane_s16(v6, 2);
  v8.u64[1] = (unint64_t)vdup_lane_s16(v6, 3);
  result = vqmovun_s16(vaddq_s16(v8, v7));
  *v9 = result.i32[0];
  *(_DWORD *)((char *)v9 + a2) = result.i32[1];
  return result;
}

int8x8_t vpx_tm_predictor_8x8_neon(int8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint8x8_t *a4)
{
  const char *v4;
  uint8x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int8x8_t *v8;
  int8x8_t *v9;
  int8x8_t *v10;
  int8x8_t *v11;
  int8x8_t *v12;
  int8x8_t result;

  v4 = (char *)&a3[-1] + 7;
  v5 = (uint8x8_t)vld1_dup_s8(v4);
  v6 = (int16x8_t)vmovl_u8(*a4);
  v7 = (int16x8_t)vsubl_u8(*a3, v5);
  *a1 = vqmovun_s16(vaddq_s16(vdupq_lane_s16(*(int16x4_t *)v6.i8, 0), v7));
  *(int8x8_t *)((char *)a1 + a2) = vqmovun_s16(vaddq_s16(vdupq_lane_s16(*(int16x4_t *)v6.i8, 1), v7));
  v8 = (int8x8_t *)((char *)a1 + a2 + a2);
  *v8 = vqmovun_s16(vaddq_s16(vdupq_lane_s16(*(int16x4_t *)v6.i8, 2), v7));
  v9 = (int8x8_t *)((char *)v8 + a2);
  *v9 = vqmovun_s16(vaddq_s16(vdupq_lane_s16(*(int16x4_t *)v6.i8, 3), v7));
  v10 = (int8x8_t *)((char *)v9 + a2);
  *v10 = vqmovun_s16(vaddq_s16(vdupq_laneq_s16(v6, 4), v7));
  v11 = (int8x8_t *)((char *)v10 + a2);
  *v11 = vqmovun_s16(vaddq_s16(vdupq_laneq_s16(v6, 5), v7));
  v12 = (int8x8_t *)((char *)v11 + a2);
  *v12 = vqmovun_s16(vaddq_s16(vdupq_laneq_s16(v6, 6), v7));
  result = vqmovun_s16(vaddq_s16(vdupq_laneq_s16(v6, 7), v7));
  *(int8x8_t *)((char *)v12 + a2) = result;
  return result;
}

int8x8_t vpx_tm_predictor_16x16_neon(int8x8_t *a1, uint64_t a2, uint8x8_t *a3, uint8x8_t *a4)
{
  unsigned int v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int8x8_t *v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x8_t *v12;
  int8x8_t *v13;
  int16x8_t v14;
  int16x8_t v15;
  int8x8_t *v16;
  int8x8_t *v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x8_t *v20;
  int8x8_t *v21;
  int16x8_t v22;
  int8x8_t *v23;
  int16x8_t v24;
  int16x8_t v25;
  int8x8_t *v26;
  int16x8_t v27;
  int8x8_t *v28;
  int16x8_t v29;
  int8x8_t *v30;
  int16x8_t v31;
  int8x8_t *v32;
  int16x8_t v33;
  int8x8_t *v34;
  int16x8_t v35;
  int8x8_t *v36;
  int16x8_t v37;
  int8x8_t *v38;
  int16x8_t v39;
  int8x8_t result;

  v4 = a3[-1].u8[7];
  v5 = (int16x8_t)vsubl_u8(*a3, (uint8x8_t)vdup_n_s8(v4));
  v6 = (int16x8_t)vmovl_u8(*a4);
  v7 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 0);
  v8 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)a3->i8, (uint8x16_t)vdupq_n_s8(v4));
  *a1 = vqmovun_s16(vaddq_s16(v7, v5));
  a1[1] = vqmovun_s16(vaddq_s16(v7, v8));
  v9 = (int8x8_t *)((char *)a1 + a2);
  v10 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 1);
  *v9 = vqmovun_s16(vaddq_s16(v10, v5));
  v9[1] = vqmovun_s16(vaddq_s16(v10, v8));
  v11 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 2);
  v12 = (int8x8_t *)((char *)a1 + a2 + a2);
  *v12 = vqmovun_s16(vaddq_s16(v11, v5));
  v12[1] = vqmovun_s16(vaddq_s16(v11, v8));
  v13 = (int8x8_t *)((char *)v12 + a2);
  v14 = vdupq_lane_s16(*(int16x4_t *)v6.i8, 3);
  *v13 = vqmovun_s16(vaddq_s16(v14, v5));
  v13[1] = vqmovun_s16(vaddq_s16(v14, v8));
  v15 = vdupq_laneq_s16(v6, 4);
  v16 = (int8x8_t *)((char *)v13 + a2);
  *v16 = vqmovun_s16(vaddq_s16(v15, v5));
  v16[1] = vqmovun_s16(vaddq_s16(v15, v8));
  v17 = (int8x8_t *)((char *)v16 + a2);
  v18 = vdupq_laneq_s16(v6, 5);
  *v17 = vqmovun_s16(vaddq_s16(v18, v5));
  v17[1] = vqmovun_s16(vaddq_s16(v18, v8));
  v19 = vdupq_laneq_s16(v6, 6);
  v20 = (int8x8_t *)((char *)v17 + a2);
  *v20 = vqmovun_s16(vaddq_s16(v19, v5));
  v20[1] = vqmovun_s16(vaddq_s16(v19, v8));
  v21 = (int8x8_t *)((char *)v20 + a2);
  v22 = vdupq_laneq_s16(v6, 7);
  *v21 = vqmovun_s16(vaddq_s16(v22, v5));
  v21[1] = vqmovun_s16(vaddq_s16(v22, v8));
  v23 = (int8x8_t *)((char *)v21 + a2);
  v24 = (int16x8_t)vmovl_u8(a4[1]);
  v25 = vdupq_lane_s16(*(int16x4_t *)v24.i8, 0);
  *v23 = vqmovun_s16(vaddq_s16(v25, v5));
  v23[1] = vqmovun_s16(vaddq_s16(v25, v8));
  v26 = (int8x8_t *)((char *)v23 + a2);
  v27 = vdupq_lane_s16(*(int16x4_t *)v24.i8, 1);
  *v26 = vqmovun_s16(vaddq_s16(v27, v5));
  v26[1] = vqmovun_s16(vaddq_s16(v27, v8));
  v28 = (int8x8_t *)((char *)v26 + a2);
  v29 = vdupq_lane_s16(*(int16x4_t *)v24.i8, 2);
  *v28 = vqmovun_s16(vaddq_s16(v29, v5));
  v28[1] = vqmovun_s16(vaddq_s16(v29, v8));
  v30 = (int8x8_t *)((char *)v28 + a2);
  v31 = vdupq_lane_s16(*(int16x4_t *)v24.i8, 3);
  *v30 = vqmovun_s16(vaddq_s16(v31, v5));
  v30[1] = vqmovun_s16(vaddq_s16(v31, v8));
  v32 = (int8x8_t *)((char *)v30 + a2);
  v33 = vdupq_laneq_s16(v24, 4);
  *v32 = vqmovun_s16(vaddq_s16(v33, v5));
  v32[1] = vqmovun_s16(vaddq_s16(v33, v8));
  v34 = (int8x8_t *)((char *)v32 + a2);
  v35 = vdupq_laneq_s16(v24, 5);
  *v34 = vqmovun_s16(vaddq_s16(v35, v5));
  v34[1] = vqmovun_s16(vaddq_s16(v35, v8));
  v36 = (int8x8_t *)((char *)v34 + a2);
  v37 = vdupq_laneq_s16(v24, 6);
  *v36 = vqmovun_s16(vaddq_s16(v37, v5));
  v36[1] = vqmovun_s16(vaddq_s16(v37, v8));
  v38 = (int8x8_t *)((char *)v36 + a2);
  v39 = vdupq_laneq_s16(v24, 7);
  result = vqmovun_s16(vaddq_s16(v39, v5));
  *v38 = result;
  v38[1] = vqmovun_s16(vaddq_s16(v39, v8));
  return result;
}

int8x16_t *vpx_tm_predictor_32x32_neon(int8x16_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint8x16_t v6;
  uint8x16_t v7;
  uint8x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int8x16_t *v16;
  int16x8_t v17;
  int8x16_t *v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  int16x8_t v24;
  int8x16_t *v25;
  int16x8_t v26;
  int8x16_t *v27;
  int16x8_t v28;
  int8x16_t *v29;
  int16x8_t v30;
  int8x16_t *v31;

  v4 = 0;
  v5 = *(unsigned __int8 *)(a3 - 1);
  v6 = *(uint8x16_t *)(a3 + 16);
  v7 = (uint8x16_t)vdupq_n_s8(v5);
  v8 = (uint8x8_t)vdup_n_s8(v5);
  v9 = (int16x8_t)vsubl_u8(*(uint8x8_t *)a3, v8);
  v10 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)a3, v7);
  v11 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v6.i8, v8);
  v12 = (int16x8_t)vsubl_high_u8(v6, v7);
  do
  {
    v13 = (int16x8_t)vmovl_u8(*(uint8x8_t *)(a4 + v4));
    v14 = vdupq_lane_s16(*(int16x4_t *)v13.i8, 0);
    *result = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v14, v9)), vaddq_s16(v14, v10));
    result[1] = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v14, v11)), vaddq_s16(v14, v12));
    v15 = vdupq_lane_s16(*(int16x4_t *)v13.i8, 1);
    v16 = (int8x16_t *)((char *)result + a2);
    *v16 = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v15, v9)), vaddq_s16(v15, v10));
    v16[1] = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v15, v11)), vaddq_s16(v15, v12));
    v17 = vdupq_lane_s16(*(int16x4_t *)v13.i8, 2);
    v18 = (int8x16_t *)((char *)result + a2 + a2);
    *v18 = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v17, v9)), vaddq_s16(v17, v10));
    v18[1] = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v17, v11)), vaddq_s16(v17, v12));
    v19 = vdupq_lane_s16(*(int16x4_t *)v13.i8, 3);
    v20 = vaddq_s16(v19, v9);
    v21 = vaddq_s16(v19, v10);
    v22 = (int8x16_t *)((char *)v18 + a2);
    v23 = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v19, v11)), vaddq_s16(v19, v12));
    v24 = vdupq_laneq_s16(v13, 4);
    *v22 = vqmovun_high_s16(vqmovun_s16(v20), v21);
    v22[1] = v23;
    v25 = (int8x16_t *)((char *)v22 + a2);
    *v25 = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v24, v9)), vaddq_s16(v24, v10));
    v25[1] = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v24, v11)), vaddq_s16(v24, v12));
    v26 = vdupq_laneq_s16(v13, 5);
    v27 = (int8x16_t *)((char *)v25 + a2);
    *v27 = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v26, v9)), vaddq_s16(v26, v10));
    v27[1] = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v26, v11)), vaddq_s16(v26, v12));
    v28 = vdupq_laneq_s16(v13, 6);
    v29 = (int8x16_t *)((char *)v27 + a2);
    *v29 = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v28, v9)), vaddq_s16(v28, v10));
    v29[1] = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v28, v11)), vaddq_s16(v28, v12));
    v30 = vdupq_laneq_s16(v13, 7);
    v31 = (int8x16_t *)((char *)v29 + a2);
    *v31 = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v30, v9)), vaddq_s16(v30, v10));
    v31[1] = vqmovun_high_s16(vqmovun_s16(vaddq_s16(v30, v11)), vaddq_s16(v30, v12));
    v4 += 8;
    result = (int8x16_t *)((char *)v31 + a2);
  }
  while ((_DWORD)v4 != 32);
  return result;
}

uint64_t vpx_iwht4x4_16_add_c(int *a1, unsigned __int8 *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t result;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  _BYTE *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  _BYTE *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  _BYTE *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;

  v3 = a1[1] >> 2;
  v4 = a1[3] >> 2;
  v5 = v3 + (*a1 >> 2);
  v6 = (a1[2] >> 2) - v4;
  v7 = (v5 - v6) >> 1;
  v8 = v7 - v4;
  v9 = v7 - v3;
  v10 = v7 - v3 + v6;
  v11 = v5 - (v7 - v4);
  v12 = a1[5] >> 2;
  v13 = a1[7] >> 2;
  v14 = v12 + (a1[4] >> 2);
  v15 = (a1[6] >> 2) - v13;
  v16 = (v14 - v15) >> 1;
  v17 = v16 - v13;
  v18 = v16 - v12;
  v19 = v16 - v12 + v15;
  v20 = v14 - (v16 - v13);
  v21 = a1[9] >> 2;
  v22 = a1[11] >> 2;
  v23 = v21 + (a1[8] >> 2);
  v24 = (a1[10] >> 2) - v22;
  v25 = (v23 - v24) >> 1;
  v26 = v25 - v22;
  v27 = v25 - v21;
  v28 = v25 - v21 + v24;
  v29 = v23 - (v25 - v22);
  v30 = a1[12];
  v31 = a1[13] >> 2;
  v32 = a1[14];
  v33 = a1[15] >> 2;
  v34 = v31 + (v30 >> 2);
  v35 = (v32 >> 2) - v33;
  v36 = (v34 - v35) >> 1;
  v37 = v36 - v33;
  result = (v36 - v31);
  v39 = v34 - v37;
  v40 = a3;
  v41 = 2 * a3;
  v42 = v20 + (uint64_t)v11;
  v43 = v29 - (uint64_t)v39;
  v44 = (unint64_t)(v42 - v43) >> 1;
  v45 = v44 - v39;
  v46 = (v42 - v45 + *a2) & ~((int)(v42 - v45 + *a2) >> 31);
  if (v46 >= 255)
    LOBYTE(v46) = -1;
  *a2 = v46;
  v47 = v45 + a2[v40];
  v48 = v41 + v40;
  v49 = v47 & ~(v47 >> 31);
  if (v49 >= 255)
    LOBYTE(v49) = -1;
  a2[v40] = v49;
  v50 = v44 - v20;
  v51 = (v50 + a2[v41]) & ~((v50 + a2[v41]) >> 31);
  if (v51 >= 255)
    LOBYTE(v51) = -1;
  a2[v41] = v51;
  v52 = (v50 + v43 + a2[v48]) & ~((int)(v50 + v43 + a2[v48]) >> 31);
  if (v52 >= 255)
    LOBYTE(v52) = -1;
  a2[v48] = v52;
  v53 = v17 + (uint64_t)v8;
  v54 = v26 - (uint64_t)v37;
  v55 = (unint64_t)(v53 - v54) >> 1;
  v56 = v55 - v37;
  v57 = a2 + 1;
  v58 = (v53 - v56 + a2[1]) & ~((int)(v53 - v56 + a2[1]) >> 31);
  if (v58 >= 255)
    LOBYTE(v58) = -1;
  *v57 = v58;
  v59 = (v57[v40] + v56) & ~((v57[v40] + v56) >> 31);
  if (v59 >= 255)
    LOBYTE(v59) = -1;
  v57[v40] = v59;
  v60 = v55 - v17;
  v61 = (v57[v41] + v60) & ~((v57[v41] + v60) >> 31);
  if (v61 >= 255)
    LOBYTE(v61) = -1;
  v57[v41] = v61;
  v62 = (v57[v48] + (_DWORD)v54 + v60) & ~((v57[v48] + (int)v54 + v60) >> 31);
  if (v62 >= 255)
    LOBYTE(v62) = -1;
  v57[v48] = v62;
  v63 = v18 + (uint64_t)v9;
  v64 = v27 - (uint64_t)(int)result;
  v65 = (unint64_t)(v63 - v64) >> 1;
  v66 = v65 - result;
  v67 = a2 + 2;
  v68 = (a2[2] + v63 - v66) & ~((a2[2] + (int)v63 - v66) >> 31);
  if (v68 >= 255)
    LOBYTE(v68) = -1;
  *v67 = v68;
  v69 = (v67[v40] + v66) & ~((v67[v40] + v66) >> 31);
  if (v69 >= 255)
    LOBYTE(v69) = -1;
  v67[v40] = v69;
  v70 = v65 - v18;
  v71 = (v67[v41] + v70) & ~((v67[v41] + v70) >> 31);
  if (v71 >= 255)
    LOBYTE(v71) = -1;
  v67[v41] = v71;
  v72 = (v67[v48] + (_DWORD)v64 + v70) & ~((v67[v48] + (int)v64 + v70) >> 31);
  if (v72 >= 255)
    LOBYTE(v72) = -1;
  v67[v48] = v72;
  v73 = v19 + (uint64_t)v10;
  v74 = v28 - (uint64_t)((int)result + v35);
  v75 = (unint64_t)(v73 - v74) >> 1;
  v76 = v75 - (result + v35);
  v78 = a2[3];
  v77 = a2 + 3;
  v79 = (v78 + v73 - v76) & ~((v78 + (int)v73 - v76) >> 31);
  if (v79 >= 255)
    LOBYTE(v79) = -1;
  *v77 = v79;
  v80 = (v77[v40] + v76) & ~((v77[v40] + v76) >> 31);
  if (v80 >= 255)
    LOBYTE(v80) = -1;
  v77[v40] = v80;
  v81 = v75 - v19;
  v82 = (v77[v41] + v81) & ~((v77[v41] + v81) >> 31);
  if (v82 >= 255)
    LOBYTE(v82) = -1;
  v77[v41] = v82;
  v83 = (v77[v48] + (_DWORD)v74 + v81) & ~((v77[v48] + (int)v74 + v81) >> 31);
  if (v83 >= 255)
    LOBYTE(v83) = -1;
  v77[v48] = v83;
  return result;
}

int *vpx_iwht4x4_1_add_c(int *result, unsigned __int8 *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _BYTE *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _BYTE *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  v3 = *result;
  v4 = *result >> 3;
  v5 = (*result >> 2) - v4;
  v6 = v5 >> 1;
  v7 = (v5 + *a2 - v6) & ~((v5 + *a2 - v6) >> 31);
  if (v7 >= 255)
    LOBYTE(v7) = -1;
  *a2 = v7;
  v8 = (v6 + a2[a3]) & ~((v6 + a2[a3]) >> 31);
  if (v8 >= 255)
    LOBYTE(v8) = -1;
  a2[a3] = v8;
  v9 = (v6 + a2[2 * a3]) & ~((v6 + a2[2 * a3]) >> 31);
  if (v9 >= 255)
    LOBYTE(v9) = -1;
  a2[2 * a3] = v9;
  v10 = a2[3 * a3];
  v11 = (v6 + v10) & ~((v6 + v10) >> 31);
  if (v11 >= 255)
    LOBYTE(v11) = -1;
  a2[3 * a3] = v11;
  v12 = v3 >> 4;
  v13 = v4 - v12;
  v14 = a2 + 1;
  v15 = (v13 + a2[1]) & ~((v13 + a2[1]) >> 31);
  if (v15 >= 255)
    LOBYTE(v15) = -1;
  *v14 = v15;
  v16 = (v12 + v14[a3]) & ~((v12 + v14[a3]) >> 31);
  if (v16 >= 255)
    LOBYTE(v16) = -1;
  v14[a3] = v16;
  v17 = (v12 + v14[2 * a3]) & ~((v12 + v14[2 * a3]) >> 31);
  if (v17 >= 255)
    LOBYTE(v17) = -1;
  v14[2 * a3] = v17;
  v18 = (v12 + v14[3 * a3]) & ~((v12 + v14[3 * a3]) >> 31);
  if (v18 >= 255)
    LOBYTE(v18) = -1;
  v14[3 * a3] = v18;
  v19 = a2 + 2;
  v20 = (v13 + a2[2]) & ~((v13 + a2[2]) >> 31);
  if (v20 >= 255)
    LOBYTE(v20) = -1;
  *v19 = v20;
  v21 = (v12 + v19[a3]) & ~((v12 + v19[a3]) >> 31);
  if (v21 >= 255)
    LOBYTE(v21) = -1;
  v19[a3] = v21;
  v22 = (v12 + v19[2 * a3]) & ~((v12 + v19[2 * a3]) >> 31);
  if (v22 >= 255)
    LOBYTE(v22) = -1;
  v19[2 * a3] = v22;
  v23 = (v12 + v19[3 * a3]) & ~((v12 + v19[3 * a3]) >> 31);
  if (v23 >= 255)
    LOBYTE(v23) = -1;
  v19[3 * a3] = v23;
  v25 = a2[3];
  v24 = a2 + 3;
  v26 = (v13 + v25) & ~((v13 + v25) >> 31);
  if (v26 >= 255)
    LOBYTE(v26) = -1;
  *v24 = v26;
  v27 = (v12 + v24[a3]) & ~((v12 + v24[a3]) >> 31);
  if (v27 >= 255)
    LOBYTE(v27) = -1;
  v24[a3] = v27;
  v28 = (v12 + v24[2 * a3]) & ~((v12 + v24[2 * a3]) >> 31);
  if (v28 >= 255)
    LOBYTE(v28) = -1;
  v24[2 * a3] = v28;
  v29 = (v12 + v24[3 * a3]) & ~((v12 + v24[3 * a3]) >> 31);
  if (v29 >= 255)
    LOBYTE(v29) = -1;
  v24[3 * a3] = v29;
  return result;
}

uint64_t vpx_highbd_iwht4x4_16_add_c(int *a1, unsigned __int16 *a2, int a3, int a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t result;
  int v61;
  _WORD *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  _WORD *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  _WORD *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  _WORD *v104;
  int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  int v113;
  _WORD *v114;
  int v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  int v123;
  _WORD *v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  _WORD *v146;
  int v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  int v154;
  int v155;
  _WORD *v156;
  int v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  int v164;
  int v165;
  _WORD *v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;

  v4 = a1[1] >> 2;
  v5 = v4 + (*a1 >> 2);
  v6 = a1[3] >> 2;
  v7 = (a1[2] >> 2) - v6;
  v8 = (v5 - v7) >> 1;
  v9 = v8 - v6;
  v10 = v8 - v4;
  v11 = v8 - v4 + v7;
  v12 = v5 - (v8 - v6);
  v13 = a1[5] >> 2;
  v14 = a1[7] >> 2;
  v15 = v13 + (a1[4] >> 2);
  v16 = (a1[6] >> 2) - v14;
  v17 = (v15 - v16) >> 1;
  v18 = v17 - v14;
  v19 = v17 - v13;
  v20 = v17 - v13 + v16;
  v21 = v15 - v18;
  v22 = a1[9] >> 2;
  v23 = a1[11] >> 2;
  v24 = v22 + (a1[8] >> 2);
  v25 = (a1[10] >> 2) - v23;
  v26 = (v24 - v25) >> 1;
  v27 = v26 - v23;
  v28 = v26 - v22;
  v29 = v26 - v22 + v25;
  v30 = v24 - v27;
  v31 = a1[12];
  v32 = a1[13] >> 2;
  v33 = a1[14];
  v34 = a1[15] >> 2;
  v35 = v32 + (v31 >> 2);
  v36 = (v33 >> 2) - v34;
  v37 = (v35 - v36) >> 1;
  v38 = v37 - v34;
  v39 = v37 - v32;
  v40 = v39 + v36;
  v41 = v35 - v38;
  v42 = a3;
  v43 = 2 * a3;
  v44 = 3 * a3;
  if (a4 == 12)
  {
    v88 = v21 + (uint64_t)v12;
    v89 = v30 - (uint64_t)v41;
    v90 = (unint64_t)(v88 - v89) >> 1;
    v91 = v90 - v41;
    v92 = v90 - v21;
    v93 = *a2 + v88 - v91;
    if (v93 >= 4095)
      v93 = 4095;
    *a2 = v93 & ~(unsigned __int16)(v93 >> 31);
    v94 = v42;
    v95 = a2[v42] + v91;
    if (v95 >= 4095)
      v95 = 4095;
    a2[v94] = v95 & ~(unsigned __int16)(v95 >> 31);
    v96 = v43;
    v97 = a2[v96] + v92;
    if (v97 >= 4095)
      v97 = 4095;
    a2[v96] = v97 & ~(unsigned __int16)(v97 >> 31);
    v98 = v44;
    v99 = a2[v98] + (_DWORD)v89 + v92;
    if (v99 >= 4095)
      v99 = 4095;
    a2[v98] = v99 & ~(unsigned __int16)(v99 >> 31);
    v100 = v18 + (uint64_t)v9;
    v101 = v27 - (uint64_t)v38;
    v102 = (unint64_t)(v100 - v101) >> 1;
    result = (v102 - v38);
    v103 = v102 - v18;
    v104 = a2 + 1;
    v105 = a2[1] + v100 - result;
    if (v105 >= 4095)
      v105 = 4095;
    *v104 = v105 & ~(unsigned __int16)(v105 >> 31);
    v106 = (unsigned __int16)v104[v94] + (_DWORD)result;
    if (v106 >= 4095)
      v106 = 4095;
    v104[v94] = v106 & ~(unsigned __int16)(v106 >> 31);
    v107 = (unsigned __int16)v104[v96] + v103;
    if (v107 >= 4095)
      v107 = 4095;
    v104[v96] = v107 & ~(unsigned __int16)(v107 >> 31);
    v108 = (unsigned __int16)v104[v98] + (_DWORD)v101 + v103;
    if (v108 >= 4095)
      v108 = 4095;
    v104[v98] = v108 & ~(unsigned __int16)(v108 >> 31);
    v109 = v19 + (uint64_t)v10;
    v110 = v28 - (uint64_t)v39;
    v111 = (unint64_t)(v109 - v110) >> 1;
    v112 = v111 - v39;
    v113 = v111 - v19;
    v114 = a2 + 2;
    v115 = a2[2] + v109 - v112;
    if (v115 >= 4095)
      v115 = 4095;
    *v114 = v115 & ~(unsigned __int16)(v115 >> 31);
    v116 = (unsigned __int16)v114[v94] + v112;
    if (v116 >= 4095)
      v116 = 4095;
    v114[v94] = v116 & ~(unsigned __int16)(v116 >> 31);
    v117 = (unsigned __int16)v114[v96] + v113;
    if (v117 >= 4095)
      v117 = 4095;
    v114[v96] = v117 & ~(unsigned __int16)(v117 >> 31);
    v118 = (unsigned __int16)v114[v98] + (_DWORD)v110 + v113;
    if (v118 >= 4095)
      v118 = 4095;
    v114[v98] = v118 & ~(unsigned __int16)(v118 >> 31);
    v119 = v20 + (uint64_t)v11;
    v120 = v29 - (uint64_t)v40;
    v121 = (unint64_t)(v119 - v120) >> 1;
    v122 = v121 - v40;
    v123 = v121 - v20;
    v125 = a2[3];
    v124 = a2 + 3;
    v126 = v125 + v119 - v122;
    if (v126 >= 4095)
      v126 = 4095;
    *v124 = v126 & ~(unsigned __int16)(v126 >> 31);
    v127 = (unsigned __int16)v124[v94] + v122;
    if (v127 >= 4095)
      v127 = 4095;
    v124[v94] = v127 & ~(unsigned __int16)(v127 >> 31);
    v128 = (unsigned __int16)v124[v96] + v123;
    if (v128 >= 4095)
      v128 = 4095;
    v124[v96] = v128 & ~(unsigned __int16)(v128 >> 31);
    v129 = (unsigned __int16)v124[v98] + (_DWORD)v120 + v123;
    if (v129 >= 4095)
      v129 = 4095;
    v124[v98] = v129 & ~(unsigned __int16)(v129 >> 31);
  }
  else if (a4 == 10)
  {
    v45 = v21 + (uint64_t)v12;
    v46 = v30 - (uint64_t)v41;
    v47 = (unint64_t)(v45 - v46) >> 1;
    v48 = v47 - v41;
    v49 = v47 - v21;
    v50 = *a2 + v45 - v48;
    if (v50 >= 1023)
      v50 = 1023;
    *a2 = v50 & ~(unsigned __int16)(v50 >> 31);
    v51 = v42;
    v52 = a2[v42] + v48;
    if (v52 >= 1023)
      v52 = 1023;
    a2[v51] = v52 & ~(unsigned __int16)(v52 >> 31);
    v53 = v43;
    v54 = a2[v53] + v49;
    if (v54 >= 1023)
      v54 = 1023;
    a2[v53] = v54 & ~(unsigned __int16)(v54 >> 31);
    v55 = v44;
    v56 = a2[v55] + (_DWORD)v46 + v49;
    if (v56 >= 1023)
      v56 = 1023;
    a2[v55] = v56 & ~(unsigned __int16)(v56 >> 31);
    v57 = v18 + (uint64_t)v9;
    v58 = v27 - (uint64_t)v38;
    v59 = (unint64_t)(v57 - v58) >> 1;
    result = (v59 - v38);
    v61 = v59 - v18;
    v62 = a2 + 1;
    v63 = a2[1] + v57 - result;
    if (v63 >= 1023)
      v63 = 1023;
    *v62 = v63 & ~(unsigned __int16)(v63 >> 31);
    v64 = (unsigned __int16)v62[v51] + (_DWORD)result;
    if (v64 >= 1023)
      v64 = 1023;
    v62[v51] = v64 & ~(unsigned __int16)(v64 >> 31);
    v65 = (unsigned __int16)v62[v53] + v61;
    if (v65 >= 1023)
      v65 = 1023;
    v62[v53] = v65 & ~(unsigned __int16)(v65 >> 31);
    v66 = (unsigned __int16)v62[v55] + (_DWORD)v58 + v61;
    if (v66 >= 1023)
      v66 = 1023;
    v62[v55] = v66 & ~(unsigned __int16)(v66 >> 31);
    v67 = v19 + (uint64_t)v10;
    v68 = v28 - (uint64_t)v39;
    v69 = (unint64_t)(v67 - v68) >> 1;
    v70 = v69 - v39;
    v71 = v69 - v19;
    v72 = a2 + 2;
    v73 = a2[2] + v67 - v70;
    if (v73 >= 1023)
      v73 = 1023;
    *v72 = v73 & ~(unsigned __int16)(v73 >> 31);
    v74 = (unsigned __int16)v72[v51] + v70;
    if (v74 >= 1023)
      v74 = 1023;
    v72[v51] = v74 & ~(unsigned __int16)(v74 >> 31);
    v75 = (unsigned __int16)v72[v53] + v71;
    if (v75 >= 1023)
      v75 = 1023;
    v72[v53] = v75 & ~(unsigned __int16)(v75 >> 31);
    v76 = (unsigned __int16)v72[v55] + (_DWORD)v68 + v71;
    if (v76 >= 1023)
      v76 = 1023;
    v72[v55] = v76 & ~(unsigned __int16)(v76 >> 31);
    v77 = v20 + (uint64_t)v11;
    v78 = v29 - (uint64_t)v40;
    v79 = (unint64_t)(v77 - v78) >> 1;
    v80 = v79 - v40;
    v81 = v79 - v20;
    v83 = a2[3];
    v82 = a2 + 3;
    v84 = v83 + v77 - v80;
    if (v84 >= 1023)
      v84 = 1023;
    *v82 = v84 & ~(unsigned __int16)(v84 >> 31);
    v85 = (unsigned __int16)v82[v51] + v80;
    if (v85 >= 1023)
      v85 = 1023;
    v82[v51] = v85 & ~(unsigned __int16)(v85 >> 31);
    v86 = (unsigned __int16)v82[v53] + v81;
    if (v86 >= 1023)
      v86 = 1023;
    v82[v53] = v86 & ~(unsigned __int16)(v86 >> 31);
    v87 = (unsigned __int16)v82[v55] + (_DWORD)v78 + v81;
    if (v87 >= 1023)
      v87 = 1023;
    v82[v55] = v87 & ~(unsigned __int16)(v87 >> 31);
  }
  else
  {
    v130 = v21 + (uint64_t)v12;
    v131 = v30 - (uint64_t)v41;
    v132 = (unint64_t)(v130 - v131) >> 1;
    v133 = v132 - v41;
    v134 = v132 - v21;
    v135 = *a2 + v130 - v133;
    if (v135 >= 255)
      v135 = 255;
    *a2 = v135 & ~(unsigned __int16)(v135 >> 31);
    v136 = v42;
    v137 = a2[v42] + v133;
    if (v137 >= 255)
      v137 = 255;
    a2[v136] = v137 & ~(unsigned __int16)(v137 >> 31);
    v138 = v43;
    v139 = a2[v138] + v134;
    if (v139 >= 255)
      v139 = 255;
    a2[v138] = v139 & ~(unsigned __int16)(v139 >> 31);
    v140 = v44;
    v141 = a2[v140] + (_DWORD)v131 + v134;
    if (v141 >= 255)
      v141 = 255;
    a2[v140] = v141 & ~(unsigned __int16)(v141 >> 31);
    v142 = v18 + (uint64_t)v9;
    v143 = v27 - (uint64_t)v38;
    v144 = (unint64_t)(v142 - v143) >> 1;
    result = (v144 - v38);
    v145 = v144 - v18;
    v146 = a2 + 1;
    v147 = a2[1] + v142 - result;
    if (v147 >= 255)
      v147 = 255;
    *v146 = v147 & ~(unsigned __int16)(v147 >> 31);
    v148 = (unsigned __int16)v146[v136] + (_DWORD)result;
    if (v148 >= 255)
      v148 = 255;
    v146[v136] = v148 & ~(unsigned __int16)(v148 >> 31);
    v149 = (unsigned __int16)v146[v138] + v145;
    if (v149 >= 255)
      v149 = 255;
    v146[v138] = v149 & ~(unsigned __int16)(v149 >> 31);
    v150 = (unsigned __int16)v146[v140] + (_DWORD)v143 + v145;
    if (v150 >= 255)
      v150 = 255;
    v146[v140] = v150 & ~(unsigned __int16)(v150 >> 31);
    v151 = v19 + (uint64_t)v10;
    v152 = v28 - (uint64_t)v39;
    v153 = (unint64_t)(v151 - v152) >> 1;
    v154 = v153 - v39;
    v155 = v153 - v19;
    v156 = a2 + 2;
    v157 = a2[2] + v151 - v154;
    if (v157 >= 255)
      v157 = 255;
    *v156 = v157 & ~(unsigned __int16)(v157 >> 31);
    v158 = (unsigned __int16)v156[v136] + v154;
    if (v158 >= 255)
      v158 = 255;
    v156[v136] = v158 & ~(unsigned __int16)(v158 >> 31);
    v159 = (unsigned __int16)v156[v138] + v155;
    if (v159 >= 255)
      v159 = 255;
    v156[v138] = v159 & ~(unsigned __int16)(v159 >> 31);
    v160 = (unsigned __int16)v156[v140] + (_DWORD)v152 + v155;
    if (v160 >= 255)
      v160 = 255;
    v156[v140] = v160 & ~(unsigned __int16)(v160 >> 31);
    v161 = v20 + (uint64_t)v11;
    v162 = v29 - (uint64_t)v40;
    v163 = (unint64_t)(v161 - v162) >> 1;
    v164 = v163 - v40;
    v165 = v163 - v20;
    v167 = a2[3];
    v166 = a2 + 3;
    v168 = v167 + v161 - v164;
    if (v168 >= 255)
      v168 = 255;
    *v166 = v168 & ~(unsigned __int16)(v168 >> 31);
    v169 = (unsigned __int16)v166[v136] + v164;
    if (v169 >= 255)
      v169 = 255;
    v166[v136] = v169 & ~(unsigned __int16)(v169 >> 31);
    v170 = (unsigned __int16)v166[v138] + v165;
    if (v170 >= 255)
      v170 = 255;
    v166[v138] = v170 & ~(unsigned __int16)(v170 >> 31);
    v171 = (unsigned __int16)v166[v140] + (_DWORD)v162 + v165;
    if (v171 >= 255)
      v171 = 255;
    v166[v140] = v171 & ~(unsigned __int16)(v171 >> 31);
  }
  return result;
}

int *vpx_highbd_iwht4x4_1_add_c(int *result, unsigned __int16 *a2, int a3, int a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _WORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _WORD *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _WORD *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  _WORD *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  _WORD *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  _WORD *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  _WORD *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  _WORD *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  _WORD *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;

  v4 = *result;
  v5 = *result >> 3;
  v6 = (*result >> 2) - v5;
  v7 = v6 >> 1;
  v8 = v6 - (v6 >> 1);
  if (a4 == 12)
  {
    v31 = v8 + *a2;
    if (v31 >= 4095)
      v31 = 4095;
    *a2 = v31 & ~(unsigned __int16)(v31 >> 31);
    v32 = v7 + a2[a3];
    if (v32 >= 4095)
      v32 = 4095;
    a2[a3] = v32 & ~(unsigned __int16)(v32 >> 31);
    v33 = v7 + a2[2 * a3];
    if (v33 >= 4095)
      v33 = 4095;
    a2[2 * a3] = v33 & ~(unsigned __int16)(v33 >> 31);
    v34 = v7 + a2[3 * a3];
    if (v34 >= 4095)
      v34 = 4095;
    a2[3 * a3] = v34 & ~(unsigned __int16)(v34 >> 31);
    v35 = v4 >> 4;
    v36 = v5 - v35;
    v37 = a2 + 1;
    v38 = v36 + a2[1];
    if (v38 >= 4095)
      v38 = 4095;
    *v37 = v38 & ~(unsigned __int16)(v38 >> 31);
    v39 = v35 + (unsigned __int16)v37[a3];
    if (v39 >= 4095)
      v39 = 4095;
    v37[a3] = v39 & ~(unsigned __int16)(v39 >> 31);
    v40 = v35 + (unsigned __int16)v37[2 * a3];
    if (v40 >= 4095)
      v40 = 4095;
    v37[2 * a3] = v40 & ~(unsigned __int16)(v40 >> 31);
    v41 = v35 + (unsigned __int16)v37[3 * a3];
    if (v41 >= 4095)
      v41 = 4095;
    v37[3 * a3] = v41 & ~(unsigned __int16)(v41 >> 31);
    v42 = a2 + 2;
    v43 = v36 + a2[2];
    if (v43 >= 4095)
      v43 = 4095;
    *v42 = v43 & ~(unsigned __int16)(v43 >> 31);
    v44 = v35 + (unsigned __int16)v42[a3];
    if (v44 >= 4095)
      v44 = 4095;
    v42[a3] = v44 & ~(unsigned __int16)(v44 >> 31);
    v45 = v35 + (unsigned __int16)v42[2 * a3];
    if (v45 >= 4095)
      v45 = 4095;
    v42[2 * a3] = v45 & ~(unsigned __int16)(v45 >> 31);
    v46 = v35 + (unsigned __int16)v42[3 * a3];
    if (v46 >= 4095)
      v46 = 4095;
    v42[3 * a3] = v46 & ~(unsigned __int16)(v46 >> 31);
    v48 = a2[3];
    v47 = a2 + 3;
    v49 = v36 + v48;
    if (v49 >= 4095)
      v49 = 4095;
    *v47 = v49 & ~(unsigned __int16)(v49 >> 31);
    v50 = v35 + (unsigned __int16)v47[a3];
    if (v50 >= 4095)
      v50 = 4095;
    v47[a3] = v50 & ~(unsigned __int16)(v50 >> 31);
    v51 = v35 + (unsigned __int16)v47[2 * a3];
    if (v51 >= 4095)
      v51 = 4095;
    v47[2 * a3] = v51 & ~(unsigned __int16)(v51 >> 31);
    v52 = v35 + (unsigned __int16)v47[3 * a3];
    if (v52 >= 4095)
      v52 = 4095;
    v47[3 * a3] = v52 & ~(unsigned __int16)(v52 >> 31);
  }
  else if (a4 == 10)
  {
    v9 = v8 + *a2;
    if (v9 >= 1023)
      v9 = 1023;
    *a2 = v9 & ~(unsigned __int16)(v9 >> 31);
    v10 = v7 + a2[a3];
    if (v10 >= 1023)
      v10 = 1023;
    a2[a3] = v10 & ~(unsigned __int16)(v10 >> 31);
    v11 = v7 + a2[2 * a3];
    if (v11 >= 1023)
      v11 = 1023;
    a2[2 * a3] = v11 & ~(unsigned __int16)(v11 >> 31);
    v12 = v7 + a2[3 * a3];
    if (v12 >= 1023)
      v12 = 1023;
    a2[3 * a3] = v12 & ~(unsigned __int16)(v12 >> 31);
    v13 = v4 >> 4;
    v14 = v5 - v13;
    v15 = a2 + 1;
    v16 = v14 + a2[1];
    if (v16 >= 1023)
      v16 = 1023;
    *v15 = v16 & ~(unsigned __int16)(v16 >> 31);
    v17 = v13 + (unsigned __int16)v15[a3];
    if (v17 >= 1023)
      v17 = 1023;
    v15[a3] = v17 & ~(unsigned __int16)(v17 >> 31);
    v18 = v13 + (unsigned __int16)v15[2 * a3];
    if (v18 >= 1023)
      v18 = 1023;
    v15[2 * a3] = v18 & ~(unsigned __int16)(v18 >> 31);
    v19 = v13 + (unsigned __int16)v15[3 * a3];
    if (v19 >= 1023)
      v19 = 1023;
    v15[3 * a3] = v19 & ~(unsigned __int16)(v19 >> 31);
    v20 = a2 + 2;
    v21 = v14 + a2[2];
    if (v21 >= 1023)
      v21 = 1023;
    *v20 = v21 & ~(unsigned __int16)(v21 >> 31);
    v22 = v13 + (unsigned __int16)v20[a3];
    if (v22 >= 1023)
      v22 = 1023;
    v20[a3] = v22 & ~(unsigned __int16)(v22 >> 31);
    v23 = v13 + (unsigned __int16)v20[2 * a3];
    if (v23 >= 1023)
      v23 = 1023;
    v20[2 * a3] = v23 & ~(unsigned __int16)(v23 >> 31);
    v24 = v13 + (unsigned __int16)v20[3 * a3];
    if (v24 >= 1023)
      v24 = 1023;
    v20[3 * a3] = v24 & ~(unsigned __int16)(v24 >> 31);
    v26 = a2[3];
    v25 = a2 + 3;
    v27 = v14 + v26;
    if (v27 >= 1023)
      v27 = 1023;
    *v25 = v27 & ~(unsigned __int16)(v27 >> 31);
    v28 = v13 + (unsigned __int16)v25[a3];
    if (v28 >= 1023)
      v28 = 1023;
    v25[a3] = v28 & ~(unsigned __int16)(v28 >> 31);
    v29 = v13 + (unsigned __int16)v25[2 * a3];
    if (v29 >= 1023)
      v29 = 1023;
    v25[2 * a3] = v29 & ~(unsigned __int16)(v29 >> 31);
    v30 = v13 + (unsigned __int16)v25[3 * a3];
    if (v30 >= 1023)
      v30 = 1023;
    v25[3 * a3] = v30 & ~(unsigned __int16)(v30 >> 31);
  }
  else
  {
    v53 = v8 + *a2;
    if (v53 >= 255)
      v53 = 255;
    *a2 = v53 & ~(unsigned __int16)(v53 >> 31);
    v54 = v7 + a2[a3];
    if (v54 >= 255)
      v54 = 255;
    a2[a3] = v54 & ~(unsigned __int16)(v54 >> 31);
    v55 = v7 + a2[2 * a3];
    if (v55 >= 255)
      v55 = 255;
    a2[2 * a3] = v55 & ~(unsigned __int16)(v55 >> 31);
    v56 = v7 + a2[3 * a3];
    if (v56 >= 255)
      v56 = 255;
    a2[3 * a3] = v56 & ~(unsigned __int16)(v56 >> 31);
    v57 = v4 >> 4;
    v58 = v5 - v57;
    v59 = a2 + 1;
    v60 = v58 + a2[1];
    if (v60 >= 255)
      v60 = 255;
    *v59 = v60 & ~(unsigned __int16)(v60 >> 31);
    v61 = v57 + (unsigned __int16)v59[a3];
    if (v61 >= 255)
      v61 = 255;
    v59[a3] = v61 & ~(unsigned __int16)(v61 >> 31);
    v62 = v57 + (unsigned __int16)v59[2 * a3];
    if (v62 >= 255)
      v62 = 255;
    v59[2 * a3] = v62 & ~(unsigned __int16)(v62 >> 31);
    v63 = v57 + (unsigned __int16)v59[3 * a3];
    if (v63 >= 255)
      v63 = 255;
    v59[3 * a3] = v63 & ~(unsigned __int16)(v63 >> 31);
    v64 = a2 + 2;
    v65 = v58 + a2[2];
    if (v65 >= 255)
      v65 = 255;
    *v64 = v65 & ~(unsigned __int16)(v65 >> 31);
    v66 = v57 + (unsigned __int16)v64[a3];
    if (v66 >= 255)
      v66 = 255;
    v64[a3] = v66 & ~(unsigned __int16)(v66 >> 31);
    v67 = v57 + (unsigned __int16)v64[2 * a3];
    if (v67 >= 255)
      v67 = 255;
    v64[2 * a3] = v67 & ~(unsigned __int16)(v67 >> 31);
    v68 = v57 + (unsigned __int16)v64[3 * a3];
    if (v68 >= 255)
      v68 = 255;
    v64[3 * a3] = v68 & ~(unsigned __int16)(v68 >> 31);
    v70 = a2[3];
    v69 = a2 + 3;
    v71 = v58 + v70;
    if (v71 >= 255)
      v71 = 255;
    *v69 = v71 & ~(unsigned __int16)(v71 >> 31);
    v72 = v57 + (unsigned __int16)v69[a3];
    if (v72 >= 255)
      v72 = 255;
    v69[a3] = v72 & ~(unsigned __int16)(v72 >> 31);
    v73 = v57 + (unsigned __int16)v69[2 * a3];
    if (v73 >= 255)
      v73 = 255;
    v69[2 * a3] = v73 & ~(unsigned __int16)(v73 >> 31);
    v74 = v57 + (unsigned __int16)v69[3 * a3];
    if (v74 >= 255)
      v74 = 255;
    v69[3 * a3] = v74 & ~(unsigned __int16)(v74 >> 31);
  }
  return result;
}

_QWORD *vp8_lookahead_init(int a1, int a2)
{
  _DWORD *v4;
  _QWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;

  v4 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200403ED2C137uLL);
  v5 = v4;
  if (v4)
  {
    *v4 = 2;
    v6 = malloc_type_calloc(2uLL, 0xB8uLL, 0x10100400B4EC111uLL);
    v5[2] = v6;
    if (!v6)
    {
LABEL_22:
      free(v5);
      return 0;
    }
    v7 = v6;
    v8 = (a1 + 15) & 0xFFFFFFF0;
    v9 = (a2 + 15) & 0xFFFFFFF0;
    if (*((_QWORD *)v6 + 12))
    {
      v10 = *((_QWORD *)v6 + 11);
      if (v10)
        free(*(void **)(v10 - 8));
    }
    v7[8] = 0u;
    v7[9] = 0u;
    v7[6] = 0u;
    v7[7] = 0u;
    v7[4] = 0u;
    v7[5] = 0u;
    v7[2] = 0u;
    v7[3] = 0u;
    *v7 = 0u;
    v7[1] = 0u;
    if (vp8_yv12_realloc_frame_buffer((uint64_t)v7, v8, v9, 32))
      goto LABEL_11;
    v11 = v5[2];
    v12 = (_OWORD *)(v11 + 184);
    if (*(_QWORD *)(v11 + 280))
    {
      v13 = *(_QWORD *)(v11 + 272);
      if (v13)
        free(*(void **)(v13 - 8));
    }
    v12[8] = 0u;
    v12[9] = 0u;
    v12[6] = 0u;
    v12[7] = 0u;
    v12[4] = 0u;
    v12[5] = 0u;
    v12[2] = 0u;
    v12[3] = 0u;
    *v12 = 0u;
    v12[1] = 0u;
    if (vp8_yv12_realloc_frame_buffer((uint64_t)v12, v8, v9, 32))
    {
LABEL_11:
      v14 = (void *)v5[2];
      if (v14)
      {
        v15 = *(unsigned int *)v5;
        if ((_DWORD)v15)
        {
          v16 = 0;
          v17 = 0;
          v18 = 0uLL;
          do
          {
            v19 = v5[2];
            if (v19)
            {
              v20 = (_OWORD *)(v19 + v16);
              if (*(_QWORD *)(v19 + v16 + 96))
              {
                v21 = *(_QWORD *)(v19 + v16 + 88);
                if (v21)
                {
                  free(*(void **)(v21 - 8));
                  v18 = 0uLL;
                }
              }
              v20[8] = v18;
              v20[9] = v18;
              v20[6] = v18;
              v20[7] = v18;
              v20[4] = v18;
              v20[5] = v18;
              v20[2] = v18;
              v20[3] = v18;
              *v20 = v18;
              v20[1] = v18;
              v15 = *(unsigned int *)v5;
            }
            ++v17;
            v16 += 184;
          }
          while (v17 < v15);
          v14 = (void *)v5[2];
        }
        free(v14);
      }
      goto LABEL_22;
    }
  }
  return v5;
}

uint64_t vp8_lookahead_push(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  unsigned int v6;
  int v7;
  uint64_t result;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)(a1 + 4);
  if ((v7 + 2) > *(_DWORD *)a1)
    return 1;
  v10 = *a2;
  v11 = a2[1];
  *(_DWORD *)(a1 + 4) = v7 + 1;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_DWORD *)(a1 + 12);
  if (v13 + 1 >= v6)
    v14 = v6;
  else
    v14 = 0;
  v15 = v12 + 184 * v13;
  *(_DWORD *)(a1 + 12) = v13 + 1 - v14;
  v24 = v12;
  if (!a5 && (v16 = a6) != 0 && v6 == 1)
  {
    if (v11 >= 1)
    {
      v17 = 0;
      v18 = (v11 + 15) >> 4;
      v19 = ((v10 + 15) >> 4);
      if (v18 <= 1)
        v20 = 1;
      else
        v20 = v18;
      do
      {
        for (i = 0; ; i = v22)
        {
          if ((int)i < (int)v19)
          {
            i = (int)i;
            while (!*(_BYTE *)(v16 + i))
            {
              if ((int)v19 == ++i)
                goto LABEL_13;
            }
          }
          if ((_DWORD)i == (_DWORD)v19)
            break;
          v22 = i;
          if ((int)i < (int)v19)
          {
            v22 = (int)i;
            while (*(_BYTE *)(v16 + v22))
            {
              if ((int)v19 == ++v22)
              {
                v22 = v19;
                break;
              }
            }
          }
          vp8_copy_and_extend_frame_with_rect((uint64_t)a2, v15, 16 * v17, 16 * i, 16, 16 * (v22 - i));
        }
LABEL_13:
        v16 += (int)v19;
        ++v17;
      }
      while (v17 != v20);
    }
  }
  else
  {
    vp8_copy_and_extend_frame((uint64_t)a2, v12 + 184 * v13);
  }
  result = 0;
  v23 = v24 + 184 * v13;
  *(_QWORD *)(v23 + 160) = a3;
  *(_QWORD *)(v23 + 168) = a4;
  *(_DWORD *)(v23 + 176) = a5;
  return result;
}

int8x8_t vpx_lpf_vertical_4_neon(uint64_t a1, int a2, const char *a3, const char *a4, const char *a5, double a6, double a7, double a8, int8x16_t a9, int8x16_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13)
{
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint8x8_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x8_t v39;
  int8x8_t v40;
  uint8x8_t v41;
  int8x8_t v42;
  int8x8_t v43;
  int8x8_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int8x8_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x8_t result;
  int8x8_t v52;
  int8x8_t v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;

  v16 = (uint8x8_t)vld1_dup_s8(a3);
  v17 = (uint8x8_t)vld1_dup_s8(a4);
  v18 = (uint8x8_t)vld1_dup_s8(a5);
  v20 = *(_QWORD *)(a1 - 4);
  v19 = (_BYTE *)(a1 - 4);
  a9.i64[0] = v20;
  v21 = (unint64_t *)&v19[a2];
  a10.i64[0] = *v21;
  v22 = (unint64_t *)((char *)v21 + a2);
  a11.i64[0] = *v22;
  v23 = (unint64_t *)((char *)v22 + a2);
  a12.i64[0] = *v23;
  v24 = (unint64_t *)((char *)v23 + a2);
  a13.i64[0] = *v24;
  v25 = (uint64_t *)((char *)v24 + a2);
  v13.i64[0] = *v25;
  v26 = (uint64_t *)((char *)v25 + a2);
  v14.i64[0] = *v26;
  v15.i64[0] = *(uint64_t *)((char *)v26 + a2);
  v27 = (int16x8_t)vzip1q_s8(a9, a10);
  v28 = (int16x8_t)vzip1q_s8(a11, a12);
  v29 = (int16x8_t)vzip1q_s8(a13, v13);
  v30 = (int16x8_t)vzip1q_s8(v14, v15);
  v31 = (int32x4_t)vzip1q_s16(v27, v28);
  v32 = (int32x4_t)vzip2q_s16(v27, v28);
  v33 = (int32x4_t)vzip1q_s16(v29, v30);
  v34 = (int32x4_t)vzip2q_s16(v29, v30);
  v35 = (int8x16_t)vzip1q_s32(v31, v33);
  v36 = (int8x16_t)vzip2q_s32(v31, v33);
  v37 = (int8x16_t)vzip1q_s32(v32, v34);
  v38 = (int8x16_t)vzip2q_s32(v32, v34);
  v34.i64[0] = vextq_s8(v35, v35, 8uLL).u64[0];
  v39 = (int8x8_t)vextq_s8(v36, v36, 8uLL).u64[0];
  v40 = (int8x8_t)vextq_s8(v37, v37, 8uLL).u64[0];
  v41 = vmax_u8(vabd_u8(*(uint8x8_t *)v36.i8, (uint8x8_t)v39), vabd_u8((uint8x8_t)v40, *(uint8x8_t *)v37.i8));
  v42 = (int8x8_t)vcgt_u8(v41, v18);
  *(uint8x8_t *)v38.i8 = vmax_u8(vmax_u8(vmax_u8(vmax_u8(v41, vabd_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v34.i8)), vabd_u8(*(uint8x8_t *)v34.i8, *(uint8x8_t *)v36.i8)), vabd_u8(*(uint8x8_t *)v38.i8, (uint8x8_t)v40)), vabd_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL), *(uint8x8_t *)v38.i8));
  *(uint8x8_t *)v34.i8 = vabd_u8((uint8x8_t)v39, *(uint8x8_t *)v37.i8);
  v43 = (int8x8_t)vcge_u8(v16, vqadd_u8(vqadd_u8(*(uint8x8_t *)v34.i8, *(uint8x8_t *)v34.i8), vshr_n_u8(vabd_u8(*(uint8x8_t *)v36.i8, (uint8x8_t)v40), 1uLL)));
  *(int8x8_t *)v36.i8 = veor_s8(*(int8x8_t *)v36.i8, (int8x8_t)0x8080808080808080);
  *(int8x8_t *)v34.i8 = veor_s8(v39, (int8x8_t)0x8080808080808080);
  *(int8x8_t *)v35.i8 = veor_s8(*(int8x8_t *)v37.i8, (int8x8_t)0x8080808080808080);
  *(int8x8_t *)v37.i8 = veor_s8(v40, (int8x8_t)0x8080808080808080);
  v44 = vqsub_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v34.i8);
  v45 = vand_s8(vand_s8(vqadd_s8(vqadd_s8(vqadd_s8(vand_s8(vqsub_s8(*(int8x8_t *)v36.i8, *(int8x8_t *)v37.i8), v42), v44), v44), v44), v43), (int8x8_t)vcge_u8(v17, *(uint8x8_t *)v38.i8));
  v46 = vshr_n_s8(vqadd_s8(v45, (int8x8_t)0x404040404040404), 3uLL);
  v47 = veor_s8(vqsub_s8(*(int8x8_t *)v35.i8, v46), (int8x8_t)0x8080808080808080);
  v48 = veor_s8(vqadd_s8(*(int8x8_t *)v34.i8, vshr_n_s8(vqadd_s8(v45, (int8x8_t)0x303030303030303), 3uLL)), (int8x8_t)0x8080808080808080);
  v49 = vbic_s8(vrshr_n_s8(v46, 1uLL), v42);
  v50 = vqsub_s8(*(int8x8_t *)v37.i8, v49);
  result = vqadd_s8(*(int8x8_t *)v36.i8, v49);
  v52 = veor_s8(v50, (int8x8_t)0x8080808080808080);
  v53 = veor_s8(result, (int8x8_t)0x8080808080808080);
  v19[2] = v53.i8[0];
  v19[3] = v48.i8[0];
  v19[4] = v47.i8[0];
  v19[5] = v52.i8[0];
  v54 = &v19[a2 + 2];
  *v54 = v53.i8[1];
  v54[1] = v48.i8[1];
  v54[2] = v47.i8[1];
  v54[3] = v52.i8[1];
  v55 = &v54[a2];
  *v55 = v53.i8[2];
  v55[1] = v48.i8[2];
  v55[2] = v47.i8[2];
  v55[3] = v52.i8[2];
  v56 = &v55[a2];
  *v56 = v53.i8[3];
  v56[1] = v48.i8[3];
  v56[2] = v47.i8[3];
  v56[3] = v52.i8[3];
  v57 = &v56[a2];
  *v57 = v53.i8[4];
  v57[1] = v48.i8[4];
  v57[2] = v47.i8[4];
  v57[3] = v52.i8[4];
  v58 = &v57[a2];
  *v58 = v53.i8[5];
  v58[1] = v48.i8[5];
  v58[2] = v47.i8[5];
  v58[3] = v52.i8[5];
  v59 = &v58[a2];
  *v59 = v53.i8[6];
  v59[1] = v48.i8[6];
  v59[2] = v47.i8[6];
  v59[3] = v52.i8[6];
  v60 = &v59[a2];
  *v60 = v53.i8[7];
  v60[1] = v48.i8[7];
  v60[2] = v47.i8[7];
  v60[3] = v52.i8[7];
  return result;
}

double vpx_lpf_vertical_4_dual_neon(uint64_t a1, int a2, const char *a3, const char *a4, const char *a5, const char *a6, const char *a7, const char *a8)
{
  int8x8_t v8;
  uint8x16_t v9;
  int8x8_t v10;
  uint8x16_t v11;
  int8x8_t v12;
  uint8x16_t v13;
  _BYTE *v14;
  uint64_t v15;
  int8x16_t v16;
  uint64_t *v17;
  int8x16_t v18;
  uint64_t *v19;
  int8x16_t v20;
  uint64_t *v21;
  int8x16_t v22;
  uint64_t *v23;
  int8x16_t v24;
  uint64_t *v25;
  int8x16_t v26;
  uint64_t *v27;
  int8x16_t v28;
  uint64_t *v29;
  int8x16_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  uint8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  uint8x16_t v67;
  uint8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  uint8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  double result;
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;
  _BYTE *v98;
  _BYTE *v99;
  _BYTE *v100;
  _BYTE *v101;

  v8 = vld1_dup_s8(a6);
  *(int8x8_t *)v9.i8 = vld1_dup_s8(a3);
  v9.u64[1] = (unint64_t)v8;
  v10 = vld1_dup_s8(a7);
  *(int8x8_t *)v11.i8 = vld1_dup_s8(a4);
  v11.u64[1] = (unint64_t)v10;
  v12 = vld1_dup_s8(a8);
  *(int8x8_t *)v13.i8 = vld1_dup_s8(a5);
  v13.u64[1] = (unint64_t)v12;
  v15 = *(_QWORD *)(a1 - 4);
  v14 = (_BYTE *)(a1 - 4);
  v16.i64[0] = v15;
  v17 = (uint64_t *)&v14[a2];
  v18.i64[0] = *v17;
  v19 = (uint64_t *)((char *)v17 + a2);
  v20.i64[0] = *v19;
  v21 = (uint64_t *)((char *)v19 + a2);
  v22.i64[0] = *v21;
  v23 = (uint64_t *)((char *)v21 + a2);
  v24.i64[0] = *v23;
  v25 = (uint64_t *)((char *)v23 + a2);
  v26.i64[0] = *v25;
  v27 = (uint64_t *)((char *)v25 + a2);
  v28.i64[0] = *v27;
  v29 = (uint64_t *)((char *)v27 + a2);
  v30.i64[0] = *v29;
  v31 = (uint64_t *)((char *)v29 + a2);
  v32 = *v31;
  v33 = (uint64_t *)((char *)v31 + a2);
  v34 = *v33;
  v35 = (uint64_t *)((char *)v33 + a2);
  v36 = *v35;
  v37 = (uint64_t *)((char *)v35 + a2);
  v38 = *v37;
  v39 = (uint64_t *)((char *)v37 + a2);
  v40 = *v39;
  v41 = (uint64_t *)((char *)v39 + a2);
  v42 = *v41;
  v43 = (uint64_t *)((char *)v41 + a2);
  v16.i64[1] = v32;
  v18.i64[1] = v34;
  v20.i64[1] = v36;
  v22.i64[1] = v38;
  v24.i64[1] = v40;
  v26.i64[1] = v42;
  v28.i64[1] = *v43;
  v30.i64[1] = *(uint64_t *)((char *)v43 + a2);
  v44 = (int16x8_t)vtrn1q_s8(v16, v18);
  v45 = (int16x8_t)vtrn2q_s8(v16, v18);
  v46 = (int16x8_t)vtrn1q_s8(v20, v22);
  v47 = (int16x8_t)vtrn2q_s8(v20, v22);
  v48 = (int16x8_t)vtrn1q_s8(v24, v26);
  v49 = (int16x8_t)vtrn2q_s8(v24, v26);
  v50 = (int16x8_t)vtrn1q_s8(v28, v30);
  v51 = (int16x8_t)vtrn2q_s8(v28, v30);
  v52 = (int32x4_t)vtrn1q_s16(v44, v46);
  v53 = (int32x4_t)vtrn2q_s16(v44, v46);
  v54 = (int32x4_t)vtrn1q_s16(v45, v47);
  v55 = (int32x4_t)vtrn2q_s16(v45, v47);
  v56 = (int32x4_t)vtrn1q_s16(v48, v50);
  v57 = (int32x4_t)vtrn2q_s16(v48, v50);
  v58 = (int32x4_t)vtrn1q_s16(v49, v51);
  v59 = (int32x4_t)vtrn2q_s16(v49, v51);
  v60 = (uint8x16_t)vtrn1q_s32(v52, v56);
  v61 = (int8x16_t)vtrn2q_s32(v52, v56);
  v62 = (int8x16_t)vtrn1q_s32(v53, v57);
  v63 = (uint8x16_t)vtrn2q_s32(v53, v57);
  v64 = (uint8x16_t)vtrn1q_s32(v54, v58);
  v65 = (int8x16_t)vtrn2q_s32(v54, v58);
  v66 = (int8x16_t)vtrn1q_s32(v55, v59);
  v67 = (uint8x16_t)vtrn2q_s32(v55, v59);
  v68 = vmaxq_u8(vabdq_u8((uint8x16_t)v62, (uint8x16_t)v66), vabdq_u8((uint8x16_t)v65, (uint8x16_t)v61));
  v69 = (int8x16_t)vcgtq_u8(v68, v13);
  v70 = (int8x16_t)vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(v68, vabdq_u8(v60, v64)), vabdq_u8(v64, (uint8x16_t)v62)), vabdq_u8(v63, (uint8x16_t)v65)), vabdq_u8(v67, v63));
  v71 = vabdq_u8((uint8x16_t)v66, (uint8x16_t)v61);
  v72 = (int8x16_t)vcgeq_u8(v11, (uint8x16_t)v70);
  v73 = (int8x16_t)vcgeq_u8(v9, vqaddq_u8(vqaddq_u8(v71, v71), vshrq_n_u8(vabdq_u8((uint8x16_t)v62, (uint8x16_t)v65), 1uLL)));
  v70.i64[0] = 0x8080808080808080;
  v70.i64[1] = 0x8080808080808080;
  v74 = veorq_s8(v62, v70);
  v75 = veorq_s8(v66, v70);
  v76 = veorq_s8(v61, v70);
  v77 = veorq_s8(v65, v70);
  v78 = vqsubq_s8(v76, v75);
  v79 = vandq_s8(vandq_s8(vqaddq_s8(vqaddq_s8(vqaddq_s8(vandq_s8(vqsubq_s8(v74, v77), v69), v78), v78), v78), v73), v72);
  v72.i64[0] = 0x404040404040404;
  v72.i64[1] = 0x404040404040404;
  v80 = vshrq_n_s8(vqaddq_s8(v79, v72), 3uLL);
  v65.i64[0] = 0x303030303030303;
  v65.i64[1] = 0x303030303030303;
  v81 = veorq_s8(vqsubq_s8(v76, v80), v70);
  v82 = veorq_s8(vqaddq_s8(v75, vshrq_n_s8(vqaddq_s8(v79, v65), 3uLL)), v70);
  v83 = vbicq_s8(vrshrq_n_s8(v80, 1uLL), v69);
  v84 = veorq_s8(vqsubq_s8(v77, v83), v70);
  v85 = veorq_s8(vqaddq_s8(v74, v83), v70);
  v86 = &v14[a2 + 2];
  v14[2] = v85.i8[0];
  v14[3] = v82.i8[0];
  v14[4] = v81.i8[0];
  v14[5] = v84.i8[0];
  v87 = &v14[8 * a2 + 2];
  *v86 = v85.i8[1];
  v86[1] = v82.i8[1];
  v86[2] = v81.i8[1];
  v86[3] = v84.i8[1];
  v88 = &v86[a2];
  *v88 = v85.i8[2];
  v88[1] = v82.i8[2];
  v88[2] = v81.i8[2];
  v88[3] = v84.i8[2];
  v89 = &v88[a2];
  *v89 = v85.i8[3];
  v89[1] = v82.i8[3];
  v89[2] = v81.i8[3];
  v89[3] = v84.i8[3];
  v90 = &v89[a2];
  *v90 = v85.i8[4];
  v90[1] = v82.i8[4];
  v90[2] = v81.i8[4];
  v90[3] = v84.i8[4];
  v91 = &v90[a2];
  *v91 = v85.i8[5];
  v91[1] = v82.i8[5];
  v91[2] = v81.i8[5];
  v91[3] = v84.i8[5];
  v92 = &v91[a2];
  *v92 = v85.i8[6];
  v92[1] = v82.i8[6];
  v92[2] = v81.i8[6];
  v92[3] = v84.i8[6];
  v93 = &v92[a2];
  *v93 = v85.i8[7];
  v93[1] = v82.i8[7];
  v93[2] = v81.i8[7];
  v93[3] = v84.i8[7];
  *(_QWORD *)&result = vextq_s8(v85, v85, 8uLL).u64[0];
  v80.i64[0] = vextq_s8(v82, v82, 8uLL).u64[0];
  v69.i64[0] = vextq_s8(v81, v81, 8uLL).u64[0];
  v70.i64[0] = vextq_s8(v84, v84, 8uLL).u64[0];
  *v87 = LOBYTE(result);
  v87[1] = v80.i8[0];
  v87[2] = v69.i8[0];
  v87[3] = v70.i8[0];
  v95 = &v87[a2];
  *v95 = BYTE1(result);
  v95[1] = v80.i8[1];
  v95[2] = v69.i8[1];
  v95[3] = v70.i8[1];
  v96 = &v95[a2];
  *v96 = BYTE2(result);
  v96[1] = v80.i8[2];
  v96[2] = v69.i8[2];
  v96[3] = v70.i8[2];
  v97 = &v96[a2];
  *v97 = BYTE3(result);
  v97[1] = v80.i8[3];
  v97[2] = v69.i8[3];
  v97[3] = v70.i8[3];
  v98 = &v97[a2];
  *v98 = BYTE4(result);
  v98[1] = v80.i8[4];
  v98[2] = v69.i8[4];
  v98[3] = v70.i8[4];
  v99 = &v98[a2];
  *v99 = BYTE5(result);
  v99[1] = v80.i8[5];
  v99[2] = v69.i8[5];
  v99[3] = v70.i8[5];
  v100 = &v99[a2];
  *v100 = BYTE6(result);
  v100[1] = v80.i8[6];
  v100[2] = v69.i8[6];
  v100[3] = v70.i8[6];
  v101 = &v100[a2];
  *v101 = HIBYTE(result);
  v101[1] = v80.i8[7];
  v101[2] = v69.i8[7];
  v101[3] = v70.i8[7];
  return result;
}

uint64_t vpx_lpf_horizontal_8_neon(uint64_t result, int a2, const char *a3, const char *a4, const char *a5)
{
  uint8x8_t v5;
  uint8x8_t v6;
  uint8x8_t *v7;
  uint8x8_t v8;
  int8x8_t *v9;
  int8x8_t v10;
  int8x8_t *v11;
  int8x8_t v12;
  int8x8_t *v13;
  int8x8_t v14;
  int8x8_t *v15;
  int8x8_t v16;
  int8x8_t *v17;
  int8x8_t v18;
  uint8x8_t *v19;
  int8x8_t v20;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  int8x8_t v24;
  int8x8_t v25;
  int v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int8x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int8x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int8x8_t v37;
  int16x8_t v38;
  int8x8_t v39;
  int16x8_t v40;
  int8x8_t v41;
  uint8x8_t v42;
  int8x8_t v43;
  int8x8_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int8x8_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t v53;
  int8x8_t v54;
  int16x8_t v55;
  int8x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int8x8_t v61;
  int16x8_t v62;
  int8x8_t *v63;
  int8x8_t *v64;
  int8x8_t *v65;
  int8x8_t *v66;
  int8x8_t *v67;

  v5 = (uint8x8_t)vld1_dup_s8(a3);
  v6 = (uint8x8_t)vld1_dup_s8(a4);
  v7 = (uint8x8_t *)(result - 4 * a2);
  v8 = *v7;
  v9 = (int8x8_t *)((char *)v7 + a2);
  v10 = *v9;
  v11 = (int8x8_t *)((char *)v9 + a2);
  v12 = *v11;
  v13 = (int8x8_t *)((char *)v11 + a2);
  v14 = *v13;
  v15 = (int8x8_t *)((char *)v13 + a2);
  v16 = *v15;
  v17 = (int8x8_t *)((char *)v15 + a2);
  v18 = *v17;
  v19 = (uint8x8_t *)((char *)v17 + a2);
  v20 = (int8x8_t)*v19;
  v21 = *(uint8x8_t *)((char *)v19 + a2);
  v22 = vmax_u8(vabd_u8((uint8x8_t)v12, (uint8x8_t)v14), vabd_u8((uint8x8_t)v18, (uint8x8_t)v16));
  v23 = vabd_u8((uint8x8_t)v14, (uint8x8_t)v16);
  v24 = vand_s8((int8x8_t)vcge_u8(v5, vqadd_u8(vqadd_u8(v23, v23), vshr_n_u8(vabd_u8((uint8x8_t)v12, (uint8x8_t)v18), 1uLL))), (int8x8_t)vcge_u8(v6, vmax_u8(vmax_u8(vmax_u8(vmax_u8(v22, vabd_u8(v8, (uint8x8_t)v10)), vabd_u8((uint8x8_t)v10, (uint8x8_t)v12)), vabd_u8(*v19, (uint8x8_t)v18)), vabd_u8(v21, *v19))));
  v25 = vand_s8((int8x8_t)vcgt_u8((uint8x8_t)0x202020202020202, vmax_u8(vmax_u8(vmax_u8(vmax_u8(v22, vabd_u8((uint8x8_t)v10, (uint8x8_t)v14)), vabd_u8(*v19, (uint8x8_t)v16)), vabd_u8(v8, (uint8x8_t)v14)), vabd_u8(v21, (uint8x8_t)v16))), v24);
  v26 = vpaddl_u32((uint32x2_t)v25);
  if (v26 == -2)
  {
    v27 = (int16x8_t)vmovl_u8((uint8x8_t)v16);
    v28 = (int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vmlal_u8(vshll_n_u8((uint8x8_t)v10, 1uLL), v8, (uint8x8_t)0x303030303030303), (uint8x8_t)v12), (uint8x8_t)v14), (uint8x8_t)v16);
    v29 = (int16x8_t)vaddl_u8((uint8x8_t)v10, v8);
    v30 = (int16x8_t)vaddl_u8((uint8x8_t)v16, (uint8x8_t)v10);
    v31 = vrshrn_n_s16(v28, 3uLL);
    v32.i64[0] = 0x4000400040004;
    v32.i64[1] = 0x4000400040004;
    v33 = vaddq_s16(v28, vaddq_s16(v32, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v12), v29), (uint8x8_t)v18)));
    v34 = vshrn_n_s16(v33, 3uLL);
    v35 = (int16x8_t)vmovl_u8((uint8x8_t)v20);
    v36 = vaddq_s16(v33, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v14), (int16x8_t)vaddl_u8((uint8x8_t)v12, v8)), (uint8x8_t)v20));
    v37 = vshrn_n_s16(v36, 3uLL);
    v38 = vaddq_s16(v36, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16(v27, (int16x8_t)vaddl_u8((uint8x8_t)v14, v8)), v21));
    v39 = vshrn_n_s16(v38, 3uLL);
    v40 = vaddq_s16(v38, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v18), v30), v21));
    v41 = vshrn_n_s16(v40, 3uLL);
    v20 = vshrn_n_s16(vaddq_s16(v40, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16(v35, (int16x8_t)vaddl_u8((uint8x8_t)v18, (uint8x8_t)v12)), v21)), 3uLL);
    v10 = v31;
  }
  else
  {
    v42 = (uint8x8_t)vld1_dup_s8(a5);
    v43 = (int8x8_t)vcgt_u8(v22, v42);
    v44 = veor_s8(v12, (int8x8_t)0x8080808080808080);
    v45 = veor_s8(v14, (int8x8_t)0x8080808080808080);
    v46 = veor_s8(v16, (int8x8_t)0x8080808080808080);
    v47 = veor_s8(v18, (int8x8_t)0x8080808080808080);
    v48 = vqsub_s8(v46, v45);
    v49 = vand_s8(vqadd_s8(vqadd_s8(vqadd_s8(vand_s8(vqsub_s8(v44, v47), v43), v48), v48), v48), v24);
    v50 = vshr_n_s8(vqadd_s8(v49, (int8x8_t)0x404040404040404), 3uLL);
    v51 = vqadd_s8(v45, vshr_n_s8(vqadd_s8(v49, (int8x8_t)0x303030303030303), 3uLL));
    v39 = veor_s8(vqsub_s8(v46, v50), (int8x8_t)0x8080808080808080);
    v37 = veor_s8(v51, (int8x8_t)0x8080808080808080);
    v52 = vbic_s8(vrshr_n_s8(v50, 1uLL), v43);
    v53 = vqsub_s8(v47, v52);
    v54 = vqadd_s8(v44, v52);
    v41 = veor_s8(v53, (int8x8_t)0x8080808080808080);
    v34 = veor_s8(v54, (int8x8_t)0x8080808080808080);
    if (v26)
    {
      v55 = (int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vmlal_u8(vshll_n_u8((uint8x8_t)v10, 1uLL), v8, (uint8x8_t)0x303030303030303), (uint8x8_t)v12), (uint8x8_t)v14), (uint8x8_t)v16);
      v56 = vrshrn_n_s16(v55, 3uLL);
      v57.i64[0] = 0x4000400040004;
      v57.i64[1] = 0x4000400040004;
      v58 = vaddq_s16(v55, vaddq_s16(v57, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v12), (int16x8_t)vaddl_u8((uint8x8_t)v10, v8)), (uint8x8_t)v18)));
      *(int8x8_t *)v55.i8 = vshrn_n_s16(v58, 3uLL);
      v59 = vaddq_s16(v58, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v14), (int16x8_t)vaddl_u8((uint8x8_t)v12, v8)), (uint8x8_t)v20));
      v60 = vaddq_s16(v59, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v16), (int16x8_t)vaddl_u8((uint8x8_t)v14, v8)), v21));
      v61 = vshrn_n_s16(v60, 3uLL);
      v62 = vaddq_s16(v60, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v18), (int16x8_t)vaddl_u8((uint8x8_t)v16, (uint8x8_t)v10)), v21));
      v10 = vorr_s8(vand_s8(v56, v25), vbic_s8(v10, v25));
      v34 = vorr_s8(vand_s8(*(int8x8_t *)v55.i8, v25), vbic_s8(v34, v25));
      v37 = vorr_s8(vand_s8(vshrn_n_s16(v59, 3uLL), v25), vbic_s8(v37, v25));
      v39 = vorr_s8(vand_s8(v61, v25), vbic_s8(v39, v25));
      v41 = vorr_s8(vand_s8(vshrn_n_s16(v62, 3uLL), v25), vbic_s8(v41, v25));
      v20 = vorr_s8(vand_s8(vshrn_n_s16(vaddq_s16(v62, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v20), (int16x8_t)vaddl_u8((uint8x8_t)v18, (uint8x8_t)v12)), v21)), 3uLL), v25), vbic_s8(v20, v25));
    }
  }
  v63 = (int8x8_t *)(result - 3 * a2);
  *v63 = v10;
  v64 = (int8x8_t *)((char *)v63 + a2);
  *v64 = v34;
  v65 = (int8x8_t *)((char *)v64 + a2);
  *v65 = v37;
  v66 = (int8x8_t *)((char *)v65 + a2);
  *v66 = v39;
  v67 = (int8x8_t *)((char *)v66 + a2);
  *v67 = v41;
  *(int8x8_t *)((char *)v67 + a2) = v20;
  return result;
}

double vpx_lpf_horizontal_8_dual_neon(uint64_t a1, int a2, const char *a3, const char *a4, const char *a5, const char *a6, const char *a7, const char *a8)
{
  int8x8_t v10;
  uint8x16_t v11;
  int8x8_t v12;
  uint8x16_t v13;
  int8x8_t v14;
  uint8x16_t v15;
  uint8x16_t *v16;
  uint8x16_t v17;
  uint64_t v18;
  int8x16_t *v19;
  int8x16_t v20;
  uint8x16_t *v21;
  uint8x16_t v22;
  uint8x16_t *v23;
  uint8x16_t v24;
  uint8x16_t *v25;
  uint8x16_t v26;
  int8x16_t *v27;
  int8x16_t v28;
  uint8x16_t *v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  double result;
  int8x16_t v36;
  int8x16_t *v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;

  v50 = 0u;
  v51 = 0u;
  v49 = 0u;
  v47 = 0u;
  v48 = 0u;
  v46 = 0u;
  v10 = vld1_dup_s8(a6);
  *(int8x8_t *)v11.i8 = vld1_dup_s8(a3);
  v11.u64[1] = (unint64_t)v10;
  v12 = vld1_dup_s8(a7);
  *(int8x8_t *)v13.i8 = vld1_dup_s8(a4);
  v13.u64[1] = (unint64_t)v12;
  v14 = vld1_dup_s8(a8);
  *(int8x8_t *)v15.i8 = vld1_dup_s8(a5);
  v15.u64[1] = (unint64_t)v14;
  v16 = (uint8x16_t *)(a1 - 4 * a2);
  v17 = *v16;
  v18 = a2;
  v19 = (int8x16_t *)&v16->i8[a2];
  v20 = *v19;
  v21 = (uint8x16_t *)&v19->i8[a2];
  v22 = *v21;
  v23 = (uint8x16_t *)((char *)v21 + a2);
  v24 = *v23;
  v25 = (uint8x16_t *)((char *)v23 + a2);
  v26 = *v25;
  v27 = (int8x16_t *)&v25->i8[a2];
  v28 = *v27;
  v29 = (uint8x16_t *)&v27->i8[a2];
  v30 = *(uint8x16_t *)((char *)v29 + a2);
  v31 = vmaxq_u8(vabdq_u8(v22, v24), vabdq_u8((uint8x16_t)v28, v26));
  v32 = vabdq_u8(v24, v26);
  v33 = vandq_s8((int8x16_t)vcgeq_u8(v11, vqaddq_u8(vqaddq_u8(v32, v32), vshrq_n_u8(vabdq_u8(v22, (uint8x16_t)v28), 1uLL))), (int8x16_t)vcgeq_u8(v13, vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(v31, vabdq_u8(v17, (uint8x16_t)v20)), vabdq_u8((uint8x16_t)v20, v22)), vabdq_u8(*v29, (uint8x16_t)v28)), vabdq_u8(v30, *v29))));
  v13.i64[0] = 0x202020202020202;
  v13.i64[1] = 0x202020202020202;
  v34 = vandq_s8((int8x16_t)vcgtq_u8(v13, vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(v31, vabdq_u8((uint8x16_t)v20, v24)), vabdq_u8(*v29, v26)), vabdq_u8(v17, v24)), vabdq_u8(v30, v26))), v33);
  filter8_16(vpaddl_u32((uint32x2_t)vshrn_n_s16((int16x8_t)v34, 4uLL)), &v51, &v50, &v49, &v48, &v47, &v46, v33, v34, (int8x16_t)vcgtq_u8(v31, v15), v17, v20, v22, v24, v26, (uint64_t)a8, v28, *(int8x16_t *)v29, v30);
  v36 = v50;
  result = *(double *)v51.i64;
  v37 = (int8x16_t *)(a1 - 3 * a2);
  v38 = v49;
  v40 = v47;
  v39 = v48;
  v41 = v46;
  *v37 = v51;
  v42 = (int8x16_t *)((char *)v37 + v18);
  *v42 = v36;
  v43 = (int8x16_t *)((char *)v42 + v18);
  *v43 = v38;
  v44 = (int8x16_t *)((char *)v43 + v18);
  *v44 = v39;
  v45 = (int8x16_t *)((char *)v44 + v18);
  *v45 = v40;
  *(int8x16_t *)((char *)v45 + v18) = v41;
  return result;
}

uint64_t filter8_16(uint64_t result, int8x16_t *a2, int8x16_t *a3, int8x16_t *a4, int8x16_t *a5, int8x16_t *a6, int8x16_t *a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, uint8x16_t a11, int8x16_t a12, uint8x16_t a13, uint8x16_t a14, uint8x16_t a15, uint64_t a16, int8x16_t a17, int8x16_t a18, uint8x16_t a19)
{
  uint8x16_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int8x16_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int8x16_t v59;
  int16x8_t v60;
  int16x8_t v61;

  if ((_DWORD)result == -2)
  {
    v19.i64[0] = 0x303030303030303;
    v19.i64[1] = 0x303030303030303;
    v20 = (int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vmlal_u8(vshll_n_u8(*(uint8x8_t *)a12.i8, 1uLL), *(uint8x8_t *)a11.i8, (uint8x8_t)0x303030303030303), *(uint8x8_t *)a13.i8), *(uint8x8_t *)a14.i8), *(uint8x8_t *)a15.i8);
    v21 = (int16x8_t)vaddw_high_u8(vaddw_high_u8(vaddw_high_u8(vmlal_high_u8(vshll_high_n_u8((uint8x16_t)a12, 1uLL), a11, v19), a13), a14), a15);
    v22.i64[0] = 0x4000400040004;
    v22.i64[1] = 0x4000400040004;
    *a2 = vrshrn_high_n_s16(vrshrn_n_s16(v20, 3uLL), v21, 3uLL);
    v23 = (int16x8_t)vaddl_u8(*(uint8x8_t *)a17.i8, *(uint8x8_t *)a13.i8);
    v24 = (int16x8_t)vaddl_high_u8((uint8x16_t)a17, a13);
    v25 = vaddq_s16(v20, vaddq_s16(v22, vsubq_s16(v23, (int16x8_t)vaddl_u8(*(uint8x8_t *)a12.i8, *(uint8x8_t *)a11.i8))));
    v26 = vaddq_s16(v21, vaddq_s16(v22, vsubq_s16(v24, (int16x8_t)vaddl_high_u8((uint8x16_t)a12, a11))));
    *a3 = vshrn_high_n_s16(vshrn_n_s16(v25, 3uLL), v26, 3uLL);
    v27 = vaddq_s16(v25, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a14.i8), (int16x8_t)vaddl_u8(*(uint8x8_t *)a13.i8, *(uint8x8_t *)a11.i8)), *(uint8x8_t *)a18.i8));
    v28 = vaddq_s16(v26, (int16x8_t)vaddw_high_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_high_u8(a14), (int16x8_t)vaddl_high_u8(a13, a11)), (uint8x16_t)a18));
    *a4 = vshrn_high_n_s16(vshrn_n_s16(v27, 3uLL), v28, 3uLL);
    v29 = vaddq_s16(v27, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a15.i8), (int16x8_t)vaddl_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)a11.i8)), *(uint8x8_t *)a19.i8));
    v30 = vaddq_s16(v28, (int16x8_t)vaddw_high_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_high_u8(a15), (int16x8_t)vaddl_high_u8(a14, a11)), a19));
    *a5 = vshrn_high_n_s16(vshrn_n_s16(v29, 3uLL), v30, 3uLL);
    v31 = vaddq_s16(v29, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a17.i8), (int16x8_t)vaddl_u8(*(uint8x8_t *)a15.i8, *(uint8x8_t *)a12.i8)), *(uint8x8_t *)a19.i8));
    v32 = vaddq_s16(v30, (int16x8_t)vaddw_high_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_high_u8((uint8x16_t)a17), (int16x8_t)vaddl_high_u8(a15, (uint8x16_t)a12)), a19));
    *a6 = vshrn_high_n_s16(vshrn_n_s16(v31, 3uLL), v32, 3uLL);
    v33 = vshrn_high_n_s16(vshrn_n_s16(vaddq_s16(v31, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a18.i8), v23), *(uint8x8_t *)a19.i8)), 3uLL), vaddq_s16(v32, (int16x8_t)vaddw_high_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_high_u8((uint8x16_t)a18), v24), a19)), 3uLL);
  }
  else
  {
    v34.i64[0] = 0x8080808080808080;
    v34.i64[1] = 0x8080808080808080;
    v35 = veorq_s8((int8x16_t)a13, v34);
    v36 = veorq_s8((int8x16_t)a14, v34);
    v37 = veorq_s8((int8x16_t)a15, v34);
    v38 = veorq_s8(a17, v34);
    v39 = vqsubq_s8(v37, v36);
    v40 = vandq_s8(vqaddq_s8(vqaddq_s8(vqaddq_s8(vandq_s8(vqsubq_s8(v35, v38), a10), v39), v39), v39), a8);
    v41.i64[0] = 0x404040404040404;
    v41.i64[1] = 0x404040404040404;
    v42 = vshrq_n_s8(vqaddq_s8(v40, v41), 3uLL);
    v43.i64[0] = 0x303030303030303;
    v43.i64[1] = 0x303030303030303;
    *a5 = veorq_s8(vqsubq_s8(v37, v42), v34);
    *a4 = veorq_s8(vqaddq_s8(v36, vshrq_n_s8(vqaddq_s8(v40, v43), 3uLL)), v34);
    v44 = vbicq_s8(vrshrq_n_s8(v42, 1uLL), a10);
    *a6 = veorq_s8(vqsubq_s8(v38, v44), v34);
    *a3 = veorq_s8(vqaddq_s8(v35, v44), v34);
    *a2 = a12;
    *a7 = a18;
    if (!(_DWORD)result)
      return result;
    v45 = vmlal_high_u8(vshll_high_n_u8((uint8x16_t)a12, 1uLL), a11, (uint8x16_t)v43);
    v46 = (int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vmlal_u8(vshll_n_u8(*(uint8x8_t *)a12.i8, 1uLL), *(uint8x8_t *)a11.i8, (uint8x8_t)0x303030303030303), *(uint8x8_t *)a13.i8), *(uint8x8_t *)a14.i8), *(uint8x8_t *)a15.i8);
    v47 = (int16x8_t)vaddw_high_u8(vaddw_high_u8(vaddw_high_u8(v45, a13), a14), a15);
    v48.i64[0] = 0x4000400040004;
    v48.i64[1] = 0x4000400040004;
    *a2 = vrshrn_high_n_s16(vrshrn_n_s16(v46, 3uLL), v47, 3uLL);
    v49 = (int16x8_t)vaddl_u8(*(uint8x8_t *)a17.i8, *(uint8x8_t *)a13.i8);
    v50 = (int16x8_t)vaddl_high_u8((uint8x16_t)a17, a13);
    v51 = vaddq_s16(v46, vaddq_s16(v48, vsubq_s16(v49, (int16x8_t)vaddl_u8(*(uint8x8_t *)a12.i8, *(uint8x8_t *)a11.i8))));
    v52 = vaddq_s16(v47, vaddq_s16(v48, vsubq_s16(v50, (int16x8_t)vaddl_high_u8((uint8x16_t)a12, a11))));
    v53 = vshrn_high_n_s16(vshrn_n_s16(v51, 3uLL), v52, 3uLL);
    v54 = vaddq_s16(v51, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a14.i8), (int16x8_t)vaddl_u8(*(uint8x8_t *)a13.i8, *(uint8x8_t *)a11.i8)), *(uint8x8_t *)a18.i8));
    v55 = vaddq_s16(v52, (int16x8_t)vaddw_high_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_high_u8(a14), (int16x8_t)vaddl_high_u8(a13, a11)), (uint8x16_t)a18));
    v56 = vshrn_high_n_s16(vshrn_n_s16(v54, 3uLL), v55, 3uLL);
    v57 = vaddq_s16(v54, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a15.i8), (int16x8_t)vaddl_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)a11.i8)), *(uint8x8_t *)a19.i8));
    v58 = vaddq_s16(v55, (int16x8_t)vaddw_high_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_high_u8(a15), (int16x8_t)vaddl_high_u8(a14, a11)), a19));
    v59 = vshrn_high_n_s16(vshrn_n_s16(v57, 3uLL), v58, 3uLL);
    v60 = vaddq_s16(v57, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a17.i8), (int16x8_t)vaddl_u8(*(uint8x8_t *)a15.i8, *(uint8x8_t *)a12.i8)), *(uint8x8_t *)a19.i8));
    v61 = vaddq_s16(v58, (int16x8_t)vaddw_high_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_high_u8((uint8x16_t)a17), (int16x8_t)vaddl_high_u8(a15, (uint8x16_t)a12)), a19));
    *a7 = vshrn_high_n_s16(vshrn_n_s16(vaddq_s16(v60, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a18.i8), v49), *(uint8x8_t *)a19.i8)), 3uLL), vaddq_s16(v61, (int16x8_t)vaddw_high_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_high_u8((uint8x16_t)a18), v50), a19)), 3uLL);
    *a2 = vbslq_s8(a9, *a2, a12);
    *a3 = vbslq_s8(a9, v53, *a3);
    *a4 = vbslq_s8(a9, v56, *a4);
    *a5 = vbslq_s8(a9, v59, *a5);
    *a6 = vbslq_s8(a9, vshrn_high_n_s16(vshrn_n_s16(v60, 3uLL), v61, 3uLL), *a6);
    v33 = vbslq_s8(a9, *a7, a18);
  }
  *a7 = v33;
  return result;
}

int8x16_t vpx_lpf_vertical_8_neon(uint64_t a1, int a2, const char *a3, const char *a4, const char *a5, int8x16_t a6, int8x16_t a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13)
{
  int16x8_t v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int8x8_t v40;
  int8x8_t v41;
  int8x16_t v42;
  uint8x8_t v43;
  uint8x8_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int v47;
  int16x8_t v48;
  int16x8_t v49;
  int8x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  uint8x8_t v56;
  int8x8_t v57;
  int8x8_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int8x8_t v61;
  int8x8_t v62;
  int8x8_t v63;
  int8x8_t v64;
  int8x8_t v65;
  int8x8_t v66;
  int8x8_t v67;
  int8x8_t v68;
  int16x8_t v69;
  int8x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int8x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t result;

  v17 = (uint8x8_t)vld1_dup_s8(a3);
  v18 = (uint8x8_t)vld1_dup_s8(a4);
  v20 = *(_QWORD *)(a1 - 4);
  v19 = (_QWORD *)(a1 - 4);
  a6.i64[0] = v20;
  v21 = (_QWORD *)((char *)v19 + a2);
  a7.i64[0] = *v21;
  v22 = (unint64_t *)((char *)v21 + a2);
  a8.i64[0] = *v22;
  v23 = (unint64_t *)((char *)v22 + a2);
  a9.i64[0] = *v23;
  v24 = (unint64_t *)((char *)v23 + a2);
  a10.i64[0] = *v24;
  v25 = (unint64_t *)((char *)v24 + a2);
  a11.i64[0] = *v25;
  v26 = (unint64_t *)((char *)v25 + a2);
  a12.i64[0] = *v26;
  a13.i64[0] = *(unint64_t *)((char *)v26 + a2);
  v27 = (int16x8_t)vzip1q_s8(a6, a7);
  v28 = (int16x8_t)vzip1q_s8(a8, a9);
  v29 = (int16x8_t)vzip1q_s8(a10, a11);
  v30 = (int16x8_t)vzip1q_s8(a12, a13);
  v31 = (int32x4_t)vzip1q_s16(v27, v28);
  v32 = (int32x4_t)vzip2q_s16(v27, v28);
  v33 = (int32x4_t)vzip1q_s16(v29, v30);
  v34 = (int32x4_t)vzip2q_s16(v29, v30);
  v35 = (int8x16_t)vzip1q_s32(v31, v33);
  v36 = (int8x16_t)vzip2q_s32(v31, v33);
  v37 = (int8x16_t)vzip1q_s32(v32, v34);
  v38 = (int16x8_t)vzip2q_s32(v32, v34);
  v39 = (int16x8_t)vextq_s8(v35, v35, 8uLL);
  v40 = (int8x8_t)vextq_s8(v36, v36, 8uLL).u64[0];
  v41 = (int8x8_t)vextq_s8(v37, v37, 8uLL).u64[0];
  v42 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL);
  v43 = vmax_u8(vabd_u8(*(uint8x8_t *)v36.i8, (uint8x8_t)v40), vabd_u8((uint8x8_t)v41, *(uint8x8_t *)v37.i8));
  v44 = vabd_u8((uint8x8_t)v40, *(uint8x8_t *)v37.i8);
  v45 = vand_s8((int8x8_t)vcge_u8(v17, vqadd_u8(vqadd_u8(v44, v44), vshr_n_u8(vabd_u8(*(uint8x8_t *)v36.i8, (uint8x8_t)v41), 1uLL))), (int8x8_t)vcge_u8(v18, vmax_u8(vmax_u8(vmax_u8(vmax_u8(v43, vabd_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v39.i8)), vabd_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v36.i8)), vabd_u8(*(uint8x8_t *)v38.i8, (uint8x8_t)v41)), vabd_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v38.i8))));
  v46 = vand_s8((int8x8_t)vcgt_u8((uint8x8_t)0x202020202020202, vmax_u8(vmax_u8(vmax_u8(vmax_u8(v43, vabd_u8(*(uint8x8_t *)v39.i8, (uint8x8_t)v40)), vabd_u8(*(uint8x8_t *)v38.i8, *(uint8x8_t *)v37.i8)), vabd_u8(*(uint8x8_t *)v35.i8, (uint8x8_t)v40)), vabd_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v37.i8))), v45);
  v47 = vpaddl_u32((uint32x2_t)v46);
  if (v47 == -2)
  {
    v16 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v37.i8);
    v48 = vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(vaddl_u8((uint8x8_t)v40, *(uint8x8_t *)v36.i8), *(uint8x8_t *)v37.i8), *(uint8x8_t *)v35.i8, (uint8x8_t)0x303030303030303), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v39.i8, 1uLL));
    v15 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v35.i8);
    v49 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v39.i8);
    v50 = vrshrn_n_s16(v48, 3uLL);
    v51.i64[0] = 0x4000400040004;
    v51.i64[1] = 0x4000400040004;
    v13 = vaddq_s16(v48, vaddq_s16(v51, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v36.i8), v15), (uint8x8_t)v41)));
    *(int8x8_t *)v15.i8 = vshrn_n_s16(v13, 3uLL);
    v52 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v38.i8);
    v14 = (int8x16_t)vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v40), (int16x8_t)vaddl_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v35.i8));
    v53 = vaddq_s16(v13, (int16x8_t)vaddw_u8((uint16x8_t)v14, *(uint8x8_t *)v38.i8));
    *(int8x8_t *)v14.i8 = vshrn_n_s16(v53, 3uLL);
    v54 = vaddq_s16(v53, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16(v16, (int16x8_t)vaddl_u8((uint8x8_t)v40, *(uint8x8_t *)v35.i8)), *(uint8x8_t *)v42.i8));
    *(int8x8_t *)v13.i8 = vshrn_n_s16(v54, 3uLL);
    v55 = vaddq_s16(v54, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v41), v49), *(uint8x8_t *)v42.i8));
    *(int8x8_t *)v16.i8 = vshrn_n_s16(v55, 3uLL);
    v39 = (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16(v52, (int16x8_t)vaddl_u8((uint8x8_t)v41, *(uint8x8_t *)v36.i8)), *(uint8x8_t *)v42.i8);
    v38 = vaddq_s16(v55, v39);
    *(int8x8_t *)v38.i8 = vshrn_n_s16(v38, 3uLL);
    *(int8x8_t *)v39.i8 = v50;
  }
  else
  {
    v56 = (uint8x8_t)vld1_dup_s8(a5);
    v57 = (int8x8_t)vcgt_u8(v43, v56);
    v58 = veor_s8(*(int8x8_t *)v36.i8, (int8x8_t)0x8080808080808080);
    v59 = veor_s8(v40, (int8x8_t)0x8080808080808080);
    v60 = veor_s8(*(int8x8_t *)v37.i8, (int8x8_t)0x8080808080808080);
    v61 = veor_s8(v41, (int8x8_t)0x8080808080808080);
    v62 = vqsub_s8(v60, v59);
    v63 = vand_s8(vqadd_s8(vqadd_s8(vqadd_s8(vand_s8(vqsub_s8(v58, v61), v57), v62), v62), v62), v45);
    v64 = vshr_n_s8(vqadd_s8(v63, (int8x8_t)0x404040404040404), 3uLL);
    v65 = vqadd_s8(v59, vshr_n_s8(vqadd_s8(v63, (int8x8_t)0x303030303030303), 3uLL));
    *(int8x8_t *)v13.i8 = veor_s8(vqsub_s8(v60, v64), (int8x8_t)0x8080808080808080);
    *(int8x8_t *)v14.i8 = veor_s8(v65, (int8x8_t)0x8080808080808080);
    v66 = vbic_s8(vrshr_n_s8(v64, 1uLL), v57);
    v67 = vqsub_s8(v61, v66);
    v68 = vqadd_s8(v58, v66);
    *(int8x8_t *)v16.i8 = veor_s8(v67, (int8x8_t)0x8080808080808080);
    *(int8x8_t *)v15.i8 = veor_s8(v68, (int8x8_t)0x8080808080808080);
    if (v47)
    {
      v69 = vaddq_s16((int16x8_t)vmlal_u8(vaddw_u8(vaddl_u8((uint8x8_t)v40, *(uint8x8_t *)v36.i8), *(uint8x8_t *)v37.i8), *(uint8x8_t *)v35.i8, (uint8x8_t)0x303030303030303), (int16x8_t)vshll_n_u8(*(uint8x8_t *)v39.i8, 1uLL));
      v70 = vrshrn_n_s16(v69, 3uLL);
      v71.i64[0] = 0x4000400040004;
      v71.i64[1] = 0x4000400040004;
      v72 = vaddq_s16(v69, vaddq_s16(v71, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v36.i8), (int16x8_t)vaddl_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v35.i8)), (uint8x8_t)v41)));
      v73 = vshrn_n_s16(v72, 3uLL);
      v74 = vaddq_s16(v72, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v40), (int16x8_t)vaddl_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v35.i8)), *(uint8x8_t *)v38.i8));
      v75 = vaddq_s16(v74, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v37.i8), (int16x8_t)vaddl_u8((uint8x8_t)v40, *(uint8x8_t *)v35.i8)), *(uint8x8_t *)v42.i8));
      v76 = vaddq_s16(v75, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)v41), (int16x8_t)vaddl_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v39.i8)), *(uint8x8_t *)v42.i8));
      *(int8x8_t *)v39.i8 = vorr_s8(vand_s8(v70, v46), vbic_s8(*(int8x8_t *)v39.i8, v46));
      *(int8x8_t *)v15.i8 = vorr_s8(vand_s8(v73, v46), vbic_s8(*(int8x8_t *)v15.i8, v46));
      *(int8x8_t *)v14.i8 = vorr_s8(vand_s8(vshrn_n_s16(v74, 3uLL), v46), vbic_s8(*(int8x8_t *)v14.i8, v46));
      *(int8x8_t *)v13.i8 = vorr_s8(vand_s8(vshrn_n_s16(v75, 3uLL), v46), vbic_s8(*(int8x8_t *)v13.i8, v46));
      *(int8x8_t *)v16.i8 = vorr_s8(vand_s8(vshrn_n_s16(v76, 3uLL), v46), vbic_s8(*(int8x8_t *)v16.i8, v46));
      *(int8x8_t *)v38.i8 = vorr_s8(vand_s8(vshrn_n_s16(vaddq_s16(v76, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v38.i8), (int16x8_t)vaddl_u8((uint8x8_t)v41, *(uint8x8_t *)v36.i8)), *(uint8x8_t *)v42.i8)), 3uLL), v46), vbic_s8(*(int8x8_t *)v38.i8, v46));
    }
  }
  v77 = (int16x8_t)vzip1q_s8(v35, (int8x16_t)v39);
  v78 = (int16x8_t)vzip1q_s8((int8x16_t)v15, v14);
  v79 = (int16x8_t)vzip1q_s8((int8x16_t)v13, (int8x16_t)v16);
  v80 = (int16x8_t)vzip1q_s8((int8x16_t)v38, v42);
  v81 = (int32x4_t)vzip1q_s16(v77, v78);
  v82 = (int32x4_t)vzip2q_s16(v77, v78);
  v83 = (int32x4_t)vzip1q_s16(v79, v80);
  v84 = (int32x4_t)vzip2q_s16(v79, v80);
  v85 = (int8x16_t)vzip1q_s32(v81, v83);
  v86 = (int8x16_t)vzip2q_s32(v81, v83);
  v87 = (int8x16_t)vzip1q_s32(v82, v84);
  *v19 = v85.i64[0];
  *(_QWORD *)((char *)v19 + a2) = vextq_s8(v85, v85, 8uLL).u64[0];
  result = (int8x16_t)vzip2q_s32(v82, v84);
  *v22 = v86.i64[0];
  *(unint64_t *)((char *)v22 + a2) = vextq_s8(v86, v86, 8uLL).u64[0];
  *v24 = v87.i64[0];
  *(unint64_t *)((char *)v24 + a2) = vextq_s8(v87, v87, 8uLL).u64[0];
  *v26 = result.i64[0];
  *(unint64_t *)((char *)v26 + a2) = vextq_s8(result, result, 8uLL).u64[0];
  return result;
}

double vpx_lpf_vertical_8_dual_neon(_BYTE *a1, int a2, const char *a3, const char *a4, const char *a5, const char *a6, const char *a7, const char *a8)
{
  int8x8_t v10;
  uint8x16_t v11;
  int8x8_t v12;
  uint8x16_t v13;
  int8x8_t v14;
  uint8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t *v18;
  int8x16_t v19;
  uint64_t *v20;
  int8x16_t v21;
  uint64_t *v22;
  int8x16_t v23;
  uint64_t *v24;
  int8x16_t v25;
  uint64_t *v26;
  int8x16_t v27;
  uint64_t *v28;
  int8x16_t v29;
  uint64_t *v30;
  int8x16_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  uint8x16_t v61;
  uint8x16_t v62;
  uint8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  uint8x16_t v67;
  uint8x16_t v68;
  uint8x16_t v69;
  int8x16_t v70;
  uint8x16_t v71;
  int8x16_t v72;
  uint8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  _BYTE *v80;
  int8x16_t v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  double result;
  _BYTE *v101;
  _BYTE *v102;
  _BYTE *v103;
  _BYTE *v104;
  _BYTE *v105;
  _BYTE *v106;
  _BYTE *v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  _BYTE *v112;
  _BYTE *v113;
  _BYTE *v114;
  _BYTE *v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;

  v120 = 0u;
  v121 = 0u;
  v119 = 0u;
  v117 = 0u;
  v118 = 0u;
  v116 = 0u;
  v10 = vld1_dup_s8(a6);
  *(int8x8_t *)v11.i8 = vld1_dup_s8(a3);
  v11.u64[1] = (unint64_t)v10;
  v12 = vld1_dup_s8(a7);
  *(int8x8_t *)v13.i8 = vld1_dup_s8(a4);
  v13.u64[1] = (unint64_t)v12;
  v14 = vld1_dup_s8(a8);
  *(int8x8_t *)v15.i8 = vld1_dup_s8(a5);
  v15.u64[1] = (unint64_t)v14;
  v16.i64[0] = *(_QWORD *)(a1 - 4);
  v17 = a2;
  v18 = (uint64_t *)&a1[a2 - 4];
  v19.i64[0] = *v18;
  v20 = (uint64_t *)((char *)v18 + a2);
  v21.i64[0] = *v20;
  v22 = (uint64_t *)((char *)v20 + a2);
  v23.i64[0] = *v22;
  v24 = (uint64_t *)((char *)v22 + a2);
  v25.i64[0] = *v24;
  v26 = (uint64_t *)((char *)v24 + a2);
  v27.i64[0] = *v26;
  v28 = (uint64_t *)((char *)v26 + a2);
  v29.i64[0] = *v28;
  v30 = (uint64_t *)((char *)v28 + a2);
  v31.i64[0] = *v30;
  v32 = (uint64_t *)((char *)v30 + a2);
  v33 = *v32;
  v34 = (uint64_t *)((char *)v32 + a2);
  v35 = *v34;
  v36 = (uint64_t *)((char *)v34 + a2);
  v37 = *v36;
  v38 = (uint64_t *)((char *)v36 + a2);
  v39 = *v38;
  v40 = (uint64_t *)((char *)v38 + a2);
  v41 = *v40;
  v42 = (uint64_t *)((char *)v40 + a2);
  v43 = *v42;
  v44 = (uint64_t *)((char *)v42 + a2);
  v16.i64[1] = v33;
  v19.i64[1] = v35;
  v21.i64[1] = v37;
  v23.i64[1] = v39;
  v25.i64[1] = v41;
  v27.i64[1] = v43;
  v29.i64[1] = *v44;
  v31.i64[1] = *(uint64_t *)((char *)v44 + a2);
  v45 = (int16x8_t)vtrn1q_s8(v16, v19);
  v46 = (int16x8_t)vtrn2q_s8(v16, v19);
  v47 = (int16x8_t)vtrn1q_s8(v21, v23);
  v48 = (int16x8_t)vtrn2q_s8(v21, v23);
  v49 = (int16x8_t)vtrn1q_s8(v25, v27);
  v50 = (int16x8_t)vtrn2q_s8(v25, v27);
  v51 = (int16x8_t)vtrn1q_s8(v29, v31);
  v52 = (int16x8_t)vtrn2q_s8(v29, v31);
  v53 = (int32x4_t)vtrn1q_s16(v45, v47);
  v54 = (int32x4_t)vtrn2q_s16(v45, v47);
  v55 = (int32x4_t)vtrn1q_s16(v46, v48);
  v56 = (int32x4_t)vtrn2q_s16(v46, v48);
  v57 = (int32x4_t)vtrn1q_s16(v49, v51);
  v58 = (int32x4_t)vtrn2q_s16(v49, v51);
  v59 = (int32x4_t)vtrn1q_s16(v50, v52);
  v60 = (int32x4_t)vtrn2q_s16(v50, v52);
  v61 = (uint8x16_t)vtrn1q_s32(v53, v57);
  v62 = (uint8x16_t)vtrn2q_s32(v53, v57);
  v63 = (uint8x16_t)vtrn1q_s32(v54, v58);
  v64 = (int8x16_t)vtrn2q_s32(v54, v58);
  v65 = (int8x16_t)vtrn1q_s32(v55, v59);
  v66 = (int8x16_t)vtrn2q_s32(v55, v59);
  v67 = (uint8x16_t)vtrn1q_s32(v56, v60);
  v68 = (uint8x16_t)vtrn2q_s32(v56, v60);
  v69 = vmaxq_u8(vabdq_u8(v63, v67), vabdq_u8((uint8x16_t)v66, v62));
  v70 = (int8x16_t)vcgtq_u8(v69, v15);
  v71 = vabdq_u8(v67, v62);
  v72 = vandq_s8((int8x16_t)vcgeq_u8(v11, vqaddq_u8(vqaddq_u8(v71, v71), vshrq_n_u8(vabdq_u8(v63, (uint8x16_t)v66), 1uLL))), (int8x16_t)vcgeq_u8(v13, vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(v69, vabdq_u8(v61, (uint8x16_t)v65)), vabdq_u8((uint8x16_t)v65, v63)), vabdq_u8((uint8x16_t)v64, (uint8x16_t)v66)), vabdq_u8(v68, (uint8x16_t)v64))));
  v73 = vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(v69, vabdq_u8((uint8x16_t)v65, v67)), vabdq_u8((uint8x16_t)v64, v62)), vabdq_u8(v61, v67)), vabdq_u8(v68, v62));
  v69.i64[0] = 0x202020202020202;
  v69.i64[1] = 0x202020202020202;
  v74 = vandq_s8((int8x16_t)vcgtq_u8(v69, v73), v72);
  filter8_16(vpaddl_u32((uint32x2_t)vshrn_n_s16((int16x8_t)v74, 4uLL)), &v121, &v120, &v119, &v118, &v117, &v116, v72, v74, v70, v61, v65, v63, v67, v62, (uint64_t)a8, v66, v64, v68);
  v76 = v120;
  v75 = v121;
  v77 = v119;
  v79 = v117;
  v78 = v118;
  v80 = a1 - 3;
  *v80 = v121.i8[0];
  v80[1] = v76.i8[0];
  v80[2] = v77.i8[0];
  v81 = v116;
  v82 = &a1[v17];
  *a1 = v78.i8[0];
  a1[1] = v79.i8[0];
  a1[2] = v81.i8[0];
  v83 = &a1[8 * a2];
  v84 = v82 - 3;
  *v84 = v75.i8[1];
  v84[1] = v76.i8[1];
  v84[2] = v77.i8[1];
  *v82 = v78.i8[1];
  v82[1] = v79.i8[1];
  v82[2] = v81.i8[1];
  v85 = &v82[v17];
  v86 = v85 - 3;
  *v86 = v75.i8[2];
  v86[1] = v76.i8[2];
  v86[2] = v77.i8[2];
  *v85 = v78.i8[2];
  v85[1] = v79.i8[2];
  v85[2] = v81.i8[2];
  v87 = &v85[v17];
  v88 = v87 - 3;
  *v88 = v75.i8[3];
  v88[1] = v76.i8[3];
  v88[2] = v77.i8[3];
  *v87 = v78.i8[3];
  v87[1] = v79.i8[3];
  v87[2] = v81.i8[3];
  v89 = &v87[v17];
  v90 = v89 - 3;
  *v90 = v75.i8[4];
  v90[1] = v76.i8[4];
  v90[2] = v77.i8[4];
  *v89 = v78.i8[4];
  v89[1] = v79.i8[4];
  v89[2] = v81.i8[4];
  v91 = &v89[v17];
  v92 = v91 - 3;
  *v92 = v75.i8[5];
  v92[1] = v76.i8[5];
  v92[2] = v77.i8[5];
  *v91 = v78.i8[5];
  v91[1] = v79.i8[5];
  v91[2] = v81.i8[5];
  v93 = &v91[v17];
  v94 = v93 - 3;
  *v94 = v75.i8[6];
  v94[1] = v76.i8[6];
  v94[2] = v77.i8[6];
  *v93 = v78.i8[6];
  v93[1] = v79.i8[6];
  v93[2] = v81.i8[6];
  v95 = &v93[v17];
  v96 = v95 - 3;
  *v96 = v75.i8[7];
  v96[1] = v76.i8[7];
  v96[2] = v77.i8[7];
  *v95 = v78.i8[7];
  v95[1] = v79.i8[7];
  v95[2] = v81.i8[7];
  v97 = vextq_s8(v75, v75, 8uLL).u64[0];
  v98 = vextq_s8(v76, v76, 8uLL).u64[0];
  v99 = vextq_s8(v77, v77, 8uLL).u64[0];
  *(_QWORD *)&result = vextq_s8(v78, v78, 8uLL).u64[0];
  v76.i64[0] = vextq_s8(v79, v79, 8uLL).u64[0];
  v77.i64[0] = vextq_s8(v81, v81, 8uLL).u64[0];
  v101 = v83 - 3;
  *v101 = v97;
  v101[1] = v98;
  v101[2] = v99;
  *v83 = LOBYTE(result);
  v83[1] = v76.i8[0];
  v83[2] = v77.i8[0];
  v102 = &v83[v17];
  v103 = v102 - 3;
  *v103 = BYTE1(v97);
  v103[1] = BYTE1(v98);
  v103[2] = BYTE1(v99);
  *v102 = BYTE1(result);
  v102[1] = v76.i8[1];
  v102[2] = v77.i8[1];
  v104 = &v102[v17];
  v105 = v104 - 3;
  *v105 = BYTE2(v97);
  v105[1] = BYTE2(v98);
  v105[2] = BYTE2(v99);
  *v104 = BYTE2(result);
  v104[1] = v76.i8[2];
  v104[2] = v77.i8[2];
  v106 = &v104[v17];
  v107 = v106 - 3;
  *v107 = BYTE3(v97);
  v107[1] = BYTE3(v98);
  v107[2] = BYTE3(v99);
  *v106 = BYTE3(result);
  v106[1] = v76.i8[3];
  v106[2] = v77.i8[3];
  v108 = &v106[v17];
  v109 = v108 - 3;
  *v109 = BYTE4(v97);
  v109[1] = BYTE4(v98);
  v109[2] = BYTE4(v99);
  *v108 = BYTE4(result);
  v108[1] = v76.i8[4];
  v108[2] = v77.i8[4];
  v110 = &v108[v17];
  v111 = v110 - 3;
  *v111 = BYTE5(v97);
  v111[1] = BYTE5(v98);
  v111[2] = BYTE5(v99);
  *v110 = BYTE5(result);
  v110[1] = v76.i8[5];
  v110[2] = v77.i8[5];
  v112 = &v110[v17];
  v113 = v112 - 3;
  *v113 = BYTE6(v97);
  v113[1] = BYTE6(v98);
  v113[2] = BYTE6(v99);
  *v112 = BYTE6(result);
  v112[1] = v76.i8[6];
  v112[2] = v77.i8[6];
  v114 = &v112[v17];
  v115 = v114 - 3;
  *v115 = HIBYTE(v97);
  v115[1] = HIBYTE(v98);
  v115[2] = HIBYTE(v99);
  *v114 = HIBYTE(result);
  v114[1] = v76.i8[7];
  v114[2] = v77.i8[7];
  return result;
}

uint64_t vpx_lpf_horizontal_16_neon(int8x8_t *a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  int v7;
  uint8x8_t *v8;
  uint8x8_t v9;
  uint64_t v10;
  uint8x8_t *v11;
  uint8x8_t v12;
  uint8x8_t *v13;
  uint8x8_t v14;
  uint8x8_t *v15;
  uint8x8_t v16;
  uint8x8_t *v17;
  uint8x8_t v18;
  uint8x8_t *v19;
  uint8x8_t v20;
  uint8x8_t *v21;
  uint8x8_t v22;
  uint8x8_t *v23;
  uint8x8_t v24;
  int8x8_t *v25;
  int8x8_t v26;
  int8x8_t *v27;
  int8x8_t v28;
  int8x8_t *v29;
  int8x8_t v30;
  int8x8_t *v31;
  uint64_t result;
  int8x8_t v33;
  int8x8_t v34;
  int8x8_t v35;
  int8x8_t v36;
  int8x8_t v37;
  int8x8_t v38;
  int8x8_t v39;
  int8x8_t v40;
  int8x8_t v41;
  int8x8_t v42;
  int8x8_t v43;
  uint64_t v44;
  int8x8_t v45;
  uint64_t v46;
  uint64_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t v53;
  int8x8_t v54;
  int8x8_t v55;
  int8x8_t v56;
  int8x8_t v57;
  int8x8_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int8x8_t v61;

  v60 = 0;
  v61 = 0;
  v58 = 0;
  v59 = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0;
  v55 = 0;
  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = 0;
  v49 = 0;
  v48 = 0;
  v47 = 0;
  v7 = 8 * a2;
  v8 = (uint8x8_t *)&a1[-a2];
  v9 = *v8;
  v10 = a2;
  v11 = (uint8x8_t *)((char *)v8 + a2);
  v12 = *v11;
  v13 = (uint8x8_t *)((char *)v11 + a2);
  v14 = *v13;
  v15 = (uint8x8_t *)((char *)v13 + a2);
  v16 = *v15;
  v17 = (uint8x8_t *)((char *)v15 + a2);
  v18 = *v17;
  v19 = (uint8x8_t *)((char *)v17 + a2);
  v20 = *v19;
  v21 = (uint8x8_t *)((char *)v19 + a2);
  v22 = *v21;
  v23 = (uint8x8_t *)((char *)v21 + a2);
  v24 = *v23;
  v25 = (int8x8_t *)((char *)v23 + a2);
  v26 = *v25;
  v27 = (int8x8_t *)((char *)v25 + a2);
  v28 = *v27;
  v29 = (int8x8_t *)((char *)v27 + a2);
  v30 = *v29;
  v31 = (int8x8_t *)((char *)v29 + a2);
  result = lpf_16_kernel(*a3, *a4, *a5, &v61, &v60, &v59, &v58, &v57, v9, v12, v14, v16, v18, v20, v22, v24, v26, v28, v30,
             *v31,
             *(int8x8_t *)((char *)v31 + a2),
             *(int8x8_t *)((char *)v31 + a2 + a2),
             *(int8x8_t *)((char *)v31 + a2 + a2 + a2),
             *(uint8x8_t *)((char *)v31 + a2 + a2 + a2 + a2),
             &v56,
             &v55,
             &v54,
             &v53,
             &v52,
             &v51,
             &v50,
             &v49,
             &v48,
             (int *)&v47 + 1,
             &v47);
  v33 = v55;
  v34 = v56;
  v35 = v53;
  v36 = v54;
  if (HIDWORD(v47))
  {
    v37 = v57;
    v38 = v52;
    if ((_DWORD)v47)
    {
      v39 = v60;
      v41 = v58;
      v40 = v59;
      v43 = v50;
      v42 = v51;
      *(int8x8_t *)((char *)a1 - (v7 - a2)) = v61;
      v44 = 3 * v10;
      *(int8x8_t *)((char *)a1 - 6 * v10) = v39;
      *(int8x8_t *)((char *)a1 - 5 * v10) = v40;
      *(int8x8_t *)((char *)a1 - 4 * v10) = v41;
      *(int8x8_t *)((char *)a1 + 3 * v10) = v42;
      *(int8x8_t *)((char *)a1 + 4 * v10) = v43;
      v45 = v48;
      *(int8x8_t *)((char *)a1 + 5 * v10) = v49;
      *(int8x8_t *)((char *)a1 + 6 * v10) = v45;
    }
    else
    {
      v44 = 3 * a2;
    }
    *(int8x8_t *)((char *)a1 - v44) = v37;
    v46 = 2 * v10;
    *(int8x8_t *)((char *)a1 + 2 * v10) = v38;
  }
  else
  {
    v46 = 2 * a2;
  }
  *(int8x8_t *)((char *)a1 - v46) = v34;
  *(int8x8_t *)((char *)a1 - v10) = v33;
  *a1 = v36;
  *(int8x8_t *)((char *)a1 + v10) = v35;
  return result;
}

uint64_t lpf_16_kernel(uint64_t result, unsigned int a2, unsigned int a3, int8x8_t *a4, int8x8_t *a5, int8x8_t *a6, int8x8_t *a7, int8x8_t *a8, uint8x8_t a9, uint8x8_t a10, uint8x8_t a11, uint8x8_t a12, uint8x8_t a13, uint8x8_t a14, uint8x8_t a15, uint8x8_t a16, int8x8_t a17, int8x8_t a18, int8x8_t a19, int8x8_t a20,int8x8_t a21,int8x8_t a22,int8x8_t a23,uint8x8_t a24,int8x8_t *a25,int8x8_t *a26,int8x8_t *a27,int8x8_t *a28,int8x8_t *a29,int8x8_t *a30,int8x8_t *a31,int8x8_t *a32,int8x8_t *a33,int *a34,_DWORD *a35)
{
  uint8x8_t v35;
  uint8x8_t v36;
  int8x8_t v37;
  int8x8_t v38;
  int8x8_t v39;
  int v40;
  int v41;
  int v42;
  int8x8_t v43;
  int8x8_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int8x8_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int8x8_t v62;
  int16x8_t v63;
  int8x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;

  v35 = vmax_u8(vabd_u8(a15, a16), vabd_u8((uint8x8_t)a18, (uint8x8_t)a17));
  v36 = vabd_u8(a16, (uint8x8_t)a17);
  v37 = vand_s8((int8x8_t)vcge_u8((uint8x8_t)vdup_n_s8(result), vqadd_u8(vqadd_u8(v36, v36), vshr_n_u8(vabd_u8(a15, (uint8x8_t)a18), 1uLL))), (int8x8_t)vcge_u8((uint8x8_t)vdup_n_s8(a2), vmax_u8(vmax_u8(vmax_u8(vmax_u8(v35, vabd_u8(a13, a14)), vabd_u8(a14, a15)), vabd_u8((uint8x8_t)a19, (uint8x8_t)a18)), vabd_u8((uint8x8_t)a20, (uint8x8_t)a19))));
  v38 = vand_s8((int8x8_t)vcgt_u8((uint8x8_t)0x202020202020202, vmax_u8(vmax_u8(vmax_u8(vmax_u8(v35, vabd_u8(a14, a16)), vabd_u8((uint8x8_t)a19, (uint8x8_t)a17)), vabd_u8(a13, a16)), vabd_u8((uint8x8_t)a20, (uint8x8_t)a17))), v37);
  *a34 = vpaddl_u32((uint32x2_t)v38);
  v39 = vand_s8(v38, (int8x8_t)vcgt_u8((uint8x8_t)0x202020202020202, vmax_u8(vmax_u8(vmax_u8(vmax_u8(vmax_u8(vmax_u8(vmax_u8(vabd_u8(a9, a16), vabd_u8(a10, a16)), vabd_u8(a11, a16)), vabd_u8(a12, a16)), vabd_u8((uint8x8_t)a21, (uint8x8_t)a17)), vabd_u8((uint8x8_t)a22, (uint8x8_t)a17)), vabd_u8((uint8x8_t)a23, (uint8x8_t)a17)), vabd_u8(a24, (uint8x8_t)a17))));
  v40 = vpaddl_u32((uint32x2_t)v39);
  *a35 = v40;
  v41 = v40;
  v42 = *a34;
  if (*a34 == -2)
    goto LABEL_3;
  v43 = (int8x8_t)vcgt_u8(v35, (uint8x8_t)vdup_n_s8(a3));
  v44 = veor_s8((int8x8_t)a15, (int8x8_t)0x8080808080808080);
  v45 = veor_s8((int8x8_t)a16, (int8x8_t)0x8080808080808080);
  v46 = veor_s8(a17, (int8x8_t)0x8080808080808080);
  v47 = veor_s8(a18, (int8x8_t)0x8080808080808080);
  v48 = vqsub_s8(v46, v45);
  v49 = vand_s8(vqadd_s8(vqadd_s8(vqadd_s8(vand_s8(vqsub_s8(v44, v47), v43), v48), v48), v48), v37);
  v50 = vshr_n_s8(vqadd_s8(v49, (int8x8_t)0x404040404040404), 3uLL);
  *a27 = veor_s8(vqsub_s8(v46, v50), (int8x8_t)0x8080808080808080);
  *a26 = veor_s8(vqadd_s8(v45, vshr_n_s8(vqadd_s8(v49, (int8x8_t)0x303030303030303), 3uLL)), (int8x8_t)0x8080808080808080);
  v51 = vbic_s8(vrshr_n_s8(v50, 1uLL), v43);
  *a28 = veor_s8(vqsub_s8(v47, v51), (int8x8_t)0x8080808080808080);
  *a25 = veor_s8(vqadd_s8(v44, v51), (int8x8_t)0x8080808080808080);
  if (v42)
  {
LABEL_3:
    *a8 = (int8x8_t)a14;
    *a29 = a19;
    v52 = (int16x8_t)vmovl_u8(a13);
    if (v40 == -2)
    {
      v53 = (int16x8_t)vmovl_u8(a14);
      v54 = (int16x8_t)vmovl_u8(a15);
      v55 = (int16x8_t)vmovl_u8(a16);
      v56 = (int16x8_t)vmovl_u8((uint8x8_t)a17);
      v57 = (int16x8_t)vmovl_u8((uint8x8_t)a18);
      v58 = (int16x8_t)vmovl_u8((uint8x8_t)a19);
    }
    else
    {
      v54 = (int16x8_t)vmovl_u8(a15);
      v55 = (int16x8_t)vmovl_u8(a16);
      v56 = (int16x8_t)vmovl_u8((uint8x8_t)a17);
      v59 = (int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vmlal_u8(vshll_n_u8(a14, 1uLL), (uint8x8_t)vmovn_s16(v52), (uint8x8_t)0x303030303030303), a15), a16), (uint8x8_t)a17);
      v60.i64[0] = 0x4000400040004;
      v60.i64[1] = 0x4000400040004;
      *a8 = vrshrn_n_s16(v59, 3uLL);
      v57 = (int16x8_t)vmovl_u8((uint8x8_t)a18);
      v61 = vaddq_s16(v59, vaddq_s16(v60, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16(v54, (int16x8_t)vaddl_u8(a14, a13)), (uint8x8_t)a18)));
      v62 = vshrn_n_s16(v61, 3uLL);
      v58 = (int16x8_t)vmovl_u8((uint8x8_t)a19);
      v63 = vaddq_s16(v61, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16(v55, (int16x8_t)vaddl_u8(a15, a13)), (uint8x8_t)a19));
      v64 = vshrn_n_s16(v63, 3uLL);
      v65 = vaddq_s16(v63, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16(v56, (int16x8_t)vaddl_u8(a16, a13)), (uint8x8_t)a20));
      *(int8x8_t *)v63.i8 = vshrn_n_s16(v65, 3uLL);
      v66 = vaddq_s16(v65, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16(v57, (int16x8_t)vaddl_u8((uint8x8_t)a17, a14)), (uint8x8_t)a20));
      *a29 = vshrn_n_s16(vaddq_s16(v66, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16(v58, (int16x8_t)vaddl_u8((uint8x8_t)a18, a15)), (uint8x8_t)a20)), 3uLL);
      *a8 = vorr_s8(vand_s8(*a8, v38), vbic_s8((int8x8_t)a14, v38));
      *a25 = vorr_s8(vbic_s8(*a25, v38), vand_s8(v62, v38));
      *a26 = vorr_s8(vbic_s8(*a26, v38), vand_s8(v64, v38));
      *a27 = vorr_s8(vbic_s8(*a27, v38), vand_s8(*(int8x8_t *)v63.i8, v38));
      *a28 = vorr_s8(vbic_s8(*a28, v38), vand_s8(vshrn_n_s16(v66, 3uLL), v38));
      *a29 = vorr_s8(vand_s8(*a29, v38), vbic_s8(a19, v38));
      if (!v41)
        return result;
      v53 = (int16x8_t)vmovl_u8(a14);
    }
    v67 = (int16x8_t)vmovl_u8((uint8x8_t)a20);
    v68 = vaddq_s16(vaddq_s16((int16x8_t)vaddw_u8(vaddw_u8(vmlal_u8(vshll_n_u8(a10, 1uLL), a9, (uint8x8_t)0x707070707070707), a11), a12), vaddq_s16(vaddq_s16(v52, v56), v55)), vaddq_s16(v54, v53));
    v69.i64[0] = 0x8000800080008;
    v69.i64[1] = 0x8000800080008;
    *a4 = vbsl_s8(v39, vrshrn_n_s16(v68, 4uLL), (int8x8_t)a10);
    v70 = vaddq_s16(v68, vaddq_s16(v69, vaddq_s16(vsubq_s16((int16x8_t)vmovl_u8(a11), (int16x8_t)vaddl_u8(a10, a9)), v57)));
    *a5 = vbsl_s8(v39, vshrn_n_s16(v70, 4uLL), (int8x8_t)a11);
    v71 = vaddq_s16(v70, vaddq_s16(vsubq_s16((int16x8_t)vmovl_u8(a12), (int16x8_t)vaddl_u8(a11, a9)), v58));
    *a6 = vbsl_s8(v39, vshrn_n_s16(v71, 4uLL), (int8x8_t)a12);
    v72 = vaddq_s16(v71, vaddq_s16(vsubq_s16(v52, (int16x8_t)vaddl_u8(a12, a9)), v67));
    *a7 = vbsl_s8(v39, vshrn_n_s16(v72, 4uLL), (int8x8_t)a13);
    v73 = vaddq_s16(v72, vaddq_s16(vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)a21), (int16x8_t)vaddl_u8(a13, a9)), v53));
    *a8 = vbsl_s8(v39, vshrn_n_s16(v73, 4uLL), *a8);
    v74 = (int16x8_t)vaddw_u8((uint16x8_t)v54, (uint8x8_t)a22);
    v75 = vaddq_s16(v73, vsubq_s16(v74, (int16x8_t)vaddw_u8((uint16x8_t)v53, a9)));
    *a25 = vbsl_s8(v39, vshrn_n_s16(v75, 4uLL), *a25);
    v76 = vaddq_s16(v75, vsubq_s16((int16x8_t)vaddw_u8((uint16x8_t)v55, (uint8x8_t)a23), (int16x8_t)vaddw_u8((uint16x8_t)v54, a9)));
    *a26 = vbsl_s8(v39, vshrn_n_s16(v76, 4uLL), *a26);
    v77 = vaddq_s16(v76, vsubq_s16((int16x8_t)vaddw_u8((uint16x8_t)v56, a24), (int16x8_t)vaddw_u8((uint16x8_t)v55, a9)));
    *a27 = vbsl_s8(v39, vshrn_n_s16(v77, 4uLL), *a27);
    v78 = vaddq_s16(v77, vsubq_s16((int16x8_t)vaddw_u8((uint16x8_t)v57, a24), (int16x8_t)vaddw_u8((uint16x8_t)v56, a10)));
    *a28 = vbsl_s8(v39, vshrn_n_s16(v78, 4uLL), *a28);
    v79 = vaddq_s16(v78, vsubq_s16((int16x8_t)vaddw_u8((uint16x8_t)v58, a24), (int16x8_t)vaddw_u8((uint16x8_t)v57, a11)));
    *a29 = vbsl_s8(v39, vshrn_n_s16(v79, 4uLL), *a29);
    v80 = vaddq_s16(v79, vsubq_s16((int16x8_t)vaddw_u8((uint16x8_t)v67, a24), (int16x8_t)vaddw_u8((uint16x8_t)v58, a12)));
    *a30 = vbsl_s8(v39, vshrn_n_s16(v80, 4uLL), a20);
    v81 = vaddq_s16(v80, vsubq_s16((int16x8_t)vaddl_u8((uint8x8_t)a21, a24), vaddq_s16(v67, v52)));
    *a31 = vbsl_s8(v39, vshrn_n_s16(v81, 4uLL), a21);
    v82 = vaddq_s16(v81, vsubq_s16((int16x8_t)vaddl_u8((uint8x8_t)a22, a24), (int16x8_t)vaddw_u8((uint16x8_t)v53, (uint8x8_t)a21)));
    *a32 = vbsl_s8(v39, vshrn_n_s16(v82, 4uLL), a22);
    *a33 = vbsl_s8(v39, vshrn_n_s16(vaddq_s16(v82, vsubq_s16((int16x8_t)vaddl_u8(a24, (uint8x8_t)a23), v74)), 4uLL), a23);
  }
  return result;
}

uint64_t vpx_lpf_horizontal_16_dual_neon(int8x16_t *a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t v11;
  uint8x16_t *v12;
  uint8x16_t v13;
  uint8x16_t *v14;
  uint8x16_t v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;
  int8x16_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;

  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v39 = 0u;
  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  v35 = 0;
  v7 = a2;
  v8 = 4 * a2;
  v9 = (int8x16_t *)((char *)a1 - v8);
  v10 = (int8x16_t *)((char *)a1 + a2 - v8);
  v11 = *v10;
  v12 = (uint8x16_t *)&v10->i8[a2];
  v13 = *v12;
  v14 = (uint8x16_t *)((char *)v12 + a2);
  v15 = *v14;
  v16 = (int8x16_t *)&v14->i8[a2];
  v17 = 7 * a2;
  v18 = 6 * a2;
  v19 = 5 * a2;
  result = lpf_16_dual_kernel(*a3, *a4, *a5, &v49, &v48, &v47, &v46, &v45, *(uint8x16_t *)((char *)a1 - 8 * a2), *(uint8x16_t *)((char *)a1 - v17), *(uint8x16_t *)((char *)a1 - v18), *(uint8x16_t *)((char *)a1 - v19), *(uint8x16_t *)((char *)a1 - v8), v11, v13, v15, *v16, *(int8x16_t *)((char *)v16 + a2), *(int8x16_t *)((char *)v16 + a2 + a2),
             *(int8x16_t *)((char *)v16 + a2 + a2 + a2),
             *(int8x16_t *)((char *)a1 + v8),
             *(uint8x16_t *)((char *)a1 + v19),
             *(uint8x16_t *)((char *)a1 + v18),
             *(uint8x16_t *)((char *)a1 + v17),
             &v44,
             &v43,
             &v42,
             &v41,
             &v40,
             &v39,
             &v38,
             &v37,
             &v36,
             (int *)&v35 + 1,
             &v35);
  v21 = v44;
  v22 = v42;
  v23 = v43;
  v24 = v41;
  if (HIDWORD(v35))
  {
    v25 = v45;
    v26 = v40;
    if ((_DWORD)v35)
    {
      v27 = v48;
      v29 = v46;
      v28 = v47;
      v30 = v39;
      v31 = v38;
      *(int8x16_t *)((char *)a1 - v17) = v49;
      *(int8x16_t *)((char *)a1 - v18) = v27;
      *(int8x16_t *)((char *)a1 - v19) = v28;
      *v9 = v29;
      v32 = 3 * v7;
      *(int8x16_t *)((char *)a1 + 3 * v7) = v30;
      *(int8x16_t *)((char *)a1 + v8) = v31;
      v33 = v36;
      *(int8x16_t *)((char *)a1 + v19) = v37;
      *(int8x16_t *)((char *)a1 + v18) = v33;
    }
    else
    {
      v32 = 3 * a2;
    }
    *(int8x16_t *)((char *)a1 - v32) = v25;
    v34 = 2 * v7;
    *(int8x16_t *)((char *)a1 + 2 * v7) = v26;
  }
  else
  {
    v34 = 2 * a2;
  }
  *(int8x16_t *)((char *)a1 - v34) = v21;
  *(int8x16_t *)((char *)a1 - v7) = v23;
  *a1 = v22;
  *(int8x16_t *)((char *)a1 + v7) = v24;
  return result;
}

uint64_t lpf_16_dual_kernel(uint64_t result, unsigned int a2, unsigned int a3, int8x16_t *a4, int8x16_t *a5, int8x16_t *a6, int8x16_t *a7, int8x16_t *a8, uint8x16_t a9, uint8x16_t a10, uint8x16_t a11, uint8x16_t a12, uint8x16_t a13, int8x16_t a14, uint8x16_t a15, uint8x16_t a16, int8x16_t a17, int8x16_t a18, int8x16_t a19, int8x16_t a20,int8x16_t a21,uint8x16_t a22,uint8x16_t a23,uint8x16_t a24,int8x16_t *a25,int8x16_t *a26,int8x16_t *a27,int8x16_t *a28,int8x16_t *a29,int8x16_t *a30,int8x16_t *a31,int8x16_t *a32,int8x16_t *a33,int *a34,_DWORD *a35)
{
  uint8x16_t v35;
  uint8x16_t v36;
  int8x16_t v37;
  uint8x16_t v38;
  int16x8_t v39;
  int16x8_t v40;
  __int32 v41;
  int v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int8x16_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int8x16_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int8x16_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  uint8x16_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  uint16x8_t v102;
  uint16x8_t v103;
  int16x8_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int8x16_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int8x16_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int8x16_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int16x8_t v148;

  v35 = vmaxq_u8(vabdq_u8(a15, a16), vabdq_u8((uint8x16_t)a18, (uint8x16_t)a17));
  v36 = vabdq_u8(a16, (uint8x16_t)a17);
  v37 = vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(result), vqaddq_u8(vqaddq_u8(v36, v36), vshrq_n_u8(vabdq_u8(a15, (uint8x16_t)a18), 1uLL))), (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a2), vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(v35, vabdq_u8(a13, (uint8x16_t)a14)), vabdq_u8((uint8x16_t)a14, a15)), vabdq_u8((uint8x16_t)a19, (uint8x16_t)a18)), vabdq_u8((uint8x16_t)a20, (uint8x16_t)a19))));
  v38.i64[0] = 0x202020202020202;
  v38.i64[1] = 0x202020202020202;
  v39 = (int16x8_t)vandq_s8((int8x16_t)vcgtq_u8(v38, vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(v35, vabdq_u8((uint8x16_t)a14, a16)), vabdq_u8((uint8x16_t)a19, (uint8x16_t)a17)), vabdq_u8(a13, a16)), vabdq_u8((uint8x16_t)a20, (uint8x16_t)a17))), v37);
  *a34 = vpaddl_u32((uint32x2_t)vshrn_n_s16(v39, 4uLL));
  v40 = (int16x8_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_u8(v38, vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(vabdq_u8(a9, a16), vabdq_u8(a10, a16)), vabdq_u8(a11, a16)), vabdq_u8(a12, a16)), vabdq_u8((uint8x16_t)a21, (uint8x16_t)a17)), vabdq_u8(a22, (uint8x16_t)a17)), vabdq_u8(a23, (uint8x16_t)a17)), vabdq_u8(a24, (uint8x16_t)a17))));
  v38.i32[0] = vpaddl_u32((uint32x2_t)vshrn_n_s16(v40, 4uLL));
  *a35 = v38.i32[0];
  v41 = v38.i32[0];
  v42 = *a34;
  if (*a34 == -2)
    goto LABEL_3;
  v43 = (int8x16_t)vcgtq_u8(v35, (uint8x16_t)vdupq_n_s8(a3));
  v44.i64[0] = 0x8080808080808080;
  v44.i64[1] = 0x8080808080808080;
  v45 = veorq_s8((int8x16_t)a15, v44);
  v46 = veorq_s8((int8x16_t)a16, v44);
  v47 = veorq_s8(a17, v44);
  v48 = veorq_s8(a18, v44);
  v49 = vqsubq_s8(v47, v46);
  v50 = vandq_s8(vqaddq_s8(vqaddq_s8(vqaddq_s8(vandq_s8(vqsubq_s8(v45, v48), v43), v49), v49), v49), v37);
  v51.i64[0] = 0x404040404040404;
  v51.i64[1] = 0x404040404040404;
  v52 = vshrq_n_s8(vqaddq_s8(v50, v51), 3uLL);
  v49.i64[0] = 0x303030303030303;
  v49.i64[1] = 0x303030303030303;
  *a27 = veorq_s8(vqsubq_s8(v47, v52), v44);
  *a26 = veorq_s8(vqaddq_s8(v46, vshrq_n_s8(vqaddq_s8(v50, v49), 3uLL)), v44);
  v53 = vbicq_s8(vrshrq_n_s8(v52, 1uLL), v43);
  *a28 = veorq_s8(vqsubq_s8(v48, v53), v44);
  *a25 = veorq_s8(vqaddq_s8(v45, v53), v44);
  if (v42)
  {
LABEL_3:
    *a8 = a14;
    *a29 = a19;
    v54 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a13.i8);
    v55 = (int16x8_t)vmovl_high_u8(a13);
    if (v41 == -2)
    {
      v146 = (int8x16_t)a22;
      v147 = (int8x16_t)a23;
      v56 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a14.i8);
      v57 = (int16x8_t)vmovl_high_u8((uint8x16_t)a14);
      v58 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a15.i8);
      v59 = (int16x8_t)vmovl_high_u8(a15);
      v60 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a16.i8);
      v61 = (int16x8_t)vmovl_high_u8(a16);
      v62 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a17.i8);
      v63 = (int16x8_t)vmovl_high_u8((uint8x16_t)a17);
      v64 = vmovl_u8(*(uint8x8_t *)a18.i8);
      v65 = vmovl_high_u8((uint8x16_t)a18);
      v66 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a19.i8);
      v67 = (int16x8_t)vmovl_high_u8((uint8x16_t)a19);
      v68 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a20.i8);
      v148 = (int16x8_t)vmovl_high_u8((uint8x16_t)a20);
    }
    else
    {
      v140 = v54;
      v141 = v55;
      v69 = (int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vmlal_u8(vshll_n_u8(*(uint8x8_t *)a14.i8, 1uLL), (uint8x8_t)vmovn_s16(v54), (uint8x8_t)0x303030303030303), *(uint8x8_t *)a15.i8), *(uint8x8_t *)a16.i8), *(uint8x8_t *)a17.i8);
      v70 = (int16x8_t)vaddw_high_u8(vaddw_high_u8(vaddw_high_u8(vmlal_u8(vshll_high_n_u8((uint8x16_t)a14, 1uLL), (uint8x8_t)vmovn_s16(v55), (uint8x8_t)0x303030303030303), a15), a16), (uint8x16_t)a17);
      v71.i64[0] = 0x4000400040004;
      v71.i64[1] = 0x4000400040004;
      *a8 = vrshrn_high_n_s16(vrshrn_n_s16(v69, 3uLL), v70, 3uLL);
      v72 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a18.i8);
      v73 = (int16x8_t)vaddl_u8(*(uint8x8_t *)a18.i8, *(uint8x8_t *)a15.i8);
      v74 = (int16x8_t)vmovl_high_u8((uint8x16_t)a18);
      v75 = (int16x8_t)vaddl_high_u8((uint8x16_t)a18, a15);
      v76 = vaddq_s16(v69, vaddq_s16(v71, vsubq_s16(v73, (int16x8_t)vaddl_u8(*(uint8x8_t *)a14.i8, *(uint8x8_t *)a13.i8))));
      v77 = vaddq_s16(v70, vaddq_s16(v71, vsubq_s16(v75, (int16x8_t)vaddl_high_u8((uint8x16_t)a14, a13))));
      v78 = vshrn_high_n_s16(vshrn_n_s16(v76, 3uLL), v77, 3uLL);
      v142 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a16.i8);
      v143 = (int16x8_t)vmovl_high_u8(a16);
      v66 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a19.i8);
      v67 = (int16x8_t)vmovl_high_u8((uint8x16_t)a19);
      v79 = vaddq_s16(v76, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16(v142, (int16x8_t)vaddl_u8(*(uint8x8_t *)a15.i8, *(uint8x8_t *)a13.i8)), *(uint8x8_t *)a19.i8));
      v80 = vaddq_s16(v77, (int16x8_t)vaddw_high_u8((uint16x8_t)vsubq_s16(v143, (int16x8_t)vaddl_high_u8(a15, a13)), (uint8x16_t)a19));
      v81 = vshrn_high_n_s16(vshrn_n_s16(v79, 3uLL), v80, 3uLL);
      v144 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a17.i8);
      v145 = (int16x8_t)vmovl_high_u8((uint8x16_t)a17);
      v82 = vaddq_s16(v79, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16(v144, (int16x8_t)vaddl_u8(*(uint8x8_t *)a16.i8, *(uint8x8_t *)a13.i8)), *(uint8x8_t *)a20.i8));
      v83 = vaddq_s16(v80, (int16x8_t)vaddw_high_u8((uint16x8_t)vsubq_s16(v145, (int16x8_t)vaddl_high_u8(a16, a13)), (uint8x16_t)a20));
      v84 = vshrn_high_n_s16(vshrn_n_s16(v82, 3uLL), v83, 3uLL);
      v85 = vaddq_s16(v82, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16(v72, (int16x8_t)vaddl_u8(*(uint8x8_t *)a17.i8, *(uint8x8_t *)a14.i8)), *(uint8x8_t *)a20.i8));
      v86 = vaddq_s16(v83, (int16x8_t)vaddw_high_u8((uint16x8_t)vsubq_s16(v74, (int16x8_t)vaddl_high_u8((uint8x16_t)a17, (uint8x16_t)a14)), (uint8x16_t)a20));
      *a29 = vshrn_high_n_s16(vshrn_n_s16(vaddq_s16(v85, (int16x8_t)vaddw_u8((uint16x8_t)vsubq_s16(v66, v73), *(uint8x8_t *)a20.i8)), 3uLL), vaddq_s16(v86, (int16x8_t)vaddw_high_u8((uint16x8_t)vsubq_s16(v67, v75), (uint8x16_t)a20)), 3uLL);
      *a8 = vorrq_s8(vandq_s8(*a8, (int8x16_t)v39), vbicq_s8(a14, (int8x16_t)v39));
      *a25 = vorrq_s8(vbicq_s8(*a25, (int8x16_t)v39), vandq_s8(v78, (int8x16_t)v39));
      *a26 = vorrq_s8(vbicq_s8(*a26, (int8x16_t)v39), vandq_s8(v81, (int8x16_t)v39));
      *a27 = vorrq_s8(vbicq_s8(*a27, (int8x16_t)v39), vandq_s8(v84, (int8x16_t)v39));
      *a28 = vorrq_s8(vbicq_s8(*a28, (int8x16_t)v39), vandq_s8(vshrn_high_n_s16(vshrn_n_s16(v85, 3uLL), v86, 3uLL), (int8x16_t)v39));
      *a29 = vorrq_s8(vandq_s8(*a29, (int8x16_t)v39), vbicq_s8(a19, (int8x16_t)v39));
      if (!v41)
        return result;
      v87 = v72;
      v65 = (uint16x8_t)v74;
      v146 = (int8x16_t)a22;
      v147 = (int8x16_t)a23;
      v56 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a14.i8);
      v57 = (int16x8_t)vmovl_high_u8((uint8x16_t)a14);
      v58 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a15.i8);
      v59 = (int16x8_t)vmovl_high_u8(a15);
      v68 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a20.i8);
      v148 = (int16x8_t)vmovl_high_u8((uint8x16_t)a20);
      v64 = (uint16x8_t)v87;
      v62 = v144;
      v63 = v145;
      v60 = v142;
      v61 = v143;
      v54 = v140;
      v55 = v141;
    }
    v88.i64[0] = 0x707070707070707;
    v88.i64[1] = 0x707070707070707;
    v89 = vaddq_s16(vaddq_s16((int16x8_t)vaddw_u8(vaddw_u8(vmlal_u8(vshll_n_u8(*(uint8x8_t *)a10.i8, 1uLL), *(uint8x8_t *)a9.i8, (uint8x8_t)0x707070707070707), *(uint8x8_t *)a11.i8), *(uint8x8_t *)a12.i8), vaddq_s16(vaddq_s16(v54, v62), v60)), vaddq_s16(v58, v56));
    v90 = vaddq_s16(vaddq_s16((int16x8_t)vaddw_high_u8(vaddw_high_u8(vmlal_high_u8(vshll_high_n_u8(a10, 1uLL), a9, v88), a11), a12), vaddq_s16(vaddq_s16(v55, v63), v61)), vaddq_s16(v59, v57));
    v91.i64[0] = 0x8000800080008;
    v91.i64[1] = 0x8000800080008;
    *a4 = vbslq_s8((int8x16_t)v40, vrshrn_high_n_s16(vrshrn_n_s16(v89, 4uLL), v90, 4uLL), (int8x16_t)a10);
    v92 = (int16x8_t)vaddw_u8(v64, *(uint8x8_t *)a11.i8);
    v93 = vaddq_s16(v89, vaddq_s16(v91, vsubq_s16(v92, (int16x8_t)vaddl_u8(*(uint8x8_t *)a10.i8, *(uint8x8_t *)a9.i8))));
    v94 = (int16x8_t)vaddw_high_u8(v65, a11);
    v95 = v54;
    v96 = vaddq_s16(v90, vaddq_s16(v91, vsubq_s16(v94, (int16x8_t)vaddl_high_u8(a10, a9))));
    *a5 = vbslq_s8((int8x16_t)v40, vshrn_high_n_s16(vshrn_n_s16(v93, 4uLL), v96, 4uLL), (int8x16_t)a11);
    v97 = (int16x8_t)vaddw_u8((uint16x8_t)v66, *(uint8x8_t *)a12.i8);
    v98 = vaddq_s16(v93, vsubq_s16(v97, (int16x8_t)vaddl_u8(*(uint8x8_t *)a11.i8, *(uint8x8_t *)a9.i8)));
    v99 = (int16x8_t)vaddw_high_u8((uint16x8_t)v67, a12);
    v100 = vaddq_s16(v96, vsubq_s16(v99, (int16x8_t)vaddl_high_u8(a11, a9)));
    *a6 = vbslq_s8((int8x16_t)v40, vshrn_high_n_s16(vshrn_n_s16(v98, 4uLL), v100, 4uLL), (int8x16_t)a12);
    v101 = vaddq_s16(v68, v95);
    v102 = (uint16x8_t)v68;
    v103 = (uint16x8_t)v67;
    v104 = vaddq_s16(v98, vsubq_s16(v101, (int16x8_t)vaddl_u8(*(uint8x8_t *)a12.i8, *(uint8x8_t *)a9.i8)));
    v105 = (uint16x8_t)v66;
    v106 = v65;
    v107 = vaddq_s16(v148, v55);
    v108 = vaddq_s16(v100, vsubq_s16(v107, (int16x8_t)vaddl_high_u8(a12, a9)));
    *a7 = vbslq_s8((int8x16_t)v40, vshrn_high_n_s16(vshrn_n_s16(v104, 4uLL), v108, 4uLL), (int8x16_t)a13);
    v109 = (int16x8_t)vaddw_u8((uint16x8_t)v56, *(uint8x8_t *)a21.i8);
    v110 = vaddq_s16(v104, vsubq_s16(v109, (int16x8_t)vaddl_u8(*(uint8x8_t *)a13.i8, *(uint8x8_t *)a9.i8)));
    v111 = (int16x8_t)vaddl_high_u8(a13, a9);
    v112 = (int16x8_t)vaddw_high_u8((uint16x8_t)v57, (uint8x16_t)a21);
    v113 = vaddq_s16(v108, vsubq_s16(v112, v111));
    *a8 = vbslq_s8((int8x16_t)v40, vshrn_high_n_s16(vshrn_n_s16(v110, 4uLL), v113, 4uLL), *a8);
    v114 = (int16x8_t)vaddw_u8((uint16x8_t)v58, *(uint8x8_t *)v146.i8);
    v115 = vaddq_s16(v110, vsubq_s16(v114, (int16x8_t)vaddw_u8((uint16x8_t)v56, *(uint8x8_t *)a9.i8)));
    v116 = (int16x8_t)vaddw_high_u8((uint16x8_t)v57, a9);
    v117 = (int16x8_t)vaddw_high_u8((uint16x8_t)v59, (uint8x16_t)v146);
    v118 = vaddq_s16(v113, vsubq_s16(v117, v116));
    *a25 = vbslq_s8((int8x16_t)v40, vshrn_high_n_s16(vshrn_n_s16(v115, 4uLL), v118, 4uLL), *a25);
    v119 = vaddq_s16(v115, vsubq_s16((int16x8_t)vaddw_u8((uint16x8_t)v60, *(uint8x8_t *)v147.i8), (int16x8_t)vaddw_u8((uint16x8_t)v58, *(uint8x8_t *)a9.i8)));
    v120 = vaddq_s16(v118, vsubq_s16((int16x8_t)vaddw_high_u8((uint16x8_t)v61, (uint8x16_t)v147), (int16x8_t)vaddw_high_u8((uint16x8_t)v59, a9)));
    *a26 = vbslq_s8((int8x16_t)v40, vshrn_high_n_s16(vshrn_n_s16(v119, 4uLL), v120, 4uLL), *a26);
    v121 = vsubq_s16((int16x8_t)vaddw_u8((uint16x8_t)v62, *(uint8x8_t *)a24.i8), (int16x8_t)vaddw_u8((uint16x8_t)v60, *(uint8x8_t *)a9.i8));
    v122 = vsubq_s16((int16x8_t)vaddw_high_u8((uint16x8_t)v63, a24), (int16x8_t)vaddw_high_u8((uint16x8_t)v61, a9));
    v123 = vaddq_s16(v119, v121);
    v124 = vaddq_s16(v120, v122);
    *a27 = vbslq_s8((int8x16_t)v40, vshrn_high_n_s16(vshrn_n_s16(v123, 4uLL), v124, 4uLL), *a27);
    v125 = vsubq_s16((int16x8_t)vaddw_u8(v64, *(uint8x8_t *)a24.i8), (int16x8_t)vaddw_u8((uint16x8_t)v62, *(uint8x8_t *)a10.i8));
    v126 = vsubq_s16((int16x8_t)vaddw_high_u8(v106, a24), (int16x8_t)vaddw_high_u8((uint16x8_t)v63, a10));
    v127 = vaddq_s16(v123, v125);
    v128 = vaddq_s16(v124, v126);
    *a28 = vbslq_s8((int8x16_t)v40, vshrn_high_n_s16(vshrn_n_s16(v127, 4uLL), v128, 4uLL), *a28);
    v129 = vaddq_s16(v127, vsubq_s16((int16x8_t)vaddw_u8(v105, *(uint8x8_t *)a24.i8), v92));
    v130 = vaddq_s16(v128, vsubq_s16((int16x8_t)vaddw_high_u8(v103, a24), v94));
    v131 = vbslq_s8((int8x16_t)v40, vshrn_high_n_s16(vshrn_n_s16(v129, 4uLL), v130, 4uLL), *a29);
    v132 = vaddq_s16(v129, vsubq_s16((int16x8_t)vaddw_u8(v102, *(uint8x8_t *)a24.i8), v97));
    v133 = vaddq_s16(v130, vsubq_s16((int16x8_t)vaddw_high_u8((uint16x8_t)v148, a24), v99));
    v134 = vbslq_s8((int8x16_t)v40, vshrn_high_n_s16(vshrn_n_s16(v132, 4uLL), v133, 4uLL), a20);
    v135 = vaddq_s16(v132, vsubq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)a24.i8, *(uint8x8_t *)a21.i8), v101));
    v136 = vaddq_s16(v133, vsubq_s16((int16x8_t)vaddl_high_u8(a24, (uint8x16_t)a21), v107));
    v137 = vbslq_s8((int8x16_t)v40, vshrn_high_n_s16(vshrn_n_s16(v135, 4uLL), v136, 4uLL), a21);
    v138 = vaddq_s16(v135, vsubq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)a24.i8, *(uint8x8_t *)v146.i8), v109));
    v139 = vaddq_s16(v136, vsubq_s16((int16x8_t)vaddl_high_u8(a24, (uint8x16_t)v146), v112));
    *a29 = v131;
    *a30 = v134;
    *a31 = v137;
    *a32 = vbslq_s8((int8x16_t)v40, vshrn_high_n_s16(vshrn_n_s16(v138, 4uLL), v139, 4uLL), v146);
    *a33 = vbslq_s8((int8x16_t)v40, vshrn_high_n_s16(vshrn_n_s16(vaddq_s16(v138, vsubq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)a24.i8, *(uint8x8_t *)v147.i8), v114)), 4uLL), vaddq_s16(v139, vsubq_s16((int16x8_t)vaddl_high_u8(a24, (uint8x16_t)v147), v117)), 4uLL), v147);
  }
  return result;
}

int8x16_t vpx_lpf_vertical_16_neon(_BYTE *a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  int32x4_t *v6;
  int8x16_t v7;
  uint64_t v8;
  int8x16_t *v9;
  int8x16_t v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  int8x16_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t result;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  _BYTE *v80;
  int8x8_t v81;
  int8x8_t v82;
  int8x8_t v83;
  _BYTE *v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  _BYTE *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  int8x16_t v108;
  int8x16_t v109;
  uint8x8_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  int8x8_t v117;
  int8x8_t v118;
  int8x8_t v119;
  int8x8_t v120;
  int8x8_t v121;
  int8x8_t v122;
  int8x8_t v123;
  int8x8_t v124;
  int8x8_t v125;
  int8x8_t v126;

  v125 = 0;
  v126 = 0;
  v6 = (int32x4_t *)(a1 - 8);
  v7 = *(int8x16_t *)(a1 - 8);
  v8 = a2;
  v9 = (int8x16_t *)&a1[a2 - 8];
  v10 = *v9;
  v11 = (int8x16_t *)((char *)v9 + a2);
  v12 = (int8x16_t *)((char *)v11 + a2);
  v13 = *v12;
  v14 = (int8x16_t *)((char *)v12 + a2);
  v15 = (int8x16_t *)((char *)v14 + a2);
  v16 = (int8x16_t *)((char *)v15 + a2);
  v17 = *v16;
  v18 = (int16x8_t)vtrn1q_s8(v7, v10);
  v19 = (int16x8_t)vtrn2q_s8(v7, v10);
  v20 = (int16x8_t)vtrn1q_s8(*v11, v13);
  v21 = (int16x8_t)vtrn2q_s8(*v11, v13);
  v22 = (int16x8_t)vtrn1q_s8(*v14, *v15);
  v23 = (int16x8_t)vtrn2q_s8(*v14, *v15);
  v24 = *(int8x16_t *)((char *)v16 + a2);
  v25 = (int16x8_t)vtrn1q_s8(*v16, v24);
  v123 = 0;
  v124 = 0;
  v26 = (int16x8_t)vtrn2q_s8(v17, v24);
  v27 = (int32x4_t)vtrn1q_s16(v18, v20);
  v28 = (int32x4_t)vtrn2q_s16(v18, v20);
  v121 = 0;
  v122 = 0;
  v29 = (int32x4_t)vtrn1q_s16(v19, v21);
  v30 = (int32x4_t)vtrn2q_s16(v19, v21);
  v31 = (int32x4_t)vtrn1q_s16(v22, v25);
  v32 = (int32x4_t)vtrn2q_s16(v22, v25);
  v119 = 0;
  v120 = 0;
  v33 = (int32x4_t)vtrn1q_s16(v23, v26);
  v34 = (int32x4_t)vtrn2q_s16(v23, v26);
  v117 = 0;
  v118 = 0;
  v35 = (int8x16_t)vtrn1q_s32(v27, v31);
  v36 = (int8x16_t)vtrn2q_s32(v27, v31);
  v37 = (int8x16_t)vtrn1q_s32(v28, v32);
  v38 = (int8x16_t)vtrn2q_s32(v28, v32);
  v115 = 0;
  v116 = 0;
  v113 = 0;
  v114 = 0;
  v112 = 0;
  v39 = (int8x16_t)vtrn1q_s32(v29, v33);
  v40 = (int8x16_t)vtrn2q_s32(v29, v33);
  v41 = (int8x16_t)vtrn1q_s32(v30, v34);
  v42 = (int8x16_t)vtrn2q_s32(v30, v34);
  v110 = (uint8x8_t)vextq_s8(v42, v42, 8uLL).u64[0];
  v111 = v35.i64[0];
  v108 = vextq_s8(v41, v41, 8uLL);
  v109 = v36;
  lpf_16_kernel(*a3, *a4, *a5, &v126, &v125, &v124, &v123, &v122, *(uint8x8_t *)v35.i8, *(uint8x8_t *)v39.i8, *(uint8x8_t *)v37.i8, *(uint8x8_t *)v41.i8, *(uint8x8_t *)v36.i8, *(uint8x8_t *)v40.i8, *(uint8x8_t *)v38.i8, *(uint8x8_t *)v42.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL),
    *(int8x8_t *)v108.i8,
    (int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL),
    (int8x8_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL),
    (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL),
    v110,
    &v121,
    &v120,
    &v119,
    &v118,
    &v117,
    (int8x8_t *)&v116,
    (int8x8_t *)&v115,
    (int8x8_t *)&v114,
    (int8x8_t *)&v113,
    (int *)&v112 + 1,
    &v112);
  if (HIDWORD(v112))
  {
    if ((_DWORD)v112)
    {
      *(int8x8_t *)v50.i8 = v125;
      *(int8x8_t *)v49.i8 = v126;
      *(int8x8_t *)v52.i8 = v123;
      *(int8x8_t *)v51.i8 = v124;
      *(int8x8_t *)v54.i8 = v121;
      *(int8x8_t *)v53.i8 = v122;
      *(int8x8_t *)v55.i8 = v120;
      v56.i64[0] = v111;
      v56.u64[1] = (unint64_t)v119;
      v49.u64[1] = (unint64_t)v118;
      v50.u64[1] = (unint64_t)v117;
      v51.i64[1] = v116;
      v52.i64[1] = v115;
      v53.i64[1] = v114;
      v54.i64[1] = v113;
      v55.u64[1] = (unint64_t)v110;
      v57 = (int16x8_t)vtrn1q_s8(v56, v49);
      v58 = (int16x8_t)vtrn2q_s8(v56, v49);
      v59 = (int16x8_t)vtrn1q_s8(v50, v51);
      v60 = (int16x8_t)vtrn2q_s8(v50, v51);
      v61 = (int16x8_t)vtrn1q_s8(v52, v53);
      v62 = (int16x8_t)vtrn2q_s8(v52, v53);
      v63 = (int16x8_t)vtrn1q_s8(v54, v55);
      v64 = (int16x8_t)vtrn2q_s8(v54, v55);
      v65 = (int32x4_t)vtrn1q_s16(v57, v59);
      v66 = (int32x4_t)vtrn2q_s16(v57, v59);
      v67 = (int32x4_t)vtrn1q_s16(v58, v60);
      v68 = (int32x4_t)vtrn2q_s16(v58, v60);
      v69 = (int32x4_t)vtrn1q_s16(v61, v63);
      v70 = (int32x4_t)vtrn2q_s16(v61, v63);
      v71 = (int32x4_t)vtrn1q_s16(v62, v64);
      v72 = (int32x4_t)vtrn2q_s16(v62, v64);
      v73 = vtrn1q_s32(v65, v69);
      v74 = vtrn2q_s32(v65, v69);
      v75 = vtrn1q_s32(v66, v70);
      v76 = vtrn2q_s32(v66, v70);
      v77 = vtrn1q_s32(v67, v71);
      v78 = vtrn2q_s32(v67, v71);
      v79 = vtrn1q_s32(v68, v72);
      result = (int8x16_t)vtrn2q_s32(v68, v72);
      *v6 = v73;
      *(int32x4_t *)((char *)v6 + v8) = v77;
      *v11 = (int8x16_t)v75;
      *(int32x4_t *)((char *)v11 + v8) = v79;
      *v14 = (int8x16_t)v74;
      *(int32x4_t *)((char *)v14 + v8) = v78;
      *v16 = (int8x16_t)v76;
      *(int8x16_t *)((char *)v16 + v8) = result;
    }
    else
    {
      *(int8x8_t *)v44.i8 = v121;
      *(int8x8_t *)result.i8 = v122;
      *(int8x8_t *)v46.i8 = v119;
      *(int8x8_t *)v45.i8 = v120;
      *(int8x8_t *)v48.i8 = v117;
      *(int8x8_t *)v47.i8 = v118;
      v91 = (int16x8_t)vzip1q_s8(v109, result);
      v92 = (int16x8_t)vzip1q_s8(v44, v45);
      v93 = (int16x8_t)vzip1q_s8(v46, v47);
      v94 = (int16x8_t)vzip1q_s8(v48, v108);
      v95 = (int32x4_t)vzip1q_s16(v91, v92);
      v96 = (int32x4_t)vzip2q_s16(v91, v92);
      v97 = (int32x4_t)vzip1q_s16(v93, v94);
      v98 = (int32x4_t)vzip2q_s16(v93, v94);
      v99 = vzip1q_s32(v95, v97);
      v100 = vzip2q_s32(v95, v97);
      v101 = vzip1q_s32(v96, v98);
      result = (int8x16_t)vzip2q_s32(v96, v98);
      *(_QWORD *)(a1 - 4) = v99.i64[0];
      v102 = a1 - 4;
      *(_QWORD *)&v102[v8] = v99.i64[1];
      v103 = &v102[v8 + v8];
      *v103 = v100.i64[0];
      v104 = (_QWORD *)((char *)v103 + v8);
      *v104 = v100.i64[1];
      v105 = (_QWORD *)((char *)v104 + v8);
      *v105 = v101.i64[0];
      v106 = (_QWORD *)((char *)v105 + v8);
      *v106 = v101.i64[1];
      v107 = (_QWORD *)((char *)v106 + v8);
      *v107 = result.i64[0];
      *(_QWORD *)((char *)v107 + v8) = vextq_s8(result, result, 8uLL).u64[0];
    }
  }
  else
  {
    v80 = a1 - 2;
    v81 = v120;
    *(int8x8_t *)result.i8 = v121;
    v83 = v118;
    v82 = v119;
    *v80 = v121.i8[0];
    v80[1] = v81.i8[0];
    *a1 = v82.i8[0];
    a1[1] = v83.i8[0];
    v84 = &a1[v8 - 2];
    *v84 = result.i8[1];
    v84[1] = v81.i8[1];
    v84[2] = v82.i8[1];
    v84[3] = v83.i8[1];
    v85 = &v84[v8];
    *v85 = result.i8[2];
    v85[1] = v81.i8[2];
    v85[2] = v82.i8[2];
    v85[3] = v83.i8[2];
    v86 = &v85[v8];
    *v86 = result.i8[3];
    v86[1] = v81.i8[3];
    v86[2] = v82.i8[3];
    v86[3] = v83.i8[3];
    v87 = &v86[v8];
    *v87 = result.i8[4];
    v87[1] = v81.i8[4];
    v87[2] = v82.i8[4];
    v87[3] = v83.i8[4];
    v88 = &v87[v8];
    *v88 = result.i8[5];
    v88[1] = v81.i8[5];
    v88[2] = v82.i8[5];
    v88[3] = v83.i8[5];
    v89 = &v88[v8];
    *v89 = result.i8[6];
    v89[1] = v81.i8[6];
    v89[2] = v82.i8[6];
    v89[3] = v83.i8[6];
    v90 = &v89[v8];
    *v90 = result.i8[7];
    v90[1] = v81.i8[7];
    v90[2] = v82.i8[7];
    v90[3] = v83.i8[7];
  }
  return result;
}

uint64_t vpx_lpf_vertical_16_dual_neon(_BYTE *a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  int64x2_t *v6;
  int8x16_t v7;
  uint64_t v8;
  int8x16_t *v9;
  int8x16_t v10;
  int8x16_t *v11;
  int8x16_t v12;
  int8x16_t *v13;
  int8x16_t v14;
  int8x16_t *v15;
  int16x8_t v16;
  int8x16_t *v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int8x16_t *v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t *v24;
  int16x8_t v25;
  int16x8_t v26;
  int8x16_t *v27;
  int8x16_t *v28;
  int16x8_t v29;
  int16x8_t v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int16x8_t v33;
  int16x8_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int16x8_t v37;
  int16x8_t v38;
  int8x16_t *v39;
  int8x16_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  uint64_t result;
  int8x16_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  _BYTE *v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  _BYTE *v130;
  _BYTE *v131;
  _BYTE *v132;
  _BYTE *v133;
  _BYTE *v134;
  _BYTE *v135;
  _BYTE *v136;
  _BYTE *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  _BYTE *v142;
  _BYTE *v143;
  _BYTE *v144;
  _BYTE *v145;
  _BYTE *v146;
  _BYTE *v147;
  _BYTE *v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  _BYTE *v153;
  int8x16_t v154;
  _BYTE *v155;
  _BYTE *v156;
  _BYTE *v157;
  _BYTE *v158;
  _BYTE *v159;
  _BYTE *v160;
  _BYTE *v161;
  _BYTE *v162;
  _BYTE *v163;
  _BYTE *v164;
  _BYTE *v165;
  _BYTE *v166;
  _BYTE *v167;
  _BYTE *v168;
  _BYTE *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  _BYTE *v173;
  _BYTE *v174;
  _BYTE *v175;
  _BYTE *v176;
  _BYTE *v177;
  _BYTE *v178;
  _BYTE *v179;
  _BYTE *v180;
  _BYTE *v181;
  _BYTE *v182;
  _BYTE *v183;
  _BYTE *v184;
  _BYTE *v185;
  _BYTE *v186;
  _BYTE *v187;
  int8x16_t v188;
  int8x16_t v189;
  int64x2_t *v190;
  uint64_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int8x16_t v205[2];

  v6 = (int64x2_t *)(a1 - 8);
  v7 = *(int8x16_t *)(a1 - 8);
  v8 = a2;
  v9 = (int8x16_t *)&a1[a2 - 8];
  v10 = *v9;
  v11 = (int8x16_t *)((char *)v9 + a2);
  v12 = *v11;
  v190 = (int64x2_t *)v11;
  v13 = (int8x16_t *)((char *)v11 + a2);
  v14 = *v13;
  v15 = (int8x16_t *)((char *)v13 + a2);
  v16 = (int16x8_t)vtrn1q_s8(v7, v10);
  v17 = (int8x16_t *)((char *)v15 + a2);
  v18 = (int16x8_t)vtrn2q_s8(v7, v10);
  v19 = (int16x8_t)vtrn1q_s8(v12, v14);
  v20 = (int16x8_t)vtrn2q_s8(v12, v14);
  v21 = (int8x16_t *)((char *)v17 + a2);
  v22 = (int16x8_t)vtrn1q_s8(*v15, *v17);
  v23 = (int16x8_t)vtrn2q_s8(*v15, *v17);
  v24 = (int8x16_t *)((char *)v21 + a2);
  v25 = (int16x8_t)vtrn1q_s8(*v21, *v24);
  v26 = (int16x8_t)vtrn2q_s8(*v21, *v24);
  v27 = (int8x16_t *)((char *)v24 + a2);
  v28 = (int8x16_t *)((char *)v27 + a2);
  v29 = (int16x8_t)vtrn1q_s8(*v27, *v28);
  v30 = (int16x8_t)vtrn2q_s8(*v27, *v28);
  v31 = (int8x16_t *)((char *)v28 + a2);
  v32 = (int8x16_t *)((char *)v31 + a2);
  v33 = (int16x8_t)vtrn1q_s8(*v31, *v32);
  v34 = (int16x8_t)vtrn2q_s8(*v31, *v32);
  v204 = 0u;
  v205[0] = 0u;
  v202 = 0u;
  v203 = 0u;
  v200 = 0u;
  v201 = 0u;
  v198 = 0u;
  v199 = 0u;
  v197 = 0u;
  v195 = 0u;
  v196 = 0u;
  v193 = 0u;
  v194 = 0u;
  v192 = 0u;
  v35 = (int8x16_t *)((char *)v32 + a2);
  v36 = (int8x16_t *)((char *)v35 + a2);
  v37 = (int16x8_t)vtrn1q_s8(*v35, *v36);
  v38 = (int16x8_t)vtrn2q_s8(*v35, *v36);
  v39 = (int8x16_t *)((char *)v36 + a2);
  v40 = *(int8x16_t *)((char *)v39 + a2);
  v41 = (int16x8_t)vtrn1q_s8(*v39, v40);
  v42 = (int16x8_t)vtrn2q_s8(*v39, v40);
  v43 = (int32x4_t)vtrn1q_s16(v16, v19);
  v44 = (int32x4_t)vtrn2q_s16(v16, v19);
  v45 = (int32x4_t)vtrn1q_s16(v18, v20);
  v46 = (int32x4_t)vtrn2q_s16(v18, v20);
  v47 = (int32x4_t)vtrn1q_s16(v22, v25);
  v48 = (int32x4_t)vtrn2q_s16(v22, v25);
  v49 = (int32x4_t)vtrn1q_s16(v23, v26);
  v50 = (int32x4_t)vtrn2q_s16(v23, v26);
  v51 = (int32x4_t)vtrn1q_s16(v29, v33);
  v52 = (int32x4_t)vtrn2q_s16(v29, v33);
  v53 = (int32x4_t)vtrn1q_s16(v30, v34);
  v54 = (int32x4_t)vtrn2q_s16(v30, v34);
  v55 = (int32x4_t)vtrn1q_s16(v37, v41);
  v56 = (int32x4_t)vtrn2q_s16(v37, v41);
  v57 = (int32x4_t)vtrn1q_s16(v38, v42);
  v58 = (int32x4_t)vtrn2q_s16(v38, v42);
  v59 = (int64x2_t)vtrn1q_s32(v43, v47);
  v60 = (int64x2_t)vtrn2q_s32(v43, v47);
  v61 = (int64x2_t)vtrn1q_s32(v44, v48);
  v62 = (int64x2_t)vtrn2q_s32(v44, v48);
  v63 = (int64x2_t)vtrn1q_s32(v45, v49);
  v64 = (int64x2_t)vtrn2q_s32(v45, v49);
  v65 = (int64x2_t)vtrn1q_s32(v46, v50);
  v66 = (int64x2_t)vtrn2q_s32(v46, v50);
  v67 = (int64x2_t)vtrn1q_s32(v51, v55);
  v68 = (int64x2_t)vtrn2q_s32(v51, v55);
  v69 = (int64x2_t)vtrn1q_s32(v52, v56);
  v70 = (int64x2_t)vtrn2q_s32(v52, v56);
  v71 = (int64x2_t)vtrn1q_s32(v53, v57);
  v72 = (int64x2_t)vtrn2q_s32(v53, v57);
  v73 = (int64x2_t)vtrn1q_s32(v54, v58);
  v74 = (int64x2_t)vtrn2q_s32(v54, v58);
  v191 = 0;
  v188 = (int8x16_t)vzip2q_s64(v66, v74);
  v189 = (int8x16_t)vzip1q_s64(v59, v67);
  result = lpf_16_dual_kernel(*a3, *a4, *a5, v205, &v204, &v203, &v202, &v201, (uint8x16_t)v189, (uint8x16_t)vzip1q_s64(v63, v71), (uint8x16_t)vzip1q_s64(v61, v69), (uint8x16_t)vzip1q_s64(v65, v73), (uint8x16_t)vzip1q_s64(v60, v68), (int8x16_t)vzip1q_s64(v64, v72), (uint8x16_t)vzip1q_s64(v62, v70), (uint8x16_t)vzip1q_s64(v66, v74), (int8x16_t)vzip2q_s64(v59, v67), (int8x16_t)vzip2q_s64(v63, v71), (int8x16_t)vzip2q_s64(v61, v69),
             (int8x16_t)vzip2q_s64(v65, v73),
             (int8x16_t)vzip2q_s64(v60, v68),
             (uint8x16_t)vzip2q_s64(v64, v72),
             (uint8x16_t)vzip2q_s64(v62, v70),
             (uint8x16_t)v188,
             &v200,
             &v199,
             &v198,
             &v197,
             &v196,
             &v195,
             &v194,
             &v193,
             &v192,
             (int *)&v191 + 1,
             &v191);
  if (HIDWORD(v191))
  {
    v76 = v197;
    if ((_DWORD)v191)
    {
      v77 = (int16x8_t)vtrn1q_s8(v189, v205[0]);
      v78 = (int16x8_t)vtrn2q_s8(v189, v205[0]);
      v79 = (int16x8_t)vtrn1q_s8(v204, v203);
      v80 = (int16x8_t)vtrn2q_s8(v204, v203);
      v81 = (int16x8_t)vtrn1q_s8(v202, v201);
      v82 = (int16x8_t)vtrn2q_s8(v202, v201);
      v83 = (int16x8_t)vtrn1q_s8(v200, v199);
      v84 = (int16x8_t)vtrn2q_s8(v200, v199);
      v85 = (int16x8_t)vtrn1q_s8(v198, v197);
      v86 = (int16x8_t)vtrn2q_s8(v198, v197);
      v87 = (int16x8_t)vtrn1q_s8(v196, v195);
      v88 = (int16x8_t)vtrn2q_s8(v196, v195);
      v89 = (int16x8_t)vtrn1q_s8(v194, v193);
      v90 = (int16x8_t)vtrn2q_s8(v194, v193);
      v91 = (int16x8_t)vtrn1q_s8(v192, v188);
      v92 = (int16x8_t)vtrn2q_s8(v192, v188);
      v93 = (int32x4_t)vtrn1q_s16(v77, v79);
      v94 = (int32x4_t)vtrn2q_s16(v77, v79);
      v95 = (int32x4_t)vtrn1q_s16(v78, v80);
      v96 = (int32x4_t)vtrn2q_s16(v78, v80);
      v97 = (int32x4_t)vtrn1q_s16(v81, v83);
      v98 = (int32x4_t)vtrn2q_s16(v81, v83);
      v99 = (int32x4_t)vtrn1q_s16(v82, v84);
      v100 = (int32x4_t)vtrn2q_s16(v82, v84);
      v101 = (int32x4_t)vtrn1q_s16(v85, v87);
      v102 = (int32x4_t)vtrn2q_s16(v85, v87);
      v103 = (int32x4_t)vtrn1q_s16(v86, v88);
      v104 = (int32x4_t)vtrn2q_s16(v86, v88);
      v105 = (int32x4_t)vtrn1q_s16(v89, v91);
      v106 = (int32x4_t)vtrn2q_s16(v89, v91);
      v107 = (int32x4_t)vtrn1q_s16(v90, v92);
      v108 = (int32x4_t)vtrn2q_s16(v90, v92);
      v109 = (int64x2_t)vtrn1q_s32(v93, v97);
      v110 = (int64x2_t)vtrn1q_s32(v94, v98);
      v111 = (int64x2_t)vtrn1q_s32(v95, v99);
      v112 = (int64x2_t)vtrn1q_s32(v96, v100);
      v113 = (int64x2_t)vtrn1q_s32(v101, v105);
      v114 = (int64x2_t)vtrn1q_s32(v102, v106);
      v115 = (int64x2_t)vtrn1q_s32(v103, v107);
      *v6 = vzip1q_s64(v109, v113);
      *(int64x2_t *)((char *)v6 + v8) = vzip1q_s64(v111, v115);
      v116 = (int64x2_t)vtrn1q_s32(v104, v108);
      *v190 = vzip1q_s64(v110, v114);
      *(int64x2_t *)((char *)v190 + v8) = vzip1q_s64(v112, v116);
      v117 = (int64x2_t)vtrn2q_s32(v93, v97);
      v118 = (int64x2_t)vtrn2q_s32(v101, v105);
      *(int64x2_t *)v15 = vzip1q_s64(v117, v118);
      v119 = (int64x2_t)vtrn2q_s32(v95, v99);
      v120 = (int64x2_t)vtrn2q_s32(v103, v107);
      *(int64x2_t *)((char *)v15 + v8) = vzip1q_s64(v119, v120);
      v121 = (int64x2_t)vtrn2q_s32(v94, v98);
      v122 = (int64x2_t)vtrn2q_s32(v102, v106);
      *(int64x2_t *)v21 = vzip1q_s64(v121, v122);
      v123 = (int64x2_t)vtrn2q_s32(v96, v100);
      v124 = (int64x2_t)vtrn2q_s32(v104, v108);
      *(int64x2_t *)((char *)v21 + v8) = vzip1q_s64(v123, v124);
      *(int64x2_t *)v27 = vzip2q_s64(v109, v113);
      *(int64x2_t *)((char *)v27 + v8) = vzip2q_s64(v111, v115);
      *(int64x2_t *)v31 = vzip2q_s64(v110, v114);
      *(int64x2_t *)((char *)v31 + v8) = vzip2q_s64(v112, v116);
      *(int64x2_t *)v35 = vzip2q_s64(v117, v118);
      *(int64x2_t *)((char *)v35 + v8) = vzip2q_s64(v119, v120);
      *(int64x2_t *)v39 = vzip2q_s64(v121, v122);
      *(int64x2_t *)((char *)v39 + v8) = vzip2q_s64(v123, v124);
    }
    else
    {
      v150 = v200;
      v149 = v201;
      v151 = v198;
      v152 = v199;
      v153 = a1 - 3;
      *v153 = v201.i8[0];
      v153[1] = v150.i8[0];
      v153[2] = v152.i8[0];
      v154 = v196;
      v155 = &a1[v8];
      *a1 = v151.i8[0];
      a1[1] = v76.i8[0];
      a1[2] = v154.i8[0];
      v156 = &a1[8 * v8];
      v157 = v155 - 3;
      *v157 = v149.i8[1];
      v157[1] = v150.i8[1];
      v157[2] = v152.i8[1];
      *v155 = v151.i8[1];
      v155[1] = v76.i8[1];
      v155[2] = v154.i8[1];
      v158 = &v155[v8];
      v159 = v158 - 3;
      *v159 = v149.i8[2];
      v159[1] = v150.i8[2];
      v159[2] = v152.i8[2];
      *v158 = v151.i8[2];
      v158[1] = v76.i8[2];
      v158[2] = v154.i8[2];
      v160 = &v158[v8];
      v161 = v160 - 3;
      *v161 = v149.i8[3];
      v161[1] = v150.i8[3];
      v161[2] = v152.i8[3];
      *v160 = v151.i8[3];
      v160[1] = v76.i8[3];
      v160[2] = v154.i8[3];
      v162 = &v160[v8];
      v163 = v162 - 3;
      *v163 = v149.i8[4];
      v163[1] = v150.i8[4];
      v163[2] = v152.i8[4];
      *v162 = v151.i8[4];
      v162[1] = v76.i8[4];
      v162[2] = v154.i8[4];
      v164 = &v162[v8];
      v165 = v164 - 3;
      *v165 = v149.i8[5];
      v165[1] = v150.i8[5];
      v165[2] = v152.i8[5];
      *v164 = v151.i8[5];
      v164[1] = v76.i8[5];
      v164[2] = v154.i8[5];
      v166 = &v164[v8];
      v167 = v166 - 3;
      *v167 = v149.i8[6];
      v167[1] = v150.i8[6];
      v167[2] = v152.i8[6];
      *v166 = v151.i8[6];
      v166[1] = v76.i8[6];
      v166[2] = v154.i8[6];
      v168 = &v166[v8];
      v169 = v168 - 3;
      *v169 = v149.i8[7];
      v169[1] = v150.i8[7];
      v169[2] = v152.i8[7];
      *v168 = v151.i8[7];
      v168[1] = v76.i8[7];
      v168[2] = v154.i8[7];
      v170 = vextq_s8(v149, v149, 8uLL).u64[0];
      v171 = vextq_s8(v150, v150, 8uLL).u64[0];
      v172 = vextq_s8(v152, v152, 8uLL).u64[0];
      v149.i64[0] = vextq_s8(v151, v151, 8uLL).u64[0];
      v150.i64[0] = vextq_s8(v76, v76, 8uLL).u64[0];
      v152.i64[0] = vextq_s8(v154, v154, 8uLL).u64[0];
      v173 = v156 - 3;
      *v173 = v170;
      v173[1] = v171;
      v173[2] = v172;
      *v156 = v149.i8[0];
      v156[1] = v150.i8[0];
      v156[2] = v152.i8[0];
      v174 = &v156[v8];
      v175 = v174 - 3;
      *v175 = BYTE1(v170);
      v175[1] = BYTE1(v171);
      v175[2] = BYTE1(v172);
      *v174 = v149.i8[1];
      v174[1] = v150.i8[1];
      v174[2] = v152.i8[1];
      v176 = &v174[v8];
      v177 = v176 - 3;
      *v177 = BYTE2(v170);
      v177[1] = BYTE2(v171);
      v177[2] = BYTE2(v172);
      *v176 = v149.i8[2];
      v176[1] = v150.i8[2];
      v176[2] = v152.i8[2];
      v178 = &v176[v8];
      v179 = v178 - 3;
      *v179 = BYTE3(v170);
      v179[1] = BYTE3(v171);
      v179[2] = BYTE3(v172);
      *v178 = v149.i8[3];
      v178[1] = v150.i8[3];
      v178[2] = v152.i8[3];
      v180 = &v178[v8];
      v181 = v180 - 3;
      *v181 = BYTE4(v170);
      v181[1] = BYTE4(v171);
      v181[2] = BYTE4(v172);
      *v180 = v149.i8[4];
      v180[1] = v150.i8[4];
      v180[2] = v152.i8[4];
      v182 = &v180[v8];
      v183 = v182 - 3;
      *v183 = BYTE5(v170);
      v183[1] = BYTE5(v171);
      v183[2] = BYTE5(v172);
      *v182 = v149.i8[5];
      v182[1] = v150.i8[5];
      v182[2] = v152.i8[5];
      v184 = &v182[v8];
      v185 = v184 - 3;
      *v185 = BYTE6(v170);
      v185[1] = BYTE6(v171);
      v185[2] = BYTE6(v172);
      *v184 = v149.i8[6];
      v184[1] = v150.i8[6];
      v184[2] = v152.i8[6];
      v186 = &v184[v8];
      v187 = v186 - 3;
      *v187 = HIBYTE(v170);
      v187[1] = HIBYTE(v171);
      v187[2] = HIBYTE(v172);
      *v186 = v149.i8[7];
      v186[1] = v150.i8[7];
      v186[2] = v152.i8[7];
    }
  }
  else
  {
    v125 = a1 - 2;
    v126 = v200;
    v128 = v198;
    v127 = v199;
    v129 = v197;
    v130 = &a1[v8 - 2];
    *v125 = v200.i8[0];
    v125[1] = v127.i8[0];
    *a1 = v128.i8[0];
    a1[1] = v129.i8[0];
    v131 = &a1[8 * v8 - 2];
    *v130 = v126.i8[1];
    v130[1] = v127.i8[1];
    v130[2] = v128.i8[1];
    v130[3] = v129.i8[1];
    v132 = &v130[v8];
    *v132 = v126.i8[2];
    v132[1] = v127.i8[2];
    v132[2] = v128.i8[2];
    v132[3] = v129.i8[2];
    v133 = &v132[v8];
    *v133 = v126.i8[3];
    v133[1] = v127.i8[3];
    v133[2] = v128.i8[3];
    v133[3] = v129.i8[3];
    v134 = &v133[v8];
    *v134 = v126.i8[4];
    v134[1] = v127.i8[4];
    v134[2] = v128.i8[4];
    v134[3] = v129.i8[4];
    v135 = &v134[v8];
    *v135 = v126.i8[5];
    v135[1] = v127.i8[5];
    v135[2] = v128.i8[5];
    v135[3] = v129.i8[5];
    v136 = &v135[v8];
    *v136 = v126.i8[6];
    v136[1] = v127.i8[6];
    v136[2] = v128.i8[6];
    v136[3] = v129.i8[6];
    v137 = &v136[v8];
    *v137 = v126.i8[7];
    v137[1] = v127.i8[7];
    v137[2] = v128.i8[7];
    v137[3] = v129.i8[7];
    v138 = vextq_s8(v126, v126, 8uLL).u64[0];
    v139 = vextq_s8(v127, v127, 8uLL).u64[0];
    v140 = vextq_s8(v128, v128, 8uLL).u64[0];
    v141 = vextq_s8(v129, v129, 8uLL).u64[0];
    *v131 = v138;
    v131[1] = v139;
    v131[2] = v140;
    v131[3] = v141;
    v142 = &v131[v8];
    *v142 = BYTE1(v138);
    v142[1] = BYTE1(v139);
    v142[2] = BYTE1(v140);
    v142[3] = BYTE1(v141);
    v143 = &v142[v8];
    *v143 = BYTE2(v138);
    v143[1] = BYTE2(v139);
    v143[2] = BYTE2(v140);
    v143[3] = BYTE2(v141);
    v144 = &v143[v8];
    *v144 = BYTE3(v138);
    v144[1] = BYTE3(v139);
    v144[2] = BYTE3(v140);
    v144[3] = BYTE3(v141);
    v145 = &v144[v8];
    *v145 = BYTE4(v138);
    v145[1] = BYTE4(v139);
    v145[2] = BYTE4(v140);
    v145[3] = BYTE4(v141);
    v146 = &v145[v8];
    *v146 = BYTE5(v138);
    v146[1] = BYTE5(v139);
    v146[2] = BYTE5(v140);
    v146[3] = BYTE5(v141);
    v147 = &v146[v8];
    *v147 = BYTE6(v138);
    v147[1] = BYTE6(v139);
    v147[2] = BYTE6(v140);
    v147[3] = BYTE6(v141);
    v148 = &v147[v8];
    *v148 = HIBYTE(v138);
    v148[1] = HIBYTE(v139);
    v148[2] = HIBYTE(v140);
    v148[3] = HIBYTE(v141);
  }
  return result;
}

int8x16_t vp8_loop_filter_bhs_neon(uint64_t a1, int a2, const char *a3)
{
  uint64_t v3;
  int8x16_t v4;
  uint64_t v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  uint8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  uint8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint8x16_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  int8x16_t v24;
  uint8x16_t *v25;
  int8x16_t v26;
  uint8x16_t v27;
  uint8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t *v33;
  uint8x16_t v34;
  int8x16_t *v35;
  int8x16_t v36;
  int8x16_t *v37;
  int8x16_t v38;
  uint8x16_t *v39;
  int8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t result;

  v3 = 4 * a2;
  v4 = vld1q_dup_s8(a3);
  v5 = 2 * a2;
  v6 = (int8x16_t *)(a1 + v3 - v5);
  v7 = *v6;
  v8 = (int8x16_t *)((char *)v6 + a2);
  v9 = *v8;
  v10 = (uint8x16_t *)&v8->i8[a2];
  v11 = *(int8x16_t *)((char *)v10 + a2);
  v12 = (int8x16_t)vabdq_u8((uint8x16_t)v9, *v10);
  v13 = vqaddq_u8(vqaddq_u8((uint8x16_t)v12, (uint8x16_t)v12), vshrq_n_u8(vabdq_u8((uint8x16_t)v7, (uint8x16_t)v11), 1uLL));
  v12.i64[0] = 0x8080808080808080;
  v12.i64[1] = 0x8080808080808080;
  v14 = veorq_s8(v9, v12);
  v15 = veorq_s8(*(int8x16_t *)v10, v12);
  v16 = veorq_s8(v11, v12);
  v17 = (int8x16_t)vcgtq_u8(v13, (uint8x16_t)v4);
  v18 = vqsubq_s8(veorq_s8(v7, v12), v16);
  v4.i64[0] = 0x303030303030303;
  v4.i64[1] = 0x303030303030303;
  v19 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v15.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v14.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v18.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v15, v4), v14, v4), v18)), v17);
  v18.i64[0] = 0x404040404040404;
  v18.i64[1] = 0x404040404040404;
  *(int8x16_t *)(a1 + v3) = veorq_s8(vqsubq_s8(v15, vshrq_n_s8(vqaddq_s8(v19, v18), 3uLL)), v12);
  *(int8x16_t *)(a1 + v3 - a2) = veorq_s8(vqaddq_s8(v14, vshrq_n_s8(vqaddq_s8(v19, v4), 3uLL)), v12);
  v20 = (int8x16_t *)(a1 + v3 + v3);
  v21 = (uint8x16_t)vld1q_dup_s8(a3);
  v22 = *(int8x16_t *)((char *)v20 - v5);
  v23 = (int8x16_t *)((char *)v20 + a2 - v5);
  v24 = *v23;
  v25 = (uint8x16_t *)&v23->i8[a2];
  v26 = *(int8x16_t *)((char *)v25 + a2);
  v27 = vabdq_u8((uint8x16_t)v24, *v25);
  v28 = vqaddq_u8(vqaddq_u8(v27, v27), vshrq_n_u8(vabdq_u8((uint8x16_t)v22, (uint8x16_t)v26), 1uLL));
  v29 = veorq_s8(v24, v12);
  v30 = veorq_s8(*(int8x16_t *)v25, v12);
  v31 = vqsubq_s8(veorq_s8(v22, v12), veorq_s8(v26, v12));
  v32 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v30.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v29.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v31.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v30, v4), v29, v4), v31)), (int8x16_t)vcgtq_u8(v28, v21));
  *v20 = veorq_s8(vqsubq_s8(v30, vshrq_n_s8(vqaddq_s8(v32, v18), 3uLL)), v12);
  *(int8x16_t *)((char *)v20 - a2) = veorq_s8(vqaddq_s8(v29, vshrq_n_s8(vqaddq_s8(v32, v4), 3uLL)), v12);
  v33 = (int8x16_t *)((char *)v20 + v3);
  v34 = (uint8x16_t)vld1q_dup_s8(a3);
  v35 = (int8x16_t *)((char *)v33 - v5);
  v36 = *v35;
  v37 = (int8x16_t *)((char *)v35 + a2);
  v38 = *v37;
  v39 = (uint8x16_t *)&v37->i8[a2];
  v40 = *(int8x16_t *)((char *)v39 + a2);
  v41 = vabdq_u8((uint8x16_t)v38, *v39);
  v42 = vqaddq_u8(vqaddq_u8(v41, v41), vshrq_n_u8(vabdq_u8((uint8x16_t)v36, (uint8x16_t)v40), 1uLL));
  v43 = veorq_s8(v38, v12);
  v44 = veorq_s8(*(int8x16_t *)v39, v12);
  v45 = vqsubq_s8(veorq_s8(v36, v12), veorq_s8(v40, v12));
  v46 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v44.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v43.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v45.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v44, v4), v43, v4), v45)), (int8x16_t)vcgtq_u8(v42, v34));
  v47 = veorq_s8(vqaddq_s8(v43, vshrq_n_s8(vqaddq_s8(v46, v4), 3uLL)), v12);
  result = veorq_s8(vqsubq_s8(v44, vshrq_n_s8(vqaddq_s8(v46, v18), 3uLL)), v12);
  *v33 = result;
  *(int8x16_t *)((char *)v33 - a2) = v47;
  return result;
}

int8x16_t vp8_loop_filter_bvs_neon(_BYTE *a1, int a2, const char *a3)
{
  uint8x16_t v3;
  uint64_t v4;
  __int8 *v5;
  _BYTE *v6;
  uint8x16_t v7;
  int8x8_t v8;
  int8x8_t v9;
  uint8x16_t v10;
  __int8 *v11;
  __int8 *v12;
  __int8 *v13;
  __int8 *v14;
  __int8 *v15;
  __int8 *v16;
  _BYTE *v17;
  uint64_t v18;
  int8x8_t v19;
  int8x8_t v20;
  int8x8_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  uint8x16_t v28;
  uint8x16_t v29;
  int8x16_t v30;
  uint8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x8_t v37;
  uint8x16_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  uint8x16_t v54;
  __int8 *v55;
  __int8 *v56;
  __int8 *v57;
  __int8 *v58;
  __int8 *v59;
  __int8 *v60;
  __int8 *v61;
  __int8 *v62;
  __int8 *v63;
  uint64_t v64;
  __int8 *v65;
  __int8 *v66;
  __int8 *v67;
  __int8 *v68;
  __int8 *v69;
  __int8 *v70;
  uint8x16_t v71;
  uint8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x8_t v78;
  _BYTE *v79;
  _BYTE *v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  uint8x16_t v94;
  __int8 *v95;
  _BYTE *v96;
  __int8 *v97;
  __int8 *v98;
  __int8 *v99;
  __int8 *v100;
  __int8 *v101;
  __int8 *v102;
  _BYTE *v103;
  uint64_t v104;
  int8x8_t v105;
  int8x8_t v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  _BYTE *v112;
  _BYTE *v113;
  uint8x16_t v114;
  uint8x16_t v115;
  uint8x16_t v116;
  int8x8_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t result;
  int8x16_t v122;
  int8x16_t v123;
  unint64_t v124;
  _BYTE *v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  _BYTE *v132;
  _BYTE *v133;
  _BYTE *v134;
  _BYTE *v135;
  _BYTE *v136;
  _BYTE *v137;
  _BYTE *v138;
  _BYTE *v139;

  v3 = (uint8x16_t)vld1q_dup_s8(a3);
  v4 = 8 * a2;
  v5 = &a1[a2 + 2];
  v7.i8[0] = a1[2];
  v8.i8[0] = a1[3];
  v9.i8[0] = a1[4];
  v10.i8[0] = a1[5];
  v6 = &a1[v4 + 2];
  v7.i8[1] = *v5;
  v8.i8[1] = v5[1];
  v9.i8[1] = v5[2];
  v10.i8[1] = v5[3];
  v11 = &v5[a2];
  v7.i8[2] = *v11;
  v8.i8[2] = v11[1];
  v9.i8[2] = v11[2];
  v10.i8[2] = v11[3];
  v12 = &v11[a2];
  v7.i8[3] = *v12;
  v8.i8[3] = v12[1];
  v9.i8[3] = v12[2];
  v10.i8[3] = v12[3];
  v13 = &v12[a2];
  v7.i8[4] = *v13;
  v8.i8[4] = v13[1];
  v9.i8[4] = v13[2];
  v10.i8[4] = v13[3];
  v14 = &v13[a2];
  v7.i8[5] = *v14;
  v8.i8[5] = v14[1];
  v9.i8[5] = v14[2];
  v10.i8[5] = v14[3];
  v15 = &v14[a2];
  v7.i8[6] = *v15;
  v8.i8[6] = v15[1];
  v9.i8[6] = v15[2];
  v10.i8[6] = v15[3];
  v16 = &v15[a2];
  v7.i8[7] = *v16;
  v8.i8[7] = v16[1];
  v9.i8[7] = v16[2];
  v10.i8[7] = v16[3];
  LOBYTE(v18) = *v6;
  v19.i8[0] = v6[1];
  v20.i8[0] = v6[2];
  v21.i8[0] = v6[3];
  v17 = &v6[a2];
  BYTE1(v18) = *v17;
  v19.i8[1] = v17[1];
  v20.i8[1] = v17[2];
  v21.i8[1] = v17[3];
  v22 = &v17[a2];
  BYTE2(v18) = *v22;
  v19.i8[2] = v22[1];
  v20.i8[2] = v22[2];
  v21.i8[2] = v22[3];
  v23 = &v22[a2];
  BYTE3(v18) = *v23;
  v19.i8[3] = v23[1];
  v20.i8[3] = v23[2];
  v21.i8[3] = v23[3];
  v24 = &v23[a2];
  BYTE4(v18) = *v24;
  v19.i8[4] = v24[1];
  v20.i8[4] = v24[2];
  v21.i8[4] = v24[3];
  v25 = &v24[a2];
  BYTE5(v18) = *v25;
  v19.i8[5] = v25[1];
  v20.i8[5] = v25[2];
  v21.i8[5] = v25[3];
  v26 = &v25[a2];
  BYTE6(v18) = *v26;
  v19.i8[6] = v26[1];
  v20.i8[6] = v26[2];
  v21.i8[6] = v26[3];
  v27 = &v26[a2];
  HIBYTE(v18) = *v27;
  v19.i8[7] = v27[1];
  v20.i8[7] = v27[2];
  v21.i8[7] = v27[3];
  v7.i64[1] = v18;
  *(int8x8_t *)v28.i8 = v9;
  v28.u64[1] = (unint64_t)v20;
  *(int8x8_t *)v29.i8 = v8;
  v29.u64[1] = (unint64_t)v19;
  v10.u64[1] = (unint64_t)v21;
  v30 = (int8x16_t)vabdq_u8(v29, v28);
  v31 = vqaddq_u8(vqaddq_u8((uint8x16_t)v30, (uint8x16_t)v30), vshrq_n_u8(vabdq_u8(v7, v10), 1uLL));
  v30.i64[0] = 0x8080808080808080;
  v30.i64[1] = 0x8080808080808080;
  v32 = veorq_s8((int8x16_t)v29, v30);
  v33 = vqsubq_s8(veorq_s8((int8x16_t)v7, v30), veorq_s8((int8x16_t)v10, v30));
  v34 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(veor_s8(v9, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), veor_s8(v8, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), *(int8x8_t *)v33.i8)), vaddw_high_s8(vmlsl_s8(vmull_s8(veor_s8(v20, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), veor_s8(v19, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), v33)), (int8x16_t)vcgtq_u8(v31, v3));
  v33.i64[0] = 0x303030303030303;
  v33.i64[1] = 0x303030303030303;
  v7.i64[0] = 0x404040404040404;
  v7.i64[1] = 0x404040404040404;
  v35 = veorq_s8(vqaddq_s8(v32, vshrq_n_s8(vqaddq_s8(v34, v33), 3uLL)), v30);
  v36 = veorq_s8(vqsubq_s8(veorq_s8((int8x16_t)v28, v30), vshrq_n_s8(vqaddq_s8(v34, (int8x16_t)v7), 3uLL)), v30);
  v37 = (int8x8_t)vextq_s8(v35, v35, 8uLL).u64[0];
  v38.i64[0] = vextq_s8(v36, v36, 8uLL).u64[0];
  a1[3] = v35.i8[0];
  a1[4] = v36.i8[0];
  v39 = &a1[a2 + 3];
  *v39 = v35.i8[1];
  v39[1] = v36.i8[1];
  v40 = &v39[a2];
  *v40 = v35.i8[2];
  v40[1] = v36.i8[2];
  v41 = &v40[a2];
  *v41 = v35.i8[3];
  v41[1] = v36.i8[3];
  v42 = &v41[a2];
  *v42 = v35.i8[4];
  v42[1] = v36.i8[4];
  v43 = &v42[a2];
  *v43 = v35.i8[5];
  v43[1] = v36.i8[5];
  v44 = &v43[a2];
  *v44 = v35.i8[6];
  v44[1] = v36.i8[6];
  v45 = &v44[a2];
  *v45 = v35.i8[7];
  v45[1] = v36.i8[7];
  v46 = &v45[a2];
  *v46 = v37.i8[0];
  v46[1] = v38.i8[0];
  v47 = &v46[a2];
  *v47 = v37.i8[1];
  v47[1] = v38.i8[1];
  v48 = &v47[a2];
  *v48 = v37.i8[2];
  v48[1] = v38.i8[2];
  v49 = &v48[a2];
  *v49 = v37.i8[3];
  v49[1] = v38.i8[3];
  v50 = &v49[a2];
  *v50 = v37.i8[4];
  v50[1] = v38.i8[4];
  v51 = &v50[a2];
  *v51 = v37.i8[5];
  v51[1] = v38.i8[5];
  v52 = &v51[a2];
  *v52 = v37.i8[6];
  v52[1] = v38.i8[6];
  v53 = &v52[a2];
  *v53 = v37.i8[7];
  v53[1] = v38.i8[7];
  v54 = (uint8x16_t)vld1q_dup_s8(a3);
  v55 = &a1[a2 + 6];
  v35.i8[0] = a1[6];
  v36.i8[0] = a1[7];
  v37.i8[0] = a1[8];
  v38.i8[0] = a1[9];
  v56 = &a1[v4 + 6];
  v35.i8[1] = *v55;
  v36.i8[1] = v55[1];
  v37.i8[1] = v55[2];
  v38.i8[1] = v55[3];
  v57 = &v55[a2];
  v35.i8[2] = *v57;
  v36.i8[2] = v57[1];
  v37.i8[2] = v57[2];
  v38.i8[2] = v57[3];
  v58 = &v57[a2];
  v35.i8[3] = *v58;
  v36.i8[3] = v58[1];
  v37.i8[3] = v58[2];
  v38.i8[3] = v58[3];
  v59 = &v58[a2];
  v35.i8[4] = *v59;
  v36.i8[4] = v59[1];
  v37.i8[4] = v59[2];
  v38.i8[4] = v59[3];
  v60 = &v59[a2];
  v35.i8[5] = *v60;
  v36.i8[5] = v60[1];
  v37.i8[5] = v60[2];
  v38.i8[5] = v60[3];
  v61 = &v60[a2];
  v35.i8[6] = *v61;
  v36.i8[6] = v61[1];
  v37.i8[6] = v61[2];
  v38.i8[6] = v61[3];
  v62 = &v61[a2];
  v35.i8[7] = *v62;
  v36.i8[7] = v62[1];
  v37.i8[7] = v62[2];
  v38.i8[7] = v62[3];
  v20.i8[0] = *v56;
  v21.i8[0] = v56[1];
  v31.i8[0] = v56[2];
  LOBYTE(v64) = v56[3];
  v63 = &v56[a2];
  v20.i8[1] = *v63;
  v21.i8[1] = v63[1];
  v31.i8[1] = v63[2];
  BYTE1(v64) = v63[3];
  v65 = &v63[a2];
  v20.i8[2] = *v65;
  v21.i8[2] = v65[1];
  v31.i8[2] = v65[2];
  BYTE2(v64) = v65[3];
  v66 = &v65[a2];
  v20.i8[3] = *v66;
  v21.i8[3] = v66[1];
  v31.i8[3] = v66[2];
  BYTE3(v64) = v66[3];
  v67 = &v66[a2];
  v20.i8[4] = *v67;
  v21.i8[4] = v67[1];
  v31.i8[4] = v67[2];
  BYTE4(v64) = v67[3];
  v68 = &v67[a2];
  v20.i8[5] = *v68;
  v21.i8[5] = v68[1];
  v31.i8[5] = v68[2];
  BYTE5(v64) = v68[3];
  v69 = &v68[a2];
  v20.i8[6] = *v69;
  v21.i8[6] = v69[1];
  v31.i8[6] = v69[2];
  BYTE6(v64) = v69[3];
  v70 = &v69[a2];
  v20.i8[7] = *v70;
  v21.i8[7] = v70[1];
  v31.i8[7] = v70[2];
  HIBYTE(v64) = v70[3];
  v35.u64[1] = (unint64_t)v20;
  *(int8x8_t *)v71.i8 = v37;
  v71.i64[1] = v31.i64[0];
  v32.i64[0] = v36.i64[0];
  v32.u64[1] = (unint64_t)v21;
  v38.i64[1] = v64;
  v72 = vabdq_u8((uint8x16_t)v32, v71);
  v73 = (int8x16_t)vcgtq_u8(vqaddq_u8(vqaddq_u8(v72, v72), vshrq_n_u8(vabdq_u8((uint8x16_t)v35, v38), 1uLL)), v54);
  v74 = vqsubq_s8(veorq_s8(v35, v30), veorq_s8((int8x16_t)v38, v30));
  v75 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(veor_s8(v37, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), veor_s8(*(int8x8_t *)v36.i8, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), *(int8x8_t *)v74.i8)), vaddw_high_s8(vmlsl_s8(vmull_s8(veor_s8(*(int8x8_t *)v31.i8, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), veor_s8(v21, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), v74)), v73);
  v76 = veorq_s8(vqaddq_s8(veorq_s8(v32, v30), vshrq_n_s8(vqaddq_s8(v75, v33), 3uLL)), v30);
  v77 = veorq_s8(vqsubq_s8(veorq_s8((int8x16_t)v71, v30), vshrq_n_s8(vqaddq_s8(v75, (int8x16_t)v7), 3uLL)), v30);
  v78 = (int8x8_t)vextq_s8(v76, v76, 8uLL).u64[0];
  v74.i64[0] = vextq_s8(v77, v77, 8uLL).u64[0];
  a1[7] = v76.i8[0];
  a1[8] = v77.i8[0];
  v79 = &a1[a2 + 7];
  *v79 = v76.i8[1];
  v79[1] = v77.i8[1];
  v80 = &v79[a2];
  *v80 = v76.i8[2];
  v80[1] = v77.i8[2];
  v81 = &v80[a2];
  *v81 = v76.i8[3];
  v81[1] = v77.i8[3];
  v82 = &v81[a2];
  *v82 = v76.i8[4];
  v82[1] = v77.i8[4];
  v83 = &v82[a2];
  *v83 = v76.i8[5];
  v83[1] = v77.i8[5];
  v84 = &v83[a2];
  *v84 = v76.i8[6];
  v84[1] = v77.i8[6];
  v85 = &v84[a2];
  *v85 = v76.i8[7];
  v85[1] = v77.i8[7];
  v86 = &v85[a2];
  *v86 = v78.i8[0];
  v86[1] = v74.i8[0];
  v87 = &v86[a2];
  *v87 = v78.i8[1];
  v87[1] = v74.i8[1];
  v88 = &v87[a2];
  *v88 = v78.i8[2];
  v88[1] = v74.i8[2];
  v89 = &v88[a2];
  *v89 = v78.i8[3];
  v89[1] = v74.i8[3];
  v90 = &v89[a2];
  *v90 = v78.i8[4];
  v90[1] = v74.i8[4];
  v91 = &v90[a2];
  *v91 = v78.i8[5];
  v91[1] = v74.i8[5];
  v92 = &v91[a2];
  *v92 = v78.i8[6];
  v92[1] = v74.i8[6];
  v93 = &v92[a2];
  *v93 = v78.i8[7];
  v93[1] = v74.i8[7];
  v94 = (uint8x16_t)vld1q_dup_s8(a3);
  v95 = &a1[a2 + 10];
  v76.i8[0] = a1[10];
  v77.i8[0] = a1[11];
  v78.i8[0] = a1[12];
  v74.i8[0] = a1[13];
  v96 = &a1[v4 + 10];
  v76.i8[1] = *v95;
  v77.i8[1] = v95[1];
  v78.i8[1] = v95[2];
  v74.i8[1] = v95[3];
  v97 = &v95[a2];
  v76.i8[2] = *v97;
  v77.i8[2] = v97[1];
  v78.i8[2] = v97[2];
  v74.i8[2] = v97[3];
  v98 = &v97[a2];
  v76.i8[3] = *v98;
  v77.i8[3] = v98[1];
  v78.i8[3] = v98[2];
  v74.i8[3] = v98[3];
  v99 = &v98[a2];
  v76.i8[4] = *v99;
  v77.i8[4] = v99[1];
  v78.i8[4] = v99[2];
  v74.i8[4] = v99[3];
  v100 = &v99[a2];
  v76.i8[5] = *v100;
  v77.i8[5] = v100[1];
  v78.i8[5] = v100[2];
  v74.i8[5] = v100[3];
  v101 = &v100[a2];
  v76.i8[6] = *v101;
  v77.i8[6] = v101[1];
  v78.i8[6] = v101[2];
  v74.i8[6] = v101[3];
  v102 = &v101[a2];
  v76.i8[7] = *v102;
  v77.i8[7] = v102[1];
  v78.i8[7] = v102[2];
  v74.i8[7] = v102[3];
  LOBYTE(v104) = *v96;
  v105.i8[0] = v96[1];
  v106.i8[0] = v96[2];
  LOBYTE(v107) = v96[3];
  v103 = &v96[a2];
  BYTE1(v104) = *v103;
  v105.i8[1] = v103[1];
  v106.i8[1] = v103[2];
  BYTE1(v107) = v103[3];
  v108 = &v103[a2];
  BYTE2(v104) = *v108;
  v105.i8[2] = v108[1];
  v106.i8[2] = v108[2];
  BYTE2(v107) = v108[3];
  v109 = &v108[a2];
  BYTE3(v104) = *v109;
  v105.i8[3] = v109[1];
  v106.i8[3] = v109[2];
  BYTE3(v107) = v109[3];
  v110 = &v109[a2];
  BYTE4(v104) = *v110;
  v105.i8[4] = v110[1];
  v106.i8[4] = v110[2];
  BYTE4(v107) = v110[3];
  v111 = &v110[a2];
  BYTE5(v104) = *v111;
  v105.i8[5] = v111[1];
  v106.i8[5] = v111[2];
  BYTE5(v107) = v111[3];
  v112 = &v111[a2];
  BYTE6(v104) = *v112;
  v105.i8[6] = v112[1];
  v106.i8[6] = v112[2];
  BYTE6(v107) = v112[3];
  v113 = &v112[a2];
  HIBYTE(v104) = *v113;
  v105.i8[7] = v113[1];
  v106.i8[7] = v113[2];
  HIBYTE(v107) = v113[3];
  v76.i64[1] = v104;
  *(int8x8_t *)v114.i8 = v78;
  v114.u64[1] = (unint64_t)v106;
  v115.i64[0] = v77.i64[0];
  v115.u64[1] = (unint64_t)v105;
  v74.i64[1] = v107;
  v116 = vabdq_u8(v115, v114);
  v117 = veor_s8(v105, (int8x8_t)0x8080808080808080);
  v118 = vqsubq_s8(veorq_s8(v76, v30), veorq_s8(v74, v30));
  v119 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(veor_s8(v78, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), veor_s8(*(int8x8_t *)v77.i8, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), *(int8x8_t *)v118.i8)), vaddw_high_s8(vmlsl_s8(vmull_s8(veor_s8(v106, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), v117, (int8x8_t)0x303030303030303), v118)), (int8x16_t)vcgtq_u8(vqaddq_u8(vqaddq_u8(v116, v116), vshrq_n_u8(vabdq_u8((uint8x16_t)v76, (uint8x16_t)v74), 1uLL)), v94));
  v120 = vqaddq_s8(v119, v33);
  result = vqsubq_s8(veorq_s8((int8x16_t)v114, v30), vshrq_n_s8(vqaddq_s8(v119, (int8x16_t)v7), 3uLL));
  v122 = veorq_s8(vqaddq_s8(veorq_s8((int8x16_t)v115, v30), vshrq_n_s8(v120, 3uLL)), v30);
  v123 = veorq_s8(result, v30);
  v124 = vextq_s8(v122, v122, 8uLL).u64[0];
  v30.i64[0] = vextq_s8(v123, v123, 8uLL).u64[0];
  a1[11] = v122.i8[0];
  a1[12] = v123.i8[0];
  v125 = &a1[a2 + 11];
  *v125 = v122.i8[1];
  v125[1] = v123.i8[1];
  v126 = &v125[a2];
  *v126 = v122.i8[2];
  v126[1] = v123.i8[2];
  v127 = &v126[a2];
  *v127 = v122.i8[3];
  v127[1] = v123.i8[3];
  v128 = &v127[a2];
  *v128 = v122.i8[4];
  v128[1] = v123.i8[4];
  v129 = &v128[a2];
  *v129 = v122.i8[5];
  v129[1] = v123.i8[5];
  v130 = &v129[a2];
  *v130 = v122.i8[6];
  v130[1] = v123.i8[6];
  v131 = &v130[a2];
  *v131 = v122.i8[7];
  v131[1] = v123.i8[7];
  v132 = &v131[a2];
  *v132 = v124;
  v132[1] = v30.i8[0];
  v133 = &v132[a2];
  *v133 = BYTE1(v124);
  v133[1] = v30.i8[1];
  v134 = &v133[a2];
  *v134 = BYTE2(v124);
  v134[1] = v30.i8[2];
  v135 = &v134[a2];
  *v135 = BYTE3(v124);
  v135[1] = v30.i8[3];
  v136 = &v135[a2];
  *v136 = BYTE4(v124);
  v136[1] = v30.i8[4];
  v137 = &v136[a2];
  *v137 = BYTE5(v124);
  v137[1] = v30.i8[5];
  v138 = &v137[a2];
  *v138 = BYTE6(v124);
  v138[1] = v30.i8[6];
  v139 = &v138[a2];
  *v139 = HIBYTE(v124);
  v139[1] = v30.i8[7];
  return result;
}

int8x16_t vp8_loop_filter_mbvs_neon(__int8 *a1, int a2, const char *a3)
{
  uint8x16_t v3;
  uint64_t v4;
  __int8 *v5;
  __int8 *v6;
  int8x16_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x16_t v10;
  __int8 *v11;
  __int8 *v12;
  __int8 *v13;
  __int8 *v14;
  __int8 *v15;
  __int8 *v16;
  __int8 *v17;
  uint64_t v18;
  int8x8_t v19;
  int8x8_t v20;
  uint64_t v21;
  __int8 *v22;
  __int8 *v23;
  __int8 *v24;
  __int8 *v25;
  __int8 *v26;
  __int8 *v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  int8x16_t v31;
  int8x8_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t result;
  int8x16_t v38;
  int8x16_t v39;
  unint64_t v40;
  __int8 *v41;
  __int8 *v42;
  __int8 *v43;
  __int8 *v44;
  __int8 *v45;
  __int8 *v46;
  __int8 *v47;
  __int8 *v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;

  v3 = (uint8x16_t)vld1q_dup_s8(a3);
  v4 = 8 * a2;
  v5 = &a1[a2 - 2];
  v7.i8[0] = *(a1 - 2);
  v8.i8[0] = *(a1 - 1);
  v9.i8[0] = *a1;
  v10.i8[0] = a1[1];
  v6 = &a1[v4 - 2];
  v7.i8[1] = *v5;
  v8.i8[1] = v5[1];
  v9.i8[1] = a1[a2];
  v10.i8[1] = v5[3];
  v11 = &v5[a2];
  v7.i8[2] = *v11;
  v8.i8[2] = v11[1];
  v9.i8[2] = v11[2];
  v10.i8[2] = v11[3];
  v12 = &v11[a2];
  v7.i8[3] = *v12;
  v8.i8[3] = v12[1];
  v9.i8[3] = v12[2];
  v10.i8[3] = v12[3];
  v13 = &v12[a2];
  v7.i8[4] = *v13;
  v8.i8[4] = v13[1];
  v9.i8[4] = v13[2];
  v10.i8[4] = v13[3];
  v14 = &v13[a2];
  v7.i8[5] = *v14;
  v8.i8[5] = v14[1];
  v9.i8[5] = v14[2];
  v10.i8[5] = v14[3];
  v15 = &v14[a2];
  v7.i8[6] = *v15;
  v8.i8[6] = v15[1];
  v9.i8[6] = v15[2];
  v10.i8[6] = v15[3];
  v16 = &v15[a2];
  v7.i8[7] = *v16;
  v8.i8[7] = v16[1];
  v9.i8[7] = v16[2];
  v10.i8[7] = v16[3];
  LOBYTE(v18) = *v6;
  v19.i8[0] = v6[1];
  v20.i8[0] = a1[v4];
  LOBYTE(v21) = v6[3];
  v17 = &v6[a2];
  BYTE1(v18) = *v17;
  v19.i8[1] = v17[1];
  v20.i8[1] = v17[2];
  BYTE1(v21) = v17[3];
  v22 = &v17[a2];
  BYTE2(v18) = *v22;
  v19.i8[2] = v22[1];
  v20.i8[2] = v22[2];
  BYTE2(v21) = v22[3];
  v23 = &v22[a2];
  BYTE3(v18) = *v23;
  v19.i8[3] = v23[1];
  v20.i8[3] = v23[2];
  BYTE3(v21) = v23[3];
  v24 = &v23[a2];
  BYTE4(v18) = *v24;
  v19.i8[4] = v24[1];
  v20.i8[4] = v24[2];
  BYTE4(v21) = v24[3];
  v25 = &v24[a2];
  BYTE5(v18) = *v25;
  v19.i8[5] = v25[1];
  v20.i8[5] = v25[2];
  BYTE5(v21) = v25[3];
  v26 = &v25[a2];
  BYTE6(v18) = *v26;
  v19.i8[6] = v26[1];
  v20.i8[6] = v26[2];
  BYTE6(v21) = v26[3];
  v27 = &v26[a2];
  HIBYTE(v18) = *v27;
  v19.i8[7] = v27[1];
  v20.i8[7] = v27[2];
  HIBYTE(v21) = v27[3];
  v7.i64[1] = v18;
  *(int8x8_t *)v28.i8 = v9;
  v28.u64[1] = (unint64_t)v20;
  *(int8x8_t *)v29.i8 = v8;
  v29.u64[1] = (unint64_t)v19;
  v10.i64[1] = v21;
  v30 = vabdq_u8(v29, v28);
  v31.i64[0] = 0x8080808080808080;
  v31.i64[1] = 0x8080808080808080;
  v32 = veor_s8(v19, (int8x8_t)0x8080808080808080);
  v33 = vqsubq_s8(veorq_s8(v7, v31), veorq_s8(v10, v31));
  v34 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(veor_s8(v9, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), veor_s8(v8, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), *(int8x8_t *)v33.i8)), vaddw_high_s8(vmlsl_s8(vmull_s8(veor_s8(v20, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), v32, (int8x8_t)0x303030303030303), v33)), (int8x16_t)vcgtq_u8(vqaddq_u8(vqaddq_u8(v30, v30), vshrq_n_u8(vabdq_u8((uint8x16_t)v7, (uint8x16_t)v10), 1uLL)), v3));
  v33.i64[0] = 0x303030303030303;
  v33.i64[1] = 0x303030303030303;
  v35 = vqaddq_s8(v34, v33);
  v36.i64[0] = 0x404040404040404;
  v36.i64[1] = 0x404040404040404;
  result = vqsubq_s8(veorq_s8((int8x16_t)v28, v31), vshrq_n_s8(vqaddq_s8(v34, v36), 3uLL));
  v38 = veorq_s8(vqaddq_s8(veorq_s8((int8x16_t)v29, v31), vshrq_n_s8(v35, 3uLL)), v31);
  v39 = veorq_s8(result, v31);
  v40 = vextq_s8(v38, v38, 8uLL).u64[0];
  v3.i64[0] = vextq_s8(v39, v39, 8uLL).u64[0];
  *(a1 - 1) = v38.i8[0];
  *a1 = v39.i8[0];
  v41 = &a1[a2 - 1];
  *v41 = v38.i8[1];
  v41[1] = v39.i8[1];
  v42 = &v41[a2];
  *v42 = v38.i8[2];
  v42[1] = v39.i8[2];
  v43 = &v42[a2];
  *v43 = v38.i8[3];
  v43[1] = v39.i8[3];
  v44 = &v43[a2];
  *v44 = v38.i8[4];
  v44[1] = v39.i8[4];
  v45 = &v44[a2];
  *v45 = v38.i8[5];
  v45[1] = v39.i8[5];
  v46 = &v45[a2];
  *v46 = v38.i8[6];
  v46[1] = v39.i8[6];
  v47 = &v46[a2];
  *v47 = v38.i8[7];
  v47[1] = v39.i8[7];
  v48 = &v47[a2];
  *v48 = v40;
  v48[1] = v3.i8[0];
  v49 = &v48[a2];
  *v49 = BYTE1(v40);
  v49[1] = v3.i8[1];
  v50 = &v49[a2];
  *v50 = BYTE2(v40);
  v50[1] = v3.i8[2];
  v51 = &v50[a2];
  *v51 = BYTE3(v40);
  v51[1] = v3.i8[3];
  v52 = &v51[a2];
  *v52 = BYTE4(v40);
  v52[1] = v3.i8[4];
  v53 = &v52[a2];
  *v53 = BYTE5(v40);
  v53[1] = v3.i8[5];
  v54 = &v53[a2];
  *v54 = BYTE6(v40);
  v54[1] = v3.i8[6];
  v55 = &v54[a2];
  *v55 = HIBYTE(v40);
  v55[1] = v3.i8[7];
  return result;
}

int8x16_t vp8_mbloop_filter_horizontal_edge_y_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint8x16_t *v5;
  uint8x16_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t *v9;
  int8x16_t v10;
  int8x16_t *v11;
  int8x16_t v12;
  int8x16_t *v13;
  int8x16_t v14;
  int8x16_t *v15;
  int8x16_t v16;
  int8x16_t *v17;
  int8x16_t v18;
  uint8x16_t *v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t result;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t *v55;
  int8x16_t *v56;
  int8x16_t *v57;

  v5 = (uint8x16_t *)(a1 - 4 * a2);
  v6 = *v5;
  v7 = (int8x16_t *)&v5->i8[a2];
  v8 = *v7;
  v9 = (int8x16_t *)((char *)v7 + a2);
  v10 = *v9;
  v11 = (int8x16_t *)((char *)v9 + a2);
  v12 = *v11;
  v13 = (int8x16_t *)((char *)v11 + a2);
  v14 = *v13;
  v15 = (int8x16_t *)((char *)v13 + a2);
  v16 = *v15;
  v17 = (int8x16_t *)((char *)v15 + a2);
  v18 = *v17;
  v19 = (uint8x16_t *)&v17->i8[a2];
  v20 = (int16x8_t)vmaxq_u8(vabdq_u8((uint8x16_t)v16, (uint8x16_t)v14), vabdq_u8((uint8x16_t)v10, (uint8x16_t)v12));
  v21 = (int16x8_t)vabdq_u8((uint8x16_t)v12, (uint8x16_t)v14);
  v22 = (int16x8_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vmaxq_u8(vmaxq_u8(vmaxq_u8(vabdq_u8(v6, (uint8x16_t)v8), vabdq_u8((uint8x16_t)v8, (uint8x16_t)v10)), (uint8x16_t)v20), vmaxq_u8(vabdq_u8((uint8x16_t)v18, (uint8x16_t)v16), vabdq_u8(*v19, (uint8x16_t)v18))));
  v23 = (int16x8_t)vabdq_u8((uint8x16_t)v10, (uint8x16_t)v16);
  v24.i64[0] = 0x8080808080808080;
  v24.i64[1] = 0x8080808080808080;
  v25 = veorq_s8(v16, v24);
  v26 = veorq_s8(v14, v24);
  v27 = veorq_s8(v12, v24);
  v28 = veorq_s8(v10, v24);
  v29 = (int8x16_t)vcgtq_u8((uint8x16_t)v20, (uint8x16_t)vdupq_n_s8(a5));
  v30 = vqsubq_s8(v28, v25);
  v20.i64[0] = 0x303030303030303;
  v20.i64[1] = 0x303030303030303;
  v31 = vandq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v26.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v27.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v30.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v26, (int8x16_t)v20), v27, (int8x16_t)v20), v30)), vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a3), vqaddq_u8(vqaddq_u8((uint8x16_t)v21, (uint8x16_t)v21), vshrq_n_u8((uint8x16_t)v23, 1uLL))), (int8x16_t)v22));
  v32 = (int16x8_t)vandq_s8(v31, v29);
  v22.i64[0] = 0x404040404040404;
  v22.i64[1] = 0x404040404040404;
  v33 = vqsubq_s8(v26, vshrq_n_s8(vqaddq_s8((int8x16_t)v32, (int8x16_t)v22), 3uLL));
  v34 = vqaddq_s8(v27, vshrq_n_s8(vqaddq_s8((int8x16_t)v32, (int8x16_t)v20), 3uLL));
  v35 = vbicq_s8(v31, v29);
  v29.i64[0] = 0x909090909090909;
  v29.i64[1] = 0x909090909090909;
  v22.i64[0] = 0x3F003F003F003FLL;
  v22.i64[1] = 0x3F003F003F003FLL;
  v20.i64[0] = 0x3F003F003F003FLL;
  v20.i64[1] = 0x3F003F003F003FLL;
  v32.i64[0] = 0x3F003F003F003FLL;
  v32.i64[1] = 0x3F003F003F003FLL;
  v36 = vmlal_high_s8(v32, v35, v29);
  v29.i64[0] = 0x1212121212121212;
  v29.i64[1] = 0x1212121212121212;
  v23.i64[0] = 0x3F003F003F003FLL;
  v23.i64[1] = 0x3F003F003F003FLL;
  v37 = vmlal_s8(v23, *(int8x8_t *)v35.i8, (int8x8_t)0x1212121212121212);
  v21.i64[0] = 0x3F003F003F003FLL;
  v21.i64[1] = 0x3F003F003F003FLL;
  v38 = vmlal_high_s8(v21, v35, v29);
  v29.i64[0] = 0x1B1B1B1B1B1B1B1BLL;
  v29.i64[1] = 0x1B1B1B1B1B1B1B1BLL;
  v39.i64[0] = 0x3F003F003F003FLL;
  v39.i64[1] = 0x3F003F003F003FLL;
  v40 = vmlal_s8(v39, *(int8x8_t *)v35.i8, (int8x8_t)0x1B1B1B1B1B1B1B1BLL);
  v41 = vmlal_high_s8(v22, v35, v29);
  v42 = vqshrn_high_n_s16(vqshrn_n_s16(vmlal_s8(v20, *(int8x8_t *)v35.i8, (int8x8_t)0x909090909090909), 7uLL), v36, 7uLL);
  v43 = vqshrn_high_n_s16(vqshrn_n_s16(v37, 7uLL), v38, 7uLL);
  v44 = vqshrn_high_n_s16(vqshrn_n_s16(v40, 7uLL), v41, 7uLL);
  v45 = vqaddq_s8(veorq_s8(v8, v24), v42);
  v46 = vqaddq_s8(v28, v43);
  v47 = veorq_s8(vqsubq_s8(veorq_s8(v18, v24), v42), v24);
  v48 = veorq_s8(vqsubq_s8(v25, v43), v24);
  v49 = veorq_s8(vqsubq_s8(v33, v44), v24);
  v50 = veorq_s8(vqaddq_s8(v34, v44), v24);
  v51 = veorq_s8(v46, v24);
  result = veorq_s8(v45, v24);
  v53 = (int8x16_t *)((char *)v19 - 6 * a2);
  *v53 = result;
  v54 = (int8x16_t *)((char *)v53 + a2);
  *v54 = v51;
  v55 = (int8x16_t *)((char *)v54 + a2);
  *v55 = v50;
  v56 = (int8x16_t *)((char *)v55 + a2);
  *v56 = v49;
  v57 = (int8x16_t *)((char *)v56 + a2);
  *v57 = v48;
  *(int8x16_t *)((char *)v57 + a2) = v47;
  return result;
}

double vp8_mbloop_filter_horizontal_edge_uv_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  uint8x16_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint8x16_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint8x16_t v14;
  int8x8_t *v15;
  uint64_t v16;
  int8x8_t *v17;
  int8x8_t v18;
  uint8x16_t *v19;
  int8x8_t v20;
  int8x8_t *v21;
  uint8x16_t v22;
  uint8x16_t *v23;
  uint8x16_t v24;
  uint8x16_t *v25;
  uint8x16_t v26;
  uint8x16_t *v27;
  uint8x16_t v28;
  int16x8_t v29;
  uint8x16_t v30;
  int8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint64_t v57;
  _QWORD *v58;
  int8x8_t *v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  _QWORD *v64;
  int8x8_t *v65;
  _QWORD *v66;
  int8x8_t *v67;
  int8x16_t v68;
  _QWORD *v69;
  int8x8_t *v70;
  _QWORD *v71;
  int8x8_t *v72;
  double result;

  v6 = 4 * a2;
  v7.i64[0] = *(_QWORD *)(a1 - v6);
  v8 = (uint64_t *)(a1 - v6 + a2);
  v9 = (uint64_t *)(a6 - v6 + a2);
  v10.i64[0] = *v8;
  v11 = (uint64_t *)((char *)v8 + a2);
  v12 = *v9;
  v13 = (uint64_t *)((char *)v9 + a2);
  v14.i64[0] = *v11;
  v15 = (int8x8_t *)((char *)v11 + a2);
  v16 = *v13;
  v17 = (int8x8_t *)((char *)v13 + a2);
  v18 = *v15;
  v19 = (uint8x16_t *)((char *)v15 + a2);
  v20 = *v17;
  v21 = (int8x8_t *)((char *)v17 + a2);
  v22 = *v19;
  v23 = (uint8x16_t *)((char *)v19 + a2);
  v24 = *v23;
  v25 = (uint8x16_t *)((char *)v23 + a2);
  v26 = *v25;
  v27 = (uint8x16_t *)((char *)v25 + a2);
  v7.i64[1] = *(_QWORD *)(a6 - v6);
  v10.i64[1] = v12;
  v14.i64[1] = v16;
  *(int8x8_t *)v28.i8 = v18;
  v28.u64[1] = (unint64_t)v20;
  v29 = (int16x8_t)vmaxq_u8(vabdq_u8(v24, v22), vabdq_u8(v14, v28));
  v30 = vabdq_u8(v28, v22);
  v31 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vmaxq_u8(vmaxq_u8(vmaxq_u8(vabdq_u8(v7, v10), vabdq_u8(v10, v14)), (uint8x16_t)v29), vmaxq_u8(vabdq_u8(v26, v24), vabdq_u8(*v27, v26))));
  v32 = vabdq_u8(v14, v24);
  v33.i64[0] = 0x8080808080808080;
  v33.i64[1] = 0x8080808080808080;
  v34 = veorq_s8((int8x16_t)v24, v33);
  v35 = veorq_s8((int8x16_t)v14, v33);
  v36 = (int8x16_t)vcgtq_u8((uint8x16_t)v29, (uint8x16_t)vdupq_n_s8(a5));
  v37 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a3), vqaddq_u8(vqaddq_u8(v30, v30), vshrq_n_u8(v32, 1uLL)));
  v38 = (int16x8_t)vqsubq_s8(v35, v34);
  v39 = vandq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(veor_s8(*(int8x8_t *)v22.i8, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), veor_s8(v18, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), *(int8x8_t *)v38.i8)), vaddw_high_s8(vmlsl_s8(vmull_s8(veor_s8(*v21, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), veor_s8(v20, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), (int8x16_t)v38)), vandq_s8(v37, v31));
  v40 = vandq_s8(v39, v36);
  v41.i64[0] = 0x404040404040404;
  v41.i64[1] = 0x404040404040404;
  v42.i64[0] = 0x303030303030303;
  v42.i64[1] = 0x303030303030303;
  v43 = vqsubq_s8(veorq_s8((int8x16_t)v22, v33), vshrq_n_s8(vqaddq_s8(v40, v41), 3uLL));
  v44 = vqaddq_s8(veorq_s8((int8x16_t)v28, v33), vshrq_n_s8(vqaddq_s8(v40, v42), 3uLL));
  v45 = vbicq_s8(v39, v36);
  v36.i64[0] = 0x909090909090909;
  v36.i64[1] = 0x909090909090909;
  v46.i64[0] = 0x3F003F003F003FLL;
  v46.i64[1] = 0x3F003F003F003FLL;
  v22.i64[0] = 0x3F003F003F003FLL;
  v22.i64[1] = 0x3F003F003F003FLL;
  v42.i64[0] = 0x3F003F003F003FLL;
  v42.i64[1] = 0x3F003F003F003FLL;
  v47 = vmlal_high_s8((int16x8_t)v42, v45, v36);
  v36.i64[0] = 0x1212121212121212;
  v36.i64[1] = 0x1212121212121212;
  v29.i64[0] = 0x3F003F003F003FLL;
  v29.i64[1] = 0x3F003F003F003FLL;
  v48 = vmlal_s8(v29, *(int8x8_t *)v45.i8, (int8x8_t)0x1212121212121212);
  v38.i64[0] = 0x3F003F003F003FLL;
  v38.i64[1] = 0x3F003F003F003FLL;
  v49 = vmlal_high_s8(v38, v45, v36);
  v36.i64[0] = 0x1B1B1B1B1B1B1B1BLL;
  v36.i64[1] = 0x1B1B1B1B1B1B1B1BLL;
  v28.i64[0] = 0x3F003F003F003FLL;
  v28.i64[1] = 0x3F003F003F003FLL;
  v50 = vmlal_s8((int16x8_t)v28, *(int8x8_t *)v45.i8, (int8x8_t)0x1B1B1B1B1B1B1B1BLL);
  v51 = vmlal_high_s8(v46, v45, v36);
  v52 = vqshrn_high_n_s16(vqshrn_n_s16(vmlal_s8((int16x8_t)v22, *(int8x8_t *)v45.i8, (int8x8_t)0x909090909090909), 7uLL), v47, 7uLL);
  v53 = vqshrn_high_n_s16(vqshrn_n_s16(v48, 7uLL), v49, 7uLL);
  v54 = vqshrn_high_n_s16(vqshrn_n_s16(v50, 7uLL), v51, 7uLL);
  v55 = vqsubq_s8(veorq_s8((int8x16_t)v26, v33), v52);
  v56 = veorq_s8(vqaddq_s8(veorq_s8((int8x16_t)v10, v33), v52), v33);
  v57 = 6 * a2;
  v58 = (uint64_t *)((char *)v27->i64 - v57);
  v59 = (int8x8_t *)((char *)v21 + a2 + a2 + a2 - v57);
  *v58 = v56.i64[0];
  *v59 = (int8x8_t)vextq_s8(v56, v56, 8uLL).u64[0];
  v60 = veorq_s8(v55, v33);
  v61 = veorq_s8(vqsubq_s8(v34, v53), v33);
  v62 = veorq_s8(vqaddq_s8(v44, v54), v33);
  v63 = veorq_s8(vqaddq_s8(v35, v53), v33);
  v64 = (_QWORD *)((char *)v58 + a2);
  v65 = (int8x8_t *)((char *)v59 + a2);
  *v64 = v63.i64[0];
  v66 = (_QWORD *)((char *)v64 + a2);
  *v65 = (int8x8_t)vextq_s8(v63, v63, 8uLL).u64[0];
  v67 = (int8x8_t *)((char *)v65 + a2);
  *v66 = v62.i64[0];
  *v67 = (int8x8_t)vextq_s8(v62, v62, 8uLL).u64[0];
  v68 = veorq_s8(vqsubq_s8(v43, v54), v33);
  v69 = (_QWORD *)((char *)v66 + a2);
  v70 = (int8x8_t *)((char *)v67 + a2);
  *v69 = v68.i64[0];
  v71 = (_QWORD *)((char *)v69 + a2);
  *v70 = (int8x8_t)vextq_s8(v68, v68, 8uLL).u64[0];
  v72 = (int8x8_t *)((char *)v70 + a2);
  *v71 = v61.i64[0];
  *v72 = (int8x8_t)vextq_s8(v61, v61, 8uLL).u64[0];
  *(_QWORD *)((char *)v71 + a2) = v60.i64[0];
  *(_QWORD *)&result = vextq_s8(v60, v60, 8uLL).u64[0];
  *(double *)((char *)v72 + a2) = result;
  return result;
}

double vp8_mbloop_filter_vertical_edge_y_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  int32x4_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  int32x4_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int32x4_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int32x4_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int32x4_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  int32x4_t v28;
  int32x4_t *v29;
  uint64_t v30;
  char *v31;
  int32x4_t v32;
  int32x4_t *v33;
  char *v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int8x16_t v52;
  int16x8_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int32x4_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int8x16_t v61;
  int16x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int16x8_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int32x4_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int32x4_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  uint64_t v113;
  _QWORD *v114;
  char *v115;
  int8x16_t v116;
  _QWORD *v117;
  char *v118;
  int8x16_t v119;
  _QWORD *v120;
  char *v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  _QWORD *v126;
  char *v127;
  _QWORD *v128;
  char *v129;
  int8x16_t v130;
  _QWORD *v131;
  char *v132;
  _QWORD *v133;
  char *v134;
  double result;

  v6 = *(_QWORD *)(a1 - 4);
  v5 = a1 - 4;
  v7.i64[0] = v6;
  v8 = (uint64_t *)(v5 + 8 * a2);
  v9 = (uint64_t *)(v5 + a2);
  v10 = *v8;
  v11 = (uint64_t *)((char *)v8 + a2);
  v12.i64[0] = *v9;
  v13 = (uint64_t *)((char *)v9 + a2);
  v14 = *v11;
  v15 = (uint64_t *)((char *)v11 + a2);
  v16.i64[0] = *v13;
  v17 = (uint64_t *)((char *)v13 + a2);
  v18 = *v15;
  v19 = (uint64_t *)((char *)v15 + a2);
  v20.i64[0] = *v17;
  v21 = (uint64_t *)((char *)v17 + a2);
  v22 = *v19;
  v23 = (uint64_t *)((char *)v19 + a2);
  v24.i64[0] = *v21;
  v25 = (uint64_t *)((char *)v21 + a2);
  v26 = *v23;
  v27 = (uint64_t *)((char *)v23 + a2);
  v28.i64[0] = *v25;
  v29 = (int32x4_t *)((char *)v25 + a2);
  v30 = *v27;
  v31 = (char *)v27 + a2;
  v32 = *v29;
  v33 = (int32x4_t *)((char *)v29 + a2);
  v34 = &v31[a2];
  v7.i64[1] = v10;
  v12.i64[1] = v14;
  v16.i64[1] = v18;
  v20.i64[1] = v22;
  v24.i64[1] = v26;
  v28.i64[1] = v30;
  v35 = (int16x8_t)vtrn1q_s32(v7, v24);
  v36 = (int16x8_t)vtrn2q_s32(v7, v24);
  v37 = (int16x8_t)vtrn1q_s32(v12, v28);
  v38 = (int16x8_t)vtrn2q_s32(v12, v28);
  v39 = (int16x8_t)vtrn1q_s32(v16, v32);
  v40 = (int16x8_t)vtrn2q_s32(v16, v32);
  v41 = (int16x8_t)vtrn1q_s32(v20, *v33);
  v42 = (int16x8_t)vtrn2q_s32(v20, *v33);
  v43 = (int8x16_t)vtrn1q_s16(v35, v39);
  v44 = (int8x16_t)vtrn2q_s16(v35, v39);
  v45 = (int8x16_t)vtrn1q_s16(v37, v41);
  v46 = (int8x16_t)vtrn2q_s16(v37, v41);
  v47 = (int8x16_t)vtrn1q_s16(v36, v40);
  v48 = (int8x16_t)vtrn2q_s16(v36, v40);
  v49 = (int8x16_t)vtrn1q_s16(v38, v42);
  v50 = (int8x16_t)vtrn2q_s16(v38, v42);
  v51 = (int32x4_t)vtrn1q_s8(v43, v45);
  v52 = vtrn2q_s8(v43, v45);
  v53 = (int16x8_t)vtrn1q_s8(v44, v46);
  v54 = vtrn2q_s8(v44, v46);
  v55 = vtrn1q_s8(v47, v49);
  v56 = vtrn2q_s8(v47, v49);
  v57 = vtrn1q_s8(v48, v50);
  v58 = (int32x4_t)vtrn2q_s8(v48, v50);
  v59 = (int16x8_t)vmaxq_u8(vabdq_u8((uint8x16_t)v56, (uint8x16_t)v55), vabdq_u8((uint8x16_t)v53, (uint8x16_t)v54));
  v60 = (int16x8_t)vabdq_u8((uint8x16_t)v54, (uint8x16_t)v55);
  v61 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vmaxq_u8(vmaxq_u8(vmaxq_u8(vabdq_u8((uint8x16_t)v51, (uint8x16_t)v52), vabdq_u8((uint8x16_t)v52, (uint8x16_t)v53)), (uint8x16_t)v59), vmaxq_u8(vabdq_u8((uint8x16_t)v57, (uint8x16_t)v56), vabdq_u8((uint8x16_t)v58, (uint8x16_t)v57))));
  v62 = (int16x8_t)vabdq_u8((uint8x16_t)v53, (uint8x16_t)v56);
  v63.i64[0] = 0x8080808080808080;
  v63.i64[1] = 0x8080808080808080;
  v64 = veorq_s8(v56, v63);
  v65 = (int16x8_t)veorq_s8(v55, v63);
  v66 = veorq_s8(v54, v63);
  v67 = veorq_s8((int8x16_t)v53, v63);
  v68 = veorq_s8(v52, v63);
  v69 = (int8x16_t)vcgtq_u8((uint8x16_t)v59, (uint8x16_t)vdupq_n_s8(a5));
  v70 = vqsubq_s8(v67, v64);
  v53.i64[0] = 0x303030303030303;
  v53.i64[1] = 0x303030303030303;
  v71 = vandq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v65.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v66.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v70.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8((int8x16_t)v65, (int8x16_t)v53), v66, (int8x16_t)v53), v70)), vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a3), vqaddq_u8(vqaddq_u8((uint8x16_t)v60, (uint8x16_t)v60), vshrq_n_u8((uint8x16_t)v62, 1uLL))), v61));
  v72 = vandq_s8(v71, v69);
  v61.i64[0] = 0x404040404040404;
  v61.i64[1] = 0x404040404040404;
  v73 = vqsubq_s8((int8x16_t)v65, vshrq_n_s8(vqaddq_s8(v72, v61), 3uLL));
  v74 = vqaddq_s8(v66, vshrq_n_s8(vqaddq_s8(v72, (int8x16_t)v53), 3uLL));
  v75 = vbicq_s8(v71, v69);
  v69.i64[0] = 0x909090909090909;
  v69.i64[1] = 0x909090909090909;
  v65.i64[0] = 0x3F003F003F003FLL;
  v65.i64[1] = 0x3F003F003F003FLL;
  v59.i64[0] = 0x3F003F003F003FLL;
  v59.i64[1] = 0x3F003F003F003FLL;
  v53.i64[0] = 0x3F003F003F003FLL;
  v53.i64[1] = 0x3F003F003F003FLL;
  v76 = vmlal_high_s8(v53, v75, v69);
  v69.i64[0] = 0x1212121212121212;
  v69.i64[1] = 0x1212121212121212;
  v62.i64[0] = 0x3F003F003F003FLL;
  v62.i64[1] = 0x3F003F003F003FLL;
  v77 = vmlal_s8(v62, *(int8x8_t *)v75.i8, (int8x8_t)0x1212121212121212);
  v60.i64[0] = 0x3F003F003F003FLL;
  v60.i64[1] = 0x3F003F003F003FLL;
  v78 = vmlal_high_s8(v60, v75, v69);
  v69.i64[0] = 0x1B1B1B1B1B1B1B1BLL;
  v69.i64[1] = 0x1B1B1B1B1B1B1B1BLL;
  v79.i64[0] = 0x3F003F003F003FLL;
  v79.i64[1] = 0x3F003F003F003FLL;
  v80 = vmlal_s8(v79, *(int8x8_t *)v75.i8, (int8x8_t)0x1B1B1B1B1B1B1B1BLL);
  v81 = vmlal_high_s8(v65, v75, v69);
  v82 = vqshrn_high_n_s16(vqshrn_n_s16(vmlal_s8(v59, *(int8x8_t *)v75.i8, (int8x8_t)0x909090909090909), 7uLL), v76, 7uLL);
  v83 = vqshrn_high_n_s16(vqshrn_n_s16(v77, 7uLL), v78, 7uLL);
  v84 = vqshrn_high_n_s16(vqshrn_n_s16(v80, 7uLL), v81, 7uLL);
  v85 = vqsubq_s8(veorq_s8(v57, v63), v82);
  v86 = vqaddq_s8(v68, v82);
  v87 = vqsubq_s8(v64, v83);
  v88 = vqaddq_s8(v67, v83);
  v89 = vqaddq_s8(v74, v84);
  v90 = (int32x4_t)veorq_s8(vqsubq_s8(v73, v84), v63);
  v91 = (int16x8_t)vtrn1q_s32(v51, v90);
  v92 = (int16x8_t)vtrn2q_s32(v51, v90);
  v93 = (int32x4_t)veorq_s8(v86, v63);
  v94 = (int32x4_t)veorq_s8(v87, v63);
  v95 = (int16x8_t)vtrn1q_s32(v93, v94);
  v96 = (int16x8_t)vtrn2q_s32(v93, v94);
  v97 = (int32x4_t)veorq_s8(v88, v63);
  v98 = (int32x4_t)veorq_s8(v85, v63);
  v99 = (int16x8_t)vtrn1q_s32(v97, v98);
  v100 = (int16x8_t)vtrn2q_s32(v97, v98);
  v101 = (int32x4_t)veorq_s8(v89, v63);
  v102 = (int16x8_t)vtrn1q_s32(v101, v58);
  v103 = (int16x8_t)vtrn2q_s32(v101, v58);
  v104 = (int8x16_t)vtrn1q_s16(v91, v99);
  v105 = (int8x16_t)vtrn2q_s16(v91, v99);
  v106 = (int8x16_t)vtrn1q_s16(v95, v102);
  v107 = (int8x16_t)vtrn2q_s16(v95, v102);
  v108 = (int8x16_t)vtrn1q_s16(v92, v100);
  v109 = (int8x16_t)vtrn2q_s16(v92, v100);
  v110 = (int8x16_t)vtrn1q_s16(v96, v103);
  v111 = (int8x16_t)vtrn2q_s16(v96, v103);
  v112 = vtrn1q_s8(v104, v106);
  v113 = 7 * a2;
  v114 = (uint64_t *)((char *)v33->i64 - v113);
  v115 = &v34[-v113];
  *v114 = v112.i64[0];
  *(_QWORD *)v115 = vextq_s8(v112, v112, 8uLL).u64[0];
  v116 = vtrn2q_s8(v104, v106);
  v117 = (_QWORD *)((char *)v114 + a2);
  v118 = &v115[a2];
  *v117 = v116.i64[0];
  *(_QWORD *)v118 = vextq_s8(v116, v116, 8uLL).u64[0];
  v119 = vtrn1q_s8(v105, v107);
  v120 = (_QWORD *)((char *)v117 + a2);
  v121 = &v118[a2];
  *v120 = v119.i64[0];
  *(_QWORD *)v121 = vextq_s8(v119, v119, 8uLL).u64[0];
  v122 = vtrn2q_s8(v105, v107);
  v123 = vtrn1q_s8(v108, v110);
  v124 = vtrn2q_s8(v108, v110);
  v125 = vtrn1q_s8(v109, v111);
  v126 = (_QWORD *)((char *)v120 + a2);
  v127 = &v121[a2];
  *v126 = v122.i64[0];
  v128 = (_QWORD *)((char *)v126 + a2);
  *(_QWORD *)v127 = vextq_s8(v122, v122, 8uLL).u64[0];
  v129 = &v127[a2];
  *v128 = v123.i64[0];
  *(_QWORD *)v129 = vextq_s8(v123, v123, 8uLL).u64[0];
  v130 = vtrn2q_s8(v109, v111);
  v131 = (_QWORD *)((char *)v128 + a2);
  v132 = &v129[a2];
  *v131 = v124.i64[0];
  v133 = (_QWORD *)((char *)v131 + a2);
  *(_QWORD *)v132 = vextq_s8(v124, v124, 8uLL).u64[0];
  v134 = &v132[a2];
  *v133 = v125.i64[0];
  *v134 = vextq_s8(v125, v125, 8uLL).u64[0];
  *(_QWORD *)((char *)v133 + a2) = v130.i64[0];
  *(_QWORD *)&result = vextq_s8(v130, v130, 8uLL).u64[0];
  *(double *)((char *)v134 + a2) = result;
  return result;
}

double vp8_mbloop_filter_vertical_edge_uv_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  int8x16_t v6;
  _QWORD *v7;
  uint64_t v8;
  int32x4_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int32x4_t v15;
  uint64_t *v16;
  uint64_t *v17;
  int32x4_t v18;
  uint64_t *v19;
  uint64_t *v20;
  int32x4_t v21;
  uint64_t *v22;
  int32x4_t v23;
  uint64_t *v24;
  int32x4_t v25;
  uint64_t *v26;
  _QWORD *v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int32x4_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int8x16_t v56;
  int16x8_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int32x4_t v94;
  int16x8_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int16x8_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  double result;

  v6 = vdupq_n_s8(a4);
  v8 = *(_QWORD *)(a1 - 4);
  v7 = (_QWORD *)(a1 - 4);
  v9.i64[0] = v8;
  v10 = a2;
  v12 = *(_QWORD *)(a6 - 4);
  v11 = (_QWORD *)(a6 - 4);
  v13 = (_QWORD *)((char *)v7 + a2);
  v14 = (_QWORD *)((char *)v11 + a2);
  v15.i64[0] = *v13;
  v16 = (uint64_t *)((char *)v13 + a2);
  v17 = (uint64_t *)((char *)v14 + a2);
  v18.i64[0] = *v16;
  v19 = (uint64_t *)((char *)v16 + a2);
  v20 = (uint64_t *)((char *)v17 + a2);
  v21.i64[0] = *v19;
  v22 = (uint64_t *)((char *)v19 + a2);
  v23.i64[0] = *v22;
  v24 = (uint64_t *)((char *)v20 + v10 + v10);
  v25.i64[0] = *(uint64_t *)((char *)v22 + v10);
  v26 = (uint64_t *)((char *)v22 + v10 + v10);
  v27 = (uint64_t *)((char *)v24 + v10);
  v28.i64[0] = *v26;
  v29.i64[0] = *(uint64_t *)((char *)v26 + v10);
  v9.i64[1] = v12;
  v15.i64[1] = *v14;
  v18.i64[1] = *v17;
  v21.i64[1] = *v20;
  v23.i64[1] = *(uint64_t *)((char *)v20 + v10);
  v25.i64[1] = *v24;
  v28.i64[1] = *(uint64_t *)((char *)v24 + v10);
  v29.i64[1] = *(uint64_t *)((char *)v24 + v10 + v10);
  v30 = (int16x8_t)vtrn1q_s32(v9, v23);
  v31 = (int16x8_t)vtrn2q_s32(v9, v23);
  v32 = (int16x8_t)vtrn1q_s32(v15, v25);
  v33 = (int16x8_t)vtrn2q_s32(v15, v25);
  v34 = (int16x8_t)vtrn1q_s32(v18, v28);
  v35 = (int16x8_t)vtrn2q_s32(v18, v28);
  v36 = (int16x8_t)vtrn1q_s32(v21, v29);
  v37 = (int16x8_t)vtrn2q_s32(v21, v29);
  v38 = (int8x16_t)vtrn1q_s16(v30, v34);
  v39 = (int8x16_t)vtrn2q_s16(v30, v34);
  v40 = (int8x16_t)vtrn1q_s16(v32, v36);
  v41 = (int8x16_t)vtrn2q_s16(v32, v36);
  v42 = (int8x16_t)vtrn1q_s16(v31, v35);
  v43 = (int8x16_t)vtrn2q_s16(v31, v35);
  v44 = (int8x16_t)vtrn1q_s16(v33, v37);
  v45 = (int8x16_t)vtrn2q_s16(v33, v37);
  v46 = (int32x4_t)vtrn1q_s8(v38, v40);
  v47 = vtrn2q_s8(v38, v40);
  v48 = (int16x8_t)vtrn1q_s8(v39, v41);
  v49 = vtrn2q_s8(v39, v41);
  v50 = vtrn1q_s8(v42, v44);
  v51 = vtrn2q_s8(v42, v44);
  v52 = vtrn1q_s8(v43, v45);
  v53 = (int32x4_t)vtrn2q_s8(v43, v45);
  v54 = (int16x8_t)vmaxq_u8(vabdq_u8((uint8x16_t)v51, (uint8x16_t)v50), vabdq_u8((uint8x16_t)v48, (uint8x16_t)v49));
  v55 = (int16x8_t)vabdq_u8((uint8x16_t)v49, (uint8x16_t)v50);
  v56 = (int8x16_t)vcgeq_u8((uint8x16_t)v6, vmaxq_u8(vmaxq_u8(vmaxq_u8(vabdq_u8((uint8x16_t)v46, (uint8x16_t)v47), vabdq_u8((uint8x16_t)v47, (uint8x16_t)v48)), (uint8x16_t)v54), vmaxq_u8(vabdq_u8((uint8x16_t)v52, (uint8x16_t)v51), vabdq_u8((uint8x16_t)v53, (uint8x16_t)v52))));
  v57 = (int16x8_t)vabdq_u8((uint8x16_t)v48, (uint8x16_t)v51);
  v6.i64[0] = 0x8080808080808080;
  v6.i64[1] = 0x8080808080808080;
  v58 = veorq_s8(v51, v6);
  v59 = (int16x8_t)veorq_s8(v50, v6);
  v60 = veorq_s8(v49, v6);
  v61 = veorq_s8((int8x16_t)v48, v6);
  v62 = veorq_s8(v47, v6);
  v63 = (int8x16_t)vcgtq_u8((uint8x16_t)v54, (uint8x16_t)vdupq_n_s8(a5));
  v64 = vqsubq_s8(v61, v58);
  v48.i64[0] = 0x303030303030303;
  v48.i64[1] = 0x303030303030303;
  v65 = vandq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v59.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v60.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v64.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8((int8x16_t)v59, (int8x16_t)v48), v60, (int8x16_t)v48), v64)), vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a3), vqaddq_u8(vqaddq_u8((uint8x16_t)v55, (uint8x16_t)v55), vshrq_n_u8((uint8x16_t)v57, 1uLL))), v56));
  v66 = vandq_s8(v65, v63);
  v56.i64[0] = 0x404040404040404;
  v56.i64[1] = 0x404040404040404;
  v67 = vqsubq_s8((int8x16_t)v59, vshrq_n_s8(vqaddq_s8(v66, v56), 3uLL));
  v68 = vqaddq_s8(v60, vshrq_n_s8(vqaddq_s8(v66, (int8x16_t)v48), 3uLL));
  v69 = vbicq_s8(v65, v63);
  v63.i64[0] = 0x909090909090909;
  v63.i64[1] = 0x909090909090909;
  v59.i64[0] = 0x3F003F003F003FLL;
  v59.i64[1] = 0x3F003F003F003FLL;
  v54.i64[0] = 0x3F003F003F003FLL;
  v54.i64[1] = 0x3F003F003F003FLL;
  v48.i64[0] = 0x3F003F003F003FLL;
  v48.i64[1] = 0x3F003F003F003FLL;
  v70 = vmlal_high_s8(v48, v69, v63);
  v63.i64[0] = 0x1212121212121212;
  v63.i64[1] = 0x1212121212121212;
  v57.i64[0] = 0x3F003F003F003FLL;
  v57.i64[1] = 0x3F003F003F003FLL;
  v71 = vmlal_s8(v57, *(int8x8_t *)v69.i8, (int8x8_t)0x1212121212121212);
  v55.i64[0] = 0x3F003F003F003FLL;
  v55.i64[1] = 0x3F003F003F003FLL;
  v72 = vmlal_high_s8(v55, v69, v63);
  v63.i64[0] = 0x1B1B1B1B1B1B1B1BLL;
  v63.i64[1] = 0x1B1B1B1B1B1B1B1BLL;
  v29.i64[0] = 0x3F003F003F003FLL;
  v29.i64[1] = 0x3F003F003F003FLL;
  v73 = vmlal_s8((int16x8_t)v29, *(int8x8_t *)v69.i8, (int8x8_t)0x1B1B1B1B1B1B1B1BLL);
  v74 = vmlal_high_s8(v59, v69, v63);
  v75 = vqshrn_high_n_s16(vqshrn_n_s16(vmlal_s8(v54, *(int8x8_t *)v69.i8, (int8x8_t)0x909090909090909), 7uLL), v70, 7uLL);
  v76 = vqshrn_high_n_s16(vqshrn_n_s16(v71, 7uLL), v72, 7uLL);
  v77 = vqshrn_high_n_s16(vqshrn_n_s16(v73, 7uLL), v74, 7uLL);
  v78 = vqsubq_s8(veorq_s8(v52, v6), v75);
  v79 = vqaddq_s8(v62, v75);
  v80 = vqsubq_s8(v58, v76);
  v81 = vqaddq_s8(v61, v76);
  v82 = vqaddq_s8(v68, v77);
  v83 = (int32x4_t)veorq_s8(vqsubq_s8(v67, v77), v6);
  v84 = (int16x8_t)vtrn1q_s32(v46, v83);
  v85 = (int16x8_t)vtrn2q_s32(v46, v83);
  v86 = (int32x4_t)veorq_s8(v79, v6);
  v87 = (int32x4_t)veorq_s8(v80, v6);
  v88 = (int16x8_t)vtrn1q_s32(v86, v87);
  v89 = (int16x8_t)vtrn2q_s32(v86, v87);
  v90 = (int32x4_t)veorq_s8(v81, v6);
  v91 = (int32x4_t)veorq_s8(v78, v6);
  v92 = (int16x8_t)vtrn1q_s32(v90, v91);
  v93 = (int16x8_t)vtrn2q_s32(v90, v91);
  v94 = (int32x4_t)veorq_s8(v82, v6);
  v95 = (int16x8_t)vtrn1q_s32(v94, v53);
  v96 = (int8x16_t)vtrn1q_s16(v84, v92);
  v97 = (int8x16_t)vtrn1q_s16(v88, v95);
  v98 = vtrn1q_s8(v96, v97);
  v99 = vtrn2q_s8(v96, v97);
  *v7 = v98.i64[0];
  *v13 = v99.i64[0];
  v100 = (int16x8_t)vtrn2q_s32(v94, v53);
  v101 = (int8x16_t)vtrn2q_s16(v84, v92);
  v102 = (int8x16_t)vtrn2q_s16(v88, v95);
  v103 = (int8x16_t)vtrn1q_s16(v85, v93);
  v104 = (int8x16_t)vtrn2q_s16(v85, v93);
  v105 = (int8x16_t)vtrn1q_s16(v89, v100);
  v106 = vtrn1q_s8(v101, v102);
  v107 = vtrn2q_s8(v101, v102);
  v108 = vtrn1q_s8(v103, v105);
  v109 = vtrn2q_s8(v103, v105);
  *v16 = v106.i64[0];
  *v19 = v107.i64[0];
  *v22 = v108.i64[0];
  *(uint64_t *)((char *)v22 + v10) = v109.i64[0];
  v110 = (int8x16_t)vtrn2q_s16(v89, v100);
  v111 = vtrn1q_s8(v104, v110);
  *v26 = v111.i64[0];
  v112 = vtrn2q_s8(v104, v110);
  *(uint64_t *)((char *)v26 + v10) = v112.i64[0];
  *v11 = vextq_s8(v98, v98, 8uLL).u64[0];
  *v14 = vextq_s8(v99, v99, 8uLL).u64[0];
  *v17 = vextq_s8(v106, v106, 8uLL).u64[0];
  *v20 = vextq_s8(v107, v107, 8uLL).u64[0];
  *(uint64_t *)((char *)v20 + v10) = vextq_s8(v108, v108, 8uLL).u64[0];
  *v24 = vextq_s8(v109, v109, 8uLL).u64[0];
  *v27 = vextq_s8(v111, v111, 8uLL).u64[0];
  *(_QWORD *)&result = vextq_s8(v112, v112, 8uLL).u64[0];
  *(double *)((char *)v27 + v10) = result;
  return result;
}

_QWORD *vp8_setup_block_dptrs(_QWORD *result)
{
  result[270] = result;
  result[277] = (char *)result + 4;
  result[284] = result + 1;
  result[291] = (char *)result + 12;
  result[298] = result + 8;
  result[305] = (char *)result + 68;
  result[312] = result + 9;
  result[319] = (char *)result + 76;
  result[326] = result + 16;
  result[333] = (char *)result + 132;
  result[340] = result + 17;
  result[347] = (char *)result + 140;
  result[354] = result + 24;
  result[361] = (char *)result + 196;
  result[368] = result + 25;
  result[375] = (char *)result + 204;
  result[382] = result + 32;
  result[389] = (char *)result + 260;
  result[396] = result + 36;
  result[403] = (char *)result + 292;
  result[410] = result + 40;
  result[417] = (char *)result + 324;
  result[424] = result + 44;
  result[431] = (char *)result + 356;
  result[268] = result + 48;
  result[269] = result + 148;
  result[273] = result + 248;
  result[275] = result + 52;
  result[276] = result + 152;
  result[280] = (char *)result + 1985;
  result[282] = result + 56;
  result[283] = result + 156;
  result[287] = (char *)result + 1986;
  result[289] = result + 60;
  result[290] = result + 160;
  result[294] = (char *)result + 1987;
  result[296] = result + 64;
  result[297] = result + 164;
  result[301] = (char *)result + 1988;
  result[303] = result + 68;
  result[304] = result + 168;
  result[308] = (char *)result + 1989;
  result[310] = result + 72;
  result[311] = result + 172;
  result[315] = (char *)result + 1990;
  result[317] = result + 76;
  result[318] = result + 176;
  result[322] = (char *)result + 1991;
  result[324] = result + 80;
  result[325] = result + 180;
  result[329] = result + 249;
  result[331] = result + 84;
  result[332] = result + 184;
  result[336] = (char *)result + 1993;
  result[338] = result + 88;
  result[339] = result + 188;
  result[343] = (char *)result + 1994;
  result[345] = result + 92;
  result[346] = result + 192;
  result[350] = (char *)result + 1995;
  result[352] = result + 96;
  result[353] = result + 196;
  result[357] = (char *)result + 1996;
  result[359] = result + 100;
  result[360] = result + 200;
  result[364] = (char *)result + 1997;
  result[366] = result + 104;
  result[367] = result + 204;
  result[371] = (char *)result + 1998;
  result[373] = result + 108;
  result[374] = result + 208;
  result[378] = (char *)result + 1999;
  result[380] = result + 112;
  result[381] = result + 212;
  result[385] = result + 250;
  result[387] = result + 116;
  result[388] = result + 216;
  result[392] = (char *)result + 2001;
  result[394] = result + 120;
  result[395] = result + 220;
  result[399] = (char *)result + 2002;
  result[401] = result + 124;
  result[402] = result + 224;
  result[406] = (char *)result + 2003;
  result[408] = result + 128;
  result[409] = result + 228;
  result[413] = (char *)result + 2004;
  result[415] = result + 132;
  result[416] = result + 232;
  result[420] = (char *)result + 2005;
  result[422] = result + 136;
  result[423] = result + 236;
  result[427] = (char *)result + 2006;
  result[429] = result + 140;
  result[430] = result + 240;
  result[434] = (char *)result + 2007;
  result[436] = result + 144;
  result[437] = result + 244;
  result[441] = result + 251;
  return result;
}

_DWORD *vp8_build_block_doffsets(_DWORD *result)
{
  int v1;
  int v2;

  v1 = result[932];
  result[544] = 0;
  result[558] = 4;
  result[572] = 8;
  result[586] = 12;
  result[600] = 4 * v1;
  result[614] = 4 * v1 + 4;
  result[628] = 4 * v1 + 8;
  result[642] = 4 * v1 + 12;
  result[656] = 8 * v1;
  result[670] = (8 * v1) | 4;
  result[684] = 8 * v1 + 8;
  result[698] = 8 * v1 + 12;
  v1 *= 12;
  result[712] = v1;
  result[726] = v1 + 4;
  result[740] = v1 + 8;
  result[754] = v1 + 12;
  v2 = result[937];
  result[768] = 0;
  result[824] = 0;
  result[782] = 4;
  result[838] = 4;
  v2 *= 4;
  result[796] = v2;
  result[852] = v2;
  v2 += 4;
  result[810] = v2;
  result[866] = v2;
  return result;
}

double vp8_init3smotion_compensation(uint64_t a1, int a2)
{
  _QWORD *v2;
  char *v3;
  unsigned int v4;
  int v5;
  BOOL v6;
  double result;

  v2 = *(_QWORD **)(a1 + 8616);
  *v2 = 0;
  v3 = (char *)v2 + 34;
  v4 = 128;
  do
  {
    *((_WORD *)v3 - 12) = 0;
    *((_WORD *)v3 - 13) = -(__int16)v4;
    v5 = -(v4 * a2);
    *(_DWORD *)(v3 - 22) = v5;
    *((_WORD *)v3 - 8) = 0;
    *((_WORD *)v3 - 9) = v4;
    *(_DWORD *)(v3 - 14) = v4 * a2;
    *((_WORD *)v3 - 4) = -(__int16)v4;
    *((_WORD *)v3 - 5) = 0;
    *(_DWORD *)(v3 - 6) = -v4;
    *(_WORD *)v3 = v4;
    *((_WORD *)v3 - 1) = 0;
    *(_DWORD *)(v3 + 2) = v4;
    *((_WORD *)v3 + 4) = -(__int16)v4;
    *((_WORD *)v3 + 3) = -(__int16)v4;
    *(_DWORD *)(v3 + 10) = v5 - v4;
    *((_WORD *)v3 + 8) = v4;
    *((_WORD *)v3 + 7) = -(__int16)v4;
    *(_DWORD *)(v3 + 18) = v4 - v4 * a2;
    *((_WORD *)v3 + 12) = -(__int16)v4;
    *((_WORD *)v3 + 11) = v4;
    *((_WORD *)v3 + 16) = v4;
    *((_WORD *)v3 + 15) = v4;
    *(_DWORD *)(v3 + 26) = v4 * a2 - v4;
    *(_DWORD *)(v3 + 34) = v4 * a2 + v4;
    v3 += 64;
    v6 = v4 > 1;
    v4 >>= 1;
  }
  while (v6);
  *(_QWORD *)&result = 0x800000041;
  *(_QWORD *)(a1 + 8624) = 0x800000041;
  return result;
}

void vp8_find_best_sub_pixel_step_iteratively(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, __int16 *a5, int a6, uint64_t a7, _QWORD *a8, unsigned int *a9, _DWORD *a10)
{
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  int v60;
  int v62;
  int v63;
  int v64;
  int v65;

  v14 = *a5 >> 1;
  v15 = a5[1] >> 1;
  v16 = *a4;
  v54 = 4 * v16;
  v17 = a4[1];
  v19 = 4 * *(_DWORD *)(a1 + 8752);
  if (v19 <= v15 - 1023)
    v19 = v15 - 1023;
  v64 = v19;
  v20 = 4 * *(_DWORD *)(a1 + 8756);
  v55 = a5[1] >> 1;
  if (v20 >= v15 + 1023)
    v20 = v15 + 1023;
  v63 = v20;
  v21 = 4 * *(_DWORD *)(a1 + 8760);
  if (v21 <= v14 - 1023)
    v21 = v14 - 1023;
  v65 = v21;
  v22 = 4 * *(_DWORD *)(a1 + 8764);
  v56 = *a5 >> 1;
  if (v22 >= v14 + 1023)
    v22 = v14 + 1023;
  v62 = v22;
  v23 = *(_DWORD *)(a1 + 7792);
  v24 = v23 * v16;
  v25 = *(_QWORD *)(a1 + 7832) + *(int *)(a3 + 32) + v23 * v16 + v17;
  v26 = 8 * v16;
  if (v26 >= 0x7FFF)
    v26 = 0x7FFF;
  if (v26 <= -32768)
    LOWORD(v26) = 0x8000;
  *a4 = v26;
  v27 = 8 * v17;
  if (8 * (int)v17 >= 0x7FFF)
    v27 = 0x7FFF;
  if (v27 <= -32768)
    LOWORD(v27) = 0x8000;
  a4[1] = v27;
  v59 = v25;
  v60 = v23;
  v28 = (*(uint64_t (**)(void))(a7 + 8))();
  *a9 = v28;
  v57 = a8;
  if (a8)
  {
    v29 = (*a4 - *a5) >> 1;
    if (v29 >= 2047)
      v29 = 2047;
    v30 = v29 & ~(v29 >> 31);
    if ((a4[1] - a5[1]) >> 1 >= 2047)
      v31 = 2047;
    else
      v31 = (a4[1] - a5[1]) >> 1;
    v32 = ((*(_DWORD *)(a8[1] + 4 * (v31 & ~(v31 >> 31))) + *(_DWORD *)(*a8 + 4 * v30)) * a6 + 128) >> 8;
  }
  else
  {
    v32 = 0;
  }
  v58 = v24 + v17;
  v33 = v32 + v28;
  v18 = 4 * v17;
  v34 = 4 * v17;
  v35 = 4 * v17 - 2;
  v36 = v35 >= v64 && v35 <= v63;
  v37 = -1;
  if (v36 && v54 >= v65 && v54 <= v62)
  {
    v38 = v32 + v28;
    v39 = (*(uint64_t (**)(uint64_t))(a7 + 16))(v59 + (v54 >> 2) * v60 - v58 + (v35 >> 2));
    if (v57)
    {
      v33 = v38;
      v37 = (((*(_DWORD *)(v57[1] + 4 * (v35 - v55)) + *(_DWORD *)(*v57 + 4 * (v54 - v56))) * a6 + 128) >> 8) + v39;
      if (v37 >= v33)
        goto LABEL_36;
      goto LABEL_34;
    }
    v33 = v38;
    v37 = v39;
    if (v39 < v33)
    {
LABEL_34:
      *a9 = v39;
      *a10 = 0;
      v33 = v37;
    }
  }
LABEL_36:
  v40 = v18 + 2;
  v41 = v18 + 2 >= v64 && v40 <= v63;
  v42 = -1;
  if (v41 && v54 >= v65 && v54 <= v62)
  {
    v43 = v33;
    v44 = (*(uint64_t (**)(uint64_t))(a7 + 16))(v59 + (v54 >> 2) * v60 - v58 + (v40 >> 2));
    if (!v57)
    {
      v33 = v43;
      v42 = v44;
      if (v44 >= v43)
        goto LABEL_46;
      goto LABEL_45;
    }
    v33 = v43;
    v42 = (((*(_DWORD *)(v57[1] + 4 * (v40 - v55)) + *(_DWORD *)(*v57 + 4 * (v54 - v56))) * a6 + 128) >> 8) + v44;
    if (v42 < v43)
    {
LABEL_45:
      *a9 = v44;
      *a10 = 0;
      v33 = v42;
    }
  }
LABEL_46:
  v45 = -1;
  if (v34 < v64 || v34 > v63)
  {
    v50 = -1;
    goto LABEL_55;
  }
  v46 = v54 - 2;
  if (v54 - 2 >= v65 && v46 <= v62)
  {
    v47 = v33;
    v48 = (*(uint64_t (**)(uint64_t))(a7 + 16))(v59 + (v46 >> 2) * v60 - v58 + (v34 >> 2));
    if (v57)
    {
      v33 = v47;
      v45 = (((*(_DWORD *)(v57[1] + 4 * (v34 - v55)) + *(_DWORD *)(*v57 + 4 * (v54 - 2 - v56))) * a6 + 128) >> 8)
          + v48;
      if (v45 < v47)
        goto LABEL_52;
    }
    else
    {
      v33 = v47;
      v45 = v48;
      if (v48 < v47)
      {
LABEL_52:
        *a9 = v48;
        *a10 = 0;
        v33 = v45;
        v49 = v54 + 2;
        v50 = -1;
        if (v54 + 2 < v65)
          goto LABEL_55;
        goto LABEL_60;
      }
    }
  }
  v49 = v54 + 2;
  v50 = -1;
  if (v54 + 2 < v65)
    goto LABEL_55;
LABEL_60:
  if (v49 <= v62)
  {
    v51 = v33;
    v52 = (*(uint64_t (**)(uint64_t))(a7 + 16))(v59 + (v49 >> 2) * v60 - v58 + (v34 >> 2));
    if (v57)
      v53 = ((*(_DWORD *)(v57[1] + 4 * (v34 - v55)) + *(_DWORD *)(*v57 + 4 * (v49 - v56))) * a6 + 128) >> 8;
    else
      v53 = 0;
    v50 = v53 + v52;
    if (v50 < v51)
    {
      *a9 = v52;
      *a10 = 0;
    }
  }
LABEL_55:
  __asm { BR              X9 }
}

void vp8_find_best_sub_pixel_step(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, __int16 *a5, int a6, uint64_t a7, _QWORD *a8, _DWORD *a9, _DWORD *a10)
{
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned __int16 v30;
  __int16 v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned __int16 v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int *v56;
  int v57;
  __int16 *v58;
  unsigned __int16 v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int16 v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  int v90;
  unsigned __int16 v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  uint64_t v97;
  unsigned __int16 v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int *v103;
  int v104;
  __int16 *v105;
  uint64_t v107;
  uint64_t v108;
  int v109;

  v15 = **(_QWORD **)(a2 + 72) + *(int *)(a2 + 80);
  v109 = 0;
  v16 = *(_DWORD *)(a1 + 7792);
  v108 = v16;
  v17 = *(__int16 *)a4;
  v18 = *((__int16 *)a4 + 1);
  v19 = *(_QWORD *)(a1 + 7832) + *(int *)(a3 + 32) + v16 * v17 + *((__int16 *)a4 + 1);
  v20 = 8 * v17;
  if (8 * v17 >= 0x7FFF)
    v20 = 0x7FFF;
  if (v20 <= -32768)
    v21 = -32768;
  else
    v21 = v20;
  *(_WORD *)a4 = v21;
  v22 = 8 * v18;
  if (8 * v18 >= 0x7FFF)
    v22 = 0x7FFF;
  if (v22 <= -32768)
    v22 = -32768;
  v101 = v22;
  *((_WORD *)a4 + 1) = v22;
  v107 = v15;
  v23 = a2;
  v100 = v19;
  v24 = (*(uint64_t (**)(void))(a7 + 8))();
  *a9 = v24;
  if (a8)
  {
    v25 = (*(__int16 *)a4 - *a5) >> 1;
    if (v25 >= 2047)
      v25 = 2047;
    v26 = v25 & ~(v25 >> 31);
    if ((*((__int16 *)a4 + 1) - a5[1]) >> 1 >= 2047)
      v27 = 2047;
    else
      v27 = (*((__int16 *)a4 + 1) - a5[1]) >> 1;
    v28 = ((*(_DWORD *)(a8[1] + 4 * (v27 & ~(v27 >> 31))) + *(_DWORD *)(*a8 + 4 * v26)) * a6 + 128) >> 8;
  }
  else
  {
    v28 = 0;
  }
  v29 = v28 + v24;
  v30 = v101 | 4;
  v97 = v100 - 1;
  v32 = (*(uint64_t (**)(void))(a7 + 16))();
  v104 = a6;
  if (a8)
  {
    v33 = (v21 - *a5) >> 1;
    if (v33 >= 2047)
      v33 = 2047;
    v34 = v33 & ~(v33 >> 31);
    v31 = (v101 | 4) - 8;
    if ((v31 - a5[1]) >> 1 >= 2047)
      v35 = 2047;
    else
      v35 = (v31 - a5[1]) >> 1;
    v36 = (((*(_DWORD *)(a8[1] + 4 * (v35 & ~(v35 >> 31))) + *(_DWORD *)(*a8 + 4 * v34)) * a6 + 128) >> 8)
        + v32;
    v37 = v21;
    if (v36 < v29)
      goto LABEL_25;
  }
  else
  {
    v36 = v32;
    v37 = v21;
    if (v32 < v29)
    {
LABEL_25:
      *a4 = (unsigned __int16)v37 | ((unsigned __int16)((v101 | 4) - 8) << 16);
      *a9 = v32;
      *a10 = v109;
      v29 = v36;
    }
  }
  v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, int *))(a7 + 16))(v100, v108, 4, 0, v107, *(unsigned int *)(v23 + 84), &v109);
  v105 = a5;
  if (a8)
  {
    v39 = (v37 - *a5) >> 1;
    if (v39 >= 2047)
      v39 = 2047;
    v40 = v39 & ~(v39 >> 31);
    if (((__int16)v30 - a5[1]) >> 1 >= 2047)
      v41 = 2047;
    else
      v41 = ((__int16)v30 - a5[1]) >> 1;
    v42 = (((*(_DWORD *)(a8[1] + 4 * (v41 & ~(v41 >> 31))) + *(_DWORD *)(*a8 + 4 * v40)) * a6 + 128) >> 8)
        + v38;
    if (v42 < v29)
      goto LABEL_33;
  }
  else
  {
    v42 = v38;
    if (v38 < v29)
    {
LABEL_33:
      *a4 = (unsigned __int16)v37 | (v30 << 16);
      *a9 = v38;
      *a10 = v109;
      v29 = v42;
    }
  }
  v43 = (v37 | 4) - 8;
  v44 = (*(uint64_t (**)(void))(a7 + 16))();
  v103 = a4;
  if (a8)
  {
    v45 = ((__int16)v43 - *v105) >> 1;
    if (v45 >= 2047)
      v45 = 2047;
    v46 = v45 & ~(v45 >> 31);
    if ((v101 - v105[1]) >> 1 >= 2047)
      v47 = 2047;
    else
      v47 = (v101 - v105[1]) >> 1;
    v48 = (((*(_DWORD *)(a8[1] + 4 * (v47 & ~(v47 >> 31))) + *(_DWORD *)(*a8 + 4 * v46)) * a6 + 128) >> 8)
        + v44;
    if (v48 < v29)
      goto LABEL_41;
  }
  else
  {
    v48 = v44;
    if (v44 < v29)
    {
LABEL_41:
      *v103 = v43 | ((unsigned __int16)v101 << 16);
      *a9 = v44;
      *a10 = v109;
      v29 = v48;
    }
  }
  v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, int *))(a7 + 16))(v100, v108, 0, 4, v107, *(unsigned int *)(v23 + 84), &v109);
  if (a8)
  {
    v50 = ((__int16)(v37 | 4) - *v105) >> 1;
    if (v50 >= 2047)
      v50 = 2047;
    v51 = v50 & ~(v50 >> 31);
    if ((v101 - v105[1]) >> 1 >= 2047)
      v52 = 2047;
    else
      v52 = (v101 - v105[1]) >> 1;
    v53 = (((*(_DWORD *)(a8[1] + 4 * (v52 & ~(v52 >> 31))) + *(_DWORD *)(*a8 + 4 * v51)) * a6 + 128) >> 8)
        + v49;
    if (v53 < v29)
      goto LABEL_49;
  }
  else
  {
    v53 = v49;
    if (v49 < v29)
    {
LABEL_49:
      *v103 = (unsigned __int16)v37 | 4 | ((unsigned __int16)v101 << 16);
      *a9 = v49;
      *a10 = v109;
      v29 = v53;
    }
  }
  v54 = (v36 >= v42) | (2 * (v48 >= v53));
  if (v54 == 2)
  {
    v43 = v37 + 4;
    v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, int *))(a7 + 16))(v97, v108, 4, 4, v107, *(unsigned int *)(v23 + 84), &v109);
  }
  else
  {
    if (v54 == 1)
    {
      v59 = v101 + 4;
      v60 = v100 - v108;
      v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, int *))(a7 + 16))(v100 - v108, v108, 4, 4, v107, *(unsigned int *)(v23 + 84), &v109);
      v56 = v103;
      v57 = v104;
      v58 = v105;
      if (a8)
        goto LABEL_69;
      goto LABEL_65;
    }
    if (v54)
    {
      v59 = v101 + 4;
      v43 = v37 + 4;
      v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, int *))(a7 + 16))(v100, v108, 4, 4, v107, *(unsigned int *)(v23 + 84), &v109);
      v56 = v103;
      v57 = v104;
      v58 = v105;
LABEL_68:
      v60 = v100 - v108;
      if (a8)
      {
LABEL_69:
        v62 = ((__int16)v43 - *v58) >> 1;
        if (v62 >= 2047)
          v62 = 2047;
        v63 = v62 & ~(v62 >> 31);
        if (((__int16)v59 - v58[1]) >> 1 >= 2047)
          v64 = 2047;
        else
          v64 = ((__int16)v59 - v58[1]) >> 1;
        v61 = (((*(_DWORD *)(a8[1] + 4 * (v64 & ~(v64 >> 31))) + *(_DWORD *)(*a8 + 4 * v63)) * v57
              + 128) >> 8)
            + v55;
        if (v61 < v29)
          goto LABEL_75;
        goto LABEL_76;
      }
LABEL_65:
      v61 = v55;
      if (v55 < v29)
      {
LABEL_75:
        *v56 = v43 | (v59 << 16);
        *a9 = v55;
        *a10 = v109;
        v29 = v61;
      }
LABEL_76:
      v65 = *(__int16 *)v56;
      if (v65 >= (__int16)v37)
        v66 = v100;
      else
        v66 = v60;
      v67 = *((__int16 *)v56 + 1);
      v68 = v66 - (v67 < (__int16)v101);
      v102 = v68;
      v98 = *((_WORD *)v56 + 1);
      if ((v67 & 7) != 0)
      {
        v69 = v67 - 2;
        v70 = (*(uint64_t (**)(void))(a7 + 16))();
        if (a8)
          goto LABEL_81;
      }
      else
      {
        v69 = (*((unsigned __int16 *)v56 + 1) | 6) - 8;
        v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, int *))(a7 + 16))(v68 - 1, v108, 6, v65 & 7, v107, *(unsigned int *)(v23 + 84), &v109);
        if (a8)
        {
LABEL_81:
          v71 = (v65 - *v105) >> 1;
          if (v71 >= 2047)
            v71 = 2047;
          v72 = v71 & ~(v71 >> 31);
          if (((__int16)v69 - v105[1]) >> 1 >= 2047)
            v73 = 2047;
          else
            v73 = ((__int16)v69 - v105[1]) >> 1;
          v74 = v102;
          v99 = (unsigned __int16)v65;
          v75 = (((*(_DWORD *)(a8[1] + 4 * (v73 & ~(v73 >> 31))) + *(_DWORD *)(*a8 + 4 * v72)) * v57
                + 128) >> 8)
              + v70;
          if (v75 < v29)
            goto LABEL_87;
          goto LABEL_88;
        }
      }
      v74 = v102;
      v99 = (unsigned __int16)v65;
      v75 = v70;
      if (v70 < v29)
      {
LABEL_87:
        *v103 = v99 | (v69 << 16);
        *a9 = v70;
        *a10 = v109;
        v29 = v75;
      }
LABEL_88:
      v76 = v69 + 4;
      v77 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, int *))(a7 + 16))(v74, v108, (v69 + 4) & 7, v65 & 7, v107, *(unsigned int *)(v23 + 84), &v109);
      if (a8)
      {
        v78 = (v65 - *v105) >> 1;
        if (v78 >= 2047)
          v78 = 2047;
        v79 = v78 & ~(v78 >> 31);
        if (((__int16)v76 - v105[1]) >> 1 >= 2047)
          v80 = 2047;
        else
          v80 = ((__int16)v76 - v105[1]) >> 1;
        v81 = (((*(_DWORD *)(a8[1] + 4 * (v80 & ~(v80 >> 31))) + *(_DWORD *)(*a8 + 4 * v79)) * v57
              + 128) >> 8)
            + v77;
        v82 = v102;
        if (v81 < v29)
          goto LABEL_95;
      }
      else
      {
        v81 = v77;
        v82 = v102;
        if (v77 < v29)
        {
LABEL_95:
          *v103 = v99 | (v76 << 16);
          *a9 = v77;
          *a10 = v109;
          v29 = v81;
        }
      }
      v83 = *(unsigned int *)(v23 + 84);
      if ((v65 & 7) != 0)
      {
        v84 = v65 - 2;
        v85 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, int *))(a7 + 16))(v82, v108, v67 & 7, (v65 - 2) & 7, v107, v83, &v109);
        if (a8)
          goto LABEL_98;
      }
      else
      {
        v84 = (v99 | 6) - 8;
        v85 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, int *))(a7 + 16))(v82 - v108, v108, v67 & 7, 6, v107, v83, &v109);
        if (a8)
        {
LABEL_98:
          v86 = ((__int16)v84 - *v105) >> 1;
          if (v86 >= 2047)
            v86 = 2047;
          v87 = v86 & ~(v86 >> 31);
          if ((v67 - v105[1]) >> 1 >= 2047)
            v88 = 2047;
          else
            v88 = (v67 - v105[1]) >> 1;
          v89 = v102;
          v90 = (((*(_DWORD *)(a8[1] + 4 * (v88 & ~(v88 >> 31))) + *(_DWORD *)(*a8 + 4 * v87)) * v104
                + 128) >> 8)
              + v85;
          if (v90 < v29)
            goto LABEL_104;
          goto LABEL_105;
        }
      }
      v89 = v102;
      v90 = v85;
      if (v85 < v29)
      {
LABEL_104:
        *v103 = v84 | (v98 << 16);
        *a9 = v85;
        *a10 = v109;
        v29 = v90;
      }
LABEL_105:
      v91 = v84 + 4;
      v92 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, int *))(a7 + 16))(v89, v108, v67 & 7, v91 & 7, v107, *(unsigned int *)(v23 + 84), &v109);
      if (a8)
      {
        v93 = ((__int16)v91 - *v105) >> 1;
        if (v93 >= 2047)
          v93 = 2047;
        v94 = v93 & ~(v93 >> 31);
        if ((v67 - v105[1]) >> 1 >= 2047)
          v95 = 2047;
        else
          v95 = (v67 - v105[1]) >> 1;
        v96 = (((*(_DWORD *)(a8[1] + 4 * (v95 & ~(v95 >> 31))) + *(_DWORD *)(*a8 + 4 * v94)) * v104
              + 128) >> 8)
            + v92;
        if (v96 < v29)
          goto LABEL_112;
      }
      else
      {
        v96 = v92;
        if (v92 < v29)
        {
LABEL_112:
          *v103 = v91 | (v98 << 16);
          *a9 = v92;
          *a10 = v109;
        }
      }
      __asm { BR              X10 }
    }
    v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, int *))(a7 + 16))(v97 - v108, v108, 4, 4, v107, *(unsigned int *)(v23 + 84), &v109);
  }
  v56 = v103;
  v57 = a6;
  v58 = v105;
  v59 = (v101 | 4) - 8;
  goto LABEL_68;
}

uint64_t sub_208B391F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, int a12, int a13, __int16 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 *a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v24;
  uint64_t v25;
  _QWORD *v26;
  int *v27;
  int v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  unsigned __int16 v35;
  int v36;
  __int16 *v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  _DWORD *v43;
  _DWORD *v44;

  v33 = a11 + 2;
  v34 = *(unsigned int *)(v31 + 84);
  if (v24)
  {
    v35 = a14 - 2;
    v36 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(a23 + 16))(a16, *(_QWORD *)(v32 - 96), v33 & 7, (a14 - 2) & 7, a24, v34, v32 - 84);
    v37 = a21;
    if (v26)
      goto LABEL_3;
LABEL_12:
    JUMPOUT(0x208B39404);
  }
  v35 = (v30 | 6) - 8;
  v36 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(a23 + 16))(a16 + a10, *(_QWORD *)(v32 - 96), v33 & 7, 6, a24, v34, v32 - 84);
  v37 = a21;
  if (!v26)
    goto LABEL_12;
LABEL_3:
  v38 = ((__int16)v35 - *v37) >> 1;
  if (v38 >= 2047)
    v38 = 2047;
  v39 = v38 & ~(v38 >> 31);
  if (((__int16)v33 - v37[1]) >> 1 >= 2047)
    v40 = 2047;
  else
    v40 = ((__int16)v33 - v37[1]) >> 1;
  v41 = (((v29
                       + (*(_DWORD *)(v26[1] + 4 * (v40 & ~(v40 >> 31))) + *(_DWORD *)(*v26 + 4 * v39))
                       * v28) >> 8)
                     + v36);
  if ((int)v41 < (int)v25)
  {
    *v27 = v35 | (v33 << 16);
    *v43 = v36;
    *v44 = *(_DWORD *)(v32 - 84);
    return v41;
  }
  return v25;
}

uint64_t vp8_find_best_half_pixel_step(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, __int16 *a5, int a6, uint64_t a7, _QWORD *a8, int *a9, _DWORD *a10)
{
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  __int16 *v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int16 v31;
  __int16 v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned __int16 v58;
  unsigned __int16 v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int *v65;
  uint64_t v66;
  uint64_t v68;
  int v69;
  int *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v75;
  int v76;

  v15 = **(_QWORD **)(a2 + 72) + *(int *)(a2 + 80);
  v76 = 0;
  v16 = *(_DWORD *)(a1 + 7792);
  v17 = v16;
  v18 = *(__int16 *)a4;
  v19 = *((__int16 *)a4 + 1);
  v20 = *(_QWORD *)(a1 + 7832) + *(int *)(a3 + 32) + v16 * v18 + *((__int16 *)a4 + 1);
  v21 = 8 * v18;
  if (8 * v18 >= 0x7FFF)
    v21 = 0x7FFF;
  if (v21 <= -32768)
    v21 = -32768;
  v72 = v21;
  *(_WORD *)a4 = v21;
  v22 = 8 * v19;
  if (8 * v19 >= 0x7FFF)
    v22 = 0x7FFF;
  if (v22 <= -32768)
    v22 = -32768;
  v71 = v22;
  *((_WORD *)a4 + 1) = v22;
  v73 = v20;
  v75 = v15;
  v23 = (*(uint64_t (**)(void))(a7 + 8))();
  *a9 = v23;
  v24 = a5;
  if (a8)
  {
    v25 = (*(__int16 *)a4 - *a5) >> 1;
    if (v25 >= 2047)
      v25 = 2047;
    v26 = v25 & ~(v25 >> 31);
    if ((*((__int16 *)a4 + 1) - a5[1]) >> 1 >= 2047)
      v27 = 2047;
    else
      v27 = (*((__int16 *)a4 + 1) - a5[1]) >> 1;
    v28 = a6;
    v29 = ((*(_DWORD *)(a8[1] + 4 * (v27 & ~(v27 >> 31))) + *(_DWORD *)(*a8 + 4 * v26)) * a6 + 128) >> 8;
  }
  else
  {
    v28 = a6;
    v29 = 0;
  }
  v30 = (v29 + v23);
  v31 = v71 | 4;
  v68 = v73 - 1;
  v33 = (*(uint64_t (**)(void))(a7 + 16))();
  if (a8)
  {
    v34 = (v72 - *v24) >> 1;
    if (v34 >= 2047)
      v34 = 2047;
    v35 = v34 & ~(v34 >> 31);
    v32 = (v71 | 4) - 8;
    if ((v32 - v24[1]) >> 1 >= 2047)
      v36 = 2047;
    else
      v36 = (v32 - v24[1]) >> 1;
    v37 = v28;
    v38 = ((((*(_DWORD *)(a8[1] + 4 * (v36 & ~(v36 >> 31))) + *(_DWORD *)(*a8 + 4 * v35))
                         * v28
                         + 128) >> 8)
                       + v33);
    v39 = v17;
    if ((int)v38 < (int)v30)
      goto LABEL_24;
  }
  else
  {
    v37 = v28;
    v38 = v33;
    v39 = v17;
    if (v33 < (int)v30)
    {
LABEL_24:
      *a4 = (unsigned __int16)v72 | ((unsigned __int16)((v71 | 4) - 8) << 16);
      *a9 = v33;
      *a10 = v76;
      v30 = v38;
    }
  }
  v69 = v38;
  v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, int *))(a7 + 16))(v73, v39, 4, 0, v75, *(unsigned int *)(a2 + 84), &v76);
  if (a8)
  {
    v41 = (v72 - *v24) >> 1;
    if (v41 >= 2047)
      v41 = 2047;
    v42 = v41 & ~(v41 >> 31);
    if (((__int16)v31 - v24[1]) >> 1 >= 2047)
      v43 = 2047;
    else
      v43 = ((__int16)v31 - v24[1]) >> 1;
    v44 = ((((*(_DWORD *)(a8[1] + 4 * (v43 & ~(v43 >> 31))) + *(_DWORD *)(*a8 + 4 * v42))
                         * v37
                         + 128) >> 8)
                       + v40);
    if ((int)v44 < (int)v30)
      goto LABEL_32;
  }
  else
  {
    v44 = v40;
    if (v40 < (int)v30)
    {
LABEL_32:
      *a4 = (unsigned __int16)v72 | (v31 << 16);
      *a9 = v40;
      *a10 = v76;
      v30 = v44;
    }
  }
  v70 = a4;
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, int *))(a7 + 16))(v73 - v39, v39, 0, 4, v75, *(unsigned int *)(a2 + 84), &v76);
  if (a8)
  {
    v46 = ((__int16)((v72 | 4) - 8) - *v24) >> 1;
    if (v46 >= 2047)
      v46 = 2047;
    v47 = v46 & ~(v46 >> 31);
    if ((v71 - v24[1]) >> 1 >= 2047)
      v48 = 2047;
    else
      v48 = (v71 - v24[1]) >> 1;
    v49 = v37;
    v50 = ((((*(_DWORD *)(a8[1] + 4 * (v48 & ~(v48 >> 31))) + *(_DWORD *)(*a8 + 4 * v47))
                         * v37
                         + 128) >> 8)
                       + v45);
    if ((int)v50 < (int)v30)
      goto LABEL_40;
  }
  else
  {
    v49 = v37;
    v50 = v45;
    if (v45 < (int)v30)
    {
LABEL_40:
      *v70 = (unsigned __int16)((v72 | 4) - 8) | ((unsigned __int16)v71 << 16);
      *a9 = v45;
      *a10 = v76;
      v30 = v50;
    }
  }
  v51 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, int *))(a7 + 16))(v73, v39, 0, 4, v75, *(unsigned int *)(a2 + 84), &v76);
  if (a8)
  {
    v52 = ((__int16)(v72 | 4) - *v24) >> 1;
    if (v52 >= 2047)
      v52 = 2047;
    v53 = v52 & ~(v52 >> 31);
    if ((v71 - v24[1]) >> 1 >= 2047)
      v54 = 2047;
    else
      v54 = (v71 - v24[1]) >> 1;
    v55 = v69;
    v56 = ((((*(_DWORD *)(a8[1] + 4 * (v54 & ~(v54 >> 31))) + *(_DWORD *)(*a8 + 4 * v53))
                         * v49
                         + 128) >> 8)
                       + v51);
    if ((int)v56 < (int)v30)
      goto LABEL_48;
  }
  else
  {
    v55 = v69;
    v56 = v51;
    if (v51 < (int)v30)
    {
LABEL_48:
      *v70 = (unsigned __int16)v72 | 4 | ((unsigned __int16)v71 << 16);
      *a9 = v51;
      *a10 = v76;
      v30 = v56;
    }
  }
  v57 = (v55 >= (int)v44) | (2 * ((int)v50 >= (int)v56));
  if (v57 == 2)
  {
    v59 = v72 + 4;
    v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, int *))(a7 + 16))(v68, v39, 4, 4, v75, *(unsigned int *)(a2 + 84), &v76);
    v58 = (v71 | 4) - 8;
    if (!a8)
    {
LABEL_74:
      v65 = v70;
      v66 = v60;
      if (v60 >= (int)v30)
        return v30;
      goto LABEL_71;
    }
  }
  else
  {
    v58 = (v71 | 4) - 8;
    if (v57 == 1)
    {
      v58 = v71 + 4;
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, int *))(a7 + 16))(v73 - v39, v39, 4, 4, v75, *(unsigned int *)(a2 + 84), &v76);
      v59 = (v72 | 4) - 8;
      if (!a8)
        goto LABEL_74;
    }
    else
    {
      v59 = (v72 | 4) - 8;
      if (v57)
      {
        v58 = v71 + 4;
        v59 = v72 + 4;
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, int *))(a7 + 16))(v73, v39, 4, 4, v75, *(unsigned int *)(a2 + 84), &v76);
        if (!a8)
          goto LABEL_74;
      }
      else
      {
        v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, int *))(a7 + 16))(v68 - v39, v39, 4, 4, v75, *(unsigned int *)(a2 + 84), &v76);
        if (!a8)
          goto LABEL_74;
      }
    }
  }
  v61 = ((__int16)v59 - *v24) >> 1;
  if (v61 >= 2047)
    v61 = 2047;
  v62 = v61 & ~(v61 >> 31);
  if (((__int16)v58 - v24[1]) >> 1 >= 2047)
    v63 = 2047;
  else
    v63 = ((__int16)v58 - v24[1]) >> 1;
  v64 = ((*(_DWORD *)(a8[1] + 4 * (v63 & ~(v63 >> 31))) + *(_DWORD *)(*a8 + 4 * v62)) * v49 + 128) >> 8;
  v65 = v70;
  v66 = (v64 + v60);
  if ((int)v66 < (int)v30)
  {
LABEL_71:
    *v65 = v59 | (v58 << 16);
    *a9 = v60;
    *a10 = v76;
    return v66;
  }
  return v30;
}

uint64_t vp8_hex_search(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, _WORD *a5, int a6, int a7, uint64_t (**a8)(void), _QWORD *a9, __int16 *a10)
{
  uint64_t (**v10)(uint64_t, _QWORD, uint64_t);
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  BOOL v42;
  unsigned int v43;
  __int16 v44;
  __int16 v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  __int16 v59;
  __int16 v60;
  unsigned int v61;
  BOOL v62;
  __int16 v63;
  uint64_t v64;
  int v65;
  __int16 v66;
  unsigned int v67;
  BOOL v68;
  int v69;
  int v70;
  __int16 v71;
  unsigned int v72;
  BOOL v73;
  int v74;
  uint64_t v75;
  __int16 v76;
  unsigned int v77;
  BOOL v78;
  unsigned int v79;
  BOOL v80;
  uint64_t v81;
  unsigned int v82;
  __int16 v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  __int16 v92;
  unsigned int v93;
  BOOL v94;
  unsigned int v95;
  int v96;
  int v97;
  unsigned int v98;
  BOOL v99;
  unsigned int v100;
  unsigned int v101;
  BOOL v102;
  BOOL v103;
  __int16 v104;
  __int16 v105;
  unsigned int v106;
  unsigned int v107;
  BOOL v108;
  __int16 v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  BOOL v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  __int16 v118;
  unsigned int v119;
  unsigned int v120;
  BOOL v121;
  __int16 *v122;
  int v123;
  int v124;
  int v125;
  uint64_t (**v126)(uint64_t, _QWORD, uint64_t);
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  unsigned int v133;
  _WORD *v134;
  __int16 v135;
  __int16 v136;
  BOOL v139;
  BOOL v140;
  BOOL v141;
  unsigned int v142;
  char *v143;
  int v144;
  __int16 v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  int v152;
  __int16 v153;
  uint64_t v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  BOOL v158;
  char *v159;
  __int16 v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  __int16 v165;
  unsigned int v166;
  char *v167;
  __int16 v168;
  __int16 v169;
  __int16 v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  char *v178;
  int v179;
  int v180;
  __int16 *v181;
  int v182;
  int v183;
  __int16 *v184;
  int v185;
  int v186;
  int v187;
  int v188;
  __int16 v189;
  unsigned int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  int v202;
  uint64_t v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  unsigned int v221;
  BOOL v222;
  unsigned int v223;
  BOOL v224;
  int v225;
  unsigned int v226;
  int v227;
  unsigned int v228;
  unsigned int v229;
  BOOL v230;
  int v231;
  BOOL v232;
  int v234;
  __int16 v235;
  unsigned int v236;
  unsigned int v237;
  BOOL v238;
  __int16 v239;
  __int16 v240;
  int v241;
  __int16 v242;
  __int16 v243;
  __int16 v244;
  __int16 v245;
  uint64_t v247;
  uint64_t (**v248)(uint64_t, _QWORD, uint64_t);
  uint64_t v249;
  uint64_t v250;
  int v251;
  int v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;

  v10 = (uint64_t (**)(uint64_t, _QWORD, uint64_t))a8;
  v14 = **(_QWORD **)(a2 + 72);
  v16 = *(_DWORD *)(a2 + 80);
  v15 = *(_DWORD *)(a2 + 84);
  v17 = v14 + v16;
  v255 = *(int *)(a1 + 7792);
  v18 = *(_QWORD *)(a1 + 7832);
  LODWORD(v19) = *a10 >> 3;
  v20 = a10[1] >> 3;
  v21 = *(_DWORD *)(a1 + 8752);
  v22 = *(_DWORD *)(a1 + 8760);
  v23 = *(_DWORD *)(a1 + 8764);
  if (v21 <= a4[1])
    LOWORD(v21) = a4[1];
  if (*(_DWORD *)(a1 + 8756) < (__int16)v21)
    LOWORD(v21) = *(_DWORD *)(a1 + 8756);
  a4[1] = v21;
  v24 = *a4;
  if (v22 > v24)
    LOWORD(v24) = v22;
  if (v23 < (__int16)v24)
    LOWORD(v24) = v23;
  *a4 = v24;
  v25 = (__int16)v24;
  v26 = (__int16)v21;
  v254 = v18 + *(int *)(a3 + 32);
  v27 = (__int16)v21;
  v256 = v17;
  v257 = v15;
  v28 = (*a8)();
  v247 = v27;
  if (!a9)
  {
    v29 = v25;
    v30 = v28;
    v253 = a7;
    if (a6 >= 6)
      goto LABEL_11;
LABEL_13:
    if (a6 == 5)
    {
      v31 = 4;
    }
    else if (a6 <= 3)
    {
      if (a6 == 3)
      {
        v31 = 15;
      }
      else if (a6 <= 1)
      {
        if (a6 == 1)
          v31 = 63;
        else
          v31 = 127;
      }
      else
      {
        v31 = 31;
      }
    }
    else
    {
      v31 = 6;
    }
    v32 = *(_DWORD *)(a1 + 8760);
    v33 = *(_DWORD *)(a1 + 8764);
    v34 = *(_DWORD *)(a1 + 8752);
    v250 = (int)v19;
    v35 = *(_DWORD *)(a1 + 8756);
    v249 = v20;
    v36 = v29 - 1;
    LOWORD(v19) = v247 - 2;
    v244 = v29 - 2;
    v251 = v29;
    if (v29 - 2 < v32 || v29 + 2 > v33 || v26 - 2 < v34 || v26 + 2 > v35)
    {
      v42 = v34 > (__int16)v19 || v35 < (__int16)v19;
      if (!a9)
      {
        if (v42)
        {
          v43 = -1;
        }
        else
        {
          v43 = -1;
          if (v32 <= v36 && v33 >= v36)
          {
            v60 = v29 - 1;
            v61 = (*v10)(v256, v257, v254 + (int)v255 * (uint64_t)(__int16)(v29 - 1) + (__int16)v19);
            v36 = v60;
            v29 = v251;
            v62 = v61 >= v30;
            if (v61 >= v30)
              v30 = v30;
            else
              v30 = v61;
            if (v62)
              v43 = -1;
            else
              v43 = 0;
          }
        }
        v63 = v29 + 1;
        if (*(_DWORD *)(a1 + 8752) <= (__int16)v19
          && *(_DWORD *)(a1 + 8756) >= (__int16)v19
          && *(_DWORD *)(a1 + 8760) <= v63
          && *(_DWORD *)(a1 + 8764) >= v63)
        {
          v64 = v254 + (int)v255 * (uint64_t)v63 + (__int16)v19;
          v65 = v31;
          v66 = v36;
          v67 = (*v10)(v256, v257, v64);
          v36 = v66;
          v31 = v65;
          v29 = v251;
          v68 = v67 >= v30;
          v30 = v67 >= v30 ? v30 : v67;
          if (!v68)
            v43 = 1;
        }
        if (*(_DWORD *)(a1 + 8752) <= v26 && *(_DWORD *)(a1 + 8756) >= v26)
        {
          v69 = (__int16)(v29 + 2);
          if (*(_DWORD *)(a1 + 8760) <= v69 && *(_DWORD *)(a1 + 8764) >= v69)
          {
            v70 = v31;
            v71 = v36;
            v72 = (*v10)(v256, v257, v254 + (int)v255 * v69 + v247);
            v36 = v71;
            v31 = v70;
            v29 = v251;
            v73 = v72 >= v30;
            v30 = v72 >= v30 ? v30 : v72;
            if (!v73)
              v43 = 2;
          }
        }
        v74 = (__int16)(v26 + 2);
        if (*(_DWORD *)(a1 + 8752) <= v74
          && *(_DWORD *)(a1 + 8756) >= v74
          && *(_DWORD *)(a1 + 8760) <= v63
          && *(_DWORD *)(a1 + 8764) >= v63)
        {
          v75 = v254 + (int)v255 * (uint64_t)v63 + (__int16)(v26 + 2);
          v76 = v36;
          v77 = (*v10)(v256, v257, v75);
          v36 = v76;
          v29 = v251;
          v78 = v77 >= v30;
          v30 = v77 >= v30 ? v30 : v77;
          if (!v78)
            v43 = 3;
        }
        if (*(_DWORD *)(a1 + 8752) <= v74
          && *(_DWORD *)(a1 + 8756) >= v74
          && *(_DWORD *)(a1 + 8760) <= v36
          && *(_DWORD *)(a1 + 8764) >= v36)
        {
          v79 = (*v10)(v256, v257, v254 + (int)v255 * (uint64_t)v36 + (__int16)(v26 + 2));
          v29 = v251;
          v80 = v79 >= v30;
          v30 = v79 >= v30 ? v30 : v79;
          if (!v80)
            v43 = 4;
        }
        if (*(_DWORD *)(a1 + 8752) <= v26
          && *(_DWORD *)(a1 + 8756) >= v26
          && *(_DWORD *)(a1 + 8760) <= v244
          && *(_DWORD *)(a1 + 8764) >= v244)
        {
          v81 = (*v10)(v256, v257, v254 + (int)v255 * v244 + v247);
          v29 = v251;
          if (v81 < v30)
          {
            v43 = 5;
            v30 = v81;
LABEL_214:
            v122 = (__int16 *)((char *)&unk_208F3D664 + 4 * v43);
            v29 += *v122;
            v26 += v122[1];
            v123 = v31 - 1;
            v248 = v10;
            while (1)
            {
              v126 = v10;
              v127 = a7;
              v128 = v30;
              v129 = *(_DWORD *)(a1 + 8760);
              v130 = *(_DWORD *)(a1 + 8764);
              v131 = *(_DWORD *)(a1 + 8752);
              v132 = *(_DWORD *)(a1 + 8756);
              v133 = v43;
              v134 = (_WORD *)((char *)&next_chkpts + 12 * (int)v43);
              v135 = *v134 + v29;
              v136 = v134[1] + v26;
              v139 = v29 - 2 >= v129 && v29 + 2 <= v130 && v26 - 2 >= v131 && v26 + 2 <= v132;
              v252 = v29;
              if (v139)
              {
                v150 = v136;
                v151 = (*v126)(v256, v257, v254 + (int)v255 * (uint64_t)v135 + v136);
                if (v151 >= v128)
                {
                  v142 = -1;
                  v153 = v252;
                }
                else
                {
                  if (a9)
                    v152 = ((*(_DWORD *)(a9[1] + 4 * (v150 - v249)) + *(_DWORD *)(*a9 + 4 * (v135 - v250))) * v127 + 128) >> 8;
                  else
                    v152 = 0;
                  v153 = v252;
                  v157 = v152 + v151;
                  v158 = v157 >= v128;
                  if (v157 >= v128)
                    v128 = v128;
                  else
                    v128 = v157;
                  if (v158)
                    v142 = -1;
                  else
                    v142 = 0;
                }
                v159 = (char *)&next_chkpts + 12 * (int)v133;
                v160 = *((_WORD *)v159 + 2) + v153;
                v161 = (__int16)(*((_WORD *)v159 + 3) + v26);
                v162 = (*v126)(v256, v257, v254 + (int)v255 * v160 + v161);
                v163 = v128;
                if (v162 >= v128)
                {
                  v165 = v252;
                }
                else
                {
                  if (a9)
                    v164 = ((*(_DWORD *)(a9[1] + 4 * (v161 - v249)) + *(_DWORD *)(*a9 + 4 * (v160 - v250))) * v127 + 128) >> 8;
                  else
                    v164 = 0;
                  v165 = v252;
                  v166 = v164 + v162;
                  if (v166 >= v128)
                    v163 = v128;
                  else
                    v163 = v166;
                  if (v166 < v128)
                    v142 = 1;
                }
                v167 = (char *)&next_chkpts + 12 * (int)v133;
                v168 = *((_WORD *)v167 + 4);
                v169 = v168 + v165;
                v170 = *((_WORD *)v167 + 5);
                v171 = (__int16)(v170 + v26);
                v172 = (*v248)(v256, v257, v254 + (int)v255 * (__int16)(v168 + v165) + v171);
                v173 = v163;
                if (v172 >= v163)
                {
                  v10 = v248;
LABEL_276:
                  a7 = v253;
                  v30 = v173;
                  v29 = v252;
                  if (v142 == -1)
                    goto LABEL_316;
                  goto LABEL_308;
                }
                if (a9)
                  v174 = ((*(_DWORD *)(a9[1] + 4 * (v171 - v249)) + *(_DWORD *)(*a9 + 4 * (v169 - v250))) * v253 + 128) >> 8;
                else
                  v174 = 0;
                v10 = v248;
              }
              else
              {
                v140 = v131 > v136 || v132 < v136;
                if (v140 || (v129 <= v135 ? (v141 = v130 < v135) : (v141 = 1), v141))
                {
                  v142 = -1;
                  a7 = v127;
                  v10 = v126;
                }
                else
                {
                  v154 = v136;
                  v155 = (*v126)(v256, v257, v254 + (int)v255 * (uint64_t)v135 + v136);
                  if (v155 >= v128)
                  {
                    v142 = -1;
                    v30 = v128;
                    a7 = v127;
                    v10 = v126;
                    v29 = v252;
                  }
                  else
                  {
                    if (a9)
                      v156 = ((*(_DWORD *)(a9[1] + 4 * (v154 - v249)) + *(_DWORD *)(*a9 + 4 * (v135 - v250))) * v127
                            + 128) >> 8;
                    else
                      v156 = 0;
                    v29 = v252;
                    v176 = v156 + v155;
                    if (v176 >= v128)
                      v30 = v128;
                    else
                      v30 = v176;
                    if (v176 < v128)
                      v142 = 0;
                    else
                      v142 = -1;
                    a7 = v127;
                    v10 = v126;
                  }
                }
                v143 = (char *)&next_chkpts + 12 * (int)v133;
                v144 = (__int16)(*((_WORD *)v143 + 3) + v26);
                if (*(_DWORD *)(a1 + 8752) <= v144 && *(_DWORD *)(a1 + 8756) >= v144)
                {
                  v145 = *((_WORD *)v143 + 2) + v29;
                  if (*(_DWORD *)(a1 + 8760) <= v145 && *(_DWORD *)(a1 + 8764) >= v145)
                  {
                    v146 = v30;
                    v147 = (__int16)(*((_WORD *)v143 + 3) + v26);
                    v148 = (*v10)(v256, v257, v254 + (int)v255 * v145 + v147);
                    if (v148 >= v146)
                    {
                      v30 = v146;
                      v29 = v252;
                    }
                    else
                    {
                      if (a9)
                        v149 = ((*(_DWORD *)(a9[1] + 4 * (v147 - v249)) + *(_DWORD *)(*a9 + 4 * (v145 - v250))) * a7
                              + 128) >> 8;
                      else
                        v149 = 0;
                      v29 = v252;
                      v177 = v149 + v148;
                      if (v177 >= v146)
                        v30 = v146;
                      else
                        v30 = v177;
                      if (v177 < v146)
                        v142 = 1;
                    }
                  }
                }
                v178 = (char *)&next_chkpts + 12 * (int)v133;
                v170 = *((_WORD *)v178 + 5);
                v179 = (__int16)(v170 + v26);
                if (*(_DWORD *)(a1 + 8752) > v179 || *(_DWORD *)(a1 + 8756) < v179)
                  goto LABEL_307;
                v168 = *((_WORD *)v178 + 4);
                v180 = (__int16)(v168 + v29);
                if (*(_DWORD *)(a1 + 8760) > v180)
                {
                  a7 = v253;
LABEL_307:
                  if (v142 == -1)
                    goto LABEL_316;
LABEL_308:
                  v181 = (__int16 *)((char *)&next_chkpts + 12 * v133 + 4 * v142);
                  v168 = *v181;
                  v170 = v181[1];
                  goto LABEL_215;
                }
                if (*(_DWORD *)(a1 + 8764) < v180)
                {
                  a7 = v253;
                  if (v142 == -1)
                    goto LABEL_316;
                  goto LABEL_308;
                }
                v245 = v168 + v29;
                v172 = (*v10)(v256, v257, v254 + (int)v255 * v180 + (__int16)(v170 + v26));
                v173 = v30;
                if (v172 >= v30)
                  goto LABEL_276;
                if (a9)
                  v174 = ((*(_DWORD *)(a9[1] + 4 * ((__int16)(v170 + v26) - v249)) + *(_DWORD *)(*a9 + 4 * (v245 - v250)))
                        * v253
                        + 128) >> 8;
                else
                  v174 = 0;
              }
              v29 = v252;
              v175 = v174 + v172;
              if (v175 >= v173)
                v30 = v173;
              else
                v30 = v175;
              if (v175 >= v173)
              {
                a7 = v253;
                if (v142 == -1)
                  goto LABEL_316;
                goto LABEL_308;
              }
              v142 = 2;
LABEL_215:
              v29 += v168;
              v26 += v170;
              v124 = v133 + v142 + 5;
              v125 = v133 + v142 - 1;
              if (v124 <= 5)
                v125 = v133 + v142 + 5;
              if (v124 <= 11)
                v43 = v125;
              else
                v43 = v133 + v142 - 7;
              --v123;
              a7 = v253;
              if (!v123)
                goto LABEL_316;
            }
          }
        }
        goto LABEL_213;
      }
      if (v42)
      {
        v43 = -1;
      }
      else
      {
        v43 = -1;
        if (v32 <= v36 && v33 >= v36)
        {
          v241 = v31;
          v45 = v29 - 1;
          v46 = (*v10)(v256, v257, v254 + (int)v255 * (uint64_t)(__int16)(v29 - 1) + (__int16)v19);
          if (v46 >= v30)
          {
            v43 = -1;
          }
          else
          {
            v47 = v46
                + (((*(_DWORD *)(a9[1] + 4 * ((__int16)v19 - (uint64_t)v20)) + *(_DWORD *)(*a9 + 4 * (v45 - v250))) * a7
                  + 128) >> 8);
            v48 = v47 >= v30;
            if (v47 >= v30)
              v30 = v30;
            else
              v30 = v47;
            if (v48)
              v43 = -1;
            else
              v43 = 0;
          }
          v29 = v251;
          v36 = v45;
          v31 = v241;
        }
      }
      v104 = v29 + 1;
      if (*(_DWORD *)(a1 + 8752) <= (__int16)v19
        && *(_DWORD *)(a1 + 8756) >= (__int16)v19
        && *(_DWORD *)(a1 + 8760) <= v104
        && *(_DWORD *)(a1 + 8764) >= v104)
      {
        v105 = v36;
        v19 = (__int16)v19;
        v106 = (*v10)(v256, v257, v254 + (int)v255 * (uint64_t)v104 + (__int16)v19);
        if (v106 < v30)
        {
          v107 = v106
               + (((*(_DWORD *)(a9[1] + 4 * (v19 - v249)) + *(_DWORD *)(*a9 + 4 * (v104 - v250))) * a7 + 128) >> 8);
          v108 = v107 >= v30;
          v30 = v107 >= v30 ? v30 : v107;
          if (!v108)
            v43 = 1;
        }
        v29 = v251;
        v36 = v105;
      }
      if (*(_DWORD *)(a1 + 8752) <= v26 && *(_DWORD *)(a1 + 8756) >= v26)
      {
        v109 = v29 + 2;
        v110 = (__int16)(v29 + 2);
        if (*(_DWORD *)(a1 + 8760) <= v110 && *(_DWORD *)(a1 + 8764) >= v110)
        {
          v242 = v36;
          v111 = (*v10)(v256, v257, v254 + (int)v255 * v110 + v247);
          if (v111 < v30)
          {
            v112 = v111
                 + (((*(_DWORD *)(a9[1] + 4 * (v247 - v249)) + *(_DWORD *)(*a9 + 4 * (v109 - v250))) * a7 + 128) >> 8);
            v113 = v112 >= v30;
            v30 = v112 >= v30 ? v30 : v112;
            if (!v113)
              v43 = 2;
          }
          v29 = v251;
          v36 = v242;
        }
      }
      v114 = (__int16)(v247 + 2);
      if (*(_DWORD *)(a1 + 8752) <= v114
        && *(_DWORD *)(a1 + 8756) >= v114
        && *(_DWORD *)(a1 + 8760) <= v104
        && *(_DWORD *)(a1 + 8764) >= v104)
      {
        v243 = v36;
        v115 = (*v10)(v256, v257, v254 + (int)v255 * (uint64_t)v104 + (__int16)(v247 + 2));
        if (v115 < v30)
        {
          v116 = v115
               + (((*(_DWORD *)(a9[1] + 4 * ((__int16)(v247 + 2) - v249)) + *(_DWORD *)(*a9 + 4 * (v104 - v250))) * a7
                 + 128) >> 8);
          v117 = v116 >= v30;
          v30 = v116 >= v30 ? v30 : v116;
          if (!v117)
            v43 = 3;
        }
        v29 = v251;
        v36 = v243;
      }
      if (*(_DWORD *)(a1 + 8752) <= v114
        && *(_DWORD *)(a1 + 8756) >= v114
        && *(_DWORD *)(a1 + 8760) <= v36
        && *(_DWORD *)(a1 + 8764) >= v36)
      {
        v234 = v31;
        v235 = v36;
        v236 = (*v10)(v256, v257, v254 + (int)v255 * (uint64_t)v36 + (__int16)(v247 + 2));
        if (v236 < v30)
        {
          v237 = v236
               + (((*(_DWORD *)(a9[1] + 4 * ((__int16)(v247 + 2) - v249)) + *(_DWORD *)(*a9 + 4 * (v235 - v250))) * a7
                 + 128) >> 8);
          v238 = v237 >= v30;
          v30 = v237 >= v30 ? v30 : v237;
          if (!v238)
            v43 = 4;
        }
        v29 = v251;
        v118 = v244;
        v31 = v234;
        if (*(_DWORD *)(a1 + 8752) > v26)
          goto LABEL_213;
      }
      else
      {
        v118 = v244;
        if (*(_DWORD *)(a1 + 8752) > v26)
          goto LABEL_213;
      }
      if (*(_DWORD *)(a1 + 8756) < v26 || *(_DWORD *)(a1 + 8760) > v118 || *(_DWORD *)(a1 + 8764) < v118)
        goto LABEL_213;
      v119 = (*v10)(v256, v257, v254 + (int)v255 * v118 + v247);
      if (v119 < v30)
      {
        v120 = v119
             + (((*(_DWORD *)(a9[1] + 4 * (v247 - v249)) + *(_DWORD *)(*a9 + 4 * (v118 - v250))) * a7 + 128) >> 8);
        v121 = v120 >= v30;
        if (v120 >= v30)
          v30 = v30;
        else
          v30 = v120;
        v29 = v251;
        if (!v121)
          goto LABEL_161;
        goto LABEL_213;
      }
    }
    else
    {
      v240 = v29 - 1;
      v37 = v254 + (int)v255 * (uint64_t)(__int16)(v29 - 1);
      v38 = (__int16)v19;
      v39 = (*v10)(v256, v257, v37 + (__int16)v19);
      if (v39 >= v30)
      {
        v43 = -1;
        v44 = v251;
      }
      else
      {
        if (a9)
          v40 = ((*(_DWORD *)(a9[1] + 4 * ((__int16)v19 - v249)) + *(_DWORD *)(*a9 + 4 * (v240 - v250))) * v253 + 128) >> 8;
        else
          v40 = 0;
        v44 = v251;
        v49 = v40 + v39;
        v50 = v49 >= v30;
        if (v49 >= v30)
          v30 = v30;
        else
          v30 = v49;
        if (v50)
          v43 = -1;
        else
          v43 = 0;
      }
      v239 = v44 + 1;
      v51 = v254 + (int)v255 * (__int16)(v44 + 1);
      v52 = (*v10)(v256, v257, v51 + (__int16)v19);
      if (v52 >= v30)
      {
        v53 = v37;
        v54 = v31;
        v56 = v253;
        v58 = v30;
        v59 = v251;
      }
      else
      {
        v53 = v37;
        v54 = v31;
        if (a9)
        {
          v55 = *(_DWORD *)(a9[1] + 4 * (v38 - v249)) + *(_DWORD *)(*a9 + 4 * (v239 - v250));
          v56 = v253;
          v57 = (v55 * v253 + 128) >> 8;
        }
        else
        {
          v57 = 0;
          v56 = v253;
        }
        v59 = v251;
        v82 = v57 + v52;
        if (v82 >= v30)
          v58 = v30;
        else
          v58 = v82;
        if (v82 < v30)
          v43 = 1;
      }
      v83 = v59 + 2;
      v84 = (*v10)(v256, v257, v254 + (int)v255 * (__int16)(v59 + 2) + v247);
      v85 = v58;
      if (v84 >= v58)
      {
        v30 = v58;
        v31 = v54;
        v87 = v53;
      }
      else
      {
        if (a9)
          v86 = ((*(_DWORD *)(a9[1] + 4 * (v247 - v249)) + *(_DWORD *)(*a9 + 4 * (v83 - v250))) * v56 + 128) >> 8;
        else
          v86 = 0;
        v31 = v54;
        v87 = v53;
        v88 = v86 + v84;
        if (v88 >= v85)
          v30 = v85;
        else
          v30 = v88;
        if (v88 < v85)
          v43 = 2;
      }
      v89 = (__int16)(v26 + 2);
      v90 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))*v10)(v256, v257, v51 + v89, v255);
      if (v90 >= v30)
      {
        v92 = v244;
      }
      else
      {
        if (a9)
          v91 = ((*(_DWORD *)(a9[1] + 4 * (v89 - v249)) + *(_DWORD *)(*a9 + 4 * (v239 - v250))) * v253 + 128) >> 8;
        else
          v91 = 0;
        v92 = v244;
        v93 = v91 + v90;
        v94 = v93 >= v30;
        if (v93 >= v30)
          v30 = v30;
        else
          v30 = v93;
        if (!v94)
          v43 = 3;
      }
      v95 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))*v10)(v256, v257, v87 + v89, v255);
      if (v95 >= v30)
      {
        a7 = v253;
      }
      else
      {
        if (a9)
        {
          v96 = *(_DWORD *)(a9[1] + 4 * (v89 - v249)) + *(_DWORD *)(*a9 + 4 * (v240 - v250));
          a7 = v253;
          v97 = (v96 * v253 + 128) >> 8;
        }
        else
        {
          v97 = 0;
          a7 = v253;
        }
        v98 = v97 + v95;
        v99 = v98 >= v30;
        if (v98 >= v30)
          v30 = v30;
        else
          v30 = v98;
        if (!v99)
          v43 = 4;
      }
      v100 = (*v10)(v256, v257, v254 + (int)v255 * v92 + v247);
      if (v100 < v30)
      {
        if (a9)
        {
          v29 = v251;
          v101 = (((*(_DWORD *)(a9[1] + 4 * (v247 - v249)) + *(_DWORD *)(*a9 + 4 * (v92 - v250))) * a7 + 128) >> 8)
               + v100;
          v102 = v101 >= v30;
          if (v101 >= v30)
            v30 = v30;
          else
            v30 = v101;
          if (!v102)
          {
LABEL_161:
            v43 = 5;
            goto LABEL_214;
          }
        }
        else
        {
          v29 = v251;
          v103 = v100 >= v30;
          if (v100 >= v30)
            v30 = v30;
          else
            v30 = v100;
          if (!v103)
            goto LABEL_161;
        }
LABEL_213:
        if (v43 == -1)
          goto LABEL_316;
        goto LABEL_214;
      }
    }
    v29 = v251;
    goto LABEL_213;
  }
  v29 = v25;
  v30 = (((*(_DWORD *)(a9[1] + 4 * (v27 - v20)) + *(_DWORD *)(*a9 + 4 * (v25 - (uint64_t)(int)v19))) * a7 + 128) >> 8)
      + v28;
  v253 = a7;
  if (a6 < 6)
    goto LABEL_13;
LABEL_11:
  v249 = v20;
  v250 = (int)v19;
LABEL_316:
  v182 = 8;
  v183 = v29;
  do
  {
    v185 = *(_DWORD *)(a1 + 8760);
    v186 = *(_DWORD *)(a1 + 8764);
    v187 = *(_DWORD *)(a1 + 8752);
    v188 = *(_DWORD *)(a1 + 8756);
    v189 = v26 - 1;
    if (v183 <= v185 || v183 >= v186 || v26 <= v187 || v26 >= v188)
    {
      if (v187 <= v189 && v188 >= v189)
      {
        v194 = -1;
        if (v185 > (__int16)v183 || v186 < (__int16)v183)
          goto LABEL_335;
        v203 = v189;
        v204 = (*v10)(v256, v257, v254 + (__int16)v183 * (int)v255 + v189);
        if (v204 < v30)
        {
          if (a9)
            v205 = ((*(_DWORD *)(a9[1] + 4 * (v203 - v249)) + *(_DWORD *)(*a9 + 4 * ((__int16)v183 - v250))) * a7 + 128) >> 8;
          else
            v205 = 0;
          v223 = v205 + v204;
          v224 = v223 >= v30;
          if (v223 >= v30)
            v30 = v30;
          else
            v30 = v223;
          if (v224)
            v194 = -1;
          else
            v194 = 0;
LABEL_335:
          if (*(_DWORD *)(a1 + 8752) <= (__int16)v26 && *(_DWORD *)(a1 + 8756) >= (__int16)v26)
          {
            v195 = (__int16)(v183 - 1);
            if (*(_DWORD *)(a1 + 8760) <= v195 && *(_DWORD *)(a1 + 8764) >= v195)
            {
              v196 = (*v10)(v256, v257, v254 + (int)v255 * v195 + (__int16)v26);
              v197 = v30;
              if (v196 < v30)
              {
                a7 = v253;
                if (a9)
                  v198 = ((*(_DWORD *)(a9[1] + 4 * ((__int16)v26 - v249))
                         + *(_DWORD *)(*a9 + 4 * ((__int16)(v183 - 1) - v250)))
                        * v253
                        + 128) >> 8;
                else
                  v198 = 0;
                v228 = v198 + v196;
                if (v228 >= v30)
                  v30 = v30;
                else
                  v30 = v228;
                if (v228 < v197)
                  v194 = 1;
                if (*(_DWORD *)(a1 + 8752) > (__int16)v26)
                {
LABEL_415:
                  v231 = (__int16)(v26 + 1);
                  if (*(_DWORD *)(a1 + 8752) > v231)
                    goto LABEL_317;
                  if (*(_DWORD *)(a1 + 8756) < v231)
                    goto LABEL_317;
                  if (*(_DWORD *)(a1 + 8760) > (__int16)v183)
                    goto LABEL_317;
                  if (*(_DWORD *)(a1 + 8764) < (__int16)v183)
                    goto LABEL_317;
                  v217 = (*v10)(v256, v257, v254 + (__int16)v183 * (int)v255 + (__int16)(v26 + 1));
                  if (v217 >= v30)
                    goto LABEL_317;
                  if (a9)
                  {
                    v218 = a9[1];
                    v219 = *(_DWORD *)(*a9 + 4 * ((__int16)v183 - v250));
                    v220 = (__int16)(v26 + 1) - v249;
LABEL_381:
                    v221 = (((*(_DWORD *)(v218 + 4 * v220) + v219) * a7 + 128) >> 8) + v217;
                    v222 = v221 >= v30;
                    if (v221 >= v30)
                      v30 = v30;
                    else
                      v30 = v221;
                    if (!v222)
                      goto LABEL_426;
                    goto LABEL_317;
                  }
                  goto LABEL_422;
                }
LABEL_395:
                if (*(_DWORD *)(a1 + 8756) >= (__int16)v26)
                {
                  v225 = (__int16)(v183 + 1);
                  if (*(_DWORD *)(a1 + 8760) <= v225 && *(_DWORD *)(a1 + 8764) >= v225)
                  {
                    v226 = (*v10)(v256, v257, v254 + (int)v255 * v225 + (__int16)v26);
                    if (v226 < v30)
                    {
                      v227 = a9
                           ? ((*(_DWORD *)(a9[1] + 4 * ((__int16)v26 - v249))
                             + *(_DWORD *)(*a9 + 4 * ((__int16)(v183 + 1) - v250)))
                            * a7
                            + 128) >> 8
                           : 0;
                      v229 = v227 + v226;
                      v230 = v229 >= v30;
                      v30 = v229 >= v30 ? v30 : v229;
                      if (!v230)
                        v194 = 2;
                    }
                  }
                }
                goto LABEL_415;
              }
              a7 = v253;
            }
          }
          if (*(_DWORD *)(a1 + 8752) > (__int16)v26)
            goto LABEL_415;
          goto LABEL_395;
        }
      }
      v194 = -1;
      goto LABEL_335;
    }
    v199 = v254 + (__int16)v183 * (int)v255;
    v200 = v189;
    v201 = (*v10)(v256, v257, v199 + v189);
    if (v201 >= v30)
    {
      v194 = -1;
      v206 = v30;
    }
    else
    {
      if (a9)
        v202 = ((*(_DWORD *)(a9[1] + 4 * (v200 - v249)) + *(_DWORD *)(*a9 + 4 * ((__int16)v183 - v250))) * a7 + 128) >> 8;
      else
        v202 = 0;
      v207 = v202 + v201;
      if (v207 >= v30)
        v206 = v30;
      else
        v206 = v207;
      if (v207 < v30)
        v194 = 0;
      else
        v194 = -1;
    }
    v208 = (*v10)(v256, v257, v254 + (int)v255 * (__int16)(v183 - 1) + (__int16)v26);
    v209 = v206;
    if (v208 < v206)
    {
      v210 = a9
           ? ((*(_DWORD *)(a9[1] + 4 * ((__int16)v26 - v249)) + *(_DWORD *)(*a9 + 4 * ((__int16)(v183 - 1) - v250)))
            * v253
            + 128) >> 8
           : 0;
      v211 = v210 + v208;
      v206 = v211 >= v206 ? v206 : v211;
      if (v211 < v209)
        v194 = 1;
    }
    v212 = (*v10)(v256, v257, v254 + (int)v255 * (__int16)(v183 + 1) + (__int16)v26);
    v213 = v206;
    if (v212 >= v206)
    {
      v30 = v206;
      a7 = v253;
    }
    else
    {
      a7 = v253;
      if (a9)
        v214 = ((*(_DWORD *)(a9[1] + 4 * ((__int16)v26 - v249)) + *(_DWORD *)(*a9 + 4 * ((__int16)(v183 + 1) - v250)))
              * v253
              + 128) >> 8;
      else
        v214 = 0;
      v215 = v214 + v212;
      if (v215 >= v213)
        v30 = v213;
      else
        v30 = v215;
      if (v215 < v213)
        v194 = 2;
    }
    v216 = (__int16)(v26 + 1);
    v217 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))*v10)(v256, v257, v199 + v216, v255);
    if (v217 >= v30)
      goto LABEL_317;
    if (a9)
    {
      v218 = a9[1];
      v219 = *(_DWORD *)(*a9 + 4 * ((__int16)v183 - v250));
      v220 = v216 - v249;
      goto LABEL_381;
    }
LABEL_422:
    v232 = v217 >= v30;
    if (v217 >= v30)
      v30 = v30;
    else
      v30 = v217;
    if (!v232)
    {
LABEL_426:
      v194 = 3;
      goto LABEL_318;
    }
LABEL_317:
    if (v194 == -1)
      break;
LABEL_318:
    v184 = (__int16 *)((char *)&unk_208F3D6D0 + 4 * v194);
    v183 += *v184;
    v26 += v184[1];
    --v182;
  }
  while (v182);
  *a5 = v183;
  a5[1] = v26;
  return v30;
}

uint64_t vp8_diamond_search_sad_c(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, __int16 *a5, int a6, int a7, _DWORD *a8, uint64_t a9, _QWORD *a10, __int16 *a11)
{
  _QWORD *v14;
  __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int *v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  __int16 v45;
  __int16 v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned int v70;

  v14 = a10;
  v15 = a11;
  v16 = **(_QWORD **)(a2 + 72);
  v18 = *(_DWORD *)(a2 + 80);
  v17 = *(_DWORD *)(a2 + 84);
  v19 = v16 + v18;
  v20 = *(_DWORD *)(a1 + 7792);
  v21 = *(_QWORD *)(a1 + 7832);
  v70 = 0;
  v22 = *(_QWORD *)(a1 + 8696);
  v23 = *(_QWORD *)(a1 + 8704);
  v24 = *a11;
  v25 = a11[1];
  v26 = *(_DWORD *)(a1 + 8752);
  v27 = *(_DWORD *)(a1 + 8760);
  v28 = *(_DWORD *)(a1 + 8764);
  if (v26 <= a4[1])
    LOWORD(v26) = a4[1];
  if (*(_DWORD *)(a1 + 8756) < (__int16)v26)
    LOWORD(v26) = *(_DWORD *)(a1 + 8756);
  a4[1] = v26;
  v29 = *a4;
  if (v27 > v29)
    LOWORD(v29) = v27;
  if (v28 < (__int16)v29)
    LOWORD(v29) = v28;
  *a4 = v29;
  *a8 = 0;
  *a5 = v29;
  a5[1] = v26;
  v30 = v21 + *(int *)(a3 + 32) + (int)(v20 * (__int16)v29) + (__int16)v26;
  v66 = v19;
  v67 = v17;
  v65 = v20;
  v31 = (*(uint64_t (**)(void))a9)();
  v32 = *(_DWORD *)(a1 + 8628);
  v64 = *(_DWORD *)(a1 + 8624) / v32 - a6;
  if (v64 < 1)
  {
    v45 = *a5;
    v46 = a5[1];
    v47 = v30;
  }
  else
  {
    v68 = 0;
    v33 = 0;
    v34 = 0;
    v58 = (uint64_t)v25 >> 3;
    v59 = (uint64_t)v24 >> 3;
    v61 = v23;
    v62 = v22;
    v57 = *(_QWORD *)(a1 + 8616) + 8 * v32 * a6;
    v35 = v31 + (((*(_DWORD *)(v22 + 4 * (*a5 - v59)) + *(_DWORD *)(v23 + 4 * (a5[1] - v58))) * a7 + 128) >> 8);
    v36 = 1;
    v37 = v30;
    v60 = v30;
    do
    {
      if (*(int *)(a1 + 8628) >= 1)
      {
        v39 = 0;
        v69 = v36;
        v40 = (int *)(v57 + 4 + 8 * v36);
        do
        {
          v41 = *((__int16 *)v40 - 1) + a5[1];
          if (v41 > *(_DWORD *)(a1 + 8752) && v41 < *(_DWORD *)(a1 + 8756))
          {
            v42 = *((__int16 *)v40 - 2) + *a5;
            if (v42 > *(_DWORD *)(a1 + 8760) && v42 < *(_DWORD *)(a1 + 8764))
            {
              v43 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))a9)(v66, v67, v37 + *v40, v65);
              v70 = v43;
              if (v43 < v35)
              {
                v44 = v43
                    + (((*(_DWORD *)(v61 + 4 * ((__int16)v41 - v58)) + *(_DWORD *)(v62 + 4 * ((__int16)v42 - v59))) * a7
                      + 128) >> 8);
                v70 = v44;
                if (v44 < v35)
                {
                  v35 = v44;
                  v33 = v69 + v39;
                }
              }
            }
          }
          ++v39;
          v40 += 2;
        }
        while (v39 < *(_DWORD *)(a1 + 8628));
        v36 = v69 + v39;
        v30 = v60;
      }
      if (v33 == v68)
      {
        if (v37 == v30)
        {
          ++*a8;
          v37 = v30;
        }
      }
      else
      {
        v38 = v57 + 8 * v33;
        *a5 += *(_WORD *)v38;
        a5[1] += *(_WORD *)(v38 + 2);
        v37 += *(int *)(v38 + 4);
        v68 = v33;
      }
      ++v34;
    }
    while (v34 != v64);
    v45 = *a5;
    v46 = a5[1];
    v47 = v37;
    v15 = a11;
    v14 = a10;
  }
  v48 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, unsigned int *))(a9 + 8))(v66, v67, v47, v65, &v70);
  if (v14)
  {
    v49 = 8 * v46;
    if (v49 >= 0x7FFF)
      v49 = 0x7FFF;
    if (v49 <= -32768)
      v49 = -32768;
    if (8 * v45 >= 0x7FFF)
      v50 = 0x7FFF;
    else
      v50 = 8 * v45;
    if (v50 <= -32768)
      v50 = -32768;
    v51 = (v50 - *v15) >> 1;
    if (v51 >= 2047)
      v51 = 2047;
    v52 = v51 & ~(v51 >> 31);
    v53 = (v49 - v15[1]) >> 1;
    if (v53 >= 2047)
      v53 = 2047;
    v54 = ((*(_DWORD *)(v14[1] + 4 * (v53 & ~(v53 >> 31))) + *(_DWORD *)(*v14 + 4 * v52))
         * *(_DWORD *)(a1 + 8632)
         + 128) >> 8;
  }
  else
  {
    v54 = 0;
  }
  return (v54 + v48);
}

uint64_t vp8_full_search_sad(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, int a5, int a6, uint64_t a7, _QWORD *a8, __int16 *a9)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  __int16 v27;
  __int16 v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v59;

  v59 = 0;
  v12 = *(unsigned int *)(a2 + 84);
  v13 = **(_QWORD **)(a2 + 72) + *(int *)(a2 + 80);
  v14 = *(_DWORD *)(a1 + 7792);
  v15 = v14;
  v16 = *a4;
  v17 = a4[1];
  v18 = v16 - a6;
  v19 = v16 + a6;
  v20 = v17 - a6;
  v21 = v17 + a6;
  v56 = *(_QWORD *)(a1 + 8704);
  v57 = *(_QWORD *)(a1 + 8696);
  v53 = a9[1];
  v54 = *a9;
  v46 = *(_QWORD *)(a1 + 7832) + *(int *)(a3 + 32);
  *(_WORD *)(a3 + 48) = *a4;
  *(_WORD *)(a3 + 50) = v17;
  v52 = v46 + v14 * v16 + v17;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))a7)(v13, v12);
  if (v20 <= *(_DWORD *)(a1 + 8752))
    v23 = *(_DWORD *)(a1 + 8752);
  else
    v23 = v20;
  if (v21 >= *(_DWORD *)(a1 + 8756))
    v24 = *(_DWORD *)(a1 + 8756);
  else
    v24 = v21;
  v25 = *(_DWORD *)(a1 + 8760);
  if (v18 > v25)
    v25 = v18;
  if (v19 >= *(_DWORD *)(a1 + 8764))
    v26 = *(_DWORD *)(a1 + 8764);
  else
    v26 = v19;
  v27 = *(_WORD *)(a3 + 48);
  v28 = *(_WORD *)(a3 + 50);
  if (v25 < v26)
  {
    v29 = v54;
    if (v23 < v24)
    {
      v51 = a3;
      v30 = (uint64_t)v54 >> 3;
      v55 = (uint64_t)v53 >> 3;
      v47 = v46 + v23;
      v48 = (uint64_t)v29 >> 3;
      v31 = v22
          + (((*(_DWORD *)(v57 + 4 * (*(__int16 *)(a3 + 48) - v30))
             + *(_DWORD *)(v56 + 4 * (*(__int16 *)(a3 + 50) - v55)))
            * a5
            + 128) >> 8);
      v32 = v25;
      v49 = v26;
      v50 = v23;
      do
      {
        v33 = v47 + v32 * v15;
        v34 = v23;
        do
        {
          v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))a7)(v13, v12, v33, v15);
          v59 = v35;
          if (v35 < v31)
          {
            v36 = v35
                + (((*(_DWORD *)(v56 + 4 * ((__int16)v34 - v55)) + *(_DWORD *)(v57 + 4 * ((__int16)v32 - v48))) * a5
                  + 128) >> 8);
            v59 = v36;
            if (v36 < v31)
            {
              *(_WORD *)(v51 + 48) = v32;
              *(_WORD *)(v51 + 50) = v34;
              v52 = v33;
              v31 = v36;
            }
          }
          ++v33;
          ++v34;
        }
        while (v24 != v34);
        ++v32;
        v23 = v50;
      }
      while (v49 != (_DWORD)v32);
      v27 = *(_WORD *)(v51 + 48);
      v28 = *(_WORD *)(v51 + 50);
    }
  }
  v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(a7 + 8))(v13, v12, v52, v15, &v59);
  if (a8)
  {
    v38 = 8 * v28;
    if (v38 >= 0x7FFF)
      v38 = 0x7FFF;
    if (v38 <= -32768)
      v38 = -32768;
    if (8 * v27 >= 0x7FFF)
      v39 = 0x7FFF;
    else
      v39 = 8 * v27;
    if (v39 <= -32768)
      v39 = -32768;
    v40 = (v39 - *a9) >> 1;
    if (v40 >= 2047)
      v40 = 2047;
    v41 = v40 & ~(v40 >> 31);
    v42 = (v38 - a9[1]) >> 1;
    if (v42 >= 2047)
      v42 = 2047;
    v43 = ((*(_DWORD *)(a8[1] + 4 * (v42 & ~(v42 >> 31))) + *(_DWORD *)(*a8 + 4 * v41))
         * *(_DWORD *)(a1 + 8632)
         + 128) >> 8;
  }
  else
  {
    v43 = 0;
  }
  return (v43 + v37);
}

uint64_t vp8_refining_search_sad_c(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, int a5, int a6, uint64_t a7, _QWORD *a8, __int16 *a9)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  __int16 v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  __int16 v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v46;
  __int16 *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v63;
  unsigned int v64;
  unsigned int v66;

  v12 = *(int *)(a1 + 7792);
  v13 = *(_QWORD *)(a1 + 7832);
  v14 = *(_DWORD *)(a2 + 84);
  v15 = **(_QWORD **)(a2 + 72) + *(int *)(a2 + 80);
  v16 = v13 + *(int *)(a3 + 32) + *a4 * v12 + a4[1];
  v66 = 0;
  v61 = *(_QWORD *)(a1 + 8696);
  v17 = *(_QWORD *)(a1 + 8704);
  v18 = *a9;
  v19 = a9[1];
  v63 = v15;
  v64 = v14;
  v20 = (*(uint64_t (**)(void))a7)();
  v21 = *a4;
  v22 = a4[1];
  if (a6 >= 1)
  {
    v57 = (uint64_t)v19 >> 3;
    v58 = (uint64_t)v18 >> 3;
    v23 = (v20
                       + (((*(_DWORD *)(v61 + 4 * (*a4 - v58)) + *(_DWORD *)(v17 + 4 * (a4[1] - v57))) * a5 + 128) >> 8));
    v59 = v17;
    do
    {
      if (*(_DWORD *)(a1 + 8752) >= v22
        || *(_DWORD *)(a1 + 8756) <= v22
        || (v24 = v21 - 1, v25 = (__int16)(v21 - 1), *(_DWORD *)(a1 + 8760) >= v25)
        || *(_DWORD *)(a1 + 8764) <= v25)
      {
        v29 = -1;
        v30 = (__int16)(a4[1] - 1);
        if (*(_DWORD *)(a1 + 8752) >= v30)
          goto LABEL_27;
      }
      else
      {
        v26 = v23;
        v27 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))a7)(v63, v64, v16 - v12, v12);
        v23 = v26;
        v66 = v27;
        if (v27 >= v26)
        {
          v29 = -1;
        }
        else
        {
          v28 = v27 + (((*(_DWORD *)(v59 + 4 * (v22 - v57)) + *(_DWORD *)(v61 + 4 * (v24 - v58))) * a5 + 128) >> 8);
          v66 = v28;
          if (v28 >= v26)
            v23 = v26;
          else
            v23 = v28;
          if (v28 < v26)
            v29 = 0;
          else
            v29 = -1;
        }
        v30 = (__int16)(a4[1] - 1);
        if (*(_DWORD *)(a1 + 8752) >= v30)
          goto LABEL_27;
      }
      if (*(_DWORD *)(a1 + 8756) > v30)
      {
        v31 = *a4;
        if (*(_DWORD *)(a1 + 8760) < v31 && *(_DWORD *)(a1 + 8764) > v31)
        {
          v32 = v23;
          v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))a7)(v63, v64, v16 - 1, v12);
          v23 = v32;
          v66 = v33;
          if (v33 < v32)
          {
            v34 = v33 + (((*(_DWORD *)(v59 + 4 * (v30 - v57)) + *(_DWORD *)(v61 + 4 * (v31 - v58))) * a5 + 128) >> 8);
            v66 = v34;
            v23 = v34 >= v32 ? v32 : v34;
            if (v34 < v32)
              v29 = 1;
          }
        }
      }
LABEL_27:
      v35 = (__int16)(a4[1] + 1);
      if (*(_DWORD *)(a1 + 8752) < v35 && *(_DWORD *)(a1 + 8756) > v35)
      {
        v36 = *a4;
        if (*(_DWORD *)(a1 + 8760) < v36 && *(_DWORD *)(a1 + 8764) > v36)
        {
          v37 = v23;
          v38 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))a7)(v63, v64, v16 + 1, v12);
          v23 = v37;
          v66 = v38;
          if (v38 < v37)
          {
            v39 = v38 + (((*(_DWORD *)(v59 + 4 * (v35 - v57)) + *(_DWORD *)(v61 + 4 * (v36 - v58))) * a5 + 128) >> 8);
            v66 = v39;
            v23 = v39 >= v37 ? v37 : v39;
            if (v39 < v37)
              v29 = 2;
          }
        }
      }
      v21 = *a4;
      v40 = a4[1];
      v22 = a4[1];
      if (*(_DWORD *)(a1 + 8752) >= v40)
        goto LABEL_48;
      if (*(_DWORD *)(a1 + 8756) <= v40)
        goto LABEL_48;
      v41 = v21 + 1;
      v42 = (__int16)(v21 + 1);
      if (*(_DWORD *)(a1 + 8760) >= v42 || *(_DWORD *)(a1 + 8764) <= v42)
        goto LABEL_48;
      v43 = v23;
      v44 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))a7)(v63, v64, v16 + v12, v12);
      v23 = v43;
      v66 = v44;
      if (v44 >= v43)
      {
        v21 = *a4;
        v22 = a4[1];
LABEL_48:
        if (v29 == -1)
          break;
        goto LABEL_49;
      }
      v45 = v44 + (((*(_DWORD *)(v59 + 4 * (v40 - v57)) + *(_DWORD *)(v61 + 4 * (v41 - v58))) * a5 + 128) >> 8);
      v66 = v45;
      v21 = *a4;
      v22 = a4[1];
      v46 = v45 >= v23;
      if (v45 >= v23)
        v23 = v23;
      else
        v23 = v45;
      if (v46)
        goto LABEL_48;
      v29 = 3;
LABEL_49:
      v47 = (__int16 *)((char *)&unk_208F3D6E0 + 4 * v29);
      v48 = *v47;
      v21 += v48;
      *a4 = v21;
      LODWORD(v47) = v47[1];
      v22 += (__int16)v47;
      a4[1] = v22;
      v16 += (int)v47 + (int)v12 * v48;
      --a6;
    }
    while (a6);
  }
  v49 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, unsigned int *))(a7 + 8))(v63, v64, v16, v12, &v66);
  if (a8)
  {
    v50 = 8 * v22;
    if (v50 >= 0x7FFF)
      v50 = 0x7FFF;
    if (v50 <= -32768)
      v50 = -32768;
    if (8 * v21 >= 0x7FFF)
      v51 = 0x7FFF;
    else
      v51 = 8 * v21;
    if (v51 <= -32768)
      v51 = -32768;
    v52 = (v51 - *a9) >> 1;
    if (v52 >= 2047)
      v52 = 2047;
    v53 = v52 & ~(v52 >> 31);
    v54 = (v50 - a9[1]) >> 1;
    if (v54 >= 2047)
      v54 = 2047;
    v55 = ((*(_DWORD *)(a8[1] + 4 * (v54 & ~(v54 >> 31))) + *(_DWORD *)(*a8 + 4 * v53))
         * *(_DWORD *)(a1 + 8632)
         + 128) >> 8;
  }
  else
  {
    v55 = 0;
  }
  return (v55 + v49);
}

uint64_t vp8_filter_by_weight8x8_c(uint64_t result, int a2, uint64_t a3, int a4, int a5)
{
  int v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;

  v5 = 16 - a5;
  if (a4 == 1 && a2 == 1)
  {
    v6 = *(unsigned __int8 *)(a3 + 6);
    v7 = (unsigned __int8 *)(a3 + 3);
    v8 = (unsigned __int8 *)(result + 3);
    v9 = 8;
    do
    {
      *(v7 - 3) = (v5 * *(v7 - 3) + *(v8 - 3) * a5 + 8) >> 4;
      *(v7 - 2) = (v5 * *(v7 - 2) + *(v8 - 2) * a5 + 8) >> 4;
      *(v7 - 1) = (v5 * *(v7 - 1) + *(v8 - 1) * a5 + 8) >> 4;
      *v7 = (v5 * *v7 + *v8 * a5 + 8) >> 4;
      v7[1] = (v5 * v7[1] + v8[1] * a5 + 8) >> 4;
      v7[2] = (v5 * v7[2] + v8[2] * a5 + 8) >> 4;
      v7[3] = (v5 * v6 + v8[3] * a5 + 8) >> 4;
      v10 = (v5 * v7[4] + v8[4] * a5 + 8) >> 4;
      v6 = v10;
      v7[4] = v10;
      ++v7;
      ++v8;
      --v9;
    }
    while (v9);
  }
  else
  {
    v11 = (unsigned __int8 *)(a3 + 3);
    v12 = (unsigned __int8 *)(result + 3);
    v13 = 8;
    do
    {
      *(v11 - 3) = (v5 * *(v11 - 3) + *(v12 - 3) * a5 + 8) >> 4;
      *(v11 - 2) = (v5 * *(v11 - 2) + *(v12 - 2) * a5 + 8) >> 4;
      *(v11 - 1) = (v5 * *(v11 - 1) + *(v12 - 1) * a5 + 8) >> 4;
      *v11 = (v5 * *v11 + *v12 * a5 + 8) >> 4;
      v11[1] = (v5 * v11[1] + v12[1] * a5 + 8) >> 4;
      v11[2] = (v5 * v11[2] + v12[2] * a5 + 8) >> 4;
      v11[3] = (v5 * v11[3] + v12[3] * a5 + 8) >> 4;
      v11[4] = (v5 * v11[4] + v12[4] * a5 + 8) >> 4;
      v11 += a4;
      v12 += a2;
      --v13;
    }
    while (v13);
  }
  return result;
}

unsigned __int8 *vp8_filter_by_weight4x4_c(unsigned __int8 *result, int a2, unsigned __int8 *a3, int a4, int a5)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;

  *a3 = ((16 - a5) * *a3 + *result * a5 + 8) >> 4;
  a3[1] = ((16 - a5) * a3[1] + result[1] * a5 + 8) >> 4;
  a3[2] = ((16 - a5) * a3[2] + result[2] * a5 + 8) >> 4;
  a3[3] = ((16 - a5) * a3[3] + result[3] * a5 + 8) >> 4;
  v5 = &result[a2];
  v6 = &a3[a4];
  *v6 = ((16 - a5) * *v6 + *v5 * a5 + 8) >> 4;
  v6[1] = ((16 - a5) * v6[1] + v5[1] * a5 + 8) >> 4;
  v6[2] = ((16 - a5) * v6[2] + v5[2] * a5 + 8) >> 4;
  v6[3] = ((16 - a5) * v6[3] + v5[3] * a5 + 8) >> 4;
  v7 = &v5[a2];
  v8 = &v6[a4];
  *v8 = ((16 - a5) * *v8 + *v7 * a5 + 8) >> 4;
  v8[1] = ((16 - a5) * v8[1] + v7[1] * a5 + 8) >> 4;
  v8[2] = ((16 - a5) * v8[2] + v7[2] * a5 + 8) >> 4;
  v8[3] = ((16 - a5) * v8[3] + v7[3] * a5 + 8) >> 4;
  v9 = &v7[a2];
  v10 = &v8[a4];
  *v10 = ((16 - a5) * *v10 + *v9 * a5 + 8) >> 4;
  v10[1] = ((16 - a5) * v10[1] + v9[1] * a5 + 8) >> 4;
  v10[2] = ((16 - a5) * v10[2] + v9[2] * a5 + 8) >> 4;
  v10[3] = ((16 - a5) * v10[3] + v9[3] * a5 + 8) >> 4;
  return result;
}

unsigned __int8 *vp8_multiframe_quality_enhance(unsigned __int8 *result)
{
  _BOOL4 v1;
  int v2;
  int *v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  _OWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _OWORD *v20;
  unsigned __int8 *v21;
  _OWORD *v22;
  unsigned __int8 *v23;
  _OWORD *v24;
  unsigned __int8 *v25;
  _OWORD *v26;
  unsigned __int8 *v27;
  _OWORD *v28;
  unsigned __int8 *v29;
  _OWORD *v30;
  unsigned __int8 *v31;
  _OWORD *v32;
  unsigned __int8 *v33;
  _OWORD *v34;
  unsigned __int8 *v35;
  _OWORD *v36;
  _OWORD *v37;
  _OWORD *v38;
  _OWORD *v39;
  _OWORD *v40;
  _OWORD *v41;
  _OWORD *v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  _QWORD *v49;
  unsigned __int8 *v50;
  _QWORD *v51;
  unsigned __int8 *v52;
  _QWORD *v53;
  unsigned __int8 *v54;
  _QWORD *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  _QWORD *v61;
  unsigned __int8 *v62;
  _QWORD *v63;
  unsigned __int8 *v64;
  _QWORD *v65;
  unsigned __int8 *v66;
  _QWORD *v67;
  unsigned __int8 *v68;
  int32x4_t v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  _BOOL4 v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  unsigned __int8 *v86;
  _DWORD *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  uint64_t v91;
  _QWORD *v92;
  unsigned __int8 *v93;
  _QWORD *v94;
  unsigned __int8 *v95;
  _QWORD *v96;
  unsigned __int8 *v97;
  _QWORD *v98;
  unsigned __int8 *v99;
  _QWORD *v100;
  unsigned __int8 *v101;
  _QWORD *v102;
  unsigned __int8 *v103;
  _QWORD *v104;
  uint64_t v105;
  _DWORD *v106;
  uint64_t v107;
  unsigned __int8 *v108;
  _DWORD *v109;
  unsigned __int8 *v110;
  uint64_t v111;
  _DWORD *v112;
  uint64_t v113;
  unsigned __int8 *v114;
  _DWORD *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  int v121;
  int v122;
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  unsigned __int8 *v126;
  _DWORD *v127;
  unsigned __int8 *v128;
  uint64_t v129;
  unsigned __int8 *v130;
  uint64_t v131;
  _QWORD *v132;
  unsigned __int8 *v133;
  _QWORD *v134;
  unsigned __int8 *v135;
  _QWORD *v136;
  unsigned __int8 *v137;
  _QWORD *v138;
  unsigned __int8 *v139;
  _QWORD *v140;
  unsigned __int8 *v141;
  _QWORD *v142;
  unsigned __int8 *v143;
  _QWORD *v144;
  uint64_t v145;
  _DWORD *v146;
  uint64_t v147;
  unsigned __int8 *v148;
  _DWORD *v149;
  unsigned __int8 *v150;
  uint64_t v151;
  _DWORD *v152;
  uint64_t v153;
  unsigned __int8 *v154;
  _DWORD *v155;
  unsigned __int8 *v156;
  uint64_t v157;
  uint64_t v158;
  _BOOL4 v159;
  int v160;
  int v161;
  int v162;
  _BOOL4 v163;
  unsigned __int8 *v164;
  int v165;
  int v166;
  unsigned int v167;
  int v168;
  unsigned __int8 *v169;
  unsigned __int8 *v170;
  int32x4_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x24BDAC8D0];
  v2 = *((_DWORD *)result + 761);
  if (v2 >= 1)
  {
    v3 = (int *)result;
    v4 = *((_DWORD *)result + 762);
    if (v4 >= 1)
    {
      v5 = *((_QWORD *)result + 231);
      v6 = *((_DWORD *)result + 757);
      v7 = (unsigned __int8 *)*((_QWORD *)result + 388);
      v167 = *((_DWORD *)result + 1462);
      v168 = *((_DWORD *)result + 768);
      v8 = (unsigned __int8 *)*((_QWORD *)result + 345);
      v9 = (unsigned __int8 *)*((_QWORD *)result + 344);
      v10 = (_OWORD *)*((_QWORD *)result + 343);
      v12 = *(_QWORD **)(v5 + 64);
      v11 = *(_QWORD **)(v5 + 72);
      v13 = *(unsigned __int8 **)(v5 + 56);
      v160 = 0;
      v161 = v6;
      while (v4 < 1)
      {
LABEL_5:
        v13 += 16 * (*(_DWORD *)(v5 + 16) - v4);
        v14 = 8 * (*(_DWORD *)(v5 + 36) - v4);
        v12 = (_QWORD *)((char *)v12 + v14);
        v11 = (_QWORD *)((char *)v11 + v14);
        v10 += v3[676] - v4;
        v15 = 8 * (v3[681] - v4);
        v9 += v15;
        v8 += v15;
        v7 += 76;
        if (++v160 >= v2)
          return result;
      }
      v16 = 0;
      while (1)
      {
        v169 = v9;
        v170 = v8;
        if (!v6)
          goto LABEL_88;
        if (v6 != 1)
          goto LABEL_8;
        if (v7[9])
        {
          v69.i64[0] = 0x100000001;
          v69.i64[1] = 0x100000001;
          v171 = v69;
          v70 = 1;
          v1 = 1;
          goto LABEL_14;
        }
        v72 = *v7;
        if (v72 != 9)
        {
          if (v72 < 5)
            goto LABEL_27;
          v75 = *((__int16 *)v7 + 2);
          if (v75 < 0)
            v75 = -v75;
          if ((unsigned __int16)v75 > 2u)
          {
LABEL_27:
            v77 = 0;
          }
          else
          {
            v76 = *((__int16 *)v7 + 3);
            if (v76 < 0)
              v76 = -v76;
            v77 = (unsigned __int16)v76 < 3u;
          }
          v171 = vdupq_n_s32(v77);
          v1 = v77;
          v165 = v77;
          v166 = v77;
          v71 = 4 * v77;
          if (!(4 * v77))
          {
LABEL_8:
            v17 = *(int *)(v5 + 16);
            v18 = v3[676];
            *v10 = *(_OWORD *)v13;
            *(_OWORD *)((char *)v10 + v18) = *(_OWORD *)&v13[v17];
            v19 = &v13[v17 + v17];
            v20 = (_OWORD *)((char *)v10 + v18 + v18);
            *v20 = *(_OWORD *)v19;
            v21 = &v19[v17];
            v22 = (_OWORD *)((char *)v20 + v18);
            *v22 = *(_OWORD *)v21;
            v23 = &v21[v17];
            v24 = (_OWORD *)((char *)v22 + v18);
            *v24 = *(_OWORD *)v23;
            v25 = &v23[v17];
            v26 = (_OWORD *)((char *)v24 + v18);
            *v26 = *(_OWORD *)v25;
            v27 = &v25[v17];
            v28 = (_OWORD *)((char *)v26 + v18);
            *v28 = *(_OWORD *)v27;
            v29 = &v27[v17];
            v30 = (_OWORD *)((char *)v28 + v18);
            *v30 = *(_OWORD *)v29;
            v31 = &v29[v17];
            v32 = (_OWORD *)((char *)v30 + v18);
            *v32 = *(_OWORD *)v31;
            v33 = &v31[v17];
            v34 = (_OWORD *)((char *)v32 + v18);
            *v34 = *(_OWORD *)v33;
            v35 = &v33[v17];
            v36 = (_OWORD *)((char *)v34 + v18);
            *v36 = *v35;
            v37 = (_OWORD *)((char *)v35 + v17);
            v38 = (_OWORD *)((char *)v36 + v18);
            *v38 = *v37;
            v39 = (_OWORD *)((char *)v37 + v17);
            v40 = (_OWORD *)((char *)v38 + v18);
            *v40 = *v39;
            v41 = (_OWORD *)((char *)v39 + v17);
            v42 = (_OWORD *)((char *)v40 + v18);
            *v42 = *v41;
            v43 = (_OWORD *)((char *)v41 + v17);
            v44 = (_OWORD *)((char *)v42 + v18);
            *v44 = *v43;
            *(_OWORD *)((char *)v44 + v18) = *(_OWORD *)((char *)v43 + v17);
            v45 = *(int *)(v5 + 36);
            v46 = v3[681];
            *(_QWORD *)v9 = *v12;
            *(_QWORD *)&v9[v46] = *(_QWORD *)((char *)v12 + v45);
            v47 = (_QWORD *)((char *)v12 + v45 + v45);
            v48 = &v9[v46 + v46];
            *(_QWORD *)v48 = *v47;
            v49 = (_QWORD *)((char *)v47 + v45);
            v50 = &v48[v46];
            *(_QWORD *)v50 = *v49;
            v51 = (_QWORD *)((char *)v49 + v45);
            v52 = &v50[v46];
            *(_QWORD *)v52 = *v51;
            v53 = (_QWORD *)((char *)v51 + v45);
            v54 = &v52[v46];
            *(_QWORD *)v54 = *v53;
            v55 = (_QWORD *)((char *)v53 + v45);
            v56 = &v54[v46];
            *(_QWORD *)v56 = *v55;
            *(_QWORD *)&v56[v46] = *(_QWORD *)((char *)v55 + v45);
            v57 = *(int *)(v5 + 36);
            v58 = v3[681];
            *(_QWORD *)v8 = *v11;
            *(_QWORD *)&v8[v58] = *(_QWORD *)((char *)v11 + v57);
            v59 = (_QWORD *)((char *)v11 + v57 + v57);
            v60 = &v8[v58 + v58];
            *(_QWORD *)v60 = *v59;
            v61 = (_QWORD *)((char *)v59 + v57);
            v62 = &v60[v58];
            *(_QWORD *)v62 = *v61;
            v63 = (_QWORD *)((char *)v61 + v57);
            v64 = &v62[v58];
            *(_QWORD *)v64 = *v63;
            v65 = (_QWORD *)((char *)v63 + v57);
            v66 = &v64[v58];
            *(_QWORD *)v66 = *v65;
            v67 = (_QWORD *)((char *)v65 + v57);
            v68 = &v66[v58];
            *(_QWORD *)v68 = *v67;
            *(_QWORD *)&v68[v58] = *(_QWORD *)((char *)v67 + v57);
            goto LABEL_9;
          }
          goto LABEL_80;
        }
        if (*((__int16 *)v7 + 6) > 2)
        {
          v73 = 0;
          v74 = v165;
          v171.i32[0] = 0;
          if (!v166)
            goto LABEL_41;
        }
        else
        {
          v73 = *((__int16 *)v7 + 7) < 3;
          v74 = v165;
          v171.i32[0] = v73;
          if (!v166)
            goto LABEL_41;
        }
        if (*((__int16 *)v7 + 8) > 2)
        {
          v73 = 0;
          v171.i32[0] = 0;
          if (!v74)
            goto LABEL_41;
        }
        else
        {
          v73 = v73 & (*((__int16 *)v7 + 9) < 3);
          v171.i32[0] = v73;
          if (!v74)
            goto LABEL_41;
        }
        if (*((__int16 *)v7 + 14) > 2)
        {
          v73 = 0;
          v171.i32[0] = 0;
          if (!v1)
          {
LABEL_41:
            v171.i32[1] = 1;
            if (!v73)
              goto LABEL_62;
            goto LABEL_42;
          }
        }
        else
        {
          v73 = v73 & (*((__int16 *)v7 + 15) < 3);
          v171.i32[0] = v73;
          if (!v1)
            goto LABEL_41;
        }
        if (*((__int16 *)v7 + 16) > 2)
        {
          v73 = 0;
          v171.i64[0] = 0x100000000;
LABEL_62:
          v171.i64[1] = 0x100000001;
          v1 = 1;
          v165 = 1;
          v166 = 1;
          v71 = v73 + 3;
          if (!v71)
            goto LABEL_8;
          goto LABEL_80;
        }
        v73 = v73 & (*((__int16 *)v7 + 17) < 3);
        v171.i64[0] = v73 | 0x100000000;
        if (!v73)
          goto LABEL_62;
LABEL_42:
        if (*((__int16 *)v7 + 10) > 2)
        {
          v79 = 0;
LABEL_48:
          v171.i32[1] = v79;
          goto LABEL_50;
        }
        v78 = *((__int16 *)v7 + 11);
        v171.i32[1] = v78 < 3;
        if (v78 > 2)
        {
          v79 = 0;
          goto LABEL_50;
        }
        if (*((__int16 *)v7 + 12) > 2)
        {
          v79 = 0;
          v171.i32[1] = 0;
          if (!v74)
            goto LABEL_50;
        }
        else
        {
          v79 = *((__int16 *)v7 + 13) < 3;
          v171.i32[1] = v79;
          if (!v74)
            goto LABEL_50;
        }
        if (*((__int16 *)v7 + 18) > 2)
        {
          v79 = 0;
          v171.i32[1] = 0;
          if (v1)
          {
LABEL_99:
            v159 = *((__int16 *)v7 + 20) <= 2 && *((__int16 *)v7 + 21) < 3;
            v79 &= v159;
            goto LABEL_48;
          }
        }
        else
        {
          v79 = v79 & (*((__int16 *)v7 + 19) < 3);
          v171.i32[1] = v79;
          if (v1)
            goto LABEL_99;
        }
LABEL_50:
        if (*((__int16 *)v7 + 22) > 2)
        {
          v70 = 0;
          v171.i32[2] = 0;
          if (!v79)
            goto LABEL_73;
        }
        else
        {
          v70 = *((__int16 *)v7 + 23) < 3;
          v171.i32[2] = v70;
          if (!v79)
            goto LABEL_73;
        }
        if (*((__int16 *)v7 + 24) > 2)
        {
          v171.i32[2] = 0;
LABEL_60:
          v70 = 0;
          goto LABEL_73;
        }
        v171.i32[2] = (*((__int16 *)v7 + 25) < 3) & v70;
        if (!v171.i32[2])
          goto LABEL_60;
        if (*((__int16 *)v7 + 30) > 2)
        {
          v70 = 0;
          v171.i32[2] = 0;
          if (v1)
          {
LABEL_65:
            v80 = *((__int16 *)v7 + 32) <= 2 && *((__int16 *)v7 + 33) < 3;
            v70 &= v80;
            v171.i32[2] = v70;
          }
        }
        else
        {
          v70 = *((__int16 *)v7 + 31) < 3;
          v171.i32[2] = v70;
          if (v1)
            goto LABEL_65;
        }
LABEL_73:
        if (*((__int16 *)v7 + 26) > 2)
        {
          v1 = 0;
          v171.i32[3] = 0;
          if (v79)
          {
LABEL_75:
            if (*((__int16 *)v7 + 28) > 2)
            {
              v1 = 0;
              v171.i32[3] = 0;
              if (!v70)
                goto LABEL_14;
            }
            else
            {
              v1 &= *((__int16 *)v7 + 29) < 3;
              v171.i32[3] = v1;
              if (!v70)
                goto LABEL_14;
            }
            if (*((__int16 *)v7 + 34) > 2)
            {
              v171.i32[3] = 0;
            }
            else
            {
              v171.i32[3] = *((__int16 *)v7 + 35) < 3 && v1;
              if (v171.i32[3])
              {
                v1 = *((__int16 *)v7 + 36) <= 2 && *((__int16 *)v7 + 37) < 3;
                v171.i32[3] = v1;
                v70 = 1;
LABEL_14:
                v165 = v70;
                v166 = 1;
                v71 = v1 + 1 + v70 + 1;
                if (!v71)
                  goto LABEL_8;
                goto LABEL_80;
              }
            }
            v1 = 0;
            v70 = 1;
            goto LABEL_14;
          }
        }
        else
        {
          v1 = *((__int16 *)v7 + 27) < 3;
          v171.i32[3] = v1;
          if (v79)
            goto LABEL_75;
        }
        v165 = v70;
        v166 = 0;
        v71 = v1 + 1 + v70;
        if (!v71)
          goto LABEL_8;
LABEL_80:
        if (v71 <= 3)
        {
          v162 = v16;
          v163 = v1;
          v164 = v7;
          v81 = 0;
          v82 = 1;
          while (1)
          {
            v120 = v82;
            v121 = 8 * v81;
            v122 = 4 * v81;
            if (v171.i32[2 * v81])
            {
              result = multiframe_quality_enhance_block(8u, v168, v167, &v13[v121 * *(_DWORD *)(v5 + 16)], (_QWORD *)((char *)v12 + v122 * *(_DWORD *)(v5 + 36)), (_QWORD *)((char *)v11 + v122 * *(_DWORD *)(v5 + 36)), *(unsigned int *)(v5 + 16), *(unsigned int *)(v5 + 36), (_OWORD *)((char *)v10 + v121 * v3[676]), &v9[v122 * v3[681]], &v8[v122 * v3[681]], v3[676], v3[681]);
              if (!*(__int32 *)((char *)v171.i32 + ((8 * v81) | 4)))
                goto LABEL_86;
LABEL_83:
              v119 = v122 * v3[681] + 4;
              result = multiframe_quality_enhance_block(8u, v168, v167, &v13[v121 * *(_DWORD *)(v5 + 16) + 8], (_QWORD *)((char *)v12 + v122 * *(_DWORD *)(v5 + 36) + 4), (_QWORD *)((char *)v11 + v122 * *(_DWORD *)(v5 + 36) + 4), *(unsigned int *)(v5 + 16), *(unsigned int *)(v5 + 36), (_OWORD *)((char *)v10 + v121 * v3[676] + 8), &v169[v119], &v170[v119], v3[676], v3[681]);
              v9 = v169;
              v8 = v170;
              v82 = 0;
              v81 = 1;
              if ((v120 & 1) == 0)
                goto LABEL_87;
            }
            else
            {
              v83 = v122 * *(_DWORD *)(v5 + 36);
              v84 = (_DWORD *)((char *)v12 + v83);
              v85 = v122 * v3[681];
              v86 = &v9[v85];
              v87 = (_DWORD *)((char *)v11 + v83);
              v88 = &v8[v85];
              v89 = *(int *)(v5 + 16);
              v90 = &v13[v121 * (int)v89];
              v91 = v3[676];
              v92 = (_QWORD *)((char *)v10 + v121 * (int)v91);
              *v92 = *(_QWORD *)v90;
              v93 = &v90[v89];
              v94 = (_QWORD *)((char *)v92 + v91);
              *v94 = *(_QWORD *)v93;
              v95 = &v93[v89];
              v96 = (_QWORD *)((char *)v94 + v91);
              *v96 = *(_QWORD *)v95;
              v97 = &v95[v89];
              v98 = (_QWORD *)((char *)v96 + v91);
              *v98 = *(_QWORD *)v97;
              v99 = &v97[v89];
              v100 = (_QWORD *)((char *)v98 + v91);
              *v100 = *(_QWORD *)v99;
              v101 = &v99[v89];
              v102 = (_QWORD *)((char *)v100 + v91);
              *v102 = *(_QWORD *)v101;
              v103 = &v101[v89];
              v104 = (_QWORD *)((char *)v102 + v91);
              *v104 = *(_QWORD *)v103;
              *(_QWORD *)((char *)v104 + v91) = *(_QWORD *)&v103[v89];
              *(_DWORD *)v86 = *v84;
              *(_DWORD *)v88 = *v87;
              v105 = *(int *)(v5 + 36);
              v106 = (_DWORD *)((char *)v84 + v105);
              v107 = v3[681];
              v108 = &v86[v107];
              v109 = (_DWORD *)((char *)v87 + v105);
              v110 = &v88[v107];
              *(_DWORD *)v108 = *v106;
              *(_DWORD *)v110 = *v109;
              v111 = *(int *)(v5 + 36);
              v112 = (_DWORD *)((char *)v106 + v111);
              v113 = v3[681];
              v114 = &v108[v113];
              v115 = (_DWORD *)((char *)v109 + v111);
              v116 = &v110[v113];
              *(_DWORD *)v114 = *v112;
              *(_DWORD *)v116 = *v115;
              v117 = *(int *)(v5 + 36);
              v118 = v3[681];
              *(_DWORD *)&v114[v118] = *(_DWORD *)((char *)v112 + v117);
              *(_DWORD *)&v116[v118] = *(_DWORD *)((char *)v115 + v117);
              if (*(__int32 *)((char *)v171.i32 + ((8 * v81) | 4)))
                goto LABEL_83;
LABEL_86:
              v123 = v122 * *(_DWORD *)(v5 + 36) + 4;
              v124 = (_DWORD *)((char *)v12 + v123);
              v125 = v122 * v3[681] + 4;
              v9 = v169;
              v8 = v170;
              v126 = &v169[v125];
              v127 = (_DWORD *)((char *)v11 + v123);
              v128 = &v170[v125];
              v129 = *(int *)(v5 + 16);
              v130 = &v13[v121 * (int)v129 + 8];
              v131 = v3[676];
              v132 = (_QWORD *)((char *)v10 + v121 * (int)v131 + 8);
              *v132 = *(_QWORD *)v130;
              v133 = &v130[v129];
              v134 = (_QWORD *)((char *)v132 + v131);
              *v134 = *(_QWORD *)v133;
              v135 = &v133[v129];
              v136 = (_QWORD *)((char *)v134 + v131);
              *v136 = *(_QWORD *)v135;
              v137 = &v135[v129];
              v138 = (_QWORD *)((char *)v136 + v131);
              *v138 = *(_QWORD *)v137;
              v139 = &v137[v129];
              v140 = (_QWORD *)((char *)v138 + v131);
              *v140 = *(_QWORD *)v139;
              v141 = &v139[v129];
              v142 = (_QWORD *)((char *)v140 + v131);
              *v142 = *(_QWORD *)v141;
              v143 = &v141[v129];
              v144 = (_QWORD *)((char *)v142 + v131);
              *v144 = *(_QWORD *)v143;
              *(_QWORD *)((char *)v144 + v131) = *(_QWORD *)&v143[v129];
              *(_DWORD *)v126 = *v124;
              *(_DWORD *)v128 = *v127;
              v145 = *(int *)(v5 + 36);
              v146 = (_DWORD *)((char *)v124 + v145);
              v147 = v3[681];
              v148 = &v126[v147];
              v149 = (_DWORD *)((char *)v127 + v145);
              v150 = &v128[v147];
              *(_DWORD *)v148 = *v146;
              *(_DWORD *)v150 = *v149;
              v151 = *(int *)(v5 + 36);
              v152 = (_DWORD *)((char *)v146 + v151);
              v153 = v3[681];
              v154 = &v148[v153];
              v155 = (_DWORD *)((char *)v149 + v151);
              v156 = &v150[v153];
              *(_DWORD *)v154 = *v152;
              *(_DWORD *)v156 = *v155;
              v157 = *(int *)(v5 + 36);
              v158 = v3[681];
              *(_DWORD *)&v154[v158] = *(_DWORD *)((char *)v152 + v157);
              *(_DWORD *)&v156[v158] = *(_DWORD *)((char *)v155 + v157);
              v82 = 0;
              v81 = 1;
              if ((v120 & 1) == 0)
              {
LABEL_87:
                v6 = v161;
                v16 = v162;
                v7 = v164;
                v1 = v163;
                goto LABEL_9;
              }
            }
          }
        }
LABEL_88:
        result = multiframe_quality_enhance_block(0x10u, v168, v167, v13, v12, v11, *(unsigned int *)(v5 + 16), *(unsigned int *)(v5 + 36), v10, v9, v8, v3[676], v3[681]);
        v9 = v169;
        v8 = v170;
LABEL_9:
        v13 += 16;
        ++v12;
        ++v11;
        ++v10;
        v9 += 8;
        v8 += 8;
        v7 += 76;
        ++v16;
        v4 = v3[762];
        if (v16 >= v4)
        {
          v2 = v3[761];
          goto LABEL_5;
        }
      }
    }
  }
  return result;
}

unsigned __int8 *multiframe_quality_enhance_block(unsigned int a1, int a2, unsigned int a3, unsigned __int8 *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8, _OWORD *a9, unsigned __int8 *a10, unsigned __int8 *a11, int a12, int a13)
{
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  _OWORD *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned __int8 *result;
  int v30;
  _OWORD *v31;
  unsigned int v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  unsigned __int8 *v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  _OWORD *v39;
  unsigned __int8 *v40;
  _QWORD *v41;
  unsigned __int8 *v42;
  _OWORD *v43;
  unsigned __int8 *v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  _OWORD *v47;
  unsigned __int8 *v48;
  _QWORD *v49;
  _OWORD *v50;
  unsigned __int8 *v51;
  _OWORD *v52;
  unsigned __int8 *v53;
  _OWORD *v54;
  unsigned __int8 *v55;
  _OWORD *v56;
  unsigned __int8 *v57;
  _OWORD *v58;
  unsigned __int8 *v59;
  _OWORD *v60;
  _OWORD *v61;
  _OWORD *v62;
  _QWORD *v63;
  unsigned __int8 *v64;
  _QWORD *v65;
  unsigned __int8 *v66;
  _QWORD *v67;
  unsigned __int8 *v68;
  _QWORD *v69;
  unsigned __int8 *v70;
  _QWORD *v71;
  unsigned __int8 *v72;
  _QWORD *v73;
  unsigned __int8 *v74;
  _QWORD *v75;
  unsigned __int8 *v76;
  _QWORD *v77;
  unsigned __int8 *v78;
  _QWORD *v79;
  unsigned __int8 *v80;
  _QWORD *v81;
  unsigned __int8 *v82;
  _QWORD *v83;
  unsigned __int8 *v84;
  _QWORD *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  size_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  unsigned int v104;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  int v110;
  int v111;
  int v113;

  v17 = a3;
  v19 = a10;
  v18 = a11;
  v110 = a2 - a3;
  v113 = 0;
  v111 = a7;
  if (a1 == 16)
  {
    v107 = (vpx_variance16x16(a9, a12, &multiframe_quality_enhance_block_VP8_ZEROS, 0, &v113)+ 128) >> 8;
    v104 = (vpx_variance16x16(a4, a7, &multiframe_quality_enhance_block_VP8_ZEROS, 0, &v113) + 128) >> 8;
    v20 = a7;
    v21 = a9;
    vpx_variance16x16(a4, v20, a9, a12, &v113);
    v22 = (v113 + 128) >> 8;
    v23 = a8;
    vpx_variance8x8(a5, a8, a10, a13, &v113);
    v106 = (v113 + 32) >> 6;
    vpx_variance8x8(a6, a8, a11, a13, &v113);
    v24 = (v113 + 32) >> 6;
    v25 = v110;
    v26 = v110 >> 4;
    v27 = v107;
    if (v107 >= 2)
    {
LABEL_3:
      v28 = v27;
      v30 = v111;
      result = a4;
      v31 = v21;
      do
      {
        ++v26;
        v33 = v28 >= 4;
        v28 >>= 1;
      }
      while (v33);
      if (v17 < 4)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else
  {
    v108 = (vpx_variance8x8(a9, a12, &multiframe_quality_enhance_block_VP8_ZEROS, 0, &v113)+ 32) >> 6;
    v104 = (vpx_variance8x8(a4, a7, &multiframe_quality_enhance_block_VP8_ZEROS, 0, &v113) + 32) >> 6;
    v87 = a7;
    v21 = a9;
    vpx_variance8x8(a4, v87, a9, a12, &v113);
    v22 = (v113 + 32) >> 6;
    v23 = a8;
    vpx_variance4x4(a5, a8, a10, a13, &v113);
    v106 = (v113 + 8) >> 4;
    vpx_variance4x4(a6, a8, a11, a13, &v113);
    v24 = (v113 + 8) >> 4;
    v25 = v110;
    v26 = v110 >> 4;
    v27 = v108;
    if (v108 >= 2)
      goto LABEL_3;
  }
  v30 = v111;
  result = a4;
  v31 = v21;
  if (v17 >= 4)
  {
    do
    {
LABEL_6:
      ++v26;
      v34 = v17 > 0xF;
      v17 = (int)v17 >> 2;
    }
    while (v34);
  }
LABEL_7:
  v32 = v26 * v26;
  v33 = v22 >= v26 * v26 || 4 * v106 >= v32;
  if (v33 || (v32 > 4 * v24 ? (v34 = v27 > 5 * v104) : (v34 = 1), v34))
  {
    v35 = v30;
    v36 = &result[v30];
    v37 = (_QWORD *)((char *)v31 + a12);
    v38 = &v36[v35];
    v39 = (_OWORD *)((char *)v37 + a12);
    v40 = &v36[v35 + v35];
    v41 = (_QWORD *)((char *)v39 + a12);
    v42 = &v40[v35];
    v43 = (_OWORD *)((char *)v41 + a12);
    v44 = &v40[v35 + v35];
    v45 = (_QWORD *)((char *)v43 + a12);
    v46 = &v44[v35];
    v47 = (_OWORD *)((char *)v45 + a12);
    v48 = &v44[v35 + v35];
    v49 = (_QWORD *)((char *)v47 + a12);
    if (a1 == 16)
    {
      *v31 = *(_OWORD *)result;
      *(_OWORD *)((char *)v31 + a12) = *(_OWORD *)&result[v35];
      *v39 = *(_OWORD *)v38;
      *(_OWORD *)((char *)v39 + a12) = *(_OWORD *)&v38[v35];
      *v43 = *(_OWORD *)v42;
      *(_OWORD *)((char *)v43 + a12) = *(_OWORD *)&v42[v35];
      *v47 = *(_OWORD *)v46;
      *(_OWORD *)((char *)v47 + a12) = *(_OWORD *)&v46[v35];
      v50 = (_OWORD *)((char *)v49 + a12);
      *v50 = *(_OWORD *)&v48[v35];
      v51 = &v48[v35 + v35];
      v52 = (_OWORD *)((char *)v50 + a12);
      *v52 = *(_OWORD *)v51;
      v53 = &v51[v35];
      v54 = (_OWORD *)((char *)v52 + a12);
      *v54 = *(_OWORD *)v53;
      v55 = &v53[v35];
      v56 = (_OWORD *)((char *)v54 + a12);
      *v56 = *(_OWORD *)v55;
      v57 = &v55[v35];
      v58 = (_OWORD *)((char *)v56 + a12);
      *v58 = *(_OWORD *)v57;
      v59 = &v57[v35];
      v60 = (_OWORD *)((char *)v58 + a12);
      *v60 = *v59;
      v61 = (_OWORD *)((char *)v59 + v35);
      v62 = (_OWORD *)((char *)v60 + a12);
      *v62 = *v61;
      *(_OWORD *)((char *)v62 + a12) = *(_OWORD *)((char *)v61 + v35);
      *(_QWORD *)a10 = *a5;
      v63 = (_QWORD *)((char *)a5 + v23);
      v64 = &a10[a13];
      *(_QWORD *)v64 = *v63;
      v65 = (_QWORD *)((char *)v63 + v23);
      v66 = &v64[a13];
      *(_QWORD *)v66 = *v65;
      v67 = (_QWORD *)((char *)v65 + v23);
      v68 = &v66[a13];
      *(_QWORD *)v68 = *v67;
      v69 = (_QWORD *)((char *)v67 + v23);
      v70 = &v68[a13];
      *(_QWORD *)v70 = *v69;
      v71 = (_QWORD *)((char *)v69 + v23);
      v72 = &v70[a13];
      *(_QWORD *)v72 = *v71;
      v73 = (_QWORD *)((char *)v71 + v23);
      v74 = &v72[a13];
      *(_QWORD *)v74 = *v73;
      *(_QWORD *)&v74[a13] = *(_QWORD *)((char *)v73 + v23);
      *(_QWORD *)a11 = *a6;
      v75 = (_QWORD *)((char *)a6 + v23);
      v76 = &a11[a13];
      *(_QWORD *)v76 = *v75;
      v77 = (_QWORD *)((char *)v75 + v23);
      v78 = &v76[a13];
      *(_QWORD *)v78 = *v77;
      v79 = (_QWORD *)((char *)v77 + v23);
      v80 = &v78[a13];
      *(_QWORD *)v80 = *v79;
      v81 = (_QWORD *)((char *)v79 + v23);
      v82 = &v80[a13];
      *(_QWORD *)v82 = *v81;
      v83 = (_QWORD *)((char *)v81 + v23);
      v84 = &v82[a13];
      *(_QWORD *)v84 = *v83;
      v85 = (_QWORD *)((char *)v83 + v23);
      v86 = &v84[a13];
      *(_QWORD *)v86 = *v85;
      *(_QWORD *)&v86[a13] = *(_QWORD *)((char *)v85 + v23);
    }
    else
    {
      v88 = a1 >> 1;
      *(_QWORD *)v31 = *(_QWORD *)result;
      *v37 = *(_QWORD *)v36;
      *(_QWORD *)v39 = *(_QWORD *)v38;
      *v41 = *(_QWORD *)v40;
      *(_QWORD *)v43 = *(_QWORD *)v42;
      *v45 = *(_QWORD *)v44;
      *(_QWORD *)v47 = *(_QWORD *)v46;
      *v49 = *(_QWORD *)v48;
      v89 = v23;
      if (v88 <= 1)
        v90 = 1;
      else
        v90 = a1 >> 1;
      v91 = v90;
      do
      {
        memcpy(v19, a5, v88);
        a5 = (_QWORD *)((char *)a5 + v89);
        v19 += a13;
        --v91;
      }
      while (v91);
      do
      {
        result = (unsigned __int8 *)memcpy(v18, a6, v88);
        a6 = (_QWORD *)((char *)a6 + v89);
        v18 += a13;
        --v90;
      }
      while (v90);
    }
  }
  else
  {
    if (v22 >= 2)
    {
      v93 = 1;
      v94 = v22;
      do
      {
        ++v93;
        v34 = v94 > 3;
        v94 >>= 1;
      }
      while (v34);
      v92 = v93 >> 1;
    }
    else
    {
      v92 = 0;
    }
    v95 = 0;
    do
    {
      v96 = 1 << v92;
      v97 = (1 << v92) | v95;
      if (v97 * v97 <= v22)
        v96 = 0;
      v95 = v97 - v96;
      --v92;
    }
    while (v92 != -1);
    if (v95 + v95 * v95 + 1 > v22)
      v98 = v95;
    else
      v98 = v95 + 1;
    v99 = (int)(16 * v98 / v26) >> (v25 >> 5);
    if (v99)
    {
      v100 = a1;
      if (a1 == 16)
      {
        v101 = 16 - v99;
        v102 = (unsigned __int8 *)v31 + 7;
        v103 = result + 7;
        do
        {
          *(v102 - 7) = (v101 * *(v102 - 7) + v99 * *(v103 - 7) + 8) >> 4;
          *(v102 - 6) = (v101 * *(v102 - 6) + v99 * *(v103 - 6) + 8) >> 4;
          *(v102 - 5) = (v101 * *(v102 - 5) + v99 * *(v103 - 5) + 8) >> 4;
          *(v102 - 4) = (v101 * *(v102 - 4) + v99 * *(v103 - 4) + 8) >> 4;
          *(v102 - 3) = (v101 * *(v102 - 3) + v99 * *(v103 - 3) + 8) >> 4;
          *(v102 - 2) = (v101 * *(v102 - 2) + v99 * *(v103 - 2) + 8) >> 4;
          *(v102 - 1) = (v101 * *(v102 - 1) + v99 * *(v103 - 1) + 8) >> 4;
          *v102 = (v101 * *v102 + v99 * *v103 + 8) >> 4;
          v102[1] = (v101 * v102[1] + v99 * v103[1] + 8) >> 4;
          v102[2] = (v101 * v102[2] + v99 * v103[2] + 8) >> 4;
          v102[3] = (v101 * v102[3] + v99 * v103[3] + 8) >> 4;
          v102[4] = (v101 * v102[4] + v99 * v103[4] + 8) >> 4;
          v102[5] = (v101 * v102[5] + v99 * v103[5] + 8) >> 4;
          v102[6] = (v101 * v102[6] + v99 * v103[6] + 8) >> 4;
          v102[7] = (v101 * v102[7] + v99 * v103[7] + 8) >> 4;
          v102[8] = (v101 * v102[8] + v99 * v103[8] + 8) >> 4;
          v102 += a12;
          v103 += v30;
          --v100;
        }
        while (v100);
        vp8_filter_by_weight8x8_c((uint64_t)a5, v23, (uint64_t)a10, a13, v99);
        return (unsigned __int8 *)vp8_filter_by_weight8x8_c((uint64_t)a6, v23, (uint64_t)a11, a13, v99);
      }
      else
      {
        vp8_filter_by_weight8x8_c((uint64_t)result, v30, (uint64_t)v31, a12, v99);
        vp8_filter_by_weight4x4_c((unsigned __int8 *)a5, v23, a10, a13, v99);
        return vp8_filter_by_weight4x4_c((unsigned __int8 *)a6, v23, a11, a13, v99);
      }
    }
  }
  return result;
}

uint64_t vp8_init_mode_costs(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  v3 = a1 + 171868;
  do
  {
    cost(v3 - 360, (uint64_t)vp8_bmode_tree, (uint64_t)&vp8_kf_bmode_prob + v2, 0, 0);
    cost(v3 - 320, (uint64_t)vp8_bmode_tree, (uint64_t)&vp8_kf_bmode_prob + v2 + 9, 0, 0);
    cost(v3 - 280, (uint64_t)vp8_bmode_tree, (uint64_t)&vp8_kf_bmode_prob + v2 + 18, 0, 0);
    cost(v3 - 240, (uint64_t)vp8_bmode_tree, (uint64_t)&vp8_kf_bmode_prob + v2 + 27, 0, 0);
    cost(v3 - 200, (uint64_t)vp8_bmode_tree, (uint64_t)&vp8_kf_bmode_prob + v2 + 36, 0, 0);
    cost(v3 - 160, (uint64_t)vp8_bmode_tree, (uint64_t)&vp8_kf_bmode_prob + v2 + 45, 0, 0);
    cost(v3 - 120, (uint64_t)vp8_bmode_tree, (uint64_t)&vp8_kf_bmode_prob + v2 + 54, 0, 0);
    cost(v3 - 80, (uint64_t)vp8_bmode_tree, (uint64_t)&vp8_kf_bmode_prob + v2 + 63, 0, 0);
    cost(v3 - 40, (uint64_t)vp8_bmode_tree, (uint64_t)&vp8_kf_bmode_prob + v2 + 72, 0, 0);
    cost(v3, (uint64_t)vp8_bmode_tree, (uint64_t)&vp8_kf_bmode_prob + v2 + 81, 0, 0);
    v2 += 90;
    v3 += 400;
  }
  while (v2 != 900);
  cost(a1 + 175508, (uint64_t)vp8_bmode_tree, a1 + 112738, 0, 0);
  cost(a1 + 175508, (uint64_t)vp8_sub_mv_ref_tree, a1 + 112754, 0, 0);
  cost(a1 + 171388, (uint64_t)vp8_ymode_tree, a1 + 112747, 0, 0);
  cost(a1 + 171348, (uint64_t)vp8_kf_ymode_tree, (uint64_t)vp8_kf_ymode_prob, 0, 0);
  cost(a1 + 171468, (uint64_t)vp8_uv_mode_tree, a1 + 112751, 0, 0);
  return cost(a1 + 171428, (uint64_t)vp8_uv_mode_tree, (uint64_t)vp8_kf_uv_mode_prob, 0, 0);
}

uint64_t vp8_cal_dissimilarity(uint64_t result)
{
  int *v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  __int16 *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 *v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  __int16 *v21;
  uint64_t v22;
  __int16 *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 *v27;
  uint64_t v28;
  __int16 *v29;
  uint64_t v30;
  __int16 *v31;
  uint64_t v32;
  __int16 *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  __int16 *v38;
  uint64_t v39;
  __int16 *v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  __int16 *v49;
  uint64_t v50;
  __int16 *v51;
  int v52;
  uint64_t v53;
  int v54;
  __int16 *v55;
  uint64_t v56;
  __int16 *v57;
  int v58;
  uint64_t v59;
  int v60;
  __int16 *v61;
  uint64_t v62;
  __int16 *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  __int16 *v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v1 = (int *)(result + 111060);
  v2 = *(_DWORD *)(result + 114716);
  if (v2 >= 2 && *(_DWORD *)(result + 114720) < v2 - 1)
  {
    v3 = *(_QWORD *)(result + 114736);
    v4 = *v1;
    *(_DWORD *)v3 = *v1;
    if (v4)
    {
      *(_DWORD *)(v3 + 4) = 0;
      *(_DWORD *)(v3 + 28) = *(_DWORD *)(result + 150852);
      *(_DWORD *)(v3 + 32) = *(_DWORD *)(result + 150856);
      *(_DWORD *)(v3 + 36) = *(_DWORD *)(result + 150860);
      v5 = *(_DWORD *)(result + 111076);
      if (v5 >= 1)
      {
        v6 = *(_DWORD *)(result + 111080);
        if (v6 >= 1)
        {
          v7 = 0;
          v8 = *(_DWORD **)(v3 + 56);
          v9 = *(_QWORD *)(result + 111128) + 76 * *(int *)(result + 111084);
          do
          {
            while (v6 < 1)
            {
              v9 += 76;
              if (++v7 >= v5)
                return result;
            }
            v10 = 0;
            v11 = (__int16 *)(v9 + 158);
            do
            {
              v13 = *((unsigned __int8 *)v11 - 80);
              if (!*((_BYTE *)v11 - 80))
              {
LABEL_10:
                v12 = 0x7FFFFFFF;
                goto LABEL_11;
              }
              v14 = *(_DWORD *)(result + 111084);
              v15 = LOBYTE(v11[-38 * v14 - 40]);
              if (*(_DWORD *)(result + 114440))
              {
                if (LOBYTE(v11[-38 * v14 - 40]))
                {
                  v16 = &v11[-38 * v14];
                  v17 = *(v16 - 39);
                  v101 = v17;
                  v18 = *(v16 - 38);
                  v93 = v18;
                  if (*(_DWORD *)(result + 111592 + 4 * v15) != *(_DWORD *)(result + 111592 + 4 * v13))
                  {
                    v101 = -v17;
                    v93 = -v18;
                  }
                  v19 = 1;
                  v20 = *((unsigned __int8 *)v11 - 156);
                  if (!*((_BYTE *)v11 - 156))
                  {
LABEL_41:
                    v38 = &v11[-38 * v14];
                    v39 = *((unsigned __int8 *)v38 - 156);
                    if (*((_BYTE *)v38 - 156))
                    {
                      v40 = &v11[-38 * v14];
                      v41 = *(v40 - 77);
                      v42 = 4 * v19;
                      *(int *)((char *)&v101 + v42) = v41;
                      v43 = *(v40 - 76);
                      *(int *)((char *)&v93 + v42) = v43;
                      if (*(_DWORD *)(result + 111592 + 4 * v39) != *(_DWORD *)(result + 111592 + 4 * v13))
                      {
                        *(&v101 + v19) = -v41;
                        *(&v93 + v19) = -v43;
                      }
                      ++v19;
                    }
                    v44 = v6 - 1;
                    if (v10 < v44)
                    {
                      v45 = *((unsigned __int8 *)v11 - 4);
                      if (*((_BYTE *)v11 - 4))
                      {
                        v46 = *(v11 - 1);
                        v47 = 4 * v19;
                        *(int *)((char *)&v101 + v47) = v46;
                        v48 = *v11;
                        *(int *)((char *)&v93 + v47) = v48;
                        if (*(_DWORD *)(result + 111592 + 4 * v45) != *(_DWORD *)(result + 111592 + 4 * v13))
                        {
                          *(&v101 + v19) = -v46;
                          *(&v93 + v19) = -v48;
                        }
                        ++v19;
                      }
                      v49 = &v11[-38 * v14];
                      v50 = *((unsigned __int8 *)v49 - 4);
                      if (*((_BYTE *)v49 - 4))
                      {
                        v51 = &v11[-38 * v14];
                        v52 = *(v51 - 1);
                        v53 = 4 * v19;
                        *(int *)((char *)&v101 + v53) = v52;
                        v54 = *v51;
                        *(int *)((char *)&v93 + v53) = v54;
                        if (*(_DWORD *)(result + 111592 + 4 * v50) != *(_DWORD *)(result + 111592 + 4 * v13))
                        {
                          *(&v101 + v19) = -v52;
                          *(&v93 + v19) = -v54;
                        }
                        ++v19;
                      }
                    }
                    if (v7 < *(_DWORD *)(result + 111076) - 1)
                    {
                      v55 = &v11[38 * v14];
                      v56 = *((unsigned __int8 *)v55 - 80);
                      if (*((_BYTE *)v55 - 80))
                      {
                        v57 = &v11[38 * v14];
                        v58 = *(v57 - 39);
                        v59 = 4 * v19;
                        *(int *)((char *)&v101 + v59) = v58;
                        v60 = *(v57 - 38);
                        *(int *)((char *)&v93 + v59) = v60;
                        if (*(_DWORD *)(result + 111592 + 4 * v56) != *(_DWORD *)(result + 111592 + 4 * v13))
                        {
                          *(&v101 + v19) = -v58;
                          *(&v93 + v19) = -v60;
                        }
                        ++v19;
                      }
                      v61 = &v11[38 * v14];
                      v62 = *((unsigned __int8 *)v61 - 156);
                      if (*((_BYTE *)v61 - 156))
                      {
                        v63 = &v11[38 * v14];
                        v64 = *(v63 - 77);
                        v65 = 4 * v19;
                        *(int *)((char *)&v101 + v65) = v64;
                        v66 = *(v63 - 76);
                        *(int *)((char *)&v93 + v65) = v66;
                        if (*(_DWORD *)(result + 111592 + 4 * v62) != *(_DWORD *)(result + 111592 + 4 * v13))
                        {
                          *(&v101 + v19) = -v64;
                          *(&v93 + v19) = -v66;
                        }
                        ++v19;
                      }
                      if (v10 < v44)
                      {
                        v67 = LOBYTE(v11[38 * v14 - 2]);
                        if (LOBYTE(v11[38 * v14 - 2]))
                        {
                          v68 = &v11[38 * v14];
                          v69 = *(v68 - 1);
                          v70 = 4 * v19;
                          *(int *)((char *)&v101 + v70) = v69;
                          v71 = *v68;
                          *(int *)((char *)&v93 + v70) = v71;
                          if (*(_DWORD *)(result + 111592 + 4 * v67) != *(_DWORD *)(result + 111592 + 4 * v13))
                          {
                            *(&v101 + v19) = -v69;
                            *(&v93 + v19) = -v71;
                          }
                          goto LABEL_67;
                        }
                      }
                    }
                    goto LABEL_68;
                  }
                }
                else
                {
                  v19 = 0;
                  v20 = *((unsigned __int8 *)v11 - 156);
                  if (!*((_BYTE *)v11 - 156))
                    goto LABEL_41;
                }
                v35 = *(v11 - 77);
                v36 = 4 * v19;
                *(int *)((char *)&v101 + v36) = v35;
                v37 = *(v11 - 76);
                *(int *)((char *)&v93 + v36) = v37;
                if (*(_DWORD *)(result + 111592 + 4 * v20) != *(_DWORD *)(result + 111592 + 4 * v13))
                {
                  *(&v101 + v19) = -v35;
                  *(&v93 + v19) = -v37;
                }
                ++v19;
                goto LABEL_41;
              }
              if (LOBYTE(v11[-38 * v14 - 40]))
              {
                v21 = &v11[-38 * v14];
                v101 = *(v21 - 39);
                v93 = *(v21 - 38);
                v19 = 1;
                if (!*((_BYTE *)v11 - 156))
                  goto LABEL_22;
LABEL_21:
                v22 = 4 * v19;
                *(int *)((char *)&v101 + v22) = *(v11 - 77);
                *(int *)((char *)&v93 + v22) = *(v11 - 76);
                ++v19;
                goto LABEL_22;
              }
              v19 = 0;
              if (*((_BYTE *)v11 - 156))
                goto LABEL_21;
LABEL_22:
              if (LOBYTE(v11[-38 * v14 - 78]))
              {
                v23 = &v11[-38 * v14];
                v24 = 4 * v19;
                *(int *)((char *)&v101 + v24) = *(v23 - 77);
                *(int *)((char *)&v93 + v24) = *(v23 - 76);
                ++v19;
              }
              v25 = v6 - 1;
              if (v10 < v25)
              {
                if (*((_BYTE *)v11 - 4))
                {
                  v26 = 4 * v19;
                  *(int *)((char *)&v101 + v26) = *(v11 - 1);
                  *(int *)((char *)&v93 + v26) = *v11;
                  ++v19;
                }
                if (LOBYTE(v11[-38 * v14 - 2]))
                {
                  v27 = &v11[-38 * v14];
                  v28 = 4 * v19;
                  *(int *)((char *)&v101 + v28) = *(v27 - 1);
                  *(int *)((char *)&v93 + v28) = *v27;
                  ++v19;
                }
              }
              if (v7 < *(_DWORD *)(result + 111076) - 1)
              {
                if (LOBYTE(v11[38 * v14 - 40]))
                {
                  v29 = &v11[38 * v14];
                  v30 = 4 * v19;
                  *(int *)((char *)&v101 + v30) = *(v29 - 39);
                  *(int *)((char *)&v93 + v30) = *(v29 - 38);
                  ++v19;
                }
                if (LOBYTE(v11[38 * v14 - 78]))
                {
                  v31 = &v11[38 * v14];
                  v32 = 4 * v19;
                  *(int *)((char *)&v101 + v32) = *(v31 - 77);
                  *(int *)((char *)&v93 + v32) = *(v31 - 76);
                  ++v19;
                }
                if (v10 < v25 && LOBYTE(v11[38 * v14 - 2]))
                {
                  v33 = &v11[38 * v14];
                  v34 = 4 * v19;
                  *(int *)((char *)&v101 + v34) = *(v33 - 1);
                  *(int *)((char *)&v93 + v34) = *v33;
LABEL_67:
                  ++v19;
                  goto LABEL_69;
                }
              }
LABEL_68:
              if (!v19)
                goto LABEL_10;
LABEL_69:
              v72 = v101;
              v73 = v93;
              if (v19 < 2)
              {
                v74 = v101;
                v75 = v93;
              }
              else
              {
                if (v102 >= v101)
                  v74 = v101;
                else
                  v74 = v102;
                if (v102 > v101)
                  v72 = v102;
                if (v94 >= v93)
                  v75 = v93;
                else
                  v75 = v94;
                if (v94 > v93)
                  v73 = v94;
                if (v19 != 2)
                {
                  v76 = v103 >= v74 ? v74 : v103;
                  if (v103 <= v72)
                    v74 = v76;
                  else
                    v72 = v103;
                  v77 = v95 >= v75 ? v75 : v95;
                  if (v95 <= v73)
                    v75 = v77;
                  else
                    v73 = v95;
                  if (v19 != 3)
                  {
                    v78 = v104 >= v74 ? v74 : v104;
                    if (v104 <= v72)
                      v74 = v78;
                    else
                      v72 = v104;
                    v79 = v96 >= v75 ? v75 : v96;
                    if (v96 <= v73)
                      v75 = v79;
                    else
                      v73 = v96;
                    if (v19 != 4)
                    {
                      v80 = v105 >= v74 ? v74 : v105;
                      if (v105 <= v72)
                        v74 = v80;
                      else
                        v72 = v105;
                      v81 = v97 >= v75 ? v75 : v97;
                      if (v97 <= v73)
                        v75 = v81;
                      else
                        v73 = v97;
                      if (v19 != 5)
                      {
                        v82 = v106 >= v74 ? v74 : v106;
                        if (v106 <= v72)
                          v74 = v82;
                        else
                          v72 = v106;
                        v83 = v98 >= v75 ? v75 : v98;
                        if (v98 <= v73)
                          v75 = v83;
                        else
                          v73 = v98;
                        if (v19 != 6)
                        {
                          v84 = v107 >= v74 ? v74 : v107;
                          if (v107 <= v72)
                            v74 = v84;
                          else
                            v72 = v107;
                          v85 = v99 >= v75 ? v75 : v99;
                          if (v99 <= v73)
                            v75 = v85;
                          else
                            v73 = v99;
                          if (v19 != 7)
                          {
                            if (v108 >= v74)
                              v86 = v74;
                            else
                              v86 = v108;
                            if (v108 <= v72)
                              v74 = v86;
                            else
                              v72 = v108;
                            if (v100 >= v75)
                              v87 = v75;
                            else
                              v87 = v100;
                            if (v100 <= v73)
                              v75 = v87;
                            else
                              v73 = v100;
                          }
                        }
                      }
                    }
                  }
                }
              }
              v88 = *(v11 - 39);
              v89 = v74 - v88;
              if (v89 < 0)
                v89 = -v89;
              v12 = v72 - v88;
              if (v12 < 0)
                v12 = -v12;
              if (v89 > v12)
                v12 = v89;
              v90 = *(v11 - 38);
              v91 = v75 - v90;
              if (v91 < 0)
                v91 = -v91;
              v92 = v73 - v90;
              if (v92 < 0)
                v92 = -v92;
              if (v91 > v92)
                v92 = v91;
              if (v12 <= v92)
                v12 = v92;
LABEL_11:
              *v8 = *((unsigned __int8 *)v11 - 82);
              v8[1] = v13;
              v8[2] = *(_DWORD *)(v11 - 39);
              v8[3] = v12;
              v8 += 4;
              ++v10;
              v6 = *(_DWORD *)(result + 111080);
              v11 += 38;
            }
            while (v10 < v6);
            v5 = *(_DWORD *)(result + 111076);
            v9 = (uint64_t)(v11 - 41);
            ++v7;
          }
          while (v7 < v5);
        }
      }
    }
  }
  return result;
}

__n128 vp8_save_layer_context(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  int v3;
  __n128 result;

  v1 = a1 + 216 * *(unsigned int *)(a1 + 149272) + 149280;
  *(_DWORD *)(v1 + 8) = *(_DWORD *)(a1 + 142756);
  v2 = *(_OWORD *)(a1 + 114360);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(a1 + 114344);
  *(_OWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 48) = *(_OWORD *)(a1 + 114376);
  *(_OWORD *)(v1 + 72) = *(_OWORD *)(a1 + 132112);
  *(_QWORD *)(v1 + 88) = *(_QWORD *)(a1 + 132144);
  *(_OWORD *)(v1 + 100) = *(_OWORD *)(a1 + 132156);
  *(_OWORD *)(v1 + 116) = *(_OWORD *)(a1 + 132064);
  *(_OWORD *)(v1 + 136) = *(_OWORD *)(a1 + 131920);
  *(_QWORD *)(v1 + 152) = *(_QWORD *)(a1 + 131936);
  v3 = *(_DWORD *)(a1 + 132024);
  *(_DWORD *)(v1 + 160) = *(_DWORD *)(a1 + 103884);
  *(_DWORD *)(v1 + 164) = v3;
  *(_QWORD *)(v1 + 168) = *(_QWORD *)(a1 + 132080);
  *(_DWORD *)(v1 + 176) = *(_DWORD *)(a1 + 111556);
  *(int32x2_t *)(v1 + 180) = vrev64_s32(*(int32x2_t *)(a1 + 143140));
  *(_DWORD *)(v1 + 188) = *(_DWORD *)(a1 + 142872);
  *(_QWORD *)(v1 + 208) = *(_QWORD *)(a1 + 131912);
  result = *(__n128 *)(a1 + 103608);
  *(__n128 *)(v1 + 192) = result;
  return result;
}

__n128 vp8_init_temporal_layer_context(uint64_t a1, _QWORD *a2, int a3, double a4, double a5, double a6)
{
  double v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  __n128 result;

  LODWORD(a6) = *(_DWORD *)(a1 + 4 * a3 + 114584);
  v6 = *(double *)(a1 + 132032) / (double)*(unint64_t *)&a6;
  *(double *)(a1 + 216 * a3 + 149280) = v6;
  v7 = *(_DWORD *)(a1 + 4 * a3 + 114520);
  v8 = 1000 * v7;
  v9 = v7 > 0x20C49B;
  v10 = 0x7FFFFFFFLL;
  if (v9)
    v11 = 0x7FFFFFFFLL;
  else
    v11 = v8;
  *(_DWORD *)(a1 + 216 * a3 + 149288) = v11;
  v12 = a2[10];
  v13 = a2[11];
  *(_QWORD *)(a1 + 216 * a3 + 149320) = v12;
  *(_QWORD *)(a1 + 216 * a3 + 149328) = v13;
  v14 = a2[12];
  *(_QWORD *)(a1 + 216 * a3 + 149336) = v14;
  v15 = (int)v12 * v11;
  if (v15 < 0x1F400000000)
    v10 = (int)v15 / 1000;
  *(_QWORD *)(a1 + 216 * a3 + 149296) = v10;
  v16 = (int)v13 * v11;
  v17 = (int)v16 / 1000;
  v9 = v16 < 0x1F400000000;
  v18 = 0x7FFFFFFFLL;
  if (v9)
    v18 = v17;
  v19 = v11 >> 3;
  if (!v13)
    v18 = v19;
  *(_QWORD *)(a1 + 216 * a3 + 149304) = v18;
  v20 = (int)v14 * v11;
  v21 = (int)v20 / 1000;
  v9 = v20 < 0x1F400000000;
  v22 = 0x7FFFFFFFLL;
  if (v9)
    v22 = v21;
  if (v14)
    v23 = v22;
  else
    v23 = v19;
  *(_QWORD *)(a1 + 216 * a3 + 149312) = v23;
  if (a3 >= 1)
    *(_DWORD *)(a1 + 216 * a3 + 149344) = llround((double)(1000* (*(_DWORD *)(a1 + 4 * a3 + 114520)- *(_DWORD *)(a1+ 4 * (a3 - 1)+ 114520)))/ (v6 - a4));
  v24 = a1 + 216 * a3 + 149280;
  v26 = *(_DWORD *)(a1 + 114396);
  v25 = *(_DWORD *)(a1 + 114400);
  *(_DWORD *)(v24 + 104) = v26;
  *(_DWORD *)(v24 + 128) = v26;
  *(int64x2_t *)(v24 + 72) = vdupq_n_s64(v10);
  *(_QWORD *)(v24 + 88) = 0;
  *(_DWORD *)(v24 + 112) = v25;
  *(_DWORD *)(v24 + 116) = 0;
  *(_QWORD *)(v24 + 120) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)(v24 + 136) = result;
  *(_QWORD *)(v24 + 152) = 0x3FF0000000000000;
  *(_DWORD *)(v24 + 164) = 0;
  return result;
}

uint64_t initialize_enc()
{
  pthread_once(&once_lock_7, (void (*)(void))setup_rtcd_internal_1);
  return pthread_once(&once_lock_1, vp8_init_intra_predictors_internal);
}

void vp8_set_speed_features(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  signed int *v16;
  signed int v17;
  signed int v18;
  int *v19;
  int v20;
  int v21;
  _DWORD *v22;
  int v23;
  _DWORD *v24;
  int v25;
  _DWORD *v26;
  int v27;
  int *v28;
  int v29;
  int v30;
  _DWORD *v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  int v36;
  char v38;
  int v39;
  _DWORD *v40;
  const float *v41;
  int v42;
  float32x4_t v43;
  int *v44;
  int v45;
  int v46;
  int *v47;
  int v48;
  int v49;
  int v51;
  int v52;
  int *v53;
  int v54;
  int v55;
  _DWORD *v56;
  int v57;
  int *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  int32x4_t *v65;
  int32x4_t v66;
  uint64_t v67;
  int32x4_t v68;
  int v69;
  uint64_t v70;
  int *v71;
  int v72;
  unsigned int v73;
  int v74;
  BOOL v75;
  int v76;
  void *v77;

  v2 = a1 + 142784;
  v3 = a1 + 103784;
  v4 = (_DWORD *)(a1 + 82528);
  v5 = *(_DWORD *)(a1 + 142784);
  v6 = *(_DWORD *)(a1 + 142788);
  v7 = *(_DWORD *)(a1 + 142888);
  *(_OWORD *)(a1 + 115184) = 0u;
  *(_OWORD *)(a1 + 115200) = 0u;
  *(_OWORD *)(a1 + 115216) = 0u;
  *(_OWORD *)(a1 + 115232) = 0u;
  *(_OWORD *)(a1 + 115248) = 0u;
  *(_DWORD *)(a1 + 103784) = 0;
  *(_DWORD *)(a1 + 108016) = 0;
  *(_QWORD *)&v8 = 0x100000001;
  *((_QWORD *)&v8 + 1) = 0x100000001;
  *(_DWORD *)(a1 + 142912) = 1;
  *(_OWORD *)(a1 + 142880) = v8;
  *(_OWORD *)(a1 + 142896) = v8;
  v9 = a1 + 73728;
  v10 = *(_DWORD *)(a1 + 142876);
  *(_OWORD *)(a1 + 142996) = xmmword_208F3D760;
  *(_QWORD *)(a1 + 143012) = 0x100000001;
  if ((v10 & 1) != 0)
    v11 = 2;
  else
    v11 = 1;
  v12 = ((v10 >> 2) & 1) + ((v10 >> 1) & 1) + v11;
  if (v5 >= 5)
    v13 = 5;
  else
    v13 = v5;
  if (v6 == 2)
    v14 = v5 + 7;
  else
    v14 = v13 + 1;
  if (v6)
    v15 = v14;
  else
    v15 = 0;
  *(_QWORD *)(a1 + 142916) = 0;
  *(_QWORD *)(a1 + 142924) = 0;
  v16 = (signed int *)&byte_208F3D814;
  do
  {
    v17 = v16[3];
    v16 += 2;
  }
  while (v17 <= v15);
  v18 = *v16;
  *(_DWORD *)(a1 + 142948) = *v16;
  *(_DWORD *)(a1 + 142952) = v18;
  *(int32x4_t *)(a1 + 142932) = vdupq_n_s32(v18);
  v19 = (int *)&unk_208F3D83C;
  do
  {
    v20 = v19[3];
    v19 += 2;
  }
  while (v20 <= v15);
  v21 = *v19;
  *(_DWORD *)(a1 + 142956) = v21;
  *(_DWORD *)(a1 + 142960) = v21;
  v22 = &unk_208F3D86C;
  do
  {
    v23 = v22[3];
    v22 += 2;
  }
  while (v23 <= v15);
  *(_DWORD *)(a1 + 142992) = *v22;
  v24 = &unk_208F3D8A4;
  do
  {
    v25 = v24[3];
    v24 += 2;
  }
  while (v25 <= v15);
  *(_DWORD *)(a1 + 142964) = *v24;
  v26 = &unk_208F3D8DC;
  do
  {
    v27 = v26[3];
    v26 += 2;
  }
  while (v27 <= v15);
  *(_DWORD *)(a1 + 142968) = *v26;
  v28 = (int *)&unk_208F3D8F4;
  do
  {
    v29 = v28[3];
    v28 += 2;
  }
  while (v29 <= v15);
  v30 = *v28;
  *(_DWORD *)(a1 + 142972) = v30;
  *(_DWORD *)(a1 + 142976) = v30;
  v31 = &unk_208F3D92C;
  do
  {
    v32 = v31[3];
    v31 += 2;
  }
  while (v32 <= v15);
  *(_DWORD *)(a1 + 142980) = *v31;
  v33 = (int *)&unk_208F3D974;
  do
  {
    v34 = v33[3];
    v33 += 2;
  }
  while (v34 <= v15);
  v35 = *v33;
  *(_DWORD *)(a1 + 142984) = v35;
  *(_DWORD *)(a1 + 142988) = v35;
  if (v5 <= 6)
  {
    v36 = v10 & 3;
    if (*(_DWORD *)(a1 + 114516) >= 2u && v36 == 3)
    {
      if (*(_DWORD *)(a1 + 150864) == 2)
        v38 = 3;
      else
        v38 = 1;
      v39 = v18 >> v38;
      *(_DWORD *)(a1 + 142932) = v39;
      *(_DWORD *)(a1 + 142936) = v39;
      *(_DWORD *)(a1 + 142948) = v39;
    }
  }
  *(_DWORD *)(a1 + 115232) = 0;
  *(_QWORD *)(a1 + 115184) = 0;
  *(_QWORD *)(a1 + 115192) = 0;
  v40 = &unk_208F3DA1C;
  v41 = (const float *)&unk_208F3DA1C;
  do
  {
    v42 = *((_DWORD *)v41 + 3);
    v41 += 2;
  }
  while (v42 <= v15);
  v43 = vld1q_dup_f32(v41);
  *(float32x4_t *)(a1 + 115200) = v43;
  v44 = (int *)&unk_208F3D9BC;
  do
  {
    v45 = v44[3];
    v44 += 2;
  }
  while (v45 <= v15);
  v46 = *v44;
  *(_DWORD *)(a1 + 115220) = v46;
  *(_DWORD *)(a1 + 115216) = v46;
  v47 = (int *)&unk_208F3D9F4;
  do
  {
    v48 = v47[3];
    v47 += 2;
  }
  while (v48 <= v15);
  v49 = *v47;
  *(_DWORD *)(a1 + 115260) = v49;
  *(_DWORD *)(a1 + 115228) = v49;
  *(_DWORD *)(a1 + 115224) = v49;
  if (v6 == 2 && v5 == 10)
    v51 = 16;
  else
    v51 = v15;
  do
  {
    v52 = v40[3];
    v40 += 2;
  }
  while (v52 <= v51);
  *(_DWORD *)(a1 + 115236) = *v40;
  v53 = (int *)&unk_208F3DA3C;
  do
  {
    v54 = v53[3];
    v53 += 2;
  }
  while (v54 <= v15);
  v55 = *v53;
  *(_DWORD *)(a1 + 115244) = v55;
  *(_DWORD *)(a1 + 115240) = v55;
  v56 = &unk_208F3DA74;
  do
  {
    v57 = v56[3];
    v56 += 2;
  }
  while (v57 <= v15);
  *(_DWORD *)(a1 + 115248) = *v56;
  v58 = (int *)&unk_208F3DA9C;
  do
  {
    v59 = v58[3];
    v58 += 2;
  }
  while (v59 <= v15);
  v60 = *v58;
  *(_DWORD *)(a1 + 115256) = *v58;
  *(_DWORD *)(a1 + 115252) = v60;
  v61 = 1;
  v62 = 1;
  if (v6 == 2)
  {
    *(_DWORD *)(a1 + 143004) = 0;
    *(_QWORD *)(a1 + 142896) = 1;
    *(_DWORD *)(a1 + 142904) = 1;
    *(_DWORD *)(a1 + 142884) = 1;
    if (v5 >= 1)
    {
      *(_QWORD *)(a1 + 142888) = 0;
      *(_QWORD *)(a1 + 143008) = 1;
      *(_DWORD *)(a1 + 143000) = 1;
      if (v5 < 3
        || (*(_DWORD *)(a1 + 142896) = 0, v5 == 3)
        || (*(_DWORD *)(a1 + 142880) = 0, *(_DWORD *)(a1 + 142896) = 1, v5 < 5)
        || (*(_DWORD *)(a1 + 142896) = 0,
            v62 = 2,
            *(_DWORD *)(a1 + 142884) = 2,
            *(_DWORD *)(a1 + 142904) = 0,
            v5 < 7))
      {
        v61 = 0;
      }
      else
      {
        if (*(int *)(a1 + 114468) <= 2000)
          v63 = 2000;
        else
          v63 = *(_DWORD *)(a1 + 114468);
        v64 = v63 >> 7;
        v65 = (int32x4_t *)(a1 + 103904);
        v66 = 0uLL;
        v67 = v64 & 0xFFFFF8;
        v68 = 0uLL;
        do
        {
          v66 = vaddq_s32(v65[-1], v66);
          v68 = vaddq_s32(*v65, v68);
          v65 += 2;
          v67 -= 8;
        }
        while (v67);
        v69 = vaddvq_s32(vaddq_s32(v68, v66));
        v70 = v64 - (v64 & 0xFFFFF8);
        if (v70)
        {
          v71 = (int *)(((v63 >> 5) & 0x7FFFFE0) + a1 + 103888);
          do
          {
            v72 = *v71++;
            v69 += v72;
            --v70;
          }
          while (v70);
        }
        v73 = v63 >> 17;
        if (!v73)
        {
          do
          {
            v73 += *(_DWORD *)(a1 + 103888 + 4 * v64);
            if (10 * v73 >= (*(_DWORD *)(a1 + 111072) - v69) * (v5 - 6))
              break;
            ++v64;
          }
          while (v64 != 1024);
        }
        v74 = ((_DWORD)v64 << 7) - 128;
        if (v74 <= 2000)
          v74 = 2000;
        if (v12 >= 2)
        {
          *(_DWORD *)(a1 + 142968) = v74;
          *(_DWORD *)(a1 + 142924) = v74 >> 1;
          *(_DWORD *)(a1 + 142928) = v74 >> 1;
          if (v12 != 2)
          {
            *(_DWORD *)(a1 + 142972) = 2 * v74;
            *(_DWORD *)(a1 + 142936) = v74;
            *(_DWORD *)(a1 + 142948) = v74;
            if (v12 >= 4)
            {
              *(_DWORD *)(a1 + 142976) = 2 * v74;
              *(_DWORD *)(a1 + 142944) = v74;
              *(_DWORD *)(a1 + 142952) = v74;
            }
          }
        }
        *(_DWORD *)(a1 + 143016) = 0;
        v61 = 0;
        if (v5 >= 9)
          *(_DWORD *)(a1 + 142912) = 0;
        v62 = 2;
      }
    }
    if (*(_DWORD *)(a1 + 113856))
      v75 = 0;
    else
      v75 = v5 <= 13;
    v76 = !v75;
    *(_DWORD *)(a1 + 111152) = v76;
    if (v5 >= 15)
      *(_DWORD *)(a1 + 142908) = 0;
    bzero((void *)(a1 + 103888), 0x1000uLL);
    if (*(_DWORD *)(v2 + 24) != 1)
    {
LABEL_96:
      if (v62 != 1)
        goto LABEL_98;
      goto LABEL_97;
    }
  }
  else if (*(_DWORD *)(a1 + 142808) != 1)
  {
    goto LABEL_96;
  }
  v61 = 0;
  *(_DWORD *)(v2 + 220) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  if (v62 == 1)
  {
LABEL_97:
    vp8_init3smotion_compensation(v9, *(_DWORD *)(a1 + 160 * *(int *)(v3 + 6764) + 109904));
    v61 = *(_DWORD *)(v2 + 104);
  }
LABEL_98:
  *(_QWORD *)(v3 + 4208) = vp8_short_fdct8x4_neon;
  *(_QWORD *)(v3 + 4200) = vp8_short_fdct4x4_neon;
  *(_QWORD *)(v3 + 4216) = vp8_short_walsh4x4_neon;
  v77 = vp8_regular_quantize_b_c;
  if (!v61)
    v77 = vp8_fast_quantize_b_neon;
  *(_QWORD *)(v3 + 4224) = v77;
  if (v61 != v7)
    vp8cx_init_quantizer((_DWORD *)a1);
  if (*(_DWORD *)(v2 + 120) != 1)
  {
    if (*(_DWORD *)(v2 + 128))
    {
      *(_QWORD *)(v2 + 680) = vp8_find_best_sub_pixel_step;
      if (*(_DWORD *)(v2 + 220) == 1)
        goto LABEL_112;
    }
    else
    {
      if (!*(_DWORD *)(v2 + 124))
      {
        *(_QWORD *)(v2 + 680) = vp8_skip_fractional_mv_step;
        if (*(_DWORD *)(v2 + 220) != 1)
          goto LABEL_113;
        goto LABEL_112;
      }
      *(_QWORD *)(v2 + 680) = vp8_find_best_half_pixel_step;
      if (*(_DWORD *)(v2 + 220) == 1)
        goto LABEL_112;
    }
LABEL_113:
    *v4 = 0;
    if (!*(_DWORD *)(v3 + 7316))
      return;
    goto LABEL_114;
  }
  *(_QWORD *)(v2 + 680) = vp8_find_best_sub_pixel_step_iteratively;
  if (*(_DWORD *)(v2 + 220) != 1)
    goto LABEL_113;
LABEL_112:
  if (*(_DWORD *)(v2 + 24) == 1)
    goto LABEL_113;
  *v4 = 1;
  if (*(_DWORD *)(v3 + 7316))
LABEL_114:
    *(_QWORD *)(v2 + 680) = vp8_skip_fractional_mv_step;
}

uint64_t vp8_alloc_compressor_data(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  void *v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  void *v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  size_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  size_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  size_t v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  size_t v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  size_t v52;
  void *v53;
  _QWORD *v54;
  uint64_t v55;
  size_t v56;
  uint64_t result;
  unint64_t v58;
  uint64_t v59;

  v2 = a1 + 109856;
  v3 = (_QWORD *)(a1 + 82312);
  v4 = a1 + 108032;
  v5 = *(_DWORD *)(a1 + 109856);
  v6 = *(_DWORD *)(a1 + 109860);
  if (vp8_alloc_frame_buffers(a1 + 108032, v5, v6))
    vpx_internal_error(v4, 2, "Failed to allocate frame buffers");
  v7 = v3[1];
  if (v7)
    free(*(void **)(v7 - 8));
  v8 = *(_DWORD *)(v2 + 1224) + 1 + (*(_DWORD *)(v2 + 1224) + 1) * *(_DWORD *)(v2 + 1220);
  if ((v8 & 0x80000000) == 0
    && (v9 = 132 * v8, (v10 = malloc_type_malloc(v9 + 23, 0x74AD08B5uLL)) != 0)
    && (v11 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v11 - 8) = v10, v11))
  {
    bzero((void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0), v9);
    *v3 = v11 + 132 * *(int *)(v2 + 1228) + 132;
    v3[1] = v11;
  }
  else
  {
    v3[1] = 0;
    vpx_internal_error(v4, 2, "Failed to allocate partition data");
  }
  v12 = (v5 + 15) & 0xFFFFFFF0;
  v13 = (v6 + 15) & 0xFFFFFFF0;
  if (*(_QWORD *)(v2 + 5232))
  {
    v14 = *(_QWORD *)(v2 + 5224);
    if (v14)
      free(*(void **)(v14 - 8));
  }
  *(_OWORD *)(a1 + 115120) = 0u;
  *(_OWORD *)(a1 + 115136) = 0u;
  *(_OWORD *)(a1 + 115088) = 0u;
  *(_OWORD *)(a1 + 115104) = 0u;
  *(_OWORD *)(a1 + 115056) = 0u;
  *(_OWORD *)(a1 + 115072) = 0u;
  *(_OWORD *)(a1 + 115024) = 0u;
  *(_OWORD *)(a1 + 115040) = 0u;
  *(_OWORD *)(a1 + 114992) = 0u;
  *(_OWORD *)(a1 + 115008) = 0u;
  if (vp8_yv12_realloc_frame_buffer(a1 + 114992, v12, v13, 32))
    vpx_internal_error(v4, 2, "Failed to allocate last frame buffer");
  if (*(_QWORD *)(v2 + 5032))
  {
    v15 = *(_QWORD *)(v2 + 5024);
    if (v15)
      free(*(void **)(v15 - 8));
  }
  *(_OWORD *)(a1 + 114920) = 0u;
  *(_OWORD *)(a1 + 114936) = 0u;
  *(_OWORD *)(a1 + 114888) = 0u;
  *(_OWORD *)(a1 + 114904) = 0u;
  *(_OWORD *)(a1 + 114856) = 0u;
  *(_OWORD *)(a1 + 114872) = 0u;
  *(_OWORD *)(a1 + 114824) = 0u;
  *(_OWORD *)(a1 + 114840) = 0u;
  *(_OWORD *)(a1 + 114792) = 0u;
  *(_OWORD *)(a1 + 114808) = 0u;
  if (vp8_yv12_realloc_frame_buffer(a1 + 114792, v12, v13, 32))
    vpx_internal_error(v4, 2, "Failed to allocate scaled source buffer");
  v16 = (unint64_t *)(a1 + 148168);
  v17 = (_DWORD *)(a1 + 143020);
  v18 = *(_QWORD *)(v2 + 5296);
  if (v18)
    free(*(void **)(v18 - 8));
  v19 = *(_DWORD *)(v2 + 1224);
  v20 = 384 * *(_DWORD *)(v2 + 1220) * v19;
  v21 = malloc_type_malloc(((unint64_t)((3 * *(_DWORD *)(v2 + 1220) * v19) & 0x1FFFFFF) << 11) | 0x17, 0x74AD08B5uLL);
  if (v21)
  {
    v22 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v22 - 8) = v21;
    if (v22)
    {
      bzero((void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF0), 16 * v20);
      *(_QWORD *)(v2 + 5296) = v22;
      *v17 = 0;
      v23 = *(_QWORD *)(a1 + 148176);
      if (!v23)
        goto LABEL_28;
      goto LABEL_27;
    }
  }
  *(_QWORD *)(v2 + 5296) = 0;
  vpx_internal_error(v4, 2, "Failed to allocate cpi->tok");
  *v17 = 0;
  v23 = *(_QWORD *)(a1 + 148176);
  if (v23)
LABEL_27:
    free(*(void **)(v23 - 8));
LABEL_28:
  v24 = *(int *)(v2 + 1224) * (uint64_t)*(int *)(v2 + 1220);
  if ((v24 & 0x80000000) == 0)
  {
    v25 = malloc_type_malloc(v24 + 23, 0x74AD08B5uLL);
    if (v25)
    {
      v26 = ((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v26 - 8) = v25;
      if (v26)
      {
        bzero((void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0), v24);
        *(_QWORD *)(a1 + 148176) = v26;
        v27 = *(_DWORD *)(v2 + 1224) * *(_DWORD *)(v2 + 1220);
        *(_DWORD *)(a1 + 148184) = v27;
        v28 = *v16;
        if (!*v16)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
  }
  *(_QWORD *)(a1 + 148176) = 0;
  vpx_internal_error(v4, 2, "Failed to allocate cpi->gf_active_flags");
  v27 = *(_DWORD *)(v2 + 1224) * *(_DWORD *)(v2 + 1220);
  *(_DWORD *)(a1 + 148184) = v27;
  v28 = *v16;
  if (*v16)
  {
LABEL_34:
    free(*(void **)(v28 - 8));
    v27 = *(_DWORD *)(v2 + 1224) * *(_DWORD *)(v2 + 1220);
  }
LABEL_35:
  if ((v27 & 0x80000000) == 0)
  {
    v29 = 4 * v27;
    v30 = malloc_type_malloc(v29 + 23, 0x74AD08B5uLL);
    if (v30)
    {
      v31 = ((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v31 - 8) = v30;
      if (v31)
      {
        bzero((void *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF0), v29);
        *v16 = v31;
        v32 = *(_QWORD *)(a1 + 148192);
        if (!v32)
          goto LABEL_42;
        goto LABEL_41;
      }
    }
  }
  *v16 = 0;
  vpx_internal_error(v4, 2, "Failed to allocate cpi->mb_activity_map");
  v32 = *(_QWORD *)(a1 + 148192);
  if (v32)
LABEL_41:
    free(*(void **)(v32 - 8));
LABEL_42:
  v33 = *(_DWORD *)(v2 + 1224) + 2;
  if (((v33 * (*(_DWORD *)(v2 + 1220) + 2)) & 0x80000000) == 0)
  {
    v34 = 4 * (v33 * (*(_DWORD *)(v2 + 1220) + 2));
    v35 = malloc_type_malloc(v34 + 23, 0x74AD08B5uLL);
    if (v35)
    {
      v36 = ((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v36 - 8) = v35;
      if (v36)
      {
        bzero((void *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF0), v34);
        *(_QWORD *)(a1 + 148192) = v36;
        v37 = *(_QWORD *)(a1 + 148200);
        if (!v37)
          goto LABEL_49;
        goto LABEL_48;
      }
    }
  }
  *(_QWORD *)(a1 + 148192) = 0;
  vpx_internal_error(v4, 2, "Failed to allocate cpi->lfmv");
  v37 = *(_QWORD *)(a1 + 148200);
  if (v37)
LABEL_48:
    free(*(void **)(v37 - 8));
LABEL_49:
  v38 = *(_DWORD *)(v2 + 1224) + 2;
  if (((v38 * (*(_DWORD *)(v2 + 1220) + 2)) & 0x80000000) == 0)
  {
    v39 = 4 * (v38 * (*(_DWORD *)(v2 + 1220) + 2));
    v40 = malloc_type_malloc(v39 + 23, 0x74AD08B5uLL);
    if (v40)
    {
      v41 = ((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v41 - 8) = v40;
      if (v41)
      {
        bzero((void *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF0), v39);
        *(_QWORD *)(a1 + 148200) = v41;
        v42 = *(_QWORD *)(a1 + 148208);
        if (!v42)
          goto LABEL_56;
        goto LABEL_55;
      }
    }
  }
  *(_QWORD *)(a1 + 148200) = 0;
  vpx_internal_error(v4, 2, "Failed to allocate cpi->lf_ref_frame_sign_bias");
  v42 = *(_QWORD *)(a1 + 148208);
  if (v42)
LABEL_55:
    free(*(void **)(v42 - 8));
LABEL_56:
  v43 = *(_DWORD *)(v2 + 1224) + 2;
  if (v43 * (*(_DWORD *)(v2 + 1220) + 2) < 0
    || (v44 = 4 * (v43 * (*(_DWORD *)(v2 + 1220) + 2)),
        (v45 = malloc_type_malloc(v44 + 23, 0x74AD08B5uLL)) == 0)
    || (v46 = ((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v46 - 8) = v45, !v46))
  {
    *(_QWORD *)(a1 + 148208) = 0;
    vpx_internal_error(v4, 2, "Failed to allocate cpi->lf_ref_frame");
    v47 = *(_QWORD *)(a1 + 143040);
    if (!v47)
      goto LABEL_63;
    goto LABEL_62;
  }
  bzero((void *)(((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF0), v44);
  *(_QWORD *)(a1 + 148208) = v46;
  v47 = *(_QWORD *)(a1 + 143040);
  if (v47)
LABEL_62:
    free(*(void **)(v47 - 8));
LABEL_63:
  v48 = *(int *)(v2 + 1224) * (uint64_t)*(int *)(v2 + 1220);
  if ((_DWORD)v48)
  {
    if ((v48 & 0x80000000) != 0
      || v48 + 23 > 0x10000000000
      || (v49 = malloc_type_malloc(v48 + 23, 0x74AD08B5uLL)) == 0)
    {
LABEL_72:
      *(_QWORD *)(a1 + 143040) = 0;
      vpx_internal_error(v4, 2, "Failed to allocate cpi->segmentation_map");
      *(_DWORD *)(a1 + 143092) = 0;
      v51 = *(_QWORD *)(a1 + 143072);
      if (!v51)
        goto LABEL_74;
      goto LABEL_73;
    }
  }
  else
  {
    v49 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
    if (!v49)
      goto LABEL_72;
  }
  v50 = ((unint64_t)v49 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v50 - 8) = v49;
  if (!v50)
    goto LABEL_72;
  bzero((void *)(((unint64_t)v49 + 23) & 0xFFFFFFFFFFFFFFF0), v48);
  *(_QWORD *)(a1 + 143040) = v50;
  *(_DWORD *)(a1 + 143092) = 0;
  v51 = *(_QWORD *)(a1 + 143072);
  if (v51)
LABEL_73:
    free(*(void **)(v51 - 8));
LABEL_74:
  v52 = *(int *)(v2 + 1224) * (uint64_t)*(int *)(v2 + 1220);
  if ((_DWORD)v52)
  {
    if ((v52 & 0x80000000) != 0)
      goto LABEL_82;
    if (v52 + 23 > 0x10000000000)
      goto LABEL_82;
    v53 = malloc_type_malloc(v52 + 23, 0x74AD08B5uLL);
    if (!v53)
      goto LABEL_82;
  }
  else
  {
    v53 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
    if (!v53)
      goto LABEL_82;
  }
  v54 = (_QWORD *)(((unint64_t)v53 + 23) & 0xFFFFFFFFFFFFFFF0);
  *(v54 - 1) = v53;
  if (v54)
  {
    bzero((void *)(((unint64_t)v53 + 23) & 0xFFFFFFFFFFFFFFF0), v52);
    *(_QWORD *)(a1 + 143072) = v54;
    goto LABEL_83;
  }
LABEL_82:
  *(_QWORD *)(a1 + 143072) = 0;
  vpx_internal_error(v4, 2, "Failed to allocate cpi->active_map");
  v54 = *(_QWORD **)(a1 + 143072);
LABEL_83:
  memset(v54, 1, *(int *)(v2 + 1224) * (uint64_t)*(int *)(v2 + 1220));
  if ((int)v12 <= 639)
  {
    *(_DWORD *)(a1 + 143180) = 1;
    v55 = *(_QWORD *)(a1 + 143272);
    if (!v55)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v12 <= 0x500)
  {
    *(_DWORD *)(a1 + 143180) = 4;
    v55 = *(_QWORD *)(a1 + 143272);
    if (!v55)
      goto LABEL_94;
    goto LABEL_93;
  }
  if (v12 <= 0xA00)
  {
    *(_DWORD *)(a1 + 143180) = 8;
    v55 = *(_QWORD *)(a1 + 143272);
    if (!v55)
      goto LABEL_94;
    goto LABEL_93;
  }
  *(_DWORD *)(a1 + 143180) = 16;
  v55 = *(_QWORD *)(a1 + 143272);
  if (v55)
LABEL_93:
    free(*(void **)(v55 - 8));
LABEL_94:
  v56 = 16 * *(int *)(v2 + 1220) + 23;
  if (v56 <= 0x10000000000 && (result = (uint64_t)malloc_type_malloc(v56, 0x74AD08B5uLL)) != 0)
  {
    v58 = (result + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v58 - 8) = result;
    *(_QWORD *)(a1 + 143272) = v58;
    if (v58)
    {
      if (*(int *)(v2 + 4432) < 1)
        return result;
      goto LABEL_101;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 143272) = 0;
  }
  result = vpx_internal_error(v4, 2, "Failed to allocate cpi->tplist");
  if (*(int *)(v2 + 4432) < 1)
    return result;
LABEL_101:
  v59 = a1 + 148232;
  vp8_denoiser_free(v59);
  result = vp8_denoiser_allocate(v59, v12, v13, *(_DWORD *)(v2 + 1220), *(_DWORD *)(v2 + 1224), *(_DWORD *)(v2 + 4432));
  if ((_DWORD)result)
    return vpx_internal_error(v4, 2, "Failed to allocate denoiser");
  return result;
}

uint64_t vp8_change_config(uint64_t result, int *__src)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  const float *v38;
  float32x4_t v39;
  int v40;
  double v41;
  double v42;
  unsigned int v43;
  double v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  double v60;
  double v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  _BOOL4 v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  _OWORD *v72;
  _OWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  _QWORD *v89;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  __int128 v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  int v98;
  int v99;
  _QWORD *v100;
  int v101;
  uint64_t v102;
  int *v103;
  double v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;

  if (!result || !__src)
    return result;
  v3 = result;
  v4 = result + 131916;
  v5 = (uint64_t *)(result + 114344);
  v6 = (_DWORD *)(result + 103884);
  v7 = *__src;
  if (*(_DWORD *)(result + 113856) != *__src)
  {
    *(_DWORD *)(result + 113856) = v7;
    v8 = v7 - 1;
    if (v8 > 2)
    {
      v10 = 0;
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v9 = 4 * (int)v8;
      v10 = *(_DWORD *)((char *)&unk_208F3DEF0 + v9);
      v11 = (_DWORD *)((char *)&unk_208F3DEE4 + v9);
      v12 = *(_DWORD *)((char *)&unk_208F3DEFC + v9);
      HIDWORD(v13) = 1;
      LODWORD(v13) = *v11;
    }
    *(_DWORD *)(result + 111152) = v10;
    *(_QWORD *)(result + 111092) = v13;
    *(_DWORD *)(result + 111100) = v12;
  }
  v14 = (_DWORD *)(result + 180172);
  v15 = *(_DWORD *)(result + 114268);
  v16 = *(_DWORD *)(result + 114272);
  v17 = *(int *)(result + 114516);
  memcpy((void *)(result + 114264), __src, 0x1E0uLL);
  v18 = v6[2607];
  switch(v18)
  {
    case 0:
      *(_DWORD *)(v4 + 10892) = 0;
      *(_DWORD *)(v4 + 10872) = 2;
      v19 = v6[2603];
      if (v19 <= -17)
      {
        v20 = -16;
        goto LABEL_26;
      }
      if (v19 < 17)
        goto LABEL_27;
      v20 = 16;
      goto LABEL_26;
    case 1:
      *(_DWORD *)(v4 + 10892) = 0;
      *(_DWORD *)(v4 + 10872) = 1;
      v22 = v6[2603];
      if (v22 > -6)
      {
        if (v22 < 6)
          goto LABEL_27;
        v20 = 5;
      }
      else
      {
        v20 = -5;
      }
LABEL_26:
      v6[2603] = v20;
LABEL_27:
      *(_DWORD *)(v4 + 10884) = 1;
LABEL_28:
      v23 = __src[32];
      v24 = q_trans[__src[33]];
      *((_DWORD *)v5 + 13) = v24;
      v25 = q_trans[__src[34]];
      *((_DWORD *)v5 + 14) = v25;
      v26 = q_trans[*((int *)v5 + 15)];
      *((_DWORD *)v5 + 15) = v26;
      if (v23 < 0)
        goto LABEL_39;
      v27 = __src[33];
      if ((v27 & 0x80000000) != 0)
      {
        *((_DWORD *)v5 + 12) = 0;
        v28 = __src[46];
        if ((v28 & 0x80000000) == 0)
        {
LABEL_31:
          *((_DWORD *)v5 + 26) = q_trans[v28];
          v29 = __src[47];
          if ((v29 & 0x80000000) == 0)
            goto LABEL_32;
LABEL_36:
          *((_DWORD *)v5 + 27) = 0;
          v30 = __src[48];
          if ((v30 & 0x80000000) == 0)
            goto LABEL_33;
          goto LABEL_37;
        }
      }
      else
      {
        *((_DWORD *)v5 + 12) = q_trans[v27];
        v28 = __src[46];
        if ((v28 & 0x80000000) == 0)
          goto LABEL_31;
      }
      *((_DWORD *)v5 + 26) = 0;
      v29 = __src[47];
      if ((v29 & 0x80000000) != 0)
        goto LABEL_36;
LABEL_32:
      *((_DWORD *)v5 + 27) = q_trans[v29];
      v30 = __src[48];
      if ((v30 & 0x80000000) == 0)
      {
LABEL_33:
        v31 = q_trans[v30];
        goto LABEL_38;
      }
LABEL_37:
      v31 = 0;
LABEL_38:
      *((_DWORD *)v5 + 28) = v31;
LABEL_39:
      *(_DWORD *)(v3 + 180176) = 0;
      v32 = *((_DWORD *)v5 + 25);
      if (!v32)
        v32 = 7;
      *(_DWORD *)(v4 + 60) = v32;
      if (!*((_DWORD *)v5 + 32) && !v18 && v6[2612] == 1)
        *(_DWORD *)(v4 + 60) = *(_DWORD *)(v4 + 11240);
      v33 = *((_DWORD *)v5 + 30);
      if (v33 <= 3)
        v6[2494] = v33;
      v34 = *(_BYTE *)(v3 + 81920) != 0;
      *(_BYTE *)(v3 + 81921) = v34;
      *(_BYTE *)(v3 + 81922) = v34;
      *(_WORD *)(v3 + 81935) = 257;
      *(_QWORD *)(v3 + 81945) = 0;
      *(_DWORD *)(v3 + 81937) = 0;
      *(_DWORD *)(v3 + 81941) = -16908286;
      *(_BYTE *)(v3 + 81949) = 4;
      if (v18)
        v35 = -2;
      else
        v35 = -12;
      *(_BYTE *)(v3 + 81950) = v35;
      *(_WORD *)(v3 + 81951) = 1026;
      if (*v14)
      {
        if (*((int *)v5 + 12) >= 128)
          goto LABEL_52;
LABEL_55:
        if (!v6[2612])
          goto LABEL_53;
        goto LABEL_56;
      }
      v38 = (const float *)v5 + 31;
      v39 = vld1q_dup_f32(v38);
      *(float32x4_t *)(v4 + 11140) = v39;
      if (*((int *)v5 + 12) < 128)
        goto LABEL_55;
LABEL_52:
      *((_DWORD *)v5 + 12) = 127;
      if (!v6[2612])
      {
LABEL_53:
        *((_OWORD *)v5 + 1) = xmmword_208F3D770;
        *((_OWORD *)v5 + 2) = xmmword_208F3D780;
        v36 = 60000;
        LODWORD(v37) = 60000;
        goto LABEL_57;
      }
LABEL_56:
      v37 = *v5;
      v36 = v5[1];
LABEL_57:
      result = (int)v6[2596];
      v40 = v6[2597];
      v41 = *(double *)(v4 + 180);
      v42 = v41 * (double)(24 * (int)result * (uint64_t)v40) / 1000.0;
      v43 = v6[2600];
      v44 = (double)v43;
      if (v42 < (double)v43)
        v43 = v42;
      v45 = 1000 * v43;
      v46 = (int)v37 * (uint64_t)v45;
      v47 = (int)v46 / 1000;
      v48 = v46 < 0x1F400000000;
      v49 = 0x7FFFFFFFLL;
      if (v48)
        v49 = v47;
      v50 = (int)v36 * (uint64_t)v45;
      v6[2600] = v45;
      v51 = (int)v50 / 1000;
      v48 = v50 < 0x1F400000000;
      v52 = 0x7FFFFFFFLL;
      if (v48)
        v52 = v51;
      if (v36)
        v53 = v52;
      else
        v53 = v45 >> 3;
      *v5 = v49;
      v5[1] = v53;
      v54 = (int)v5[2] * (uint64_t)v45;
      v55 = (int)v54 / 1000;
      v48 = v54 < 0x1F400000000;
      v56 = 0x7FFFFFFFLL;
      if (v48)
        v56 = v55;
      if (v5[2])
        v57 = v56;
      else
        v57 = v45 >> 3;
      v5[2] = v57;
      if (*(_QWORD *)(v4 + 204) > v57)
      {
        *(_QWORD *)(v4 + 204) = v57;
        *(_QWORD *)(v4 + 196) = v57;
      }
      if (v41 < 0.1)
        v41 = 30.0;
      *(double *)(v4 + 180) = v41;
      v58 = llround((double)v45 / v41);
      *(double *)(v4 + 116) = v41;
      *(_DWORD *)(v4 + 96) = v58;
      *(_DWORD *)(v4 + 100) = v58;
      v59 = 1374389535 * (int)(*((_DWORD *)v5 + 22) * v58);
      *(_DWORD *)(v4 + 104) = (v59 >> 37) + ((unint64_t)v59 >> 63);
      v60 = 0.5;
      v61 = v41 * 0.5;
      if ((int)v61 >= 10)
        v62 = (int)v61 + 2;
      else
        v62 = 12;
      *(_DWORD *)(v4 + 56) = v62;
      v63 = *((_DWORD *)v5 + 206) >> 1;
      *(_DWORD *)(v4 + 16188) = v63;
      if (*((_DWORD *)v5 + 24))
      {
        v64 = v6[2611];
        if (v64)
        {
          if (v62 >= v64)
          {
            v62 = v64 - 1;
            *(_DWORD *)(v4 + 56) = v64 - 1;
          }
          if (v63 >= v64)
          {
            v63 = v64 - 1;
            *(_DWORD *)(v4 + 16188) = v64 - 1;
          }
        }
      }
      if (v62 > v63)
        *(_DWORD *)(v4 + 56) = v63;
      *(_DWORD *)(v4 + 240) = v24;
      *(_DWORD *)(v4 + 248) = v25;
      v65 = *(_DWORD *)(v4 + 244);
      v66 = v24;
      if (v65 > v24 || (v66 = v25, v65 < v25))
        *(_DWORD *)(v4 + 244) = v66;
      v67 = *(_DWORD *)(v4 + 252);
      if (v67 < v25 || (v25 = v24, v67 > v24))
        *(_DWORD *)(v4 + 252) = v25;
      *(_DWORD *)(v4 + 172) = v53 > 0;
      *(_DWORD *)(v4 + 256) = v26;
      if (*((_DWORD *)v5 + 19))
        v68 = v53 > 0;
      else
        v68 = 0;
      *(_DWORD *)(v4 + 260) = v68;
      *(_DWORD *)(v4 + 10840) = v45;
      v69 = *((unsigned int *)v5 + 43);
      if ((_DWORD)v69 == (_DWORD)v17)
      {
        if (*(_DWORD *)(v4 + 16308))
          goto LABEL_97;
      }
      else
      {
        if (*(int *)(v4 + 11216) >= 1)
          *(_DWORD *)(v4 + 11216) = 0;
        v107 = v15;
        v108 = v16;
        *(_DWORD *)(v4 + 11212) = 0;
        if ((_DWORD)v17 == 1)
        {
          *(_DWORD *)(v3 + 149272) = 0;
          vp8_save_layer_context(v3);
        }
        if ((int)v69 >= 1)
        {
          if ((_DWORD)v69 == 1)
          {
            v72 = (_OWORD *)(v3 + 103608);
            v73 = (_OWORD *)(v3 + 149472);
            if ((int)v17 <= 0)
            {
              vp8_init_temporal_layer_context(v3, __src, 0, 0.0, v60, v44);
              v73 = (_OWORD *)(v3 + 149472);
              v72 = (_OWORD *)(v3 + 103608);
            }
            v74 = v5[3];
            v75 = (int)v6[2600];
            *(_DWORD *)(v3 + 149288) = v75;
            v76 = (unsigned __int128)(v74 * v75 * (__int128)0x20C49BA5E353F7CFLL) >> 64;
            v77 = (v76 >> 7) + ((unint64_t)v76 >> 63);
            *(_QWORD *)(v3 + 149352) = v77;
            *(_QWORD *)(v3 + 149360) = v77;
            *(_DWORD *)(v3 + 149272) = 0;
            *(_DWORD *)(v4 + 10840) = v75;
            v78 = *(_OWORD *)(v3 + 149312);
            *(_OWORD *)v5 = *(_OWORD *)(v3 + 149296);
            *((_OWORD *)v5 + 1) = v78;
            *((_OWORD *)v5 + 2) = *(_OWORD *)(v3 + 149328);
            *(_QWORD *)(v4 + 196) = v77;
            *(_QWORD *)(v4 + 204) = v77;
            *(_QWORD *)(v4 + 228) = *(_QWORD *)(v3 + 149368);
            *(_DWORD *)(v4 + 244) = *(_DWORD *)(v3 + 149384);
            *(_DWORD *)(v4 + 252) = *(_DWORD *)(v3 + 149392);
            *(_OWORD *)(v4 + 148) = *(_OWORD *)(v3 + 149396);
            *(_OWORD *)(v4 + 4) = *(_OWORD *)(v3 + 149416);
            *(_QWORD *)(v4 + 20) = *(_QWORD *)(v3 + 149432);
            *v6 = *(_DWORD *)(v3 + 149440);
            *(_DWORD *)(v4 + 108) = *(_DWORD *)(v3 + 149444);
            *(_QWORD *)(v4 + 164) = *(_QWORD *)(v3 + 149448);
            v6[1918] = *(_DWORD *)(v3 + 149456);
            *(int32x2_t *)(v4 + 11224) = vrev64_s32(*(int32x2_t *)(v3 + 149460));
            *(_DWORD *)(v4 + 10956) = *(_DWORD *)(v3 + 149468);
            v5[2196] = *(_QWORD *)(v3 + 149488);
            *v72 = *v73;
          }
          else
          {
            v102 = 0;
            v103 = (int *)(v5 + 30);
            v104 = 0.0;
            v105 = 149352;
            do
            {
              if (v102 >= v17)
                vp8_init_temporal_layer_context(v3, __src, v102, v104, v60, v44);
              *(int64x2_t *)(v3 + v105) = vdupq_n_s64(v5[3] * (unint64_t)*(v103 - 16));
              v106 = *v103++;
              LODWORD(v60) = v106;
              v60 = (double)*(unint64_t *)&v60;
              v104 = *(double *)(v4 + 116) / v60;
              ++v102;
              v105 += 216;
              --v69;
            }
            while (v69);
          }
        }
        result = v6[2596];
        v40 = v6[2597];
        v15 = v107;
        v16 = v108;
        if (*(_DWORD *)(v4 + 16308))
        {
LABEL_97:
          v6[1493] = result;
          v6[1494] = v40;
          v70 = v6[2602];
          if (v70 >= 8)
            goto LABEL_98;
LABEL_111:
          v6[1920] = v70;
          v71 = v6[1495];
          goto LABEL_112;
        }
      }
      *(_DWORD *)(v4 + 16308) = result;
      *(_DWORD *)(v4 + 16312) = v40;
      v6[1493] = result;
      v6[1494] = v40;
      v70 = v6[2602];
      if (v70 < 8)
        goto LABEL_111;
LABEL_98:
      v6[2602] = 7;
      v6[1920] = 7;
      v71 = v6[1495];
      if (v71 > 3)
      {
LABEL_114:
        v81 = 1;
        v82 = 1;
        v83 = v6[1496] - 1;
        if (v83 > 2)
        {
LABEL_117:
          v85 = 1;
          v86 = 1;
        }
        else
        {
LABEL_115:
          v84 = 4 * (int)v83;
          v85 = *(_DWORD *)((char *)&unk_208F3DF20 + v84);
          v86 = *(_DWORD *)((char *)&unk_208F3DF2C + v84);
        }
        v80 = (v82 + v81 * (int)result - 1) / v82;
        v6[1493] = v80;
        v79 = (v86 + v85 * v40 - 1) / v86;
        v6[1494] = v79;
        goto LABEL_119;
      }
LABEL_112:
      switch(v71)
      {
        case 0u:
          v79 = v40;
          v80 = result;
          if (v6[1496])
            goto LABEL_114;
          break;
        case 1u:
          v82 = 5;
          v81 = 4;
          v83 = v6[1496] - 1;
          if (v83 > 2)
            goto LABEL_117;
          goto LABEL_115;
        case 2u:
          v82 = 5;
          v81 = 3;
          v83 = v6[1496] - 1;
          if (v83 > 2)
            goto LABEL_117;
          goto LABEL_115;
        case 3u:
          v82 = 2;
          v81 = 1;
          v83 = v6[1496] - 1;
          if (v83 <= 2)
            goto LABEL_115;
          goto LABEL_117;
        default:
          goto LABEL_114;
      }
LABEL_119:
      if (v15 != (_DWORD)result || v16 != v40)
        *(_DWORD *)(v4 + 16300) = 1;
      v87 = (v80 + 15) & 0xFFFFFFF0;
      v88 = v6[1666];
      if (v87 != *(_DWORD *)(v3 + 160 * v88 + 109888)
        || !v87
        || ((v79 + 15) & 0xFFFFFFF0) != *(_DWORD *)(v3 + 160 * v88 + 109892))
      {
        v89 = (_QWORD *)v5[50];
        if (v89)
        {
          v90 = (char *)v89[2];
          if (v90)
          {
            v91 = *(unsigned int *)v89;
            if ((_DWORD)v91)
            {
              v92 = 0;
              v93 = 0;
              v94 = 0uLL;
              do
              {
                if (v90)
                {
                  v95 = &v90[v92];
                  if (*(_QWORD *)&v90[v92 + 96])
                  {
                    v96 = *(_QWORD *)&v90[v92 + 88];
                    if (v96)
                    {
                      free(*(void **)(v96 - 8));
                      v94 = 0uLL;
                    }
                  }
                  *((_OWORD *)v95 + 8) = v94;
                  *((_OWORD *)v95 + 9) = v94;
                  *((_OWORD *)v95 + 6) = v94;
                  *((_OWORD *)v95 + 7) = v94;
                  *((_OWORD *)v95 + 4) = v94;
                  *((_OWORD *)v95 + 5) = v94;
                  *((_OWORD *)v95 + 2) = v94;
                  *((_OWORD *)v95 + 3) = v94;
                  *(_OWORD *)v95 = v94;
                  *((_OWORD *)v95 + 1) = v94;
                  v91 = *(unsigned int *)v89;
                }
                ++v93;
                v90 = (char *)v89[2];
                v92 += 184;
              }
              while (v93 < v91);
            }
            free(v90);
          }
          free(v89);
          LODWORD(result) = v6[2596];
          v40 = v6[2597];
        }
        v97 = vp8_lookahead_init(result, v40);
        v5[50] = (uint64_t)v97;
        if (!v97)
          vpx_internal_error(v3 + 108032, 2, "Failed to allocate lag buffers");
        result = vp8_alloc_compressor_data(v3);
      }
      v98 = *((_DWORD *)v5 + 12);
      if ((v98 & 0x80000000) == 0)
      {
        *((_DWORD *)v5 + 4392) = v98;
        *(_DWORD *)v4 = v98;
      }
      *(_DWORD *)(v4 + 10868) = v6[2603];
      v99 = v6[2611];
      if (!v99)
      {
        v6[2610] = 0;
        v100 = (_QWORD *)(v3 + 148960);
        v5[52] = 0;
        *((_DWORD *)v5 + 157) = 0;
        v101 = v6[2601];
        if (!v101)
          return result;
        goto LABEL_148;
      }
      v100 = (_QWORD *)(v3 + 148960);
      if (v99 >= 2)
        v6[2611] = 1;
      v5[52] = 0;
      *((_DWORD *)v5 + 157) = 0;
      v101 = v6[2601];
      if (v101)
      {
LABEL_148:
        if (!*v100)
        {
          result = vp8_denoiser_allocate(v3 + 148232, (v6[2596] + 15) & 0xFFFFFFF0, (v6[2597] + 15) & 0xFFFFFFF0, v6[1798], v6[1799], v101);
          if ((_DWORD)result)
            return vpx_internal_error(v3 + 108032, 2, "Failed to allocate denoiser");
        }
      }
      return result;
    case 2:
      *(_DWORD *)(v4 + 10892) = 0;
      *(_DWORD *)(v4 + 10872) = 0;
      goto LABEL_27;
    case 3:
      *(_DWORD *)(v4 + 10892) = 1;
      *(_DWORD *)(v4 + 10872) = 1;
      goto LABEL_28;
    case 4:
      *(_DWORD *)(v4 + 10892) = 2;
      *(_DWORD *)(v4 + 10872) = 1;
      v21 = v6[2603];
      if (v21 > -6)
      {
        if (v21 >= 6)
          v6[2603] = 5;
      }
      else
      {
        v6[2603] = -5;
      }
      goto LABEL_28;
    case 5:
      *(_DWORD *)(v4 + 10892) = 2;
      *(_DWORD *)(v4 + 10872) = 0;
      goto LABEL_28;
    default:
      if (!*(_DWORD *)(v4 + 10892))
        goto LABEL_27;
      goto LABEL_28;
  }
}

void *vp8_create_compressor(_DWORD *a1)
{
  void *result;
  unint64_t v3;
  _DWORD *v4;
  void *v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  double v14;
  double v15;
  double v16;
  int v17;
  uint64_t v18;
  const float *v19;
  float32x4_t v20;
  unsigned int *v21;
  unsigned int v22;
  unint64_t v23;
  double v24;
  unint64_t v25;
  __int128 v26;
  int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int *v35;
  int v36;
  int *v37;
  int *v38;
  size_t v39;
  size_t v40;
  void *v41;
  size_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  size_t v46;
  void *v47;
  uint64_t v48;
  size_t v49;
  void *v50;
  size_t v51;
  void *v52;
  size_t v53;
  size_t v54;
  void *v55;
  unint64_t v56;
  unsigned int v62;
  uint64_t (*v63)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v64;
  uint64_t (*v65)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v66;
  uint64_t (*v67)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (*v68)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (*v69)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  long double v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int *v79;
  int *__attribute__((__org_typedef(jmp_buf))) v80;
  unint64_t v81;

  result = malloc_type_malloc(0x2C007uLL, 0x74AD08B5uLL);
  if (!result)
    return result;
  v3 = ((unint64_t)result + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v3 - 8) = result;
  v81 = v3;
  if (!v3)
    return 0;
  bzero((void *)(((unint64_t)result + 39) & 0xFFFFFFFFFFFFFFE0), 0x2BFE0uLL);
  v4 = (_DWORD *)(v3 + 108120);
  if (setjmp((int *)(v3 + 108124)))
  {
LABEL_74:
    *v4 = 0;
    vp8_remove_compressor((uint64_t *)&v81);
    return 0;
  }
  v80 = (int *)(v3 + 108032);
  *v4 = 1;
  v5 = malloc_type_malloc(0x21FuLL, 0x74AD08B5uLL);
  if (v5 && (v6 = ((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v6 - 8) = v5, v6))
  {
    bzero((void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF0), 0x208uLL);
    *(_QWORD *)(v3 + 82344) = v6;
  }
  else
  {
    *(_QWORD *)(v3 + 82344) = 0;
    vpx_internal_error((uint64_t)v80, 2, "Failed to allocate cpi->mb.ss", v80, v81);
  }
  *(_DWORD *)(v3 + 112747) = 629954160;
  *(_WORD *)(v3 + 112751) = vp8_uv_mode_prob;
  *(_BYTE *)(v3 + 112753) = -52;
  *(_WORD *)(v3 + 112754) = sub_mv_ref_prob;
  *(_BYTE *)(v3 + 112756) = 25;
  *(_QWORD *)(v3 + 112738) = 0x6F505557854F5A78;
  *(_BYTE *)(v3 + 112746) = -105;
  *(_OWORD *)(v3 + 111088) = xmmword_208F08A40;
  *(_QWORD *)(v3 + 113860) = 0x1000000000;
  *(_OWORD *)(v3 + 111592) = 0u;
  *(_DWORD *)(v3 + 111152) = 0;
  *(_QWORD *)(v3 + 111580) = 0;
  *(_DWORD *)(v3 + 109872) = 0;
  memcpy((void *)(v3 + 114264), a1, 0x1E0uLL);
  *(_QWORD *)(v3 + 142792) = 0x100000001;
  v7 = *a1 - 1;
  *(_DWORD *)(v3 + 113856) = *a1;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (v7 <= 2)
  {
    v11 = 4 * v7;
    v12 = *(_DWORD *)((char *)&unk_208F3DEFC + v11);
    HIDWORD(v10) = 1;
    LODWORD(v10) = *(_DWORD *)((char *)&unk_208F3DEE4 + v11);
    v9 = *(_DWORD *)((char *)&unk_208F3DEF0 + v11);
    v8 = v12;
  }
  *(_DWORD *)(v3 + 111152) = v9;
  *(_QWORD *)(v3 + 111092) = v10;
  *(_DWORD *)(v3 + 111100) = v8;
  v13 = a1[3];
  if (v13 < 1 || (v14 = (double)(int)a1[4] / (double)v13, v14 > 180.0))
    v14 = 30.0;
  *(double *)(v3 + 132096) = v14;
  *(double *)(v3 + 132104) = v14;
  *(_DWORD *)(v3 + 142876) = 7;
  *(_QWORD *)(v3 + 111568) = 1;
  *(_DWORD *)(v3 + 111588) = 1;
  vp8_change_config(v3, a1);
  v17 = *(_DWORD *)(v3 + 114396);
  *(_DWORD *)(v3 + 132168) = *(_DWORD *)(v3 + 114400);
  *(_DWORD *)(v3 + 132160) = v17;
  *(_DWORD *)(v3 + 132076) = v17;
  v18 = *(_QWORD *)(v3 + 114344);
  *(_QWORD *)(v3 + 132112) = v18;
  *(_QWORD *)(v3 + 132120) = v18;
  v19 = (const float *)(v3 + 132016);
  v20 = vld1q_dup_f32(v19);
  *(float32x4_t *)(v3 + 132128) = v20;
  *(_QWORD *)(v3 + 132144) = 0;
  *(_DWORD *)(v3 + 132152) = 0;
  v21 = (unsigned int *)(v3 + 114516);
  v22 = *(_DWORD *)(v3 + 114516);
  if (v22 >= 2)
  {
    v23 = 0;
    v24 = 0.0;
    do
    {
      vp8_init_temporal_layer_context(v3, a1, v23, v24, v15, v16);
      LODWORD(v25) = *(_DWORD *)(v3 + 114584 + 4 * v23);
      v15 = (double)v25;
      v24 = *(double *)(v3 + 132032) / v15;
      ++v23;
    }
    while (v23 < *v21);
    v22 = *v21;
  }
  memcpy((void *)(v3 + 143680), &vp8cx_base_skip_false_prob, 0x200uLL);
  *(_DWORD *)(v3 + 113852) = 0;
  *(_QWORD *)(v3 + 143128) = 0xFFFFFFFF00000000;
  *(_OWORD *)(v3 + 131956) = 0u;
  *(_DWORD *)(v3 + 142820) = 128;
  *(_QWORD *)(v3 + 142812) = 0x800000003FLL;
  *(_QWORD *)&v26 = 0x100000001;
  *((_QWORD *)&v26 + 1) = 0x100000001;
  *(_OWORD *)(v3 + 142852) = v26;
  *(_DWORD *)(v3 + 131948) = 0;
  *(_DWORD *)(v3 + 111604) = 1;
  *(_DWORD *)(v3 + 148100) = 0;
  LOBYTE(v26) = 0;
  BYTE4(v26) = 0;
  *(_QWORD *)(v3 + 114976) = v26;
  *(_DWORD *)(v3 + 114984) = 0;
  *(_DWORD *)(v3 + 143080) = 0;
  *(_DWORD *)(v3 + 180172) = 0;
  *(_DWORD *)(v3 + 143136) = 0;
  *(_DWORD *)(v3 + 131976) = 7;
  v27 = *(_DWORD *)(v3 + 114472);
  v28 = 1;
  if (!v27)
    v28 = *(_DWORD *)(v3 + 114332) == 1 && *(_DWORD *)(v3 + 114312) < 3;
  *(_DWORD *)(v3 + 143084) = v28;
  v29 = *(_DWORD *)(v3 + 111076);
  v30 = *(_DWORD *)(v3 + 111080);
  v31 = v30 * v29;
  v32 = v30 * v29 / 7;
  *(_DWORD *)(v3 + 143088) = v32;
  if (v22 == 1)
  {
    v33 = 20;
    goto LABEL_25;
  }
  if (v22 == 2)
  {
    v33 = 10;
LABEL_25:
    v32 = v31 / v33;
    *(_DWORD *)(v3 + 143088) = v32;
  }
  *(_QWORD *)(v3 + 143092) = 0x2000000000;
  *(_DWORD *)(v3 + 143152) = 0;
  *(_DWORD *)(v3 + 143160) = 0;
  if (!v27 && *(_DWORD *)(v3 + 114332) == 1 && *(int *)(v3 + 114312) <= 2)
  {
    *(_DWORD *)(v3 + 143152) = 1;
    *(_DWORD *)(v3 + 143160) = 1;
    if (v32 <= 0)
    {
      v34 = 10;
      *(_DWORD *)(v3 + 143156) = 10;
      v35 = (int *)(v3 + 143156);
    }
    else
    {
      v34 = 2 * v29 * v30 / v32;
      v35 = (int *)(v3 + 143156);
      *(_DWORD *)(v3 + 143156) = v34;
      if (v34 < 6)
      {
        v36 = 6;
LABEL_36:
        *v35 = v36;
        *(_DWORD *)(v3 + 131976) = v36;
        goto LABEL_37;
      }
      if (v34 > 0x28)
      {
        v36 = 40;
        goto LABEL_36;
      }
    }
    v36 = v34;
    goto LABEL_36;
  }
LABEL_37:
  v37 = (int *)(v3 + 111076);
  v38 = (int *)(v3 + 111080);
  if (!v28)
  {
    *(_QWORD *)(v3 + 143104) = 0;
    goto LABEL_48;
  }
  v39 = v31;
  if (v31)
  {
    if (v31 < 0)
      goto LABEL_47;
    v40 = v31 + 23;
    if (v40 > 0x10000000000)
      goto LABEL_47;
  }
  else
  {
    v40 = 23;
  }
  v41 = malloc_type_malloc(v40, 0x74AD08B5uLL);
  if (v41)
  {
    *(_QWORD *)((((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFFFF0) - 8) = v41;
    if ((((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFFFF0) != 0)
    {
      v42 = v39;
      v43 = (void *)(((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFFFF0);
      bzero(v43, v42);
      *(_QWORD *)(v3 + 143104) = v43;
      goto LABEL_48;
    }
  }
LABEL_47:
  *(_QWORD *)(v3 + 143104) = 0;
  vpx_internal_error((uint64_t)v80, 2, "Failed to allocate cpi->cyclic_refresh_map", v80);
LABEL_48:
  v44 = *v38 * (uint64_t)*v37;
  if ((_DWORD)v44)
  {
    if ((v44 & 0x80000000) != 0
      || (unint64_t)(v44 + 23) > 0x10000000000
      || (v45 = malloc_type_malloc(v44 + 23, 0x74AD08B5uLL)) == 0)
    {
LABEL_57:
      *(_QWORD *)(v3 + 143032) = 0;
      vpx_internal_error((uint64_t)v80, 2, "Failed to allocate cpi->skin_map", v80);
      v48 = *v38 * (uint64_t)*v37;
      if ((_DWORD)v48)
        goto LABEL_58;
LABEL_56:
      v49 = 23;
      goto LABEL_60;
    }
  }
  else
  {
    v45 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
    if (!v45)
      goto LABEL_57;
  }
  *(_QWORD *)((((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF0) - 8) = v45;
  if ((((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF0) == 0)
    goto LABEL_57;
  v46 = v44;
  v47 = (void *)(((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF0);
  bzero(v47, v46);
  *(_QWORD *)(v3 + 143032) = v47;
  v48 = *v38 * (uint64_t)*v37;
  if (!(_DWORD)v48)
    goto LABEL_56;
LABEL_58:
  if ((v48 & 0x80000000) != 0 || (v49 = v48 + 23, (unint64_t)(v48 + 23) > 0x10000000000))
  {
LABEL_64:
    *(_QWORD *)(v3 + 143112) = 0;
    vpx_internal_error((uint64_t)v80, 2, "Failed to allocate cpi->consec_zero_last", v80);
    v53 = *v38 * (uint64_t)*v37;
    if (!(_DWORD)v53)
      goto LABEL_63;
    goto LABEL_65;
  }
LABEL_60:
  v50 = malloc_type_malloc(v49, 0x74AD08B5uLL);
  if (!v50)
    goto LABEL_64;
  *(_QWORD *)((((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF0) - 8) = v50;
  if ((((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF0) == 0)
    goto LABEL_64;
  v51 = v48;
  v52 = (void *)(((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF0);
  bzero(v52, v51);
  *(_QWORD *)(v3 + 143112) = v52;
  v53 = *v38 * (uint64_t)*v37;
  if (!(_DWORD)v53)
  {
LABEL_63:
    v54 = 23;
    goto LABEL_67;
  }
LABEL_65:
  if ((v53 & 0x80000000) != 0)
    goto LABEL_70;
  v54 = v53 + 23;
  if (v53 + 23 > 0x10000000000)
    goto LABEL_70;
LABEL_67:
  v55 = malloc_type_malloc(v54, 0x74AD08B5uLL);
  if (!v55 || (v56 = ((unint64_t)v55 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v56 - 8) = v55, !v56))
  {
LABEL_70:
    *(_QWORD *)(v3 + 143120) = 0;
    vpx_internal_error((uint64_t)v80, 2, "Failed to allocate cpi->consec_zero_last_mvbias", v80);
    goto LABEL_71;
  }
  bzero((void *)(((unint64_t)v55 + 23) & 0xFFFFFFFFFFFFFFF0), v53);
  *(_QWORD *)(v3 + 143120) = v56;
LABEL_71:
  *(_DWORD *)(v3 + 115164) = 8;
  *(_DWORD *)(v3 + 115168) = *(_DWORD *)(v3 + 114320);
  *(_QWORD *)(v3 + 132056) = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 115172) = 0;
  *(_QWORD *)(v3 + 114964) = 0;
  *(_DWORD *)(v3 + 111576) = 0;
  *(_QWORD *)(v3 + 143140) = 0;
  *(_QWORD *)(v3 + 180180) = 0x100000000;
  *(_QWORD *)(v3 + 148160) = 0x5A00000000000;
  *(_DWORD *)(v3 + 131948) = 0;
  *(_QWORD *)(v3 + 131984) = 1;
  *(_DWORD *)(v3 + 132064) = *(_DWORD *)(v3 + 114396);
  *(_QWORD *)(v3 + 132068) = 0;
  *(_QWORD *)(v3 + 132080) = 0;
  *(_DWORD *)(v3 + 132180) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v3 + 131920) = _Q0;
  *(_QWORD *)(v3 + 131936) = 0x3FF0000000000000;
  *(_QWORD *)(v3 + 148152) = 0x3FF0000000000000;
  v62 = (int)*(double *)(v3 + 132032);
  *(int32x4_t *)(v3 + 131992) = vdupq_n_s32(v62);
  *(_DWORD *)(v3 + 132008) = v62;
  *(_QWORD *)(v3 + 142760) = *((_QWORD *)a1 + 30);
  if (*(_DWORD *)(v3 + 142788) == 2)
    *(_QWORD *)(v3 + 142776) = 0;
  vp8_set_speed_features(v3);
  memset_pattern16((void *)(v3 + 103624), &unk_208F3D7C0, 0x50uLL);
  if (vp8cx_create_encoder_threads((_DWORD *)v3))
    goto LABEL_74;
  v63 = vpx_variance16x16;
  *(_QWORD *)(v3 + 143616) = vpx_sad16x16;
  *(_QWORD *)(v3 + 143624) = v63;
  v64 = vpx_sad16x16x4d;
  *(_QWORD *)(v3 + 143632) = vpx_sub_pixel_variance16x16_neon;
  *(_QWORD *)(v3 + 143640) = v64;
  v65 = vpx_variance16x8;
  *(_QWORD *)(v3 + 143488) = vpx_sad16x8;
  *(_QWORD *)(v3 + 143496) = v65;
  v66 = vpx_sad16x8x4d;
  *(_QWORD *)(v3 + 143504) = vpx_sub_pixel_variance16x8_neon;
  *(_QWORD *)(v3 + 143512) = v66;
  v67 = vpx_variance8x16;
  *(_QWORD *)(v3 + 143520) = vpx_sad8x16_neon;
  *(_QWORD *)(v3 + 143528) = v67;
  *(_QWORD *)(v3 + 143536) = vpx_sub_pixel_variance8x16_neon;
  *(_QWORD *)(v3 + 143544) = vpx_sad8x16x4d_neon;
  v68 = vpx_variance8x8;
  *(_QWORD *)(v3 + 143552) = vpx_sad8x8_neon;
  *(_QWORD *)(v3 + 143560) = v68;
  *(_QWORD *)(v3 + 143568) = vpx_sub_pixel_variance8x8_neon;
  *(_QWORD *)(v3 + 143576) = vpx_sad8x8x4d_neon;
  *(_QWORD *)(v3 + 143480) = vp8_diamond_search_sad_c;
  v69 = vpx_variance4x4;
  *(_QWORD *)(v3 + 143584) = vpx_sad4x4_neon;
  *(_QWORD *)(v3 + 143592) = v69;
  *(_QWORD *)(v3 + 143600) = vpx_sub_pixel_variance4x4_neon;
  *(_QWORD *)(v3 + 143608) = vpx_sad4x4x4d_neon;
  *(_QWORD *)(v3 + 143472) = vp8_refining_search_sad_c;
  *(_DWORD *)(v3 + 103888) = *(_DWORD *)(v3 + 111072);
  vp8cx_init_quantizer((_DWORD *)v3);
  vp8_loop_filter_init((uint64_t)v80);
  if (*(_DWORD *)(v3 + 114720))
    *(_DWORD *)(v3 + 150840) = (int)((*(_DWORD *)(v3 + 114724)
                                                  + *(_DWORD *)(v3 + 114728) * *(_DWORD *)(v3 + 114268)
                                                  - 1)
                                   / *(_DWORD *)(v3 + 114724)
                                   + 15) >> 4;
  v70 = 168272;
  *(_QWORD *)(v3 + 82408) = v3 + 154964;
  *(_QWORD *)(v3 + 82416) = v3 + 163156;
  *(_QWORD *)(v3 + 82424) = v3 + 168276;
  *(_QWORD *)(v3 + 82432) = v3 + 170324;
  *(_DWORD *)(v3 + 168276) = 300;
  *(_DWORD *)(v3 + 170324) = 300;
  v71 = 168280;
  v72 = -2040;
  do
  {
    v73 = v72;
    v74 = v70;
    v75 = v71;
    v76 = log((double)((int)v72 + 2048));
    v77 = vcvtd_n_s64_f64(v76 / 0.693147182 + 0.6 + v76 / 0.693147182 + 0.6, 8uLL);
    v78 = (unsigned int *)(v3 + v75);
    *v78 = v77;
    v78[512] = v77;
    v79 = (unsigned int *)(v3 + v74);
    *v79 = v77;
    v79[512] = v77;
    v70 = v74 - 4;
    v71 = v75 + 4;
    v72 = v73 + 8;
  }
  while (v73 != -8);
  *(_QWORD *)(v3 + 82440) = v3 + 171348;
  *(_QWORD *)(v3 + 82448) = v3 + 171428;
  *(_QWORD *)(v3 + 82456) = v3 + 171508;
  *(_QWORD *)(v3 + 82464) = v3 + 175508;
  *(_QWORD *)(v3 + 82472) = v3 + 175564;
  vp8_setup_block_ptrs((_QWORD *)(v3 + 73728));
  vp8_setup_block_dptrs((_QWORD *)(v3 + 77952));
  *(_DWORD *)(v3 + 108120) = 0;
  return (void *)v3;
}

void vp8_remove_compressor(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t i;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *a1;
  if (*a1)
  {
    v3 = (_QWORD *)(v1 + 148168);
    v4 = (_QWORD **)(v1 + 114744);
    vp8cx_remove_encoder_threads(*a1);
    vp8_denoiser_free(v1 + 148232);
    v5 = *(_QWORD *)(v1 + 143272);
    if (v5)
      free(*(void **)(v5 - 8));
    *(_QWORD *)(v1 + 143272) = 0;
    v6 = *(_QWORD *)(v1 + 148192);
    if (v6)
      free(*(void **)(v6 - 8));
    *(_QWORD *)(v1 + 148192) = 0;
    v7 = *(_QWORD *)(v1 + 148200);
    if (v7)
      free(*(void **)(v7 - 8));
    *(_QWORD *)(v1 + 148200) = 0;
    v8 = *(_QWORD *)(v1 + 148208);
    if (v8)
      free(*(void **)(v8 - 8));
    *(_QWORD *)(v1 + 148208) = 0;
    v9 = *(_QWORD *)(v1 + 143040);
    if (v9)
      free(*(void **)(v9 - 8));
    *(_QWORD *)(v1 + 143040) = 0;
    v10 = *(_QWORD *)(v1 + 143072);
    if (v10)
      free(*(void **)(v10 - 8));
    *(_QWORD *)(v1 + 143072) = 0;
    vp8_de_alloc_frame_buffers(v1 + 108032);
    if (*(_QWORD *)(v1 + 115088))
    {
      v11 = *(_QWORD *)(v1 + 115080);
      if (v11)
        free(*(void **)(v11 - 8));
    }
    v12 = 0uLL;
    *(_OWORD *)(v1 + 115120) = 0u;
    *(_OWORD *)(v1 + 115136) = 0u;
    *(_OWORD *)(v1 + 115088) = 0u;
    *(_OWORD *)(v1 + 115104) = 0u;
    *(_OWORD *)(v1 + 115056) = 0u;
    *(_OWORD *)(v1 + 115072) = 0u;
    *(_OWORD *)(v1 + 115024) = 0u;
    *(_OWORD *)(v1 + 115040) = 0u;
    *(_OWORD *)(v1 + 114992) = 0u;
    *(_OWORD *)(v1 + 115008) = 0u;
    if (*(_QWORD *)(v1 + 114888))
    {
      v13 = *(_QWORD *)(v1 + 114880);
      if (v13)
      {
        free(*(void **)(v13 - 8));
        v12 = 0uLL;
      }
    }
    *(_OWORD *)(v1 + 114920) = v12;
    *(_OWORD *)(v1 + 114936) = v12;
    *(_OWORD *)(v1 + 114888) = v12;
    *(_OWORD *)(v1 + 114904) = v12;
    *(_OWORD *)(v1 + 114856) = v12;
    *(_OWORD *)(v1 + 114872) = v12;
    *(_OWORD *)(v1 + 114824) = v12;
    *(_OWORD *)(v1 + 114840) = v12;
    *(_OWORD *)(v1 + 114792) = v12;
    *(_OWORD *)(v1 + 114808) = v12;
    v14 = *v4;
    if (*v4)
    {
      v15 = (char *)v14[2];
      if (v15)
      {
        v16 = *(unsigned int *)v14;
        if ((_DWORD)v16)
        {
          v17 = 0;
          for (i = 0; i < v16; ++i)
          {
            if (v15)
            {
              v19 = &v15[v17];
              if (*(_QWORD *)&v15[v17 + 96])
              {
                v20 = *(_QWORD *)&v15[v17 + 88];
                if (v20)
                {
                  free(*(void **)(v20 - 8));
                  v12 = 0uLL;
                }
              }
              *((_OWORD *)v19 + 8) = v12;
              *((_OWORD *)v19 + 9) = v12;
              *((_OWORD *)v19 + 6) = v12;
              *((_OWORD *)v19 + 7) = v12;
              *((_OWORD *)v19 + 4) = v12;
              *((_OWORD *)v19 + 5) = v12;
              *((_OWORD *)v19 + 2) = v12;
              *((_OWORD *)v19 + 3) = v12;
              *(_OWORD *)v19 = v12;
              *((_OWORD *)v19 + 1) = v12;
              v16 = *(unsigned int *)v14;
            }
            v15 = (char *)v14[2];
            v17 += 184;
          }
        }
        free(v15);
      }
      free(v14);
    }
    v21 = *(_QWORD *)(v1 + 115152);
    if (v21)
      free(*(void **)(v21 - 8));
    v22 = (_QWORD *)(v1 + 82320);
    *(_QWORD *)(v1 + 115152) = 0;
    v23 = *(_QWORD *)(v1 + 148176);
    if (v23)
      free(*(void **)(v23 - 8));
    *(_QWORD *)(v1 + 148176) = 0;
    if (*v3)
      free(*(void **)(*v3 - 8));
    *v3 = 0;
    if (*v22)
      free(*(void **)(*v22 - 8));
    *v22 = 0;
    v24 = *(_QWORD *)(v1 + 82344);
    if (v24)
      free(*(void **)(v24 - 8));
    v25 = *(_QWORD *)(v1 + 115152);
    if (v25)
      free(*(void **)(v25 - 8));
    v26 = *(_QWORD *)(v1 + 143032);
    if (v26)
      free(*(void **)(v26 - 8));
    v27 = *(_QWORD *)(v1 + 143104);
    if (v27)
      free(*(void **)(v27 - 8));
    v28 = *(_QWORD *)(v1 + 143112);
    if (v28)
      free(*(void **)(v28 - 8));
    v29 = *(_QWORD *)(v1 + 143120);
    if (v29)
      free(*(void **)(v29 - 8));
    vp8_de_alloc_frame_buffers(v1 + 108032);
    free(*(void **)(v1 - 8));
    *a1 = 0;
  }
}

unsigned __int8 *vp8_loopfilter_frame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  char v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v15;
  int v16;
  unsigned __int128 v18;
  unsigned __int128 v19;

  v4 = a1 + 142896;
  v5 = a1 + 111568;
  if (*(_DWORD *)(a1 + 111568) || *(_DWORD *)(a1 + 111572))
  {
    v6 = 1;
    v7 = *(_DWORD *)(a2 + 3028);
    if (*(_DWORD *)(a2 + 3060))
      goto LABEL_4;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 111576) != 0;
    v7 = *(_DWORD *)(a2 + 3028);
    if (*(_DWORD *)(a2 + 3060))
    {
LABEL_4:
      *(_DWORD *)(a2 + 3524) = 0;
      if (!atomic_load((unsigned int *)(a1 + 143184)))
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  v18 = 0u;
  v19 = 0u;
  gettimeofday((timeval *)&v18, 0);
  v15 = *(_DWORD *)(v5 + 2720);
  if (*(_DWORD *)v4)
  {
    if (v15 && *(_DWORD *)(a2 + 3028))
    {
      vp8cx_pick_filter_level(a1 + 148232, a1);
      if (*(int *)(a2 + 3524) < 1)
        goto LABEL_26;
    }
    else
    {
      vp8cx_pick_filter_level(*(_QWORD *)(v5 + 3208), a1);
      if (*(int *)(a2 + 3524) < 1)
        goto LABEL_26;
    }
LABEL_25:
    *(_DWORD *)(a1 + 81931) = *(_DWORD *)(v4 + 156);
    goto LABEL_26;
  }
  if (v15 && *(_DWORD *)(a2 + 3028))
  {
    vp8cx_pick_filter_level_fast(a1 + 148232, a1);
    if (*(int *)(a2 + 3524) >= 1)
      goto LABEL_25;
  }
  else
  {
    vp8cx_pick_filter_level_fast(*(_QWORD *)(v5 + 3208), a1);
    if (*(int *)(a2 + 3524) >= 1)
      goto LABEL_25;
  }
LABEL_26:
  gettimeofday((timeval *)&v19, 0);
  v16 = DWORD2(v19) - DWORD2(v18) + 1000000;
  if (SDWORD2(v19) >= SDWORD2(v18))
    v16 = DWORD2(v19) - DWORD2(v18);
  *(_QWORD *)(v4 + 768) += v16 + 1000000 * (v19 - v18 + ((DWORD2(v19) - DWORD2(v18)) >> 31));
  if (atomic_load((unsigned int *)(v4 + 288)))
LABEL_5:
    MEMORY[0x20BD0B6E0](*(unsigned int *)(v4 + 372));
LABEL_6:
  v9 = !v6;
  if (*(int *)(a2 + 3524) < 1)
    v9 = 1;
  if ((v9 & 1) == 0)
    vp8_loop_filter_frame(a2, (_BYTE *)(a1 + 77952), v7);
  v10 = *(_QWORD *)(a2 + 1848);
  v11 = *(_DWORD *)(v10 + 104);
  if (v11 >= 0)
    v12 = *(_DWORD *)(v10 + 104);
  else
    v12 = v11 + 1;
  v13 = v12 >> 1;
  extend_plane(*(unsigned __int8 **)(v10 + 56), *(_DWORD *)(v10 + 16), *(_DWORD *)(v10 + 8), *(_DWORD *)(v10 + 12), v11, *(_DWORD *)(v10 + 104), v11 - *(_DWORD *)(v10 + 12) + *(_DWORD *)(v10 + 4), v11 - *(_DWORD *)(v10 + 8) + *(_DWORD *)v10);
  extend_plane(*(unsigned __int8 **)(v10 + 64), *(_DWORD *)(v10 + 36), *(_DWORD *)(v10 + 28), *(_DWORD *)(v10 + 32), v13, v13, v13 - *(_DWORD *)(v10 + 32) + *(_DWORD *)(v10 + 24), v13 - *(_DWORD *)(v10 + 28) + *(_DWORD *)(v10 + 20));
  return extend_plane(*(unsigned __int8 **)(v10 + 72), *(_DWORD *)(v10 + 36), *(_DWORD *)(v10 + 28), *(_DWORD *)(v10 + 32), v13, v13, v13 - *(_DWORD *)(v10 + 32) + *(_DWORD *)(v10 + 24), v13 - *(_DWORD *)(v10 + 28) + *(_DWORD *)(v10 + 20));
}

uint64_t vp8_receive_raw_frame(uint64_t a1, int a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  timeval v31;
  unsigned __int128 v32;

  v10 = a1 + 143080;
  v11 = (uint64_t *)(a1 + 114744);
  v12 = a1 + 114268;
  v31 = (timeval)0;
  v32 = 0u;
  gettimeofday(&v31, 0);
  v13 = *(_DWORD *)v12;
  if (*a3 == *(_DWORD *)v12 && a3[1] == *(_DWORD *)(v12 + 4))
    goto LABEL_16;
  v30 = a4;
  v14 = *(_QWORD **)(v12 + 476);
  if (v14)
  {
    v15 = (char *)v14[2];
    if (v15)
    {
      v28 = a2;
      v29 = a5;
      v16 = *(unsigned int *)v14;
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0uLL;
        do
        {
          if (v15)
          {
            v20 = &v15[v17];
            if (*(_QWORD *)&v15[v17 + 96])
            {
              v21 = *(_QWORD *)&v15[v17 + 88];
              if (v21)
              {
                free(*(void **)(v21 - 8));
                v19 = 0uLL;
              }
            }
            *((_OWORD *)v20 + 8) = v19;
            *((_OWORD *)v20 + 9) = v19;
            *((_OWORD *)v20 + 6) = v19;
            *((_OWORD *)v20 + 7) = v19;
            *((_OWORD *)v20 + 4) = v19;
            *((_OWORD *)v20 + 5) = v19;
            *((_OWORD *)v20 + 2) = v19;
            *((_OWORD *)v20 + 3) = v19;
            *(_OWORD *)v20 = v19;
            *((_OWORD *)v20 + 1) = v19;
            v16 = *(unsigned int *)v14;
          }
          ++v18;
          v15 = (char *)v14[2];
          v17 += 184;
        }
        while (v18 < v16);
      }
      free(v15);
      a5 = v29;
      a2 = v28;
    }
    free(v14);
    v13 = *(_DWORD *)v12;
  }
  v22 = vp8_lookahead_init(v13, *(_DWORD *)(v12 + 4));
  *(_QWORD *)(v12 + 476) = v22;
  a4 = v30;
  if (v22)
  {
LABEL_16:
    v23 = *v11;
    if (*(_DWORD *)v10)
    {
LABEL_17:
      v24 = v11[3541];
      goto LABEL_20;
    }
  }
  else
  {
    vpx_internal_error(a1 + 108032, 2, "Failed to allocate lag buffers");
    v23 = *v11;
    if (*(_DWORD *)v10)
      goto LABEL_17;
  }
  v24 = 0;
LABEL_20:
  if (vp8_lookahead_push(v23, a3, a4, a5, a2, v24))
    v25 = 0xFFFFFFFFLL;
  else
    v25 = 0;
  gettimeofday((timeval *)&v32, 0);
  v26 = DWORD2(v32) - v31.tv_usec + 1000000;
  if (SDWORD2(v32) >= v31.tv_usec)
    v26 = DWORD2(v32) - v31.tv_usec;
  *(_QWORD *)(v10 + 568) += v26 + 1000000 * (v32 - v31.tv_sec + ((DWORD2(v32) - v31.tv_usec) >> 31));
  return v25;
}

uint64_t vp8_get_compressed_data(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4, unint64_t a5, _QWORD *a6, _QWORD *a7, int a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  double v18;
  double v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t result;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  double v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  double v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  __int128 v91;
  __int128 v92;
  int v93;
  double v94;
  unsigned int v95;
  unint64_t v96;
  double v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  _DWORD *v105;
  int v106;
  BOOL v107;
  int v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  const double *v118;
  float64x2_t v119;
  float64x2_t v120;
  uint64_t v121;
  float64x2_t *v122;
  const double *v123;
  float64x2_t v124;
  BOOL v125;
  char v126;
  int v127;
  unsigned int v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  int v138;
  BOOL v139;
  int v140;
  int *v141;
  int v142;
  int v143;
  BOOL v145;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  double *v166;
  uint64_t v167;
  unsigned int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  unsigned __int8 *v174;
  int v175;
  int v176;
  int v177;
  int v178;
  signed int v179;
  int v180;
  unsigned __int8 *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  int v188;
  int v189;
  _BOOL8 v190;
  int v191;
  uint64_t v192;
  int v193;
  int v194;
  uint64_t v195;
  int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _BOOL8 v203;
  BOOL v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  _BYTE *v210;
  unsigned int v211;
  uint64_t v212;
  unsigned __int8 *v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  _BYTE *v217;
  unsigned int v218;
  unsigned int v219;
  BOOL v220;
  BOOL v221;
  BOOL v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  int v227;
  int *v228;
  uint64_t v229;
  int v230;
  int v231;
  unsigned __int8 v232;
  uint64_t *v233;
  _DWORD *v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  int v257;
  int v258;
  int v259;
  uint64_t v260;
  int v261;
  unsigned int v262;
  uint64_t v263;
  int v264;
  int v265;
  int v266;
  uint64_t v267;
  int v268;
  int v269;
  int v270;
  int v271;
  uint64_t v272;
  int v273;
  int v274;
  unsigned __int8 v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  unsigned int v282;
  unsigned int v283;
  int *v284;
  int v285;
  int v286;
  int v287;
  int v288;
  _DWORD *v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  int v293;
  int v294;
  int v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  int v309;
  int v310;
  int v311;
  int v312;
  _BYTE *v313;
  int v314;
  _BYTE *v315;
  int v316;
  int v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  __n128 v322;
  int v323;
  int v324;
  int v325;
  uint64_t v327;
  int v328;
  int v329;
  uint64_t v330;
  _DWORD *v331;
  int v332;
  uint64_t v333;
  int v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  int v340;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  uint64_t v349;
  int *v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  unsigned int v356;
  uint64_t v357;
  unsigned int v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  _QWORD *v370;
  int v371;
  int v372;
  int v373;
  char v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unsigned int v388;
  int v389;
  unsigned int v390;
  double *v391;
  signed int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  unsigned int v411;
  unsigned int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  _BOOL4 v419;
  int v420;
  unsigned int v421;
  uint64_t v422;
  uint64_t v423;
  unsigned int v424;
  unsigned int v425;
  uint64_t v426;
  unsigned int v427;
  uint64_t v428;
  unsigned int v429;
  unsigned int v430;
  uint64_t v431;
  unsigned int v432;
  uint64_t v433;
  unsigned int v434;
  unint64_t v435;
  double v436;
  double v437;
  double v438;
  double v439;
  double v440;
  double v441;
  double v442;
  double v443;
  int *v444;
  int v445;
  int *v446;
  int v447;
  __int128 v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  int v461;
  uint64_t v462;
  uint64_t v463;
  _DWORD *v464;
  _DWORD *v465;
  uint64_t v466;
  unint64_t v467;
  _DWORD *v468;
  uint64_t v469;
  _DWORD *v470;
  int v471;
  _DWORD *v472;
  uint64_t v473;
  uint64_t *v474;
  uint64_t v475;
  _DWORD *v476;
  uint64_t v477;
  uint64_t v478;
  _QWORD *v480;
  uint64_t v481;
  timeval v482;
  unsigned __int128 v483;
  timeval v484;
  unsigned __int128 v485;
  timeval v486;
  unsigned __int128 v487;
  int v488[3];

  v486 = (timeval)0;
  v487 = 0u;
  v484 = (timeval)0;
  v485 = 0u;
  if (!a1)
    return 0xFFFFFFFFLL;
  v14 = a1;
  v15 = a1 + 132080;
  v16 = a1 + 114344;
  v17 = (_DWORD *)(a1 + 113852);
  v482 = (timeval)0;
  v483 = 0uLL;
  gettimeofday(&v482, 0);
  *(_QWORD *)(v16 + 408) = 0;
  if (*(_DWORD *)(v15 + 10728) == 1 && *v17)
  {
    v20 = *(_QWORD *)(v16 + 400);
    v21 = *(_DWORD *)(v20 + 8);
    if (v21)
    {
      v22 = *(_QWORD *)(v20 + 16);
      *(_QWORD *)(v16 + 424) = v22 + 184 * (v21 - 1);
      if (!v22)
        return 0xFFFFFFFFLL;
    }
    else
    {
      v23 = *(_DWORD *)v20 - 1;
      v24 = *(_QWORD *)(v20 + 16);
      *(_QWORD *)(v16 + 424) = v24 + 184 * v23;
      if (!v24)
        return 0xFFFFFFFFLL;
    }
  }
  v25 = *(_QWORD *)(v16 + 400);
  v26 = *(_DWORD *)(v25 + 4);
  if (!v26 || (v27 = *(_DWORD *)v25, !a8) && v26 != v27 - 1)
  {
    *(_QWORD *)(v16 + 408) = 0;
LABEL_12:
    *a3 = 0;
    return 0xFFFFFFFFLL;
  }
  v29 = *(_QWORD *)(v25 + 16);
  v30 = *(_DWORD *)(v25 + 8);
  if (v30 + 1 < v27)
    v27 = 0;
  v31 = v30 + 1 - v27;
  v32 = v29 + 184 * v30;
  *(_DWORD *)(v25 + 4) = v26 - 1;
  *(_DWORD *)(v25 + 8) = v31;
  *(_QWORD *)(v16 + 408) = v32;
  if (!v29)
    goto LABEL_12;
  v467 = a5;
  v472 = (_DWORD *)(v14 + 131812);
  v33 = v14 + 103608;
  *(_DWORD *)(v14 + 111064) = 1;
  v34 = *(_QWORD *)(v16 + 416);
  if (v34)
  {
    *(_DWORD *)(v14 + 114972) = v32 == v34;
    if (v32 == v34)
      *(_QWORD *)(v16 + 416) = 0;
  }
  else
  {
    *(_DWORD *)(v14 + 114972) = 0;
  }
  *(_QWORD *)(v16 + 432) = v32;
  *(_QWORD *)(v16 + 440) = v32;
  v35 = v29 + 184 * v30;
  v36 = (uint64_t *)(v35 + 160);
  *a6 = *(_QWORD *)(v35 + 160);
  v38 = *(_QWORD *)(v35 + 168);
  v37 = (uint64_t *)(v35 + 168);
  *a7 = v38;
  *a2 = *((_DWORD *)v37 + 2);
  if (*(_DWORD *)(v15 + 10728) == 1 && *v17)
    *(_QWORD *)(v14 + 114952) = *(_QWORD *)(v16 + 424);
  v39 = v14 + 149928;
  v40 = v14 + 149496;
  v478 = v14 + 149236;
  v41 = (_QWORD *)(v14 + 143112);
  v42 = *v36;
  v43 = (_DWORD *)(v14 + 131812);
  v44 = *(_QWORD *)(v14 + 132056);
  if (v42 < v44)
  {
    *(_QWORD *)(v14 + 132056) = v42;
    *(_QWORD *)(v14 + 132048) = v42;
    v44 = v42;
  }
  v45 = (_DWORD *)(v14 + 142828);
  if (*(_DWORD *)(v14 + 111064))
  {
    v46 = *v37;
    if (v42 == v44)
    {
      v47 = v46 - v42;
      if (v46 == v42)
        goto LABEL_66;
      goto LABEL_37;
    }
    v48 = *(_QWORD *)(v14 + 132048);
    v47 = v46 - v48;
    if (v46 - v48 >= 0xCCCCCCCCCCCCCCCLL)
      v47 = 0xCCCCCCCCCCCCCCCLL;
    v49 = v48 - *(_QWORD *)(v14 + 132040);
    if (v49)
    {
      if (!v47)
      {
LABEL_66:
        *(_QWORD *)(v14 + 132040) = v42;
        *(_QWORD *)(v14 + 132048) = v46;
        goto LABEL_67;
      }
      if ((10 * (v47 - v49) / v49))
      {
LABEL_37:
        HIDWORD(v50) = 1097011920;
        v51 = 10000000.0 / (double)v47;
        *(double *)(v15 + 24) = v51;
        if (*(_DWORD *)(v16 + 372) < 2u)
        {
LABEL_46:
          v54 = *(_DWORD *)(v16 + 172);
          if (v54 < 2)
          {
            v56 = 30.0;
            if (v51 < 0.1)
              v51 = 30.0;
            *(double *)(v15 + 16) = v51;
            LODWORD(v56) = v17[108];
            v57 = llround((double)v56 / v51);
            *(double *)(v14 + 132032) = v51;
            *(_DWORD *)(v14 + 132012) = v57;
            *(_DWORD *)(v14 + 132016) = v57;
            v58 = 1374389535 * (int)(*(_DWORD *)(v16 + 88) * v57);
            *(_DWORD *)(v14 + 132020) = (v58 >> 37) + ((unint64_t)v58 >> 63);
            v18 = 0.5;
            v59 = v51 * 0.5;
            if ((int)v59 >= 10)
              v60 = (int)v59 + 2;
            else
              v60 = 12;
            *(_DWORD *)(v14 + 131972) = v60;
            v61 = *(_DWORD *)(v14 + 115168) >> 1;
            *(_DWORD *)(v14 + 148104) = v61;
            if (*(_DWORD *)(v16 + 96))
            {
              v62 = v17[119];
              if (v62)
              {
                if (v60 >= v62)
                {
                  v60 = v62 - 1;
                  *(_DWORD *)(v14 + 131972) = v62 - 1;
                }
                if (v61 >= v62)
                {
                  v61 = v62 - 1;
                  *(_DWORD *)(v14 + 148104) = v62 - 1;
                }
              }
            }
            if (v60 > v61)
              *(_DWORD *)(v14 + 131972) = v61;
          }
          else
          {
            if (v54 >= 5)
              v54 = 5;
            LODWORD(v50) = *(_DWORD *)(v16 + 240);
            v55 = v51 / (double)*(unint64_t *)&v50;
            *(double *)(v14 + 149280) = v55;
            LODWORD(v55) = *(_DWORD *)(v16 + 244);
            v18 = v51 / (double)*(unint64_t *)&v55;
            *(double *)v40 = v18;
            if (v54 != 2)
            {
              LODWORD(v18) = *(_DWORD *)(v16 + 248);
              v18 = v51 / (double)*(unint64_t *)&v18;
              *(double *)(v14 + 149712) = v18;
              if (v54 != 3)
              {
                LODWORD(v18) = *(_DWORD *)(v16 + 252);
                v18 = v51 / (double)*(unint64_t *)&v18;
                *(double *)v39 = v18;
                if (v54 != 4)
                {
                  LODWORD(v18) = *(_DWORD *)(v16 + 256);
                  v18 = (double)*(unint64_t *)&v18;
                  *(double *)(v14 + 150144) = v51 / v18;
                }
              }
            }
          }
          goto LABEL_66;
        }
LABEL_42:
        v53 = *(_QWORD *)(v16 + 392);
        if (*(_DWORD *)(v16 + 376))
        {
          if (!*(_DWORD *)(v53 + 48))
          {
            v51 = *(double *)(v53 + 16);
            *(double *)(v15 + 24) = v51;
          }
        }
        else
        {
          *(double *)(v53 + 16) = v51;
          *(_DWORD *)(v53 + 48) = 0;
        }
        goto LABEL_46;
      }
    }
    else if (!v47)
    {
      goto LABEL_66;
    }
    v52 = v46 - v44;
    if (v52 >= 10000000)
      v52 = 10000000;
    HIDWORD(v19) = 1097011920;
    v50 = 10000000.0 / *(double *)(v15 + 24) * ((double)v52 - 10000000.0 / *(double *)(v15 + 24) + (double)v47);
    v51 = 10000000.0 / (v50 / (double)v52);
    *(double *)(v15 + 24) = v51;
    if (*(_DWORD *)(v16 + 372) < 2u)
      goto LABEL_46;
    goto LABEL_42;
  }
LABEL_67:
  v63 = *(_DWORD *)(v16 + 172);
  if (v63 < 2)
    goto LABEL_118;
  if (v63 >= 5)
    v64 = 5;
  else
    v64 = v63;
  v65 = *(double *)(v15 + 24);
  v66 = *(int *)(v16 + 24);
  v67 = *(_QWORD *)(v16 + 8);
  v68 = *(_QWORD *)(v16 + 16);
  LODWORD(v18) = *(_DWORD *)(v16 + 240);
  v69 = v65 / (double)*(unint64_t *)&v18;
  *(double *)(v14 + 149280) = v69;
  v70 = *(_DWORD *)(v16 + 176);
  v71 = 0x7FFFFFFFLL;
  if (v70 <= 0x20C49B)
    v72 = 1000 * v70;
  else
    v72 = 0x7FFFFFFFLL;
  *(_DWORD *)(v14 + 149288) = v72;
  if (v66 * v72 < 0x1F400000000)
    v71 = (int)v66 * (int)v72 / 1000;
  *(_QWORD *)(v14 + 149296) = v71;
  if (v67)
  {
    v73 = *(int *)(v16 + 32) * v72;
    v74 = (int)v73 / 1000;
    if (v73 >= 0x1F400000000)
      v74 = 0x7FFFFFFFLL;
    *(_QWORD *)(v14 + 149304) = v74;
    if (v68)
      goto LABEL_80;
  }
  else
  {
    *(_QWORD *)(v14 + 149304) = v72 >> 3;
    if (v68)
    {
LABEL_80:
      v75 = *(int *)(v16 + 40) * v72;
      v76 = (int)v75 / 1000;
      v145 = v75 < 0x1F400000000;
      v77 = 0x7FFFFFFFLL;
      if (v145)
        v77 = v76;
      goto LABEL_85;
    }
  }
  v77 = v72 >> 3;
LABEL_85:
  *(_QWORD *)(v14 + 149312) = v77;
  v78 = v64 - 1;
  v79 = (int *)(v16 + 180);
  v80 = 0x100000000;
  do
  {
    LODWORD(v19) = v79[16];
    v19 = v65 / (double)*(unint64_t *)&v19;
    *(double *)v40 = v19;
    if (*v79 <= 0x20C49B)
      v84 = (1000 * *v79);
    else
      v84 = 0x7FFFFFFFLL;
    *(_DWORD *)(v40 + 8) = v84;
    if (v66 * v84 >= 0x1F400000000)
      v85 = 0x7FFFFFFFLL;
    else
      v85 = (int)v66 * (int)v84 / 1000;
    *(_QWORD *)(v40 + 16) = v85;
    if (v67)
    {
      v86 = *(int *)(v16 + 32) * v84;
      if (v86 >= 0x1F400000000)
        v87 = 0x7FFFFFFFLL;
      else
        v87 = (int)v86 / 1000;
      *(_QWORD *)(v40 + 24) = v87;
      if (!v68)
      {
LABEL_102:
        v82 = v84 >> 3;
        goto LABEL_90;
      }
    }
    else
    {
      *(_QWORD *)(v40 + 24) = v84 >> 3;
      if (!v68)
        goto LABEL_102;
    }
    v81 = *(int *)(v16 + 40) * v84;
    if (v81 >= 0x1F400000000)
      v82 = 0x7FFFFFFFLL;
    else
      v82 = (int)v81 / 1000;
LABEL_90:
    *(_QWORD *)(v40 + 32) = v82;
    v83 = *v79++;
    *(_DWORD *)(v40 + 64) = llround((double)(1000 * (v83 - *(_DWORD *)(v14 + 4 * v80 + 114520)))/ (v19 - v69));
    v40 += 216;
    ++v80;
    v69 = v19;
    --v78;
  }
  while (v78);
  v88 = *(_DWORD *)(v14 + 143132);
  if (v88 < 0)
    v88 = *(_DWORD *)(v14 + 4 * (*(_DWORD *)(v14 + 143128) % *(_DWORD *)(v16 + 304)) + 114652);
  *(_DWORD *)(v14 + 149272) = v88;
  v89 = v14 + 216 * v88 + 149280;
  v90 = *(_DWORD *)(v89 + 8);
  *(_DWORD *)(v15 + 10676) = v90;
  v91 = *(_OWORD *)(v89 + 32);
  *(_OWORD *)v16 = *(_OWORD *)(v89 + 16);
  *(_OWORD *)(v16 + 16) = v91;
  *(_OWORD *)(v16 + 32) = *(_OWORD *)(v89 + 48);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)(v89 + 72);
  *(_QWORD *)(v15 + 64) = *(_QWORD *)(v89 + 88);
  *(_DWORD *)(v15 + 80) = *(_DWORD *)(v89 + 104);
  *(_DWORD *)(v15 + 88) = *(_DWORD *)(v89 + 112);
  v92 = *(_OWORD *)(v89 + 116);
  v93 = *(_DWORD *)(v89 + 164);
  *(_DWORD *)(v14 + 103884) = *(_DWORD *)(v89 + 160);
  *(_QWORD *)v15 = *(_QWORD *)(v89 + 168);
  *(_DWORD *)(v14 + 111556) = *(_DWORD *)(v89 + 176);
  *(_DWORD *)(v14 + 142872) = *(_DWORD *)(v89 + 188);
  *(_OWORD *)(v14 + 103608) = *(_OWORD *)(v89 + 192);
  v17[108] = v90;
  *(_OWORD *)(v14 + 132064) = v92;
  *(_OWORD *)(v14 + 131920) = *(_OWORD *)(v89 + 136);
  *(_QWORD *)(v14 + 131936) = *(_QWORD *)(v89 + 152);
  *(int32x2_t *)(v14 + 143140) = vrev64_s32(*(int32x2_t *)(v89 + 180));
  *(_QWORD *)(v14 + 131912) = *(_QWORD *)(v89 + 208);
  v94 = *(double *)v89;
  if (*(double *)v89 < 0.1)
    v94 = 30.0;
  *(double *)(v15 + 16) = v94;
  *(double *)(v14 + 132032) = v94;
  v95 = llround((double)v90 / v94);
  *(_DWORD *)(v14 + 132012) = v95;
  *(_DWORD *)(v14 + 132016) = v95;
  v96 = 1374389535 * (int)(*(_DWORD *)(v16 + 88) * v95);
  *(_DWORD *)(v14 + 132020) = (v96 >> 63) + (SHIDWORD(v96) >> 5);
  *(_DWORD *)(v14 + 132024) = v93;
  v97 = v94 * 0.5;
  if ((int)v97 >= 10)
    v98 = (int)v97 + 2;
  else
    v98 = 12;
  *(_DWORD *)(v14 + 131972) = v98;
  v99 = *(_DWORD *)(v14 + 115168) >> 1;
  *(_DWORD *)(v14 + 148104) = v99;
  if (*(_DWORD *)(v16 + 96))
  {
    v100 = v17[119];
    if (v100)
    {
      if (v98 >= v100)
      {
        v98 = v100 - 1;
        *(_DWORD *)(v14 + 131972) = v100 - 1;
      }
      if (v99 >= v100)
      {
        v99 = v100 - 1;
        *(_DWORD *)(v14 + 148104) = v100 - 1;
      }
    }
  }
  if (v98 > v99)
    *(_DWORD *)(v14 + 131972) = v99;
LABEL_118:
  v481 = v14 + 142828;
  v470 = (_DWORD *)(v14 + 149928);
  if (*(_DWORD *)(v15 + 10708) == 2)
  {
    gettimeofday(&v486, 0);
    gettimeofday(&v484, 0);
    v39 = v14 + 149928;
    v45 = (_DWORD *)(v14 + 142828);
  }
  v45[49] = 100 * v45[48] / *(_DWORD *)(v14 + 111072);
  *a3 = 0;
  *(_DWORD *)(v14 + 111060) = 1;
  v101 = *a2;
  *(_DWORD *)(v14 + 111068) = *a2;
  v102 = *(_DWORD *)(v14 + 110040);
  if (!v102)
    goto LABEL_127;
  if (!*(_DWORD *)(v14 + 110200))
  {
    v102 = 1;
LABEL_127:
    *(_DWORD *)(v14 + 110544) = v102;
    goto LABEL_128;
  }
  if (!*(_DWORD *)(v14 + 110360))
  {
    v102 = 2;
    goto LABEL_127;
  }
  if (!*(_DWORD *)(v14 + 110520))
  {
    v102 = 3;
    goto LABEL_127;
  }
LABEL_128:
  if (*(_DWORD *)(v14 + 148216))
  {
    v103 = 0;
    *(_DWORD *)(v14 + 111060) = 0;
    *(_DWORD *)(v14 + 148216) = 0;
  }
  else
  {
    v103 = 1;
  }
  *(_DWORD *)(v14 + 132012) = llround((double)*(int *)(v15 + 10676) / *(double *)(v14 + 132032));
  v468 = (_DWORD *)(v14 + 111580);
  v469 = v14 + 148232;
  *(_QWORD *)(v14 + 111580) = 0;
  *(_DWORD *)(v14 + 103884) = 0;
  *(_QWORD *)(v14 + 103868) = 1;
  if (*(_DWORD *)(v15 + 10728) == 2 && *(int *)(v15 + 10664) <= 400)
    *(_DWORD *)(v14 + 103868) = 0;
  *(_DWORD *)(v14 + 111604) = *(_DWORD *)(v14 + 114968) != 0;
  v104 = *v17;
  if (!*v17 || (v101 & 1) != 0 || v17[116] && !(*(_DWORD *)(v14 + 115164) % *(_DWORD *)(v14 + 115168)))
  {
    v103 = 0;
    *(_DWORD *)(v14 + 111060) = 0;
    if (v17[109] == 4)
    {
      v103 = 0;
      *(_DWORD *)(v14 + 149204) = 2;
      *(_OWORD *)v478 = xmmword_208F3D790;
      *(_OWORD *)(v14 + 149252) = xmmword_208F3D7A0;
    }
  }
  v475 = v14 + 81920;
  if (*(_DWORD *)(v16 + 372) < 2u)
  {
    *(_DWORD *)(v39 + 936) = 1;
    if (!v103)
      goto LABEL_186;
LABEL_166:
    v113 = v45[12];
    if ((v113 & 1) != 0)
    {
      v114 = 1;
      if ((v113 & 2) == 0)
      {
LABEL_174:
        if ((v113 & 4) != 0
          && v104 - *(_DWORD *)(v39 + 932) < (v104 - *(_DWORD *)(v14 + 4 * v114 + 150848)))
        {
          v114 = 3;
        }
        *(_DWORD *)(v39 + 936) = v114;
        v115 = 1;
        goto LABEL_190;
      }
    }
    else
    {
      if ((v113 & 2) == 0)
      {
        v114 = (v113 << 29 >> 31) & 3;
        goto LABEL_174;
      }
      v114 = 2;
    }
    if (v104 - *(_DWORD *)(v39 + 928) < (v104 - *(_DWORD *)(v14 + 4 * v114 + 150848)))
      v114 = 2;
    goto LABEL_174;
  }
  v105 = *(_DWORD **)(v16 + 392);
  if (!*(_DWORD *)(v16 + 376))
  {
    v105[11] = 0;
    if (!v103)
    {
      v105[10] = v104;
      goto LABEL_185;
    }
    goto LABEL_166;
  }
  if (v103)
  {
    v106 = v105[1];
    v107 = v106 == 0;
    *(_BYTE *)(v39 + 916) = v106 == 0;
    v108 = v45[12];
    if ((v108 & 1) != 0)
    {
      if (v106)
        v109 = 0;
      else
        v109 = *(_DWORD *)(v39 + 924) == v105[7];
      v107 = v109;
      *(_BYTE *)(v39 + 916) = v107;
    }
    if ((v108 & 2) != 0)
    {
      if (*(_DWORD *)(v39 + 928) != v105[8])
        v107 = 0;
      *(_BYTE *)(v39 + 916) = v107;
    }
  }
  if (v105[11])
    *(_BYTE *)(v39 + 916) = 0;
  v105[11] = 0;
  if (v103)
    goto LABEL_166;
  if (!v104 && !*(_QWORD *)(v15 + 32))
  {
    v110 = *(_QWORD *)v16;
    *(_QWORD *)(v15 + 32) = *(_QWORD *)v16;
    *(_QWORD *)(v15 + 40) = v110;
    v111 = *(unsigned int *)(v16 + 172);
    if ((_DWORD)v111)
    {
      if ((_DWORD)v111 == 1)
      {
        v112 = 0;
        goto LABEL_182;
      }
      v112 = v111 & 0xFFFFFFFE;
      v116 = v14 + 149296;
      v117 = v112;
      do
      {
        v118 = (const double *)(v116 + 216);
        v119 = vld1q_dup_f64((const double *)v116);
        *(float64x2_t *)(v116 + 56) = v119;
        v120 = vld1q_dup_f64(v118);
        *(float64x2_t *)(v116 + 272) = v120;
        v116 += 432;
        v117 -= 2;
      }
      while (v117);
      if (v112 != v111)
      {
LABEL_182:
        v121 = v111 - v112;
        v122 = (float64x2_t *)(v14 + 216 * v112 + 149352);
        do
        {
          v123 = &v122[-4].f64[1];
          v124 = vld1q_dup_f64(v123);
          *v122 = v124;
          v122 = (float64x2_t *)((char *)v122 + 216);
          --v121;
        }
        while (v121);
      }
    }
  }
  *v17 = v105[10];
LABEL_185:
  *(_DWORD *)(v39 + 936) = 1;
LABEL_186:
  v125 = *(_BYTE *)v475 != 0;
  *(_BYTE *)(v14 + 81921) = v125;
  *(_BYTE *)(v14 + 81922) = v125;
  *(_WORD *)(v14 + 81935) = 257;
  *(_QWORD *)(v14 + 81945) = 0;
  *(_DWORD *)(v14 + 81937) = 0;
  *(_DWORD *)(v14 + 81941) = -16908286;
  *(_BYTE *)(v14 + 81949) = 4;
  if (v17[115])
    v126 = -2;
  else
    v126 = -12;
  *(_BYTE *)(v14 + 81950) = v126;
  *(_WORD *)(v14 + 81951) = 1026;
  *(_DWORD *)(v14 + 114968) = 0;
  memset_pattern16((void *)(v14 + 103624), &unk_208F3D7C0, 0x50uLL);
  bzero((void *)*v41, *(int *)(v14 + 111080) * (uint64_t)*(int *)(v14 + 111076));
  bzero(*(void **)(v14 + 143120), *(int *)(v14 + 111080) * (uint64_t)*(int *)(v14 + 111076));
  v115 = *(_DWORD *)(v14 + 111060);
  if (v115)
  {
LABEL_190:
    if (!(*(_DWORD *)v33 + *(_DWORD *)(v14 + 103612) + *(_DWORD *)(v14 + 103616) + *(_DWORD *)(v14 + 103620)))
    {
      v127 = 63;
      goto LABEL_193;
    }
  }
  else
  {
    v127 = 255;
LABEL_193:
    *(_DWORD *)(v15 + 10732) = v127;
    *(_QWORD *)(v15 + 10736) = 0x8000000080;
  }
  v476 = (_DWORD *)(v14 + 180176);
  v128 = *(_DWORD *)(v16 + 172);
  if (v128 == 1)
  {
    if (*(_DWORD *)(v14 + 111576))
    {
      v129 = *(_DWORD *)(v15 + 10732);
      if (v129 <= 215)
        v130 = v129 + 40;
      else
        v130 = 255;
      *(_DWORD *)(v15 + 10732) = v130;
      v131 = 0x1000000C8;
LABEL_200:
      *(_QWORD *)(v15 + 10736) = v131;
LABEL_201:
      if (!*(_DWORD *)(v14 + 114968))
        goto LABEL_202;
    }
    else
    {
      v159 = *(_DWORD *)(v14 + 131944);
      if (v159 == 1)
      {
        v131 = 0xDC000000C0;
        goto LABEL_200;
      }
      if (!v159)
      {
        *(_DWORD *)(v15 + 10736) = 214;
        goto LABEL_201;
      }
      if (*(_DWORD *)(v14 + 114968))
      {
        v169 = *(_DWORD *)(v15 + 10740);
        if (v169 >= 30)
          v170 = v169 - 20;
        else
          v170 = 10;
        *(_DWORD *)(v15 + 10740) = v170;
        goto LABEL_201;
      }
LABEL_202:
      *(_DWORD *)(v15 + 10740) = 255;
    }
  }
  v132 = *(_QWORD *)(v16 + 8) * *(int *)(v16 + 80);
  v133 = v132 / 100;
  if ((int)(v132 / 100) >= 0)
    v134 = v132 / 100;
  else
    v134 = v132 / 100 + 3;
  v135 = v133 + 7;
  if ((int)(v132 / 100) >= 0)
    v135 = v132 / 100;
  v477 = v14;
  v474 = a3;
  if (!*(_DWORD *)(v15 + 96))
    goto LABEL_232;
  v136 = 2 * (int)v133 / 3;
  v137 = *(_QWORD *)(v15 + 32);
  if (v137 > (int)v133)
  {
    v138 = *(_DWORD *)(v15 + 10688);
    v139 = __OFSUB__(v138, 1);
    v140 = v138 - 1;
    if (v140 < 0 == v139)
      *(_DWORD *)(v15 + 10688) = v140;
  }
  if (v137 > v136 && *(int *)(v15 + 10688) > 0)
  {
    v141 = (int *)(v15 + 10688);
    goto LABEL_243;
  }
  v142 = v135 >> 3;
  v141 = (int *)(v15 + 10688);
  v143 = *(_DWORD *)(v15 + 10688);
  if (v137 < v142 && (v143 & 0xFFFFFFFE) == 2)
  {
    v143 = 3;
LABEL_248:
    *v141 = v143;
    v149 = 4;
    v148 = 5;
LABEL_249:
    *(_DWORD *)(v14 + 132012) = *(_DWORD *)(v14 + 132012) * v148 / v149;
LABEL_250:
    if (v115)
    {
      v160 = *(_DWORD *)(v15 + 10692);
      v139 = __OFSUB__(v160, 1);
      v161 = v160 - 1;
      if (v161 < 0 == v139)
      {
        *(_DWORD *)(v15 + 10692) = v161;
        v162 = *(_QWORD *)(v15 + 40) + *(int *)(v14 + 132016);
        if (v162 >= *(_QWORD *)(v16 + 16))
          v162 = *(_QWORD *)(v16 + 16);
        *(_QWORD *)(v15 + 40) = v162;
        v163 = *(_DWORD *)(v16 + 372);
        if (v163 >= 2 && *(_DWORD *)(v16 + 376) < v163 - 1)
          **(_QWORD **)(v16 + 392) = 0x100000001;
        ++*v17;
        ++*(_DWORD *)(v14 + 115164);
        *v476 = 0;
        ++*(_DWORD *)(v14 + 143128);
        *(_QWORD *)(v15 + 32) = v162;
        if (v128 >= 2)
        {
          v164 = *(_DWORD *)(v14 + 149272);
          if (v164 + 1 < v128)
          {
            v165 = ~v164 + v128;
            v166 = (double *)(v14 + 216 * (v164 + 1) + 149360);
            do
            {
              v167 = *(_QWORD *)v166 + (int)((double)*((int *)v166 - 18) / *(v166 - 10));
              if (v167 >= *((_QWORD *)v166 - 6))
                v167 = *((_QWORD *)v166 - 6);
              *((_QWORD *)v166 - 1) = v167;
              *(_QWORD *)v166 = v167;
              v166 += 27;
              --v165;
            }
            while (v165);
          }
        }
        goto LABEL_729;
      }
    }
    *(_DWORD *)(v15 + 10692) = v143;
    if (vp8_pick_frame_size(v14))
      goto LABEL_233;
    goto LABEL_265;
  }
  v145 = v137 >= v134 >> 2 || (v143 - 1) > 1;
  if (!v145)
  {
    v143 = 2;
    goto LABEL_248;
  }
  if (v137 < v136 && v143 < 2)
  {
LABEL_243:
    v143 = 1;
    *v141 = 1;
    v149 = 2;
    v148 = 3;
    goto LABEL_249;
  }
  if (v143 >= 1)
  {
    if (v143 < 4)
    {
      v147 = 4 * (v143 - 1);
      v148 = *(_DWORD *)((char *)&unk_208F3DF08 + v147);
      v149 = *(_DWORD *)((char *)&unk_208F3DF14 + v147);
      goto LABEL_249;
    }
    goto LABEL_250;
  }
LABEL_232:
  *(_DWORD *)(v15 + 10692) = 0;
  if (!vp8_pick_frame_size(v14))
  {
LABEL_265:
    v168 = *(_DWORD *)(v16 + 372);
    if (v168 >= 2 && *(_DWORD *)(v16 + 376) < v168 - 1)
      **(_QWORD **)(v16 + 392) = 0x100000001;
    ++*v17;
    ++*(_DWORD *)(v14 + 115164);
    *v476 = 0;
LABEL_728:
    ++*((_DWORD *)v41 + 4);
    goto LABEL_729;
  }
LABEL_233:
  v150 = v17[120];
  if (v150 == 1)
  {
    v151 = *(_QWORD *)(v15 + 32);
    v152 = *(_QWORD *)(v16 + 8);
    v153 = v151 - v152;
    if (v151 >= v152)
    {
      if (*(_DWORD *)(v15 + 8))
      {
        v154 = *(_DWORD *)(v15 + 80);
        v155 = v154 >= 0 ? *(_DWORD *)(v15 + 80) : v154 + 3;
        if ((v154 + 3) >= 7)
        {
          LODWORD(v156) = v155 >> 2;
          v157 = *(_QWORD *)(v16 + 16);
          if (v151 < v157)
          {
            v158 = (v157 - v152) / (int)v156;
            if ((_DWORD)v158)
              v156 = v153 / (int)v158;
            else
              LODWORD(v156) = 0;
          }
          v171 = v154 - v156;
          if (v171 <= *(_DWORD *)(v15 + 88))
            v171 = *(_DWORD *)(v15 + 88);
          *(_DWORD *)(v15 + 80) = v171;
        }
      }
    }
  }
  v172 = *(_DWORD *)(v15 + 10728);
  if (v172 != 2)
  {
    if (*(int *)(v14 + 132072) <= 150)
    {
      if (v150 != 2)
        goto LABEL_330;
      if (*(_DWORD *)(v14 + 111060) && !*(_DWORD *)(v14 + 111572) && !*(_DWORD *)(v14 + 111576))
      {
        v179 = *(_DWORD *)(v15 + 92);
        if (*(_DWORD *)(v15 + 88) < v179)
          goto LABEL_329;
        goto LABEL_330;
      }
      goto LABEL_328;
    }
    v173 = *(_DWORD *)(v15 + 80);
    if (!*(_DWORD *)(v14 + 111060))
    {
      v175 = kf_high_motion_minq[*(int *)(v15 + 80)];
      goto LABEL_315;
    }
LABEL_289:
    if (*(_DWORD *)(v16 + 172) != 1 || !*(_DWORD *)(v14 + 111572) && !*(_DWORD *)(v14 + 111576))
    {
      v175 = inter_minq[v173];
      *(_DWORD *)(v15 + 88) = v175;
      if (v150 != 2)
        goto LABEL_324;
      v179 = *(_DWORD *)(v15 + 92);
      if (v179 <= v175)
        goto LABEL_330;
      if (*(_DWORD *)(v15 + 52) < *(_DWORD *)(v14 + 132020))
        v179 = *(_DWORD *)(v16 + 60);
LABEL_329:
      *(_DWORD *)(v15 + 88) = v179;
      goto LABEL_330;
    }
    if (*(_DWORD *)(v14 + 115164) < 2u)
    {
      if (v150 != 2)
        goto LABEL_296;
    }
    else
    {
      if (*(_DWORD *)(v14 + 132076) < v173)
        v173 = *(_DWORD *)(v14 + 132076);
      if (v150 != 2)
      {
LABEL_296:
        if (v172 == 2)
        {
LABEL_297:
          v178 = *(_DWORD *)(v15 + 10664);
          if (v178 < 1001)
          {
            if (v178 > 399)
              v181 = (unsigned __int8 *)&gf_mid_motion_minq;
            else
              v181 = gf_high_motion_minq;
            v175 = v181[v173];
          }
          else
          {
            v175 = gf_low_motion_minq[v173];
          }
          *(_DWORD *)(v15 + 88) = v175;
          if (v150 != 2)
            goto LABEL_324;
          v179 = (15 * v175) >> 4;
          goto LABEL_329;
        }
        goto LABEL_313;
      }
    }
    if (v173 <= *(_DWORD *)(v15 + 92))
      v173 = *(_DWORD *)(v15 + 92);
    if (v172 == 2)
      goto LABEL_297;
LABEL_313:
    v175 = gf_high_motion_minq[v173];
LABEL_315:
    *(_DWORD *)(v15 + 88) = v175;
    goto LABEL_324;
  }
  v173 = *(_DWORD *)(v15 + 80);
  if (*(_DWORD *)(v14 + 111060))
    goto LABEL_289;
  if (*(int *)(v15 + 10664) <= 600)
    v174 = kf_high_motion_minq;
  else
    v174 = (unsigned __int8 *)&kf_low_motion_minq;
  v175 = v174[v173];
  *(_DWORD *)(v15 + 88) = v175;
  if (*(_DWORD *)(v14 + 115172))
  {
    v176 = *(_DWORD *)(v14 + 132076);
    v177 = 7 * v176 / 8;
    if (v177 >= v175)
    {
      v180 = v176 >> 2;
      if (v180 > v175)
      {
        *(_DWORD *)(v15 + 88) = v180;
        v175 = v180;
      }
    }
    else
    {
      *(_DWORD *)(v15 + 88) = v177;
      v175 = 7 * v176 / 8;
    }
  }
LABEL_324:
  if (v150 != 1)
    goto LABEL_330;
  v182 = *(_QWORD *)(v15 + 32);
  v183 = *(_QWORD *)(v16 + 16);
  if (v182 >= v183)
  {
LABEL_328:
    v179 = *(_DWORD *)(v15 + 84);
    goto LABEL_329;
  }
  v184 = *(_QWORD *)(v16 + 8);
  v145 = v182 <= v184;
  v185 = v182 - v184;
  if (!v145)
  {
    v179 = v175 - (int)((v175 - *(_DWORD *)(v15 + 84)) * ((v185 << 7) / (v183 - v184))) / 128;
    goto LABEL_329;
  }
LABEL_330:
  v187 = *(_DWORD *)(v15 + 76);
  v186 = *(_DWORD *)(v15 + 80);
  if (v186 > v187)
  {
    *(_DWORD *)(v15 + 80) = v187;
    v186 = v187;
    v189 = *(_DWORD *)(v15 + 84);
    v188 = *(_DWORD *)(v15 + 88);
    if (v188 >= v189)
      goto LABEL_332;
LABEL_344:
    *(_DWORD *)(v15 + 88) = v189;
    v188 = v189;
    v466 = v16;
    if (v186 >= v189)
      goto LABEL_334;
LABEL_333:
    *(_DWORD *)(v15 + 80) = v188;
    goto LABEL_334;
  }
  v189 = *(_DWORD *)(v15 + 84);
  v188 = *(_DWORD *)(v15 + 88);
  if (v188 < v189)
    goto LABEL_344;
LABEL_332:
  v466 = v16;
  if (v186 < v188)
    goto LABEL_333;
LABEL_334:
  v471 = vp8_regulate_q((_DWORD *)v14, *(_DWORD *)(v14 + 131904));
  v190 = *(_DWORD *)(v14 + 109860) * *(_DWORD *)(v14 + 109856) > 101376;
  v191 = *(_DWORD *)(v14 + 111076);
  v480 = (_QWORD *)(v14 + 143112);
  v464 = a2;
  v465 = v17;
  v473 = v14 + 114792;
  v192 = v14 + 142828;
  if (v191 >= 1)
  {
    v193 = *(_DWORD *)(v14 + 111080);
    if (v193 >= 1)
    {
      v462 = v15;
      v194 = 0;
      v195 = *(_QWORD *)(v466 + 432);
      v196 = *(_DWORD *)(v195 + 16);
      v197 = *(_DWORD *)(v195 + 36);
      v198 = *(_QWORD *)(v195 + 64);
      v199 = *(_QWORD *)(v195 + 72);
      v200 = *(_QWORD *)(v195 + 56);
      do
      {
        if (v193 < 1)
        {
          LODWORD(v201) = 0;
        }
        else
        {
          v201 = 0;
          do
          {
            v203 = v190;
            v204 = vp8_compute_skin_block(v200, v198, v199, v196, v197, v190, *(unsigned __int8 *)(*v480 + v194 * (uint64_t)v193 + v201), 0);
            v190 = v203;
            v192 = v481;
            *(_BYTE *)(*(_QWORD *)(v481 + 204) + v194 * (uint64_t)v193 + v201) = v204;
            v200 += 16;
            v198 += 8;
            v199 += 8;
            v193 = *(_DWORD *)(v33 + 7472);
            ++v201;
          }
          while ((int)v201 < v193);
          v191 = *(_DWORD *)(v33 + 7468);
        }
        v200 += 16 * (v196 - (int)v201);
        v202 = 8 * (v197 - (int)v201);
        v198 += v202;
        v199 += v202;
        ++v194;
      }
      while (v194 < v191);
      v15 = v462;
      v14 = v477;
      v41 = v480;
      v17 = v465;
      v43 = v472;
      if (v191 >= 3 && v193 >= 3)
      {
        v205 = 1;
        do
        {
          while (v193 <= 2)
          {
            if (++v205 >= v191 - 1)
              goto LABEL_386;
          }
          v206 = v205 + 1;
          v207 = 1;
          do
          {
            v209 = *(_QWORD *)(v192 + 204);
            v210 = (_BYTE *)(v209 + (v205 - 1) * v193 + v207);
            v211 = *(v210 - 1) != 0;
            if (*v210)
              ++v211;
            if (v210[1])
              ++v211;
            v212 = v209 + v205 * v193;
            v213 = (unsigned __int8 *)(v212 + v207);
            if (*(_BYTE *)(v212 + v207 - 1))
              v214 = v211 + 1;
            else
              v214 = v211;
            v215 = *v213;
            if (*v213)
              ++v214;
            if (v213[1])
              v216 = v214 + 1;
            else
              v216 = v214;
            v217 = (_BYTE *)(v209 + v206 * v193 + v207);
            if (*(v217 - 1))
              v218 = v216 + 1;
            else
              v218 = v216;
            if (*v217)
              ++v218;
            if (v217[1])
              v219 = v218 + 1;
            else
              v219 = v218;
            if (v215)
              v220 = v219 >= 2;
            else
              v220 = 1;
            if (!v220)
            {
              v208 = 0;
LABEL_352:
              *(_BYTE *)(v212 + v207) = v208;
              v193 = *(_DWORD *)(v33 + 7472);
              goto LABEL_353;
            }
            if (v215)
              v221 = 0;
            else
              v221 = v219 == 8;
            if (v221)
            {
              v208 = 1;
              goto LABEL_352;
            }
LABEL_353:
            ++v207;
          }
          while (v207 < v193 - 1);
          v191 = *(_DWORD *)(v33 + 7468);
          ++v205;
        }
        while (v206 < v191 - 1);
      }
    }
  }
LABEL_386:
  v16 = v466;
  if (!*(_DWORD *)(v192 + 256))
  {
LABEL_395:
    if ((*(_DWORD *)(v466 + 48) & 0x80000000) != 0)
      goto LABEL_398;
    goto LABEL_396;
  }
  v222 = v17[114] == 2 && *(_DWORD *)(v33 + 7964) != 0;
  if (*(_DWORD *)(v478 + 36))
    goto LABEL_394;
  if (*((_DWORD *)v41 + 7))
    v222 = 1;
  if (v222)
  {
LABEL_394:
    *(_BYTE *)v475 = 0;
    goto LABEL_395;
  }
  cyclic_background_refresh(v14, v471);
  if ((*(_DWORD *)(v466 + 48) & 0x80000000) == 0)
  {
LABEL_396:
    v223 = 0x7FFFFFFF;
    goto LABEL_406;
  }
LABEL_398:
  if (!*(_DWORD *)(v33 + 7452) || *(_DWORD *)(v466 + 172) > 1u || *(_DWORD *)(v33 + 7968) || *(_DWORD *)(v33 + 7964))
  {
    v224 = 9;
  }
  else if (v17[120] == 1)
  {
    v278 = *(_QWORD *)(v15 + 32);
    v279 = *(_QWORD *)(v466 + 8);
    if (v278 >= (*(_QWORD *)(v466 + 16) + v279) >> 1)
    {
      v224 = 12;
    }
    else
    {
      v145 = v278 <= v279 >> 1;
      v224 = 10;
      if (!v145)
        v224 = 11;
    }
  }
  else
  {
    v224 = 11;
  }
  v225 = v224 * (int)v43[23] / 8;
  if (v225 >= 2147483447)
    LODWORD(v225) = 2147483447;
  v223 = v225 + 200;
LABEL_406:
  v226 = *(_OWORD *)(v14 + 113829);
  *(_OWORD *)(v14 + 115388) = *(_OWORD *)(v14 + 113813);
  v463 = v14 + 108032;
  *(_DWORD *)(v473 + 564) = *(_DWORD *)(v473 + 372);
  *(_DWORD *)(v473 + 572) = *(_DWORD *)(v33 + 7948);
  v227 = v43[33];
  *(_DWORD *)(v473 + 576) = v43[34];
  *(_DWORD *)(v473 + 568) = v227;
  *(_OWORD *)(v14 + 115404) = v226;
  *(_QWORD *)(v14 + 115418) = *(_QWORD *)(v14 + 113843);
  memcpy((void *)(v14 + 115428), (const void *)(v14 + 150868), 0x4000uLL);
  *v43 = *(_DWORD *)(v14 + 112747);
  *(_WORD *)(v14 + 131816) = *(_WORD *)(v14 + 112751);
  *(_BYTE *)(v14 + 131818) = *(_BYTE *)(v14 + 112753);
  *(_OWORD *)(v14 + 131828) = *(_OWORD *)(v14 + 103556);
  *(_DWORD *)(v14 + 131844) = *(_DWORD *)(v14 + 103572);
  *(_OWORD *)(v14 + 131848) = *(_OWORD *)(v14 + 103576);
  v228 = (int *)v481;
  v43[17] = *(_DWORD *)(v481 + 40);
  v229 = *(_QWORD *)(v466 + 440);
  v230 = *(_DWORD *)(v33 + 6256);
  v231 = *(_DWORD *)(v33 + 6260);
  if (!v230)
  {
    v233 = v474;
    if (!v231)
    {
      v234 = v465;
      *(_QWORD *)(v466 + 432) = v229;
      if ((int)v465[109] >= 3)
        goto LABEL_425;
      goto LABEL_427;
    }
    if (v231 == 3)
      v232 = 9;
    else
      v232 = 11;
    v236 = 1;
    v235 = 1;
    v234 = v465;
    v237 = v231 - 1;
    if (v237 <= 2)
      goto LABEL_420;
LABEL_414:
    v238 = 1;
    v239 = 1;
    goto LABEL_421;
  }
  if (v231 == 3)
    v232 = 9;
  else
    v232 = 11;
  v233 = v474;
  if (v230 == 3)
  {
    v235 = 2;
    v236 = 1;
    v234 = v465;
    v237 = v231 - 1;
    if (v237 <= 2)
      goto LABEL_420;
    goto LABEL_414;
  }
  if (v230 == 2)
  {
    v235 = 5;
    v236 = 3;
    v234 = v465;
    v237 = v231 - 1;
    if (v237 <= 2)
      goto LABEL_420;
    goto LABEL_414;
  }
  v234 = v465;
  if (v230 != 1)
  {
    v236 = 1;
    v235 = 1;
    v237 = v231 - 1;
    if (v237 <= 2)
      goto LABEL_420;
    goto LABEL_414;
  }
  v235 = 5;
  v236 = 4;
  v237 = v231 - 1;
  if (v237 > 2)
    goto LABEL_414;
LABEL_420:
  v240 = 4 * (int)v237;
  v238 = *(_DWORD *)((char *)&unk_208F3DF20 + v240);
  v239 = *(_DWORD *)((char *)&unk_208F3DF2C + v240);
LABEL_421:
  v229 = v473;
  vpx_scale_frame(*(_QWORD *)(v466 + 440), (int *)v473, *(char **)(v33 + 7008), v232, v235, v236, v239, v238, 0);
  v241 = *(_DWORD *)(v473 + 104);
  if (v241 >= 0)
    v242 = *(_DWORD *)(v473 + 104);
  else
    v242 = v241 + 1;
  v243 = v242 >> 1;
  extend_plane(*(unsigned __int8 **)(v473 + 56), *(_DWORD *)(v473 + 16), *(_DWORD *)(v473 + 8), *(_DWORD *)(v473 + 12), v241, *(_DWORD *)(v473 + 104), v241 - *(_DWORD *)(v473 + 12) + *(_DWORD *)(v473 + 4), v241 - *(_DWORD *)(v473 + 8) + *(_DWORD *)v473);
  extend_plane(*(unsigned __int8 **)(v473 + 64), *(_DWORD *)(v473 + 36), *(_DWORD *)(v473 + 28), *(_DWORD *)(v473 + 32), v243, v243, v243 - *(_DWORD *)(v473 + 32) + *(_DWORD *)(v473 + 24), v243 - *(_DWORD *)(v473 + 28) + *(_DWORD *)(v473 + 20));
  extend_plane(*(unsigned __int8 **)(v473 + 72), *(_DWORD *)(v473 + 36), *(_DWORD *)(v473 + 28), *(_DWORD *)(v473 + 32), v243, v243, v243 - *(_DWORD *)(v473 + 32) + *(_DWORD *)(v473 + 24), v243 - *(_DWORD *)(v473 + 28) + *(_DWORD *)(v473 + 20));
  v14 = v477;
  v228 = (int *)v481;
  *(_QWORD *)(v466 + 432) = v473;
  if ((int)v234[109] >= 3)
  {
LABEL_425:
    v244 = *(_DWORD *)(v478 + 28);
    if (v244)
    {
      vp8_de_noise(v463, v229, v244, 1);
      v228 = (int *)v481;
    }
  }
LABEL_427:
  v245 = 0;
  *(_QWORD *)(v33 + 7496) = v471;
  *(_DWORD *)(v33 + 7508) = 0;
  v246 = 4 - v471;
  if (v471 >= 4)
    v246 = 0;
  v247 = *(_DWORD *)(v33 + 7504);
  *(_DWORD *)(v33 + 7504) = v246;
  if (v471 >= 41 && v234[114])
  {
    v248 = (int)((double)v471 * 0.15);
    if (-v248 < -15 || v248 == 15)
      v245 = -15;
    else
      v245 = -v248;
  }
  v249 = *(_DWORD *)(v33 + 7512);
  *(_DWORD *)(v33 + 7512) = v245;
  *(_DWORD *)(v33 + 7516) = v245;
  *(_DWORD *)(v475 + 7) = v228[55];
  if (v247 != v246 || v249 != v245)
  {
    vp8cx_init_quantizer((_DWORD *)v14);
    v228 = (int *)v481;
  }
  v250 = *(_DWORD *)(v33 + 7452);
  if (!*(_DWORD *)(v33 + 7480))
  {
    if (v250)
      goto LABEL_519;
LABEL_445:
    if (!*(_DWORD *)(v466 + 64) || v234[120] != 1)
      goto LABEL_518;
    v254 = *(_QWORD *)(v15 + 32);
    v255 = *(_QWORD *)(v466 + 8);
    if (v254 >= v255 * *(int *)(v466 + 68) / 100)
    {
      v260 = v255 * *(int *)(v466 + 72) / 100;
      v257 = *(_DWORD *)(v33 + 6256);
      if (v254 <= v260)
        goto LABEL_479;
      if (v257 <= 0)
        v257 = 0;
      else
        --v257;
      *(_DWORD *)(v33 + 6256) = v257;
      v261 = *(_DWORD *)(v33 + 6260);
      if (v261 <= 0)
        v259 = 0;
      else
        v259 = v261 - 1;
    }
    else
    {
      v256 = *(_DWORD *)(v33 + 6256);
      if (v256 < 3)
        v257 = v256 + 1;
      else
        v257 = 3;
      *(_DWORD *)(v33 + 6256) = v257;
      v258 = *(_DWORD *)(v33 + 6260);
      if (v258 < 3)
        v259 = v258 + 1;
      else
        v259 = 3;
    }
    *(_DWORD *)(v33 + 6260) = v259;
LABEL_479:
    v262 = v257 - 1;
    if (v262 > 2)
    {
      v264 = 1;
      v265 = 1;
    }
    else
    {
      v263 = 4 * (int)v262;
      v264 = *(_DWORD *)((char *)&unk_208F3DF20 + v263);
      v265 = *(_DWORD *)((char *)&unk_208F3DF2C + v263);
    }
    v266 = *(_DWORD *)(v33 + 6260) - 1;
    if (v266 > 2)
    {
      v268 = 1;
      v269 = 1;
    }
    else
    {
      v267 = 4 * v266;
      v268 = *(_DWORD *)((char *)&unk_208F3DF20 + v267);
      v269 = *(_DWORD *)((char *)&unk_208F3DF2C + v267);
    }
    v270 = (v265 + v234[104] * v264 - 1) / v265;
    v271 = (v269 + v234[105] * v268 - 1) / v269;
    if (*(_DWORD *)(v33 + 6248) != v270 || *(_DWORD *)(v33 + 6252) != v271)
    {
      *(_DWORD *)(v33 + 6248) = v270;
      *(_DWORD *)(v33 + 6252) = v271;
      vp8_alloc_compressor_data(v14);
      v272 = *(_QWORD *)(v466 + 440);
      v273 = *(_DWORD *)(v33 + 6256);
      v274 = *(_DWORD *)(v33 + 6260);
      if (v273)
      {
        if (v274 == 3)
          v275 = 9;
        else
          v275 = 11;
        switch(v273)
        {
          case 3:
            v276 = 2;
            v277 = 1;
            goto LABEL_509;
          case 2:
            v276 = 5;
            v277 = 3;
            goto LABEL_509;
          case 1:
            v276 = 5;
            v277 = 4;
LABEL_509:
            v280 = v274 - 1;
            if (v280 > 2)
            {
              v282 = 1;
              v283 = 1;
            }
            else
            {
              v281 = 4 * (int)v280;
              v282 = *(_DWORD *)((char *)&unk_208F3DF20 + v281);
              v283 = *(_DWORD *)((char *)&unk_208F3DF2C + v281);
            }
            v284 = (int *)(v14 + 114792);
            vpx_scale_frame(v272, v284, *(char **)(v33 + 7008), v275, v276, v277, v283, v282, 0);
            vp8_yv12_extend_frame_borders_c((uint64_t)v284);
            v272 = (uint64_t)v284;
            v14 = v477;
            goto LABEL_513;
        }
      }
      else
      {
        if (!v274)
        {
LABEL_513:
          *(_QWORD *)(v466 + 432) = v272;
          v285 = vp8_regulate_q((_DWORD *)v14, v43[23]);
          if (*(_DWORD *)(v481 + 256))
          {
            if (*(_DWORD *)(v478 + 36))
              *(_BYTE *)v475 = 0;
            else
              cyclic_background_refresh(v14, v285);
          }
          bzero((void *)*v41, *(int *)(v33 + 7472) * (uint64_t)*(int *)(v33 + 7468));
          bzero((void *)v41[1], *(int *)(v33 + 7472) * (uint64_t)*(int *)(v33 + 7468));
          v471 = v285;
          vp8_set_quantizer((_DWORD *)v14, v285);
          goto LABEL_518;
        }
        if (v274 == 3)
          v275 = 9;
        else
          v275 = 11;
      }
      v277 = 1;
      v276 = 1;
      goto LABEL_509;
    }
LABEL_518:
    vp8_setup_key_frame(v14);
    goto LABEL_519;
  }
  v251 = *(_DWORD *)(v14 + 4 * v471 + 143680);
  *(_DWORD *)(v15 + 10744) = v251;
  if (!v250)
    goto LABEL_445;
  if (!*(_DWORD *)(v33 + 7968))
  {
    if (*(_DWORD *)(v33 + 7964))
    {
      v252 = v228[1];
      if (!v252)
        goto LABEL_442;
    }
    else
    {
      v252 = *v228;
      if (!*v228)
        goto LABEL_442;
    }
LABEL_441:
    *(_DWORD *)(v15 + 10744) = v252;
    v251 = v252;
    goto LABEL_442;
  }
  v252 = v228[2];
  if (v252)
    goto LABEL_441;
LABEL_442:
  if (v251 < 5)
  {
    v253 = 5;
    goto LABEL_456;
  }
  if (v251 >= 0xFB)
  {
    v253 = 250;
LABEL_456:
    *(_DWORD *)(v15 + 10744) = v253;
  }
  if (*(_DWORD *)(v466 + 172) == 1 && *(_DWORD *)(v473 + 180))
    *(_DWORD *)(v15 + 10744) = 1;
LABEL_519:
  vp8_encode_frame(v14);
  if (*(_DWORD *)(v15 + 10728) || v234[120] != 1 || v476[2] != 1)
  {
LABEL_525:
    v286 = vp8_estimate_entropy_savings(v14);
    v287 = (v43[24] - v286) & ~((v43[24] - v286) >> 31);
    v43[24] = v287;
    if (v223 <= 1)
      v288 = 1;
    else
      v288 = v223;
    if (v476[1])
    {
      v461 = 1;
      v289 = v464;
      v290 = v473;
      v291 = v481;
      if (!*(_DWORD *)(v473 + 384))
        goto LABEL_555;
      goto LABEL_544;
    }
    v289 = v464;
    v290 = v473;
    v291 = v481;
    if ((*(_DWORD *)(v15 + 10728) != 2 || v234[120] == 1) && v471 == *(_DWORD *)(v15 + 80))
    {
      v292 = *(_DWORD *)(v15 + 76);
      v461 = 1;
      if (v471 < v292)
      {
        v139 = __OFSUB__(v287, v288);
        v293 = v287 - v288;
        if (!((v293 < 0) ^ v139 | (v293 == 0)))
        {
          v294 = 100 * v293 / v288;
          if (v294 < 1)
          {
            v461 = 0;
            if (!*(_DWORD *)(v473 + 384))
              goto LABEL_555;
          }
          else
          {
            v295 = v471;
            do
            {
              if (++v295 >= v292)
                break;
              v294 = (int)((double)v294 * 0.96);
            }
            while (v294 > 0);
            v461 = 0;
            *(_DWORD *)(v15 + 80) = v295;
            if (!*(_DWORD *)(v473 + 384))
              goto LABEL_555;
          }
LABEL_544:
          if (!*((_DWORD *)v41 + 1244))
          {
            v296 = *(_QWORD *)(v466 + 432);
            v297 = *(_DWORD *)(v296 + 4);
            v298 = v15;
            if (v297 < 1 || (v299 = *(_DWORD *)v296, *(int *)v296 < 1))
            {
              v300 = 0;
            }
            else
            {
              v300 = 0;
              v301 = 0;
              v302 = *(_DWORD *)(v33 + 6936);
              v303 = (int *)(v477 + 160 * v302 + 109904);
              v304 = *(_QWORD *)(v477 + 160 * v302 + 109944);
              v305 = *(_QWORD *)(v296 + 56);
              do
              {
                if (v299 >= 1)
                {
                  v306 = 0;
                  do
                  {
                    v488[0] = 0;
                    v300 += vpx_mse16x16(v305 + v306, *(unsigned int *)(v296 + 16), v304 + v306, *v303, v488);
                    v306 += 16;
                    v299 = *(_DWORD *)v296;
                  }
                  while (*(_DWORD *)v296 > (int)v306);
                  v297 = *(_DWORD *)(v296 + 4);
                  v291 = v481;
                }
                v305 += 16 * *(int *)(v296 + 16);
                v304 += 16 * *v303;
                v301 += 16;
              }
              while (v301 < v297);
            }
            v233 = v474;
            *(_DWORD *)(v473 + 388) = v300;
            v15 = v298;
            v290 = v473;
            v234 = v465;
            v16 = v466;
            v14 = v477;
            v41 = v480;
            v289 = v464;
            v43 = v472;
          }
LABEL_555:
          if (!*(_DWORD *)(v16 + 376) && *(_DWORD *)(v33 + 7456))
          {
            if (!*(_DWORD *)(v33 + 7452) || (v316 = *(_DWORD *)(v33 + 7468), v316 < 0))
            {
              *(_DWORD *)(v291 + 192) = 0;
              goto LABEL_581;
            }
            v317 = *(_DWORD *)(v33 + 7472);
            if ((v317 & 0x80000000) == 0)
            {
              v318 = 0;
              v319 = *(_QWORD *)(v33 + 7520);
              do
              {
                if ((v317 & 0x80000000) == 0)
                {
                  v320 = 0;
                  do
                  {
                    if (*(_BYTE *)(v319 + 2))
                    {
                      *(_DWORD *)(v41[635] + 4 * (v320 + v318 + *(int *)(v33 + 7476) * (uint64_t)v318)) = *(_DWORD *)(v319 + 4);
                      v321 = *(unsigned __int8 *)(v319 + 2);
                    }
                    else
                    {
                      v321 = 0;
                    }
                    *(_DWORD *)(v41[636] + 4 * (v320 + v318 + *(int *)(v33 + 7476) * (uint64_t)v318)) = *(_DWORD *)(v14 + 4 * v321 + 111592);
                    *(_DWORD *)(v41[637] + 4 * (v320 + v318 + *(int *)(v33 + 7476) * (uint64_t)v318)) = v321;
                    v319 += 76;
                    v317 = *(_DWORD *)(v33 + 7472);
                    ++v320;
                  }
                  while ((int)v320 - 1 < v317);
                  v316 = *(_DWORD *)(v33 + 7468);
                }
                v145 = v318++ < v316;
              }
              while (v145);
            }
          }
          v307 = *(_DWORD *)(v33 + 7452);
          v308 = *(_QWORD *)(v33 + 7528);
          *(_DWORD *)(v291 + 192) = 0;
          if (v307)
          {
            v309 = *(_DWORD *)(v33 + 7468);
            if (v309 >= 1)
            {
              v310 = *(_DWORD *)(v33 + 7472);
              if (v310 >= 1)
              {
                v311 = 0;
                v312 = 0;
                v313 = (_BYTE *)(v308 + 2);
                do
                {
                  v314 = v310;
                  v315 = v313;
                  do
                  {
                    if (*(v315 - 2) == 7 && *v315 == 1)
                      *(_DWORD *)(v291 + 192) = ++v311;
                    v315 += 76;
                    --v314;
                  }
                  while (v314);
                  ++v312;
                  v313 += 76 * (v310 - 1) + 152;
                }
                while (v312 != v309);
              }
            }
          }
LABEL_581:
          vp8_cal_dissimilarity(v14);
          if (*(_DWORD *)(v16 + 172) == 1)
          {
            vp8_update_gf_usage_maps(v14, v463, v14 + 73728);
            v323 = *(_DWORD *)(v33 + 7452);
            if (!v323)
              goto LABEL_583;
          }
          else
          {
            v323 = *(_DWORD *)(v33 + 7452);
            if (!v323)
            {
LABEL_583:
              *(_DWORD *)(v33 + 7960) = 1;
              if (*(_DWORD *)(v16 + 128))
                goto LABEL_587;
              goto LABEL_606;
            }
          }
          if (*(_DWORD *)(v16 + 128))
            goto LABEL_587;
LABEL_606:
          if (*(_DWORD *)(v33 + 7964) && !*v476)
          {
            v324 = 2;
LABEL_588:
            *(_DWORD *)(v33 + 7976) = v324;
            *(_QWORD *)(v33 + 6272) = v14 + 160 * *(int *)(v33 + 6936) + 109888;
            v325 = v234[109];
            if ((v325 - 1) <= 2)
            {
              if (v234[114] || !v323 || (*(_DWORD *)(v290 + 372) & 7) != 0)
                goto LABEL_598;
              *((_DWORD *)v41 + 6) = measure_square_diff_partial(v14 + 148232, *(_QWORD *)(v16 + 432), v14);
              v325 = v234[109];
            }
            if (v325 == 4 && !v234[114] && (*(_BYTE *)(v290 + 372) & 7) == 0 && *(_DWORD *)(v33 + 7452))
              v322.n128_f64[0] = process_denoiser_mode_change(v14);
LABEL_598:
            if (atomic_load((unsigned int *)v41 + 18))
            {
              MEMORY[0x20BD0B6E0](*((unsigned int *)v41 + 38), v322);
              *((_DWORD *)v41 + 20) = 1;
              MEMORY[0x20BD0B6EC](*((unsigned int *)v41 + 39));
              v327 = v14 + 109888;
              v328 = *(_DWORD *)(v33 + 7452);
              if (v328)
                goto LABEL_600;
            }
            else
            {
              vp8_loopfilter_frame(v14, v463);
              v327 = v14 + 109888;
              v328 = *(_DWORD *)(v33 + 7452);
              if (v328)
              {
LABEL_600:
                if (*(_DWORD *)(v33 + 7968))
                {
                  v329 = *(_DWORD *)(v33 + 6936);
                  *(_DWORD *)(v14 + 109888 + 160 * v329 + 152) |= 4u;
                  v330 = v14 + 109888 + 160 * *(int *)(v33 + 6948);
                  *(_DWORD *)(v330 + 152) &= ~4u;
                  *(_DWORD *)(v33 + 6948) = v329;
                  v331 = v234;
                }
                else
                {
                  v351 = *(_DWORD *)(v33 + 7976);
                  if (!v351)
                    goto LABEL_603;
                  if (v351 == 1)
                  {
                    v352 = *(_DWORD *)(v33 + 6948);
                    v353 = *(_DWORD *)(v33 + 6940);
                    if (v352 == v353)
                      goto LABEL_603;
                    *(_DWORD *)(v327 + 160 * v353 + 152) |= 4u;
                    *(_DWORD *)(v327 + 160 * v352 + 152) &= ~4u;
                    *(_DWORD *)(v33 + 6948) = v353;
                    v331 = v470 + 231;
                  }
                  else
                  {
                    v451 = *(_DWORD *)(v33 + 6948);
                    v452 = *(_DWORD *)(v33 + 6944);
                    if (v451 == v452)
                      goto LABEL_603;
                    *(_DWORD *)(v327 + 160 * v452 + 152) |= 4u;
                    *(_DWORD *)(v327 + 160 * v451 + 152) &= ~4u;
                    *(_DWORD *)(v33 + 6948) = v452;
                    v331 = v470 + 232;
                  }
                }
                v470[233] = *v331;
LABEL_603:
                if (*(_DWORD *)(v33 + 7964))
                {
                  v332 = *(_DWORD *)(v33 + 6936);
                  *(_DWORD *)(v14 + 109888 + 160 * v332 + 152) |= 2u;
                  v333 = v14 + 109888 + 160 * *(int *)(v33 + 6944);
                  *(_DWORD *)(v333 + 152) &= ~2u;
                  *(_DWORD *)(v33 + 6944) = v332;
                  v334 = *v234;
LABEL_605:
                  v470[232] = v334;
                  goto LABEL_611;
                }
                if (*v468)
                {
                  if (*v468 == 1)
                  {
                    v354 = *(_DWORD *)(v33 + 6944);
                    v355 = *(_DWORD *)(v33 + 6940);
                    if (v354 != v355)
                    {
                      *(_DWORD *)(v327 + 160 * v355 + 152) |= 2u;
                      *(_DWORD *)(v327 + 160 * v354 + 152) &= ~2u;
                      *(_DWORD *)(v33 + 6944) = v355;
                      v334 = v470[231];
                      goto LABEL_605;
                    }
                  }
                  else
                  {
                    v453 = *(_DWORD *)(v33 + 6948);
                    v454 = *(_DWORD *)(v33 + 6944);
                    if (v453 != v454)
                    {
                      *(_DWORD *)(v327 + 160 * v453 + 152) |= 2u;
                      *(_DWORD *)(v327 + 160 * v454 + 152) &= ~2u;
                      *(_DWORD *)(v33 + 6944) = v453;
                      v334 = v470[233];
                      goto LABEL_605;
                    }
                  }
                }
LABEL_611:
                if (*(_DWORD *)(v33 + 7960))
                {
                  v338 = *(_DWORD *)(v33 + 6936);
                  *(_DWORD *)(v14 + 109888 + 160 * v338 + 152) |= 1u;
                  v339 = v14 + 109888 + 160 * *(int *)(v33 + 6940);
                  *(_DWORD *)(v339 + 152) &= ~1u;
                  *(_DWORD *)(v33 + 6940) = v338;
                  v470[231] = *v234;
                }
                if (!v234[109])
                {
LABEL_638:
                  if (*(_DWORD *)(v16 + 128))
                    *(_DWORD *)(v33 + 7980) = 0;
                  vp8_pack_bitstream(v14, a4, v467, v233);
                  v356 = *(_DWORD *)(v33 + 7452);
                  *(_DWORD *)(v33 + 7448) = v356;
                  v357 = *v233;
                  *(_QWORD *)v15 += *v233;
                  v43[24] = 8 * v357;
                  v358 = *(_DWORD *)(v16 + 172);
                  v359 = v481;
                  if (v358 >= 2)
                  {
                    v360 = *(_DWORD *)(v478 + 36);
                    v361 = (v360 + 1);
                    if (v361 < v358)
                    {
                      v362 = v358 - 2 - v360;
                      if (!(_DWORD)v362)
                      {
                        v363 = (v360 + 1);
LABEL_647:
                        v369 = v358 - v363;
                        v370 = (_QWORD *)(v14 + 216 * v363 + 149448);
                        do
                        {
                          *v370 += v357;
                          v370 += 27;
                          --v369;
                        }
                        while (v369);
                        goto LABEL_649;
                      }
                      v364 = v362 + 1;
                      v365 = (v362 + 1) & 0x1FFFFFFFELL;
                      v363 = v365 + v361;
                      v366 = (_QWORD *)(v14 + 216 * v361 + 149448);
                      v367 = v365;
                      do
                      {
                        v368 = v366[27] + v357;
                        *v366 += v357;
                        v366[27] = v368;
                        v366 += 54;
                        v367 -= 2;
                      }
                      while (v367);
                      if (v364 != v365)
                        goto LABEL_647;
                    }
                  }
LABEL_649:
                  if (v461)
                  {
                    vp8_update_rate_correction_factors(v14, 2);
                    v359 = v481;
                    v356 = *(_DWORD *)(v33 + 7452);
                  }
                  v371 = *(_DWORD *)(v33 + 7496);
                  *(_DWORD *)(v14 + 4 * v356 + 131912) = v371;
                  if (!v356)
                  {
                    vp8_adjust_key_frame_context(v14);
                    if (!*(_DWORD *)(v33 + 7452))
                    {
                      v374 = 1;
                      v359 = v481;
                      if (!*(_DWORD *)(v33 + 7456))
                        goto LABEL_690;
                      goto LABEL_670;
                    }
                    v371 = *(_DWORD *)(v33 + 7496);
                    v359 = v481;
                  }
                  v43[66] = (v371 + 3 * v43[66] + 2) >> 2;
                  if (*(_DWORD *)(v16 + 172) > 1u || !*(_DWORD *)(v33 + 7964) && !*(_DWORD *)(v33 + 7968))
                  {
                    v372 = v43[65];
                    v373 = v372 + 1;
                    v43[65] = v372 + 1;
                    if (*(_DWORD *)(v15 + 10728) == 2)
                    {
                      v374 = 0;
                      v375 = v43[64] + v471;
                      v43[63] = v375 / v373;
                      v43[64] = v375;
                      if (!*(_DWORD *)(v33 + 7456))
                        goto LABEL_690;
                      goto LABEL_670;
                    }
                    v376 = v43[64] + v471;
                    v43[64] = v376;
                    v377 = v376 / v373;
                    if (v372 <= 149)
                    {
                      v378 = v377 + *(_DWORD *)(v15 + 76);
                      if (v378 + 1 >= 0)
                        v379 = v378 + 1;
                      else
                        v379 = v378 + 2;
                      v377 = v379 >> 1;
                    }
                    v43[63] = v377;
                    if (v471 > v377)
                    {
                      v374 = 0;
                      v43[63] = v471 - 1;
                      if (!*(_DWORD *)(v33 + 7456))
                      {
LABEL_690:
                        v382 = (int)v43[24];
                        v381 = *(_QWORD *)(v15 + 40) - v382;
                        *(_QWORD *)(v15 + 40) = v381;
                        v383 = *(_QWORD *)(v16 + 16);
                        if (v381 <= v383)
                          goto LABEL_672;
                        goto LABEL_671;
                      }
LABEL_670:
                      v380 = (int)v43[24];
                      v381 = *(_QWORD *)(v15 + 40) - v380 + (int)v43[51];
                      *(_QWORD *)(v15 + 40) = v381;
                      LODWORD(v382) = v380;
                      v383 = *(_QWORD *)(v16 + 16);
                      if (v381 <= v383)
                      {
LABEL_672:
                        if (v234[114])
                        {
                          v384 = -v383;
                          if (v381 < v384)
                          {
                            *(_QWORD *)(v15 + 40) = v384;
                            v381 = v384;
                          }
                        }
                        v385 = (int)v43[23];
                        v386 = (unint64_t)((int)v382 + 3 * *(int *)(v15 + 52) + 2) >> 2;
                        *(_DWORD *)(v15 + 48) = (unint64_t)(v385 + 3 * *(int *)(v15 + 48) + 2) >> 2;
                        *(_DWORD *)(v15 + 52) = v386;
                        v387 = (unint64_t)((int)v382
                                                - (uint64_t)*(int *)(v15 + 60)
                                                + 32 * *(int *)(v15 + 60)
                                                + 16) >> 5;
                        *(_DWORD *)(v15 + 56) = (unint64_t)(v385
                                                                 - *(int *)(v15 + 56)
                                                                 + 32 * *(int *)(v15 + 56)
                                                                 + 16) >> 5;
                        *(_DWORD *)(v15 + 60) = v387;
                        *(_QWORD *)(v15 + 64) += (int)v382;
                        *(_QWORD *)(v15 + 32) = v381;
                        v388 = *(_DWORD *)(v16 + 172);
                        if (v388 >= 2)
                        {
                          v389 = *(_DWORD *)(v478 + 36);
                          if (v389 + 1 < v388)
                          {
                            v390 = ~v389 + v388;
                            v391 = (double *)(v14 + 216 * (v389 + 1) + 149376);
                            do
                            {
                              v392 = llround((double)*((int *)v391 - 22) / *(v391 - 12) - (double)(int)v382);
                              v393 = *((_QWORD *)v391 - 2) + v392;
                              *((_QWORD *)v391 - 1) += (int)v382;
                              v394 = *((_QWORD *)v391 - 8);
                              *(_DWORD *)v391 += v392;
                              if (v393 >= v394)
                                v395 = v394;
                              else
                                v395 = v393;
                              *((_QWORD *)v391 - 3) = v395;
                              *((_QWORD *)v391 - 2) = v395;
                              v391 += 27;
                              --v390;
                            }
                            while (v390);
                          }
                        }
                        if ((v374 & 1) != 0)
                        {
                          v41[626] = (v41[626] + (int)v385 - (int)v382) & ~((v41[626] + (int)v385 - (int)v382) >> 63);
                          goto LABEL_694;
                        }
                        v396 = *(_DWORD *)(v33 + 7964);
                        v397 = *(_DWORD *)(v33 + 7968);
                        if (!*(_QWORD *)(v33 + 7964))
                        {
                          v398 = *(_DWORD *)(v33 + 7496);
LABEL_686:
                          v399 = *(_DWORD *)(v15 + 10744);
                          *(_DWORD *)v359 = v399;
                          *(_DWORD *)(v359 + 12) = v398;
                          *(_DWORD *)(v14 + 4 * v398 + 143680) = v399;
                          goto LABEL_694;
                        }
                        v41[628] = (v41[628] + (int)v385 - (int)v382) & ~((v41[628] + (int)v385 - (int)v382) >> 63);
                        if (v397)
                        {
                          *(_DWORD *)(v359 + 8) = *(_DWORD *)(v15 + 10744);
                          *(_DWORD *)(v359 + 20) = *(_DWORD *)(v33 + 7496);
                        }
                        else
                        {
                          v398 = *(_DWORD *)(v33 + 7496);
                          if (!v396)
                            goto LABEL_686;
                          *(_DWORD *)(v359 + 4) = *(_DWORD *)(v15 + 10744);
                          *(_DWORD *)(v359 + 16) = v398;
                        }
LABEL_694:
                        *v476 = 0;
                        v400 = *(_DWORD *)(v33 + 7964);
                        v401 = *(_DWORD *)(v33 + 7968);
                        *(_DWORD *)(v33 + 7460) = *(_DWORD *)(v33 + 7460) & 0xFFFFFFF9 | (2 * (v400 == 1)) | (4 * (v401 == 1));
                        v402 = *(_DWORD *)(v33 + 7960);
                        if ((v402 & v400) != 0)
                        {
                          v403 = 1;
                        }
                        else
                        {
                          if (v402 == v400)
                            goto LABEL_699;
                          v403 = 0;
                        }
                        *(_DWORD *)(v290 + 184) = v403;
LABEL_699:
                        if ((v402 & v401) != 0)
                        {
                          v404 = 1;
                        }
                        else
                        {
                          if (v402 == v401)
                            goto LABEL_704;
                          v404 = 0;
                        }
                        *(_DWORD *)(v290 + 188) = v404;
LABEL_704:
                        if ((v401 & v400) != 0)
                        {
                          v405 = 1;
                        }
                        else
                        {
                          if (v401 == v400)
                            goto LABEL_709;
                          v405 = 0;
                        }
                        *(_DWORD *)(v290 + 192) = v405;
LABEL_709:
                        v406 = *(_DWORD *)(v290 + 188);
                        if (*(_DWORD *)(v290 + 184))
                          v407 = 5;
                        else
                          v407 = 7;
                        *(_DWORD *)(v359 + 48) = v407;
                        if (v406)
                        {
                          v407 &= 3u;
                          *(_DWORD *)(v359 + 48) = v407;
                        }
                        if (*(_DWORD *)(v290 + 192))
                          *(_DWORD *)(v359 + 48) = v407 & 3;
                        if (*(_DWORD *)(v16 + 128))
                          goto LABEL_717;
                        if (*(_DWORD *)(v16 + 96))
                        {
                          if (!v401)
                          {
                            if (!v400)
                              goto LABEL_817;
                            goto LABEL_791;
                          }
                          if ((v374 & 1) == 0)
                          {
                            if (!*(_DWORD *)(v15 + 10712))
                              v43[34] = 7;
                            if (*(_DWORD *)(v15 + 10728) != 2)
                            {
                              v455 = v43[34];
                              if (v455)
                              {
                                v456 = v43[36] + v43[24];
                                v43[35] = v455;
                                v43[36] = v456;
                                v43[37] = v456 / v455;
                              }
                            }
                            memset((void *)v41[633], 1, *(int *)(v33 + 7472) * (uint64_t)*(int *)(v33 + 7468));
                            *((_DWORD *)v41 + 1268) = *(_DWORD *)(v33 + 7472) * *(_DWORD *)(v33 + 7468);
                            v43[33] = 0;
                            *(_QWORD *)(v290 + 172) = 0x100000000;
                            v359 = v481;
                            goto LABEL_717;
                          }
                        }
                        if (!v400)
                        {
                          if (v401)
                          {
LABEL_717:
                            v408 = *(_DWORD *)(v33 + 7460);
                            if (*(_DWORD *)(v33 + 7452))
                            {
                              *v289 = v408 & 0xFFFFFFFE;
                              v409 = *(_DWORD *)(v359 + 40);
                            }
                            else
                            {
                              *v289 = v408 | 1;
                              *(_DWORD *)(v33 + 7452) = 1;
                              v409 = 100;
                            }
                            *(_DWORD *)(v359 + 44) = v409;
                            *(_WORD *)(v475 + 1) = 0;
                            *(_BYTE *)(v475 + 16) = 0;
                            if (!*(_DWORD *)(v33 + 7456))
                              goto LABEL_729;
                            ++*v234;
                            ++*(_DWORD *)(v473 + 372);
                            goto LABEL_728;
                          }
LABEL_817:
                          v457 = v43[34];
                          v139 = __OFSUB__(v457, 1);
                          v458 = v457 - 1;
                          if (v458 < 0 == v139)
                            v43[34] = v458;
                          v459 = *(_DWORD *)(v290 + 168);
                          if (v459)
                            *(_DWORD *)(v290 + 168) = v459 - 1;
                          v460 = v43[33];
                          v43[33] = v460 + 1;
                          if (v460 >= 1)
                            *(int32x4_t *)(v359 + 24) = vaddq_s32(*(int32x4_t *)(v359 + 24), *(int32x4_t *)v33);
                          goto LABEL_717;
                        }
LABEL_791:
                        if (!*(_DWORD *)(v15 + 10712))
                          v43[34] = 7;
                        if (*(_DWORD *)(v15 + 10728) != 2)
                        {
                          v447 = v43[34];
                          if (v447 >= 1)
                          {
                            v43[35] = v447;
                            if ((v374 & 1) == 0 && !*(_DWORD *)(v290 + 176))
                              v43[36] += v43[24] - v43[53];
                            v43[37] = v43[36] / v447;
                          }
                        }
                        memset((void *)v41[633], 1, *(int *)(v33 + 7472) * (uint64_t)*(int *)(v33 + 7468));
                        *((_DWORD *)v41 + 1268) = *(_DWORD *)(v33 + 7472) * *(_DWORD *)(v33 + 7468);
                        *(_DWORD *)(v33 + 7964) = 0;
                        v43[33] = 0;
                        *(_QWORD *)&v448 = 0x100000001;
                        *((_QWORD *)&v448 + 1) = 0x100000001;
                        v359 = v481;
                        *(_OWORD *)(v481 + 24) = v448;
                        if ((*(_DWORD *)(v16 + 48) & 0x80000000) == 0
                          && *(_DWORD *)(v16 + 96)
                          && !*(_DWORD *)(v33 + 7968))
                        {
                          *(_DWORD *)(v290 + 172) = 1;
                          v43[34] = v43[41];
                        }
                        if (!*(_DWORD *)(v290 + 172))
                          *(_DWORD *)(v290 + 176) = 0;
                        v449 = v43[34];
                        v139 = __OFSUB__(v449, 1);
                        v450 = v449 - 1;
                        if (v450 < 0 == v139)
                          v43[34] = v450;
                        goto LABEL_717;
                      }
LABEL_671:
                      *(_QWORD *)(v15 + 40) = v383;
                      v381 = v383;
                      goto LABEL_672;
                    }
                  }
                  v374 = 0;
                  if (!*(_DWORD *)(v33 + 7456))
                    goto LABEL_690;
                  goto LABEL_670;
                }
                if (v328)
                {
                  v340 = *(_DWORD *)(v469 + 104);
                  if (v340 >= 0)
                    v341 = *(_DWORD *)(v469 + 104);
                  else
                    v341 = v340 + 1;
                  v342 = v341 >> 1;
                  extend_plane(*(unsigned __int8 **)(v469 + 56), *(_DWORD *)(v469 + 16), *(_DWORD *)(v469 + 8), *(_DWORD *)(v469 + 12), v340, *(_DWORD *)(v469 + 104), v340 - *(_DWORD *)(v469 + 12) + *(_DWORD *)(v469 + 4), v340 - *(_DWORD *)(v469 + 8) + *(_DWORD *)v469);
                  extend_plane(*(unsigned __int8 **)(v469 + 64), *(_DWORD *)(v469 + 36), *(_DWORD *)(v469 + 28), *(_DWORD *)(v469 + 32), v342, v342, v342 - *(_DWORD *)(v469 + 32) + *(_DWORD *)(v469 + 24), v342 - *(_DWORD *)(v469 + 28) + *(_DWORD *)(v469 + 20));
                  v343 = *(_DWORD *)(v469 + 32);
                  v344 = *(_DWORD *)(v469 + 28);
                  v345 = v342 - v343 + *(_DWORD *)(v469 + 24);
                  v346 = v342 - v344 + *(_DWORD *)(v469 + 20);
                  v347 = v342;
                  v348 = v342;
                  v14 = v477;
                  extend_plane(*(unsigned __int8 **)(v469 + 72), *(_DWORD *)(v469 + 36), v344, v343, v347, v348, v345, v346);
                  if (*(_DWORD *)(v33 + 7968) || *(_DWORD *)(v33 + 7976))
                    vp8_yv12_copy_frame_c((int *)v469, v477 + 148712);
                  if (*(_DWORD *)(v33 + 7964) || *v468)
                    vp8_yv12_copy_frame_c((int *)v469, v477 + 148552);
                  v290 = v473;
                  if (!*(_DWORD *)(v33 + 7960))
                    goto LABEL_636;
                  v349 = v477 + 148392;
                  v350 = (int *)v469;
                }
                else
                {
                  vp8_yv12_copy_frame_c(*(int **)(v16 + 432), v14 + 148392);
                  vp8_yv12_copy_frame_c(*(int **)(v16 + 432), v14 + 148552);
                  v350 = *(int **)(v16 + 432);
                  v349 = v14 + 148712;
                }
                vp8_yv12_copy_frame_c(v350, v349);
LABEL_636:
                if (v234[109] == 4)
                  vp8_yv12_copy_frame_c(*(int **)(v16 + 432), v14 + 149032);
                goto LABEL_638;
              }
            }
            v335 = *(_DWORD *)(v33 + 6936);
            *(_DWORD *)(v327 + 160 * v335 + 152) |= 6u;
            v336 = v327 + 160 * *(int *)(v33 + 6944);
            *(_DWORD *)(v336 + 152) &= ~2u;
            v337 = v327 + 160 * *(int *)(v33 + 6948);
            *(_DWORD *)(v337 + 152) &= ~4u;
            *(_DWORD *)(v33 + 6944) = v335;
            *(_DWORD *)(v33 + 6948) = v335;
            LODWORD(v337) = *v234;
            v470[232] = *v234;
            v470[233] = v337;
            goto LABEL_611;
          }
LABEL_587:
          v324 = 0;
          goto LABEL_588;
        }
      }
    }
    else
    {
      v461 = 1;
    }
    if (!*(_DWORD *)(v473 + 384))
      goto LABEL_555;
    goto LABEL_544;
  }
  if (!vp8_drop_encodedframe_overshoot(v14, v471))
  {
    if (*(_DWORD *)(v33 + 7452))
      *((_DWORD *)v41 + 9) = *(_QWORD *)(v475 + 21672) / *(int *)(v33 + 7464);
    goto LABEL_525;
  }
LABEL_729:
  if (*(_DWORD *)(v15 + 10708) == 2)
  {
    gettimeofday((timeval *)&v487, 0);
    gettimeofday((timeval *)&v485, 0);
    v410 = DWORD2(v485) - v484.tv_usec + 1000000;
    if (SDWORD2(v485) >= v484.tv_usec)
      v410 = DWORD2(v485) - v484.tv_usec;
    v411 = v410 + 1000000 * (v485 - LODWORD(v484.tv_sec) + ((DWORD2(v485) - v484.tv_usec) >> 31));
    v412 = ((double)v411 * 0.5);
    if (*(_DWORD *)(v33 + 7452))
    {
      v413 = *(_DWORD *)(v15 + 10696);
      if (v413)
        v411 = (v411 - v413 + 8 * v413) >> 3;
      *(_DWORD *)(v15 + 10696) = v411;
    }
    if (v412)
    {
      v414 = *(_DWORD *)(v15 + 10700);
      if (v414)
        v412 = (v412 - v414 + 8 * v414) >> 3;
      *(_DWORD *)(v15 + 10700) = v412;
    }
  }
  v415 = *(_DWORD *)(v33 + 7980);
  if (!v415)
    memcpy((void *)(v14 + 112738), (const void *)(v14 + 111625), 0x459uLL);
  v416 = *(_DWORD *)(v33 + 7968);
  if (v416)
    memcpy((void *)(v14 + 145305), (const void *)(v14 + 112738), 0x459uLL);
  v417 = *(_DWORD *)(v33 + 7964);
  if (v417)
    memcpy((void *)(v477 + 146418), (const void *)(v477 + 112738), 0x459uLL);
  v418 = *(_DWORD *)(v33 + 7960);
  if (v418)
    memcpy((void *)(v477 + 144192), (const void *)(v477 + 112738), 0x459uLL);
  if (*v474)
  {
    v419 = 0;
    if (!(v417 | v416 | v418) && *(_DWORD *)(v33 + 7452))
      v419 = !*v468
          && !(*(_DWORD *)(v33 + 7976) | v415)
          && !*(_BYTE *)(v475 + 16)
          && !*(_BYTE *)(v475 + 1)
          && *(_BYTE *)(v475 + 2) == 0;
    *((_DWORD *)v41 + 1277) = v419;
    *(_DWORD *)(v33 + 7980) = 1;
    *(_DWORD *)(v33 + 7968) = 0;
    *(_QWORD *)(v33 + 7960) = 1;
    *(_DWORD *)(v33 + 7452) = 1;
  }
  if (*(_DWORD *)(v16 + 172) >= 2u)
    vp8_save_layer_context(v477);
  gettimeofday((timeval *)&v483, 0);
  v420 = DWORD2(v483) - v482.tv_usec + 1000000;
  if (SDWORD2(v483) >= v482.tv_usec)
    v420 = DWORD2(v483) - v482.tv_usec;
  v41[68] += v420 + 1000000 * (v483 - v482.tv_sec + ((DWORD2(v483) - v482.tv_usec) >> 31));
  v421 = atomic_load((unsigned int *)v41 + 18);
  if (v421 && *((_DWORD *)v41 + 20))
  {
    MEMORY[0x20BD0B6EC](*((unsigned int *)v41 + 39));
    *((_DWORD *)v41 + 20) = 0;
  }
  if (!*((_DWORD *)v41 + 1262) || *(_DWORD *)(v15 + 10728) == 1 || !*(_DWORD *)(v33 + 7456))
    return 0;
  v422 = *(_QWORD *)(v16 + 432);
  v423 = *(_QWORD *)(v33 + 6272);
  v424 = *(_DWORD *)(v33 + 6248);
  v425 = *(_DWORD *)(v33 + 6252);
  v426 = calc_plane_error(*(_QWORD *)(v422 + 56), *(unsigned int *)(v422 + 16), *(_QWORD *)(v423 + 56), *(unsigned int *)(v423 + 16), v424, v425);
  v427 = v425 * v424;
  v428 = (v424 + 1) >> 1;
  v429 = v425 + 1;
  v430 = (v425 + 1) >> 1;
  v431 = calc_plane_error(*(_QWORD *)(v422 + 64), *(unsigned int *)(v422 + 36), *(_QWORD *)(v423 + 64), *(unsigned int *)(v423 + 36), v428, v429 >> 1);
  v432 = v430 * v428;
  v433 = calc_plane_error(*(_QWORD *)(v422 + 72), *(unsigned int *)(v422 + 36), *(_QWORD *)(v423 + 72), *(unsigned int *)(v423 + 36), v428, v430);
  v434 = v427 + 2 * v432;
  v435 = v431 + v426 + v433;
  if (v435)
  {
    v436 = log10((double)v434 * 255.0 * 255.0 / (double)v435) * 10.0;
    v437 = v436 <= 100.0 ? v436 : 100.0;
  }
  else
  {
    v437 = 100.0;
  }
  if (v426)
  {
    v438 = log10((double)v427 * 255.0 * 255.0 / (double)(unint64_t)v426) * 10.0;
    v439 = v438 <= 100.0 ? v438 : 100.0;
  }
  else
  {
    v439 = 100.0;
  }
  v440 = (double)v432;
  if (v431)
  {
    v441 = log10(v440 * 255.0 * 255.0 / (double)(unint64_t)v431) * 10.0;
    v442 = v441 <= 100.0 ? v441 : 100.0;
  }
  else
  {
    v442 = 100.0;
  }
  if (v433)
  {
    v443 = log10(v440 * 255.0 * 255.0 / (double)(unint64_t)v433) * 10.0;
    if (v443 > 100.0)
      v443 = 100.0;
  }
  else
  {
    v443 = 100.0;
  }
  v444 = *(int **)(v15 + 10680);
  v445 = *v444;
  if (*v444 >= v444[1])
    return 0;
  result = 0;
  *v444 = v445 + 1;
  v446 = &v444[34 * v445];
  *((_QWORD *)v446 + 1) = 3;
  v446[4] = v434;
  v446[5] = v427;
  v446[6] = v432;
  v446[7] = v432;
  *((_QWORD *)v446 + 4) = v435;
  *((_QWORD *)v446 + 5) = v426;
  *((_QWORD *)v446 + 6) = v431;
  *((_QWORD *)v446 + 7) = v433;
  *((double *)v446 + 8) = v437;
  *((double *)v446 + 9) = v439;
  *((double *)v446 + 10) = v442;
  *((double *)v446 + 11) = v443;
  *((_OWORD *)v446 + 6) = 0u;
  *((_OWORD *)v446 + 7) = 0u;
  *((_OWORD *)v446 + 8) = 0u;
  return result;
}

uint64_t vp8_set_roimap(uint64_t a1, const void *a2, int a3, int a4, unsigned int *a5, int32x4_t *a6, _DWORD *a7)
{
  uint64_t v7;
  uint64_t v11;
  __int32 v12;
  uint64_t v13;
  __int32 v14;
  uint64_t v15;
  __int32 v16;
  uint64_t result;
  _BYTE *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int16x8_t v23;

  if (*(_DWORD *)(a1 + 111076) != a3)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)(a1 + 111080) != a4)
    return 0xFFFFFFFFLL;
  v7 = *a5;
  if ((v7 - 64) < 0xFFFFFF81)
    return 0xFFFFFFFFLL;
  if ((a6->i32[0] - 64) < 0xFFFFFF81)
    return 0xFFFFFFFFLL;
  v11 = a5[1];
  if ((v11 - 64) < 0xFFFFFF81)
    return 0xFFFFFFFFLL;
  v12 = a6->i32[1];
  if ((v12 - 64) < 0xFFFFFF81)
    return 0xFFFFFFFFLL;
  v13 = a5[2];
  if ((v13 - 64) < 0xFFFFFF81)
    return 0xFFFFFFFFLL;
  v14 = a6->i32[2];
  if ((v14 - 64) < 0xFFFFFF81)
    return 0xFFFFFFFFLL;
  v15 = a5[3];
  if ((v15 - 64) < 0xFFFFFF81)
    return 0xFFFFFFFFLL;
  v16 = a6->i32[3];
  if ((v16 - 64) < 0xFFFFFF81)
    return 0xFFFFFFFFLL;
  v18 = (_BYTE *)(a1 + 81920);
  if (!a2)
    goto LABEL_24;
  if (!(_DWORD)v7)
  {
    if (v11 | a6->i32[0] | v12 | v13 | v14 | v15 | v16
      || *a7
      || a7[1]
      || a7[2]
      || a7[3])
    {
      goto LABEL_21;
    }
LABEL_24:
    result = 0;
    *v18 = 0;
    return result;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_21:
    LOBYTE(v19) = q_trans[v7];
    goto LABEL_22;
  }
  v19 = -q_trans[-(int)v7];
LABEL_22:
  if ((v11 & 0x80000000) != 0)
    v20 = -q_trans[-(int)v11];
  else
    v20 = q_trans[v11];
  if ((v13 & 0x80000000) != 0)
    v21 = -q_trans[-(int)v13];
  else
    v21 = q_trans[v13];
  if ((v15 & 0x80000000) != 0)
    v22 = -q_trans[-(int)v15];
  else
    v22 = q_trans[v15];
  memcpy(*(void **)(a1 + 143040), a2, a4 * a3);
  *(_WORD *)(a1 + 81920) = 257;
  *(_BYTE *)(a1 + 81922) = 1;
  v23 = *(int16x8_t *)a6;
  *(int16x4_t *)v23.i8 = vmovn_s32(*a6);
  *(_DWORD *)(a1 + 143056) = *a7;
  *(_DWORD *)(a1 + 143060) = a7[1];
  *(_DWORD *)(a1 + 143064) = a7[2];
  *(_DWORD *)(a1 + 143068) = a7[3];
  *(_BYTE *)(a1 + 81923) = 0;
  *(_DWORD *)(a1 + 143048) = v19 | (unsigned __int16)(v20 << 8) | (v21 << 16) | (v22 << 24);
  *(_DWORD *)(a1 + 143052) = vmovn_s16(v23).u32[0];
  if (*a7 || a7[1] || a7[2] || a7[3])
    *(_DWORD *)(a1 + 180172) = 1;
  result = 0;
  *(_DWORD *)(a1 + 143084) = 0;
  return result;
}

void cyclic_background_refresh(uint64_t a1, int a2)
{
  uint64_t v4;
  _DWORD *v5;
  _BYTE *v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t i;
  uint64_t v22;
  unsigned __int8 v23;

  v4 = a1 + 143040;
  v5 = (_DWORD *)(a1 + 111060);
  v6 = (_BYTE *)(a1 + 81923);
  v7 = *(void **)(a1 + 143040);
  v8 = *(_DWORD *)(a1 + 143088);
  v9 = (*(_DWORD *)(a1 + 111080) * *(_DWORD *)(a1 + 111076));
  if (a2 >= 0)
    v10 = a2;
  else
    v10 = a2 + 1;
  *(_DWORD *)(a1 + 143096) = v10 >> 1;
  v11 = *(_DWORD *)(a1 + 114308);
  if (v11)
  {
    if (v11 == 2)
      v12 = 80;
    else
      v12 = 100;
    if (v12 <= a2)
    {
      v13 = 1717986919 * (int)v9;
      v14 = (unint64_t)v13 >> 63;
      v15 = v13 >> 34;
    }
    else
    {
      if (a2 <= 19 && *(_DWORD *)(a1 + 115164) >= 0xFBu && *(_DWORD *)(a1 + 82568) > (int)((double)(int)v9 * 0.95))
      {
        v8 = 0;
LABEL_16:
        *(_DWORD *)(a1 + 143088) = v8;
        goto LABEL_17;
      }
      v16 = 1717986919 * (int)v9;
      v14 = (unint64_t)v16 >> 63;
      v15 = v16 >> 35;
    }
    v8 = v15 + v14;
    goto LABEL_16;
  }
LABEL_17:
  bzero(v7, (int)v9);
  if (*v5)
    v17 = v8 < 1;
  else
    v17 = 1;
  if (v17)
    goto LABEL_41;
  v18 = *(_DWORD *)(v4 + 52);
  do
  {
    v19 = *(_QWORD *)(v4 + 64);
    v20 = *(char *)(v19 + v18);
    if (*(_BYTE *)(v19 + v18))
    {
      if (v20 < 0)
        *(_BYTE *)(v19 + v18) = v20 + 1;
      if (v18 + 1 == (_DWORD)v9)
        v18 = 0;
      else
        ++v18;
      continue;
    }
    *((_BYTE *)v7 + v18) = 1;
    if (v18 + 1 == (_DWORD)v9)
      v18 = 0;
    else
      ++v18;
    if (!--v8)
      break;
  }
  while (v18 != *(_DWORD *)(v4 + 52));
  *(_DWORD *)(v4 + 52) = v18;
  if ((int)v5[807] < 1
    || *(_DWORD *)(v4 + 6164) != 3
    || *(_DWORD *)(v4 + 6216) <= a2
    || v5[1026] <= (2 * *(_DWORD *)(v4 + 6220)))
  {
LABEL_41:
    v22 = 0;
    goto LABEL_42;
  }
  *(_DWORD *)(v4 + 56) = a2;
  if ((int)v9 < 1)
  {
    v22 = 0xD80000000000;
  }
  else
  {
    for (i = 0; i != v9; ++i)
    {
      *((_BYTE *)v7 + i) = *(_DWORD *)(v4 + 6220) < *(unsigned __int8 *)(*(_QWORD *)(v4 + 72) + i);
      v22 = 0xD80000000000;
    }
  }
LABEL_42:
  *(_BYTE *)(a1 + 81922) = 1;
  *(_WORD *)(a1 + 81920) = 257;
  v23 = *(_DWORD *)(v4 + 56) - a2;
  *v6 = 0;
  *(_QWORD *)(v4 + 8) = v22 | (v23 << 8);
}

uint64_t measure_square_diff_partial(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v17;
  int v18;
  int v19;

  v3 = *(_DWORD *)a1;
  v4 = *(_DWORD *)(a1 + 4);
  v17 = *(_DWORD *)a1 * v4;
  if (v4 < 1 || v3 < 1)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = a3 + 111080;
    v12 = *(_QWORD *)(a2 + 56);
    v13 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v3 >= 1)
      {
        v14 = 0;
        v18 = v7;
        v15 = *(_DWORD *)v11 * v7;
        do
        {
          if (*(unsigned __int8 *)(*(_QWORD *)(v11 + 32032) + v15) >= 0xAu)
          {
            v19 = 0;
            v9 += vpx_mse16x16(v13 + v14, *(unsigned int *)(a1 + 16), v12 + v14, *(unsigned int *)(a2 + 16), &v19);
            ++v8;
            v3 = *(_DWORD *)a1;
          }
          v14 += 32;
          v15 += 2;
        }
        while (v14 < v3);
        v4 = *(_DWORD *)(a1 + 4);
        v7 = v18;
      }
      v13 += 32 * *(int *)(a1 + 16);
      v12 += 32 * *(int *)(a2 + 16);
      v10 += 32;
      v7 += 2;
    }
    while (v10 < v4);
  }
  if (v8 <= v17 >> 12)
    return 0;
  else
    return (v9 / v8);
}

double process_denoiser_mode_change(uint64_t a1)
{
  int *v1;
  unsigned int v2;
  double result;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  int v27;
  int v28;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;

  v37 = a1 + 143112;
  v1 = (int *)(a1 + 142756);
  v2 = *(_DWORD *)(a1 + 114516);
  result = *(double *)(a1 + 132104);
  if (result >= 25.0)
    v4 = 100;
  else
    v4 = 80;
  if (v2 > 1)
    v1 = (int *)(a1 + 216 * (v2 - 1) + 149288);
  v36 = (int *)(a1 + 109856);
  v5 = *(_DWORD *)(a1 + 109860);
  v28 = *v1;
  v30 = *(_DWORD *)(a1 + 111080) * *(_DWORD *)(a1 + 111076);
  v31 = v4;
  if (v5 < 1 || (v6 = *v36, *v36 < 1))
  {
    v35 = 0;
    v9 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v35 = 0;
    v10 = *(_QWORD *)(a1 + 114776);
    v11 = *(int *)(v10 + 16);
    v32 = 32 * v11;
    v12 = *(_QWORD *)(a1 + 149088);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = 0xC / v2;
    do
    {
      if (v6 >= 1)
      {
        v33 = v8;
        v34 = v7;
        v15 = 0;
        v16 = v36[306] * v7;
        do
        {
          if (v14 <= *(unsigned __int8 *)(*(_QWORD *)v37 + v16))
          {
            v39 = 0;
            v17 = vpx_variance16x16(v13 + v15, v11, v12 + v15, v11, &v39);
            if (v39 - v17 <= 0x7F)
            {
              v38 = 0;
              v18 = vpx_variance16x16(v13 + v15, v11, &process_denoiser_mode_change_const_source, 0, &v38);
              if (v18)
                v35 += v39 / v18;
              ++v9;
            }
            v6 = *v36;
          }
          v15 += 32;
          v16 += 2;
        }
        while (v15 < v6);
        v5 = v36[1];
        v8 = v33;
        v7 = v34;
      }
      v13 += v32;
      v12 += v32;
      v8 += 32;
      v7 += 2;
    }
    while (v8 < v5);
  }
  if (v35 * v31 < 100 || v9 <= v30 >> 4)
  {
    if (*(_DWORD *)(v37 + 6104) != 20)
      return result;
LABEL_32:
    v23 = *(_DWORD *)(v37 + 6092);
    if (v23 == 3)
    {
      v24 = 100;
      v25 = xmmword_208F3D790;
      if (*(_DWORD *)(v37 + 6100) >= *(_DWORD *)(v37 + 6096)
        && *(_DWORD *)(v37 + 6108) <= *(_DWORD *)(v37 + 6116)
        && v28 >= *(_DWORD *)(v37 + 6120))
      {
        goto LABEL_43;
      }
      v26 = -1;
      v27 = 2;
    }
    else
    {
      if (v23 != 2
        || *(_DWORD *)(v37 + 6100) <= *(_DWORD *)(v37 + 6096)
        || *(_DWORD *)(v37 + 6108) >= *(_DWORD *)(v37 + 6112)
        || v28 <= *(_DWORD *)(v37 + 6120))
      {
        goto LABEL_43;
      }
      v24 = 0x500000004BLL;
      v25 = xmmword_208F3D7B0;
      v26 = 15;
      v27 = 3;
    }
    *(_DWORD *)(v37 + 6092) = v27;
    *(_OWORD *)(a1 + 149236) = v25;
    *(_QWORD *)(a1 + 149252) = v24;
    *(_DWORD *)(a1 + 149260) = v26;
    *(_DWORD *)(a1 + 149264) = 0;
LABEL_43:
    *(_DWORD *)(v37 + 6108) = 0;
    result = 0.0;
    *(_QWORD *)(v37 + 6100) = 0;
    return result;
  }
  v20 = *(_DWORD *)(v37 + 6104);
  v21 = (int)((8 * ((1374389535 * (unint64_t)(v35 * v31)) >> 32)) & 0xFFFFFF00) / v9;
  if (!v20)
  {
    *(_DWORD *)(v37 + 6100) = v21;
    *(_DWORD *)(v37 + 6108) = v36[312];
    *(_DWORD *)(v37 + 6104) = 1;
    return result;
  }
  *(_DWORD *)(v37 + 6100) = (3 * *(_DWORD *)(v37 + 6100) + v21) >> 2;
  *(_DWORD *)(v37 + 6108) = (3 * *(_DWORD *)(v37 + 6108) + v36[312]) >> 2;
  v22 = v20 + 1;
  *(_DWORD *)(v37 + 6104) = v22;
  if (v22 == 20)
    goto LABEL_32;
  return result;
}

uint64_t calc_plane_error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  unsigned int i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  uint8x16_t v72;
  uint8x16_t v73;
  int16x8_t v74;
  int16x8_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  uint32x4_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int16x8_t v84;
  uint32x4_t v85;
  uint32x4_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int64x2_t v104;
  int64x2_t v105;
  uint64_t v106;
  uint64_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  uint8x16_t v114;
  uint8x16_t v115;
  int16x8_t v116;
  int16x8_t v117;
  uint32x4_t v118;
  uint32x4_t v119;
  uint32x4_t v120;
  uint32x4_t v121;
  int64x2_t v122;
  int64x2_t v123;
  unint64_t v124;
  unint64_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int16x8_t v128;
  uint32x4_t v129;
  uint32x4_t v130;
  uint64_t v131;
  unint64_t v132;
  int64x2_t v133;
  int64x2_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  uint8x16_t v144;
  uint8x16_t v145;
  int16x8_t v146;
  int16x8_t v147;
  uint32x4_t v148;
  uint32x4_t v149;
  uint32x4_t v150;
  uint32x4_t v151;
  int64x2_t v152;
  int64x2_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int16x8_t v159;
  uint32x4_t v160;
  uint32x4_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  int64x2_t v169;
  int64x2_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int64x2_t v177;
  int64x2_t v178;
  int64x2_t v179;
  uint8x16_t v180;
  uint8x16_t v181;
  int16x8_t v182;
  int16x8_t v183;
  uint32x4_t v184;
  uint32x4_t v185;
  uint32x4_t v186;
  uint32x4_t v187;
  int64x2_t v188;
  int64x2_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int64x2_t v193;
  int64x2_t v194;
  int16x8_t v195;
  uint32x4_t v196;
  uint32x4_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  int64x2_t v203;
  int64x2_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  uint8x16_t v214;
  uint8x16_t v215;
  int16x8_t v216;
  int16x8_t v217;
  uint32x4_t v218;
  uint32x4_t v219;
  uint32x4_t v220;
  uint32x4_t v221;
  int64x2_t v222;
  int64x2_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int64x2_t v227;
  int64x2_t v228;
  int16x8_t v229;
  uint32x4_t v230;
  uint32x4_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  int64x2_t v237;
  int64x2_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  uint8x16_t v248;
  uint8x16_t v249;
  int16x8_t v250;
  int16x8_t v251;
  uint32x4_t v252;
  uint32x4_t v253;
  uint32x4_t v254;
  uint32x4_t v255;
  int64x2_t v256;
  int64x2_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int16x8_t v263;
  uint32x4_t v264;
  uint32x4_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  int64x2_t v271;
  int64x2_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int64x2_t v276;
  int64x2_t v277;
  int64x2_t v278;
  int64x2_t v279;
  int64x2_t v280;
  int64x2_t v281;
  uint8x16_t v282;
  uint8x16_t v283;
  int16x8_t v284;
  int16x8_t v285;
  uint32x4_t v286;
  uint32x4_t v287;
  uint32x4_t v288;
  uint32x4_t v289;
  int64x2_t v290;
  int64x2_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int64x2_t v295;
  int64x2_t v296;
  int16x8_t v297;
  uint32x4_t v298;
  uint32x4_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  int64x2_t v305;
  int64x2_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int64x2_t v310;
  int64x2_t v311;
  int64x2_t v312;
  int64x2_t v313;
  int64x2_t v314;
  int64x2_t v315;
  uint8x16_t v316;
  uint8x16_t v317;
  int16x8_t v318;
  int16x8_t v319;
  uint32x4_t v320;
  uint32x4_t v321;
  uint32x4_t v322;
  uint32x4_t v323;
  int64x2_t v324;
  int64x2_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int64x2_t v329;
  int64x2_t v330;
  int16x8_t v331;
  uint32x4_t v332;
  uint32x4_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  int64x2_t v339;
  int64x2_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int64x2_t v344;
  int64x2_t v345;
  int64x2_t v346;
  int64x2_t v347;
  int64x2_t v348;
  int64x2_t v349;
  uint8x16_t v350;
  uint8x16_t v351;
  int16x8_t v352;
  int16x8_t v353;
  uint32x4_t v354;
  uint32x4_t v355;
  uint32x4_t v356;
  uint32x4_t v357;
  int64x2_t v358;
  int64x2_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int64x2_t v363;
  int64x2_t v364;
  int16x8_t v365;
  uint32x4_t v366;
  uint32x4_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  int64x2_t v373;
  int64x2_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  int64x2_t v378;
  int64x2_t v379;
  int64x2_t v380;
  int64x2_t v381;
  int64x2_t v382;
  int64x2_t v383;
  uint8x16_t v384;
  uint8x16_t v385;
  int16x8_t v386;
  int16x8_t v387;
  uint32x4_t v388;
  uint32x4_t v389;
  uint32x4_t v390;
  uint32x4_t v391;
  int64x2_t v392;
  int64x2_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int64x2_t v397;
  int64x2_t v398;
  int16x8_t v399;
  uint32x4_t v400;
  uint32x4_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  int64x2_t v407;
  int64x2_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  int64x2_t v412;
  int64x2_t v413;
  int64x2_t v414;
  int64x2_t v415;
  int64x2_t v416;
  int64x2_t v417;
  uint8x16_t v418;
  uint8x16_t v419;
  int16x8_t v420;
  int16x8_t v421;
  uint32x4_t v422;
  uint32x4_t v423;
  uint32x4_t v424;
  uint32x4_t v425;
  int64x2_t v426;
  int64x2_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  int64x2_t v431;
  int64x2_t v432;
  int16x8_t v433;
  uint32x4_t v434;
  uint32x4_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  int64x2_t v441;
  int64x2_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int64x2_t v446;
  int64x2_t v447;
  int64x2_t v448;
  int64x2_t v449;
  int64x2_t v450;
  int64x2_t v451;
  uint8x16_t v452;
  uint8x16_t v453;
  int16x8_t v454;
  int16x8_t v455;
  uint32x4_t v456;
  uint32x4_t v457;
  uint32x4_t v458;
  uint32x4_t v459;
  int64x2_t v460;
  int64x2_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  int64x2_t v465;
  int64x2_t v466;
  int16x8_t v467;
  uint32x4_t v468;
  uint32x4_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  int64x2_t v475;
  int64x2_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  int64x2_t v480;
  int64x2_t v481;
  int64x2_t v482;
  int64x2_t v483;
  int64x2_t v484;
  int64x2_t v485;
  uint8x16_t v486;
  uint8x16_t v487;
  int16x8_t v488;
  int16x8_t v489;
  uint32x4_t v490;
  uint32x4_t v491;
  uint32x4_t v492;
  uint32x4_t v493;
  int64x2_t v494;
  int64x2_t v495;
  unint64_t v496;
  uint64_t v497;
  uint64_t v498;
  int64x2_t v499;
  int64x2_t v500;
  int16x8_t v501;
  uint32x4_t v502;
  uint32x4_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  int64x2_t v509;
  int64x2_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  int64x2_t v514;
  int64x2_t v515;
  int64x2_t v516;
  int64x2_t v517;
  int64x2_t v518;
  int64x2_t v519;
  uint8x16_t v520;
  uint8x16_t v521;
  int16x8_t v522;
  int16x8_t v523;
  uint32x4_t v524;
  uint32x4_t v525;
  uint32x4_t v526;
  uint32x4_t v527;
  int64x2_t v528;
  int64x2_t v529;
  unint64_t v530;
  uint64_t v531;
  uint64_t v532;
  int64x2_t v533;
  int64x2_t v534;
  int16x8_t v535;
  uint32x4_t v536;
  uint32x4_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t v542;
  int64x2_t v543;
  int64x2_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  int64x2_t v548;
  int64x2_t v549;
  int64x2_t v550;
  int64x2_t v551;
  int64x2_t v552;
  int64x2_t v553;
  uint8x16_t v554;
  uint8x16_t v555;
  int16x8_t v556;
  int16x8_t v557;
  uint32x4_t v558;
  uint32x4_t v559;
  uint32x4_t v560;
  uint32x4_t v561;
  int64x2_t v562;
  int64x2_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  int64x2_t v567;
  int64x2_t v568;
  int16x8_t v569;
  uint32x4_t v570;
  uint32x4_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  int64x2_t v577;
  int64x2_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  int64x2_t v582;
  int64x2_t v583;
  int64x2_t v584;
  int64x2_t v585;
  int64x2_t v586;
  int64x2_t v587;
  uint8x16_t v588;
  uint8x16_t v589;
  int16x8_t v590;
  int16x8_t v591;
  uint32x4_t v592;
  uint32x4_t v593;
  uint32x4_t v594;
  uint32x4_t v595;
  int64x2_t v596;
  int64x2_t v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  int64x2_t v601;
  int64x2_t v602;
  int16x8_t v603;
  uint32x4_t v604;
  uint32x4_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  unint64_t v609;
  int64x2_t v610;
  int64x2_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  int64x2_t v615;
  int64x2_t v616;
  int64x2_t v617;
  int64x2_t v618;
  int64x2_t v619;
  int64x2_t v620;
  uint8x16_t v621;
  uint8x16_t v622;
  int16x8_t v623;
  int16x8_t v624;
  uint32x4_t v625;
  uint32x4_t v626;
  uint32x4_t v627;
  uint32x4_t v628;
  int64x2_t v629;
  int64x2_t v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t v633;
  int64x2_t v634;
  int64x2_t v635;
  int16x8_t v636;
  uint32x4_t v637;
  uint32x4_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v643;
  unint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  unsigned int v679;
  unsigned int v680;
  int v681;
  unsigned int v682[3];

  v6 = a5;
  v8 = a2;
  if (a6 < 0x10)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_40;
  }
  v677 = 16 * (int)a4;
  v678 = 16 * (int)a2;
  v679 = a6;
  v675 = (int)a4;
  v676 = (int)a2;
  if (a5 >= 0x10)
  {
    v11 = 0;
    v87 = a5;
    v673 = (a5 & 0xF) - a5;
    v674 = (a5 & 7) - a5;
    v668 = 4 * (int)a2;
    v666 = 5 * (int)a2;
    v667 = 4 * (int)a4;
    v664 = 6 * (int)a2;
    v663 = 6 * (int)a4;
    v661 = 7 * (int)a2;
    v662 = 8 * (int)a2;
    v658 = 9 * (int)a2;
    v659 = 7 * (int)a4;
    v660 = 8 * (int)a4;
    v656 = 10 * (int)a2;
    v657 = 9 * (int)a4;
    v654 = 11 * (int)a4;
    v655 = 11 * (int)a2;
    v652 = 13 * (int)a4;
    v653 = 13 * (int)a2;
    v672 = 2 * (int)a2;
    v651 = 14 * (int)a2;
    v671 = 2 * (int)a4;
    v649 = 15 * (int)a2;
    v650 = 14 * (int)a4;
    v648 = 15 * (int)a4;
    v665 = 5 * (int)a4;
    v647 = 10 * (int)a4;
    v670 = 3 * (int)a2;
    v646 = 12 * (int)a2;
    v669 = 3 * (int)a4;
    v645 = 12 * (int)a4;
    v88 = 16;
    v643 = a5 & 7;
    v644 = a5 & 0xF;
    while (1)
    {
      v89 = 0;
      v681 = v88;
      v90 = 16;
      do
      {
        v91 = v90;
        v682[0] = 0;
        v92 = v8;
        v93 = v6;
        v94 = v8;
        v95 = a4;
        vpx_mse16x16(a1 + v89, v92, a3 + v89, a4, v682);
        a4 = v95;
        v8 = v94;
        v6 = v93;
        v11 += v682[0];
        v96 = v89 + 16;
        v97 = v89 + 32;
        v90 = v91 + 16;
        v89 += 16;
      }
      while (v97 <= v93);
      if (v96 >= v93)
      {
        a6 = v679;
        v10 = v681;
        goto LABEL_59;
      }
      v98 = v87 - v96;
      a6 = v679;
      if ((unint64_t)(v87 - v96) < 8)
      {
        v99 = v96;
        v101 = v675;
        v100 = v676;
        v102 = v643;
        goto LABEL_75;
      }
      if (v98 >= 0x10)
      {
        v103 = v98 - v644;
        v104 = 0uLL;
        v105 = (int64x2_t)(unint64_t)v11;
        v106 = v91;
        v107 = v673 + v91;
        v108 = 0uLL;
        v109 = 0uLL;
        v110 = 0uLL;
        v111 = 0uLL;
        v112 = 0uLL;
        v113 = 0uLL;
        do
        {
          v114 = *(uint8x16_t *)(a1 + v106);
          v115 = *(uint8x16_t *)(a3 + v106);
          v116 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v114.i8, *(uint8x8_t *)v115.i8);
          v117 = (int16x8_t)vsubl_high_u8(v114, v115);
          v118 = (uint32x4_t)vmull_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v117.i8);
          v119 = (uint32x4_t)vmull_high_s16(v116, v116);
          v120 = (uint32x4_t)vmull_high_s16(v117, v117);
          v121 = (uint32x4_t)vmull_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v116.i8);
          v109 = (int64x2_t)vaddw_high_u32((uint64x2_t)v109, v119);
          v111 = (int64x2_t)vaddw_high_u32((uint64x2_t)v111, v118);
          v110 = (int64x2_t)vaddw_u32((uint64x2_t)v110, *(uint32x2_t *)v118.i8);
          v108 = (int64x2_t)vaddw_u32((uint64x2_t)v108, *(uint32x2_t *)v119.i8);
          v104 = (int64x2_t)vaddw_high_u32((uint64x2_t)v104, v121);
          v112 = (int64x2_t)vaddw_u32((uint64x2_t)v112, *(uint32x2_t *)v120.i8);
          v105 = (int64x2_t)vaddw_u32((uint64x2_t)v105, *(uint32x2_t *)v121.i8);
          v113 = (int64x2_t)vaddw_high_u32((uint64x2_t)v113, v120);
          v106 += 16;
          v107 += 16;
        }
        while (v107);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v105, v110), vaddq_s64(v108, v112)), vaddq_s64(vaddq_s64(v104, v111), vaddq_s64(v109, v113))));
        v101 = v675;
        v100 = v676;
        v102 = v643;
        if (!v644)
          goto LABEL_76;
        if (v644 < 8)
        {
          v99 = v103 + v96;
          do
          {
LABEL_75:
            v11 += (*(unsigned __int8 *)(a1 + v99) - *(unsigned __int8 *)(a3 + v99))
                 * (*(unsigned __int8 *)(a1 + v99) - *(unsigned __int8 *)(a3 + v99));
            ++v99;
          }
          while (v87 != v99);
          goto LABEL_76;
        }
      }
      else
      {
        v103 = 0;
        v101 = v675;
        v100 = v676;
        v102 = v643;
      }
      v99 = v87 - v102;
      v122 = 0uLL;
      v123 = (int64x2_t)(unint64_t)v11;
      v124 = v103 + v91;
      v125 = v124 + v674;
      v126 = 0uLL;
      v127 = 0uLL;
      do
      {
        v128 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v124), *(uint8x8_t *)(a3 + v124));
        v129 = (uint32x4_t)vmull_high_s16(v128, v128);
        v130 = (uint32x4_t)vmull_s16(*(int16x4_t *)v128.i8, *(int16x4_t *)v128.i8);
        v127 = (int64x2_t)vaddw_high_u32((uint64x2_t)v127, v129);
        v126 = (int64x2_t)vaddw_u32((uint64x2_t)v126, *(uint32x2_t *)v129.i8);
        v122 = (int64x2_t)vaddw_high_u32((uint64x2_t)v122, v130);
        v123 = (int64x2_t)vaddw_u32((uint64x2_t)v123, *(uint32x2_t *)v130.i8);
        v124 += 8;
        v125 += 8;
      }
      while (v125);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v123, v126), vaddq_s64(v122, v127)));
      if (v102)
        goto LABEL_75;
LABEL_76:
      if (v98 < 8)
      {
        v131 = v96;
        goto LABEL_88;
      }
      if (v98 >= 0x10)
      {
        v132 = v98 - v644;
        v133 = 0uLL;
        v134 = (int64x2_t)(unint64_t)v11;
        v135 = v673 + v91;
        v136 = v100 + v91;
        v137 = v101 + v91;
        v138 = 0uLL;
        v139 = 0uLL;
        v140 = 0uLL;
        v141 = 0uLL;
        v142 = 0uLL;
        v143 = 0uLL;
        do
        {
          v144 = *(uint8x16_t *)(a1 + v136);
          v145 = *(uint8x16_t *)(a3 + v137);
          v146 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v144.i8, *(uint8x8_t *)v145.i8);
          v147 = (int16x8_t)vsubl_high_u8(v144, v145);
          v148 = (uint32x4_t)vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v147.i8);
          v149 = (uint32x4_t)vmull_high_s16(v146, v146);
          v150 = (uint32x4_t)vmull_high_s16(v147, v147);
          v151 = (uint32x4_t)vmull_s16(*(int16x4_t *)v146.i8, *(int16x4_t *)v146.i8);
          v139 = (int64x2_t)vaddw_high_u32((uint64x2_t)v139, v149);
          v141 = (int64x2_t)vaddw_high_u32((uint64x2_t)v141, v148);
          v140 = (int64x2_t)vaddw_u32((uint64x2_t)v140, *(uint32x2_t *)v148.i8);
          v138 = (int64x2_t)vaddw_u32((uint64x2_t)v138, *(uint32x2_t *)v149.i8);
          v133 = (int64x2_t)vaddw_high_u32((uint64x2_t)v133, v151);
          v142 = (int64x2_t)vaddw_u32((uint64x2_t)v142, *(uint32x2_t *)v150.i8);
          v134 = (int64x2_t)vaddw_u32((uint64x2_t)v134, *(uint32x2_t *)v151.i8);
          v143 = (int64x2_t)vaddw_high_u32((uint64x2_t)v143, v150);
          v136 += 16;
          v137 += 16;
          v135 += 16;
        }
        while (v135);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v134, v140), vaddq_s64(v138, v142)), vaddq_s64(vaddq_s64(v133, v141), vaddq_s64(v139, v143))));
        if (!v644)
          goto LABEL_90;
        if (v644 < 8)
        {
          v131 = v132 + v96;
LABEL_88:
          v162 = v87 - v131;
          v163 = v101 + v131;
          v164 = v100 + v131;
          do
          {
            v11 += (*(unsigned __int8 *)(a1 + v164) - *(unsigned __int8 *)(a3 + v163))
                 * (*(unsigned __int8 *)(a1 + v164) - *(unsigned __int8 *)(a3 + v163));
            ++v163;
            ++v164;
            --v162;
          }
          while (v162);
          goto LABEL_90;
        }
      }
      else
      {
        v132 = 0;
      }
      v131 = v87 - v102;
      v152 = 0uLL;
      v153 = (int64x2_t)(unint64_t)v11;
      v154 = v674 + v132 + v91;
      v155 = v100 + v132 + v91;
      v156 = v101 + v132 + v91;
      v157 = 0uLL;
      v158 = 0uLL;
      do
      {
        v159 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v155), *(uint8x8_t *)(a3 + v156));
        v160 = (uint32x4_t)vmull_high_s16(v159, v159);
        v161 = (uint32x4_t)vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v159.i8);
        v158 = (int64x2_t)vaddw_high_u32((uint64x2_t)v158, v160);
        v157 = (int64x2_t)vaddw_u32((uint64x2_t)v157, *(uint32x2_t *)v160.i8);
        v152 = (int64x2_t)vaddw_high_u32((uint64x2_t)v152, v161);
        v153 = (int64x2_t)vaddw_u32((uint64x2_t)v153, *(uint32x2_t *)v161.i8);
        v155 += 8;
        v156 += 8;
        v154 += 8;
      }
      while (v154);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v153, v157), vaddq_s64(v152, v158)));
      if (v102)
        goto LABEL_88;
LABEL_90:
      if (v98 < 8)
      {
        v165 = v96;
        v166 = v673;
        v167 = v674;
        goto LABEL_102;
      }
      if (v98 >= 0x10)
      {
        v168 = v98 - v644;
        v169 = 0uLL;
        v170 = (int64x2_t)(unint64_t)v11;
        v166 = v673;
        v171 = v673 + v91;
        v172 = v672 + v91;
        v173 = v671 + v91;
        v174 = 0uLL;
        v175 = 0uLL;
        v176 = 0uLL;
        v177 = 0uLL;
        v178 = 0uLL;
        v179 = 0uLL;
        v167 = v674;
        do
        {
          v180 = *(uint8x16_t *)(a1 + v172);
          v181 = *(uint8x16_t *)(a3 + v173);
          v182 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v180.i8, *(uint8x8_t *)v181.i8);
          v183 = (int16x8_t)vsubl_high_u8(v180, v181);
          v184 = (uint32x4_t)vmull_s16(*(int16x4_t *)v183.i8, *(int16x4_t *)v183.i8);
          v185 = (uint32x4_t)vmull_high_s16(v182, v182);
          v186 = (uint32x4_t)vmull_high_s16(v183, v183);
          v187 = (uint32x4_t)vmull_s16(*(int16x4_t *)v182.i8, *(int16x4_t *)v182.i8);
          v175 = (int64x2_t)vaddw_high_u32((uint64x2_t)v175, v185);
          v177 = (int64x2_t)vaddw_high_u32((uint64x2_t)v177, v184);
          v176 = (int64x2_t)vaddw_u32((uint64x2_t)v176, *(uint32x2_t *)v184.i8);
          v174 = (int64x2_t)vaddw_u32((uint64x2_t)v174, *(uint32x2_t *)v185.i8);
          v169 = (int64x2_t)vaddw_high_u32((uint64x2_t)v169, v187);
          v178 = (int64x2_t)vaddw_u32((uint64x2_t)v178, *(uint32x2_t *)v186.i8);
          v170 = (int64x2_t)vaddw_u32((uint64x2_t)v170, *(uint32x2_t *)v187.i8);
          v179 = (int64x2_t)vaddw_high_u32((uint64x2_t)v179, v186);
          v172 += 16;
          v173 += 16;
          v171 += 16;
        }
        while (v171);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v170, v176), vaddq_s64(v174, v178)), vaddq_s64(vaddq_s64(v169, v177), vaddq_s64(v175, v179))));
        if (!v644)
          goto LABEL_104;
        if (v644 < 8)
        {
          v165 = v168 + v96;
LABEL_102:
          v198 = v87 - v165;
          v199 = v671 + v165;
          v200 = v672 + v165;
          do
          {
            v11 += (*(unsigned __int8 *)(a1 + v200) - *(unsigned __int8 *)(a3 + v199))
                 * (*(unsigned __int8 *)(a1 + v200) - *(unsigned __int8 *)(a3 + v199));
            ++v199;
            ++v200;
            --v198;
          }
          while (v198);
          goto LABEL_104;
        }
      }
      else
      {
        v168 = 0;
        v166 = v673;
        v167 = v674;
      }
      v165 = v87 - v102;
      v188 = 0uLL;
      v189 = (int64x2_t)(unint64_t)v11;
      v190 = v167 + v168 + v91;
      v191 = v672 + v168 + v91;
      v192 = v671 + v168 + v91;
      v193 = 0uLL;
      v194 = 0uLL;
      do
      {
        v195 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v191), *(uint8x8_t *)(a3 + v192));
        v196 = (uint32x4_t)vmull_high_s16(v195, v195);
        v197 = (uint32x4_t)vmull_s16(*(int16x4_t *)v195.i8, *(int16x4_t *)v195.i8);
        v194 = (int64x2_t)vaddw_high_u32((uint64x2_t)v194, v196);
        v193 = (int64x2_t)vaddw_u32((uint64x2_t)v193, *(uint32x2_t *)v196.i8);
        v188 = (int64x2_t)vaddw_high_u32((uint64x2_t)v188, v197);
        v189 = (int64x2_t)vaddw_u32((uint64x2_t)v189, *(uint32x2_t *)v197.i8);
        v191 += 8;
        v192 += 8;
        v190 += 8;
      }
      while (v190);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v189, v193), vaddq_s64(v188, v194)));
      if (v102)
        goto LABEL_102;
LABEL_104:
      if (v98 < 8)
      {
        v201 = v96;
        goto LABEL_116;
      }
      if (v98 >= 0x10)
      {
        v202 = v98 - v644;
        v203 = 0uLL;
        v204 = (int64x2_t)(unint64_t)v11;
        v205 = v166 + v91;
        v206 = v670 + v91;
        v207 = v669 + v91;
        v208 = 0uLL;
        v209 = 0uLL;
        v210 = 0uLL;
        v211 = 0uLL;
        v212 = 0uLL;
        v213 = 0uLL;
        do
        {
          v214 = *(uint8x16_t *)(a1 + v206);
          v215 = *(uint8x16_t *)(a3 + v207);
          v216 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v214.i8, *(uint8x8_t *)v215.i8);
          v217 = (int16x8_t)vsubl_high_u8(v214, v215);
          v218 = (uint32x4_t)vmull_s16(*(int16x4_t *)v217.i8, *(int16x4_t *)v217.i8);
          v219 = (uint32x4_t)vmull_high_s16(v216, v216);
          v220 = (uint32x4_t)vmull_high_s16(v217, v217);
          v221 = (uint32x4_t)vmull_s16(*(int16x4_t *)v216.i8, *(int16x4_t *)v216.i8);
          v209 = (int64x2_t)vaddw_high_u32((uint64x2_t)v209, v219);
          v211 = (int64x2_t)vaddw_high_u32((uint64x2_t)v211, v218);
          v210 = (int64x2_t)vaddw_u32((uint64x2_t)v210, *(uint32x2_t *)v218.i8);
          v208 = (int64x2_t)vaddw_u32((uint64x2_t)v208, *(uint32x2_t *)v219.i8);
          v203 = (int64x2_t)vaddw_high_u32((uint64x2_t)v203, v221);
          v212 = (int64x2_t)vaddw_u32((uint64x2_t)v212, *(uint32x2_t *)v220.i8);
          v204 = (int64x2_t)vaddw_u32((uint64x2_t)v204, *(uint32x2_t *)v221.i8);
          v213 = (int64x2_t)vaddw_high_u32((uint64x2_t)v213, v220);
          v206 += 16;
          v207 += 16;
          v205 += 16;
        }
        while (v205);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v204, v210), vaddq_s64(v208, v212)), vaddq_s64(vaddq_s64(v203, v211), vaddq_s64(v209, v213))));
        if (!v644)
          goto LABEL_118;
        if (v644 < 8)
        {
          v201 = v202 + v96;
LABEL_116:
          v232 = v87 - v201;
          v233 = v669 + v201;
          v234 = v670 + v201;
          do
          {
            v11 += (*(unsigned __int8 *)(a1 + v234) - *(unsigned __int8 *)(a3 + v233))
                 * (*(unsigned __int8 *)(a1 + v234) - *(unsigned __int8 *)(a3 + v233));
            ++v233;
            ++v234;
            --v232;
          }
          while (v232);
          goto LABEL_118;
        }
      }
      else
      {
        v202 = 0;
      }
      v201 = v87 - v102;
      v222 = 0uLL;
      v223 = (int64x2_t)(unint64_t)v11;
      v224 = v167 + v202 + v91;
      v225 = v670 + v202 + v91;
      v226 = v669 + v202 + v91;
      v227 = 0uLL;
      v228 = 0uLL;
      do
      {
        v229 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v225), *(uint8x8_t *)(a3 + v226));
        v230 = (uint32x4_t)vmull_high_s16(v229, v229);
        v231 = (uint32x4_t)vmull_s16(*(int16x4_t *)v229.i8, *(int16x4_t *)v229.i8);
        v228 = (int64x2_t)vaddw_high_u32((uint64x2_t)v228, v230);
        v227 = (int64x2_t)vaddw_u32((uint64x2_t)v227, *(uint32x2_t *)v230.i8);
        v222 = (int64x2_t)vaddw_high_u32((uint64x2_t)v222, v231);
        v223 = (int64x2_t)vaddw_u32((uint64x2_t)v223, *(uint32x2_t *)v231.i8);
        v225 += 8;
        v226 += 8;
        v224 += 8;
      }
      while (v224);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v223, v227), vaddq_s64(v222, v228)));
      if (v102)
        goto LABEL_116;
LABEL_118:
      if (v98 < 8)
      {
        v235 = v96;
        goto LABEL_130;
      }
      if (v98 >= 0x10)
      {
        v236 = v98 - v644;
        v237 = 0uLL;
        v238 = (int64x2_t)(unint64_t)v11;
        v239 = v166 + v91;
        v240 = v668 + v91;
        v241 = v667 + v91;
        v242 = 0uLL;
        v243 = 0uLL;
        v244 = 0uLL;
        v245 = 0uLL;
        v246 = 0uLL;
        v247 = 0uLL;
        do
        {
          v248 = *(uint8x16_t *)(a1 + v240);
          v249 = *(uint8x16_t *)(a3 + v241);
          v250 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v248.i8, *(uint8x8_t *)v249.i8);
          v251 = (int16x8_t)vsubl_high_u8(v248, v249);
          v252 = (uint32x4_t)vmull_s16(*(int16x4_t *)v251.i8, *(int16x4_t *)v251.i8);
          v253 = (uint32x4_t)vmull_high_s16(v250, v250);
          v254 = (uint32x4_t)vmull_high_s16(v251, v251);
          v255 = (uint32x4_t)vmull_s16(*(int16x4_t *)v250.i8, *(int16x4_t *)v250.i8);
          v243 = (int64x2_t)vaddw_high_u32((uint64x2_t)v243, v253);
          v245 = (int64x2_t)vaddw_high_u32((uint64x2_t)v245, v252);
          v244 = (int64x2_t)vaddw_u32((uint64x2_t)v244, *(uint32x2_t *)v252.i8);
          v242 = (int64x2_t)vaddw_u32((uint64x2_t)v242, *(uint32x2_t *)v253.i8);
          v237 = (int64x2_t)vaddw_high_u32((uint64x2_t)v237, v255);
          v246 = (int64x2_t)vaddw_u32((uint64x2_t)v246, *(uint32x2_t *)v254.i8);
          v238 = (int64x2_t)vaddw_u32((uint64x2_t)v238, *(uint32x2_t *)v255.i8);
          v247 = (int64x2_t)vaddw_high_u32((uint64x2_t)v247, v254);
          v240 += 16;
          v241 += 16;
          v239 += 16;
        }
        while (v239);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v238, v244), vaddq_s64(v242, v246)), vaddq_s64(vaddq_s64(v237, v245), vaddq_s64(v243, v247))));
        if (!v644)
          goto LABEL_132;
        if (v644 < 8)
        {
          v235 = v236 + v96;
LABEL_130:
          v266 = v87 - v235;
          v267 = v667 + v235;
          v268 = v668 + v235;
          do
          {
            v11 += (*(unsigned __int8 *)(a1 + v268) - *(unsigned __int8 *)(a3 + v267))
                 * (*(unsigned __int8 *)(a1 + v268) - *(unsigned __int8 *)(a3 + v267));
            ++v267;
            ++v268;
            --v266;
          }
          while (v266);
          goto LABEL_132;
        }
      }
      else
      {
        v236 = 0;
      }
      v235 = v87 - v102;
      v256 = 0uLL;
      v257 = (int64x2_t)(unint64_t)v11;
      v258 = v167 + v236 + v91;
      v259 = v668 + v236 + v91;
      v260 = v667 + v236 + v91;
      v261 = 0uLL;
      v262 = 0uLL;
      do
      {
        v263 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v259), *(uint8x8_t *)(a3 + v260));
        v264 = (uint32x4_t)vmull_high_s16(v263, v263);
        v265 = (uint32x4_t)vmull_s16(*(int16x4_t *)v263.i8, *(int16x4_t *)v263.i8);
        v262 = (int64x2_t)vaddw_high_u32((uint64x2_t)v262, v264);
        v261 = (int64x2_t)vaddw_u32((uint64x2_t)v261, *(uint32x2_t *)v264.i8);
        v256 = (int64x2_t)vaddw_high_u32((uint64x2_t)v256, v265);
        v257 = (int64x2_t)vaddw_u32((uint64x2_t)v257, *(uint32x2_t *)v265.i8);
        v259 += 8;
        v260 += 8;
        v258 += 8;
      }
      while (v258);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v257, v261), vaddq_s64(v256, v262)));
      if (v102)
        goto LABEL_130;
LABEL_132:
      if (v98 < 8)
      {
        v269 = v96;
        goto LABEL_144;
      }
      if (v98 >= 0x10)
      {
        v270 = v98 - v644;
        v271 = 0uLL;
        v272 = (int64x2_t)(unint64_t)v11;
        v273 = v166 + v91;
        v274 = v666 + v91;
        v275 = v665 + v91;
        v276 = 0uLL;
        v277 = 0uLL;
        v278 = 0uLL;
        v279 = 0uLL;
        v280 = 0uLL;
        v281 = 0uLL;
        do
        {
          v282 = *(uint8x16_t *)(a1 + v274);
          v283 = *(uint8x16_t *)(a3 + v275);
          v284 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v282.i8, *(uint8x8_t *)v283.i8);
          v285 = (int16x8_t)vsubl_high_u8(v282, v283);
          v286 = (uint32x4_t)vmull_s16(*(int16x4_t *)v285.i8, *(int16x4_t *)v285.i8);
          v287 = (uint32x4_t)vmull_high_s16(v284, v284);
          v288 = (uint32x4_t)vmull_high_s16(v285, v285);
          v289 = (uint32x4_t)vmull_s16(*(int16x4_t *)v284.i8, *(int16x4_t *)v284.i8);
          v277 = (int64x2_t)vaddw_high_u32((uint64x2_t)v277, v287);
          v279 = (int64x2_t)vaddw_high_u32((uint64x2_t)v279, v286);
          v278 = (int64x2_t)vaddw_u32((uint64x2_t)v278, *(uint32x2_t *)v286.i8);
          v276 = (int64x2_t)vaddw_u32((uint64x2_t)v276, *(uint32x2_t *)v287.i8);
          v271 = (int64x2_t)vaddw_high_u32((uint64x2_t)v271, v289);
          v280 = (int64x2_t)vaddw_u32((uint64x2_t)v280, *(uint32x2_t *)v288.i8);
          v272 = (int64x2_t)vaddw_u32((uint64x2_t)v272, *(uint32x2_t *)v289.i8);
          v281 = (int64x2_t)vaddw_high_u32((uint64x2_t)v281, v288);
          v274 += 16;
          v275 += 16;
          v273 += 16;
        }
        while (v273);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v272, v278), vaddq_s64(v276, v280)), vaddq_s64(vaddq_s64(v271, v279), vaddq_s64(v277, v281))));
        if (!v644)
          goto LABEL_146;
        if (v644 < 8)
        {
          v269 = v270 + v96;
LABEL_144:
          v300 = v87 - v269;
          v301 = v665 + v269;
          v302 = v666 + v269;
          do
          {
            v11 += (*(unsigned __int8 *)(a1 + v302) - *(unsigned __int8 *)(a3 + v301))
                 * (*(unsigned __int8 *)(a1 + v302) - *(unsigned __int8 *)(a3 + v301));
            ++v301;
            ++v302;
            --v300;
          }
          while (v300);
          goto LABEL_146;
        }
      }
      else
      {
        v270 = 0;
      }
      v269 = v87 - v102;
      v290 = 0uLL;
      v291 = (int64x2_t)(unint64_t)v11;
      v292 = v167 + v270 + v91;
      v293 = v666 + v270 + v91;
      v294 = v665 + v270 + v91;
      v295 = 0uLL;
      v296 = 0uLL;
      do
      {
        v297 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v293), *(uint8x8_t *)(a3 + v294));
        v298 = (uint32x4_t)vmull_high_s16(v297, v297);
        v299 = (uint32x4_t)vmull_s16(*(int16x4_t *)v297.i8, *(int16x4_t *)v297.i8);
        v296 = (int64x2_t)vaddw_high_u32((uint64x2_t)v296, v298);
        v295 = (int64x2_t)vaddw_u32((uint64x2_t)v295, *(uint32x2_t *)v298.i8);
        v290 = (int64x2_t)vaddw_high_u32((uint64x2_t)v290, v299);
        v291 = (int64x2_t)vaddw_u32((uint64x2_t)v291, *(uint32x2_t *)v299.i8);
        v293 += 8;
        v294 += 8;
        v292 += 8;
      }
      while (v292);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v291, v295), vaddq_s64(v290, v296)));
      if (v102)
        goto LABEL_144;
LABEL_146:
      if (v98 < 8)
      {
        v303 = v96;
        goto LABEL_158;
      }
      if (v98 >= 0x10)
      {
        v304 = v98 - v644;
        v305 = 0uLL;
        v306 = (int64x2_t)(unint64_t)v11;
        v307 = v166 + v91;
        v308 = v664 + v91;
        v309 = v663 + v91;
        v310 = 0uLL;
        v311 = 0uLL;
        v312 = 0uLL;
        v313 = 0uLL;
        v314 = 0uLL;
        v315 = 0uLL;
        do
        {
          v316 = *(uint8x16_t *)(a1 + v308);
          v317 = *(uint8x16_t *)(a3 + v309);
          v318 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v316.i8, *(uint8x8_t *)v317.i8);
          v319 = (int16x8_t)vsubl_high_u8(v316, v317);
          v320 = (uint32x4_t)vmull_s16(*(int16x4_t *)v319.i8, *(int16x4_t *)v319.i8);
          v321 = (uint32x4_t)vmull_high_s16(v318, v318);
          v322 = (uint32x4_t)vmull_high_s16(v319, v319);
          v323 = (uint32x4_t)vmull_s16(*(int16x4_t *)v318.i8, *(int16x4_t *)v318.i8);
          v311 = (int64x2_t)vaddw_high_u32((uint64x2_t)v311, v321);
          v313 = (int64x2_t)vaddw_high_u32((uint64x2_t)v313, v320);
          v312 = (int64x2_t)vaddw_u32((uint64x2_t)v312, *(uint32x2_t *)v320.i8);
          v310 = (int64x2_t)vaddw_u32((uint64x2_t)v310, *(uint32x2_t *)v321.i8);
          v305 = (int64x2_t)vaddw_high_u32((uint64x2_t)v305, v323);
          v314 = (int64x2_t)vaddw_u32((uint64x2_t)v314, *(uint32x2_t *)v322.i8);
          v306 = (int64x2_t)vaddw_u32((uint64x2_t)v306, *(uint32x2_t *)v323.i8);
          v315 = (int64x2_t)vaddw_high_u32((uint64x2_t)v315, v322);
          v308 += 16;
          v309 += 16;
          v307 += 16;
        }
        while (v307);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v306, v312), vaddq_s64(v310, v314)), vaddq_s64(vaddq_s64(v305, v313), vaddq_s64(v311, v315))));
        if (!v644)
          goto LABEL_160;
        if (v644 < 8)
        {
          v303 = v304 + v96;
LABEL_158:
          v334 = v87 - v303;
          v335 = v663 + v303;
          v336 = v664 + v303;
          do
          {
            v11 += (*(unsigned __int8 *)(a1 + v336) - *(unsigned __int8 *)(a3 + v335))
                 * (*(unsigned __int8 *)(a1 + v336) - *(unsigned __int8 *)(a3 + v335));
            ++v335;
            ++v336;
            --v334;
          }
          while (v334);
          goto LABEL_160;
        }
      }
      else
      {
        v304 = 0;
      }
      v303 = v87 - v102;
      v324 = 0uLL;
      v325 = (int64x2_t)(unint64_t)v11;
      v326 = v167 + v304 + v91;
      v327 = v664 + v304 + v91;
      v328 = v663 + v304 + v91;
      v329 = 0uLL;
      v330 = 0uLL;
      do
      {
        v331 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v327), *(uint8x8_t *)(a3 + v328));
        v332 = (uint32x4_t)vmull_high_s16(v331, v331);
        v333 = (uint32x4_t)vmull_s16(*(int16x4_t *)v331.i8, *(int16x4_t *)v331.i8);
        v330 = (int64x2_t)vaddw_high_u32((uint64x2_t)v330, v332);
        v329 = (int64x2_t)vaddw_u32((uint64x2_t)v329, *(uint32x2_t *)v332.i8);
        v324 = (int64x2_t)vaddw_high_u32((uint64x2_t)v324, v333);
        v325 = (int64x2_t)vaddw_u32((uint64x2_t)v325, *(uint32x2_t *)v333.i8);
        v327 += 8;
        v328 += 8;
        v326 += 8;
      }
      while (v326);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v325, v329), vaddq_s64(v324, v330)));
      if (v102)
        goto LABEL_158;
LABEL_160:
      if (v98 < 8)
      {
        v337 = v96;
        goto LABEL_172;
      }
      if (v98 >= 0x10)
      {
        v338 = v98 - v644;
        v339 = 0uLL;
        v340 = (int64x2_t)(unint64_t)v11;
        v341 = v166 + v91;
        v342 = v661 + v91;
        v343 = v659 + v91;
        v344 = 0uLL;
        v345 = 0uLL;
        v346 = 0uLL;
        v347 = 0uLL;
        v348 = 0uLL;
        v349 = 0uLL;
        do
        {
          v350 = *(uint8x16_t *)(a1 + v342);
          v351 = *(uint8x16_t *)(a3 + v343);
          v352 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v350.i8, *(uint8x8_t *)v351.i8);
          v353 = (int16x8_t)vsubl_high_u8(v350, v351);
          v354 = (uint32x4_t)vmull_s16(*(int16x4_t *)v353.i8, *(int16x4_t *)v353.i8);
          v355 = (uint32x4_t)vmull_high_s16(v352, v352);
          v356 = (uint32x4_t)vmull_high_s16(v353, v353);
          v357 = (uint32x4_t)vmull_s16(*(int16x4_t *)v352.i8, *(int16x4_t *)v352.i8);
          v345 = (int64x2_t)vaddw_high_u32((uint64x2_t)v345, v355);
          v347 = (int64x2_t)vaddw_high_u32((uint64x2_t)v347, v354);
          v346 = (int64x2_t)vaddw_u32((uint64x2_t)v346, *(uint32x2_t *)v354.i8);
          v344 = (int64x2_t)vaddw_u32((uint64x2_t)v344, *(uint32x2_t *)v355.i8);
          v339 = (int64x2_t)vaddw_high_u32((uint64x2_t)v339, v357);
          v348 = (int64x2_t)vaddw_u32((uint64x2_t)v348, *(uint32x2_t *)v356.i8);
          v340 = (int64x2_t)vaddw_u32((uint64x2_t)v340, *(uint32x2_t *)v357.i8);
          v349 = (int64x2_t)vaddw_high_u32((uint64x2_t)v349, v356);
          v342 += 16;
          v343 += 16;
          v341 += 16;
        }
        while (v341);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v340, v346), vaddq_s64(v344, v348)), vaddq_s64(vaddq_s64(v339, v347), vaddq_s64(v345, v349))));
        if (!v644)
          goto LABEL_174;
        if (v644 < 8)
        {
          v337 = v338 + v96;
LABEL_172:
          v368 = v87 - v337;
          v369 = v659 + v337;
          v370 = v661 + v337;
          do
          {
            v11 += (*(unsigned __int8 *)(a1 + v370) - *(unsigned __int8 *)(a3 + v369))
                 * (*(unsigned __int8 *)(a1 + v370) - *(unsigned __int8 *)(a3 + v369));
            ++v369;
            ++v370;
            --v368;
          }
          while (v368);
          goto LABEL_174;
        }
      }
      else
      {
        v338 = 0;
      }
      v337 = v87 - v102;
      v358 = 0uLL;
      v359 = (int64x2_t)(unint64_t)v11;
      v360 = v167 + v338 + v91;
      v361 = v661 + v338 + v91;
      v362 = v659 + v338 + v91;
      v363 = 0uLL;
      v364 = 0uLL;
      do
      {
        v365 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v361), *(uint8x8_t *)(a3 + v362));
        v366 = (uint32x4_t)vmull_high_s16(v365, v365);
        v367 = (uint32x4_t)vmull_s16(*(int16x4_t *)v365.i8, *(int16x4_t *)v365.i8);
        v364 = (int64x2_t)vaddw_high_u32((uint64x2_t)v364, v366);
        v363 = (int64x2_t)vaddw_u32((uint64x2_t)v363, *(uint32x2_t *)v366.i8);
        v358 = (int64x2_t)vaddw_high_u32((uint64x2_t)v358, v367);
        v359 = (int64x2_t)vaddw_u32((uint64x2_t)v359, *(uint32x2_t *)v367.i8);
        v361 += 8;
        v362 += 8;
        v360 += 8;
      }
      while (v360);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v359, v363), vaddq_s64(v358, v364)));
      if (v102)
        goto LABEL_172;
LABEL_174:
      if (v98 < 8)
      {
        v371 = v96;
        goto LABEL_186;
      }
      if (v98 >= 0x10)
      {
        v372 = v98 - v644;
        v373 = 0uLL;
        v374 = (int64x2_t)(unint64_t)v11;
        v375 = v166 + v91;
        v376 = v662 + v91;
        v377 = v660 + v91;
        v378 = 0uLL;
        v379 = 0uLL;
        v380 = 0uLL;
        v381 = 0uLL;
        v382 = 0uLL;
        v383 = 0uLL;
        do
        {
          v384 = *(uint8x16_t *)(a1 + v376);
          v385 = *(uint8x16_t *)(a3 + v377);
          v386 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v384.i8, *(uint8x8_t *)v385.i8);
          v387 = (int16x8_t)vsubl_high_u8(v384, v385);
          v388 = (uint32x4_t)vmull_s16(*(int16x4_t *)v387.i8, *(int16x4_t *)v387.i8);
          v389 = (uint32x4_t)vmull_high_s16(v386, v386);
          v390 = (uint32x4_t)vmull_high_s16(v387, v387);
          v391 = (uint32x4_t)vmull_s16(*(int16x4_t *)v386.i8, *(int16x4_t *)v386.i8);
          v379 = (int64x2_t)vaddw_high_u32((uint64x2_t)v379, v389);
          v381 = (int64x2_t)vaddw_high_u32((uint64x2_t)v381, v388);
          v380 = (int64x2_t)vaddw_u32((uint64x2_t)v380, *(uint32x2_t *)v388.i8);
          v378 = (int64x2_t)vaddw_u32((uint64x2_t)v378, *(uint32x2_t *)v389.i8);
          v373 = (int64x2_t)vaddw_high_u32((uint64x2_t)v373, v391);
          v382 = (int64x2_t)vaddw_u32((uint64x2_t)v382, *(uint32x2_t *)v390.i8);
          v374 = (int64x2_t)vaddw_u32((uint64x2_t)v374, *(uint32x2_t *)v391.i8);
          v383 = (int64x2_t)vaddw_high_u32((uint64x2_t)v383, v390);
          v376 += 16;
          v377 += 16;
          v375 += 16;
        }
        while (v375);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v374, v380), vaddq_s64(v378, v382)), vaddq_s64(vaddq_s64(v373, v381), vaddq_s64(v379, v383))));
        if (!v644)
          goto LABEL_188;
        if (v644 < 8)
        {
          v371 = v372 + v96;
LABEL_186:
          v402 = v87 - v371;
          v403 = v660 + v371;
          v404 = v662 + v371;
          do
          {
            v11 += (*(unsigned __int8 *)(a1 + v404) - *(unsigned __int8 *)(a3 + v403))
                 * (*(unsigned __int8 *)(a1 + v404) - *(unsigned __int8 *)(a3 + v403));
            ++v403;
            ++v404;
            --v402;
          }
          while (v402);
          goto LABEL_188;
        }
      }
      else
      {
        v372 = 0;
      }
      v371 = v87 - v102;
      v392 = 0uLL;
      v393 = (int64x2_t)(unint64_t)v11;
      v394 = v167 + v372 + v91;
      v395 = v662 + v372 + v91;
      v396 = v660 + v372 + v91;
      v397 = 0uLL;
      v398 = 0uLL;
      do
      {
        v399 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v395), *(uint8x8_t *)(a3 + v396));
        v400 = (uint32x4_t)vmull_high_s16(v399, v399);
        v401 = (uint32x4_t)vmull_s16(*(int16x4_t *)v399.i8, *(int16x4_t *)v399.i8);
        v398 = (int64x2_t)vaddw_high_u32((uint64x2_t)v398, v400);
        v397 = (int64x2_t)vaddw_u32((uint64x2_t)v397, *(uint32x2_t *)v400.i8);
        v392 = (int64x2_t)vaddw_high_u32((uint64x2_t)v392, v401);
        v393 = (int64x2_t)vaddw_u32((uint64x2_t)v393, *(uint32x2_t *)v401.i8);
        v395 += 8;
        v396 += 8;
        v394 += 8;
      }
      while (v394);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v393, v397), vaddq_s64(v392, v398)));
      if (v102)
        goto LABEL_186;
LABEL_188:
      if (v98 < 8)
      {
        v405 = v96;
        goto LABEL_200;
      }
      if (v98 >= 0x10)
      {
        v406 = v98 - v644;
        v407 = 0uLL;
        v408 = (int64x2_t)(unint64_t)v11;
        v409 = v166 + v91;
        v410 = v658 + v91;
        v411 = v657 + v91;
        v412 = 0uLL;
        v413 = 0uLL;
        v414 = 0uLL;
        v415 = 0uLL;
        v416 = 0uLL;
        v417 = 0uLL;
        do
        {
          v418 = *(uint8x16_t *)(a1 + v410);
          v419 = *(uint8x16_t *)(a3 + v411);
          v420 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v418.i8, *(uint8x8_t *)v419.i8);
          v421 = (int16x8_t)vsubl_high_u8(v418, v419);
          v422 = (uint32x4_t)vmull_s16(*(int16x4_t *)v421.i8, *(int16x4_t *)v421.i8);
          v423 = (uint32x4_t)vmull_high_s16(v420, v420);
          v424 = (uint32x4_t)vmull_high_s16(v421, v421);
          v425 = (uint32x4_t)vmull_s16(*(int16x4_t *)v420.i8, *(int16x4_t *)v420.i8);
          v413 = (int64x2_t)vaddw_high_u32((uint64x2_t)v413, v423);
          v415 = (int64x2_t)vaddw_high_u32((uint64x2_t)v415, v422);
          v414 = (int64x2_t)vaddw_u32((uint64x2_t)v414, *(uint32x2_t *)v422.i8);
          v412 = (int64x2_t)vaddw_u32((uint64x2_t)v412, *(uint32x2_t *)v423.i8);
          v407 = (int64x2_t)vaddw_high_u32((uint64x2_t)v407, v425);
          v416 = (int64x2_t)vaddw_u32((uint64x2_t)v416, *(uint32x2_t *)v424.i8);
          v408 = (int64x2_t)vaddw_u32((uint64x2_t)v408, *(uint32x2_t *)v425.i8);
          v417 = (int64x2_t)vaddw_high_u32((uint64x2_t)v417, v424);
          v410 += 16;
          v411 += 16;
          v409 += 16;
        }
        while (v409);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v408, v414), vaddq_s64(v412, v416)), vaddq_s64(vaddq_s64(v407, v415), vaddq_s64(v413, v417))));
        if (!v644)
          goto LABEL_202;
        if (v644 < 8)
        {
          v405 = v406 + v96;
LABEL_200:
          v436 = v87 - v405;
          v437 = v657 + v405;
          v438 = v658 + v405;
          do
          {
            v11 += (*(unsigned __int8 *)(a1 + v438) - *(unsigned __int8 *)(a3 + v437))
                 * (*(unsigned __int8 *)(a1 + v438) - *(unsigned __int8 *)(a3 + v437));
            ++v437;
            ++v438;
            --v436;
          }
          while (v436);
          goto LABEL_202;
        }
      }
      else
      {
        v406 = 0;
      }
      v405 = v87 - v102;
      v426 = 0uLL;
      v427 = (int64x2_t)(unint64_t)v11;
      v428 = v167 + v406 + v91;
      v429 = v658 + v406 + v91;
      v430 = v657 + v406 + v91;
      v431 = 0uLL;
      v432 = 0uLL;
      do
      {
        v433 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v429), *(uint8x8_t *)(a3 + v430));
        v434 = (uint32x4_t)vmull_high_s16(v433, v433);
        v435 = (uint32x4_t)vmull_s16(*(int16x4_t *)v433.i8, *(int16x4_t *)v433.i8);
        v432 = (int64x2_t)vaddw_high_u32((uint64x2_t)v432, v434);
        v431 = (int64x2_t)vaddw_u32((uint64x2_t)v431, *(uint32x2_t *)v434.i8);
        v426 = (int64x2_t)vaddw_high_u32((uint64x2_t)v426, v435);
        v427 = (int64x2_t)vaddw_u32((uint64x2_t)v427, *(uint32x2_t *)v435.i8);
        v429 += 8;
        v430 += 8;
        v428 += 8;
      }
      while (v428);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v427, v431), vaddq_s64(v426, v432)));
      if (v102)
        goto LABEL_200;
LABEL_202:
      if (v98 < 8)
      {
        v439 = v96;
        goto LABEL_214;
      }
      if (v98 >= 0x10)
      {
        v440 = v98 - v644;
        v441 = 0uLL;
        v442 = (int64x2_t)(unint64_t)v11;
        v443 = v166 + v91;
        v444 = v656 + v91;
        v445 = v647 + v91;
        v446 = 0uLL;
        v447 = 0uLL;
        v448 = 0uLL;
        v449 = 0uLL;
        v450 = 0uLL;
        v451 = 0uLL;
        do
        {
          v452 = *(uint8x16_t *)(a1 + v444);
          v453 = *(uint8x16_t *)(a3 + v445);
          v454 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v452.i8, *(uint8x8_t *)v453.i8);
          v455 = (int16x8_t)vsubl_high_u8(v452, v453);
          v456 = (uint32x4_t)vmull_s16(*(int16x4_t *)v455.i8, *(int16x4_t *)v455.i8);
          v457 = (uint32x4_t)vmull_high_s16(v454, v454);
          v458 = (uint32x4_t)vmull_high_s16(v455, v455);
          v459 = (uint32x4_t)vmull_s16(*(int16x4_t *)v454.i8, *(int16x4_t *)v454.i8);
          v447 = (int64x2_t)vaddw_high_u32((uint64x2_t)v447, v457);
          v449 = (int64x2_t)vaddw_high_u32((uint64x2_t)v449, v456);
          v448 = (int64x2_t)vaddw_u32((uint64x2_t)v448, *(uint32x2_t *)v456.i8);
          v446 = (int64x2_t)vaddw_u32((uint64x2_t)v446, *(uint32x2_t *)v457.i8);
          v441 = (int64x2_t)vaddw_high_u32((uint64x2_t)v441, v459);
          v450 = (int64x2_t)vaddw_u32((uint64x2_t)v450, *(uint32x2_t *)v458.i8);
          v442 = (int64x2_t)vaddw_u32((uint64x2_t)v442, *(uint32x2_t *)v459.i8);
          v451 = (int64x2_t)vaddw_high_u32((uint64x2_t)v451, v458);
          v444 += 16;
          v445 += 16;
          v443 += 16;
        }
        while (v443);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v442, v448), vaddq_s64(v446, v450)), vaddq_s64(vaddq_s64(v441, v449), vaddq_s64(v447, v451))));
        if (!v644)
          goto LABEL_216;
        if (v644 < 8)
        {
          v439 = v440 + v96;
LABEL_214:
          v470 = v87 - v439;
          v471 = v647 + v439;
          v472 = v656 + v439;
          do
          {
            v11 += (*(unsigned __int8 *)(a1 + v472) - *(unsigned __int8 *)(a3 + v471))
                 * (*(unsigned __int8 *)(a1 + v472) - *(unsigned __int8 *)(a3 + v471));
            ++v471;
            ++v472;
            --v470;
          }
          while (v470);
          goto LABEL_216;
        }
      }
      else
      {
        v440 = 0;
      }
      v439 = v87 - v102;
      v460 = 0uLL;
      v461 = (int64x2_t)(unint64_t)v11;
      v462 = v167 + v440 + v91;
      v463 = v656 + v440 + v91;
      v464 = v647 + v440 + v91;
      v465 = 0uLL;
      v466 = 0uLL;
      do
      {
        v467 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v463), *(uint8x8_t *)(a3 + v464));
        v468 = (uint32x4_t)vmull_high_s16(v467, v467);
        v469 = (uint32x4_t)vmull_s16(*(int16x4_t *)v467.i8, *(int16x4_t *)v467.i8);
        v466 = (int64x2_t)vaddw_high_u32((uint64x2_t)v466, v468);
        v465 = (int64x2_t)vaddw_u32((uint64x2_t)v465, *(uint32x2_t *)v468.i8);
        v460 = (int64x2_t)vaddw_high_u32((uint64x2_t)v460, v469);
        v461 = (int64x2_t)vaddw_u32((uint64x2_t)v461, *(uint32x2_t *)v469.i8);
        v463 += 8;
        v464 += 8;
        v462 += 8;
      }
      while (v462);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v461, v465), vaddq_s64(v460, v466)));
      if (v102)
        goto LABEL_214;
LABEL_216:
      if (v98 < 8)
      {
        v473 = v96;
        goto LABEL_228;
      }
      if (v98 >= 0x10)
      {
        v474 = v98 - v644;
        v475 = 0uLL;
        v476 = (int64x2_t)(unint64_t)v11;
        v477 = v166 + v91;
        v478 = v655 + v91;
        v479 = v654 + v91;
        v480 = 0uLL;
        v481 = 0uLL;
        v482 = 0uLL;
        v483 = 0uLL;
        v484 = 0uLL;
        v485 = 0uLL;
        do
        {
          v486 = *(uint8x16_t *)(a1 + v478);
          v487 = *(uint8x16_t *)(a3 + v479);
          v488 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v486.i8, *(uint8x8_t *)v487.i8);
          v489 = (int16x8_t)vsubl_high_u8(v486, v487);
          v490 = (uint32x4_t)vmull_s16(*(int16x4_t *)v489.i8, *(int16x4_t *)v489.i8);
          v491 = (uint32x4_t)vmull_high_s16(v488, v488);
          v492 = (uint32x4_t)vmull_high_s16(v489, v489);
          v493 = (uint32x4_t)vmull_s16(*(int16x4_t *)v488.i8, *(int16x4_t *)v488.i8);
          v481 = (int64x2_t)vaddw_high_u32((uint64x2_t)v481, v491);
          v483 = (int64x2_t)vaddw_high_u32((uint64x2_t)v483, v490);
          v482 = (int64x2_t)vaddw_u32((uint64x2_t)v482, *(uint32x2_t *)v490.i8);
          v480 = (int64x2_t)vaddw_u32((uint64x2_t)v480, *(uint32x2_t *)v491.i8);
          v475 = (int64x2_t)vaddw_high_u32((uint64x2_t)v475, v493);
          v484 = (int64x2_t)vaddw_u32((uint64x2_t)v484, *(uint32x2_t *)v492.i8);
          v476 = (int64x2_t)vaddw_u32((uint64x2_t)v476, *(uint32x2_t *)v493.i8);
          v485 = (int64x2_t)vaddw_high_u32((uint64x2_t)v485, v492);
          v478 += 16;
          v479 += 16;
          v477 += 16;
        }
        while (v477);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v476, v482), vaddq_s64(v480, v484)), vaddq_s64(vaddq_s64(v475, v483), vaddq_s64(v481, v485))));
        if (!v644)
          goto LABEL_230;
        if (v644 < 8)
        {
          v473 = v474 + v96;
LABEL_228:
          v504 = v87 - v473;
          v505 = v654 + v473;
          v506 = v655 + v473;
          do
          {
            v11 += (*(unsigned __int8 *)(a1 + v506) - *(unsigned __int8 *)(a3 + v505))
                 * (*(unsigned __int8 *)(a1 + v506) - *(unsigned __int8 *)(a3 + v505));
            ++v505;
            ++v506;
            --v504;
          }
          while (v504);
          goto LABEL_230;
        }
      }
      else
      {
        v474 = 0;
      }
      v473 = v87 - v102;
      v494 = 0uLL;
      v495 = (int64x2_t)(unint64_t)v11;
      v496 = v167 + v474 + v91;
      v497 = v655 + v474 + v91;
      v498 = v654 + v474 + v91;
      v499 = 0uLL;
      v500 = 0uLL;
      do
      {
        v501 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v497), *(uint8x8_t *)(a3 + v498));
        v502 = (uint32x4_t)vmull_high_s16(v501, v501);
        v503 = (uint32x4_t)vmull_s16(*(int16x4_t *)v501.i8, *(int16x4_t *)v501.i8);
        v500 = (int64x2_t)vaddw_high_u32((uint64x2_t)v500, v502);
        v499 = (int64x2_t)vaddw_u32((uint64x2_t)v499, *(uint32x2_t *)v502.i8);
        v494 = (int64x2_t)vaddw_high_u32((uint64x2_t)v494, v503);
        v495 = (int64x2_t)vaddw_u32((uint64x2_t)v495, *(uint32x2_t *)v503.i8);
        v497 += 8;
        v498 += 8;
        v496 += 8;
      }
      while (v496);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v495, v499), vaddq_s64(v494, v500)));
      if (v102)
        goto LABEL_228;
LABEL_230:
      if (v98 < 8)
      {
        v507 = v96;
        goto LABEL_242;
      }
      if (v98 >= 0x10)
      {
        v508 = v98 - v644;
        v509 = 0uLL;
        v510 = (int64x2_t)(unint64_t)v11;
        v511 = v166 + v91;
        v512 = v646 + v91;
        v513 = v645 + v91;
        v514 = 0uLL;
        v515 = 0uLL;
        v516 = 0uLL;
        v517 = 0uLL;
        v518 = 0uLL;
        v519 = 0uLL;
        do
        {
          v520 = *(uint8x16_t *)(a1 + v512);
          v521 = *(uint8x16_t *)(a3 + v513);
          v522 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v520.i8, *(uint8x8_t *)v521.i8);
          v523 = (int16x8_t)vsubl_high_u8(v520, v521);
          v524 = (uint32x4_t)vmull_s16(*(int16x4_t *)v523.i8, *(int16x4_t *)v523.i8);
          v525 = (uint32x4_t)vmull_high_s16(v522, v522);
          v526 = (uint32x4_t)vmull_high_s16(v523, v523);
          v527 = (uint32x4_t)vmull_s16(*(int16x4_t *)v522.i8, *(int16x4_t *)v522.i8);
          v515 = (int64x2_t)vaddw_high_u32((uint64x2_t)v515, v525);
          v517 = (int64x2_t)vaddw_high_u32((uint64x2_t)v517, v524);
          v516 = (int64x2_t)vaddw_u32((uint64x2_t)v516, *(uint32x2_t *)v524.i8);
          v514 = (int64x2_t)vaddw_u32((uint64x2_t)v514, *(uint32x2_t *)v525.i8);
          v509 = (int64x2_t)vaddw_high_u32((uint64x2_t)v509, v527);
          v518 = (int64x2_t)vaddw_u32((uint64x2_t)v518, *(uint32x2_t *)v526.i8);
          v510 = (int64x2_t)vaddw_u32((uint64x2_t)v510, *(uint32x2_t *)v527.i8);
          v519 = (int64x2_t)vaddw_high_u32((uint64x2_t)v519, v526);
          v512 += 16;
          v513 += 16;
          v511 += 16;
        }
        while (v511);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v510, v516), vaddq_s64(v514, v518)), vaddq_s64(vaddq_s64(v509, v517), vaddq_s64(v515, v519))));
        if (!v644)
          goto LABEL_244;
        if (v644 < 8)
        {
          v507 = v508 + v96;
LABEL_242:
          v538 = v87 - v507;
          v539 = v645 + v507;
          v540 = v646 + v507;
          do
          {
            v11 += (*(unsigned __int8 *)(a1 + v540) - *(unsigned __int8 *)(a3 + v539))
                 * (*(unsigned __int8 *)(a1 + v540) - *(unsigned __int8 *)(a3 + v539));
            ++v539;
            ++v540;
            --v538;
          }
          while (v538);
          goto LABEL_244;
        }
      }
      else
      {
        v508 = 0;
      }
      v507 = v87 - v102;
      v528 = 0uLL;
      v529 = (int64x2_t)(unint64_t)v11;
      v530 = v167 + v508 + v91;
      v531 = v646 + v508 + v91;
      v532 = v645 + v508 + v91;
      v533 = 0uLL;
      v534 = 0uLL;
      do
      {
        v535 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v531), *(uint8x8_t *)(a3 + v532));
        v536 = (uint32x4_t)vmull_high_s16(v535, v535);
        v537 = (uint32x4_t)vmull_s16(*(int16x4_t *)v535.i8, *(int16x4_t *)v535.i8);
        v534 = (int64x2_t)vaddw_high_u32((uint64x2_t)v534, v536);
        v533 = (int64x2_t)vaddw_u32((uint64x2_t)v533, *(uint32x2_t *)v536.i8);
        v528 = (int64x2_t)vaddw_high_u32((uint64x2_t)v528, v537);
        v529 = (int64x2_t)vaddw_u32((uint64x2_t)v529, *(uint32x2_t *)v537.i8);
        v531 += 8;
        v532 += 8;
        v530 += 8;
      }
      while (v530);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v529, v533), vaddq_s64(v528, v534)));
      if (v102)
        goto LABEL_242;
LABEL_244:
      if (v98 < 8)
      {
        v541 = v96;
        goto LABEL_256;
      }
      if (v98 >= 0x10)
      {
        v542 = v98 - v644;
        v543 = 0uLL;
        v544 = (int64x2_t)(unint64_t)v11;
        v545 = v166 + v91;
        v546 = v653 + v91;
        v547 = v652 + v91;
        v548 = 0uLL;
        v549 = 0uLL;
        v550 = 0uLL;
        v551 = 0uLL;
        v552 = 0uLL;
        v553 = 0uLL;
        do
        {
          v554 = *(uint8x16_t *)(a1 + v546);
          v555 = *(uint8x16_t *)(a3 + v547);
          v556 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v554.i8, *(uint8x8_t *)v555.i8);
          v557 = (int16x8_t)vsubl_high_u8(v554, v555);
          v558 = (uint32x4_t)vmull_s16(*(int16x4_t *)v557.i8, *(int16x4_t *)v557.i8);
          v559 = (uint32x4_t)vmull_high_s16(v556, v556);
          v560 = (uint32x4_t)vmull_high_s16(v557, v557);
          v561 = (uint32x4_t)vmull_s16(*(int16x4_t *)v556.i8, *(int16x4_t *)v556.i8);
          v549 = (int64x2_t)vaddw_high_u32((uint64x2_t)v549, v559);
          v551 = (int64x2_t)vaddw_high_u32((uint64x2_t)v551, v558);
          v550 = (int64x2_t)vaddw_u32((uint64x2_t)v550, *(uint32x2_t *)v558.i8);
          v548 = (int64x2_t)vaddw_u32((uint64x2_t)v548, *(uint32x2_t *)v559.i8);
          v543 = (int64x2_t)vaddw_high_u32((uint64x2_t)v543, v561);
          v552 = (int64x2_t)vaddw_u32((uint64x2_t)v552, *(uint32x2_t *)v560.i8);
          v544 = (int64x2_t)vaddw_u32((uint64x2_t)v544, *(uint32x2_t *)v561.i8);
          v553 = (int64x2_t)vaddw_high_u32((uint64x2_t)v553, v560);
          v546 += 16;
          v547 += 16;
          v545 += 16;
        }
        while (v545);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v544, v550), vaddq_s64(v548, v552)), vaddq_s64(vaddq_s64(v543, v551), vaddq_s64(v549, v553))));
        if (!v644)
          goto LABEL_258;
        if (v644 < 8)
        {
          v541 = v542 + v96;
LABEL_256:
          v572 = v87 - v541;
          v573 = v652 + v541;
          v574 = v653 + v541;
          do
          {
            v11 += (*(unsigned __int8 *)(a1 + v574) - *(unsigned __int8 *)(a3 + v573))
                 * (*(unsigned __int8 *)(a1 + v574) - *(unsigned __int8 *)(a3 + v573));
            ++v573;
            ++v574;
            --v572;
          }
          while (v572);
          goto LABEL_258;
        }
      }
      else
      {
        v542 = 0;
      }
      v541 = v87 - v102;
      v562 = 0uLL;
      v563 = (int64x2_t)(unint64_t)v11;
      v564 = v167 + v542 + v91;
      v565 = v653 + v542 + v91;
      v566 = v652 + v542 + v91;
      v567 = 0uLL;
      v568 = 0uLL;
      do
      {
        v569 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v565), *(uint8x8_t *)(a3 + v566));
        v570 = (uint32x4_t)vmull_high_s16(v569, v569);
        v571 = (uint32x4_t)vmull_s16(*(int16x4_t *)v569.i8, *(int16x4_t *)v569.i8);
        v568 = (int64x2_t)vaddw_high_u32((uint64x2_t)v568, v570);
        v567 = (int64x2_t)vaddw_u32((uint64x2_t)v567, *(uint32x2_t *)v570.i8);
        v562 = (int64x2_t)vaddw_high_u32((uint64x2_t)v562, v571);
        v563 = (int64x2_t)vaddw_u32((uint64x2_t)v563, *(uint32x2_t *)v571.i8);
        v565 += 8;
        v566 += 8;
        v564 += 8;
      }
      while (v564);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v563, v567), vaddq_s64(v562, v568)));
      if (v102)
        goto LABEL_256;
LABEL_258:
      if (v98 >= 8)
      {
        if (v98 < 0x10)
        {
          v576 = 0;
LABEL_267:
          v575 = v87 - v102;
          v596 = 0uLL;
          v597 = (int64x2_t)(unint64_t)v11;
          v598 = v167 + v576 + v91;
          v599 = v651 + v576 + v91;
          v600 = v650 + v576 + v91;
          v601 = 0uLL;
          v602 = 0uLL;
          do
          {
            v603 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v599), *(uint8x8_t *)(a3 + v600));
            v604 = (uint32x4_t)vmull_high_s16(v603, v603);
            v605 = (uint32x4_t)vmull_s16(*(int16x4_t *)v603.i8, *(int16x4_t *)v603.i8);
            v602 = (int64x2_t)vaddw_high_u32((uint64x2_t)v602, v604);
            v601 = (int64x2_t)vaddw_u32((uint64x2_t)v601, *(uint32x2_t *)v604.i8);
            v596 = (int64x2_t)vaddw_high_u32((uint64x2_t)v596, v605);
            v597 = (int64x2_t)vaddw_u32((uint64x2_t)v597, *(uint32x2_t *)v605.i8);
            v599 += 8;
            v600 += 8;
            v598 += 8;
          }
          while (v598);
          v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v597, v601), vaddq_s64(v596, v602)));
          if (!v102)
            goto LABEL_272;
          goto LABEL_270;
        }
        v576 = v98 - v644;
        v577 = 0uLL;
        v578 = (int64x2_t)(unint64_t)v11;
        v579 = v166 + v91;
        v580 = v651 + v91;
        v581 = v650 + v91;
        v582 = 0uLL;
        v583 = 0uLL;
        v584 = 0uLL;
        v585 = 0uLL;
        v586 = 0uLL;
        v587 = 0uLL;
        do
        {
          v588 = *(uint8x16_t *)(a1 + v580);
          v589 = *(uint8x16_t *)(a3 + v581);
          v590 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v588.i8, *(uint8x8_t *)v589.i8);
          v591 = (int16x8_t)vsubl_high_u8(v588, v589);
          v592 = (uint32x4_t)vmull_s16(*(int16x4_t *)v591.i8, *(int16x4_t *)v591.i8);
          v593 = (uint32x4_t)vmull_high_s16(v590, v590);
          v594 = (uint32x4_t)vmull_high_s16(v591, v591);
          v595 = (uint32x4_t)vmull_s16(*(int16x4_t *)v590.i8, *(int16x4_t *)v590.i8);
          v583 = (int64x2_t)vaddw_high_u32((uint64x2_t)v583, v593);
          v585 = (int64x2_t)vaddw_high_u32((uint64x2_t)v585, v592);
          v584 = (int64x2_t)vaddw_u32((uint64x2_t)v584, *(uint32x2_t *)v592.i8);
          v582 = (int64x2_t)vaddw_u32((uint64x2_t)v582, *(uint32x2_t *)v593.i8);
          v577 = (int64x2_t)vaddw_high_u32((uint64x2_t)v577, v595);
          v586 = (int64x2_t)vaddw_u32((uint64x2_t)v586, *(uint32x2_t *)v594.i8);
          v578 = (int64x2_t)vaddw_u32((uint64x2_t)v578, *(uint32x2_t *)v595.i8);
          v587 = (int64x2_t)vaddw_high_u32((uint64x2_t)v587, v594);
          v580 += 16;
          v581 += 16;
          v579 += 16;
        }
        while (v579);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v578, v584), vaddq_s64(v582, v586)), vaddq_s64(vaddq_s64(v577, v585), vaddq_s64(v583, v587))));
        if (!v644)
          goto LABEL_272;
        if (v644 >= 8)
          goto LABEL_267;
        v575 = v576 + v96;
      }
      else
      {
        v575 = v96;
      }
LABEL_270:
      v606 = v87 - v575;
      v607 = v650 + v575;
      v608 = v651 + v575;
      do
      {
        v11 += (*(unsigned __int8 *)(a1 + v608) - *(unsigned __int8 *)(a3 + v607))
             * (*(unsigned __int8 *)(a1 + v608) - *(unsigned __int8 *)(a3 + v607));
        ++v607;
        ++v608;
        --v606;
      }
      while (v606);
LABEL_272:
      if (v98 < 8)
        goto LABEL_273;
      if (v98 < 0x10)
      {
        v609 = 0;
        goto LABEL_281;
      }
      v609 = v98 - v644;
      v610 = 0uLL;
      v611 = (int64x2_t)(unint64_t)v11;
      v612 = v166 + v91;
      v613 = v649 + v91;
      v614 = v648 + v91;
      v615 = 0uLL;
      v616 = 0uLL;
      v617 = 0uLL;
      v618 = 0uLL;
      v619 = 0uLL;
      v620 = 0uLL;
      do
      {
        v621 = *(uint8x16_t *)(a1 + v613);
        v622 = *(uint8x16_t *)(a3 + v614);
        v623 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v621.i8, *(uint8x8_t *)v622.i8);
        v624 = (int16x8_t)vsubl_high_u8(v621, v622);
        v625 = (uint32x4_t)vmull_s16(*(int16x4_t *)v624.i8, *(int16x4_t *)v624.i8);
        v626 = (uint32x4_t)vmull_high_s16(v623, v623);
        v627 = (uint32x4_t)vmull_high_s16(v624, v624);
        v628 = (uint32x4_t)vmull_s16(*(int16x4_t *)v623.i8, *(int16x4_t *)v623.i8);
        v616 = (int64x2_t)vaddw_high_u32((uint64x2_t)v616, v626);
        v618 = (int64x2_t)vaddw_high_u32((uint64x2_t)v618, v625);
        v617 = (int64x2_t)vaddw_u32((uint64x2_t)v617, *(uint32x2_t *)v625.i8);
        v615 = (int64x2_t)vaddw_u32((uint64x2_t)v615, *(uint32x2_t *)v626.i8);
        v610 = (int64x2_t)vaddw_high_u32((uint64x2_t)v610, v628);
        v619 = (int64x2_t)vaddw_u32((uint64x2_t)v619, *(uint32x2_t *)v627.i8);
        v611 = (int64x2_t)vaddw_u32((uint64x2_t)v611, *(uint32x2_t *)v628.i8);
        v620 = (int64x2_t)vaddw_high_u32((uint64x2_t)v620, v627);
        v613 += 16;
        v614 += 16;
        v612 += 16;
      }
      while (v612);
      v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v611, v617), vaddq_s64(v615, v619)), vaddq_s64(vaddq_s64(v610, v618), vaddq_s64(v616, v620))));
      if (v644)
      {
        if (v644 >= 8)
        {
LABEL_281:
          v96 = v87 - v102;
          v629 = 0uLL;
          v630 = (int64x2_t)(unint64_t)v11;
          v631 = v167 + v609 + v91;
          v632 = v649 + v609 + v91;
          v633 = v648 + v609 + v91;
          v634 = 0uLL;
          v635 = 0uLL;
          do
          {
            v636 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v632), *(uint8x8_t *)(a3 + v633));
            v637 = (uint32x4_t)vmull_high_s16(v636, v636);
            v638 = (uint32x4_t)vmull_s16(*(int16x4_t *)v636.i8, *(int16x4_t *)v636.i8);
            v635 = (int64x2_t)vaddw_high_u32((uint64x2_t)v635, v637);
            v634 = (int64x2_t)vaddw_u32((uint64x2_t)v634, *(uint32x2_t *)v637.i8);
            v629 = (int64x2_t)vaddw_high_u32((uint64x2_t)v629, v638);
            v630 = (int64x2_t)vaddw_u32((uint64x2_t)v630, *(uint32x2_t *)v638.i8);
            v632 += 8;
            v633 += 8;
            v631 += 8;
          }
          while (v631);
          v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v630, v634), vaddq_s64(v629, v635)));
          v10 = v681;
          if (!v102)
            goto LABEL_59;
        }
        else
        {
          v96 += v609;
LABEL_273:
          v10 = v681;
        }
        v639 = v87 - v96;
        v640 = v648 + v96;
        v641 = v649 + v96;
        do
        {
          v11 += (*(unsigned __int8 *)(a1 + v641) - *(unsigned __int8 *)(a3 + v640))
               * (*(unsigned __int8 *)(a1 + v641) - *(unsigned __int8 *)(a3 + v640));
          ++v640;
          ++v641;
          --v639;
        }
        while (v639);
        goto LABEL_59;
      }
      v10 = v681;
LABEL_59:
      a1 += v678;
      a3 += v677;
      v88 = v10 + 16;
      if (v10 + 16 > a6)
        goto LABEL_40;
    }
  }
  if (!(_DWORD)a5)
    return 0;
  v11 = 0;
  v680 = a6 & 0xFFFFFFF0;
  for (i = 16; i <= v679; i += 16)
  {
    v13 = 0;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v13) - *(unsigned __int8 *)(a3 + v13))
           * (*(unsigned __int8 *)(a1 + v13) - *(unsigned __int8 *)(a3 + v13));
      ++v13;
    }
    while (v6 != v13);
    v14 = (int)a4;
    v15 = (int)a2;
    v16 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v15) - *(unsigned __int8 *)(a3 + v14))
           * (*(unsigned __int8 *)(a1 + v15) - *(unsigned __int8 *)(a3 + v14));
      ++v14;
      ++v15;
      --v16;
    }
    while (v16);
    v17 = 2 * (int)a2;
    v18 = 2 * (int)a4;
    v19 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v17) - *(unsigned __int8 *)(a3 + v18))
           * (*(unsigned __int8 *)(a1 + v17) - *(unsigned __int8 *)(a3 + v18));
      ++v18;
      ++v17;
      --v19;
    }
    while (v19);
    v20 = 3 * (int)a2;
    v21 = 3 * (int)a4;
    v22 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v20) - *(unsigned __int8 *)(a3 + v21))
           * (*(unsigned __int8 *)(a1 + v20) - *(unsigned __int8 *)(a3 + v21));
      ++v21;
      ++v20;
      --v22;
    }
    while (v22);
    v24 = 4 * (int)a2;
    v23 = 4 * (int)a4;
    v25 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v24) - *(unsigned __int8 *)(a3 + v23))
           * (*(unsigned __int8 *)(a1 + v24) - *(unsigned __int8 *)(a3 + v23));
      ++v23;
      ++v24;
      --v25;
    }
    while (v25);
    v27 = 5 * (int)a2;
    v26 = 5 * (int)a4;
    v28 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v27) - *(unsigned __int8 *)(a3 + v26))
           * (*(unsigned __int8 *)(a1 + v27) - *(unsigned __int8 *)(a3 + v26));
      ++v26;
      ++v27;
      --v28;
    }
    while (v28);
    v30 = 6 * (int)a2;
    v29 = 6 * (int)a4;
    v31 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v30) - *(unsigned __int8 *)(a3 + v29))
           * (*(unsigned __int8 *)(a1 + v30) - *(unsigned __int8 *)(a3 + v29));
      ++v29;
      ++v30;
      --v31;
    }
    while (v31);
    v32 = 7 * (int)a2;
    v33 = 7 * (int)a4;
    v34 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v32) - *(unsigned __int8 *)(a3 + v33))
           * (*(unsigned __int8 *)(a1 + v32) - *(unsigned __int8 *)(a3 + v33));
      ++v33;
      ++v32;
      --v34;
    }
    while (v34);
    v35 = 8 * (int)a2;
    v36 = 8 * (int)a4;
    v37 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v35) - *(unsigned __int8 *)(a3 + v36))
           * (*(unsigned __int8 *)(a1 + v35) - *(unsigned __int8 *)(a3 + v36));
      ++v36;
      ++v35;
      --v37;
    }
    while (v37);
    v39 = 9 * (int)a2;
    v38 = 9 * (int)a4;
    v40 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v39) - *(unsigned __int8 *)(a3 + v38))
           * (*(unsigned __int8 *)(a1 + v39) - *(unsigned __int8 *)(a3 + v38));
      ++v38;
      ++v39;
      --v40;
    }
    while (v40);
    v41 = 10 * (int)a2;
    v42 = 10 * (int)a4;
    v43 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v41) - *(unsigned __int8 *)(a3 + v42))
           * (*(unsigned __int8 *)(a1 + v41) - *(unsigned __int8 *)(a3 + v42));
      ++v42;
      ++v41;
      --v43;
    }
    while (v43);
    v44 = 11 * (int)a2;
    v45 = 11 * (int)a4;
    v46 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v44) - *(unsigned __int8 *)(a3 + v45))
           * (*(unsigned __int8 *)(a1 + v44) - *(unsigned __int8 *)(a3 + v45));
      ++v45;
      ++v44;
      --v46;
    }
    while (v46);
    v47 = 12 * (int)a2;
    v48 = 12 * (int)a4;
    v49 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v47) - *(unsigned __int8 *)(a3 + v48))
           * (*(unsigned __int8 *)(a1 + v47) - *(unsigned __int8 *)(a3 + v48));
      ++v48;
      ++v47;
      --v49;
    }
    while (v49);
    v50 = 13 * (int)a2;
    v51 = 13 * (int)a4;
    v52 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v50) - *(unsigned __int8 *)(a3 + v51))
           * (*(unsigned __int8 *)(a1 + v50) - *(unsigned __int8 *)(a3 + v51));
      ++v51;
      ++v50;
      --v52;
    }
    while (v52);
    v53 = 14 * (int)a2;
    v54 = 14 * (int)a4;
    v55 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v53) - *(unsigned __int8 *)(a3 + v54))
           * (*(unsigned __int8 *)(a1 + v53) - *(unsigned __int8 *)(a3 + v54));
      ++v54;
      ++v53;
      --v55;
    }
    while (v55);
    v56 = 15 * (int)a2;
    v57 = 15 * (int)a4;
    v58 = v6;
    do
    {
      v11 += (*(unsigned __int8 *)(a1 + v56) - *(unsigned __int8 *)(a3 + v57))
           * (*(unsigned __int8 *)(a1 + v56) - *(unsigned __int8 *)(a3 + v57));
      ++v57;
      ++v56;
      --v58;
    }
    while (v58);
    a1 += v678;
    a3 += v677;
    a6 = v679;
  }
  v10 = v680;
LABEL_40:
  if (v10 < a6 && (_DWORD)v6)
  {
    v59 = v6 & 0xFFFFFFF0;
    v60 = v6 & 0xFFFFFFF8;
    do
    {
      if (v6 >= 8)
      {
        if (v6 < 0x10)
        {
          v62 = 0;
LABEL_52:
          v80 = 0uLL;
          v81 = (int64x2_t)(unint64_t)v11;
          v82 = 0uLL;
          v83 = 0uLL;
          do
          {
            v84 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(a1 + v62), *(uint8x8_t *)(a3 + v62));
            v85 = (uint32x4_t)vmull_high_s16(v84, v84);
            v86 = (uint32x4_t)vmull_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v84.i8);
            v83 = (int64x2_t)vaddw_high_u32((uint64x2_t)v83, v85);
            v82 = (int64x2_t)vaddw_u32((uint64x2_t)v82, *(uint32x2_t *)v85.i8);
            v80 = (int64x2_t)vaddw_high_u32((uint64x2_t)v80, v86);
            v81 = (int64x2_t)vaddw_u32((uint64x2_t)v81, *(uint32x2_t *)v86.i8);
            v62 += 8;
          }
          while (v60 != v62);
          v11 = vaddvq_s64(vaddq_s64(vaddq_s64(v81, v82), vaddq_s64(v80, v83)));
          v61 = v6 & 0xFFFFFFF8;
          if (v60 == v6)
            goto LABEL_43;
          goto LABEL_55;
        }
        v63 = 0;
        v64 = 0uLL;
        v65 = (int64x2_t)(unint64_t)v11;
        v66 = 0uLL;
        v67 = 0uLL;
        v68 = 0uLL;
        v69 = 0uLL;
        v70 = 0uLL;
        v71 = 0uLL;
        do
        {
          v72 = *(uint8x16_t *)(a1 + v63);
          v73 = *(uint8x16_t *)(a3 + v63);
          v74 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v72.i8, *(uint8x8_t *)v73.i8);
          v75 = (int16x8_t)vsubl_high_u8(v72, v73);
          v76 = (uint32x4_t)vmull_s16(*(int16x4_t *)v75.i8, *(int16x4_t *)v75.i8);
          v77 = (uint32x4_t)vmull_high_s16(v74, v74);
          v78 = (uint32x4_t)vmull_high_s16(v75, v75);
          v79 = (uint32x4_t)vmull_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v74.i8);
          v67 = (int64x2_t)vaddw_high_u32((uint64x2_t)v67, v77);
          v69 = (int64x2_t)vaddw_high_u32((uint64x2_t)v69, v76);
          v68 = (int64x2_t)vaddw_u32((uint64x2_t)v68, *(uint32x2_t *)v76.i8);
          v66 = (int64x2_t)vaddw_u32((uint64x2_t)v66, *(uint32x2_t *)v77.i8);
          v64 = (int64x2_t)vaddw_high_u32((uint64x2_t)v64, v79);
          v70 = (int64x2_t)vaddw_u32((uint64x2_t)v70, *(uint32x2_t *)v78.i8);
          v65 = (int64x2_t)vaddw_u32((uint64x2_t)v65, *(uint32x2_t *)v79.i8);
          v71 = (int64x2_t)vaddw_high_u32((uint64x2_t)v71, v78);
          v63 += 16;
        }
        while (v59 != v63);
        v11 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v65, v68), vaddq_s64(v66, v70)), vaddq_s64(vaddq_s64(v64, v69), vaddq_s64(v67, v71))));
        if (v59 == v6)
          goto LABEL_43;
        v62 = v6 & 0xFFFFFFF0;
        v61 = v62;
        if ((v6 & 8) != 0)
          goto LABEL_52;
      }
      else
      {
        v61 = 0;
      }
      do
      {
LABEL_55:
        v11 += (*(unsigned __int8 *)(a1 + v61) - *(unsigned __int8 *)(a3 + v61))
             * (*(unsigned __int8 *)(a1 + v61) - *(unsigned __int8 *)(a3 + v61));
        ++v61;
      }
      while (v6 != v61);
LABEL_43:
      a1 += (int)v8;
      a3 += (int)a4;
      ++v10;
    }
    while (v10 != a6);
  }
  return v11;
}

uint64_t vp8dx_set_reference(_DWORD *a1, int a2, int *a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int v8;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = a1 + 1096;
  switch(a2)
  {
    case 4:
      v4 = 1727;
      break;
    case 2:
      v4 = 1726;
      break;
    case 1:
      v4 = 1725;
      break;
    default:
      vpx_internal_error((uint64_t)(a1 + 1096), 1, "Invalid reference frame");
      return *v3;
  }
  v5 = &a1[v4];
  v6 = *v5;
  if (a1[40 * *v5 + 1561] != a3[1]
    || a1[40 * v6 + 1560] != *a3
    || a1[40 * v6 + 1566] != a3[6]
    || a1[40 * v6 + 1565] != a3[5])
  {
    vpx_internal_error((uint64_t)(a1 + 1096), 1, "Incorrect buffer dimensions");
    return *v3;
  }
  v7 = a1 + 1720;
  v8 = a1[1720];
  if (v8)
  {
    if (a1[1721])
    {
      if (a1[1722])
      {
        if (a1[1723])
          v8 = 4;
        else
          v8 = 3;
      }
      else
      {
        v8 = 2;
      }
    }
    else
    {
      v8 = 1;
    }
  }
  a1[v8 + 1720] = 0;
  v10 = (int)*v5;
  v11 = v7[v10];
  v12 = __OFSUB__(v11, 1);
  v13 = v11 - 1;
  if (v13 < 0 == v12)
    v7[v10] = v13;
  *v5 = v8;
  ++v7[v8];
  vp8_yv12_copy_frame_c(a3, (uint64_t)&a1[40 * *v5 + 1560]);
  return *v3;
}

uint64_t vp8dx_receive_compressed_data(uint64_t a1)
{
  unsigned int v2;
  uint64_t result;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;

  *(_DWORD *)(a1 + 4384) = 0;
  if (!*(_DWORD *)(a1 + 10976) && *(_DWORD *)(a1 + 10716) <= 1u && !*(_DWORD *)(a1 + 10792))
  {
    v39 = *(int *)(a1 + 6900);
    v40 = a1 + 4 * v39;
    v41 = *(_DWORD *)(v40 + 6880);
    if (v41 >= 2)
    {
      *(_DWORD *)(v40 + 6880) = v41 - 1;
      v42 = *(_DWORD *)(a1 + 6880);
      if (v42)
      {
        if (*(_DWORD *)(a1 + 6884))
        {
          if (*(_DWORD *)(a1 + 6888))
          {
            if (*(_DWORD *)(a1 + 6892))
              v42 = 4;
            else
              v42 = 3;
          }
          else
          {
            v42 = 2;
          }
        }
        else
        {
          v42 = 1;
        }
      }
      *(_DWORD *)(a1 + 4 * v42 + 6880) = 1;
      *(_DWORD *)(a1 + 6900) = v42;
      vp8_yv12_copy_frame_c((int *)(a1 + 6240 + 160 * (int)v39), a1 + 6240 + 160 * v42);
      LODWORD(v39) = *(_DWORD *)(a1 + 6900);
    }
    result = 0;
    *(_DWORD *)(a1 + 160 * (int)v39 + 6388) = 1;
    *(_DWORD *)(a1 + 7416) = 0;
    return result;
  }
  v2 = *(_DWORD *)(a1 + 6880);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 6884))
    {
      if (*(_DWORD *)(a1 + 6888))
      {
        if (*(_DWORD *)(a1 + 6892))
          v2 = 4;
        else
          v2 = 3;
      }
      else
      {
        v2 = 2;
      }
    }
    else
    {
      v2 = 1;
    }
  }
  *(_DWORD *)(a1 + 4 * v2 + 6880) = 1;
  *(_DWORD *)(a1 + 6896) = v2;
  *(_QWORD *)(a1 + 4352) = a1 + 6240 + 160 * v2;
  *(_QWORD *)(a1 + 4360) = a1 + 6240 + 160 * *(int *)(a1 + 6900);
  *(_QWORD *)(a1 + 4368) = a1 + 6240 + 160 * *(int *)(a1 + 6904);
  *(_QWORD *)(a1 + 4376) = a1 + 6240 + 160 * *(int *)(a1 + 6908);
  result = vp8_decode_frame(a1);
  if ((result & 0x80000000) != 0)
  {
    v13 = a1 + 4 * *(int *)(a1 + 6896);
    v14 = *(_DWORD *)(v13 + 6880);
    v11 = __OFSUB__(v14, 1);
    v15 = v14 - 1;
    if (v15 < 0 == v11)
      *(_DWORD *)(v13 + 6880) = v15;
    *(_DWORD *)(a1 + 4384) = 1;
    v16 = *(_DWORD *)(a1 + 4068);
    if (v16)
    {
      *(_DWORD *)(a1 + 4384) = v16;
      *(_OWORD *)(a1 + 4408) = *(_OWORD *)(a1 + 4092);
      *(_OWORD *)(a1 + 4424) = *(_OWORD *)(a1 + 4108);
      *(_OWORD *)(a1 + 4440) = *(_OWORD *)(a1 + 4124);
      *(_OWORD *)(a1 + 4456) = *(_OWORD *)(a1 + 4140);
      *(_OWORD *)(a1 + 4392) = *(_OWORD *)(a1 + 4076);
    }
    return result;
  }
  v4 = a1 + 6880;
  v5 = (int *)(a1 + 6900);
  v6 = (int *)(a1 + 6908);
  v7 = *(_DWORD *)(a1 + 7936);
  if (v7)
  {
    if (v7 == 2)
    {
      v7 = 0;
      v8 = *(_DWORD *)(a1 + 6904);
      v9 = *v6;
      v17 = *(_DWORD *)(v4 + 4 * v9);
      v11 = __OFSUB__(v17, 1);
      v12 = v17 - 1;
      if (v12 < 0 != v11)
        goto LABEL_29;
    }
    else if (v7 == 1)
    {
      v7 = 0;
      v8 = *v5;
      v9 = *v6;
      v10 = *(_DWORD *)(v4 + 4 * v9);
      v11 = __OFSUB__(v10, 1);
      v12 = v10 - 1;
      if (v12 < 0 != v11)
        goto LABEL_29;
    }
    else
    {
      v8 = 0;
      v7 = -1;
      v9 = *v6;
      v18 = *(_DWORD *)(v4 + 4 * v9);
      v11 = __OFSUB__(v18, 1);
      v12 = v18 - 1;
      if (v12 < 0 != v11)
      {
LABEL_29:
        *v6 = v8;
        ++*(_DWORD *)(v4 + 4 * v8);
        goto LABEL_30;
      }
    }
    *(_DWORD *)(v4 + 4 * v9) = v12;
    goto LABEL_29;
  }
LABEL_30:
  v19 = *(_DWORD *)(a1 + 7932);
  if (v19)
  {
    v20 = (int *)(a1 + 6900);
    if (v19 != 1)
    {
      if (v19 != 2)
      {
        v21 = 0;
        v7 = -1;
        v22 = *(int *)(a1 + 6904);
        v38 = *(_DWORD *)(v4 + 4 * v22);
        v11 = __OFSUB__(v38, 1);
        v24 = v38 - 1;
        if (v24 < 0 != v11)
          goto LABEL_36;
        goto LABEL_35;
      }
      v20 = (int *)(a1 + 6908);
    }
    v21 = *v20;
    v22 = *(int *)(a1 + 6904);
    v23 = *(_DWORD *)(v4 + 4 * v22);
    v11 = __OFSUB__(v23, 1);
    v24 = v23 - 1;
    if (v24 < 0 != v11)
    {
LABEL_36:
      *(_DWORD *)(a1 + 6904) = v21;
      ++*(_DWORD *)(v4 + 4 * v21);
      goto LABEL_37;
    }
LABEL_35:
    *(_DWORD *)(v4 + 4 * v22) = v24;
    goto LABEL_36;
  }
LABEL_37:
  if (*(_DWORD *)(a1 + 7924))
  {
    v25 = *(_DWORD *)(a1 + 6896);
    v26 = *(int *)(a1 + 6904);
    v27 = *(_DWORD *)(v4 + 4 * v26);
    v11 = __OFSUB__(v27, 1);
    v28 = v27 - 1;
    if (v28 < 0 == v11)
      *(_DWORD *)(v4 + 4 * v26) = v28;
    *(_DWORD *)(a1 + 6904) = v25;
    ++*(_DWORD *)(v4 + 4 * v25);
  }
  if (*(_DWORD *)(a1 + 7928))
  {
    v29 = *(_DWORD *)(a1 + 6896);
    v30 = *(int *)(a1 + 6908);
    v31 = *(_DWORD *)(v4 + 4 * v30);
    v11 = __OFSUB__(v31, 1);
    v32 = v31 - 1;
    if (v32 < 0 == v11)
      *(_DWORD *)(v4 + 4 * v30) = v32;
    *v6 = v29;
    ++*(_DWORD *)(v4 + 4 * v29);
  }
  v33 = *(_DWORD *)(a1 + 6896);
  if (*(_DWORD *)(a1 + 7920))
  {
    v34 = *v5;
    v35 = *(_DWORD *)(v4 + 4 * v34);
    v11 = __OFSUB__(v35, 1);
    v36 = v35 - 1;
    if (v36 < 0 == v11)
      *(_DWORD *)(v4 + 4 * v34) = v36;
    *(_DWORD *)(a1 + 6900) = v33;
    ++*(_DWORD *)(v4 + 4 * v33);
    *(_QWORD *)(a1 + 6232) = a1 + 160 * *(int *)(a1 + 6900) + 6240;
    v37 = a1 + 4 * *(int *)(a1 + 6896);
    --*(_DWORD *)(v37 + 6880);
    if (v7)
      goto LABEL_49;
  }
  else
  {
    *(_QWORD *)(a1 + 6232) = a1 + 160 * v33 + 6240;
    --*(_DWORD *)(a1 + 4 * v33 + 6880);
    if (v7)
    {
LABEL_49:
      *(_DWORD *)(a1 + 4384) = 1;
      return result;
    }
  }
  if (*(_DWORD *)(a1 + 7416))
  {
    ++*(_DWORD *)(a1 + 10204);
    *(_QWORD *)(a1 + 7496) = *(_QWORD *)(a1 + 7488);
  }
  *(_DWORD *)(a1 + 10964) = 0;
  return result;
}

uint64_t vp8_create_decoder_instances(_OWORD *a1, uint64_t a2)
{
  int *decompressor;
  int v5;
  uint64_t v6;
  uint64_t v7;

  decompressor = (int *)create_decompressor();
  *(_QWORD *)a1 = decompressor;
  if (!decompressor)
    return 1;
  v5 = setjmp(decompressor + 1119);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1;
  if (v5)
  {
    *(_DWORD *)(v7 + 4472) = 0;
    vp8_decoder_remove_threads(v7);
    vp8_de_alloc_frame_buffers(v6 + 4384);
    free(*(void **)(v7 - 8));
    a1[14] = 0u;
    a1[15] = 0u;
    a1[12] = 0u;
    a1[13] = 0u;
    a1[10] = 0u;
    a1[11] = 0u;
    a1[8] = 0u;
    a1[9] = 0u;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
    return 1;
  }
  *(_DWORD *)(v7 + 4472) = 1;
  *(_DWORD *)(v7 + 10836) = *(_DWORD *)(a2 + 16);
  vp8_decoder_create_threads(v7);
  *(_DWORD *)(*(_QWORD *)a1 + 4472) = 0;
  return 0;
}

void *create_decompressor()
{
  void *result;
  unint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  result = malloc_type_malloc(0x2B37uLL, 0x74AD08B5uLL);
  if (result)
  {
    v1 = ((unint64_t)result + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v1 - 8) = result;
    if (v1)
    {
      bzero((void *)(((unint64_t)result + 39) & 0xFFFFFFFFFFFFFFE0), 0x2B10uLL);
      if (setjmp((int *)(v1 + 4476)))
      {
        *(_DWORD *)(v1 + 4472) = 0;
        vp8_de_alloc_frame_buffers(v1 + 4384);
        free(*(void **)(v1 - 8));
        return 0;
      }
      else
      {
        *(_DWORD *)(v1 + 4472) = 1;
        *(_DWORD *)(v1 + 9099) = 629954160;
        *(_WORD *)(v1 + 9103) = vp8_uv_mode_prob;
        *(_BYTE *)(v1 + 9105) = -52;
        *(_WORD *)(v1 + 9106) = sub_mv_ref_prob;
        *(_BYTE *)(v1 + 9108) = 25;
        *(_QWORD *)(v1 + 9090) = 0x6F505557854F5A78;
        *(_BYTE *)(v1 + 9098) = -105;
        v2 = *(_DWORD *)(v1 + 7460);
        v3 = *(_DWORD *)(v1 + 7464);
        v4 = *(_DWORD *)(v1 + 7472);
        v5 = *(_DWORD *)(v1 + 7468);
        v6 = *(_DWORD *)(v1 + 7476);
        *(_QWORD *)(v1 + 7932) = 0;
        v7 = v2;
        *(_QWORD *)(v1 + 10212) = 0x1000000000;
        *(_DWORD *)(v1 + 7504) = 0;
        *(_OWORD *)(v1 + 7944) = 0u;
        v8 = v3;
        v9 = v4;
        *(_DWORD *)(v1 + 6224) = 0;
        v10 = v5;
        *(_DWORD *)(v1 + 10204) = 0;
        *(_DWORD *)(v1 + 10964) = 1;
        v11 = v6;
        v12 = 4672;
        v13 = 0;
        *(_OWORD *)(v1 + 7440) = xmmword_208F08A40;
        do
        {
          v14 = ac_qlookup[v13];
          v15 = v13 + 1;
          v16 = (v7 + v13) & ~((v7 + (int)v13) >> 31);
          if (v16 >= 127)
            v16 = 127;
          v17 = (_WORD *)(v1 + v12);
          *(_WORD *)(v1 + v12) = dc_qlookup[v16];
          v18 = (v8 + v13) & ~((v8 + (int)v13) >> 31);
          if (v18 >= 127)
            v18 = 127;
          v17[256] = 2 * LOWORD(dc_qlookup[v18]);
          v19 = (v9 + v13) & ~((v9 + (int)v13) >> 31);
          if (v19 >= 127)
            v19 = 127;
          v20 = dc_qlookup[v19];
          if (v20 >= 132)
            LOWORD(v20) = 132;
          v17[512] = v20;
          v17[1] = v14;
          v21 = (v10 + v13) & ~((v10 + (int)v13) >> 31);
          if (v21 >= 127)
            v21 = 127;
          v22 = (101581 * ac_qlookup[v21]) >> 16;
          if (v22 <= 8)
            LOWORD(v22) = 8;
          v17[257] = v22;
          v23 = (v11 + v13) & ~((v11 + (int)v13) >> 31);
          if (v23 >= 127)
            v23 = 127;
          v17[513] = ac_qlookup[v23];
          v13 = v15;
          v12 += 4;
        }
        while (v15 != 128);
        vp8_loop_filter_init(v1 + 4384);
        *(_DWORD *)(v1 + 4472) = 0;
        *(_OWORD *)(v1 + 10972) = 0u;
        vp8_setup_block_dptrs((_QWORD *)v1);
        pthread_once(&once_lock_0, (void (*)(void))initialize_dec);
        return (void *)v1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t initialize_dec()
{
  uint64_t result;

  if (!initialize_dec_init_done)
  {
    pthread_once(&once_lock_7, (void (*)(void))setup_rtcd_internal_1);
    result = pthread_once(&once_lock_1, vp8_init_intra_predictors_internal);
    initialize_dec_init_done = 1;
  }
  return result;
}

uint64_t vp8_skip_fractional_mv_step(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4)
{
  int32x2_t v4;
  int32x2_t v5;

  v4.i32[0] = *a4;
  v4.i32[1] = a4[1];
  v5 = vmax_s32(vmin_s32(vshl_n_s32(v4, 3uLL), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
  *a4 = v5.i16[0];
  a4[1] = v5.i16[2];
  return 0;
}

uint64_t vp8_pick_inter_mode(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, _DWORD *a5, int *a6, int *a7, int a8, int a9)
{
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int *v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  uint64_t v51;
  int v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t result;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v67;
  int v68;
  BOOL v70;
  unsigned int v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unsigned int v87;
  int *v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int *v94;
  _QWORD *v95;
  uint64_t v96;
  int v97;
  int v98;
  BOOL v99;
  unsigned int v100;
  char v101;
  uint64_t v102;
  unsigned int v103;
  unsigned __int8 *v104;
  __int16 v105;
  int v106;
  BOOL v107;
  int v108;
  int v109;
  int v110;
  int v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  BOOL v122;
  int v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  _WORD *v137;
  int v138;
  int v139;
  int v140;
  int v141;
  _DWORD *v142;
  _DWORD *v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  _QWORD *v151;
  int *v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  __int16 *v160;
  int v161;
  int v162;
  int *v163;
  int v164;
  char v165;
  unsigned int *v166;
  unsigned int v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  int v174;
  int v175;
  int v176;
  int v177;
  unsigned int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  BOOL v185;
  int *v186;
  uint64_t v187;
  int v188;
  char v189;
  _BOOL4 v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  char *v194;
  int v195;
  unsigned __int8 *v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE *v203;
  uint64_t v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  uint64_t v211;
  _QWORD *v212;
  int v213;
  int v214;
  __int128 v215;
  int v216;
  int v217;
  uint64_t v218;
  int v220;
  int v221;
  int v222;
  unsigned int v223;
  _QWORD *v224;
  _DWORD *v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  unsigned int v230;
  int v231;
  int v232;
  unsigned int v234;
  _QWORD *v235;
  _QWORD *v236;
  unsigned int v237;
  unsigned int v238;
  uint64_t (**v239)(void);
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  unsigned __int8 v245;
  uint64_t v246;
  int *v247;
  uint64_t v248;
  uint64_t v249;
  int *v250;
  _DWORD *v251;
  int v252;
  int v253;
  uint64_t v254;
  int v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  unsigned __int8 *v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  int v265;
  unsigned int v266;
  int v267;
  int v268;
  uint64_t v269;
  __int16 v270;
  int v271;
  int v272;
  int v273;
  uint64_t v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281[2];
  _DWORD v282[4];
  _QWORD v283[10];
  _QWORD v284[4];

  v9 = a3;
  v10 = a2;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v284[1] = *MEMORY[0x24BDAC8D0];
  v284[0] = 0;
  v268 = 0;
  v14 = a1 + 142784;
  v266 = -1;
  v226 = *(_DWORD *)(a1 + 143016);
  v15 = (int *)(a1 + 110548);
  v281[0] = xmmword_208F3DF54;
  v281[1] = unk_208F3DF64;
  v264 = 0;
  v280 = 0u;
  v278 = 0u;
  v279 = 0u;
  v276 = 0u;
  v277 = 0u;
  v275 = 0u;
  v16 = *(_DWORD *)(a1 + 142876);
  if ((v16 & 1) != 0)
  {
    v21 = a1 + 160 * *v15 + 109888;
    v13 = (unsigned __int8 *)(*(_QWORD *)(a1 + 160 * *v15 + 109944) + a3);
    v12 = (unsigned __int8 *)(*(_QWORD *)(a1 + 160 * *v15 + 109952) + a4);
    *((_QWORD *)&v276 + 1) = v13;
    *(_QWORD *)&v277 = v12;
    v11 = (unsigned __int8 *)(*(_QWORD *)(v21 + 72) + a4);
    *((_QWORD *)&v277 + 1) = v11;
    if ((v16 & 2) == 0)
    {
LABEL_3:
      v231 = a9;
      if ((v16 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v16 & 2) == 0)
  {
    goto LABEL_3;
  }
  v22 = a1 + 160 * *(int *)(a1 + 110552) + 109888;
  v23 = *(_QWORD *)(a1 + 160 * *(int *)(a1 + 110552) + 109952) + a4;
  *(_QWORD *)&v278 = *(_QWORD *)(a1 + 160 * *(int *)(a1 + 110552) + 109944) + a3;
  *((_QWORD *)&v278 + 1) = v23;
  *(_QWORD *)&v279 = *(_QWORD *)(v22 + 72) + a4;
  v231 = a9;
  if ((v16 & 4) != 0)
  {
LABEL_4:
    v17 = a1 + 160 * *(int *)(a1 + 110556) + 109888;
    v18 = *(_QWORD *)(a1 + 160 * *(int *)(a1 + 110556) + 109952);
    *((_QWORD *)&v279 + 1) = *(_QWORD *)(a1 + 160 * *(int *)(a1 + 110556) + 109944) + a3;
    v19 = *(_QWORD *)(v17 + 72) + a4;
    *(_QWORD *)&v280 = v18 + a4;
    *((_QWORD *)&v280 + 1) = v19;
  }
LABEL_5:
  v250 = (int *)(a1 + 110548);
  v218 = a1 + 150844;
  v259 = a1 + 142784;
  v257 = a1 + 114736;
  v221 = a8;
  if ((v16 & 1) != 0)
  {
    v24 = (unsigned __int8 *)(**(_QWORD **)(a2 + 3344) + *(int *)(a2 + 3352));
    v25 = **(_QWORD **)(a2 + 3696);
    v26 = *(_DWORD *)(a2 + 3356);
    v27 = *(_DWORD *)(a1 + 114288);
    if (v27)
    {
      v28 = (unsigned __int8 *)(*(_QWORD *)(a1 + 148448) + (int)a3);
      v29 = *(_DWORD *)(a1 + 148408);
      if (v27 < 2)
      {
        v261 = (unsigned __int8 *)(v25 + *(int *)(a2 + 3704));
        v30 = v9;
      }
      else
      {
        v30 = v9;
        v24 = (unsigned __int8 *)(*(_QWORD *)(a1 + 148456) + (int)a4);
        v261 = (unsigned __int8 *)(*(_QWORD *)(a1 + 148464) + (int)a4);
        v26 = *(_DWORD *)(a1 + 148428);
      }
    }
    else
    {
      v261 = (unsigned __int8 *)(v25 + *(int *)(a2 + 3704));
      v30 = a3;
      v28 = *(unsigned __int8 **)(a2 + 4120);
      v29 = *(_DWORD *)(a2 + 4080);
    }
    v31 = a8;
    if (check_dot_artifact_candidate((_DWORD *)a1, a2, v28, v29, v13, a8, v231, 0))
    {
      v20 = 1;
      v14 = v259;
      a8 = v31;
      v9 = v30;
    }
    else
    {
      v20 = 1;
      v32 = check_dot_artifact_candidate((_DWORD *)a1, v10, v24, v26, v12, v31, v231, 1);
      v14 = v259;
      a8 = v31;
      v9 = v30;
      if (!v32)
      {
        v33 = check_dot_artifact_candidate((_DWORD *)a1, v10, v261, v26, v11, a8, v231, 2);
        a8 = v221;
        v20 = v33;
      }
    }
  }
  else
  {
    v20 = 0;
  }
  v269 = 0;
  v267 = 0;
  v265 = 0;
  v34 = v250[1043];
  if (!v34)
  {
    v41 = 0;
    LOWORD(v45) = 0;
    LOWORD(v44) = 0;
    v228 = 0;
    v42 = 0x7FFFFFFF;
    v35 = a1;
    *(_DWORD *)(v10 + 8808) = 0;
    if (v250[940])
      goto LABEL_47;
LABEL_46:
    *(_DWORD *)(v10 + 8808) = *(unsigned __int8 *)(*(_QWORD *)(v14 + 248) + v231 + v250[133] * (uint64_t)a8);
    goto LABEL_47;
  }
  v35 = a1;
  if (!*(_BYTE *)v218)
  {
    v41 = 0;
    LOWORD(v45) = 0;
    LOWORD(v44) = 0;
    v228 = 0;
    v34 = 0;
    v42 = 0x7FFFFFFF;
    *(_DWORD *)(v10 + 8808) = 0;
    if (v250[940])
      goto LABEL_47;
    goto LABEL_46;
  }
  v36 = *(_QWORD *)(*(_QWORD *)v257 + 56);
  v37 = v250[1045];
  v38 = v250[1044];
  v39 = (v37 * v231 / v38 + *(_DWORD *)(v14 + 8056) * (v37 * a8 / v38));
  v40 = (int *)(v36 + 16 * v39);
  v41 = v40[1];
  v228 = *v40;
  v42 = v40[3] >> (v34 == v250[1042] - 1);
  if (v41)
  {
    v43 = v36 + 16 * v39;
    v44 = v38 * *(__int16 *)(v43 + 8) / v37;
    v45 = v38 * *(__int16 *)(v43 + 10) / v37;
    v46 = *(_DWORD *)(v10 + 8228) - 128;
    if (v46 > (__int16)v45 || (v46 = *(_DWORD *)(v10 + 8232) + 128, v46 < (__int16)v45))
      LOWORD(v45) = v46;
    v47 = *(_DWORD *)(v10 + 8236) - 128;
    if (v47 > (__int16)v44 || (v47 = *(_DWORD *)(v10 + 8240) + 128, v47 < (__int16)v44))
      LOWORD(v44) = v47;
    if (v41 <= 2)
    {
      v48 = *(_DWORD *)(v14 + 92) & v41;
      goto LABEL_36;
    }
  }
  else
  {
    LOWORD(v44) = 0;
    LOWORD(v45) = 0;
  }
  v48 = 0;
LABEL_36:
  if (v41)
    v49 = v48 == 0;
  else
    v49 = 0;
  v34 = !v49 && v20 == 0;
  *(_DWORD *)(v10 + 8808) = 0;
  if (!v250[940])
    goto LABEL_46;
LABEL_47:
  v251 = (_DWORD *)(v10 + 30056);
  HIDWORD(v269) = 0;
  v247 = (int *)(v10 + 4224);
  memset(v283, 0, sizeof(v283));
  v270 = 0;
  v258 = v34;
  if (v41 && v34 && v42 <= 7)
  {
    v272 = -1;
    v273 = v41;
    v274 = -1;
    v51 = v257;
    goto LABEL_60;
  }
  v272 = 0;
  v52 = *(_DWORD *)(v14 + 92);
  v53 = 1;
  v51 = v257;
  if ((v52 & 1) == 0)
  {
    if ((v52 & 2) == 0)
      goto LABEL_53;
LABEL_56:
    *(&v272 + v53++) = 2;
    if ((v52 & 4) == 0)
      goto LABEL_59;
    goto LABEL_57;
  }
  v273 = 1;
  v53 = 2;
  if ((v52 & 2) != 0)
    goto LABEL_56;
LABEL_53:
  if ((v52 & 4) == 0)
    goto LABEL_59;
LABEL_57:
  *(&v272 + v53) = 3;
  if (v53 > 2)
    goto LABEL_60;
  ++v53;
LABEL_59:
  memset(&v272 + v53, 255, 4 * (3 - v53) + 4);
LABEL_60:
  v227 = v42;
  v223 = v41;
  v54 = v283;
  if (v273 < 1)
  {
    result = 0;
  }
  else
  {
    result = vp8_find_near_mvs_bias(v247, *(_QWORD *)(v10 + 8096), (uint64_t)v283, (uint64_t)v284, (uint64_t)v282, v273, v35 + 111592);
    v54 = &v283[5 * (int)result];
    v35 = a1;
    HIDWORD(v269) = *((_DWORD *)v284 + (int)result);
  }
  ++*v251;
  *a7 = 0x7FFFFFFF;
  *(_DWORD *)(v10 + 8768) = 0;
  v56 = *(_QWORD *)(v10 + 8096);
  *(_BYTE *)(v56 + 2) = 0;
  v57 = v258;
  if (*(int *)v14 > 11 || *(int *)(v14 + 240) < 41)
    goto LABEL_108;
  v58 = v56 - 76;
  if (!*(_BYTE *)(v56 - 74))
  {
    v62 = 0;
    v63 = v58 - 76 * *(int *)(v10 + 8104);
    if (!*(_BYTE *)(v63 + 2))
      goto LABEL_86;
    goto LABEL_77;
  }
  v59 = *(__int16 *)(v56 - 70);
  v60 = *(__int16 *)(v56 - 72);
  if (v60 < 0)
    v60 = -v60;
  if (v59 < 0)
    v59 = -v59;
  v62 = (unsigned __int16)v60 < 8u && (unsigned __int16)v59 < 8u;
  v63 = v58 - 76 * *(int *)(v10 + 8104);
  if (*(_BYTE *)(v63 + 2))
  {
LABEL_77:
    v64 = *(__int16 *)(v63 + 6);
    v65 = *(__int16 *)(v63 + 4);
    if (v65 < 0)
      v65 = -v65;
    if (v64 < 0)
      v64 = -v64;
    if ((unsigned __int16)v65 < 8u && (unsigned __int16)v64 < 8u)
      ++v62;
  }
LABEL_86:
  if (*(_BYTE *)(v63 + 78))
  {
    v67 = *(__int16 *)(v63 + 82);
    v68 = *(__int16 *)(v63 + 80);
    if (v68 < 0)
      v68 = -v68;
    if (v67 < 0)
      v67 = -v67;
    if ((unsigned __int16)v68 < 8u && (unsigned __int16)v67 < 8u)
      ++v62;
  }
  if (!*(_DWORD *)(v10 + 8236))
  {
    if (v62)
    {
      v71 = 80;
      goto LABEL_109;
    }
LABEL_108:
    v71 = 100;
    goto LABEL_109;
  }
  if (v62)
    v70 = *(_DWORD *)(v10 + 8228) == 0;
  else
    v70 = 0;
  v71 = 80;
  if (v70 || v62 > 2)
    goto LABEL_109;
  if (!v62)
    goto LABEL_108;
  v71 = 90;
LABEL_109:
  v72 = v10 + 7832;
  v224 = (_QWORD *)(v35 + 82408);
  v240 = v10 + 6368;
  v241 = v10 + 1864;
  v73 = v250;
  v222 = v9;
  if (v250[935])
    v71 = *(_DWORD *)(v14 + 6468) * v71 / 0x64;
  v253 = 0;
  v254 = 0;
  v246 = 0;
  v248 = 0;
  v245 = 0;
  v74 = 0;
  v216 = 0;
  v217 = v20;
  if (v20)
    v75 = 150;
  else
    v75 = v71;
  v220 = (unsigned __int16)v44 | ((unsigned __int16)v45 << 16);
  v211 = v35 + 111592;
  v213 = (__int16)v44 >> 3;
  v214 = (__int16)v45 >> 3;
  v210 = (__int16)v44;
  v208 = v75;
  v209 = (__int16)v45;
  v225 = (_DWORD *)(v10 + 6416);
  v239 = (uint64_t (**)(void))(v35 + 143616);
  v229 = v10 + 8680;
  v212 = (_QWORD *)(v10 + 8696);
  v242 = -1;
  v234 = -1;
  v252 = -1;
  v256 = 0x7FFFFFFF;
  v76 = 0x7FFFFFFFLL;
  v249 = v10 + 7832;
  v243 = v10;
  while (1)
  {
    v81 = 4 * v74;
    v82 = (_DWORD *)(v10 + 4 * v74 + 29976);
    if ((int)v76 <= *v82)
      goto LABEL_119;
    v83 = *(&v272 + vp8_ref_frame_order[v74]);
    if ((v83 & 0x80000000) != 0)
      goto LABEL_119;
    v84 = *(_QWORD *)(v10 + 8096);
    *(_BYTE *)(v84 + 2) = v83;
    if ((_BYTE)v83)
    {
      v85 = (char *)&v275 + 24 * v83;
      *(_OWORD *)v72 = *(_OWORD *)v85;
      *(_QWORD *)(v10 + 7848) = *((_QWORD *)v85 + 2);
      v86 = *(unsigned int *)(v35 + 4 * v83 + 111592);
      if ((_DWORD)result != (_DWORD)v86)
      {
        v54 = &v283[5 * (int)v86];
        HIDWORD(v269) = *((_DWORD *)v284 + (int)v86);
        result = v86;
      }
      if (v57)
      {
        v87 = vp8_mode_order[v74];
        if (v87 == 6)
        {
          if (!*((_DWORD *)v54 + 6))
            goto LABEL_119;
        }
        else if (v87 == 5)
        {
          if (!*((_DWORD *)v54 + 5))
            goto LABEL_119;
        }
        else if ((unint64_t)(v74 - 13) <= 2 && v228 == 7 && !HIDWORD(v269)
               || (unint64_t)(v74 - 13) <= 2 && !v227 && HIDWORD(v269) == v220)
        {
          goto LABEL_119;
        }
      }
    }
    v88 = (int *)(v10 + 4 * v74 + 30060);
    v89 = *v88;
    if (*v88)
    {
      v90 = *(_DWORD *)(v35 + 4 * v74 + 115184);
      if (v90 >= 2 && *v251 <= v90 * v89)
        goto LABEL_115;
    }
    *v88 = v89 + 1;
    v267 = 0;
    v91 = vp8_mode_order[v74];
    *(_WORD *)v84 = v91;
    v92 = *(unsigned __int8 *)(v84 + 2);
    v93 = *(_DWORD *)(v10 + 4 * v92 + 8600);
    if (!*(_DWORD *)(v51 + 236) || v73[982])
    {
      switch((int)v91)
      {
        case 0:
        case 1:
        case 2:
        case 3:
          v262 = v10 + 4 * v74 + 29976;
          v94 = v73;
          v95 = v54;
          v96 = result;
          v97 = *(_DWORD *)(v10 + 4 * v92 + 8600);
          vp8_build_intra_predictors_mby_s((uint64_t)v247, *(_QWORD *)(v10 + 7992) - *(int *)(v10 + 7952), (_BYTE *)(*(_QWORD *)(v10 + 7992) - 1), *(_DWORD *)(v10 + 7952), (uint64_t)v247, 16);
          v98 = vpx_variance16x16(**(_QWORD **)(v10 + 1936), *(unsigned int *)(v10 + 1948), v247, 16, &v266);
          v267 = v98;
          v93 = *(_DWORD *)(*(_QWORD *)(v10 + 8712)
                          + 40 * *(unsigned int *)(v10 + 8108)
                          + 4 * **(unsigned __int8 **)(v10 + 8096))
              + v97;
          v80 = (*(_DWORD *)(v10 + 8644) * v98 + ((v93 * *(_DWORD *)(v10 + 8648) + 128) >> 8));
          if ((int)v80 < v256)
          {
            *a7 = v98;
            v256 = v80;
          }
          result = v96;
          v57 = v258;
          v51 = v257;
          v72 = v249;
          v54 = v95;
          v35 = a1;
          v73 = v94;
          goto LABEL_141;
        case 4:
          v111 = *(_DWORD *)(v10 + 4 * v92 + 8600);
          v262 = v10 + 4 * v74 + 29976;
          v112 = v54;
          v113 = v51;
          v114 = result;
          v267 = v252;
          pick_intra4x4mby_modes(v10, &v268, &v267);
          v80 = 0x7FFFFFFFLL;
          if (v267 == 0x7FFFFFFF)
          {
            result = v114;
            v57 = v258;
            v51 = v113;
            v72 = v249;
            v73 = v250;
            v54 = v112;
            v35 = a1;
            v82 = (_DWORD *)(v10 + 4 * v74 + 29976);
            v93 = v111;
            goto LABEL_143;
          }
          v124 = v268 + v111;
          v125 = vpx_variance16x16(**(_QWORD **)(v10 + 1936), *(unsigned int *)(v10 + 1948), v247, 16, &v266);
          v93 = v124;
          v267 = v125;
          v80 = (*(_DWORD *)(v10 + 8644) * v125 + ((*(_DWORD *)(v10 + 8648) * v124 + 128) >> 8));
          if ((int)v80 < v256)
          {
            *a7 = v125;
            v256 = v80;
          }
          result = v114;
          v57 = v258;
          v51 = v113;
          v72 = v249;
          v73 = v250;
          v54 = v112;
          v35 = a1;
LABEL_141:
          v10 = v243;
          goto LABEL_142;
        case 5:
        case 6:
          goto LABEL_261;
        case 7:
          goto LABEL_262;
        case 8:
          v230 = *(_DWORD *)(v10 + 8636);
          v115 = SHIWORD(v269);
          v116 = SWORD2(v269);
          if (*(int *)v259 <= 7)
            v117 = 2;
          else
            v117 = 3;
          if (*(int *)v259 <= 5)
            v118 = 1;
          else
            v118 = v117;
          v119 = v226;
          if (v73[1043])
            v119 = 0;
          v271 = 0;
          v215 = *(_OWORD *)(v10 + 8752);
          v120 = *(_DWORD *)(v259 + 216);
          v121 = (v118 + v120);
          if (v57)
            v122 = v223 == (_DWORD)v83;
          else
            v122 = 0;
          v123 = v122;
          v226 = v119;
          v237 = result;
          v235 = v54;
          v263 = v10 + 4 * v74 + 29976;
          v232 = v93;
          if (v122)
          {
            v265 = v220;
            HIWORD(v271) = v214;
            LOWORD(v271) = v213;
            if (v227 > 32)
            {
              if (v227 > 0x80)
                v121 = (v121 + 1);
              else
                v121 = (v121 + 2);
              goto LABEL_221;
            }
            v121 = (v121 + 3);
            v73 = v250;
          }
          else if (v119)
          {
            v205 = SHIWORD(v269);
            v206 = SWORD2(v269);
            v207 = v123;
            if (!v216)
            {
              vp8_cal_sad(a1, (uint64_t)v247, v10, v222, v281);
              v84 = *(_QWORD *)(v10 + 8096);
            }
            vp8_mv_pred(a1, v247, v84, (uint64_t)&v265, *(unsigned __int8 *)(v84 + 2), v211, &v264, (int *)v281);
            v126 = v264;
            v127 = v264 + v118;
            v264 += v118;
            if (v126 <= v120)
              v121 = v121;
            else
              v121 = v127;
            HIWORD(v271) = SHIWORD(v265) >> 3;
            v216 = 1;
            result = v237;
            v54 = v235;
            v93 = v232;
            v116 = v206;
            v123 = v207;
            v115 = v205;
            LOWORD(v271) = (__int16)v265 >> 3;
            v73 = v250;
            if (!v258)
              goto LABEL_221;
          }
          else
          {
            v265 = HIDWORD(v269);
            HIWORD(v271) = SHIWORD(v269) >> 3;
            LOWORD(v271) = SWORD2(v269) >> 3;
            v73 = v250;
            if (!v57)
              goto LABEL_221;
          }
          if (v223 == (_DWORD)v83 && v227 <= 2)
          {
            v128 = SWORD2(v269) - v210;
            if (v128 < 0)
              v128 = v210 - SWORD2(v269);
            v129 = SHIWORD(v269) - v209;
            if (v129 < 0)
              v129 = v209 - SHIWORD(v269);
            if (v128 <= v129)
              v128 = v129;
            if (v128 <= 4)
            {
              v130 = v271;
              *v225 = v271;
              *((_DWORD *)v54 + 8) = v130;
              v35 = a1;
              goto LABEL_248;
            }
          }
LABEL_221:
          v131 = ((v115 + 7) >> 3) - 255;
          if (*(_DWORD *)(v10 + 8752) >= v131)
          {
            v132 = (v115 >> 3) + 255;
            if (*(_DWORD *)(v10 + 8756) <= v132)
            {
LABEL_223:
              v133 = ((v116 + 7) >> 3) - 255;
              if (*(_DWORD *)(v10 + 8760) < v133)
                goto LABEL_224;
              goto LABEL_239;
            }
          }
          else
          {
            *(_DWORD *)(v10 + 8752) = v131;
            v132 = (v115 >> 3) + 255;
            if (*(_DWORD *)(v10 + 8756) <= v132)
              goto LABEL_223;
          }
          *(_DWORD *)(v10 + 8756) = v132;
          v133 = ((v116 + 7) >> 3) - 255;
          if (*(_DWORD *)(v10 + 8760) < v133)
          {
LABEL_224:
            *(_DWORD *)(v10 + 8760) = v133;
            v134 = (v116 >> 3) + 255;
            if (*(_DWORD *)(v10 + 8764) <= v134)
              goto LABEL_225;
            goto LABEL_240;
          }
LABEL_239:
          v134 = (v116 >> 3) + 255;
          if (*(_DWORD *)(v10 + 8764) <= v134)
          {
LABEL_225:
            v135 = v259;
            if (*(int *)v259 > 7)
              goto LABEL_226;
            goto LABEL_241;
          }
LABEL_240:
          *(_DWORD *)(v10 + 8764) = v134;
          v135 = v259;
          if (*(int *)v259 > 7)
          {
LABEL_226:
            v136 = 0;
            v137 = v225;
            if (*(_DWORD *)(v135 + 100) == 2)
              goto LABEL_242;
            goto LABEL_227;
          }
LABEL_241:
          v136 = *(_DWORD *)(v135 + 212) + ~(_DWORD)v121;
          v137 = v225;
          if (*(_DWORD *)(v135 + 100) == 2)
          {
LABEL_242:
            if (v123)
              v145 = v121;
            else
              v145 = 0;
            v138 = vp8_hex_search(v10, v241, v240, (__int16 *)&v271, v137, v145, v230, v239, v212, (__int16 *)&v269 + 2);
            v54 = v235;
            *((_DWORD *)v235 + 8) = *(_DWORD *)(v10 + 6416);
LABEL_246:
            result = v237;
            v82 = (_DWORD *)(v10 + 4 * v74 + 29976);
            v93 = v232;
            goto LABEL_247;
          }
LABEL_227:
          v138 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, _WORD *, uint64_t, _QWORD, uint64_t *, uint64_t (**)(void), uint64_t, char *))(v135 + 696))(v10, v241, v240, &v271, v137, v121, v230, &v269, v239, v229, (char *)&v269 + 4);
          v54 = v235;
          *((_DWORD *)v235 + 8) = *(_DWORD *)(v10 + 6416);
          v139 = v269;
          LODWORD(v269) = 0;
          if (v139 >= v136)
            goto LABEL_246;
          v140 = ~v139 + v136;
          v141 = v121 + v139 + 1;
          v142 = v225;
          while (1)
          {
            v143 = v142;
            v144 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v259 + 696))(v10, v241, v240, &v271);
            v54 = v235;
            if (v144 >= v138)
            {
              *v143 = *((_DWORD *)v235 + 8);
            }
            else
            {
              *((_DWORD *)v235 + 8) = *v143;
              v138 = v144;
            }
            result = v237;
            v142 = v143;
            v82 = (_DWORD *)(v10 + 4 * v74 + 29976);
            v93 = v232;
            if (!v140)
              break;
            while (1)
            {
              --v140;
              ++v141;
              if (!(_DWORD)v269)
                break;
              LODWORD(v269) = v269 - 1;
              if (!v140)
                goto LABEL_247;
            }
          }
LABEL_247:
          *(_OWORD *)(v10 + 8752) = v215;
          v49 = v138 == 0x7FFFFFFF;
          v35 = a1;
          v73 = v250;
          v51 = v257;
          if (v49)
            goto LABEL_249;
LABEL_248:
          v146 = *(unsigned int *)(v10 + 8632);
          v147 = result;
          v148 = v10;
          v149 = v93;
          v150 = v35;
          v151 = v54;
          v152 = v73;
          (*(void (**)(uint64_t, uint64_t, uint64_t, _DWORD *, char *, uint64_t, uint64_t (**)(void), _QWORD *, int *, unsigned int *))(v259 + 680))(v148, v241, v240, v225, (char *)&v269 + 4, v146, v239, v224, &v267, &v266);
          v93 = v149;
          v82 = (_DWORD *)v263;
          v73 = v152;
          v10 = v243;
          v54 = v151;
          v35 = v150;
          result = v147;
          v51 = v257;
LABEL_249:
          v153 = *(_DWORD *)(v10 + 6416);
          *((_DWORD *)v54 + 8) = v153;
          v154 = *(_DWORD *)(v10 + 8228) - 128;
          v72 = v249;
          if (v154 <= v153 >> 16 && (v154 = *(_DWORD *)(v10 + 8232) + 128, v154 >= v153 >> 16))
          {
            v154 = HIWORD(v153);
            v57 = v258;
            v155 = (__int16)v153;
            v156 = *(_DWORD *)(v10 + 8236) - 128;
            if (v156 > (__int16)v153)
              goto LABEL_255;
          }
          else
          {
            *((_WORD *)v54 + 17) = v154;
            v57 = v258;
            v155 = (__int16)v153;
            v156 = *(_DWORD *)(v10 + 8236) - 128;
            if (v156 > (__int16)v153)
              goto LABEL_255;
          }
          v156 = *(_DWORD *)(v10 + 8240) + 128;
          if (v156 >= v155)
            goto LABEL_256;
LABEL_255:
          *((_WORD *)v54 + 16) = v156;
          LOWORD(v153) = v156;
LABEL_256:
          v157 = ((__int16)v153 - SWORD2(v269)) >> 1;
          if (v157 >= 2047)
            v157 = 2047;
          v158 = *(_DWORD *)(*v224 + 4 * (v157 & ~(v157 >> 31)));
          v159 = ((__int16)v154 - SHIWORD(v269)) >> 1;
          if (v159 >= 2047)
            v159 = 2047;
          v93 += v158 + *(_DWORD *)(v224[1] + 4 * (v159 & ~(v159 >> 31)));
LABEL_261:
          if (*((_DWORD *)v54 + v91))
            goto LABEL_262;
          goto LABEL_119;
        default:
          v80 = 0x7FFFFFFFLL;
          goto LABEL_143;
      }
    }
    if (((0x51uLL >> v74) & 1) == 0 || (_DWORD)v92 != 3)
      goto LABEL_119;
LABEL_262:
    v160 = (__int16 *)v54 + 2 * v91;
    v161 = *v160 >> 3;
    if (*(_DWORD *)(v10 + 8760) <= v161 && *(_DWORD *)(v10 + 8764) >= v161)
    {
      v162 = v160[1] >> 3;
      if (*(_DWORD *)(v10 + 8752) <= v162 && *(_DWORD *)(v10 + 8756) >= v162)
        break;
    }
LABEL_119:
    v80 = v76;
LABEL_120:
    ++v74;
    v76 = v80;
    if (v74 == 20)
      goto LABEL_269;
  }
  v262 = (uint64_t)v82;
  v163 = v73;
  v236 = v54;
  v238 = result;
  v164 = 0;
  v165 = 0;
  LOBYTE(v271) = *((_DWORD *)&vp8_mode_contexts + 4 * v282[0]);
  BYTE1(v271) = *((_DWORD *)&vp8_mode_contexts + 4 * v282[1] + 1);
  BYTE2(v271) = *((_DWORD *)&vp8_mode_contexts + 4 * v282[2] + 2);
  HIBYTE(v271) = *((_DWORD *)&vp8_mode_contexts + 4 * v282[3] + 3);
  v166 = (unsigned int *)((char *)&vp8_mv_ref_encoding_array + 8 * (v91 - 5));
  v167 = *v166;
  v168 = v166[1] - 1;
  do
  {
    v164 += vp8_prob_cost[(*((_BYTE *)&v271 + (v165 >> 1)) ^ -((v167 >> v168) & 1))];
    v165 = vp8_mv_ref_tree[((v167 >> v168--) & 1) + v165];
  }
  while (v168 != -1);
  *(_DWORD *)(*(_QWORD *)(v10 + 8096) + 4) = *(_DWORD *)v160;
  v169 = v164 + v93;
  v170 = evaluate_inter_mode(&v266, v164 + v93, &v267, (_DWORD *)v35, v10, v208);
  v93 = v169;
  v80 = v170;
  result = v238;
  v57 = v258;
  v54 = v236;
  v73 = v163;
LABEL_142:
  v82 = (_DWORD *)v262;
LABEL_143:
  if (!v73[935])
    goto LABEL_168;
  if ((_DWORD)v83 != 1)
  {
    v99 = (v73[826] - *(_DWORD *)(v35 + 4 * v83 + 150848)) > 8;
    if (((0x51uLL >> v74) & 1) != 0)
      goto LABEL_146;
    goto LABEL_162;
  }
  v99 = 0;
  if (((0x51uLL >> v74) & 1) == 0)
  {
LABEL_162:
    v102 = *(_QWORD *)(v10 + 8096);
    goto LABEL_163;
  }
LABEL_146:
  v100 = v266;
  v101 = v266 >= v234 || v99;
  v102 = *(_QWORD *)(v10 + 8096);
  if ((v101 & 1) == 0)
  {
    *(_DWORD *)(v10 + 8832) = *(unsigned __int8 *)(v102 + 2);
    v234 = v100;
  }
LABEL_163:
  if (*(_BYTE *)v102 == 8)
  {
    v103 = v266;
    if (v266 >= v242)
      v99 = 1;
    if (!v99)
    {
      *(_DWORD *)(v10 + 8820) = 8;
      *(_DWORD *)(v10 + 8824) = *(_DWORD *)(v102 + 4);
      *(_BYTE *)(v72 + 1004) = *(_BYTE *)(v102 + 10);
      *(_DWORD *)(v10 + 8828) = *(unsigned __int8 *)(v102 + 2);
      v242 = v103;
    }
  }
LABEL_168:
  if ((int)v80 >= (int)v76 && !*(_DWORD *)(v10 + 8768))
  {
LABEL_115:
    v77 = v10 + 4 * v74;
    v78 = *(_DWORD *)(v77 + 29896);
    if (v78 <= 508)
      v79 = v78 + 4;
    else
      v79 = 512;
    *(_DWORD *)(v77 + 29896) = v79;
    *v82 = (*(int *)(v35 + 4 * v74 + 115264) >> 7) * v79;
    goto LABEL_119;
  }
  *a5 = v93;
  *a6 = v267;
  v252 = v266;
  v104 = *(unsigned __int8 **)(v10 + 8096);
  HIDWORD(v254) = *v104;
  BYTE4(v246) = v104[1];
  LODWORD(v254) = v104[2];
  LOBYTE(v246) = v104[3];
  HIDWORD(v248) = *((_DWORD *)v104 + 1);
  v105 = *((_WORD *)v104 + 4);
  LOBYTE(v248) = v104[10];
  v245 = v104[11];
  v106 = *(_DWORD *)(v10 + v81 + 29896);
  v107 = v106 <= 33;
  v108 = v106 - 2;
  if (v107)
    v108 = 32;
  *(_DWORD *)(v10 + v81 + 29896) = v108;
  v109 = *(_DWORD *)(v35 + v81 + 115264);
  v270 = v105;
  v110 = *(_DWORD *)(v10 + 8768);
  *v82 = (v109 >> 7) * v108;
  v253 = v74;
  if (!v110)
    goto LABEL_120;
LABEL_269:
  v171 = v51;
  v172 = (int *)(v35 + 4 * v253 + 115264);
  if ((*v172 - 1) <= 0x1FFFFFFD)
  {
    v173 = v10 + 4 * v253;
    v174 = *(_DWORD *)(v173 + 29896);
    if (v174 >= (v174 >> 3) + 32)
      v175 = v174 - (v174 >> 3);
    else
      v175 = 32;
    *(_DWORD *)(v173 + 29896) = v175;
    *(_DWORD *)(v173 + 29976) = v175 * (*v172 >> 7);
  }
  v176 = *a6 >> 7;
  if (v176 >= 1023)
    v176 = 1023;
  ++*(_DWORD *)(v10 + 4 * v176 + 30160);
  v177 = v73[935];
  v178 = HIDWORD(v254);
  v179 = v254;
  if (v177)
  {
    v180 = v73[133];
    v181 = *(_DWORD *)(v10 + 8820);
    if (v181)
    {
      v182 = v217;
      v183 = v231 + v180 * (uint64_t)v221;
      if (v177 == 4)
        goto LABEL_279;
LABEL_282:
      v185 = *(_DWORD *)(v259 + 352) > 1000;
      v186 = v73;
      v187 = result;
      *(_DWORD *)(v10 + 8816) = 0;
      if (!*(_DWORD *)(v10 + 8808))
        goto LABEL_283;
    }
    else
    {
      *(_DWORD *)(v10 + 8820) = HIDWORD(v254);
      *(_DWORD *)(v10 + 8824) = HIDWORD(v248);
      *(_BYTE *)(v72 + 1004) = v248;
      *(_DWORD *)(v10 + 8828) = v254;
      v181 = HIDWORD(v254);
      v242 = v252;
      v182 = v217;
      v183 = v231 + v180 * (uint64_t)v221;
      if (v73[935] != 4)
        goto LABEL_282;
LABEL_279:
      v184 = 96207267450 * *(_DWORD *)(v259 + 6424);
      v185 = *(_DWORD *)(v259 + 6428) > (int)((v184 >> 37) + ((unint64_t)v184 >> 63));
      v186 = v73;
      v187 = result;
      *(_DWORD *)(v10 + 8816) = 0;
      if (!*(_DWORD *)(v10 + 8808))
      {
LABEL_283:
        if (v181 == 7)
        {
          v188 = *(_DWORD *)(v10 + 8828);
          if (v188 == 1 || v188 == *(_DWORD *)(v218 + 20))
          {
            v189 = !v185;
            if (*(unsigned __int8 *)(*(_QWORD *)(v259 + 328) + v183) < 0x14u)
              v189 = 1;
            if ((v189 & 1) == 0)
              *(_DWORD *)(v10 + 8816) = 1;
          }
        }
      }
    }
    *(_DWORD *)(v10 + 8812) = 0;
    vp8_denoiser_denoise_mb(v35 + 148232, v10, v242, v234, v222, a4, (unsigned __int8 *)(v35 + 111156), v221, v231, v183, *(unsigned __int8 *)(*(_QWORD *)(v259 + 336) + v183));
    if ((_DWORD)v254)
    {
      result = v187;
      v73 = v186;
      if (HIDWORD(v254) == 7)
        goto LABEL_301;
      if (!*(_DWORD *)(v10 + 8812))
        goto LABEL_301;
      v190 = *(_DWORD *)(v259 + 352) > 2000;
      if (v182)
        goto LABEL_301;
    }
    else
    {
      v190 = 1;
      result = v187;
      v73 = v186;
      if (v182)
        goto LABEL_301;
    }
    if (v190)
    {
      v191 = *(int *)(v10 + 8832);
      if ((_DWORD)v191)
      {
        v192 = vp8_prob_cost[*((unsigned __int8 *)&vp8_mode_contexts + 16 * v282[0])]
             + *(_DWORD *)(v10 + 4 * v191 + 8600);
        v267 = 0;
        v193 = *(_QWORD *)(v10 + 8096);
        *(_BYTE *)(v193 + 2) = v191;
        v194 = (char *)&v275 + 24 * (int)v191;
        *(_OWORD *)v72 = *(_OWORD *)v194;
        *(_QWORD *)(v10 + 7848) = *((_QWORD *)v194 + 2);
        *(_WORD *)v193 = 7;
        *(_DWORD *)(v193 + 4) = 0;
        v195 = evaluate_inter_mode(&v266, v192, &v267, (_DWORD *)v35, v10, 100);
        v73 = v186;
        v107 = v195 < (int)v80;
        result = v187;
        if (v107)
        {
          v196 = *(unsigned __int8 **)(v10 + 8096);
          v178 = *v196;
          BYTE4(v246) = v196[1];
          v179 = v196[2];
          LOBYTE(v246) = v196[3];
          HIDWORD(v248) = *((_DWORD *)v196 + 1);
          v270 = *((_WORD *)v196 + 4);
          LOBYTE(v248) = v196[10];
          v245 = v196[11];
        }
      }
    }
  }
LABEL_301:
  if (!*(_DWORD *)(v171 + 236) || v178 == 7 && v179 == 3)
  {
    if (*(_DWORD *)(v10 + 8768))
    {
      if (v178 <= 4)
        goto LABEL_306;
    }
    else
    {
      v204 = *(_QWORD *)(v10 + 8096);
      *(_BYTE *)v204 = v178;
      *(_BYTE *)(v204 + 1) = BYTE4(v246);
      *(_BYTE *)(v204 + 2) = v179;
      *(_BYTE *)(v204 + 3) = v246;
      *(_DWORD *)(v204 + 4) = HIDWORD(v248);
      *(_WORD *)(v204 + 8) = v270;
      *(_BYTE *)(v204 + 10) = v248;
      *(_BYTE *)(v204 + 11) = v245;
      if (v178 <= 4)
      {
LABEL_306:
        v197 = result;
        pick_intra_mbuv_mode(v10);
        result = v197;
      }
    }
    v198 = *(_QWORD *)(v10 + 8096);
    if ((_DWORD)result != *(_DWORD *)(v35 + 4 * *(unsigned __int8 *)(v198 + 2) + 111592))
      HIDWORD(v269) = *(_DWORD *)((unint64_t)v284 | (4 * ((_DWORD)result == 0)));
    if (*(_BYTE *)v198 == 8)
    {
      v199 = *(__int16 *)(v198 + 4) - SWORD2(v269);
      if ((v199 + 2046) <= 0xFFD)
      {
        v200 = *(__int16 *)(v198 + 6) - SHIWORD(v269);
        if (v200 >= -2046 && v200 <= 2047)
        {
          ++*(_DWORD *)(v10 + 13452 + 4 * ((v199 >> 1) + 1023));
          v201 = v10 + 13452 + 4 * ((v200 >> 1) + 1023);
          ++*(_DWORD *)(v201 + 8188);
        }
      }
    }
  }
  else
  {
    v202 = *(_QWORD *)(v10 + 8096);
    *(_BYTE *)v202 = 7;
    *(_BYTE *)(v202 + 2) = 3;
    *(_DWORD *)(v202 + 4) = 0;
    v203 = *(_BYTE **)(v10 + 8096);
    v203[1] = 0;
    v203[9] = v73[135];
    v203[8] = 0;
  }
  return result;
}

uint64_t check_dot_artifact_candidate(_DWORD *a1, uint64_t a2, unsigned __int8 *a3, int a4, unsigned __int8 *a5, int a6, int a7, int a8)
{
  uint64_t result;
  int *v10;
  _DWORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;

  result = 0;
  v10 = (int *)(a2 + 34288);
  v11 = a1 + 27768;
  v12 = a1[27768];
  v13 = a1[27770];
  if (a8 <= 0)
    v14 = 15;
  else
    v14 = 7;
  v15 = a1[37318];
  v16 = a1[28629];
  *(_DWORD *)(a2 + 34292) = 0;
  if (!v15)
  {
    if (v16 <= 1)
      v17 = 30;
    else
      v17 = 20;
    if (v17 >= *(unsigned __int8 *)(*((_QWORD *)v11 + 4006) + a7 + v13 * a6))
      return 0;
    v18 = *v10;
    if (*v10 >= (v12 / 10) || v11[809])
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(a2 + 34292) = 1;
      v22 = *a5;
      v23 = a4 + 1;
      v24 = v22 - a5[1];
      if ((v24 & 0x80000000) != 0)
        v24 = a5[1] - v22;
      v25 = v22 - a5[a4];
      if (v25 < 0)
        v25 = a5[a4] - v22;
      if (v24 <= v25)
        v24 = v25;
      v26 = v22 - a5[v23];
      if (v26 < 0)
        v26 = -v26;
      if (v24 <= v26)
        v24 = v26;
      v27 = *a3;
      v28 = a3[v23];
      v29 = v27 - a3[1];
      if (v29 < 0)
        v29 = a3[1] - v27;
      v30 = v27 - a3[a4];
      if (v30 < 0)
        v30 = a3[a4] - v27;
      if (v29 > v30)
        v30 = v29;
      v31 = v27 - v28;
      if (v31 < 0)
        v31 = -v31;
      if (v30 > v31)
        v31 = v30;
      if (v24 >= 6 && v31 < 4)
        goto LABEL_61;
      v32 = a5[v14];
      v33 = (v14 - 1);
      v34 = v14 + a4;
      v35 = (int)v34 - 1;
      v36 = v32 - a5[v33];
      if (v36 < 0)
        v36 = a5[v33] - v32;
      v37 = v32 - a5[v34];
      if (v37 < 0)
        v37 = a5[v34] - v32;
      if (v36 <= v37)
        v36 = v37;
      v38 = v32 - a5[v35];
      if (v38 < 0)
        v38 = -v38;
      v39 = a3[v14];
      v40 = a3[v33];
      v41 = a3[v34];
      v42 = a3[v35];
      if (v36 > v38)
        v38 = v36;
      v43 = v39 - v40;
      if (v43 < 0)
        v43 = -v43;
      v44 = v39 - v41;
      if ((v44 & 0x80000000) != 0)
        v44 = -v44;
      if (v43 > v44)
        v44 = v43;
      v45 = v39 - v42;
      if (v39 - v42 < 0)
        v45 = v42 - v39;
      if (v44 <= v45)
        v44 = v45;
      if (v38 >= 6 && v44 < 4
        || (v46 = macroblock_corner_grad((uint64_t)a5, a4, v14, 0, 1),
            v47 = macroblock_corner_grad((uint64_t)a3, a4, v14, 0, 1),
            v46 >= 6)
        && v47 < 4
        || (v48 = macroblock_corner_grad((uint64_t)a5, a4, v14, v14, -1),
            v49 = macroblock_corner_grad((uint64_t)a3, a4, v14, v14, -1),
            result = 0,
            v48 >= 6)
        && v49 <= 3)
      {
LABEL_61:
        *v10 = v18 + 1;
        return 1;
      }
    }
  }
  return result;
}

uint64_t pick_intra4x4mby_modes(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  _QWORD *v10;
  unsigned int *v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  char *v20;
  char v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t result;
  uint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char v52;
  int *v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  _QWORD v59[2];

  v4 = 0;
  v5 = 0;
  v59[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 16);
  v7 = *(int *)(a1 + 7952);
  v8 = (_DWORD *)(*(_QWORD *)(a1 + 7992) - v7);
  v9 = v8[4];
  v8 += 4;
  v8[v7] = v9;
  v8[2 * v7] = *v8;
  v8[3 * (int)v7] = *v8;
  v10 = (_QWORD *)(a1 + 6384);
  v11 = (unsigned int *)(a1 + 1948);
  v53 = *(int **)(a1 + 8736);
  while (1)
  {
    v12 = *(_QWORD *)(a1 + 8096);
    if (!*(_DWORD *)(a1 + 8108))
    {
      if (v4 > 3)
      {
        v14 = *(_DWORD *)(v12 + 4 * v4 - 4);
      }
      else
      {
        v13 = (_BYTE *)(v12 - 76 * *(int *)(a1 + 8104));
        switch(*v13)
        {
          case 1:
            v14 = 2;
            break;
          case 2:
            v14 = 3;
            break;
          case 3:
            v14 = 1;
            break;
          case 4:
            v14 = *(_DWORD *)&v13[4 * v4 + 60];
            break;
          default:
            v14 = 0;
            break;
        }
      }
      if ((v4 & 3) != 0)
      {
        v15 = *(_DWORD *)(v12 + 4 * v4 + 8);
      }
      else
      {
        switch(*(_BYTE *)(v12 - 76))
        {
          case 1:
            v15 = 2;
            break;
          case 2:
            v15 = 3;
            break;
          case 3:
            v15 = 1;
            break;
          case 4:
            v15 = *(_DWORD *)(v12 + 4 * v4 - 52);
            break;
          default:
            v15 = 0;
            break;
        }
      }
      v53 = (int *)(*(_QWORD *)(a1 + 8728) + 400 * v14 + 40 * v15);
    }
    v45 = *(_QWORD *)(a1 + 8096);
    v46 = v6;
    v47 = v4;
    v48 = v5;
    v16 = *(int *)(a1 + 7952);
    v17 = *(_QWORD *)(a1 + 7992) + *((int *)v10 + 4);
    v18 = (_QWORD *)(v17 - v16);
    v19 = *(_BYTE *)(v17 - v16 - 1);
    v52 = v19;
    v21 = *(_BYTE *)(v17 - 1);
    v20 = (char *)(v17 - 1);
    v22 = *v53;
    v54 = v21;
    v55 = v20[v16];
    v56 = v20[2 * v16];
    v23 = *v10;
    v57 = v20[3 * v16];
    v59[0] = *v18;
    v58 = v19;
    pred_0(v23, 16, v59, &v54);
    v24 = vpx_get4x4sse_cs(**(_QWORD **)(v11 - 3) + (int)*(v11 - 1), *v11, *v10, 16);
    v25 = *(_DWORD *)(a1 + 8644) * v24 + ((*(_DWORD *)(a1 + 8648) * v22 + 128) >> 8);
    if (v25 == 0x7FFFFFFF)
      v26 = 14;
    else
      v26 = 0;
    if (v25 == 0x7FFFFFFF)
      v27 = 0;
    else
      v27 = v22;
    v50 = v27;
    v51 = v26;
    if (v25 == 0x7FFFFFFF)
      v28 = 0;
    else
      v28 = v24;
    v49 = v28;
    v29 = v53[1];
    v54 = *v20;
    v55 = v20[v16];
    v56 = v20[2 * v16];
    v30 = *v10;
    v57 = v20[3 * v16];
    v59[0] = *v18;
    v58 = v52;
    off_254573800(v30, 16, v59, &v54);
    v31 = vpx_get4x4sse_cs(**(_QWORD **)(v11 - 3) + (int)*(v11 - 1), *v11, *v10, 16);
    if (*(_DWORD *)(a1 + 8644) * v31 + ((*(_DWORD *)(a1 + 8648) * v29 + 128) >> 8) >= v25)
    {
      v32 = v25;
    }
    else
    {
      v50 = v29;
      v51 = 1;
      v49 = v31;
      v32 = *(_DWORD *)(a1 + 8644) * v31 + ((*(_DWORD *)(a1 + 8648) * v29 + 128) >> 8);
    }
    v33 = v53[2];
    v54 = *v20;
    v55 = v20[v16];
    v56 = v20[2 * v16];
    v34 = *v10;
    v57 = v20[3 * v16];
    v59[0] = *v18;
    v58 = v52;
    off_254573808(v34, 16, v59, &v54);
    v35 = vpx_get4x4sse_cs(**(_QWORD **)(v11 - 3) + (int)*(v11 - 1), *v11, *v10, 16);
    if (*(_DWORD *)(a1 + 8644) * v35 + ((*(_DWORD *)(a1 + 8648) * v33 + 128) >> 8) < v32)
    {
      v50 = v33;
      v51 = 2;
      v49 = v35;
      v32 = *(_DWORD *)(a1 + 8644) * v35 + ((*(_DWORD *)(a1 + 8648) * v33 + 128) >> 8);
    }
    v36 = v53[3];
    v54 = *v20;
    v55 = v20[v16];
    v56 = v20[2 * v16];
    v37 = *v10;
    v57 = v20[3 * v16];
    v59[0] = *v18;
    v58 = v52;
    off_254573810(v37, 16, v59, &v54);
    v38 = vpx_get4x4sse_cs(**(_QWORD **)(v11 - 3) + (int)*(v11 - 1), *v11, *v10, 16);
    v39 = *(_DWORD *)(a1 + 8644) * v38 + ((*(_DWORD *)(a1 + 8648) * v36 + 128) >> 8);
    v40 = v39 >= v32 ? v51 : 3;
    if (v39 < v32)
    {
      v41 = v38;
    }
    else
    {
      v36 = v50;
      v41 = v49;
    }
    *((_DWORD *)v10 + 8) = v40;
    vp8_encode_intra4x4block(a1, v47);
    v6 = v36 + v46;
    v5 = v41 + v48;
    *(_DWORD *)(v45 + 4 * v47 + 12) = v40;
    if (v41 + v48 > *a3)
      break;
    v4 = v47 + 1;
    v10 += 7;
    v11 += 22;
    if (v47 == 15)
    {
      *a2 = v6;
      *a3 = v5;
      return (*(_DWORD *)(a1 + 8644) * v5 + ((*(_DWORD *)(a1 + 8648) * v6 + 128) >> 8));
    }
  }
  *a2 = v6;
  result = 0x7FFFFFFFLL;
  *a3 = 0x7FFFFFFF;
  return result;
}

uint64_t evaluate_inter_mode(unsigned int *a1, int a2, int *a3, _DWORD *a4, uint64_t a5, int a6)
{
  unsigned __int8 *v11;
  int v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  int v23;
  unsigned int v24;

  v11 = *(unsigned __int8 **)(a5 + 8096);
  v12 = *v11;
  v13 = *((_DWORD *)v11 + 1);
  if (a4[35770] && !**(_BYTE **)(a5 + 8784))
  {
    *a1 = 0;
    *a3 = 0;
    *(_DWORD *)(a5 + 8768) = 1;
    return 0x7FFFFFFFLL;
  }
  v14 = a4 + 35906;
  v15 = a4 + 27775;
  if (v12 == 8 && a4[35727] && *v15 != 1)
  {
    v19 = *a3;
  }
  else
  {
    v16 = HIWORD(v13) & 7;
    v17 = v13 & 7;
    v18 = *(_QWORD *)(a5 + 7832) + *(int *)(a5 + 6400) + *(_DWORD *)(a5 + 7792) * ((__int16)v13 >> 3) + (v13 >> 19);
    if (v16 | v17)
      v19 = (*((uint64_t (**)(uint64_t, _QWORD))v14 + 1))(v18, *(unsigned int *)(a5 + 7792));
    else
      v19 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, unsigned int *))v14)(**(_QWORD **)(a5 + 1936) + *(int *)(a5 + 1944), *(unsigned int *)(a5 + 1948), v18, *(unsigned int *)(a5 + 7792), a1);
    *a3 = v19;
  }
  v20 = (*(_DWORD *)(a5 + 8644) * v19 + ((*(_DWORD *)(a5 + 8648) * a2 + 128) >> 8));
  if ((int)v15[797] >= 1)
  {
    v21 = v14[1395] == 3;
    if (v15[802])
      goto LABEL_22;
LABEL_14:
    if (v12 == 7 && *(_BYTE *)(*(_QWORD *)(a5 + 8096) + 2) == 1 && (v21 || v14[1810] == 1))
    {
      if (*(_DWORD *)(a5 + 8808))
        v22 = 100;
      else
        v22 = a6;
      v20 = (v22 * (int)v20 / 100);
    }
    goto LABEL_22;
  }
  v21 = 0;
  if (!v15[802])
    goto LABEL_14;
LABEL_22:
  v23 = *(__int16 *)(*(_QWORD *)(a5 + 6392) + 2);
  v24 = (v23 * v23) >> 4;
  if (v24 <= *(_DWORD *)(a5 + 8772))
    v24 = *(_DWORD *)(a5 + 8772);
  if (v24 > *a1)
    *(_DWORD *)(a5 + 8768) = *(_DWORD *)(a5 + 8772) > 2 * VP8_UVSSE(a5);
  return v20;
}

uint64_t pick_intra_mbuv_mode(uint64_t result)
{
  int32x4_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8x8_t *v4;
  uint64_t v5;
  uint8x8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  __int32 v46;
  int v47;
  int32x2_t v48;
  uint16x8_t v49;
  int32x4_t v50;
  uint16x8_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  uint32x4_t v55;
  uint64_t *v56;
  uint64_t *v57;
  int8x16_t v58;
  int32x2_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int v64;
  __int32 v65;
  int32x2_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  char v73;
  __int32 v74;
  BOOL v75;
  uint64_t v76;
  _BYTE v77[8];
  _BYTE v78[8];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(result + 8000);
  v3 = *(int *)(result + 7972);
  v4 = (uint8x8_t *)(v2 - v3);
  v5 = *(_QWORD *)(result + 8008);
  v6 = (uint8x8_t *)(v5 - v3);
  v7 = *(int *)(result + 3352);
  v8 = **(_QWORD **)(result + 3344);
  v9 = *(int *)(result + 3704);
  v10 = **(_QWORD **)(result + 3696);
  v76 = *(int *)(result + 3356);
  v11 = *(unsigned __int8 *)(v2 - v3 - 1);
  v12 = *(unsigned __int8 *)(v5 - v3 - 1);
  v13 = *(unsigned __int8 *)(v2 - 1);
  v78[0] = *(_BYTE *)(v2 - 1);
  v14 = *(unsigned __int8 *)(v5 - 1);
  v77[0] = *(_BYTE *)(v5 - 1);
  v15 = *(unsigned __int8 *)(v2 + v3 - 1);
  v78[1] = *(_BYTE *)(v2 + v3 - 1);
  v16 = *(unsigned __int8 *)(v5 + v3 - 1);
  v77[1] = *(_BYTE *)(v5 + v3 - 1);
  v17 = 2 * v3 - 1;
  v18 = *(unsigned __int8 *)(v2 + v17);
  v78[2] = *(_BYTE *)(v2 + v17);
  v19 = *(unsigned __int8 *)(v5 + v17);
  v77[2] = *(_BYTE *)(v5 + v17);
  v20 = v17 + v3;
  v21 = *(unsigned __int8 *)(v2 + v20);
  v78[3] = *(_BYTE *)(v2 + v20);
  v22 = *(unsigned __int8 *)(v5 + v20);
  v77[3] = v22;
  v23 = 4 * v3 - 1;
  v24 = *(unsigned __int8 *)(v2 + v23);
  v78[4] = *(_BYTE *)(v2 + v23);
  v25 = *(unsigned __int8 *)(v5 + v23);
  v77[4] = *(_BYTE *)(v5 + v23);
  v26 = v23 + v3;
  v27 = *(unsigned __int8 *)(v2 + v26);
  v78[5] = *(_BYTE *)(v2 + v26);
  v28 = *(unsigned __int8 *)(v5 + v26);
  v77[5] = v28;
  v29 = 6 * (int)v3 - 1;
  v30 = *(unsigned __int8 *)(v2 + v29);
  v78[6] = *(_BYTE *)(v2 + v29);
  v31 = *(unsigned __int8 *)(v5 + v29);
  v77[6] = v31;
  v32 = ~v3 + 8 * v3;
  v33 = *(unsigned __int8 *)(v2 + v32);
  v78[7] = *(_BYTE *)(v2 + v32);
  v34 = *(unsigned __int8 *)(v5 + v32);
  v77[7] = v34;
  v35 = (uint64_t *)(v8 + v7);
  v36 = (uint64_t *)(v10 + v9);
  if (*(_DWORD *)(result + 8112))
  {
    v37 = vaddlvq_u16(vmovl_u8(*v4));
    v38 = vaddlvq_u16(vmovl_u8(*v6));
    if (!*(_DWORD *)(result + 8116))
    {
      v39 = 3;
      goto LABEL_8;
    }
    v39 = 4;
  }
  else
  {
    if (!*(_DWORD *)(result + 8116))
    {
      v41 = 128;
      v42 = 128;
      goto LABEL_9;
    }
    v38 = 0;
    v37 = 0;
    v39 = 3;
  }
  v37 += v15 + v13 + v18 + v21 + v24 + v27 + v30 + v33;
  v38 += v16 + v14 + v19 + v22 + v25 + v28 + v31 + v34;
LABEL_8:
  v40 = 1 << (v39 - 1);
  v41 = (v40 + v37) >> v39;
  v42 = (v38 + v40) >> v39;
LABEL_9:
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = (int32x2_t)__PAIR64__(v12, v11);
  v49 = vmovl_u8(*v4);
  v50 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v49.i8);
  v51 = vmovl_u8(*v6);
  v52 = (int32x4_t)vmovl_high_u16(v51);
  v53 = (int32x4_t)vmovl_high_u16(v49);
  v54 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v51.i8);
  v55.i64[0] = 0xFF000000FFLL;
  v55.i64[1] = 0xFF000000FFLL;
  do
  {
    if (v43 == 3)
    {
      v56 = (uint64_t *)(**(_QWORD **)(result + 3520) + *(int *)(result + 3528));
      v57 = (uint64_t *)(**(_QWORD **)(result + 3872) + *(int *)(result + 3880));
    }
    else
    {
      v56 = (uint64_t *)((char *)v35 + v76);
      v57 = (uint64_t *)((char *)v36 + v76);
    }
    v58.i64[0] = *v35;
    v1.i8[0] = v78[v43];
    v1.i8[4] = v77[v43];
    v59 = (int32x2_t)vand_s8(*(int8x8_t *)v1.i8, (int8x8_t)0xFF000000FFLL);
    v58.i64[1] = *v36;
    v60 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_208F04F30);
    v61 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_208F04F50);
    v62 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_208F04F20);
    v63 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_208F04F40);
    v44 += (v61.i32[0] - v41) * (v61.i32[0] - v41)
         + (v60.i32[0] - v42) * (v60.i32[0] - v42)
         + (v61.i32[1] - v41) * (v61.i32[1] - v41)
         + (v60.i32[1] - v42) * (v60.i32[1] - v42)
         + (v61.i32[2] - v41) * (v61.i32[2] - v41)
         + (v60.i32[2] - v42) * (v60.i32[2] - v42)
         + (v61.i32[3] - v41) * (v61.i32[3] - v41)
         + (v60.i32[3] - v42) * (v60.i32[3] - v42)
         + (v63.i32[0] - v41) * (v63.i32[0] - v41)
         + (v62.i32[0] - v42) * (v62.i32[0] - v42)
         + (v63.i32[1] - v41) * (v63.i32[1] - v41)
         + (v62.i32[1] - v42) * (v62.i32[1] - v42)
         + (v63.i32[2] - v41) * (v63.i32[2] - v41)
         + (v62.i32[2] - v42) * (v62.i32[2] - v42)
         + (v63.i32[3] - v41) * (v63.i32[3] - v41)
         + (v62.i32[3] - v42) * (v62.i32[3] - v42);
    v45 += (v61.i32[0] - v50.i32[0]) * (v61.i32[0] - v50.i32[0])
         + (v60.i32[0] - v54.i32[0]) * (v60.i32[0] - v54.i32[0])
         + (v61.i32[1] - v50.i32[1]) * (v61.i32[1] - v50.i32[1])
         + (v60.i32[1] - v54.i32[1]) * (v60.i32[1] - v54.i32[1])
         + (v61.i32[2] - v50.i32[2]) * (v61.i32[2] - v50.i32[2])
         + (v60.i32[2] - v54.i32[2]) * (v60.i32[2] - v54.i32[2])
         + (v61.i32[3] - v50.i32[3]) * (v61.i32[3] - v50.i32[3])
         + (v60.i32[3] - v54.i32[3]) * (v60.i32[3] - v54.i32[3])
         + (v63.i32[0] - v53.i32[0]) * (v63.i32[0] - v53.i32[0])
         + (v62.i32[0] - v52.i32[0]) * (v62.i32[0] - v52.i32[0])
         + (v63.i32[1] - v53.i32[1]) * (v63.i32[1] - v53.i32[1])
         + (v62.i32[1] - v52.i32[1]) * (v62.i32[1] - v52.i32[1])
         + (v63.i32[2] - v53.i32[2]) * (v63.i32[2] - v53.i32[2])
         + (v62.i32[2] - v52.i32[2]) * (v62.i32[2] - v52.i32[2])
         + (v63.i32[3] - v53.i32[3]) * (v63.i32[3] - v53.i32[3])
         + (v62.i32[3] - v52.i32[3]) * (v62.i32[3] - v52.i32[3]);
    v64 = v62.i32[3] - v59.i32[1];
    v65 = v46
        + (v61.i32[0] - v59.i32[0]) * (v61.i32[0] - v59.i32[0])
        + (v60.i32[0] - v59.i32[1]) * (v60.i32[0] - v59.i32[1])
        + (v61.i32[1] - v59.i32[0]) * (v61.i32[1] - v59.i32[0])
        + (v60.i32[1] - v59.i32[1]) * (v60.i32[1] - v59.i32[1])
        + (v61.i32[2] - v59.i32[0]) * (v61.i32[2] - v59.i32[0])
        + (v60.i32[2] - v59.i32[1]) * (v60.i32[2] - v59.i32[1])
        + (v61.i32[3] - v59.i32[0]) * (v61.i32[3] - v59.i32[0])
        + (v60.i32[3] - v59.i32[1]) * (v60.i32[3] - v59.i32[1])
        + (v63.i32[0] - v59.i32[0]) * (v63.i32[0] - v59.i32[0])
        + (v62.i32[0] - v59.i32[1]) * (v62.i32[0] - v59.i32[1])
        + (v63.i32[1] - v59.i32[0]) * (v63.i32[1] - v59.i32[0])
        + (v62.i32[1] - v59.i32[1]) * (v62.i32[1] - v59.i32[1])
        + (v63.i32[2] - v59.i32[0]) * (v63.i32[2] - v59.i32[0])
        + (v62.i32[2] - v59.i32[1]) * (v62.i32[2] - v59.i32[1])
        + (v63.i32[3] - v59.i32[0]) * (v63.i32[3] - v59.i32[0]);
    v66 = vsub_s32(v59, v48);
    v67 = vdupq_lane_s32(v66, 0);
    v68 = vsubq_s32(v63, (int32x4_t)vminq_u32((uint32x4_t)vmaxq_s32(vaddq_s32(v67, v53), (int32x4_t)0), v55));
    v69 = vdupq_lane_s32(v66, 1);
    v70 = vsubq_s32(v62, (int32x4_t)vminq_u32((uint32x4_t)vmaxq_s32(vaddq_s32(v69, v52), (int32x4_t)0), v55));
    v71 = vsubq_s32(v61, (int32x4_t)vminq_u32((uint32x4_t)vmaxq_s32(vaddq_s32(v67, v50), (int32x4_t)0), v55));
    v72 = vsubq_s32(v60, (int32x4_t)vminq_u32((uint32x4_t)vmaxq_s32(vaddq_s32(v69, v54), (int32x4_t)0), v55));
    v46 = v65 + v64 * v64;
    v1 = vaddq_s32(vmlaq_s32(vmulq_s32(v72, v72), v71, v71), vmlaq_s32(vmulq_s32(v70, v70), v68, v68));
    v1.i32[0] = vaddvq_s32(v1);
    v47 += v1.i32[0];
    ++v43;
    v35 = v56;
    v36 = v57;
  }
  while (v43 != 8);
  if (v44 == 0x7FFFFFFF)
    v73 = 10;
  else
    v73 = 0;
  if (v44 >= v45)
    v74 = v45;
  else
    v74 = v44;
  if (v44 > v45)
    v73 = 1;
  v75 = v74 <= v46;
  if (v74 >= v46)
    v74 = v46;
  if (!v75)
    v73 = 2;
  if (v74 > v47)
    v73 = 3;
  *(_BYTE *)(*(_QWORD *)(result + 8096) + 1) = v73;
  return result;
}

uint64_t vp8_pick_intra_mode(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t result;
  int v16;
  int v17;
  int v18;

  v16 = 0;
  v4 = a1 + 4224;
  *(_BYTE *)(*(_QWORD *)(a1 + 8096) + 2) = 0;
  pick_intra_mbuv_mode(a1);
  **(_BYTE **)(a1 + 8096) = 0;
  vp8_build_intra_predictors_mby_s(v4, *(_QWORD *)(a1 + 7992) - *(int *)(a1 + 7952), (_BYTE *)(*(_QWORD *)(a1 + 7992) - 1), *(_DWORD *)(a1 + 7952), v4, 16);
  v5 = *(_DWORD *)(a1 + 8644)
     * vpx_variance16x16(**(_QWORD **)(a1 + 1936), *(unsigned int *)(a1 + 1948), v4, 16, &v16)
     + ((*(_DWORD *)(a1 + 8648) * *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108)) + 128) >> 8);
  if (v5 == 0x7FFFFFFF)
    v6 = 0;
  else
    v6 = v16;
  if (v5 == 0x7FFFFFFF)
    v7 = 0;
  else
    v7 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108));
  **(_BYTE **)(a1 + 8096) = 1;
  vp8_build_intra_predictors_mby_s(v4, *(_QWORD *)(a1 + 7992) - *(int *)(a1 + 7952), (_BYTE *)(*(_QWORD *)(a1 + 7992) - 1), *(_DWORD *)(a1 + 7952), v4, 16);
  v8 = vpx_variance16x16(**(_QWORD **)(a1 + 1936), *(unsigned int *)(a1 + 1948), v4, 16, &v16);
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 4);
  if (v5 <= *(_DWORD *)(a1 + 8644) * v8 + ((*(_DWORD *)(a1 + 8648) * v9 + 128) >> 8))
  {
    v10 = 0;
  }
  else
  {
    v10 = 1;
    v6 = v16;
    v5 = *(_DWORD *)(a1 + 8644) * v8 + ((*(_DWORD *)(a1 + 8648) * v9 + 128) >> 8);
    v7 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 4);
  }
  **(_BYTE **)(a1 + 8096) = 2;
  vp8_build_intra_predictors_mby_s(v4, *(_QWORD *)(a1 + 7992) - *(int *)(a1 + 7952), (_BYTE *)(*(_QWORD *)(a1 + 7992) - 1), *(_DWORD *)(a1 + 7952), v4, 16);
  v11 = vpx_variance16x16(**(_QWORD **)(a1 + 1936), *(unsigned int *)(a1 + 1948), v4, 16, &v16);
  v12 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 8);
  if (v5 > *(_DWORD *)(a1 + 8644) * v11 + ((*(_DWORD *)(a1 + 8648) * v12 + 128) >> 8))
  {
    v10 = 2;
    v6 = v16;
    v5 = *(_DWORD *)(a1 + 8644) * v11 + ((*(_DWORD *)(a1 + 8648) * v12 + 128) >> 8);
    v7 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 8);
  }
  **(_BYTE **)(a1 + 8096) = 3;
  vp8_build_intra_predictors_mby_s(v4, *(_QWORD *)(a1 + 7992) - *(int *)(a1 + 7952), (_BYTE *)(*(_QWORD *)(a1 + 7992) - 1), *(_DWORD *)(a1 + 7952), v4, 16);
  v13 = vpx_variance16x16(**(_QWORD **)(a1 + 1936), *(unsigned int *)(a1 + 1948), v4, 16, &v16);
  v14 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 12);
  if (v5 > *(_DWORD *)(a1 + 8644) * v13 + ((*(_DWORD *)(a1 + 8648) * v14 + 128) >> 8))
  {
    v10 = 3;
    v6 = v16;
    v5 = *(_DWORD *)(a1 + 8644) * v13 + ((*(_DWORD *)(a1 + 8648) * v14 + 128) >> 8);
    v7 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 12);
  }
  v17 = v6;
  v18 = v14;
  **(_BYTE **)(a1 + 8096) = v10;
  result = pick_intra4x4mby_modes(a1, &v18, &v17);
  if ((int)result < v5)
  {
    **(_BYTE **)(a1 + 8096) = 4;
    v7 = v18;
  }
  *a2 = v7;
  return result;
}

uint64_t macroblock_corner_grad(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = a4 + (uint64_t)(a3 * a2);
  v6 = *(unsigned __int8 *)(a1 + v5);
  v7 = a4 + (uint64_t)((a3 - 1) * a2);
  v8 = *(unsigned __int8 *)(a1 + v7);
  v9 = *(unsigned __int8 *)(a1 + a5 + (uint64_t)(int)v7);
  v10 = v6 - *(unsigned __int8 *)(a1 + a5 + (uint64_t)(int)v5);
  if ((v10 & 0x80000000) != 0)
    v10 = -v10;
  v11 = v6 - v8;
  if (v6 - v8 < 0)
    v11 = v8 - v6;
  if (v10 <= v11)
    v10 = v11;
  v12 = v6 - v9;
  if (v12 < 0)
    v12 = -v12;
  if (v10 <= v12)
    return v12;
  else
    return v10;
}

void vp8cx_pick_filter_level_fast(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _DWORD *v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  _BYTE *v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;

  v4 = (_DWORD *)(a2 + 109880);
  v5 = *(_DWORD *)(a2 + 111104);
  if (*(_DWORD *)(a2 + 114968) && *(_DWORD *)(a2 + 111572))
  {
    if (v5 >= 7 && *(_DWORD *)(a2 + 111576) != 0)
      goto LABEL_7;
LABEL_12:
    v80 = 0;
    goto LABEL_13;
  }
  if (v5 < 7)
    goto LABEL_12;
LABEL_7:
  if (v5 < 0x11)
    v7 = 1;
  else
    v7 = v5 >> 3;
  v80 = v7;
LABEL_13:
  if (*(_DWORD *)(a2 + 147536) <= 8u)
    v8 = 63;
  else
    v8 = 47;
  v77 = v8;
  v84 = *(_QWORD *)v4;
  *(_QWORD *)v4 = a2 + 114992;
  if (*(_DWORD *)(a2 + 111060))
    v9 = *(_DWORD *)(a2 + 114292);
  else
    v9 = 0;
  v82 = a2 + 108032;
  v4[421] = v9;
  if (v9 != v4[420])
  {
    vp8_loop_filter_update_sharpness(a2 + 111156, v9);
    v4[420] = v4[421];
  }
  v10 = v4[419];
  v11 = v80;
  if (v10 < v80 || (v11 = v77, v10 > v77))
  {
    v4[419] = v11;
    v10 = v11;
  }
  v12 = *(_DWORD *)(v84 + 4);
  v13 = *(_DWORD *)(v84 + 16);
  if (((v12 >> 4) + 7) >= 0xF)
    v14 = (16 * (((v12 >> 4) + (v12 >> 4 < 0 ? 7 : 0)) >> 3)) | 4;
  else
    v14 = 20;
  v15 = (int)((((v12 >> 1) & 0xFFFFFFF0) - 4) * v13);
  memcpy((void *)(*(_QWORD *)(*(_QWORD *)v4 + 56) + v15), (const void *)(*(_QWORD *)(v84 + 56) + v15), (int)(v14 * v13));
  v81 = (_BYTE *)(a2 + 77952);
  vp8_loop_filter_partial_frame(v82, (_BYTE *)(a2 + 77952), v10);
  v16 = *(int *)(a1 + 4) >> 4;
  v17 = v16 + 7;
  v18 = (2 * (v16 + (v16 < 0 ? 7 : 0))) & 0xFFFFFFF0;
  if (v17 >= 0xF)
    v19 = v18;
  else
    v19 = 16;
  v83 = v4;
  if (v19 < 1 || (v20 = *(_DWORD *)a1, *(int *)a1 < 1))
  {
    v22 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = *(_QWORD *)v4;
    v24 = ((uint64_t)*(int *)(*(_QWORD *)v4 + 4) >> 1) & 0xFFFFFFFFFFFFFFF0;
    v25 = *(_DWORD *)(*(_QWORD *)v4 + 16);
    v26 = *(_QWORD *)(*(_QWORD *)v4 + 56) + (int)v24 * (uint64_t)v25;
    v27 = *(_DWORD *)(a1 + 16);
    v28 = *(_QWORD *)(a1 + 56) + v27 * (uint64_t)(int)v24;
    do
    {
      if (v20 >= 1)
      {
        v29 = 0;
        do
        {
          v87 = 0;
          v22 += vpx_mse16x16(v28 + v29, *(unsigned int *)(a1 + 16), v26 + v29, *(unsigned int *)(v23 + 16), &v87);
          v29 += 16;
          v20 = *(_DWORD *)a1;
        }
        while (*(_DWORD *)a1 > (int)v29);
        v27 = *(_DWORD *)(a1 + 16);
        v25 = *(_DWORD *)(v23 + 16);
      }
      v28 += 16 * v27;
      v21 += 16;
      v26 += 16 * v25;
    }
    while (v21 < v19);
  }
  if (v10 > 10)
    v30 = -2;
  else
    v30 = -1;
  v31 = v30 + v10;
  v32 = v10;
  if (v30 + v10 >= v80)
  {
    v78 = v10;
    v34 = v4;
    while (1)
    {
      v35 = *(_DWORD *)(v84 + 4);
      v36 = *(_DWORD *)(v84 + 16);
      v37 = ((v35 >> 4) + 7) >= 0xF
          ? (16 * (((v35 >> 4) + (v35 >> 4 < 0 ? 7 : 0)) >> 3)) | 4
          : 20;
      v38 = (int)((((v35 >> 1) & 0xFFFFFFF0) - 4) * v36);
      memcpy((void *)(*(_QWORD *)(*(_QWORD *)v34 + 56) + v38), (const void *)(*(_QWORD *)(v84 + 56) + v38), (int)(v37 * v36));
      vp8_loop_filter_partial_frame(v82, v81, v31);
      v39 = *(int *)(a1 + 4) >> 4;
      v40 = v39 + 7;
      v41 = (2 * (v39 + (v39 < 0 ? 7 : 0))) & 0xFFFFFFF0;
      v42 = v40 >= 0xF ? v41 : 16;
      v85 = v31;
      if (v42 < 1)
        break;
      v43 = *(_DWORD *)a1;
      if (*(int *)a1 >= 1)
      {
        v44 = 0;
        v33 = 0;
        v45 = *(_QWORD *)v34;
        v46 = ((uint64_t)*(int *)(*(_QWORD *)v34 + 4) >> 1) & 0xFFFFFFFFFFFFFFF0;
        v47 = *(_DWORD *)(*(_QWORD *)v34 + 16);
        v48 = *(_QWORD *)(*(_QWORD *)v34 + 56) + (int)v46 * (uint64_t)v47;
        v49 = *(_DWORD *)(a1 + 16);
        v50 = *(_QWORD *)(a1 + 56) + v49 * (uint64_t)(int)v46;
        do
        {
          if (v43 >= 1)
          {
            v51 = 0;
            do
            {
              v88 = 0;
              v33 += vpx_mse16x16(v50 + v51, *(unsigned int *)(a1 + 16), v48 + v51, *(unsigned int *)(v45 + 16), &v88);
              v51 += 16;
              v43 = *(_DWORD *)a1;
            }
            while (*(_DWORD *)a1 > (int)v51);
            v49 = *(_DWORD *)(a1 + 16);
            v47 = *(_DWORD *)(v45 + 16);
          }
          v50 += 16 * v49;
          v44 += 16;
          v48 += 16 * v47;
        }
        while (v44 < v42);
LABEL_60:
        if (v33 >= v22)
          goto LABEL_67;
        goto LABEL_61;
      }
      v33 = 0;
      if (v22 <= 0)
      {
LABEL_67:
        v33 = v22;
        v31 = v85;
        v32 = v78;
        goto LABEL_68;
      }
LABEL_61:
      v32 = v85;
      if (v85 > 10)
        v52 = -2;
      else
        v52 = -1;
      v31 = v52 + v85;
      v78 = v85;
      v22 = v33;
      v34 = v83;
      if (v52 + v85 < v80)
        goto LABEL_69;
    }
    v33 = 0;
    goto LABEL_60;
  }
  v33 = v22;
LABEL_68:
  v34 = v83;
LABEL_69:
  v86 = v32;
  if (v32 == v34[419])
  {
    v53 = v31 <= 10 ? 1 : 2;
    v54 = v53 + v32;
    if (v54 < v77)
    {
      v55 = v33 - (v33 >> 10);
      do
      {
        v79 = v55;
        v56 = v54;
        v57 = *(_DWORD *)(v84 + 4);
        v58 = *(_DWORD *)(v84 + 16);
        if (((v57 >> 4) + 7) >= 0xF)
          v59 = (16 * (((v57 >> 4) + (v57 >> 4 < 0 ? 7 : 0)) >> 3)) | 4;
        else
          v59 = 20;
        v60 = (int)((((v57 >> 1) & 0xFFFFFFF0) - 4) * v58);
        memcpy((void *)(*(_QWORD *)(*(_QWORD *)v34 + 56) + v60), (const void *)(*(_QWORD *)(v84 + 56) + v60), (int)(v59 * v58));
        vp8_loop_filter_partial_frame(v82, v81, v56);
        v61 = *(int *)(a1 + 4) >> 4;
        v62 = v61 + 7;
        v63 = (2 * (v61 + (v61 < 0 ? 7 : 0))) & 0xFFFFFFF0;
        if (v62 >= 0xF)
          v64 = v63;
        else
          v64 = 16;
        if (v64 < 1)
        {
          v67 = 0;
        }
        else
        {
          v65 = *(_DWORD *)a1;
          if (*(int *)a1 < 1)
          {
            v67 = 0;
            v34 = v83;
            if (v79 <= 0)
              break;
            goto LABEL_91;
          }
          v66 = 0;
          v67 = 0;
          v68 = *(_QWORD *)v34;
          v69 = ((uint64_t)*(int *)(*(_QWORD *)v34 + 4) >> 1) & 0xFFFFFFFFFFFFFFF0;
          v70 = *(_DWORD *)(*(_QWORD *)v34 + 16);
          v71 = *(_QWORD *)(*(_QWORD *)v34 + 56) + (int)v69 * (uint64_t)v70;
          v72 = *(_DWORD *)(a1 + 16);
          v73 = *(_QWORD *)(a1 + 56) + v72 * (uint64_t)(int)v69;
          do
          {
            if (v65 >= 1)
            {
              v74 = 0;
              do
              {
                v89 = 0;
                v67 += vpx_mse16x16(v73 + v74, *(unsigned int *)(a1 + 16), v71 + v74, *(unsigned int *)(v68 + 16), &v89);
                v74 += 16;
                v65 = *(_DWORD *)a1;
              }
              while (*(_DWORD *)a1 > (int)v74);
              v72 = *(_DWORD *)(a1 + 16);
              v70 = *(_DWORD *)(v68 + 16);
            }
            v73 += 16 * v72;
            v66 += 16;
            v71 += 16 * v70;
          }
          while (v66 < v64);
        }
        v34 = v83;
        if (v67 >= v79)
          break;
LABEL_91:
        v55 = v67 - (v67 >> 10);
        if (v56 <= 10)
          v75 = 1;
        else
          v75 = 2;
        v54 = v75 + v56;
        v86 = v56;
      }
      while (v54 < v77);
    }
  }
  v76 = v80;
  if (v86 > v80)
    v76 = v86;
  if (v76 >= v77)
    v76 = v77;
  v34[419] = v76;
  *(_QWORD *)v34 = v84;
}

void vp8cx_pick_filter_level(uint64_t a1, uint64_t a2)
{
  int *v4;
  int v5;
  int v7;
  int *v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  const void *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int *v33;
  _DWORD *v34;
  signed int v35;
  signed int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  signed int v41;
  int v42;
  int v43;
  uint64_t v44;
  const void *v45;
  void *v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  const void *v61;
  void *v62;
  int v63;
  int v64;
  int v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _BYTE *v76;
  int v77;
  int v78;
  _DWORD *v79;
  uint64_t v80;
  _DWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  int v84;
  int *v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  _OWORD v96[16];
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v4 = (int *)(a2 + 109880);
  v5 = *(_DWORD *)(a2 + 111104);
  if (*(_DWORD *)(a2 + 114968) && *(_DWORD *)(a2 + 111572))
  {
    if (v5 >= 7 && *(_DWORD *)(a2 + 111576) != 0)
      goto LABEL_7;
  }
  else if (v5 >= 7)
  {
LABEL_7:
    if (v5 < 0x11)
      v7 = 1;
    else
      v7 = v5 >> 3;
    goto LABEL_12;
  }
  v7 = 0;
LABEL_12:
  v82 = (_DWORD *)(a2 + 143052);
  v8 = *(int **)v4;
  v81 = (_DWORD *)(a2 + 81931);
  v9 = *(_DWORD *)(a2 + 147536) > 8u;
  memset(v96, 0, 32);
  if (v9)
    v10 = 47;
  else
    v10 = 63;
  v79 = (_DWORD *)(a2 + 147536);
  v80 = a2 + 108032;
  memset(&v96[2], 0, 224);
  *(_QWORD *)v4 = a2 + 114992;
  v11 = *(_DWORD *)(a2 + 111060);
  if (v11)
    v11 = *(_DWORD *)(a2 + 114292);
  *(_DWORD *)(a2 + 111564) = v11;
  v12 = *(_DWORD *)(a2 + 111556);
  v77 = v10;
  v78 = v7;
  if (v12 >= v10)
    v13 = v10;
  else
    v13 = *(_DWORD *)(a2 + 111556);
  if (v12 >= v7)
    v14 = v13;
  else
    v14 = v7;
  v92 = v14;
  v15 = (const void *)*((_QWORD *)v8 + 7);
  v16 = *(void **)(a2 + 115048);
  v17 = v8[1];
  if ((v8[38] & 8) != 0)
  {
    if (v17 >= 1)
    {
      v19 = 0;
      v20 = (char *)(2 * (_QWORD)v16);
      v21 = (char *)(2 * (_QWORD)v15);
      do
      {
        memcpy(v20, v21, 2 * *v8);
        v21 += 2 * v8[4];
        v20 += 2 * v4[1282];
        ++v19;
      }
      while (v19 < v8[1]);
    }
  }
  else if (v17 >= 1)
  {
    v18 = 0;
    do
    {
      memcpy(v16, v15, *v8);
      v15 = (char *)v15 + v8[4];
      v16 = (char *)v16 + v4[1282];
      ++v18;
    }
    while (v18 < v8[1]);
  }
  *v81 = *v82;
  v76 = (_BYTE *)(a2 + 77952);
  vp8_loop_filter_frame_yonly(v80, (_BYTE *)(a2 + 77952), v92);
  v22 = *(_DWORD *)(a1 + 4);
  v85 = v4;
  if (v22 < 1 || (v23 = *(_DWORD *)a1, *(int *)a1 < 1))
  {
    v24 = 0;
  }
  else
  {
    v24 = 0;
    v25 = 0;
    v26 = *(int **)v4;
    v27 = *(_QWORD *)(*(_QWORD *)v4 + 56);
    v28 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v23 >= 1)
      {
        v29 = 0;
        do
        {
          v95 = 0;
          v24 += vpx_mse16x16(v28 + v29, *(unsigned int *)(a1 + 16), v27 + v29, v26[4], &v95);
          v29 += 16;
          v23 = *(_DWORD *)a1;
        }
        while (*(_DWORD *)a1 > (int)v29);
        v22 = *(_DWORD *)(a1 + 4);
      }
      v28 += 16 * *(int *)(a1 + 16);
      v27 += 16 * v26[4];
      v25 += 16;
    }
    while (v25 < v22);
  }
  v30 = v92;
  *((_DWORD *)v96 + v92) = v24;
  if ((int)v92 >= 16)
    v31 = v92 >> 2;
  else
    v31 = 4;
  if (v31)
  {
    v32 = 0;
    v33 = v85;
    v34 = v79;
    v36 = v77;
    v35 = v78;
    while (1)
    {
      v39 = (v24 >> (15 - (int)v30 / 8)) * v31;
      if (*v34 <= 0x13u)
        v39 = v39 * *v34 / 0x14;
      v38 = (int)(v31 + v30) >= v36 ? v36 : v31 + v30;
      v40 = (int)(v30 - v31) <= v35 ? v35 : v30 - v31;
      if (v32 <= 0 && (_DWORD)v40 != (_DWORD)v30)
        break;
      v40 = v30;
      if ((v32 & 0x80000000) == 0)
        goto LABEL_97;
LABEL_52:
      if ((int)v40 < (int)v30)
        v42 = -1;
      else
        v42 = 1;
      v31 >>= (_DWORD)v40 == (_DWORD)v30;
      if ((_DWORD)v40 == (_DWORD)v30)
        v32 = 0;
      else
        v32 = v42;
      v30 = v40;
      if (!v31)
        goto LABEL_116;
    }
    v43 = *((_DWORD *)v96 + v40);
    if (!v43)
    {
      v83 = v40;
      v75 = v32;
      v86 = v38;
      v90 = v31;
      v93 = v30;
      v44 = *(_QWORD *)v33;
      v45 = (const void *)*((_QWORD *)v8 + 7);
      v46 = *(void **)(*(_QWORD *)v33 + 56);
      v47 = v8[1];
      if ((v8[38] & 8) != 0)
      {
        if (v47 >= 1)
        {
          v49 = 0;
          v50 = (char *)(2 * (_QWORD)v46);
          v51 = (char *)(2 * (_QWORD)v45);
          do
          {
            memcpy(v50, v51, 2 * *v8);
            v51 += 2 * v8[4];
            v50 += 2 * *(int *)(v44 + 16);
            ++v49;
          }
          while (v49 < v8[1]);
        }
      }
      else if (v47 >= 1)
      {
        v48 = 0;
        do
        {
          memcpy(v46, v45, *v8);
          v45 = (char *)v45 + v8[4];
          v46 = (char *)v46 + *(int *)(v44 + 16);
          ++v48;
        }
        while (v48 < v8[1]);
      }
      *v81 = *v82;
      vp8_loop_filter_frame_yonly(v80, v76, v83);
      v52 = *(_DWORD *)(a1 + 4);
      v88 = v39;
      if (v52 < 1 || (v53 = *(_DWORD *)a1, *(int *)a1 < 1))
      {
        v43 = 0;
      }
      else
      {
        v43 = 0;
        v54 = 0;
        v55 = *(_QWORD *)v85;
        v56 = *(_QWORD *)(*(_QWORD *)v85 + 56);
        v57 = *(_QWORD *)(a1 + 56);
        do
        {
          if (v53 >= 1)
          {
            v58 = 0;
            do
            {
              v95 = 0;
              v43 += vpx_mse16x16(v57 + v58, *(unsigned int *)(a1 + 16), v56 + v58, *(unsigned int *)(v55 + 16), &v95);
              v58 += 16;
              v53 = *(_DWORD *)a1;
            }
            while (*(_DWORD *)a1 > (int)v58);
            v52 = *(_DWORD *)(a1 + 4);
          }
          v57 += 16 * *(int *)(a1 + 16);
          v56 += 16 * *(int *)(v55 + 16);
          v54 += 16;
        }
        while (v54 < v52);
      }
      LODWORD(v40) = v83;
      v33 = v85;
      *((_DWORD *)v96 + v83) = v43;
      v34 = v79;
      v36 = v77;
      v35 = v78;
      v31 = v90;
      LODWORD(v30) = v93;
      v38 = v86;
      v39 = v88;
      v32 = v75;
    }
    if (v43 >= v24)
      v59 = v24;
    else
      v59 = v43;
    if ((int)(v43 - v39) >= v24)
    {
      v40 = v30;
    }
    else
    {
      v24 = v59;
      v40 = v40;
    }
    if (v32 < 0)
      goto LABEL_52;
LABEL_97:
    if (v38 != (_DWORD)v30)
    {
      v37 = *((_DWORD *)v96 + v38);
      if (!v37)
      {
        v84 = v40;
        v89 = v39;
        v91 = v31;
        v94 = v30;
        v60 = *(_QWORD *)v33;
        v61 = (const void *)*((_QWORD *)v8 + 7);
        v62 = *(void **)(*(_QWORD *)v33 + 56);
        v63 = v8[1];
        if ((v8[38] & 8) != 0)
        {
          if (v63 >= 1)
          {
            v65 = 0;
            v66 = (char *)(2 * (_QWORD)v62);
            v67 = (char *)(2 * (_QWORD)v61);
            do
            {
              memcpy(v66, v67, 2 * *v8);
              v67 += 2 * v8[4];
              v66 += 2 * *(int *)(v60 + 16);
              ++v65;
            }
            while (v65 < v8[1]);
          }
        }
        else if (v63 >= 1)
        {
          v64 = 0;
          do
          {
            memcpy(v62, v61, *v8);
            v61 = (char *)v61 + v8[4];
            v62 = (char *)v62 + *(int *)(v60 + 16);
            ++v64;
          }
          while (v64 < v8[1]);
        }
        *v81 = *v82;
        vp8_loop_filter_frame_yonly(v80, v76, v38);
        v68 = *(_DWORD *)(a1 + 4);
        v87 = v38;
        if (v68 < 1 || (v69 = *(_DWORD *)a1, *(int *)a1 < 1))
        {
          v37 = 0;
        }
        else
        {
          v37 = 0;
          v70 = 0;
          v71 = *(_QWORD *)v85;
          v72 = *(_QWORD *)(*(_QWORD *)v85 + 56);
          v73 = *(_QWORD *)(a1 + 56);
          do
          {
            if (v69 >= 1)
            {
              v74 = 0;
              do
              {
                v95 = 0;
                v37 += vpx_mse16x16(v73 + v74, *(unsigned int *)(a1 + 16), v72 + v74, *(unsigned int *)(v71 + 16), &v95);
                v74 += 16;
                v69 = *(_DWORD *)a1;
              }
              while (*(_DWORD *)a1 > (int)v74);
              v68 = *(_DWORD *)(a1 + 4);
            }
            v73 += 16 * *(int *)(a1 + 16);
            v72 += 16 * *(int *)(v71 + 16);
            v70 += 16;
          }
          while (v70 < v68);
        }
        v33 = v85;
        v38 = v87;
        *((_DWORD *)v96 + v87) = v37;
        v34 = v79;
        v36 = v77;
        v35 = v78;
        v31 = v91;
        LODWORD(v30) = v94;
        v39 = v89;
        LODWORD(v40) = v84;
      }
      v41 = v24 - v39;
      if (v37 < (int)(v24 - v39))
        v24 = v37;
      if (v37 >= v41)
        v40 = v40;
      else
        v40 = v38;
    }
    goto LABEL_52;
  }
  LODWORD(v40) = v92;
  v33 = v85;
LABEL_116:
  v33[419] = v40;
  *(_QWORD *)v33 = v8;
}

int8x8_t *vp8_deblock(int8x8_t *result, uint64_t a2, uint64_t a3, int a4, int32x4_t a5, double a6, double a7, double a8, double a9, int8x16_t a10, int32x4_t a11, int8x16_t a12)
{
  double v14;
  double v15;
  int v16;
  int8x8_t *v17;
  __int32 v18;
  uint64_t v19;
  int8x8_t v20;
  int32x4_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int8x16_t v34;
  int32x4_t v35;
  int8x16_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;

  v14 = 0.306;
  v15 = 0.5;
  *(double *)a5.i64 = (double)a4 * -0.0067 * (double)a4
                    + (double)a4 * 0.00006 * (double)a4 * (double)a4
                    + (double)a4 * 0.306
                    + 0.0065
                    + 0.5;
  v16 = (int)*(double *)a5.i64;
  if ((int)*(double *)a5.i64 < 1)
    return (int8x8_t *)vp8_yv12_copy_frame_c((int *)a2, a3);
  v17 = result;
  if (result[380].i32[1] >= 1)
  {
    v18 = 0;
    v41 = (uint64_t)result[377];
    v19 = v41 + 16 * result[381].i32[0];
    v20 = result[388];
    do
    {
      if (v17[381].i32[0] >= 1)
      {
        v37 = 0;
        v38 = (_QWORD *)v41;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)&v20 + 9))
            v39 = v16 >> 1;
          else
            v39 = v16;
          v40 = 0x101010101010101 * v39;
          *v38 = v40;
          v38[1] = v40;
          v38 += 2;
          *(_QWORD *)(v19 + 8 * v37) = v40;
          *(_QWORD *)&v20 += 76;
          ++v37;
        }
        while ((int)v37 < v17[381].i32[0]);
      }
      *(_QWORD *)&v20 += 76;
      vpx_post_proc_down_and_across_mb_row_neon((int8x8_t *)(*(_QWORD *)(a2 + 56) + *(int *)(a2 + 16) * (uint64_t)(16 * v18)), (int8x8_t *)(*(_QWORD *)(a3 + 56) + *(int *)(a3 + 16) * 16 * v18), *(_DWORD *)(a2 + 16), *(_DWORD *)(a3 + 16), *(_DWORD *)a2, v41, 16, a5, v15, v14, a8, a9, a10, a11, a12);
      vpx_post_proc_down_and_across_mb_row_neon((int8x8_t *)(*(_QWORD *)(a2 + 64) + *(int *)(a2 + 36) * 8 * v18), (int8x8_t *)(*(_QWORD *)(a3 + 64) + *(int *)(a3 + 36) * (uint64_t)(8 * v18)), *(_DWORD *)(a2 + 36), *(_DWORD *)(a3 + 36), *(_DWORD *)(a2 + 20), v19, 8, v21, v22, v23, v24, v25, v26, v27, v28);
      result = vpx_post_proc_down_and_across_mb_row_neon((int8x8_t *)(*(_QWORD *)(a2 + 72) + *(int *)(a2 + 36) * (uint64_t)(8 * v18)), (int8x8_t *)(*(_QWORD *)(a3 + 72) + *(int *)(a3 + 36) * (uint64_t)(8 * v18)), *(_DWORD *)(a2 + 36), *(_DWORD *)(a3 + 36), *(_DWORD *)(a2 + 20), v19, 8, v29, v30, v31, v32, v33, v34, v35, v36);
      ++v18;
    }
    while (v18 < v17[380].i32[1]);
  }
  return result;
}

void *vp8_de_noise(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v6;
  void *v7;
  void *result;
  int32x4_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int8x16_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int v17;
  int v18;
  int v19;
  int8x8_t *v20;
  int v21;
  int8x8_t *v22;
  int32x4_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int v31;
  int8x8_t *v32;
  int32x4_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  int8x16_t v38;
  int32x4_t v39;
  int8x16_t v40;
  int v41;
  int v42;
  int8x8_t *v43;

  v6 = *(_DWORD *)(a1 + 3044);
  v7 = *(void **)(a1 + 3016);
  result = memset(v7, (int)((double)a3 * -0.0067 * (double)a3+ (double)a3 * 0.00006 * (double)a3 * (double)a3+ (double)a3 * 0.306+ 0.0065+ 0.5), 16 * *(int *)(a1 + 3048));
  if (v6 >= 1)
  {
    if (a4 == 1)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        v19 = *(_DWORD *)(a2 + 16);
        v20 = (int8x8_t *)(*(_QWORD *)(a2 + 56) + v18 * v19);
        vpx_post_proc_down_and_across_mb_row_neon(v20, v20, v19, v19, *(_DWORD *)a2, (uint64_t)v7, 16, v9, v10, v11, v12, v13, v14, v15, v16);
        v21 = *(_DWORD *)(a2 + 36);
        v22 = (int8x8_t *)(*(_QWORD *)(a2 + 64) + v21 * (uint64_t)v17);
        vpx_post_proc_down_and_across_mb_row_neon(v22, v22, v21, v21, *(_DWORD *)(a2 + 20), (uint64_t)v7, 8, v23, v24, v25, v26, v27, v28, v29, v30);
        v31 = *(_DWORD *)(a2 + 36);
        v32 = (int8x8_t *)(*(_QWORD *)(a2 + 72) + v31 * (uint64_t)v17);
        result = vpx_post_proc_down_and_across_mb_row_neon(v32, v32, v31, v31, *(_DWORD *)(a2 + 20), (uint64_t)v7, 8, v33, v34, v35, v36, v37, v38, v39, v40);
        v18 += 16;
        v17 += 8;
        --v6;
      }
      while (v6);
    }
    else
    {
      v41 = 0;
      do
      {
        v42 = *(_DWORD *)(a2 + 16);
        v43 = (int8x8_t *)(*(_QWORD *)(a2 + 56) + v41 * v42);
        result = vpx_post_proc_down_and_across_mb_row_neon(v43, v43, v42, v42, *(_DWORD *)a2, (uint64_t)v7, 16, v9, v10, v11, v12, v13, v14, v15, v16);
        v41 += 16;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t vp8_post_proc_frame(uint64_t a1, uint64_t a2, int *a3, int32x4_t a4, double a5, double a6, double a7, double a8, int8x16_t a9, int32x4_t a10, int8x16_t a11)
{
  _OWORD *v11;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int32x4_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int8x16_t v29;
  int32x4_t v30;
  int8x16_t v31;
  uint64_t result;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  void *v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  int v53;
  double v54;
  _BYTE *v55;
  int v56;
  uint64_t v57;
  double v58;
  double v59;
  signed int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int8x16_t v68;
  int8x16_t *v69;
  unint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x16_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int8x16_t v81;
  int8x16_t *v82;
  uint64_t i;
  int32x4_t v85;
  uint64_t v86;
  int32x4_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  int8x16_t *v92;
  int8x16_t *v93;
  int8x16_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int v102;
  int v103;
  int32x4_t v104;
  int32x4_t v105;
  uint64_t v106;
  uint64_t v107;
  int8x16_t *v108;
  uint64_t v109;
  _BYTE v110[256];
  uint64_t v111;
  int8x16x2_t v112;
  int8x16x4_t v113;

  v111 = *MEMORY[0x24BDAC8D0];
  v11 = *(_OWORD **)(a1 + 1848);
  if (!v11)
    return 0xFFFFFFFFLL;
  v14 = *a3;
  v15 = 7158278830 * *(_DWORD *)(a1 + 3524);
  v16 = HIDWORD(v15) + (v15 >> 63);
  if (v16 >= 63)
    v17 = 63;
  else
    v17 = v16;
  if (!v14)
  {
    result = 0;
    v33 = v11[1];
    *(_OWORD *)a2 = *v11;
    *(_OWORD *)(a2 + 16) = v33;
    v34 = v11[2];
    v35 = v11[3];
    v36 = v11[5];
    *(_OWORD *)(a2 + 64) = v11[4];
    *(_OWORD *)(a2 + 80) = v36;
    *(_OWORD *)(a2 + 32) = v34;
    *(_OWORD *)(a2 + 48) = v35;
    v37 = v11[6];
    v38 = v11[7];
    v39 = v11[9];
    *(_OWORD *)(a2 + 128) = v11[8];
    *(_OWORD *)(a2 + 144) = v39;
    *(_OWORD *)(a2 + 96) = v37;
    *(_OWORD *)(a2 + 112) = v38;
    *(_DWORD *)a2 = *(_DWORD *)(a1 + 1824);
    v40 = *(_DWORD *)(a1 + 1828);
    *(_DWORD *)(a2 + 4) = v40;
    *(_DWORD *)(a2 + 24) = v40 / 2;
    *(_DWORD *)(a1 + 5848) = *(_DWORD *)(a1 + 3072);
    *(_DWORD *)(a1 + 5852) = 1;
    return result;
  }
  v18 = a3[1];
  v19 = a3[2];
  if ((v14 & 4) == 0 || *(_QWORD *)(a1 + 5864))
  {
    v106 = a2;
    if ((v14 & 8) == 0)
      goto LABEL_36;
    goto LABEL_9;
  }
  v41 = *(int *)(a1 + 1824);
  v42 = v41 + 256;
  if ((_DWORD)v41 == -256)
  {
    v43 = 23;
  }
  else
  {
    if ((int)v41 < -256)
      goto LABEL_72;
    v43 = v41 + 279;
    if ((unint64_t)(v41 + 279) > 0x10000000000)
      goto LABEL_72;
  }
  v44 = malloc_type_malloc(v43, 0x74AD08B5uLL);
  if (!v44 || (v45 = ((unint64_t)v44 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v45 - 8) = v44, !v45))
  {
LABEL_72:
    *(_QWORD *)(a1 + 5864) = 0;
    return 1;
  }
  bzero((void *)(((unint64_t)v44 + 23) & 0xFFFFFFFFFFFFFFF0), v42);
  *(_QWORD *)(a1 + 5864) = v45;
  v106 = a2;
  if ((v14 & 8) == 0)
    goto LABEL_36;
LABEL_9:
  if (!*(_DWORD *)(a1 + 3008) && (v14 & 3) != 0)
  {
    v20 = (*(_DWORD *)(a1 + 1824) + 15) & 0xFFFFFFF0;
    v21 = (*(_DWORD *)(a1 + 1828) + 15) & 0xFFFFFFF0;
    if (*(_QWORD *)(a1 + 2944))
    {
      v22 = *(_QWORD *)(a1 + 2936);
      if (v22)
        free(*(void **)(v22 - 8));
    }
    *(_OWORD *)(a1 + 2976) = 0u;
    *(_OWORD *)(a1 + 2992) = 0u;
    *(_OWORD *)(a1 + 2944) = 0u;
    *(_OWORD *)(a1 + 2960) = 0u;
    *(_OWORD *)(a1 + 2912) = 0u;
    *(_OWORD *)(a1 + 2928) = 0u;
    *(_OWORD *)(a1 + 2880) = 0u;
    *(_OWORD *)(a1 + 2896) = 0u;
    *(_OWORD *)(a1 + 2848) = 0u;
    *(_OWORD *)(a1 + 2864) = 0u;
    if (vp8_yv12_realloc_frame_buffer(a1 + 2848, v20, v21, 32))
      vpx_internal_error(a1, 2, "Failed to allocate MFQE framebuffer");
    *(_DWORD *)(a1 + 3008) = 1;
    memset(*(void **)(a1 + 2936), 128, *(_QWORD *)(a1 + 2800));
  }
  if (!*(_DWORD *)(a1 + 5852)
    || *(_DWORD *)(a1 + 5820) < 0xBu
    || (v23 = *(_DWORD *)(a1 + 5848), v23 > 59)
    || *(_DWORD *)(a1 + 3072) - v23 < 20)
  {
LABEL_36:
    if ((v14 & 2) != 0)
    {
      v46 = v17 + 10 * v18 - 50;
      vp8_deblock((int8x8_t *)a1, *(_QWORD *)(a1 + 1848), a1 + 2688, v46, a4, a5, a6, a7, a8, a9, a10, a11);
      if (v46 <= 20)
        v47 = 20;
      else
        v47 = v17 + 10 * v18 - 50;
      v48 = 10 * v47;
      v49 = v48 - 500;
      v50 = v48 - 493;
      if (v49 >= 0)
        v50 = v49;
      v51 = (1431655766 * (unint64_t)(((v50 >> 3) + 50) * ((v50 >> 3) + 50))) >> 32;
      vpx_mbpost_proc_across_ip_neon(*(unsigned __int8 **)(a1 + 2744), *(_DWORD *)(a1 + 2704), *(_DWORD *)(a1 + 2692), *(_DWORD *)(a1 + 2688), (1431655766 * (unint64_t)(((v50 >> 3) + 50) * ((v50 >> 3) + 50))) >> 32);
      vpx_mbpost_proc_down_neon(*(uint8x8_t **)(a1 + 2744), *(_DWORD *)(a1 + 2704), *(_DWORD *)(a1 + 2692), *(_DWORD *)(a1 + 2688), v51);
      *(_DWORD *)(a1 + 5848) = *(_DWORD *)(a1 + 3072);
      *(_DWORD *)(a1 + 5852) = 1;
      if ((v14 & 4) == 0)
        goto LABEL_107;
    }
    else if ((v14 & 1) != 0)
    {
      vp8_deblock((int8x8_t *)a1, *(_QWORD *)(a1 + 1848), a1 + 2688, v17, a4, a5, a6, a7, a8, a9, a10, a11);
      *(_DWORD *)(a1 + 5848) = *(_DWORD *)(a1 + 3072);
      *(_DWORD *)(a1 + 5852) = 1;
      if ((v14 & 4) == 0)
        goto LABEL_107;
    }
    else
    {
      vp8_yv12_copy_frame_c(*(int **)(a1 + 1848), a1 + 2688);
      *(_DWORD *)(a1 + 5848) = *(_DWORD *)(a1 + 3072);
      *(_DWORD *)(a1 + 5852) = 1;
      if ((v14 & 4) == 0)
        goto LABEL_107;
    }
    goto LABEL_48;
  }
  vp8_multiframe_quality_enhance((unsigned __int8 *)a1);
  if ((v14 & 3) != 0 && *(_DWORD *)(a1 + 3008))
  {
    vp8_yv12_copy_frame_c((int *)(a1 + 2688), a1 + 2848);
    if ((v14 & 2) != 0)
    {
      v103 = v17 + 10 * v18 - 50;
      vp8_deblock((int8x8_t *)a1, a1 + 2848, a1 + 2688, v103, v24, v25, v26, v27, v28, v29, v30, v31);
      vp8_de_mblock(a1 + 2688, v103);
    }
    else if ((v14 & 1) != 0)
    {
      vp8_deblock((int8x8_t *)a1, a1 + 2848, a1 + 2688, v17, v24, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  *(_DWORD *)(a1 + 5848) = (3 * *(_DWORD *)(a1 + 5848) + *(_DWORD *)(a1 + 3072)) >> 2;
  *(_DWORD *)(a1 + 5852) = 1;
  if ((v14 & 4) == 0)
    goto LABEL_107;
LABEL_48:
  if (*(_DWORD *)(a1 + 5840) == v17 && *(_DWORD *)(a1 + 5844) == v19)
  {
    v52 = *(_DWORD *)(a1 + 5856);
    goto LABEL_78;
  }
  v53 = 0;
  LODWORD(v109) = v19;
  v54 = (double)v19 + 0.5 + (double)v17 * 0.6 / 63.0;
  v55 = *(_BYTE **)(a1 + 5864);
  v56 = *(_DWORD *)(a1 + 1824);
  v57 = (v56 + 256);
  v58 = 1.0 / (v54 * 2.50662827);
  v59 = v54 * (v54 + v54);
  v60 = -32;
  while (1)
  {
    v61 = (int)(v58 * exp(-((double)v60 * (double)v60) / v59) * 256.0 + 0.5);
    if ((_DWORD)v61)
      break;
LABEL_54:
    if (++v60 == 32)
    {
      if (v53 <= 255)
        bzero(&v110[v53], (255 - v53) + 1);
      goto LABEL_75;
    }
  }
  if ((int)v61 < 1)
  {
    LODWORD(v61) = 0;
LABEL_53:
    v53 += v61;
    goto LABEL_54;
  }
  if (v53 <= 256)
    v62 = 256;
  else
    v62 = v53;
  v63 = (v62 - v53);
  v64 = v61 - 1;
  if (v61 - 1 >= v63)
    v64 = v63;
  if (v64 >= 0x20)
  {
    v66 = v64 + 1;
    v67 = v66 & 0x1F;
    if ((v66 & 0x1F) == 0)
      v67 = 32;
    v65 = v66 - v67;
    v68 = vdupq_n_s8(v60);
    v69 = (int8x16_t *)&v110[v53 + 16];
    v70 = v65;
    do
    {
      v69[-1] = v68;
      *v69 = v68;
      v69 += 2;
      v70 -= 32;
    }
    while (v70);
  }
  else
  {
    v65 = 0;
  }
  v71 = v61 - v65;
  v72 = &v110[v65 + v53];
  v73 = v63 - v65;
  while (v73)
  {
    *v72++ = v60;
    --v73;
    if (!--v71)
      goto LABEL_53;
  }
LABEL_75:
  if (v56 >= -255)
  {
    do
    {
      *v55++ = v110[rand()];
      --v57;
    }
    while (v57);
  }
  v52 = -v110[0];
  *(_DWORD *)(a1 + 5856) = v52;
  *(_DWORD *)(a1 + 5840) = v17;
  *(_DWORD *)(a1 + 5844) = v109;
LABEL_78:
  v74 = *(unsigned int *)(a1 + 2692);
  if ((int)v74 < 1)
    goto LABEL_107;
  v75 = *(unsigned int *)(a1 + 2688);
  if ((int)v75 > 0)
  {
    v76 = 0;
    v77 = *(int8x16_t **)(a1 + 2744);
    v78 = *(int *)(a1 + 2704);
    v109 = *(_QWORD *)(a1 + 5864);
    v107 = v109 + v75;
    v79 = v75 & 0xFFFFFFF8;
    v108 = v77;
    v105 = vdupq_n_s32(v52);
    v104 = vdupq_n_s32(2 * v52);
    while (1)
    {
      v80 = rand();
      v82 = (int8x16_t *)(v109 + v80);
      if (v75 < 8)
      {
        i = 0;
        goto LABEL_93;
      }
      if ((unint64_t)v108->u64 + v76 * v78 < v107 + v80 && v82 < (int8x16_t *)&v108->i8[v75 + v76 * v78])
      {
        for (i = 0; i != v75; ++i)
        {
LABEL_93:
          v88 = v77->u8[i] - v52;
          if (v88 >= 255)
            v88 = 255;
          v89 = (v88 & ~(v88 >> 31)) + 2 * v52;
          if (v89 >= 255)
            v89 = 255;
          v90 = (v89 & ~(v89 >> 31)) - v52;
          if (v90 >= 255)
            v90 = 255;
          v77->i8[i] = v82->i8[i] + (v90 & ~(v90 >> 31));
        }
        goto LABEL_81;
      }
      v85.i64[0] = 0xFF000000FFLL;
      v85.i64[1] = 0xFF000000FFLL;
      if (v75 >= 0x10)
      {
        v91 = v75 & 0xFFFFFFF0;
        v92 = v82;
        v93 = v77;
        do
        {
          v113.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vsubq_s32(vmaxq_s32(vminq_s32(vaddq_s32(vmaxq_s32(vminq_s32(vsubq_s32((int32x4_t)vqtbl1q_s8(*v93, (int8x16_t)xmmword_208F04F30), v105), v85), (int32x4_t)0), v104), v85), (int32x4_t)0), v105), v85), (int32x4_t)0);
          v113.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vsubq_s32(vmaxq_s32(vminq_s32(vaddq_s32(vmaxq_s32(vminq_s32(vsubq_s32((int32x4_t)vqtbl1q_s8(*v93, (int8x16_t)xmmword_208F04F40), v105), v85), (int32x4_t)0), v104), v85), (int32x4_t)0), v105), v85), (int32x4_t)0);
          v113.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vsubq_s32(vmaxq_s32(vminq_s32(vaddq_s32(vmaxq_s32(vminq_s32(vsubq_s32((int32x4_t)vqtbl1q_s8(*v93, (int8x16_t)xmmword_208F04F50), v105), v85), (int32x4_t)0), v104), v85), (int32x4_t)0), v105), v85), (int32x4_t)0);
          v94 = *v92++;
          v113.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vsubq_s32(vmaxq_s32(vminq_s32(vaddq_s32(vmaxq_s32(vminq_s32(vsubq_s32((int32x4_t)vqtbl1q_s8(*v93, (int8x16_t)xmmword_208F04F20), v105), v85), (int32x4_t)0), v104), v85), (int32x4_t)0), v105), v85), (int32x4_t)0);
          v81 = vaddq_s8(v94, vqtbl4q_s8(v113, (int8x16_t)xmmword_208F05040));
          *v93++ = v81;
          v91 -= 16;
        }
        while (v91);
        if ((v75 & 0xFFFFFFF0) == v75)
          goto LABEL_81;
        i = v75 & 0xFFFFFFF0;
        v86 = i;
        if ((v75 & 8) == 0)
          goto LABEL_93;
      }
      else
      {
        v86 = 0;
      }
      do
      {
        v81.i64[0] = *(uint64_t *)((char *)v77->i64 + v86);
        v87 = (int32x4_t)vqtbl1q_s8(v81, (int8x16_t)xmmword_208F04F50);
        v81 = (int8x16_t)vminq_s32(vsubq_s32(vmaxq_s32(vminq_s32(vaddq_s32(vmaxq_s32(vminq_s32(vsubq_s32((int32x4_t)vqtbl1q_s8(v81, (int8x16_t)xmmword_208F04F40), v105), v85), (int32x4_t)0), v104), v85), (int32x4_t)0), v105), v85);
        v112.val[1] = (int8x16_t)vmaxq_s32((int32x4_t)v81, (int32x4_t)0);
        v112.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vsubq_s32(vmaxq_s32(vminq_s32(vaddq_s32(vmaxq_s32(vminq_s32(vsubq_s32(v87, v105), v85), (int32x4_t)0), v104), v85), (int32x4_t)0), v105), v85), (int32x4_t)0);
        *(int8x8_t *)&v77->i8[v86] = vadd_s8(*(int8x8_t *)&v82->i8[v86], (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v112, (int8x16_t)xmmword_208F05050));
        v86 += 8;
      }
      while (v79 != v86);
      i = v75 & 0x7FFFFFF8;
      if (v79 != v75)
        goto LABEL_93;
LABEL_81:
      ++v76;
      v77 = (int8x16_t *)((char *)v77 + v78);
      if (v76 == v74)
        goto LABEL_107;
    }
  }
  do
  {
    rand();
    LODWORD(v74) = v74 - 1;
  }
  while ((_DWORD)v74);
LABEL_107:
  result = 0;
  v95 = *(_OWORD *)(a1 + 2704);
  *(_OWORD *)v106 = *(_OWORD *)(a1 + 2688);
  *(_OWORD *)(v106 + 16) = v95;
  v96 = *(_OWORD *)(a1 + 2720);
  v97 = *(_OWORD *)(a1 + 2736);
  v98 = *(_OWORD *)(a1 + 2768);
  *(_OWORD *)(v106 + 64) = *(_OWORD *)(a1 + 2752);
  *(_OWORD *)(v106 + 80) = v98;
  *(_OWORD *)(v106 + 32) = v96;
  *(_OWORD *)(v106 + 48) = v97;
  v99 = *(_OWORD *)(a1 + 2784);
  v100 = *(_OWORD *)(a1 + 2800);
  v101 = *(_OWORD *)(a1 + 2832);
  *(_OWORD *)(v106 + 128) = *(_OWORD *)(a1 + 2816);
  *(_OWORD *)(v106 + 144) = v101;
  *(_OWORD *)(v106 + 96) = v99;
  *(_OWORD *)(v106 + 112) = v100;
  *(_DWORD *)v106 = *(_DWORD *)(a1 + 1824);
  v102 = *(_DWORD *)(a1 + 1828);
  *(_DWORD *)(v106 + 4) = v102;
  *(_DWORD *)(v106 + 24) = v102 / 2;
  return result;
}

uint8x8_t *vp8_de_mblock(uint64_t a1, int a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;

  v3 = *(unsigned __int8 **)(a1 + 56);
  if (a2 <= 20)
    v4 = 20;
  else
    v4 = a2;
  v5 = 10 * v4;
  v6 = v5 - 500;
  v7 = v5 - 493;
  if (v6 >= 0)
    v7 = v6;
  v8 = (1431655766 * (unint64_t)(((v7 >> 3) + 50) * ((v7 >> 3) + 50))) >> 32;
  vpx_mbpost_proc_across_ip_neon(v3, *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 4), *(_DWORD *)a1, (1431655766 * (unint64_t)(((v7 >> 3) + 50) * ((v7 >> 3) + 50))) >> 32);
  return vpx_mbpost_proc_down_neon(*(uint8x8_t **)(a1 + 56), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 4), *(_DWORD *)a1, v8);
}

unint64_t tree_merge_probs_impl(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t result;
  unsigned int v17;
  unint64_t v18;

  v10 = *(char *)(a2 + a1);
  if (v10 <= 0)
  {
    v11 = *(_DWORD *)(a4 + 4 * -v10);
    v12 = *(char *)(a2 + a1 + 1);
    if (v12 > 0)
    {
LABEL_3:
      v13 = tree_merge_probs_impl();
      v14 = (unint64_t)a1 >> 1;
      v15 = *(unsigned __int8 *)(a3 + v14);
      result = v13 + v11;
      if (!(_DWORD)result)
        goto LABEL_8;
      goto LABEL_4;
    }
  }
  else
  {
    v11 = tree_merge_probs_impl();
    v12 = *(char *)(a2 + a1 + 1);
    if (v12 > 0)
      goto LABEL_3;
  }
  v14 = (unint64_t)a1 >> 1;
  v15 = *(unsigned __int8 *)(a3 + v14);
  result = *(_DWORD *)(a4 + 4 * -v12) + v11;
  if (!(_DWORD)result)
    goto LABEL_8;
LABEL_4:
  if (result >= 0x14)
    v17 = 20;
  else
    v17 = result;
  v18 = ((result >> 1) + ((unint64_t)v11 << 8)) / result;
  v15 = ((((_DWORD)v18 == 0) | ((255 - v18) >> 23) | v18) * count_to_update_factor[v17]
       + (256 - count_to_update_factor[v17]) * v15
       + 128) >> 8;
LABEL_8:
  *(_BYTE *)(a5 + v14) = v15;
  return result;
}

uint64_t get_sse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int16x8_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint64_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  int16x8_t v47;
  int16x8_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;

  v7 = a3;
  v9 = a1;
  v10 = a5 + 15;
  if (a5 >= 0)
    v10 = a5;
  v11 = a5 - (v10 & 0xFFFFFFF0);
  v12 = a6 + 15;
  if (a6 >= 0)
    v12 = a6;
  v13 = a6 - (v12 & 0xFFFFFFF0);
  v14 = 0;
  if ((int)v11 >= 1 && a6 >= 1)
  {
    v16 = 0;
    v17 = (int)(v10 & 0xFFFFFFF0);
    v18 = a3 + v17;
    v19 = a1 + v17;
    do
    {
      v20 = 0;
      do
      {
        v14 += (*(unsigned __int8 *)(v19 + v20) - *(unsigned __int8 *)(v18 + v20))
             * (*(unsigned __int8 *)(v19 + v20) - *(unsigned __int8 *)(v18 + v20));
        ++v20;
      }
      while (v11 != v20);
      v19 += (int)a2;
      v18 += (int)a4;
      ++v16;
    }
    while (v16 != a6);
  }
  if (v13 >= 1)
  {
    v21 = v10 & 0xFFFFFFF0;
    if ((int)v21 >= 1)
    {
      v22 = 0;
      v23 = 0;
      v24 = a3 + (int)a4 * (uint64_t)(int)(v12 & 0xFFFFFFF0);
      v25 = a1 + (int)a2 * (uint64_t)(int)(v12 & 0xFFFFFFF0);
      v26 = v10 & 0xFFFFFFF0;
      while (1)
      {
        if (v21 >= 8)
        {
          if (v21 >= 0x10)
          {
            v36 = 0;
            v37 = 0uLL;
            v38 = (int64x2_t)(unint64_t)v22;
            v39 = 0uLL;
            v40 = 0uLL;
            v41 = 0uLL;
            v42 = 0uLL;
            v43 = 0uLL;
            v44 = 0uLL;
            do
            {
              v45 = *(uint8x16_t *)(v25 + v36);
              v46 = *(uint8x16_t *)(v24 + v36);
              v47 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v45.i8, *(uint8x8_t *)v46.i8);
              v48 = (int16x8_t)vsubl_high_u8(v45, v46);
              v49 = (uint32x4_t)vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v48.i8);
              v50 = (uint32x4_t)vmull_high_s16(v47, v47);
              v51 = (uint32x4_t)vmull_high_s16(v48, v48);
              v52 = (uint32x4_t)vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v47.i8);
              v40 = (int64x2_t)vaddw_high_u32((uint64x2_t)v40, v50);
              v42 = (int64x2_t)vaddw_high_u32((uint64x2_t)v42, v49);
              v41 = (int64x2_t)vaddw_u32((uint64x2_t)v41, *(uint32x2_t *)v49.i8);
              v39 = (int64x2_t)vaddw_u32((uint64x2_t)v39, *(uint32x2_t *)v50.i8);
              v37 = (int64x2_t)vaddw_high_u32((uint64x2_t)v37, v52);
              v43 = (int64x2_t)vaddw_u32((uint64x2_t)v43, *(uint32x2_t *)v51.i8);
              v38 = (int64x2_t)vaddw_u32((uint64x2_t)v38, *(uint32x2_t *)v52.i8);
              v44 = (int64x2_t)vaddw_high_u32((uint64x2_t)v44, v51);
              v36 += 16;
            }
            while (v26 != v36);
            v22 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v38, v41), vaddq_s64(v39, v43)), vaddq_s64(vaddq_s64(v37, v42), vaddq_s64(v40, v44))));
            if (v26 == v21)
              goto LABEL_16;
            v27 = v10 & 0xFFFFFFF0;
          }
          else
          {
            v28 = 0;
            v29 = 0uLL;
            v30 = (int64x2_t)(unint64_t)v22;
            v31 = 0uLL;
            v32 = 0uLL;
            do
            {
              v33 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v25 + v28), *(uint8x8_t *)(v24 + v28));
              v34 = (uint32x4_t)vmull_high_s16(v33, v33);
              v35 = (uint32x4_t)vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v33.i8);
              v32 = (int64x2_t)vaddw_high_u32((uint64x2_t)v32, v34);
              v31 = (int64x2_t)vaddw_u32((uint64x2_t)v31, *(uint32x2_t *)v34.i8);
              v29 = (int64x2_t)vaddw_high_u32((uint64x2_t)v29, v35);
              v30 = (int64x2_t)vaddw_u32((uint64x2_t)v30, *(uint32x2_t *)v35.i8);
              v28 += 8;
            }
            while (v26 != v28);
            v22 = vaddvq_s64(vaddq_s64(vaddq_s64(v30, v31), vaddq_s64(v29, v32)));
            v27 = v10 & 0xFFFFFFF0;
            if (v26 == v21)
              goto LABEL_16;
          }
        }
        else
        {
          v27 = 0;
        }
        do
        {
          v22 += (*(unsigned __int8 *)(v25 + v27) - *(unsigned __int8 *)(v24 + v27))
               * (*(unsigned __int8 *)(v25 + v27) - *(unsigned __int8 *)(v24 + v27));
          ++v27;
        }
        while (v21 != v27);
LABEL_16:
        v25 += (int)a2;
        v24 += (int)a4;
        if (++v23 == v13)
          goto LABEL_32;
      }
    }
    v22 = 0;
LABEL_32:
    v14 += v22;
  }
  if (a6 >= 16 && a5 >= 16)
  {
    v53 = 0;
    v57 = v12 >> 4;
    v58 = v10 >> 4;
    do
    {
      v54 = 0;
      v55 = v58;
      do
      {
        v14 += vpx_sse(v9 + v54, a2, v7 + v54, a4, 16, 16);
        v54 += 16;
        --v55;
      }
      while (v55);
      v9 += 16 * (int)a2;
      v7 += 16 * (int)a4;
      ++v53;
    }
    while (v53 != v57);
  }
  return v14;
}

uint64_t highbd_get_sse(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, double a7, int64x2_t a8, int64x2_t a9, int64x2_t a10, uint64x2_t a11)
{
  uint64_t v12;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  int64x2_t v32;
  int64x2_t v33;
  uint64_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v57;
  int v58;

  v12 = a3;
  v14 = a1;
  v15 = a5 + 15;
  if (a5 >= 0)
    v15 = a5;
  v16 = a6 + 15;
  if (a6 >= 0)
    v16 = a6;
  v17 = a6 - (v16 & 0xFFFFFFF0);
  if ((int)(a5 - (v15 & 0xFFFFFFF0)) < 1 || a6 < 1)
  {
    v20 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = (int)(v15 & 0xFFFFFFF0);
    v22 = 2 * (a1 + v21);
    v23 = 2 * (a3 + v21);
    do
    {
      v24 = 0;
      do
      {
        v20 += (*(unsigned __int16 *)(v22 + v24) - *(unsigned __int16 *)(v23 + v24))
             * (*(unsigned __int16 *)(v22 + v24) - *(unsigned __int16 *)(v23 + v24));
        v24 += 2;
      }
      while (2 * (a5 - (v15 & 0xFFFFFFF0)) != v24);
      ++v19;
      v23 += 2 * a4;
      v22 += 2 * a2;
    }
    while (v19 != a6);
  }
  if (v17 >= 1)
  {
    v25 = v15 & 0xFFFFFFF0;
    if ((int)v25 < 1)
    {
      v27 = 0.0;
    }
    else
    {
      v26 = 0;
      v27 = 0.0;
      v28 = 2 * (v14 + (int)(v16 & 0xFFFFFFF0) * (uint64_t)a2);
      v29 = 2 * (a3 + (int)(v16 & 0xFFFFFFF0) * (uint64_t)a4);
      do
      {
        if (v25 >= 0x10)
        {
          v31 = 0;
          v32 = 0uLL;
          v33 = (int64x2_t)*(unint64_t *)&v27;
          v34 = v15 & 0xFFFFFFF0;
          v35 = 0uLL;
          v36 = 0uLL;
          a11 = 0uLL;
          v37 = 0uLL;
          v38 = 0uLL;
          v39 = 0uLL;
          do
          {
            v40 = *(uint16x8_t *)(v28 + v31);
            v41 = *(uint16x8_t *)(v28 + v31 + 16);
            v42 = *(uint16x8_t *)(v29 + v31);
            v43 = *(uint16x8_t *)(v29 + v31 + 16);
            v44 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v40.i8, *(uint16x4_t *)v42.i8);
            v45 = (int32x4_t)vsubl_high_u16(v40, v42);
            v46 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v41.i8, *(uint16x4_t *)v43.i8);
            v47 = (int32x4_t)vsubl_high_u16(v41, v43);
            v48 = (uint32x4_t)vmulq_s32(v45, v45);
            v49 = (uint32x4_t)vmulq_s32(v44, v44);
            v50 = (uint32x4_t)vmulq_s32(v47, v47);
            v51 = (uint32x4_t)vmulq_s32(v46, v46);
            v36 = (int64x2_t)vaddw_high_u32((uint64x2_t)v36, v48);
            v35 = (int64x2_t)vaddw_u32((uint64x2_t)v35, *(uint32x2_t *)v48.i8);
            v32 = (int64x2_t)vaddw_high_u32((uint64x2_t)v32, v49);
            v33 = (int64x2_t)vaddw_u32((uint64x2_t)v33, *(uint32x2_t *)v49.i8);
            v39 = (int64x2_t)vaddw_high_u32((uint64x2_t)v39, v50);
            v38 = (int64x2_t)vaddw_u32((uint64x2_t)v38, *(uint32x2_t *)v50.i8);
            v37 = (int64x2_t)vaddw_high_u32((uint64x2_t)v37, v51);
            a11 = vaddw_u32(a11, *(uint32x2_t *)v51.i8);
            v31 += 32;
            v34 -= 16;
          }
          while (v34);
          a10 = vaddq_s64(v39, v36);
          a9 = vaddq_s64(v38, v35);
          a8 = vaddq_s64(vaddq_s64(v37, v32), a10);
          a7 = COERCE_DOUBLE(vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64((int64x2_t)a11, v33), a9), a8)));
          v27 = a7;
        }
        else
        {
          for (i = 0; i != v25; ++i)
          {
            v52 = *(unsigned __int16 *)(v28 + 2 * i) - *(unsigned __int16 *)(v29 + 2 * i);
            *(_QWORD *)&v27 += (v52 * v52);
          }
        }
        ++v26;
        v28 += 2 * a2;
        v29 += 2 * a4;
      }
      while (v26 != v17);
    }
    v20 += *(_QWORD *)&v27;
  }
  if (a6 >= 16 && a5 >= 16)
  {
    v53 = 0;
    v57 = v16 >> 4;
    v58 = v15 >> 4;
    do
    {
      v54 = 0;
      v55 = v58;
      do
      {
        v20 += vpx_highbd_sse_neon(v14 + v54, a2, v12 + v54, a4, 16, 16, a7, *(double *)a8.i64, *(double *)a9.i64, *(double *)a10.i64, (int8x16_t)a11);
        v54 += 16;
        --v55;
      }
      while (v55);
      v14 += 16 * a2;
      v12 += 16 * a4;
      ++v53;
    }
    while (v53 != v57);
  }
  return v20;
}

void vpx_calc_highbd_psnr(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, double a6, int64x2_t a7, int64x2_t a8, int64x2_t a9, int64x2_t a10)
{
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  double v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t sse;
  unint64_t v31;
  double v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  unsigned int v39;
  unint64_t v40;
  double v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint32x4_t v91;
  uint64_t v92;
  uint64_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  uint16x8_t v102;
  uint16x8_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v15 = *(unsigned int *)(a1 + 8);
  v16 = *(_DWORD *)(a1 + 12);
  v18 = *(unsigned int *)(a1 + 28);
  v17 = *(_DWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(int *)(a1 + 16);
  v116 = *(int *)(a1 + 36);
  v22 = *(_QWORD *)(a2 + 56);
  v23 = *(_QWORD *)(a2 + 64);
  v24 = *(int *)(a2 + 16);
  v25 = a4 - a5;
  v114 = *(_QWORD *)(a1 + 72);
  v115 = *(int *)(a2 + 36);
  v26 = (double)~(-1 << a5);
  v27 = v16 * v15;
  v113 = *(_QWORD *)(a2 + 72);
  if ((*(_BYTE *)(a1 + 152) & 8) == 0)
  {
    v112 = a4;
    v28 = *(_QWORD *)(a2 + 64);
    v29 = *(_QWORD *)(a1 + 64);
    sse = get_sse(v19, v21, v22, v24, v15, v16);
    goto LABEL_5;
  }
  if (a4 == a5)
  {
    v112 = a4;
    v28 = *(_QWORD *)(a2 + 64);
    v29 = *(_QWORD *)(a1 + 64);
    sse = highbd_get_sse(v19, v21, v22, v24, v15, v16, a6, a7, a8, a9, (uint64x2_t)a10);
LABEL_5:
    v31 = sse;
LABEL_6:
    *(_QWORD *)(a3 + 24) = v31;
    *(_DWORD *)(a3 + 4) = v27;
    if (v31)
    {
      v32 = log10(v26 * (double)v27 * v26 / (double)v31) * 10.0;
      a7.i64[0] = 0x4059000000000000;
      if (v32 > 100.0)
        v32 = 100.0;
    }
    else
    {
      v32 = 100.0;
    }
    v20 = v29;
    v23 = v28;
    *(double *)(a3 + 56) = v32;
    v33 = v17 * v18;
    a4 = v112;
    if ((*(_BYTE *)(a1 + 152) & 8) == 0)
      goto LABEL_12;
    if (v112 == a5)
    {
      v111 = v27;
      v34 = highbd_get_sse(v20, v116, v23, v115, v18, v17, v32, a7, a8, a9, (uint64x2_t)a10);
      goto LABEL_15;
    }
    goto LABEL_45;
  }
  if (v16 >= 1 && (int)v15 >= 1)
  {
    v112 = a4;
    v28 = *(_QWORD *)(a2 + 64);
    v29 = *(_QWORD *)(a1 + 64);
    v42 = 0;
    v31 = 0;
    v43 = 2 * v19;
    v44 = 2 * v22;
    v45 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v25));
    while (1)
    {
      if (v15 >= 0x10)
      {
        v47 = 0;
        v48 = 0uLL;
        v49 = (int64x2_t)v31;
        v50 = 0uLL;
        v51 = 0uLL;
        v52 = 0uLL;
        v53 = 0uLL;
        v54 = 0uLL;
        v55 = 0uLL;
        do
        {
          v56 = *(uint16x8_t *)(v43 + v47);
          v57 = *(uint16x8_t *)(v43 + v47 + 16);
          v58 = *(uint16x8_t *)(v44 + v47);
          v59 = *(uint16x8_t *)(v44 + v47 + 16);
          v60 = vsubq_s32((int32x4_t)vshlq_u32(vmovl_high_u16(v56), v45), (int32x4_t)vshlq_u32(vmovl_high_u16(v58), v45));
          v61 = vsubq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v56.i8), v45), (int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v58.i8), v45));
          v62 = vsubq_s32((int32x4_t)vshlq_u32(vmovl_high_u16(v57), v45), (int32x4_t)vshlq_u32(vmovl_high_u16(v59), v45));
          v63 = vsubq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v57.i8), v45), (int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v59.i8), v45));
          v51 = vmlal_high_s32(v51, v60, v60);
          v50 = vmlal_s32(v50, *(int32x2_t *)v60.i8, *(int32x2_t *)v60.i8);
          v48 = vmlal_high_s32(v48, v61, v61);
          v49 = vmlal_s32(v49, *(int32x2_t *)v61.i8, *(int32x2_t *)v61.i8);
          v55 = vmlal_high_s32(v55, v62, v62);
          v54 = vmlal_s32(v54, *(int32x2_t *)v62.i8, *(int32x2_t *)v62.i8);
          v53 = vmlal_high_s32(v53, v63, v63);
          v52 = vmlal_s32(v52, *(int32x2_t *)v63.i8, *(int32x2_t *)v63.i8);
          v47 += 32;
        }
        while (((2 * v15) & 0x1FFFFFFE0) != v47);
        a10 = vaddq_s64(v55, v51);
        a9 = vaddq_s64(v54, v50);
        a8 = vaddq_s64(vaddq_s64(v53, v48), a10);
        a7 = vaddq_s64(vaddq_s64(vaddq_s64(v52, v49), a9), a8);
        a7.i64[0] = vaddvq_s64(a7);
        v31 = a7.i64[0];
        v46 = v15 & 0xFFFFFFF0;
        if (v46 == v15)
          goto LABEL_35;
      }
      else
      {
        v46 = 0;
      }
      do
      {
        v64 = (*(unsigned __int16 *)(v43 + 2 * v46) >> v25) - (*(unsigned __int16 *)(v44 + 2 * v46) >> v25);
        v31 += v64 * (uint64_t)v64;
        ++v46;
      }
      while (v15 != v46);
LABEL_35:
      ++v42;
      v43 += 2 * v21;
      v44 += 2 * v24;
      if (v42 == v16)
        goto LABEL_6;
    }
  }
  v31 = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 4) = v27;
  *(_QWORD *)(a3 + 56) = 0x4059000000000000;
  v33 = v17 * v18;
  if ((*(_BYTE *)(a1 + 152) & 8) != 0)
  {
LABEL_45:
    if (v17 < 1 || (int)v18 < 1)
    {
      *(_QWORD *)(a3 + 32) = 0;
      *(_DWORD *)(a3 + 8) = v33;
      *(_QWORD *)(a3 + 64) = 0x4059000000000000;
      if ((*(_BYTE *)(a1 + 152) & 8) == 0)
        goto LABEL_21;
      goto LABEL_57;
    }
    v111 = v27;
    v65 = 0;
    v35 = 0;
    v66 = 2 * v20;
    v67 = 2 * v23;
    v68 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v25));
    while (1)
    {
      if (v18 >= 0x10)
      {
        v70 = 0;
        v71 = 0uLL;
        v72 = (int64x2_t)v35;
        v73 = 0uLL;
        v74 = 0uLL;
        v75 = 0uLL;
        v76 = 0uLL;
        v77 = 0uLL;
        v78 = 0uLL;
        do
        {
          v79 = *(uint16x8_t *)(v66 + v70);
          v80 = *(uint16x8_t *)(v66 + v70 + 16);
          v81 = *(uint16x8_t *)(v67 + v70);
          v82 = *(uint16x8_t *)(v67 + v70 + 16);
          v83 = vsubq_s32((int32x4_t)vshlq_u32(vmovl_high_u16(v79), v68), (int32x4_t)vshlq_u32(vmovl_high_u16(v81), v68));
          v84 = vsubq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v79.i8), v68), (int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v81.i8), v68));
          v85 = vsubq_s32((int32x4_t)vshlq_u32(vmovl_high_u16(v80), v68), (int32x4_t)vshlq_u32(vmovl_high_u16(v82), v68));
          v86 = vsubq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v80.i8), v68), (int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v82.i8), v68));
          v74 = vmlal_high_s32(v74, v83, v83);
          v73 = vmlal_s32(v73, *(int32x2_t *)v83.i8, *(int32x2_t *)v83.i8);
          v71 = vmlal_high_s32(v71, v84, v84);
          v72 = vmlal_s32(v72, *(int32x2_t *)v84.i8, *(int32x2_t *)v84.i8);
          v78 = vmlal_high_s32(v78, v85, v85);
          v77 = vmlal_s32(v77, *(int32x2_t *)v85.i8, *(int32x2_t *)v85.i8);
          v76 = vmlal_high_s32(v76, v86, v86);
          v75 = vmlal_s32(v75, *(int32x2_t *)v86.i8, *(int32x2_t *)v86.i8);
          v70 += 32;
        }
        while (((2 * v18) & 0x1FFFFFFE0) != v70);
        a10 = vaddq_s64(v78, v74);
        a9 = vaddq_s64(v77, v73);
        a8 = vaddq_s64(vaddq_s64(v76, v71), a10);
        a7 = vaddq_s64(vaddq_s64(vaddq_s64(v75, v72), a9), a8);
        a7.i64[0] = vaddvq_s64(a7);
        v35 = a7.i64[0];
        v69 = v18 & 0xFFFFFFF0;
        if (v69 == v18)
          goto LABEL_48;
      }
      else
      {
        v69 = 0;
      }
      do
      {
        v87 = (*(unsigned __int16 *)(v66 + 2 * v69) >> v25) - (*(unsigned __int16 *)(v67 + 2 * v69) >> v25);
        v35 += v87 * (uint64_t)v87;
        ++v69;
      }
      while (v18 != v69);
LABEL_48:
      ++v65;
      v66 += 2 * v116;
      v67 += 2 * v115;
      if (v65 == v17)
        goto LABEL_16;
    }
  }
LABEL_12:
  v111 = v27;
  v34 = get_sse(v20, v116, v23, v115, v18, v17);
LABEL_15:
  v35 = v34;
LABEL_16:
  *(_QWORD *)(a3 + 32) = v35;
  *(_DWORD *)(a3 + 8) = v33;
  if (v35)
  {
    v36 = log10(v26 * (double)v33 * v26 / (double)v35) * 10.0;
    a7.i64[0] = 0x4059000000000000;
    if (v36 > 100.0)
      v36 = 100.0;
    *(double *)(a3 + 64) = v36;
    v31 += v35;
    if ((*(_BYTE *)(a1 + 152) & 8) == 0)
      goto LABEL_20;
  }
  else
  {
    v36 = 100.0;
    *(_QWORD *)(a3 + 64) = 0x4059000000000000;
    if ((*(_BYTE *)(a1 + 152) & 8) == 0)
    {
LABEL_20:
      v27 = v111;
LABEL_21:
      v37 = get_sse(v114, v116, v113, v115, v18, v17);
      goto LABEL_25;
    }
  }
  if (a4 != a5)
  {
    v27 = v111;
LABEL_57:
    if (v17 < 1 || (int)v18 < 1)
    {
      v37 = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_DWORD *)(a3 + 12) = v33;
      goto LABEL_69;
    }
    v88 = 0;
    v37 = 0;
    v89 = 2 * v114;
    v90 = 2 * v113;
    v91 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v25));
    while (1)
    {
      if (v18 >= 0x10)
      {
        v93 = 0;
        v94 = 0uLL;
        v95 = (int64x2_t)(unint64_t)v37;
        v96 = 0uLL;
        v97 = 0uLL;
        v98 = 0uLL;
        v99 = 0uLL;
        v100 = 0uLL;
        v101 = 0uLL;
        do
        {
          v102 = *(uint16x8_t *)(v89 + v93);
          v103 = *(uint16x8_t *)(v89 + v93 + 16);
          v104 = *(uint16x8_t *)(v90 + v93);
          v105 = *(uint16x8_t *)(v90 + v93 + 16);
          v106 = vsubq_s32((int32x4_t)vshlq_u32(vmovl_high_u16(v102), v91), (int32x4_t)vshlq_u32(vmovl_high_u16(v104), v91));
          v107 = vsubq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v102.i8), v91), (int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v104.i8), v91));
          v108 = vsubq_s32((int32x4_t)vshlq_u32(vmovl_high_u16(v103), v91), (int32x4_t)vshlq_u32(vmovl_high_u16(v105), v91));
          v109 = vsubq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v103.i8), v91), (int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v105.i8), v91));
          v97 = vmlal_high_s32(v97, v106, v106);
          v96 = vmlal_s32(v96, *(int32x2_t *)v106.i8, *(int32x2_t *)v106.i8);
          v94 = vmlal_high_s32(v94, v107, v107);
          v95 = vmlal_s32(v95, *(int32x2_t *)v107.i8, *(int32x2_t *)v107.i8);
          v101 = vmlal_high_s32(v101, v108, v108);
          v100 = vmlal_s32(v100, *(int32x2_t *)v108.i8, *(int32x2_t *)v108.i8);
          v99 = vmlal_high_s32(v99, v109, v109);
          v98 = vmlal_s32(v98, *(int32x2_t *)v109.i8, *(int32x2_t *)v109.i8);
          v93 += 32;
        }
        while (((2 * v18) & 0x1FFFFFFE0) != v93);
        v37 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v98, v95), vaddq_s64(v100, v96)), vaddq_s64(vaddq_s64(v99, v94), vaddq_s64(v101, v97))));
        v92 = v18 & 0xFFFFFFF0;
        if (v92 == v18)
          goto LABEL_60;
      }
      else
      {
        v92 = 0;
      }
      do
      {
        v110 = (*(unsigned __int16 *)(v89 + 2 * v92) >> v25) - (*(unsigned __int16 *)(v90 + 2 * v92) >> v25);
        v37 += v110 * (uint64_t)v110;
        ++v92;
      }
      while (v18 != v92);
LABEL_60:
      ++v88;
      v89 += 2 * v116;
      v90 += 2 * v115;
      if (v88 == v17)
        goto LABEL_25;
    }
  }
  v37 = highbd_get_sse(v114, v116, v113, v115, v18, v17, v36, a7, a8, a9, (uint64x2_t)a10);
  v27 = v111;
LABEL_25:
  *(_QWORD *)(a3 + 40) = v37;
  *(_DWORD *)(a3 + 12) = v33;
  if (v37)
  {
    v38 = log10(v26 * (double)v33 * v26 / (double)(unint64_t)v37) * 10.0;
    if (v38 > 100.0)
      v38 = 100.0;
    *(double *)(a3 + 72) = v38;
    v39 = v27 + 2 * v33;
    *(_DWORD *)a3 = v39;
    v40 = v31 + v37;
    *(_QWORD *)(a3 + 16) = v31 + v37;
    if (v31 + v37)
      goto LABEL_29;
LABEL_70:
    v41 = 100.0;
    goto LABEL_71;
  }
LABEL_69:
  *(_QWORD *)(a3 + 72) = 0x4059000000000000;
  v39 = v27 + 2 * v33;
  *(_DWORD *)a3 = v39;
  v40 = v31 + v37;
  *(_QWORD *)(a3 + 16) = v31 + v37;
  if (!(v31 + v37))
    goto LABEL_70;
LABEL_29:
  v41 = log10(v26 * (double)v39 * v26 / (double)v40) * 10.0;
  if (v41 > 100.0)
    v41 = 100.0;
LABEL_71:
  *(double *)(a3 + 48) = v41;
}

unsigned __int16 vpx_quantize_b_neon@<H0>(int16x8_t *_X0@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, int32x4_t *a4@<X3>, int32x4_t *a5@<X4>, int16x8_t *a6@<X5>, unsigned __int16 *a7@<X6>, uint64_t a8@<X7>)
{
  int8x16_t *v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t *v14;
  int8x16_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int16x8_t v21;
  uint16x8_t v22;
  int16x8_t v28;
  int16x8_t v29;
  int32x4_t *v31;
  int32x4_t *v32;
  uint64_t v33;
  int8x16_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int16x8_t v40;
  unsigned __int16 result;

  v8 = *(int8x16_t **)(a8 + 8);
  v9 = *(int16x8_t *)a3[1033];
  v10 = *(int16x8_t *)a3[1034];
  v11 = *(int16x8_t *)a3[1031];
  v12 = *(int16x8_t *)a3[1032];
  v13 = *a6;
  v15 = *v8;
  v14 = v8 + 1;
  v16 = vuzp1q_s16(*_X0, _X0[1]);
  v17 = vcltzq_s16(v16);
  v18 = vabsq_s16(v16);
  v19 = (int8x16_t)vcgtq_s16(v9, v18);
  v20 = vqaddq_s16(v18, v10);
  v21 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vshrq_n_s16(vqdmulhq_s16(vsraq_n_s16(v20, vqdmulhq_s16(v20, v11), 1uLL), v12), 1uLL), (int8x16_t)v17), v17), v19);
  *a4 = vmovl_s16(*(int16x4_t *)v21.i8);
  a4[1] = vmovl_high_s16(v21);
  *a5 = vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v13.i8);
  a5[1] = vmull_high_s16(v21, v13);
  v22 = (uint16x8_t)vbicq_s8(v15, (int8x16_t)vceqzq_s16(v21));
  __asm { PRFM            #0, [X0,#0x100] }
  v28 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 1);
  v29 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 1);
  _X9 = _X0 + 18;
  v31 = a5 + 3;
  v32 = a4 + 3;
  v33 = a2 + 8;
  do
  {
    v34 = *v14++;
    v35 = vuzp1q_s16(_X9[-16], _X9[-15]);
    v36 = vcltzq_s16(v35);
    v37 = vabsq_s16(v35);
    v38 = (int8x16_t)vcgtq_s16(v28, v37);
    v39 = vqaddq_s16(v37, v29);
    v40 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vshrq_n_s16(vqdmulhq_lane_s16(vsraq_n_s16(v39, vqdmulhq_lane_s16(v39, *(int16x4_t *)v11.i8, 1), 1uLL), *(int16x4_t *)v12.i8, 1), 1uLL), (int8x16_t)v36), v36), v38);
    v32[-1] = vmovl_s16(*(int16x4_t *)v40.i8);
    *v32 = vmovl_high_s16(v40);
    v31[-1] = vmull_lane_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v13.i8, 1);
    *v31 = vmull_high_lane_s16(v40, *(int16x4_t *)v13.i8, 1);
    v22 = vmaxq_u16(v22, (uint16x8_t)vbicq_s8(v34, (int8x16_t)vceqzq_s16(v40)));
    __asm { PRFM            #0, [X9] }
    _X9 += 2;
    v31 += 2;
    v32 += 2;
    v33 -= 8;
  }
  while (v33 > 16);
  result = vmaxvq_u16(v22);
  *a7 = result;
  return result;
}

unsigned __int16 vpx_quantize_b_32x32_neon@<H0>(int16x8_t *_X0@<X0>, int16x8_t **a2@<X1>, int32x4_t *a3@<X2>, int32x4_t *a4@<X3>, int16x8_t *a5@<X4>, unsigned __int16 *a6@<X5>, uint64_t a7@<X6>)
{
  uint64_t v7;
  int16x8_t v8;
  int8x16_t *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int8x16_t *v13;
  int8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int16x8_t v21;
  uint32x4_t v22;
  uint16x8_t v23;
  int16x8_t v29;
  int16x8_t v30;
  int32x4_t *v32;
  int32x4_t *v33;
  int16x8_t v34;
  int8x16_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  unsigned __int16 result;

  v7 = 0;
  v8 = *a2[1031];
  v9 = *(int8x16_t **)(a7 + 8);
  v10 = vrshrq_n_s16(*a2[1033], 1uLL);
  v11 = vrshrq_n_s16(*a2[1034], 1uLL);
  v12 = *a2[1032];
  v14 = *v9;
  v13 = v9 + 1;
  v15 = *a5;
  v16 = vuzp1q_s16(*_X0, _X0[1]);
  v17 = vcltzq_s16(v16);
  v18 = vabsq_s16(v16);
  v19 = (int8x16_t)vcgtq_s16(v10, v18);
  v20 = vqaddq_s16(v18, v11);
  v21 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vqdmulhq_s16(vsraq_n_s16(v20, vqdmulhq_s16(v20, v8), 1uLL), v12), (int8x16_t)v17), v17), v19);
  *a3 = vmovl_s16(*(int16x4_t *)v21.i8);
  a3[1] = vmovl_high_s16(v21);
  v22 = (uint32x4_t)vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v15.i8);
  *a4 = vshrq_n_s32((int32x4_t)vsraq_n_u32(v22, v22, 0x1FuLL), 1uLL);
  a4[1] = vshrq_n_s32(vmlal_high_s16((int32x4_t)vshrq_n_u32((uint32x4_t)vmull_high_s16(v21, v15), 0x1FuLL), v21, v15), 1uLL);
  v23 = (uint16x8_t)vbicq_s8(v14, (int8x16_t)vceqzq_s16(v21));
  __asm { PRFM            #0, [X0,#0x100] }
  v29 = vdupq_lane_s16(*(int16x4_t *)v10.i8, 1);
  v30 = vdupq_lane_s16(*(int16x4_t *)v11.i8, 1);
  do
  {
    _X12 = &_X0[v7];
    v32 = &a3[v7 + 2];
    v33 = &a4[v7 + 2];
    v34 = vuzp1q_s16(_X0[v7 + 2], _X0[v7 + 3]);
    v35 = *v13++;
    v36 = vcltzq_s16(v34);
    v37 = vabsq_s16(v34);
    v38 = vqaddq_s16(v37, v30);
    v39 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vqdmulhq_lane_s16(vsraq_n_s16(v38, vqdmulhq_lane_s16(v38, *(int16x4_t *)v8.i8, 1), 1uLL), *(int16x4_t *)v12.i8, 1), (int8x16_t)v36), v36), (int8x16_t)vcgtq_s16(v29, v37));
    *v32 = vmovl_s16(*(int16x4_t *)v39.i8);
    v32[1] = vmovl_high_s16(v39);
    *v33 = vshrq_n_s32(vmlal_lane_s16((int32x4_t)vshrq_n_u32((uint32x4_t)vmull_lane_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v15.i8, 1), 0x1FuLL), *(int16x4_t *)v39.i8, *(int16x4_t *)v15.i8, 1), 1uLL);
    v33[1] = vshrq_n_s32(vmlal_high_lane_s16((int32x4_t)vshrq_n_u32((uint32x4_t)vmull_high_lane_s16(v39, *(int16x4_t *)v15.i8, 1), 0x1FuLL), v39, *(int16x4_t *)v15.i8, 1), 1uLL);
    v23 = vmaxq_u16(v23, (uint16x8_t)vbicq_s8(v35, (int8x16_t)vceqzq_s16(v39)));
    __asm { PRFM            #0, [X12,#0x120] }
    v7 += 2;
  }
  while ((_DWORD)(v7 * 16) != 4064);
  result = vmaxvq_u16(v23);
  *a6 = result;
  return result;
}

double vp8_setup_key_frame(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  const void *v4;
  int v5;
  double result;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v2 = (int *)(a1 + 131948);
  v3 = a1 + 111104;
  v4 = (const void *)(a1 + 112738);
  memcpy((void *)(a1 + 112757), &default_coef_probs, 0x420uLL);
  *(_OWORD *)(a1 + 113813) = vp8_default_mv_context;
  *(_OWORD *)(a1 + 113829) = unk_208F3D58A;
  *(_QWORD *)(a1 + 113843) = 0xFEFEECCBB4944A82;
  v7[0] = 0x100000001;
  vp8_build_component_cost_table((_QWORD *)(a1 + 82408), (unsigned __int8 *)(a1 + 113813), v7);
  memcpy((void *)(a1 + 145305), v4, 0x459uLL);
  memcpy((void *)(a1 + 146418), v4, 0x459uLL);
  memcpy((void *)(a1 + 144192), v4, 0x459uLL);
  *(_DWORD *)(v3 + 452) = 3 * *(_DWORD *)v3 / 8;
  if (v2[2711])
    v5 = v2[7];
  else
    v5 = 7;
  *v2 = v5;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(v3 + 468) = 0x100000001;
  return result;
}

uint64_t vp8_update_rate_correction_factors(uint64_t result, int a2)
{
  int *v2;
  uint64_t v3;
  double *v4;
  double v5;
  int v6;
  unsigned int v7;
  double v8;
  uint64_t v9;
  double v10;

  v2 = (int *)(result + 103884);
  v3 = *(unsigned int *)(result + 111060);
  if ((_DWORD)v3)
  {
    if (*(_DWORD *)(result + 114516) == 1
      && !*(_DWORD *)(result + 143160)
      && (*(_DWORD *)(result + 111576) || *(_DWORD *)(result + 111572)))
    {
      v4 = (double *)(result + 131936);
    }
    else
    {
      v4 = (double *)(result + 131920);
    }
  }
  else
  {
    v4 = (double *)(result + 131928);
  }
  v5 = *v4;
  v6 = (int)((*v4 * (double)vp8_bits_per_mb[128 * v3 + *(int *)(result + 111104)] + 0.5)
           * (double)*(int *)(result + 111072)
           * 0.001953125);
  if (*v2 >= 1)
  {
    v7 = *v2 + 1;
    v8 = 0.99;
    do
    {
      v6 = (int)(v8 * (double)v6);
      v8 = v8 + 0.0000390625;
      if (v8 >= 0.999)
        v8 = 0.999;
      --v7;
    }
    while (v7 > 1);
  }
  if (v6 >= 1)
  {
    v9 = 100 * *(int *)(result + 131908) / v6;
    v10 = 0.25;
    if (a2 == 1)
      v10 = 0.375;
    if (!a2)
      v10 = 0.75;
    if ((int)v9 < 103)
    {
      if ((int)v9 <= 98)
      {
        v5 = v5 * (double)(int)(100.5 - (double)(100 - (int)v9) * v10) / 100.0;
        if (v5 < 0.01)
          v5 = 0.01;
      }
    }
    else
    {
      v5 = v5 * (double)(int)((double)((int)v9 - 100) * v10 + 100.5) / 100.0;
      if (v5 > 50.0)
        v5 = 50.0;
    }
  }
  if ((_DWORD)v3)
  {
    if (*(_DWORD *)(result + 114516) == 1
      && !*(_DWORD *)(result + 143160)
      && (*(_DWORD *)(result + 111576) || *(_DWORD *)(result + 111572)))
    {
      *(double *)(result + 131936) = v5;
    }
    else
    {
      *(double *)(result + 131920) = v5;
    }
  }
  else
  {
    *(double *)(result + 131928) = v5;
  }
  return result;
}

uint64_t vp8_regulate_q(_DWORD *a1, int a2)
{
  _DWORD *v2;
  uint64_t result;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  double v22;
  int v23;
  int v24;
  unsigned int v25;

  v2 = a1 + 32979;
  if (a1[35785] == 1)
  {
    result = a1[33039];
    v2[61] = result;
    return result;
  }
  v4 = a1 + 25971;
  v5 = a1[33040];
  a1[25971] = 0;
  result = a1[28598];
  v6 = v4[1794];
  if ((result & 0x80000000) != 0)
  {
    if ((_DWORD)v6)
    {
      if (v4[2658] == 1 && !v2[2811] && (v4[1923] || v4[1922]))
      {
        v8 = *(double *)(v2 + 5);
        if (a2 < 0x400000)
          goto LABEL_20;
LABEL_15:
        v9 = a2 / v4[1797];
        if (v9 < 0x400000)
          v10 = v9 << 9;
        else
          v10 = 0x7FFFFFFF;
LABEL_21:
        v11 = v2[63];
        v12 = (int)(v8 * (double)vp8_bits_per_mb[128 * v6 + v11] + 0.5);
        if (v10 >= v12)
        {
          v19 = 0x7FFFFFFF;
LABEL_30:
          result = v11 - (v10 - v12 > v19);
          v17 = v12;
          if ((int)result >= 127)
            goto LABEL_33;
        }
        else
        {
          if (v11 <= (int)v5)
            v13 = v5;
          else
            v13 = v2[63];
          v14 = v13;
          v15 = &vp8_bits_per_mb[128 * v6 + 1 + v11];
          v16 = v14 - v11;
          while (1)
          {
            v17 = v12;
            if (!v16)
              break;
            v18 = *v15++;
            v12 = (int)(v8 * (double)v18 + 0.5);
            ++v11;
            --v16;
            if (v10 >= v12)
            {
              v19 = v17 - v10;
              goto LABEL_30;
            }
          }
          result = v5;
          if ((int)v5 >= 127)
          {
LABEL_33:
            if ((_DWORD)v6)
            {
              if (v4[2658] == 1 && !v2[2811] && (v4[1923] || v4[1922] && !v4[2771]))
                v20 = 16;
              else
                v20 = 192;
            }
            else
            {
              v20 = 0;
            }
            v21 = 0;
            v22 = 0.99;
            do
            {
              if (v20 == v21)
                break;
              *v4 = ++v21;
              v17 = (int)(v22 * (double)v17);
              v22 = v22 + 0.0000390625;
              if (v22 >= 0.999)
                v22 = 0.999;
            }
            while (v10 < v17);
          }
        }
        if (!(_DWORD)v6)
          return result;
        goto LABEL_44;
      }
      v8 = *(double *)(v2 + 1);
      if (a2 >= 0x400000)
        goto LABEL_15;
    }
    else
    {
      v8 = *(double *)(v2 + 3);
      if (a2 >= 0x400000)
        goto LABEL_15;
    }
LABEL_20:
    v10 = (a2 << 9) / v4[1797];
    goto LABEL_21;
  }
  if (!(_DWORD)v6)
    return v4[2642];
  if (v4[2658] == 1)
  {
    if (v4[1923] && !v2[2811])
    {
      v7 = 2641;
LABEL_47:
      result = v4[v7];
      if (v2[2723])
        return result;
      goto LABEL_48;
    }
    if (v4[1922] && !v2[2811])
    {
      v7 = 2643;
      goto LABEL_47;
    }
  }
LABEL_44:
  if (v2[2723])
    return result;
LABEL_48:
  if (v4[2612] == 1 && v4[2606])
  {
    v23 = *v2;
    v24 = v23 - result;
    v25 = v23 - 12;
    if (v24 <= 12)
      return result;
    else
      return v25;
  }
  return result;
}

uint64_t vp8_adjust_key_frame_context(uint64_t result)
{
  _DWORD *v1;
  int v2;
  BOOL v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v1 = (_DWORD *)(result + 131908);
  if (*(_DWORD *)(result + 142808) == 2)
    goto LABEL_21;
  v2 = *(_DWORD *)(result + 132012);
  v3 = __OFSUB__(*v1, v2);
  v4 = *v1 - v2;
  if ((v4 < 0) ^ v3 | (v4 == 0))
    goto LABEL_21;
  if (*(_DWORD *)(result + 114516) < 2u)
  {
    v5 = *(_DWORD *)(result + 131964) + 7 * v4 / 8;
    *(_DWORD *)(result + 131964) = v5;
    *(_DWORD *)(result + 131956) += v4 / 8;
    if (*(_QWORD *)(result + 131984) != 1)
      goto LABEL_5;
LABEL_9:
    v11 = *(_DWORD *)(result + 114320);
    if (v11 <= 1)
      v11 = 1;
    if (((2 * (int)*(double *)(result + 132032)) | 1) <= v11 || *(_DWORD *)(result + 114316) == 0)
      v11 = (2 * (int)*(double *)(result + 132032)) | 1;
    *(_DWORD *)(result + 132008) = v11;
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(result + 131964) + v4;
  *(_DWORD *)(result + 131964) = v5;
  if (*(_QWORD *)(result + 131984) == 1)
    goto LABEL_9;
LABEL_5:
  v6 = *(_DWORD *)(result + 115164);
  if (v6 <= 1)
    v6 = 1;
  v7 = *(_DWORD *)(result + 131996);
  v8 = *(_DWORD *)(result + 132000);
  *(_DWORD *)(result + 131992) = v7;
  *(_DWORD *)(result + 131996) = v8;
  v9 = *(_DWORD *)(result + 132004);
  v10 = *(_DWORD *)(result + 132008);
  *(_DWORD *)(result + 132000) = v9;
  *(_DWORD *)(result + 132004) = v10;
  *(_DWORD *)(result + 132008) = v6;
  v11 = (5 * v6 + v7 + 2 * v8 + 3 * v9 + 4 * v10) / 0xF;
LABEL_18:
  if (v11 <= 1)
    v11 = 1;
  *(_DWORD *)(result + 131968) = v5 / v11;
LABEL_21:
  *(_DWORD *)(result + 115164) = 0;
  ++*(_QWORD *)(result + 131984);
  return result;
}

uint64_t vp8_pick_frame_size(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  int *v3;
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  double v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  double v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  double *v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  signed int v80;
  int v81;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  double v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  int v97;
  int v98;

  v1 = (_DWORD *)(a1 + 131904);
  v2 = a1 + 114344;
  v3 = (int *)(a1 + 111060);
  if (!*(_DWORD *)(a1 + 111060))
  {
    if ((*(_DWORD *)(a1 + 114392) & 0x80000000) != 0)
    {
      if (*(_DWORD *)(a1 + 142808) == 2)
      {
        v13 = *(int *)(a1 + 132012);
        v14 = *(unsigned int *)(a1 + 114300);
        if (!(_DWORD)v14)
          goto LABEL_17;
        goto LABEL_13;
      }
      if (*(_DWORD *)(a1 + 113852))
      {
        v37 = 43;
        if ((*(_BYTE *)(a1 + 111068) & 1) == 0)
          v37 = 40;
        v38 = (int)v1[v37];
        v39 = *(double *)(a1 + 132032);
        v40 = llround(v39 * 2.0 + -16.0);
        if (v40 <= 32)
          v40 = 32;
        if (*(_DWORD *)(a1 + 114516) == 1)
          v41 = v40;
        else
          v41 = 32;
        v42 = 1374389535 * kf_boost_qadjustment[v38] * v41;
        v43 = (v42 >> 37) + ((unint64_t)v42 >> 63);
        v44 = *(_DWORD *)(a1 + 115164);
        v45 = v39 * 0.5;
        if (v45 > (double)v44)
          v43 = (int)((double)(v43 * v44) / v45);
        if (v43 <= 16)
          v43 = 16;
        v13 = ((unint64_t)(v43 + 16) * *(int *)(a1 + 132012)) >> 4;
        if (v13 >= 0x7FFFFFFF)
          v13 = 0x7FFFFFFFLL;
        v14 = *(unsigned int *)(a1 + 114300);
        if ((_DWORD)v14)
          goto LABEL_13;
      }
      else
      {
        v13 = *(_QWORD *)v2 >> 1;
        if (v13 >= (3 * *(_DWORD *)(a1 + 114284)) >> 1)
          v13 = (3 * *(_DWORD *)(a1 + 114284)) >> 1;
        v14 = *(unsigned int *)(a1 + 114300);
        if ((_DWORD)v14)
          goto LABEL_13;
      }
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 111072);
      v12 = *(double *)(a1 + 131928) * (double)vp8_bits_per_mb[*(int *)(a1 + 114452)] + 0.5;
      LODWORD(v13) = (v11 * (int)v12) >> 9;
      if (v11 > 2048)
        LODWORD(v13) = ((int)v12 >> 9) * v11;
      v13 = (int)v13;
      v14 = *(unsigned int *)(a1 + 114300);
      if ((_DWORD)v14)
      {
LABEL_13:
        v15 = *(int *)(a1 + 132012) * v14 / 0x64uLL;
        if (v15 >= v13)
          v15 = v13;
        LODWORD(v13) = 0x7FFFFFFF;
        if (v15 < 0x7FFFFFFF)
          LODWORD(v13) = v15;
      }
    }
LABEL_17:
    *v1 = v13;
    if (*(_DWORD *)(a1 + 142808) != 2)
    {
      *(_DWORD *)(a1 + 132160) = *(_DWORD *)(a1 + 132156);
      return 1;
    }
    return 1;
  }
  v4 = (_DWORD *)(a1 + 142852);
  v5 = *(_DWORD *)(a1 + 132012);
  v6 = *(_DWORD *)(a1 + 149272);
  v7 = v5;
  if (v6)
    v7 = *(_DWORD *)(a1 + 216 * v6 + 149344);
  v8 = *(_DWORD *)(a1 + 142808);
  if (v8 == 2)
  {
    v9 = *(int *)(a1 + 132016) >> 5;
    if (*(_DWORD *)(a1 + 132020) > v9)
      v9 = *(_DWORD *)(a1 + 132020);
    v10 = *(_DWORD *)(a1 + 111576);
    if (!v10)
      goto LABEL_26;
  }
  else
  {
    if (v7 <= 3)
      v9 = 0;
    else
      v9 = v7 >> 2;
    v10 = *(_DWORD *)(a1 + 111576);
    if (!v10)
      goto LABEL_26;
  }
  if (*(_DWORD *)(a1 + 114516) == 1)
  {
    if (v8 == 2)
    {
      v7 = *(_DWORD *)(a1 + 148144);
      *(_DWORD *)(a1 + 132012) = v7;
      goto LABEL_27;
    }
    LODWORD(v17) = *v1;
    goto LABEL_60;
  }
LABEL_26:
  if (v8 != 2)
  {
    v18 = *(_DWORD *)(a1 + 131964);
    LODWORD(v17) = v7;
    if (v18 >= 1)
    {
      v19 = *(_DWORD *)(a1 + 131968);
      if (v19 >= v18)
        v19 = *(_DWORD *)(a1 + 131964);
      if (v19 >= v7 - v9)
        v19 = v7 - v9;
      *(_DWORD *)(a1 + 131964) = v18 - v19;
      LODWORD(v17) = v7 - v19;
      if ((int)v17 <= v9)
        LODWORD(v17) = v9;
    }
    *v1 = v17;
    v20 = *(_DWORD *)(a1 + 131956);
    if (v20 >= 1)
    {
      v21 = v17 - v9;
      if ((int)v17 > v9)
      {
        v22 = *(_DWORD *)(a1 + 131960);
        if (v22 >= v20)
          v22 = *(_DWORD *)(a1 + 131956);
        if (v22 < v21)
          v21 = v22;
        *(_DWORD *)(a1 + 131956) = v20 - v21;
        LODWORD(v17) = v17 - v21;
        *v1 = v17;
      }
    }
    v23 = *(_DWORD *)(a1 + 142752);
    if (v23 >= 151 && *(int *)(a1 + 131948) >= 1)
    {
      v24 = *(_DWORD *)(a1 + 131952);
      if (v24 >= 8)
      {
        v25 = (v23 - 100) >> 5;
        if (v25 >= 0xA)
          v25 = 10;
        v26 = (int)(v25 * v17) / 100;
        if (v26 >= (int)v17 - v9)
          v26 = v17 - v9;
        if (*(_DWORD *)(a1 + 131944) == v24 >> 1)
        {
          v27 = (v24 - 1) * v26;
          if (v27 >= (int)v17 / 10)
            v27 = (int)v17 / 10;
          LODWORD(v17) = v27 + v17;
        }
        else
        {
          LODWORD(v17) = v17 - v26;
        }
        *v1 = v17;
        if ((int)v17 < v9)
          goto LABEL_61;
LABEL_28:
        if (v10)
          goto LABEL_29;
LABEL_62:
        *(_DWORD *)(a1 + 132024) = v17;
        if (v8)
          goto LABEL_138;
        goto LABEL_63;
      }
    }
LABEL_60:
    if ((int)v17 < v9)
      goto LABEL_61;
    goto LABEL_28;
  }
LABEL_27:
  *v1 = v7;
  LODWORD(v17) = v7;
  if (v7 >= v9)
    goto LABEL_28;
LABEL_61:
  *v1 = v9;
  LODWORD(v17) = v9;
  if (!v10)
    goto LABEL_62;
LABEL_29:
  if (v8)
    goto LABEL_138;
LABEL_63:
  if (*(_DWORD *)(a1 + 132088))
  {
    v28 = *(_QWORD *)(a1 + 114352);
    v29 = (int)v28 / 100 + 1;
    v30 = *(_QWORD *)(a1 + 132112);
    if (v30 >= v28)
    {
      v36 = *(_QWORD *)(a1 + 132120);
      if (v36 >= v28)
      {
        v31 = *(_DWORD *)(a1 + 114332);
        v55 = v30 <= v28;
        v50 = v30 - v28;
        if (v55 || v31 != 1)
        {
          if (v36 <= v28)
          {
            LODWORD(v51) = 0;
          }
          else
          {
            v52 = *(_QWORD *)(a1 + 132080);
            if (v52 < 1)
              LODWORD(v51) = *(_DWORD *)(a1 + 114340);
            else
              v51 = 100 * v36 / (8 * v52);
          }
        }
        else
        {
          v51 = v50 / v29;
        }
        if ((int)v51 <= *(_DWORD *)(a1 + 114340))
          v53 = v51 & ~((int)v51 >> 31);
        else
          v53 = *(_DWORD *)(a1 + 114340);
        v17 = (int)v17 * (uint64_t)v53 / 200 + (int)v17;
        if (v17 >= 0x7FFFFFFF)
          LODWORD(v17) = 0x7FFFFFFF;
        *v1 = v17;
        if (*(_DWORD *)(a1 + 142800) && *(int *)(a1 + 132072) >= 151)
        {
LABEL_124:
          v35 = *(_DWORD *)(a1 + 132064);
          goto LABEL_126;
        }
LABEL_125:
        v35 = *(_DWORD *)(a1 + 132156);
LABEL_126:
        *(_DWORD *)(a1 + 132160) = v35;
        v54 = *(_DWORD *)(a1 + 132164);
        *(_DWORD *)(a1 + 132168) = v54;
        v55 = v35 <= v54;
        if (v35 <= v54)
          v56 = v54 + 1;
        else
          v56 = v35;
        if (v55 || v56 > 127)
        {
          if (v56 >= 127)
            v35 = 127;
          else
            v35 = v56;
          *(_DWORD *)(a1 + 132160) = v35;
        }
        goto LABEL_135;
      }
      v31 = *(_DWORD *)(a1 + 114332);
      v33 = v31 == 1;
      if (v36 < 0)
      {
LABEL_88:
        v34 = -100 * v36 / (8 * *(_QWORD *)(a1 + 132080));
LABEL_89:
        if ((int)v34 <= *(_DWORD *)(a1 + 114336))
          v46 = v34 & ~((int)v34 >> 31);
        else
          v46 = *(_DWORD *)(a1 + 114336);
        v47 = ((unsigned __int128)(v46 * (uint64_t)(int)v17 * (__int128)0x5C28F5C28F5C28F5) >> 64)
            - v46 * (uint64_t)(int)v17;
        LODWORD(v17) = v17 + (v47 >> 7) + (v47 >> 63);
        *v1 = v17;
        if (*(_DWORD *)(a1 + 142800) && *(int *)(a1 + 132072) >= 151)
        {
          if (v30 >= *(_QWORD *)(a1 + 132120))
            v30 = *(_QWORD *)(a1 + 132120);
          if (v33)
            v48 = v30;
          else
            v48 = *(_QWORD *)(a1 + 132120);
          if (v48 < v28)
          {
            v35 = *(_DWORD *)(a1 + 132156);
            v55 = v48 <= v28 >> 2;
            v49 = v48 - (v28 >> 2);
            if (!v55)
              v35 -= v49 * (v35 - (uint64_t)*(int *)(a1 + 132064)) / ((3 * v28) >> 2);
            goto LABEL_126;
          }
          goto LABEL_124;
        }
        goto LABEL_125;
      }
    }
    else
    {
      v31 = *(_DWORD *)(a1 + 114332);
      if (v31 == 1)
      {
        v32 = v29;
        v33 = 1;
        v34 = (v28 - v30) / v32;
        goto LABEL_89;
      }
      v33 = 0;
      v36 = *(_QWORD *)(a1 + 132120);
      if (v36 < 0)
        goto LABEL_88;
    }
    LODWORD(v34) = 0;
    goto LABEL_89;
  }
  v35 = *(_DWORD *)(a1 + 132156);
  *(_DWORD *)(a1 + 132160) = v35;
  v31 = *(_DWORD *)(a1 + 114332);
LABEL_135:
  if (v31 == 2)
  {
    v57 = *(_DWORD *)(a1 + 132172);
    if (v35 < v57)
      *(_DWORD *)(a1 + 132160) = v57;
  }
LABEL_138:
  if (*(_DWORD *)(a1 + 132176)
    && *(_DWORD *)(a1 + 114332) == 1
    && (*(_QWORD *)(a1 + 132112) & 0x8000000000000000) != 0)
  {
    *(_DWORD *)(a1 + 132180) = 1;
    v58 = *(_QWORD *)(a1 + 132120) + *(int *)(a1 + 132016);
    *(_QWORD *)(a1 + 132120) = v58;
    v59 = *(_QWORD *)(a1 + 114360);
    if (v58 > v59)
    {
      v58 = (int)v59;
      *(_QWORD *)(a1 + 132120) = (int)v59;
    }
    *(_QWORD *)(a1 + 132112) = v58;
    v60 = *(_DWORD *)(a1 + 114516);
    if (v60 >= 2)
    {
      v61 = v6 + 1;
      if (v6 + 1 < v60)
      {
        v62 = ~v6 + v60;
        v63 = (double *)(a1 + 216 * v61 + 149360);
        do
        {
          v64 = *(_QWORD *)v63 + (int)((double)*((int *)v63 - 18) / *(v63 - 10));
          if (v64 >= *((_QWORD *)v63 - 6))
            v64 = *((_QWORD *)v63 - 6);
          *((_QWORD *)v63 - 1) = v64;
          *(_QWORD *)v63 = v64;
          v63 += 27;
          --v62;
        }
        while (v62);
      }
    }
  }
  if (*(_DWORD *)(v2 + 128) || v1[11] || v1[69])
    goto LABEL_157;
  if (v4[75])
  {
    v65 = v3[811];
    v4[77] = v65 < 0x65;
    v66 = v4[76];
    v1[18] = v66;
    if (v4[42] > v3[3] >> 1)
    {
      v3[128] = 1;
      *v1 = (v65 + 100) * v17 / 0x64;
    }
    v1[11] = v66;
    goto LABEL_156;
  }
  v67 = *(_DWORD *)(v2 + 48);
  v68 = v67;
  if (v67 < 0)
    v68 = v1[3];
  v69 = v4[3] + v4[2];
  v70 = v4[1] + *v4 + v69;
  v71 = 100 * v4[1333] / (v3[5] * v3[4]);
  v72 = 100 * v69 / v70;
  if (v71 > v72)
    v72 = 100 * v4[1333] / (v3[5] * v3[4]);
  if (v1[2722])
  {
    if (v8)
    {
      if (v8 != 2)
        goto LABEL_171;
LABEL_170:
      v3[128] = 1;
      goto LABEL_171;
    }
    if ((int)v4[4] < 15 || v72 > 4)
      goto LABEL_170;
  }
LABEL_171:
  if (v3[128] == 1)
  {
    if (v1[2723])
    {
      v73 = v67;
      if (v67 < 0)
        v73 = v1[3];
      v74 = 100 * v69 / v70;
      if (v8 == 2)
      {
        v66 = v1[18];
        v1[11] = v66;
      }
      else
      {
        if (v71 > v74)
          v74 = v71;
        v75 = v73;
        v76 = vp8_gf_boost_qadjustment[v73];
        v77 = v4[4];
        if (v77 >= 14)
          v77 = 14;
        v78 = 1374389535 * gf_intra_usage_adjustment[v77] * v76 / 100 * gf_adjust_table[v74];
        v79 = (v78 >> 37) + ((unint64_t)v78 >> 63);
        if (!v4[12] && v1[2721] == 2)
          v79 = (v78 >> 38) + ((unint64_t)v78 >> 63);
        v80 = kf_gf_boost_qlimits[v75];
        if (v79 <= 110)
          v81 = 110;
        else
          v81 = v79;
        if (v79 > v80 && v8 == 0)
          v83 = v80;
        else
          v83 = v81;
        v1[2712] = v83;
        v66 = v1[18];
        v1[11] = v66;
        if (v67 == -1)
        {
          v84 = v66;
          if ((int)v83 >= 751)
          {
            v84 = v66 + 1;
            v1[11] = v66 + 1;
            if (v83 >= 0x3E9)
            {
              v84 = v66 + 2;
              v1[11] = v66 + 2;
              if (v83 >= 0x4E3)
              {
                v84 = v66 + 3;
                v1[11] = v66 + 3;
                if (v83 >= 0x5DC)
                {
                  v84 = v66 + 4;
                  v1[11] = v66 + 4;
                }
              }
            }
          }
          v85 = gf_interval_table[v74];
          if (v85 > v84)
          {
            v1[11] = v85;
            v84 = v85;
          }
          v86 = v1[17];
          v66 = v84;
          if (v84 > v86)
          {
            v1[11] = v86;
            v66 = v86;
          }
        }
        *(_DWORD *)(v2 + 620) = 0;
      }
    }
    else
    {
      v66 = 0;
    }
    if (*(_DWORD *)(v2 + 624))
    {
      *v1 = 0;
    }
    else
    {
      if (v67 < 0)
      {
        if (v8 != 2)
        {
          v91 = v1[2712];
          v92 = v91 + 100 * (v66 + 1) - 100;
          v93 = v1[30] * (v66 + 1);
          if ((int)v91 < 1001)
          {
            v94 = v1[2712];
          }
          else
          {
            do
            {
              v94 = v91 >> 1;
              v92 /= 2;
              v55 = v91 > 0x7D1;
              v91 >>= 1;
            }
            while (v55);
          }
          v55 = v92 < v93 >> 7;
          v95 = v94 * v93;
          v96 = v93 / v92 * v94;
          v97 = v95 / v92;
          if (v55)
            v98 = v96;
          else
            v98 = v97;
          *v1 = v98;
          goto LABEL_156;
        }
      }
      else
      {
        v87 = v3[3];
        v88 = (double)vp8_bits_per_mb[v68 + 128] + 0.5;
        if (v87 <= 2048)
          v89 = (v87 * (int)v88) >> 9;
        else
          v89 = ((int)v88 >> 9) * v87;
        v90 = 1374389535 * v89 * v1[2712];
        v7 = (v90 >> 37) + ((unint64_t)v90 >> 63);
      }
      *v1 = v7;
    }
LABEL_156:
    v1[12] = v66;
  }
LABEL_157:
  v1[27] = v5;
  if (v1[69])
  {
    result = 0;
    v1[69] = 0;
    return result;
  }
  return 1;
}

uint64_t vp8_drop_encodedframe_overshoot(uint64_t a1, int a2)
{
  signed int *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  signed int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  double v17;
  double v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (signed int *)(a1 + 131908);
  v3 = *(_QWORD *)(a1 + 114736);
  v4 = *(_DWORD *)(a1 + 114716);
  if (v4 < 2)
  {
    v5 = 0;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 114720);
    if (v5)
    {
      v5 = *(_DWORD *)(v3 + 8);
      if (!v5)
      {
        result = 0;
        v2[2808] = 0;
        ++v2[2809];
        return result;
      }
    }
  }
  if (!*(_DWORD *)(a1 + 111060)
    || *(_DWORD *)(a1 + 114308) != 2
    && (!*(_DWORD *)(a1 + 132176)
     || !v5 && (*(double *)(a1 + 131920) >= 0.08 || *(_DWORD *)(a1 + 143144) <= (int)*(double *)(a1 + 132096))))
  {
    goto LABEL_45;
  }
  v7 = *(int *)(a1 + 132156);
  v8 = *(_DWORD *)(a1 + 132016);
  v9 = *(int *)(a1 + 111072);
  if (a2 >= (3 * (int)v7) >> 2)
    goto LABEL_22;
  v10 = *(_QWORD *)(a1 + 103592) / v9;
  v11 = (int)v10 <= 51200 || *(_DWORD *)(a1 + 132176) == 0;
  v12 = v8 >> 5;
  if (v11)
    v12 = (v8 >> 2) & 0xFFFFFFFE;
  if (*v2 <= v12 || (int)v10 < 3201)
  {
LABEL_22:
    if (v5)
      goto LABEL_23;
LABEL_45:
    result = 0;
    v2[2808] = 0;
    ++v2[2809];
    if (v4 >= 2)
    {
      result = 0;
      *(_DWORD *)(v3 + 8) = 0;
    }
    return result;
  }
  if (!v5 && 2 * *(_DWORD *)(a1 + 143148) >= (int)v10)
    goto LABEL_45;
LABEL_23:
  *(_DWORD *)(a1 + 143140) = 1;
  v13 = *(_QWORD *)(a1 + 114352);
  *(_QWORD *)(a1 + 132112) = v13;
  *(_QWORD *)(a1 + 132120) = v13;
  v14 = (v8 << 9) / (int)v9;
  v15 = v8 / (int)v9;
  if (v15 < 0x400000)
    v16 = v15 << 9;
  else
    v16 = 0x7FFFFFFF;
  if (v8 >= 0x400000)
    v14 = v16;
  v17 = (double)v14 / (double)vp8_bits_per_mb[v7 + 128];
  v18 = *(double *)(a1 + 131920);
  if (v17 > v18)
  {
    v18 = v18 + v18;
    if (v18 >= v17)
      v18 = (double)v14 / (double)vp8_bits_per_mb[v7 + 128];
    *(double *)(a1 + 131920) = v18;
  }
  if (v18 > 50.0)
  {
    *(_QWORD *)(a1 + 131920) = 0x4049000000000000;
    v18 = 50.0;
  }
  ++*(_DWORD *)(a1 + 113852);
  ++*(_DWORD *)(a1 + 115164);
  ++*(_DWORD *)(a1 + 143128);
  *(_DWORD *)(a1 + 143144) = 0;
  v19 = *(unsigned int *)(a1 + 114516);
  if (v19 >= 2)
  {
    v20 = (_QWORD *)(a1 + 149676);
    v21 = v19 & 0xFFFFFFFE;
    v22 = v21;
    do
    {
      *(v20 - 27) = 0x100000000;
      *v20 = 0x100000000;
      *(double *)((char *)v20 - 260) = v18;
      *(double *)((char *)v20 - 44) = v18;
      v20 += 54;
      v22 -= 2;
    }
    while (v22);
    v23 = v19 - v21;
    if (v19 != v21)
    {
      v24 = a1 + 432 * (v19 >> 1) + 149416;
      do
      {
        *(_QWORD *)(v24 + 44) = 0x100000000;
        *(double *)v24 = v18;
        v24 += 216;
        --v23;
      }
      while (v23);
    }
  }
  result = 1;
  if (v4 >= 2)
    *(_DWORD *)(v3 + 8) = 1;
  return result;
}

uint64_t vp8_initialize_rd_consts(_DWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v5;
  int *v6;
  int *v7;
  int v8;
  double v9;
  int v10;
  double v11;
  int8x16_t *v12;
  double v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t i;
  int v19;
  int v20;
  signed int v21;
  signed int v22;
  int v23;
  signed int v24;
  int v25;
  signed int v26;
  int v27;
  signed int v28;
  int v29;
  signed int v30;
  int v31;
  signed int v32;
  int v33;
  signed int v34;
  int v35;
  signed int v36;
  int v37;
  signed int v38;
  int v39;
  signed int v40;
  int v41;
  signed int v42;
  int v43;
  signed int v44;
  int v45;
  signed int v46;
  int v47;
  signed int v48;
  int v49;
  signed int v50;
  int v51;
  signed int v52;
  int v53;
  signed int v54;
  int v55;
  signed int v56;
  int v57;
  signed int v58;
  int v59;
  signed int v60;
  int v61;
  char *v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int32x4_t v67;
  int32x4_t v68;
  uint32x4_t v69;
  int8x16_t v70;
  int32x4_t v71;
  int8x16_t v72;
  int32x4_t v73;
  uint32x4_t v74;
  int8x16_t v75;
  int32x4_t v76;
  int8x16_t v77;
  int32x4_t v78;
  uint32x4_t v79;
  int8x16_t v80;
  int32x4_t v81;
  int32x4_t v82;
  uint32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int32x4_t v88;
  uint32x4_t v89;
  int8x16_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;

  v5 = a1 + 35702;
  v6 = a1 + 25971;
  v7 = a1 + 20590;
  if (a3 >= 160)
    v8 = 160;
  else
    v8 = a3;
  v9 = (double)v8;
  v10 = (int)(v9 * v9 * 2.8);
  a1[28836] = v10;
  if (*v6 >= 1)
  {
    v11 = (double)(int)(((double)*v6 * 0.0015625 + 1.0) * v9);
    v10 = (int)(v11 * v11 * 2.8);
    a1[28836] = v10;
  }
  v12 = (int8x16_t *)(a2 + 29976);
  v13 = (double)a3;
  if (*v5 == 2)
  {
    if (a1[27765])
    {
      v14 = a1[36888];
      if (v14 <= 0x1F)
      {
        v10 += (rd_iifactor[v14] * v10) >> 4;
        a1[28836] = v10;
      }
    }
  }
  if ((v10 + 109) >= 0xDB)
    v15 = v10 / 110;
  else
    v15 = v10 / 110 + 1;
  *v7 = v15;
  vp8_set_speed_features((uint64_t)a1);
  *(_OWORD *)(a2 + 30108) = 0u;
  *(_OWORD *)(a2 + 30124) = 0u;
  *(_OWORD *)(a2 + 30076) = 0u;
  *(_OWORD *)(a2 + 30092) = 0u;
  *(_OWORD *)(a2 + 30060) = 0u;
  v16 = (int)pow(v13, 1.25);
  if ((int)v16 <= 8)
    v16 = 8;
  v17 = v6[2865];
  if (v17 < 1001)
  {
    v6[2866] = 100;
    v21 = 0x7FFFFFFF / v16;
    v22 = v5[27];
    if (v22 >= (int)(0x7FFFFFFF / v16))
      v23 = 0x7FFFFFFF;
    else
      v23 = v22 * v16;
    v12->i32[0] = v23;
    v6[2845] = v23;
    v24 = v5[28];
    if (v24 >= v21)
      v25 = 0x7FFFFFFF;
    else
      v25 = v24 * v16;
    v12->i32[1] = v25;
    v6[2846] = v25;
    v26 = v5[29];
    if (v26 >= v21)
      v27 = 0x7FFFFFFF;
    else
      v27 = v26 * v16;
    v12->i32[2] = v27;
    v6[2847] = v27;
    v28 = v5[30];
    if (v28 >= v21)
      v29 = 0x7FFFFFFF;
    else
      v29 = v28 * v16;
    v12->i32[3] = v29;
    v6[2848] = v29;
    v30 = v5[31];
    if (v30 >= v21)
      v31 = 0x7FFFFFFF;
    else
      v31 = v30 * v16;
    v12[1].i32[0] = v31;
    v6[2849] = v31;
    v32 = v5[32];
    if (v32 >= v21)
      v33 = 0x7FFFFFFF;
    else
      v33 = v32 * v16;
    v12[1].i32[1] = v33;
    v6[2850] = v33;
    v34 = v5[33];
    if (v34 >= v21)
      v35 = 0x7FFFFFFF;
    else
      v35 = v34 * v16;
    v12[1].i32[2] = v35;
    v6[2851] = v35;
    v36 = v5[34];
    if (v36 >= v21)
      v37 = 0x7FFFFFFF;
    else
      v37 = v36 * v16;
    v12[1].i32[3] = v37;
    v6[2852] = v37;
    v38 = v5[35];
    if (v38 >= v21)
      v39 = 0x7FFFFFFF;
    else
      v39 = v38 * v16;
    v12[2].i32[0] = v39;
    v6[2853] = v39;
    v40 = v5[36];
    if (v40 >= v21)
      v41 = 0x7FFFFFFF;
    else
      v41 = v40 * v16;
    v12[2].i32[1] = v41;
    v6[2854] = v41;
    v42 = v5[37];
    if (v42 >= v21)
      v43 = 0x7FFFFFFF;
    else
      v43 = v42 * v16;
    v12[2].i32[2] = v43;
    v6[2855] = v43;
    v44 = v5[38];
    if (v44 >= v21)
      v45 = 0x7FFFFFFF;
    else
      v45 = v44 * v16;
    v12[2].i32[3] = v45;
    v6[2856] = v45;
    v46 = v5[39];
    if (v46 >= v21)
      v47 = 0x7FFFFFFF;
    else
      v47 = v46 * v16;
    v12[3].i32[0] = v47;
    v6[2857] = v47;
    v48 = v5[40];
    if (v48 >= v21)
      v49 = 0x7FFFFFFF;
    else
      v49 = v48 * v16;
    v12[3].i32[1] = v49;
    v6[2858] = v49;
    v50 = v5[41];
    if (v50 >= v21)
      v51 = 0x7FFFFFFF;
    else
      v51 = v50 * v16;
    v12[3].i32[2] = v51;
    v6[2859] = v51;
    v52 = v5[42];
    if (v52 >= v21)
      v53 = 0x7FFFFFFF;
    else
      v53 = v52 * v16;
    v12[3].i32[3] = v53;
    v6[2860] = v53;
    v54 = v5[43];
    if (v54 >= v21)
      v55 = 0x7FFFFFFF;
    else
      v55 = v54 * v16;
    v12[4].i32[0] = v55;
    v6[2861] = v55;
    v56 = v5[44];
    if (v56 >= v21)
      v57 = 0x7FFFFFFF;
    else
      v57 = v56 * v16;
    v12[4].i32[1] = v57;
    v6[2862] = v57;
    v58 = v5[45];
    if (v58 >= v21)
      v59 = 0x7FFFFFFF;
    else
      v59 = v58 * v16;
    v12[4].i32[2] = v59;
    v6[2863] = v59;
    v60 = v5[46];
    v61 = v60 * v16;
    if (v60 >= v21)
      v61 = 0x7FFFFFFF;
    v12[4].i32[3] = v61;
    v6[2864] = v61;
  }
  else
  {
    v6[2866] = 1;
    v6[2865] = v17 / 0x64u;
    if (a2 + 29976 >= (unint64_t)(a1 + 35749) || (unint64_t)(a1 + 28816) >= a2 + 30056)
    {
      v63 = vdupq_n_s32(v16);
      v64 = *(int32x4_t *)(v5 + 27);
      v65.i64[0] = 0x8000000080000000;
      v65.i64[1] = 0x8000000080000000;
      v66 = (int8x16_t)vceqq_s32(v64, v65);
      v67 = vmulq_s32(v64, v63);
      v68 = vdupq_n_s32(0x51EB851Fu);
      v69 = (uint32x4_t)vuzp2q_s32((int32x4_t)vmull_s32(*(int32x2_t *)v67.i8, *(int32x2_t *)v68.i8), (int32x4_t)vmull_high_s32(v67, v68));
      v70 = vorrq_s8((int8x16_t)(*(_OWORD *)&v66 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8((int8x16_t)vsraq_n_u32((uint32x4_t)vshrq_n_s32((int32x4_t)v69, 5uLL), v69, 0x1FuLL), v66));
      *(int8x16_t *)(v6 + 2845) = v70;
      v71 = *(int32x4_t *)(v5 + 31);
      v72 = (int8x16_t)vceqq_s32(v71, v65);
      v73 = vmulq_s32(v71, v63);
      v74 = (uint32x4_t)vuzp2q_s32((int32x4_t)vmull_s32(*(int32x2_t *)v73.i8, *(int32x2_t *)v68.i8), (int32x4_t)vmull_high_s32(v73, v68));
      v75 = vorrq_s8((int8x16_t)(*(_OWORD *)&v72 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8((int8x16_t)vsraq_n_u32((uint32x4_t)vshrq_n_s32((int32x4_t)v74, 5uLL), v74, 0x1FuLL), v72));
      *v12 = v70;
      v12[1] = v75;
      *(int8x16_t *)(v6 + 2849) = v75;
      v76 = *(int32x4_t *)(v5 + 35);
      v77 = (int8x16_t)vceqq_s32(v76, v65);
      v78 = vmulq_s32(v76, v63);
      v79 = (uint32x4_t)vuzp2q_s32((int32x4_t)vmull_s32(*(int32x2_t *)v78.i8, *(int32x2_t *)v68.i8), (int32x4_t)vmull_high_s32(v78, v68));
      v80 = vorrq_s8((int8x16_t)(*(_OWORD *)&v77 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8((int8x16_t)vsraq_n_u32((uint32x4_t)vshrq_n_s32((int32x4_t)v79, 5uLL), v79, 0x1FuLL), v77));
      v81 = *(int32x4_t *)(v5 + 39);
      v82 = vmulq_s32(v81, v63);
      v83 = (uint32x4_t)vuzp2q_s32((int32x4_t)vmull_s32(*(int32x2_t *)v82.i8, *(int32x2_t *)v68.i8), (int32x4_t)vmull_high_s32(v82, v68));
      *(int8x16_t *)(v6 + 2853) = v80;
      v84 = (int8x16_t)vceqq_s32(v81, v65);
      v85 = vorrq_s8((int8x16_t)(*(_OWORD *)&v84 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8((int8x16_t)vsraq_n_u32((uint32x4_t)vshrq_n_s32((int32x4_t)v83, 5uLL), v83, 0x1FuLL), v84));
      v12[2] = v80;
      v12[3] = v85;
      *(int8x16_t *)(v6 + 2857) = v85;
      v86 = *(int32x4_t *)(v5 + 43);
      v87 = (int8x16_t)vceqq_s32(v86, v65);
      v88 = vmulq_s32(v86, v63);
      v89 = (uint32x4_t)vuzp2q_s32((int32x4_t)vmull_s32(*(int32x2_t *)v88.i8, *(int32x2_t *)v68.i8), (int32x4_t)vmull_high_s32(v88, v68));
      v90 = vorrq_s8((int8x16_t)(*(_OWORD *)&v87 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8((int8x16_t)vsraq_n_u32((uint32x4_t)vshrq_n_s32((int32x4_t)v89, 5uLL), v89, 0x1FuLL), v87));
      v12[4] = v90;
      *(int8x16_t *)(v6 + 2861) = v90;
      v94 = (uint64_t)a1;
      if (v6[1923])
        goto LABEL_83;
      goto LABEL_85;
    }
    for (i = 0; i != 20; ++i)
    {
      v19 = a1[i + 35729];
      v20 = 0x7FFFFFFF;
      if (v19 != 0x7FFFFFFF)
        v20 = (int)(v19 * v16) / 100;
      *(_DWORD *)(a2 + 29976 + i * 4) = v20;
      a1[i + 28816] = v20;
    }
  }
  v94 = (uint64_t)a1;
  if (v6[1923])
  {
LABEL_83:
    v62 = (char *)a1 + 145305;
    goto LABEL_88;
  }
LABEL_85:
  if (v6[1922])
    v62 = (char *)a1 + 146418;
  else
    v62 = (char *)(a1 + 36048);
LABEL_88:
  v91 = 0;
  v92 = *((_QWORD *)v7 + 14) + 1104;
  do
  {
    cost(v92 - 1104, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 19], 0, 0);
    cost(v92 - 1056, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 30], 0, 0);
    cost(v92 - 1008, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 41], 0, 0);
    cost(v92 - 960, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 52], 2 * (v91 != 0), 0);
    cost(v92 - 912, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 63], 0, 0);
    cost(v92 - 864, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 74], 0, 0);
    cost(v92 - 816, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 85], 2, 0);
    cost(v92 - 768, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 96], 0, 0);
    cost(v92 - 720, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 107], 0, 0);
    cost(v92 - 672, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 118], 2, 0);
    cost(v92 - 624, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 129], 0, 0);
    cost(v92 - 576, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 140], 0, 0);
    cost(v92 - 528, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 151], 2, 0);
    cost(v92 - 480, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 162], 0, 0);
    cost(v92 - 432, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 173], 0, 0);
    cost(v92 - 384, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 184], 2, 0);
    cost(v92 - 336, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 195], 0, 0);
    cost(v92 - 288, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 206], 0, 0);
    cost(v92 - 240, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 217], 2, 0);
    cost(v92 - 192, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 228], 0, 0);
    cost(v92 - 144, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 239], 0, 0);
    cost(v92 - 96, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 250], 2, 0);
    cost(v92 - 48, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 261], 0, 0);
    cost(v92, (uint64_t)vp8_coef_tree, (uint64_t)&v62[v91 + 272], 0, 0);
    v91 += 264;
    v92 += 1152;
  }
  while (v91 != 1056);
  return vp8_init_mode_costs(v94);
}

uint64_t vp8_mbuverror_c(_QWORD *a1)
{
  int16x8_t *v1;
  int16x8_t *v2;
  int16x8_t v3;
  int16x8_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int16x8_t *v10;
  int16x8_t *v11;
  int16x8_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t *v19;
  int16x8_t *v20;
  int16x8_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int16x8_t *v28;
  int16x8_t *v29;
  int16x8_t v30;
  int16x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int16x8_t *v37;
  int16x8_t *v38;
  int16x8_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int16x8_t *v46;
  int16x8_t *v47;
  int16x8_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int16x8_t *v55;
  int16x8_t *v56;
  int16x8_t v57;
  int16x8_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int16x8_t *v64;
  int16x8_t *v65;
  int16x8_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;

  v1 = (int16x8_t *)a1[410];
  v2 = (int16x8_t *)a1[909];
  v3 = v1[1];
  v4 = v2[1];
  v5 = vsubl_high_s16(*v1, *v2);
  v6 = vsubl_high_s16(v3, v4);
  v7 = vsubl_s16(*(int16x4_t *)v1->i8, *(int16x4_t *)v2->i8);
  v8 = vsubl_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)v4.i8);
  v9 = vaddq_s32(vmlaq_s32(vmulq_s32(v8, v8), v7, v7), vmlaq_s32(vmulq_s32(v6, v6), v5, v5));
  v10 = (int16x8_t *)a1[421];
  v11 = (int16x8_t *)a1[916];
  v12 = v10[1];
  v13 = v11[1];
  v14 = vsubl_high_s16(*v10, *v11);
  v15 = vsubl_high_s16(v12, v13);
  v16 = vsubl_s16(*(int16x4_t *)v10->i8, *(int16x4_t *)v11->i8);
  v17 = vsubl_s16(*(int16x4_t *)v12.i8, *(int16x4_t *)v13.i8);
  v18 = vaddq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v17, v17), v16, v16), vmlaq_s32(vmulq_s32(v15, v15), v14, v14)), v9);
  v19 = (int16x8_t *)a1[432];
  v20 = (int16x8_t *)a1[923];
  v21 = v19[1];
  v22 = v20[1];
  v23 = vsubl_high_s16(*v19, *v20);
  v24 = vsubl_high_s16(v21, v22);
  v25 = vsubl_s16(*(int16x4_t *)v19->i8, *(int16x4_t *)v20->i8);
  v26 = vsubl_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v22.i8);
  v27 = vaddq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v26, v26), v25, v25), vmlaq_s32(vmulq_s32(v24, v24), v23, v23)), v18);
  v28 = (int16x8_t *)a1[443];
  v29 = (int16x8_t *)a1[930];
  v30 = v28[1];
  v31 = v29[1];
  v32 = vsubl_high_s16(*v28, *v29);
  v33 = vsubl_high_s16(v30, v31);
  v34 = vsubl_s16(*(int16x4_t *)v28->i8, *(int16x4_t *)v29->i8);
  v35 = vsubl_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v31.i8);
  v36 = vaddq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v35, v35), v34, v34), vmlaq_s32(vmulq_s32(v33, v33), v32, v32)), v27);
  v37 = (int16x8_t *)a1[454];
  v38 = (int16x8_t *)a1[937];
  v39 = v37[1];
  v40 = v38[1];
  v41 = vsubl_high_s16(*v37, *v38);
  v42 = vsubl_high_s16(v39, v40);
  v43 = vsubl_s16(*(int16x4_t *)v37->i8, *(int16x4_t *)v38->i8);
  v44 = vsubl_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v40.i8);
  v45 = vaddq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v44, v44), v43, v43), vmlaq_s32(vmulq_s32(v42, v42), v41, v41)), v36);
  v46 = (int16x8_t *)a1[465];
  v47 = (int16x8_t *)a1[944];
  v48 = v46[1];
  v49 = v47[1];
  v50 = vsubl_high_s16(*v46, *v47);
  v51 = vsubl_high_s16(v48, v49);
  v52 = vsubl_s16(*(int16x4_t *)v46->i8, *(int16x4_t *)v47->i8);
  v53 = vsubl_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v49.i8);
  v54 = vaddq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v53, v53), v52, v52), vmlaq_s32(vmulq_s32(v51, v51), v50, v50)), v45);
  v55 = (int16x8_t *)a1[476];
  v56 = (int16x8_t *)a1[951];
  v57 = v55[1];
  v58 = v56[1];
  v59 = vsubl_high_s16(*v55, *v56);
  v60 = vsubl_high_s16(v57, v58);
  v61 = vsubl_s16(*(int16x4_t *)v55->i8, *(int16x4_t *)v56->i8);
  v62 = vsubl_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v58.i8);
  v63 = vaddq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v62, v62), v61, v61), vmlaq_s32(vmulq_s32(v60, v60), v59, v59)), v54);
  v64 = (int16x8_t *)a1[487];
  v65 = (int16x8_t *)a1[958];
  v66 = v64[1];
  v67 = v65[1];
  v68 = vsubl_high_s16(*v64, *v65);
  v69 = vsubl_high_s16(v66, v67);
  v70 = vsubl_s16(*(int16x4_t *)v64->i8, *(int16x4_t *)v65->i8);
  v71 = vsubl_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v67.i8);
  return vaddvq_s32(vaddq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v71, v71), v70, v70), vmlaq_s32(vmulq_s32(v69, v69), v68, v68)), v63));
}

uint64_t VP8_UVSSE(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;

  v2 = **(_QWORD **)(a1 + 3344) + *(int *)(a1 + 3352);
  v3 = **(_QWORD **)(a1 + 3696) + *(int *)(a1 + 3704);
  v4 = *(unsigned int *)(a1 + 3356);
  v19 = 0;
  v5 = *(_QWORD *)(a1 + 8096);
  v6 = *(__int16 *)(v5 + 4);
  v7 = *(__int16 *)(v5 + 6);
  v8 = *(unsigned int *)(a1 + 7812);
  if (v6 >= 0)
    v9 = v6 + 1;
  else
    v9 = v6 - 1;
  v10 = v7 - 1;
  if (v7 >= 0)
    v10 = v7 + 1;
  if (v9 >= 0)
    v11 = v9;
  else
    v11 = v9 + 1;
  v12 = v10 / 2;
  v13 = (v11 >> 4) * v8 + ((v10 + (v10 < 0)) >> 4);
  v14 = *(_QWORD *)(a1 + 7840) + v13;
  v15 = *(_QWORD *)(a1 + 7848) + v13;
  if (((v12 | (v11 >> 1)) & 7) != 0)
  {
    v16 = v12 & 7;
    v17 = (v11 >> 1) & 7;
    vpx_sub_pixel_variance8x8_neon(v14, v8, v16, v17, v2, v4, (uint64_t)&v19);
    vpx_sub_pixel_variance8x8_neon(v15, v8, v16, v17, v3, v4, (uint64_t)&v19 + 4);
  }
  else
  {
    vpx_variance8x8(v14, v8, v2, v4, &v19);
    vpx_variance8x8(v15, v8, v3, v4, (char *)&v19 + 4);
  }
  return (v19 + HIDWORD(v19));
}

uint64_t vp8_mv_pred(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int *a7, int *a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  _BYTE v148[32];
  _BYTE v149[32];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;

  v154 = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned __int8 *)(a3 + 2);
  if (*(_BYTE *)(a3 + 2))
  {
    v9 = a2[970];
    v10 = a3 - 76 * v9;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v11 = *(unsigned __int8 *)(v10 + 2);
    if (*(_BYTE *)(v10 + 2))
    {
      v12 = *(_DWORD *)(v10 + 4);
      LODWORD(v152) = v12;
      if (*(_DWORD *)(a6 + 4 * a5) != *(_DWORD *)(a6 + 4 * v11))
      {
        LOWORD(v152) = -(__int16)v12;
        WORD1(v152) = -HIWORD(v12);
      }
      LODWORD(v150) = v11;
    }
    v13 = *(unsigned __int8 *)(a3 - 74);
    if (*(_BYTE *)(a3 - 74))
    {
      v14 = *(_DWORD *)(a3 - 72);
      DWORD1(v152) = v14;
      if (*(_DWORD *)(a6 + 4 * a5) != *(_DWORD *)(a6 + 4 * v13))
      {
        WORD2(v152) = -(__int16)v14;
        WORD3(v152) = -HIWORD(v14);
      }
      DWORD1(v150) = v13;
    }
    v15 = *(unsigned __int8 *)(v10 - 74);
    if (*(_BYTE *)(v10 - 74))
    {
      v16 = *(_DWORD *)(v10 - 72);
      DWORD2(v152) = v16;
      if (*(_DWORD *)(a6 + 4 * a5) != *(_DWORD *)(a6 + 4 * v15))
      {
        WORD4(v152) = -(__int16)v16;
        WORD5(v152) = -HIWORD(v16);
      }
      DWORD2(v150) = v15;
    }
    v17 = *(_DWORD *)(result + 111056);
    if (v17)
    {
      v18 = (_QWORD *)(result + 148192);
      v19 = v9 + 1;
      v20 = v19 - v19 * (a2[1003] / 128) - a2[1001] / 128;
      v21 = *(_QWORD *)(result + 148208);
      v22 = v20 + 1;
      v23 = *(_DWORD *)(v21 + 4 * v22);
      if (v23)
      {
        v24 = *(_QWORD *)(result + 148200);
        v25 = *(_DWORD *)(*v18 + 4 * v22);
        HIDWORD(v152) = v25;
        result = *(unsigned int *)(v24 + 4 * v22);
        if (*(_DWORD *)(a6 + 4 * a5) != (_DWORD)result)
        {
          result = -v25;
          WORD6(v152) = -(__int16)v25;
          HIWORD(v152) = -HIWORD(v25);
        }
        HIDWORD(v150) = v23;
      }
      v26 = v20 - v9;
      v27 = *(_DWORD *)(v21 + 4 * (v20 - (int)v9));
      if (v27)
      {
        v28 = 4 * v26;
        v29 = v18[1];
        v30 = *(_DWORD *)(*v18 + v28);
        LODWORD(v153) = v30;
        LODWORD(v28) = *(_DWORD *)(v29 + v28);
        result = *(unsigned int *)(a6 + 4 * a5);
        if ((_DWORD)result != (_DWORD)v28)
        {
          LOWORD(v153) = -(__int16)v30;
          WORD1(v153) = -HIWORD(v30);
        }
        LODWORD(v151) = v27;
      }
      v31 = *(_DWORD *)(v21 + 4 * v20);
      if (v31)
      {
        v32 = 4 * v20;
        v33 = v18[1];
        v34 = *(_DWORD *)(*v18 + v32);
        DWORD1(v153) = v34;
        LODWORD(v32) = *(_DWORD *)(v33 + v32);
        result = *(unsigned int *)(a6 + 4 * a5);
        if ((_DWORD)result != (_DWORD)v32)
        {
          WORD2(v153) = -(__int16)v34;
          WORD3(v153) = -HIWORD(v34);
        }
        DWORD1(v151) = v31;
      }
      v35 = v20 + 2;
      v36 = *(_DWORD *)(v21 + 4 * v35);
      if (v36)
      {
        v37 = 4 * v35;
        v38 = v18[1];
        v39 = *(_DWORD *)(*v18 + v37);
        DWORD2(v153) = v39;
        if (*(_DWORD *)(a6 + 4 * a5) != *(_DWORD *)(v38 + v37))
        {
          WORD4(v153) = -(__int16)v39;
          WORD5(v153) = -HIWORD(v39);
        }
        DWORD2(v151) = v36;
      }
      v40 = v22 + v19;
      v41 = *(_DWORD *)(v21 + 4 * v40);
      if (v41)
      {
        v42 = 4 * v40;
        v43 = v18[1];
        v44 = *(_DWORD *)(*v18 + v42);
        HIDWORD(v153) = v44;
        if (*(_DWORD *)(a6 + 4 * a5) != *(_DWORD *)(v43 + v42))
        {
          WORD6(v153) = -(__int16)v44;
          HIWORD(v153) = -HIWORD(v44);
        }
        HIDWORD(v151) = v41;
      }
      v45 = 4;
      v46 = *a8;
      v47 = *((_DWORD *)&v150 + v46);
      if (v47)
        v48 = v47 == v8;
      else
        v48 = 0;
      if (v48)
        goto LABEL_52;
    }
    else
    {
      v45 = 1;
      v46 = *a8;
      v49 = *((_DWORD *)&v150 + v46);
      if (v49)
        v50 = v49 == v8;
      else
        v50 = 0;
      if (v50)
        goto LABEL_52;
    }
    v46 = a8[1];
    v51 = *((_DWORD *)&v150 + v46);
    if (v51)
      v52 = v51 == v8;
    else
      v52 = 0;
    if (v52 || (v46 = a8[2], (v53 = *((_DWORD *)&v150 + v46)) != 0) && v53 == v8)
    {
LABEL_52:
      v54 = 3;
LABEL_53:
      LODWORD(v45) = *((_DWORD *)&v152 + v46);
      v8 = WORD1(v45);
LABEL_54:
      *a7 = v54;
      goto LABEL_55;
    }
    if (v17)
    {
      v46 = a8[3];
      v58 = *((_DWORD *)&v150 + v46);
      if (v58)
      {
        if (v58 == v8)
          goto LABEL_73;
      }
      v46 = a8[4];
      v59 = *((_DWORD *)&v150 + v46);
      if (v59)
      {
        if (v59 == v8)
          goto LABEL_73;
      }
      if ((v46 = a8[5], (v60 = *((_DWORD *)&v150 + v46)) != 0) && v60 == v8
        || (v46 = a8[6], (v61 = *((_DWORD *)&v150 + v46)) != 0) && v61 == v8
        || (v46 = a8[7], (v62 = *((_DWORD *)&v150 + v46)) != 0) && v62 == v8)
      {
LABEL_73:
        v54 = 2;
        goto LABEL_53;
      }
    }
    *(_DWORD *)v149 = (__int16)v152;
    *(_DWORD *)&v149[4] = SWORD2(v152);
    *(_DWORD *)v148 = SWORD1(v152);
    *(_DWORD *)&v148[4] = SWORD3(v152);
    *(_DWORD *)&v149[8] = SWORD4(v152);
    *(_DWORD *)&v148[8] = SWORD5(v152);
    if (v17)
    {
      *(_DWORD *)&v149[12] = SWORD6(v152);
      *(_DWORD *)&v149[16] = (__int16)v153;
      *(_DWORD *)&v148[12] = SHIWORD(v152);
      *(_DWORD *)&v148[16] = SWORD1(v153);
      *(_DWORD *)&v149[20] = SWORD2(v153);
      *(_DWORD *)&v149[24] = SWORD4(v153);
      *(_DWORD *)&v148[20] = SWORD3(v153);
      *(_DWORD *)&v148[24] = SWORD5(v153);
      *(_DWORD *)&v149[28] = SWORD6(v153);
      *(_DWORD *)&v148[28] = SHIWORD(v153);
    }
    v63 = *(_DWORD *)&v149[4];
    if (*(int *)v149 <= *(int *)&v149[4])
    {
      v66 = *(_DWORD *)&v149[8];
      if (*(int *)v149 <= *(int *)&v149[8])
      {
LABEL_78:
        v67 = *(_DWORD *)&v149[8];
        if (*(int *)&v149[4] > *(int *)&v149[8])
          goto LABEL_79;
        goto LABEL_83;
      }
    }
    else
    {
      v64 = *(_DWORD *)v149;
      *(_DWORD *)v149 = *(_DWORD *)&v149[4];
      *(_DWORD *)&v149[4] = v64;
      v65 = v63;
      v66 = *(_DWORD *)&v149[8];
      if (v65 <= *(int *)&v149[8])
        goto LABEL_78;
    }
    v69 = *(_DWORD *)&v149[4];
    *(_DWORD *)&v149[4] = *(_DWORD *)v149;
    *(_DWORD *)&v149[8] = v69;
    *(_DWORD *)v149 = v66;
    v67 = v69;
    if (*(int *)&v149[4] > v69)
    {
LABEL_79:
      v68 = *(_DWORD *)&v149[4];
      *(_DWORD *)&v149[4] = v67;
      *(_DWORD *)&v149[8] = v68;
      if (!v17)
        goto LABEL_110;
LABEL_84:
      v70 = *(_DWORD *)&v149[12];
      if (*(int *)v149 <= *(int *)&v149[12])
      {
        v71 = *(_DWORD *)&v149[12];
        if (*(int *)&v149[4] <= *(int *)&v149[12])
        {
LABEL_86:
          v72 = *(_DWORD *)&v149[12];
          if (*(int *)&v149[8] > *(int *)&v149[12])
            goto LABEL_87;
          goto LABEL_147;
        }
      }
      else
      {
        *(_DWORD *)&v149[12] = *(_DWORD *)&v149[8];
        *(_QWORD *)&v149[4] = *(_QWORD *)v149;
        *(_DWORD *)v149 = v70;
        v71 = *(_DWORD *)&v149[12];
        if (*(int *)&v149[4] <= *(int *)&v149[12])
          goto LABEL_86;
      }
      v138 = *(_DWORD *)&v149[8];
      *(_DWORD *)&v149[8] = *(_DWORD *)&v149[4];
      *(_DWORD *)&v149[12] = v138;
      *(_DWORD *)&v149[4] = v71;
      v72 = v138;
      if (*(int *)&v149[8] > v138)
      {
LABEL_87:
        v73 = *(_DWORD *)&v149[8];
        *(_DWORD *)&v149[8] = v72;
        *(_DWORD *)&v149[12] = v73;
        v74 = *(_DWORD *)&v149[16];
        if (*(int *)v149 <= *(int *)&v149[16])
          goto LABEL_88;
        goto LABEL_148;
      }
LABEL_147:
      v74 = *(_DWORD *)&v149[16];
      if (*(int *)v149 <= *(int *)&v149[16])
      {
LABEL_88:
        v75 = *(_DWORD *)&v149[16];
        if (*(int *)&v149[4] > *(int *)&v149[16])
          goto LABEL_89;
        goto LABEL_149;
      }
LABEL_148:
      *(_OWORD *)&v149[4] = *(_OWORD *)v149;
      *(_DWORD *)v149 = v74;
      v75 = *(_DWORD *)&v149[16];
      if (*(int *)&v149[4] > *(int *)&v149[16])
      {
LABEL_89:
        *(_DWORD *)&v149[16] = *(_DWORD *)&v149[12];
        *(_QWORD *)&v149[8] = *(_QWORD *)&v149[4];
        *(_DWORD *)&v149[4] = v75;
        v76 = *(_DWORD *)&v149[16];
        if (*(int *)&v149[8] <= *(int *)&v149[16])
          goto LABEL_90;
        goto LABEL_150;
      }
LABEL_149:
      v76 = *(_DWORD *)&v149[16];
      if (*(int *)&v149[8] <= *(int *)&v149[16])
      {
LABEL_90:
        v77 = *(_DWORD *)&v149[16];
        if (*(int *)&v149[12] > *(int *)&v149[16])
          goto LABEL_91;
        goto LABEL_151;
      }
LABEL_150:
      v139 = *(_DWORD *)&v149[12];
      *(_DWORD *)&v149[12] = *(_DWORD *)&v149[8];
      *(_DWORD *)&v149[16] = v139;
      *(_DWORD *)&v149[8] = v76;
      v77 = v139;
      if (*(int *)&v149[12] > v139)
      {
LABEL_91:
        v78 = *(_DWORD *)&v149[12];
        *(_DWORD *)&v149[12] = v77;
        *(_DWORD *)&v149[16] = v78;
        v79 = *(_DWORD *)&v149[20];
        if (*(int *)v149 <= *(int *)&v149[20])
          goto LABEL_92;
        goto LABEL_152;
      }
LABEL_151:
      v79 = *(_DWORD *)&v149[20];
      if (*(int *)v149 <= *(int *)&v149[20])
      {
LABEL_92:
        v80 = *(_DWORD *)&v149[20];
        if (*(int *)&v149[4] > *(int *)&v149[20])
          goto LABEL_93;
        goto LABEL_153;
      }
LABEL_152:
      *(_DWORD *)&v149[20] = *(_DWORD *)&v149[16];
      *(_OWORD *)&v149[4] = *(_OWORD *)v149;
      *(_DWORD *)v149 = v79;
      v80 = *(_DWORD *)&v149[20];
      if (*(int *)&v149[4] > *(int *)&v149[20])
      {
LABEL_93:
        *(_OWORD *)&v149[8] = *(_OWORD *)&v149[4];
        *(_DWORD *)&v149[4] = v80;
        v81 = *(_DWORD *)&v149[20];
        if (*(int *)&v149[8] <= *(int *)&v149[20])
          goto LABEL_94;
        goto LABEL_154;
      }
LABEL_153:
      v81 = *(_DWORD *)&v149[20];
      if (*(int *)&v149[8] <= *(int *)&v149[20])
      {
LABEL_94:
        v82 = *(_DWORD *)&v149[20];
        if (*(int *)&v149[12] > *(int *)&v149[20])
          goto LABEL_95;
        goto LABEL_155;
      }
LABEL_154:
      *(_DWORD *)&v149[20] = *(_DWORD *)&v149[16];
      *(_QWORD *)&v149[12] = *(_QWORD *)&v149[8];
      *(_DWORD *)&v149[8] = v81;
      v82 = *(_DWORD *)&v149[20];
      if (*(int *)&v149[12] > *(int *)&v149[20])
      {
LABEL_95:
        v83 = *(_DWORD *)&v149[16];
        *(_DWORD *)&v149[16] = *(_DWORD *)&v149[12];
        *(_DWORD *)&v149[20] = v83;
        *(_DWORD *)&v149[12] = v82;
        v84 = v83;
        if (*(int *)&v149[16] <= v83)
          goto LABEL_96;
        goto LABEL_156;
      }
LABEL_155:
      v84 = *(_DWORD *)&v149[20];
      if (*(int *)&v149[16] <= *(int *)&v149[20])
      {
LABEL_96:
        v85 = *(_DWORD *)&v149[24];
        if (*(int *)v149 > *(int *)&v149[24])
          goto LABEL_97;
        goto LABEL_157;
      }
LABEL_156:
      v140 = *(_DWORD *)&v149[16];
      *(_DWORD *)&v149[16] = v84;
      *(_DWORD *)&v149[20] = v140;
      v85 = *(_DWORD *)&v149[24];
      if (*(int *)v149 > *(int *)&v149[24])
      {
LABEL_97:
        *(_OWORD *)&v149[12] = *(_OWORD *)&v149[8];
        *(_QWORD *)&v149[4] = *(_QWORD *)v149;
        *(_DWORD *)v149 = v85;
        v86 = *(_DWORD *)&v149[24];
        if (*(int *)&v149[4] <= *(int *)&v149[24])
          goto LABEL_98;
        goto LABEL_158;
      }
LABEL_157:
      v86 = *(_DWORD *)&v149[24];
      if (*(int *)&v149[4] <= *(int *)&v149[24])
      {
LABEL_98:
        v87 = *(_DWORD *)&v149[24];
        if (*(int *)&v149[8] > *(int *)&v149[24])
          goto LABEL_99;
        goto LABEL_159;
      }
LABEL_158:
      *(_DWORD *)&v149[24] = *(_DWORD *)&v149[20];
      *(_OWORD *)&v149[8] = *(_OWORD *)&v149[4];
      *(_DWORD *)&v149[4] = v86;
      v87 = *(_DWORD *)&v149[24];
      if (*(int *)&v149[8] > *(int *)&v149[24])
      {
LABEL_99:
        *(_OWORD *)&v149[12] = *(_OWORD *)&v149[8];
        *(_DWORD *)&v149[8] = v87;
        v88 = *(_DWORD *)&v149[24];
        if (*(int *)&v149[12] <= *(int *)&v149[24])
          goto LABEL_100;
        goto LABEL_160;
      }
LABEL_159:
      v88 = *(_DWORD *)&v149[24];
      if (*(int *)&v149[12] <= *(int *)&v149[24])
      {
LABEL_100:
        v89 = *(_DWORD *)&v149[24];
        if (*(int *)&v149[16] > *(int *)&v149[24])
          goto LABEL_101;
        goto LABEL_161;
      }
LABEL_160:
      *(_DWORD *)&v149[24] = *(_DWORD *)&v149[20];
      *(_QWORD *)&v149[16] = *(_QWORD *)&v149[12];
      *(_DWORD *)&v149[12] = v88;
      v89 = *(_DWORD *)&v149[24];
      if (*(int *)&v149[16] > *(int *)&v149[24])
      {
LABEL_101:
        v90 = *(_DWORD *)&v149[20];
        *(_DWORD *)&v149[20] = *(_DWORD *)&v149[16];
        *(_DWORD *)&v149[24] = v90;
        *(_DWORD *)&v149[16] = v89;
        v91 = v90;
        if (*(int *)&v149[20] <= v90)
          goto LABEL_102;
        goto LABEL_162;
      }
LABEL_161:
      v91 = *(_DWORD *)&v149[24];
      if (*(int *)&v149[20] <= *(int *)&v149[24])
      {
LABEL_102:
        v92 = *(_DWORD *)&v149[28];
        if (*(int *)v149 > *(int *)&v149[28])
          goto LABEL_103;
        goto LABEL_163;
      }
LABEL_162:
      v141 = *(_DWORD *)&v149[20];
      *(_DWORD *)&v149[20] = v91;
      *(_DWORD *)&v149[24] = v141;
      v92 = *(_DWORD *)&v149[28];
      if (*(int *)v149 > *(int *)&v149[28])
      {
LABEL_103:
        *(_DWORD *)&v149[28] = *(_DWORD *)&v149[24];
        *(_OWORD *)&v149[12] = *(_OWORD *)&v149[8];
        *(_QWORD *)&v149[4] = *(_QWORD *)v149;
        *(_DWORD *)v149 = v92;
        v93 = *(_DWORD *)&v149[28];
        if (*(int *)&v149[4] <= *(int *)&v149[28])
          goto LABEL_104;
        goto LABEL_164;
      }
LABEL_163:
      v93 = *(_DWORD *)&v149[28];
      if (*(int *)&v149[4] <= *(int *)&v149[28])
      {
LABEL_104:
        v94 = *(_DWORD *)&v149[28];
        if (*(int *)&v149[8] > *(int *)&v149[28])
          goto LABEL_105;
        goto LABEL_165;
      }
LABEL_164:
      *(_OWORD *)&v149[16] = *(_OWORD *)&v149[12];
      *(_QWORD *)&v149[8] = *(_QWORD *)&v149[4];
      *(_DWORD *)&v149[4] = v93;
      v94 = *(_DWORD *)&v149[28];
      if (*(int *)&v149[8] > *(int *)&v149[28])
      {
LABEL_105:
        *(_DWORD *)&v149[28] = *(_DWORD *)&v149[24];
        *(_OWORD *)&v149[12] = *(_OWORD *)&v149[8];
        *(_DWORD *)&v149[8] = v94;
        v95 = *(_DWORD *)&v149[28];
        if (*(int *)&v149[12] <= *(int *)&v149[28])
          goto LABEL_106;
        goto LABEL_166;
      }
LABEL_165:
      v95 = *(_DWORD *)&v149[28];
      if (*(int *)&v149[12] <= *(int *)&v149[28])
      {
LABEL_106:
        v96 = *(_DWORD *)&v149[28];
        if (*(int *)&v149[16] > *(int *)&v149[28])
          goto LABEL_107;
        goto LABEL_167;
      }
LABEL_166:
      *(_OWORD *)&v149[16] = *(_OWORD *)&v149[12];
      *(_DWORD *)&v149[12] = v95;
      v96 = *(_DWORD *)&v149[28];
      if (*(int *)&v149[16] > *(int *)&v149[28])
      {
LABEL_107:
        *(_DWORD *)&v149[28] = *(_DWORD *)&v149[24];
        *(_QWORD *)&v149[20] = *(_QWORD *)&v149[16];
        *(_DWORD *)&v149[16] = v96;
        v97 = *(_DWORD *)&v149[28];
        if (*(int *)&v149[20] <= *(int *)&v149[28])
          goto LABEL_108;
        goto LABEL_168;
      }
LABEL_167:
      v97 = *(_DWORD *)&v149[28];
      if (*(int *)&v149[20] <= *(int *)&v149[28])
      {
LABEL_108:
        v98 = *(_DWORD *)&v149[28];
        if (*(int *)&v149[24] <= *(int *)&v149[28])
          goto LABEL_110;
        goto LABEL_109;
      }
LABEL_168:
      v142 = *(_DWORD *)&v149[24];
      *(_DWORD *)&v149[24] = *(_DWORD *)&v149[20];
      *(_DWORD *)&v149[28] = v142;
      *(_DWORD *)&v149[20] = v97;
      v98 = v142;
      if (*(int *)&v149[24] <= v142)
      {
LABEL_110:
        v100 = *(_DWORD *)&v148[4];
        if (*(int *)v148 <= *(int *)&v148[4])
        {
          v103 = *(_DWORD *)&v148[8];
          if (*(int *)v148 <= *(int *)&v148[8])
          {
LABEL_112:
            v104 = *(_DWORD *)&v148[8];
            if (*(int *)&v148[4] > *(int *)&v148[8])
              goto LABEL_113;
            goto LABEL_117;
          }
        }
        else
        {
          v101 = *(_DWORD *)v148;
          *(_DWORD *)v148 = *(_DWORD *)&v148[4];
          *(_DWORD *)&v148[4] = v101;
          v102 = v100;
          v103 = *(_DWORD *)&v148[8];
          if (v102 <= *(int *)&v148[8])
            goto LABEL_112;
        }
        v106 = *(_DWORD *)&v148[4];
        *(_DWORD *)&v148[4] = *(_DWORD *)v148;
        *(_DWORD *)&v148[8] = v106;
        *(_DWORD *)v148 = v103;
        v104 = v106;
        if (*(int *)&v148[4] > v106)
        {
LABEL_113:
          v105 = *(_DWORD *)&v148[4];
          *(_DWORD *)&v148[4] = v104;
          *(_DWORD *)&v148[8] = v105;
          if (!v17)
            goto LABEL_144;
          goto LABEL_118;
        }
LABEL_117:
        if (!v17)
          goto LABEL_144;
LABEL_118:
        v107 = *(_DWORD *)&v148[12];
        if (*(int *)v148 <= *(int *)&v148[12])
        {
          v108 = *(_DWORD *)&v148[12];
          if (*(int *)&v148[4] <= *(int *)&v148[12])
          {
LABEL_120:
            v109 = *(_DWORD *)&v148[12];
            if (*(int *)&v148[8] > *(int *)&v148[12])
              goto LABEL_121;
            goto LABEL_172;
          }
        }
        else
        {
          *(_DWORD *)&v148[12] = *(_DWORD *)&v148[8];
          *(_QWORD *)&v148[4] = *(_QWORD *)v148;
          *(_DWORD *)v148 = v107;
          v108 = *(_DWORD *)&v148[12];
          if (*(int *)&v148[4] <= *(int *)&v148[12])
            goto LABEL_120;
        }
        v143 = *(_DWORD *)&v148[8];
        *(_DWORD *)&v148[8] = *(_DWORD *)&v148[4];
        *(_DWORD *)&v148[12] = v143;
        *(_DWORD *)&v148[4] = v108;
        v109 = v143;
        if (*(int *)&v148[8] > v143)
        {
LABEL_121:
          v110 = *(_DWORD *)&v148[8];
          *(_DWORD *)&v148[8] = v109;
          *(_DWORD *)&v148[12] = v110;
          v111 = *(_DWORD *)&v148[16];
          if (*(int *)v148 <= *(int *)&v148[16])
            goto LABEL_122;
          goto LABEL_173;
        }
LABEL_172:
        v111 = *(_DWORD *)&v148[16];
        if (*(int *)v148 <= *(int *)&v148[16])
        {
LABEL_122:
          v112 = *(_DWORD *)&v148[16];
          if (*(int *)&v148[4] > *(int *)&v148[16])
            goto LABEL_123;
          goto LABEL_174;
        }
LABEL_173:
        *(_OWORD *)&v148[4] = *(_OWORD *)v148;
        *(_DWORD *)v148 = v111;
        v112 = *(_DWORD *)&v148[16];
        if (*(int *)&v148[4] > *(int *)&v148[16])
        {
LABEL_123:
          *(_DWORD *)&v148[16] = *(_DWORD *)&v148[12];
          *(_QWORD *)&v148[8] = *(_QWORD *)&v148[4];
          *(_DWORD *)&v148[4] = v112;
          v113 = *(_DWORD *)&v148[16];
          if (*(int *)&v148[8] <= *(int *)&v148[16])
            goto LABEL_124;
          goto LABEL_175;
        }
LABEL_174:
        v113 = *(_DWORD *)&v148[16];
        if (*(int *)&v148[8] <= *(int *)&v148[16])
        {
LABEL_124:
          v114 = *(_DWORD *)&v148[16];
          if (*(int *)&v148[12] > *(int *)&v148[16])
            goto LABEL_125;
          goto LABEL_176;
        }
LABEL_175:
        v144 = *(_DWORD *)&v148[12];
        *(_DWORD *)&v148[12] = *(_DWORD *)&v148[8];
        *(_DWORD *)&v148[16] = v144;
        *(_DWORD *)&v148[8] = v113;
        v114 = v144;
        if (*(int *)&v148[12] > v144)
        {
LABEL_125:
          v115 = *(_DWORD *)&v148[12];
          *(_DWORD *)&v148[12] = v114;
          *(_DWORD *)&v148[16] = v115;
          v116 = *(_DWORD *)&v148[20];
          if (*(int *)v148 <= *(int *)&v148[20])
            goto LABEL_126;
          goto LABEL_177;
        }
LABEL_176:
        v116 = *(_DWORD *)&v148[20];
        if (*(int *)v148 <= *(int *)&v148[20])
        {
LABEL_126:
          v117 = *(_DWORD *)&v148[20];
          if (*(int *)&v148[4] > *(int *)&v148[20])
            goto LABEL_127;
          goto LABEL_178;
        }
LABEL_177:
        *(_DWORD *)&v148[20] = *(_DWORD *)&v148[16];
        *(_OWORD *)&v148[4] = *(_OWORD *)v148;
        *(_DWORD *)v148 = v116;
        v117 = *(_DWORD *)&v148[20];
        if (*(int *)&v148[4] > *(int *)&v148[20])
        {
LABEL_127:
          *(_OWORD *)&v148[8] = *(_OWORD *)&v148[4];
          *(_DWORD *)&v148[4] = v117;
          v118 = *(_DWORD *)&v148[20];
          if (*(int *)&v148[8] <= *(int *)&v148[20])
            goto LABEL_128;
          goto LABEL_179;
        }
LABEL_178:
        v118 = *(_DWORD *)&v148[20];
        if (*(int *)&v148[8] <= *(int *)&v148[20])
        {
LABEL_128:
          v119 = *(_DWORD *)&v148[20];
          if (*(int *)&v148[12] > *(int *)&v148[20])
            goto LABEL_129;
          goto LABEL_180;
        }
LABEL_179:
        *(_DWORD *)&v148[20] = *(_DWORD *)&v148[16];
        *(_QWORD *)&v148[12] = *(_QWORD *)&v148[8];
        *(_DWORD *)&v148[8] = v118;
        v119 = *(_DWORD *)&v148[20];
        if (*(int *)&v148[12] > *(int *)&v148[20])
        {
LABEL_129:
          v120 = *(_DWORD *)&v148[16];
          *(_DWORD *)&v148[16] = *(_DWORD *)&v148[12];
          *(_DWORD *)&v148[20] = v120;
          *(_DWORD *)&v148[12] = v119;
          v121 = v120;
          if (*(int *)&v148[16] <= v120)
            goto LABEL_130;
          goto LABEL_181;
        }
LABEL_180:
        v121 = *(_DWORD *)&v148[20];
        if (*(int *)&v148[16] <= *(int *)&v148[20])
        {
LABEL_130:
          v122 = *(_DWORD *)&v148[24];
          if (*(int *)v148 > *(int *)&v148[24])
            goto LABEL_131;
          goto LABEL_182;
        }
LABEL_181:
        v145 = *(_DWORD *)&v148[16];
        *(_DWORD *)&v148[16] = v121;
        *(_DWORD *)&v148[20] = v145;
        v122 = *(_DWORD *)&v148[24];
        if (*(int *)v148 > *(int *)&v148[24])
        {
LABEL_131:
          *(_OWORD *)&v148[12] = *(_OWORD *)&v148[8];
          *(_QWORD *)&v148[4] = *(_QWORD *)v148;
          *(_DWORD *)v148 = v122;
          v123 = *(_DWORD *)&v148[24];
          if (*(int *)&v148[4] <= *(int *)&v148[24])
            goto LABEL_132;
          goto LABEL_183;
        }
LABEL_182:
        v123 = *(_DWORD *)&v148[24];
        if (*(int *)&v148[4] <= *(int *)&v148[24])
        {
LABEL_132:
          v124 = *(_DWORD *)&v148[24];
          if (*(int *)&v148[8] > *(int *)&v148[24])
            goto LABEL_133;
          goto LABEL_184;
        }
LABEL_183:
        *(_DWORD *)&v148[24] = *(_DWORD *)&v148[20];
        *(_OWORD *)&v148[8] = *(_OWORD *)&v148[4];
        *(_DWORD *)&v148[4] = v123;
        v124 = *(_DWORD *)&v148[24];
        if (*(int *)&v148[8] > *(int *)&v148[24])
        {
LABEL_133:
          *(_OWORD *)&v148[12] = *(_OWORD *)&v148[8];
          *(_DWORD *)&v148[8] = v124;
          v125 = *(_DWORD *)&v148[24];
          if (*(int *)&v148[12] <= *(int *)&v148[24])
            goto LABEL_134;
          goto LABEL_185;
        }
LABEL_184:
        v125 = *(_DWORD *)&v148[24];
        if (*(int *)&v148[12] <= *(int *)&v148[24])
        {
LABEL_134:
          v126 = *(_DWORD *)&v148[24];
          if (*(int *)&v148[16] > *(int *)&v148[24])
            goto LABEL_135;
          goto LABEL_186;
        }
LABEL_185:
        *(_DWORD *)&v148[24] = *(_DWORD *)&v148[20];
        *(_QWORD *)&v148[16] = *(_QWORD *)&v148[12];
        *(_DWORD *)&v148[12] = v125;
        v126 = *(_DWORD *)&v148[24];
        if (*(int *)&v148[16] > *(int *)&v148[24])
        {
LABEL_135:
          v127 = *(_DWORD *)&v148[20];
          *(_DWORD *)&v148[20] = *(_DWORD *)&v148[16];
          *(_DWORD *)&v148[24] = v127;
          *(_DWORD *)&v148[16] = v126;
          v128 = v127;
          if (*(int *)&v148[20] <= v127)
            goto LABEL_136;
          goto LABEL_187;
        }
LABEL_186:
        v128 = *(_DWORD *)&v148[24];
        if (*(int *)&v148[20] <= *(int *)&v148[24])
        {
LABEL_136:
          v129 = *(_DWORD *)&v148[28];
          if (*(int *)v148 > *(int *)&v148[28])
            goto LABEL_137;
          goto LABEL_188;
        }
LABEL_187:
        v146 = *(_DWORD *)&v148[20];
        *(_DWORD *)&v148[20] = v128;
        *(_DWORD *)&v148[24] = v146;
        v129 = *(_DWORD *)&v148[28];
        if (*(int *)v148 > *(int *)&v148[28])
        {
LABEL_137:
          *(_DWORD *)&v148[28] = *(_DWORD *)&v148[24];
          *(_OWORD *)&v148[12] = *(_OWORD *)&v148[8];
          *(_QWORD *)&v148[4] = *(_QWORD *)v148;
          *(_DWORD *)v148 = v129;
          v130 = *(_DWORD *)&v148[28];
          if (*(int *)&v148[4] <= *(int *)&v148[28])
            goto LABEL_138;
          goto LABEL_189;
        }
LABEL_188:
        v130 = *(_DWORD *)&v148[28];
        if (*(int *)&v148[4] <= *(int *)&v148[28])
        {
LABEL_138:
          v131 = *(_DWORD *)&v148[28];
          if (*(int *)&v148[8] > *(int *)&v148[28])
            goto LABEL_139;
          goto LABEL_190;
        }
LABEL_189:
        *(_OWORD *)&v148[16] = *(_OWORD *)&v148[12];
        *(_QWORD *)&v148[8] = *(_QWORD *)&v148[4];
        *(_DWORD *)&v148[4] = v130;
        v131 = *(_DWORD *)&v148[28];
        if (*(int *)&v148[8] > *(int *)&v148[28])
        {
LABEL_139:
          *(_DWORD *)&v148[28] = *(_DWORD *)&v148[24];
          *(_OWORD *)&v148[12] = *(_OWORD *)&v148[8];
          *(_DWORD *)&v148[8] = v131;
          v132 = *(_DWORD *)&v148[28];
          if (*(int *)&v148[12] <= *(int *)&v148[28])
            goto LABEL_140;
          goto LABEL_191;
        }
LABEL_190:
        v132 = *(_DWORD *)&v148[28];
        if (*(int *)&v148[12] <= *(int *)&v148[28])
        {
LABEL_140:
          v133 = *(_DWORD *)&v148[28];
          if (*(int *)&v148[16] > *(int *)&v148[28])
            goto LABEL_141;
          goto LABEL_192;
        }
LABEL_191:
        *(_OWORD *)&v148[16] = *(_OWORD *)&v148[12];
        *(_DWORD *)&v148[12] = v132;
        v133 = *(_DWORD *)&v148[28];
        if (*(int *)&v148[16] > *(int *)&v148[28])
        {
LABEL_141:
          *(_DWORD *)&v148[28] = *(_DWORD *)&v148[24];
          *(_QWORD *)&v148[20] = *(_QWORD *)&v148[16];
          *(_DWORD *)&v148[16] = v133;
          v134 = *(_DWORD *)&v148[28];
          if (*(int *)&v148[20] <= *(int *)&v148[28])
            goto LABEL_142;
          goto LABEL_193;
        }
LABEL_192:
        v134 = *(_DWORD *)&v148[28];
        if (*(int *)&v148[20] <= *(int *)&v148[28])
        {
LABEL_142:
          v135 = *(_DWORD *)&v148[28];
          if (*(int *)&v148[24] > *(int *)&v148[28])
          {
LABEL_143:
            v136 = *(_DWORD *)&v148[24];
            *(_DWORD *)&v148[24] = v135;
            *(_DWORD *)&v148[28] = v136;
          }
LABEL_144:
          v54 = 0;
          v137 = 4 * v45;
          LOWORD(v45) = *(_WORD *)&v149[4 * v45];
          v8 = *(_DWORD *)&v148[v137];
          goto LABEL_54;
        }
LABEL_193:
        v147 = *(_DWORD *)&v148[24];
        *(_DWORD *)&v148[24] = *(_DWORD *)&v148[20];
        *(_DWORD *)&v148[28] = v147;
        *(_DWORD *)&v148[20] = v134;
        v135 = v147;
        if (*(int *)&v148[24] <= v147)
          goto LABEL_144;
        goto LABEL_143;
      }
LABEL_109:
      v99 = *(_DWORD *)&v149[24];
      *(_DWORD *)&v149[24] = v98;
      *(_DWORD *)&v149[28] = v99;
      goto LABEL_110;
    }
LABEL_83:
    if (!v17)
      goto LABEL_110;
    goto LABEL_84;
  }
  LOWORD(v45) = 0;
LABEL_55:
  *(_DWORD *)a4 = (unsigned __int16)v45 | ((unsigned __int16)v8 << 16);
  v55 = a2[1001] - 128;
  if (v55 > (__int16)v8 || (v55 = a2[1002] + 128, v55 < (__int16)v8))
    *(_WORD *)(a4 + 2) = v55;
  v56 = (__int16)v45;
  v57 = a2[1003] - 128;
  if (v57 > v56 || (v57 = a2[1004] + 128, v57 < v56))
    *(_WORD *)a4 = v57;
  return result;
}

uint64_t vp8_cal_sad(uint64_t result, uint64_t a2, uint64_t a3, int a4, __int128 *a5)
{
  uint64_t v8;
  uint64_t (**v9)(uint64_t, _QWORD, uint64_t);
  _DWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int32 *v33;
  __int32 *v34;
  int v35;
  int32x2_t *v36;
  int v37;
  int v38;
  int32x2_t *v39;
  int32x2_t *v40;
  __int32 v41;
  int v42;
  int32x2_t *v43;
  __int32 v44;
  int v45;
  int v46;
  __int32 v47;
  uint64_t v48;
  int v49;
  int32x2_t *v50;
  __int32 v51;
  int v52;
  __int128 v53;
  int v54;
  int v55;
  int v56;
  __int32 v57;
  __int32 v58;
  uint64_t v59;
  int v60;
  __int32 v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  __int32 v66;
  __int128 v67;
  int v68;
  int v69;
  __int32 v70;
  __int32 v71;
  uint64_t v72;
  int v73;
  __int32 v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __int128 v78;
  __int32 v79;
  uint64_t v80;
  __int32 v81;
  int v82;
  __int32 v83;
  __int32 v84;
  __int32 v85;
  __int32 v86;
  int v87;
  _DWORD *v88;
  int v89;
  __int128 *v90;
  int v92;
  _BYTE v93[32];

  v8 = result;
  v9 = (uint64_t (**)(uint64_t, _QWORD, uint64_t))(result + 143616);
  v10 = (_DWORD *)(result + 110548);
  *(_OWORD *)&v93[16] = 0u;
  v11 = **(_QWORD **)(a3 + 1936);
  v12 = *(_DWORD *)(a2 + 4004);
  if (!*(_DWORD *)(a2 + 4012))
  {
    LODWORD(v15) = 0x7FFFFFFF;
    *(_DWORD *)&v93[8] = 0x7FFFFFFF;
    if (!v12)
    {
      *(_QWORD *)v93 = 0x8000000080000000;
      LODWORD(v15) = 0x7FFFFFFF;
      v14 = 0x7FFFFFFF;
      v13 = 0x7FFFFFFF;
      if (!*(_DWORD *)(result + 111056))
        goto LABEL_32;
      goto LABEL_11;
    }
    *(_DWORD *)v93 = 0x7FFFFFFF;
    result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))*v9)(v11, *(unsigned int *)(a3 + 1948), *(_QWORD *)(a2 + 3768) - 16, *(unsigned int *)(a2 + 3728));
    v14 = result;
    *(_DWORD *)&v93[4] = result;
    v13 = 0x7FFFFFFF;
    if (v10[127])
      goto LABEL_11;
LABEL_32:
    if (v13 <= v14)
    {
      v31 = v14;
      if (v13 <= (int)v15)
      {
LABEL_37:
        if (v31 <= (int)v15)
          return result;
        v33 = (__int32 *)a5 + 1;
        v34 = (__int32 *)a5 + 2;
        goto LABEL_98;
      }
    }
    else
    {
      *(_DWORD *)v93 = v14;
      *(_DWORD *)&v93[4] = v13;
      *(int32x2_t *)a5 = vrev64_s32(*(int32x2_t *)a5);
      v31 = v13;
      if (v14 <= (int)v15)
        goto LABEL_37;
    }
    v32 = *((_DWORD *)a5 + 2);
    v31 = *(_DWORD *)v93;
    LODWORD(v15) = *(_DWORD *)&v93[4];
    *(_QWORD *)((char *)a5 + 4) = *(_QWORD *)a5;
    *(_DWORD *)a5 = v32;
    goto LABEL_37;
  }
  if (!v12)
  {
    *(_QWORD *)&v93[4] = 0x8000000080000000;
    result = (*v9)(v11, *(unsigned int *)(a3 + 1948), *(_QWORD *)(a2 + 3768) - 16 * *(int *)(a2 + 3728));
    v13 = result;
    *(_DWORD *)v93 = result;
    LODWORD(v15) = 0x7FFFFFFF;
    v14 = 0x7FFFFFFF;
    if (v10[127])
      goto LABEL_11;
    goto LABEL_32;
  }
  v13 = (*v9)(v11, *(unsigned int *)(a3 + 1948), *(_QWORD *)(a2 + 3768) - 16 * *(int *)(a2 + 3728));
  *(_DWORD *)v93 = v13;
  v14 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))*v9)(v11, *(unsigned int *)(a3 + 1948), *(_QWORD *)(a2 + 3768) - 16, *(unsigned int *)(a2 + 3728));
  *(_DWORD *)&v93[4] = v14;
  result = (*v9)(v11, *(unsigned int *)(a3 + 1948), *(_QWORD *)(a2 + 3768) - 16 * *(int *)(a2 + 3728) - 16);
  LODWORD(v15) = result;
  *(_DWORD *)&v93[8] = result;
  if (!v10[127])
    goto LABEL_32;
LABEL_11:
  v88 = v10;
  v16 = *v10;
  v17 = *(_DWORD *)(a2 + 4012);
  if (v17)
  {
    v18 = v8 + 160 * v16;
    v19 = *(_DWORD *)(a2 + 4004);
    if (v19)
      goto LABEL_13;
  }
  else
  {
    *(_DWORD *)&v93[16] = 0x7FFFFFFF;
    v18 = v8 + 160 * v16;
    v19 = *(_DWORD *)(a2 + 4004);
    if (v19)
    {
LABEL_13:
      v89 = v14;
      v90 = a5;
      v20 = v18 + 109888;
      v21 = *(_DWORD *)(a2 + 4008);
      if (v21)
        goto LABEL_14;
      goto LABEL_20;
    }
  }
  *(_DWORD *)&v93[20] = 0x7FFFFFFF;
  v89 = v14;
  v90 = a5;
  v20 = v18 + 109888;
  v21 = *(_DWORD *)(a2 + 4008);
  if (v21)
  {
LABEL_14:
    v22 = *(_QWORD *)(v20 + 56);
    v23 = *(int *)(v20 + 16);
    v24 = *(_DWORD *)(a2 + 4016);
    if (v24)
      goto LABEL_15;
    goto LABEL_21;
  }
LABEL_20:
  *(_DWORD *)&v93[24] = 0x7FFFFFFF;
  v22 = *(_QWORD *)(v20 + 56);
  v23 = *(int *)(v20 + 16);
  v24 = *(_DWORD *)(a2 + 4016);
  if (v24)
  {
LABEL_15:
    v25 = v22 + a4;
    if (v17)
      goto LABEL_16;
LABEL_22:
    v87 = 0x7FFFFFFF;
    if (v19)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_21:
  v25 = v22 + a4;
  if (!v17)
    goto LABEL_22;
LABEL_16:
  v87 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))*v9)(v11, *(unsigned int *)(a3 + 1948), v25 - 16 * v23, v23);
  *(_DWORD *)&v93[16] = v87;
  if (v19)
  {
LABEL_17:
    v92 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))*v9)(v11, *(unsigned int *)(a3 + 1948), v25 - 16, v23);
    *(_DWORD *)&v93[20] = v92;
    goto LABEL_24;
  }
LABEL_23:
  v92 = 0x7FFFFFFF;
LABEL_24:
  LODWORD(v26) = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))*v9)(v11, *(unsigned int *)(a3 + 1948), v25, v23);
  *(_DWORD *)&v93[12] = v26;
  if (v21)
  {
    LODWORD(v27) = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))*v9)(v11, *(unsigned int *)(a3 + 1948), v25 + 16, v23);
    *(_DWORD *)&v93[24] = v27;
    if (v24)
      goto LABEL_26;
  }
  else
  {
    LODWORD(v27) = 0x7FFFFFFF;
    if (v24)
    {
LABEL_26:
      result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))*v9)(v11, *(unsigned int *)(a3 + 1948), v25 + 16 * v23, v23);
      v14 = v89;
      a5 = v90;
      if (!v88[127])
        goto LABEL_32;
      goto LABEL_27;
    }
  }
  result = 0x7FFFFFFFLL;
  v14 = v89;
  a5 = v90;
  if (!v88[127])
    goto LABEL_32;
LABEL_27:
  if (v13 <= v14)
  {
    v28 = v14;
    v14 = v13;
    LODWORD(v29) = v92;
    LODWORD(v30) = v87;
    if (v13 <= (int)v15)
      goto LABEL_41;
    goto LABEL_40;
  }
  *(_DWORD *)v93 = v14;
  *(_DWORD *)&v93[4] = v13;
  *(int32x2_t *)a5 = vrev64_s32(*(int32x2_t *)a5);
  v28 = v13;
  LODWORD(v29) = v92;
  LODWORD(v30) = v87;
  if (v14 > (int)v15)
  {
LABEL_40:
    v35 = *((_DWORD *)a5 + 2);
    *(_QWORD *)&v93[4] = *(_QWORD *)v93;
    v28 = *(_DWORD *)&v93[4];
    *(_QWORD *)((char *)a5 + 4) = *(_QWORD *)a5;
    *(_DWORD *)v93 = v15;
    *(_DWORD *)a5 = v35;
    v14 = v15;
    v15 = HIDWORD(*(_QWORD *)&v93[4]);
  }
LABEL_41:
  v36 = (int32x2_t *)((char *)a5 + 4);
  if (v28 <= (int)v15)
  {
    LODWORD(v15) = v28;
    if (v14 <= (int)v26)
      goto LABEL_46;
    goto LABEL_45;
  }
  *(_DWORD *)&v93[4] = v15;
  *(_DWORD *)&v93[8] = v28;
  *v36 = vrev64_s32(*v36);
  if (v14 > (int)v26)
  {
LABEL_45:
    v15 = *(_QWORD *)v93;
    *(_DWORD *)v93 = v26;
    v14 = v26;
    LODWORD(v26) = *(_DWORD *)&v93[8];
    *(_QWORD *)&v93[4] = v15;
    *(_DWORD *)&v93[12] = v26;
    v38 = *((_DWORD *)a5 + 2);
    v37 = *((_DWORD *)a5 + 3);
    *v36 = *(int32x2_t *)a5;
    *((_DWORD *)a5 + 3) = v38;
    *(_DWORD *)a5 = v37;
  }
LABEL_46:
  v39 = (int32x2_t *)a5 + 1;
  v40 = (int32x2_t *)((char *)a5 + 12);
  if ((int)v15 <= (int)v26)
  {
    v42 = *(_DWORD *)&v93[8];
    if (*(int *)&v93[8] <= (int)v26)
      goto LABEL_51;
    goto LABEL_50;
  }
  v41 = v40->i32[0];
  *(_QWORD *)&v93[8] = *(_QWORD *)&v93[4];
  v42 = *(_DWORD *)&v93[8];
  *v39 = *v36;
  *(_DWORD *)&v93[4] = v26;
  v36->i32[0] = v41;
  LODWORD(v15) = v26;
  v26 = HIDWORD(*(_QWORD *)&v93[8]);
  if (*(int *)&v93[8] > *(int *)&v93[12])
  {
LABEL_50:
    *(_DWORD *)&v93[8] = v26;
    *(_DWORD *)&v93[12] = v42;
    *v39 = vrev64_s32(*v39);
  }
LABEL_51:
  if (v14 > (int)v30)
  {
    v46 = *((_DWORD *)a5 + 4);
    *(_OWORD *)&v93[4] = *(_OWORD *)v93;
    *(_OWORD *)v36->i8 = *a5;
    *(_DWORD *)v93 = v30;
    *(_DWORD *)a5 = v46;
    v14 = v30;
    LODWORD(v15) = *(_DWORD *)&v93[4];
    LODWORD(v30) = *(_DWORD *)&v93[16];
    v43 = (int32x2_t *)(a5 + 1);
    if (*(int *)&v93[4] <= *(int *)&v93[16])
    {
LABEL_53:
      if (*(int *)&v93[8] > (int)v30)
        goto LABEL_54;
LABEL_58:
      v45 = *(_DWORD *)&v93[12];
      if (*(int *)&v93[12] <= (int)v30)
        goto LABEL_60;
      goto LABEL_59;
    }
  }
  else
  {
    v43 = (int32x2_t *)(a5 + 1);
    if ((int)v15 <= (int)v30)
      goto LABEL_53;
  }
  v47 = v43->i32[0];
  v48 = *(_QWORD *)&v93[4];
  *(_DWORD *)&v93[4] = v30;
  LODWORD(v15) = v30;
  v49 = *(_DWORD *)&v93[12];
  *(_QWORD *)&v93[8] = v48;
  *(_DWORD *)&v93[16] = v49;
  LODWORD(v48) = *((_DWORD *)a5 + 3);
  *v39 = *v36;
  *((_DWORD *)a5 + 4) = v48;
  LODWORD(v30) = v49;
  v36->i32[0] = v47;
  if (*(int *)&v93[8] <= v49)
    goto LABEL_58;
LABEL_54:
  v44 = v43->i32[0];
  *(_QWORD *)&v93[12] = *(_QWORD *)&v93[8];
  v45 = *(_DWORD *)&v93[12];
  *v40 = *v39;
  *(_DWORD *)&v93[8] = v30;
  v39->i32[0] = v44;
  v30 = HIDWORD(*(_QWORD *)&v93[12]);
  if (*(int *)&v93[12] > *(int *)&v93[16])
  {
LABEL_59:
    *(_DWORD *)&v93[12] = v30;
    *(_DWORD *)&v93[16] = v45;
    *v40 = vrev64_s32(*v40);
  }
LABEL_60:
  if (v14 > (int)v29)
  {
    v53 = *(_OWORD *)v93;
    *(_DWORD *)v93 = v29;
    v14 = v29;
    v54 = *(_DWORD *)&v93[16];
    *(_OWORD *)&v93[4] = v53;
    *(_DWORD *)&v93[20] = v54;
    v56 = *((_DWORD *)a5 + 4);
    v55 = *((_DWORD *)a5 + 5);
    *(_OWORD *)v36->i8 = *a5;
    *((_DWORD *)a5 + 5) = v56;
    *(_DWORD *)a5 = v55;
    LODWORD(v15) = v53;
    LODWORD(v29) = v54;
    v50 = (int32x2_t *)((char *)a5 + 20);
    if ((int)v53 <= (int)v29)
    {
LABEL_62:
      if (*(int *)&v93[8] <= (int)v29)
        goto LABEL_63;
      goto LABEL_68;
    }
  }
  else
  {
    v50 = (int32x2_t *)((char *)a5 + 20);
    if ((int)v15 <= (int)v29)
      goto LABEL_62;
  }
  v57 = v50->i32[0];
  *(_OWORD *)&v93[8] = *(_OWORD *)&v93[4];
  *(_OWORD *)v39->i8 = *(_OWORD *)v36->i8;
  *(_DWORD *)&v93[4] = v29;
  v36->i32[0] = v57;
  LODWORD(v15) = v29;
  LODWORD(v29) = *(_DWORD *)&v93[20];
  if (*(int *)&v93[8] <= *(int *)&v93[20])
  {
LABEL_63:
    if (*(int *)&v93[12] > (int)v29)
      goto LABEL_64;
LABEL_69:
    v52 = *(_DWORD *)&v93[16];
    if (*(int *)&v93[16] <= (int)v29)
      goto LABEL_71;
    goto LABEL_70;
  }
LABEL_68:
  v58 = v50->i32[0];
  v59 = *(_QWORD *)&v93[8];
  *(_DWORD *)&v93[8] = v29;
  v60 = *(_DWORD *)&v93[16];
  *(_QWORD *)&v93[12] = v59;
  *(_DWORD *)&v93[20] = v60;
  LODWORD(v59) = *((_DWORD *)a5 + 4);
  *v40 = *v39;
  *((_DWORD *)a5 + 5) = v59;
  LODWORD(v29) = v60;
  v39->i32[0] = v58;
  if (*(int *)&v93[12] <= v60)
    goto LABEL_69;
LABEL_64:
  v51 = v50->i32[0];
  *(_QWORD *)&v93[16] = *(_QWORD *)&v93[12];
  v52 = *(_DWORD *)&v93[16];
  *v43 = *v40;
  *(_DWORD *)&v93[12] = v29;
  v40->i32[0] = v51;
  v29 = HIDWORD(*(_QWORD *)&v93[16]);
  if (*(int *)&v93[16] > *(int *)&v93[20])
  {
LABEL_70:
    *(_DWORD *)&v93[16] = v29;
    *(_DWORD *)&v93[20] = v52;
    *v43 = vrev64_s32(*v43);
  }
LABEL_71:
  if (v14 > (int)v27)
  {
    v63 = *((_DWORD *)a5 + 6);
    v64 = *(_QWORD *)&v93[16];
    *(_OWORD *)&v93[4] = *(_OWORD *)v93;
    *(_QWORD *)&v93[20] = v64;
    v65 = *((_QWORD *)a5 + 2);
    *(_OWORD *)v36->i8 = *a5;
    *(_QWORD *)((char *)a5 + 20) = v65;
    *(_DWORD *)v93 = v27;
    *(_DWORD *)a5 = v63;
    v14 = v27;
    LODWORD(v15) = *(_DWORD *)&v93[4];
    LODWORD(v27) = *(_DWORD *)&v93[24];
    v33 = (__int32 *)a5 + 6;
    if (*(int *)&v93[4] <= *(int *)&v93[24])
    {
LABEL_73:
      if (*(int *)&v93[8] <= (int)v27)
        goto LABEL_74;
      goto LABEL_80;
    }
  }
  else
  {
    v33 = (__int32 *)a5 + 6;
    if ((int)v15 <= (int)v27)
      goto LABEL_73;
  }
  v66 = *v33;
  v67 = *(_OWORD *)&v93[4];
  *(_DWORD *)&v93[4] = v27;
  LODWORD(v15) = v27;
  v68 = *(_DWORD *)&v93[20];
  *(_OWORD *)&v93[8] = v67;
  *(_DWORD *)&v93[24] = v68;
  v69 = *((_DWORD *)a5 + 5);
  *(_OWORD *)v39->i8 = *(_OWORD *)v36->i8;
  *((_DWORD *)a5 + 6) = v69;
  LODWORD(v27) = v68;
  v36->i32[0] = v66;
  if ((int)v67 <= v68)
  {
LABEL_74:
    if (*(int *)&v93[12] <= (int)v27)
      goto LABEL_75;
    goto LABEL_81;
  }
LABEL_80:
  v70 = *v33;
  *(_OWORD *)&v93[12] = *(_OWORD *)&v93[8];
  *(_OWORD *)v40->i8 = *(_OWORD *)v39->i8;
  *(_DWORD *)&v93[8] = v27;
  v39->i32[0] = v70;
  LODWORD(v27) = *(_DWORD *)&v93[24];
  if (*(int *)&v93[12] <= *(int *)&v93[24])
  {
LABEL_75:
    if (*(int *)&v93[16] > (int)v27)
      goto LABEL_76;
LABEL_82:
    v62 = *(_DWORD *)&v93[20];
    if (*(int *)&v93[20] <= (int)v27)
      goto LABEL_84;
    goto LABEL_83;
  }
LABEL_81:
  v71 = *v33;
  v72 = *(_QWORD *)&v93[12];
  *(_DWORD *)&v93[12] = v27;
  v73 = *(_DWORD *)&v93[20];
  *(_QWORD *)&v93[16] = v72;
  *(_DWORD *)&v93[24] = v73;
  LODWORD(v72) = *((_DWORD *)a5 + 5);
  *v43 = *v40;
  v43[1].i32[0] = v72;
  LODWORD(v27) = v73;
  v40->i32[0] = v71;
  if (*(int *)&v93[16] <= v73)
    goto LABEL_82;
LABEL_76:
  v61 = *v33;
  *(_QWORD *)&v93[20] = *(_QWORD *)&v93[16];
  v62 = *(_DWORD *)&v93[20];
  *v50 = *v43;
  *(_DWORD *)&v93[16] = v27;
  v43->i32[0] = v61;
  v27 = HIDWORD(*(_QWORD *)&v93[20]);
  if (*(int *)&v93[20] > *(int *)&v93[24])
  {
LABEL_83:
    *(_DWORD *)&v93[20] = v27;
    *(_DWORD *)&v93[24] = v62;
    *v50 = vrev64_s32(*v50);
  }
LABEL_84:
  if (v14 > (int)result)
  {
    v75 = *(_QWORD *)&v93[16];
    *(_OWORD *)&v93[4] = *(_OWORD *)v93;
    result = *(unsigned int *)&v93[24];
    *(_QWORD *)&v93[20] = v75;
    v76 = *((_QWORD *)a5 + 2);
    v77 = *((_DWORD *)a5 + 7);
    v78 = *a5;
    *((_DWORD *)a5 + 7) = *((_DWORD *)a5 + 6);
    *(_OWORD *)v36->i8 = v78;
    *(_QWORD *)((char *)a5 + 20) = v76;
    *(_DWORD *)a5 = v77;
    v34 = (__int32 *)a5 + 7;
    if (*(int *)&v93[4] <= (int)result)
    {
LABEL_86:
      if (*(int *)&v93[8] <= (int)result)
        goto LABEL_87;
      goto LABEL_94;
    }
  }
  else
  {
    v34 = (__int32 *)a5 + 7;
    if ((int)v15 <= (int)result)
      goto LABEL_86;
  }
  v79 = *v34;
  *(_QWORD *)&v93[24] = *(_QWORD *)&v93[20];
  *(_OWORD *)&v93[8] = *(_OWORD *)&v93[4];
  v80 = *(_QWORD *)((char *)a5 + 20);
  *(_OWORD *)v39->i8 = *(_OWORD *)v36->i8;
  *((_QWORD *)a5 + 3) = v80;
  v36->i32[0] = v79;
  result = *(unsigned int *)&v93[28];
  if (*(int *)&v93[8] <= *(int *)&v93[28])
  {
LABEL_87:
    if (*(int *)&v93[12] <= (int)result)
      goto LABEL_88;
    goto LABEL_95;
  }
LABEL_94:
  v81 = *v34;
  result = *(unsigned int *)&v93[24];
  *(_OWORD *)&v93[12] = *(_OWORD *)&v93[8];
  v82 = *((_DWORD *)a5 + 6);
  *(_OWORD *)v40->i8 = *(_OWORD *)v39->i8;
  *((_DWORD *)a5 + 7) = v82;
  v39->i32[0] = v81;
  if (*(int *)&v93[12] <= (int)result)
  {
LABEL_88:
    if (*(int *)&v93[16] <= (int)result)
      goto LABEL_89;
    goto LABEL_96;
  }
LABEL_95:
  v83 = *v34;
  *(_OWORD *)&v93[16] = *(_OWORD *)&v93[12];
  *(_OWORD *)v43->i8 = *(_OWORD *)v40->i8;
  v40->i32[0] = v83;
  result = *(unsigned int *)&v93[28];
  if (*(int *)&v93[16] <= *(int *)&v93[28])
  {
LABEL_89:
    if (*(int *)&v93[20] > (int)result)
      goto LABEL_90;
LABEL_97:
    if (*(int *)&v93[24] <= (int)result)
      return result;
    goto LABEL_98;
  }
LABEL_96:
  v84 = *v34;
  result = *(unsigned int *)&v93[24];
  *(_QWORD *)&v93[20] = *(_QWORD *)&v93[16];
  v85 = v43[1].i32[0];
  *v50 = *v43;
  v50[1].i32[0] = v85;
  v43->i32[0] = v84;
  if (*(int *)&v93[20] <= (int)result)
    goto LABEL_97;
LABEL_90:
  v74 = *v34;
  result = *(unsigned int *)&v93[24];
  *(int32x2_t *)v33 = *v50;
  v50->i32[0] = v74;
  if (*(int *)&v93[20] > *(int *)&v93[24])
  {
LABEL_98:
    v86 = *v34;
    *v34 = *v33;
    *v33 = v86;
  }
  return result;
}

void vp8_rd_pick_inter_mode(_DWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, int a8, int a9)
{
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  char *v35;
  int v36;
  int *v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  _BOOL4 v84;
  int v85;
  int v86;
  int v87;
  _DWORD *v88;
  _DWORD *v89;
  int v90;
  int *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  BOOL v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  BOOL v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  _DWORD *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int *v142;
  char *v143;
  int *v144;
  int v145;
  uint8x8_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  __int16 *v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  char *v180;
  int v181;
  uint64_t v182;
  int *v183;
  uint64_t v184;
  int v185;
  int v186;
  unsigned int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  int v193;
  int v194;
  uint64_t v195;
  _BYTE *v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  unsigned __int8 *v206;
  int v207;
  _DWORD *v208;
  int v209;
  uint64_t v210;
  int v211;
  int v212;
  __int16 *v213;
  int v214;
  int v215;
  uint64_t v216;
  int v217;
  int v218;
  uint64_t v219;
  void (**v220)(_QWORD, _QWORD, uint64_t);
  int v222;
  int v223;
  int v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  int *v233;
  _DWORD *v234;
  int v236;
  int v237;
  int v238;
  unsigned int v241;
  int *v242;
  int v243;
  int v244;
  unsigned int v245;
  int v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  unsigned int v253;
  int v254;
  int v255;
  _OWORD *v256;
  int v257;
  uint64_t v258;
  int v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  unint64_t v273;
  int v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  _DWORD v278[7];
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  int v287;
  int v288;
  int v289;
  uint64_t v290;
  char v291;
  int v292;
  int v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300[2];
  int v301[4];
  _QWORD v302[11];
  _DWORD v303[2];
  int *v304;
  int v305;
  int v306;
  __int128 v307;
  _BYTE v308[64];
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  int v314;
  int v315;
  int *v316;
  __int128 v317;
  uint64_t v318;
  uint64_t v319;

  v12 = (uint64_t)a1;
  v319 = *MEMORY[0x24BDAC8D0];
  v272 = 0;
  v270 = 0;
  v269 = 0;
  v268 = 0;
  v267 = 0;
  v13 = a1 + 27637;
  v300[0] = xmmword_208F3F6F4;
  v300[1] = unk_208F3F704;
  v266 = 0;
  v298 = 0u;
  v299 = 0u;
  v296 = 0u;
  v297 = 0u;
  v294 = 0u;
  v295 = 0u;
  v14 = a1[27777] + a1[27776];
  v15 = v14 & ~(v14 >> 31);
  if (v15 >= 127)
    v15 = 127;
  v16 = dc_qlookup[v15];
  v265 = -1;
  LODWORD(v270) = 0;
  v271 = 0;
  v289 = 0;
  v273 = 0x8000000080000000;
  v274 = 0x7FFFFFFF;
  memset(v302, 0, 80);
  memset(v278, 0, sizeof(v278));
  v277 = 0uLL;
  v276 = 0uLL;
  v275 = 0uLL;
  v292 = 0;
  v17 = 1;
  v234 = a1 + 35697;
  v18 = a1[35719];
  if ((v18 & 1) == 0)
  {
    if ((v18 & 2) == 0)
      goto LABEL_5;
LABEL_8:
    *(&v292 + v17++) = 2;
    v242 = (int *)(a2 + 4224);
    if ((v18 & 4) == 0)
      goto LABEL_11;
    goto LABEL_9;
  }
  v293 = 1;
  v17 = 2;
  if ((v18 & 2) != 0)
    goto LABEL_8;
LABEL_5:
  v242 = (int *)(a2 + 4224);
  if ((v18 & 4) == 0)
    goto LABEL_11;
LABEL_9:
  *(&v292 + v17) = 3;
  if (v17 > 2)
    goto LABEL_12;
  ++v17;
LABEL_11:
  memset(&v292 + v17, 255, 4 * (3 - v17) + 4);
LABEL_12:
  v233 = v13;
  v288 = 0;
  v279 = 0u;
  v280 = 0u;
  v281 = 0u;
  v282 = 0u;
  v283 = 0u;
  v284 = 0u;
  v285 = 0u;
  v286 = 0u;
  v287 = 0;
  if (v293 < 1)
  {
    v260 = v302;
    v20 = 0;
    if ((v18 & 1) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  v19 = vp8_find_near_mvs_bias(v242, *(_QWORD *)(a2 + 8096), (uint64_t)v302, (uint64_t)v303, (uint64_t)v301, v293, v12 + 111592);
  v260 = &v302[5 * v19];
  v20 = v19;
  v289 = v303[v19];
  v18 = v234[22];
  if ((v18 & 1) != 0)
  {
LABEL_14:
    v21 = v12 + 160 * *v13 + 109888;
    v22 = *(_QWORD *)(v12 + 160 * *v13 + 109952) + a4;
    *((_QWORD *)&v295 + 1) = *(_QWORD *)(v12 + 160 * *v13 + 109944) + a3;
    *(_QWORD *)&v296 = v22;
    *((_QWORD *)&v296 + 1) = *(_QWORD *)(v21 + 72) + a4;
  }
LABEL_15:
  if ((v18 & 2) != 0)
  {
    v23 = v12 + 160 * v13[1] + 109888;
    v24 = *(_QWORD *)(v12 + 160 * v13[1] + 109952) + a4;
    *(_QWORD *)&v297 = *(_QWORD *)(v12 + 160 * v13[1] + 109944) + a3;
    *((_QWORD *)&v297 + 1) = v24;
    *(_QWORD *)&v298 = *(_QWORD *)(v23 + 72) + a4;
  }
  v220 = (void (**)(_QWORD, _QWORD, uint64_t))(a2 + 34264);
  v256 = (_OWORD *)(a2 + 7832);
  v258 = v12 + 143464;
  v250 = a2 + 1864;
  v252 = a2 + 6368;
  v244 = 10 * v16;
  if ((v18 & 4) != 0)
  {
    v25 = v12 + 160 * v13[2] + 109888;
    v26 = *(_QWORD *)(v12 + 160 * v13[2] + 109952) + a4;
    *((_QWORD *)&v298 + 1) = *(_QWORD *)(v12 + 160 * v13[2] + 109944) + a3;
    *(_QWORD *)&v299 = v26;
    *((_QWORD *)&v299 + 1) = *(_QWORD *)(v25 + 72) + a4;
  }
  v228 = a4;
  v27 = 0;
  v254 = 0;
  v251 = 0;
  v259 = 0;
  v28 = 0;
  v243 = 0;
  *a7 = 0x7FFFFFFF;
  v29 = (int *)(a2 + 30028);
  ++*(_DWORD *)(a2 + 30056);
  *(_DWORD *)(a2 + 8768) = 0;
  v227 = v12 + 111592;
  v232 = a2 + 6416;
  v248 = a2 + 8680;
  v249 = v12 + 143616;
  v253 = -1;
  v241 = -1;
  v257 = v20;
  while (1)
  {
    v264 = 0;
    v30 = 4 * v27;
    v31 = (_DWORD *)(a2 + 4 * v27 + 29976);
    if (SHIDWORD(v273) <= *v31)
      goto LABEL_20;
    v32 = *(&v292 + vp8_ref_frame_order[v27]);
    if ((v32 & 0x80000000) != 0)
      goto LABEL_20;
    v33 = vp8_mode_order[v27];
    LODWORD(v269) = 0;
    HIDWORD(v270) = 0;
    v34 = *(_BYTE **)(a2 + 8096);
    *v34 = v33;
    v34[2] = v32;
    if (!v13[1106] || v13[982])
      break;
    if (((0x51uLL >> v27) & 1) != 0 && v32 == 3)
      goto LABEL_26;
LABEL_20:
    if (++v27 == 20)
      goto LABEL_234;
  }
  if (!(_BYTE)v32)
    goto LABEL_28;
LABEL_26:
  v35 = (char *)&v294 + 24 * v32;
  *v256 = *(_OWORD *)v35;
  *(_QWORD *)(a2 + 7848) = *((_QWORD *)v35 + 2);
  v36 = *(_DWORD *)(v12 + 4 * v32 + 111592);
  if (v257 != v36)
  {
    v260 = &v302[5 * v36];
    v289 = v303[v36];
    v257 = v36;
  }
LABEL_28:
  v37 = (int *)(a2 + 4 * v27 + 30060);
  v38 = *v37;
  if (*v37)
  {
    v39 = *(_DWORD *)(v12 + 4 * v27 + 115184);
    if (v39 >= 2 && v29[7] <= v39 * v38)
    {
      v57 = *(_DWORD *)(a2 + v30 + 29896);
      if (v57 <= 508)
        v58 = v57 + 4;
      else
        v58 = 512;
      *(_DWORD *)(a2 + v30 + 29896) = v58;
      *v31 = (*(int *)(v12 + v30 + 115264) >> 7) * v58;
      goto LABEL_20;
    }
  }
  *v37 = v38 + 1;
  if (v29[28])
  {
    if ((_DWORD)v32)
    {
      if (((0x51uLL >> v27) & 1) != 0)
      {
        if ((_DWORD)v32 == 1)
          v40 = 6;
        else
          v40 = 12;
      }
      else
      {
        v40 = 4 * ((unint64_t)(v27 - 16) > 2);
      }
    }
    else
    {
      v40 = 0;
    }
    v29[29] = v40;
    v41 = v12 + 4 * *(int *)(a2 + 8804) + 108032;
    v42 = v29[32];
    v43 = *(_DWORD *)(a2 + 8672) + v40;
    v44 = ((v43 + v42) * *(__int16 *)(v12 + 4 * *(int *)(a2 + 8804) + 108322)) >> 7;
    *(_WORD *)(a2 + 1928) = v44;
    *(_WORD *)(a2 + 2016) = v44;
    *(_WORD *)(a2 + 2104) = v44;
    *(_WORD *)(a2 + 2192) = v44;
    *(_WORD *)(a2 + 2280) = v44;
    *(_WORD *)(a2 + 2368) = v44;
    *(_WORD *)(a2 + 2456) = v44;
    *(_WORD *)(a2 + 2544) = v44;
    *(_WORD *)(a2 + 2632) = v44;
    *(_WORD *)(a2 + 2720) = v44;
    *(_WORD *)(a2 + 2808) = v44;
    *(_WORD *)(a2 + 2896) = v44;
    *(_WORD *)(a2 + 2984) = v44;
    *(_WORD *)(a2 + 3072) = v44;
    *(_WORD *)(a2 + 3160) = v44;
    *(_WORD *)(a2 + 3248) = v44;
    v45 = ((v43 + v42) * *(__int16 *)(v41 + 1314)) >> 7;
    *(_WORD *)(a2 + 3336) = v45;
    *(_WORD *)(a2 + 3424) = v45;
    *(_WORD *)(a2 + 3512) = v45;
    *(_WORD *)(a2 + 3600) = v45;
    *(_WORD *)(a2 + 3688) = v45;
    *(_WORD *)(a2 + 3776) = v45;
    *(_WORD *)(a2 + 3864) = v45;
    *(_WORD *)(a2 + 3952) = v45;
    v46 = *(__int16 *)(v41 + 802);
    if (v42 >= 0)
      v47 = v42;
    else
      v47 = v42 + 1;
    *(_WORD *)(a2 + 4040) = ((v43 + (v47 >> 1)) * v46) >> 7;
  }
  v261 = 4 * v27;
  v262 = v33;
  if (!(v259 | v32))
  {
    rd_pick_intra_mbuv_mode(a2, (_DWORD *)&v268 + 1, (_DWORD *)&v267 + 1, &v268);
    v33 = v262;
    v34 = *(_BYTE **)(a2 + 8096);
    v251 = v34[1];
    v28 = (vaddlvq_s16(vmovl_s8(*(int8x8_t *)(a2 + 6224))) + v28);
    v259 = 1;
  }
  switch((int)v33)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      LODWORD(v304) = 0;
      v34[2] = 0;
      vp8_build_intra_predictors_mby_s((uint64_t)v242, *(_QWORD *)(a2 + 7992) - *(int *)(a2 + 7952), (_BYTE *)(*(_QWORD *)(a2 + 7992) - 1), *(_DWORD *)(a2 + 7952), (uint64_t)v242, 16);
      macro_block_yrd(a2, (_DWORD *)&v269 + 1, (int *)&v304);
      v48 = 0;
      LODWORD(v269) = v269
                    + HIDWORD(v269)
                    + HIDWORD(v268)
                    + *(_DWORD *)(*(_QWORD *)(a2 + 8712)
                                + 40 * *(unsigned int *)(a2 + 8108)
                                + 4 * **(unsigned __int8 **)(a2 + 8096));
      LODWORD(v270) = HIDWORD(v267);
      HIDWORD(v270) += (_DWORD)v304 + v268;
      v271 = v268;
      goto LABEL_50;
    case 4:
      LODWORD(v304) = 0;
      v67 = rd_pick_intra4x4mby_modes(a2, &v272, (_DWORD *)&v269 + 1, &v304, v273);
      v68 = v269 + v272;
      v69 = HIDWORD(v270) + (_DWORD)v304;
      LODWORD(v269) = v269 + v272;
      HIDWORD(v270) += (_DWORD)v304;
      if (v67 >= (int)v273)
        goto LABEL_209;
      v48 = 0;
      LODWORD(v269) = HIDWORD(v268) + v68;
      LODWORD(v270) = HIDWORD(v267);
      HIDWORD(v270) = v268 + v69;
      v271 = v268;
      goto LABEL_50;
    case 5:
    case 6:
      goto LABEL_219;
    case 7:
      v70 = 7;
      v71 = *((__int16 *)v260 + 14) >> 3;
      if (*(_DWORD *)(a2 + 8760) > v71)
        goto LABEL_20;
      goto LABEL_230;
    case 8:
      v229 = v28;
      v72 = v234[53];
      v245 = *(_DWORD *)(a2 + 8636);
      LODWORD(v304) = 0;
      v73 = SHIWORD(v289);
      v74 = (__int16)v289;
      v222 = *(_DWORD *)(a2 + 8752);
      v223 = *(_DWORD *)(a2 + 8756);
      v224 = *(_DWORD *)(a2 + 8760);
      v225 = *(_DWORD *)(a2 + 8764);
      if (!v254)
      {
        vp8_cal_sad(v12, (uint64_t)v242, a2, a3, v300);
        v34 = *(_BYTE **)(a2 + 8096);
      }
      v75 = v12;
      v76 = ((v73 + 7) >> 3) - 255;
      v226 = v75;
      vp8_mv_pred(v75, v242, (uint64_t)v34, (uint64_t)&v267, v34[2], v227, (int *)&v266, (int *)v300);
      WORD1(v304) = SWORD1(v267) >> 3;
      LOWORD(v304) = (__int16)v267 >> 3;
      if (*(_DWORD *)(a2 + 8752) < v76)
        *(_DWORD *)(a2 + 8752) = v76;
      v77 = (v73 >> 3) + 255;
      if (*(_DWORD *)(a2 + 8756) > v77)
        *(_DWORD *)(a2 + 8756) = v77;
      v78 = ((v74 + 7) >> 3) - 255;
      if (*(_DWORD *)(a2 + 8760) < v78)
        *(_DWORD *)(a2 + 8760) = v78;
      v79 = (v74 >> 3) + 255;
      if (*(_DWORD *)(a2 + 8764) > v79)
        *(_DWORD *)(a2 + 8764) = v79;
      if ((int)v266 <= (int)v72)
        v80 = v72;
      else
        v80 = v266;
      v255 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int **, uint64_t, uint64_t, _QWORD, int *, uint64_t, uint64_t, int *))(v258 + 16))(a2, v250, v252, &v304, v232, v80, v245, &v288, v249, v248, &v289);
      *((_DWORD *)v260 + 8) = *(_DWORD *)(a2 + 6416);
      v81 = v234[52];
      v82 = v81 + ~(_DWORD)v80;
      v83 = v288;
      v288 = 0;
      v84 = v83 <= v82;
      if (v83 < v82)
      {
        v85 = 0;
        v86 = v80;
        v87 = v81 - v83 - v80 - 2;
        v236 = v86 + 1;
        v88 = (_DWORD *)(a2 + 6416);
        v33 = v262;
        while (1)
        {
          if (v85)
          {
            v288 = --v85;
            ++v83;
            --v87;
            if (v83 >= v82)
              goto LABEL_102;
          }
          else
          {
            v89 = v88;
            v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int **, _DWORD *, _QWORD, _QWORD, int *, uint64_t, uint64_t, int *))(v258 + 16))(a2, v250, v252, &v304, v88, (v236 + v83), v245, &v288, v249, v248, &v289);
            v85 = v288;
            if (v288 > v87)
              v84 = 0;
            if (v90 >= v255)
            {
              *v89 = *((_DWORD *)v260 + 8);
            }
            else
            {
              *((_DWORD *)v260 + 8) = *v89;
              v255 = v90;
            }
            v88 = v89;
            v33 = v262;
            ++v83;
            --v87;
            if (v83 >= v82)
            {
LABEL_102:
              v128 = v84;
              v12 = v226;
              v13 = v233;
              v28 = v229;
              v29 = (int *)(a2 + 30028);
              if (!v128)
                goto LABEL_212;
              goto LABEL_194;
            }
          }
        }
      }
      v88 = (_DWORD *)(a2 + 6416);
      v13 = v233;
      v33 = v262;
      v128 = v84;
      v12 = v226;
      v28 = v229;
      v29 = (int *)(a2 + 30028);
      if (!v128)
        goto LABEL_212;
LABEL_194:
      v135 = v88;
      if ((*(int (**)(uint64_t, uint64_t, uint64_t, _DWORD *, _QWORD, uint64_t, uint64_t, uint64_t, int *))(v258 + 8))(a2, v250, v252, v88, v245, 8, v249, v248, &v289) < v255)
      {
        *((_DWORD *)v260 + 8) = *(_DWORD *)(a2 + 6416);
        *(_DWORD *)(a2 + 8752) = v222;
        *(_DWORD *)(a2 + 8756) = v223;
        *(_DWORD *)(a2 + 8760) = v224;
        *(_DWORD *)(a2 + 8764) = v225;
        goto LABEL_213;
      }
      *v135 = *((_DWORD *)v260 + 8);
      v33 = v262;
LABEL_212:
      *(_DWORD *)(a2 + 8752) = v222;
      *(_DWORD *)(a2 + 8756) = v223;
      *(_DWORD *)(a2 + 8760) = v224;
      *(_DWORD *)(a2 + 8764) = v225;
      if (v255 == 0x7FFFFFFF)
        goto LABEL_214;
LABEL_213:
      LODWORD(v290) = 0;
      v263 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, _QWORD, uint64_t, uint64_t, uint64_t *, int *))v258)(a2, v250, v252, v232, &v289, *(unsigned int *)(a2 + 8632), v249, v248, &v290, &v263);
      v33 = v262;
LABEL_214:
      v170 = *(_DWORD *)(a2 + 6416);
      *((_DWORD *)v260 + 8) = v170;
      v171 = ((__int16)v170 - (__int16)v289) >> 1;
      if (v171 >= 2047)
        v171 = 2047;
      v172 = v171 & ~(v171 >> 31);
      v173 = ((v170 >> 16) - SHIWORD(v289)) >> 1;
      if (v173 >= 2047)
        v173 = 2047;
      LODWORD(v269) = (96
                     * (*(_DWORD *)(*(_QWORD *)(a2 + 8688) + 4 * (v173 & ~(v173 >> 31)))
                      + *(_DWORD *)(*(_QWORD *)(a2 + 8680) + 4 * v172))) >> 7;
      v254 = 1;
LABEL_219:
      v174 = (__int16 *)v260 + 2 * v33;
      v175 = v174[1];
      v176 = *(_DWORD *)(a2 + 8228) - 128;
      if (v176 > v175 || (v176 = *(_DWORD *)(a2 + 8232) + 128, v176 < v175))
        v174[1] = v176;
      v177 = *v174;
      v178 = *(_DWORD *)(a2 + 8236) - 128;
      if (v178 <= v177 && (v178 = *(_DWORD *)(a2 + 8240) + 128, v178 >= v177))
      {
        LOWORD(v178) = *v174;
        if ((((0x308uLL >> v27) | (0xA4uLL >> v27)) & 1) == 0)
        {
LABEL_229:
          v70 = v33;
          v71 = (__int16)v178 >> 3;
          if (*(_DWORD *)(a2 + 8760) > v71)
            goto LABEL_20;
          goto LABEL_230;
        }
      }
      else
      {
        *v174 = v178;
        if ((((0x308uLL >> v27) | (0xA4uLL >> v27)) & 1) == 0)
          goto LABEL_229;
      }
      v179 = *(_DWORD *)v174;
      v70 = v33;
      if (!v179)
        goto LABEL_20;
      v71 = (__int16)v179 >> 3;
      if (*(_DWORD *)(a2 + 8760) > v71)
        goto LABEL_20;
LABEL_230:
      if (*(_DWORD *)(a2 + 8764) >= v71)
      {
        v180 = (char *)v260 + 4 * v70;
        v181 = *((__int16 *)v180 + 1) >> 3;
        if (*(_DWORD *)(a2 + 8752) <= v181 && *(_DWORD *)(a2 + 8756) >= v181)
        {
          v182 = *(_QWORD *)(a2 + 8096);
          *(_BYTE *)v182 = v33;
          *(_DWORD *)(v182 + 4) = *(_DWORD *)v180;
          v49 = evaluate_inter_mode_rd(v301, &v269, (_DWORD *)&v264 + 1, v12, a2);
          v48 = HIDWORD(v264);
          goto LABEL_51;
        }
      }
      goto LABEL_20;
    case 9:
      v91 = (int *)(a2 + 30036);
      if (((0x1200DuLL >> v27) & 1) != 0)
        v91 = v29;
      if (((0x24130uLL >> v27) & 1) != 0)
        v91 = (int *)(a2 + 30032);
      v92 = *v91;
      v93 = v273;
      v318 = 0;
      v315 = 0;
      v317 = 0u;
      v312 = 0u;
      v313 = 0u;
      v310 = 0u;
      v311 = 0u;
      v309 = 0u;
      v307 = 0u;
      memset(v308, 0, sizeof(v308));
      v304 = &v289;
      v306 = v273;
      v305 = v289;
      v314 = v92;
      v316 = v301;
      memset_pattern16(v308, &unk_208F3F850, 0x40uLL);
      if (*v234)
      {
        rd_check_segment(v12, a2, (uint64_t)&v304, 2u);
        if (v306 < v93)
        {
          v94 = SHIWORD(v289);
          v95 = ((SHIWORD(v289) + 7) >> 3) - 255;
          v246 = *(_DWORD *)(a2 + 8752);
          if (v246 < v95)
            *(_DWORD *)(a2 + 8752) = v95;
          v230 = v28;
          v96 = (v94 >> 3) + 255;
          v237 = *(_DWORD *)(a2 + 8756);
          if (v237 > v96)
            *(_DWORD *)(a2 + 8756) = v96;
          v97 = v12;
          v98 = (__int16)v289;
          v99 = (((__int16)v289 + 7) >> 3) - 255;
          v100 = *(_DWORD *)(a2 + 8760);
          if (v100 < v99)
            *(_DWORD *)(a2 + 8760) = v99;
          v101 = (v98 >> 3) + 255;
          v102 = *(_DWORD *)(a2 + 8764);
          if (v102 > v101)
            *(_DWORD *)(a2 + 8764) = v101;
          *(_QWORD *)&v317 = __PAIR64__(DWORD2(v309), v309);
          *((_QWORD *)&v317 + 1) = __PAIR64__(DWORD2(v311), v311);
          v103 = (__int16)v309 - (__int16)v311;
          if (v103 < 0)
            v103 = (__int16)v311 - (__int16)v309;
          v104 = v103 >> 3;
          v105 = ((int)v309 >> 16) - ((int)v311 >> 16);
          if (v105 < 0)
            v105 = ((int)v311 >> 16) - ((int)v309 >> 16);
          v106 = v105 >> 3;
          if (v104 > v106)
            v106 = v104;
          if (v106 <= 1)
            v106 = 1;
          if (v106 >= 128)
            v107 = 128;
          else
            v107 = v106;
          v108 = 7;
          if (v107 >= 2)
          {
            do
            {
              --v108;
              v109 = v107 > 3;
              v107 >>= 1;
            }
            while (v109);
          }
          LODWORD(v318) = v108;
          v110 = SWORD4(v309) - SWORD4(v311);
          if (v110 < 0)
            v110 = SWORD4(v311) - SWORD4(v309);
          v111 = v110 >> 3;
          v112 = (SDWORD2(v309) >> 16) - (SDWORD2(v311) >> 16);
          if (v112 < 0)
            v112 = (SDWORD2(v311) >> 16) - (SDWORD2(v309) >> 16);
          v113 = v112 >> 3;
          if (v111 > v113)
            v113 = v111;
          if (v113 <= 1)
            v113 = 1;
          if (v113 >= 128)
            v114 = 128;
          else
            v114 = v113;
          v115 = 7;
          if (v114 >= 2)
          {
            do
            {
              --v115;
              v109 = v114 > 3;
              v114 >>= 1;
            }
            while (v109);
          }
          HIDWORD(v318) = v115;
          rd_check_segment(v97, a2, (uint64_t)&v304, 1u);
          v116 = (__int16)v317 - SWORD2(v317);
          if (v116 < 0)
            v116 = SWORD2(v317) - (__int16)v317;
          v117 = v116 >> 3;
          v118 = SWORD1(v317) - SWORD3(v317);
          if (v118 < 0)
            v118 = SWORD3(v317) - SWORD1(v317);
          v119 = v118 >> 3;
          if (v117 <= v119)
            v117 = v119;
          if (v117 <= 1)
            v117 = 1;
          if (v117 >= 128)
            v120 = 128;
          else
            v120 = v117;
          v121 = 7;
          if (v120 >= 2)
          {
            do
            {
              --v121;
              v109 = v120 > 3;
              v120 >>= 1;
            }
            while (v109);
          }
          LODWORD(v318) = v121;
          v122 = SWORD4(v317) - SWORD6(v317);
          if (v122 < 0)
            v122 = SWORD6(v317) - SWORD4(v317);
          v123 = v122 >> 3;
          v124 = SWORD5(v317) - SHIWORD(v317);
          if (v124 < 0)
            v124 = SHIWORD(v317) - SWORD5(v317);
          v125 = v124 >> 3;
          if (v123 <= v125)
            v123 = v125;
          if (v123 <= 1)
            v123 = 1;
          if (v123 >= 128)
            v126 = 128;
          else
            v126 = v123;
          v127 = 7;
          if (v126 >= 2)
          {
            do
            {
              --v127;
              v109 = v126 > 3;
              v126 >>= 1;
            }
            while (v109);
          }
          HIDWORD(v318) = v127;
          rd_check_segment(v97, a2, (uint64_t)&v304, 0);
          if (v234[56])
            v128 = 1;
          else
            v128 = (_DWORD)v307 == 2;
          if (v128)
          {
            v305 = v317;
            rd_check_segment(v97, a2, (uint64_t)&v304, 3u);
          }
          *(_DWORD *)(a2 + 8752) = v246;
          *(_DWORD *)(a2 + 8756) = v237;
          *(_DWORD *)(a2 + 8760) = v100;
          *(_DWORD *)(a2 + 8764) = v102;
          v12 = v97;
          v28 = v230;
        }
      }
      else
      {
        rd_check_segment(v12, a2, (uint64_t)&v304, 0);
        rd_check_segment(v12, a2, (uint64_t)&v304, 1u);
        rd_check_segment(v12, a2, (uint64_t)&v304, 2u);
        rd_check_segment(v12, a2, (uint64_t)&v304, 3u);
      }
      v136 = 0;
      v137 = 0;
      *(_DWORD *)(a2 + 6416) = v309;
      **(_BYTE **)(a2 + 6408) = v313;
      *(_DWORD *)(a2 + 6472) = DWORD1(v309);
      **(_BYTE **)(a2 + 6464) = BYTE1(v313);
      *(_DWORD *)(a2 + 6528) = DWORD2(v309);
      **(_BYTE **)(a2 + 6520) = BYTE2(v313);
      *(_DWORD *)(a2 + 6584) = HIDWORD(v309);
      **(_BYTE **)(a2 + 6576) = BYTE3(v313);
      *(_DWORD *)(a2 + 6640) = v310;
      **(_BYTE **)(a2 + 6632) = BYTE4(v313);
      *(_DWORD *)(a2 + 6696) = DWORD1(v310);
      **(_BYTE **)(a2 + 6688) = BYTE5(v313);
      *(_DWORD *)(a2 + 6752) = DWORD2(v310);
      **(_BYTE **)(a2 + 6744) = BYTE6(v313);
      *(_DWORD *)(a2 + 6808) = HIDWORD(v310);
      **(_BYTE **)(a2 + 6800) = BYTE7(v313);
      *(_DWORD *)(a2 + 6864) = v311;
      **(_BYTE **)(a2 + 6856) = BYTE8(v313);
      *(_DWORD *)(a2 + 6920) = DWORD1(v311);
      **(_BYTE **)(a2 + 6912) = BYTE9(v313);
      *(_DWORD *)(a2 + 6976) = DWORD2(v311);
      **(_BYTE **)(a2 + 6968) = BYTE10(v313);
      *(_DWORD *)(a2 + 7032) = HIDWORD(v311);
      **(_BYTE **)(a2 + 7024) = BYTE11(v313);
      *(_DWORD *)(a2 + 7088) = v312;
      **(_BYTE **)(a2 + 7080) = BYTE12(v313);
      *(_DWORD *)(a2 + 7144) = DWORD1(v312);
      **(_BYTE **)(a2 + 7136) = BYTE13(v313);
      *(_DWORD *)(a2 + 7200) = DWORD2(v312);
      **(_BYTE **)(a2 + 7192) = BYTE14(v313);
      *(_DWORD *)(a2 + 7256) = HIDWORD(v312);
      **(_BYTE **)(a2 + 7248) = HIBYTE(v313);
      v138 = DWORD2(v307);
      HIDWORD(v269) = HIDWORD(v307);
      v139 = DWORD1(v307);
      v140 = (int)v307;
      *(_BYTE *)(*(_QWORD *)(a2 + 8096) + 8) = v307;
      v141 = vp8_mbsplit_count[v140];
      v142 = *(unsigned int **)(a2 + 8576);
      *v142 = v141;
      v272 = v139;
      do
      {
        v143 = (char *)&v304 + 4 * vp8_mbsplit_offset[16 * (int)v307 + v137];
        v144 = (int *)&v142[v136];
        v144[1] = *((_DWORD *)v143 + 8);
        v144[2] = *((_DWORD *)v143 + 24);
        ++v137;
        v142 = *(unsigned int **)(a2 + 8576);
        v136 += 2;
      }
      while (v137 < (int)*v142);
      v145 = v306;
      v142[32] = HIDWORD(v312);
      LODWORD(v269) = v139;
      HIDWORD(v270) = v138;
      if (v145 < (int)v273)
      {
        v238 = v139;
        v247 = v138;
        v231 = v28;
        vp8_build_inter4x4_predictors_mbuv((uint64_t)v242);
        v146 = *(uint8x8_t **)(a2 + 4136);
        v147 = v12;
        v148 = *(int *)(a2 + 4100);
        vpx_subtract_block_neon(8, 8, (uint16x8_t *)(a2 + 512), 8, *(uint8x8_t **)(a2 + 4128), v148, (uint8x8_t *)(a2 + 4480), 8);
        v149 = v148;
        v12 = v147;
        vpx_subtract_block_neon(8, 8, (uint16x8_t *)(a2 + 640), 8, v146, v149, (uint8x8_t *)(a2 + 4544), 8);
        (*v220)(*(_QWORD *)(a2 + 3272), *(_QWORD *)(a2 + 3280), 16);
        (*v220)(*(_QWORD *)(a2 + 3448), *(_QWORD *)(a2 + 3456), 16);
        (*v220)(*(_QWORD *)(a2 + 3624), *(_QWORD *)(a2 + 3632), 16);
        (*v220)(*(_QWORD *)(a2 + 3800), *(_QWORD *)(a2 + 3808), 16);
        (*(void (**)(uint64_t, uint64_t))(a2 + 34280))(a2 + 3272, a2 + 7264);
        (*(void (**)(uint64_t, uint64_t))(a2 + 34280))(a2 + 3360, a2 + 7320);
        (*(void (**)(uint64_t, uint64_t))(a2 + 34280))(a2 + 3448, a2 + 7376);
        (*(void (**)(uint64_t, uint64_t))(a2 + 34280))(a2 + 3536, a2 + 7432);
        (*(void (**)(uint64_t, uint64_t))(a2 + 34280))(a2 + 3624, a2 + 7488);
        (*(void (**)(uint64_t, uint64_t))(a2 + 34280))(a2 + 3712, a2 + 7544);
        (*(void (**)(uint64_t, uint64_t))(a2 + 34280))(a2 + 3800, a2 + 7600);
        (*(void (**)(uint64_t, uint64_t))(a2 + 34280))(a2 + 3888, a2 + 7656);
        v150 = 0;
        v151 = *(_QWORD *)(a2 + 8176);
        v304 = *(int **)v151;
        LOBYTE(v305) = *(_BYTE *)(v151 + 8);
        v152 = *(uint64_t **)(a2 + 8184);
        v290 = *v152;
        v291 = *((_BYTE *)v152 + 8);
        v153 = *(_QWORD *)(a2 + 8744);
        v154 = 0x10u;
        while (1)
        {
          v158 = v252 + 56 * v154;
          v159 = vp8_block2above[v154];
          v160 = vp8_block2left[v154];
          v155 = **(char **)(v158 + 40);
          v161 = *((char *)&v290 + v160) + *((char *)&v304 + v159);
          if ((int)v155 < 1)
          {
            LODWORD(v155) = 0;
            v156 = 0;
          }
          else
          {
            v156 = 0;
            v162 = *(_QWORD *)v158;
            v163 = vp8_default_zig_zag1d;
            v164 = vp8_coef_bands;
            v165 = v155;
            do
            {
              v166 = *v163++;
              v167 = *(__int16 *)(v162 + 2 * v166);
              v168 = dct_value_tokens[2 * v167 + 4096];
              LODWORD(v166) = *v164++;
              v156 += *(_DWORD *)(v153 + 144 * v166 + 48 * v161 + 4 * v168 + 2304)
                    + dct_value_cost[v167 + 2048];
              v161 = vp8_prev_token_class[v168];
              --v165;
            }
            while (v165);
            if (v155 > 0xF)
            {
              LODWORD(v155) = 1;
              goto LABEL_203;
            }
          }
          v156 += *(_DWORD *)(v153 + 144 * vp8_coef_bands[v155] + 48 * v161 + 2348);
LABEL_203:
          v157 = (_DWORD)v155 != 0;
          *((_BYTE *)&v290 + v160) = v157;
          *((_BYTE *)&v304 + v159) = v157;
          v150 += v156;
          if (++v154 == 24)
          {
            LODWORD(v270) = v150;
            v169 = vp8_mbuverror_c((_QWORD *)a2);
            v48 = 0;
            v271 = v169 / 4;
            LODWORD(v269) = v150 + v238;
            HIDWORD(v270) = v169 / 4 + v247;
            v49 = 0x7FFFFFFFLL;
            v28 = v231;
            goto LABEL_51;
          }
        }
      }
LABEL_209:
      v48 = 1;
      HIDWORD(v264) = 1;
LABEL_50:
      v49 = 0x7FFFFFFFLL;
LABEL_51:
      v50 = v28;
      v51 = calculate_final_rd_costs(v49, (int *)&v269, (unsigned int *)&v264, v48, v28, v244, v12, (int8x8_t *)a2);
      v52 = v51;
      v53 = *(_QWORD *)(a2 + 8096);
      if (!*(_BYTE *)(v53 + 2) && v51 < v274)
      {
        v274 = v51;
        *a7 = HIDWORD(v270);
      }
      if (!v13[935])
        goto LABEL_179;
      LODWORD(v304) = 0;
      v54 = *((_DWORD *)v260 + v262);
      v55 = HIWORD(v54) & 7;
      v56 = *(_QWORD *)(a2 + 7832) + *(int *)(a2 + 6400) + *(_DWORD *)(a2 + 7792) * ((__int16)v54 >> 3) + (v54 >> 19);
      if (v55 | *((_DWORD *)v260 + v262) & 7)
        (*(void (**)(uint64_t, _QWORD))(v258 + 168))(v56, *(unsigned int *)(a2 + 7792));
      else
        (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, int **))(v258 + 160))(**(_QWORD **)(a2 + 1936) + *(int *)(a2 + 1944), *(unsigned int *)(a2 + 1948), v56, *(unsigned int *)(a2 + 7792), &v304);
      v59 = v304;
      v60 = v253;
      if (v304 < v253)
        v60 = v304;
      v253 = v60;
      v53 = *(_QWORD *)(a2 + 8096);
      v62 = 4 * v27;
      v61 = (_DWORD *)(a2 + 4 * v27 + 29976);
      if (((0x51uLL >> v27) & 1) == 0)
      {
        v63 = v262;
        if (*(_BYTE *)v53 == 8)
          goto LABEL_68;
LABEL_72:
        if (v52 < SHIDWORD(v273))
          goto LABEL_181;
        goto LABEL_180;
      }
      v63 = v262;
      if (v304 < v241)
      {
        *(_DWORD *)(a2 + 8832) = *(unsigned __int8 *)(v53 + 2);
        v241 = v59;
      }
      if (*(_BYTE *)v53 != 8)
        goto LABEL_72;
LABEL_68:
      if (v59 >= v265)
        goto LABEL_72;
      v265 = v59;
      v64 = *((_DWORD *)v260 + v63);
      v65 = HIWORD(v64) & 7;
      v66 = *(_QWORD *)(a2 + 7832) + *(int *)(a2 + 6400) + *(_DWORD *)(a2 + 7792) * ((__int16)v64 >> 3) + (v64 >> 19);
      if (v65 | *((_DWORD *)v260 + v63) & 7)
        (*(void (**)(uint64_t, _QWORD))(v258 + 168))(v66, *(unsigned int *)(a2 + 7792));
      else
        (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, unsigned int *))(v258 + 160))(**(_QWORD **)(a2 + 1936) + *(int *)(a2 + 1944), *(unsigned int *)(a2 + 1948), v66, *(unsigned int *)(a2 + 7792), &v265);
      *(_DWORD *)(a2 + 8820) = 8;
      v53 = *(_QWORD *)(a2 + 8096);
      *(_DWORD *)(a2 + 8824) = *(_DWORD *)(v53 + 4);
      *(_BYTE *)(a2 + 8836) = *(_BYTE *)(v53 + 10);
      *(_DWORD *)(a2 + 8828) = *(unsigned __int8 *)(v53 + 2);
LABEL_179:
      v62 = 4 * v27;
      v61 = (_DWORD *)(a2 + 4 * v27 + 29976);
      if (v52 < SHIDWORD(v273))
        goto LABEL_181;
LABEL_180:
      if (!*(_DWORD *)(a2 + 8768))
      {
        v133 = *(_DWORD *)(a2 + v62 + 29896);
        if (v133 <= 508)
          v134 = v133 + 4;
        else
          v134 = 512;
        *(_DWORD *)(a2 + v62 + 29896) = v134;
        *v61 = (*(int *)(v12 + v62 + 115264) >> 7) * v134;
        v28 = v50;
        v29 = (int *)(a2 + 30028);
        goto LABEL_20;
      }
LABEL_181:
      v129 = HIDWORD(v270);
      *a5 = v269;
      *a6 = v129;
      if (((0x81C02uLL >> v27) & 1) != 0)
      {
        *(_BYTE *)(v53 + 1) = v251;
        *(_DWORD *)(v53 + 4) = 0;
      }
      update_best_mode((uint64_t)&v273, v52, &v269, v264, a2);
      v130 = *(_DWORD *)(a2 + v261 + 29896);
      if (v130 <= 33)
        v131 = 32;
      else
        v131 = v130 - 2;
      *(_DWORD *)(a2 + v261 + 29896) = v131;
      v132 = *(_DWORD *)(a2 + 8768);
      *(_DWORD *)(a2 + 4 * v27 + 29976) = (*(int *)(v12 + v261 + 115264) >> 7) * v131;
      v243 = v27;
      v28 = v50;
      v29 = (int *)(a2 + 30028);
      if (!v132)
        goto LABEL_20;
LABEL_234:
      v183 = (int *)(v12 + 4 * v243 + 115264);
      if ((*v183 - 1) <= 0x1FFFFFFD)
      {
        v184 = a2 + 4 * v243;
        v185 = *(_DWORD *)(v184 + 29896);
        if (v185 >= (v185 >> 2) + 32)
          v186 = v185 - (v185 >> 2);
        else
          v186 = 32;
        *(_DWORD *)(v184 + 29896) = v186;
        *(_DWORD *)(v184 + 29976) = v186 * (*v183 >> 7);
      }
      v187 = v253;
      if (v13[935])
      {
        v188 = a9 + v13[133] * a8;
        if (*(_DWORD *)(a2 + 8820))
        {
          v187 = v265;
        }
        else
        {
          *(_DWORD *)(a2 + 8820) = v275;
          *(_DWORD *)(a2 + 8824) = DWORD1(v275);
          *(_BYTE *)(a2 + 8836) = BYTE10(v275);
          *(_DWORD *)(a2 + 8828) = BYTE2(v275);
          v265 = v253;
        }
        vp8_denoiser_denoise_mb(v12 + 148232, a2, v187, v241, a3, v228, (unsigned __int8 *)(v12 + 111156), a8, a9, v188, 0);
        if (!BYTE2(v275))
        {
          v189 = *(int *)(a2 + 8832);
          if ((_DWORD)v189)
          {
            LODWORD(v304) = 0;
            LODWORD(v290) = 0;
            LODWORD(v269) = vp8_prob_cost[LOBYTE(vp8_mode_contexts[4 * v301[0]])] + *(_DWORD *)(a2 + 4 * v189 + 8600);
            HIDWORD(v270) = 0;
            v190 = *(_QWORD *)(a2 + 8096);
            *(_BYTE *)(v190 + 2) = v189;
            v191 = (char *)&v294 + 24 * (int)v189;
            *v256 = *(_OWORD *)v191;
            *(_QWORD *)(a2 + 7848) = *((_QWORD *)v191 + 2);
            *(_WORD *)v190 = 7;
            *(_DWORD *)(v190 + 4) = 0;
            v192 = evaluate_inter_mode_rd(v301, &v269, &v304, v12, a2);
            v193 = calculate_final_rd_costs(v192, (int *)&v269, (unsigned int *)&v290, (int)v304, v28, v244, v12, (int8x8_t *)a2);
            if (v193 < SHIDWORD(v273) || *(_DWORD *)(a2 + 8768))
            {
              v194 = HIDWORD(v270);
              *a5 = v269;
              *a6 = v194;
              update_best_mode((uint64_t)&v273, v193, &v269, v290, a2);
            }
          }
        }
      }
      if (v13[1106])
      {
        v195 = *(_QWORD *)(a2 + 8096);
        if (v275 != 7 || BYTE2(v275) != 3)
        {
          *(_BYTE *)v195 = 7;
          *(_BYTE *)(v195 + 2) = 3;
          *(_DWORD *)(v195 + 4) = 0;
          v196 = *(_BYTE **)(a2 + 8096);
          v196[1] = 0;
          v196[9] = v13[135];
          v196[8] = 0;
          return;
        }
      }
      else
      {
        v195 = *(_QWORD *)(a2 + 8096);
      }
      v197 = v275;
      *(_DWORD *)(v195 + 8) = DWORD2(v275);
      *(_QWORD *)v195 = v197;
      v198 = v275;
      if (v275 == 4)
      {
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 12) = HIDWORD(v275);
        *(_OWORD *)(*(_QWORD *)(a2 + 8096) + 16) = v276;
        *(_OWORD *)(*(_QWORD *)(a2 + 8096) + 32) = v277;
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 48) = v278[0];
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 52) = v278[1];
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 56) = v278[2];
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 60) = v278[3];
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 64) = v278[4];
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 68) = v278[5];
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 72) = v278[6];
        v198 = v275;
      }
      if (v198 == 9)
      {
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 12) = HIDWORD(v275);
        *(_OWORD *)(*(_QWORD *)(a2 + 8096) + 16) = v276;
        *(_OWORD *)(*(_QWORD *)(a2 + 8096) + 32) = v277;
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 48) = v278[0];
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 52) = v278[1];
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 56) = v278[2];
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 60) = v278[3];
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 64) = v278[4];
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 68) = v278[5];
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 72) = v278[6];
        v199 = *(_QWORD *)(a2 + 8576);
        *(_OWORD *)v199 = v279;
        v200 = v280;
        v201 = v281;
        v202 = v283;
        *(_OWORD *)(v199 + 48) = v282;
        *(_OWORD *)(v199 + 64) = v202;
        *(_OWORD *)(v199 + 16) = v200;
        *(_OWORD *)(v199 + 32) = v201;
        v203 = v284;
        v204 = v285;
        v205 = v286;
        *(_DWORD *)(v199 + 128) = v287;
        *(_OWORD *)(v199 + 96) = v204;
        *(_OWORD *)(v199 + 112) = v205;
        *(_OWORD *)(v199 + 80) = v203;
        *(_DWORD *)(*(_QWORD *)(a2 + 8096) + 4) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 128);
      }
      v206 = *(unsigned __int8 **)(a2 + 8096);
      if (v257 != *(_DWORD *)(v12 + 4 * v206[2] + 111592))
        v289 = v303[v257 == 0];
      v207 = *v206;
      if (v207 == 8)
      {
        v217 = *((__int16 *)v206 + 2) - (__int16)v289;
        if ((v217 + 2046) <= 0xFFD)
        {
          v218 = *((__int16 *)v206 + 3) - SHIWORD(v289);
          if (v218 >= -2046 && v218 <= 2047)
          {
            ++*(_DWORD *)(a2 + 13452 + 4 * ((v217 >> 1) + 1023));
            v219 = a2 + 13452 + 4 * ((v218 >> 1) + 1023);
            ++*(_DWORD *)(v219 + 8188);
          }
        }
      }
      else if (v207 == 9)
      {
        v208 = *(_DWORD **)(a2 + 8576);
        v209 = *v208;
        if ((int)*v208 >= 1)
        {
          v210 = 0;
          v211 = (__int16)v289;
          v212 = SHIWORD(v289);
          v213 = (__int16 *)v208 + 5;
          do
          {
            if (*(_DWORD *)(v213 - 3) == 13)
            {
              v214 = *(v213 - 1) - v211;
              if ((v214 + 2046) <= 0xFFD)
              {
                v215 = *v213 - v212;
                if (v215 >= -2046 && v215 <= 2047)
                {
                  ++*(_DWORD *)(a2 + 13452 + 4 * ((v214 >> 1) + 1023));
                  v216 = a2 + 4 * ((v215 >> 1) + 1023);
                  ++*(_DWORD *)(v216 + 21640);
                  v209 = *v208;
                }
              }
            }
            ++v210;
            v213 += 4;
          }
          while (v210 < v209);
        }
      }
      return;
    default:
      v48 = 0;
      goto LABEL_50;
  }
}

uint64_t rd_pick_intra_mbuv_mode(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void (*v11)(uint8x8_t *, uint64_t, uint64_t, uint64_t *);
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t result;
  int v34;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint16x8_t *v56;
  uint16x8_t *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint8x8_t *v62;
  uint64_t v63;
  int v64;
  uint8x8_t *v65;
  uint8x8_t *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;

  v39 = 0;
  v5 = 0;
  v71 = *MEMORY[0x24BDAC8D0];
  v59 = a1 + 34264;
  v66 = (uint8x8_t *)(a1 + 4480);
  v65 = (uint8x8_t *)(a1 + 4544);
  v58 = a1 + 6368;
  v6 = *(_QWORD *)(a1 + 8096);
  v56 = (uint16x8_t *)(a1 + 640);
  v57 = (uint16x8_t *)(a1 + 512);
  v54 = a1 + 3448;
  v55 = a1 + 3272;
  v52 = a1 + 3800;
  v53 = a1 + 3624;
  v51 = a1 + 7264;
  v49 = a1 + 7320;
  v50 = a1 + 3360;
  v48 = a1 + 7376;
  v46 = a1 + 7432;
  v47 = a1 + 3536;
  v45 = a1 + 7488;
  v43 = a1 + 7544;
  v44 = a1 + 3712;
  v42 = a1 + 7600;
  v40 = a1 + 7656;
  v41 = a1 + 3888;
  v38 = 10;
  v60 = 0x7FFFFFFF;
  do
  {
    *(_BYTE *)(v6 + 1) = v5;
    v7 = *(_QWORD *)(a1 + 8000);
    v8 = *(int *)(a1 + 7972);
    v9 = *(_QWORD *)(a1 + 8008);
    LOBYTE(v69) = *(_BYTE *)(v7 - 1);
    LOBYTE(v67) = *(_BYTE *)(v9 - 1);
    BYTE1(v69) = *(_BYTE *)(v7 - 1 + v8);
    BYTE1(v67) = *(_BYTE *)(v9 - 1 + v8);
    BYTE2(v69) = *(_BYTE *)(v7 - 1 + 2 * v8);
    BYTE2(v67) = *(_BYTE *)(v9 - 1 + 2 * v8);
    BYTE3(v69) = *(_BYTE *)(v7 - 1 + 3 * v8);
    BYTE3(v67) = *(_BYTE *)(v9 - 1 + 3 * v8);
    BYTE4(v69) = *(_BYTE *)(v7 - 1 + 4 * v8);
    BYTE4(v67) = *(_BYTE *)(v9 - 1 + 4 * v8);
    BYTE5(v69) = *(_BYTE *)(v7 - 1 + 5 * v8);
    BYTE5(v67) = *(_BYTE *)(v9 - 1 + 5 * v8);
    BYTE6(v69) = *(_BYTE *)(v7 - 1 + 6 * v8);
    BYTE6(v67) = *(_BYTE *)(v9 - 1 + 6 * v8);
    HIBYTE(v69) = *(_BYTE *)(v7 - 1 + 7 * v8);
    HIBYTE(v67) = *(_BYTE *)(v9 - 1 + 7 * v8);
    v64 = v5;
    if ((_BYTE)v5)
      v10 = (uint64_t *)((char *)&pred + 16 * v5);
    else
      v10 = &dc_pred[4 * *(int *)(a1 + 8116) + 2 * *(int *)(a1 + 8112)];
    v61 = v9 - v8;
    v11 = (void (*)(uint8x8_t *, uint64_t, uint64_t, uint64_t *))v10[1];
    v11(v66, 8, v7 - v8, &v69);
    v11(v65, 8, v61, &v67);
    v62 = *(uint8x8_t **)(a1 + 4136);
    v12 = *(int *)(a1 + 4100);
    vpx_subtract_block_neon(8, 8, v57, 8, *(uint8x8_t **)(a1 + 4128), v12, v66, 8);
    vpx_subtract_block_neon(8, 8, v56, 8, v62, v12, v65, 8);
    (*(void (**)(_QWORD, _QWORD, uint64_t))v59)(*(_QWORD *)(a1 + 3272), *(_QWORD *)(a1 + 3280), 16);
    (*(void (**)(_QWORD, _QWORD, uint64_t))v59)(*(_QWORD *)(a1 + 3448), *(_QWORD *)(a1 + 3456), 16);
    (*(void (**)(_QWORD, _QWORD, uint64_t))v59)(*(_QWORD *)(a1 + 3624), *(_QWORD *)(a1 + 3632), 16);
    (*(void (**)(_QWORD, _QWORD, uint64_t))v59)(*(_QWORD *)(a1 + 3800), *(_QWORD *)(a1 + 3808), 16);
    (*(void (**)(uint64_t, uint64_t))(v59 + 16))(v55, v51);
    (*(void (**)(uint64_t, uint64_t))(v59 + 16))(v50, v49);
    (*(void (**)(uint64_t, uint64_t))(v59 + 16))(v54, v48);
    (*(void (**)(uint64_t, uint64_t))(v59 + 16))(v47, v46);
    (*(void (**)(uint64_t, uint64_t))(v59 + 16))(v53, v45);
    (*(void (**)(uint64_t, uint64_t))(v59 + 16))(v44, v43);
    (*(void (**)(uint64_t, uint64_t))(v59 + 16))(v52, v42);
    (*(void (**)(uint64_t, uint64_t))(v59 + 16))(v41, v40);
    v13 = 0;
    v14 = *(uint64_t **)(a1 + 8176);
    v69 = *v14;
    v70 = *((_BYTE *)v14 + 8);
    v15 = *(uint64_t **)(a1 + 8184);
    v67 = *v15;
    v68 = *((_BYTE *)v15 + 8);
    v16 = *(_QWORD *)(a1 + 8744);
    v17 = 0x10u;
    do
    {
      v21 = (uint64_t *)(v58 + 56 * v17);
      v22 = vp8_block2above[v17];
      v23 = vp8_block2left[v17];
      v18 = *(char *)v21[5];
      v24 = *((char *)&v67 + v23) + *((char *)&v69 + v22);
      if ((int)v18 < 1)
      {
        LODWORD(v18) = 0;
        v19 = 0;
LABEL_8:
        v19 += *(_DWORD *)(v16 + 144 * vp8_coef_bands[v18] + 48 * v24 + 2348);
        goto LABEL_9;
      }
      v19 = 0;
      v25 = *v21;
      v26 = vp8_default_zig_zag1d;
      v27 = vp8_coef_bands;
      v28 = v18;
      do
      {
        v29 = *v26++;
        v30 = *(__int16 *)(v25 + 2 * v29);
        v31 = dct_value_tokens[2 * v30 + 4096];
        LODWORD(v29) = *v27++;
        v19 += *(_DWORD *)(v16 + 144 * v29 + 48 * v24 + 4 * v31 + 2304) + dct_value_cost[v30 + 2048];
        v24 = vp8_prev_token_class[v31];
        --v28;
      }
      while (v28);
      if (v18 <= 0xF)
        goto LABEL_8;
      LODWORD(v18) = 1;
LABEL_9:
      v20 = (_DWORD)v18 != 0;
      *((_BYTE *)&v67 + v23) = v20;
      *((_BYTE *)&v69 + v22) = v20;
      v13 += v19;
      ++v17;
    }
    while (v17 != 24);
    v63 = *(_QWORD *)(a1 + 8096);
    v32 = *(_DWORD *)(*(_QWORD *)(a1 + 8720) + 40 * *(unsigned int *)(a1 + 8108) + 4 * *(unsigned __int8 *)(v63 + 1))
        + v13;
    result = vp8_mbuverror_c((_QWORD *)a1);
    v34 = *(_DWORD *)(a1 + 8644) * ((int)result / 4) + ((*(_DWORD *)(a1 + 8648) * v32 + 128) >> 8);
    if (v34 < v60)
    {
      *a3 = v13;
      v38 = v64;
      v60 = v34;
      LODWORD(v39) = v32;
      HIDWORD(v39) = (int)result / 4;
    }
    v5 = v64 + 1;
    v6 = v63;
  }
  while (v64 != 3);
  *a2 = v39;
  *a4 = HIDWORD(v39);
  *(_BYTE *)(v63 + 1) = v38;
  return result;
}

uint64_t rd_pick_intra4x4mby_modes(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint8x8_t *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int *v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int16x8_t *v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int v46;
  int v47;
  BOOL v48;
  uint8x8_t *v49;
  __int32 v50;
  __int32 v51;
  int16x8_t v52;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  int *v75;
  _QWORD **v76;
  uint64_t v77;
  uint64_t v78;
  int16x8_t **v79;
  char v80;
  int v81;
  _BYTE *v82;
  _QWORD *v83;
  uint16x8_t **v84;
  uint64_t v85;
  uint64_t v86;
  uint8x8_t **v87;
  int v88;
  int v89;
  int16x8_t **v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  _OWORD v95[2];
  __int32 v96[19];
  _BYTE v97[12];
  _QWORD v98[3];

  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v98[1] = *MEMORY[0x24BDAC8D0];
  v72 = a1 + 34256;
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 16);
  v10 = *(uint64_t **)(a1 + 8176);
  v11 = *v10;
  LOBYTE(v10) = *((_BYTE *)v10 + 8);
  v12 = *(uint64_t **)(a1 + 8184);
  v13 = *v12;
  LOBYTE(v12) = *((_BYTE *)v12 + 8);
  v14 = *(int *)(a1 + 7952);
  v15 = (_DWORD *)(*(_QWORD *)(a1 + 7992) - v14);
  v16 = v15[4];
  v15 += 4;
  v15[v14] = v16;
  v15[2 * v14] = *v15;
  v15[3 * (int)v14] = *v15;
  v66 = a1 + 6368;
  v57 = a5;
  v58 = a1 + 1864;
  v93 = v11;
  v94 = (char)v10;
  v91 = v13;
  v92 = (char)v12;
  v73 = *(_QWORD *)(a1 + 8736);
  v85 = a1;
  while (2)
  {
    v17 = *(_QWORD *)(a1 + 8096);
    if (!*(_DWORD *)(a1 + 8108))
    {
      if (v5 > 3)
      {
        v19 = *(_DWORD *)(v17 + 4 * v5 - 4);
      }
      else
      {
        v18 = *(int *)(a1 + 8104);
        switch(*(_BYTE *)(v17 - 76 * v18))
        {
          case 1:
            v19 = 2;
            break;
          case 2:
            v19 = 3;
            break;
          case 3:
            v19 = 1;
            break;
          case 4:
            v19 = *(_DWORD *)(v17 - 76 * v18 + 4 * v5 + 60);
            break;
          default:
            v19 = 0;
            break;
        }
      }
      if ((v5 & 3) != 0)
      {
        v20 = *(_DWORD *)(v17 + 4 * v5 + 8);
      }
      else
      {
        switch(*(_BYTE *)(v17 - 76))
        {
          case 1:
            v20 = 2;
            break;
          case 2:
            v20 = 3;
            break;
          case 3:
            v20 = 1;
            break;
          case 4:
            v20 = *(_DWORD *)(v17 + 4 * v5 - 52);
            break;
          default:
            v20 = 0;
            break;
        }
      }
      v73 = *(_QWORD *)(a1 + 8728) + 400 * v19 + 40 * v20;
    }
    v63 = *(_QWORD *)(a1 + 8096);
    v64 = v6;
    v59 = v9;
    v60 = v7;
    v61 = v8;
    v70 = 0;
    v69 = 0;
    v21 = 0;
    v22 = v58 + 88 * v5;
    v23 = v66 + 56 * v5;
    v65 = v5;
    v67 = vp8_block2left[v5];
    v68 = vp8_block2above[v5];
    v24 = *(int *)(a1 + 7952);
    v25 = (_DWORD *)(*(_QWORD *)(a1 + 7992) + *(int *)(v23 + 32));
    v62 = v25;
    v82 = (char *)v25 - 1;
    v83 = (_QWORD *)((char *)v25 - v24);
    v86 = v24;
    v87 = (uint8x8_t **)(v23 + 16);
    v90 = (int16x8_t **)(v22 + 8);
    v81 = *((char *)&v91 + v67) + *((char *)&v93 + v68);
    v80 = *((_BYTE *)v25 - v24 - 1);
    v78 = 2 * v24;
    v79 = (int16x8_t **)(v23 + 8);
    v77 = 3 * v24;
    v75 = (int *)(v22 + 80);
    v76 = (_QWORD **)(v22 + 72);
    v84 = (uint16x8_t **)v22;
    v74 = (int *)(v22 + 84);
    v88 = 0x7FFFFFFF;
    v71 = 14;
    do
    {
      v89 = *(_DWORD *)(v73 + 4 * v21);
      v26 = *v87;
      v97[0] = *v82;
      v97[1] = v82[v86];
      v97[2] = v82[v78];
      v97[3] = v82[v77];
      v98[0] = *v83;
      v97[11] = v80;
      (*(&pred_0 + v21))(v26, 16, v98, v97);
      vpx_subtract_block_neon(4, 4, *v84, 16, (uint8x8_t *)(**v76 + *v75), *v74, *v87, 16);
      (*(void (**)(uint16x8_t *, int16x8_t *, uint64_t))v72)(*v84, *v90, 32);
      (*(void (**)(uint16x8_t **, uint64_t))(v72 + 24))(v84, v23);
      v27 = **(char **)(v23 + 40);
      v28 = *(_QWORD *)(v85 + 8744);
      if (v27 < 1)
      {
        v27 = 0;
        v29 = 0;
        v33 = v81;
      }
      else
      {
        v29 = 0;
        v30 = vp8_default_zig_zag1d;
        v31 = vp8_coef_bands;
        v32 = **(char **)(v23 + 40);
        v33 = v81;
        do
        {
          v34 = *v30++;
          v35 = *(__int16 *)(*(_QWORD *)v23 + 2 * v34);
          v36 = dct_value_tokens[2 * v35 + 4096];
          LODWORD(v34) = *v31++;
          v29 += *(_DWORD *)(v28 + 144 * v34 + 48 * v33 + 4 * v36 + 3456) + dct_value_cost[v35 + 2048];
          v33 = vp8_prev_token_class[v36];
          --v32;
        }
        while (v32);
        if (v27 > 0xF)
        {
          v27 = 1;
          goto LABEL_19;
        }
      }
      v29 += *(_DWORD *)(v28 + 144 * vp8_coef_bands[v27] + 48 * v33 + 3500);
LABEL_19:
      v37 = *v79;
      v38 = **v90;
      v39 = (*v90)[1];
      v40 = **v79;
      v41 = (*v79)[1];
      v42 = vsubl_high_s16(v38, v40);
      v43 = vsubl_high_s16(v39, v41);
      v44 = vsubl_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v40.i8);
      v45 = vsubl_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v41.i8);
      v46 = vaddvq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v45, v45), v44, v44), vmlaq_s32(vmulq_s32(v43, v43), v42, v42))) >> 2;
      v47 = v46 * *(_DWORD *)(v85 + 8644) + ((int)(*(_DWORD *)(v85 + 8648) * (v29 + v89) + 128) >> 8);
      if (v47 < v88)
      {
        v48 = v27 != 0;
        *((_BYTE *)&v93 + v68) = v48;
        *((_BYTE *)&v91 + v67) = v48;
        v49 = *v87;
        v50 = (*v87)[2].i32[0];
        v96[0] = (*v87)->i32[0];
        v96[4] = v50;
        v51 = v49[4].i32[0];
        LODWORD(v49) = v49[6].i32[0];
        v96[8] = v51;
        v96[12] = (int)v49;
        v52 = v37[1];
        v70 = v29 + v89;
        v71 = v21;
        v95[0] = *v37;
        v95[1] = v52;
        v69 = __PAIR64__(v29, v46);
        v88 = v47;
      }
      ++v21;
    }
    while (v21 != 10);
    *(_DWORD *)(v66 + 56 * v5 + 48) = v71;
    vp8_short_idct4x4llm_neon((int16x4_t *)v95, v96, 16, v62, v86);
    v6 = v64 + v88;
    *(_DWORD *)(v63 + 4 * v5 + 12) = v71;
    if (v6 < v57)
    {
      v7 = HIDWORD(v69) + v60;
      v8 = v69 + v61;
      v9 = v70 + v59;
      ++v5;
      a1 = v85;
      if (v65 == 15)
      {
        *a2 = v9;
        *a3 = v7;
        *a4 = v8;
        return (*(_DWORD *)(v85 + 8644) * v8 + ((*(_DWORD *)(v85 + 8648) * v9 + 128) >> 8));
      }
      continue;
    }
    return 0x7FFFFFFFLL;
  }
}

uint64_t macro_block_yrd(uint64_t a1, _DWORD *a2, int *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _WORD *v8;
  _QWORD *v9;
  _WORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int16x8_t v15;
  int16x8_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int16x4_t v20;
  uint64_t v21;
  int16x4_t v22;
  int16x4_t v23;
  uint64_t v24;
  int16x4_t v25;
  uint64_t v26;
  int16x4_t v27;
  uint64_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x8_t v32;
  int16x4_t v33;
  int16x4_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int16x4_t v38;
  int16x4_t v39;
  uint64_t v40;
  int16x8_t v41;
  int16x8_t v42;
  uint64_t v43;
  int16x8_t v44;
  int16x4_t v45;
  int16x8_t v46;
  uint64_t v47;
  uint64_t v48;
  int16x8_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  uint64_t v60;
  uint64_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int16x8_t v67;
  int32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int32x4_t v73;
  uint64_t v74;
  uint64_t v75;
  int32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int32x4_t v97;
  int32x4_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int32x4_t v107;
  int32x4_t v108;
  uint64_t v109;
  uint64_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int16x8_t *v123;
  int16x8_t *v124;
  int16x8_t v125;
  int16x8_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t result;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  char *v142;
  int *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  uint64_t v186;
  char v187;
  uint64_t v188;
  char v189;

  v5 = a1 + 34264;
  v6 = (_QWORD *)(a1 + 1864);
  v7 = a1 + 3976;
  v8 = *(_WORD **)(a1 + 3976);
  vpx_subtract_block_neon(16, 16, (uint16x8_t *)a1, 16, **(uint8x8_t ***)(a1 + 1936), *(int *)(a1 + 1948), (uint8x8_t *)(a1 + 4224), 16);
  v9 = v6;
  do
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))v5)(*v9, v9[1], 32);
    v10 = (_WORD *)v9[1];
    *v8 = *v10;
    v8[1] = v10[16];
    v9 += 22;
    v8 += 2;
  }
  while ((unint64_t)v9 < a1 + 3272);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v5 + 8))(*(_QWORD *)(a1 + 3976), *(_QWORD *)(a1 + 3984), 8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 16))(v6, a1 + 6368);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 1952, a1 + 6424);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 2040, a1 + 6480);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 2128, a1 + 6536);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 2216, a1 + 6592);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 2304, a1 + 6648);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 2392, a1 + 6704);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 2480, a1 + 6760);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 2568, a1 + 6816);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 2656, a1 + 6872);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 2744, a1 + 6928);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 2832, a1 + 6984);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 2920, a1 + 7040);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 3008, a1 + 7096);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 3096, a1 + 7152);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1 + 3184, a1 + 7208);
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v7, a1 + 7712);
  v11 = 0;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + 1872);
  v14 = *(_QWORD *)(a1 + 6376);
  v15 = *(int16x8_t *)(v13 + 2);
  v16 = *(int16x8_t *)(v14 + 2);
  v17 = *(_QWORD *)(a1 + 1960);
  v18 = *(_QWORD *)(a1 + 2136);
  v19 = *(_QWORD *)(a1 + 2312);
  v20 = *(int16x4_t *)(v18 + 24);
  v21 = *(_QWORD *)(a1 + 2400);
  v22.i32[0] = *(_DWORD *)(v19 + 28);
  v22.i32[1] = *(_DWORD *)(v21 + 2);
  v23 = *(int16x4_t *)(v17 + 20);
  v24 = *(_QWORD *)(a1 + 2224);
  v25.i32[0] = *(_DWORD *)(v24 + 26);
  v25.i16[2] = *(_WORD *)(v24 + 30);
  v25.i16[3] = *(_WORD *)(v19 + 2);
  v26 = *(_QWORD *)(a1 + 2048);
  v27 = *(int16x4_t *)(v13 + 18);
  v28 = *(_QWORD *)(a1 + 2488);
  v29.i16[0] = *(_WORD *)(v21 + 30);
  v29.i16[1] = *(_WORD *)(v28 + 2);
  v29.i32[1] = *(_DWORD *)(v28 + 4);
  v30.i32[0] = *(_DWORD *)(v17 + 28);
  v30.i32[1] = *(_DWORD *)(v26 + 2);
  v31 = *(int16x4_t *)(v19 + 4);
  v32 = *(int16x8_t *)(v17 + 4);
  v33.i32[0] = *(_DWORD *)(v13 + 26);
  v33.i16[2] = *(_WORD *)(v13 + 30);
  v33.i16[3] = *(_WORD *)(v17 + 2);
  v34.i16[0] = *(_WORD *)(v26 + 30);
  v34.i16[1] = *(_WORD *)(v18 + 2);
  v35 = *(_QWORD *)(a1 + 6600);
  v34.i32[1] = *(_DWORD *)(v18 + 4);
  v36 = *(_QWORD *)(a1 + 6712);
  v37 = *(_QWORD *)(a1 + 6768);
  v38.i32[0] = *(_DWORD *)(v35 + 26);
  v39.i16[0] = *(_WORD *)(v36 + 30);
  v39.i16[1] = *(_WORD *)(v37 + 2);
  v40 = *(_QWORD *)(a1 + 6488);
  v39.i16[2] = *(_WORD *)(v37 + 4);
  v41 = *(int16x8_t *)(v26 + 6);
  v42 = *(int16x8_t *)(v18 + 8);
  v43 = *(_QWORD *)(a1 + 6432);
  v44 = *(int16x8_t *)(v24 + 10);
  v45.i32[0] = *(_DWORD *)(v43 + 28);
  v46 = *(int16x8_t *)(v19 + 12);
  v47 = *(_QWORD *)(a1 + 6656);
  v45.i16[2] = *(_WORD *)(v40 + 2);
  v48 = *(_QWORD *)(a1 + 6544);
  v49 = *(int16x8_t *)(v21 + 14);
  v50.i16[0] = *(_WORD *)(v40 + 30);
  v50.i16[1] = *(_WORD *)(v48 + 2);
  v50.i16[2] = *(_WORD *)(v48 + 4);
  v51.i16[0] = *(_WORD *)(v14 + 26);
  v50.i16[3] = *(_WORD *)(v48 + 6);
  v184 = vsubl_s16(v34, v50);
  v182 = vsubl_s16(*(int16x4_t *)(v28 + 8), *(int16x4_t *)(v37 + 8));
  v52 = *(int16x8_t *)(v43 + 4);
  v51.i16[1] = *(_WORD *)(v14 + 28);
  v51.i16[2] = *(_WORD *)(v14 + 30);
  v51.i16[3] = *(_WORD *)(v43 + 2);
  v179 = vsubl_s16(v33, v51);
  v53 = *(int16x8_t *)(v40 + 6);
  v176 = vsubl_s16(v31, *(int16x4_t *)(v47 + 4));
  v54 = *(int16x8_t *)(v48 + 8);
  v45.i16[3] = *(_WORD *)(v40 + 4);
  v178 = vsubl_s16(v30, v45);
  v55 = *(int16x8_t *)(v28 + 16);
  v173 = vsubl_s16(*(int16x4_t *)(v21 + 6), *(int16x4_t *)(v36 + 6));
  v174 = vsubl_s16(*(int16x4_t *)(v24 + 2), *(int16x4_t *)(v35 + 2));
  v56 = *(int16x8_t *)(v35 + 10);
  v183 = vsubl_s16(*(int16x4_t *)(v26 + 22), *(int16x4_t *)(v40 + 22));
  v57 = *(int16x8_t *)(v37 + 16);
  v39.i16[3] = *(_WORD *)(v37 + 6);
  v181 = vsubl_s16(v29, v39);
  v58 = *(int16x8_t *)(v47 + 12);
  v180 = vsubl_s16(v27, *(int16x4_t *)(v14 + 18));
  v59 = *(int16x8_t *)(v36 + 14);
  v38.i16[2] = *(_WORD *)(v35 + 30);
  v60 = *(_QWORD *)(a1 + 2576);
  v38.i16[3] = *(_WORD *)(v47 + 2);
  v61 = *(_QWORD *)(a1 + 6824);
  v175 = vsubl_s16(v25, v38);
  v62 = *(int16x8_t *)(v60 + 2);
  v177 = vsubl_s16(v23, *(int16x4_t *)(v43 + 20));
  v23.i32[0] = *(_DWORD *)(v47 + 28);
  v23.i32[1] = *(_DWORD *)(v36 + 2);
  v171 = vsubl_s16(v22, v23);
  v172 = vsubl_s16(v20, *(int16x4_t *)(v48 + 24));
  v63 = vsubl_high_s16(v42, v54);
  v64 = vsubl_high_s16(v55, v57);
  v165 = vsubl_s16(*(int16x4_t *)v55.i8, *(int16x4_t *)v57.i8);
  v161 = vsubl_high_s16(v32, v52);
  v168 = vsubl_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v52.i8);
  v169 = vsubl_s16(*(int16x4_t *)v42.i8, *(int16x4_t *)v54.i8);
  v164 = vsubl_s16(*(int16x4_t *)v46.i8, *(int16x4_t *)v58.i8);
  v160 = vsubl_high_s16(v41, v53);
  v65 = vsubl_high_s16(v49, v59);
  v163 = vsubl_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v59.i8);
  v158 = vsubl_high_s16(v46, v58);
  v159 = vsubl_high_s16(v15, v16);
  v166 = vsubl_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v16.i8);
  v167 = vsubl_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v53.i8);
  v66 = vsubl_high_s16(v44, v56);
  v162 = vsubl_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v56.i8);
  v67 = *(int16x8_t *)(v61 + 2);
  v68 = vsubl_high_s16(v62, v67);
  v170 = vsubl_s16(*(int16x4_t *)v62.i8, *(int16x4_t *)v67.i8);
  v16.i16[0] = *(_WORD *)(v60 + 26);
  v67.i16[0] = *(_WORD *)(v61 + 26);
  v69 = *(_QWORD *)(a1 + 2664);
  v70 = *(_QWORD *)(a1 + 6880);
  v16.i16[1] = *(_WORD *)(v60 + 28);
  v16.i16[2] = *(_WORD *)(v60 + 30);
  v16.i16[3] = *(_WORD *)(v69 + 2);
  v67.i16[1] = *(_WORD *)(v61 + 28);
  v67.i16[2] = *(_WORD *)(v61 + 30);
  v67.i16[3] = *(_WORD *)(v70 + 2);
  v156 = vsubl_s16(*(int16x4_t *)(v69 + 20), *(int16x4_t *)(v70 + 20));
  v157 = vsubl_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v67.i8);
  v71 = *(_QWORD *)(a1 + 2840);
  v72 = *(_QWORD *)(a1 + 6992);
  v73 = vsubl_s16(*(int16x4_t *)(v71 + 24), *(int16x4_t *)(v72 + 24));
  v74 = *(_QWORD *)(a1 + 2752);
  v75 = *(_QWORD *)(a1 + 6936);
  v76 = vsubl_s16(*(int16x4_t *)(v74 + 22), *(int16x4_t *)(v75 + 22));
  v77 = *(_QWORD *)(a1 + 2928);
  v16.i32[0] = *(_DWORD *)(v69 + 28);
  v78 = *(_QWORD *)(a1 + 7048);
  v16.i32[1] = *(_DWORD *)(v74 + 2);
  v57.i32[0] = *(_DWORD *)(v70 + 28);
  v57.i32[1] = *(_DWORD *)(v75 + 2);
  v79 = vsubl_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v57.i8);
  v80 = vsubl_s16(*(int16x4_t *)(v77 + 2), *(int16x4_t *)(v78 + 2));
  v67.i16[0] = *(_WORD *)(v74 + 30);
  v67.i16[1] = *(_WORD *)(v71 + 2);
  v67.i32[1] = *(_DWORD *)(v71 + 4);
  v16.i16[0] = *(_WORD *)(v75 + 30);
  v16.i16[1] = *(_WORD *)(v72 + 2);
  v16.i32[1] = *(_DWORD *)(v72 + 4);
  v81 = vsubl_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v16.i8);
  v82 = vsubl_s16(*(int16x4_t *)(v60 + 18), *(int16x4_t *)(v61 + 18));
  v83 = *(int16x8_t *)(v74 + 6);
  v84 = *(int16x8_t *)(v75 + 6);
  v85 = vsubl_s16(*(int16x4_t *)v83.i8, *(int16x4_t *)v84.i8);
  v86 = vsubl_high_s16(v83, v84);
  v87 = *(int16x8_t *)(v77 + 10);
  v88 = *(int16x8_t *)(v78 + 10);
  v89 = vsubl_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v88.i8);
  v90 = vsubl_high_s16(v87, v88);
  v91 = *(int16x8_t *)(v69 + 4);
  v92 = *(int16x8_t *)(v70 + 4);
  v93 = vsubl_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v92.i8);
  v94 = vsubl_high_s16(v91, v92);
  v95 = *(int16x8_t *)(v71 + 8);
  v96 = *(int16x8_t *)(v72 + 8);
  v97 = vsubl_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v96.i8);
  v98 = vsubl_high_s16(v95, v96);
  v99 = *(_QWORD *)(a1 + 3192);
  v100 = *(_QWORD *)(a1 + 3104);
  v96.i16[0] = *(_WORD *)(v100 + 30);
  v96.i16[1] = *(_WORD *)(v99 + 2);
  v96.i16[2] = *(_WORD *)(v99 + 4);
  v101 = *(_QWORD *)(a1 + 7216);
  v102 = *(_QWORD *)(a1 + 7160);
  v53.i16[0] = *(_WORD *)(v102 + 30);
  v53.i16[1] = *(_WORD *)(v101 + 2);
  v53.i16[2] = *(_WORD *)(v101 + 4);
  v96.i16[3] = *(_WORD *)(v99 + 6);
  v53.i16[3] = *(_WORD *)(v101 + 6);
  v103 = vsubl_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v53.i8);
  v104 = vsubl_s16(*(int16x4_t *)(v99 + 8), *(int16x4_t *)(v101 + 8));
  v105 = *(int16x8_t *)(v99 + 16);
  v106 = *(int16x8_t *)(v101 + 16);
  v107 = vsubl_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v106.i8);
  v108 = vsubl_high_s16(v105, v106);
  v109 = *(_QWORD *)(a1 + 3016);
  v110 = *(_QWORD *)(a1 + 7104);
  v106.i16[0] = *(_WORD *)(v77 + 26);
  v105.i16[0] = *(_WORD *)(v78 + 26);
  v106.i16[1] = *(_WORD *)(v77 + 28);
  v106.i16[2] = *(_WORD *)(v77 + 30);
  v106.i16[3] = *(_WORD *)(v109 + 2);
  v105.i16[1] = *(_WORD *)(v78 + 28);
  v105.i16[2] = *(_WORD *)(v78 + 30);
  v105.i16[3] = *(_WORD *)(v110 + 2);
  v111 = vsubl_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v105.i8);
  v112 = vsubl_s16(*(int16x4_t *)(v100 + 6), *(int16x4_t *)(v102 + 6));
  v105.i32[0] = *(_DWORD *)(v109 + 28);
  v105.i32[1] = *(_DWORD *)(v100 + 2);
  v106.i32[0] = *(_DWORD *)(v110 + 28);
  v106.i32[1] = *(_DWORD *)(v102 + 2);
  v113 = vsubl_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v106.i8);
  v114 = vsubl_s16(*(int16x4_t *)(v109 + 4), *(int16x4_t *)(v110 + 4));
  v115 = *(int16x8_t *)(v109 + 12);
  v116 = *(int16x8_t *)(v110 + 12);
  v117 = vsubl_high_s16(v115, v116);
  v118 = vsubl_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v116.i8);
  v119 = *(int16x8_t *)(v100 + 14);
  v120 = *(int16x8_t *)(v102 + 14);
  v121 = vsubl_high_s16(v119, v120);
  v122 = vsubl_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v120.i8);
  LODWORD(v100) = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v162, v162), v166, v166), vmlaq_s32(vmulq_s32(v163, v163), v167, v167)), vaddq_s32(vmlaq_s32(vmulq_s32(v164, v164), v168, v168), vmlaq_s32(vmulq_s32(v165, v165), v169, v169))), vaddq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v175, v175), v180, v180), vmlaq_s32(vmulq_s32(v181, v181), v183, v183)), vaddq_s32(vmlaq_s32(vmulq_s32(v171, v171), v177, v177), vmlaq_s32(vmulq_s32(v170, v170), v172, v172)))),
                            vaddq_s32(vaddq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v66, v66), v159, v159), vmlaq_s32(vmulq_s32(v65, v65), v160, v160)), vaddq_s32(vmlaq_s32(vmulq_s32(v158, v158), v161, v161), vmlaq_s32(vmulq_s32(v64, v64), v63, v63))), vaddq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v176, v176), v179, v179), vmlaq_s32(vmulq_s32(v182, v182), v184, v184)), vaddq_s32(vmlaq_s32(vmulq_s32(v173, v173), v178, v178), vmlaq_s32(vmulq_s32(v68, v68), v174, v174))))), vaddq_s32(vmlaq_s32(vmulq_s32(v113, v113), v111, v111), vaddq_s32(vmlaq_s32(vmulq_s32(v122, v122), v118, v118), vaddq_s32(
                                vmlaq_s32(vmulq_s32(v112, v112), v114, v114),
                                vmlaq_s32(vmulq_s32(v121, v121), v117, v117))))),
                        vaddq_s32(vaddq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v76, v76), v82, v82), vmlaq_s32(vmulq_s32(v73, v73), v156, v156)), vaddq_s32(vmlaq_s32(vmulq_s32(v97, v97), v93, v93), vmlaq_s32(vmulq_s32(v89, v89), v85, v85))), vaddq_s32(vmlaq_s32(vmulq_s32(v81, v81), v157, v157), vaddq_s32(vmlaq_s32(vmulq_s32(v80, v80), v79, v79), vaddq_s32(vmlaq_s32(vmulq_s32(v98, v98), v94, v94), vmlaq_s32(vmulq_s32(v90, v90), v86, v86)))))), vaddq_s32(vmlaq_s32(vmulq_s32(v107, v107), v103, v103), vmlaq_s32(vmulq_s32(v108, v108), v104, v104))));
  v123 = *(int16x8_t **)(a1 + 3984);
  v124 = *(int16x8_t **)(a1 + 7720);
  v125 = v123[1];
  v126 = v124[1];
  v127 = vsubl_high_s16(*v123, *v124);
  v128 = vsubl_s16(*(int16x4_t *)v123->i8, *(int16x4_t *)v124->i8);
  v129 = vsubl_high_s16(v125, v126);
  v130 = vsubl_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v126.i8);
  *a3 = (vaddvq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v130, v130), v128, v128), vmlaq_s32(vmulq_s32(v129, v129), v127, v127)))
       + 4 * (int)v100) >> 4;
  v131 = *(uint64_t **)(a1 + 8176);
  v188 = *v131;
  v189 = *((_BYTE *)v131 + 8);
  v132 = *(uint64_t **)(a1 + 8184);
  v186 = *v132;
  v187 = *((_BYTE *)v132 + 8);
  v133 = *(_QWORD *)(a1 + 8744);
  result = 0x2000;
  do
  {
    v137 = a1 + 56 * v11;
    v138 = vp8_block2above[v11];
    v139 = vp8_block2left[v11];
    v136 = **(char **)(v137 + 6408);
    v140 = *((char *)&v186 + v139) + *((char *)&v188 + v138);
    if ((int)v136 < 2)
    {
      v135 = 0;
      LODWORD(v136) = 1u;
LABEL_5:
      v135 += *(_DWORD *)(v133 + 144 * vp8_coef_bands[v136] + 48 * v140 + 44);
      goto LABEL_6;
    }
    v135 = 0;
    v141 = *(_QWORD *)(v137 + 6368);
    v142 = &byte_208F3C9D1;
    v143 = &dword_208F3C9F4;
    v144 = v136 - 1;
    do
    {
      v145 = *v143++;
      v146 = *(__int16 *)(v141 + 2 * v145);
      v147 = dct_value_tokens[2 * v146 + 4096];
      LODWORD(v145) = *v142++;
      v135 += *(_DWORD *)(v133 + 144 * v145 + 48 * v140 + 4 * v147) + dct_value_cost[v146 + 2048];
      v140 = vp8_prev_token_class[v147];
      --v144;
    }
    while (v144);
    if (v136 <= 0xF)
      goto LABEL_5;
LABEL_6:
    *((_BYTE *)&v186 + v139) = (_DWORD)v136 != 1;
    *((_BYTE *)&v188 + v138) = (_DWORD)v136 != 1;
    v12 += v135;
    ++v11;
  }
  while (v11 != 16);
  v148 = **(char **)(a1 + 7752);
  v149 = v187 + v189;
  if (v148 < 1)
  {
    v148 = 0;
    v150 = 0;
LABEL_18:
    v150 += *(_DWORD *)(v133 + 144 * vp8_coef_bands[v148] + 48 * v149 + 1196);
    goto LABEL_19;
  }
  v150 = 0;
  result = (uint64_t)vp8_coef_bands;
  v151 = vp8_default_zig_zag1d;
  v152 = **(char **)(a1 + 7752);
  do
  {
    v153 = *v151++;
    v154 = *(__int16 *)(*(_QWORD *)(a1 + 7712) + 2 * v153);
    v155 = dct_value_tokens[2 * v154 + 4096];
    LODWORD(v153) = *(unsigned __int8 *)result++;
    v150 += *(_DWORD *)(v133 + 144 * v153 + 48 * v149 + 4 * v155 + 1152) + dct_value_cost[v154 + 2048];
    v149 = vp8_prev_token_class[v155];
    --v152;
  }
  while (v152);
  if (v148 <= 0xF)
    goto LABEL_18;
LABEL_19:
  *a2 = v150 + v12;
  return result;
}

uint64_t evaluate_inter_mode_rd(int *a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  _OWORD *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v37;
  char v38;
  void (**v39)(_QWORD, _QWORD, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint8x8_t *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _DWORD *v92;
  int v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;

  v10 = a5 + 4224;
  v11 = *(unsigned __int8 **)(a5 + 8096);
  v12 = *v11;
  v13 = *((__int16 *)v11 + 2);
  LODWORD(v11) = *((__int16 *)v11 + 3);
  v14 = *(int *)(a5 + 7792);
  v15 = (_OWORD *)(*(_QWORD *)(a5 + 7832) + (int)v14 * (uint64_t)(v13 >> 3) + ((int)v11 >> 3));
  if (((v11 | v13) & 7) != 0)
  {
    (*(void (**)(_OWORD *))(a5 + 8272))(v15);
    if (!*(_DWORD *)(a4 + 143080))
      goto LABEL_6;
  }
  else
  {
    *(_OWORD *)(a5 + 4224) = *v15;
    *(_OWORD *)(a5 + 4240) = *(_OWORD *)((char *)v15 + v14);
    v16 = (_OWORD *)((char *)v15 + v14 + v14);
    *(_OWORD *)(a5 + 4256) = *v16;
    v17 = (_OWORD *)((char *)v16 + v14);
    *(_OWORD *)(a5 + 4272) = *v17;
    v18 = (_OWORD *)((char *)v17 + v14);
    *(_OWORD *)(a5 + 4288) = *v18;
    v19 = (_OWORD *)((char *)v18 + v14);
    *(_OWORD *)(a5 + 4304) = *v19;
    v20 = (_OWORD *)((char *)v19 + v14);
    *(_OWORD *)(a5 + 4320) = *v20;
    v21 = (_OWORD *)((char *)v20 + v14);
    *(_OWORD *)(a5 + 4336) = *v21;
    v22 = (_OWORD *)((char *)v21 + v14);
    *(_OWORD *)(a5 + 4352) = *v22;
    v23 = (_OWORD *)((char *)v22 + v14);
    *(_OWORD *)(a5 + 4368) = *v23;
    v24 = (_OWORD *)((char *)v23 + v14);
    *(_OWORD *)(a5 + 4384) = *v24;
    v25 = (_OWORD *)((char *)v24 + v14);
    *(_OWORD *)(a5 + 4400) = *v25;
    v26 = (_OWORD *)((char *)v25 + v14);
    *(_OWORD *)(a5 + 4416) = *v26;
    v27 = (_OWORD *)((char *)v26 + v14);
    *(_OWORD *)(a5 + 4432) = *v27;
    v28 = (_OWORD *)((char *)v27 + v14);
    *(_OWORD *)(a5 + 4448) = *v28;
    *(_OWORD *)(a5 + 4464) = *(_OWORD *)((char *)v28 + v14);
    if (!*(_DWORD *)(a4 + 143080))
    {
LABEL_6:
      v29 = *(_DWORD *)(a5 + 8772);
      if (v29)
      {
        LODWORD(v96) = 0;
        v30 = *(__int16 *)(*(_QWORD *)(a5 + 6392) + 2);
        v31 = (v30 * v30) >> 4;
        v32 = v31 <= v29 ? v29 : v31;
        v33 = vpx_variance16x16(**(_QWORD **)(a5 + 1936), *(unsigned int *)(a5 + 1948), v10, 16, &v96);
        if (v96 < v32
          && (v96 - v33 < (**(__int16 **)(a5 + 7736) * **(__int16 **)(a5 + 7736)) >> 4
           || v33 < v96 >> 1 && v96 - v33 <= 0x3F))
        {
          v34 = VP8_UVSSE(a5);
          if (v32 > 2 * v34)
          {
            *(_DWORD *)(a5 + 8768) = 1;
            *a2 = 500;
            v35 = v96 + v34;
            a2[2] = 0;
            a2[3] = v35;
            a2[4] = v34;
            *a3 = 1;
            return (a2[3] * *(_DWORD *)(a5 + 8644) + ((*(_DWORD *)(a5 + 8648) * *a2 + 128) >> 8));
          }
        }
      }
      goto LABEL_17;
    }
  }
  if (**(_BYTE **)(a5 + 8784))
    goto LABEL_6;
  *(_DWORD *)(a5 + 8768) = 1;
LABEL_17:
  v37 = 0;
  v38 = 0;
  v39 = (void (**)(_QWORD, _QWORD, uint64_t))(a5 + 34264);
  v40 = a1[1];
  LOBYTE(v96) = vp8_mode_contexts[4 * *a1];
  BYTE1(v96) = vp8_mode_contexts[4 * v40 + 1];
  v41 = a1[3];
  BYTE2(v96) = vp8_mode_contexts[4 * a1[2] + 2];
  BYTE3(v96) = vp8_mode_contexts[4 * v41 + 3];
  v42 = (unsigned int *)((char *)&vp8_mv_ref_encoding_array + 8 * (v12 - 5));
  v43 = *v42;
  v44 = v42[1] - 1;
  do
  {
    v37 += vp8_prob_cost[(*((_BYTE *)&v96 + (v38 >> 1)) ^ -((v43 >> v44) & 1))];
    v38 = vp8_mv_ref_tree[((v43 >> v44--) & 1) + v38];
  }
  while (v44 != -1);
  v93 = 0;
  *a2 += v37;
  macro_block_yrd(a5, a2 + 1, &v93);
  *a2 += a2[1];
  a2[3] += v93;
  v45 = *(_QWORD *)(a5 + 8096);
  v46 = *(__int16 *)(v45 + 4);
  v47 = *(int *)(a5 + 7812);
  v48 = (v46 >> 31) | 1;
  v49 = __OFADD__(v48, v46);
  v50 = v48 + v46;
  v51 = ((*(__int16 *)(v45 + 6) >> 31) | 1) + *(__int16 *)(v45 + 6);
  if (v50 < 0 != v49)
    ++v50;
  if (v51 >= 0)
    v52 = v51;
  else
    v52 = v51 + 1;
  v53 = *(_DWORD *)(a5 + 7768);
  v54 = v53 & (v50 >> 1);
  v55 = v53 & (v52 >> 1);
  v56 = (v54 >> 3) * (int)v47 + (v55 >> 3);
  v57 = (_QWORD *)(*(_QWORD *)(a5 + 7840) + v56);
  v58 = (_QWORD *)(*(_QWORD *)(a5 + 7848) + v56);
  v92 = a2;
  if (((v55 | v54) & 7) != 0)
  {
    v59 = v55 & 7;
    v60 = v54 & 7;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8264))(v57, v47, v59, v60, a5 + 4480, 8);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 8264))(v58, v47, v59, v60, a5 + 4544, 8);
  }
  else
  {
    *(_QWORD *)(a5 + 4480) = *v57;
    *(_QWORD *)(a5 + 4488) = *(_QWORD *)((char *)v57 + v47);
    v61 = (_QWORD *)((char *)v57 + v47 + v47);
    *(_QWORD *)(a5 + 4496) = *v61;
    v62 = (_QWORD *)((char *)v61 + v47);
    *(_QWORD *)(a5 + 4504) = *v62;
    v63 = (_QWORD *)((char *)v62 + v47);
    *(_QWORD *)(a5 + 4512) = *v63;
    v64 = (_QWORD *)((char *)v63 + v47);
    *(_QWORD *)(a5 + 4520) = *v64;
    v65 = (_QWORD *)((char *)v64 + v47);
    *(_QWORD *)(a5 + 4528) = *v65;
    *(_QWORD *)(a5 + 4536) = *(_QWORD *)((char *)v65 + v47);
    *(_QWORD *)(a5 + 4544) = *v58;
    *(_QWORD *)(a5 + 4552) = *(_QWORD *)((char *)v58 + v47);
    v66 = (_QWORD *)((char *)v58 + v47 + v47);
    *(_QWORD *)(a5 + 4560) = *v66;
    v67 = (_QWORD *)((char *)v66 + v47);
    *(_QWORD *)(a5 + 4568) = *v67;
    v68 = (_QWORD *)((char *)v67 + v47);
    *(_QWORD *)(a5 + 4576) = *v68;
    v69 = (_QWORD *)((char *)v68 + v47);
    *(_QWORD *)(a5 + 4584) = *v69;
    v70 = (_QWORD *)((char *)v69 + v47);
    *(_QWORD *)(a5 + 4592) = *v70;
    *(_QWORD *)(a5 + 4600) = *(_QWORD *)((char *)v70 + v47);
  }
  v71 = *(uint8x8_t **)(a5 + 4136);
  v72 = *(int *)(a5 + 4100);
  vpx_subtract_block_neon(8, 8, (uint16x8_t *)(a5 + 512), 8, *(uint8x8_t **)(a5 + 4128), v72, (uint8x8_t *)(a5 + 4480), 8);
  vpx_subtract_block_neon(8, 8, (uint16x8_t *)(a5 + 640), 8, v71, v72, (uint8x8_t *)(a5 + 4544), 8);
  v73 = 0x10u;
  (*v39)(*(_QWORD *)(a5 + 3272), *(_QWORD *)(a5 + 3280), 16);
  (*v39)(*(_QWORD *)(a5 + 3448), *(_QWORD *)(a5 + 3456), 16);
  (*v39)(*(_QWORD *)(a5 + 3624), *(_QWORD *)(a5 + 3632), 16);
  (*v39)(*(_QWORD *)(a5 + 3800), *(_QWORD *)(a5 + 3808), 16);
  (*(void (**)(uint64_t, uint64_t))(a5 + 34280))(a5 + 3272, a5 + 7264);
  (*(void (**)(uint64_t, uint64_t))(a5 + 34280))(a5 + 3360, a5 + 7320);
  (*(void (**)(uint64_t, uint64_t))(a5 + 34280))(a5 + 3448, a5 + 7376);
  (*(void (**)(uint64_t, uint64_t))(a5 + 34280))(a5 + 3536, a5 + 7432);
  (*(void (**)(uint64_t, uint64_t))(a5 + 34280))(a5 + 3624, a5 + 7488);
  (*(void (**)(uint64_t, uint64_t))(a5 + 34280))(a5 + 3712, a5 + 7544);
  (*(void (**)(uint64_t, uint64_t))(a5 + 34280))(a5 + 3800, a5 + 7600);
  (*(void (**)(uint64_t, uint64_t))(a5 + 34280))(a5 + 3888, a5 + 7656);
  v74 = 0;
  v75 = *(uint64_t **)(a5 + 8176);
  v96 = *v75;
  v97 = *((_BYTE *)v75 + 8);
  v76 = *(uint64_t **)(a5 + 8184);
  v94 = *v76;
  v95 = *((_BYTE *)v76 + 8);
  v77 = *(_QWORD *)(a5 + 8744);
  do
  {
    v80 = a5 + 6368 + 56 * v73;
    v81 = vp8_block2above[v73];
    v82 = vp8_block2left[v73];
    v78 = **(char **)(v80 + 40);
    v83 = *((char *)&v94 + v82) + *((char *)&v96 + v81);
    if ((int)v78 < 1)
    {
      LODWORD(v78) = 0;
      v79 = 0;
LABEL_29:
      v79 += *(_DWORD *)(v77 + 144 * vp8_coef_bands[v78] + 48 * v83 + 2348);
      goto LABEL_30;
    }
    v79 = 0;
    v84 = *(_QWORD *)v80;
    v85 = vp8_default_zig_zag1d;
    v86 = vp8_coef_bands;
    v87 = v78;
    do
    {
      v88 = *v85++;
      v89 = *(__int16 *)(v84 + 2 * v88);
      v90 = dct_value_tokens[2 * v89 + 4096];
      LODWORD(v88) = *v86++;
      v79 += *(_DWORD *)(v77 + 144 * v88 + 48 * v83 + 4 * v90 + 2304) + dct_value_cost[v89 + 2048];
      v83 = vp8_prev_token_class[v90];
      --v87;
    }
    while (v87);
    if (v78 <= 0xF)
      goto LABEL_29;
    LODWORD(v78) = 1;
LABEL_30:
    *((_BYTE *)&v94 + v82) = (_DWORD)v78 != 0;
    *((_BYTE *)&v96 + v81) = (_DWORD)v78 != 0;
    v74 += v79;
    ++v73;
  }
  while (v73 != 24);
  v92[2] = v74;
  v91 = vp8_mbuverror_c((_QWORD *)a5);
  *v92 += v74;
  v92[3] += v91 / 4;
  v92[4] = v91 / 4;
  return 0x7FFFFFFFLL;
}

uint64_t calculate_final_rd_costs(uint64_t a1, int *a2, unsigned int *a3, int a4, int a5, int a6, uint64_t a7, int8x8_t *a8)
{
  int *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t result;

  v8 = (int *)(a7 + 142824);
  v9 = (unsigned __int8 *)a8[1012];
  v10 = *v9;
  if (*(_DWORD *)(a7 + 111088))
  {
    v11 = *a3 + vp8_prob_cost[*v8];
    *a3 = v11;
    v12 = *a2 + v11;
    *a2 = v12;
    v13 = v9[2];
    v14 = a8[1075].i32[v13] + v12;
    *a2 = v14;
    if (a4)
      return result;
  }
  else
  {
    v13 = v9[2];
    v14 = a8[1075].i32[v13] + *a2;
    *a2 = v14;
    if (a4)
      return result;
  }
  if (*(_DWORD *)(a7 + 111088))
  {
    v15 = v10 != 9;
    if (v10 == 4)
    {
      v15 = 0;
      v16 = 1;
    }
    else
    {
      v16 = v10 == 9;
    }
    if (v16)
      v17 = 0;
    else
      v17 = a8[779].i8[0];
    if (a8[776].i8[0] > v15)
      ++v17;
    if (a8[776].i8[1] > v15)
      ++v17;
    if (a8[776].i8[2] > v15)
      ++v17;
    if (a8[776].i8[3] > v15)
      ++v17;
    if (a8[776].i8[4] > v15)
      ++v17;
    if (a8[776].i8[5] > v15)
      ++v17;
    if (a8[776].i8[6] > v15)
      ++v17;
    if (a8[776].i8[7] > v15)
      ++v17;
    if (a8[777].i8[0] > v15)
      ++v17;
    if (a8[777].i8[1] > v15)
      ++v17;
    if (a8[777].i8[2] > v15)
      ++v17;
    if (a8[777].i8[3] > v15)
      ++v17;
    if (a8[777].i8[4] > v15)
      ++v17;
    if (a8[777].i8[5] > v15)
      ++v17;
    if (a8[777].i8[6] > v15)
      ++v17;
    if (a8[777].i8[7] <= v15)
      v18 = v17;
    else
      v18 = v17 + 1;
    if (v13)
    {
      if (!(vaddlvq_s16(vmovl_s8(a8[778])) + v18))
      {
LABEL_49:
        v14 -= a2[1] + a2[2];
        *a2 = v14;
        a2[2] = 0;
        v19 = *v8;
        if ((_DWORD)v19)
        {
          v20 = vp8_prob_cost[255 - v19] - vp8_prob_cost[v19];
          *a2 = v20 + v14;
          *a3 += v20;
          v14 = *a2;
        }
      }
    }
    else if (!(v18 + a5))
    {
      goto LABEL_49;
    }
  }
  v21 = a2[3] * a8[1080].i32[1] + ((a8[1081].i32[0] * v14 + 128) >> 8);
  result = 0x7FFFFFFFLL;
  if (v21 != 0x7FFFFFFF)
  {
    if (v13)
      a6 = 0;
    return (v21 + a6);
  }
  return result;
}

uint64_t update_best_mode(uint64_t result, int a2, _DWORD *a3, int a4, uint64_t a5)
{
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = *(unsigned __int8 **)(a5 + 8096);
  v6 = *v5;
  *(_DWORD *)result = (a3[3] - a3[4]) * *(_DWORD *)(a5 + 8644)
                    + (((*a3 - (a4 + a3[2]) - *(_DWORD *)(a5 + 4 * v5[2] + 8600)) * *(_DWORD *)(a5 + 8648) + 128) >> 8);
  *(_DWORD *)(result + 4) = a2;
  v7 = *(_QWORD *)v5;
  *(_DWORD *)(result + 20) = *((_DWORD *)v5 + 2);
  *(_QWORD *)(result + 12) = v7;
  v8 = *(_QWORD *)(a5 + 8576);
  *(_OWORD *)(result + 88) = *(_OWORD *)v8;
  v9 = *(_OWORD *)(v8 + 16);
  v10 = *(_OWORD *)(v8 + 32);
  v11 = *(_OWORD *)(v8 + 48);
  *(_OWORD *)(result + 152) = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(result + 136) = v11;
  *(_OWORD *)(result + 120) = v10;
  *(_OWORD *)(result + 104) = v9;
  v12 = *(_OWORD *)(v8 + 80);
  v13 = *(_OWORD *)(v8 + 96);
  v14 = *(_OWORD *)(v8 + 112);
  *(_DWORD *)(result + 216) = *(_DWORD *)(v8 + 128);
  *(_OWORD *)(result + 200) = v14;
  *(_OWORD *)(result + 184) = v13;
  *(_OWORD *)(result + 168) = v12;
  if (v6 == 9 || v6 == 4)
  {
    *(_DWORD *)(result + 24) = *(_DWORD *)(a5 + 6416);
    *(_DWORD *)(result + 28) = *(_DWORD *)(a5 + 6472);
    *(_DWORD *)(result + 32) = *(_DWORD *)(a5 + 6528);
    *(_DWORD *)(result + 36) = *(_DWORD *)(a5 + 6584);
    *(_DWORD *)(result + 40) = *(_DWORD *)(a5 + 6640);
    *(_DWORD *)(result + 44) = *(_DWORD *)(a5 + 6696);
    *(_DWORD *)(result + 48) = *(_DWORD *)(a5 + 6752);
    *(_DWORD *)(result + 52) = *(_DWORD *)(a5 + 6808);
    *(_DWORD *)(result + 56) = *(_DWORD *)(a5 + 6864);
    *(_DWORD *)(result + 60) = *(_DWORD *)(a5 + 6920);
    *(_DWORD *)(result + 64) = *(_DWORD *)(a5 + 6976);
    *(_DWORD *)(result + 68) = *(_DWORD *)(a5 + 7032);
    *(_DWORD *)(result + 72) = *(_DWORD *)(a5 + 7088);
    *(_DWORD *)(result + 76) = *(_DWORD *)(a5 + 7144);
    *(_DWORD *)(result + 80) = *(_DWORD *)(a5 + 7200);
    *(_DWORD *)(result + 84) = *(_DWORD *)(a5 + 7256);
  }
  return result;
}

uint64_t vp8_rd_pick_intra_mode(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  int v7;
  int v8;
  char v9;
  _BYTE *v10;
  int v11;
  _BYTE *v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  char v17;
  int v18;
  uint64_t result;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v4 = a1 + 4224;
  *(_BYTE *)(*(_QWORD *)(a1 + 8096) + 2) = 0;
  rd_pick_intra_mbuv_mode(a1, &v22, &v20, &v21);
  v5 = v22;
  v23 = 0;
  **(_BYTE **)(a1 + 8096) = 0;
  vp8_build_intra_predictors_mby_s(v4, *(_QWORD *)(a1 + 7992) - *(int *)(a1 + 7952), (_BYTE *)(*(_QWORD *)(a1 + 7992) - 1), *(_DWORD *)(a1 + 7952), v4, 16);
  macro_block_yrd(a1, (_DWORD *)&v23 + 1, (int *)&v23);
  v6 = *(_BYTE **)(a1 + 8096);
  v7 = v23 * *(_DWORD *)(a1 + 8644)
     + (((*(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 4 * *v6)
        + HIDWORD(v23))
       * *(_DWORD *)(a1 + 8648)
       + 128) >> 8);
  if (v7 == 0x7FFFFFFF)
    v8 = 0;
  else
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 4 * *v6)
       + HIDWORD(v23);
  if (v7 == 0x7FFFFFFF)
    v9 = 10;
  else
    v9 = 0;
  *v6 = 1;
  vp8_build_intra_predictors_mby_s(v4, *(_QWORD *)(a1 + 7992) - *(int *)(a1 + 7952), (_BYTE *)(*(_QWORD *)(a1 + 7992) - 1), *(_DWORD *)(a1 + 7952), v4, 16);
  macro_block_yrd(a1, (_DWORD *)&v23 + 1, (int *)&v23);
  v10 = *(_BYTE **)(a1 + 8096);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 4 * *v10)
      + HIDWORD(v23);
  if ((int)v23 * *(_DWORD *)(a1 + 8644) + ((v11 * *(_DWORD *)(a1 + 8648) + 128) >> 8) < v7)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 4 * *v10)
       + HIDWORD(v23);
    v9 = 1;
    v7 = v23 * *(_DWORD *)(a1 + 8644) + ((v11 * *(_DWORD *)(a1 + 8648) + 128) >> 8);
  }
  *v10 = 2;
  vp8_build_intra_predictors_mby_s(v4, *(_QWORD *)(a1 + 7992) - *(int *)(a1 + 7952), (_BYTE *)(*(_QWORD *)(a1 + 7992) - 1), *(_DWORD *)(a1 + 7952), v4, 16);
  macro_block_yrd(a1, (_DWORD *)&v23 + 1, (int *)&v23);
  v12 = *(_BYTE **)(a1 + 8096);
  v13 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 4 * *v12)
      + HIDWORD(v23);
  if ((int)v23 * *(_DWORD *)(a1 + 8644) + ((v13 * *(_DWORD *)(a1 + 8648) + 128) >> 8) < v7)
  {
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 4 * *v12)
       + HIDWORD(v23);
    v9 = 2;
    v7 = v23 * *(_DWORD *)(a1 + 8644) + ((v13 * *(_DWORD *)(a1 + 8648) + 128) >> 8);
  }
  *v12 = 3;
  vp8_build_intra_predictors_mby_s(v4, *(_QWORD *)(a1 + 7992) - *(int *)(a1 + 7952), (_BYTE *)(*(_QWORD *)(a1 + 7992) - 1), *(_DWORD *)(a1 + 7952), v4, 16);
  macro_block_yrd(a1, (_DWORD *)&v23 + 1, (int *)&v23);
  v14 = *(char **)(a1 + 8096);
  v15 = v23 * *(_DWORD *)(a1 + 8644)
      + (((*(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 4 * *v14)
         + HIDWORD(v23))
        * *(_DWORD *)(a1 + 8648)
        + 128) >> 8);
  if (v15 >= v7)
    v16 = v8;
  else
    v16 = *(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 4 * *v14)
        + HIDWORD(v23);
  if (v15 >= v7)
    v17 = v9;
  else
    v17 = 3;
  if (v15 >= v7)
    v18 = v7;
  else
    v18 = v23 * *(_DWORD *)(a1 + 8644)
        + (((*(_DWORD *)(*(_QWORD *)(a1 + 8712) + 40 * *(unsigned int *)(a1 + 8108) + 4 * *v14)
           + HIDWORD(v23))
          * *(_DWORD *)(a1 + 8648)
          + 128) >> 8);
  *v14 = v17;
  result = rd_pick_intra4x4mby_modes(a1, (_DWORD *)&v22 + 1, &v23, (_DWORD *)&v23 + 1, v18);
  if ((int)result < v18)
  {
    **(_BYTE **)(a1 + 8096) = 4;
    v16 = HIDWORD(v22);
  }
  *a2 = v16 + v5;
  return result;
}

uint64_t rd_check_segment(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v4;
  int v6;
  char v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  int *v15;
  int *v16;
  int v17;
  int v18;
  _BOOL4 v20;
  uint64_t v21;
  _BOOL4 v23;
  char *v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  char *v33;
  __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int *v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t (**v59)(uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, uint64_t, _QWORD *, char *, uint64_t *);
  int v60;
  int v61;
  int v62;
  __int16 v63;
  __int16 *v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  char v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint16x8_t **v100;
  int16x8_t *v101;
  int16x8_t *v102;
  int16x8_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int v109;
  _BYTE *v110;
  int v111;
  int v112;
  _BYTE *v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  _DWORD *v142;
  uint64_t v143;
  unsigned int *v144;
  uint64_t v145;
  _DWORD *v146;
  int v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  _DWORD *v151;
  int v152;
  int v153;
  int v154;
  int v155;
  _DWORD *v156;
  _BOOL4 v157;
  int v158;
  int v159;
  uint64_t v160;
  unsigned int *v161;
  int v162;
  _DWORD *v163;
  _BOOL4 v164;
  _DWORD *v166;
  _DWORD *v167;
  int v168;
  char *v169;
  int *v170;
  int v171;
  _DWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  char v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  char v196;
  _OWORD v197[3];
  _QWORD v198[4];

  v4 = (_QWORD *)a3;
  v6 = 0;
  v7 = 0;
  v198[2] = *MEMORY[0x24BDAC8D0];
  v176 = a2 + 6208;
  v172 = (_DWORD *)(result + 142788);
  v8 = *(uint64_t **)(a2 + 8176);
  v195 = *v8;
  v196 = *((_BYTE *)v8 + 8);
  v9 = *(uint64_t **)(a2 + 8184);
  v193 = *v9;
  v194 = *((_BYTE *)v9 + 8);
  v191 = 0;
  v192 = 0;
  v189 = 0;
  v190 = 0;
  v160 = a4;
  v149 = vp8_mbsplit_count[a4];
  v10 = (unsigned int *)((char *)&vp8_mbsplit_encodings + 8 * a4);
  v11 = *v10;
  v12 = v10[1] - 1;
  do
  {
    v6 += vp8_prob_cost[(vp8_mbsplit_probs[v7 >> 1] ^ -((v11 >> v12) & 1))];
    v7 = vp8_mbsplit_tree[((v11 >> v12--) & 1) + v7];
  }
  while (v12 != -1);
  v13 = 0;
  v14 = 0;
  v150 = 0;
  v155 = 0;
  v15 = *(int **)(a3 + 184);
  v182 = result + 32 * a4 + 143488;
  v16 = (int *)((char *)&vp8_mbsplits + 64 * (unint64_t)a4);
  v168 = *(_DWORD *)(a3 + 176) / (int)v149;
  v17 = vp8_prob_cost[~LOBYTE(vp8_mode_contexts[4 * v15[3] + 3])]
      + vp8_prob_cost[~LOBYTE(vp8_mode_contexts[4 * v15[2] + 2])]
      + vp8_prob_cost[~LOBYTE(vp8_mode_contexts[4 * v15[1] + 1])]
      + vp8_prob_cost[~LOBYTE(vp8_mode_contexts[4 * *v15])]
      + v6;
  v18 = (*(_DWORD *)(a2 + 8648) * v17 + 128) >> 8;
  v181 = (_QWORD *)(a2 + 8680);
  v174 = a2 + 6368;
  v167 = (_DWORD *)(a2 + 6640);
  v166 = v16 + 4;
  v148 = (char *)&vp8_mbsplit_offset + 16 * a4;
  v173 = result + 143464;
  v170 = v16;
  do
  {
    v152 = v18;
    v153 = v17;
    v154 = v14;
    v159 = 0;
    v20 = a4 == 3 && v13 != 0;
    v164 = v20;
    v21 = a2 + 6368;
    v23 = v13 == 8 || (v13 & 0x7FFFFFF7) == 4;
    v157 = v23;
    v151 = (_DWORD *)(v21 + 56 * v13 - 176);
    v198[0] = 0;
    memset(v197, 0, sizeof(v197));
    v156 = (_DWORD *)(v21 + 56 * (v13 - 1) + 48);
    v24 = (char *)v4 + 4 * v13;
    v163 = v24 + 192;
    if (a4)
      v25 = 0;
    else
      v25 = v13 == 1;
    v26 = v25;
    v162 = v26;
    v161 = (unsigned int *)(v24 + 208);
    v169 = &v148[v13];
    v171 = 0x7FFFFFFF;
    v27 = 10;
    v28 = 12;
    do
    {
      v187 = v195;
      v188 = v196;
      v185 = v193;
      v186 = v194;
      if (v27 != 13)
      {
        v30 = 0;
        v31 = 0;
        v32 = 0;
        result = 0;
        v33 = (char *)v197 + 4 * v27;
        v34 = (__int16 *)*v4;
        v35 = *(_QWORD *)(a2 + 8096);
        v36 = *(int *)(a2 + 8104);
        v37 = (_BYTE *)(v35 - 76 * v36);
        v38 = 60 - 76 * (int)v36;
        v39 = (unsigned int *)a2;
        v40 = v35;
        while (1)
        {
          if (v13 != v16[v31])
            goto LABEL_35;
          if ((v31 & 3) == 0 || v13 != v16[(v31 - 1)])
            break;
          LODWORD(v41) = 10;
LABEL_34:
          v39[1604] = *(_DWORD *)v33;
          v42 = *(_QWORD *)(a2 + 8576) + v30;
          *(_DWORD *)(v42 + 4) = v41;
          *(_DWORD *)(v42 + 8) = *(_DWORD *)v33;
LABEL_35:
          ++v31;
          v40 += 4;
          v30 += 8;
          v39 += 14;
          if (v31 == 16)
          {
            v50 = result + v32;
            v51 = *(__int16 *)v33 >> 3;
            if (*(_DWORD *)(a2 + 8760) > v51)
              goto LABEL_23;
LABEL_147:
            if (*(_DWORD *)(a2 + 8764) < v51)
              goto LABEL_23;
            v95 = *((__int16 *)v33 + 1) >> 3;
            if (*(_DWORD *)(a2 + 8752) > v95 || *(_DWORD *)(a2 + 8756) < v95)
              goto LABEL_23;
            v158 = v50;
            v96 = 0;
            v180 = 0;
            v97 = *(int *)(a2 + 7792);
            v177 = *(_QWORD *)(a2 + 7832);
            v178 = v97;
            v98 = -896;
            v99 = 6368;
            do
            {
              v109 = *v16++;
              if (v13 == v109)
              {
                v110 = *(_BYTE **)(a2 + v98 + 7280);
                v111 = *(__int16 *)(a2 + v98 + 7312);
                v112 = *(__int16 *)(a2 + v98 + 7314);
                v113 = (_BYTE *)(v177 + *(int *)(a2 + v98 + 7296) + (int)v97 * (uint64_t)(v111 >> 3) + (v112 >> 3));
                if (((v111 | v112) & 7) != 0)
                {
                  (*(void (**)(_BYTE *))(a2 + 8248))(v113);
                }
                else
                {
                  *v110 = *v113;
                  v110[1] = v113[1];
                  v110[2] = v113[2];
                  v110[3] = v113[3];
                  v110[16] = v113[v97];
                  v110[17] = v113[v97 + 1];
                  v110[18] = v113[v97 + 2];
                  v110[19] = v113[v97 + 3];
                  v114 = &v113[v97 + v97];
                  v110[32] = *v114;
                  v110[33] = v114[1];
                  v110[34] = v114[2];
                  v110[35] = v114[3];
                  v115 = &v114[v97];
                  v110[48] = *v115;
                  v110[49] = v115[1];
                  v110[50] = v115[2];
                  v110[51] = v115[3];
                }
                v100 = (uint16x8_t **)(a2 + v96 + 1864);
                vpx_subtract_block_neon(4, 4, *v100, 16, (uint8x8_t *)(**(_QWORD **)(a2 + v96 + 1936) + *(int *)(a2 + v96 + 1944)), *(int *)(a2 + v96 + 1948), *(uint8x8_t **)(a2 + v98 + 7280), 16);
                (*(void (**)(uint16x8_t *, _QWORD, uint64_t))(v176 + 28048))(*v100, *(_QWORD *)(a2 + v96 + 1872), 32);
                (*(void (**)(uint16x8_t **, uint64_t))(v176 + 28072))(v100, a2 + v99);
                v101 = *(int16x8_t **)(a2 + v96 + 1872);
                v102 = *(int16x8_t **)(a2 + v98 + 7272);
                v103 = v101[1];
                v104 = v102[1];
                v105 = vsubl_high_s16(*v101, *v102);
                v106 = vsubl_high_s16(v103, v104);
                v107 = vsubl_s16(*(int16x4_t *)v101->i8, *(int16x4_t *)v102->i8);
                v108 = vsubl_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v104.i8);
                v180 += vaddvq_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v108, v108), v107, v107), vmlaq_s32(vmulq_s32(v106, v106), v105, v105)));
                v4 = (_QWORD *)a3;
                v97 = v178;
              }
              v96 += 88;
              v99 += 56;
              v98 += 56;
            }
            while (v98);
            v116 = 0;
            v117 = 0;
            v16 = v170;
            result = 48;
            while (1)
            {
              if (v13 != v170[v116])
                goto LABEL_161;
              v121 = vp8_block2above[v116];
              v122 = v174 + 56 * v116;
              v123 = vp8_block2left[v116];
              v118 = **(char **)(v122 + 40);
              v124 = *((char *)&v185 + v123) + *((char *)&v187 + v121);
              v125 = *(_QWORD *)(a2 + 8744);
              if ((int)v118 < 1)
              {
                LODWORD(v118) = 0;
                v119 = 0;
              }
              else
              {
                v119 = 0;
                v126 = *(_QWORD *)v122;
                v127 = vp8_default_zig_zag1d;
                v128 = vp8_coef_bands;
                v129 = v118;
                do
                {
                  v130 = *v127++;
                  v131 = *(__int16 *)(v126 + 2 * v130);
                  v132 = dct_value_tokens[2 * v131 + 4096];
                  LODWORD(v130) = *v128++;
                  v119 += *(_DWORD *)(v125 + 144 * v130 + 48 * v124 + 4 * v132 + 3456)
                        + dct_value_cost[v131 + 2048];
                  v124 = vp8_prev_token_class[v132];
                  --v129;
                }
                while (v129);
                if (v118 > 0xF)
                {
                  LODWORD(v118) = 1;
                  result = 48;
                  goto LABEL_160;
                }
                result = 48;
              }
              v119 += *(_DWORD *)(v125 + 144 * vp8_coef_bands[v118] + 48 * v124 + 3500);
LABEL_160:
              v120 = (_DWORD)v118 != 0;
              *((_BYTE *)&v185 + v123) = v120;
              *((_BYTE *)&v187 + v121) = v120;
              v117 += v119;
LABEL_161:
              if (++v116 == 16)
              {
                v133 = *(_DWORD *)(a2 + 8644) * (v180 >> 2) + ((*(_DWORD *)(a2 + 8648) * (v117 + v158) + 128) >> 8);
                if (v133 < v171)
                {
                  v191 = v187;
                  v192 = v188;
                  v189 = v185;
                  v28 = v27;
                  v190 = v186;
                  LODWORD(v150) = v180 >> 2;
                  HIDWORD(v150) = v117 + v158;
                  v171 = v133;
                  v159 = v117;
                }
                goto LABEL_23;
              }
            }
          }
        }
        if (v31 >= 4 && v13 == v16[(v31 - 4)])
        {
          LODWORD(v41) = 11;
          goto LABEL_34;
        }
        switch((int)v27)
        {
          case 10:
            if ((v31 & 3) != 0)
            {
              v43 = v39 + 1590;
            }
            else if (*(_BYTE *)(v35 - 76) == 9)
            {
              v43 = (_DWORD *)(v40 - 52);
            }
            else
            {
              v43 = (_DWORD *)(v35 - 72);
            }
            *(_DWORD *)v33 = *v43;
            v41 = 10;
            goto LABEL_33;
          case 11:
            if (v31 >= 4)
            {
              v48 = v39[1548];
              *(_DWORD *)v33 = v48;
              if ((v31 & 3) != 0)
              {
LABEL_56:
                v49 = v39 + 1590;
                goto LABEL_62;
              }
            }
            else
            {
              if (*v37 == 9)
                v47 = (unsigned int *)(v40 + v38);
              else
                v47 = (unsigned int *)(v37 + 4);
              v48 = *v47;
              *(_DWORD *)v33 = v48;
              if ((v31 & 3) != 0)
                goto LABEL_56;
            }
            if (*(_BYTE *)(v35 - 76) == 9)
              v49 = (_DWORD *)(v40 - 52);
            else
              v49 = (_DWORD *)(v35 - 72);
LABEL_62:
            if (*v49 == v48)
              v41 = 10;
            else
              v41 = 11;
LABEL_33:
            v32 = *(_DWORD *)(*(_QWORD *)(a2 + 8736) + 4 * v41);
            goto LABEL_34;
          case 12:
            *(_DWORD *)v33 = 0;
            v41 = 12;
            goto LABEL_33;
          case 13:
            v44 = (*(__int16 *)v33 - *v34) >> 1;
            if (v44 >= 2047)
              v44 = 2047;
            v45 = v44 & ~(v44 >> 31);
            v46 = (*((__int16 *)v33 + 1) - v34[1]) >> 1;
            if (v46 >= 2047)
              v46 = 2047;
            result = ((102
                                   * (*(_DWORD *)(*(_QWORD *)(a2 + 8688) + 4 * (v46 & ~(v46 >> 31)))
                                    + *(_DWORD *)(*(_QWORD *)(a2 + 8680) + 4 * v45))) >> 7);
            v41 = 13;
            goto LABEL_33;
          default:
            v41 = v27;
            goto LABEL_33;
        }
      }
      v184 = 0;
      if (v171 < v168)
        break;
      v179 = v28;
      if (!*v172)
        goto LABEL_75;
      if (a4 > 1)
      {
        if (!v164)
        {
LABEL_75:
          v29 = 0;
          goto LABEL_76;
        }
        *((_DWORD *)v4 + 2) = *v156;
        if (v157)
          *((_DWORD *)v4 + 2) = *v151;
        v29 = 2;
      }
      else
      {
        *((_DWORD *)v4 + 2) = *v163;
        if (v162)
          *((_DWORD *)v4 + 2) = *((_DWORD *)v4 + 50);
        v29 = *v161;
      }
LABEL_76:
      v52 = *(unsigned int *)(a2 + 8640);
      WORD2(v183) = *((__int16 *)v4 + 4) >> 3;
      HIWORD(v183) = *((__int16 *)v4 + 5) >> 3;
      v53 = *v169;
      v54 = a2 + 88 * *v169 + 1864;
      v55 = a2 + 56 * *v169 + 6368;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, char *, uint64_t, _QWORD *, _QWORD))(v173 + 16))(a2, v54, v55, (char *)&v183 + 4, (char *)v198 + 4, v29, v52, (char *)&v184 + 4, v182, v181, *v4);
      v56 = result;
      v57 = HIDWORD(v184);
      HIDWORD(v184) = 0;
      if (v57 >= 7 - (int)v29)
      {
        v59 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, uint64_t, _QWORD *, char *, uint64_t *))v173;
        if (*v172)
          goto LABEL_98;
      }
      else
      {
        v58 = (v29 + v57 + 1);
        v59 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, uint64_t, _QWORD *, char *, uint64_t *))v173;
LABEL_80:
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t *, uint64_t, uint64_t, char *, uint64_t, _QWORD *, _QWORD))(v173 + 16))(a2, v54, v55, (char *)&v183 + 4, &v184, v58, v52, (char *)&v184 + 4, v182, v181, *v4);
        if ((int)result < v56)
        {
          HIDWORD(v198[0]) = v184;
          v56 = result;
        }
        while ((_DWORD)v58 != 7)
        {
          v58 = (v58 + 1);
          if (!HIDWORD(v184))
            goto LABEL_80;
          --HIDWORD(v184);
        }
        if (*v172)
          goto LABEL_98;
      }
      if (v56 >> segmentation_to_sseshift[v160] < 4001)
        goto LABEL_98;
      v60 = *(_DWORD *)(a2 + 8752);
      v61 = *(_DWORD *)(a2 + 8760);
      v62 = *(_DWORD *)(a2 + 8764);
      if (v60 <= SHIWORD(v183))
        LOWORD(v60) = HIWORD(v183);
      if (*(_DWORD *)(a2 + 8756) < (__int16)v60)
        LOWORD(v60) = *(_DWORD *)(a2 + 8756);
      HIWORD(v183) = v60;
      v63 = WORD2(v183);
      if (v61 > SWORD2(v183))
        v63 = v61;
      if (v62 < v63)
        v63 = v62;
      WORD2(v183) = v63;
      result = vp8_full_search_sad(a2, v54, v55, (__int16 *)&v183 + 2, v52, 16, v182, v181, (__int16 *)*v4);
      if ((int)result >= v56)
      {
        *(_DWORD *)(a2 + 56 * v53 + 6416) = HIDWORD(v198[0]);
LABEL_98:
        if (v56 == 0x7FFFFFFF)
          goto LABEL_100;
        goto LABEL_99;
      }
      HIDWORD(v198[0]) = *(_DWORD *)(a2 + 56 * v53 + 6416);
LABEL_99:
      v183 = 0;
      result = (*v59)(a2, v54, v55, (char *)v198 + 4, *v4, *(unsigned int *)(a2 + 8632), v182, v181, (char *)&v183 + 4, &v183);
LABEL_100:
      v64 = (__int16 *)*v4;
      if (!v13)
      {
        v71 = (SWORD2(v198[0]) - *v64) >> 1;
        if (v71 >= 2047)
          v71 = 2047;
        v72 = v71 & ~(v71 >> 31);
        v73 = (SHIWORD(v198[0]) - v64[1]) >> 1;
        if (v73 >= 2047)
          v73 = 2047;
        v68 = (102
             * (*(_DWORD *)(*(_QWORD *)(a2 + 8688) + 4 * (v73 & ~(v73 >> 31)))
              + *(_DWORD *)(*(_QWORD *)(a2 + 8680) + 4 * v72))) >> 7;
        v69 = *(_DWORD *)(*(_QWORD *)(a2 + 8736) + 52);
        *(_DWORD *)(a2 + 6416) = HIDWORD(v198[0]);
        v74 = *(_QWORD *)(a2 + 8576);
        *(_DWORD *)(v74 + 4) = 13;
        *(_DWORD *)(v74 + 8) = HIDWORD(v198[0]);
        v16 = v170;
        v27 = 13;
        v28 = v179;
        if (v170[1])
        {
          if (!v170[2])
            goto LABEL_115;
          goto LABEL_125;
        }
        v70 = 10;
        goto LABEL_121;
      }
      v16 = v170;
      v27 = 13;
      v28 = v179;
      if (v13 == v170[1])
      {
        v65 = (SWORD2(v198[0]) - *v64) >> 1;
        if (v65 >= 2047)
          v65 = 2047;
        v66 = v65 & ~(v65 >> 31);
        v67 = (SHIWORD(v198[0]) - v64[1]) >> 1;
        if (v67 >= 2047)
          v67 = 2047;
        v68 = (102
             * (*(_DWORD *)(*(_QWORD *)(a2 + 8688) + 4 * (v67 & ~(v67 >> 31)))
              + *(_DWORD *)(*(_QWORD *)(a2 + 8680) + 4 * v66))) >> 7;
        v69 = *(_DWORD *)(*(_QWORD *)(a2 + 8736) + 52);
        v70 = 13;
LABEL_121:
        *(_DWORD *)(a2 + 6472) = HIDWORD(v198[0]);
        v79 = *(_QWORD *)(a2 + 8576);
        *(_DWORD *)(v79 + 12) = v70;
        *(_DWORD *)(v79 + 16) = HIDWORD(v198[0]);
        if (v13 == v16[2])
        {
          v78 = 10;
          goto LABEL_123;
        }
        goto LABEL_125;
      }
      v69 = 0;
      v68 = 0;
      if (v13 == v170[2])
      {
LABEL_115:
        v75 = (SWORD2(v198[0]) - *v64) >> 1;
        if (v75 >= 2047)
          v75 = 2047;
        v76 = v75 & ~(v75 >> 31);
        v77 = (SHIWORD(v198[0]) - v64[1]) >> 1;
        if (v77 >= 2047)
          v77 = 2047;
        v68 = (102
             * (*(_DWORD *)(*(_QWORD *)(a2 + 8688) + 4 * (v77 & ~(v77 >> 31)))
              + *(_DWORD *)(*(_QWORD *)(a2 + 8680) + 4 * v76))) >> 7;
        v69 = *(_DWORD *)(*(_QWORD *)(a2 + 8736) + 52);
        v78 = 13;
LABEL_123:
        *(_DWORD *)(a2 + 6528) = HIDWORD(v198[0]);
        v80 = *(_QWORD *)(a2 + 8576);
        *(_DWORD *)(v80 + 20) = v78;
        *(_DWORD *)(v80 + 24) = HIDWORD(v198[0]);
        if (v13 == v16[3])
        {
          v81 = 10;
LABEL_131:
          *(_DWORD *)(a2 + 6584) = HIDWORD(v198[0]);
          v85 = *(_QWORD *)(a2 + 8576);
          *(_DWORD *)(v85 + 28) = v81;
          *(_DWORD *)(v85 + 32) = HIDWORD(v198[0]);
          goto LABEL_132;
        }
        goto LABEL_132;
      }
LABEL_125:
      if (v13 == v16[3])
      {
        v82 = (SWORD2(v198[0]) - *v64) >> 1;
        if (v82 >= 2047)
          v82 = 2047;
        v83 = v82 & ~(v82 >> 31);
        v84 = (SHIWORD(v198[0]) - v64[1]) >> 1;
        if (v84 >= 2047)
          v84 = 2047;
        v68 = (102
             * (*(_DWORD *)(*(_QWORD *)(a2 + 8688) + 4 * (v84 & ~(v84 >> 31)))
              + *(_DWORD *)(*(_QWORD *)(a2 + 8680) + 4 * v83))) >> 7;
        v69 = *(_DWORD *)(*(_QWORD *)(a2 + 8736) + 52);
        v81 = 13;
        goto LABEL_131;
      }
LABEL_132:
      v86 = 0;
      v87 = v166;
      v88 = v167;
      v89 = 4;
      do
      {
        if (v13 == *v87)
        {
          if ((v89 & 3) != 0 && v13 == *(v87 - 1))
          {
            v93 = 10;
          }
          else if (v13 == *(v87 - 4))
          {
            v93 = 11;
          }
          else
          {
            v90 = (SWORD2(v198[0]) - *v64) >> 1;
            if (v90 >= 2047)
              v90 = 2047;
            v91 = v90 & ~(v90 >> 31);
            v92 = (SHIWORD(v198[0]) - v64[1]) >> 1;
            if (v92 >= 2047)
              v92 = 2047;
            v68 = (102
                 * (*(_DWORD *)(*(_QWORD *)(a2 + 8688) + 4 * (v92 & ~(v92 >> 31)))
                  + *(_DWORD *)(*(_QWORD *)(a2 + 8680) + 4 * v91))) >> 7;
            v69 = *(_DWORD *)(*(_QWORD *)(a2 + 8736) + 52);
            v93 = 13;
          }
          *v88 = HIDWORD(v198[0]);
          v94 = *(_QWORD *)(a2 + 8576) + v86;
          *(_DWORD *)(v94 + 36) = v93;
          *(_DWORD *)(v94 + 40) = HIDWORD(v198[0]);
        }
        ++v89;
        v86 += 8;
        v88 += 14;
        ++v87;
      }
      while (v86 != 96);
      v50 = v68 + v69;
      v33 = (char *)v198 + 4;
      v51 = SWORD2(v198[0]) >> 3;
      if (*(_DWORD *)(a2 + 8760) <= v51)
        goto LABEL_147;
LABEL_23:
      ++v27;
    }
    while (v27 != 14);
    v134 = 0;
    v135 = 0;
    v195 = v191;
    v196 = v192;
    v193 = v189;
    v194 = v190;
    v136 = *(_QWORD *)(a2 + 8096);
    v137 = *(int *)(a2 + 8104);
    v138 = (_BYTE *)(v136 - 76 * v137);
    v139 = 60 - 76 * (int)v137;
    v140 = (unsigned int *)a2;
    v141 = v136;
    do
    {
      if (v13 == v16[v135])
      {
        if ((v135 & 3) != 0 && v13 == v16[(v135 - 1)])
        {
LABEL_175:
          result = 10;
        }
        else if (v135 >= 4 && v13 == v16[(v135 - 4)])
        {
          result = 11;
        }
        else
        {
          result = v28;
          switch(v28)
          {
            case 10:
              if ((v135 & 3) != 0)
              {
                v142 = v140 + 1590;
              }
              else if (*(_BYTE *)(v136 - 76) == 9)
              {
                v142 = (_DWORD *)(v141 - 52);
              }
              else
              {
                v142 = (_DWORD *)(v136 - 72);
              }
              *((_DWORD *)v197 + v28) = *v142;
              goto LABEL_175;
            case 11:
              if (v135 >= 4)
              {
                v145 = v140[1548];
                *((_DWORD *)v197 + v28) = v145;
                if ((v135 & 3) != 0)
                  goto LABEL_190;
              }
              else
              {
                if (*v138 == 9)
                  v144 = (unsigned int *)(v141 + v139);
                else
                  v144 = (unsigned int *)(v138 + 4);
                v145 = *v144;
                *((_DWORD *)v197 + v28) = v145;
                if ((v135 & 3) != 0)
                {
LABEL_190:
                  v146 = v140 + 1590;
                  goto LABEL_197;
                }
              }
              if (*(_BYTE *)(v136 - 76) == 9)
                v146 = (_DWORD *)(v141 - 52);
              else
                v146 = (_DWORD *)(v136 - 72);
LABEL_197:
              if (*v146 == v145)
                result = 10;
              else
                result = 11;
              break;
            case 12:
              *((_DWORD *)v197 + v28) = 0;
              result = 12;
              break;
            case 13:
              result = 13;
              break;
            default:
              break;
          }
        }
        v140[1604] = *((_DWORD *)v197 + v28);
        v143 = *(_QWORD *)(a2 + 8576) + v134;
        *(_DWORD *)(v143 + 4) = result;
        *(_DWORD *)(v143 + 8) = *((_DWORD *)v197 + v28);
      }
      ++v135;
      v141 += 4;
      v134 += 8;
      v140 += 14;
    }
    while (v135 != 16);
    v17 = HIDWORD(v150) + v153;
    v155 += v150;
    v14 = v159 + v154;
    v18 = v171 + v152;
    v147 = *((_DWORD *)v4 + 3);
    if (v171 + v152 >= v147)
      break;
    ++v13;
  }
  while (v13 != v149);
  if (v18 < v147)
  {
    *((_DWORD *)v4 + 5) = v17;
    *((_DWORD *)v4 + 6) = v155;
    *((_DWORD *)v4 + 7) = v14;
    *((_DWORD *)v4 + 3) = v18;
    *((_DWORD *)v4 + 4) = a4;
    *((_DWORD *)v4 + 24) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 8);
    *((_DWORD *)v4 + 8) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 4);
    *((_BYTE *)v4 + 160) = *(_BYTE *)v176;
    *((_DWORD *)v4 + 25) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 16);
    *((_DWORD *)v4 + 9) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 12);
    *((_BYTE *)v4 + 161) = *(_BYTE *)(v176 + 1);
    *((_DWORD *)v4 + 26) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 24);
    *((_DWORD *)v4 + 10) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 20);
    *((_BYTE *)v4 + 162) = *(_BYTE *)(v176 + 2);
    *((_DWORD *)v4 + 27) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 32);
    *((_DWORD *)v4 + 11) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 28);
    *((_BYTE *)v4 + 163) = *(_BYTE *)(v176 + 3);
    *((_DWORD *)v4 + 28) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 40);
    *((_DWORD *)v4 + 12) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 36);
    *((_BYTE *)v4 + 164) = *(_BYTE *)(v176 + 4);
    *((_DWORD *)v4 + 29) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 48);
    *((_DWORD *)v4 + 13) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 44);
    *((_BYTE *)v4 + 165) = *(_BYTE *)(v176 + 5);
    *((_DWORD *)v4 + 30) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 56);
    *((_DWORD *)v4 + 14) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 52);
    *((_BYTE *)v4 + 166) = *(_BYTE *)(v176 + 6);
    *((_DWORD *)v4 + 31) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 64);
    *((_DWORD *)v4 + 15) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 60);
    *((_BYTE *)v4 + 167) = *(_BYTE *)(v176 + 7);
    *((_DWORD *)v4 + 32) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 72);
    *((_DWORD *)v4 + 16) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 68);
    *((_BYTE *)v4 + 168) = *(_BYTE *)(v176 + 8);
    *((_DWORD *)v4 + 33) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 80);
    *((_DWORD *)v4 + 17) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 76);
    *((_BYTE *)v4 + 169) = *(_BYTE *)(v176 + 9);
    *((_DWORD *)v4 + 34) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 88);
    *((_DWORD *)v4 + 18) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 84);
    *((_BYTE *)v4 + 170) = *(_BYTE *)(v176 + 10);
    *((_DWORD *)v4 + 35) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 96);
    *((_DWORD *)v4 + 19) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 92);
    *((_BYTE *)v4 + 171) = *(_BYTE *)(v176 + 11);
    *((_DWORD *)v4 + 36) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 104);
    *((_DWORD *)v4 + 20) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 100);
    *((_BYTE *)v4 + 172) = *(_BYTE *)(v176 + 12);
    *((_DWORD *)v4 + 37) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 112);
    *((_DWORD *)v4 + 21) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 108);
    *((_BYTE *)v4 + 173) = *(_BYTE *)(v176 + 13);
    *((_DWORD *)v4 + 38) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 120);
    *((_DWORD *)v4 + 22) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 116);
    *((_BYTE *)v4 + 174) = *(_BYTE *)(v176 + 14);
    *((_DWORD *)v4 + 39) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 128);
    *((_DWORD *)v4 + 23) = *(_DWORD *)(*(_QWORD *)(a2 + 8576) + 124);
    *((_BYTE *)v4 + 175) = *(_BYTE *)(v176 + 15);
  }
  return result;
}

uint64_t vp8_build_inter4x4_predictors_mbuv(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t i;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  int v47;
  int v48;
  _BYTE *v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t j;
  uint64_t result;
  int v56;
  uint64_t v57;
  int v58;
  _QWORD *v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  int v63;
  int v64;
  _BYTE *v65;
  _BYTE *v66;

  v2 = *(int *)(a1 + 3588);
  v3 = *(_DWORD *)(a1 + 3544);
  v4 = *(__int16 *)(a1 + 2248) + *(__int16 *)(a1 + 2192) + *(__int16 *)(a1 + 2416) + *(__int16 *)(a1 + 2472);
  v5 = v4 + 8 * (v4 >> 31);
  v6 = v5 + 4;
  v7 = v5 + 11;
  if (v6 >= 0)
    v7 = v6;
  *(_WORD *)(a1 + 3088) = v3 & (v7 >> 3);
  v8 = *(__int16 *)(a1 + 2250) + *(__int16 *)(a1 + 2194) + *(__int16 *)(a1 + 2418) + *(__int16 *)(a1 + 2474);
  v9 = v8 + 8 * (v8 >> 31);
  v10 = v9 + 4;
  v11 = v9 + 11;
  if (v10 >= 0)
    v11 = v10;
  *(_WORD *)(a1 + 3090) = v3 & (v11 >> 3);
  *(_DWORD *)(a1 + 3312) = *(_DWORD *)(a1 + 3088);
  v12 = *(__int16 *)(a1 + 2360) + *(__int16 *)(a1 + 2304) + *(__int16 *)(a1 + 2528) + *(__int16 *)(a1 + 2584);
  v13 = v12 + 8 * (v12 >> 31);
  v14 = v13 + 4;
  v15 = v13 + 11;
  if (v14 >= 0)
    v15 = v14;
  *(_WORD *)(a1 + 3144) = v3 & (v15 >> 3);
  v16 = *(__int16 *)(a1 + 2362) + *(__int16 *)(a1 + 2306) + *(__int16 *)(a1 + 2530) + *(__int16 *)(a1 + 2586);
  v17 = v16 + 8 * (v16 >> 31);
  v18 = v17 + 4;
  v19 = v17 + 11;
  if (v18 >= 0)
    v19 = v18;
  *(_WORD *)(a1 + 3146) = v3 & (v19 >> 3);
  *(_DWORD *)(a1 + 3368) = *(_DWORD *)(a1 + 3144);
  v20 = *(__int16 *)(a1 + 2696) + *(__int16 *)(a1 + 2640) + *(__int16 *)(a1 + 2864) + *(__int16 *)(a1 + 2920);
  v21 = v20 + 8 * (v20 >> 31);
  v22 = v21 + 4;
  v23 = v21 + 11;
  if (v22 >= 0)
    v23 = v22;
  *(_WORD *)(a1 + 3200) = v3 & (v23 >> 3);
  v24 = *(__int16 *)(a1 + 2698) + *(__int16 *)(a1 + 2642) + *(__int16 *)(a1 + 2866) + *(__int16 *)(a1 + 2922);
  v25 = v24 + 8 * (v24 >> 31);
  v26 = v25 + 4;
  v27 = v25 + 11;
  if (v26 >= 0)
    v27 = v26;
  *(_WORD *)(a1 + 3202) = v3 & (v27 >> 3);
  *(_DWORD *)(a1 + 3424) = *(_DWORD *)(a1 + 3200);
  v28 = *(__int16 *)(a1 + 2808) + *(__int16 *)(a1 + 2752) + *(__int16 *)(a1 + 2976) + *(__int16 *)(a1 + 3032);
  v29 = v28 + 8 * (v28 >> 31);
  v30 = v29 + 4;
  v31 = v29 + 11;
  if (v30 >= 0)
    v31 = v30;
  *(_WORD *)(a1 + 3256) = v3 & (v31 >> 3);
  v32 = *(__int16 *)(a1 + 2810) + *(__int16 *)(a1 + 2754) + *(__int16 *)(a1 + 2978) + *(__int16 *)(a1 + 3034);
  v33 = v32 + 8 * (v32 >> 31);
  v34 = v33 + 4;
  v35 = v33 + 11;
  if (v34 >= 0)
    v35 = v34;
  *(_WORD *)(a1 + 3258) = v3 & (v35 >> 3);
  *(_DWORD *)(a1 + 3480) = *(_DWORD *)(a1 + 3256);
  v36 = *(_QWORD *)(a1 + 3616);
  v37 = (uint64_t *)(a1 + 3056);
  for (i = 14; i < 0x12; i += 2)
  {
    v39 = *((_DWORD *)v37 + 8);
    v40 = *v37;
    v41 = v36 + *((int *)v37 + 4) + ((__int16)v39 >> 3) * (int)v2 + (v39 >> 19);
    v42 = v39 & 0x70007;
    if (v39 == *((_DWORD *)v37 + 22))
    {
      if (v42)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 4032))(v41, v2, HIWORD(v39) & 7, v39 & 7, v40, 8);
      }
      else
      {
        *(_QWORD *)v40 = *(_QWORD *)v41;
        *(_QWORD *)(v40 + 8) = *(_QWORD *)(v41 + v2);
        v43 = (_QWORD *)(v41 + v2 + v2);
        *(_QWORD *)(v40 + 16) = *v43;
        *(_QWORD *)(v40 + 24) = *(_QWORD *)((char *)v43 + v2);
      }
    }
    else
    {
      if (v42)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 4024))(v41, v2, HIWORD(v39) & 7, v39 & 7, v40, 8);
      }
      else
      {
        *(_BYTE *)v40 = *(_BYTE *)v41;
        *(_BYTE *)(v40 + 1) = *(_BYTE *)(v41 + 1);
        *(_BYTE *)(v40 + 2) = *(_BYTE *)(v41 + 2);
        *(_BYTE *)(v40 + 3) = *(_BYTE *)(v41 + 3);
        *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + v2);
        *(_BYTE *)(v40 + 9) = *(_BYTE *)(v41 + v2 + 1);
        *(_BYTE *)(v40 + 10) = *(_BYTE *)(v41 + v2 + 2);
        *(_BYTE *)(v40 + 11) = *(_BYTE *)(v41 + v2 + 3);
        v44 = (_BYTE *)(v41 + v2 + v2);
        *(_BYTE *)(v40 + 16) = *v44;
        *(_BYTE *)(v40 + 17) = v44[1];
        *(_BYTE *)(v40 + 18) = v44[2];
        *(_BYTE *)(v40 + 19) = v44[3];
        v45 = &v44[v2];
        *(_BYTE *)(v40 + 24) = *v45;
        *(_BYTE *)(v40 + 25) = v45[1];
        *(_BYTE *)(v40 + 26) = v45[2];
        *(_BYTE *)(v40 + 27) = v45[3];
      }
      v46 = (_BYTE *)v37[7];
      v47 = *((__int16 *)v37 + 44);
      v48 = *((__int16 *)v37 + 45);
      v49 = (_BYTE *)(v36 + *((int *)v37 + 18) + (v47 >> 3) * (int)v2 + (v48 >> 3));
      if (((v47 | v48) & 7) != 0)
      {
        (*(void (**)(_BYTE *, uint64_t, _QWORD, _QWORD, _BYTE *, uint64_t))(a1 + 4024))(v49, v2, v48 & 7, v47 & 7, v46, 8);
      }
      else
      {
        *v46 = *v49;
        v46[1] = v49[1];
        v46[2] = v49[2];
        v46[3] = v49[3];
        v46[8] = v49[v2];
        v46[9] = v49[v2 + 1];
        v46[10] = v49[v2 + 2];
        v46[11] = v49[v2 + 3];
        v50 = &v49[v2 + v2];
        v46[16] = *v50;
        v46[17] = v50[1];
        v46[18] = v50[2];
        v46[19] = v50[3];
        v51 = &v50[v2];
        v46[24] = *v51;
        v46[25] = v51[1];
        v46[26] = v51[2];
        v46[27] = v51[3];
      }
    }
    v37 += 14;
  }
  v52 = *(_QWORD *)(a1 + 3624);
  v53 = (uint64_t *)(a1 + 3280);
  for (j = 18; j < 0x16; j += 2)
  {
    v56 = *((_DWORD *)v53 + 8);
    v57 = *v53;
    result = v52 + *((int *)v53 + 4) + ((__int16)v56 >> 3) * (int)v2 + (v56 >> 19);
    v58 = v56 & 0x70007;
    if (v56 == *((_DWORD *)v53 + 22))
    {
      if (v58)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 4032))(result, v2, HIWORD(v56) & 7, v56 & 7, v57, 8);
      }
      else
      {
        *(_QWORD *)v57 = *(_QWORD *)result;
        *(_QWORD *)(v57 + 8) = *(_QWORD *)(result + v2);
        v59 = (_QWORD *)(result + v2 + v2);
        *(_QWORD *)(v57 + 16) = *v59;
        *(_QWORD *)(v57 + 24) = *(_QWORD *)((char *)v59 + v2);
      }
    }
    else
    {
      if (v58)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 4024))(result, v2, HIWORD(v56) & 7, v56 & 7, v57, 8);
      }
      else
      {
        *(_BYTE *)v57 = *(_BYTE *)result;
        *(_BYTE *)(v57 + 1) = *(_BYTE *)(result + 1);
        *(_BYTE *)(v57 + 2) = *(_BYTE *)(result + 2);
        *(_BYTE *)(v57 + 3) = *(_BYTE *)(result + 3);
        *(_BYTE *)(v57 + 8) = *(_BYTE *)(result + v2);
        *(_BYTE *)(v57 + 9) = *(_BYTE *)(result + v2 + 1);
        *(_BYTE *)(v57 + 10) = *(_BYTE *)(result + v2 + 2);
        *(_BYTE *)(v57 + 11) = *(_BYTE *)(result + v2 + 3);
        v60 = (_BYTE *)(result + v2 + v2);
        *(_BYTE *)(v57 + 16) = *v60;
        *(_BYTE *)(v57 + 17) = v60[1];
        *(_BYTE *)(v57 + 18) = v60[2];
        *(_BYTE *)(v57 + 19) = v60[3];
        v61 = &v60[v2];
        *(_BYTE *)(v57 + 24) = *v61;
        *(_BYTE *)(v57 + 25) = v61[1];
        *(_BYTE *)(v57 + 26) = v61[2];
        *(_BYTE *)(v57 + 27) = v61[3];
      }
      v62 = (_BYTE *)v53[7];
      v63 = *((__int16 *)v53 + 44);
      v64 = *((__int16 *)v53 + 45);
      result = v52 + *((int *)v53 + 18) + (v63 >> 3) * (int)v2 + (v64 >> 3);
      if (((v63 | v64) & 7) != 0)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _BYTE *, uint64_t))(a1 + 4024))(result, v2, v64 & 7, v63 & 7, v62, 8);
      }
      else
      {
        *v62 = *(_BYTE *)result;
        v62[1] = *(_BYTE *)(result + 1);
        v62[2] = *(_BYTE *)(result + 2);
        v62[3] = *(_BYTE *)(result + 3);
        v62[8] = *(_BYTE *)(result + v2);
        v62[9] = *(_BYTE *)(result + v2 + 1);
        v62[10] = *(_BYTE *)(result + v2 + 2);
        v62[11] = *(_BYTE *)(result + v2 + 3);
        v65 = (_BYTE *)(result + v2 + v2);
        v62[16] = *v65;
        v62[17] = v65[1];
        v62[18] = v65[2];
        v62[19] = v65[3];
        v66 = &v65[v2];
        v62[24] = *v66;
        v62[25] = v66[1];
        v62[26] = v66[2];
        v62[27] = v66[3];
      }
    }
    v53 += 14;
  }
  return result;
}

double vp8_build_inter16x16_predictors_mb(uint64_t a1, _OWORD *a2, _QWORD *a3, _QWORD *a4, int a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  _OWORD *v28;
  _OWORD *v29;
  _OWORD *v30;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  _OWORD *v37;
  _OWORD *v38;
  _OWORD *v39;
  _OWORD *v40;
  _OWORD *v41;
  _OWORD *v42;
  _OWORD *v43;
  _OWORD *v44;
  _OWORD *v45;
  _OWORD *v46;
  _OWORD *v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;

  v10 = *(int *)(a1 + 3568);
  v11 = *(_QWORD *)(a1 + 3872);
  v12 = *(_DWORD *)(v11 + 4);
  v13 = HIWORD(v12);
  if (!*(_BYTE *)(v11 + 10))
    goto LABEL_12;
  v14 = *(_DWORD *)(a1 + 4004);
  if (v14 - 152 <= v12 >> 16)
  {
    v14 = *(_DWORD *)(a1 + 4008);
    if (v14 + 144 >= v12 >> 16)
      goto LABEL_7;
    v15 = 128;
  }
  else
  {
    v15 = 65408;
  }
  v13 = v15 + v14;
LABEL_7:
  v16 = *(_DWORD *)(a1 + 4012);
  if (v16 - 152 <= (__int16)v12)
  {
    v16 = *(_DWORD *)(a1 + 4016);
    if (v16 + 144 >= (__int16)v12)
      goto LABEL_12;
    v17 = 128;
  }
  else
  {
    v17 = -128;
  }
  LOWORD(v12) = v17 + v16;
LABEL_12:
  v18 = (__int16)v13;
  v19 = (_OWORD *)(*(_QWORD *)(a1 + 3608) + (int)v10 * ((__int16)v12 >> 3) + ((__int16)v13 >> 3));
  if (v12 & 7 | (v13 << 16) & 0x70007)
  {
    (*(void (**)(_OWORD *, uint64_t, _QWORD))(a1 + 4048))(v19, v10, v13 & 7);
  }
  else
  {
    *a2 = *v19;
    v21 = (_OWORD *)((char *)a2 + a5);
    *v21 = *(_OWORD *)((char *)v19 + v10);
    v22 = (_OWORD *)((char *)v19 + v10 + v10);
    v23 = (_OWORD *)((char *)v21 + a5);
    *v23 = *v22;
    v24 = (_OWORD *)((char *)v22 + v10);
    v25 = (_OWORD *)((char *)v23 + a5);
    *v25 = *v24;
    v26 = (_OWORD *)((char *)v24 + v10);
    v27 = (_OWORD *)((char *)v25 + a5);
    *v27 = *v26;
    v28 = (_OWORD *)((char *)v26 + v10);
    v29 = (_OWORD *)((char *)v27 + a5);
    *v29 = *v28;
    v30 = (_OWORD *)((char *)v28 + v10);
    v31 = (_OWORD *)((char *)v29 + a5);
    *v31 = *v30;
    v32 = (_OWORD *)((char *)v30 + v10);
    v33 = (_OWORD *)((char *)v31 + a5);
    *v33 = *v32;
    v34 = (_OWORD *)((char *)v32 + v10);
    v35 = (_OWORD *)((char *)v33 + a5);
    *v35 = *v34;
    v36 = (_OWORD *)((char *)v34 + v10);
    v37 = (_OWORD *)((char *)v35 + a5);
    *v37 = *v36;
    v38 = (_OWORD *)((char *)v36 + v10);
    v39 = (_OWORD *)((char *)v37 + a5);
    *v39 = *v38;
    v40 = (_OWORD *)((char *)v38 + v10);
    v41 = (_OWORD *)((char *)v39 + a5);
    *v41 = *v40;
    v42 = (_OWORD *)((char *)v40 + v10);
    v43 = (_OWORD *)((char *)v41 + a5);
    *v43 = *v42;
    v44 = (_OWORD *)((char *)v42 + v10);
    v45 = (_OWORD *)((char *)v43 + a5);
    *v45 = *v44;
    v46 = (_OWORD *)((char *)v44 + v10);
    v47 = (_OWORD *)((char *)v45 + a5);
    *v47 = *v46;
    v20 = *(_OWORD *)((char *)v46 + v10);
    *(_OWORD *)((char *)v47 + a5) = v20;
  }
  v48 = *(unsigned __int16 *)(a1 + 3544);
  v49 = v48 & ((__int16)(((v18 >> 15) | 1)
                                     + v18
                                     + ((unsigned __int16)((((v18 >> 15) | 1) + v18) & 0x8000) >> 15)) >> 1);
  v50 = 2
      * (__int16)(v48 & ((__int16)(((v18 >> 15) | 1)
                                               + v18
                                               + ((unsigned __int16)((((v18 >> 15) | 1) + v18) & 0x8000) >> 15)) >> 1));
  if (v50 >= *(_DWORD *)(a1 + 4004) - 152 && v50 <= *(_DWORD *)(a1 + 4008) + 144)
  {
    v51 = v48 & ((__int16)((((__int16)v12 >> 15) | 1)
                         + v12
                         + ((unsigned __int16)(((((__int16)v12 >> 15) | 1) + v12) & 0x8000) >> 15)) >> 1);
    v52 = 2 * (__int16)v51;
    if (v52 >= *(_DWORD *)(a1 + 4012) - 152 && v52 <= *(_DWORD *)(a1 + 4016) + 144)
    {
      v53 = ((int)v10 >> 1);
      v54 = ((__int16)v51 >> 3) * (int)v53 + ((__int16)v49 >> 3);
      v55 = (_QWORD *)(*(_QWORD *)(a1 + 3616) + v54);
      v56 = (_QWORD *)(*(_QWORD *)(a1 + 3624) + v54);
      if (v51 & 7 | ((unsigned __int16)v49 << 16) & 0x70007)
      {
        v57 = v49 & 7;
        v58 = v51 & 7;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))(a1 + 4040))(v55, v53, v57, v58, a3, a6);
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))(a1 + 4040))(v56, v53, v57, v58, a4, a6);
      }
      else
      {
        *a3 = *v55;
        v59 = (_QWORD *)((char *)v55 + (int)v53);
        v60 = (_QWORD *)((char *)a3 + (int)a6);
        *v60 = *v59;
        v61 = (_QWORD *)((char *)v59 + (int)v53);
        v62 = (_QWORD *)((char *)v60 + (int)a6);
        *v62 = *v61;
        v63 = (_QWORD *)((char *)v61 + (int)v53);
        v64 = (_QWORD *)((char *)v62 + (int)a6);
        *v64 = *v63;
        v65 = (_QWORD *)((char *)v63 + (int)v53);
        v66 = (_QWORD *)((char *)v64 + (int)a6);
        *v66 = *v65;
        v67 = (_QWORD *)((char *)v65 + (int)v53);
        v68 = (_QWORD *)((char *)v66 + (int)a6);
        *v68 = *v67;
        v69 = (_QWORD *)((char *)v67 + (int)v53);
        v70 = (_QWORD *)((char *)v68 + (int)a6);
        *v70 = *v69;
        *(_QWORD *)((char *)v70 + (int)a6) = *(_QWORD *)((char *)v69 + (int)v53);
        *a4 = *v56;
        v71 = (_QWORD *)((char *)v56 + (int)v53);
        v72 = (_QWORD *)((char *)a4 + (int)a6);
        *v72 = *v71;
        v73 = (_QWORD *)((char *)v71 + (int)v53);
        v74 = (_QWORD *)((char *)v72 + (int)a6);
        *v74 = *v73;
        v75 = (_QWORD *)((char *)v73 + (int)v53);
        v76 = (_QWORD *)((char *)v74 + (int)a6);
        *v76 = *v75;
        v77 = (_QWORD *)((char *)v75 + (int)v53);
        v78 = (_QWORD *)((char *)v76 + (int)a6);
        *v78 = *v77;
        v79 = (_QWORD *)((char *)v77 + (int)v53);
        v80 = (_QWORD *)((char *)v78 + (int)a6);
        *v80 = *v79;
        v81 = (_QWORD *)((char *)v79 + (int)v53);
        v82 = (_QWORD *)((char *)v80 + (int)a6);
        *v82 = *v81;
        *(_QWORD *)&v20 = *(_QWORD *)((char *)v81 + (int)v53);
        *(_QWORD *)((char *)v82 + (int)a6) = v20;
      }
    }
  }
  return *(double *)&v20;
}

void vp8_build_inter_predictors_mb(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  __int16 v89;
  int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  __int16 v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  __int16 v113;
  int v114;
  int v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  __int16 v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _QWORD *v126;
  _QWORD *v127;
  _BYTE *v128;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  _BYTE *v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  _BYTE *v139;
  _BYTE *v140;
  _BYTE *v141;
  _BYTE *v142;
  _BYTE *v143;
  _BYTE *v144;
  int v145;
  int v146;
  __int16 v147;
  int v148;
  __int16 v149;
  int v150;
  int v151;
  __int16 v152;
  int v153;
  __int16 v154;
  int v155;
  int v156;
  __int16 v157;
  int v158;
  __int16 v159;
  __int16 v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  int v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  _QWORD *v233;
  _QWORD *v234;
  _BYTE *v235;
  _BYTE *v236;
  _BYTE *v237;
  _BYTE *v238;
  _BYTE *v239;
  uint64_t v240;
  _BYTE *v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int v245;
  _BYTE *v246;
  _BYTE *v247;
  _BYTE *v248;
  _BYTE *v249;
  _BYTE *v250;
  _BYTE *v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  _QWORD *v258;
  _QWORD *v259;
  _BYTE *v260;
  _BYTE *v261;
  _BYTE *v262;
  _BYTE *v263;
  _BYTE *v264;
  uint64_t v265;
  _BYTE *v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  int v270;
  _BYTE *v271;
  _BYTE *v272;
  _BYTE *v273;
  _BYTE *v274;
  _BYTE *v275;
  _BYTE *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  _QWORD *v285;
  _QWORD *v286;
  _BYTE *v287;
  _BYTE *v288;
  _BYTE *v289;
  _BYTE *v290;
  _BYTE *v291;
  uint64_t v292;
  _BYTE *v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  int v297;
  _BYTE *v298;
  _BYTE *v299;
  _BYTE *v300;
  _BYTE *v301;
  _BYTE *v302;
  _BYTE *v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  _QWORD *v310;
  _QWORD *v311;
  _BYTE *v312;
  _BYTE *v313;
  _BYTE *v314;
  _BYTE *v315;
  _BYTE *v316;
  uint64_t v317;
  _BYTE *v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  int v322;
  _BYTE *v323;
  _BYTE *v324;
  _BYTE *v325;
  _BYTE *v326;
  _BYTE *v327;
  _BYTE *v328;

  v2 = *(_QWORD *)(a1 + 3872);
  if (*(_BYTE *)v2 != 9)
  {
    vp8_build_inter16x16_predictors_mb(a1, *(_OWORD **)(a1 + 3768), *(_QWORD **)(a1 + 3776), *(_QWORD **)(a1 + 3784), *(_DWORD *)(a1 + 3728), *(unsigned int *)(a1 + 3748));
    return;
  }
  v3 = *(_DWORD *)(a1 + 3544);
  v4 = *(__int16 *)(v2 + 16) + *(__int16 *)(v2 + 12) + *(__int16 *)(v2 + 28) + *(__int16 *)(v2 + 32);
  v5 = v4 + 8 * (v4 >> 31);
  v6 = v5 + 4;
  v7 = v5 + 11;
  if (v6 >= 0)
    v7 = v6;
  v8 = v3 & (v7 >> 3);
  *(_WORD *)(a1 + 3088) = v8;
  v9 = *(__int16 *)(v2 + 18) + *(__int16 *)(v2 + 14) + *(__int16 *)(v2 + 30) + *(__int16 *)(v2 + 34);
  v10 = v9 + 8 * (v9 >> 31);
  v11 = v10 + 4;
  v12 = v10 + 11;
  if (v11 >= 0)
    v12 = v11;
  v13 = v3 & (v12 >> 3);
  *(_WORD *)(a1 + 3090) = v13;
  if (*(_BYTE *)(v2 + 10))
  {
    v14 = *(_DWORD *)(a1 + 4004);
    v15 = v14 - 152;
    v16 = (v14 + 130944) >> 1;
    if (v15 > 2 * (__int16)v13)
      LOWORD(v13) = v16;
    v17 = *(_DWORD *)(a1 + 4008);
    v18 = v17 + 144;
    v19 = (v17 + 128) >> 1;
    if (v18 < 2 * (__int16)v13)
      LOWORD(v13) = v19;
    *(_WORD *)(a1 + 3090) = v13;
    v20 = *(_DWORD *)(a1 + 4012);
    v21 = v20 - 152;
    v22 = (v20 + 130944) >> 1;
    if (v21 > 2 * (__int16)v8)
      LOWORD(v8) = v22;
    v23 = *(_DWORD *)(a1 + 4016);
    v24 = v23 + 144;
    v25 = (v23 + 128) >> 1;
    if (v24 < 2 * (__int16)v8)
      LOWORD(v8) = v25;
    *(_WORD *)(a1 + 3088) = v8;
  }
  *(_DWORD *)(a1 + 3312) = *(_DWORD *)(a1 + 3088);
  v26 = *(__int16 *)(v2 + 24) + *(__int16 *)(v2 + 20) + *(__int16 *)(v2 + 36) + *(__int16 *)(v2 + 40);
  v27 = v26 + 8 * (v26 >> 31);
  v28 = v27 + 4;
  v29 = v27 + 11;
  if (v28 >= 0)
    v29 = v28;
  v30 = v3 & (v29 >> 3);
  *(_WORD *)(a1 + 3144) = v30;
  v31 = *(__int16 *)(v2 + 26) + *(__int16 *)(v2 + 22) + *(__int16 *)(v2 + 38) + *(__int16 *)(v2 + 42);
  v32 = v31 + 8 * (v31 >> 31);
  v33 = v32 + 4;
  v34 = v32 + 11;
  if (v33 >= 0)
    v34 = v33;
  v35 = v3 & (v34 >> 3);
  *(_WORD *)(a1 + 3146) = v35;
  if (*(_BYTE *)(v2 + 10))
  {
    v36 = *(_DWORD *)(a1 + 4004);
    v37 = v36 - 152;
    v38 = (v36 + 130944) >> 1;
    if (v37 > 2 * (__int16)v35)
      LOWORD(v35) = v38;
    v39 = *(_DWORD *)(a1 + 4008);
    v40 = v39 + 144;
    v41 = (v39 + 128) >> 1;
    if (v40 < 2 * (__int16)v35)
      LOWORD(v35) = v41;
    *(_WORD *)(a1 + 3146) = v35;
    v42 = *(_DWORD *)(a1 + 4012);
    v43 = v42 - 152;
    v44 = (v42 + 130944) >> 1;
    if (v43 > 2 * (__int16)v30)
      LOWORD(v30) = v44;
    v45 = *(_DWORD *)(a1 + 4016);
    v46 = v45 + 144;
    v47 = (v45 + 128) >> 1;
    if (v46 < 2 * (__int16)v30)
      LOWORD(v30) = v47;
    *(_WORD *)(a1 + 3144) = v30;
  }
  *(_DWORD *)(a1 + 3368) = *(_DWORD *)(a1 + 3144);
  v48 = *(__int16 *)(v2 + 48) + *(__int16 *)(v2 + 44) + *(__int16 *)(v2 + 60) + *(__int16 *)(v2 + 64);
  v49 = v48 + 8 * (v48 >> 31);
  v50 = v49 + 4;
  v51 = v49 + 11;
  if (v50 >= 0)
    v51 = v50;
  v52 = v3 & (v51 >> 3);
  *(_WORD *)(a1 + 3200) = v52;
  v53 = *(__int16 *)(v2 + 50) + *(__int16 *)(v2 + 46) + *(__int16 *)(v2 + 62) + *(__int16 *)(v2 + 66);
  v54 = v53 + 8 * (v53 >> 31);
  v55 = v54 + 4;
  v56 = v54 + 11;
  if (v55 >= 0)
    v56 = v55;
  v57 = v3 & (v56 >> 3);
  *(_WORD *)(a1 + 3202) = v57;
  if (*(_BYTE *)(v2 + 10))
  {
    v58 = *(_DWORD *)(a1 + 4004);
    v59 = v58 - 152;
    v60 = (v58 + 130944) >> 1;
    if (v59 > 2 * (__int16)v57)
      LOWORD(v57) = v60;
    v61 = *(_DWORD *)(a1 + 4008);
    v62 = v61 + 144;
    v63 = (v61 + 128) >> 1;
    if (v62 < 2 * (__int16)v57)
      LOWORD(v57) = v63;
    *(_WORD *)(a1 + 3202) = v57;
    v64 = *(_DWORD *)(a1 + 4012);
    v65 = v64 - 152;
    v66 = (v64 + 130944) >> 1;
    if (v65 > 2 * (__int16)v52)
      LOWORD(v52) = v66;
    v67 = *(_DWORD *)(a1 + 4016);
    v68 = v67 + 144;
    v69 = (v67 + 128) >> 1;
    if (v68 < 2 * (__int16)v52)
      LOWORD(v52) = v69;
    *(_WORD *)(a1 + 3200) = v52;
  }
  *(_DWORD *)(a1 + 3424) = *(_DWORD *)(a1 + 3200);
  v70 = *(__int16 *)(v2 + 56) + *(__int16 *)(v2 + 52) + *(__int16 *)(v2 + 68) + *(__int16 *)(v2 + 72);
  v71 = v70 + 8 * (v70 >> 31);
  v72 = v71 + 4;
  v73 = v71 + 11;
  if (v72 >= 0)
    v73 = v72;
  v74 = v3 & (v73 >> 3);
  *(_WORD *)(a1 + 3256) = v74;
  v75 = *(__int16 *)(v2 + 58) + *(__int16 *)(v2 + 54) + *(__int16 *)(v2 + 70) + *(__int16 *)(v2 + 74);
  v76 = v75 + 8 * (v75 >> 31);
  v77 = v76 + 4;
  v78 = v76 + 11;
  if (v77 >= 0)
    v78 = v77;
  v79 = v3 & (v78 >> 3);
  *(_WORD *)(a1 + 3258) = v79;
  if (*(_BYTE *)(v2 + 10))
  {
    v80 = *(_DWORD *)(a1 + 4004);
    v81 = v80 - 152;
    v82 = (v80 + 130944) >> 1;
    if (v81 > 2 * (__int16)v79)
      LOWORD(v79) = v82;
    v83 = *(_DWORD *)(a1 + 4008);
    v84 = v83 + 144;
    v85 = (v83 + 128) >> 1;
    if (v84 < 2 * (__int16)v79)
      LOWORD(v79) = v85;
    *(_WORD *)(a1 + 3258) = v79;
    v86 = *(_DWORD *)(a1 + 4012);
    v87 = v86 - 152;
    v88 = (v86 + 130944) >> 1;
    if (v87 <= 2 * (__int16)v74)
      v89 = v74;
    else
      v89 = v88;
    v90 = *(_DWORD *)(a1 + 4016);
    v91 = v90 + 144;
    v92 = (v90 + 128) >> 1;
    if (v91 < 2 * v89)
      v89 = v92;
    *(_WORD *)(a1 + 3256) = v89;
  }
  *(_DWORD *)(a1 + 3480) = *(_DWORD *)(a1 + 3256);
  v93 = *(_QWORD *)(a1 + 3768);
  v94 = *(_QWORD *)(a1 + 3608);
  if (*(unsigned __int8 *)(v2 + 8) >= 3u)
  {
    v106 = 0;
    v107 = a1;
    while (1)
    {
      v109 = *(int *)(a1 + 3728);
      v110 = *(_DWORD *)(*(_QWORD *)(a1 + 3872) + 4 * v106 + 12);
      *(_DWORD *)(v107 + 2192) = v110;
      v111 = *(_DWORD *)(*(_QWORD *)(a1 + 3872) + 4 * v106 + 16);
      *(_DWORD *)(v107 + 2248) = v111;
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 3872) + 10))
        goto LABEL_88;
      v112 = *(_DWORD *)(a1 + 4004);
      if (v112 - 152 <= v110 >> 16)
      {
        v114 = *(_DWORD *)(a1 + 4008);
        if (v114 + 144 >= v110 >> 16)
          goto LABEL_73;
        v113 = 128;
      }
      else
      {
        v113 = -128;
        v114 = *(_DWORD *)(a1 + 4004);
      }
      *(_WORD *)(v107 + 2194) = v113 + v114;
LABEL_73:
      v115 = (__int16)v110;
      v116 = *(_DWORD *)(a1 + 4012);
      if (v116 - 152 <= v115)
      {
        v118 = *(_DWORD *)(a1 + 4016);
        if (v118 + 144 >= v115)
          goto LABEL_78;
        v117 = 128;
      }
      else
      {
        v117 = -128;
        v118 = *(_DWORD *)(a1 + 4012);
      }
      *(_WORD *)(v107 + 2192) = v117 + v118;
LABEL_78:
      if (v112 - 152 > v111 >> 16)
      {
        v119 = -128;
LABEL_82:
        *(_WORD *)(v107 + 2250) = v119 + v112;
        goto LABEL_83;
      }
      v112 = *(_DWORD *)(a1 + 4008);
      if (v112 + 144 < v111 >> 16)
      {
        v119 = 128;
        goto LABEL_82;
      }
LABEL_83:
      v111 = (__int16)v111;
      if (v116 - 152 > (__int16)v111)
      {
        v120 = -128;
LABEL_87:
        *(_WORD *)(v107 + 2248) = v120 + v116;
        goto LABEL_88;
      }
      v116 = *(_DWORD *)(a1 + 4016);
      if (v116 + 144 < v111)
      {
        v120 = 128;
        goto LABEL_87;
      }
LABEL_88:
      v121 = *(_DWORD *)(v107 + 2192);
      v122 = *(int *)(v107 + 2176);
      v123 = v93 + v122;
      v124 = v94 + v122 + ((__int16)v121 >> 3) * (int)v109 + (v121 >> 19);
      v125 = v121 & 0x70007;
      if (v121 == *(_DWORD *)(v107 + 2248))
      {
        if (v125)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 4032))(v124, v109, HIWORD(v121) & 7, v121 & 7, v123, v109);
        }
        else
        {
          *(_QWORD *)v123 = *(_QWORD *)v124;
          *(_QWORD *)(v123 + v109) = *(_QWORD *)(v124 + v109);
          v126 = (_QWORD *)(v124 + v109 + v109);
          v127 = (_QWORD *)(v123 + v109 + v109);
          *v127 = *v126;
          *(_QWORD *)((char *)v127 + v109) = *(_QWORD *)((char *)v126 + v109);
        }
      }
      else
      {
        if (v125)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 4024))(v124, v109, HIWORD(v121) & 7, v121 & 7, v123, v109);
        }
        else
        {
          *(_BYTE *)v123 = *(_BYTE *)v124;
          *(_BYTE *)(v123 + 1) = *(_BYTE *)(v124 + 1);
          *(_BYTE *)(v123 + 2) = *(_BYTE *)(v124 + 2);
          *(_BYTE *)(v123 + 3) = *(_BYTE *)(v124 + 3);
          v128 = (_BYTE *)(v123 + v109);
          *v128 = *(_BYTE *)(v124 + v109);
          v128[1] = *(_BYTE *)(v124 + v109 + 1);
          v128[2] = *(_BYTE *)(v124 + v109 + 2);
          v128[3] = *(_BYTE *)(v124 + v109 + 3);
          v129 = (_BYTE *)(v123 + v109 + v109);
          v130 = (_BYTE *)(v124 + v109 + v109);
          *v129 = *v130;
          v129[1] = v130[1];
          v129[2] = v130[2];
          v129[3] = v130[3];
          v131 = &v129[v109];
          v132 = &v130[v109];
          *v131 = *v132;
          v131[1] = v132[1];
          v131[2] = v132[2];
          v131[3] = v132[3];
        }
        v133 = *(int *)(v107 + 2232);
        v134 = (_BYTE *)(v93 + v133);
        v135 = v94 + v133;
        v136 = *(__int16 *)(v107 + 2248);
        v137 = v135 + (v136 >> 3) * (int)v109;
        v138 = *(__int16 *)(v107 + 2250);
        v139 = (_BYTE *)(v137 + (v138 >> 3));
        if (((v136 | v138) & 7) != 0)
        {
          (*(void (**)(_BYTE *, uint64_t, _QWORD, _QWORD, _BYTE *, uint64_t))(a1 + 4024))(v139, v109, v138 & 7, v136 & 7, v134, v109);
        }
        else
        {
          *v134 = *v139;
          v134[1] = v139[1];
          v134[2] = v139[2];
          v134[3] = v139[3];
          v140 = &v134[v109];
          *v140 = v139[v109];
          v140[1] = v139[v109 + 1];
          v140[2] = v139[v109 + 2];
          v140[3] = v139[v109 + 3];
          v141 = &v134[v109 + v109];
          v142 = &v139[v109 + v109];
          *v141 = *v142;
          v141[1] = v142[1];
          v141[2] = v142[2];
          v141[3] = v142[3];
          v143 = &v141[v109];
          v144 = &v142[v109];
          *v143 = *v144;
          v143[1] = v144[1];
          v143[2] = v144[2];
          v143[3] = v144[3];
        }
      }
      v107 += 112;
      v108 = v106 >= 0xE;
      v106 += 2;
      if (v108)
        goto LABEL_147;
    }
  }
  v95 = *(int *)(a1 + 3728);
  v96 = *(_DWORD *)(v2 + 12);
  *(_DWORD *)(a1 + 2192) = v96;
  v97 = *(_DWORD *)(v2 + 20);
  *(_DWORD *)(a1 + 2304) = v97;
  v98 = *(_DWORD *)(v2 + 44);
  *(_DWORD *)(a1 + 2640) = v98;
  v99 = *(_DWORD *)(v2 + 52);
  *(_DWORD *)(a1 + 2752) = v99;
  v100 = *(unsigned __int8 *)(v2 + 10);
  v101 = HIWORD(v96);
  if (!v100)
    goto LABEL_135;
  v102 = *(_DWORD *)(a1 + 4004);
  v103 = v102 - 152;
  if (v102 - 152 <= v96 >> 16)
  {
    v105 = *(_DWORD *)(a1 + 4008);
    if (v105 + 144 >= v96 >> 16)
      goto LABEL_100;
    v104 = 128;
  }
  else
  {
    v104 = -128;
    v105 = *(_DWORD *)(a1 + 4004);
  }
  LOWORD(v101) = v104 + v105;
  *(_WORD *)(a1 + 2194) = v101;
LABEL_100:
  v145 = *(_DWORD *)(a1 + 4012);
  v146 = v145 - 152;
  if (v145 - 152 <= (__int16)v96)
  {
    v148 = *(_DWORD *)(a1 + 4016);
    if (v148 + 144 >= (__int16)v96)
      goto LABEL_105;
    v147 = 128;
  }
  else
  {
    v147 = -128;
    v148 = *(_DWORD *)(a1 + 4012);
  }
  LOWORD(v96) = v147 + v148;
  *(_WORD *)(a1 + 2192) = v96;
LABEL_105:
  if (v103 <= v97 >> 16)
  {
    v150 = *(_DWORD *)(a1 + 4008);
    if (v150 + 144 >= v97 >> 16)
      goto LABEL_110;
    v149 = 128;
  }
  else
  {
    v149 = -128;
    LOWORD(v150) = v102;
  }
  *(_WORD *)(a1 + 2306) = v149 + v150;
LABEL_110:
  v151 = (__int16)v97;
  if (v146 <= (__int16)v97)
  {
    v153 = *(_DWORD *)(a1 + 4016);
    if (v153 + 144 >= v151)
      goto LABEL_115;
    v152 = 128;
  }
  else
  {
    v152 = -128;
    LOWORD(v153) = v145;
  }
  *(_WORD *)(a1 + 2304) = v152 + v153;
LABEL_115:
  if (v103 <= v98 >> 16)
  {
    v155 = *(_DWORD *)(a1 + 4008);
    if (v155 + 144 >= v98 >> 16)
      goto LABEL_120;
    v154 = 128;
  }
  else
  {
    v154 = -128;
    LOWORD(v155) = v102;
  }
  *(_WORD *)(a1 + 2642) = v154 + v155;
LABEL_120:
  v156 = (__int16)v98;
  if (v146 <= (__int16)v98)
  {
    v158 = *(_DWORD *)(a1 + 4016);
    if (v158 + 144 >= v156)
      goto LABEL_125;
    v157 = 128;
  }
  else
  {
    v157 = -128;
    LOWORD(v158) = v145;
  }
  *(_WORD *)(a1 + 2640) = v157 + v158;
LABEL_125:
  if (v103 <= v99 >> 16)
  {
    v102 = *(_DWORD *)(a1 + 4008);
    if (v102 + 144 >= v99 >> 16)
      goto LABEL_130;
    v159 = 128;
  }
  else
  {
    v159 = -128;
  }
  *(_WORD *)(a1 + 2754) = v159 + v102;
LABEL_130:
  if (v146 <= (__int16)v99)
  {
    v145 = *(_DWORD *)(a1 + 4016);
    if (v145 + 144 >= (__int16)v99)
      goto LABEL_135;
    v160 = 128;
  }
  else
  {
    v160 = -128;
  }
  *(_WORD *)(a1 + 2752) = v160 + v145;
LABEL_135:
  v161 = *(int *)(a1 + 2176);
  v162 = (_QWORD *)(v93 + v161);
  v163 = (_QWORD *)(v94 + v161 + ((__int16)v96 >> 3) * (int)v95 + ((__int16)v101 >> 3));
  if (((v96 | v101) & 7) != 0)
  {
    (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD *, uint64_t))(a1 + 4040))(v163, v95, v101 & 7, v96 & 7, v162, v95);
  }
  else
  {
    *v162 = *v163;
    *(_QWORD *)((char *)v162 + v95) = *(_QWORD *)((char *)v163 + v95);
    v164 = (_QWORD *)((char *)v163 + v95 + v95);
    v165 = (_QWORD *)((char *)v162 + v95 + v95);
    *v165 = *v164;
    v166 = (_QWORD *)((char *)v164 + v95);
    v167 = (_QWORD *)((char *)v165 + v95);
    *v167 = *v166;
    v168 = (_QWORD *)((char *)v166 + v95);
    v169 = (_QWORD *)((char *)v167 + v95);
    *v169 = *v168;
    v170 = (_QWORD *)((char *)v168 + v95);
    v171 = (_QWORD *)((char *)v169 + v95);
    *v171 = *v170;
    v172 = (_QWORD *)((char *)v170 + v95);
    v173 = (_QWORD *)((char *)v171 + v95);
    *v173 = *v172;
    *(_QWORD *)((char *)v173 + v95) = *(_QWORD *)((char *)v172 + v95);
  }
  v174 = *(int *)(a1 + 2288);
  v175 = (_QWORD *)(v93 + v174);
  v176 = v94 + v174;
  v177 = *(__int16 *)(a1 + 2304);
  v178 = v176 + (v177 >> 3) * (int)v95;
  v179 = *(__int16 *)(a1 + 2306);
  v180 = (_QWORD *)(v178 + (v179 >> 3));
  if (((v177 | v179) & 7) != 0)
  {
    (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD *, uint64_t))(a1 + 4040))(v180, v95, v179 & 7, v177 & 7, v175, v95);
  }
  else
  {
    *v175 = *v180;
    *(_QWORD *)((char *)v175 + v95) = *(_QWORD *)((char *)v180 + v95);
    v181 = (_QWORD *)((char *)v180 + v95 + v95);
    v182 = (_QWORD *)((char *)v175 + v95 + v95);
    *v182 = *v181;
    v183 = (_QWORD *)((char *)v181 + v95);
    v184 = (_QWORD *)((char *)v182 + v95);
    *v184 = *v183;
    v185 = (_QWORD *)((char *)v183 + v95);
    v186 = (_QWORD *)((char *)v184 + v95);
    *v186 = *v185;
    v187 = (_QWORD *)((char *)v185 + v95);
    v188 = (_QWORD *)((char *)v186 + v95);
    *v188 = *v187;
    v189 = (_QWORD *)((char *)v187 + v95);
    v190 = (_QWORD *)((char *)v188 + v95);
    *v190 = *v189;
    *(_QWORD *)((char *)v190 + v95) = *(_QWORD *)((char *)v189 + v95);
  }
  v191 = *(int *)(a1 + 2624);
  v192 = (_QWORD *)(v93 + v191);
  v193 = v94 + v191;
  v194 = *(__int16 *)(a1 + 2640);
  v195 = v193 + (v194 >> 3) * (int)v95;
  v196 = *(__int16 *)(a1 + 2642);
  v197 = (_QWORD *)(v195 + (v196 >> 3));
  if (((v194 | v196) & 7) != 0)
  {
    (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD *, uint64_t))(a1 + 4040))(v197, v95, v196 & 7, v194 & 7, v192, v95);
  }
  else
  {
    *v192 = *v197;
    *(_QWORD *)((char *)v192 + v95) = *(_QWORD *)((char *)v197 + v95);
    v198 = (_QWORD *)((char *)v197 + v95 + v95);
    v199 = (_QWORD *)((char *)v192 + v95 + v95);
    *v199 = *v198;
    v200 = (_QWORD *)((char *)v198 + v95);
    v201 = (_QWORD *)((char *)v199 + v95);
    *v201 = *v200;
    v202 = (_QWORD *)((char *)v200 + v95);
    v203 = (_QWORD *)((char *)v201 + v95);
    *v203 = *v202;
    v204 = (_QWORD *)((char *)v202 + v95);
    v205 = (_QWORD *)((char *)v203 + v95);
    *v205 = *v204;
    v206 = (_QWORD *)((char *)v204 + v95);
    v207 = (_QWORD *)((char *)v205 + v95);
    *v207 = *v206;
    *(_QWORD *)((char *)v207 + v95) = *(_QWORD *)((char *)v206 + v95);
  }
  v208 = *(int *)(a1 + 2736);
  v209 = (_QWORD *)(v93 + v208);
  v210 = v94 + v208;
  v211 = *(__int16 *)(a1 + 2752);
  v212 = v210 + (v211 >> 3) * (int)v95;
  v213 = *(__int16 *)(a1 + 2754);
  v214 = (_QWORD *)(v212 + (v213 >> 3));
  if (((v211 | v213) & 7) != 0)
  {
    (*(void (**)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD *, uint64_t))(a1 + 4040))(v214, v95, v213 & 7, v211 & 7, v209, v95);
  }
  else
  {
    *v209 = *v214;
    *(_QWORD *)((char *)v209 + v95) = *(_QWORD *)((char *)v214 + v95);
    v215 = (_QWORD *)((char *)v214 + v95 + v95);
    v216 = (_QWORD *)((char *)v209 + v95 + v95);
    *v216 = *v215;
    v217 = (_QWORD *)((char *)v215 + v95);
    v218 = (_QWORD *)((char *)v216 + v95);
    *v218 = *v217;
    v219 = (_QWORD *)((char *)v217 + v95);
    v220 = (_QWORD *)((char *)v218 + v95);
    *v220 = *v219;
    v221 = (_QWORD *)((char *)v219 + v95);
    v222 = (_QWORD *)((char *)v220 + v95);
    *v222 = *v221;
    v223 = (_QWORD *)((char *)v221 + v95);
    v224 = (_QWORD *)((char *)v222 + v95);
    *v224 = *v223;
    *(_QWORD *)((char *)v224 + v95) = *(_QWORD *)((char *)v223 + v95);
  }
LABEL_147:
  v225 = *(_QWORD *)(a1 + 3776);
  v226 = *(_QWORD *)(a1 + 3616);
  v227 = *(int *)(a1 + 3748);
  v228 = *(_DWORD *)(a1 + 3088);
  v229 = *(int *)(a1 + 3072);
  v230 = v225 + v229;
  v231 = v226 + v229 + (int)v227 * (uint64_t)((__int16)v228 >> 3) + (v228 >> 19);
  v232 = v228 & 0x70007;
  if (v228 == *(_DWORD *)(a1 + 3144))
  {
    if (v232)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(a1 + 4032))(v231, *(int *)(a1 + 3748), HIWORD(v228) & 7, v228 & 7, v230, *(int *)(a1 + 3748));
    }
    else
    {
      *(_QWORD *)v230 = *(_QWORD *)v231;
      *(_QWORD *)(v230 + v227) = *(_QWORD *)(v231 + v227);
      v233 = (_QWORD *)(v231 + v227 + v227);
      v234 = (_QWORD *)(v230 + v227 + v227);
      *v234 = *v233;
      *(_QWORD *)((char *)v234 + v227) = *(_QWORD *)((char *)v233 + v227);
    }
  }
  else
  {
    if (v232)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(a1 + 4024))(v231, *(int *)(a1 + 3748), HIWORD(v228) & 7, v228 & 7, v230, *(int *)(a1 + 3748));
    }
    else
    {
      *(_BYTE *)v230 = *(_BYTE *)v231;
      *(_BYTE *)(v230 + 1) = *(_BYTE *)(v231 + 1);
      *(_BYTE *)(v230 + 2) = *(_BYTE *)(v231 + 2);
      *(_BYTE *)(v230 + 3) = *(_BYTE *)(v231 + 3);
      v235 = (_BYTE *)(v230 + v227);
      *v235 = *(_BYTE *)(v231 + v227);
      v235[1] = *(_BYTE *)(v231 + v227 + 1);
      v235[2] = *(_BYTE *)(v231 + v227 + 2);
      v235[3] = *(_BYTE *)(v231 + v227 + 3);
      v236 = (_BYTE *)(v230 + v227 + v227);
      v237 = (_BYTE *)(v231 + v227 + v227);
      *v236 = *v237;
      v236[1] = v237[1];
      v236[2] = v237[2];
      v236[3] = v237[3];
      v238 = &v236[v227];
      v239 = &v237[v227];
      *v238 = *v239;
      v238[1] = v239[1];
      v238[2] = v239[2];
      v238[3] = v239[3];
    }
    v240 = *(int *)(a1 + 3128);
    v241 = (_BYTE *)(v225 + v240);
    v242 = v226 + v240;
    v243 = *(__int16 *)(a1 + 3144);
    v244 = v242 + (v243 >> 3) * (int)v227;
    v245 = *(__int16 *)(a1 + 3146);
    v246 = (_BYTE *)(v244 + (v245 >> 3));
    if (((v243 | v245) & 7) != 0)
    {
      (*(void (**)(_BYTE *, uint64_t, _QWORD, _QWORD, _BYTE *, uint64_t))(a1 + 4024))(v246, v227, v245 & 7, v243 & 7, v241, v227);
    }
    else
    {
      *v241 = *v246;
      v241[1] = v246[1];
      v241[2] = v246[2];
      v241[3] = v246[3];
      v247 = &v241[v227];
      *v247 = v246[v227];
      v247[1] = v246[v227 + 1];
      v247[2] = v246[v227 + 2];
      v247[3] = v246[v227 + 3];
      v248 = &v241[v227 + v227];
      v249 = &v246[v227 + v227];
      *v248 = *v249;
      v248[1] = v249[1];
      v248[2] = v249[2];
      v248[3] = v249[3];
      v250 = &v248[v227];
      v251 = &v249[v227];
      *v250 = *v251;
      v250[1] = v251[1];
      v250[2] = v251[2];
      v250[3] = v251[3];
    }
  }
  v252 = *(int *)(a1 + 3748);
  v253 = *(_DWORD *)(a1 + 3200);
  v254 = *(int *)(a1 + 3184);
  v255 = v225 + v254;
  v256 = v226 + v254 + (int)v252 * (uint64_t)((__int16)v253 >> 3) + (v253 >> 19);
  v257 = v253 & 0x70007;
  if (v253 == *(_DWORD *)(a1 + 3256))
  {
    if (v257)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(a1 + 4032))(v256, *(int *)(a1 + 3748), HIWORD(v253) & 7, v253 & 7, v255, *(int *)(a1 + 3748));
    }
    else
    {
      *(_QWORD *)v255 = *(_QWORD *)v256;
      *(_QWORD *)(v255 + v252) = *(_QWORD *)(v256 + v252);
      v258 = (_QWORD *)(v256 + v252 + v252);
      v259 = (_QWORD *)(v255 + v252 + v252);
      *v259 = *v258;
      *(_QWORD *)((char *)v259 + v252) = *(_QWORD *)((char *)v258 + v252);
    }
  }
  else
  {
    if (v257)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(a1 + 4024))(v256, *(int *)(a1 + 3748), HIWORD(v253) & 7, v253 & 7, v255, *(int *)(a1 + 3748));
    }
    else
    {
      *(_BYTE *)v255 = *(_BYTE *)v256;
      *(_BYTE *)(v255 + 1) = *(_BYTE *)(v256 + 1);
      *(_BYTE *)(v255 + 2) = *(_BYTE *)(v256 + 2);
      *(_BYTE *)(v255 + 3) = *(_BYTE *)(v256 + 3);
      v260 = (_BYTE *)(v255 + v252);
      *v260 = *(_BYTE *)(v256 + v252);
      v260[1] = *(_BYTE *)(v256 + v252 + 1);
      v260[2] = *(_BYTE *)(v256 + v252 + 2);
      v260[3] = *(_BYTE *)(v256 + v252 + 3);
      v261 = (_BYTE *)(v255 + v252 + v252);
      v262 = (_BYTE *)(v256 + v252 + v252);
      *v261 = *v262;
      v261[1] = v262[1];
      v261[2] = v262[2];
      v261[3] = v262[3];
      v263 = &v261[v252];
      v264 = &v262[v252];
      *v263 = *v264;
      v263[1] = v264[1];
      v263[2] = v264[2];
      v263[3] = v264[3];
    }
    v265 = *(int *)(a1 + 3240);
    v266 = (_BYTE *)(v225 + v265);
    v267 = v226 + v265;
    v268 = *(__int16 *)(a1 + 3256);
    v269 = v267 + (v268 >> 3) * (int)v252;
    v270 = *(__int16 *)(a1 + 3258);
    v271 = (_BYTE *)(v269 + (v270 >> 3));
    if (((v268 | v270) & 7) != 0)
    {
      (*(void (**)(_BYTE *, uint64_t, _QWORD, _QWORD, _BYTE *, uint64_t))(a1 + 4024))(v271, v252, v270 & 7, v268 & 7, v266, v252);
    }
    else
    {
      *v266 = *v271;
      v266[1] = v271[1];
      v266[2] = v271[2];
      v266[3] = v271[3];
      v272 = &v266[v252];
      *v272 = v271[v252];
      v272[1] = v271[v252 + 1];
      v272[2] = v271[v252 + 2];
      v272[3] = v271[v252 + 3];
      v273 = &v266[v252 + v252];
      v274 = &v271[v252 + v252];
      *v273 = *v274;
      v273[1] = v274[1];
      v273[2] = v274[2];
      v273[3] = v274[3];
      v275 = &v273[v252];
      v276 = &v274[v252];
      *v275 = *v276;
      v275[1] = v276[1];
      v275[2] = v276[2];
      v275[3] = v276[3];
    }
  }
  v277 = *(_QWORD *)(a1 + 3784);
  v278 = *(_QWORD *)(a1 + 3624);
  v279 = *(int *)(a1 + 3748);
  v280 = *(_DWORD *)(a1 + 3312);
  v281 = *(int *)(a1 + 3296);
  v282 = v277 + v281;
  v283 = v278 + v281 + (int)v279 * (uint64_t)((__int16)v280 >> 3) + (v280 >> 19);
  v284 = v280 & 0x70007;
  if (v280 == *(_DWORD *)(a1 + 3368))
  {
    if (v284)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(a1 + 4032))(v283, *(int *)(a1 + 3748), HIWORD(v280) & 7, v280 & 7, v282, *(int *)(a1 + 3748));
    }
    else
    {
      *(_QWORD *)v282 = *(_QWORD *)v283;
      *(_QWORD *)(v282 + v279) = *(_QWORD *)(v283 + v279);
      v285 = (_QWORD *)(v283 + v279 + v279);
      v286 = (_QWORD *)(v282 + v279 + v279);
      *v286 = *v285;
      *(_QWORD *)((char *)v286 + v279) = *(_QWORD *)((char *)v285 + v279);
    }
  }
  else
  {
    if (v284)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(a1 + 4024))(v283, *(int *)(a1 + 3748), HIWORD(v280) & 7, v280 & 7, v282, *(int *)(a1 + 3748));
    }
    else
    {
      *(_BYTE *)v282 = *(_BYTE *)v283;
      *(_BYTE *)(v282 + 1) = *(_BYTE *)(v283 + 1);
      *(_BYTE *)(v282 + 2) = *(_BYTE *)(v283 + 2);
      *(_BYTE *)(v282 + 3) = *(_BYTE *)(v283 + 3);
      v287 = (_BYTE *)(v282 + v279);
      *v287 = *(_BYTE *)(v283 + v279);
      v287[1] = *(_BYTE *)(v283 + v279 + 1);
      v287[2] = *(_BYTE *)(v283 + v279 + 2);
      v287[3] = *(_BYTE *)(v283 + v279 + 3);
      v288 = (_BYTE *)(v282 + v279 + v279);
      v289 = (_BYTE *)(v283 + v279 + v279);
      *v288 = *v289;
      v288[1] = v289[1];
      v288[2] = v289[2];
      v288[3] = v289[3];
      v290 = &v288[v279];
      v291 = &v289[v279];
      *v290 = *v291;
      v290[1] = v291[1];
      v290[2] = v291[2];
      v290[3] = v291[3];
    }
    v292 = *(int *)(a1 + 3352);
    v293 = (_BYTE *)(v277 + v292);
    v294 = v278 + v292;
    v295 = *(__int16 *)(a1 + 3368);
    v296 = v294 + (v295 >> 3) * (int)v279;
    v297 = *(__int16 *)(a1 + 3370);
    v298 = (_BYTE *)(v296 + (v297 >> 3));
    if (((v295 | v297) & 7) != 0)
    {
      (*(void (**)(_BYTE *, uint64_t, _QWORD, _QWORD, _BYTE *, uint64_t))(a1 + 4024))(v298, v279, v297 & 7, v295 & 7, v293, v279);
    }
    else
    {
      *v293 = *v298;
      v293[1] = v298[1];
      v293[2] = v298[2];
      v293[3] = v298[3];
      v299 = &v293[v279];
      *v299 = v298[v279];
      v299[1] = v298[v279 + 1];
      v299[2] = v298[v279 + 2];
      v299[3] = v298[v279 + 3];
      v300 = &v293[v279 + v279];
      v301 = &v298[v279 + v279];
      *v300 = *v301;
      v300[1] = v301[1];
      v300[2] = v301[2];
      v300[3] = v301[3];
      v302 = &v300[v279];
      v303 = &v301[v279];
      *v302 = *v303;
      v302[1] = v303[1];
      v302[2] = v303[2];
      v302[3] = v303[3];
    }
  }
  v304 = *(int *)(a1 + 3748);
  v305 = *(_DWORD *)(a1 + 3424);
  v306 = *(int *)(a1 + 3408);
  v307 = v277 + v306;
  v308 = v278 + v306 + (int)v304 * (uint64_t)((__int16)v305 >> 3) + (v305 >> 19);
  v309 = v305 & 0x70007;
  if (v305 == *(_DWORD *)(a1 + 3480))
  {
    if (v309)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 4032))(v308, v304, HIWORD(v305) & 7, v305 & 7, v307, v304);
    }
    else
    {
      *(_QWORD *)v307 = *(_QWORD *)v308;
      *(_QWORD *)(v307 + v304) = *(_QWORD *)(v308 + v304);
      v310 = (_QWORD *)(v308 + v304 + v304);
      v311 = (_QWORD *)(v307 + v304 + v304);
      *v311 = *v310;
      *(_QWORD *)((char *)v311 + v304) = *(_QWORD *)((char *)v310 + v304);
    }
  }
  else
  {
    if (v309)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(a1 + 4024))(v308, *(int *)(a1 + 3748), HIWORD(v305) & 7, v305 & 7, v307, *(int *)(a1 + 3748));
    }
    else
    {
      *(_BYTE *)v307 = *(_BYTE *)v308;
      *(_BYTE *)(v307 + 1) = *(_BYTE *)(v308 + 1);
      *(_BYTE *)(v307 + 2) = *(_BYTE *)(v308 + 2);
      *(_BYTE *)(v307 + 3) = *(_BYTE *)(v308 + 3);
      v312 = (_BYTE *)(v307 + v304);
      *v312 = *(_BYTE *)(v308 + v304);
      v312[1] = *(_BYTE *)(v308 + v304 + 1);
      v312[2] = *(_BYTE *)(v308 + v304 + 2);
      v312[3] = *(_BYTE *)(v308 + v304 + 3);
      v313 = (_BYTE *)(v307 + v304 + v304);
      v314 = (_BYTE *)(v308 + v304 + v304);
      *v313 = *v314;
      v313[1] = v314[1];
      v313[2] = v314[2];
      v313[3] = v314[3];
      v315 = &v313[v304];
      v316 = &v314[v304];
      *v315 = *v316;
      v315[1] = v316[1];
      v315[2] = v316[2];
      v315[3] = v316[3];
    }
    v317 = *(int *)(a1 + 3464);
    v318 = (_BYTE *)(v277 + v317);
    v319 = v278 + v317;
    v320 = *(__int16 *)(a1 + 3480);
    v321 = v319 + (v320 >> 3) * (int)v304;
    v322 = *(__int16 *)(a1 + 3482);
    v323 = (_BYTE *)(v321 + (v322 >> 3));
    if (((v320 | v322) & 7) != 0)
    {
      (*(void (**)(_BYTE *, uint64_t, _QWORD, _QWORD, _BYTE *, uint64_t))(a1 + 4024))(v323, v304, v322 & 7, v320 & 7, v318, v304);
    }
    else
    {
      *v318 = *v323;
      v318[1] = v323[1];
      v318[2] = v323[2];
      v318[3] = v323[3];
      v324 = &v318[v304];
      *v324 = v323[v304];
      v324[1] = v323[v304 + 1];
      v324[2] = v323[v304 + 2];
      v324[3] = v323[v304 + 3];
      v325 = &v318[v304 + v304];
      v326 = &v323[v304 + v304];
      *v325 = *v326;
      v325[1] = v326[1];
      v325[2] = v326[2];
      v325[3] = v326[3];
      v327 = &v325[v304];
      v328 = &v326[v304];
      *v327 = *v328;
      v327[1] = v328[1];
      v327[2] = v328[2];
      v327[3] = v328[3];
    }
  }
}

uint64_t vp8_build_intra_predictors_mby_s(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, uint64_t a5, int a6)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t *v9;
  _BYTE v11[24];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = **(unsigned __int8 **)(a1 + 3872);
  v11[0] = *a3;
  v11[1] = a3[a4];
  v11[2] = a3[2 * a4];
  v11[3] = a3[3 * a4];
  v11[4] = a3[4 * a4];
  v11[5] = a3[5 * a4];
  v11[6] = a3[6 * a4];
  v7 = a3[8 * a4];
  v11[7] = a3[7 * a4];
  v11[8] = v7;
  v11[9] = a3[9 * a4];
  v11[10] = a3[10 * a4];
  v11[11] = a3[11 * a4];
  v8 = a3[13 * a4];
  v11[12] = a3[12 * a4];
  v11[13] = v8;
  v11[14] = a3[14 * a4];
  v11[15] = a3[16 * a4 - a4];
  if (v6)
    v9 = (uint64_t *)((char *)&pred + 16 * v6);
  else
    v9 = &dc_pred[4 * *(int *)(a1 + 3892) + 2 * *(int *)(a1 + 3888)];
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _BYTE *))*v9)(a5, a6, a2, v11);
}

void vp8_init_intra_predictors_internal()
{
  qword_2545737C8 = (uint64_t)vpx_v_predictor_16x16_neon;
  unk_2545737D0 = vpx_v_predictor_8x8_neon;
  qword_2545737D8 = (uint64_t)vpx_h_predictor_16x16_neon;
  unk_2545737E0 = vpx_h_predictor_8x8_neon;
  qword_2545737E8 = (uint64_t)vpx_tm_predictor_16x16_neon;
  unk_2545737F0 = vpx_tm_predictor_8x8_neon;
  dc_pred[0] = (uint64_t)vpx_dc_128_predictor_16x16_neon;
  unk_254573780 = vpx_dc_128_predictor_8x8_neon;
  qword_254573788 = (uint64_t)vpx_dc_top_predictor_16x16_neon;
  unk_254573790 = vpx_dc_top_predictor_8x8_neon;
  qword_254573798 = (uint64_t)vpx_dc_left_predictor_16x16_neon;
  unk_2545737A0 = vpx_dc_left_predictor_8x8_neon;
  qword_2545737A8 = (uint64_t)vpx_dc_predictor_16x16_neon;
  unk_2545737B0 = vpx_dc_predictor_8x8_neon;
  pred_0 = vpx_dc_predictor_4x4_neon;
  off_254573800 = vpx_tm_predictor_4x4_neon;
  off_254573808 = vpx_ve_predictor_4x4_c;
  off_254573810 = vpx_he_predictor_4x4_c;
  qword_254573818 = (uint64_t)vpx_d45e_predictor_4x4_c;
  unk_254573820 = vpx_d135_predictor_4x4_neon;
  qword_254573828 = (uint64_t)vpx_d117_predictor_4x4_neon;
  unk_254573830 = vpx_d63e_predictor_4x4_c;
  qword_254573838 = (uint64_t)vpx_d153_predictor_4x4_neon;
  unk_254573840 = vpx_d207_predictor_4x4_neon;
}

uint32x4_t vpx_sad4x4x4d_neon(__int32 *a1, int a2, __int32 **a3, int a4, uint32x4_t *a5)
{
  __int32 *v5;
  __int32 *v6;
  __int32 *v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  __int32 *v13;
  uint8x8_t v14;
  uint64_t v15;
  __int32 *v16;
  uint8x8_t v17;
  uint8x8_t v18;
  __int32 *v19;
  uint8x8_t v20;
  __int32 *v21;
  uint8x8_t v22;
  uint32x4_t result;

  v5 = a3[1];
  v7 = a3[2];
  v6 = a3[3];
  v8.i32[0] = *a1;
  v8.i32[1] = *(__int32 *)((char *)a1 + a2);
  v9.i32[0] = **a3;
  v9.i32[1] = *(__int32 *)((char *)*a3 + a4);
  v10.i32[0] = *v5;
  v10.i32[1] = *(__int32 *)((char *)v5 + a4);
  v11.i32[0] = *v7;
  v11.i32[1] = *(__int32 *)((char *)v7 + a4);
  v12.i32[0] = *v6;
  v12.i32[1] = *(__int32 *)((char *)v6 + a4);
  v13 = (__int32 *)((char *)a1 + 2 * a2);
  v14.i32[0] = *v13;
  v14.i32[1] = *(__int32 *)((char *)v13 + a2);
  v15 = 2 * a4;
  v16 = (__int32 *)((char *)*a3 + v15);
  v17.i32[0] = *v16;
  v17.i32[1] = *(__int32 *)((char *)v16 + a4);
  v18.i32[0] = *(__int32 *)((char *)v5 + v15);
  v18.i32[1] = *(__int32 *)((char *)v5 + v15 + a4);
  v19 = (__int32 *)((char *)v7 + v15);
  v20.i32[0] = *v19;
  v20.i32[1] = *(__int32 *)((char *)v19 + a4);
  v21 = (__int32 *)((char *)v6 + v15);
  v22.i32[0] = *v21;
  v22.i32[1] = *(__int32 *)((char *)v21 + a4);
  result = vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16((int16x8_t)vabal_u8(vabdl_u8(v14, v17), v8, v9), (int16x8_t)vabal_u8(vabdl_u8(v14, v18), v8, v10)), vpaddq_s16((int16x8_t)vabal_u8(vabdl_u8(v14, v20), v8, v11), (int16x8_t)vabal_u8(vabdl_u8(v14, v22), v8, v12))));
  *a5 = result;
  return result;
}

uint32x4_t vpx_sad4x8x4d_neon(__int32 *a1, int a2, __int32 **a3, int a4, uint32x4_t *a5)
{
  __int32 *v5;
  __int32 *v6;
  __int32 *v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  __int32 *v13;
  uint8x8_t v14;
  uint64_t v15;
  __int32 *v16;
  uint8x8_t v17;
  uint8x8_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  __int32 *v23;
  uint64_t v24;
  __int32 *v25;
  uint8x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint8x8_t v29;
  uint16x8_t v30;
  __int32 *v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  __int32 *v36;
  uint64_t v37;
  __int32 *v38;
  __int32 *v39;
  __int32 *v40;
  __int32 *v41;
  uint32x4_t result;

  v5 = a3[1];
  v7 = a3[2];
  v6 = a3[3];
  v8.i32[0] = *a1;
  v8.i32[1] = *(__int32 *)((char *)a1 + a2);
  v9.i32[0] = **a3;
  v9.i32[1] = *(__int32 *)((char *)*a3 + a4);
  v10.i32[0] = *v5;
  v10.i32[1] = *(__int32 *)((char *)v5 + a4);
  v11.i32[0] = *v7;
  v11.i32[1] = *(__int32 *)((char *)v7 + a4);
  v12.i32[0] = *v6;
  v12.i32[1] = *(__int32 *)((char *)v6 + a4);
  v13 = (__int32 *)((char *)a1 + 2 * a2);
  v14.i32[0] = *v13;
  v14.i32[1] = *(__int32 *)((char *)v13 + a2);
  v15 = 2 * a4;
  v16 = (__int32 *)((char *)*a3 + v15);
  v17.i32[0] = *v16;
  v17.i32[1] = *(__int32 *)((char *)v16 + a4);
  v18.i32[0] = *(__int32 *)((char *)v5 + v15);
  v18.i32[1] = *(__int32 *)((char *)v5 + v15 + a4);
  v19.i32[0] = *(__int32 *)((char *)v7 + v15);
  v19.i32[1] = *(__int32 *)((char *)v7 + v15 + a4);
  v20.i32[0] = *(__int32 *)((char *)v6 + v15);
  v20.i32[1] = *(__int32 *)((char *)v6 + v15 + a4);
  v21 = vabal_u8(vabdl_u8(v14, v17), v8, v9);
  v22 = vabal_u8(vabdl_u8(v14, v18), v8, v10);
  v23 = &a1[a2];
  v18.i32[0] = *v23;
  v18.i32[1] = *(__int32 *)((char *)v23 + a2);
  v24 = a4;
  v25 = &(*a3)[v24];
  v26.i32[0] = *v25;
  v26.i32[1] = *(__int32 *)((char *)v25 + a4);
  v27 = vabdl_u8(v14, v19);
  v19.i32[0] = v5[v24];
  v19.i32[1] = *(__int32 *)((char *)&v5[v24] + a4);
  v28 = vabal_u8(v27, v8, v11);
  v29.i32[0] = v7[v24];
  v29.i32[1] = *(__int32 *)((char *)&v7[v24] + a4);
  v30 = vabdl_u8(v14, v20);
  v31 = &v6[v24];
  v14.i32[0] = *v31;
  v14.i32[1] = *(__int32 *)((char *)v31 + a4);
  v32 = vabal_u8(v21, v18, v26);
  v33 = vabal_u8(v22, v18, v19);
  v34 = vabal_u8(v28, v18, v29);
  v35 = vabal_u8(vabal_u8(v30, v8, v12), v18, v14);
  v36 = (__int32 *)((char *)a1 + 6 * a2);
  v8.i32[0] = *v36;
  v8.i32[1] = *(__int32 *)((char *)v36 + a2);
  v37 = 6 * a4;
  v38 = (__int32 *)((char *)*a3 + v37);
  v12.i32[0] = *v38;
  v12.i32[1] = *(__int32 *)((char *)v38 + a4);
  v39 = (__int32 *)((char *)v5 + v37);
  v14.i32[0] = *v39;
  v14.i32[1] = *(__int32 *)((char *)v39 + a4);
  v40 = (__int32 *)((char *)v7 + v37);
  v18.i32[0] = *v40;
  v18.i32[1] = *(__int32 *)((char *)v40 + a4);
  v41 = (__int32 *)((char *)v6 + v37);
  v19.i32[0] = *v41;
  v19.i32[1] = *(__int32 *)((char *)v41 + a4);
  result = vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16((int16x8_t)vabal_u8(v32, v8, v12), (int16x8_t)vabal_u8(v33, v8, v14)), vpaddq_s16((int16x8_t)vabal_u8(v34, v8, v18), (int16x8_t)vabal_u8(v35, v8, v19))));
  *a5 = result;
  return result;
}

uint32x4_t vpx_sad8x4x4d_neon(uint8x8_t *a1, int a2, uint8x8_t **a3, int a4, uint32x4_t *a5)
{
  uint8x8_t *v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint8x8_t v15;
  uint32x4_t result;

  v5 = a3[1];
  v6 = a3[2];
  v7 = a3[3];
  v8 = *(uint8x8_t *)((char *)a1 + a2);
  v9 = *(uint8x8_t *)((char *)a1 + 2 * a2);
  v10 = 2 * a4;
  v11 = vabal_u8(vabal_u8(vabdl_u8(v8, *(uint8x8_t *)((char *)*a3 + a4)), *a1, **a3), v9, *(uint8x8_t *)((char *)*a3 + v10));
  v12 = vabal_u8(vabal_u8(vabdl_u8(v8, *(uint8x8_t *)((char *)v5 + a4)), *a1, *v5), v9, *(uint8x8_t *)((char *)v5 + v10));
  v13 = vabal_u8(vabal_u8(vabdl_u8(v8, *(uint8x8_t *)((char *)v6 + a4)), *a1, *v6), v9, *(uint8x8_t *)((char *)v6 + v10));
  v14 = vabal_u8(vabal_u8(vabdl_u8(v8, *(uint8x8_t *)((char *)v7 + a4)), *a1, *v7), v9, *(uint8x8_t *)((char *)v7 + v10));
  v15 = *(uint8x8_t *)((char *)a1 + 3 * a2);
  result = vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16((int16x8_t)vabal_u8(v11, v15, *(uint8x8_t *)((char *)*a3 + 3 * a4)), (int16x8_t)vabal_u8(v12, v15, *(uint8x8_t *)((char *)v5 + 3 * a4))), vpaddq_s16((int16x8_t)vabal_u8(v13, v15, *(uint8x8_t *)((char *)v6 + 3 * a4)), (int16x8_t)vabal_u8(v14, v15, *(uint8x8_t *)((char *)v7 + 3 * a4)))));
  *a5 = result;
  return result;
}

uint32x4_t vpx_sad8x8x4d_neon(uint8x8_t *a1, int a2, uint8x8_t **a3, int a4, uint32x4_t *a5)
{
  uint8x8_t *v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint8x8_t v15;
  uint64_t v16;
  uint8x8_t v17;
  uint64_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint8x8_t v31;
  uint32x4_t result;

  v5 = a3[1];
  v7 = a3[2];
  v6 = a3[3];
  v8 = *(uint8x8_t *)((char *)a1 + a2);
  v9 = *(uint8x8_t *)((char *)a1 + 2 * a2);
  v10 = 2 * a4;
  v11 = vabal_u8(vabal_u8(vabdl_u8(v8, *(uint8x8_t *)((char *)*a3 + a4)), *a1, **a3), v9, *(uint8x8_t *)((char *)*a3 + v10));
  v12 = vabal_u8(vabal_u8(vabdl_u8(v8, *(uint8x8_t *)((char *)v5 + a4)), *a1, *v5), v9, *(uint8x8_t *)((char *)v5 + v10));
  v13 = vabal_u8(vabal_u8(vabdl_u8(v8, *(uint8x8_t *)((char *)v7 + a4)), *a1, *v7), v9, *(uint8x8_t *)((char *)v7 + v10));
  v14 = vabal_u8(vabal_u8(vabdl_u8(v8, *(uint8x8_t *)((char *)v6 + a4)), *a1, *v6), v9, *(uint8x8_t *)((char *)v6 + v10));
  v15 = *(uint8x8_t *)((char *)a1 + 3 * a2);
  v16 = 3 * a4;
  v17 = *(uint8x8_t *)((char *)a1 + 4 * a2);
  v18 = 4 * a4;
  v19 = vabal_u8(vabal_u8(v11, v15, *(uint8x8_t *)((char *)*a3 + v16)), v17, *(uint8x8_t *)((char *)*a3 + v18));
  v20 = vabal_u8(vabal_u8(v12, v15, *(uint8x8_t *)((char *)v5 + v16)), v17, *(uint8x8_t *)((char *)v5 + v18));
  v21 = vabal_u8(vabal_u8(v13, v15, *(uint8x8_t *)((char *)v7 + v16)), v17, *(uint8x8_t *)((char *)v7 + v18));
  v22 = vabal_u8(vabal_u8(v14, v15, *(uint8x8_t *)((char *)v6 + v16)), v17, *(uint8x8_t *)((char *)v6 + v18));
  v23 = *(uint8x8_t *)((char *)a1 + 5 * a2);
  v24 = 5 * a4;
  v25 = *(uint8x8_t *)((char *)a1 + 6 * a2);
  v26 = 6 * a4;
  v27 = vabal_u8(vabal_u8(v19, v23, *(uint8x8_t *)((char *)*a3 + v24)), v25, *(uint8x8_t *)((char *)*a3 + v26));
  v28 = vabal_u8(vabal_u8(v20, v23, *(uint8x8_t *)((char *)v5 + v24)), v25, *(uint8x8_t *)((char *)v5 + v26));
  v29 = vabal_u8(vabal_u8(v21, v23, *(uint8x8_t *)((char *)v7 + v24)), v25, *(uint8x8_t *)((char *)v7 + v26));
  v30 = vabal_u8(vabal_u8(v22, v23, *(uint8x8_t *)((char *)v6 + v24)), v25, *(uint8x8_t *)((char *)v6 + v26));
  v31 = *(uint8x8_t *)((char *)&a1[a2] - a2);
  result = vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16((int16x8_t)vabal_u8(v27, v31, *(uint8x8_t *)((char *)*a3 + 7 * a4)), (int16x8_t)vabal_u8(v28, v31, *(uint8x8_t *)((char *)v5 + 7 * a4))), vpaddq_s16((int16x8_t)vabal_u8(v29, v31, *(uint8x8_t *)((char *)v7 + 7 * a4)), (int16x8_t)vabal_u8(v30, v31, *(uint8x8_t *)((char *)v6 + 7 * a4)))));
  *a5 = result;
  return result;
}

uint32x4_t vpx_sad8x16x4d_neon(uint8x8_t *a1, int a2, uint8x8_t **a3, int a4, uint32x4_t *a5)
{
  uint8x8_t *v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint8x8_t v18;
  uint64_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint8x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint8x8_t v35;
  uint64_t v36;
  uint64_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint8x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint8x8_t v47;
  uint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint8x8_t v55;
  uint64_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint8x8_t v61;
  uint64_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint8x8_t v66;
  uint16x8_t v67;
  uint64_t v68;
  uint8x8_t v69;
  uint64_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint8x8_t v75;
  uint32x4_t result;

  v6 = *a3;
  v5 = a3[1];
  v8 = a3[2];
  v7 = a3[3];
  v9 = *(uint8x8_t *)((char *)a1 + a2);
  v10 = *(uint8x8_t *)((char *)a1 + 2 * a2);
  v11 = 2 * a4;
  v12 = *(uint8x8_t *)((char *)a1 + 3 * a2);
  v13 = 3 * a4;
  v14 = vabal_u8(vabal_u8(vabal_u8(vabdl_u8(v9, *(uint8x8_t *)((char *)*a3 + a4)), *a1, **a3), v10, *(uint8x8_t *)((char *)*a3 + v11)), v12, *(uint8x8_t *)((char *)*a3 + v13));
  v15 = vabal_u8(vabal_u8(vabal_u8(vabdl_u8(v9, *(uint8x8_t *)((char *)v5 + a4)), *a1, *v5), v10, *(uint8x8_t *)((char *)v5 + v11)), v12, *(uint8x8_t *)((char *)v5 + v13));
  v16 = vabal_u8(vabal_u8(vabal_u8(vabdl_u8(v9, *(uint8x8_t *)((char *)v8 + a4)), *a1, *v8), v10, *(uint8x8_t *)((char *)v8 + v11)), v12, *(uint8x8_t *)((char *)v8 + v13));
  v17 = vabal_u8(vabal_u8(vabal_u8(vabdl_u8(v9, *(uint8x8_t *)((char *)v7 + a4)), *a1, *v7), v10, *(uint8x8_t *)((char *)v7 + v11)), v12, *(uint8x8_t *)((char *)v7 + v13));
  v18 = *(uint8x8_t *)((char *)a1 + 4 * a2);
  v19 = 4 * a4;
  v20 = vabal_u8(v14, v18, *(uint8x8_t *)((char *)*a3 + v19));
  v21 = vabal_u8(v15, v18, *(uint8x8_t *)((char *)v5 + v19));
  v22 = vabal_u8(v16, v18, *(uint8x8_t *)((char *)v8 + v19));
  v23 = vabal_u8(v17, v18, *(uint8x8_t *)((char *)v7 + v19));
  v24 = *(uint8x8_t *)((char *)a1 + 5 * a2);
  v25 = 5 * a4;
  v26 = vabal_u8(v20, v24, *(uint8x8_t *)((char *)*a3 + v25));
  v27 = vabal_u8(v21, v24, *(uint8x8_t *)((char *)v5 + v25));
  v28 = vabal_u8(v22, v24, *(uint8x8_t *)((char *)v8 + v25));
  v29 = vabal_u8(v23, v24, *(uint8x8_t *)((char *)v7 + v25));
  v30 = *(uint8x8_t *)((char *)a1 + 6 * a2);
  v31 = vabal_u8(v26, v30, *(uint8x8_t *)((char *)*a3 + 6 * a4));
  v32 = vabal_u8(v27, v30, *(uint8x8_t *)((char *)v5 + 6 * a4));
  v33 = vabal_u8(v28, v30, *(uint8x8_t *)((char *)v8 + 6 * a4));
  v34 = vabal_u8(v29, v30, *(uint8x8_t *)((char *)v7 + 6 * a4));
  v35 = *(uint8x8_t *)((char *)a1 + 7 * a2);
  v36 = a4;
  v37 = 7 * a4;
  v38 = vabal_u8(v31, v35, *(uint8x8_t *)((char *)v6 + v37));
  v39 = vabal_u8(v32, v35, *(uint8x8_t *)((char *)v5 + v37));
  v40 = vabal_u8(v33, v35, *(uint8x8_t *)((char *)v8 + v37));
  v41 = vabal_u8(v34, v35, *(uint8x8_t *)((char *)v7 + v37));
  v42 = a1[a2];
  v43 = vabal_u8(v38, v42, v6[v36]);
  v44 = vabal_u8(v39, v42, v5[v36]);
  v45 = vabal_u8(v40, v42, v8[v36]);
  v46 = vabal_u8(v41, v42, v7[v36]);
  v47 = *(uint8x8_t *)((char *)a1 + 9 * a2);
  v48 = 9 * a4;
  v49 = *(uint8x8_t *)((char *)a1 + 10 * a2);
  v50 = 10 * a4;
  v51 = vabal_u8(vabal_u8(v43, v47, *(uint8x8_t *)((char *)v6 + v48)), v49, *(uint8x8_t *)((char *)v6 + v50));
  v52 = vabal_u8(vabal_u8(v44, v47, *(uint8x8_t *)((char *)v5 + v48)), v49, *(uint8x8_t *)((char *)v5 + v50));
  v53 = vabal_u8(vabal_u8(v45, v47, *(uint8x8_t *)((char *)v8 + v48)), v49, *(uint8x8_t *)((char *)v8 + v50));
  v54 = vabal_u8(vabal_u8(v46, v47, *(uint8x8_t *)((char *)v7 + v48)), v49, *(uint8x8_t *)((char *)v7 + v50));
  v55 = *(uint8x8_t *)((char *)a1 + 11 * a2);
  v56 = 11 * a4;
  v57 = vabal_u8(v51, v55, *(uint8x8_t *)((char *)v6 + v56));
  v58 = vabal_u8(v52, v55, *(uint8x8_t *)((char *)v5 + v56));
  v59 = vabal_u8(v53, v55, *(uint8x8_t *)((char *)v8 + v56));
  v60 = vabal_u8(v54, v55, *(uint8x8_t *)((char *)v7 + v56));
  v61 = *(uint8x8_t *)((char *)a1 + 12 * a2);
  v62 = 12 * a4;
  v63 = vabal_u8(v57, v61, *(uint8x8_t *)((char *)v6 + v62));
  v64 = vabal_u8(v58, v61, *(uint8x8_t *)((char *)v5 + v62));
  v65 = vabal_u8(v59, v61, *(uint8x8_t *)((char *)v8 + v62));
  v66 = *(uint8x8_t *)((char *)a1 + 13 * a2);
  v67 = vabal_u8(v60, v61, *(uint8x8_t *)((char *)v7 + v62));
  v68 = 13 * a4;
  v69 = *(uint8x8_t *)((char *)a1 + 14 * a2);
  v70 = 14 * a4;
  v71 = vabal_u8(vabal_u8(v63, v66, *(uint8x8_t *)((char *)v6 + v68)), v69, *(uint8x8_t *)((char *)v6 + v70));
  v72 = vabal_u8(vabal_u8(v64, v66, *(uint8x8_t *)((char *)v5 + v68)), v69, *(uint8x8_t *)((char *)v5 + v70));
  v73 = vabal_u8(vabal_u8(v65, v66, *(uint8x8_t *)((char *)v8 + v68)), v69, *(uint8x8_t *)((char *)v8 + v70));
  v74 = vabal_u8(vabal_u8(v67, v66, *(uint8x8_t *)((char *)v7 + v68)), v69, *(uint8x8_t *)((char *)v7 + v70));
  v75 = *(uint8x8_t *)((char *)&a1[2 * a2] - a2);
  result = vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16((int16x8_t)vabal_u8(v71, v75, *(uint8x8_t *)((char *)v6 + 15 * a4)), (int16x8_t)vabal_u8(v72, v75, *(uint8x8_t *)((char *)v5 + 15 * a4))), vpaddq_s16((int16x8_t)vabal_u8(v73, v75, *(uint8x8_t *)((char *)v8 + 15 * a4)), (int16x8_t)vabal_u8(v74, v75, *(uint8x8_t *)((char *)v7 + 15 * a4)))));
  *a5 = result;
  return result;
}

uint32x4_t vpx_sad16x8x4d_neon(uint8x16_t *a1, int a2, uint8x16_t **a3, int a4, uint32x4_t *a5)
{
  uint8x16_t *v5;
  uint8x16_t *v6;
  uint8x16_t *v7;
  uint8x16_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint8x16_t v13;
  uint64_t v14;
  uint8x16_t v15;
  uint64_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint8x16_t v21;
  uint64_t v22;
  uint8x16_t v23;
  uint16x8_t v24;
  uint64_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint64_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint8x16_t v36;
  uint8x16_t v37;
  uint32x4_t result;

  v5 = a3[1];
  v7 = a3[2];
  v6 = a3[3];
  v8 = *(uint8x16_t *)((char *)a1 + a2);
  v9 = vpadalq_u8(vpaddlq_u8(vabdq_u8(v8, *(uint8x16_t *)((char *)*a3 + a4))), vabdq_u8(*a1, **a3));
  v10 = vpadalq_u8(vpaddlq_u8(vabdq_u8(v8, *(uint8x16_t *)((char *)v5 + a4))), vabdq_u8(*a1, *v5));
  v11 = vpadalq_u8(vpaddlq_u8(vabdq_u8(v8, *(uint8x16_t *)((char *)v7 + a4))), vabdq_u8(*a1, *v7));
  v12 = vpaddlq_u8(vabdq_u8(v8, *(uint8x16_t *)((char *)v6 + a4)));
  v13 = *(uint8x16_t *)((char *)a1 + 2 * a2);
  v14 = 2 * a4;
  v15 = *(uint8x16_t *)((char *)a1 + 3 * a2);
  v16 = 3 * a4;
  v17 = vpadalq_u8(vpadalq_u8(v9, vabdq_u8(v13, *(uint8x16_t *)((char *)*a3 + v14))), vabdq_u8(v15, *(uint8x16_t *)((char *)*a3 + v16)));
  v18 = vpadalq_u8(vpadalq_u8(v10, vabdq_u8(v13, *(uint8x16_t *)((char *)v5 + v14))), vabdq_u8(v15, *(uint8x16_t *)((char *)v5 + v16)));
  v19 = vpadalq_u8(vpadalq_u8(v11, vabdq_u8(v13, *(uint8x16_t *)((char *)v7 + v14))), vabdq_u8(v15, *(uint8x16_t *)((char *)v7 + v16)));
  v20 = vpadalq_u8(vpadalq_u8(vpadalq_u8(v12, vabdq_u8(*a1, *v6)), vabdq_u8(v13, *(uint8x16_t *)((char *)v6 + v14))), vabdq_u8(v15, *(uint8x16_t *)((char *)v6 + v16)));
  v21 = *(uint8x16_t *)((char *)a1 + 4 * a2);
  v22 = 4 * a4;
  v23 = *(uint8x16_t *)((char *)a1 + 5 * a2);
  v24 = vpadalq_u8(v20, vabdq_u8(v21, *(uint8x16_t *)((char *)v6 + v22)));
  v25 = 5 * a4;
  v26 = vpadalq_u8(vpadalq_u8(v17, vabdq_u8(v21, *(uint8x16_t *)((char *)*a3 + v22))), vabdq_u8(v23, *(uint8x16_t *)((char *)*a3 + v25)));
  v27 = vpadalq_u8(vpadalq_u8(v18, vabdq_u8(v21, *(uint8x16_t *)((char *)v5 + v22))), vabdq_u8(v23, *(uint8x16_t *)((char *)v5 + v25)));
  v28 = vpadalq_u8(vpadalq_u8(v19, vabdq_u8(v21, *(uint8x16_t *)((char *)v7 + v22))), vabdq_u8(v23, *(uint8x16_t *)((char *)v7 + v25)));
  v29 = vabdq_u8(v23, *(uint8x16_t *)((char *)v6 + v25));
  v30 = *(uint8x16_t *)((char *)a1 + 6 * a2);
  v31 = 6 * a4;
  v32 = vpadalq_u8(v24, v29);
  v33 = vpadalq_u8(v26, vabdq_u8(v30, *(uint8x16_t *)((char *)*a3 + v31)));
  v34 = vpadalq_u8(v27, vabdq_u8(v30, *(uint8x16_t *)((char *)v5 + v31)));
  v35 = vpadalq_u8(v28, vabdq_u8(v30, *(uint8x16_t *)((char *)v7 + v31)));
  v36 = vabdq_u8(v30, *(uint8x16_t *)((char *)v6 + v31));
  v37 = *(uint8x16_t *)((char *)a1 + 8 * a2 - a2);
  result = vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16((int16x8_t)vpadalq_u8(v33, vabdq_u8(v37, *(uint8x16_t *)((char *)*a3 + 7 * a4))), (int16x8_t)vpadalq_u8(v34, vabdq_u8(v37, *(uint8x16_t *)((char *)v5 + 7 * a4)))), vpaddq_s16((int16x8_t)vpadalq_u8(v35, vabdq_u8(v37, *(uint8x16_t *)((char *)v7 + 7 * a4))), (int16x8_t)vpadalq_u8(vpadalq_u8(v32, v36), vabdq_u8(v37, *(uint8x16_t *)((char *)v6 + 7 * a4))))));
  *a5 = result;
  return result;
}

uint32x4_t vpx_sad16x16x4d_neon(uint8x16_t *a1, int a2, _QWORD *a3, int a4, uint32x4_t *a5)
{
  uint64_t v5;
  int16x8_t v6;
  uint64_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint32x4_t result;

  v5 = 0;
  v6 = 0uLL;
  v7 = 16;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v10 = (int16x8_t)vpadalq_u8((uint16x8_t)v10, vabdq_u8(*a1, *(uint8x16_t *)(*a3 + v5)));
    v9 = (int16x8_t)vpadalq_u8((uint16x8_t)v9, vabdq_u8(*a1, *(uint8x16_t *)(a3[1] + v5)));
    v8 = (int16x8_t)vpadalq_u8((uint16x8_t)v8, vabdq_u8(*a1, *(uint8x16_t *)(a3[2] + v5)));
    v6 = (int16x8_t)vpadalq_u8((uint16x8_t)v6, vabdq_u8(*a1, *(uint8x16_t *)(a3[3] + v5)));
    v5 += a4;
    a1 = (uint8x16_t *)((char *)a1 + a2);
    --v7;
  }
  while (v7);
  result = vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16(v10, v9), vpaddq_s16(v8, v6)));
  *a5 = result;
  return result;
}

uint32x4_t vpx_sad16x32x4d_neon(uint8x16_t *a1, int a2, _QWORD *a3, int a4, uint32x4_t *a5)
{
  uint64_t v5;
  int16x8_t v6;
  uint64_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  uint32x4_t result;

  v5 = 0;
  v6 = 0uLL;
  v7 = 32;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v10 = (int16x8_t)vpadalq_u8((uint16x8_t)v10, vabdq_u8(*a1, *(uint8x16_t *)(*a3 + v5)));
    v9 = (int16x8_t)vpadalq_u8((uint16x8_t)v9, vabdq_u8(*a1, *(uint8x16_t *)(a3[1] + v5)));
    v8 = (int16x8_t)vpadalq_u8((uint16x8_t)v8, vabdq_u8(*a1, *(uint8x16_t *)(a3[2] + v5)));
    v6 = (int16x8_t)vpadalq_u8((uint16x8_t)v6, vabdq_u8(*a1, *(uint8x16_t *)(a3[3] + v5)));
    v5 += a4;
    a1 = (uint8x16_t *)((char *)a1 + a2);
    --v7;
  }
  while (v7);
  result = vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16(v10, v9), vpaddq_s16(v8, v6)));
  *a5 = result;
  return result;
}

int32x4_t vpx_sad32x16x4d_neon(uint8x16_t *a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8x16_t *v11;
  uint64_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint8x16_t v19;
  int32x4_t result;

  v5 = 0;
  v6 = a3[1];
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = a3[2];
  v10 = a3[3];
  v11 = a1 + 1;
  v12 = 16;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 0uLL;
  do
  {
    v19 = v11[-1];
    v14 = vpadalq_u8(v14, vabdq_u8(v19, *(uint8x16_t *)(*a3 + v5)));
    v13 = vpadalq_u8(v13, vabdq_u8(v19, *(uint8x16_t *)(v6 + v5)));
    v8 = vpadalq_u8(v8, vabdq_u8(v19, *(uint8x16_t *)(v9 + v5)));
    v7 = vpadalq_u8(v7, vabdq_u8(v19, *(uint8x16_t *)(v10 + v5)));
    v18 = vpadalq_u8(v18, vabdq_u8(*v11, *(uint8x16_t *)(*a3 + 16 + v5)));
    v17 = vpadalq_u8(v17, vabdq_u8(*v11, *(uint8x16_t *)(v6 + v5 + 16)));
    v16 = vpadalq_u8(v16, vabdq_u8(*v11, *(uint8x16_t *)(v9 + v5 + 16)));
    v15 = vpadalq_u8(v15, vabdq_u8(*v11, *(uint8x16_t *)(v10 + v5 + 16)));
    v11 = (uint8x16_t *)((char *)v11 + a2);
    v5 += a4;
    --v12;
  }
  while (v12);
  result = vpaddq_s32(vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v18), v14), (int32x4_t)vpadalq_u16(vpaddlq_u16(v17), v13)), vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v16), v8), (int32x4_t)vpadalq_u16(vpaddlq_u16(v15), v7)));
  *a5 = result;
  return result;
}

int32x4_t vpx_sad32x32x4d_neon(uint8x16_t *a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8x16_t *v11;
  uint64_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint8x16_t v19;
  int32x4_t result;

  v5 = 0;
  v6 = a3[1];
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = a3[2];
  v10 = a3[3];
  v11 = a1 + 1;
  v12 = 32;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 0uLL;
  do
  {
    v19 = v11[-1];
    v14 = vpadalq_u8(v14, vabdq_u8(v19, *(uint8x16_t *)(*a3 + v5)));
    v13 = vpadalq_u8(v13, vabdq_u8(v19, *(uint8x16_t *)(v6 + v5)));
    v8 = vpadalq_u8(v8, vabdq_u8(v19, *(uint8x16_t *)(v9 + v5)));
    v7 = vpadalq_u8(v7, vabdq_u8(v19, *(uint8x16_t *)(v10 + v5)));
    v18 = vpadalq_u8(v18, vabdq_u8(*v11, *(uint8x16_t *)(*a3 + 16 + v5)));
    v17 = vpadalq_u8(v17, vabdq_u8(*v11, *(uint8x16_t *)(v6 + v5 + 16)));
    v16 = vpadalq_u8(v16, vabdq_u8(*v11, *(uint8x16_t *)(v9 + v5 + 16)));
    v15 = vpadalq_u8(v15, vabdq_u8(*v11, *(uint8x16_t *)(v10 + v5 + 16)));
    v11 = (uint8x16_t *)((char *)v11 + a2);
    v5 += a4;
    --v12;
  }
  while (v12);
  result = vpaddq_s32(vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v18), v14), (int32x4_t)vpadalq_u16(vpaddlq_u16(v17), v13)), vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v16), v8), (int32x4_t)vpadalq_u16(vpaddlq_u16(v15), v7)));
  *a5 = result;
  return result;
}

int32x4_t vpx_sad32x64x4d_neon(uint8x16_t *a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8x16_t *v11;
  uint64_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint8x16_t v19;
  int32x4_t result;

  v5 = 0;
  v6 = a3[1];
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = a3[2];
  v10 = a3[3];
  v11 = a1 + 1;
  v12 = 64;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 0uLL;
  do
  {
    v19 = v11[-1];
    v14 = vpadalq_u8(v14, vabdq_u8(v19, *(uint8x16_t *)(*a3 + v5)));
    v13 = vpadalq_u8(v13, vabdq_u8(v19, *(uint8x16_t *)(v6 + v5)));
    v8 = vpadalq_u8(v8, vabdq_u8(v19, *(uint8x16_t *)(v9 + v5)));
    v7 = vpadalq_u8(v7, vabdq_u8(v19, *(uint8x16_t *)(v10 + v5)));
    v18 = vpadalq_u8(v18, vabdq_u8(*v11, *(uint8x16_t *)(*a3 + 16 + v5)));
    v17 = vpadalq_u8(v17, vabdq_u8(*v11, *(uint8x16_t *)(v6 + v5 + 16)));
    v16 = vpadalq_u8(v16, vabdq_u8(*v11, *(uint8x16_t *)(v9 + v5 + 16)));
    v15 = vpadalq_u8(v15, vabdq_u8(*v11, *(uint8x16_t *)(v10 + v5 + 16)));
    v11 = (uint8x16_t *)((char *)v11 + a2);
    v5 += a4;
    --v12;
  }
  while (v12);
  result = vpaddq_s32(vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v18), v14), (int32x4_t)vpadalq_u16(vpaddlq_u16(v17), v13)), vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v16), v8), (int32x4_t)vpadalq_u16(vpaddlq_u16(v15), v7)));
  *a5 = result;
  return result;
}

int32x4_t vpx_sad64x32x4d_neon(uint8x16_t *a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint8x16_t *v9;
  uint64_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  int32x4_t result;

  v5 = 0;
  v6 = a3[3];
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = a1 + 2;
  v10 = 32;
  v11 = 0uLL;
  v12 = 0uLL;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  do
  {
    v17 = v9[-2];
    v18 = v9[-1];
    v19 = v9[1];
    v12 = vpadalq_u8(vpadalq_u8(v12, vabdq_u8(v17, *(uint8x16_t *)(*a3 + v5))), vabdq_u8(*v9, *(uint8x16_t *)(*a3 + 48 + v5 - 16)));
    v11 = vpadalq_u8(vpadalq_u8(v11, vabdq_u8(v17, *(uint8x16_t *)(a3[1] + v5))), vabdq_u8(*v9, *(uint8x16_t *)(a3[1] + 48 + v5 - 16)));
    v8 = vpadalq_u8(vpadalq_u8(v8, vabdq_u8(v17, *(uint8x16_t *)(a3[2] + v5))), vabdq_u8(*v9, *(uint8x16_t *)(a3[2] + 32 + v5)));
    v7 = vpadalq_u8(vpadalq_u8(v7, vabdq_u8(v17, *(uint8x16_t *)(v6 + v5))), vabdq_u8(*v9, *(uint8x16_t *)(v6 + v5 + 32)));
    v16 = vpadalq_u8(vpadalq_u8(v16, vabdq_u8(v18, *(uint8x16_t *)(*a3 + 48 + v5 - 32))), vabdq_u8(v19, *(uint8x16_t *)(*a3 + 48 + v5)));
    v15 = vpadalq_u8(vpadalq_u8(v15, vabdq_u8(v18, *(uint8x16_t *)(a3[1] + 48 + v5 - 32))), vabdq_u8(v19, *(uint8x16_t *)(a3[1] + 48 + v5)));
    v14 = vpadalq_u8(vpadalq_u8(v14, vabdq_u8(v18, *(uint8x16_t *)(a3[2] + 32 + v5 - 16))), vabdq_u8(v19, *(uint8x16_t *)(a3[2] + 32 + v5 + 16)));
    v13 = vpadalq_u8(vpadalq_u8(v13, vabdq_u8(v18, *(uint8x16_t *)(v6 + v5 + 16))), vabdq_u8(v19, *(uint8x16_t *)(v6 + v5 + 48)));
    v9 = (uint8x16_t *)((char *)v9 + a2);
    v5 += a4;
    --v10;
  }
  while (v10);
  result = vpaddq_s32(vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v16), v12), (int32x4_t)vpadalq_u16(vpaddlq_u16(v15), v11)), vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v14), v8), (int32x4_t)vpadalq_u16(vpaddlq_u16(v13), v7)));
  *a5 = result;
  return result;
}

int32x4_t vpx_sad64x64x4d_neon(uint8x16_t *a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint8x16_t *v9;
  uint64_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  int32x4_t result;

  v5 = 0;
  v6 = a3[3];
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = a1 + 2;
  v10 = 64;
  v11 = 0uLL;
  v12 = 0uLL;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  do
  {
    v17 = v9[-2];
    v18 = v9[-1];
    v19 = v9[1];
    v12 = vpadalq_u8(vpadalq_u8(v12, vabdq_u8(v17, *(uint8x16_t *)(*a3 + v5))), vabdq_u8(*v9, *(uint8x16_t *)(*a3 + 48 + v5 - 16)));
    v11 = vpadalq_u8(vpadalq_u8(v11, vabdq_u8(v17, *(uint8x16_t *)(a3[1] + v5))), vabdq_u8(*v9, *(uint8x16_t *)(a3[1] + 48 + v5 - 16)));
    v8 = vpadalq_u8(vpadalq_u8(v8, vabdq_u8(v17, *(uint8x16_t *)(a3[2] + v5))), vabdq_u8(*v9, *(uint8x16_t *)(a3[2] + 32 + v5)));
    v7 = vpadalq_u8(vpadalq_u8(v7, vabdq_u8(v17, *(uint8x16_t *)(v6 + v5))), vabdq_u8(*v9, *(uint8x16_t *)(v6 + v5 + 32)));
    v16 = vpadalq_u8(vpadalq_u8(v16, vabdq_u8(v18, *(uint8x16_t *)(*a3 + 48 + v5 - 32))), vabdq_u8(v19, *(uint8x16_t *)(*a3 + 48 + v5)));
    v15 = vpadalq_u8(vpadalq_u8(v15, vabdq_u8(v18, *(uint8x16_t *)(a3[1] + 48 + v5 - 32))), vabdq_u8(v19, *(uint8x16_t *)(a3[1] + 48 + v5)));
    v14 = vpadalq_u8(vpadalq_u8(v14, vabdq_u8(v18, *(uint8x16_t *)(a3[2] + 32 + v5 - 16))), vabdq_u8(v19, *(uint8x16_t *)(a3[2] + 32 + v5 + 16)));
    v13 = vpadalq_u8(vpadalq_u8(v13, vabdq_u8(v18, *(uint8x16_t *)(v6 + v5 + 16))), vabdq_u8(v19, *(uint8x16_t *)(v6 + v5 + 48)));
    v9 = (uint8x16_t *)((char *)v9 + a2);
    v5 += a4;
    --v10;
  }
  while (v10);
  result = vpaddq_s32(vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v16), v12), (int32x4_t)vpadalq_u16(vpaddlq_u16(v15), v11)), vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v14), v8), (int32x4_t)vpadalq_u16(vpaddlq_u16(v13), v7)));
  *a5 = result;
  return result;
}

int32x4_t vpx_sad_skip_4x4x4d_neon(__int32 *a1, int a2, __int32 **a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  __int32 *v6;
  __int32 *v7;
  __int32 *v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  int32x4_t v14;
  int32x4_t result;

  v5 = 2 * a4;
  v6 = a3[1];
  v7 = a3[2];
  v8 = a3[3];
  v9.i32[0] = *a1;
  v9.i32[1] = *(__int32 *)((char *)a1 + 2 * a2);
  v10.i32[0] = **a3;
  v10.i32[1] = *(__int32 *)((char *)*a3 + v5);
  v11.i32[0] = *v6;
  v11.i32[1] = *(__int32 *)((char *)v6 + v5);
  v12.i32[0] = *v7;
  v12.i32[1] = *(__int32 *)((char *)v7 + v5);
  v13.i32[0] = *v8;
  v13.i32[1] = *(__int32 *)((char *)v8 + v5);
  v14 = (int32x4_t)vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16((int16x8_t)vabdl_u8(v9, v10), (int16x8_t)vabdl_u8(v9, v11)), vpaddq_s16((int16x8_t)vabdl_u8(v9, v12), (int16x8_t)vabdl_u8(v9, v13))));
  result = vaddq_s32(v14, v14);
  *a5 = result;
  return result;
}

int32x4_t vpx_sad_skip_4x8x4d_neon(__int32 *a1, int a2, __int32 **a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  __int32 *v15;
  uint8x8_t v16;
  uint64_t v17;
  __int32 *v18;
  uint8x8_t v19;
  uint8x8_t v20;
  __int32 *v21;
  uint8x8_t v22;
  __int32 *v23;
  uint8x8_t v24;
  int32x4_t v25;
  int32x4_t result;

  v5 = 2 * a2;
  v6 = 2 * a4;
  v7 = a3[1];
  v9 = a3[2];
  v8 = a3[3];
  v10.i32[0] = *a1;
  v10.i32[1] = *(__int32 *)((char *)a1 + v5);
  v11.i32[0] = **a3;
  v11.i32[1] = *(__int32 *)((char *)*a3 + v6);
  v12.i32[0] = *v7;
  v12.i32[1] = *(__int32 *)((char *)v7 + v6);
  v13.i32[0] = *v9;
  v13.i32[1] = *(__int32 *)((char *)v9 + v6);
  v14.i32[0] = *v8;
  v14.i32[1] = *(__int32 *)((char *)v8 + v6);
  v15 = &a1[a2];
  v16.i32[0] = *v15;
  v16.i32[1] = *(__int32 *)((char *)v15 + v5);
  v17 = a4;
  v18 = &(*a3)[v17];
  v19.i32[0] = *v18;
  v19.i32[1] = *(__int32 *)((char *)v18 + v6);
  v20.i32[0] = v7[v17];
  v20.i32[1] = *(__int32 *)((char *)&v7[v17] + v6);
  v21 = &v9[v17];
  v22.i32[0] = *v21;
  v22.i32[1] = *(__int32 *)((char *)v21 + v6);
  v23 = &v8[v17];
  v24.i32[0] = *v23;
  v24.i32[1] = *(__int32 *)((char *)v23 + v6);
  v25 = (int32x4_t)vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16((int16x8_t)vabal_u8(vabdl_u8(v16, v19), v10, v11), (int16x8_t)vabal_u8(vabdl_u8(v16, v20), v10, v12)), vpaddq_s16((int16x8_t)vabal_u8(vabdl_u8(v16, v22), v10, v13), (int16x8_t)vabal_u8(vabdl_u8(v16, v24), v10, v14))));
  result = vaddq_s32(v25, v25);
  *a5 = result;
  return result;
}

int32x4_t vpx_sad_skip_8x4x4d_neon(uint8x8_t *a1, int a2, uint8x8_t **a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint8x8_t v6;
  int32x4_t v7;
  int32x4_t result;

  v5 = 2 * a4;
  v6 = *(uint8x8_t *)((char *)a1 + 2 * a2);
  v7 = (int32x4_t)vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16((int16x8_t)vabal_u8(vabdl_u8(v6, *(uint8x8_t *)((char *)*a3 + v5)), *a1, **a3), (int16x8_t)vabal_u8(vabdl_u8(v6, *(uint8x8_t *)((char *)a3[1] + v5)), *a1, *a3[1])), vpaddq_s16((int16x8_t)vabal_u8(vabdl_u8(v6, *(uint8x8_t *)((char *)a3[2] + v5)), *a1, *a3[2]), (int16x8_t)vabal_u8(vabdl_u8(v6, *(uint8x8_t *)((char *)a3[3] + v5)), *a1, *a3[3]))));
  result = vaddq_s32(v7, v7);
  *a5 = result;
  return result;
}

int32x4_t vpx_sad_skip_8x8x4d_neon(uint8x8_t *a1, int a2, uint8x8_t **a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint8x8_t v16;
  int32x4_t v17;
  int32x4_t result;

  v5 = 2 * a4;
  v6 = a3[1];
  v7 = a3[2];
  v8 = a3[3];
  v9 = *(uint8x8_t *)((char *)a1 + 2 * a2);
  v10 = *(uint8x8_t *)((char *)a1 + 4 * a2);
  v11 = 4 * a4;
  v12 = vabal_u8(vabal_u8(vabdl_u8(v9, *(uint8x8_t *)((char *)*a3 + v5)), *a1, **a3), v10, *(uint8x8_t *)((char *)*a3 + v11));
  v13 = vabal_u8(vabal_u8(vabdl_u8(v9, *(uint8x8_t *)((char *)v6 + v5)), *a1, *v6), v10, *(uint8x8_t *)((char *)v6 + v11));
  v14 = vabal_u8(vabal_u8(vabdl_u8(v9, *(uint8x8_t *)((char *)v7 + v5)), *a1, *v7), v10, *(uint8x8_t *)((char *)v7 + v11));
  v15 = vabal_u8(vabal_u8(vabdl_u8(v9, *(uint8x8_t *)((char *)v8 + v5)), *a1, *v8), v10, *(uint8x8_t *)((char *)v8 + v11));
  v16 = *(uint8x8_t *)((char *)a1 + 6 * a2);
  v17 = (int32x4_t)vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16((int16x8_t)vabal_u8(v12, v16, *(uint8x8_t *)((char *)*a3 + 6 * a4)), (int16x8_t)vabal_u8(v13, v16, *(uint8x8_t *)((char *)v6 + 6 * a4))), vpaddq_s16((int16x8_t)vabal_u8(v14, v16, *(uint8x8_t *)((char *)v7 + 6 * a4)), (int16x8_t)vabal_u8(v15, v16, *(uint8x8_t *)((char *)v8 + 6 * a4)))));
  result = vaddq_s32(v17, v17);
  *a5 = result;
  return result;
}

int32x4_t vpx_sad_skip_8x16x4d_neon(uint8x8_t *a1, int a2, uint8x8_t **a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint8x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint8x8_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint8x8_t v38;
  int32x4_t v39;
  int32x4_t result;

  v5 = 2 * a4;
  v6 = a3[1];
  v8 = a3[2];
  v7 = a3[3];
  v9 = *(uint8x8_t *)((char *)a1 + 2 * a2);
  v10 = *(uint8x8_t *)((char *)a1 + 4 * a2);
  v11 = 4 * a4;
  v12 = vabal_u8(vabal_u8(vabdl_u8(v9, *(uint8x8_t *)((char *)*a3 + v5)), *a1, **a3), v10, *(uint8x8_t *)((char *)*a3 + v11));
  v13 = vabal_u8(vabal_u8(vabdl_u8(v9, *(uint8x8_t *)((char *)v6 + v5)), *a1, *v6), v10, *(uint8x8_t *)((char *)v6 + v11));
  v14 = vabal_u8(vabal_u8(vabdl_u8(v9, *(uint8x8_t *)((char *)v8 + v5)), *a1, *v8), v10, *(uint8x8_t *)((char *)v8 + v11));
  v15 = vabal_u8(vabal_u8(vabdl_u8(v9, *(uint8x8_t *)((char *)v7 + v5)), *a1, *v7), v10, *(uint8x8_t *)((char *)v7 + v11));
  v16 = *(uint8x8_t *)((char *)a1 + 6 * a2);
  v17 = vabal_u8(v12, v16, *(uint8x8_t *)((char *)*a3 + 6 * a4));
  v18 = vabal_u8(v13, v16, *(uint8x8_t *)((char *)v6 + 6 * a4));
  v19 = vabal_u8(v14, v16, *(uint8x8_t *)((char *)v8 + 6 * a4));
  v20 = vabal_u8(v15, v16, *(uint8x8_t *)((char *)v7 + 6 * a4));
  v21 = a1[a2];
  v22 = a4;
  v23 = vabal_u8(v17, v21, (*a3)[v22]);
  v24 = vabal_u8(v18, v21, v6[v22]);
  v25 = vabal_u8(v19, v21, v8[v22]);
  v26 = vabal_u8(v20, v21, v7[v22]);
  v27 = *(uint8x8_t *)((char *)a1 + 10 * a2);
  v28 = 10 * a4;
  v29 = vabal_u8(v23, v27, *(uint8x8_t *)((char *)*a3 + v28));
  v30 = vabal_u8(v24, v27, *(uint8x8_t *)((char *)v6 + v28));
  v31 = vabal_u8(v25, v27, *(uint8x8_t *)((char *)v8 + v28));
  v32 = vabal_u8(v26, v27, *(uint8x8_t *)((char *)v7 + v28));
  v33 = *(uint8x8_t *)((char *)a1 + 12 * a2);
  v34 = vabal_u8(v29, v33, *(uint8x8_t *)((char *)*a3 + 12 * a4));
  v35 = vabal_u8(v30, v33, *(uint8x8_t *)((char *)v6 + 12 * a4));
  v36 = vabal_u8(v31, v33, *(uint8x8_t *)((char *)v8 + 12 * a4));
  v37 = vabal_u8(v32, v33, *(uint8x8_t *)((char *)v7 + 12 * a4));
  v38 = *(uint8x8_t *)((char *)a1 + 14 * a2);
  v39 = (int32x4_t)vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16((int16x8_t)vabal_u8(v34, v38, *(uint8x8_t *)((char *)*a3 + 14 * a4)), (int16x8_t)vabal_u8(v35, v38, *(uint8x8_t *)((char *)v6 + 14 * a4))), vpaddq_s16((int16x8_t)vabal_u8(v36, v38, *(uint8x8_t *)((char *)v8 + 14 * a4)), (int16x8_t)vabal_u8(v37, v38, *(uint8x8_t *)((char *)v7 + 14 * a4)))));
  result = vaddq_s32(v39, v39);
  *a5 = result;
  return result;
}

int32x4_t vpx_sad_skip_16x8x4d_neon(uint8x16_t *a1, int a2, uint8x16_t **a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint8x16_t *v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  uint8x16_t v9;
  uint8x16_t v10;
  uint64_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint8x16_t v16;
  int32x4_t v17;
  int32x4_t result;

  v5 = 2 * a4;
  v6 = a3[1];
  v8 = a3[2];
  v7 = a3[3];
  v9 = *(uint8x16_t *)((char *)a1 + 2 * a2);
  v10 = *(uint8x16_t *)((char *)a1 + 4 * a2);
  v11 = 4 * a4;
  v12 = vpadalq_u8(vpadalq_u8(vpaddlq_u8(vabdq_u8(v9, *(uint8x16_t *)((char *)*a3 + v5))), vabdq_u8(*a1, **a3)), vabdq_u8(v10, *(uint8x16_t *)((char *)*a3 + v11)));
  v13 = vpadalq_u8(vpadalq_u8(vpaddlq_u8(vabdq_u8(v9, *(uint8x16_t *)((char *)v6 + v5))), vabdq_u8(*a1, *v6)), vabdq_u8(v10, *(uint8x16_t *)((char *)v6 + v11)));
  v14 = vpadalq_u8(vpadalq_u8(vpaddlq_u8(vabdq_u8(v9, *(uint8x16_t *)((char *)v8 + v5))), vabdq_u8(*a1, *v8)), vabdq_u8(v10, *(uint8x16_t *)((char *)v8 + v11)));
  v15 = vpadalq_u8(vpadalq_u8(vpaddlq_u8(vabdq_u8(v9, *(uint8x16_t *)((char *)v7 + v5))), vabdq_u8(*a1, *v7)), vabdq_u8(v10, *(uint8x16_t *)((char *)v7 + v11)));
  v16 = *(uint8x16_t *)((char *)a1 + 6 * a2);
  v17 = (int32x4_t)vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16((int16x8_t)vpadalq_u8(v12, vabdq_u8(v16, *(uint8x16_t *)((char *)*a3 + 6 * a4))), (int16x8_t)vpadalq_u8(v13, vabdq_u8(v16, *(uint8x16_t *)((char *)v6 + 6 * a4)))), vpaddq_s16((int16x8_t)vpadalq_u8(v14, vabdq_u8(v16, *(uint8x16_t *)((char *)v8 + 6 * a4))), (int16x8_t)vpadalq_u8(v15, vabdq_u8(v16, *(uint8x16_t *)((char *)v7 + 6 * a4))))));
  result = vaddq_s32(v17, v17);
  *a5 = result;
  return result;
}

int32x4_t vpx_sad_skip_16x16x4d_neon(uint8x16_t *a1, int a2, uint8x16_t **a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint8x16_t *v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  uint8x16_t v9;
  uint8x16_t v10;
  uint64_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint8x16_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint8x16_t v21;
  uint64_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v25;
  uint16x8_t v26;
  uint8x16_t v27;
  uint64_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint8x16_t v38;
  int32x4_t v39;
  int32x4_t result;

  v5 = 2 * a4;
  v6 = a3[1];
  v8 = a3[2];
  v7 = a3[3];
  v9 = *(uint8x16_t *)((char *)a1 + 2 * a2);
  v10 = *(uint8x16_t *)((char *)a1 + 4 * a2);
  v11 = 4 * a4;
  v12 = vpadalq_u8(vpadalq_u8(vpaddlq_u8(vabdq_u8(v9, *(uint8x16_t *)((char *)*a3 + v5))), vabdq_u8(*a1, **a3)), vabdq_u8(v10, *(uint8x16_t *)((char *)*a3 + v11)));
  v13 = vpadalq_u8(vpadalq_u8(vpaddlq_u8(vabdq_u8(v9, *(uint8x16_t *)((char *)v6 + v5))), vabdq_u8(*a1, *v6)), vabdq_u8(v10, *(uint8x16_t *)((char *)v6 + v11)));
  v14 = vpadalq_u8(vpadalq_u8(vpaddlq_u8(vabdq_u8(v9, *(uint8x16_t *)((char *)v8 + v5))), vabdq_u8(*a1, *v8)), vabdq_u8(v10, *(uint8x16_t *)((char *)v8 + v11)));
  v15 = vpadalq_u8(vpadalq_u8(vpaddlq_u8(vabdq_u8(v9, *(uint8x16_t *)((char *)v7 + v5))), vabdq_u8(*a1, *v7)), vabdq_u8(v10, *(uint8x16_t *)((char *)v7 + v11)));
  v16 = *(uint8x16_t *)((char *)a1 + 6 * a2);
  v17 = vpadalq_u8(v12, vabdq_u8(v16, *(uint8x16_t *)((char *)*a3 + 6 * a4)));
  v18 = vpadalq_u8(v13, vabdq_u8(v16, *(uint8x16_t *)((char *)v6 + 6 * a4)));
  v19 = vpadalq_u8(v14, vabdq_u8(v16, *(uint8x16_t *)((char *)v8 + 6 * a4)));
  v20 = vpadalq_u8(v15, vabdq_u8(v16, *(uint8x16_t *)((char *)v7 + 6 * a4)));
  v21 = *(uint8x16_t *)((char *)a1 + 8 * a2);
  v22 = 8 * a4;
  v23 = vpadalq_u8(v17, vabdq_u8(v21, *(uint8x16_t *)((char *)*a3 + v22)));
  v24 = vpadalq_u8(v18, vabdq_u8(v21, *(uint8x16_t *)((char *)v6 + v22)));
  v25 = vpadalq_u8(v19, vabdq_u8(v21, *(uint8x16_t *)((char *)v8 + v22)));
  v26 = vpadalq_u8(v20, vabdq_u8(v21, *(uint8x16_t *)((char *)v7 + v22)));
  v27 = *(uint8x16_t *)((char *)a1 + 10 * a2);
  v28 = 10 * a4;
  v29 = vpadalq_u8(v23, vabdq_u8(v27, *(uint8x16_t *)((char *)*a3 + v28)));
  v30 = vpadalq_u8(v24, vabdq_u8(v27, *(uint8x16_t *)((char *)v6 + v28)));
  v31 = vpadalq_u8(v25, vabdq_u8(v27, *(uint8x16_t *)((char *)v8 + v28)));
  v32 = vpadalq_u8(v26, vabdq_u8(v27, *(uint8x16_t *)((char *)v7 + v28)));
  v33 = *(uint8x16_t *)((char *)a1 + 12 * a2);
  v34 = vpadalq_u8(v29, vabdq_u8(v33, *(uint8x16_t *)((char *)*a3 + 12 * a4)));
  v35 = vpadalq_u8(v30, vabdq_u8(v33, *(uint8x16_t *)((char *)v6 + 12 * a4)));
  v36 = vpadalq_u8(v31, vabdq_u8(v33, *(uint8x16_t *)((char *)v8 + 12 * a4)));
  v37 = vpadalq_u8(v32, vabdq_u8(v33, *(uint8x16_t *)((char *)v7 + 12 * a4)));
  v38 = *(uint8x16_t *)((char *)a1 + 14 * a2);
  v39 = (int32x4_t)vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16((int16x8_t)vpadalq_u8(v34, vabdq_u8(v38, *(uint8x16_t *)((char *)*a3 + 14 * a4))), (int16x8_t)vpadalq_u8(v35, vabdq_u8(v38, *(uint8x16_t *)((char *)v6 + 14 * a4)))), vpaddq_s16((int16x8_t)vpadalq_u8(v36, vabdq_u8(v38, *(uint8x16_t *)((char *)v8 + 14 * a4))), (int16x8_t)vpadalq_u8(v37, vabdq_u8(v38, *(uint8x16_t *)((char *)v7 + 14 * a4))))));
  result = vaddq_s32(v39, v39);
  *a5 = result;
  return result;
}

int32x4_t vpx_sad_skip_16x32x4d_neon(uint8x16_t *a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  int16x8_t v6;
  uint64_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int32x4_t result;

  v5 = 0;
  v6 = 0uLL;
  v7 = 16;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v10 = (int16x8_t)vpadalq_u8((uint16x8_t)v10, vabdq_u8(*a1, *(uint8x16_t *)(*a3 + v5)));
    v9 = (int16x8_t)vpadalq_u8((uint16x8_t)v9, vabdq_u8(*a1, *(uint8x16_t *)(a3[1] + v5)));
    v8 = (int16x8_t)vpadalq_u8((uint16x8_t)v8, vabdq_u8(*a1, *(uint8x16_t *)(a3[2] + v5)));
    v6 = (int16x8_t)vpadalq_u8((uint16x8_t)v6, vabdq_u8(*a1, *(uint8x16_t *)(a3[3] + v5)));
    v5 += 2 * a4;
    a1 = (uint8x16_t *)((char *)a1 + 2 * a2);
    --v7;
  }
  while (v7);
  v11 = (int32x4_t)vpaddlq_u16((uint16x8_t)vpaddq_s16(vpaddq_s16(v10, v9), vpaddq_s16(v8, v6)));
  result = vaddq_s32(v11, v11);
  *a5 = result;
  return result;
}

int32x4_t vpx_sad_skip_32x16x4d_neon(uint8x16_t *a1, int a2, uint8x16_t **a3, int a4, int32x4_t *a5)
{
  uint8x16_t *v5;
  uint8x16_t *v6;
  uint8x16_t v7;
  uint8x16_t *v8;
  uint8x16_t *v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v12;
  uint8x16_t v13;
  uint64_t v14;
  uint8x16_t *v15;
  uint8x16_t *v16;
  uint8x16_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint8x16_t *v24;
  uint64_t v25;
  uint8x16_t *v26;
  uint8x16_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint8x16_t *v32;
  uint64_t v33;
  uint8x16_t *v34;
  uint8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint8x16_t *v44;
  uint64_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  uint8x16_t *v55;
  uint64_t v56;
  uint8x16_t v57;
  uint8x16_t v58;
  uint16x8_t v59;
  uint8x16_t v60;
  uint16x8_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint8x16_t *v64;
  uint16x8_t v65;
  uint16x8_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint8x16_t *v70;
  uint64_t v71;
  uint8x16_t v72;
  uint8x16_t v73;
  uint16x8_t v74;
  uint8x16_t v75;
  uint16x8_t v76;
  uint8x16_t v77;
  uint16x8_t v78;
  uint8x16_t *v79;
  uint16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  uint8x16_t *v85;
  uint64_t v86;
  uint8x16_t v87;
  int32x4_t v88;
  int32x4_t result;

  v6 = *a3;
  v5 = a3[1];
  v7 = a1[1];
  v9 = a3[2];
  v8 = a3[3];
  v10 = vabdq_u8(v7, (*a3)[1]);
  v11 = vabdq_u8(v7, v5[1]);
  v12 = vabdq_u8(v7, v9[1]);
  v13 = vabdq_u8(v7, v8[1]);
  v14 = 2 * a4;
  v15 = (uint8x16_t *)((char *)a1 + 2 * a2);
  v16 = (uint8x16_t *)((char *)*a3 + v14);
  v17 = v15[1];
  v18 = vpadalq_u8(vpaddlq_u8(vabdq_u8(*v15, *v16)), vabdq_u8(*a1, **a3));
  v19 = vpadalq_u8(vpaddlq_u8(vabdq_u8(*v15, *(uint8x16_t *)((char *)v5 + v14))), vabdq_u8(*a1, *v5));
  v20 = vpadalq_u8(vpaddlq_u8(vabdq_u8(*v15, *(uint8x16_t *)((char *)v9 + v14))), vabdq_u8(*a1, *v9));
  v21 = vpadalq_u8(vpaddlq_u8(vabdq_u8(*v15, *(uint8x16_t *)((char *)v8 + v14))), vabdq_u8(*a1, *v8));
  v22 = vpadalq_u8(vpaddlq_u8(vabdq_u8(v17, v16[1])), v10);
  v23 = vpadalq_u8(vpaddlq_u8(vabdq_u8(v17, *(uint8x16_t *)((char *)&v8[1] + v14))), v13);
  v24 = (uint8x16_t *)((char *)a1 + 4 * a2);
  v25 = 4 * a4;
  v26 = (uint8x16_t *)((char *)*a3 + v25);
  v27 = v24[1];
  v28 = vpadalq_u8(v22, vabdq_u8(v27, v26[1]));
  v29 = vpadalq_u8(vpadalq_u8(vpaddlq_u8(vabdq_u8(v17, *(uint8x16_t *)((char *)&v5[1] + v14))), v11), vabdq_u8(v27, *(uint8x16_t *)((char *)&v5[1] + v25)));
  v30 = vpadalq_u8(vpadalq_u8(vpaddlq_u8(vabdq_u8(v17, *(uint8x16_t *)((char *)&v9[1] + v14))), v12), vabdq_u8(v27, *(uint8x16_t *)((char *)&v9[1] + v25)));
  v31 = vpadalq_u8(v23, vabdq_u8(v27, *(uint8x16_t *)((char *)&v8[1] + v25)));
  v32 = (uint8x16_t *)((char *)a1 + 6 * a2);
  v33 = 6 * a4;
  v34 = (uint8x16_t *)((char *)*a3 + v33);
  v35 = v32[1];
  v36 = vpadalq_u8(vpadalq_u8(v18, vabdq_u8(*v24, *v26)), vabdq_u8(*v32, *v34));
  v37 = vpadalq_u8(vpadalq_u8(v19, vabdq_u8(*v24, *(uint8x16_t *)((char *)v5 + v25))), vabdq_u8(*v32, *(uint8x16_t *)((char *)v5 + v33)));
  v38 = vpadalq_u8(vpadalq_u8(v20, vabdq_u8(*v24, *(uint8x16_t *)((char *)v9 + v25))), vabdq_u8(*v32, *(uint8x16_t *)((char *)v9 + v33)));
  v39 = vpadalq_u8(vpadalq_u8(v21, vabdq_u8(*v24, *(uint8x16_t *)((char *)v8 + v25))), vabdq_u8(*v32, *(uint8x16_t *)((char *)v8 + v33)));
  v40 = vpadalq_u8(v28, vabdq_u8(v35, v34[1]));
  v41 = vpadalq_u8(v29, vabdq_u8(v35, *(uint8x16_t *)((char *)&v5[1] + v33)));
  v42 = vpadalq_u8(v30, vabdq_u8(v35, *(uint8x16_t *)((char *)&v9[1] + v33)));
  v43 = vpadalq_u8(v31, vabdq_u8(v35, *(uint8x16_t *)((char *)&v8[1] + v33)));
  v44 = (uint8x16_t *)((char *)a1 + 8 * a2);
  v45 = 8 * a4;
  v46 = v44[1];
  v47 = vpadalq_u8(v36, vabdq_u8(*v44, *(uint8x16_t *)((char *)v6 + v45)));
  v48 = vpadalq_u8(v37, vabdq_u8(*v44, *(uint8x16_t *)((char *)v5 + v45)));
  v49 = vpadalq_u8(v38, vabdq_u8(*v44, *(uint8x16_t *)((char *)v9 + v45)));
  v50 = vpadalq_u8(v39, vabdq_u8(*v44, *(uint8x16_t *)((char *)v8 + v45)));
  v51 = vpadalq_u8(v40, vabdq_u8(v46, *(uint8x16_t *)((char *)&v6[1] + v45)));
  v52 = vpadalq_u8(v41, vabdq_u8(v46, *(uint8x16_t *)((char *)&v5[1] + v45)));
  v53 = vpadalq_u8(v42, vabdq_u8(v46, *(uint8x16_t *)((char *)&v9[1] + v45)));
  v54 = vpadalq_u8(v43, vabdq_u8(v46, *(uint8x16_t *)((char *)&v8[1] + v45)));
  v55 = (uint8x16_t *)((char *)a1 + 10 * a2);
  v56 = 10 * a4;
  v57 = v55[1];
  v58 = *(uint8x16_t *)((char *)&v6[1] + v56);
  v59 = vpadalq_u8(v47, vabdq_u8(*v55, *(uint8x16_t *)((char *)v6 + v56)));
  v60 = *(uint8x16_t *)((char *)&v5[1] + v56);
  v61 = vpadalq_u8(v48, vabdq_u8(*v55, *(uint8x16_t *)((char *)v5 + v56)));
  v62 = *(uint8x16_t *)((char *)&v9[1] + v56);
  v63 = vpadalq_u8(v49, vabdq_u8(*v55, *(uint8x16_t *)((char *)v9 + v56)));
  v64 = (uint8x16_t *)((char *)v8 + v56);
  v65 = vpadalq_u8(v50, vabdq_u8(*v55, *v64));
  v66 = vpadalq_u8(v51, vabdq_u8(v57, v58));
  v67 = vpadalq_u8(v52, vabdq_u8(v57, v60));
  v68 = vpadalq_u8(v53, vabdq_u8(v57, v62));
  v69 = vpadalq_u8(v54, vabdq_u8(v57, v64[1]));
  v70 = (uint8x16_t *)((char *)a1 + 12 * a2);
  v71 = 12 * a4;
  v72 = v70[1];
  v73 = *(uint8x16_t *)((char *)&v6[1] + v71);
  v74 = vpadalq_u8(v59, vabdq_u8(*v70, *(uint8x16_t *)((char *)v6 + v71)));
  v75 = *(uint8x16_t *)((char *)&v5[1] + v71);
  v76 = vpadalq_u8(v61, vabdq_u8(*v70, *(uint8x16_t *)((char *)v5 + v71)));
  v77 = *(uint8x16_t *)((char *)&v9[1] + v71);
  v78 = vpadalq_u8(v63, vabdq_u8(*v70, *(uint8x16_t *)((char *)v9 + v71)));
  v79 = (uint8x16_t *)((char *)v8 + v71);
  v80 = vpadalq_u8(v65, vabdq_u8(*v70, *v79));
  v81 = vpadalq_u8(v66, vabdq_u8(v72, v73));
  v82 = vpadalq_u8(v67, vabdq_u8(v72, v75));
  v83 = vpadalq_u8(v68, vabdq_u8(v72, v77));
  v84 = vpadalq_u8(v69, vabdq_u8(v72, v79[1]));
  v85 = (uint8x16_t *)((char *)a1 + 14 * a2);
  v86 = 14 * a4;
  v87 = v85[1];
  v88 = vpaddq_s32(vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(vpadalq_u8(v81, vabdq_u8(v87, *(uint8x16_t *)((char *)&v6[1] + v86)))), vpadalq_u8(v74, vabdq_u8(*v85, *(uint8x16_t *)((char *)v6 + v86)))), (int32x4_t)vpadalq_u16(vpaddlq_u16(vpadalq_u8(v82, vabdq_u8(v87, *(uint8x16_t *)((char *)&v5[1] + v86)))), vpadalq_u8(v76, vabdq_u8(*v85, *(uint8x16_t *)((char *)v5 + v86))))), vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(vpadalq_u8(v83, vabdq_u8(v87, *(uint8x16_t *)((char *)&v9[1] + v86)))), vpadalq_u8(v78, vabdq_u8(*v85, *(uint8x16_t *)((char *)v9 + v86)))), (int32x4_t)vpadalq_u16(vpaddlq_u16(vpadalq_u8(v84, vabdq_u8(v87, *(uint8x16_t *)((char *)&v8[1] + v86)))), vpadalq_u8(v80, vabdq_u8(*v85, *(uint8x16_t *)((char *)v8 + v86))))));
  result = vaddq_s32(v88, v88);
  *a5 = result;
  return result;
}

int32x4_t vpx_sad_skip_32x32x4d_neon(uint8x16_t *a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8x16_t *v11;
  uint64_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint8x16_t v19;
  int32x4_t v20;
  int32x4_t result;

  v5 = 0;
  v6 = a3[1];
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = a3[2];
  v10 = a3[3];
  v11 = a1 + 1;
  v12 = 16;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 0uLL;
  do
  {
    v19 = v11[-1];
    v14 = vpadalq_u8(v14, vabdq_u8(v19, *(uint8x16_t *)(*a3 + v5)));
    v13 = vpadalq_u8(v13, vabdq_u8(v19, *(uint8x16_t *)(v6 + v5)));
    v8 = vpadalq_u8(v8, vabdq_u8(v19, *(uint8x16_t *)(v9 + v5)));
    v7 = vpadalq_u8(v7, vabdq_u8(v19, *(uint8x16_t *)(v10 + v5)));
    v18 = vpadalq_u8(v18, vabdq_u8(*v11, *(uint8x16_t *)(*a3 + 16 + v5)));
    v17 = vpadalq_u8(v17, vabdq_u8(*v11, *(uint8x16_t *)(v6 + v5 + 16)));
    v16 = vpadalq_u8(v16, vabdq_u8(*v11, *(uint8x16_t *)(v9 + v5 + 16)));
    v15 = vpadalq_u8(v15, vabdq_u8(*v11, *(uint8x16_t *)(v10 + v5 + 16)));
    v11 = (uint8x16_t *)((char *)v11 + 2 * a2);
    v5 += 2 * a4;
    --v12;
  }
  while (v12);
  v20 = vpaddq_s32(vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v18), v14), (int32x4_t)vpadalq_u16(vpaddlq_u16(v17), v13)), vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v16), v8), (int32x4_t)vpadalq_u16(vpaddlq_u16(v15), v7)));
  result = vaddq_s32(v20, v20);
  *a5 = result;
  return result;
}

int32x4_t vpx_sad_skip_32x64x4d_neon(uint8x16_t *a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8x16_t *v11;
  uint64_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint8x16_t v19;
  int32x4_t v20;
  int32x4_t result;

  v5 = 0;
  v6 = a3[1];
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = a3[2];
  v10 = a3[3];
  v11 = a1 + 1;
  v12 = 32;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 0uLL;
  do
  {
    v19 = v11[-1];
    v14 = vpadalq_u8(v14, vabdq_u8(v19, *(uint8x16_t *)(*a3 + v5)));
    v13 = vpadalq_u8(v13, vabdq_u8(v19, *(uint8x16_t *)(v6 + v5)));
    v8 = vpadalq_u8(v8, vabdq_u8(v19, *(uint8x16_t *)(v9 + v5)));
    v7 = vpadalq_u8(v7, vabdq_u8(v19, *(uint8x16_t *)(v10 + v5)));
    v18 = vpadalq_u8(v18, vabdq_u8(*v11, *(uint8x16_t *)(*a3 + 16 + v5)));
    v17 = vpadalq_u8(v17, vabdq_u8(*v11, *(uint8x16_t *)(v6 + v5 + 16)));
    v16 = vpadalq_u8(v16, vabdq_u8(*v11, *(uint8x16_t *)(v9 + v5 + 16)));
    v15 = vpadalq_u8(v15, vabdq_u8(*v11, *(uint8x16_t *)(v10 + v5 + 16)));
    v11 = (uint8x16_t *)((char *)v11 + 2 * a2);
    v5 += 2 * a4;
    --v12;
  }
  while (v12);
  v20 = vpaddq_s32(vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v18), v14), (int32x4_t)vpadalq_u16(vpaddlq_u16(v17), v13)), vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v16), v8), (int32x4_t)vpadalq_u16(vpaddlq_u16(v15), v7)));
  result = vaddq_s32(v20, v20);
  *a5 = result;
  return result;
}

int32x4_t vpx_sad_skip_64x32x4d_neon(uint8x16_t *a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint8x16_t *v9;
  uint64_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  int32x4_t v20;
  int32x4_t result;

  v5 = 0;
  v6 = a3[3];
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = a1 + 2;
  v10 = 16;
  v11 = 0uLL;
  v12 = 0uLL;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  do
  {
    v17 = v9[-2];
    v18 = v9[-1];
    v19 = v9[1];
    v12 = vpadalq_u8(vpadalq_u8(v12, vabdq_u8(v17, *(uint8x16_t *)(*a3 + v5))), vabdq_u8(*v9, *(uint8x16_t *)(*a3 + 48 + v5 - 16)));
    v11 = vpadalq_u8(vpadalq_u8(v11, vabdq_u8(v17, *(uint8x16_t *)(a3[1] + v5))), vabdq_u8(*v9, *(uint8x16_t *)(a3[1] + 48 + v5 - 16)));
    v8 = vpadalq_u8(vpadalq_u8(v8, vabdq_u8(v17, *(uint8x16_t *)(a3[2] + v5))), vabdq_u8(*v9, *(uint8x16_t *)(a3[2] + 32 + v5)));
    v7 = vpadalq_u8(vpadalq_u8(v7, vabdq_u8(v17, *(uint8x16_t *)(v6 + v5))), vabdq_u8(*v9, *(uint8x16_t *)(v6 + v5 + 32)));
    v16 = vpadalq_u8(vpadalq_u8(v16, vabdq_u8(v18, *(uint8x16_t *)(*a3 + 48 + v5 - 32))), vabdq_u8(v19, *(uint8x16_t *)(*a3 + 48 + v5)));
    v15 = vpadalq_u8(vpadalq_u8(v15, vabdq_u8(v18, *(uint8x16_t *)(a3[1] + 48 + v5 - 32))), vabdq_u8(v19, *(uint8x16_t *)(a3[1] + 48 + v5)));
    v14 = vpadalq_u8(vpadalq_u8(v14, vabdq_u8(v18, *(uint8x16_t *)(a3[2] + 32 + v5 - 16))), vabdq_u8(v19, *(uint8x16_t *)(a3[2] + 32 + v5 + 16)));
    v13 = vpadalq_u8(vpadalq_u8(v13, vabdq_u8(v18, *(uint8x16_t *)(v6 + v5 + 16))), vabdq_u8(v19, *(uint8x16_t *)(v6 + v5 + 48)));
    v9 = (uint8x16_t *)((char *)v9 + 2 * a2);
    v5 += 2 * a4;
    --v10;
  }
  while (v10);
  v20 = vpaddq_s32(vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v16), v12), (int32x4_t)vpadalq_u16(vpaddlq_u16(v15), v11)), vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v14), v8), (int32x4_t)vpadalq_u16(vpaddlq_u16(v13), v7)));
  result = vaddq_s32(v20, v20);
  *a5 = result;
  return result;
}

int32x4_t vpx_sad_skip_64x64x4d_neon(uint8x16_t *a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint8x16_t *v9;
  uint64_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  int32x4_t v20;
  int32x4_t result;

  v5 = 0;
  v6 = a3[3];
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = a1 + 2;
  v10 = 32;
  v11 = 0uLL;
  v12 = 0uLL;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  do
  {
    v17 = v9[-2];
    v18 = v9[-1];
    v19 = v9[1];
    v12 = vpadalq_u8(vpadalq_u8(v12, vabdq_u8(v17, *(uint8x16_t *)(*a3 + v5))), vabdq_u8(*v9, *(uint8x16_t *)(*a3 + 48 + v5 - 16)));
    v11 = vpadalq_u8(vpadalq_u8(v11, vabdq_u8(v17, *(uint8x16_t *)(a3[1] + v5))), vabdq_u8(*v9, *(uint8x16_t *)(a3[1] + 48 + v5 - 16)));
    v8 = vpadalq_u8(vpadalq_u8(v8, vabdq_u8(v17, *(uint8x16_t *)(a3[2] + v5))), vabdq_u8(*v9, *(uint8x16_t *)(a3[2] + 32 + v5)));
    v7 = vpadalq_u8(vpadalq_u8(v7, vabdq_u8(v17, *(uint8x16_t *)(v6 + v5))), vabdq_u8(*v9, *(uint8x16_t *)(v6 + v5 + 32)));
    v16 = vpadalq_u8(vpadalq_u8(v16, vabdq_u8(v18, *(uint8x16_t *)(*a3 + 48 + v5 - 32))), vabdq_u8(v19, *(uint8x16_t *)(*a3 + 48 + v5)));
    v15 = vpadalq_u8(vpadalq_u8(v15, vabdq_u8(v18, *(uint8x16_t *)(a3[1] + 48 + v5 - 32))), vabdq_u8(v19, *(uint8x16_t *)(a3[1] + 48 + v5)));
    v14 = vpadalq_u8(vpadalq_u8(v14, vabdq_u8(v18, *(uint8x16_t *)(a3[2] + 32 + v5 - 16))), vabdq_u8(v19, *(uint8x16_t *)(a3[2] + 32 + v5 + 16)));
    v13 = vpadalq_u8(vpadalq_u8(v13, vabdq_u8(v18, *(uint8x16_t *)(v6 + v5 + 16))), vabdq_u8(v19, *(uint8x16_t *)(v6 + v5 + 48)));
    v9 = (uint8x16_t *)((char *)v9 + 2 * a2);
    v5 += 2 * a4;
    --v10;
  }
  while (v10);
  v20 = vpaddq_s32(vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v16), v12), (int32x4_t)vpadalq_u16(vpaddlq_u16(v15), v11)), vpaddq_s32((int32x4_t)vpadalq_u16(vpaddlq_u16(v14), v8), (int32x4_t)vpadalq_u16(vpaddlq_u16(v13), v7)));
  result = vaddq_s32(v20, v20);
  *a5 = result;
  return result;
}

uint64_t vpx_sad4x4_neon(__int32 *a1, int a2, __int32 *a3, int a4)
{
  uint8x8_t v4;
  uint8x8_t v5;
  __int32 *v6;
  __int32 *v7;
  uint8x8_t v8;
  uint8x8_t v9;

  v4.i32[0] = *a1;
  v4.i32[1] = *(__int32 *)((char *)a1 + a2);
  v5.i32[0] = *a3;
  v5.i32[1] = *(__int32 *)((char *)a3 + a4);
  v6 = (__int32 *)((char *)a1 + 2 * a2);
  v7 = (__int32 *)((char *)a3 + 2 * a4);
  v8.i32[0] = *v6;
  v8.i32[1] = *(__int32 *)((char *)v6 + a2);
  v9.i32[0] = *v7;
  v9.i32[1] = *(__int32 *)((char *)v7 + a4);
  return vaddlvq_u16(vabal_u8(vabdl_u8(v8, v9), v4, v5));
}

uint64_t vpx_sad4x8_neon(__int32 *a1, int a2, __int32 *a3, int a4)
{
  uint64_t v4;
  uint8x8_t v5;
  uint64_t v6;
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint16x8_t v10;
  __int32 *v11;
  __int32 *v12;
  uint16x8_t v13;
  __int32 *v14;
  __int32 *v15;

  v4 = 2 * a2;
  v5.i32[0] = *a1;
  v5.i32[1] = *(__int32 *)((char *)a1 + a2);
  v6 = 2 * a4;
  v7.i32[0] = *a3;
  v7.i32[1] = *(__int32 *)((char *)a3 + a4);
  v8.i32[0] = *(__int32 *)((char *)a1 + v4);
  v8.i32[1] = *(__int32 *)((char *)a1 + v4 + a2);
  v9.i32[0] = *(__int32 *)((char *)a3 + v6);
  v9.i32[1] = *(__int32 *)((char *)a3 + v6 + a4);
  v10 = vabal_u8(vabdl_u8(v8, v9), v5, v7);
  v11 = (__int32 *)((char *)a1 + v4 + v4);
  v12 = (__int32 *)((char *)a3 + v6 + v6);
  v5.i32[0] = *v11;
  v5.i32[1] = *(__int32 *)((char *)v11 + a2);
  v7.i32[0] = *v12;
  v7.i32[1] = *(__int32 *)((char *)v12 + a4);
  v13 = vabal_u8(v10, v5, v7);
  v14 = (__int32 *)((char *)v11 + v4);
  v15 = (__int32 *)((char *)v12 + v6);
  v5.i32[0] = *v14;
  v5.i32[1] = *(__int32 *)((char *)v14 + a2);
  v7.i32[0] = *v15;
  v7.i32[1] = *(__int32 *)((char *)v15 + a4);
  return vaddlvq_u16(vabal_u8(v13, v5, v7));
}

uint64_t vpx_sad8x4_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4)
{
  return vaddlvq_u16(vabal_u8(vabal_u8(vabal_u8(vabdl_u8(*(uint8x8_t *)((char *)a1 + a2), *(uint8x8_t *)((char *)a3 + a4)), *a1, *a3), *(uint8x8_t *)((char *)a1 + a2 + a2), *(uint8x8_t *)((char *)a3 + a4 + a4)), *(uint8x8_t *)((char *)a1 + a2 + a2 + a2), *(uint8x8_t *)((char *)a3 + a4 + a4 + a4)));
}

uint64_t vpx_sad8x8_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4)
{
  uint8x8_t *v4;
  uint8x8_t *v5;
  uint16x8_t v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  uint16x8_t v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  uint16x8_t v12;
  uint8x8_t *v13;
  uint8x8_t *v14;

  v4 = (uint8x8_t *)((char *)a1 + a2);
  v5 = (uint8x8_t *)((char *)a3 + a4);
  v6 = vabal_u8(vabdl_u8(*v4, *v5), *a1, *a3);
  v7 = (uint8x8_t *)((char *)v4 + a2);
  v8 = (uint8x8_t *)((char *)v5 + a4);
  v9 = vabal_u8(v6, *v7, *v8);
  v10 = (uint8x8_t *)((char *)v7 + a2);
  v11 = (uint8x8_t *)((char *)v8 + a4);
  v12 = vabal_u8(v9, *v10, *v11);
  v13 = (uint8x8_t *)((char *)v10 + a2);
  v14 = (uint8x8_t *)((char *)v11 + a4);
  return vaddlvq_u16(vabal_u8(vabal_u8(vabal_u8(vabal_u8(v12, *v13, *v14), *(uint8x8_t *)((char *)v13 + a2), *(uint8x8_t *)((char *)v14 + a4)), *(uint8x8_t *)((char *)v13 + a2 + a2), *(uint8x8_t *)((char *)v14 + a4 + a4)), *(uint8x8_t *)((char *)v13 + a2 + a2 + a2), *(uint8x8_t *)((char *)v14 + a4 + a4 + a4)));
}

uint64_t vpx_sad8x16_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4)
{
  uint8x8_t *v4;
  uint8x8_t *v5;
  uint16x8_t v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  uint16x8_t v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  uint16x8_t v12;
  uint8x8_t *v13;
  uint8x8_t *v14;
  uint16x8_t v15;
  uint8x8_t *v16;
  uint8x8_t *v17;
  uint16x8_t v18;
  uint8x8_t *v19;
  uint8x8_t *v20;
  uint16x8_t v21;
  uint8x8_t *v22;
  uint8x8_t *v23;
  uint16x8_t v24;
  uint8x8_t *v25;
  uint8x8_t *v26;
  uint16x8_t v27;
  uint8x8_t *v28;
  uint8x8_t *v29;
  uint16x8_t v30;
  uint8x8_t *v31;
  uint8x8_t *v32;
  uint16x8_t v33;
  uint8x8_t *v34;
  uint8x8_t *v35;
  uint16x8_t v36;
  uint8x8_t *v37;
  uint8x8_t *v38;

  v4 = (uint8x8_t *)((char *)a1 + a2);
  v5 = (uint8x8_t *)((char *)a3 + a4);
  v6 = vabal_u8(vabdl_u8(*v4, *v5), *a1, *a3);
  v7 = (uint8x8_t *)((char *)v4 + a2);
  v8 = (uint8x8_t *)((char *)v5 + a4);
  v9 = vabal_u8(v6, *v7, *v8);
  v10 = (uint8x8_t *)((char *)v7 + a2);
  v11 = (uint8x8_t *)((char *)v8 + a4);
  v12 = vabal_u8(v9, *v10, *v11);
  v13 = (uint8x8_t *)((char *)v10 + a2);
  v14 = (uint8x8_t *)((char *)v11 + a4);
  v15 = vabal_u8(v12, *v13, *v14);
  v16 = (uint8x8_t *)((char *)v13 + a2);
  v17 = (uint8x8_t *)((char *)v14 + a4);
  v18 = vabal_u8(v15, *v16, *v17);
  v19 = (uint8x8_t *)((char *)v16 + a2);
  v20 = (uint8x8_t *)((char *)v17 + a4);
  v21 = vabal_u8(v18, *v19, *v20);
  v22 = (uint8x8_t *)((char *)v19 + a2);
  v23 = (uint8x8_t *)((char *)v20 + a4);
  v24 = vabal_u8(v21, *v22, *v23);
  v25 = (uint8x8_t *)((char *)v22 + a2);
  v26 = (uint8x8_t *)((char *)v23 + a4);
  v27 = vabal_u8(v24, *v25, *v26);
  v28 = (uint8x8_t *)((char *)v25 + a2);
  v29 = (uint8x8_t *)((char *)v26 + a4);
  v30 = vabal_u8(v27, *v28, *v29);
  v31 = (uint8x8_t *)((char *)v28 + a2);
  v32 = (uint8x8_t *)((char *)v29 + a4);
  v33 = vabal_u8(v30, *v31, *v32);
  v34 = (uint8x8_t *)((char *)v31 + a2);
  v35 = (uint8x8_t *)((char *)v32 + a4);
  v36 = vabal_u8(v33, *v34, *v35);
  v37 = (uint8x8_t *)((char *)v34 + a2);
  v38 = (uint8x8_t *)((char *)v35 + a4);
  return vaddlvq_u16(vabal_u8(vabal_u8(vabal_u8(vabal_u8(v36, *v37, *v38), *(uint8x8_t *)((char *)v37 + a2), *(uint8x8_t *)((char *)v38 + a4)), *(uint8x8_t *)((char *)v37 + a2 + a2), *(uint8x8_t *)((char *)v38 + a4 + a4)), *(uint8x8_t *)((char *)v37 + a2 + a2 + a2), *(uint8x8_t *)((char *)v38 + a4 + a4 + a4)));
}

uint64_t vpx_sad16x8_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint16x8_t v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  uint16x8_t v9;
  uint8x16_t *v10;
  uint8x16_t *v11;
  uint16x8_t v12;
  uint8x16_t *v13;
  uint8x16_t *v14;

  v4 = (uint8x16_t *)((char *)a1 + a2);
  v5 = (uint8x16_t *)((char *)a3 + a4);
  v6 = vpadalq_u8(vpaddlq_u8(vabdq_u8(*v4, *v5)), vabdq_u8(*a1, *a3));
  v7 = (uint8x16_t *)((char *)v4 + a2);
  v8 = (uint8x16_t *)((char *)v5 + a4);
  v9 = vpadalq_u8(v6, vabdq_u8(*v7, *v8));
  v10 = (uint8x16_t *)((char *)v7 + a2);
  v11 = (uint8x16_t *)((char *)v8 + a4);
  v12 = vpadalq_u8(v9, vabdq_u8(*v10, *v11));
  v13 = (uint8x16_t *)((char *)v10 + a2);
  v14 = (uint8x16_t *)((char *)v11 + a4);
  return vaddlvq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpadalq_u8(v12, vabdq_u8(*v13, *v14)), vabdq_u8(*(uint8x16_t *)((char *)v13 + a2), *(uint8x16_t *)((char *)v14 + a4))), vabdq_u8(*(uint8x16_t *)((char *)v13 + a2 + a2), *(uint8x16_t *)((char *)v14 + a4 + a4))), vabdq_u8(*(uint8x16_t *)((char *)v13 + a2 + a2 + a2), *(uint8x16_t *)((char *)v14 + a4 + a4 + a4))));
}

uint64_t vpx_sad16x16_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint16x8_t v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  uint16x8_t v9;
  uint8x16_t *v10;
  uint8x16_t *v11;
  uint16x8_t v12;
  uint8x16_t *v13;
  uint8x16_t *v14;
  uint16x8_t v15;
  uint8x16_t *v16;
  uint8x16_t *v17;
  uint16x8_t v18;
  uint8x16_t *v19;
  uint8x16_t *v20;
  uint16x8_t v21;
  uint8x16_t *v22;
  uint8x16_t *v23;
  uint16x8_t v24;
  uint8x16_t *v25;
  uint8x16_t *v26;
  uint16x8_t v27;
  uint8x16_t *v28;
  uint8x16_t *v29;
  uint16x8_t v30;
  uint8x16_t *v31;
  uint8x16_t *v32;
  uint16x8_t v33;
  uint8x16_t *v34;
  uint8x16_t *v35;
  uint16x8_t v36;
  uint8x16_t *v37;
  uint8x16_t *v38;

  v4 = (uint8x16_t *)((char *)a1 + a2);
  v5 = (uint8x16_t *)((char *)a3 + a4);
  v6 = vpadalq_u8(vpaddlq_u8(vabdq_u8(*v4, *v5)), vabdq_u8(*a1, *a3));
  v7 = (uint8x16_t *)((char *)v4 + a2);
  v8 = (uint8x16_t *)((char *)v5 + a4);
  v9 = vpadalq_u8(v6, vabdq_u8(*v7, *v8));
  v10 = (uint8x16_t *)((char *)v7 + a2);
  v11 = (uint8x16_t *)((char *)v8 + a4);
  v12 = vpadalq_u8(v9, vabdq_u8(*v10, *v11));
  v13 = (uint8x16_t *)((char *)v10 + a2);
  v14 = (uint8x16_t *)((char *)v11 + a4);
  v15 = vpadalq_u8(v12, vabdq_u8(*v13, *v14));
  v16 = (uint8x16_t *)((char *)v13 + a2);
  v17 = (uint8x16_t *)((char *)v14 + a4);
  v18 = vpadalq_u8(v15, vabdq_u8(*v16, *v17));
  v19 = (uint8x16_t *)((char *)v16 + a2);
  v20 = (uint8x16_t *)((char *)v17 + a4);
  v21 = vpadalq_u8(v18, vabdq_u8(*v19, *v20));
  v22 = (uint8x16_t *)((char *)v19 + a2);
  v23 = (uint8x16_t *)((char *)v20 + a4);
  v24 = vpadalq_u8(v21, vabdq_u8(*v22, *v23));
  v25 = (uint8x16_t *)((char *)v22 + a2);
  v26 = (uint8x16_t *)((char *)v23 + a4);
  v27 = vpadalq_u8(v24, vabdq_u8(*v25, *v26));
  v28 = (uint8x16_t *)((char *)v25 + a2);
  v29 = (uint8x16_t *)((char *)v26 + a4);
  v30 = vpadalq_u8(v27, vabdq_u8(*v28, *v29));
  v31 = (uint8x16_t *)((char *)v28 + a2);
  v32 = (uint8x16_t *)((char *)v29 + a4);
  v33 = vpadalq_u8(v30, vabdq_u8(*v31, *v32));
  v34 = (uint8x16_t *)((char *)v31 + a2);
  v35 = (uint8x16_t *)((char *)v32 + a4);
  v36 = vpadalq_u8(v33, vabdq_u8(*v34, *v35));
  v37 = (uint8x16_t *)((char *)v34 + a2);
  v38 = (uint8x16_t *)((char *)v35 + a4);
  return vaddlvq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpadalq_u8(v36, vabdq_u8(*v37, *v38)), vabdq_u8(*(uint8x16_t *)((char *)v37 + a2), *(uint8x16_t *)((char *)v38 + a4))), vabdq_u8(*(uint8x16_t *)((char *)v37 + a2 + a2), *(uint8x16_t *)((char *)v38 + a4 + a4))), vabdq_u8(*(uint8x16_t *)((char *)v37 + a2 + a2 + a2), *(uint8x16_t *)((char *)v38 + a4 + a4 + a4))));
}

uint64_t vpx_sad16x32_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint16x8_t v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  uint16x8_t v9;
  uint8x16_t *v10;
  uint8x16_t *v11;
  uint16x8_t v12;
  uint8x16_t *v13;
  uint8x16_t *v14;
  uint16x8_t v15;
  uint8x16_t *v16;
  uint8x16_t *v17;
  uint16x8_t v18;
  uint8x16_t *v19;
  uint8x16_t *v20;
  uint16x8_t v21;
  uint8x16_t *v22;
  uint8x16_t *v23;
  uint16x8_t v24;
  uint8x16_t *v25;
  uint8x16_t *v26;
  uint16x8_t v27;
  uint8x16_t *v28;
  uint8x16_t *v29;
  uint16x8_t v30;
  uint8x16_t *v31;
  uint8x16_t *v32;
  uint16x8_t v33;
  uint8x16_t *v34;
  uint8x16_t *v35;
  uint16x8_t v36;
  uint8x16_t *v37;
  uint8x16_t *v38;
  uint16x8_t v39;
  uint8x16_t *v40;
  uint8x16_t *v41;
  uint16x8_t v42;
  uint8x16_t *v43;
  uint8x16_t *v44;
  uint16x8_t v45;
  uint8x16_t *v46;
  uint8x16_t *v47;
  uint16x8_t v48;
  uint8x16_t *v49;
  uint8x16_t *v50;
  uint16x8_t v51;
  uint8x16_t *v52;
  uint8x16_t *v53;
  uint16x8_t v54;
  uint8x16_t *v55;
  uint8x16_t *v56;
  uint16x8_t v57;
  uint8x16_t *v58;
  uint8x16_t *v59;
  uint16x8_t v60;
  uint8x16_t *v61;
  uint8x16_t *v62;
  uint16x8_t v63;
  uint8x16_t *v64;
  uint8x16_t *v65;
  uint16x8_t v66;
  uint8x16_t *v67;
  uint8x16_t *v68;
  uint16x8_t v69;
  uint8x16_t *v70;
  uint8x16_t *v71;
  uint16x8_t v72;
  uint8x16_t *v73;
  uint8x16_t *v74;
  uint16x8_t v75;
  uint8x16_t *v76;
  uint8x16_t *v77;
  uint16x8_t v78;
  uint8x16_t *v79;
  uint8x16_t *v80;
  uint16x8_t v81;
  uint8x16_t *v82;
  uint8x16_t *v83;
  uint16x8_t v84;
  uint8x16_t *v85;
  uint8x16_t *v86;

  v4 = (uint8x16_t *)((char *)a1 + a2);
  v5 = (uint8x16_t *)((char *)a3 + a4);
  v6 = vpadalq_u8(vpaddlq_u8(vabdq_u8(*v4, *v5)), vabdq_u8(*a1, *a3));
  v7 = (uint8x16_t *)((char *)v4 + a2);
  v8 = (uint8x16_t *)((char *)v5 + a4);
  v9 = vpadalq_u8(v6, vabdq_u8(*v7, *v8));
  v10 = (uint8x16_t *)((char *)v7 + a2);
  v11 = (uint8x16_t *)((char *)v8 + a4);
  v12 = vpadalq_u8(v9, vabdq_u8(*v10, *v11));
  v13 = (uint8x16_t *)((char *)v10 + a2);
  v14 = (uint8x16_t *)((char *)v11 + a4);
  v15 = vpadalq_u8(v12, vabdq_u8(*v13, *v14));
  v16 = (uint8x16_t *)((char *)v13 + a2);
  v17 = (uint8x16_t *)((char *)v14 + a4);
  v18 = vpadalq_u8(v15, vabdq_u8(*v16, *v17));
  v19 = (uint8x16_t *)((char *)v16 + a2);
  v20 = (uint8x16_t *)((char *)v17 + a4);
  v21 = vpadalq_u8(v18, vabdq_u8(*v19, *v20));
  v22 = (uint8x16_t *)((char *)v19 + a2);
  v23 = (uint8x16_t *)((char *)v20 + a4);
  v24 = vpadalq_u8(v21, vabdq_u8(*v22, *v23));
  v25 = (uint8x16_t *)((char *)v22 + a2);
  v26 = (uint8x16_t *)((char *)v23 + a4);
  v27 = vpadalq_u8(v24, vabdq_u8(*v25, *v26));
  v28 = (uint8x16_t *)((char *)v25 + a2);
  v29 = (uint8x16_t *)((char *)v26 + a4);
  v30 = vpadalq_u8(v27, vabdq_u8(*v28, *v29));
  v31 = (uint8x16_t *)((char *)v28 + a2);
  v32 = (uint8x16_t *)((char *)v29 + a4);
  v33 = vpadalq_u8(v30, vabdq_u8(*v31, *v32));
  v34 = (uint8x16_t *)((char *)v31 + a2);
  v35 = (uint8x16_t *)((char *)v32 + a4);
  v36 = vpadalq_u8(v33, vabdq_u8(*v34, *v35));
  v37 = (uint8x16_t *)((char *)v34 + a2);
  v38 = (uint8x16_t *)((char *)v35 + a4);
  v39 = vpadalq_u8(v36, vabdq_u8(*v37, *v38));
  v40 = (uint8x16_t *)((char *)v37 + a2);
  v41 = (uint8x16_t *)((char *)v38 + a4);
  v42 = vpadalq_u8(v39, vabdq_u8(*v40, *v41));
  v43 = (uint8x16_t *)((char *)v40 + a2);
  v44 = (uint8x16_t *)((char *)v41 + a4);
  v45 = vpadalq_u8(v42, vabdq_u8(*v43, *v44));
  v46 = (uint8x16_t *)((char *)v43 + a2);
  v47 = (uint8x16_t *)((char *)v44 + a4);
  v48 = vpadalq_u8(v45, vabdq_u8(*v46, *v47));
  v49 = (uint8x16_t *)((char *)v46 + a2);
  v50 = (uint8x16_t *)((char *)v47 + a4);
  v51 = vpadalq_u8(v48, vabdq_u8(*v49, *v50));
  v52 = (uint8x16_t *)((char *)v49 + a2);
  v53 = (uint8x16_t *)((char *)v50 + a4);
  v54 = vpadalq_u8(v51, vabdq_u8(*v52, *v53));
  v55 = (uint8x16_t *)((char *)v52 + a2);
  v56 = (uint8x16_t *)((char *)v53 + a4);
  v57 = vpadalq_u8(v54, vabdq_u8(*v55, *v56));
  v58 = (uint8x16_t *)((char *)v55 + a2);
  v59 = (uint8x16_t *)((char *)v56 + a4);
  v60 = vpadalq_u8(v57, vabdq_u8(*v58, *v59));
  v61 = (uint8x16_t *)((char *)v58 + a2);
  v62 = (uint8x16_t *)((char *)v59 + a4);
  v63 = vpadalq_u8(v60, vabdq_u8(*v61, *v62));
  v64 = (uint8x16_t *)((char *)v61 + a2);
  v65 = (uint8x16_t *)((char *)v62 + a4);
  v66 = vpadalq_u8(v63, vabdq_u8(*v64, *v65));
  v67 = (uint8x16_t *)((char *)v64 + a2);
  v68 = (uint8x16_t *)((char *)v65 + a4);
  v69 = vpadalq_u8(v66, vabdq_u8(*v67, *v68));
  v70 = (uint8x16_t *)((char *)v67 + a2);
  v71 = (uint8x16_t *)((char *)v68 + a4);
  v72 = vpadalq_u8(v69, vabdq_u8(*v70, *v71));
  v73 = (uint8x16_t *)((char *)v70 + a2);
  v74 = (uint8x16_t *)((char *)v71 + a4);
  v75 = vpadalq_u8(v72, vabdq_u8(*v73, *v74));
  v76 = (uint8x16_t *)((char *)v73 + a2);
  v77 = (uint8x16_t *)((char *)v74 + a4);
  v78 = vpadalq_u8(v75, vabdq_u8(*v76, *v77));
  v79 = (uint8x16_t *)((char *)v76 + a2);
  v80 = (uint8x16_t *)((char *)v77 + a4);
  v81 = vpadalq_u8(v78, vabdq_u8(*v79, *v80));
  v82 = (uint8x16_t *)((char *)v79 + a2);
  v83 = (uint8x16_t *)((char *)v80 + a4);
  v84 = vpadalq_u8(v81, vabdq_u8(*v82, *v83));
  v85 = (uint8x16_t *)((char *)v82 + a2);
  v86 = (uint8x16_t *)((char *)v83 + a4);
  return vaddlvq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpadalq_u8(v84, vabdq_u8(*v85, *v86)), vabdq_u8(*(uint8x16_t *)((char *)v85 + a2), *(uint8x16_t *)((char *)v86 + a4))), vabdq_u8(*(uint8x16_t *)((char *)v85 + a2 + a2), *(uint8x16_t *)((char *)v86 + a4 + a4))), vabdq_u8(*(uint8x16_t *)((char *)v85 + a2 + a2 + a2), *(uint8x16_t *)((char *)v86 + a4 + a4 + a4))));
}

uint64_t vpx_sad32x16_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint32x4_t v6;
  uint8x16_t *v7;
  uint8x16_t *v8;
  uint32x4_t v9;
  uint8x16_t *v10;
  uint8x16_t *v11;
  uint32x4_t v12;
  uint8x16_t *v13;
  uint8x16_t *v14;
  uint32x4_t v15;
  uint8x16_t *v16;
  uint8x16_t *v17;
  uint32x4_t v18;
  uint8x16_t *v19;
  uint8x16_t *v20;
  uint32x4_t v21;
  uint8x16_t *v22;
  uint8x16_t *v23;
  uint32x4_t v24;
  uint8x16_t *v25;
  uint8x16_t *v26;
  uint32x4_t v27;
  uint8x16_t *v28;
  uint8x16_t *v29;
  uint32x4_t v30;
  uint8x16_t *v31;
  uint8x16_t *v32;
  uint32x4_t v33;
  uint8x16_t *v34;
  uint8x16_t *v35;
  uint32x4_t v36;
  uint8x16_t *v37;
  uint8x16_t *v38;
  uint32x4_t v39;
  uint8x16_t *v40;
  uint8x16_t *v41;
  uint32x4_t v42;
  uint8x16_t *v43;
  uint8x16_t *v44;

  v4 = (uint8x16_t *)((char *)a1 + a2);
  v5 = (uint8x16_t *)((char *)a3 + a4);
  v6 = vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vpaddlq_u8(vabdq_u8(a1[1], a3[1]))), vpaddlq_u8(vabdq_u8(*a1, *a3))), vpaddlq_u8(vabdq_u8(*v4, *v5))), vpaddlq_u8(vabdq_u8(v4[1], v5[1])));
  v7 = (uint8x16_t *)((char *)v4 + a2);
  v8 = (uint8x16_t *)((char *)v5 + a4);
  v9 = vpadalq_u16(vpadalq_u16(v6, vpaddlq_u8(vabdq_u8(*v7, *v8))), vpaddlq_u8(vabdq_u8(v7[1], v8[1])));
  v10 = (uint8x16_t *)((char *)v7 + a2);
  v11 = (uint8x16_t *)((char *)v8 + a4);
  v12 = vpadalq_u16(vpadalq_u16(v9, vpaddlq_u8(vabdq_u8(*v10, *v11))), vpaddlq_u8(vabdq_u8(v10[1], v11[1])));
  v13 = (uint8x16_t *)((char *)v10 + a2);
  v14 = (uint8x16_t *)((char *)v11 + a4);
  v15 = vpadalq_u16(vpadalq_u16(v12, vpaddlq_u8(vabdq_u8(*v13, *v14))), vpaddlq_u8(vabdq_u8(v13[1], v14[1])));
  v16 = (uint8x16_t *)((char *)v13 + a2);
  v17 = (uint8x16_t *)((char *)v14 + a4);
  v18 = vpadalq_u16(vpadalq_u16(v15, vpaddlq_u8(vabdq_u8(*v16, *v17))), vpaddlq_u8(vabdq_u8(v16[1], v17[1])));
  v19 = (uint8x16_t *)((char *)v16 + a2);
  v20 = (uint8x16_t *)((char *)v17 + a4);
  v21 = vpadalq_u16(vpadalq_u16(v18, vpaddlq_u8(vabdq_u8(*v19, *v20))), vpaddlq_u8(vabdq_u8(v19[1], v20[1])));
  v22 = (uint8x16_t *)((char *)v19 + a2);
  v23 = (uint8x16_t *)((char *)v20 + a4);
  v24 = vpadalq_u16(vpadalq_u16(v21, vpaddlq_u8(vabdq_u8(*v22, *v23))), vpaddlq_u8(vabdq_u8(v22[1], v23[1])));
  v25 = (uint8x16_t *)((char *)v22 + a2);
  v26 = (uint8x16_t *)((char *)v23 + a4);
  v27 = vpadalq_u16(vpadalq_u16(v24, vpaddlq_u8(vabdq_u8(*v25, *v26))), vpaddlq_u8(vabdq_u8(v25[1], v26[1])));
  v28 = (uint8x16_t *)((char *)v25 + a2);
  v29 = (uint8x16_t *)((char *)v26 + a4);
  v30 = vpadalq_u16(vpadalq_u16(v27, vpaddlq_u8(vabdq_u8(*v28, *v29))), vpaddlq_u8(vabdq_u8(v28[1], v29[1])));
  v31 = (uint8x16_t *)((char *)v28 + a2);
  v32 = (uint8x16_t *)((char *)v29 + a4);
  v33 = vpadalq_u16(vpadalq_u16(v30, vpaddlq_u8(vabdq_u8(*v31, *v32))), vpaddlq_u8(vabdq_u8(v31[1], v32[1])));
  v34 = (uint8x16_t *)((char *)v31 + a2);
  v35 = (uint8x16_t *)((char *)v32 + a4);
  v36 = vpadalq_u16(vpadalq_u16(v33, vpaddlq_u8(vabdq_u8(*v34, *v35))), vpaddlq_u8(vabdq_u8(v34[1], v35[1])));
  v37 = (uint8x16_t *)((char *)v34 + a2);
  v38 = (uint8x16_t *)((char *)v35 + a4);
  v39 = vpadalq_u16(vpadalq_u16(v36, vpaddlq_u8(vabdq_u8(*v37, *v38))), vpaddlq_u8(vabdq_u8(v37[1], v38[1])));
  v40 = (uint8x16_t *)((char *)v37 + a2);
  v41 = (uint8x16_t *)((char *)v38 + a4);
  v42 = vpadalq_u16(vpadalq_u16(v39, vpaddlq_u8(vabdq_u8(*v40, *v41))), vpaddlq_u8(vabdq_u8(v40[1], v41[1])));
  v43 = (uint8x16_t *)((char *)v40 + a2);
  v44 = (uint8x16_t *)((char *)v41 + a4);
  return vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(v42, vpaddlq_u8(vabdq_u8(*v43, *v44))), vpaddlq_u8(vabdq_u8(v43[1], v44[1]))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v43 + a2), *(uint8x16_t *)((char *)v44 + a4)))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)&v43[1] + a2), *(uint8x16_t *)((char *)&v44[1] + a4)))));
}

uint64_t vpx_sad32x32_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint8x16_t *v4;
  uint8x16_t *v5;
  int32x4_t v6;
  int v7;

  v4 = a3 + 1;
  v5 = a1 + 1;
  v6 = 0uLL;
  v7 = -32;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vpaddlq_u8(vabdq_u8(v5[-1], v4[-1]))), vpaddlq_u8(vabdq_u8(*v5, *v4)));
    v4 = (uint8x16_t *)((char *)v4 + a4);
    v5 = (uint8x16_t *)((char *)v5 + a2);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(v6);
}

uint64_t vpx_sad32x64_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint8x16_t *v4;
  uint8x16_t *v5;
  int32x4_t v6;
  int v7;

  v4 = a3 + 1;
  v5 = a1 + 1;
  v6 = 0uLL;
  v7 = -64;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vpaddlq_u8(vabdq_u8(v5[-1], v4[-1]))), vpaddlq_u8(vabdq_u8(*v5, *v4)));
    v4 = (uint8x16_t *)((char *)v4 + a4);
    v5 = (uint8x16_t *)((char *)v5 + a2);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(v6);
}

uint64_t vpx_sad64x32_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint16x8_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint16x8_t v9;
  int v10;

  v4 = a1 + 2;
  v5 = a3 + 2;
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -32;
  do
  {
    v6 = vpadalq_u8(v6, vabdq_u8(v4[-2], v5[-2]));
    v7 = vpadalq_u8(v7, vabdq_u8(v4[-1], v5[-1]));
    v8 = vpadalq_u8(v8, vabdq_u8(*v4, *v5));
    v9 = vpadalq_u8(v9, vabdq_u8(v4[1], v5[1]));
    v4 = (uint8x16_t *)((char *)v4 + a2);
    v5 = (uint8x16_t *)((char *)v5 + a4);
  }
  while (!__CFADD__(v10++, 1));
  return vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(v7), v6), v8), v9));
}

uint64_t vpx_sad64x64_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint16x8_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint16x8_t v9;
  int v10;

  v4 = a1 + 2;
  v5 = a3 + 2;
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -64;
  do
  {
    v6 = vpadalq_u8(v6, vabdq_u8(v4[-2], v5[-2]));
    v7 = vpadalq_u8(v7, vabdq_u8(v4[-1], v5[-1]));
    v8 = vpadalq_u8(v8, vabdq_u8(*v4, *v5));
    v9 = vpadalq_u8(v9, vabdq_u8(v4[1], v5[1]));
    v4 = (uint8x16_t *)((char *)v4 + a2);
    v5 = (uint8x16_t *)((char *)v5 + a4);
  }
  while (!__CFADD__(v10++, 1));
  return vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(v7), v6), v8), v9));
}

uint64_t vpx_sad_skip_4x4_neon(__int32 *a1, int a2, __int32 *a3, int a4)
{
  uint8x8_t v4;
  uint8x8_t v5;

  v4.i32[0] = *a1;
  v4.i32[1] = *(__int32 *)((char *)a1 + 2 * a2);
  v5.i32[0] = *a3;
  v5.i32[1] = *(__int32 *)((char *)a3 + 2 * a4);
  return 2 * vaddlvq_u16(vabdl_u8(v4, v5));
}

uint64_t vpx_sad_skip_4x8_neon(__int32 *a1, int a2, __int32 *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  uint8x8_t v7;
  __int32 *v8;
  __int32 *v9;
  uint8x8_t v10;
  uint8x8_t v11;

  v4 = 2 * a2;
  v5 = 2 * a4;
  v6.i32[0] = *a1;
  v6.i32[1] = *(__int32 *)((char *)a1 + v4);
  v7.i32[0] = *a3;
  v7.i32[1] = *(__int32 *)((char *)a3 + v5);
  v8 = &a1[a2];
  v9 = &a3[a4];
  v10.i32[0] = *v8;
  v10.i32[1] = *(__int32 *)((char *)v8 + v4);
  v11.i32[0] = *v9;
  v11.i32[1] = *(__int32 *)((char *)v9 + v5);
  return 2 * vaddlvq_u16(vabal_u8(vabdl_u8(v10, v11), v6, v7));
}

uint64_t vpx_sad_skip_8x4_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4)
{
  return 2
       * vaddlvq_u16(vabal_u8(vabdl_u8(*(uint8x8_t *)((char *)a1 + 2 * a2), *(uint8x8_t *)((char *)a3 + 2 * a4)), *a1, *a3));
}

uint64_t vpx_sad_skip_8x8_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 2 * a2;
  v5 = 2 * a4;
  return 2
       * vaddlvq_u16(vabal_u8(vabal_u8(vabal_u8(vabdl_u8(*(uint8x8_t *)((char *)a1 + v4), *(uint8x8_t *)((char *)a3 + v5)), *a1, *a3), *(uint8x8_t *)((char *)a1 + v4 + v4), *(uint8x8_t *)((char *)a3 + v5 + v5)), *(uint8x8_t *)((char *)a1 + v4 + v4 + v4), *(uint8x8_t *)((char *)a3 + v5 + v5 + v5)));
}

uint64_t vpx_sad_skip_8x16_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  uint16x8_t v8;
  uint8x8_t *v9;
  uint8x8_t *v10;
  uint16x8_t v11;
  uint8x8_t *v12;

  v4 = 2 * a2;
  v5 = 2 * a4;
  v6 = (uint8x8_t *)((char *)a1 + v4 + v4);
  v7 = (uint8x8_t *)((char *)a3 + v5 + v5);
  v8 = vabal_u8(vabal_u8(vabdl_u8(*(uint8x8_t *)((char *)a1 + v4), *(uint8x8_t *)((char *)a3 + v5)), *a1, *a3), *v6, *v7);
  v9 = (uint8x8_t *)((char *)v6 + v4);
  v10 = (uint8x8_t *)((char *)v7 + v5);
  v11 = vabal_u8(v8, *v9, *v10);
  v12 = (uint8x8_t *)((char *)v9 + v4);
  return 2
       * vaddlvq_u16(vabal_u8(vabal_u8(vabal_u8(vabal_u8(v11, *v12, *(uint8x8_t *)((char *)v10 + v5)), *(uint8x8_t *)((char *)v12 + v4), *(uint8x8_t *)((char *)v10 + v5 + v5)), *(uint8x8_t *)((char *)v12 + v4 + v4), *(uint8x8_t *)((char *)v10 + v5 + v5 + v5)), *(uint8x8_t *)((char *)v12 + v4 + v4 + v4), *(uint8x8_t *)((char *)v10 + v5 + v5 + v5 + v5)));
}

uint64_t vpx_sad_skip_16x8_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 2 * a2;
  v5 = 2 * a4;
  return 2
       * vaddlvq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)a1 + v4), *(uint8x16_t *)((char *)a3 + v5))), vabdq_u8(*a1, *a3)), vabdq_u8(*(uint8x16_t *)((char *)a1 + v4 + v4), *(uint8x16_t *)((char *)a3 + v5 + v5))), vabdq_u8(*(uint8x16_t *)((char *)a1 + v4 + v4 + v4), *(uint8x16_t *)((char *)a3 + v5 + v5 + v5))));
}

uint64_t vpx_sad_skip_16x16_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint8x16_t *v6;
  uint8x16_t *v7;
  uint16x8_t v8;
  uint8x16_t *v9;
  uint8x16_t *v10;
  uint16x8_t v11;
  uint8x16_t *v12;
  uint8x16_t *v13;

  v4 = 2 * a2;
  v5 = 2 * a4;
  v6 = (uint8x16_t *)((char *)a1 + v4 + v4);
  v7 = (uint8x16_t *)((char *)a3 + v5 + v5);
  v8 = vpadalq_u8(vpadalq_u8(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)a1 + v4), *(uint8x16_t *)((char *)a3 + v5))), vabdq_u8(*a1, *a3)), vabdq_u8(*v6, *v7));
  v9 = (uint8x16_t *)((char *)v6 + v4);
  v10 = (uint8x16_t *)((char *)v7 + v5);
  v11 = vpadalq_u8(v8, vabdq_u8(*v9, *v10));
  v12 = (uint8x16_t *)((char *)v9 + v4);
  v13 = (uint8x16_t *)((char *)v10 + v5);
  return 2
       * vaddlvq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpadalq_u8(v11, vabdq_u8(*v12, *v13)), vabdq_u8(*(uint8x16_t *)((char *)v12 + v4), *(uint8x16_t *)((char *)v13 + v5))), vabdq_u8(*(uint8x16_t *)((char *)v12 + v4 + v4), *(uint8x16_t *)((char *)v13 + v5 + v5))), vabdq_u8(*(uint8x16_t *)((char *)v12 + v4 + v4 + v4), *(uint8x16_t *)((char *)v13 + v5 + v5 + v5))));
}

uint64_t vpx_sad_skip_16x32_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint8x16_t *v6;
  uint8x16_t *v7;
  uint16x8_t v8;
  uint8x16_t *v9;
  uint8x16_t *v10;
  uint16x8_t v11;
  uint8x16_t *v12;
  uint8x16_t *v13;
  uint16x8_t v14;
  uint8x16_t *v15;
  uint8x16_t *v16;
  uint16x8_t v17;
  uint8x16_t *v18;
  uint8x16_t *v19;
  uint16x8_t v20;
  uint8x16_t *v21;
  uint8x16_t *v22;
  uint16x8_t v23;
  uint8x16_t *v24;
  uint8x16_t *v25;
  uint16x8_t v26;
  uint8x16_t *v27;
  uint8x16_t *v28;
  uint16x8_t v29;
  uint8x16_t *v30;
  uint8x16_t *v31;
  uint16x8_t v32;
  uint8x16_t *v33;
  uint8x16_t *v34;
  uint16x8_t v35;
  uint8x16_t *v36;
  uint8x16_t *v37;

  v4 = 2 * a2;
  v5 = 2 * a4;
  v6 = (uint8x16_t *)((char *)a1 + v4 + v4);
  v7 = (uint8x16_t *)((char *)a3 + v5 + v5);
  v8 = vpadalq_u8(vpadalq_u8(vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)a1 + v4), *(uint8x16_t *)((char *)a3 + v5))), vabdq_u8(*a1, *a3)), vabdq_u8(*v6, *v7));
  v9 = (uint8x16_t *)((char *)v6 + v4);
  v10 = (uint8x16_t *)((char *)v7 + v5);
  v11 = vpadalq_u8(v8, vabdq_u8(*v9, *v10));
  v12 = (uint8x16_t *)((char *)v9 + v4);
  v13 = (uint8x16_t *)((char *)v10 + v5);
  v14 = vpadalq_u8(v11, vabdq_u8(*v12, *v13));
  v15 = (uint8x16_t *)((char *)v12 + v4);
  v16 = (uint8x16_t *)((char *)v13 + v5);
  v17 = vpadalq_u8(v14, vabdq_u8(*v15, *v16));
  v18 = (uint8x16_t *)((char *)v15 + v4);
  v19 = (uint8x16_t *)((char *)v16 + v5);
  v20 = vpadalq_u8(v17, vabdq_u8(*v18, *v19));
  v21 = (uint8x16_t *)((char *)v18 + v4);
  v22 = (uint8x16_t *)((char *)v19 + v5);
  v23 = vpadalq_u8(v20, vabdq_u8(*v21, *v22));
  v24 = (uint8x16_t *)((char *)v21 + v4);
  v25 = (uint8x16_t *)((char *)v22 + v5);
  v26 = vpadalq_u8(v23, vabdq_u8(*v24, *v25));
  v27 = (uint8x16_t *)((char *)v24 + v4);
  v28 = (uint8x16_t *)((char *)v25 + v5);
  v29 = vpadalq_u8(v26, vabdq_u8(*v27, *v28));
  v30 = (uint8x16_t *)((char *)v27 + v4);
  v31 = (uint8x16_t *)((char *)v28 + v5);
  v32 = vpadalq_u8(v29, vabdq_u8(*v30, *v31));
  v33 = (uint8x16_t *)((char *)v30 + v4);
  v34 = (uint8x16_t *)((char *)v31 + v5);
  v35 = vpadalq_u8(v32, vabdq_u8(*v33, *v34));
  v36 = (uint8x16_t *)((char *)v33 + v4);
  v37 = (uint8x16_t *)((char *)v34 + v5);
  return 2
       * vaddlvq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpadalq_u8(v35, vabdq_u8(*v36, *v37)), vabdq_u8(*(uint8x16_t *)((char *)v36 + v4), *(uint8x16_t *)((char *)v37 + v5))), vabdq_u8(*(uint8x16_t *)((char *)v36 + v4 + v4), *(uint8x16_t *)((char *)v37 + v5 + v5))), vabdq_u8(*(uint8x16_t *)((char *)v36 + v4 + v4 + v4), *(uint8x16_t *)((char *)v37 + v5 + v5 + v5))));
}

uint64_t vpx_sad_skip_32x16_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint8x16_t *v6;
  uint8x16_t *v7;
  uint32x4_t v8;
  uint8x16_t *v9;
  uint8x16_t *v10;
  uint32x4_t v11;
  uint8x16_t *v12;
  uint8x16_t *v13;
  uint32x4_t v14;
  uint8x16_t *v15;
  uint8x16_t *v16;
  uint32x4_t v17;
  uint8x16_t *v18;

  v4 = 2 * a2;
  v5 = 2 * a4;
  v6 = (uint8x16_t *)((char *)a1 + v4 + v4);
  v7 = (uint8x16_t *)((char *)a3 + v5 + v5);
  v8 = vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vpaddlq_u8(vabdq_u8(a1[1], a3[1]))), vpaddlq_u8(vabdq_u8(*a1, *a3))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)a1 + v4), *(uint8x16_t *)((char *)a3 + v5)))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)&a1[1] + v4), *(uint8x16_t *)((char *)&a3[1] + v5)))), vpaddlq_u8(vabdq_u8(*v6, *v7))), vpaddlq_u8(vabdq_u8(v6[1], v7[1])));
  v9 = (uint8x16_t *)((char *)v6 + v4);
  v10 = (uint8x16_t *)((char *)v7 + v5);
  v11 = vpadalq_u16(vpadalq_u16(v8, vpaddlq_u8(vabdq_u8(*v9, *v10))), vpaddlq_u8(vabdq_u8(v9[1], v10[1])));
  v12 = (uint8x16_t *)((char *)v9 + v4);
  v13 = (uint8x16_t *)((char *)v10 + v5);
  v14 = vpadalq_u16(vpadalq_u16(v11, vpaddlq_u8(vabdq_u8(*v12, *v13))), vpaddlq_u8(vabdq_u8(v12[1], v13[1])));
  v15 = (uint8x16_t *)((char *)v12 + v4);
  v16 = (uint8x16_t *)((char *)v13 + v5);
  v17 = vpadalq_u16(vpadalq_u16(v14, vpaddlq_u8(vabdq_u8(*v15, *v16))), vpaddlq_u8(vabdq_u8(v15[1], v16[1])));
  v18 = (uint8x16_t *)((char *)v16 + v5);
  return (2
                      * vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(v17, vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v15 + v4), *v18))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)&v15[1] + v4), v18[1]))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v15 + v4 + v4), *(uint8x16_t *)((char *)v18 + v5)))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)&v15[1] + v4 + v4), *(uint8x16_t *)((char *)&v18[1] + v5))))));
}

uint64_t vpx_sad_skip_32x32_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint8x16_t *v6;
  uint8x16_t *v7;
  uint32x4_t v8;
  uint8x16_t *v9;
  uint8x16_t *v10;
  uint32x4_t v11;
  uint8x16_t *v12;
  uint8x16_t *v13;
  uint32x4_t v14;
  uint8x16_t *v15;
  uint8x16_t *v16;
  uint32x4_t v17;
  uint8x16_t *v18;
  uint8x16_t *v19;
  uint32x4_t v20;
  uint8x16_t *v21;
  uint8x16_t *v22;
  uint32x4_t v23;
  uint8x16_t *v24;
  uint8x16_t *v25;
  uint32x4_t v26;
  uint8x16_t *v27;
  uint8x16_t *v28;
  uint32x4_t v29;
  uint8x16_t *v30;
  uint8x16_t *v31;
  uint32x4_t v32;
  uint8x16_t *v33;
  uint8x16_t *v34;
  uint32x4_t v35;
  uint8x16_t *v36;
  uint8x16_t *v37;
  uint32x4_t v38;
  uint8x16_t *v39;
  uint8x16_t *v40;
  uint32x4_t v41;
  uint8x16_t *v42;

  v4 = 2 * a2;
  v5 = 2 * a4;
  v6 = (uint8x16_t *)((char *)a1 + v4 + v4);
  v7 = (uint8x16_t *)((char *)a3 + v5 + v5);
  v8 = vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vpaddlq_u8(vabdq_u8(a1[1], a3[1]))), vpaddlq_u8(vabdq_u8(*a1, *a3))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)a1 + v4), *(uint8x16_t *)((char *)a3 + v5)))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)&a1[1] + v4), *(uint8x16_t *)((char *)&a3[1] + v5)))), vpaddlq_u8(vabdq_u8(*v6, *v7))), vpaddlq_u8(vabdq_u8(v6[1], v7[1])));
  v9 = (uint8x16_t *)((char *)v6 + v4);
  v10 = (uint8x16_t *)((char *)v7 + v5);
  v11 = vpadalq_u16(vpadalq_u16(v8, vpaddlq_u8(vabdq_u8(*v9, *v10))), vpaddlq_u8(vabdq_u8(v9[1], v10[1])));
  v12 = (uint8x16_t *)((char *)v9 + v4);
  v13 = (uint8x16_t *)((char *)v10 + v5);
  v14 = vpadalq_u16(vpadalq_u16(v11, vpaddlq_u8(vabdq_u8(*v12, *v13))), vpaddlq_u8(vabdq_u8(v12[1], v13[1])));
  v15 = (uint8x16_t *)((char *)v12 + v4);
  v16 = (uint8x16_t *)((char *)v13 + v5);
  v17 = vpadalq_u16(vpadalq_u16(v14, vpaddlq_u8(vabdq_u8(*v15, *v16))), vpaddlq_u8(vabdq_u8(v15[1], v16[1])));
  v18 = (uint8x16_t *)((char *)v15 + v4);
  v19 = (uint8x16_t *)((char *)v16 + v5);
  v20 = vpadalq_u16(vpadalq_u16(v17, vpaddlq_u8(vabdq_u8(*v18, *v19))), vpaddlq_u8(vabdq_u8(v18[1], v19[1])));
  v21 = (uint8x16_t *)((char *)v18 + v4);
  v22 = (uint8x16_t *)((char *)v19 + v5);
  v23 = vpadalq_u16(vpadalq_u16(v20, vpaddlq_u8(vabdq_u8(*v21, *v22))), vpaddlq_u8(vabdq_u8(v21[1], v22[1])));
  v24 = (uint8x16_t *)((char *)v21 + v4);
  v25 = (uint8x16_t *)((char *)v22 + v5);
  v26 = vpadalq_u16(vpadalq_u16(v23, vpaddlq_u8(vabdq_u8(*v24, *v25))), vpaddlq_u8(vabdq_u8(v24[1], v25[1])));
  v27 = (uint8x16_t *)((char *)v24 + v4);
  v28 = (uint8x16_t *)((char *)v25 + v5);
  v29 = vpadalq_u16(vpadalq_u16(v26, vpaddlq_u8(vabdq_u8(*v27, *v28))), vpaddlq_u8(vabdq_u8(v27[1], v28[1])));
  v30 = (uint8x16_t *)((char *)v27 + v4);
  v31 = (uint8x16_t *)((char *)v28 + v5);
  v32 = vpadalq_u16(vpadalq_u16(v29, vpaddlq_u8(vabdq_u8(*v30, *v31))), vpaddlq_u8(vabdq_u8(v30[1], v31[1])));
  v33 = (uint8x16_t *)((char *)v30 + v4);
  v34 = (uint8x16_t *)((char *)v31 + v5);
  v35 = vpadalq_u16(vpadalq_u16(v32, vpaddlq_u8(vabdq_u8(*v33, *v34))), vpaddlq_u8(vabdq_u8(v33[1], v34[1])));
  v36 = (uint8x16_t *)((char *)v33 + v4);
  v37 = (uint8x16_t *)((char *)v34 + v5);
  v38 = vpadalq_u16(vpadalq_u16(v35, vpaddlq_u8(vabdq_u8(*v36, *v37))), vpaddlq_u8(vabdq_u8(v36[1], v37[1])));
  v39 = (uint8x16_t *)((char *)v36 + v4);
  v40 = (uint8x16_t *)((char *)v37 + v5);
  v41 = vpadalq_u16(vpadalq_u16(v38, vpaddlq_u8(vabdq_u8(*v39, *v40))), vpaddlq_u8(vabdq_u8(v39[1], v40[1])));
  v42 = (uint8x16_t *)((char *)v40 + v5);
  return (2
                      * vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(v41, vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v39 + v4), *v42))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)&v39[1] + v4), v42[1]))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v39 + v4 + v4), *(uint8x16_t *)((char *)v42 + v5)))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)&v39[1] + v4 + v4), *(uint8x16_t *)((char *)&v42[1] + v5))))));
}

uint64_t vpx_sad_skip_32x64_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint8x16_t *v4;
  uint8x16_t *v5;
  int32x4_t v6;
  int v7;

  v4 = a3 + 1;
  v5 = a1 + 1;
  v6 = 0uLL;
  v7 = -32;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vpaddlq_u8(vabdq_u8(v5[-1], v4[-1]))), vpaddlq_u8(vabdq_u8(*v5, *v4)));
    v4 = (uint8x16_t *)((char *)v4 + 2 * a4);
    v5 = (uint8x16_t *)((char *)v5 + 2 * a2);
  }
  while (!__CFADD__(v7++, 1));
  return (2 * vaddvq_s32(v6));
}

uint64_t vpx_sad_skip_64x32_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint16x8_t v6;
  int v7;
  uint16x8_t v8;
  uint16x8_t v9;
  uint16x8_t v10;

  v4 = a1 + 2;
  v5 = a3 + 2;
  v6 = 0uLL;
  v7 = -16;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = vpadalq_u8(v6, vabdq_u8(v4[-2], v5[-2]));
    v8 = vpadalq_u8(v8, vabdq_u8(v4[-1], v5[-1]));
    v9 = vpadalq_u8(v9, vabdq_u8(*v4, *v5));
    v10 = vpadalq_u8(v10, vabdq_u8(v4[1], v5[1]));
    v4 = (uint8x16_t *)((char *)v4 + 2 * a2);
    v5 = (uint8x16_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return (2 * vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(v8), v6), v9), v10)));
}

uint64_t vpx_sad_skip_64x64_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4)
{
  uint8x16_t *v4;
  uint8x16_t *v5;
  uint16x8_t v6;
  int v7;
  uint16x8_t v8;
  uint16x8_t v9;
  uint16x8_t v10;

  v4 = a1 + 2;
  v5 = a3 + 2;
  v6 = 0uLL;
  v7 = -32;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = vpadalq_u8(v6, vabdq_u8(v4[-2], v5[-2]));
    v8 = vpadalq_u8(v8, vabdq_u8(v4[-1], v5[-1]));
    v9 = vpadalq_u8(v9, vabdq_u8(*v4, *v5));
    v10 = vpadalq_u8(v10, vabdq_u8(v4[1], v5[1]));
    v4 = (uint8x16_t *)((char *)v4 + 2 * a2);
    v5 = (uint8x16_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return (2 * vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(v8), v6), v9), v10)));
}

uint64_t vpx_sad4x4_avg_neon(__int32 *a1, int a2, __int32 *a3, int a4, uint8x8_t *a5)
{
  uint8x8_t v5;
  uint8x8_t v6;
  __int32 *v7;
  __int32 *v8;
  uint8x8_t v9;
  uint8x8_t v10;

  v5.i32[0] = *a1;
  v5.i32[1] = *(__int32 *)((char *)a1 + a2);
  v6.i32[0] = *a3;
  v6.i32[1] = *(__int32 *)((char *)a3 + a4);
  v7 = (__int32 *)((char *)a1 + 2 * a2);
  v8 = (__int32 *)((char *)a3 + 2 * a4);
  v9.i32[0] = *v7;
  v9.i32[1] = *(__int32 *)((char *)v7 + a2);
  v10.i32[0] = *v8;
  v10.i32[1] = *(__int32 *)((char *)v8 + a4);
  return vaddlvq_u16(vabal_u8(vabdl_u8(v9, vrhadd_u8(v10, a5[1])), v5, vrhadd_u8(v6, *a5)));
}

uint64_t vpx_sad4x8_avg_neon(__int32 *a1, int a2, __int32 *a3, int a4, uint8x8_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint16x8_t v11;
  __int32 *v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  uint8x8_t v16;
  uint8x8_t v17;

  v5 = 2 * a2;
  v6 = 2 * a4;
  v7.i32[0] = *a1;
  v7.i32[1] = *(__int32 *)((char *)a1 + a2);
  v8.i32[0] = *a3;
  v8.i32[1] = *(__int32 *)((char *)a3 + a4);
  v9.i32[0] = *(__int32 *)((char *)a1 + v5);
  v9.i32[1] = *(__int32 *)((char *)a1 + v5 + a2);
  v10.i32[0] = *(__int32 *)((char *)a3 + v6);
  v10.i32[1] = *(__int32 *)((char *)a3 + v6 + a4);
  v11 = vabal_u8(vabdl_u8(v9, vrhadd_u8(v10, a5[1])), v7, vrhadd_u8(v8, *a5));
  v12 = (__int32 *)((char *)a1 + v5 + v5);
  v7.i32[0] = *v12;
  v7.i32[1] = *(__int32 *)((char *)v12 + a2);
  v13 = (__int32 *)((char *)a3 + v6 + v6);
  v8.i32[0] = *v13;
  v8.i32[1] = *(__int32 *)((char *)v13 + a4);
  v14 = (__int32 *)((char *)v12 + v5);
  v15 = (__int32 *)((char *)v13 + v6);
  v16.i32[0] = *v14;
  v16.i32[1] = *(__int32 *)((char *)v14 + a2);
  v17.i32[0] = *v15;
  v17.i32[1] = *(__int32 *)((char *)v15 + a4);
  return vaddlvq_u16(vabal_u8(vabal_u8(v11, v7, vrhadd_u8(v8, a5[2])), v16, vrhadd_u8(v17, a5[3])));
}

uint64_t vpx_sad8x4_avg_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4, uint8x8_t *a5)
{
  uint8x8_t *v5;
  uint8x8_t *v6;

  v5 = (uint8x8_t *)((char *)a1 + a2);
  v6 = (uint8x8_t *)((char *)a3 + a4);
  return vaddlvq_u16(vabal_u8(vabal_u8(vabal_u8(vabdl_u8(*v5, vrhadd_u8(*v6, a5[1])), *a1, vrhadd_u8(*a3, *a5)), *(uint8x8_t *)((char *)v5 + a2), vrhadd_u8(*(uint8x8_t *)((char *)v6 + a4), a5[2])), *(uint8x8_t *)((char *)v5 + a2 + a2), vrhadd_u8(*(uint8x8_t *)((char *)v6 + a4 + a4), a5[3])));
}

uint64_t vpx_sad8x8_avg_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4, uint8x8_t *a5)
{
  uint8x8_t *v5;
  uint8x8_t *v6;
  uint16x8_t v7;
  uint8x8_t *v8;
  uint8x8_t *v9;
  uint16x8_t v10;
  uint8x8_t *v11;
  uint8x8_t *v12;
  uint16x8_t v13;
  uint8x8_t *v14;
  uint8x8_t *v15;
  uint16x8_t v16;
  uint8x8_t *v17;

  v5 = (uint8x8_t *)((char *)a1 + a2);
  v6 = (uint8x8_t *)((char *)a3 + a4);
  v7 = vabal_u8(vabdl_u8(*v5, vrhadd_u8(*v6, a5[1])), *a1, vrhadd_u8(*a3, *a5));
  v8 = (uint8x8_t *)((char *)v5 + a2);
  v9 = (uint8x8_t *)((char *)v6 + a4);
  v10 = vabal_u8(v7, *v8, vrhadd_u8(*v9, a5[2]));
  v11 = (uint8x8_t *)((char *)v8 + a2);
  v12 = (uint8x8_t *)((char *)v9 + a4);
  v13 = vabal_u8(v10, *v11, vrhadd_u8(*v12, a5[3]));
  v14 = (uint8x8_t *)((char *)v11 + a2);
  v15 = (uint8x8_t *)((char *)v12 + a4);
  v16 = vabal_u8(v13, *v14, vrhadd_u8(*v15, a5[4]));
  v17 = (uint8x8_t *)((char *)v14 + a2);
  return vaddlvq_u16(vabal_u8(vabal_u8(vabal_u8(v16, *v17, vrhadd_u8(*(uint8x8_t *)((char *)v15 + a4), a5[5])), *(uint8x8_t *)((char *)v17 + a2), vrhadd_u8(*(uint8x8_t *)((char *)v15 + a4 + a4), a5[6])), *(uint8x8_t *)((char *)v17 + a2 + a2), vrhadd_u8(*(uint8x8_t *)((char *)v15 + a4 + a4 + a4), a5[7])));
}

uint64_t vpx_sad8x16_avg_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4, uint8x8_t *a5)
{
  uint8x8_t *v5;
  uint8x8_t *v6;
  uint16x8_t v7;
  uint8x8_t *v8;
  uint8x8_t *v9;
  uint16x8_t v10;
  uint8x8_t *v11;
  uint8x8_t *v12;
  uint16x8_t v13;
  uint8x8_t *v14;
  uint8x8_t *v15;
  uint16x8_t v16;
  uint8x8_t *v17;
  uint8x8_t *v18;
  uint16x8_t v19;
  uint8x8_t *v20;
  uint8x8_t *v21;
  uint16x8_t v22;
  uint8x8_t *v23;
  uint8x8_t *v24;
  uint16x8_t v25;
  uint8x8_t *v26;
  uint8x8_t *v27;
  uint16x8_t v28;
  uint8x8_t *v29;
  uint8x8_t *v30;
  uint16x8_t v31;
  uint8x8_t *v32;
  uint8x8_t *v33;
  uint16x8_t v34;
  uint8x8_t *v35;
  uint8x8_t *v36;
  uint16x8_t v37;
  uint8x8_t *v38;
  uint8x8_t *v39;
  uint16x8_t v40;
  uint8x8_t *v41;

  v5 = (uint8x8_t *)((char *)a1 + a2);
  v6 = (uint8x8_t *)((char *)a3 + a4);
  v7 = vabal_u8(vabdl_u8(*v5, vrhadd_u8(*v6, a5[1])), *a1, vrhadd_u8(*a3, *a5));
  v8 = (uint8x8_t *)((char *)v5 + a2);
  v9 = (uint8x8_t *)((char *)v6 + a4);
  v10 = vabal_u8(v7, *v8, vrhadd_u8(*v9, a5[2]));
  v11 = (uint8x8_t *)((char *)v8 + a2);
  v12 = (uint8x8_t *)((char *)v9 + a4);
  v13 = vabal_u8(v10, *v11, vrhadd_u8(*v12, a5[3]));
  v14 = (uint8x8_t *)((char *)v11 + a2);
  v15 = (uint8x8_t *)((char *)v12 + a4);
  v16 = vabal_u8(v13, *v14, vrhadd_u8(*v15, a5[4]));
  v17 = (uint8x8_t *)((char *)v14 + a2);
  v18 = (uint8x8_t *)((char *)v15 + a4);
  v19 = vabal_u8(v16, *v17, vrhadd_u8(*v18, a5[5]));
  v20 = (uint8x8_t *)((char *)v17 + a2);
  v21 = (uint8x8_t *)((char *)v18 + a4);
  v22 = vabal_u8(v19, *v20, vrhadd_u8(*v21, a5[6]));
  v23 = (uint8x8_t *)((char *)v20 + a2);
  v24 = (uint8x8_t *)((char *)v21 + a4);
  v25 = vabal_u8(v22, *v23, vrhadd_u8(*v24, a5[7]));
  v26 = (uint8x8_t *)((char *)v23 + a2);
  v27 = (uint8x8_t *)((char *)v24 + a4);
  v28 = vabal_u8(v25, *v26, vrhadd_u8(*v27, a5[8]));
  v29 = (uint8x8_t *)((char *)v26 + a2);
  v30 = (uint8x8_t *)((char *)v27 + a4);
  v31 = vabal_u8(v28, *v29, vrhadd_u8(*v30, a5[9]));
  v32 = (uint8x8_t *)((char *)v29 + a2);
  v33 = (uint8x8_t *)((char *)v30 + a4);
  v34 = vabal_u8(v31, *v32, vrhadd_u8(*v33, a5[10]));
  v35 = (uint8x8_t *)((char *)v32 + a2);
  v36 = (uint8x8_t *)((char *)v33 + a4);
  v37 = vabal_u8(v34, *v35, vrhadd_u8(*v36, a5[11]));
  v38 = (uint8x8_t *)((char *)v35 + a2);
  v39 = (uint8x8_t *)((char *)v36 + a4);
  v40 = vabal_u8(v37, *v38, vrhadd_u8(*v39, a5[12]));
  v41 = (uint8x8_t *)((char *)v38 + a2);
  return vaddlvq_u16(vabal_u8(vabal_u8(vabal_u8(v40, *v41, vrhadd_u8(*(uint8x8_t *)((char *)v39 + a4), a5[13])), *(uint8x8_t *)((char *)v41 + a2), vrhadd_u8(*(uint8x8_t *)((char *)v39 + a4 + a4), a5[14])), *(uint8x8_t *)((char *)v41 + a2 + a2), vrhadd_u8(*(uint8x8_t *)((char *)v39 + a4 + a4 + a4), a5[15])));
}

uint64_t vpx_sad16x8_avg_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4, uint8x16_t *a5)
{
  uint8x16_t *v5;
  uint8x16_t *v6;
  uint16x8_t v7;
  uint8x16_t *v8;
  uint8x16_t *v9;
  uint16x8_t v10;
  uint8x16_t *v11;
  uint8x16_t *v12;
  uint16x8_t v13;
  uint8x16_t *v14;
  uint8x16_t *v15;
  uint16x8_t v16;
  uint8x16_t *v17;

  v5 = (uint8x16_t *)((char *)a1 + a2);
  v6 = (uint8x16_t *)((char *)a3 + a4);
  v7 = vpadalq_u8(vpaddlq_u8(vabdq_u8(*v5, vrhaddq_u8(*v6, a5[1]))), vabdq_u8(*a1, vrhaddq_u8(*a3, *a5)));
  v8 = (uint8x16_t *)((char *)v5 + a2);
  v9 = (uint8x16_t *)((char *)v6 + a4);
  v10 = vpadalq_u8(v7, vabdq_u8(*v8, vrhaddq_u8(*v9, a5[2])));
  v11 = (uint8x16_t *)((char *)v8 + a2);
  v12 = (uint8x16_t *)((char *)v9 + a4);
  v13 = vpadalq_u8(v10, vabdq_u8(*v11, vrhaddq_u8(*v12, a5[3])));
  v14 = (uint8x16_t *)((char *)v11 + a2);
  v15 = (uint8x16_t *)((char *)v12 + a4);
  v16 = vpadalq_u8(v13, vabdq_u8(*v14, vrhaddq_u8(*v15, a5[4])));
  v17 = (uint8x16_t *)((char *)v14 + a2);
  return vaddlvq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(v16, vabdq_u8(*v17, vrhaddq_u8(*(uint8x16_t *)((char *)v15 + a4), a5[5]))), vabdq_u8(*(uint8x16_t *)((char *)v17 + a2), vrhaddq_u8(*(uint8x16_t *)((char *)v15 + a4 + a4), a5[6]))), vabdq_u8(*(uint8x16_t *)((char *)v17 + a2 + a2), vrhaddq_u8(*(uint8x16_t *)((char *)v15 + a4 + a4 + a4), a5[7]))));
}

uint64_t vpx_sad16x16_avg_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4, uint8x16_t *a5)
{
  uint8x16_t *v5;
  uint8x16_t *v6;
  uint16x8_t v7;
  uint8x16_t *v8;
  uint8x16_t *v9;
  uint16x8_t v10;
  uint8x16_t *v11;
  uint8x16_t *v12;
  uint16x8_t v13;
  uint8x16_t *v14;
  uint8x16_t *v15;
  uint16x8_t v16;
  uint8x16_t *v17;
  uint8x16_t *v18;
  uint16x8_t v19;
  uint8x16_t *v20;
  uint8x16_t *v21;
  uint16x8_t v22;
  uint8x16_t *v23;
  uint8x16_t *v24;
  uint16x8_t v25;
  uint8x16_t *v26;
  uint8x16_t *v27;
  uint16x8_t v28;
  uint8x16_t *v29;
  uint8x16_t *v30;
  uint16x8_t v31;
  uint8x16_t *v32;
  uint8x16_t *v33;
  uint16x8_t v34;
  uint8x16_t *v35;
  uint8x16_t *v36;
  uint16x8_t v37;
  uint8x16_t *v38;
  uint8x16_t *v39;
  uint16x8_t v40;
  uint8x16_t *v41;

  v5 = (uint8x16_t *)((char *)a1 + a2);
  v6 = (uint8x16_t *)((char *)a3 + a4);
  v7 = vpadalq_u8(vpaddlq_u8(vabdq_u8(*v5, vrhaddq_u8(*v6, a5[1]))), vabdq_u8(*a1, vrhaddq_u8(*a3, *a5)));
  v8 = (uint8x16_t *)((char *)v5 + a2);
  v9 = (uint8x16_t *)((char *)v6 + a4);
  v10 = vpadalq_u8(v7, vabdq_u8(*v8, vrhaddq_u8(*v9, a5[2])));
  v11 = (uint8x16_t *)((char *)v8 + a2);
  v12 = (uint8x16_t *)((char *)v9 + a4);
  v13 = vpadalq_u8(v10, vabdq_u8(*v11, vrhaddq_u8(*v12, a5[3])));
  v14 = (uint8x16_t *)((char *)v11 + a2);
  v15 = (uint8x16_t *)((char *)v12 + a4);
  v16 = vpadalq_u8(v13, vabdq_u8(*v14, vrhaddq_u8(*v15, a5[4])));
  v17 = (uint8x16_t *)((char *)v14 + a2);
  v18 = (uint8x16_t *)((char *)v15 + a4);
  v19 = vpadalq_u8(v16, vabdq_u8(*v17, vrhaddq_u8(*v18, a5[5])));
  v20 = (uint8x16_t *)((char *)v17 + a2);
  v21 = (uint8x16_t *)((char *)v18 + a4);
  v22 = vpadalq_u8(v19, vabdq_u8(*v20, vrhaddq_u8(*v21, a5[6])));
  v23 = (uint8x16_t *)((char *)v20 + a2);
  v24 = (uint8x16_t *)((char *)v21 + a4);
  v25 = vpadalq_u8(v22, vabdq_u8(*v23, vrhaddq_u8(*v24, a5[7])));
  v26 = (uint8x16_t *)((char *)v23 + a2);
  v27 = (uint8x16_t *)((char *)v24 + a4);
  v28 = vpadalq_u8(v25, vabdq_u8(*v26, vrhaddq_u8(*v27, a5[8])));
  v29 = (uint8x16_t *)((char *)v26 + a2);
  v30 = (uint8x16_t *)((char *)v27 + a4);
  v31 = vpadalq_u8(v28, vabdq_u8(*v29, vrhaddq_u8(*v30, a5[9])));
  v32 = (uint8x16_t *)((char *)v29 + a2);
  v33 = (uint8x16_t *)((char *)v30 + a4);
  v34 = vpadalq_u8(v31, vabdq_u8(*v32, vrhaddq_u8(*v33, a5[10])));
  v35 = (uint8x16_t *)((char *)v32 + a2);
  v36 = (uint8x16_t *)((char *)v33 + a4);
  v37 = vpadalq_u8(v34, vabdq_u8(*v35, vrhaddq_u8(*v36, a5[11])));
  v38 = (uint8x16_t *)((char *)v35 + a2);
  v39 = (uint8x16_t *)((char *)v36 + a4);
  v40 = vpadalq_u8(v37, vabdq_u8(*v38, vrhaddq_u8(*v39, a5[12])));
  v41 = (uint8x16_t *)((char *)v38 + a2);
  return vaddlvq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(v40, vabdq_u8(*v41, vrhaddq_u8(*(uint8x16_t *)((char *)v39 + a4), a5[13]))), vabdq_u8(*(uint8x16_t *)((char *)v41 + a2), vrhaddq_u8(*(uint8x16_t *)((char *)v39 + a4 + a4), a5[14]))), vabdq_u8(*(uint8x16_t *)((char *)v41 + a2 + a2), vrhaddq_u8(*(uint8x16_t *)((char *)v39 + a4 + a4 + a4), a5[15]))));
}

uint64_t vpx_sad16x32_avg_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4, uint8x16_t *a5)
{
  uint8x16_t *v5;
  uint8x16_t *v6;
  uint16x8_t v7;
  uint8x16_t *v8;
  uint8x16_t *v9;
  uint16x8_t v10;
  uint8x16_t *v11;
  uint8x16_t *v12;
  uint16x8_t v13;
  uint8x16_t *v14;
  uint8x16_t *v15;
  uint16x8_t v16;
  uint8x16_t *v17;
  uint8x16_t *v18;
  uint16x8_t v19;
  uint8x16_t *v20;
  uint8x16_t *v21;
  uint16x8_t v22;
  uint8x16_t *v23;
  uint8x16_t *v24;
  uint16x8_t v25;
  uint8x16_t *v26;
  uint8x16_t *v27;
  uint16x8_t v28;
  uint8x16_t *v29;
  uint8x16_t *v30;
  uint16x8_t v31;
  uint8x16_t *v32;
  uint8x16_t *v33;
  uint16x8_t v34;
  uint8x16_t *v35;
  uint8x16_t *v36;
  uint16x8_t v37;
  uint8x16_t *v38;
  uint8x16_t *v39;
  uint16x8_t v40;
  uint8x16_t *v41;
  uint8x16_t *v42;
  uint16x8_t v43;
  uint8x16_t *v44;
  uint8x16_t *v45;
  uint16x8_t v46;
  uint8x16_t *v47;
  uint8x16_t *v48;
  uint16x8_t v49;
  uint8x16_t *v50;
  uint8x16_t *v51;
  uint16x8_t v52;
  uint8x16_t *v53;
  uint8x16_t *v54;
  uint16x8_t v55;
  uint8x16_t *v56;
  uint8x16_t *v57;
  uint16x8_t v58;
  uint8x16_t *v59;
  uint8x16_t *v60;
  uint16x8_t v61;
  uint8x16_t *v62;
  uint8x16_t *v63;
  uint16x8_t v64;
  uint8x16_t *v65;
  uint8x16_t *v66;
  uint16x8_t v67;
  uint8x16_t *v68;
  uint8x16_t *v69;
  uint16x8_t v70;
  uint8x16_t *v71;
  uint8x16_t *v72;
  uint16x8_t v73;
  uint8x16_t *v74;
  uint8x16_t *v75;
  uint16x8_t v76;
  uint8x16_t *v77;
  uint8x16_t *v78;
  uint16x8_t v79;
  uint8x16_t *v80;
  uint8x16_t *v81;
  uint16x8_t v82;
  uint8x16_t *v83;
  uint8x16_t *v84;
  uint16x8_t v85;
  uint8x16_t *v86;
  uint8x16_t *v87;
  uint16x8_t v88;
  uint8x16_t *v89;

  v5 = (uint8x16_t *)((char *)a1 + a2);
  v6 = (uint8x16_t *)((char *)a3 + a4);
  v7 = vpadalq_u8(vpaddlq_u8(vabdq_u8(*v5, vrhaddq_u8(*v6, a5[1]))), vabdq_u8(*a1, vrhaddq_u8(*a3, *a5)));
  v8 = (uint8x16_t *)((char *)v5 + a2);
  v9 = (uint8x16_t *)((char *)v6 + a4);
  v10 = vpadalq_u8(v7, vabdq_u8(*v8, vrhaddq_u8(*v9, a5[2])));
  v11 = (uint8x16_t *)((char *)v8 + a2);
  v12 = (uint8x16_t *)((char *)v9 + a4);
  v13 = vpadalq_u8(v10, vabdq_u8(*v11, vrhaddq_u8(*v12, a5[3])));
  v14 = (uint8x16_t *)((char *)v11 + a2);
  v15 = (uint8x16_t *)((char *)v12 + a4);
  v16 = vpadalq_u8(v13, vabdq_u8(*v14, vrhaddq_u8(*v15, a5[4])));
  v17 = (uint8x16_t *)((char *)v14 + a2);
  v18 = (uint8x16_t *)((char *)v15 + a4);
  v19 = vpadalq_u8(v16, vabdq_u8(*v17, vrhaddq_u8(*v18, a5[5])));
  v20 = (uint8x16_t *)((char *)v17 + a2);
  v21 = (uint8x16_t *)((char *)v18 + a4);
  v22 = vpadalq_u8(v19, vabdq_u8(*v20, vrhaddq_u8(*v21, a5[6])));
  v23 = (uint8x16_t *)((char *)v20 + a2);
  v24 = (uint8x16_t *)((char *)v21 + a4);
  v25 = vpadalq_u8(v22, vabdq_u8(*v23, vrhaddq_u8(*v24, a5[7])));
  v26 = (uint8x16_t *)((char *)v23 + a2);
  v27 = (uint8x16_t *)((char *)v24 + a4);
  v28 = vpadalq_u8(v25, vabdq_u8(*v26, vrhaddq_u8(*v27, a5[8])));
  v29 = (uint8x16_t *)((char *)v26 + a2);
  v30 = (uint8x16_t *)((char *)v27 + a4);
  v31 = vpadalq_u8(v28, vabdq_u8(*v29, vrhaddq_u8(*v30, a5[9])));
  v32 = (uint8x16_t *)((char *)v29 + a2);
  v33 = (uint8x16_t *)((char *)v30 + a4);
  v34 = vpadalq_u8(v31, vabdq_u8(*v32, vrhaddq_u8(*v33, a5[10])));
  v35 = (uint8x16_t *)((char *)v32 + a2);
  v36 = (uint8x16_t *)((char *)v33 + a4);
  v37 = vpadalq_u8(v34, vabdq_u8(*v35, vrhaddq_u8(*v36, a5[11])));
  v38 = (uint8x16_t *)((char *)v35 + a2);
  v39 = (uint8x16_t *)((char *)v36 + a4);
  v40 = vpadalq_u8(v37, vabdq_u8(*v38, vrhaddq_u8(*v39, a5[12])));
  v41 = (uint8x16_t *)((char *)v38 + a2);
  v42 = (uint8x16_t *)((char *)v39 + a4);
  v43 = vpadalq_u8(v40, vabdq_u8(*v41, vrhaddq_u8(*v42, a5[13])));
  v44 = (uint8x16_t *)((char *)v41 + a2);
  v45 = (uint8x16_t *)((char *)v42 + a4);
  v46 = vpadalq_u8(v43, vabdq_u8(*v44, vrhaddq_u8(*v45, a5[14])));
  v47 = (uint8x16_t *)((char *)v44 + a2);
  v48 = (uint8x16_t *)((char *)v45 + a4);
  v49 = vpadalq_u8(v46, vabdq_u8(*v47, vrhaddq_u8(*v48, a5[15])));
  v50 = (uint8x16_t *)((char *)v47 + a2);
  v51 = (uint8x16_t *)((char *)v48 + a4);
  v52 = vpadalq_u8(v49, vabdq_u8(*v50, vrhaddq_u8(*v51, a5[16])));
  v53 = (uint8x16_t *)((char *)v50 + a2);
  v54 = (uint8x16_t *)((char *)v51 + a4);
  v55 = vpadalq_u8(v52, vabdq_u8(*v53, vrhaddq_u8(*v54, a5[17])));
  v56 = (uint8x16_t *)((char *)v53 + a2);
  v57 = (uint8x16_t *)((char *)v54 + a4);
  v58 = vpadalq_u8(v55, vabdq_u8(*v56, vrhaddq_u8(*v57, a5[18])));
  v59 = (uint8x16_t *)((char *)v56 + a2);
  v60 = (uint8x16_t *)((char *)v57 + a4);
  v61 = vpadalq_u8(v58, vabdq_u8(*v59, vrhaddq_u8(*v60, a5[19])));
  v62 = (uint8x16_t *)((char *)v59 + a2);
  v63 = (uint8x16_t *)((char *)v60 + a4);
  v64 = vpadalq_u8(v61, vabdq_u8(*v62, vrhaddq_u8(*v63, a5[20])));
  v65 = (uint8x16_t *)((char *)v62 + a2);
  v66 = (uint8x16_t *)((char *)v63 + a4);
  v67 = vpadalq_u8(v64, vabdq_u8(*v65, vrhaddq_u8(*v66, a5[21])));
  v68 = (uint8x16_t *)((char *)v65 + a2);
  v69 = (uint8x16_t *)((char *)v66 + a4);
  v70 = vpadalq_u8(v67, vabdq_u8(*v68, vrhaddq_u8(*v69, a5[22])));
  v71 = (uint8x16_t *)((char *)v68 + a2);
  v72 = (uint8x16_t *)((char *)v69 + a4);
  v73 = vpadalq_u8(v70, vabdq_u8(*v71, vrhaddq_u8(*v72, a5[23])));
  v74 = (uint8x16_t *)((char *)v71 + a2);
  v75 = (uint8x16_t *)((char *)v72 + a4);
  v76 = vpadalq_u8(v73, vabdq_u8(*v74, vrhaddq_u8(*v75, a5[24])));
  v77 = (uint8x16_t *)((char *)v74 + a2);
  v78 = (uint8x16_t *)((char *)v75 + a4);
  v79 = vpadalq_u8(v76, vabdq_u8(*v77, vrhaddq_u8(*v78, a5[25])));
  v80 = (uint8x16_t *)((char *)v77 + a2);
  v81 = (uint8x16_t *)((char *)v78 + a4);
  v82 = vpadalq_u8(v79, vabdq_u8(*v80, vrhaddq_u8(*v81, a5[26])));
  v83 = (uint8x16_t *)((char *)v80 + a2);
  v84 = (uint8x16_t *)((char *)v81 + a4);
  v85 = vpadalq_u8(v82, vabdq_u8(*v83, vrhaddq_u8(*v84, a5[27])));
  v86 = (uint8x16_t *)((char *)v83 + a2);
  v87 = (uint8x16_t *)((char *)v84 + a4);
  v88 = vpadalq_u8(v85, vabdq_u8(*v86, vrhaddq_u8(*v87, a5[28])));
  v89 = (uint8x16_t *)((char *)v86 + a2);
  return vaddlvq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(v88, vabdq_u8(*v89, vrhaddq_u8(*(uint8x16_t *)((char *)v87 + a4), a5[29]))), vabdq_u8(*(uint8x16_t *)((char *)v89 + a2), vrhaddq_u8(*(uint8x16_t *)((char *)v87 + a4 + a4), a5[30]))), vabdq_u8(*(uint8x16_t *)((char *)v89 + a2 + a2), vrhaddq_u8(*(uint8x16_t *)((char *)v87 + a4 + a4 + a4), a5[31]))));
}

uint64_t vpx_sad32x16_avg_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4, uint8x16_t *a5)
{
  uint8x16_t *v5;
  uint8x16_t *v6;
  uint32x4_t v7;
  uint8x16_t *v8;
  uint8x16_t *v9;
  uint32x4_t v10;
  uint8x16_t *v11;
  uint8x16_t *v12;
  uint32x4_t v13;
  uint8x16_t *v14;
  uint8x16_t *v15;
  uint32x4_t v16;
  uint8x16_t *v17;
  uint8x16_t *v18;
  uint32x4_t v19;
  uint8x16_t *v20;
  uint8x16_t *v21;
  uint32x4_t v22;
  uint8x16_t *v23;
  uint8x16_t *v24;
  uint32x4_t v25;
  uint8x16_t *v26;
  uint8x16_t *v27;
  uint32x4_t v28;
  uint8x16_t *v29;
  uint8x16_t *v30;
  uint32x4_t v31;
  uint8x16_t *v32;
  uint8x16_t *v33;
  uint32x4_t v34;
  uint8x16_t *v35;
  uint8x16_t *v36;
  uint32x4_t v37;
  uint8x16_t *v38;
  uint8x16_t *v39;
  uint32x4_t v40;
  uint8x16_t *v41;
  uint8x16_t *v42;
  uint32x4_t v43;
  uint8x16_t *v44;
  uint8x16_t *v45;

  v5 = (uint8x16_t *)((char *)a1 + a2);
  v6 = (uint8x16_t *)((char *)a3 + a4);
  v7 = vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vpaddlq_u8(vabdq_u8(a1[1], vrhaddq_u8(a3[1], a5[1])))), vpaddlq_u8(vabdq_u8(*a1, vrhaddq_u8(*a3, *a5)))), vpaddlq_u8(vabdq_u8(*v5, vrhaddq_u8(*v6, a5[2])))), vpaddlq_u8(vabdq_u8(v5[1], vrhaddq_u8(v6[1], a5[3]))));
  v8 = (uint8x16_t *)((char *)v5 + a2);
  v9 = (uint8x16_t *)((char *)v6 + a4);
  v10 = vpadalq_u16(vpadalq_u16(v7, vpaddlq_u8(vabdq_u8(*v8, vrhaddq_u8(*v9, a5[4])))), vpaddlq_u8(vabdq_u8(v8[1], vrhaddq_u8(v9[1], a5[5]))));
  v11 = (uint8x16_t *)((char *)v8 + a2);
  v12 = (uint8x16_t *)((char *)v9 + a4);
  v13 = vpadalq_u16(vpadalq_u16(v10, vpaddlq_u8(vabdq_u8(*v11, vrhaddq_u8(*v12, a5[6])))), vpaddlq_u8(vabdq_u8(v11[1], vrhaddq_u8(v12[1], a5[7]))));
  v14 = (uint8x16_t *)((char *)v11 + a2);
  v15 = (uint8x16_t *)((char *)v12 + a4);
  v16 = vpadalq_u16(vpadalq_u16(v13, vpaddlq_u8(vabdq_u8(*v14, vrhaddq_u8(*v15, a5[8])))), vpaddlq_u8(vabdq_u8(v14[1], vrhaddq_u8(v15[1], a5[9]))));
  v17 = (uint8x16_t *)((char *)v14 + a2);
  v18 = (uint8x16_t *)((char *)v15 + a4);
  v19 = vpadalq_u16(vpadalq_u16(v16, vpaddlq_u8(vabdq_u8(*v17, vrhaddq_u8(*v18, a5[10])))), vpaddlq_u8(vabdq_u8(v17[1], vrhaddq_u8(v18[1], a5[11]))));
  v20 = (uint8x16_t *)((char *)v17 + a2);
  v21 = (uint8x16_t *)((char *)v18 + a4);
  v22 = vpadalq_u16(vpadalq_u16(v19, vpaddlq_u8(vabdq_u8(*v20, vrhaddq_u8(*v21, a5[12])))), vpaddlq_u8(vabdq_u8(v20[1], vrhaddq_u8(v21[1], a5[13]))));
  v23 = (uint8x16_t *)((char *)v20 + a2);
  v24 = (uint8x16_t *)((char *)v21 + a4);
  v25 = vpadalq_u16(vpadalq_u16(v22, vpaddlq_u8(vabdq_u8(*v23, vrhaddq_u8(*v24, a5[14])))), vpaddlq_u8(vabdq_u8(v23[1], vrhaddq_u8(v24[1], a5[15]))));
  v26 = (uint8x16_t *)((char *)v23 + a2);
  v27 = (uint8x16_t *)((char *)v24 + a4);
  v28 = vpadalq_u16(vpadalq_u16(v25, vpaddlq_u8(vabdq_u8(*v26, vrhaddq_u8(*v27, a5[16])))), vpaddlq_u8(vabdq_u8(v26[1], vrhaddq_u8(v27[1], a5[17]))));
  v29 = (uint8x16_t *)((char *)v26 + a2);
  v30 = (uint8x16_t *)((char *)v27 + a4);
  v31 = vpadalq_u16(vpadalq_u16(v28, vpaddlq_u8(vabdq_u8(*v29, vrhaddq_u8(*v30, a5[18])))), vpaddlq_u8(vabdq_u8(v29[1], vrhaddq_u8(v30[1], a5[19]))));
  v32 = (uint8x16_t *)((char *)v29 + a2);
  v33 = (uint8x16_t *)((char *)v30 + a4);
  v34 = vpadalq_u16(vpadalq_u16(v31, vpaddlq_u8(vabdq_u8(*v32, vrhaddq_u8(*v33, a5[20])))), vpaddlq_u8(vabdq_u8(v32[1], vrhaddq_u8(v33[1], a5[21]))));
  v35 = (uint8x16_t *)((char *)v32 + a2);
  v36 = (uint8x16_t *)((char *)v33 + a4);
  v37 = vpadalq_u16(vpadalq_u16(v34, vpaddlq_u8(vabdq_u8(*v35, vrhaddq_u8(*v36, a5[22])))), vpaddlq_u8(vabdq_u8(v35[1], vrhaddq_u8(v36[1], a5[23]))));
  v38 = (uint8x16_t *)((char *)v35 + a2);
  v39 = (uint8x16_t *)((char *)v36 + a4);
  v40 = vpadalq_u16(vpadalq_u16(v37, vpaddlq_u8(vabdq_u8(*v38, vrhaddq_u8(*v39, a5[24])))), vpaddlq_u8(vabdq_u8(v38[1], vrhaddq_u8(v39[1], a5[25]))));
  v41 = (uint8x16_t *)((char *)v38 + a2);
  v42 = (uint8x16_t *)((char *)v39 + a4);
  v43 = vpadalq_u16(vpadalq_u16(v40, vpaddlq_u8(vabdq_u8(*v41, vrhaddq_u8(*v42, a5[26])))), vpaddlq_u8(vabdq_u8(v41[1], vrhaddq_u8(v42[1], a5[27]))));
  v44 = (uint8x16_t *)((char *)v41 + a2);
  v45 = (uint8x16_t *)((char *)v42 + a4);
  return vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(v43, vpaddlq_u8(vabdq_u8(*v44, vrhaddq_u8(*v45, a5[28])))), vpaddlq_u8(vabdq_u8(v44[1], vrhaddq_u8(v45[1], a5[29])))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)v44 + a2), vrhaddq_u8(*(uint8x16_t *)((char *)v45 + a4), a5[30])))), vpaddlq_u8(vabdq_u8(*(uint8x16_t *)((char *)&v44[1] + a2), vrhaddq_u8(*(uint8x16_t *)((char *)&v45[1] + a4), a5[31])))));
}

uint64_t vpx_sad32x32_avg_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint8x16_t *v6;
  int32x4_t v7;
  uint8x16_t *v8;

  v5 = 0;
  v6 = a3 + 1;
  v7 = 0uLL;
  v8 = a1 + 1;
  do
  {
    v7 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v7, vpaddlq_u8(vabdq_u8(v8[-1], vrhaddq_u8(v6[-1], *(uint8x16_t *)(a5 + v5))))), vpaddlq_u8(vabdq_u8(*v8, vrhaddq_u8(*v6, *(uint8x16_t *)(a5 + v5 + 16)))));
    v5 += 32;
    v6 = (uint8x16_t *)((char *)v6 + a4);
    v8 = (uint8x16_t *)((char *)v8 + a2);
  }
  while ((_DWORD)v5 != 1024);
  return vaddvq_s32(v7);
}

uint64_t vpx_sad32x64_avg_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint8x16_t *v6;
  int32x4_t v7;
  uint8x16_t *v8;

  v5 = 0;
  v6 = a3 + 1;
  v7 = 0uLL;
  v8 = a1 + 1;
  do
  {
    v7 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v7, vpaddlq_u8(vabdq_u8(v8[-1], vrhaddq_u8(v6[-1], *(uint8x16_t *)(a5 + v5))))), vpaddlq_u8(vabdq_u8(*v8, vrhaddq_u8(*v6, *(uint8x16_t *)(a5 + v5 + 16)))));
    v5 += 32;
    v6 = (uint8x16_t *)((char *)v6 + a4);
    v8 = (uint8x16_t *)((char *)v8 + a2);
  }
  while ((_DWORD)v5 != 2048);
  return vaddvq_s32(v7);
}

uint64_t vpx_sad64x32_avg_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x8_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint8x16_t *v9;
  uint16x8_t v10;
  uint8x16_t *v11;

  v5 = 0;
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = a1 + 2;
  v10 = 0uLL;
  v11 = a3 + 2;
  do
  {
    v6 = vpadalq_u8(v6, vabdq_u8(v9[-2], vrhaddq_u8(v11[-2], *(uint8x16_t *)(a5 + v5))));
    v7 = vpadalq_u8(v7, vabdq_u8(v9[-1], vrhaddq_u8(v11[-1], *(uint8x16_t *)(a5 + v5 + 16))));
    v8 = vpadalq_u8(v8, vabdq_u8(*v9, vrhaddq_u8(*v11, *(uint8x16_t *)(a5 + v5 + 32))));
    v10 = vpadalq_u8(v10, vabdq_u8(v9[1], vrhaddq_u8(v11[1], *(uint8x16_t *)(a5 + v5 + 48))));
    v5 += 64;
    v9 = (uint8x16_t *)((char *)v9 + a2);
    v11 = (uint8x16_t *)((char *)v11 + a4);
  }
  while ((_DWORD)v5 != 2048);
  return vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(v7), v6), v8), v10));
}

uint64_t vpx_sad64x64_avg_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x8_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint8x16_t *v9;
  uint16x8_t v10;
  uint8x16_t *v11;

  v5 = 0;
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = a1 + 2;
  v10 = 0uLL;
  v11 = a3 + 2;
  do
  {
    v6 = vpadalq_u8(v6, vabdq_u8(v9[-2], vrhaddq_u8(v11[-2], *(uint8x16_t *)(a5 + v5))));
    v7 = vpadalq_u8(v7, vabdq_u8(v9[-1], vrhaddq_u8(v11[-1], *(uint8x16_t *)(a5 + v5 + 16))));
    v8 = vpadalq_u8(v8, vabdq_u8(*v9, vrhaddq_u8(*v11, *(uint8x16_t *)(a5 + v5 + 32))));
    v10 = vpadalq_u8(v10, vabdq_u8(v9[1], vrhaddq_u8(v11[1], *(uint8x16_t *)(a5 + v5 + 48))));
    v5 += 64;
    v9 = (uint8x16_t *)((char *)v9 + a2);
    v11 = (uint8x16_t *)((char *)v11 + a4);
  }
  while ((_DWORD)v5 != 4096);
  return vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(v7), v6), v8), v10));
}

_BYTE *vp8_update_gf_usage_maps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *result;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  int v12;

  v4 = a1 + 148176;
  v5 = *(_BYTE **)(a2 + 3104);
  result = *(_BYTE **)(a1 + 148176);
  *(_QWORD *)(a3 + 8776) = result;
  if (!*(_DWORD *)(a2 + 3028) || *(_DWORD *)(a2 + 3540))
  {
    result = memset(result, 1, *(int *)(a2 + 3048) * (uint64_t)*(int *)(a2 + 3044));
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 3048) * *(_DWORD *)(a2 + 3044);
    return result;
  }
  v7 = *(_DWORD *)(a2 + 3044);
  if (v7 >= 1)
  {
    v8 = *(_DWORD *)(a2 + 3048);
    if (v8 >= 1)
    {
      v9 = 0;
      while (v8 < 1)
      {
LABEL_9:
        v5 += 76;
        if (++v9 >= v7)
          return result;
      }
      v10 = 0;
      while (1)
      {
        if ((v5[2] & 0xFE) == 2)
        {
          if (*result)
            goto LABEL_13;
          v11 = 1;
          v12 = 1;
        }
        else
        {
          if (*v5 == 7 || !*result)
            goto LABEL_13;
          v11 = 0;
          v12 = -1;
        }
        *result = v11;
        *(_DWORD *)(v4 + 8) += v12;
        result = *(_BYTE **)(a3 + 8776);
        v8 = *(_DWORD *)(a2 + 3048);
LABEL_13:
        *(_QWORD *)(a3 + 8776) = ++result;
        v5 += 76;
        if (++v10 >= v8)
        {
          v7 = *(_DWORD *)(a2 + 3044);
          goto LABEL_9;
        }
      }
    }
  }
  return result;
}

void *vp8_setup_intra_recon(int *a1)
{
  int v2;
  int v3;
  void *result;
  int v5;

  memset((void *)(~(uint64_t)a1[4] + *((_QWORD *)a1 + 7)), 127, *a1 + 5);
  if (a1[1] >= 1)
  {
    v2 = 0;
    do
      *(_BYTE *)(*((_QWORD *)a1 + 7) + a1[4] * (uint64_t)v2++ - 1) = -127;
    while (v2 < a1[1]);
  }
  memset((void *)(~(uint64_t)a1[9] + *((_QWORD *)a1 + 8)), 127, a1[5] + 5);
  if (a1[6] >= 1)
  {
    v3 = 0;
    do
      *(_BYTE *)(*((_QWORD *)a1 + 8) + a1[9] * (uint64_t)v3++ - 1) = -127;
    while (v3 < a1[6]);
  }
  result = memset((void *)(~(uint64_t)a1[9] + *((_QWORD *)a1 + 9)), 127, a1[5] + 5);
  if (a1[6] >= 1)
  {
    v5 = 0;
    do
      *(_BYTE *)(*((_QWORD *)a1 + 9) + a1[9] * (uint64_t)v5++ - 1) = -127;
    while (v5 < a1[6]);
  }
  return result;
}

int16x4_t vp8_short_fdct4x4_neon(int32x2_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int32x2_t v4;
  int32x2_t *v5;
  int32x2_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int32x2_t v21;
  int16x4_t v22;
  int32x2_t v23;
  int32x4_t v24;
  int16x4_t v25;
  int32x4_t v26;
  int32x2_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  __int128 v35;
  int16x4_t result;

  v3 = 2 * (a3 >> 1);
  v4 = *(int32x2_t *)((char *)a1 + v3);
  v5 = (int32x2_t *)((char *)a1 + v3 + v3);
  v6 = *(int32x2_t *)((char *)v5 + v3);
  v7 = (int16x4_t)vzip1_s32(*a1, *v5);
  v8 = (int16x4_t)vzip2_s32(*a1, *v5);
  v9 = (int16x4_t)vzip1_s32(v4, v6);
  v10 = (int16x4_t)vzip2_s32(v4, v6);
  v11 = vtrn1_s16(v7, v9);
  v12 = vtrn2_s16(v7, v9);
  v13 = vtrn1_s16(v8, v10);
  v14 = vtrn2_s16(v8, v10);
  v15 = vadd_s16(v11, v14);
  v16 = vsub_s16(v11, v14);
  v17 = vshl_n_s16(v15, 3uLL);
  v18 = vshl_n_s16(vadd_s16(v12, v13), 3uLL);
  v19 = vshl_n_s16(vsub_s16(v12, v13), 3uLL);
  v20 = vshl_n_s16(v16, 3uLL);
  v21 = (int32x2_t)vadd_s16(v17, v18);
  v22 = vdup_n_s16(0x14E8u);
  v23 = (int32x2_t)vsub_s16(v17, v18);
  v24 = vmlal_s16(vdupq_n_s32(0x38A4u), v20, v22);
  v25 = vdup_n_s16(0x8A9u);
  v26 = vaddq_s32(vmlsl_s16(vmull_s16(v20, v25), v19, v22), vdupq_n_s32(0x1D4Cu));
  v27 = (int32x2_t)vshrn_n_s32(vmlal_s16(v24, v19, v25), 0xCuLL);
  *(int16x4_t *)v26.i8 = vshrn_n_s32(v26, 0xCuLL);
  *(int32x2_t *)v24.i8 = vzip1_s32(v21, v23);
  v28 = (int16x4_t)vzip1_s32(v27, *(int32x2_t *)v26.i8);
  v29 = vtrn1_s16(*(int16x4_t *)v24.i8, v28);
  *(int16x4_t *)v24.i8 = vtrn2_s16(*(int16x4_t *)v24.i8, v28);
  v30 = (int16x4_t)vzip2_s32(v21, v23);
  *(int32x2_t *)v26.i8 = vzip2_s32(v27, *(int32x2_t *)v26.i8);
  v31 = vtrn1_s16(v30, *(int16x4_t *)v26.i8);
  *(int16x4_t *)v26.i8 = vtrn2_s16(v30, *(int16x4_t *)v26.i8);
  v32 = vadd_s16(*(int16x4_t *)v24.i8, v31);
  v33 = vsub_s16(*(int16x4_t *)v24.i8, v31);
  *(int16x4_t *)v24.i8 = vsub_s16(v29, *(int16x4_t *)v26.i8);
  v34 = vadd_s16(vadd_s16(*(int16x4_t *)v26.i8, v29), (int16x4_t)0x7000700070007);
  *(int16x4_t *)&v35 = vshr_n_s16(vadd_s16(v34, v32), 4uLL);
  result = vsub_s16(vaddhn_s32(vmlal_s16(vdupq_n_s32(0x2EE0u), *(int16x4_t *)v24.i8, v22), vmull_s16(v33, v25)), (int16x4_t)vmvn_s8((int8x8_t)vceq_s16(v29, *(int16x4_t *)v26.i8)));
  *((int16x4_t *)&v35 + 1) = result;
  *(_OWORD *)a2 = v35;
  *(int16x8_t *)(a2 + 16) = vaddhn_high_s32(vshr_n_s16(vsub_s16(v34, v32), 4uLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v24.i8, v25), v33, v22), vdupq_n_s32(0xC738u));
  return result;
}

int16x4_t vp8_short_fdct8x4_neon(int32x4_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int32x4_t v4;
  int32x4_t *v5;
  int32x4_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  int32x4_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int16x8_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int8x16_t v54;
  int16x4_t result;

  v3 = 2 * (a3 >> 1);
  v4 = *(int32x4_t *)((char *)a1 + v3);
  v5 = (int32x4_t *)((char *)a1 + v3 + v3);
  v6 = *(int32x4_t *)((char *)v5 + v3);
  v7 = (int16x8_t)vtrn1q_s32(*a1, *v5);
  v8 = (int16x8_t)vtrn2q_s32(*a1, *v5);
  v9 = (int16x8_t)vtrn1q_s32(v4, v6);
  v10 = (int16x8_t)vtrn2q_s32(v4, v6);
  v11 = vtrn1q_s16(v7, v9);
  v12 = vtrn2q_s16(v7, v9);
  v13 = vtrn1q_s16(v8, v10);
  v14 = vtrn2q_s16(v8, v10);
  v15 = vaddq_s16(v11, v14);
  v16 = vsubq_s16(v11, v14);
  v17 = vshlq_n_s16(v15, 3uLL);
  v18 = vshlq_n_s16(vaddq_s16(v12, v13), 3uLL);
  v19 = vshlq_n_s16(vsubq_s16(v12, v13), 3uLL);
  v20 = vshlq_n_s16(v16, 3uLL);
  v21 = (int32x4_t)vaddq_s16(v17, v18);
  v22 = (int32x4_t)vsubq_s16(v17, v18);
  v23 = vdupq_n_s16(0x14E8u);
  v24 = vdupq_n_s32(0x38A4u);
  v25 = vdupq_n_s16(0x8A9u);
  v26 = vdupq_n_s32(0x1D4Cu);
  v27 = vmlal_s16(vmlal_s16(v24, *(int16x4_t *)v20.i8, *(int16x4_t *)v23.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v25.i8);
  v28 = (int16x8_t)vaddq_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v25.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v23.i8), v26);
  v29 = vmlal_high_s16(vmlal_high_s16(v24, v20, v23), v19, v25);
  v30 = vaddq_s32(vmlsl_high_s16(vmull_high_s16(v20, v25), v19, v23), v26);
  v31 = (int32x4_t)vshrn_high_n_s32(vshrn_n_s32(v27, 0xCuLL), v29, 0xCuLL);
  v32 = (int32x4_t)vshrn_high_n_s32(vshrn_n_s32((int32x4_t)v28, 0xCuLL), v30, 0xCuLL);
  v33 = (int16x8_t)vtrn1q_s32(v21, v22);
  v34 = (int16x8_t)vtrn2q_s32(v21, v22);
  v35 = (int16x8_t)vtrn1q_s32(v31, v32);
  v36 = (int16x8_t)vtrn2q_s32(v31, v32);
  v37 = vtrn1q_s16(v33, v35);
  v38 = vtrn2q_s16(v33, v35);
  v39 = vtrn1q_s16(v34, v36);
  v40 = vtrn2q_s16(v34, v36);
  v41 = vaddq_s16(v38, v39);
  v42 = vsubq_s16(v38, v39);
  v43 = vsubq_s16(v37, v40);
  v28.i64[0] = 0x7000700070007;
  v28.i64[1] = 0x7000700070007;
  v44 = vaddq_s16(vaddq_s16(v40, v37), v28);
  v45 = (int8x16_t)vaddq_s16(v44, v41);
  v46 = (int8x16_t)vsubq_s16(v44, v41);
  v44.i64[0] = vextq_s8(v45, v45, 8uLL).u64[0];
  *(int16x4_t *)v45.i8 = vshr_n_s16(*(int16x4_t *)v45.i8, 4uLL);
  *(int16x4_t *)v44.i8 = vshr_n_s16(*(int16x4_t *)v44.i8, 4uLL);
  v47 = vdupq_n_s32(0x2EE0u);
  v48 = vmlal_s16(v47, *(int16x4_t *)v43.i8, *(int16x4_t *)v23.i8);
  v49 = vdupq_n_s32(0xC738u);
  v50 = vmlal_high_s16(v47, v43, v23);
  v51 = vmull_s16(*(int16x4_t *)v42.i8, *(int16x4_t *)v25.i8);
  v52 = vmlsl_s16(vmull_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v25.i8), *(int16x4_t *)v42.i8, *(int16x4_t *)v23.i8);
  v53 = vmlsl_high_s16(vmull_high_s16(v43, v25), v42, v23);
  *(int16x4_t *)v25.i8 = vaddhn_s32(v50, vmull_high_s16(v42, v25));
  v54 = vmvnq_s8((int8x16_t)vceqq_s16(v37, v40));
  result = vsub_s16(vaddhn_s32(v48, v51), *(int16x4_t *)v54.i8);
  v45.u64[1] = (unint64_t)result;
  v44.u64[1] = (unint64_t)vsub_s16(*(int16x4_t *)v25.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL));
  *(int8x16_t *)a2 = v45;
  *(int16x8_t *)(a2 + 16) = vaddhn_high_s32(vshr_n_s16(*(int16x4_t *)v46.i8, 4uLL), v52, v49);
  *(int16x8_t *)(a2 + 32) = v44;
  *(int16x8_t *)(a2 + 48) = vaddhn_high_s32(vshr_n_s16((int16x4_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), 4uLL), v53, v49);
  return result;
}

int8x8_t vp8_short_idct4x4llm_neon(int16x4_t *a1, __int32 *a2, int a3, _DWORD *a4, int a5)
{
  int16x8_t v5;
  int16x4_t v6;
  int16x8_t v7;
  int8x16_t v8;
  int16x8_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int8x16_t v12;
  int16x4_t v13;
  int32x2_t v14;
  int32x2_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x8_t v19;
  int16x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint16x8_t v23;
  __int32 *v24;
  __int32 *v25;
  _DWORD *v26;
  _DWORD *v27;
  int8x8_t result;

  *(int16x4_t *)v5.i8 = a1[1];
  v6 = a1[2];
  v5.u64[1] = (unint64_t)a1[3];
  v7 = vdupq_n_s16(0x4546u);
  v8 = (int8x16_t)vqdmulhq_s16(v5, v7);
  v9 = vdupq_n_s16(0x4E7Bu);
  v10 = vqadd_s16(*a1, v6);
  v11 = vqsub_s16(*a1, v6);
  v12 = (int8x16_t)vqaddq_s16(vshrq_n_s16(vqdmulhq_s16(v5, v9), 1uLL), v5);
  v13 = vqsub_s16(*(int16x4_t *)v8.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  *(int16x4_t *)v12.i8 = vqadd_s16((int16x4_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), *(int16x4_t *)v12.i8);
  *(int16x4_t *)v8.i8 = vqadd_s16(v10, *(int16x4_t *)v12.i8);
  v14 = (int32x2_t)vqadd_s16(v11, v13);
  v15 = (int32x2_t)vqsub_s16(v11, v13);
  *(int16x4_t *)v12.i8 = vqsub_s16(v10, *(int16x4_t *)v12.i8);
  v16 = (int16x4_t)vzip1_s32(*(int32x2_t *)v8.i8, v15);
  v17 = (int16x4_t)vzip1_s32(v14, *(int32x2_t *)v12.i8);
  v18 = vtrn1_s16(v16, v17);
  *(int16x4_t *)v19.i8 = vtrn2_s16(v16, v17);
  v20 = (int16x4_t)vzip2_s32(*(int32x2_t *)v8.i8, v15);
  *(int32x2_t *)v12.i8 = vzip2_s32(v14, *(int32x2_t *)v12.i8);
  *(int16x4_t *)v8.i8 = vtrn1_s16(v20, *(int16x4_t *)v12.i8);
  v19.u64[1] = (unint64_t)vtrn2_s16(v20, *(int16x4_t *)v12.i8);
  v21 = (int8x16_t)vqdmulhq_s16(v19, v7);
  *(int16x4_t *)v7.i8 = vqadd_s16(v18, *(int16x4_t *)v8.i8);
  *(int16x4_t *)v8.i8 = vqsub_s16(v18, *(int16x4_t *)v8.i8);
  v22 = (int8x16_t)vqaddq_s16(vshrq_n_s16(vqdmulhq_s16(v19, v9), 1uLL), v19);
  *(int16x4_t *)v19.i8 = vqsub_s16(*(int16x4_t *)v21.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
  *(int16x4_t *)v21.i8 = vqadd_s16((int16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(int16x4_t *)v22.i8);
  *(int16x4_t *)v22.i8 = vqadd_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v21.i8);
  *(int16x4_t *)v21.i8 = vqsub_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v21.i8);
  *(int16x4_t *)v22.i8 = vrshr_n_s16(*(int16x4_t *)v22.i8, 3uLL);
  *(int16x4_t *)v7.i8 = vrshr_n_s16(vqadd_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v19.i8), 3uLL);
  *(int16x4_t *)v19.i8 = vrshr_n_s16(vqsub_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v19.i8), 3uLL);
  *(int16x4_t *)v21.i8 = vrshr_n_s16(*(int16x4_t *)v21.i8, 3uLL);
  *(int32x2_t *)v8.i8 = vzip1_s32(*(int32x2_t *)v22.i8, *(int32x2_t *)v19.i8);
  *(int32x2_t *)v9.i8 = vzip1_s32(*(int32x2_t *)v7.i8, *(int32x2_t *)v21.i8);
  *(int16x4_t *)v23.i8 = vtrn1_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v9.i8);
  *(int32x2_t *)v22.i8 = vzip2_s32(*(int32x2_t *)v22.i8, *(int32x2_t *)v19.i8);
  *(int32x2_t *)v21.i8 = vzip2_s32(*(int32x2_t *)v7.i8, *(int32x2_t *)v21.i8);
  *(int16x4_t *)v19.i8 = vtrn1_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v21.i8);
  v23.u64[1] = (unint64_t)vtrn2_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v9.i8);
  v19.u64[1] = (unint64_t)vtrn2_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v21.i8);
  v24 = (__int32 *)((char *)a2 + a3);
  v21.i32[0] = *a2;
  v21.i32[1] = *v24;
  v25 = (__int32 *)((char *)v24 + a3);
  *(int8x8_t *)v21.i8 = vqmovun_s16((int16x8_t)vaddw_u8(v23, *(uint8x8_t *)v21.i8));
  *a4 = v21.i32[0];
  v26 = (_DWORD *)((char *)a4 + a5);
  *v26 = v21.i32[1];
  v27 = (_DWORD *)((char *)v26 + a5);
  v21.i32[0] = *v25;
  v21.i32[1] = *(__int32 *)((char *)v25 + a3);
  result = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)v19, *(uint8x8_t *)v21.i8));
  *v27 = result.i32[0];
  *(_DWORD *)((char *)v27 + a5) = result.i32[1];
  return result;
}

uint64_t vp8_sixtap_predict4x4_neon(uint64_t result, int a2, int a3, int a4, _DWORD *a5, int a6)
{
  int v6;
  int8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  int8x16_t *v12;
  uint8x8_t v13;
  uint8x8_t v14;
  int8x16_t v15;
  int8x16_t *v16;
  int8x16_t v17;
  int8x16_t *v18;
  int8x16_t v19;
  int8x16_t *v20;
  int32x2_t v21;
  int32x2_t v22;
  uint8x8_t v23;
  uint8x8_t v24;
  uint16x8_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;
  int8x16_t v37;
  int8x8_t v38;
  int8x16_t *v39;
  int8x16_t v40;
  int8x16_t *v41;
  int8x16_t v42;
  int8x16_t *v43;
  int8x16_t v44;
  int32x2_t *v45;
  int8x16_t v46;
  int32x2_t v47;
  int32x2_t v48;
  uint8x8_t v49;
  uint8x8_t v50;
  uint8x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint8x8_t v57;
  int8x16_t v58;
  int8x16_t v59;
  uint8x8_t v60;
  int8x16_t v61;
  int8x16_t v62;
  uint8x8_t v63;
  int8x16_t v64;
  int8x16_t v65;
  uint8x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  uint8x8_t v70;
  uint8x8_t v71;
  int16x8_t v72;
  int8x8_t v73;
  int8x8_t v74;
  uint8x8_t v75;
  uint8x8_t v76;
  uint8x8_t v77;
  uint8x8_t v78;
  uint8x8_t v79;
  uint8x8_t v80;
  uint64_t *v81;
  int8x8_t v82;
  int8x8_t *v83;
  int8x8_t v84;
  uint64_t *v85;
  int8x8_t v86;
  int8x8_t *v87;
  int8x8_t v88;
  uint64_t *v89;
  int8x8_t v90;
  int8x8_t *v91;
  int8x8_t v92;
  uint64_t *v93;
  int8x8_t v94;
  int8x8_t *v95;
  int8x8_t v96;
  int8x8_t v97;
  int8x8_t v98;
  int8x8_t v99;
  uint8x8_t v100;
  uint8x8_t v101;
  uint16x8_t v102;
  uint64_t v103;
  _DWORD *v104;

  if (a3)
  {
    if (a4)
      v6 = 2 * ~a2;
    else
      v6 = -2;
    v7 = abs_filters[a3];
    v8 = (uint8x8_t)vdup_lane_s8(v7, 0);
    v9 = (uint8x8_t)vdup_lane_s8(v7, 1);
    v10 = (uint8x8_t)vdup_lane_s8(v7, 2);
    v11 = (uint8x8_t)vdup_lane_s8(v7, 3);
    v12 = (int8x16_t *)(result + v6);
    v13 = (uint8x8_t)vdup_lane_s8(v7, 4);
    v14 = (uint8x8_t)vdup_lane_s8(v7, 5);
    v15 = *v12;
    v16 = (int8x16_t *)((char *)v12 + a2);
    v17 = *v16;
    v18 = (int8x16_t *)((char *)v16 + a2);
    v19 = *v18;
    v20 = (int8x16_t *)((char *)v18 + a2);
    v21 = (int32x2_t)vextq_s8(v15, v15, 5uLL).u64[0];
    v22 = (int32x2_t)vextq_s8(v19, v19, 5uLL).u64[0];
    v15.i64[1] = v17.i64[0];
    v19.i64[1] = v20->i64[0];
    v23 = (uint8x8_t)vzip1_s32(v21, (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 5uLL));
    v24 = (uint8x8_t)vzip1_s32(v22, (int32x2_t)*(_OWORD *)&vextq_s8(*v20, *v20, 5uLL));
    v25 = vmull_u8((uint8x8_t)vzip1_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v17.i8), v8);
    v26 = (int8x16_t)vshrq_n_u64((uint64x2_t)v15, 8uLL);
    v27 = (int8x16_t)vshrq_n_u64((uint64x2_t)v19, 8uLL);
    v28 = (int8x16_t)vshrq_n_u64((uint64x2_t)v15, 0x20uLL);
    v29 = (int8x16_t)vshrq_n_u64((uint64x2_t)v19, 0x20uLL);
    v30 = (int8x16_t)vshrq_n_u64((uint64x2_t)v15, 0x10uLL);
    v31 = (int8x16_t)vshrq_n_u64((uint64x2_t)v19, 0x10uLL);
    v32 = (int16x8_t)vmlal_u8(vmlsl_u8(vmlsl_u8(vmlal_u8(v25, v23, v14), (uint8x8_t)vzip1_s32(*(int32x2_t *)v26.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)), v9), (uint8x8_t)vzip1_s32(*(int32x2_t *)v28.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), v13), (uint8x8_t)vzip1_s32(*(int32x2_t *)v30.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), v10);
    v33 = (int16x8_t)vmlal_u8(vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)vzip1_s32(*(int32x2_t *)v19.i8, *(int32x2_t *)v20->i8), v8), v24, v14), (uint8x8_t)vzip1_s32(*(int32x2_t *)v27.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), v9), (uint8x8_t)vzip1_s32(*(int32x2_t *)v29.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)), v13), (uint8x8_t)vzip1_s32(*(int32x2_t *)v31.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)), v10);
    v34 = (int8x16_t)vshrq_n_u64((uint64x2_t)v15, 0x18uLL);
    v35 = (int8x16_t)vshrq_n_u64((uint64x2_t)v19, 0x18uLL);
    v36 = vqaddq_s16(v33, (int16x8_t)vmull_u8((uint8x8_t)vzip1_s32(*(int32x2_t *)v35.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), v11));
    *(int8x8_t *)v37.i8 = vqrshrun_n_s16(vqaddq_s16(v32, (int16x8_t)vmull_u8((uint8x8_t)vzip1_s32(*(int32x2_t *)v34.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)), v11)), 7uLL);
    v38 = vqrshrun_n_s16(v36, 7uLL);
    if (!a4)
    {
      v103 = a6;
      v37.u64[1] = (unint64_t)v38;
      goto LABEL_10;
    }
    v39 = (int8x16_t *)((char *)v20 + a2);
    v40 = *v39;
    v41 = (int8x16_t *)((char *)v39 + a2);
    v42 = *v41;
    v43 = (int8x16_t *)((char *)v41 + a2);
    v44 = *v43;
    v45 = (int32x2_t *)&v43->i8[a2];
    v46 = *(int8x16_t *)&v45->i8[a2];
    v47 = (int32x2_t)vextq_s8(v40, v40, 5uLL).u64[0];
    v48 = (int32x2_t)vextq_s8(v44, v44, 5uLL).u64[0];
    v49 = (uint8x8_t)vdup_lane_s8(v7, 0);
    v40.i64[1] = v42.i64[0];
    v44.u64[1] = (unint64_t)*v45;
    v50 = (uint8x8_t)vzip1_s32(v47, (int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 5uLL));
    v51 = (uint8x8_t)vdup_lane_s8(v7, 5);
    v52 = vmull_u8((uint8x8_t)vzip1_s32(*(int32x2_t *)v40.i8, *(int32x2_t *)v42.i8), v49);
    v53 = vmull_u8((uint8x8_t)vzip1_s32(*(int32x2_t *)v44.i8, *v45), v49);
    v54 = vmull_u8(*(uint8x8_t *)v46.i8, v49);
    v55 = (int8x16_t)vshrq_n_u64((uint64x2_t)v40, 8uLL);
    v56 = (int8x16_t)vshrq_n_u64((uint64x2_t)v44, 8uLL);
    v57 = (uint8x8_t)vdup_lane_s8(v7, 1);
    v58 = (int8x16_t)vshrq_n_u64((uint64x2_t)v40, 0x20uLL);
    v59 = (int8x16_t)vshrq_n_u64((uint64x2_t)v44, 0x20uLL);
    v60 = (uint8x8_t)vdup_lane_s8(v7, 4);
    v61 = (int8x16_t)vshrq_n_u64((uint64x2_t)v40, 0x10uLL);
    v62 = (int8x16_t)vshrq_n_u64((uint64x2_t)v44, 0x10uLL);
    v63 = (uint8x8_t)vdup_lane_s8(v7, 2);
    v64 = (int8x16_t)vshrq_n_u64((uint64x2_t)v40, 0x18uLL);
    v65 = (int8x16_t)vshrq_n_u64((uint64x2_t)v44, 0x18uLL);
    v66 = (uint8x8_t)vdup_lane_s8(v7, 3);
    v67 = (int16x8_t)vmull_u8((uint8x8_t)vzip1_s32(*(int32x2_t *)v64.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL)), v66);
    v68 = (int16x8_t)vmull_u8((uint8x8_t)vzip1_s32(*(int32x2_t *)v65.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL)), v66);
    v69 = vqaddq_s16((int16x8_t)vmlal_u8(vmlsl_u8(vmlsl_u8(vmlal_u8(v54, (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 5uLL), v51), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 1uLL), v57), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 4uLL), v60), (uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 2uLL), v63), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 3uLL), v66));
    *(int8x8_t *)v46.i8 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlsl_u8(vmlsl_u8(vmlal_u8(v52, v50, v51), (uint8x8_t)vzip1_s32(*(int32x2_t *)v55.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)), v57), (uint8x8_t)vzip1_s32(*(int32x2_t *)v58.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)), v60), (uint8x8_t)vzip1_s32(*(int32x2_t *)v61.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)), v63), v67), 7uLL);
    *(int8x8_t *)v54.i8 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlsl_u8(vmlsl_u8(vmlal_u8(v53, (uint8x8_t)vzip1_s32(v48, (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v45->i8, *(int8x16_t *)v45->i8, 5uLL)), v51), (uint8x8_t)vzip1_s32(*(int32x2_t *)v56.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)), v57), (uint8x8_t)vzip1_s32(*(int32x2_t *)v59.i8,
                                                          (int32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)),
                                             v60),
                                           (uint8x8_t)vzip1_s32(*(int32x2_t *)v62.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)), v63), v68), 7uLL);
    *(int8x8_t *)v53.i8 = abs_filters[a4];
    *(int8x8_t *)v52.i8 = vdup_lane_s8(*(int8x8_t *)v53.i8, 0);
    *(int8x8_t *)v67.i8 = vdup_lane_s8(*(int8x8_t *)v53.i8, 1);
    *(int8x8_t *)v68.i8 = vdup_lane_s8(*(int8x8_t *)v53.i8, 2);
    *(int8x8_t *)v44.i8 = vdup_lane_s8(*(int8x8_t *)v53.i8, 3);
    v70 = (uint8x8_t)vdup_lane_s8(*(int8x8_t *)v53.i8, 4);
    *(int8x8_t *)v53.i8 = vdup_lane_s8(*(int8x8_t *)v53.i8, 5);
    v71 = (uint8x8_t)vext_s8(v38, *(int8x8_t *)v46.i8, 4uLL);
    *(int8x8_t *)v55.i8 = vext_s8(*(int8x8_t *)v46.i8, *(int8x8_t *)v54.i8, 4uLL);
    v72 = vqaddq_s16((int16x8_t)vmlal_u8(vmlsl_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v54.i8, vqrshrun_n_s16(v69, 7uLL), 4uLL), *(uint8x8_t *)v53.i8), v71, *(uint8x8_t *)v67.i8), *(uint8x8_t *)v55.i8, *(uint8x8_t *)v44.i8), (int16x8_t)vmlal_u8(vmlsl_u8(vmull_u8((uint8x8_t)v38, *(uint8x8_t *)v52.i8), *(uint8x8_t *)v54.i8, v70), *(uint8x8_t *)v46.i8, *(uint8x8_t *)v68.i8));
    v73 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v55.i8, *(uint8x8_t *)v53.i8), (uint8x8_t)vext_s8(*(int8x8_t *)v37.i8, v38, 4uLL), *(uint8x8_t *)v67.i8), v71, *(uint8x8_t *)v44.i8), (int16x8_t)vmlal_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v52.i8), *(uint8x8_t *)v46.i8, v70), (uint8x8_t)v38, *(uint8x8_t *)v68.i8)), 7uLL);
  }
  else
  {
    v74 = abs_filters[a4];
    v75 = (uint8x8_t)vdup_lane_s8(v74, 0);
    v76 = (uint8x8_t)vdup_lane_s8(v74, 1);
    v77 = (uint8x8_t)vdup_lane_s8(v74, 2);
    v78 = (uint8x8_t)vdup_lane_s8(v74, 3);
    v79 = (uint8x8_t)vdup_lane_s8(v74, 4);
    v80 = (uint8x8_t)vdup_lane_s8(v74, 5);
    v81 = (uint64_t *)(result - 2 * a2);
    v82 = (int8x8_t)vshld_n_s64(*v81, 0x20uLL);
    v83 = (int8x8_t *)((char *)v81 + a2);
    v84 = *v83;
    v85 = (uint64_t *)((char *)v83 + a2);
    v86 = (int8x8_t)vshld_n_s64(*v85, 0x20uLL);
    v87 = (int8x8_t *)((char *)v85 + a2);
    v88 = *v87;
    v89 = (uint64_t *)((char *)v87 + a2);
    v90 = (int8x8_t)vshld_n_s64(*v89, 0x20uLL);
    v91 = (int8x8_t *)((char *)v89 + a2);
    v92 = *v91;
    v93 = (uint64_t *)((char *)v91 + a2);
    v94 = (int8x8_t)vshld_n_s64(*v93, 0x20uLL);
    v95 = (int8x8_t *)((char *)v93 + a2);
    v96 = vext_s8(v82, v84, 4uLL);
    v97 = vext_s8(v86, v88, 4uLL);
    v98 = vext_s8(v90, v92, 4uLL);
    v99 = vext_s8(v94, *v95, 4uLL);
    v100 = (uint8x8_t)vext_s8(v97, v98, 4uLL);
    v101 = (uint8x8_t)vext_s8(v98, v99, 4uLL);
    v102 = vmull_u8(v101, v80);
    v72 = vqaddq_s16((int16x8_t)vmlal_u8(vmlsl_u8(vmull_u8((uint8x8_t)vext_s8(v99, *(int8x8_t *)((char *)v95 + a2), 4uLL), v80), v100, v76), v101, v78), (int16x8_t)vmlal_u8(vmlsl_u8(vmull_u8((uint8x8_t)v97, v75), (uint8x8_t)v99, v79), (uint8x8_t)v98, v77));
    v73 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlsl_u8(v102, (uint8x8_t)vext_s8(v96, v97, 4uLL), v76), v100, v78), (int16x8_t)vmlal_u8(vmlsl_u8(vmull_u8((uint8x8_t)v96, v75), (uint8x8_t)v98, v79), (uint8x8_t)v97, v77)), 7uLL);
  }
  v103 = a6;
  v37 = vqrshrun_high_n_s16(v73, v72, 7uLL);
LABEL_10:
  *a5 = v37.i32[0];
  *(_DWORD *)((char *)a5 + v103) = v37.i32[1];
  v104 = (_DWORD *)((char *)a5 + v103 + v103);
  *v104 = v37.i32[2];
  *(_DWORD *)((char *)v104 + v103) = v37.i32[3];
  return result;
}

uint8x8_t vp8_sixtap_predict8x4_neon(uint64_t a1, int a2, int a3, int a4, int8x8_t *a5, int a6)
{
  int8x8_t v6;
  int8x8_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t result;
  uint8x8_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint8x8_t v16;
  int8x16_t *v17;
  int8x16_t v18;
  int8x16_t *v19;
  int8x16_t v20;
  uint8x8_t *v21;
  int8x16_t v22;
  uint8x8_t v23;
  uint8x8_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  int8x16_t *v27;
  int8x16_t v28;
  int8x16_t *v29;
  int8x16_t v30;
  int8x16_t *v31;
  int8x16_t v32;
  uint8x8_t *v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint16x8_t v49;
  int16x8_t v50;
  int8x8_t *v51;
  int8x8_t *v52;
  int8x8_t v53;
  uint8x8_t v54;
  uint8x8_t v55;
  uint8x8_t v56;
  uint8x8_t v57;
  uint8x8_t v58;
  uint8x8_t v59;
  uint8x8_t *v60;
  uint8x8_t v61;
  uint8x8_t *v62;
  uint8x8_t v63;
  uint8x8_t *v64;
  uint8x8_t v65;
  uint8x8_t *v66;
  uint8x8_t v67;
  uint8x8_t *v68;
  uint8x8_t v69;
  uint8x8_t *v70;
  uint8x8_t v71;
  uint8x8_t *v72;
  uint8x8_t v73;
  uint8x8_t *v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int8x8_t *v79;
  int8x8_t *v80;
  uint8x8_t *v81;
  uint8x8_t *v82;

  if (a3)
  {
    v6 = vp8_sub_pel_filters[a3];
    v7 = vdup_lane_s8(v6, 4);
    v8 = vdup_lane_s8(v6, 5);
    v9 = (uint8x8_t)vabs_s8(vdup_lane_s8(v6, 0));
    v10 = (uint8x8_t)vabs_s8(vdup_lane_s8(v6, 1));
    v11 = (uint8x8_t)vabs_s8(vdup_lane_s8(v6, 2));
    result = (uint8x8_t)vabs_s8(vdup_lane_s8(v6, 3));
    v13 = (uint8x8_t)vabs_s8(v7);
    if (a4)
      v14 = -2 * a2;
    else
      v14 = 0;
    v15 = *(int8x16_t *)(a1 + v14 - 2);
    v16 = (uint8x8_t)vabs_s8(v8);
    v17 = (int8x16_t *)(a1 + v14 - 2 + a2);
    v18 = *v17;
    v19 = (int8x16_t *)((char *)v17 + a2);
    v20 = *v19;
    v21 = (uint8x8_t *)&v19->i8[a2];
    v22 = *(int8x16_t *)v21->i8;
    v23 = (uint8x8_t)vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v15.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 1uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 2uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 5uLL), v16), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 3uLL), result)), 7uLL);
    v24 = (uint8x8_t)vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v18.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 1uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 2uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 5uLL), v16), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 3uLL), result)), 7uLL);
    v25 = (uint8x8_t)vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v20.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 1uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 2uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 5uLL), v16), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 3uLL), result)), 7uLL);
    v26 = (uint8x8_t)vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*v21, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 1uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 2uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 5uLL), v16), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 3uLL), result)), 7uLL);
    if (a4)
    {
      v27 = (int8x16_t *)((char *)v21 + a2);
      v28 = *v27;
      v29 = (int8x16_t *)((char *)v27 + a2);
      v30 = *v29;
      v31 = (int8x16_t *)((char *)v29 + a2);
      v32 = *v31;
      v33 = (uint8x8_t *)&v31->i8[a2];
      v34 = *(int8x16_t *)v33->i8;
      v35 = *(int8x16_t *)&v33->i8[a2];
      v36 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v28.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 1uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 2uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 5uLL), v16);
      v37 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v30.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 1uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 2uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 5uLL), v16);
      v38 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v32.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 1uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 2uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 5uLL), v16);
      v39 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*v33, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 1uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 2uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 5uLL), v16);
      v40 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v35.i8, v9), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 1uLL), v10), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 4uLL), v13), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 2uLL), v11), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 5uLL), v16);
      v41 = (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 3uLL), result);
      v42 = (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 3uLL), result);
      v43 = (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 3uLL), result);
      v44 = (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 3uLL), result);
      v45 = vqaddq_s16(v40, (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 3uLL), result));
      *(int8x8_t *)v40.i8 = vp8_sub_pel_filters[a4];
      *(int8x8_t *)v41.i8 = vqrshrun_n_s16(vqaddq_s16(v36, v41), 7uLL);
      *(int8x8_t *)v28.i8 = vabs_s8(vdup_lane_s8(*(int8x8_t *)v40.i8, 0));
      *(int8x8_t *)v30.i8 = vabs_s8(vdup_lane_s8(*(int8x8_t *)v40.i8, 1));
      *(int8x8_t *)v36.i8 = vabs_s8(vdup_lane_s8(*(int8x8_t *)v40.i8, 2));
      *(int8x8_t *)v32.i8 = vabs_s8(vdup_lane_s8(*(int8x8_t *)v40.i8, 4));
      v46 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v23, *(uint8x8_t *)v28.i8), v24, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v41.i8, *(uint8x8_t *)v32.i8), v25, *(uint8x8_t *)v36.i8);
      v47 = vmlsl_u8(vmull_u8(v24, *(uint8x8_t *)v28.i8), v25, *(uint8x8_t *)v30.i8);
      *(int8x8_t *)v42.i8 = vqrshrun_n_s16(vqaddq_s16(v37, v42), 7uLL);
      *(int8x8_t *)v43.i8 = vqrshrun_n_s16(vqaddq_s16(v38, v43), 7uLL);
      *(int8x8_t *)v44.i8 = vqrshrun_n_s16(vqaddq_s16(v39, v44), 7uLL);
      v48 = vmlsl_u8(vmlsl_u8(vmull_u8(v25, *(uint8x8_t *)v28.i8), v26, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v43.i8, *(uint8x8_t *)v32.i8);
      v49 = vmlsl_u8(vmlsl_u8(vmull_u8(v26, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v41.i8, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v44.i8, *(uint8x8_t *)v32.i8);
      *(int8x8_t *)v30.i8 = vabs_s8(vdup_lane_s8(*(int8x8_t *)v40.i8, 5));
      v50 = (int16x8_t)vmlal_u8(vmlal_u8(v49, *(uint8x8_t *)v42.i8, *(uint8x8_t *)v36.i8), (uint8x8_t)vqrshrun_n_s16(v45, 7uLL), *(uint8x8_t *)v30.i8);
      *(int8x8_t *)v45.i8 = vabs_s8(vdup_lane_s8(*(int8x8_t *)v40.i8, 3));
      *a5 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v26, *(uint8x8_t *)v45.i8), (int16x8_t)vmlal_u8(v46, *(uint8x8_t *)v42.i8, *(uint8x8_t *)v30.i8)), 7uLL);
      v51 = (int8x8_t *)((char *)a5 + a6);
      *v51 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v41.i8, *(uint8x8_t *)v45.i8), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(v47, *(uint8x8_t *)v42.i8, *(uint8x8_t *)v32.i8), v26, *(uint8x8_t *)v36.i8), *(uint8x8_t *)v43.i8, *(uint8x8_t *)v30.i8)), 7uLL);
      v52 = (int8x8_t *)((char *)v51 + a6);
      *v52 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v42.i8, *(uint8x8_t *)v45.i8), (int16x8_t)vmlal_u8(vmlal_u8(v48, *(uint8x8_t *)v41.i8, *(uint8x8_t *)v36.i8), *(uint8x8_t *)v44.i8, *(uint8x8_t *)v30.i8)), 7uLL);
      result = (uint8x8_t)vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v45.i8), v50), 7uLL);
      *(uint8x8_t *)((char *)v52 + a6) = result;
    }
    else
    {
      *a5 = (int8x8_t)v23;
      v81 = (uint8x8_t *)((char *)a5 + a6);
      *v81 = v24;
      v82 = (uint8x8_t *)((char *)v81 + a6);
      *v82 = v25;
      *(uint8x8_t *)((char *)v82 + a6) = v26;
    }
  }
  else
  {
    v53 = vp8_sub_pel_filters[a4];
    v54 = (uint8x8_t)vabs_s8(vdup_lane_s8(v53, 0));
    v55 = (uint8x8_t)vabs_s8(vdup_lane_s8(v53, 1));
    v56 = (uint8x8_t)vabs_s8(vdup_lane_s8(v53, 2));
    v57 = (uint8x8_t)vabs_s8(vdup_lane_s8(v53, 3));
    v58 = (uint8x8_t)vabs_s8(vdup_lane_s8(v53, 4));
    v59 = (uint8x8_t)vabs_s8(vdup_lane_s8(v53, 5));
    v60 = (uint8x8_t *)(a1 - 2 * a2);
    v61 = *v60;
    v62 = (uint8x8_t *)((char *)v60 + a2);
    v63 = *v62;
    v64 = (uint8x8_t *)((char *)v62 + a2);
    v65 = *v64;
    v66 = (uint8x8_t *)((char *)v64 + a2);
    v67 = *v66;
    v68 = (uint8x8_t *)((char *)v66 + a2);
    v69 = *v68;
    v70 = (uint8x8_t *)((char *)v68 + a2);
    v71 = *v70;
    v72 = (uint8x8_t *)((char *)v70 + a2);
    v73 = *v72;
    v74 = (uint8x8_t *)((char *)v72 + a2);
    v75 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v61, v54), v63, v55), v69, v58), v65, v56), v71, v59);
    v76 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v63, v54), v65, v55), v71, v58), v67, v56), v73, v59);
    v77 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v65, v54), v67, v55), v73, v58), v69, v56), *v74, v59);
    v78 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v67, v54), v69, v55), *v74, v58), v71, v56), *(uint8x8_t *)((char *)v74 + a2), v59);
    result = (uint8x8_t)vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v67, v57), v75), 7uLL);
    *a5 = (int8x8_t)result;
    v79 = (int8x8_t *)((char *)a5 + a6);
    *v79 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v69, v57), v76), 7uLL);
    v80 = (int8x8_t *)((char *)v79 + a6);
    *v80 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v71, v57), v77), 7uLL);
    *(int8x8_t *)((char *)v80 + a6) = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v73, v57), v78), 7uLL);
  }
  return result;
}

int8x16_t *vp8_sixtap_predict8x8_neon(int8x16_t *result, int a2, int a3, int a4, int8x8_t *a5, int a6)
{
  int8x8_t v6;
  int8x8_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t v10;
  int8x8_t v11;
  int8x8_t v12;
  uint64_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  uint8x8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int8x16_t v31;
  char *v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int16x8_t v46;
  int8x8_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  uint8x8_t v66;
  int8x16_t v67;
  int8x16_t v68;
  uint8x8_t v69;
  uint8x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int8x8_t *v78;
  int8x8_t *v79;
  int8x8_t *v80;
  int8x8_t *v81;
  int8x8_t *v82;
  int8x8_t v83;
  int8x8_t v84;
  int8x8_t v85;
  int8x8_t v86;
  uint8x8_t v87;
  uint8x8_t v88;
  uint8x8_t v89;
  uint8x8_t v90;
  uint8x8_t v91;
  uint8x8_t v92;
  uint8x8_t *v93;
  uint8x8_t v94;
  uint8x8_t *v95;
  uint8x8_t v96;
  uint8x8_t *v97;
  uint8x8_t v98;
  uint8x8_t *v99;
  uint8x8_t v100;
  uint8x8_t *v101;
  uint8x8_t v102;
  uint8x8_t *v103;
  uint8x8_t v104;
  uint8x8_t *v105;
  uint8x8_t v106;
  uint8x8_t *v107;
  uint8x8_t v108;
  uint8x8_t *v109;
  uint8x8_t v110;
  uint8x8_t *v111;
  uint8x8_t v112;
  uint8x8_t *v113;
  uint8x8_t v114;
  uint8x8_t *v115;
  uint8x8_t v116;
  uint8x8_t v117;
  int8x8_t *v118;
  int8x8_t *v119;
  int8x8_t *v120;
  int8x8_t *v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int8x8_t *v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  uint64_t v134;

  v134 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v6 = vp8_sub_pel_filters[a3];
    v7 = vdup_lane_s8(v6, 0);
    v8 = vdup_lane_s8(v6, 1);
    v9 = vdup_lane_s8(v6, 2);
    v10 = vdup_lane_s8(v6, 3);
    v11 = vdup_lane_s8(v6, 4);
    v12 = vdup_lane_s8(v6, 5);
    if (a4)
      v13 = -2 * a2;
    else
      v13 = 0;
    v14 = (uint8x8_t)vabs_s8(v7);
    v15 = (uint8x8_t)vabs_s8(v8);
    v16 = (uint8x8_t)vabs_s8(v9);
    v17 = (uint8x8_t)vabs_s8(v10);
    v18 = (uint8x8_t)vabs_s8(v11);
    v19 = (uint8x8_t *)&result->i8[v13 - 2];
    v20 = a2;
    v21 = a6;
    v22 = 4 * a2;
    v23 = v22 + 2 * a2;
    v24 = 2 * a2;
    v25 = (uint8x8_t)vabs_s8(v12);
    v26 = 3 * a2;
    v27 = 5 * a2;
    v28 = 2;
    v29 = 3;
    do
    {
      result = &v130;
      v30 = v29;
      while (1)
      {
        v31 = *(int8x16_t *)v19->i8;
        v32 = (char *)v19 + v20;
        v33 = *(int8x16_t *)&v19->i8[v20];
        v34 = *(int8x16_t *)&v19->i8[v24];
        v35 = *(int8x16_t *)&v19->i8[v26];
        _X2 = (uint8x8_t *)((char *)v19 + v22);
        __asm { PRFM            #0, [X2] }
        _X7 = (char *)v19 + v27;
        __asm { PRFM            #0, [X7] }
        _X6 = (char *)v19 + v23;
        __asm { PRFM            #0, [X6] }
        v46 = vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v33.i8, v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 1uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 4uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 2uLL), v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 5uLL), v25), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 3uLL), v17));
        v47 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v31.i8, v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 1uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 4uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 2uLL), v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 5uLL), v25), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 3uLL), v17)), 7uLL);
        v48 = vqrshrun_n_s16(v46, 7uLL);
        v49 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v34.i8, v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 1uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 4uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 2uLL), v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 5uLL), v25), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v34, v34, 3uLL), v17)), 7uLL);
        v50 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v35.i8, v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 1uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 4uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 2uLL), v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 5uLL), v25), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 3uLL), v17)), 7uLL);
        if (!a4)
          break;
        v19 = (uint8x8_t *)&v32[2 * v20 + v20];
        *(int8x8_t *)result->i8 = v47;
        result->u64[1] = (unint64_t)v48;
        *(int8x8_t *)result[1].i8 = v49;
        result[1].u64[1] = (unint64_t)v50;
        result += 2;
        if (--v30 <= 1)
        {
          v51 = *(int8x16_t *)v19->i8;
          v52 = *(int8x16_t *)&v19->i8[v20];
          v53 = *(int8x16_t *)&v19->i8[2 * v20];
          v54 = *(int8x16_t *)&v19->i8[3 * v20];
          v55 = *(int8x16_t *)&v19->i8[4 * v20];
          v56 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*v19, v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 1uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 4uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 2uLL), v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 5uLL), v25);
          v57 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v52.i8, v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 1uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 4uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 2uLL), v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 5uLL), v25);
          v58 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v53.i8, v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 1uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 4uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 2uLL), v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 5uLL), v25);
          v59 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v54.i8, v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 1uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 4uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 2uLL), v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 5uLL), v25);
          v60 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v55.i8, v14), (uint8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 1uLL), v15), (uint8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 4uLL), v18), (uint8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 2uLL), v16), (uint8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 5uLL), v25);
          v61 = vqaddq_s16(v56, (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 3uLL), v17));
          v62 = vqaddq_s16(v57, (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 3uLL), v17));
          v63 = vqaddq_s16(v58, (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 3uLL), v17));
          v64 = vqaddq_s16(v59, (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 3uLL), v17));
          v65 = vqaddq_s16(v60, (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 3uLL), v17));
          *(int8x8_t *)v60.i8 = vp8_sub_pel_filters[a4];
          v66 = (uint8x8_t)vqrshrun_n_s16(v61, 7uLL);
          *(int8x8_t *)v54.i8 = vdup_lane_s8(*(int8x8_t *)v60.i8, 4);
          *(int8x8_t *)v55.i8 = vdup_lane_s8(*(int8x8_t *)v60.i8, 5);
          *(int8x8_t *)v52.i8 = vabs_s8(vdup_lane_s8(*(int8x8_t *)v60.i8, 0));
          *(int8x8_t *)v59.i8 = vabs_s8(vdup_lane_s8(*(int8x8_t *)v60.i8, 1));
          *(int8x8_t *)v61.i8 = vabs_s8(vdup_lane_s8(*(int8x8_t *)v60.i8, 2));
          *(int8x8_t *)v60.i8 = vabs_s8(vdup_lane_s8(*(int8x8_t *)v60.i8, 3));
          *(int8x8_t *)v58.i8 = vabs_s8(*(int8x8_t *)v54.i8);
          *(int8x8_t *)v57.i8 = vabs_s8(*(int8x8_t *)v55.i8);
          v68 = v132;
          v67 = v133;
          v69 = (uint8x8_t)vextq_s8(v130, v130, 8uLL).u64[0];
          v70 = (uint8x8_t)vextq_s8(v131, v131, 8uLL).u64[0];
          v55.i64[0] = vextq_s8(v68, v68, 8uLL).u64[0];
          v51.i64[0] = vextq_s8(v67, v67, 8uLL).u64[0];
          v71 = vmull_u8(v69, *(uint8x8_t *)v52.i8);
          v72 = vmlsl_u8(vmull_u8(*(uint8x8_t *)v130.i8, *(uint8x8_t *)v52.i8), v69, *(uint8x8_t *)v59.i8);
          v73 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v131.i8, *(uint8x8_t *)v52.i8), v70, *(uint8x8_t *)v59.i8), *(uint8x8_t *)v133.i8, *(uint8x8_t *)v58.i8), *(uint8x8_t *)v132.i8, *(uint8x8_t *)v61.i8), *(uint8x8_t *)v51.i8, *(uint8x8_t *)v57.i8);
          v74 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v70, *(uint8x8_t *)v52.i8), *(uint8x8_t *)v132.i8, *(uint8x8_t *)v59.i8), *(uint8x8_t *)v51.i8, *(uint8x8_t *)v58.i8), *(uint8x8_t *)v55.i8, *(uint8x8_t *)v61.i8), v66, *(uint8x8_t *)v57.i8);
          v75 = vqaddq_s16((int16x8_t)vmull_u8(v70, *(uint8x8_t *)v60.i8), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(v72, *(uint8x8_t *)v132.i8, *(uint8x8_t *)v58.i8), *(uint8x8_t *)v131.i8, *(uint8x8_t *)v61.i8), *(uint8x8_t *)v55.i8, *(uint8x8_t *)v57.i8));
          v76 = vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v132.i8, *(uint8x8_t *)v60.i8), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(v71, *(uint8x8_t *)v131.i8, *(uint8x8_t *)v59.i8), *(uint8x8_t *)v55.i8, *(uint8x8_t *)v58.i8), v70, *(uint8x8_t *)v61.i8), *(uint8x8_t *)v133.i8, *(uint8x8_t *)v57.i8));
          v77 = vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v133.i8, *(uint8x8_t *)v60.i8), v74);
          *a5 = vqrshrun_n_s16(v75, 7uLL);
          *(int8x8_t *)((char *)a5 + v21) = vqrshrun_n_s16(v76, 7uLL);
          v78 = (int8x8_t *)((char *)a5 + v21 + v21);
          *v78 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v55.i8, *(uint8x8_t *)v60.i8), v73), 7uLL);
          v79 = (int8x8_t *)((char *)v78 + v21);
          *v79 = vqrshrun_n_s16(v77, 7uLL);
          *(int8x8_t *)v62.i8 = vqrshrun_n_s16(v62, 7uLL);
          *(int8x8_t *)v63.i8 = vqrshrun_n_s16(v63, 7uLL);
          *(int8x8_t *)v64.i8 = vqrshrun_n_s16(v64, 7uLL);
          v80 = (int8x8_t *)((char *)v79 + v21);
          *v80 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v60.i8), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v52.i8), *(uint8x8_t *)v55.i8, *(uint8x8_t *)v59.i8), v66, *(uint8x8_t *)v58.i8), *(uint8x8_t *)v67.i8, *(uint8x8_t *)v61.i8), *(uint8x8_t *)v62.i8, *(uint8x8_t *)v57.i8)), 7uLL);
          v81 = (int8x8_t *)((char *)v80 + v21);
          *v81 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v66, *(uint8x8_t *)v60.i8), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v55.i8, *(uint8x8_t *)v52.i8), *(uint8x8_t *)v67.i8, *(uint8x8_t *)v59.i8), *(uint8x8_t *)v62.i8, *(uint8x8_t *)v58.i8), *(uint8x8_t *)v51.i8, *(uint8x8_t *)v61.i8), *(uint8x8_t *)v63.i8, *(uint8x8_t *)v57.i8)), 7uLL);
          v82 = (int8x8_t *)((char *)v81 + v21);
          *v82 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v62.i8, *(uint8x8_t *)v60.i8), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v67.i8, *(uint8x8_t *)v52.i8), *(uint8x8_t *)v51.i8, *(uint8x8_t *)v59.i8), *(uint8x8_t *)v63.i8, *(uint8x8_t *)v58.i8), v66, *(uint8x8_t *)v61.i8), *(uint8x8_t *)v64.i8, *(uint8x8_t *)v57.i8)), 7uLL);
          v83 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v63.i8, *(uint8x8_t *)v60.i8), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v51.i8, *(uint8x8_t *)v52.i8), v66, *(uint8x8_t *)v59.i8), *(uint8x8_t *)v64.i8, *(uint8x8_t *)v58.i8), *(uint8x8_t *)v62.i8, *(uint8x8_t *)v61.i8), (uint8x8_t)vqrshrun_n_s16(v65, 7uLL), *(uint8x8_t *)v57.i8)), 7uLL);
          goto LABEL_13;
        }
      }
      *a5 = v47;
      *(int8x8_t *)((char *)a5 + v21) = v48;
      result = (int8x16_t *)((char *)a5 + v21 + v21);
      *(int8x8_t *)result->i8 = v49;
      *(int8x8_t *)&result->i8[v21] = v50;
      a5 = (int8x8_t *)&result->i8[v21 + v21];
      --v29;
      v19 = _X2;
      _CF = v28-- != 0;
    }
    while (v28 != 0 && _CF);
  }
  else
  {
    v84 = vp8_sub_pel_filters[a4];
    v85 = vdup_lane_s8(v84, 4);
    v86 = vdup_lane_s8(v84, 5);
    v87 = (uint8x8_t)vabs_s8(vdup_lane_s8(v84, 0));
    v88 = (uint8x8_t)vabs_s8(vdup_lane_s8(v84, 1));
    v89 = (uint8x8_t)vabs_s8(vdup_lane_s8(v84, 2));
    v90 = (uint8x8_t)vabs_s8(vdup_lane_s8(v84, 3));
    v91 = (uint8x8_t)vabs_s8(v85);
    v92 = (uint8x8_t)vabs_s8(v86);
    v93 = (uint8x8_t *)((char *)result - 2 * a2);
    v94 = *v93;
    v95 = (uint8x8_t *)((char *)v93 + a2);
    v96 = *v95;
    v97 = (uint8x8_t *)((char *)v95 + a2);
    v98 = *v97;
    v99 = (uint8x8_t *)((char *)v97 + a2);
    v100 = *v99;
    v101 = (uint8x8_t *)((char *)v99 + a2);
    v102 = *v101;
    v103 = (uint8x8_t *)((char *)v101 + a2);
    v104 = *v103;
    v105 = (uint8x8_t *)((char *)v103 + a2);
    v106 = *v105;
    v107 = (uint8x8_t *)((char *)v105 + a2);
    v108 = *v107;
    v109 = (uint8x8_t *)((char *)v107 + a2);
    v110 = *v109;
    v111 = (uint8x8_t *)((char *)v109 + a2);
    v112 = *v111;
    v113 = (uint8x8_t *)((char *)v111 + a2);
    v114 = *v113;
    v115 = (uint8x8_t *)((char *)v113 + a2);
    v116 = *v115;
    v117 = *(uint8x8_t *)((char *)v115 + a2);
    v21 = a6;
    *a5 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v100, v90), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v94, v87), v96, v88), v102, v91), v98, v89), v104, v92)), 7uLL);
    v118 = (int8x8_t *)((char *)a5 + a6);
    *v118 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v102, v90), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v96, v87), v98, v88), v104, v91), v100, v89), v106, v92)), 7uLL);
    v119 = (int8x8_t *)((char *)v118 + a6);
    *v119 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v104, v90), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v98, v87), v100, v88), v106, v91), v102, v89), v108, v92)), 7uLL);
    v120 = (int8x8_t *)((char *)v119 + a6);
    *v120 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v106, v90), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v100, v87), v102, v88), v108, v91), v104, v89), v110, v92)), 7uLL);
    v121 = (int8x8_t *)((char *)v120 + a6);
    v122 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v102, v87), v104, v88), v110, v91), v106, v89), v112, v92);
    v123 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v104, v87), v106, v88), v112, v91), v108, v89), v114, v92);
    v124 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v106, v87), v108, v88), v114, v91), v110, v89), v116, v92);
    v125 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v108, v87), v110, v88), v116, v91), v112, v89), v117, v92);
    v126 = (int16x8_t)vmull_u8(v108, v90);
    v127 = (int16x8_t)vmull_u8(v110, v90);
    v128 = (int16x8_t)vmull_u8(v112, v90);
    v83 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v114, v90), v125), 7uLL);
    *v121 = vqrshrun_n_s16(vqaddq_s16(v126, v122), 7uLL);
    v129 = (int8x8_t *)((char *)v121 + a6);
    *v129 = vqrshrun_n_s16(vqaddq_s16(v127, v123), 7uLL);
    v82 = (int8x8_t *)((char *)v129 + a6);
    *v82 = vqrshrun_n_s16(vqaddq_s16(v128, v124), 7uLL);
LABEL_13:
    *(int8x8_t *)((char *)v82 + v21) = v83;
  }
  return result;
}

uint64_t vp8_sixtap_predict16x16_neon(uint64_t result, int a2, int a3, int a4, int8x16_t *a5, int a6)
{
  int8x8_t v6;
  int8x8_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t v10;
  int8x8_t v11;
  uint8x8_t v12;
  uint8x8_t v13;
  uint8x8_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  uint8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t v26;
  int8x8_t v27;
  int8x8_t v28;
  int8x8_t v29;
  int8x8_t v30;
  int8x8_t v31;
  int8x8_t v32;
  int8x8_t v33;
  int8x8_t v34;
  int8x8_t *v35;
  uint64_t v46;
  int8x8_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x8_t v51;
  int8x8_t v52;
  uint8x8_t v53;
  uint8x8_t v54;
  uint8x8_t v55;
  uint8x8_t v56;
  uint8x8_t v57;
  uint8x8_t v58;
  char v59;
  uint8x8_t *v60;
  uint16x8_t v61;
  uint8x8_t v62;
  uint16x8_t v63;
  uint8x8_t v64;
  uint16x8_t v65;
  uint8x8_t v66;
  char v67;
  int8x8_t *v68;
  uint8x8_t v69;
  uint8x8_t v70;
  uint8x8_t v71;
  int16x8_t v72;
  uint8x8_t v73;
  uint16x8_t v74;
  uint8x8_t v75;
  int8x8_t *v76;
  int8x8_t *v77;
  int8x8_t *v78;
  int8x8_t *v79;
  uint8x8_t v80;
  uint8x8_t v81;
  uint8x8_t v82;
  int8x8_t *v83;
  int8x8_t *v84;
  int8x8_t *v85;
  int8x8_t *v86;
  uint8x8_t v87;
  uint8x8_t v88;
  int8x8_t *v89;
  int8x8_t *v90;
  int8x8_t *v91;
  int8x8_t *v92;
  uint8x8_t v93;
  uint8x8_t v94;
  uint8x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int8x8_t *v100;
  uint64_t v101;
  int8x8_t v102;
  int8x8_t v103;
  int8x8_t v104;
  int8x8_t v105;
  int8x8_t v106;
  int8x8_t v107;
  uint8x8_t v108;
  uint8x8_t v109;
  uint8x8_t v110;
  uint8x8_t v111;
  uint8x8_t v112;
  uint64_t v113;
  uint8x8_t v114;
  char v115;
  char v116;
  uint8x8_t v117;
  uint8x8_t *v118;
  uint8x8_t v119;
  uint8x8_t *v120;
  uint8x8_t v121;
  uint8x8_t *v122;
  uint8x8_t v123;
  uint8x8_t *v124;
  uint8x8_t v125;
  uint8x8_t *v126;
  int8x8_t *v127;
  uint8x8_t v128;
  uint8x8_t *v129;
  uint8x8_t v130;
  uint8x8_t *v131;
  uint8x8_t v132;
  uint8x8_t *v133;
  uint16x8_t v134;
  uint8x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int8x8_t *v138;
  int8x8_t *v139;
  int8x8_t *v140;
  int8x8_t *v141;
  uint8x8_t *v142;
  uint8x8_t v143;
  uint8x8_t v144;
  uint8x8_t *v145;
  uint8x8_t *v146;
  uint16x8_t v147;
  uint16x8_t v148;
  uint8x8_t v149;
  int16x8_t v150;
  uint16x8_t v151;
  int8x8_t *v152;
  int8x8_t *v153;
  int8x8_t *v154;
  uint64_t *v155;
  uint8x8_t v156;
  uint8x8_t *v157;
  uint8x8_t *v158;
  uint8x8_t v159;
  uint16x8_t v160;
  uint8x8_t v161;
  int16x8_t v162;
  uint16x8_t v163;
  int8x8_t *v164;
  int8x8_t *v165;
  int8x8_t *v166;
  uint8x8_t *v167;
  uint8x8_t v168;
  uint8x8_t *v169;
  int16x8_t v170;
  uint16x8_t v171;
  int16x8_t v172;
  int8x8_t v173;
  int8x8_t *v174;
  int8x8_t *v175;
  int v176;
  int8x8_t v177;
  int8x8_t v178;
  int8x8_t v179;
  int8x8_t v180;
  int8x8_t v181;
  int8x8_t v182;
  _BYTE v187[336];
  uint64_t v188;

  v188 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v6 = vp8_sub_pel_filters[a3];
    v7 = vdup_lane_s8(v6, 1);
    v8 = vdup_lane_s8(v6, 2);
    v9 = vdup_lane_s8(v6, 3);
    v10 = vdup_lane_s8(v6, 4);
    v11 = vdup_lane_s8(v6, 5);
    v12 = (uint8x8_t)vabs_s8(vdup_lane_s8(v6, 0));
    v13 = (uint8x8_t)vabs_s8(v7);
    v14 = (uint8x8_t)vabs_s8(v8);
    v15 = (uint8x8_t)vabs_s8(v9);
    v16 = (uint8x8_t)vabs_s8(v10);
    v17 = (uint8x8_t)vabs_s8(v11);
    if (a4)
    {
      v18 = 0;
      v19 = 2 * a2;
      v20 = -2 * a2;
      v21 = 3 * a2;
      v22 = 4 * a2 - v19 - 2;
      v23 = v21 - 2 - v19;
      v24 = 2 * a2 - v19 - 2;
      v25 = a2 - v19 - 2;
      do
      {
        v26 = *(int8x8_t *)(result + v20 - 2);
        v27 = *(int8x8_t *)(result + v20 + 6);
        v28 = *(int8x8_t *)(result + v20 + 14);
        v29 = *(int8x8_t *)(result + v25);
        v30 = *(int8x8_t *)(result + v25 + 8);
        v31 = *(int8x8_t *)(result + v24);
        v32 = *(int8x8_t *)(result + v24 + 8);
        v33 = vext_s8(*(int8x8_t *)(result + v24 + 13), *(int8x8_t *)(result + v24 + 13), 3uLL);
        v34 = *(int8x8_t *)(result + v25 + 16);
        v35 = (int8x8_t *)&v187[v18];
        _X2 = result + v23;
        __asm { PRFM            #0, [X2] }
        _X2 = result + v22;
        __asm { PRFM            #0, [X2] }
        _X2 = result + v21 - 2;
        __asm { PRFM            #0, [X2] }
        *v35 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)v26, v12), (uint8x8_t)vext_s8(v26, v27, 1uLL), v13), (uint8x8_t)vext_s8(v26, v27, 4uLL), v16), (uint8x8_t)vext_s8(v26, v27, 5uLL), v17), (uint8x8_t)vext_s8(v26, v27, 2uLL), v14), (int16x8_t)vmull_u8((uint8x8_t)vext_s8(v26, v27, 3uLL), v15)), 7uLL);
        v35[1] = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)v27, v12), (uint8x8_t)vext_s8(v27, v28, 1uLL), v13), (uint8x8_t)vext_s8(v27, v28, 4uLL), v16), (uint8x8_t)vext_s8(v27, v28, 5uLL), v17), (uint8x8_t)vext_s8(v27, v28, 2uLL), v14), (int16x8_t)vmull_u8((uint8x8_t)vext_s8(v27, v28, 3uLL), v15)), 7uLL);
        v35[2] = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)v29, v12), (uint8x8_t)vext_s8(v29, v30, 1uLL), v13), (uint8x8_t)vext_s8(v29, v30, 4uLL), v16), (uint8x8_t)vext_s8(v29, v30, 5uLL), v17), (uint8x8_t)vext_s8(v29, v30, 2uLL), v14), (int16x8_t)vmull_u8((uint8x8_t)vext_s8(v29, v30, 3uLL), v15)), 7uLL);
        v35[3] = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)v30, v12), (uint8x8_t)vext_s8(v30, v34, 1uLL), v13), (uint8x8_t)vext_s8(v30, v34, 4uLL), v16), (uint8x8_t)vext_s8(v30, v34, 5uLL), v17), (uint8x8_t)vext_s8(v30, v34, 2uLL), v14), (int16x8_t)vmull_u8((uint8x8_t)vext_s8(v30, v34, 3uLL), v15)), 7uLL);
        v35[4] = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)v31, v12), (uint8x8_t)vext_s8(v31, v32, 1uLL), v13), (uint8x8_t)vext_s8(v31, v32, 4uLL), v16), (uint8x8_t)vext_s8(v31, v32, 5uLL), v17), (uint8x8_t)vext_s8(v31, v32, 2uLL), v14), (int16x8_t)vmull_u8((uint8x8_t)vext_s8(v31, v32, 3uLL), v15)), 7uLL);
        v35[5] = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)v32, v12), (uint8x8_t)vext_s8(v32, v33, 1uLL), v13), (uint8x8_t)vext_s8(v32, v33, 4uLL), v16), (uint8x8_t)vext_s8(v32, v33, 5uLL), v17), (uint8x8_t)vext_s8(v32, v33, 2uLL), v14), (int16x8_t)vmull_u8((uint8x8_t)vext_s8(v32, v33, 3uLL), v15)), 7uLL);
        result += v21;
        v18 += 48;
      }
      while ((_DWORD)v18 != 336);
      v46 = 0;
      v47 = vp8_sub_pel_filters[a4];
      v48 = vdup_lane_s8(v47, 1);
      v49 = vdup_lane_s8(v47, 2);
      v50 = vdup_lane_s8(v47, 3);
      v51 = vdup_lane_s8(v47, 4);
      v52 = vdup_lane_s8(v47, 5);
      v53 = (uint8x8_t)vabs_s8(vdup_lane_s8(v47, 0));
      v54 = (uint8x8_t)vabs_s8(v48);
      v55 = (uint8x8_t)vabs_s8(v49);
      v56 = (uint8x8_t)vabs_s8(v50);
      v57 = (uint8x8_t)vabs_s8(v51);
      v58 = (uint8x8_t)vabs_s8(v52);
      v59 = 1;
      do
      {
        v60 = (uint8x8_t *)&v187[v46];
        v61 = vmull_u8(*(uint8x8_t *)&v187[v46], v53);
        v62 = *(uint8x8_t *)&v187[v46 + 16];
        v63 = vmull_u8(v62, v53);
        v64 = *(uint8x8_t *)&v187[v46 + 32];
        v65 = vmull_u8(v64, v53);
        v66 = *(uint8x8_t *)&v187[v46 + 48];
        v67 = v59;
        v68 = (int8x8_t *)&a5->i8[v46];
        v69 = v60[8];
        v70 = v60[10];
        v71 = v60[12];
        v72 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(v61, v62, v54), v69, v57), v64, v55), v70, v58);
        v73 = v60[14];
        v74 = vmlsl_u8(v63, v64, v54);
        v75 = v60[16];
        *v68 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v66, v56), v72), 7uLL);
        v76 = (int8x8_t *)((char *)v68 + a6);
        *v76 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v69, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(v74, v70, v57), v66, v55), v71, v58)), 7uLL);
        v77 = (int8x8_t *)((char *)v76 + a6);
        *v77 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v70, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(v65, v66, v54), v71, v57), v69, v55), v73, v58)), 7uLL);
        v78 = (int8x8_t *)((char *)v77 + a6);
        *v78 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v71, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v66, v53), v69, v54), v73, v57), v70, v55), v75, v58)), 7uLL);
        v79 = (int8x8_t *)((char *)v78 + a6);
        v80 = v60[18];
        v81 = v60[20];
        v82 = v60[22];
        *(uint8x8_t *)v72.i8 = v60[24];
        *v79 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v73, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v69, v53), v70, v54), v75, v57), v71, v55), v80, v58)), 7uLL);
        v83 = (int8x8_t *)((char *)v79 + a6);
        *v83 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v75, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v70, v53), v71, v54), v80, v57), v73, v55), v81, v58)), 7uLL);
        v84 = (int8x8_t *)((char *)v83 + a6);
        *v84 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v80, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v71, v53), v73, v54), v81, v57), v75, v55), v82, v58)), 7uLL);
        v85 = (int8x8_t *)((char *)v84 + a6);
        *v85 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v81, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v73, v53), v75, v54), v82, v57), v80, v55), *(uint8x8_t *)v72.i8, v58)), 7uLL);
        v86 = (int8x8_t *)((char *)v85 + a6);
        v87 = v60[26];
        *(uint8x8_t *)v65.i8 = v60[28];
        v88 = v60[30];
        *(uint8x8_t *)v74.i8 = v60[32];
        *v86 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v82, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v75, v53), v80, v54), *(uint8x8_t *)v72.i8, v57), v81, v55), v87, v58)), 7uLL);
        v89 = (int8x8_t *)((char *)v86 + a6);
        *v89 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v72.i8, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v80, v53), v81, v54), v87, v57), v82, v55), *(uint8x8_t *)v65.i8, v58)), 7uLL);
        v90 = (int8x8_t *)((char *)v89 + a6);
        *v90 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v87, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v81, v53), v82, v54), *(uint8x8_t *)v65.i8, v57), *(uint8x8_t *)v72.i8, v55), v88, v58)), 7uLL);
        v91 = (int8x8_t *)((char *)v90 + a6);
        *v91 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v65.i8, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v82, v53), *(uint8x8_t *)v72.i8, v54), v88, v57), v87, v55), *(uint8x8_t *)v74.i8, v58)), 7uLL);
        v92 = (int8x8_t *)((char *)v91 + a6);
        v93 = v60[34];
        v94 = v60[36];
        v95 = v60[38];
        v96 = vqaddq_s16((int16x8_t)vmull_u8(v88, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v72.i8, v53), v87, v54), *(uint8x8_t *)v74.i8, v57), *(uint8x8_t *)v65.i8, v55), v93, v58));
        v97 = vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v74.i8, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v87, v53), *(uint8x8_t *)v65.i8, v54), v93, v57), v88, v55), v94, v58));
        v98 = vqaddq_s16((int16x8_t)vmull_u8(v93, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v65.i8, v53), v88, v54), v94, v57), *(uint8x8_t *)v74.i8, v55), v95, v58));
        v99 = vqaddq_s16((int16x8_t)vmull_u8(v94, v56), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v88, v53), *(uint8x8_t *)v74.i8, v54), v95, v57), v93, v55), v60[40], v58));
        *v92 = vqrshrun_n_s16(v96, 7uLL);
        *(int8x8_t *)((char *)v92 + a6) = vqrshrun_n_s16(v97, 7uLL);
        v100 = (int8x8_t *)((char *)v92 + a6 + a6);
        *v100 = vqrshrun_n_s16(v98, 7uLL);
        *(int8x8_t *)((char *)v100 + a6) = vqrshrun_n_s16(v99, 7uLL);
        v46 = 8;
        v59 = 0;
      }
      while ((v67 & 1) != 0);
    }
    else
    {
      v175 = (int8x8_t *)(result - 2);
      v176 = 8;
      do
      {
        v177 = *v175;
        v178 = v175[1];
        v179 = v175[2];
        v180 = *(int8x8_t *)((char *)v175 + a2);
        v181 = *(int8x8_t *)((char *)&v175[1] + a2);
        v182 = *(int8x8_t *)((char *)&v175[2] + a2);
        _X15 = (char *)v175 + 2 * a2;
        _X16 = (char *)v175 + 3 * a2;
        v175 = (int8x8_t *)((char *)v175 + a2 + (uint64_t)a2);
        __asm
        {
          PRFM            #0, [X15]
          PRFM            #0, [X16]
        }
        *a5 = vqrshrun_high_n_s16(vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)v177, v12), (uint8x8_t)vext_s8(v177, v178, 1uLL), v13), (uint8x8_t)vext_s8(v177, v178, 4uLL), v16), (uint8x8_t)vext_s8(v177, v178, 5uLL), v17), (uint8x8_t)vext_s8(v177, v178, 2uLL), v14), (int16x8_t)vmull_u8((uint8x8_t)vext_s8(v177, v178, 3uLL), v15)), 7uLL), vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)v178, v12), (uint8x8_t)vext_s8(v178, v179, 1uLL), v13),
                                   (uint8x8_t)vext_s8(v178, v179, 4uLL),
                                   v16),
                                 (uint8x8_t)vext_s8(v178, v179, 5uLL),
                                 v17),
                               (uint8x8_t)vext_s8(v178, v179, 2uLL),
                               v14),
                  (int16x8_t)vmull_u8((uint8x8_t)vext_s8(v178, v179, 3uLL), v15)),
                7uLL);
        *(int8x16_t *)((char *)a5 + a6) = vqrshrun_high_n_s16(vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)v180, v12), (uint8x8_t)vext_s8(v180, v181, 1uLL), v13), (uint8x8_t)vext_s8(v180, v181, 4uLL), v16), (uint8x8_t)vext_s8(v180, v181, 5uLL), v17), (uint8x8_t)vext_s8(v180, v181, 2uLL), v14), (int16x8_t)vmull_u8((uint8x8_t)vext_s8(v180, v181, 3uLL), v15)), 7uLL), vqaddq_s16((int16x8_t)vmlal_u8(
                                                           vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8((uint8x8_t)v181, v12), (uint8x8_t)vext_s8(v181, v182, 1uLL), v13), (uint8x8_t)vext_s8(v181, v182, 4uLL), v16), (uint8x8_t)vext_s8(v181, v182, 5uLL), v17), (uint8x8_t)vext_s8(v181, v182, 2uLL), v14), (int16x8_t)vmull_u8((uint8x8_t)vext_s8(v181, v182, 3uLL), v15)), 7uLL);
        a5 = (int8x16_t *)((char *)a5 + a6 + (uint64_t)a6);
        --v176;
      }
      while (v176);
    }
  }
  else
  {
    v101 = 0;
    v102 = vp8_sub_pel_filters[a4];
    v103 = vdup_lane_s8(v102, 1);
    v104 = vdup_lane_s8(v102, 2);
    v105 = vdup_lane_s8(v102, 3);
    v106 = vdup_lane_s8(v102, 4);
    v107 = vdup_lane_s8(v102, 5);
    v108 = (uint8x8_t)vabs_s8(vdup_lane_s8(v102, 0));
    v109 = (uint8x8_t)vabs_s8(v103);
    v110 = (uint8x8_t)vabs_s8(v104);
    v111 = (uint8x8_t)vabs_s8(v105);
    v112 = (uint8x8_t)vabs_s8(v106);
    v113 = result - 2 * a2;
    v114 = (uint8x8_t)vabs_s8(v107);
    v115 = 1;
    do
    {
      v116 = v115;
      v117 = *(uint8x8_t *)(v113 + v101);
      v118 = (uint8x8_t *)(v113 + v101 + a2);
      v119 = *v118;
      v120 = (uint8x8_t *)((char *)v118 + a2);
      v121 = *v120;
      v122 = (uint8x8_t *)((char *)v120 + a2);
      v123 = *v122;
      v124 = (uint8x8_t *)((char *)v122 + a2);
      v125 = *v124;
      v126 = (uint8x8_t *)((char *)v124 + a2);
      v127 = (int8x8_t *)&a5->i8[v101];
      v128 = *v126;
      v129 = (uint8x8_t *)((char *)v126 + a2);
      v130 = *v129;
      v131 = (uint8x8_t *)((char *)v129 + a2);
      v132 = *v131;
      v133 = (uint8x8_t *)((char *)v131 + a2);
      v134 = vmlsl_u8(vmull_u8(v117, v108), v119, v109);
      v135 = *v133;
      v136 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v119, v108), v121, v109), v128, v112), v123, v110), v130, v114);
      v137 = vqaddq_s16((int16x8_t)vmull_u8(v123, v111), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(v134, v125, v112), v121, v110), v128, v114));
      *(int8x8_t *)v134.i8 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v130, v111), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v123, v108), v125, v109), v132, v112), v128, v110), *v133, v114)), 7uLL);
      *v127 = vqrshrun_n_s16(v137, 7uLL);
      v138 = (int8x8_t *)((char *)v127 + a6);
      *v138 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v125, v111), v136), 7uLL);
      v139 = (int8x8_t *)((char *)v138 + a6);
      *v139 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v128, v111), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v121, v108), v123, v109), v130, v112), v125, v110), v132, v114)), 7uLL);
      v140 = (int8x8_t *)((char *)v139 + a6);
      v141 = (int8x8_t *)((char *)v140 + a6);
      v142 = (uint8x8_t *)((char *)v133 + a2);
      *v140 = *(int8x8_t *)v134.i8;
      v143 = *v142;
      v144 = *(uint8x8_t *)((char *)v142 + a2);
      v145 = (uint8x8_t *)((char *)v142 + a2 + a2);
      v146 = (uint8x8_t *)((char *)v145 + a2);
      *(uint8x8_t *)v137.i8 = *v145;
      v147 = vmull_u8(v128, v108);
      v148 = vmlsl_u8(vmull_u8(v125, v108), v128, v109);
      v149 = *v146;
      v150 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v130, v108), v132, v109), v144, v112), v135, v110), *v145, v114);
      v151 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v132, v108), v135, v109), *v145, v112), v143, v110);
      *v141 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v132, v111), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(v148, v135, v112), v130, v110), v143, v114)), 7uLL);
      *(int8x8_t *)((char *)v141 + a6) = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v135, v111), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(v147, v130, v109), v143, v112), v132, v110), v144, v114)), 7uLL);
      v152 = (int8x8_t *)((char *)v141 + a6 + a6);
      *v152 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v143, v111), v150), 7uLL);
      v153 = (int8x8_t *)((char *)v152 + a6);
      v154 = (int8x8_t *)((char *)v153 + a6);
      v155 = (uint64_t *)((char *)v146 + a2);
      *v153 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v144, v111), (int16x8_t)vmlal_u8(v151, v149, v114)), 7uLL);
      v148.i64[0] = *v155;
      v156 = *(uint8x8_t *)((char *)v155 + a2);
      v157 = (uint8x8_t *)((char *)v155 + a2 + a2);
      v158 = (uint8x8_t *)((char *)v157 + a2);
      v159 = *v157;
      v160 = vmlsl_u8(vmull_u8(v135, v108), v143, v109);
      v161 = *v158;
      v162 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v144, v108), *(uint8x8_t *)v137.i8, v109), v156, v112), v149, v110), *v157, v114);
      v163 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v137.i8, v108), v149, v109), *v157, v112), *(uint8x8_t *)v148.i8, v110);
      *v154 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v137.i8, v111), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(v160, v149, v112), v144, v110), *(uint8x8_t *)v148.i8, v114)), 7uLL);
      *(int8x8_t *)((char *)v154 + a6) = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v149, v111), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v143, v108), v144, v109), *(uint8x8_t *)v148.i8, v112), *(uint8x8_t *)v137.i8, v110), v156, v114)), 7uLL);
      v164 = (int8x8_t *)((char *)v154 + a6 + a6);
      *v164 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v148.i8, v111), v162), 7uLL);
      v165 = (int8x8_t *)((char *)v164 + a6);
      v166 = (int8x8_t *)((char *)v165 + a6);
      v167 = (uint8x8_t *)((char *)v158 + a2);
      *v165 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v156, v111), (int16x8_t)vmlal_u8(v163, v161, v114)), 7uLL);
      v168 = *(uint8x8_t *)((char *)v167 + a2);
      v169 = (uint8x8_t *)((char *)v167 + a2 + a2);
      v170 = (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(*(uint8x8_t *)v148.i8, v108), v156, v109), *v167, v112), v159, v110), v168, v114);
      v171 = vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v159, v108), v161, v109), *v169, v112), *v167, v110);
      v172 = vqaddq_s16((int16x8_t)vmull_u8(v159, v111), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v149, v108), *(uint8x8_t *)v148.i8, v109), v161, v112), v156, v110), *v167, v114));
      v173 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(*v167, v111), (int16x8_t)vmlal_u8(vmlal_u8(vmlsl_u8(vmlsl_u8(vmull_u8(v156, v108), v159, v109), v168, v112), v161, v110), *v169, v114)), 7uLL);
      *(int8x8_t *)v137.i8 = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v168, v111), (int16x8_t)vmlal_u8(v171, *(uint8x8_t *)((char *)v169 + a2), v114)), 7uLL);
      *v166 = vqrshrun_n_s16(v172, 7uLL);
      *(int8x8_t *)((char *)v166 + a6) = vqrshrun_n_s16(vqaddq_s16((int16x8_t)vmull_u8(v161, v111), v170), 7uLL);
      v174 = (int8x8_t *)((char *)v166 + a6 + a6);
      *v174 = v173;
      *(int8x8_t *)((char *)v174 + a6) = *(int8x8_t *)v137.i8;
      v101 = 8;
      v115 = 0;
    }
    while ((v116 & 1) != 0);
  }
  return result;
}

BOOL vpx_skin_pixel(unsigned int a1, int a2, int a3, int a4)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  signed int v9;
  int v10;
  unsigned int v11;
  signed int v12;

  if (a1 - 221 < 0xFFFFFF4B || a2 == 128 && a3 == 128)
    return 0;
  if (a2 >= 151 && a3 < 110)
    return 0;
  v4 = 1400000;
  v5 = a2 << 6;
  v6 = a3 << 6;
  v7 = (a3 << 6) - 9614;
  v8 = 2157 * ((v7 * v7 + 512) >> 10);
  v9 = 4107 * (((v5 - 7463) * (v5 - 7463) + 512) >> 10) + 3326 * ((v7 * (v5 - 7463) + 512) >> 10) + v8;
  if (v9 >= 1400000)
  {
    if (v9 > 0xAAE600)
      return 0;
    v4 = 800000;
    v10 = v6 - 10240;
    v11 = 2157 * ((v10 * v10) >> 10);
    v9 = 4107 * (((v5 - 6400) * (v5 - 6400)) >> 10) + 3326 * (((v6 - 10240) * (v5 - 6400)) >> 10) + v11;
    if (v9 >= 800000)
    {
      if (v9 > 0x61A800)
        return 0;
      v9 = 4107 * (((v5 - 7040) * (v5 - 7040)) >> 10) + 3326 * ((v10 * (v5 - 7040)) >> 10) + v11;
      if (v9 >= 800000)
      {
        if (v9 > 0x61A800)
          return 0;
        v9 = 4107 * (((v5 - 8320) * (v5 - 8320)) >> 10)
           + 3326 * (((v6 - 9280) * (v5 - 8320)) >> 10)
           + 2157 * (((v6 - 9280) * (v6 - 9280)) >> 10);
        if (v9 >= 800000)
        {
          if (v9 > 0x61A800)
            return 0;
          v9 = 4107 * (((v5 - 6800) * (v5 - 6800)) >> 10) + 3326 * ((v7 * (v5 - 6800) + 512) >> 10) + v8;
          if (v9 >= 800000)
            return 0;
        }
      }
    }
  }
  v12 = v4 >> 1;
  if (a1 <= 0x3B && v9 > (int)(v12 + (v4 >> 2)))
    return 0;
  return a4 || v9 <= v12;
}

uint64_t vpx_sse_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4, int a5, int a6)
{
  int32x4_t v6;
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x16_t *v11;
  uint8x16_t *v12;
  int32x4_t v13;
  int32x4_t v14;
  uint8x16_t v15;
  uint32x4_t v16;
  uint8x16_t v17;
  uint32x4_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint8x8_t v27;
  uint32x4_t v28;
  uint8x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  uint8x8_t v33;
  uint8x16_t v34;
  uint8x16_t v35;
  uint8x16_t *v36;
  uint8x16_t *v37;
  uint8x16_t v38;
  uint8x16_t v39;
  unint64_t v40;
  uint8x8_t v41;

  switch(a5)
  {
    case 4:
      v6 = 0uLL;
      do
      {
        v7.i32[0] = a1->i32[0];
        v7.i32[1] = *(__int32 *)((char *)a1->i32 + a2);
        v8.i32[0] = a3->i32[0];
        v8.i32[1] = *(__int32 *)((char *)a3->i32 + a4);
        v9 = vabd_u8(v7, v8);
        v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vmull_u8(v9, v9));
        a1 = (uint8x8_t *)((char *)a1 + 2 * a2);
        a3 = (uint8x8_t *)((char *)a3 + 2 * a4);
        a6 -= 2;
      }
      while (a6);
      return vaddvq_s32(v6);
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      goto LABEL_9;
    case 8:
      v6 = 0uLL;
      do
      {
        v33 = vabd_u8(*a1, *a3);
        v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vmull_u8(v33, v33));
        a1 = (uint8x8_t *)((char *)a1 + a2);
        a3 = (uint8x8_t *)((char *)a3 + a4);
        --a6;
      }
      while (a6);
      return vaddvq_s32(v6);
    case 16:
      v13 = 0uLL;
      v14 = 0uLL;
      do
      {
        v34 = vabdq_u8(*(uint8x16_t *)a1->i8, *(uint8x16_t *)a3->i8);
        v14 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v14, vmull_u8(*(uint8x8_t *)v34.i8, *(uint8x8_t *)v34.i8)), vmull_high_u8(v34, v34));
        v35 = vabdq_u8(*(uint8x16_t *)&a1->i8[a2], *(uint8x16_t *)&a3->i8[a4]);
        v13 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v13, vmull_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v35.i8)), vmull_high_u8(v35, v35));
        a1 = (uint8x8_t *)((char *)a1 + a2 + (uint64_t)a2);
        a3 = (uint8x8_t *)((char *)a3 + a4 + (uint64_t)a4);
        a6 -= 2;
      }
      while (a6);
      return vaddvq_s32(vaddq_s32(v13, v14));
    case 32:
      v36 = (uint8x16_t *)&a3[2];
      v37 = (uint8x16_t *)&a1[2];
      v13 = 0uLL;
      v14 = 0uLL;
      do
      {
        v38 = vabdq_u8(v37[-1], v36[-1]);
        v14 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v14, vmull_u8(*(uint8x8_t *)v38.i8, *(uint8x8_t *)v38.i8)), vmull_high_u8(v38, v38));
        v39 = vabdq_u8(*v37, *v36);
        v13 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v13, vmull_u8(*(uint8x8_t *)v39.i8, *(uint8x8_t *)v39.i8)), vmull_high_u8(v39, v39));
        v36 = (uint8x16_t *)((char *)v36 + a4);
        v37 = (uint8x16_t *)((char *)v37 + a2);
        --a6;
      }
      while (a6);
      return vaddvq_s32(vaddq_s32(v13, v14));
    default:
      if (a5 == 64)
      {
        v11 = (uint8x16_t *)&a1[4];
        v12 = (uint8x16_t *)&a3[4];
        v13 = 0uLL;
        v14 = 0uLL;
        do
        {
          v15 = vabdq_u8(v11[-2], v12[-2]);
          v16 = vpadalq_u16(vpadalq_u16((uint32x4_t)v14, vmull_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v15.i8)), vmull_high_u8(v15, v15));
          v17 = vabdq_u8(v11[-1], v12[-1]);
          v18 = vpadalq_u16(vpadalq_u16((uint32x4_t)v13, vmull_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v17.i8)), vmull_high_u8(v17, v17));
          v19 = vabdq_u8(*v11, *v12);
          v14 = (int32x4_t)vpadalq_u16(vpadalq_u16(v16, vmull_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)v19.i8)), vmull_high_u8(v19, v19));
          v20 = vabdq_u8(v11[1], v12[1]);
          v13 = (int32x4_t)vpadalq_u16(vpadalq_u16(v18, vmull_u8(*(uint8x8_t *)v20.i8, *(uint8x8_t *)v20.i8)), vmull_high_u8(v20, v20));
          v11 = (uint8x16_t *)((char *)v11 + a2);
          v12 = (uint8x16_t *)((char *)v12 + a4);
          --a6;
        }
        while (a6);
        return vaddvq_s32(vaddq_s32(v13, v14));
      }
      else
      {
LABEL_9:
        if ((a5 & 7u) - 1 >= 4)
        {
          v6 = 0uLL;
          do
          {
            v40 = 0;
            do
            {
              v41 = vabd_u8(a1[v40 / 8], a3[v40 / 8]);
              v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vmull_u8(v41, v41));
              v40 += 8;
            }
            while ((uint64_t)v40 < a5);
            a1 = (uint8x8_t *)((char *)a1 + a2);
            a3 = (uint8x8_t *)((char *)a3 + a4);
            --a6;
          }
          while (a6);
        }
        else
        {
          v21 = 2 * a2;
          v22 = 2 * a4;
          v23 = (char *)a3 + a4;
          v24 = (char *)a1 + a2;
          v6 = 0uLL;
          do
          {
            v25 = 0;
            do
            {
              v26 = v25 * 8;
              v27 = vabd_u8(a1[v25], a3[v25]);
              v28 = vpadalq_u16((uint32x4_t)v6, vmull_u8(v27, v27));
              v29 = vabd_u8(*(uint8x8_t *)&v24[v25 * 8], *(uint8x8_t *)&v23[v25 * 8]);
              v6 = (int32x4_t)vpadalq_u16(v28, vmull_u8(v29, v29));
              ++v25;
            }
            while (v26 < a5 - 12);
            v30.i32[0] = a1[v25].i32[0];
            v30.i32[1] = *(_DWORD *)&v24[v25 * 8];
            v31.i32[0] = a3[v25].i32[0];
            v31.i32[1] = *(_DWORD *)&v23[v25 * 8];
            v32 = vabd_u8(v30, v31);
            a1 = (uint8x8_t *)((char *)a1 + v21);
            v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vmull_u8(v32, v32));
            a3 = (uint8x8_t *)((char *)a3 + v22);
            v23 += v22;
            v24 += v21;
            a6 -= 2;
          }
          while (a6);
        }
        return vaddvq_s32(v6);
      }
  }
}

uint64_t vpx_sub_pixel_variance4x4_neon(__int32 *a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint8x8_t v10;
  char *v11;
  uint8x8_t v12;
  int16x8_t v13;
  __int32 *v14;
  uint8x8_t v15;
  int8x8_t v16;
  uint8x8_t v17;
  int8x8_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  v7 = (uint8x8_t)vdup_n_s8(8 - a3);
  v8 = (uint8x8_t)vdup_n_s8(a3);
  v9 = 2 * a2;
  v10.i32[0] = *a1;
  v10.i32[1] = *(__int32 *)((char *)a1 + a2);
  v11 = (char *)a1 + v9;
  v12.i32[0] = *(__int32 *)((char *)a1 + 1);
  v12.i32[1] = *(__int32 *)((char *)a1 + a2 + 1);
  v13 = (int16x8_t)vmlal_u8(vmull_u8(v12, v8), v10, v7);
  v10.i32[0] = *(__int32 *)((char *)a1 + v9);
  v10.i32[1] = *(__int32 *)((char *)a1 + v9 + a2);
  *(int8x8_t *)v13.i8 = vrshrn_n_s16(v13, 3uLL);
  v14 = (__int32 *)((char *)a1 + v9 + v9);
  v15.i32[0] = *(_DWORD *)(v11 + 1);
  v15.i32[1] = *(_DWORD *)&v11[a2 + 1];
  v16 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v15, v8), v10, v7), 3uLL);
  v15.i32[0] = *v14;
  v15.i32[1] = *(__int32 *)((char *)v14 + a2);
  v17.i32[0] = *(__int32 *)((char *)v14 + 1);
  v17.i32[1] = *(__int32 *)((char *)v14 + a2 + 1);
  v18 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v17, v8), v15, v7), 3uLL);
  v19 = (uint8x8_t)vdup_n_s8(8 - a4);
  v20 = (uint8x8_t)vdup_n_s8(a4);
  v22[0] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v13.i8, v16, 4uLL), v20), *(uint8x8_t *)v13.i8, v19), 3uLL);
  v22[1] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v16, v18, 4uLL), v20), (uint8x8_t)v16, v19), 3uLL);
  return vpx_variance4x4(v22, 4, a5, a6, a7);
}

uint64_t vpx_sub_pixel_variance4x8_neon(__int32 *a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint8x8_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  int8x8_t v12;
  __int32 *v13;
  uint8x8_t v14;
  uint8x8_t v15;
  int8x8_t v16;
  char *v17;
  int8x8_t v18;
  __int32 *v19;
  uint8x8_t v20;
  int16x8_t v21;
  uint8x8_t v22;
  int16x8_t v23;
  uint8x8_t v24;
  uint8x8_t v25;
  _QWORD v27[5];

  v7 = (uint8x8_t)vdup_n_s8(8 - a3);
  v27[4] = *MEMORY[0x24BDAC8D0];
  v8 = (uint8x8_t)vdup_n_s8(a3);
  v9 = 2 * a2;
  v10.i32[0] = *a1;
  v10.i32[1] = *(__int32 *)((char *)a1 + a2);
  v11.i32[0] = *(__int32 *)((char *)a1 + 1);
  v11.i32[1] = *(__int32 *)((char *)a1 + a2 + 1);
  v12 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v11, v8), v10, v7), 3uLL);
  v11.i32[0] = *(__int32 *)((char *)a1 + v9);
  v11.i32[1] = *(__int32 *)((char *)a1 + v9 + a2);
  v13 = (__int32 *)((char *)a1 + v9 + v9);
  v14.i32[0] = *(__int32 *)((char *)a1 + v9 + 1);
  v14.i32[1] = *(__int32 *)((char *)a1 + v9 + a2 + 1);
  v15.i32[0] = *v13;
  v15.i32[1] = *(__int32 *)((char *)v13 + a2);
  v16 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v14, v8), v11, v7), 3uLL);
  v17 = (char *)v13 + v9;
  v14.i32[0] = *(__int32 *)((char *)v13 + 1);
  v14.i32[1] = *(__int32 *)((char *)v13 + a2 + 1);
  v18 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v14, v8), v15, v7), 3uLL);
  v15.i32[0] = *(__int32 *)((char *)v13 + v9);
  v15.i32[1] = *(__int32 *)((char *)v13 + v9 + a2);
  v19 = (__int32 *)((char *)v13 + v9 + v9);
  v20.i32[0] = *(_DWORD *)(v17 + 1);
  v20.i32[1] = *(_DWORD *)&v17[a2 + 1];
  v21 = (int16x8_t)vmlal_u8(vmull_u8(v20, v8), v15, v7);
  v15.i32[0] = *v19;
  v15.i32[1] = *(__int32 *)((char *)v19 + a2);
  *(int8x8_t *)v21.i8 = vrshrn_n_s16(v21, 3uLL);
  v22.i32[0] = *(__int32 *)((char *)v19 + 1);
  v22.i32[1] = *(__int32 *)((char *)v19 + a2 + 1);
  v23 = (int16x8_t)vmlal_u8(vmull_u8(v22, v8), v15, v7);
  v24 = (uint8x8_t)vdup_n_s8(8 - a4);
  v25 = (uint8x8_t)vdup_n_s8(a4);
  v27[0] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v12, v16, 4uLL), v25), (uint8x8_t)v12, v24), 3uLL);
  v27[1] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v16, v18, 4uLL), v25), (uint8x8_t)v16, v24), 3uLL);
  v27[2] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v18, *(int8x8_t *)v21.i8, 4uLL), v25), (uint8x8_t)v18, v24), 3uLL);
  v27[3] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v21.i8, vrshrn_n_s16(v23, 3uLL), 4uLL), v25), *(uint8x8_t *)v21.i8, v24), 3uLL);
  return vpx_variance4x8(v27, 4, a5, a6, a7);
}

uint64_t vpx_sub_pixel_variance8x4_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  uint8x8_t v15;
  uint8x8_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x24BDAC8D0];
  v7 = (uint8x8_t)vdup_n_s8(8 - a3);
  v8 = (uint8x8_t)vdup_n_s8(a3);
  v9 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + 1), v8), *(uint8x8_t *)a1, v7), 3uLL);
  v10 = a1 + a2;
  v11 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v10 + 1), v8), *(uint8x8_t *)v10, v7), 3uLL);
  v12 = v10 + a2;
  v13 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v12 + 1), v8), *(uint8x8_t *)v12, v7), 3uLL);
  v14 = v12 + a2;
  v15 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v14 + 1), v8), *(uint8x8_t *)v14, v7), 3uLL);
  v16 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v14 + a2 + 1), v8), *(uint8x8_t *)(v14 + a2), v7), 3uLL);
  v17 = (uint8x8_t)vdup_n_s8(8 - a4);
  v18 = (uint8x8_t)vdup_n_s8(a4);
  v20[0] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v11, v18), v9, v17), 3uLL);
  v20[1] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v13, v18), v11, v17), 3uLL);
  v20[2] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v15, v18), v13, v17), 3uLL);
  v20[3] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v16, v18), v15, v17), 3uLL);
  return vpx_variance8x4(v20, 8, a5, a6, a7);
}

uint64_t vpx_sub_pixel_variance8x8_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  uint8x8_t v15;
  uint64_t v16;
  uint8x8_t v17;
  uint64_t v18;
  uint8x8_t v19;
  uint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint8x8_t v23;
  int16x8_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  _QWORD v28[9];

  v28[8] = *MEMORY[0x24BDAC8D0];
  v7 = (uint8x8_t)vdup_n_s8(8 - a3);
  v8 = (uint8x8_t)vdup_n_s8(a3);
  v9 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + 1), v8), *(uint8x8_t *)a1, v7), 3uLL);
  v10 = a1 + a2;
  v11 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v10 + 1), v8), *(uint8x8_t *)v10, v7), 3uLL);
  v12 = v10 + a2;
  v13 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v12 + 1), v8), *(uint8x8_t *)v12, v7), 3uLL);
  v14 = v12 + a2;
  v15 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v14 + 1), v8), *(uint8x8_t *)v14, v7), 3uLL);
  v16 = v14 + a2;
  v17 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v16 + 1), v8), *(uint8x8_t *)v16, v7), 3uLL);
  v18 = v16 + a2;
  v19 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v18 + 1), v8), *(uint8x8_t *)v18, v7), 3uLL);
  v20 = v18 + a2;
  v21 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v20 + 1), v8), *(uint8x8_t *)v20, v7), 3uLL);
  v22 = v20 + a2;
  v23 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v22 + 1), v8), *(uint8x8_t *)v22, v7), 3uLL);
  v24 = (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v22 + a2 + 1), v8), *(uint8x8_t *)(v22 + a2), v7);
  v25 = (uint8x8_t)vdup_n_s8(8 - a4);
  v26 = (uint8x8_t)vdup_n_s8(a4);
  v28[0] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v11, v26), v9, v25), 3uLL);
  v28[1] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v13, v26), v11, v25), 3uLL);
  v28[2] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v15, v26), v13, v25), 3uLL);
  v28[3] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v17, v26), v15, v25), 3uLL);
  v28[4] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v19, v26), v17, v25), 3uLL);
  v28[5] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v21, v26), v19, v25), 3uLL);
  v28[6] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v23, v26), v21, v25), 3uLL);
  v28[7] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16(v24, 3uLL), v26), v23, v25), 3uLL);
  return vpx_variance8x8(v28, 8, a5, a6, a7);
}

uint64_t vpx_sub_pixel_variance8x16_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint8x8_t v11;
  uint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  uint8x8_t v15;
  uint64_t v16;
  uint8x8_t v17;
  uint64_t v18;
  uint8x8_t v19;
  uint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  uint8x8_t v39;
  uint8x8_t v40;
  uint8x8_t v41;
  uint8x8_t v42;
  _QWORD v44[17];

  v44[16] = *MEMORY[0x24BDAC8D0];
  v7 = (uint8x8_t)vdup_n_s8(8 - a3);
  v8 = (uint8x8_t)vdup_n_s8(a3);
  v9 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + 1), v8), *(uint8x8_t *)a1, v7), 3uLL);
  v10 = a1 + a2;
  v11 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v10 + 1), v8), *(uint8x8_t *)v10, v7), 3uLL);
  v12 = v10 + a2;
  v13 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v12 + 1), v8), *(uint8x8_t *)v12, v7), 3uLL);
  v14 = v12 + a2;
  v15 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v14 + 1), v8), *(uint8x8_t *)v14, v7), 3uLL);
  v16 = v14 + a2;
  v17 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v16 + 1), v8), *(uint8x8_t *)v16, v7), 3uLL);
  v18 = v16 + a2;
  v19 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v18 + 1), v8), *(uint8x8_t *)v18, v7), 3uLL);
  v20 = v18 + a2;
  v21 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v20 + 1), v8), *(uint8x8_t *)v20, v7), 3uLL);
  v22 = v20 + a2;
  v23 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v22 + 1), v8), *(uint8x8_t *)v22, v7), 3uLL);
  v24 = v22 + a2;
  v25 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v24 + 1), v8), *(uint8x8_t *)v24, v7), 3uLL);
  v26 = v24 + a2;
  v27 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v26 + 1), v8), *(uint8x8_t *)v26, v7), 3uLL);
  v28 = v26 + a2;
  v29 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v28 + 1), v8), *(uint8x8_t *)v28, v7), 3uLL);
  v30 = v28 + a2;
  v31 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v30 + 1), v8), *(uint8x8_t *)v30, v7), 3uLL);
  v32 = v30 + a2;
  v33 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v32 + 1), v8), *(uint8x8_t *)v32, v7), 3uLL);
  v34 = v32 + a2;
  v35 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v34 + 1), v8), *(uint8x8_t *)v34, v7), 3uLL);
  v36 = v34 + a2;
  v37 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v36 + 1), v8), *(uint8x8_t *)v36, v7), 3uLL);
  v38 = v36 + a2;
  v39 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v38 + 1), v8), *(uint8x8_t *)v38, v7), 3uLL);
  v40 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v38 + a2 + 1), v8), *(uint8x8_t *)(v38 + a2), v7), 3uLL);
  v41 = (uint8x8_t)vdup_n_s8(8 - a4);
  v42 = (uint8x8_t)vdup_n_s8(a4);
  v44[0] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v11, v42), v9, v41), 3uLL);
  v44[1] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v13, v42), v11, v41), 3uLL);
  v44[2] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v15, v42), v13, v41), 3uLL);
  v44[3] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v17, v42), v15, v41), 3uLL);
  v44[4] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v19, v42), v17, v41), 3uLL);
  v44[5] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v21, v42), v19, v41), 3uLL);
  v44[6] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v23, v42), v21, v41), 3uLL);
  v44[7] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v25, v42), v23, v41), 3uLL);
  v44[8] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v27, v42), v25, v41), 3uLL);
  v44[9] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v29, v42), v27, v41), 3uLL);
  v44[10] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v31, v42), v29, v41), 3uLL);
  v44[11] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v33, v42), v31, v41), 3uLL);
  v44[12] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v35, v42), v33, v41), 3uLL);
  v44[13] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v37, v42), v35, v41), 3uLL);
  v44[14] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v39, v42), v37, v41), 3uLL);
  v44[15] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v40, v42), v39, v41), 3uLL);
  return vpx_variance8x16(v44, 8, a5, a6, a7);
}

uint64_t vpx_sub_pixel_variance16x8_neon(uint64_t a1, uint64_t a2, __int32 a3, __int32 a4, uint64_t a5, uint64_t a6, uint64_t a7, int8x8_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint8x16_t v11;
  uint64_t v12;
  uint8x16_t v13;
  uint64_t v14;
  uint8x16_t v15;
  uint64_t v16;
  uint8x16_t v17;
  uint64_t v18;
  uint8x16_t v19;
  uint64_t v20;
  uint8x16_t v21;
  uint64_t v22;
  uint8x8_t *v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  uint64_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t *v33;
  uint8x16_t v34;
  uint8x16_t v35;
  uint8x16_t *v36;
  uint8x16_t v37;
  uint8x16_t v38;
  uint8x16_t *v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint8x16_t *v42;
  uint8x16_t v43;
  uint8x16_t v44;
  uint8x16_t *v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint8x16_t *v48;
  uint8x16_t v49;
  uint8x16_t v50;
  uint8x16_t *v51;
  uint8x16_t v52;
  uint64_t v53;
  uint8x16_t v54;
  uint8x8_t *v55;
  uint8x16_t v56;
  uint8x16_t v57;
  uint8x16_t v58;
  uint64_t v59;
  uint8x16_t v60;
  uint64_t v61;
  uint8x16_t v62;
  uint64_t v63;
  uint8x16_t v64;
  uint64_t v65;
  uint8x16_t v66;
  uint64_t v67;
  uint8x16_t v68;
  uint64_t v69;
  uint8x16_t v70;
  uint64_t v71;
  uint8x16_t v72;
  uint8x16_t v73;
  uint64_t v74;
  uint8x16_t v75;
  uint64_t v76;
  uint8x16_t v77;
  uint64_t v78;
  uint8x16_t v79;
  uint64_t v80;
  uint8x16_t v81;
  uint64_t v82;
  uint8x16_t v83;
  uint64_t v84;
  uint8x16_t v85;
  uint64_t v86;
  uint8x16_t v87;
  uint64_t v88;
  uint8x16_t v89;
  uint8x16_t v90;
  uint8x16_t v91;
  uint8x16_t v92;
  uint8x16_t v93;
  uint8x16_t v94;
  uint8x16_t v95;
  uint8x16_t v96;
  uint8x16_t v97;
  uint8x16_t v98;
  uint8x16_t v99;
  uint8x16_t v100;
  uint8x16_t v101;
  uint8x16_t v102;
  uint8x16_t v103;
  uint8x16_t v104;
  uint8x16_t v105;
  uint8x16_t v106;
  uint8x16_t v107;
  uint8x16_t v108;
  uint8x16_t v109;
  uint8x16_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  if (a3 != 4)
  {
    if (!a3)
    {
      if (a4 == 4)
      {
        v33 = (uint8x16_t *)(a1 + (int)a2);
        v34 = *v33;
        v35 = vrhaddq_u8(*(uint8x16_t *)a1, *v33);
        v36 = (uint8x16_t *)((char *)v33 + (int)a2);
        v37 = *v36;
        v38 = vrhaddq_u8(v34, *v36);
        v102 = v35;
        v103 = v38;
        v39 = (uint8x16_t *)((char *)v36 + (int)a2);
        v40 = *v39;
        v41 = vrhaddq_u8(v37, *v39);
        v42 = (uint8x16_t *)((char *)v39 + (int)a2);
        v43 = *v42;
        v44 = vrhaddq_u8(v40, *v42);
        v104 = v41;
        v105 = v44;
        v45 = (uint8x16_t *)((char *)v42 + (int)a2);
        v46 = *v45;
        v47 = vrhaddq_u8(v43, *v45);
        v48 = (uint8x16_t *)((char *)v45 + (int)a2);
        v49 = *v48;
        v50 = vrhaddq_u8(v46, *v48);
        v106 = v47;
        v107 = v50;
        v51 = (uint8x16_t *)((char *)v48 + (int)a2);
        v52 = vrhaddq_u8(*v51, *(uint8x16_t *)((char *)v51 + (int)a2));
        v108 = vrhaddq_u8(v49, *v51);
        v109 = v52;
      }
      else
      {
        if (!a4)
          return vpx_variance16x8(a1, a2, a5, a6, a7);
        v53 = 0;
        a8.i32[0] = 8 - a4;
        a9.i32[0] = a4;
        v54 = *(uint8x16_t *)a1;
        v55 = (uint8x8_t *)(a1 + (int)a2);
        v56 = (uint8x16_t)vdupq_lane_s8(a8, 0);
        v57 = (uint8x16_t)vdupq_lane_s8(a9, 0);
        do
        {
          v58 = *(uint8x16_t *)v55->i8;
          *(int8x16_t *)((char *)&v102 + v53) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v55, *(uint8x8_t *)v57.i8), *(uint8x8_t *)v54.i8, *(uint8x8_t *)v56.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v55->i8, v57), v54, v56), 3uLL);
          v53 += 16;
          v55 = (uint8x8_t *)((char *)v55 + (int)a2);
          v54 = v58;
        }
        while ((_DWORD)v53 != 128);
      }
      return vpx_variance16x8(&v102, 16, a5, a6, a7);
    }
    v22 = 0;
    a8.i32[0] = 8 - a3;
    a9.i32[0] = a3;
    v23 = (uint8x8_t *)(a1 + 1);
    v24 = (uint8x16_t)vdupq_lane_s8(a8, 0);
    v25 = (uint8x16_t)vdupq_lane_s8(a9, 0);
    if (a4 != 4)
    {
      if (!a4)
      {
        do
        {
          *(int8x16_t *)((char *)&v102 + v22) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v23, *(uint8x8_t *)v25.i8), *(uint8x8_t *)((char *)v23 - 1), *(uint8x8_t *)v24.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v23->i8, v25), *(uint8x16_t *)((char *)&v23[-1].u32[1] + 3), v24), 3uLL);
          v22 += 16;
          v23 = (uint8x8_t *)((char *)v23 + (int)a2);
        }
        while ((_DWORD)v22 != 128);
        return vpx_variance16x8(&v102, 16, a5, a6, a7);
      }
      do
      {
        *(int8x16_t *)((char *)&v102 + v22) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v23, *(uint8x8_t *)v25.i8), *(uint8x8_t *)((char *)v23 - 1), *(uint8x8_t *)v24.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v23->i8, v25), *(uint8x16_t *)((char *)&v23[-1].u32[1] + 3), v24), 3uLL);
        v22 += 16;
        v23 = (uint8x8_t *)((char *)v23 + (int)a2);
      }
      while ((_DWORD)v22 != 144);
      v28 = 0;
      v24.i32[0] = 8 - a4;
      v25.i32[0] = a4;
      v29 = v102;
      v30 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v24.i8, 0);
      v31 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v25.i8, 0);
      do
      {
        v32 = *(uint8x16_t *)((char *)&v103 + v28);
        *(int8x16_t *)((char *)&v94 + v28) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v32.i8, *(uint8x8_t *)v31.i8), *(uint8x8_t *)v29.i8, *(uint8x8_t *)v30.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v32, v31), v29, v30), 3uLL);
        v28 += 16;
        v29 = v32;
      }
      while ((_DWORD)v28 != 128);
      return vpx_variance16x8(&v94, 16, a5, a6, a7);
    }
    do
    {
      *(int8x16_t *)((char *)&v102 + v22) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v23, *(uint8x8_t *)v25.i8), *(uint8x8_t *)((char *)v23 - 1), *(uint8x8_t *)v24.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v23->i8, v25), *(uint8x16_t *)((char *)&v23[-1].u32[1] + 3), v24), 3uLL);
      v22 += 16;
      v23 = (uint8x8_t *)((char *)v23 + (int)a2);
    }
    while ((_DWORD)v22 != 144);
    v94 = vrhaddq_u8(v102, v103);
    v95 = vrhaddq_u8(v103, v104);
    v96 = vrhaddq_u8(v104, v105);
    v97 = vrhaddq_u8(v105, v106);
    v98 = vrhaddq_u8(v106, v107);
    v99 = vrhaddq_u8(v107, v108);
    v26 = vrhaddq_u8(v108, v109);
    v27 = vrhaddq_u8(v109, v110);
LABEL_24:
    v100 = v26;
    v101 = v27;
    return vpx_variance16x8(&v94, 16, a5, a6, a7);
  }
  if (a4 == 4)
  {
    v59 = a1 + (int)a2;
    v60 = vrhaddq_u8(*(uint8x16_t *)v59, *(uint8x16_t *)(v59 + 1));
    v61 = v59 + (int)a2;
    v62 = vrhaddq_u8(*(uint8x16_t *)v61, *(uint8x16_t *)(v61 + 1));
    v63 = v61 + (int)a2;
    v64 = vrhaddq_u8(*(uint8x16_t *)v63, *(uint8x16_t *)(v63 + 1));
    v65 = v63 + (int)a2;
    v66 = vrhaddq_u8(*(uint8x16_t *)v65, *(uint8x16_t *)(v65 + 1));
    v67 = v65 + (int)a2;
    v68 = vrhaddq_u8(*(uint8x16_t *)v67, *(uint8x16_t *)(v67 + 1));
    v69 = v67 + (int)a2;
    v70 = vrhaddq_u8(*(uint8x16_t *)v69, *(uint8x16_t *)(v69 + 1));
    v71 = v69 + (int)a2;
    v72 = vrhaddq_u8(*(uint8x16_t *)v71, *(uint8x16_t *)(v71 + 1));
    v73 = vrhaddq_u8(*(uint8x16_t *)(v71 + (int)a2), *(uint8x16_t *)(v71 + (int)a2 + 1));
    v94 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1)), v60);
    v95 = vrhaddq_u8(v60, v62);
    v96 = vrhaddq_u8(v62, v64);
    v97 = vrhaddq_u8(v64, v66);
    v98 = vrhaddq_u8(v66, v68);
    v99 = vrhaddq_u8(v68, v70);
    v26 = vrhaddq_u8(v70, v72);
    v27 = vrhaddq_u8(v72, v73);
    goto LABEL_24;
  }
  if (!a4)
  {
    v10 = a1 + (int)a2;
    v11 = vrhaddq_u8(*(uint8x16_t *)v10, *(uint8x16_t *)(v10 + 1));
    v102 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
    v103 = v11;
    v12 = v10 + (int)a2;
    v13 = vrhaddq_u8(*(uint8x16_t *)v12, *(uint8x16_t *)(v12 + 1));
    v14 = v12 + (int)a2;
    v15 = vrhaddq_u8(*(uint8x16_t *)v14, *(uint8x16_t *)(v14 + 1));
    v104 = v13;
    v105 = v15;
    v16 = v14 + (int)a2;
    v17 = vrhaddq_u8(*(uint8x16_t *)v16, *(uint8x16_t *)(v16 + 1));
    v18 = v16 + (int)a2;
    v19 = vrhaddq_u8(*(uint8x16_t *)v18, *(uint8x16_t *)(v18 + 1));
    v106 = v17;
    v107 = v19;
    v20 = v18 + (int)a2;
    v21 = vrhaddq_u8(*(uint8x16_t *)(v20 + (int)a2), *(uint8x16_t *)(v20 + (int)a2 + 1));
    v108 = vrhaddq_u8(*(uint8x16_t *)v20, *(uint8x16_t *)(v20 + 1));
    v109 = v21;
    return vpx_variance16x8(&v102, 16, a5, a6, a7);
  }
  v74 = 0;
  v75 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
  v76 = a1 + (int)a2;
  v77 = vrhaddq_u8(*(uint8x16_t *)v76, *(uint8x16_t *)(v76 + 1));
  v78 = v76 + (int)a2;
  v79 = vrhaddq_u8(*(uint8x16_t *)v78, *(uint8x16_t *)(v78 + 1));
  v103 = v77;
  v104 = v79;
  v80 = v78 + (int)a2;
  v81 = vrhaddq_u8(*(uint8x16_t *)v80, *(uint8x16_t *)(v80 + 1));
  v82 = v80 + (int)a2;
  v83 = vrhaddq_u8(*(uint8x16_t *)v82, *(uint8x16_t *)(v82 + 1));
  v105 = v81;
  v106 = v83;
  v84 = v82 + (int)a2;
  v85 = vrhaddq_u8(*(uint8x16_t *)v84, *(uint8x16_t *)(v84 + 1));
  v86 = v84 + (int)a2;
  v87 = vrhaddq_u8(*(uint8x16_t *)v86, *(uint8x16_t *)(v86 + 1));
  v107 = v85;
  v108 = v87;
  v88 = v86 + (int)a2;
  v89 = vrhaddq_u8(*(uint8x16_t *)v88, *(uint8x16_t *)(v88 + 1));
  v90 = vrhaddq_u8(*(uint8x16_t *)(v88 + (int)a2), *(uint8x16_t *)(v88 + (int)a2 + 1));
  v109 = v89;
  v110 = v90;
  v89.i32[0] = 8 - a4;
  v90.i32[0] = a4;
  v91 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v89.i8, 0);
  v92 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v90.i8, 0);
  do
  {
    v93 = *(uint8x16_t *)((char *)&v103 + v74);
    *(int8x16_t *)((char *)&v94 + v74) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v93.i8, *(uint8x8_t *)v92.i8), *(uint8x8_t *)v75.i8, *(uint8x8_t *)v91.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v93, v92), v75, v91), 3uLL);
    v74 += 16;
    v75 = v93;
  }
  while ((_DWORD)v74 != 128);
  return vpx_variance16x8(&v94, 16, a5, a6, a7);
}

uint64_t vpx_sub_pixel_variance16x16_neon(uint64_t a1, uint64_t a2, __int32 a3, __int32 a4, uint64_t a5, uint64_t a6, uint64_t a7, int8x8_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint8x16_t v11;
  uint64_t v12;
  uint8x16_t v13;
  uint64_t v14;
  uint8x16_t v15;
  uint64_t v16;
  uint8x16_t v17;
  uint64_t v18;
  uint8x16_t v19;
  uint64_t v20;
  uint8x16_t v21;
  uint64_t v22;
  uint8x16_t v23;
  uint64_t v24;
  uint8x16_t v25;
  uint64_t v26;
  uint8x16_t v27;
  uint64_t v28;
  uint8x16_t v29;
  uint64_t v30;
  uint8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  uint8x16_t v36;
  uint8x16_t v37;
  uint64_t v38;
  uint8x8_t *v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  uint64_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint8x16_t v48;
  uint8x16_t *v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint8x16_t *v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t *v55;
  uint8x16_t v56;
  uint8x16_t v57;
  uint8x16_t *v58;
  uint8x16_t v59;
  uint8x16_t v60;
  uint8x16_t *v61;
  uint8x16_t v62;
  uint8x16_t v63;
  uint8x16_t *v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t *v67;
  uint8x16_t v68;
  uint8x16_t v69;
  uint8x16_t *v70;
  uint8x16_t v71;
  uint8x16_t v72;
  uint8x16_t *v73;
  uint8x16_t v74;
  uint8x16_t v75;
  uint8x16_t *v76;
  uint8x16_t v77;
  uint8x16_t v78;
  uint8x16_t *v79;
  uint8x16_t v80;
  uint8x16_t v81;
  uint8x16_t *v82;
  uint8x16_t v83;
  uint8x16_t v84;
  uint8x16_t *v85;
  uint8x16_t v86;
  uint8x16_t *v87;
  uint8x16_t v88;
  uint8x16_t *v89;
  uint64_t v90;
  uint8x16_t v91;
  uint8x8_t *v92;
  uint8x16_t v93;
  uint8x16_t v94;
  uint8x16_t v95;
  uint64_t v96;
  uint8x16_t v97;
  uint64_t v98;
  uint8x16_t v99;
  uint64_t v100;
  uint8x16_t v101;
  uint64_t v102;
  uint8x16_t v103;
  uint64_t v104;
  uint8x16_t v105;
  uint64_t v106;
  uint8x16_t v107;
  uint64_t v108;
  uint8x16_t v109;
  uint64_t v110;
  uint8x16_t v111;
  uint64_t v112;
  uint8x16_t v113;
  uint64_t v114;
  uint8x16_t v115;
  uint64_t v116;
  uint8x16_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint8x16_t v123;
  uint64_t v124;
  uint8x16_t v125;
  uint64_t v126;
  uint8x16_t v127;
  uint64_t v128;
  uint8x16_t v129;
  uint64_t v130;
  uint8x16_t v131;
  uint64_t v132;
  uint8x16_t v133;
  uint64_t v134;
  uint8x16_t v135;
  uint64_t v136;
  uint8x16_t v137;
  uint64_t v138;
  uint8x16_t v139;
  uint64_t v140;
  uint8x16_t v141;
  uint64_t v142;
  uint8x16_t v143;
  uint64_t v144;
  uint8x16_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _OWORD *v149;
  uint8x16_t v150;
  uint8x16_t v151;
  char *v152;
  uint8x16_t v153;
  uint8x16_t v154;
  uint8x16_t v155;
  uint8x16_t v156;
  uint8x16_t v157;
  uint8x16_t v158;
  uint8x16_t v159;
  uint8x16_t v160;
  uint8x16_t v161;
  uint8x16_t v162;
  uint8x16_t v163;
  uint8x16_t v164;
  uint8x16_t v165;
  uint8x16_t v166;
  uint8x16_t v167;
  uint8x16_t v168;
  uint8x16_t v169;
  uint8x16_t v170;
  uint8x16_t v171;
  uint8x16_t v172;
  uint8x16_t v173;
  uint8x16_t v174;
  uint8x16_t v175;
  uint8x16_t v176;
  uint8x16_t v177;
  uint8x16_t v178;
  uint8x16_t v179;
  uint8x16_t v180;
  uint8x16_t v181;
  uint8x16_t v182;
  uint8x16_t v183;
  uint8x16_t v184;
  uint8x16_t v185;
  uint8x16_t v186;
  uint8x16_t v187;
  uint8x16_t v188;
  uint8x16_t v189;
  uint8x16_t v190;
  uint64_t v191;

  v191 = *MEMORY[0x24BDAC8D0];
  if (a3 != 4)
  {
    if (!a3)
    {
      if (a4 != 4)
      {
        if (!a4)
          return vpx_variance16x16(a1, a2, a5, a6, a7);
        v90 = 0;
        a8.i32[0] = 8 - a4;
        a9.i32[0] = a4;
        v91 = *(uint8x16_t *)a1;
        v92 = (uint8x8_t *)(a1 + (int)a2);
        v93 = (uint8x16_t)vdupq_lane_s8(a8, 0);
        v94 = (uint8x16_t)vdupq_lane_s8(a9, 0);
        do
        {
          v95 = *(uint8x16_t *)v92->i8;
          *(int8x16_t *)((char *)&v174 + v90) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v92, *(uint8x8_t *)v94.i8), *(uint8x8_t *)v91.i8, *(uint8x8_t *)v93.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v92->i8, v94), v91, v93), 3uLL);
          v90 += 16;
          v92 = (uint8x8_t *)((char *)v92 + (int)a2);
          v91 = v95;
        }
        while ((_DWORD)v90 != 256);
        return vpx_variance16x16(&v174, 16, a5, a6, a7);
      }
      v49 = (uint8x16_t *)(a1 + (int)a2);
      v50 = *v49;
      v51 = vrhaddq_u8(*(uint8x16_t *)a1, *v49);
      v52 = (uint8x16_t *)((char *)v49 + (int)a2);
      v53 = *v52;
      v54 = vrhaddq_u8(v50, *v52);
      v174 = v51;
      v175 = v54;
      v55 = (uint8x16_t *)((char *)v52 + (int)a2);
      v56 = *v55;
      v57 = vrhaddq_u8(v53, *v55);
      v58 = (uint8x16_t *)((char *)v55 + (int)a2);
      v59 = *v58;
      v60 = vrhaddq_u8(v56, *v58);
      v176 = v57;
      v177 = v60;
      v61 = (uint8x16_t *)((char *)v58 + (int)a2);
      v62 = *v61;
      v63 = vrhaddq_u8(v59, *v61);
      v64 = (uint8x16_t *)((char *)v61 + (int)a2);
      v65 = *v64;
      v66 = vrhaddq_u8(v62, *v64);
      v178 = v63;
      v179 = v66;
      v67 = (uint8x16_t *)((char *)v64 + (int)a2);
      v68 = *v67;
      v69 = vrhaddq_u8(v65, *v67);
      v70 = (uint8x16_t *)((char *)v67 + (int)a2);
      v71 = *v70;
      v72 = vrhaddq_u8(v68, *v70);
      v180 = v69;
      v181 = v72;
      v73 = (uint8x16_t *)((char *)v70 + (int)a2);
      v74 = *v73;
      v75 = vrhaddq_u8(v71, *v73);
      v76 = (uint8x16_t *)((char *)v73 + (int)a2);
      v77 = *v76;
      v78 = vrhaddq_u8(v74, *v76);
      v182 = v75;
      v183 = v78;
      v79 = (uint8x16_t *)((char *)v76 + (int)a2);
      v80 = *v79;
      v81 = vrhaddq_u8(v77, *v79);
      v82 = (uint8x16_t *)((char *)v79 + (int)a2);
      v83 = *v82;
      v84 = vrhaddq_u8(v80, *v82);
      v184 = v81;
      v185 = v84;
      v85 = (uint8x16_t *)((char *)v82 + (int)a2);
      v86 = *v85;
      v186 = vrhaddq_u8(v83, *v85);
      v87 = (uint8x16_t *)((char *)v85 + (int)a2);
      v88 = *v87;
      v187 = vrhaddq_u8(v86, *v87);
      v89 = (uint8x16_t *)((char *)v87 + (int)a2);
      v36 = *v89;
      v188 = vrhaddq_u8(v88, *v89);
      v37 = *(uint8x16_t *)((char *)v89 + (int)a2);
      goto LABEL_20;
    }
    v38 = 0;
    a8.i32[0] = 8 - a3;
    a9.i32[0] = a3;
    v39 = (uint8x8_t *)(a1 + 1);
    v40 = (uint8x16_t)vdupq_lane_s8(a8, 0);
    v41 = (uint8x16_t)vdupq_lane_s8(a9, 0);
    if (a4 != 4)
    {
      if (!a4)
      {
        do
        {
          *(int8x16_t *)((char *)&v174 + v38) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v39, *(uint8x8_t *)v41.i8), *(uint8x8_t *)((char *)v39 - 1), *(uint8x8_t *)v40.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v39->i8, v41), *(uint8x16_t *)((char *)&v39[-1].u32[1] + 3), v40), 3uLL);
          v38 += 16;
          v39 = (uint8x8_t *)((char *)v39 + (int)a2);
        }
        while ((_DWORD)v38 != 256);
        return vpx_variance16x16(&v174, 16, a5, a6, a7);
      }
      do
      {
        *(int8x16_t *)((char *)&v174 + v38) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v39, *(uint8x8_t *)v41.i8), *(uint8x8_t *)((char *)v39 - 1), *(uint8x8_t *)v40.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v39->i8, v41), *(uint8x16_t *)((char *)&v39[-1].u32[1] + 3), v40), 3uLL);
        v38 += 16;
        v39 = (uint8x8_t *)((char *)v39 + (int)a2);
      }
      while ((_DWORD)v38 != 272);
      v44 = 0;
      v40.i32[0] = 8 - a4;
      v41.i32[0] = a4;
      v45 = v174;
      v46 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v40.i8, 0);
      v47 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v41.i8, 0);
      do
      {
        v48 = *(uint8x16_t *)((char *)&v175 + v44);
        *(int8x16_t *)((char *)&v158 + v44) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v47.i8), *(uint8x8_t *)v45.i8, *(uint8x8_t *)v46.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v48, v47), v45, v46), 3uLL);
        v44 += 16;
        v45 = v48;
      }
      while ((_DWORD)v44 != 256);
      return vpx_variance16x16(&v158, 16, a5, a6, a7);
    }
    do
    {
      *(int8x16_t *)((char *)&v174 + v38) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v39, *(uint8x8_t *)v41.i8), *(uint8x8_t *)((char *)v39 - 1), *(uint8x8_t *)v40.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v39->i8, v41), *(uint8x16_t *)((char *)&v39[-1].u32[1] + 3), v40), 3uLL);
      v38 += 16;
      v39 = (uint8x8_t *)((char *)v39 + (int)a2);
    }
    while ((_DWORD)v38 != 272);
    v158 = vrhaddq_u8(v174, v175);
    v159 = vrhaddq_u8(v175, v176);
    v160 = vrhaddq_u8(v176, v177);
    v161 = vrhaddq_u8(v177, v178);
    v162 = vrhaddq_u8(v178, v179);
    v163 = vrhaddq_u8(v179, v180);
    v164 = vrhaddq_u8(v180, v181);
    v165 = vrhaddq_u8(v181, v182);
    v166 = vrhaddq_u8(v182, v183);
    v167 = vrhaddq_u8(v183, v184);
    v168 = vrhaddq_u8(v184, v185);
    v169 = vrhaddq_u8(v185, v186);
    v170 = vrhaddq_u8(v186, v187);
    v171 = vrhaddq_u8(v187, v188);
    v42 = vrhaddq_u8(v188, v189);
    v43 = vrhaddq_u8(v189, v190);
LABEL_25:
    v172 = v42;
    v173 = v43;
    return vpx_variance16x16(&v158, 16, a5, a6, a7);
  }
  if (a4 == 4)
  {
    v96 = a1 + (int)a2;
    v97 = vrhaddq_u8(*(uint8x16_t *)v96, *(uint8x16_t *)(v96 + 1));
    v174 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
    v175 = v97;
    v98 = v96 + (int)a2;
    v99 = vrhaddq_u8(*(uint8x16_t *)v98, *(uint8x16_t *)(v98 + 1));
    v100 = v98 + (int)a2;
    v101 = vrhaddq_u8(*(uint8x16_t *)v100, *(uint8x16_t *)(v100 + 1));
    v176 = v99;
    v177 = v101;
    v102 = v100 + (int)a2;
    v103 = vrhaddq_u8(*(uint8x16_t *)v102, *(uint8x16_t *)(v102 + 1));
    v104 = v102 + (int)a2;
    v105 = vrhaddq_u8(*(uint8x16_t *)v104, *(uint8x16_t *)(v104 + 1));
    v178 = v103;
    v179 = v105;
    v106 = v104 + (int)a2;
    v107 = vrhaddq_u8(*(uint8x16_t *)v106, *(uint8x16_t *)(v106 + 1));
    v108 = v106 + (int)a2;
    v109 = vrhaddq_u8(*(uint8x16_t *)v108, *(uint8x16_t *)(v108 + 1));
    v180 = v107;
    v181 = v109;
    v110 = v108 + (int)a2;
    v111 = vrhaddq_u8(*(uint8x16_t *)v110, *(uint8x16_t *)(v110 + 1));
    v112 = v110 + (int)a2;
    v113 = vrhaddq_u8(*(uint8x16_t *)v112, *(uint8x16_t *)(v112 + 1));
    v182 = v111;
    v183 = v113;
    v114 = v112 + (int)a2;
    v115 = vrhaddq_u8(*(uint8x16_t *)v114, *(uint8x16_t *)(v114 + 1));
    v116 = v114 + (int)a2;
    v117 = vrhaddq_u8(*(uint8x16_t *)v116, *(uint8x16_t *)(v116 + 1));
    v184 = v115;
    v185 = v117;
    v118 = v116 + (int)a2;
    v186 = vrhaddq_u8(*(uint8x16_t *)v118, *(uint8x16_t *)(v118 + 1));
    v119 = v118 + (int)a2;
    v187 = vrhaddq_u8(*(uint8x16_t *)v119, *(uint8x16_t *)(v119 + 1));
    v120 = v119 + (int)a2;
    v188 = vrhaddq_u8(*(uint8x16_t *)v120, *(uint8x16_t *)(v120 + 1));
    v121 = v120 + (int)a2;
    v189 = vrhaddq_u8(*(uint8x16_t *)v121, *(uint8x16_t *)(v121 + 1));
    v190 = vrhaddq_u8(*(uint8x16_t *)(v121 + (int)a2), *(uint8x16_t *)(v121 + (int)a2 + 1));
    v158 = vrhaddq_u8(v174, v97);
    v159 = vrhaddq_u8(v97, v99);
    v160 = vrhaddq_u8(v99, v101);
    v161 = vrhaddq_u8(v101, v103);
    v162 = vrhaddq_u8(v103, v105);
    v163 = vrhaddq_u8(v105, v107);
    v164 = vrhaddq_u8(v107, v109);
    v165 = vrhaddq_u8(v109, v111);
    v166 = vrhaddq_u8(v111, v113);
    v167 = vrhaddq_u8(v113, v115);
    v168 = vrhaddq_u8(v115, v117);
    v169 = vrhaddq_u8(v117, v186);
    v170 = vrhaddq_u8(v186, v187);
    v171 = vrhaddq_u8(v187, v188);
    v42 = vrhaddq_u8(v188, v189);
    v43 = vrhaddq_u8(v189, v190);
    goto LABEL_25;
  }
  if (!a4)
  {
    v10 = a1 + (int)a2;
    v11 = vrhaddq_u8(*(uint8x16_t *)v10, *(uint8x16_t *)(v10 + 1));
    v174 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
    v175 = v11;
    v12 = v10 + (int)a2;
    v13 = vrhaddq_u8(*(uint8x16_t *)v12, *(uint8x16_t *)(v12 + 1));
    v14 = v12 + (int)a2;
    v15 = vrhaddq_u8(*(uint8x16_t *)v14, *(uint8x16_t *)(v14 + 1));
    v176 = v13;
    v177 = v15;
    v16 = v14 + (int)a2;
    v17 = vrhaddq_u8(*(uint8x16_t *)v16, *(uint8x16_t *)(v16 + 1));
    v18 = v16 + (int)a2;
    v19 = vrhaddq_u8(*(uint8x16_t *)v18, *(uint8x16_t *)(v18 + 1));
    v178 = v17;
    v179 = v19;
    v20 = v18 + (int)a2;
    v21 = vrhaddq_u8(*(uint8x16_t *)v20, *(uint8x16_t *)(v20 + 1));
    v22 = v20 + (int)a2;
    v23 = vrhaddq_u8(*(uint8x16_t *)v22, *(uint8x16_t *)(v22 + 1));
    v180 = v21;
    v181 = v23;
    v24 = v22 + (int)a2;
    v25 = vrhaddq_u8(*(uint8x16_t *)v24, *(uint8x16_t *)(v24 + 1));
    v26 = v24 + (int)a2;
    v27 = vrhaddq_u8(*(uint8x16_t *)v26, *(uint8x16_t *)(v26 + 1));
    v182 = v25;
    v183 = v27;
    v28 = v26 + (int)a2;
    v29 = vrhaddq_u8(*(uint8x16_t *)v28, *(uint8x16_t *)(v28 + 1));
    v30 = v28 + (int)a2;
    v31 = vrhaddq_u8(*(uint8x16_t *)v30, *(uint8x16_t *)(v30 + 1));
    v184 = v29;
    v185 = v31;
    v32 = v30 + (int)a2;
    v186 = vrhaddq_u8(*(uint8x16_t *)v32, *(uint8x16_t *)(v32 + 1));
    v33 = v32 + (int)a2;
    v187 = vrhaddq_u8(*(uint8x16_t *)v33, *(uint8x16_t *)(v33 + 1));
    v34 = v33 + (int)a2;
    v188 = vrhaddq_u8(*(uint8x16_t *)v34, *(uint8x16_t *)(v34 + 1));
    v35 = (_OWORD *)(v34 + (int)a2);
    v36 = *(uint8x16_t *)v35;
    v37 = *(uint8x16_t *)((char *)v35 + 1);
LABEL_20:
    v189 = vrhaddq_u8(v36, v37);
    return vpx_variance16x16(&v174, 16, a5, a6, a7);
  }
  v122 = 0;
  v123 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
  v124 = a1 + (int)a2;
  v125 = vrhaddq_u8(*(uint8x16_t *)v124, *(uint8x16_t *)(v124 + 1));
  v174 = v123;
  v175 = v125;
  v126 = v124 + (int)a2;
  v127 = vrhaddq_u8(*(uint8x16_t *)v126, *(uint8x16_t *)(v126 + 1));
  v128 = v126 + (int)a2;
  v129 = vrhaddq_u8(*(uint8x16_t *)v128, *(uint8x16_t *)(v128 + 1));
  v176 = v127;
  v177 = v129;
  v130 = v128 + (int)a2;
  v131 = vrhaddq_u8(*(uint8x16_t *)v130, *(uint8x16_t *)(v130 + 1));
  v132 = v130 + (int)a2;
  v133 = vrhaddq_u8(*(uint8x16_t *)v132, *(uint8x16_t *)(v132 + 1));
  v178 = v131;
  v179 = v133;
  v134 = v132 + (int)a2;
  v135 = vrhaddq_u8(*(uint8x16_t *)v134, *(uint8x16_t *)(v134 + 1));
  v136 = v134 + (int)a2;
  v137 = vrhaddq_u8(*(uint8x16_t *)v136, *(uint8x16_t *)(v136 + 1));
  v180 = v135;
  v181 = v137;
  v138 = v136 + (int)a2;
  v139 = vrhaddq_u8(*(uint8x16_t *)v138, *(uint8x16_t *)(v138 + 1));
  v140 = v138 + (int)a2;
  v141 = vrhaddq_u8(*(uint8x16_t *)v140, *(uint8x16_t *)(v140 + 1));
  v182 = v139;
  v183 = v141;
  v142 = v140 + (int)a2;
  v143 = vrhaddq_u8(*(uint8x16_t *)v142, *(uint8x16_t *)(v142 + 1));
  v144 = v142 + (int)a2;
  v145 = vrhaddq_u8(*(uint8x16_t *)v144, *(uint8x16_t *)(v144 + 1));
  v184 = v143;
  v185 = v145;
  v146 = v144 + (int)a2;
  v186 = vrhaddq_u8(*(uint8x16_t *)v146, *(uint8x16_t *)(v146 + 1));
  v147 = v146 + (int)a2;
  v187 = vrhaddq_u8(*(uint8x16_t *)v147, *(uint8x16_t *)(v147 + 1));
  v148 = v147 + (int)a2;
  v188 = vrhaddq_u8(*(uint8x16_t *)v148, *(uint8x16_t *)(v148 + 1));
  v149 = (_OWORD *)(v148 + (int)a2);
  v150 = *(uint8x16_t *)v149;
  v151 = *(uint8x16_t *)((char *)v149 + 1);
  v152 = (char *)v149 + (int)a2;
  v189 = vrhaddq_u8(v150, v151);
  v153 = *(uint8x16_t *)(v152 + 1);
  v154 = vrhaddq_u8(*(uint8x16_t *)v152, v153);
  v190 = v154;
  v154.i32[0] = 8 - a4;
  v153.i32[0] = a4;
  v155 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v154.i8, 0);
  v156 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v153.i8, 0);
  do
  {
    v157 = *(uint8x16_t *)((char *)&v175 + v122);
    *(int8x16_t *)((char *)&v158 + v122) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v157.i8, *(uint8x8_t *)v156.i8), *(uint8x8_t *)v123.i8, *(uint8x8_t *)v155.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v157, v156), v123, v155), 3uLL);
    v122 += 16;
    v123 = v157;
  }
  while ((_DWORD)v122 != 256);
  return vpx_variance16x16(&v158, 16, a5, a6, a7);
}

uint64_t vpx_sub_pixel_variance16x32_neon(uint64_t a1, uint64_t a2, __int32 a3, __int32 a4, uint64_t a5, uint64_t a6, uint64_t a7, int8x8_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint8x16_t v11;
  uint64_t v12;
  uint8x16_t v13;
  uint64_t v14;
  uint8x16_t v15;
  uint64_t v16;
  uint8x16_t v17;
  uint64_t v18;
  uint8x16_t v19;
  uint64_t v20;
  uint8x16_t v21;
  uint64_t v22;
  uint8x16_t v23;
  uint64_t v24;
  uint8x16_t v25;
  uint64_t v26;
  uint8x16_t v27;
  uint64_t v28;
  uint8x16_t v29;
  uint64_t v30;
  uint8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint64_t v54;
  uint8x8_t *v55;
  uint8x16_t v56;
  uint8x16_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  uint64_t v60;
  uint8x16_t v61;
  uint8x16_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  uint8x16_t *v65;
  uint8x16_t v66;
  uint8x16_t v67;
  uint8x16_t *v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t *v71;
  uint8x16_t v72;
  uint8x16_t v73;
  uint8x16_t *v74;
  uint8x16_t v75;
  uint8x16_t v76;
  uint8x16_t *v77;
  uint8x16_t v78;
  uint8x16_t v79;
  uint8x16_t *v80;
  uint8x16_t v81;
  uint8x16_t v82;
  uint8x16_t *v83;
  uint8x16_t v84;
  uint8x16_t v85;
  uint8x16_t *v86;
  uint8x16_t v87;
  uint8x16_t v88;
  uint8x16_t *v89;
  uint8x16_t v90;
  uint8x16_t v91;
  uint8x16_t *v92;
  uint8x16_t v93;
  uint8x16_t v94;
  uint8x16_t *v95;
  uint8x16_t v96;
  uint8x16_t v97;
  uint8x16_t *v98;
  uint8x16_t v99;
  uint8x16_t v100;
  uint8x16_t *v101;
  uint8x16_t v102;
  uint8x16_t *v103;
  uint8x16_t v104;
  uint8x16_t *v105;
  uint8x16_t v106;
  uint8x16_t *v107;
  uint8x16_t v108;
  uint8x16_t *v109;
  uint8x16_t v110;
  uint8x16_t *v111;
  uint8x16_t v112;
  uint8x16_t *v113;
  uint8x16_t v114;
  uint8x16_t *v115;
  uint8x16_t v116;
  uint8x16_t *v117;
  uint8x16_t v118;
  uint8x16_t *v119;
  uint8x16_t v120;
  uint8x16_t *v121;
  uint8x16_t v122;
  uint8x16_t *v123;
  uint8x16_t v124;
  uint8x16_t *v125;
  uint8x16_t v126;
  uint8x16_t *v127;
  uint8x16_t v128;
  uint8x16_t *v129;
  uint8x16_t v130;
  uint8x16_t *v131;
  uint8x16_t v132;
  uint8x16_t *v133;
  uint8x16_t v134;
  uint8x16_t *v135;
  uint8x16_t v136;
  uint8x16_t *v137;
  uint64_t v138;
  uint8x16_t v139;
  uint8x8_t *v140;
  uint8x16_t v141;
  uint8x16_t v142;
  uint8x16_t v143;
  uint64_t v144;
  uint64_t v145;
  uint8x16_t v146;
  uint64_t v147;
  uint64_t v148;
  uint8x16_t v149;
  uint64_t v150;
  uint8x16_t v151;
  uint64_t v152;
  uint8x16_t v153;
  uint64_t v154;
  uint8x16_t v155;
  uint64_t v156;
  uint8x16_t v157;
  uint64_t v158;
  uint8x16_t v159;
  uint64_t v160;
  uint8x16_t v161;
  uint64_t v162;
  uint8x16_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint8x16_t v184;
  uint64_t v185;
  uint8x16_t v186;
  uint64_t v187;
  uint8x16_t v188;
  uint64_t v189;
  uint8x16_t v190;
  uint64_t v191;
  uint8x16_t v192;
  uint64_t v193;
  uint8x16_t v194;
  uint64_t v195;
  uint8x16_t v196;
  uint64_t v197;
  uint8x16_t v198;
  uint64_t v199;
  uint8x16_t v200;
  uint64_t v201;
  uint8x16_t v202;
  uint64_t v203;
  uint8x16_t v204;
  uint64_t v205;
  uint8x16_t v206;
  uint64_t v207;
  uint8x16_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _OWORD *v228;
  uint8x16_t v229;
  uint8x16_t v230;
  char *v231;
  uint8x16_t v232;
  uint8x16_t v233;
  uint8x16_t v234;
  uint8x16_t v235;
  uint8x16_t v236;
  uint8x16_t v237;
  uint8x16_t v238;
  uint8x16_t v239;
  uint8x16_t v240;
  uint8x16_t v241;
  uint8x16_t v242;
  uint8x16_t v243;
  uint8x16_t v244;
  uint8x16_t v245;
  uint8x16_t v246;
  uint8x16_t v247;
  uint8x16_t v248;
  uint8x16_t v249;
  uint8x16_t v250;
  uint8x16_t v251;
  uint8x16_t v252;
  uint8x16_t v253;
  uint8x16_t v254;
  uint8x16_t v255;
  uint8x16_t v256;
  uint8x16_t v257;
  uint8x16_t v258;
  uint8x16_t v259;
  uint8x16_t v260;
  uint8x16_t v261;
  uint8x16_t v262;
  uint8x16_t v263;
  uint8x16_t v264;
  uint8x16_t v265;
  uint8x16_t v266;
  uint8x16_t v267;
  uint8x16_t v268;
  uint8x16_t v269;
  uint8x16_t v270;
  uint8x16_t v271;
  uint8x16_t v272;
  uint8x16_t v273;
  uint8x16_t v274;
  uint8x16_t v275;
  uint8x16_t v276;
  uint8x16_t v277;
  uint8x16_t v278;
  uint8x16_t v279;
  uint8x16_t v280;
  uint8x16_t v281;
  uint8x16_t v282;
  uint8x16_t v283;
  uint8x16_t v284;
  uint8x16_t v285;
  uint8x16_t v286;
  uint8x16_t v287;
  uint8x16_t v288;
  uint8x16_t v289;
  uint8x16_t v290;
  uint8x16_t v291;
  uint8x16_t v292;
  uint8x16_t v293;
  uint8x16_t v294;
  uint8x16_t v295;
  uint8x16_t v296;
  uint8x16_t v297;
  uint8x16_t v298;
  uint8x16_t v299;
  uint8x16_t v300;
  uint8x16_t v301;
  uint8x16_t v302;
  uint8x16_t v303;
  uint64_t v304;

  v304 = *MEMORY[0x24BDAC8D0];
  if (a3 != 4)
  {
    if (!a3)
    {
      if (a4 != 4)
      {
        if (!a4)
          return vpx_variance16x32(a1, a2, a5, a6, a7);
        v138 = 0;
        a8.i32[0] = 8 - a4;
        a9.i32[0] = a4;
        v139 = *(uint8x16_t *)a1;
        v140 = (uint8x8_t *)(a1 + (int)a2);
        v141 = (uint8x16_t)vdupq_lane_s8(a8, 0);
        v142 = (uint8x16_t)vdupq_lane_s8(a9, 0);
        do
        {
          v143 = *(uint8x16_t *)v140->i8;
          *(int8x16_t *)((char *)&v271 + v138) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v140, *(uint8x8_t *)v142.i8), *(uint8x8_t *)v139.i8, *(uint8x8_t *)v141.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v140->i8, v142), v139, v141), 3uLL);
          v138 += 16;
          v140 = (uint8x8_t *)((char *)v140 + (int)a2);
          v139 = v143;
        }
        while ((_DWORD)v138 != 512);
        return vpx_variance16x32(&v271, 16, a5, a6, a7);
      }
      v65 = (uint8x16_t *)(a1 + (int)a2);
      v66 = *v65;
      v67 = vrhaddq_u8(*(uint8x16_t *)a1, *v65);
      v68 = (uint8x16_t *)((char *)v65 + (int)a2);
      v69 = *v68;
      v70 = vrhaddq_u8(v66, *v68);
      v271 = v67;
      v272 = v70;
      v71 = (uint8x16_t *)((char *)v68 + (int)a2);
      v72 = *v71;
      v73 = vrhaddq_u8(v69, *v71);
      v74 = (uint8x16_t *)((char *)v71 + (int)a2);
      v75 = *v74;
      v76 = vrhaddq_u8(v72, *v74);
      v273 = v73;
      v274 = v76;
      v77 = (uint8x16_t *)((char *)v74 + (int)a2);
      v78 = *v77;
      v79 = vrhaddq_u8(v75, *v77);
      v80 = (uint8x16_t *)((char *)v77 + (int)a2);
      v81 = *v80;
      v82 = vrhaddq_u8(v78, *v80);
      v275 = v79;
      v276 = v82;
      v83 = (uint8x16_t *)((char *)v80 + (int)a2);
      v84 = *v83;
      v85 = vrhaddq_u8(v81, *v83);
      v86 = (uint8x16_t *)((char *)v83 + (int)a2);
      v87 = *v86;
      v88 = vrhaddq_u8(v84, *v86);
      v277 = v85;
      v278 = v88;
      v89 = (uint8x16_t *)((char *)v86 + (int)a2);
      v90 = *v89;
      v91 = vrhaddq_u8(v87, *v89);
      v92 = (uint8x16_t *)((char *)v89 + (int)a2);
      v93 = *v92;
      v94 = vrhaddq_u8(v90, *v92);
      v279 = v91;
      v280 = v94;
      v95 = (uint8x16_t *)((char *)v92 + (int)a2);
      v96 = *v95;
      v97 = vrhaddq_u8(v93, *v95);
      v98 = (uint8x16_t *)((char *)v95 + (int)a2);
      v99 = *v98;
      v100 = vrhaddq_u8(v96, *v98);
      v281 = v97;
      v282 = v100;
      v101 = (uint8x16_t *)((char *)v98 + (int)a2);
      v102 = *v101;
      v283 = vrhaddq_u8(v99, *v101);
      v103 = (uint8x16_t *)((char *)v101 + (int)a2);
      v104 = *v103;
      v284 = vrhaddq_u8(v102, *v103);
      v105 = (uint8x16_t *)((char *)v103 + (int)a2);
      v106 = *v105;
      v285 = vrhaddq_u8(v104, *v105);
      v107 = (uint8x16_t *)((char *)v105 + (int)a2);
      v108 = *v107;
      v286 = vrhaddq_u8(v106, *v107);
      v109 = (uint8x16_t *)((char *)v107 + (int)a2);
      v110 = *v109;
      v287 = vrhaddq_u8(v108, *v109);
      v111 = (uint8x16_t *)((char *)v109 + (int)a2);
      v112 = *v111;
      v288 = vrhaddq_u8(v110, *v111);
      v113 = (uint8x16_t *)((char *)v111 + (int)a2);
      v114 = *v113;
      v289 = vrhaddq_u8(v112, *v113);
      v115 = (uint8x16_t *)((char *)v113 + (int)a2);
      v116 = *v115;
      v290 = vrhaddq_u8(v114, *v115);
      v117 = (uint8x16_t *)((char *)v115 + (int)a2);
      v118 = *v117;
      v291 = vrhaddq_u8(v116, *v117);
      v119 = (uint8x16_t *)((char *)v117 + (int)a2);
      v120 = *v119;
      v292 = vrhaddq_u8(v118, *v119);
      v121 = (uint8x16_t *)((char *)v119 + (int)a2);
      v122 = *v121;
      v293 = vrhaddq_u8(v120, *v121);
      v123 = (uint8x16_t *)((char *)v121 + (int)a2);
      v124 = *v123;
      v294 = vrhaddq_u8(v122, *v123);
      v125 = (uint8x16_t *)((char *)v123 + (int)a2);
      v126 = *v125;
      v295 = vrhaddq_u8(v124, *v125);
      v127 = (uint8x16_t *)((char *)v125 + (int)a2);
      v128 = *v127;
      v296 = vrhaddq_u8(v126, *v127);
      v129 = (uint8x16_t *)((char *)v127 + (int)a2);
      v130 = *v129;
      v297 = vrhaddq_u8(v128, *v129);
      v131 = (uint8x16_t *)((char *)v129 + (int)a2);
      v132 = *v131;
      v298 = vrhaddq_u8(v130, *v131);
      v133 = (uint8x16_t *)((char *)v131 + (int)a2);
      v134 = *v133;
      v299 = vrhaddq_u8(v132, *v133);
      v135 = (uint8x16_t *)((char *)v133 + (int)a2);
      v136 = *v135;
      v300 = vrhaddq_u8(v134, *v135);
      v137 = (uint8x16_t *)((char *)v135 + (int)a2);
      v52 = *v137;
      v301 = vrhaddq_u8(v136, *v137);
      v53 = *(uint8x16_t *)((char *)v137 + (int)a2);
      goto LABEL_20;
    }
    v54 = 0;
    a8.i32[0] = 8 - a3;
    a9.i32[0] = a3;
    v55 = (uint8x8_t *)(a1 + 1);
    v56 = (uint8x16_t)vdupq_lane_s8(a8, 0);
    v57 = (uint8x16_t)vdupq_lane_s8(a9, 0);
    if (a4 != 4)
    {
      if (!a4)
      {
        do
        {
          *(int8x16_t *)((char *)&v271 + v54) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v55, *(uint8x8_t *)v57.i8), *(uint8x8_t *)((char *)v55 - 1), *(uint8x8_t *)v56.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v55->i8, v57), *(uint8x16_t *)((char *)&v55[-1].u32[1] + 3), v56), 3uLL);
          v54 += 16;
          v55 = (uint8x8_t *)((char *)v55 + (int)a2);
        }
        while ((_DWORD)v54 != 512);
        return vpx_variance16x32(&v271, 16, a5, a6, a7);
      }
      do
      {
        *(int8x16_t *)((char *)&v271 + v54) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v55, *(uint8x8_t *)v57.i8), *(uint8x8_t *)((char *)v55 - 1), *(uint8x8_t *)v56.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v55->i8, v57), *(uint8x16_t *)((char *)&v55[-1].u32[1] + 3), v56), 3uLL);
        v54 += 16;
        v55 = (uint8x8_t *)((char *)v55 + (int)a2);
      }
      while ((_DWORD)v54 != 528);
      v60 = 0;
      v56.i32[0] = 8 - a4;
      v57.i32[0] = a4;
      v61 = v271;
      v62 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v56.i8, 0);
      v63 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v57.i8, 0);
      do
      {
        v64 = *(uint8x16_t *)((char *)&v272 + v60);
        *(int8x16_t *)((char *)&v239 + v60) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v64.i8, *(uint8x8_t *)v63.i8), *(uint8x8_t *)v61.i8, *(uint8x8_t *)v62.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v64, v63), v61, v62), 3uLL);
        v60 += 16;
        v61 = v64;
      }
      while ((_DWORD)v60 != 512);
      return vpx_variance16x32(&v239, 16, a5, a6, a7);
    }
    do
    {
      *(int8x16_t *)((char *)&v271 + v54) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v55, *(uint8x8_t *)v57.i8), *(uint8x8_t *)((char *)v55 - 1), *(uint8x8_t *)v56.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v55->i8, v57), *(uint8x16_t *)((char *)&v55[-1].u32[1] + 3), v56), 3uLL);
      v54 += 16;
      v55 = (uint8x8_t *)((char *)v55 + (int)a2);
    }
    while ((_DWORD)v54 != 528);
    v239 = vrhaddq_u8(v271, v272);
    v240 = vrhaddq_u8(v272, v273);
    v241 = vrhaddq_u8(v273, v274);
    v242 = vrhaddq_u8(v274, v275);
    v243 = vrhaddq_u8(v275, v276);
    v244 = vrhaddq_u8(v276, v277);
    v245 = vrhaddq_u8(v277, v278);
    v246 = vrhaddq_u8(v278, v279);
    v247 = vrhaddq_u8(v279, v280);
    v248 = vrhaddq_u8(v280, v281);
    v249 = vrhaddq_u8(v281, v282);
    v250 = vrhaddq_u8(v282, v283);
    v251 = vrhaddq_u8(v283, v284);
    v252 = vrhaddq_u8(v284, v285);
    v253 = vrhaddq_u8(v285, v286);
    v254 = vrhaddq_u8(v286, v287);
    v255 = vrhaddq_u8(v287, v288);
    v256 = vrhaddq_u8(v288, v289);
    v257 = vrhaddq_u8(v289, v290);
    v258 = vrhaddq_u8(v290, v291);
    v259 = vrhaddq_u8(v291, v292);
    v260 = vrhaddq_u8(v292, v293);
    v261 = vrhaddq_u8(v293, v294);
    v262 = vrhaddq_u8(v294, v295);
    v263 = vrhaddq_u8(v295, v296);
    v264 = vrhaddq_u8(v296, v297);
    v265 = vrhaddq_u8(v297, v298);
    v266 = vrhaddq_u8(v298, v299);
    v267 = vrhaddq_u8(v299, v300);
    v268 = vrhaddq_u8(v300, v301);
    v58 = vrhaddq_u8(v301, v302);
    v59 = vrhaddq_u8(v302, v303);
LABEL_25:
    v269 = v58;
    v270 = v59;
    return vpx_variance16x32(&v239, 16, a5, a6, a7);
  }
  if (a4 == 4)
  {
    v144 = a1 + (int)a2;
    v238 = vrhaddq_u8(*(uint8x16_t *)v144, *(uint8x16_t *)(v144 + 1));
    v271 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
    v272 = v238;
    v145 = v144 + (int)a2;
    v146 = vrhaddq_u8(*(uint8x16_t *)v145, *(uint8x16_t *)(v145 + 1));
    v147 = v145 + (int)a2;
    v237 = vrhaddq_u8(*(uint8x16_t *)v147, *(uint8x16_t *)(v147 + 1));
    v273 = v146;
    v274 = v237;
    v148 = v147 + (int)a2;
    v149 = vrhaddq_u8(*(uint8x16_t *)v148, *(uint8x16_t *)(v148 + 1));
    v150 = v148 + (int)a2;
    v151 = vrhaddq_u8(*(uint8x16_t *)v150, *(uint8x16_t *)(v150 + 1));
    v275 = v149;
    v276 = v151;
    v152 = v150 + (int)a2;
    v153 = vrhaddq_u8(*(uint8x16_t *)v152, *(uint8x16_t *)(v152 + 1));
    v154 = v152 + (int)a2;
    v155 = vrhaddq_u8(*(uint8x16_t *)v154, *(uint8x16_t *)(v154 + 1));
    v277 = v153;
    v278 = v155;
    v156 = v154 + (int)a2;
    v157 = vrhaddq_u8(*(uint8x16_t *)v156, *(uint8x16_t *)(v156 + 1));
    v158 = v156 + (int)a2;
    v159 = vrhaddq_u8(*(uint8x16_t *)v158, *(uint8x16_t *)(v158 + 1));
    v279 = v157;
    v280 = v159;
    v160 = v158 + (int)a2;
    v161 = vrhaddq_u8(*(uint8x16_t *)v160, *(uint8x16_t *)(v160 + 1));
    v162 = v160 + (int)a2;
    v163 = vrhaddq_u8(*(uint8x16_t *)v162, *(uint8x16_t *)(v162 + 1));
    v281 = v161;
    v282 = v163;
    v164 = v162 + (int)a2;
    v283 = vrhaddq_u8(*(uint8x16_t *)v164, *(uint8x16_t *)(v164 + 1));
    v165 = v164 + (int)a2;
    v284 = vrhaddq_u8(*(uint8x16_t *)v165, *(uint8x16_t *)(v165 + 1));
    v166 = v165 + (int)a2;
    v285 = vrhaddq_u8(*(uint8x16_t *)v166, *(uint8x16_t *)(v166 + 1));
    v167 = v166 + (int)a2;
    v286 = vrhaddq_u8(*(uint8x16_t *)v167, *(uint8x16_t *)(v167 + 1));
    v168 = v167 + (int)a2;
    v287 = vrhaddq_u8(*(uint8x16_t *)v168, *(uint8x16_t *)(v168 + 1));
    v169 = v168 + (int)a2;
    v288 = vrhaddq_u8(*(uint8x16_t *)v169, *(uint8x16_t *)(v169 + 1));
    v170 = v169 + (int)a2;
    v289 = vrhaddq_u8(*(uint8x16_t *)v170, *(uint8x16_t *)(v170 + 1));
    v171 = v170 + (int)a2;
    v290 = vrhaddq_u8(*(uint8x16_t *)v171, *(uint8x16_t *)(v171 + 1));
    v172 = v171 + (int)a2;
    v291 = vrhaddq_u8(*(uint8x16_t *)v172, *(uint8x16_t *)(v172 + 1));
    v173 = v172 + (int)a2;
    v292 = vrhaddq_u8(*(uint8x16_t *)v173, *(uint8x16_t *)(v173 + 1));
    v174 = v173 + (int)a2;
    v293 = vrhaddq_u8(*(uint8x16_t *)v174, *(uint8x16_t *)(v174 + 1));
    v175 = v174 + (int)a2;
    v294 = vrhaddq_u8(*(uint8x16_t *)v175, *(uint8x16_t *)(v175 + 1));
    v176 = v175 + (int)a2;
    v295 = vrhaddq_u8(*(uint8x16_t *)v176, *(uint8x16_t *)(v176 + 1));
    v177 = v176 + (int)a2;
    v296 = vrhaddq_u8(*(uint8x16_t *)v177, *(uint8x16_t *)(v177 + 1));
    v178 = v177 + (int)a2;
    v297 = vrhaddq_u8(*(uint8x16_t *)v178, *(uint8x16_t *)(v178 + 1));
    v179 = v178 + (int)a2;
    v298 = vrhaddq_u8(*(uint8x16_t *)v179, *(uint8x16_t *)(v179 + 1));
    v180 = v179 + (int)a2;
    v299 = vrhaddq_u8(*(uint8x16_t *)v180, *(uint8x16_t *)(v180 + 1));
    v181 = v180 + (int)a2;
    v300 = vrhaddq_u8(*(uint8x16_t *)v181, *(uint8x16_t *)(v181 + 1));
    v182 = v181 + (int)a2;
    v301 = vrhaddq_u8(*(uint8x16_t *)v182, *(uint8x16_t *)(v182 + 1));
    v183 = v182 + (int)a2;
    v302 = vrhaddq_u8(*(uint8x16_t *)v183, *(uint8x16_t *)(v183 + 1));
    v184 = vrhaddq_u8(*(uint8x16_t *)(v183 + (int)a2), *(uint8x16_t *)(v183 + (int)a2 + 1));
    v239 = vrhaddq_u8(v271, v238);
    v240 = vrhaddq_u8(v238, v146);
    v241 = vrhaddq_u8(v146, v237);
    v242 = vrhaddq_u8(v237, v149);
    v243 = vrhaddq_u8(v149, v151);
    v244 = vrhaddq_u8(v151, v153);
    v245 = vrhaddq_u8(v153, v155);
    v246 = vrhaddq_u8(v155, v157);
    v247 = vrhaddq_u8(v157, v159);
    v248 = vrhaddq_u8(v159, v161);
    v249 = vrhaddq_u8(v161, v163);
    v250 = vrhaddq_u8(v163, v283);
    v251 = vrhaddq_u8(v283, v284);
    v252 = vrhaddq_u8(v284, v285);
    v253 = vrhaddq_u8(v285, v286);
    v254 = vrhaddq_u8(v286, v287);
    v255 = vrhaddq_u8(v287, v288);
    v256 = vrhaddq_u8(v288, v289);
    v257 = vrhaddq_u8(v289, v290);
    v258 = vrhaddq_u8(v290, v291);
    v259 = vrhaddq_u8(v291, v292);
    v260 = vrhaddq_u8(v292, v293);
    v261 = vrhaddq_u8(v293, v294);
    v262 = vrhaddq_u8(v294, v295);
    v263 = vrhaddq_u8(v295, v296);
    v264 = vrhaddq_u8(v296, v297);
    v265 = vrhaddq_u8(v297, v298);
    v266 = vrhaddq_u8(v298, v299);
    v267 = vrhaddq_u8(v299, v300);
    v268 = vrhaddq_u8(v300, v301);
    v303 = v184;
    v58 = vrhaddq_u8(v301, v302);
    v59 = vrhaddq_u8(v302, v184);
    goto LABEL_25;
  }
  if (!a4)
  {
    v10 = a1 + (int)a2;
    v11 = vrhaddq_u8(*(uint8x16_t *)v10, *(uint8x16_t *)(v10 + 1));
    v271 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
    v272 = v11;
    v12 = v10 + (int)a2;
    v13 = vrhaddq_u8(*(uint8x16_t *)v12, *(uint8x16_t *)(v12 + 1));
    v14 = v12 + (int)a2;
    v15 = vrhaddq_u8(*(uint8x16_t *)v14, *(uint8x16_t *)(v14 + 1));
    v273 = v13;
    v274 = v15;
    v16 = v14 + (int)a2;
    v17 = vrhaddq_u8(*(uint8x16_t *)v16, *(uint8x16_t *)(v16 + 1));
    v18 = v16 + (int)a2;
    v19 = vrhaddq_u8(*(uint8x16_t *)v18, *(uint8x16_t *)(v18 + 1));
    v275 = v17;
    v276 = v19;
    v20 = v18 + (int)a2;
    v21 = vrhaddq_u8(*(uint8x16_t *)v20, *(uint8x16_t *)(v20 + 1));
    v22 = v20 + (int)a2;
    v23 = vrhaddq_u8(*(uint8x16_t *)v22, *(uint8x16_t *)(v22 + 1));
    v277 = v21;
    v278 = v23;
    v24 = v22 + (int)a2;
    v25 = vrhaddq_u8(*(uint8x16_t *)v24, *(uint8x16_t *)(v24 + 1));
    v26 = v24 + (int)a2;
    v27 = vrhaddq_u8(*(uint8x16_t *)v26, *(uint8x16_t *)(v26 + 1));
    v279 = v25;
    v280 = v27;
    v28 = v26 + (int)a2;
    v29 = vrhaddq_u8(*(uint8x16_t *)v28, *(uint8x16_t *)(v28 + 1));
    v30 = v28 + (int)a2;
    v31 = vrhaddq_u8(*(uint8x16_t *)v30, *(uint8x16_t *)(v30 + 1));
    v281 = v29;
    v282 = v31;
    v32 = v30 + (int)a2;
    v283 = vrhaddq_u8(*(uint8x16_t *)v32, *(uint8x16_t *)(v32 + 1));
    v33 = v32 + (int)a2;
    v284 = vrhaddq_u8(*(uint8x16_t *)v33, *(uint8x16_t *)(v33 + 1));
    v34 = v33 + (int)a2;
    v285 = vrhaddq_u8(*(uint8x16_t *)v34, *(uint8x16_t *)(v34 + 1));
    v35 = v34 + (int)a2;
    v286 = vrhaddq_u8(*(uint8x16_t *)v35, *(uint8x16_t *)(v35 + 1));
    v36 = v35 + (int)a2;
    v287 = vrhaddq_u8(*(uint8x16_t *)v36, *(uint8x16_t *)(v36 + 1));
    v37 = v36 + (int)a2;
    v288 = vrhaddq_u8(*(uint8x16_t *)v37, *(uint8x16_t *)(v37 + 1));
    v38 = v37 + (int)a2;
    v289 = vrhaddq_u8(*(uint8x16_t *)v38, *(uint8x16_t *)(v38 + 1));
    v39 = v38 + (int)a2;
    v290 = vrhaddq_u8(*(uint8x16_t *)v39, *(uint8x16_t *)(v39 + 1));
    v40 = v39 + (int)a2;
    v291 = vrhaddq_u8(*(uint8x16_t *)v40, *(uint8x16_t *)(v40 + 1));
    v41 = v40 + (int)a2;
    v292 = vrhaddq_u8(*(uint8x16_t *)v41, *(uint8x16_t *)(v41 + 1));
    v42 = v41 + (int)a2;
    v293 = vrhaddq_u8(*(uint8x16_t *)v42, *(uint8x16_t *)(v42 + 1));
    v43 = v42 + (int)a2;
    v294 = vrhaddq_u8(*(uint8x16_t *)v43, *(uint8x16_t *)(v43 + 1));
    v44 = v43 + (int)a2;
    v295 = vrhaddq_u8(*(uint8x16_t *)v44, *(uint8x16_t *)(v44 + 1));
    v45 = v44 + (int)a2;
    v296 = vrhaddq_u8(*(uint8x16_t *)v45, *(uint8x16_t *)(v45 + 1));
    v46 = v45 + (int)a2;
    v297 = vrhaddq_u8(*(uint8x16_t *)v46, *(uint8x16_t *)(v46 + 1));
    v47 = v46 + (int)a2;
    v298 = vrhaddq_u8(*(uint8x16_t *)v47, *(uint8x16_t *)(v47 + 1));
    v48 = v47 + (int)a2;
    v299 = vrhaddq_u8(*(uint8x16_t *)v48, *(uint8x16_t *)(v48 + 1));
    v49 = v48 + (int)a2;
    v300 = vrhaddq_u8(*(uint8x16_t *)v49, *(uint8x16_t *)(v49 + 1));
    v50 = v49 + (int)a2;
    v301 = vrhaddq_u8(*(uint8x16_t *)v50, *(uint8x16_t *)(v50 + 1));
    v51 = (_OWORD *)(v50 + (int)a2);
    v52 = *(uint8x16_t *)v51;
    v53 = *(uint8x16_t *)((char *)v51 + 1);
LABEL_20:
    v302 = vrhaddq_u8(v52, v53);
    return vpx_variance16x32(&v271, 16, a5, a6, a7);
  }
  v185 = 0;
  v186 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
  v187 = a1 + (int)a2;
  v188 = vrhaddq_u8(*(uint8x16_t *)v187, *(uint8x16_t *)(v187 + 1));
  v271 = v186;
  v272 = v188;
  v189 = v187 + (int)a2;
  v190 = vrhaddq_u8(*(uint8x16_t *)v189, *(uint8x16_t *)(v189 + 1));
  v191 = v189 + (int)a2;
  v192 = vrhaddq_u8(*(uint8x16_t *)v191, *(uint8x16_t *)(v191 + 1));
  v273 = v190;
  v274 = v192;
  v193 = v191 + (int)a2;
  v194 = vrhaddq_u8(*(uint8x16_t *)v193, *(uint8x16_t *)(v193 + 1));
  v195 = v193 + (int)a2;
  v196 = vrhaddq_u8(*(uint8x16_t *)v195, *(uint8x16_t *)(v195 + 1));
  v275 = v194;
  v276 = v196;
  v197 = v195 + (int)a2;
  v198 = vrhaddq_u8(*(uint8x16_t *)v197, *(uint8x16_t *)(v197 + 1));
  v199 = v197 + (int)a2;
  v200 = vrhaddq_u8(*(uint8x16_t *)v199, *(uint8x16_t *)(v199 + 1));
  v277 = v198;
  v278 = v200;
  v201 = v199 + (int)a2;
  v202 = vrhaddq_u8(*(uint8x16_t *)v201, *(uint8x16_t *)(v201 + 1));
  v203 = v201 + (int)a2;
  v204 = vrhaddq_u8(*(uint8x16_t *)v203, *(uint8x16_t *)(v203 + 1));
  v279 = v202;
  v280 = v204;
  v205 = v203 + (int)a2;
  v206 = vrhaddq_u8(*(uint8x16_t *)v205, *(uint8x16_t *)(v205 + 1));
  v207 = v205 + (int)a2;
  v208 = vrhaddq_u8(*(uint8x16_t *)v207, *(uint8x16_t *)(v207 + 1));
  v281 = v206;
  v282 = v208;
  v209 = v207 + (int)a2;
  v283 = vrhaddq_u8(*(uint8x16_t *)v209, *(uint8x16_t *)(v209 + 1));
  v210 = v209 + (int)a2;
  v284 = vrhaddq_u8(*(uint8x16_t *)v210, *(uint8x16_t *)(v210 + 1));
  v211 = v210 + (int)a2;
  v285 = vrhaddq_u8(*(uint8x16_t *)v211, *(uint8x16_t *)(v211 + 1));
  v212 = v211 + (int)a2;
  v286 = vrhaddq_u8(*(uint8x16_t *)v212, *(uint8x16_t *)(v212 + 1));
  v213 = v212 + (int)a2;
  v287 = vrhaddq_u8(*(uint8x16_t *)v213, *(uint8x16_t *)(v213 + 1));
  v214 = v213 + (int)a2;
  v288 = vrhaddq_u8(*(uint8x16_t *)v214, *(uint8x16_t *)(v214 + 1));
  v215 = v214 + (int)a2;
  v289 = vrhaddq_u8(*(uint8x16_t *)v215, *(uint8x16_t *)(v215 + 1));
  v216 = v215 + (int)a2;
  v290 = vrhaddq_u8(*(uint8x16_t *)v216, *(uint8x16_t *)(v216 + 1));
  v217 = v216 + (int)a2;
  v291 = vrhaddq_u8(*(uint8x16_t *)v217, *(uint8x16_t *)(v217 + 1));
  v218 = v217 + (int)a2;
  v292 = vrhaddq_u8(*(uint8x16_t *)v218, *(uint8x16_t *)(v218 + 1));
  v219 = v218 + (int)a2;
  v293 = vrhaddq_u8(*(uint8x16_t *)v219, *(uint8x16_t *)(v219 + 1));
  v220 = v219 + (int)a2;
  v294 = vrhaddq_u8(*(uint8x16_t *)v220, *(uint8x16_t *)(v220 + 1));
  v221 = v220 + (int)a2;
  v295 = vrhaddq_u8(*(uint8x16_t *)v221, *(uint8x16_t *)(v221 + 1));
  v222 = v221 + (int)a2;
  v296 = vrhaddq_u8(*(uint8x16_t *)v222, *(uint8x16_t *)(v222 + 1));
  v223 = v222 + (int)a2;
  v297 = vrhaddq_u8(*(uint8x16_t *)v223, *(uint8x16_t *)(v223 + 1));
  v224 = v223 + (int)a2;
  v298 = vrhaddq_u8(*(uint8x16_t *)v224, *(uint8x16_t *)(v224 + 1));
  v225 = v224 + (int)a2;
  v299 = vrhaddq_u8(*(uint8x16_t *)v225, *(uint8x16_t *)(v225 + 1));
  v226 = v225 + (int)a2;
  v300 = vrhaddq_u8(*(uint8x16_t *)v226, *(uint8x16_t *)(v226 + 1));
  v227 = v226 + (int)a2;
  v301 = vrhaddq_u8(*(uint8x16_t *)v227, *(uint8x16_t *)(v227 + 1));
  v228 = (_OWORD *)(v227 + (int)a2);
  v229 = *(uint8x16_t *)v228;
  v230 = *(uint8x16_t *)((char *)v228 + 1);
  v231 = (char *)v228 + (int)a2;
  v302 = vrhaddq_u8(v229, v230);
  v232 = *(uint8x16_t *)(v231 + 1);
  v233 = vrhaddq_u8(*(uint8x16_t *)v231, v232);
  v303 = v233;
  v233.i32[0] = 8 - a4;
  v232.i32[0] = a4;
  v234 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v233.i8, 0);
  v235 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v232.i8, 0);
  do
  {
    v236 = *(uint8x16_t *)((char *)&v272 + v185);
    *(int8x16_t *)((char *)&v239 + v185) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v236.i8, *(uint8x8_t *)v235.i8), *(uint8x8_t *)v186.i8, *(uint8x8_t *)v234.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v236, v235), v186, v234), 3uLL);
    v185 += 16;
    v186 = v236;
  }
  while ((_DWORD)v185 != 512);
  return vpx_variance16x32(&v239, 16, a5, a6, a7);
}

uint64_t vpx_sub_pixel_variance32x16_neon(uint64_t a1, uint64_t a2, __int32 a3, __int32 a4, uint64_t a5, uint64_t a6, uint64_t a7, int8x8_t a8, int8x8_t a9)
{
  uint8x16_t v10;
  uint8x16_t v11;
  uint64_t v12;
  uint8x16_t v13;
  uint64_t v14;
  uint8x16_t v15;
  uint64_t v16;
  uint8x16_t v17;
  uint64_t v18;
  uint8x16_t v19;
  uint64_t v20;
  uint8x16_t v21;
  uint64_t v22;
  uint8x16_t v23;
  uint64_t v24;
  uint8x16_t v25;
  uint64_t v26;
  uint8x16_t v27;
  uint64_t v28;
  uint8x16_t v29;
  uint64_t v30;
  uint8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8x16_t *v36;
  int v37;
  uint8x16_t v38;
  uint8x16_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint8x16_t *v43;
  uint8x16_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint8x16_t *v47;
  uint8x16_t v48;
  uint8x16_t v49;
  uint8x16_t *v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint8x16_t *v53;
  uint8x16_t v54;
  uint8x16_t v55;
  uint8x16_t *v56;
  uint8x16_t v57;
  uint8x16_t v58;
  uint8x16_t *v59;
  uint8x16_t v60;
  uint8x16_t v61;
  uint8x16_t *v62;
  uint8x16_t v63;
  uint8x16_t v64;
  uint8x16_t *v65;
  uint8x16_t v66;
  uint8x16_t v67;
  uint8x16_t *v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t *v71;
  uint8x16_t v72;
  uint8x16_t v73;
  uint8x16_t *v74;
  uint8x16_t v75;
  uint8x16_t v76;
  uint8x16_t *v77;
  uint8x16_t v78;
  uint8x16_t v79;
  uint8x16_t *v80;
  uint8x16_t v81;
  uint8x16_t v82;
  uint8x16_t *v83;
  uint8x16_t v84;
  uint8x16_t v85;
  uint8x16_t *v86;
  uint8x16_t v87;
  uint8x16_t v88;
  uint8x16_t *v89;
  uint8x16_t *v90;
  int v91;
  uint8x16_t v92;
  uint8x16_t v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint8x16_t v99;
  uint64_t v100;
  uint8x16_t v101;
  uint64_t v102;
  uint8x16_t v103;
  uint64_t v104;
  uint8x16_t v105;
  uint64_t v106;
  uint8x16_t v107;
  uint64_t v108;
  uint8x16_t v109;
  uint64_t v110;
  uint8x16_t v111;
  uint64_t v112;
  uint8x16_t v113;
  uint64_t v114;
  uint8x16_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint8x16_t v121;
  uint8x16_t v122;
  uint8x16_t v123;
  uint8x16_t v124;
  uint8x16_t v125;
  uint64_t v126;
  uint8x16_t v127;
  uint64_t v128;
  uint8x16_t v129;
  uint64_t v130;
  uint8x16_t v131;
  uint64_t v132;
  uint8x16_t v133;
  uint64_t v134;
  uint8x16_t v135;
  uint64_t v136;
  uint8x16_t v137;
  uint64_t v138;
  uint8x16_t v139;
  uint64_t v140;
  uint8x16_t v141;
  uint64_t v142;
  uint8x16_t v143;
  uint64_t v144;
  uint8x16_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint8x16_t v151;
  uint8x16_t v152;
  uint8x16_t *v153;
  uint8x16_t *v154;
  int v155;
  uint8x16_t v156;
  uint8x16_t v157;
  uint64_t v158;
  char v159;
  char v160;
  int v161;
  uint8x16_t v162;
  uint8x16_t v163;
  uint64_t v164;
  char v165;
  char v166;
  int v167;
  uint8x16_t v168;
  uint8x16_t v169;
  uint64_t v170;
  char v171;
  char v172;
  uint8x16_t *v173;
  uint8x16_t *v174;
  int v175;
  uint8x16_t v176;
  uint8x16_t v177;
  uint64_t v178;
  char v179;
  char v180;
  uint8x16_t v181;
  uint8x16_t v182;
  uint8x16_t v183;
  uint8x16_t v184;
  uint8x16_t v185;
  uint8x16_t v186;
  uint8x16_t v187;
  uint8x16_t v188;
  uint8x16_t v189;
  uint8x16_t v190;
  uint8x16_t v191;
  uint8x16_t v192;
  uint8x16_t v193;
  uint8x16_t v194;
  uint8x16_t v195;
  uint8x16_t v196;
  uint8x16_t v197;
  uint8x16_t v198;
  uint8x16_t v199;
  uint8x16_t v200;
  uint8x16_t v201;
  uint8x16_t v202;
  uint8x16_t v203;
  uint8x16_t v204;
  uint8x16_t v205;
  uint8x16_t v206;
  uint8x16_t v207;
  uint8x16_t v208;
  uint8x16_t v209;
  uint8x16_t v210;
  uint8x16_t v211;
  uint8x16_t v212;
  uint8x16_t v213;
  uint8x16_t v214;
  uint8x16_t v215;
  uint8x16_t v216;
  uint8x16_t v217;
  uint8x16_t v218;
  uint8x16_t v219;
  uint8x16_t v220;
  uint8x16_t v221;
  uint8x16_t v222;
  uint8x16_t v223;
  uint8x16_t v224;
  uint8x16_t v225;
  uint8x16_t v226;
  uint8x16_t v227;
  uint8x16_t v228;
  uint8x16_t v229;
  uint8x16_t v230;
  uint8x16_t v231;
  uint8x16_t v232;
  uint8x16_t v233;
  uint8x16_t v234;
  uint8x16_t v235;
  uint8x16_t v236;
  uint8x16_t v237;
  uint8x16_t v238;
  uint8x16_t v239;
  uint8x16_t v240;
  uint8x16_t v241;
  uint8x16_t v242;
  uint8x16_t v243;
  uint8x16_t v244;
  uint8x16_t v245;
  uint8x16_t v246;
  uint8x16_t v247;
  uint8x16_t v248;
  uint8x16_t v249;
  uint64_t v250;

  v250 = *MEMORY[0x24BDAC8D0];
  if (a3 != 4)
  {
    if (!a3)
    {
      if (a4 == 4)
      {
        v43 = (uint8x16_t *)(a1 + (int)a2);
        v44 = *v43;
        v45 = *(uint8x16_t *)(a1 + 16 + (int)a2);
        v46 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), v45);
        v216 = vrhaddq_u8(*(uint8x16_t *)a1, *v43);
        v217 = v46;
        v47 = (uint8x16_t *)((char *)v43 + (int)a2);
        v48 = *v47;
        v49 = v47[1];
        v218 = vrhaddq_u8(v44, *v47);
        v219 = vrhaddq_u8(v45, v49);
        v50 = (uint8x16_t *)((char *)v47 + (int)a2);
        v51 = *v50;
        v52 = v50[1];
        v220 = vrhaddq_u8(v48, *v50);
        v221 = vrhaddq_u8(v49, v52);
        v53 = (uint8x16_t *)((char *)v50 + (int)a2);
        v54 = *v53;
        v55 = v53[1];
        v222 = vrhaddq_u8(v51, *v53);
        v223 = vrhaddq_u8(v52, v55);
        v56 = (uint8x16_t *)((char *)v53 + (int)a2);
        v57 = *v56;
        v58 = v56[1];
        v224 = vrhaddq_u8(v54, *v56);
        v225 = vrhaddq_u8(v55, v58);
        v59 = (uint8x16_t *)((char *)v56 + (int)a2);
        v60 = *v59;
        v61 = v59[1];
        v226 = vrhaddq_u8(v57, *v59);
        v227 = vrhaddq_u8(v58, v61);
        v62 = (uint8x16_t *)((char *)v59 + (int)a2);
        v63 = *v62;
        v64 = v62[1];
        v228 = vrhaddq_u8(v60, *v62);
        v229 = vrhaddq_u8(v61, v64);
        v65 = (uint8x16_t *)((char *)v62 + (int)a2);
        v66 = *v65;
        v67 = v65[1];
        v230 = vrhaddq_u8(v63, *v65);
        v231 = vrhaddq_u8(v64, v67);
        v68 = (uint8x16_t *)((char *)v65 + (int)a2);
        v69 = *v68;
        v70 = v68[1];
        v232 = vrhaddq_u8(v66, *v68);
        v233 = vrhaddq_u8(v67, v70);
        v71 = (uint8x16_t *)((char *)v68 + (int)a2);
        v72 = *v71;
        v73 = v71[1];
        v234 = vrhaddq_u8(v69, *v71);
        v235 = vrhaddq_u8(v70, v73);
        v74 = (uint8x16_t *)((char *)v71 + (int)a2);
        v75 = *v74;
        v76 = v74[1];
        v236 = vrhaddq_u8(v72, *v74);
        v237 = vrhaddq_u8(v73, v76);
        v77 = (uint8x16_t *)((char *)v74 + (int)a2);
        v78 = *v77;
        v238 = vrhaddq_u8(v75, *v77);
        v79 = v77[1];
        v239 = vrhaddq_u8(v76, v79);
        v80 = (uint8x16_t *)((char *)v77 + (int)a2);
        v81 = *v80;
        v240 = vrhaddq_u8(v78, *v80);
        v82 = v80[1];
        v241 = vrhaddq_u8(v79, v82);
        v83 = (uint8x16_t *)((char *)v80 + (int)a2);
        v84 = *v83;
        v242 = vrhaddq_u8(v81, *v83);
        v85 = v83[1];
        v243 = vrhaddq_u8(v82, v85);
        v86 = (uint8x16_t *)((char *)v83 + (int)a2);
        v87 = *v86;
        v244 = vrhaddq_u8(v84, *v86);
        v88 = v86[1];
        v245 = vrhaddq_u8(v85, v88);
        v89 = (uint8x16_t *)((char *)v86 + (int)a2);
        v246 = vrhaddq_u8(v87, *v89);
        v247 = vrhaddq_u8(v88, v89[1]);
      }
      else
      {
        if (!a4)
          return vpx_variance32x16(a1, a2, a5, a6, a7);
        a8.i32[0] = 8 - a4;
        a9.i32[0] = a4;
        v90 = &v216;
        v91 = 16;
        v92 = (uint8x16_t)vdupq_lane_s8(a8, 0);
        v93 = (uint8x16_t)vdupq_lane_s8(a9, 0);
        do
        {
          v94 = 0;
          v95 = 1;
          do
          {
            v96 = v95;
            v90[(unint64_t)v94 / 0x10] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v94 + (int)a2), *(uint8x8_t *)v93.i8), *(uint8x8_t *)(a1 + v94), *(uint8x8_t *)v92.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v94 + (int)a2), v93), *(uint8x16_t *)(a1 + v94), v92), 3uLL);
            v94 = 16;
            v95 = 0;
          }
          while ((v96 & 1) != 0);
          a1 += (int)a2;
          v90 += 2;
          --v91;
        }
        while (v91);
      }
      return vpx_variance32x16(&v216, 32, a5, a6, a7);
    }
    a8.i32[0] = 8 - a3;
    a9.i32[0] = a3;
    v36 = &v216;
    if (a4 != 4)
    {
      if (!a4)
      {
        v37 = 16;
        v38 = (uint8x16_t)vdupq_lane_s8(a8, 0);
        v39 = (uint8x16_t)vdupq_lane_s8(a9, 0);
        do
        {
          v40 = 0;
          v41 = 1;
          do
          {
            v42 = v41;
            v36[(unint64_t)v40 / 0x10] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v40 + 1), *(uint8x8_t *)v39.i8), *(uint8x8_t *)(a1 + v40), *(uint8x8_t *)v38.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v40 + 1), v39), *(uint8x16_t *)(a1 + v40), v38), 3uLL);
            v40 = 16;
            v41 = 0;
          }
          while ((v42 & 1) != 0);
          a1 += (int)a2;
          v36 += 2;
          --v37;
        }
        while (v37);
        return vpx_variance32x16(&v216, 32, a5, a6, a7);
      }
      v167 = 17;
      v168 = (uint8x16_t)vdupq_lane_s8(a8, 0);
      v169 = (uint8x16_t)vdupq_lane_s8(a9, 0);
      do
      {
        v170 = 0;
        v171 = 1;
        do
        {
          v172 = v171;
          v36[(unint64_t)v170 / 0x10] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v170 + 1), *(uint8x8_t *)v169.i8), *(uint8x8_t *)(a1 + v170), *(uint8x8_t *)v168.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v170 + 1), v169), *(uint8x16_t *)(a1 + v170), v168), 3uLL);
          v170 = 16;
          v171 = 0;
        }
        while ((v172 & 1) != 0);
        a1 += (int)a2;
        v36 += 2;
        --v167;
      }
      while (v167);
      v168.i32[0] = 8 - a4;
      v169.i32[0] = a4;
      v173 = &v216;
      v174 = &v184;
      v175 = 16;
      v176 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v168.i8, 0);
      v177 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v169.i8, 0);
      do
      {
        v178 = 0;
        v179 = 1;
        do
        {
          v180 = v179;
          v174[v178] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v173[v178 + 2].i8, *(uint8x8_t *)v177.i8), *(uint8x8_t *)v173[v178].i8, *(uint8x8_t *)v176.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v173[v178 + 2], v177), v173[v178], v176), 3uLL);
          v178 = 1;
          v179 = 0;
        }
        while ((v180 & 1) != 0);
        v173 += 2;
        v174 += 2;
        --v175;
      }
      while (v175);
      return vpx_variance32x16(&v184, 32, a5, a6, a7);
    }
    v161 = 17;
    v162 = (uint8x16_t)vdupq_lane_s8(a8, 0);
    v163 = (uint8x16_t)vdupq_lane_s8(a9, 0);
    do
    {
      v164 = 0;
      v165 = 1;
      do
      {
        v166 = v165;
        v36[(unint64_t)v164 / 0x10] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v164 + 1), *(uint8x8_t *)v163.i8), *(uint8x8_t *)(a1 + v164), *(uint8x8_t *)v162.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v164 + 1), v163), *(uint8x16_t *)(a1 + v164), v162), 3uLL);
        v164 = 16;
        v165 = 0;
      }
      while ((v166 & 1) != 0);
      a1 += (int)a2;
      v36 += 2;
      --v161;
    }
    while (v161);
    v184 = vrhaddq_u8(v216, v218);
    v185 = vrhaddq_u8(v217, v219);
    v186 = vrhaddq_u8(v218, v220);
    v187 = vrhaddq_u8(v219, v221);
    v188 = vrhaddq_u8(v220, v222);
    v189 = vrhaddq_u8(v221, v223);
    v190 = vrhaddq_u8(v222, v224);
    v191 = vrhaddq_u8(v223, v225);
    v192 = vrhaddq_u8(v224, v226);
    v193 = vrhaddq_u8(v225, v227);
    v194 = vrhaddq_u8(v226, v228);
    v195 = vrhaddq_u8(v227, v229);
    v196 = vrhaddq_u8(v228, v230);
    v197 = vrhaddq_u8(v229, v231);
    v198 = vrhaddq_u8(v230, v232);
    v199 = vrhaddq_u8(v231, v233);
    v200 = vrhaddq_u8(v232, v234);
    v201 = vrhaddq_u8(v233, v235);
    v202 = vrhaddq_u8(v234, v236);
    v203 = vrhaddq_u8(v235, v237);
    v204 = vrhaddq_u8(v236, v238);
    v205 = vrhaddq_u8(v237, v239);
    v206 = vrhaddq_u8(v238, v240);
    v207 = vrhaddq_u8(v239, v241);
    v208 = vrhaddq_u8(v240, v242);
    v209 = vrhaddq_u8(v241, v243);
    v210 = vrhaddq_u8(v242, v244);
    v211 = vrhaddq_u8(v243, v245);
    v212 = vrhaddq_u8(v244, v246);
    v213 = vrhaddq_u8(v245, v247);
    v122 = vrhaddq_u8(v246, v248);
    v123 = vrhaddq_u8(v247, v249);
LABEL_33:
    v214 = v122;
    v215 = v123;
    return vpx_variance32x16(&v184, 32, a5, a6, a7);
  }
  if (a4 == 4)
  {
    v183 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), *(uint8x16_t *)(a1 + 17));
    v216 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
    v217 = v183;
    v182 = vrhaddq_u8(*(uint8x16_t *)(a1 + (int)a2 + 16), *(uint8x16_t *)(a1 + (int)a2 + 17));
    v218 = vrhaddq_u8(*(uint8x16_t *)(a1 + (int)a2), *(uint8x16_t *)(a1 + (int)a2 + 1));
    v219 = v182;
    v97 = a1 + (int)a2 + (int)a2;
    v181 = vrhaddq_u8(*(uint8x16_t *)(v97 + 16), *(uint8x16_t *)(v97 + 17));
    v220 = vrhaddq_u8(*(uint8x16_t *)v97, *(uint8x16_t *)(v97 + 1));
    v221 = v181;
    v98 = v97 + (int)a2;
    v99 = vrhaddq_u8(*(uint8x16_t *)(v98 + 16), *(uint8x16_t *)(v98 + 17));
    v222 = vrhaddq_u8(*(uint8x16_t *)v98, *(uint8x16_t *)(v98 + 1));
    v223 = v99;
    v100 = v98 + (int)a2;
    v101 = vrhaddq_u8(*(uint8x16_t *)(v100 + 16), *(uint8x16_t *)(v100 + 17));
    v224 = vrhaddq_u8(*(uint8x16_t *)v100, *(uint8x16_t *)(v100 + 1));
    v225 = v101;
    v102 = v100 + (int)a2;
    v103 = vrhaddq_u8(*(uint8x16_t *)(v102 + 16), *(uint8x16_t *)(v102 + 17));
    v226 = vrhaddq_u8(*(uint8x16_t *)v102, *(uint8x16_t *)(v102 + 1));
    v227 = v103;
    v104 = v102 + (int)a2;
    v105 = vrhaddq_u8(*(uint8x16_t *)(v104 + 16), *(uint8x16_t *)(v104 + 17));
    v228 = vrhaddq_u8(*(uint8x16_t *)v104, *(uint8x16_t *)(v104 + 1));
    v229 = v105;
    v106 = v104 + (int)a2;
    v107 = vrhaddq_u8(*(uint8x16_t *)(v106 + 16), *(uint8x16_t *)(v106 + 17));
    v230 = vrhaddq_u8(*(uint8x16_t *)v106, *(uint8x16_t *)(v106 + 1));
    v231 = v107;
    v108 = v106 + (int)a2;
    v109 = vrhaddq_u8(*(uint8x16_t *)(v108 + 16), *(uint8x16_t *)(v108 + 17));
    v232 = vrhaddq_u8(*(uint8x16_t *)v108, *(uint8x16_t *)(v108 + 1));
    v233 = v109;
    v110 = v108 + (int)a2;
    v111 = vrhaddq_u8(*(uint8x16_t *)(v110 + 16), *(uint8x16_t *)(v110 + 17));
    v234 = vrhaddq_u8(*(uint8x16_t *)v110, *(uint8x16_t *)(v110 + 1));
    v235 = v111;
    v112 = v110 + (int)a2;
    v113 = vrhaddq_u8(*(uint8x16_t *)(v112 + 16), *(uint8x16_t *)(v112 + 17));
    v236 = vrhaddq_u8(*(uint8x16_t *)v112, *(uint8x16_t *)(v112 + 1));
    v237 = v113;
    v114 = v112 + (int)a2;
    v115 = vrhaddq_u8(*(uint8x16_t *)(v114 + 16), *(uint8x16_t *)(v114 + 17));
    v238 = vrhaddq_u8(*(uint8x16_t *)v114, *(uint8x16_t *)(v114 + 1));
    v239 = v115;
    v116 = v114 + (int)a2;
    v240 = vrhaddq_u8(*(uint8x16_t *)v116, *(uint8x16_t *)(v116 + 1));
    v241 = vrhaddq_u8(*(uint8x16_t *)(v116 + 16), *(uint8x16_t *)(v116 + 17));
    v117 = v116 + (int)a2;
    v242 = vrhaddq_u8(*(uint8x16_t *)v117, *(uint8x16_t *)(v117 + 1));
    v243 = vrhaddq_u8(*(uint8x16_t *)(v117 + 16), *(uint8x16_t *)(v117 + 17));
    v118 = v117 + (int)a2;
    v244 = vrhaddq_u8(*(uint8x16_t *)v118, *(uint8x16_t *)(v118 + 1));
    v245 = vrhaddq_u8(*(uint8x16_t *)(v118 + 16), *(uint8x16_t *)(v118 + 17));
    v119 = v118 + (int)a2;
    v246 = vrhaddq_u8(*(uint8x16_t *)v119, *(uint8x16_t *)(v119 + 1));
    v247 = vrhaddq_u8(*(uint8x16_t *)(v119 + 16), *(uint8x16_t *)(v119 + 17));
    v120 = v119 + (int)a2;
    v248 = vrhaddq_u8(*(uint8x16_t *)v120, *(uint8x16_t *)(v120 + 1));
    v121 = vrhaddq_u8(*(uint8x16_t *)(v120 + 16), *(uint8x16_t *)(v120 + 17));
    v184 = vrhaddq_u8(v216, v218);
    v185 = vrhaddq_u8(v183, v182);
    v186 = vrhaddq_u8(v218, v220);
    v187 = vrhaddq_u8(v182, v181);
    v188 = vrhaddq_u8(v220, v222);
    v189 = vrhaddq_u8(v181, v99);
    v190 = vrhaddq_u8(v222, v224);
    v191 = vrhaddq_u8(v99, v101);
    v192 = vrhaddq_u8(v224, v226);
    v193 = vrhaddq_u8(v101, v103);
    v194 = vrhaddq_u8(v226, v228);
    v195 = vrhaddq_u8(v103, v105);
    v196 = vrhaddq_u8(v228, v230);
    v197 = vrhaddq_u8(v105, v107);
    v198 = vrhaddq_u8(v230, v232);
    v199 = vrhaddq_u8(v107, v109);
    v200 = vrhaddq_u8(v232, v234);
    v201 = vrhaddq_u8(v109, v111);
    v202 = vrhaddq_u8(v234, v236);
    v203 = vrhaddq_u8(v111, v113);
    v204 = vrhaddq_u8(v236, v238);
    v205 = vrhaddq_u8(v113, v115);
    v206 = vrhaddq_u8(v238, v240);
    v207 = vrhaddq_u8(v115, v241);
    v208 = vrhaddq_u8(v240, v242);
    v209 = vrhaddq_u8(v241, v243);
    v210 = vrhaddq_u8(v242, v244);
    v211 = vrhaddq_u8(v243, v245);
    v212 = vrhaddq_u8(v244, v246);
    v213 = vrhaddq_u8(v245, v247);
    v122 = vrhaddq_u8(v246, v248);
    v249 = v121;
    v123 = vrhaddq_u8(v247, v121);
    goto LABEL_33;
  }
  if (!a4)
  {
    v10 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), *(uint8x16_t *)(a1 + 17));
    v216 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
    v217 = v10;
    v11 = vrhaddq_u8(*(uint8x16_t *)(a1 + (int)a2 + 16), *(uint8x16_t *)(a1 + (int)a2 + 17));
    v218 = vrhaddq_u8(*(uint8x16_t *)(a1 + (int)a2), *(uint8x16_t *)(a1 + (int)a2 + 1));
    v219 = v11;
    v12 = a1 + (int)a2 + (int)a2;
    v13 = vrhaddq_u8(*(uint8x16_t *)(v12 + 16), *(uint8x16_t *)(v12 + 17));
    v220 = vrhaddq_u8(*(uint8x16_t *)v12, *(uint8x16_t *)(v12 + 1));
    v221 = v13;
    v14 = v12 + (int)a2;
    v15 = vrhaddq_u8(*(uint8x16_t *)(v14 + 16), *(uint8x16_t *)(v14 + 17));
    v222 = vrhaddq_u8(*(uint8x16_t *)v14, *(uint8x16_t *)(v14 + 1));
    v223 = v15;
    v16 = v14 + (int)a2;
    v17 = vrhaddq_u8(*(uint8x16_t *)(v16 + 16), *(uint8x16_t *)(v16 + 17));
    v224 = vrhaddq_u8(*(uint8x16_t *)v16, *(uint8x16_t *)(v16 + 1));
    v225 = v17;
    v18 = v16 + (int)a2;
    v19 = vrhaddq_u8(*(uint8x16_t *)(v18 + 16), *(uint8x16_t *)(v18 + 17));
    v226 = vrhaddq_u8(*(uint8x16_t *)v18, *(uint8x16_t *)(v18 + 1));
    v227 = v19;
    v20 = v18 + (int)a2;
    v21 = vrhaddq_u8(*(uint8x16_t *)(v20 + 16), *(uint8x16_t *)(v20 + 17));
    v228 = vrhaddq_u8(*(uint8x16_t *)v20, *(uint8x16_t *)(v20 + 1));
    v229 = v21;
    v22 = v20 + (int)a2;
    v23 = vrhaddq_u8(*(uint8x16_t *)(v22 + 16), *(uint8x16_t *)(v22 + 17));
    v230 = vrhaddq_u8(*(uint8x16_t *)v22, *(uint8x16_t *)(v22 + 1));
    v231 = v23;
    v24 = v22 + (int)a2;
    v25 = vrhaddq_u8(*(uint8x16_t *)(v24 + 16), *(uint8x16_t *)(v24 + 17));
    v232 = vrhaddq_u8(*(uint8x16_t *)v24, *(uint8x16_t *)(v24 + 1));
    v233 = v25;
    v26 = v24 + (int)a2;
    v27 = vrhaddq_u8(*(uint8x16_t *)(v26 + 16), *(uint8x16_t *)(v26 + 17));
    v234 = vrhaddq_u8(*(uint8x16_t *)v26, *(uint8x16_t *)(v26 + 1));
    v235 = v27;
    v28 = v26 + (int)a2;
    v29 = vrhaddq_u8(*(uint8x16_t *)(v28 + 16), *(uint8x16_t *)(v28 + 17));
    v236 = vrhaddq_u8(*(uint8x16_t *)v28, *(uint8x16_t *)(v28 + 1));
    v237 = v29;
    v30 = v28 + (int)a2;
    v31 = vrhaddq_u8(*(uint8x16_t *)(v30 + 16), *(uint8x16_t *)(v30 + 17));
    v238 = vrhaddq_u8(*(uint8x16_t *)v30, *(uint8x16_t *)(v30 + 1));
    v239 = v31;
    v32 = v30 + (int)a2;
    v240 = vrhaddq_u8(*(uint8x16_t *)v32, *(uint8x16_t *)(v32 + 1));
    v241 = vrhaddq_u8(*(uint8x16_t *)(v32 + 16), *(uint8x16_t *)(v32 + 17));
    v33 = v32 + (int)a2;
    v242 = vrhaddq_u8(*(uint8x16_t *)v33, *(uint8x16_t *)(v33 + 1));
    v243 = vrhaddq_u8(*(uint8x16_t *)(v33 + 16), *(uint8x16_t *)(v33 + 17));
    v34 = v33 + (int)a2;
    v244 = vrhaddq_u8(*(uint8x16_t *)v34, *(uint8x16_t *)(v34 + 1));
    v245 = vrhaddq_u8(*(uint8x16_t *)(v34 + 16), *(uint8x16_t *)(v34 + 17));
    v35 = v34 + (int)a2;
    v246 = vrhaddq_u8(*(uint8x16_t *)v35, *(uint8x16_t *)(v35 + 1));
    v247 = vrhaddq_u8(*(uint8x16_t *)(v35 + 16), *(uint8x16_t *)(v35 + 17));
    return vpx_variance32x16(&v216, 32, a5, a6, a7);
  }
  v124 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), *(uint8x16_t *)(a1 + 17));
  v216 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
  v217 = v124;
  v125 = vrhaddq_u8(*(uint8x16_t *)(a1 + (int)a2 + 16), *(uint8x16_t *)(a1 + (int)a2 + 17));
  v218 = vrhaddq_u8(*(uint8x16_t *)(a1 + (int)a2), *(uint8x16_t *)(a1 + (int)a2 + 1));
  v219 = v125;
  v126 = a1 + (int)a2 + (int)a2;
  v127 = vrhaddq_u8(*(uint8x16_t *)(v126 + 16), *(uint8x16_t *)(v126 + 17));
  v220 = vrhaddq_u8(*(uint8x16_t *)v126, *(uint8x16_t *)(v126 + 1));
  v221 = v127;
  v128 = v126 + (int)a2;
  v129 = vrhaddq_u8(*(uint8x16_t *)(v128 + 16), *(uint8x16_t *)(v128 + 17));
  v222 = vrhaddq_u8(*(uint8x16_t *)v128, *(uint8x16_t *)(v128 + 1));
  v223 = v129;
  v130 = v128 + (int)a2;
  v131 = vrhaddq_u8(*(uint8x16_t *)(v130 + 16), *(uint8x16_t *)(v130 + 17));
  v224 = vrhaddq_u8(*(uint8x16_t *)v130, *(uint8x16_t *)(v130 + 1));
  v225 = v131;
  v132 = v130 + (int)a2;
  v133 = vrhaddq_u8(*(uint8x16_t *)(v132 + 16), *(uint8x16_t *)(v132 + 17));
  v226 = vrhaddq_u8(*(uint8x16_t *)v132, *(uint8x16_t *)(v132 + 1));
  v227 = v133;
  v134 = v132 + (int)a2;
  v135 = vrhaddq_u8(*(uint8x16_t *)(v134 + 16), *(uint8x16_t *)(v134 + 17));
  v228 = vrhaddq_u8(*(uint8x16_t *)v134, *(uint8x16_t *)(v134 + 1));
  v229 = v135;
  v136 = v134 + (int)a2;
  v137 = vrhaddq_u8(*(uint8x16_t *)(v136 + 16), *(uint8x16_t *)(v136 + 17));
  v230 = vrhaddq_u8(*(uint8x16_t *)v136, *(uint8x16_t *)(v136 + 1));
  v231 = v137;
  v138 = v136 + (int)a2;
  v139 = vrhaddq_u8(*(uint8x16_t *)(v138 + 16), *(uint8x16_t *)(v138 + 17));
  v232 = vrhaddq_u8(*(uint8x16_t *)v138, *(uint8x16_t *)(v138 + 1));
  v233 = v139;
  v140 = v138 + (int)a2;
  v141 = vrhaddq_u8(*(uint8x16_t *)(v140 + 16), *(uint8x16_t *)(v140 + 17));
  v234 = vrhaddq_u8(*(uint8x16_t *)v140, *(uint8x16_t *)(v140 + 1));
  v235 = v141;
  v142 = v140 + (int)a2;
  v143 = vrhaddq_u8(*(uint8x16_t *)(v142 + 16), *(uint8x16_t *)(v142 + 17));
  v236 = vrhaddq_u8(*(uint8x16_t *)v142, *(uint8x16_t *)(v142 + 1));
  v237 = v143;
  v144 = v142 + (int)a2;
  v145 = vrhaddq_u8(*(uint8x16_t *)(v144 + 16), *(uint8x16_t *)(v144 + 17));
  v238 = vrhaddq_u8(*(uint8x16_t *)v144, *(uint8x16_t *)(v144 + 1));
  v239 = v145;
  v146 = v144 + (int)a2;
  v240 = vrhaddq_u8(*(uint8x16_t *)v146, *(uint8x16_t *)(v146 + 1));
  v241 = vrhaddq_u8(*(uint8x16_t *)(v146 + 16), *(uint8x16_t *)(v146 + 17));
  v147 = v146 + (int)a2;
  v242 = vrhaddq_u8(*(uint8x16_t *)v147, *(uint8x16_t *)(v147 + 1));
  v243 = vrhaddq_u8(*(uint8x16_t *)(v147 + 16), *(uint8x16_t *)(v147 + 17));
  v148 = v147 + (int)a2;
  v244 = vrhaddq_u8(*(uint8x16_t *)v148, *(uint8x16_t *)(v148 + 1));
  v245 = vrhaddq_u8(*(uint8x16_t *)(v148 + 16), *(uint8x16_t *)(v148 + 17));
  v149 = v148 + (int)a2;
  v246 = vrhaddq_u8(*(uint8x16_t *)v149, *(uint8x16_t *)(v149 + 1));
  v247 = vrhaddq_u8(*(uint8x16_t *)(v149 + 16), *(uint8x16_t *)(v149 + 17));
  v150 = v149 + (int)a2;
  v248 = vrhaddq_u8(*(uint8x16_t *)v150, *(uint8x16_t *)(v150 + 1));
  v151 = *(uint8x16_t *)(v150 + 17);
  v152 = vrhaddq_u8(*(uint8x16_t *)(v150 + 16), v151);
  v249 = v152;
  v152.i32[0] = 8 - a4;
  v151.i32[0] = a4;
  v153 = &v216;
  v154 = &v184;
  v155 = 16;
  v156 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v152.i8, 0);
  v157 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v151.i8, 0);
  do
  {
    v158 = 0;
    v159 = 1;
    do
    {
      v160 = v159;
      v154[v158] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v153[v158 + 2].i8, *(uint8x8_t *)v157.i8), *(uint8x8_t *)v153[v158].i8, *(uint8x8_t *)v156.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v153[v158 + 2], v157), v153[v158], v156), 3uLL);
      v158 = 1;
      v159 = 0;
    }
    while ((v160 & 1) != 0);
    v153 += 2;
    v154 += 2;
    --v155;
  }
  while (v155);
  return vpx_variance32x16(&v184, 32, a5, a6, a7);
}

uint64_t vpx_sub_pixel_variance32x32_neon(uint64_t a1, uint64_t a2, __int32 a3, __int32 a4, uint64_t a5, uint64_t a6, uint64_t a7, int8x8_t a8, int8x8_t a9)
{
  uint8x16_t v10;
  uint8x16_t v11;
  uint64_t v12;
  uint8x16_t v13;
  uint64_t v14;
  uint8x16_t v15;
  uint64_t v16;
  uint8x16_t v17;
  uint64_t v18;
  uint8x16_t v19;
  uint64_t v20;
  uint8x16_t v21;
  uint64_t v22;
  uint8x16_t v23;
  uint64_t v24;
  uint8x16_t v25;
  uint64_t v26;
  uint8x16_t v27;
  uint64_t v28;
  uint8x16_t v29;
  uint64_t v30;
  uint8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint8x16_t *v54;
  int v55;
  uint8x16_t v56;
  uint8x16_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint8x16_t *v61;
  uint8x16_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  uint8x16_t *v65;
  uint8x16_t v66;
  uint8x16_t v67;
  uint8x16_t *v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t *v71;
  uint8x16_t v72;
  uint8x16_t v73;
  uint8x16_t *v74;
  uint8x16_t v75;
  uint8x16_t v76;
  uint8x16_t *v77;
  uint8x16_t v78;
  uint8x16_t v79;
  uint8x16_t *v80;
  uint8x16_t v81;
  uint8x16_t v82;
  uint8x16_t *v83;
  uint8x16_t v84;
  uint8x16_t v85;
  uint8x16_t *v86;
  uint8x16_t v87;
  uint8x16_t v88;
  uint8x16_t *v89;
  uint8x16_t v90;
  uint8x16_t v91;
  uint8x16_t *v92;
  uint8x16_t v93;
  uint8x16_t v94;
  uint8x16_t *v95;
  uint8x16_t v96;
  uint8x16_t v97;
  uint8x16_t *v98;
  uint8x16_t v99;
  uint8x16_t v100;
  uint8x16_t *v101;
  uint8x16_t v102;
  uint8x16_t v103;
  uint8x16_t *v104;
  uint8x16_t v105;
  uint8x16_t v106;
  uint8x16_t *v107;
  uint8x16_t v108;
  uint8x16_t v109;
  uint8x16_t *v110;
  uint8x16_t v111;
  uint8x16_t v112;
  uint8x16_t *v113;
  uint8x16_t v114;
  uint8x16_t v115;
  uint8x16_t *v116;
  uint8x16_t v117;
  uint8x16_t v118;
  uint8x16_t *v119;
  uint8x16_t v120;
  uint8x16_t v121;
  uint8x16_t *v122;
  uint8x16_t v123;
  uint8x16_t v124;
  uint8x16_t *v125;
  uint8x16_t v126;
  uint8x16_t v127;
  uint8x16_t *v128;
  uint8x16_t v129;
  uint8x16_t v130;
  uint8x16_t *v131;
  uint8x16_t v132;
  uint8x16_t v133;
  uint8x16_t *v134;
  uint8x16_t v135;
  uint8x16_t v136;
  uint8x16_t *v137;
  uint8x16_t v138;
  uint8x16_t v139;
  uint8x16_t *v140;
  uint8x16_t v141;
  uint8x16_t v142;
  uint8x16_t *v143;
  uint8x16_t v144;
  uint8x16_t v145;
  uint8x16_t *v146;
  uint8x16_t v147;
  uint8x16_t v148;
  uint8x16_t *v149;
  uint8x16_t v150;
  uint8x16_t v151;
  uint8x16_t *v152;
  uint8x16_t v153;
  uint8x16_t *v154;
  uint8x16_t *v155;
  int v156;
  uint8x16_t v157;
  uint8x16_t v158;
  uint64_t v159;
  char v160;
  char v161;
  uint8x16_t v162;
  uint8x16_t v163;
  uint64_t v164;
  uint8x16_t v165;
  uint64_t v166;
  uint8x16_t v167;
  uint64_t v168;
  uint8x16_t v169;
  uint64_t v170;
  uint8x16_t v171;
  uint64_t v172;
  uint8x16_t v173;
  uint64_t v174;
  uint8x16_t v175;
  uint64_t v176;
  uint8x16_t v177;
  uint64_t v178;
  uint8x16_t v179;
  uint64_t v180;
  uint8x16_t v181;
  uint64_t v182;
  uint8x16_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint8x16_t v205;
  uint8x16_t v206;
  uint8x16_t v207;
  uint64_t v208;
  uint8x16_t v209;
  uint64_t v210;
  uint8x16_t v211;
  uint64_t v212;
  uint8x16_t v213;
  uint64_t v214;
  uint8x16_t v215;
  uint64_t v216;
  uint8x16_t v217;
  uint64_t v218;
  uint8x16_t v219;
  uint64_t v220;
  uint8x16_t v221;
  uint64_t v222;
  uint8x16_t v223;
  uint64_t v224;
  uint8x16_t v225;
  uint64_t v226;
  uint8x16_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint8x16_t v249;
  uint8x16_t v250;
  uint8x16_t *v251;
  uint8x16_t *v252;
  int v253;
  uint8x16_t v254;
  uint8x16_t v255;
  uint64_t v256;
  char v257;
  char v258;
  int v259;
  uint8x16_t v260;
  uint8x16_t v261;
  uint64_t v262;
  char v263;
  char v264;
  int v265;
  uint8x16_t v266;
  uint8x16_t v267;
  uint64_t v268;
  char v269;
  char v270;
  uint8x16_t *v271;
  uint8x16_t *v272;
  int v273;
  uint8x16_t v274;
  uint8x16_t v275;
  uint64_t v276;
  char v277;
  char v278;
  uint8x16_t v279;
  uint8x16_t v280;
  uint8x16_t v281;
  uint8x16_t v282;
  uint8x16_t v283;
  uint8x16_t v284;
  uint8x16_t v285;
  uint8x16_t v286;
  uint8x16_t v287;
  uint8x16_t v288;
  uint8x16_t v289;
  uint8x16_t v290;
  uint8x16_t v291;
  uint8x16_t v292;
  uint8x16_t v293;
  uint8x16_t v294;
  uint8x16_t v295;
  uint8x16_t v296;
  uint8x16_t v297;
  uint8x16_t v298;
  uint8x16_t v299;
  uint8x16_t v300;
  uint8x16_t v301;
  uint8x16_t v302;
  uint8x16_t v303;
  uint8x16_t v304;
  uint8x16_t v305;
  uint8x16_t v306;
  uint8x16_t v307;
  uint8x16_t v308;
  uint8x16_t v309;
  uint8x16_t v310;
  uint8x16_t v311;
  uint8x16_t v312;
  uint8x16_t v313;
  uint8x16_t v314;
  uint8x16_t v315;
  uint8x16_t v316;
  uint8x16_t v317;
  uint8x16_t v318;
  uint8x16_t v319;
  uint8x16_t v320;
  uint8x16_t v321;
  uint8x16_t v322;
  uint8x16_t v323;
  uint8x16_t v324;
  uint8x16_t v325;
  uint8x16_t v326;
  uint8x16_t v327;
  uint8x16_t v328;
  uint8x16_t v329;
  uint8x16_t v330;
  uint8x16_t v331;
  uint8x16_t v332;
  uint8x16_t v333;
  uint8x16_t v334;
  uint8x16_t v335;
  uint8x16_t v336;
  uint8x16_t v337;
  uint8x16_t v338;
  uint8x16_t v339;
  uint8x16_t v340;
  uint8x16_t v341;
  uint8x16_t v342;
  uint8x16_t v343;
  uint8x16_t v344;
  uint8x16_t v345;
  uint8x16_t v346;
  uint8x16_t v347;
  uint8x16_t v348;
  uint8x16_t v349;
  uint8x16_t v350;
  uint8x16_t v351;
  uint8x16_t v352;
  uint8x16_t v353;
  uint8x16_t v354;
  uint8x16_t v355;
  uint8x16_t v356;
  uint8x16_t v357;
  uint8x16_t v358;
  uint8x16_t v359;
  uint8x16_t v360;
  uint8x16_t v361;
  uint8x16_t v362;
  uint8x16_t v363;
  uint8x16_t v364;
  uint8x16_t v365;
  uint8x16_t v366;
  uint8x16_t v367;
  uint8x16_t v368;
  uint8x16_t v369;
  uint8x16_t v370;
  uint8x16_t v371;
  uint8x16_t v372;
  uint8x16_t v373;
  uint8x16_t v374;
  uint8x16_t v375;
  uint8x16_t v376;
  uint8x16_t v377;
  uint8x16_t v378;
  uint8x16_t v379;
  uint8x16_t v380;
  uint8x16_t v381;
  uint8x16_t v382;
  uint8x16_t v383;
  uint8x16_t v384;
  uint8x16_t v385;
  uint8x16_t v386;
  uint8x16_t v387;
  uint8x16_t v388;
  uint8x16_t v389;
  uint8x16_t v390;
  uint8x16_t v391;
  uint8x16_t v392;
  uint8x16_t v393;
  uint8x16_t v394;
  uint8x16_t v395;
  uint8x16_t v396;
  uint8x16_t v397;
  uint8x16_t v398;
  uint8x16_t v399;
  uint8x16_t v400;
  uint8x16_t v401;
  uint8x16_t v402;
  uint8x16_t v403;
  uint8x16_t v404;
  uint8x16_t v405;
  uint8x16_t v406;
  uint8x16_t v407;
  uint8x16_t v408;
  uint64_t v409;

  v409 = *MEMORY[0x24BDAC8D0];
  if (a3 != 4)
  {
    if (!a3)
    {
      if (a4 != 4)
      {
        if (!a4)
          return vpx_variance32x32(a1, a2, a5, a6, a7);
        a8.i32[0] = 8 - a4;
        a9.i32[0] = a4;
        v155 = &v343;
        v156 = 32;
        v157 = (uint8x16_t)vdupq_lane_s8(a8, 0);
        v158 = (uint8x16_t)vdupq_lane_s8(a9, 0);
        do
        {
          v159 = 0;
          v160 = 1;
          do
          {
            v161 = v160;
            v155[(unint64_t)v159 / 0x10] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v159 + (int)a2), *(uint8x8_t *)v158.i8), *(uint8x8_t *)(a1 + v159), *(uint8x8_t *)v157.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v159 + (int)a2), v158), *(uint8x16_t *)(a1 + v159), v157), 3uLL);
            v159 = 16;
            v160 = 0;
          }
          while ((v161 & 1) != 0);
          a1 += (int)a2;
          v155 += 2;
          --v156;
        }
        while (v156);
        return vpx_variance32x32(&v343, 32, a5, a6, a7);
      }
      v61 = (uint8x16_t *)(a1 + (int)a2);
      v62 = *v61;
      v63 = *(uint8x16_t *)(a1 + 16 + (int)a2);
      v64 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), v63);
      v343 = vrhaddq_u8(*(uint8x16_t *)a1, *v61);
      v344 = v64;
      v65 = (uint8x16_t *)((char *)v61 + (int)a2);
      v66 = *v65;
      v67 = v65[1];
      v345 = vrhaddq_u8(v62, *v65);
      v346 = vrhaddq_u8(v63, v67);
      v68 = (uint8x16_t *)((char *)v65 + (int)a2);
      v69 = *v68;
      v70 = v68[1];
      v347 = vrhaddq_u8(v66, *v68);
      v348 = vrhaddq_u8(v67, v70);
      v71 = (uint8x16_t *)((char *)v68 + (int)a2);
      v72 = *v71;
      v73 = v71[1];
      v349 = vrhaddq_u8(v69, *v71);
      v350 = vrhaddq_u8(v70, v73);
      v74 = (uint8x16_t *)((char *)v71 + (int)a2);
      v75 = *v74;
      v76 = v74[1];
      v351 = vrhaddq_u8(v72, *v74);
      v352 = vrhaddq_u8(v73, v76);
      v77 = (uint8x16_t *)((char *)v74 + (int)a2);
      v78 = *v77;
      v79 = v77[1];
      v353 = vrhaddq_u8(v75, *v77);
      v354 = vrhaddq_u8(v76, v79);
      v80 = (uint8x16_t *)((char *)v77 + (int)a2);
      v81 = *v80;
      v82 = v80[1];
      v355 = vrhaddq_u8(v78, *v80);
      v356 = vrhaddq_u8(v79, v82);
      v83 = (uint8x16_t *)((char *)v80 + (int)a2);
      v84 = *v83;
      v85 = v83[1];
      v357 = vrhaddq_u8(v81, *v83);
      v358 = vrhaddq_u8(v82, v85);
      v86 = (uint8x16_t *)((char *)v83 + (int)a2);
      v87 = *v86;
      v88 = v86[1];
      v359 = vrhaddq_u8(v84, *v86);
      v360 = vrhaddq_u8(v85, v88);
      v89 = (uint8x16_t *)((char *)v86 + (int)a2);
      v90 = *v89;
      v91 = v89[1];
      v361 = vrhaddq_u8(v87, *v89);
      v362 = vrhaddq_u8(v88, v91);
      v92 = (uint8x16_t *)((char *)v89 + (int)a2);
      v93 = *v92;
      v94 = v92[1];
      v363 = vrhaddq_u8(v90, *v92);
      v364 = vrhaddq_u8(v91, v94);
      v95 = (uint8x16_t *)((char *)v92 + (int)a2);
      v96 = *v95;
      v365 = vrhaddq_u8(v93, *v95);
      v97 = v95[1];
      v366 = vrhaddq_u8(v94, v97);
      v98 = (uint8x16_t *)((char *)v95 + (int)a2);
      v99 = *v98;
      v367 = vrhaddq_u8(v96, *v98);
      v100 = v98[1];
      v368 = vrhaddq_u8(v97, v100);
      v101 = (uint8x16_t *)((char *)v98 + (int)a2);
      v102 = *v101;
      v369 = vrhaddq_u8(v99, *v101);
      v103 = v101[1];
      v370 = vrhaddq_u8(v100, v103);
      v104 = (uint8x16_t *)((char *)v101 + (int)a2);
      v105 = *v104;
      v371 = vrhaddq_u8(v102, *v104);
      v106 = v104[1];
      v372 = vrhaddq_u8(v103, v106);
      v107 = (uint8x16_t *)((char *)v104 + (int)a2);
      v108 = *v107;
      v373 = vrhaddq_u8(v105, *v107);
      v109 = v107[1];
      v374 = vrhaddq_u8(v106, v109);
      v110 = (uint8x16_t *)((char *)v107 + (int)a2);
      v111 = *v110;
      v375 = vrhaddq_u8(v108, *v110);
      v112 = v110[1];
      v376 = vrhaddq_u8(v109, v112);
      v113 = (uint8x16_t *)((char *)v110 + (int)a2);
      v114 = *v113;
      v377 = vrhaddq_u8(v111, *v113);
      v115 = v113[1];
      v378 = vrhaddq_u8(v112, v115);
      v116 = (uint8x16_t *)((char *)v113 + (int)a2);
      v117 = *v116;
      v379 = vrhaddq_u8(v114, *v116);
      v118 = v116[1];
      v380 = vrhaddq_u8(v115, v118);
      v119 = (uint8x16_t *)((char *)v116 + (int)a2);
      v120 = *v119;
      v381 = vrhaddq_u8(v117, *v119);
      v121 = v119[1];
      v382 = vrhaddq_u8(v118, v121);
      v122 = (uint8x16_t *)((char *)v119 + (int)a2);
      v123 = *v122;
      v383 = vrhaddq_u8(v120, *v122);
      v124 = v122[1];
      v384 = vrhaddq_u8(v121, v124);
      v125 = (uint8x16_t *)((char *)v122 + (int)a2);
      v126 = *v125;
      v385 = vrhaddq_u8(v123, *v125);
      v127 = v125[1];
      v386 = vrhaddq_u8(v124, v127);
      v128 = (uint8x16_t *)((char *)v125 + (int)a2);
      v129 = *v128;
      v387 = vrhaddq_u8(v126, *v128);
      v130 = v128[1];
      v388 = vrhaddq_u8(v127, v130);
      v131 = (uint8x16_t *)((char *)v128 + (int)a2);
      v132 = *v131;
      v389 = vrhaddq_u8(v129, *v131);
      v133 = v131[1];
      v390 = vrhaddq_u8(v130, v133);
      v134 = (uint8x16_t *)((char *)v131 + (int)a2);
      v135 = *v134;
      v391 = vrhaddq_u8(v132, *v134);
      v136 = v134[1];
      v392 = vrhaddq_u8(v133, v136);
      v137 = (uint8x16_t *)((char *)v134 + (int)a2);
      v138 = *v137;
      v393 = vrhaddq_u8(v135, *v137);
      v139 = v137[1];
      v394 = vrhaddq_u8(v136, v139);
      v140 = (uint8x16_t *)((char *)v137 + (int)a2);
      v141 = *v140;
      v395 = vrhaddq_u8(v138, *v140);
      v142 = v140[1];
      v396 = vrhaddq_u8(v139, v142);
      v143 = (uint8x16_t *)((char *)v140 + (int)a2);
      v144 = *v143;
      v397 = vrhaddq_u8(v141, *v143);
      v145 = v143[1];
      v398 = vrhaddq_u8(v142, v145);
      v146 = (uint8x16_t *)((char *)v143 + (int)a2);
      v147 = *v146;
      v399 = vrhaddq_u8(v144, *v146);
      v148 = v146[1];
      v400 = vrhaddq_u8(v145, v148);
      v149 = (uint8x16_t *)((char *)v146 + (int)a2);
      v150 = *v149;
      v401 = vrhaddq_u8(v147, *v149);
      v151 = v149[1];
      v402 = vrhaddq_u8(v148, v151);
      v152 = (uint8x16_t *)((char *)v149 + (int)a2);
      v153 = *v152;
      v403 = vrhaddq_u8(v150, *v152);
      v52 = v152[1];
      v404 = vrhaddq_u8(v151, v52);
      v154 = (uint8x16_t *)((char *)v152 + (int)a2);
      v405 = vrhaddq_u8(v153, *v154);
      v53 = v154[1];
      goto LABEL_17;
    }
    a8.i32[0] = 8 - a3;
    a9.i32[0] = a3;
    v54 = &v343;
    if (a4 != 4)
    {
      if (!a4)
      {
        v55 = 32;
        v56 = (uint8x16_t)vdupq_lane_s8(a8, 0);
        v57 = (uint8x16_t)vdupq_lane_s8(a9, 0);
        do
        {
          v58 = 0;
          v59 = 1;
          do
          {
            v60 = v59;
            v54[(unint64_t)v58 / 0x10] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v58 + 1), *(uint8x8_t *)v57.i8), *(uint8x8_t *)(a1 + v58), *(uint8x8_t *)v56.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v58 + 1), v57), *(uint8x16_t *)(a1 + v58), v56), 3uLL);
            v58 = 16;
            v59 = 0;
          }
          while ((v60 & 1) != 0);
          a1 += (int)a2;
          v54 += 2;
          --v55;
        }
        while (v55);
        return vpx_variance32x32(&v343, 32, a5, a6, a7);
      }
      v265 = 33;
      v266 = (uint8x16_t)vdupq_lane_s8(a8, 0);
      v267 = (uint8x16_t)vdupq_lane_s8(a9, 0);
      do
      {
        v268 = 0;
        v269 = 1;
        do
        {
          v270 = v269;
          v54[(unint64_t)v268 / 0x10] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v268 + 1), *(uint8x8_t *)v267.i8), *(uint8x8_t *)(a1 + v268), *(uint8x8_t *)v266.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v268 + 1), v267), *(uint8x16_t *)(a1 + v268), v266), 3uLL);
          v268 = 16;
          v269 = 0;
        }
        while ((v270 & 1) != 0);
        a1 += (int)a2;
        v54 += 2;
        --v265;
      }
      while (v265);
      v266.i32[0] = 8 - a4;
      v267.i32[0] = a4;
      v271 = &v343;
      v272 = &v279;
      v273 = 32;
      v274 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v266.i8, 0);
      v275 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v267.i8, 0);
      do
      {
        v276 = 0;
        v277 = 1;
        do
        {
          v278 = v277;
          v272[v276] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v271[v276 + 2].i8, *(uint8x8_t *)v275.i8), *(uint8x8_t *)v271[v276].i8, *(uint8x8_t *)v274.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v271[v276 + 2], v275), v271[v276], v274), 3uLL);
          v276 = 1;
          v277 = 0;
        }
        while ((v278 & 1) != 0);
        v271 += 2;
        v272 += 2;
        --v273;
      }
      while (v273);
      return vpx_variance32x32(&v279, 32, a5, a6, a7);
    }
    v259 = 33;
    v260 = (uint8x16_t)vdupq_lane_s8(a8, 0);
    v261 = (uint8x16_t)vdupq_lane_s8(a9, 0);
    do
    {
      v262 = 0;
      v263 = 1;
      do
      {
        v264 = v263;
        v54[(unint64_t)v262 / 0x10] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v262 + 1), *(uint8x8_t *)v261.i8), *(uint8x8_t *)(a1 + v262), *(uint8x8_t *)v260.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v262 + 1), v261), *(uint8x16_t *)(a1 + v262), v260), 3uLL);
        v262 = 16;
        v263 = 0;
      }
      while ((v264 & 1) != 0);
      a1 += (int)a2;
      v54 += 2;
      --v259;
    }
    while (v259);
    v279 = vrhaddq_u8(v343, v345);
    v280 = vrhaddq_u8(v344, v346);
    v281 = vrhaddq_u8(v345, v347);
    v282 = vrhaddq_u8(v346, v348);
    v283 = vrhaddq_u8(v347, v349);
    v284 = vrhaddq_u8(v348, v350);
    v285 = vrhaddq_u8(v349, v351);
    v286 = vrhaddq_u8(v350, v352);
    v287 = vrhaddq_u8(v351, v353);
    v288 = vrhaddq_u8(v352, v354);
    v289 = vrhaddq_u8(v353, v355);
    v290 = vrhaddq_u8(v354, v356);
    v291 = vrhaddq_u8(v355, v357);
    v292 = vrhaddq_u8(v356, v358);
    v205 = v359;
    v293 = vrhaddq_u8(v357, v359);
    v294 = vrhaddq_u8(v358, v360);
LABEL_34:
    v295 = vrhaddq_u8(v205, v361);
    v296 = vrhaddq_u8(v360, v362);
    v297 = vrhaddq_u8(v361, v363);
    v298 = vrhaddq_u8(v362, v364);
    v299 = vrhaddq_u8(v363, v365);
    v300 = vrhaddq_u8(v364, v366);
    v301 = vrhaddq_u8(v365, v367);
    v302 = vrhaddq_u8(v366, v368);
    v303 = vrhaddq_u8(v367, v369);
    v304 = vrhaddq_u8(v368, v370);
    v305 = vrhaddq_u8(v369, v371);
    v306 = vrhaddq_u8(v370, v372);
    v307 = vrhaddq_u8(v371, v373);
    v308 = vrhaddq_u8(v372, v374);
    v309 = vrhaddq_u8(v373, v375);
    v310 = vrhaddq_u8(v374, v376);
    v311 = vrhaddq_u8(v375, v377);
    v312 = vrhaddq_u8(v376, v378);
    v313 = vrhaddq_u8(v377, v379);
    v314 = vrhaddq_u8(v378, v380);
    v315 = vrhaddq_u8(v379, v381);
    v316 = vrhaddq_u8(v380, v382);
    v317 = vrhaddq_u8(v381, v383);
    v318 = vrhaddq_u8(v382, v384);
    v319 = vrhaddq_u8(v383, v385);
    v320 = vrhaddq_u8(v384, v386);
    v321 = vrhaddq_u8(v385, v387);
    v322 = vrhaddq_u8(v386, v388);
    v323 = vrhaddq_u8(v387, v389);
    v324 = vrhaddq_u8(v388, v390);
    v325 = vrhaddq_u8(v389, v391);
    v326 = vrhaddq_u8(v390, v392);
    v327 = vrhaddq_u8(v391, v393);
    v328 = vrhaddq_u8(v392, v394);
    v329 = vrhaddq_u8(v393, v395);
    v330 = vrhaddq_u8(v394, v396);
    v331 = vrhaddq_u8(v395, v397);
    v332 = vrhaddq_u8(v396, v398);
    v333 = vrhaddq_u8(v397, v399);
    v334 = vrhaddq_u8(v398, v400);
    v335 = vrhaddq_u8(v399, v401);
    v336 = vrhaddq_u8(v400, v402);
    v337 = vrhaddq_u8(v401, v403);
    v338 = vrhaddq_u8(v402, v404);
    v339 = vrhaddq_u8(v403, v405);
    v340 = vrhaddq_u8(v404, v406);
    v341 = vrhaddq_u8(v405, v407);
    v342 = vrhaddq_u8(v406, v408);
    return vpx_variance32x32(&v279, 32, a5, a6, a7);
  }
  if (a4 == 4)
  {
    v162 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), *(uint8x16_t *)(a1 + 17));
    v343 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
    v344 = v162;
    v163 = vrhaddq_u8(*(uint8x16_t *)(a1 + (int)a2 + 16), *(uint8x16_t *)(a1 + (int)a2 + 17));
    v345 = vrhaddq_u8(*(uint8x16_t *)(a1 + (int)a2), *(uint8x16_t *)(a1 + (int)a2 + 1));
    v346 = v163;
    v164 = a1 + (int)a2 + (int)a2;
    v165 = vrhaddq_u8(*(uint8x16_t *)(v164 + 16), *(uint8x16_t *)(v164 + 17));
    v347 = vrhaddq_u8(*(uint8x16_t *)v164, *(uint8x16_t *)(v164 + 1));
    v348 = v165;
    v166 = v164 + (int)a2;
    v167 = vrhaddq_u8(*(uint8x16_t *)(v166 + 16), *(uint8x16_t *)(v166 + 17));
    v349 = vrhaddq_u8(*(uint8x16_t *)v166, *(uint8x16_t *)(v166 + 1));
    v350 = v167;
    v168 = v166 + (int)a2;
    v169 = vrhaddq_u8(*(uint8x16_t *)(v168 + 16), *(uint8x16_t *)(v168 + 17));
    v351 = vrhaddq_u8(*(uint8x16_t *)v168, *(uint8x16_t *)(v168 + 1));
    v352 = v169;
    v170 = v168 + (int)a2;
    v171 = vrhaddq_u8(*(uint8x16_t *)(v170 + 16), *(uint8x16_t *)(v170 + 17));
    v353 = vrhaddq_u8(*(uint8x16_t *)v170, *(uint8x16_t *)(v170 + 1));
    v354 = v171;
    v172 = v170 + (int)a2;
    v173 = vrhaddq_u8(*(uint8x16_t *)(v172 + 16), *(uint8x16_t *)(v172 + 17));
    v355 = vrhaddq_u8(*(uint8x16_t *)v172, *(uint8x16_t *)(v172 + 1));
    v356 = v173;
    v174 = v172 + (int)a2;
    v175 = vrhaddq_u8(*(uint8x16_t *)(v174 + 16), *(uint8x16_t *)(v174 + 17));
    v357 = vrhaddq_u8(*(uint8x16_t *)v174, *(uint8x16_t *)(v174 + 1));
    v358 = v175;
    v176 = v174 + (int)a2;
    v177 = vrhaddq_u8(*(uint8x16_t *)(v176 + 16), *(uint8x16_t *)(v176 + 17));
    v359 = vrhaddq_u8(*(uint8x16_t *)v176, *(uint8x16_t *)(v176 + 1));
    v360 = v177;
    v178 = v176 + (int)a2;
    v179 = vrhaddq_u8(*(uint8x16_t *)(v178 + 16), *(uint8x16_t *)(v178 + 17));
    v361 = vrhaddq_u8(*(uint8x16_t *)v178, *(uint8x16_t *)(v178 + 1));
    v362 = v179;
    v180 = v178 + (int)a2;
    v181 = vrhaddq_u8(*(uint8x16_t *)(v180 + 16), *(uint8x16_t *)(v180 + 17));
    v363 = vrhaddq_u8(*(uint8x16_t *)v180, *(uint8x16_t *)(v180 + 1));
    v364 = v181;
    v182 = v180 + (int)a2;
    v183 = vrhaddq_u8(*(uint8x16_t *)(v182 + 16), *(uint8x16_t *)(v182 + 17));
    v365 = vrhaddq_u8(*(uint8x16_t *)v182, *(uint8x16_t *)(v182 + 1));
    v366 = v183;
    v184 = v182 + (int)a2;
    v367 = vrhaddq_u8(*(uint8x16_t *)v184, *(uint8x16_t *)(v184 + 1));
    v368 = vrhaddq_u8(*(uint8x16_t *)(v184 + 16), *(uint8x16_t *)(v184 + 17));
    v185 = v184 + (int)a2;
    v369 = vrhaddq_u8(*(uint8x16_t *)v185, *(uint8x16_t *)(v185 + 1));
    v370 = vrhaddq_u8(*(uint8x16_t *)(v185 + 16), *(uint8x16_t *)(v185 + 17));
    v186 = v185 + (int)a2;
    v371 = vrhaddq_u8(*(uint8x16_t *)v186, *(uint8x16_t *)(v186 + 1));
    v372 = vrhaddq_u8(*(uint8x16_t *)(v186 + 16), *(uint8x16_t *)(v186 + 17));
    v187 = v186 + (int)a2;
    v373 = vrhaddq_u8(*(uint8x16_t *)v187, *(uint8x16_t *)(v187 + 1));
    v374 = vrhaddq_u8(*(uint8x16_t *)(v187 + 16), *(uint8x16_t *)(v187 + 17));
    v188 = v187 + (int)a2;
    v375 = vrhaddq_u8(*(uint8x16_t *)v188, *(uint8x16_t *)(v188 + 1));
    v376 = vrhaddq_u8(*(uint8x16_t *)(v188 + 16), *(uint8x16_t *)(v188 + 17));
    v189 = v188 + (int)a2;
    v377 = vrhaddq_u8(*(uint8x16_t *)v189, *(uint8x16_t *)(v189 + 1));
    v378 = vrhaddq_u8(*(uint8x16_t *)(v189 + 16), *(uint8x16_t *)(v189 + 17));
    v190 = v189 + (int)a2;
    v379 = vrhaddq_u8(*(uint8x16_t *)v190, *(uint8x16_t *)(v190 + 1));
    v380 = vrhaddq_u8(*(uint8x16_t *)(v190 + 16), *(uint8x16_t *)(v190 + 17));
    v191 = v190 + (int)a2;
    v381 = vrhaddq_u8(*(uint8x16_t *)v191, *(uint8x16_t *)(v191 + 1));
    v382 = vrhaddq_u8(*(uint8x16_t *)(v191 + 16), *(uint8x16_t *)(v191 + 17));
    v192 = v191 + (int)a2;
    v383 = vrhaddq_u8(*(uint8x16_t *)v192, *(uint8x16_t *)(v192 + 1));
    v384 = vrhaddq_u8(*(uint8x16_t *)(v192 + 16), *(uint8x16_t *)(v192 + 17));
    v193 = v192 + (int)a2;
    v385 = vrhaddq_u8(*(uint8x16_t *)v193, *(uint8x16_t *)(v193 + 1));
    v386 = vrhaddq_u8(*(uint8x16_t *)(v193 + 16), *(uint8x16_t *)(v193 + 17));
    v194 = v193 + (int)a2;
    v387 = vrhaddq_u8(*(uint8x16_t *)v194, *(uint8x16_t *)(v194 + 1));
    v388 = vrhaddq_u8(*(uint8x16_t *)(v194 + 16), *(uint8x16_t *)(v194 + 17));
    v195 = v194 + (int)a2;
    v389 = vrhaddq_u8(*(uint8x16_t *)v195, *(uint8x16_t *)(v195 + 1));
    v390 = vrhaddq_u8(*(uint8x16_t *)(v195 + 16), *(uint8x16_t *)(v195 + 17));
    v196 = v195 + (int)a2;
    v391 = vrhaddq_u8(*(uint8x16_t *)v196, *(uint8x16_t *)(v196 + 1));
    v392 = vrhaddq_u8(*(uint8x16_t *)(v196 + 16), *(uint8x16_t *)(v196 + 17));
    v197 = v196 + (int)a2;
    v393 = vrhaddq_u8(*(uint8x16_t *)v197, *(uint8x16_t *)(v197 + 1));
    v394 = vrhaddq_u8(*(uint8x16_t *)(v197 + 16), *(uint8x16_t *)(v197 + 17));
    v198 = v197 + (int)a2;
    v395 = vrhaddq_u8(*(uint8x16_t *)v198, *(uint8x16_t *)(v198 + 1));
    v396 = vrhaddq_u8(*(uint8x16_t *)(v198 + 16), *(uint8x16_t *)(v198 + 17));
    v199 = v198 + (int)a2;
    v397 = vrhaddq_u8(*(uint8x16_t *)v199, *(uint8x16_t *)(v199 + 1));
    v398 = vrhaddq_u8(*(uint8x16_t *)(v199 + 16), *(uint8x16_t *)(v199 + 17));
    v200 = v199 + (int)a2;
    v399 = vrhaddq_u8(*(uint8x16_t *)v200, *(uint8x16_t *)(v200 + 1));
    v400 = vrhaddq_u8(*(uint8x16_t *)(v200 + 16), *(uint8x16_t *)(v200 + 17));
    v201 = v200 + (int)a2;
    v401 = vrhaddq_u8(*(uint8x16_t *)v201, *(uint8x16_t *)(v201 + 1));
    v402 = vrhaddq_u8(*(uint8x16_t *)(v201 + 16), *(uint8x16_t *)(v201 + 17));
    v202 = v201 + (int)a2;
    v403 = vrhaddq_u8(*(uint8x16_t *)v202, *(uint8x16_t *)(v202 + 1));
    v404 = vrhaddq_u8(*(uint8x16_t *)(v202 + 16), *(uint8x16_t *)(v202 + 17));
    v203 = v202 + (int)a2;
    v405 = vrhaddq_u8(*(uint8x16_t *)v203, *(uint8x16_t *)(v203 + 1));
    v406 = vrhaddq_u8(*(uint8x16_t *)(v203 + 16), *(uint8x16_t *)(v203 + 17));
    v204 = v203 + (int)a2;
    v407 = vrhaddq_u8(*(uint8x16_t *)v204, *(uint8x16_t *)(v204 + 1));
    v408 = vrhaddq_u8(*(uint8x16_t *)(v204 + 16), *(uint8x16_t *)(v204 + 17));
    v279 = vrhaddq_u8(v343, v345);
    v280 = vrhaddq_u8(v344, v346);
    v281 = vrhaddq_u8(v345, v347);
    v282 = vrhaddq_u8(v346, v348);
    v283 = vrhaddq_u8(v347, v349);
    v284 = vrhaddq_u8(v348, v350);
    v285 = vrhaddq_u8(v349, v351);
    v286 = vrhaddq_u8(v350, v352);
    v287 = vrhaddq_u8(v351, v353);
    v288 = vrhaddq_u8(v352, v354);
    v289 = vrhaddq_u8(v353, v355);
    v290 = vrhaddq_u8(v354, v356);
    v291 = vrhaddq_u8(v355, v357);
    v292 = vrhaddq_u8(v356, v358);
    v205 = v359;
    v293 = vrhaddq_u8(v357, v359);
    v294 = vrhaddq_u8(v358, v360);
    goto LABEL_34;
  }
  if (!a4)
  {
    v10 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), *(uint8x16_t *)(a1 + 17));
    v343 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
    v344 = v10;
    v11 = vrhaddq_u8(*(uint8x16_t *)(a1 + (int)a2 + 16), *(uint8x16_t *)(a1 + (int)a2 + 17));
    v345 = vrhaddq_u8(*(uint8x16_t *)(a1 + (int)a2), *(uint8x16_t *)(a1 + (int)a2 + 1));
    v346 = v11;
    v12 = a1 + (int)a2 + (int)a2;
    v13 = vrhaddq_u8(*(uint8x16_t *)(v12 + 16), *(uint8x16_t *)(v12 + 17));
    v347 = vrhaddq_u8(*(uint8x16_t *)v12, *(uint8x16_t *)(v12 + 1));
    v348 = v13;
    v14 = v12 + (int)a2;
    v15 = vrhaddq_u8(*(uint8x16_t *)(v14 + 16), *(uint8x16_t *)(v14 + 17));
    v349 = vrhaddq_u8(*(uint8x16_t *)v14, *(uint8x16_t *)(v14 + 1));
    v350 = v15;
    v16 = v14 + (int)a2;
    v17 = vrhaddq_u8(*(uint8x16_t *)(v16 + 16), *(uint8x16_t *)(v16 + 17));
    v351 = vrhaddq_u8(*(uint8x16_t *)v16, *(uint8x16_t *)(v16 + 1));
    v352 = v17;
    v18 = v16 + (int)a2;
    v19 = vrhaddq_u8(*(uint8x16_t *)(v18 + 16), *(uint8x16_t *)(v18 + 17));
    v353 = vrhaddq_u8(*(uint8x16_t *)v18, *(uint8x16_t *)(v18 + 1));
    v354 = v19;
    v20 = v18 + (int)a2;
    v21 = vrhaddq_u8(*(uint8x16_t *)(v20 + 16), *(uint8x16_t *)(v20 + 17));
    v355 = vrhaddq_u8(*(uint8x16_t *)v20, *(uint8x16_t *)(v20 + 1));
    v356 = v21;
    v22 = v20 + (int)a2;
    v23 = vrhaddq_u8(*(uint8x16_t *)(v22 + 16), *(uint8x16_t *)(v22 + 17));
    v357 = vrhaddq_u8(*(uint8x16_t *)v22, *(uint8x16_t *)(v22 + 1));
    v358 = v23;
    v24 = v22 + (int)a2;
    v25 = vrhaddq_u8(*(uint8x16_t *)(v24 + 16), *(uint8x16_t *)(v24 + 17));
    v359 = vrhaddq_u8(*(uint8x16_t *)v24, *(uint8x16_t *)(v24 + 1));
    v360 = v25;
    v26 = v24 + (int)a2;
    v27 = vrhaddq_u8(*(uint8x16_t *)(v26 + 16), *(uint8x16_t *)(v26 + 17));
    v361 = vrhaddq_u8(*(uint8x16_t *)v26, *(uint8x16_t *)(v26 + 1));
    v362 = v27;
    v28 = v26 + (int)a2;
    v29 = vrhaddq_u8(*(uint8x16_t *)(v28 + 16), *(uint8x16_t *)(v28 + 17));
    v363 = vrhaddq_u8(*(uint8x16_t *)v28, *(uint8x16_t *)(v28 + 1));
    v364 = v29;
    v30 = v28 + (int)a2;
    v31 = vrhaddq_u8(*(uint8x16_t *)(v30 + 16), *(uint8x16_t *)(v30 + 17));
    v365 = vrhaddq_u8(*(uint8x16_t *)v30, *(uint8x16_t *)(v30 + 1));
    v366 = v31;
    v32 = v30 + (int)a2;
    v367 = vrhaddq_u8(*(uint8x16_t *)v32, *(uint8x16_t *)(v32 + 1));
    v368 = vrhaddq_u8(*(uint8x16_t *)(v32 + 16), *(uint8x16_t *)(v32 + 17));
    v33 = v32 + (int)a2;
    v369 = vrhaddq_u8(*(uint8x16_t *)v33, *(uint8x16_t *)(v33 + 1));
    v370 = vrhaddq_u8(*(uint8x16_t *)(v33 + 16), *(uint8x16_t *)(v33 + 17));
    v34 = v33 + (int)a2;
    v371 = vrhaddq_u8(*(uint8x16_t *)v34, *(uint8x16_t *)(v34 + 1));
    v372 = vrhaddq_u8(*(uint8x16_t *)(v34 + 16), *(uint8x16_t *)(v34 + 17));
    v35 = v34 + (int)a2;
    v373 = vrhaddq_u8(*(uint8x16_t *)v35, *(uint8x16_t *)(v35 + 1));
    v374 = vrhaddq_u8(*(uint8x16_t *)(v35 + 16), *(uint8x16_t *)(v35 + 17));
    v36 = v35 + (int)a2;
    v375 = vrhaddq_u8(*(uint8x16_t *)v36, *(uint8x16_t *)(v36 + 1));
    v376 = vrhaddq_u8(*(uint8x16_t *)(v36 + 16), *(uint8x16_t *)(v36 + 17));
    v37 = v36 + (int)a2;
    v377 = vrhaddq_u8(*(uint8x16_t *)v37, *(uint8x16_t *)(v37 + 1));
    v378 = vrhaddq_u8(*(uint8x16_t *)(v37 + 16), *(uint8x16_t *)(v37 + 17));
    v38 = v37 + (int)a2;
    v379 = vrhaddq_u8(*(uint8x16_t *)v38, *(uint8x16_t *)(v38 + 1));
    v380 = vrhaddq_u8(*(uint8x16_t *)(v38 + 16), *(uint8x16_t *)(v38 + 17));
    v39 = v38 + (int)a2;
    v381 = vrhaddq_u8(*(uint8x16_t *)v39, *(uint8x16_t *)(v39 + 1));
    v382 = vrhaddq_u8(*(uint8x16_t *)(v39 + 16), *(uint8x16_t *)(v39 + 17));
    v40 = v39 + (int)a2;
    v383 = vrhaddq_u8(*(uint8x16_t *)v40, *(uint8x16_t *)(v40 + 1));
    v384 = vrhaddq_u8(*(uint8x16_t *)(v40 + 16), *(uint8x16_t *)(v40 + 17));
    v41 = v40 + (int)a2;
    v385 = vrhaddq_u8(*(uint8x16_t *)v41, *(uint8x16_t *)(v41 + 1));
    v386 = vrhaddq_u8(*(uint8x16_t *)(v41 + 16), *(uint8x16_t *)(v41 + 17));
    v42 = v41 + (int)a2;
    v387 = vrhaddq_u8(*(uint8x16_t *)v42, *(uint8x16_t *)(v42 + 1));
    v388 = vrhaddq_u8(*(uint8x16_t *)(v42 + 16), *(uint8x16_t *)(v42 + 17));
    v43 = v42 + (int)a2;
    v389 = vrhaddq_u8(*(uint8x16_t *)v43, *(uint8x16_t *)(v43 + 1));
    v390 = vrhaddq_u8(*(uint8x16_t *)(v43 + 16), *(uint8x16_t *)(v43 + 17));
    v44 = v43 + (int)a2;
    v391 = vrhaddq_u8(*(uint8x16_t *)v44, *(uint8x16_t *)(v44 + 1));
    v392 = vrhaddq_u8(*(uint8x16_t *)(v44 + 16), *(uint8x16_t *)(v44 + 17));
    v45 = v44 + (int)a2;
    v393 = vrhaddq_u8(*(uint8x16_t *)v45, *(uint8x16_t *)(v45 + 1));
    v394 = vrhaddq_u8(*(uint8x16_t *)(v45 + 16), *(uint8x16_t *)(v45 + 17));
    v46 = v45 + (int)a2;
    v395 = vrhaddq_u8(*(uint8x16_t *)v46, *(uint8x16_t *)(v46 + 1));
    v396 = vrhaddq_u8(*(uint8x16_t *)(v46 + 16), *(uint8x16_t *)(v46 + 17));
    v47 = v46 + (int)a2;
    v397 = vrhaddq_u8(*(uint8x16_t *)v47, *(uint8x16_t *)(v47 + 1));
    v398 = vrhaddq_u8(*(uint8x16_t *)(v47 + 16), *(uint8x16_t *)(v47 + 17));
    v48 = v47 + (int)a2;
    v399 = vrhaddq_u8(*(uint8x16_t *)v48, *(uint8x16_t *)(v48 + 1));
    v400 = vrhaddq_u8(*(uint8x16_t *)(v48 + 16), *(uint8x16_t *)(v48 + 17));
    v49 = v48 + (int)a2;
    v401 = vrhaddq_u8(*(uint8x16_t *)v49, *(uint8x16_t *)(v49 + 1));
    v402 = vrhaddq_u8(*(uint8x16_t *)(v49 + 16), *(uint8x16_t *)(v49 + 17));
    v50 = v49 + (int)a2;
    v403 = vrhaddq_u8(*(uint8x16_t *)v50, *(uint8x16_t *)(v50 + 1));
    v404 = vrhaddq_u8(*(uint8x16_t *)(v50 + 16), *(uint8x16_t *)(v50 + 17));
    v51 = v50 + (int)a2;
    v405 = vrhaddq_u8(*(uint8x16_t *)v51, *(uint8x16_t *)(v51 + 1));
    v52 = *(uint8x16_t *)(v51 + 16);
    v53 = *(uint8x16_t *)(v51 + 17);
LABEL_17:
    v406 = vrhaddq_u8(v52, v53);
    return vpx_variance32x32(&v343, 32, a5, a6, a7);
  }
  v206 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), *(uint8x16_t *)(a1 + 17));
  v343 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
  v344 = v206;
  v207 = vrhaddq_u8(*(uint8x16_t *)(a1 + (int)a2 + 16), *(uint8x16_t *)(a1 + (int)a2 + 17));
  v345 = vrhaddq_u8(*(uint8x16_t *)(a1 + (int)a2), *(uint8x16_t *)(a1 + (int)a2 + 1));
  v346 = v207;
  v208 = a1 + (int)a2 + (int)a2;
  v209 = vrhaddq_u8(*(uint8x16_t *)(v208 + 16), *(uint8x16_t *)(v208 + 17));
  v347 = vrhaddq_u8(*(uint8x16_t *)v208, *(uint8x16_t *)(v208 + 1));
  v348 = v209;
  v210 = v208 + (int)a2;
  v211 = vrhaddq_u8(*(uint8x16_t *)(v210 + 16), *(uint8x16_t *)(v210 + 17));
  v349 = vrhaddq_u8(*(uint8x16_t *)v210, *(uint8x16_t *)(v210 + 1));
  v350 = v211;
  v212 = v210 + (int)a2;
  v213 = vrhaddq_u8(*(uint8x16_t *)(v212 + 16), *(uint8x16_t *)(v212 + 17));
  v351 = vrhaddq_u8(*(uint8x16_t *)v212, *(uint8x16_t *)(v212 + 1));
  v352 = v213;
  v214 = v212 + (int)a2;
  v215 = vrhaddq_u8(*(uint8x16_t *)(v214 + 16), *(uint8x16_t *)(v214 + 17));
  v353 = vrhaddq_u8(*(uint8x16_t *)v214, *(uint8x16_t *)(v214 + 1));
  v354 = v215;
  v216 = v214 + (int)a2;
  v217 = vrhaddq_u8(*(uint8x16_t *)(v216 + 16), *(uint8x16_t *)(v216 + 17));
  v355 = vrhaddq_u8(*(uint8x16_t *)v216, *(uint8x16_t *)(v216 + 1));
  v356 = v217;
  v218 = v216 + (int)a2;
  v219 = vrhaddq_u8(*(uint8x16_t *)(v218 + 16), *(uint8x16_t *)(v218 + 17));
  v357 = vrhaddq_u8(*(uint8x16_t *)v218, *(uint8x16_t *)(v218 + 1));
  v358 = v219;
  v220 = v218 + (int)a2;
  v221 = vrhaddq_u8(*(uint8x16_t *)(v220 + 16), *(uint8x16_t *)(v220 + 17));
  v359 = vrhaddq_u8(*(uint8x16_t *)v220, *(uint8x16_t *)(v220 + 1));
  v360 = v221;
  v222 = v220 + (int)a2;
  v223 = vrhaddq_u8(*(uint8x16_t *)(v222 + 16), *(uint8x16_t *)(v222 + 17));
  v361 = vrhaddq_u8(*(uint8x16_t *)v222, *(uint8x16_t *)(v222 + 1));
  v362 = v223;
  v224 = v222 + (int)a2;
  v225 = vrhaddq_u8(*(uint8x16_t *)(v224 + 16), *(uint8x16_t *)(v224 + 17));
  v363 = vrhaddq_u8(*(uint8x16_t *)v224, *(uint8x16_t *)(v224 + 1));
  v364 = v225;
  v226 = v224 + (int)a2;
  v227 = vrhaddq_u8(*(uint8x16_t *)(v226 + 16), *(uint8x16_t *)(v226 + 17));
  v365 = vrhaddq_u8(*(uint8x16_t *)v226, *(uint8x16_t *)(v226 + 1));
  v366 = v227;
  v228 = v226 + (int)a2;
  v367 = vrhaddq_u8(*(uint8x16_t *)v228, *(uint8x16_t *)(v228 + 1));
  v368 = vrhaddq_u8(*(uint8x16_t *)(v228 + 16), *(uint8x16_t *)(v228 + 17));
  v229 = v228 + (int)a2;
  v369 = vrhaddq_u8(*(uint8x16_t *)v229, *(uint8x16_t *)(v229 + 1));
  v370 = vrhaddq_u8(*(uint8x16_t *)(v229 + 16), *(uint8x16_t *)(v229 + 17));
  v230 = v229 + (int)a2;
  v371 = vrhaddq_u8(*(uint8x16_t *)v230, *(uint8x16_t *)(v230 + 1));
  v372 = vrhaddq_u8(*(uint8x16_t *)(v230 + 16), *(uint8x16_t *)(v230 + 17));
  v231 = v230 + (int)a2;
  v373 = vrhaddq_u8(*(uint8x16_t *)v231, *(uint8x16_t *)(v231 + 1));
  v374 = vrhaddq_u8(*(uint8x16_t *)(v231 + 16), *(uint8x16_t *)(v231 + 17));
  v232 = v231 + (int)a2;
  v375 = vrhaddq_u8(*(uint8x16_t *)v232, *(uint8x16_t *)(v232 + 1));
  v376 = vrhaddq_u8(*(uint8x16_t *)(v232 + 16), *(uint8x16_t *)(v232 + 17));
  v233 = v232 + (int)a2;
  v377 = vrhaddq_u8(*(uint8x16_t *)v233, *(uint8x16_t *)(v233 + 1));
  v378 = vrhaddq_u8(*(uint8x16_t *)(v233 + 16), *(uint8x16_t *)(v233 + 17));
  v234 = v233 + (int)a2;
  v379 = vrhaddq_u8(*(uint8x16_t *)v234, *(uint8x16_t *)(v234 + 1));
  v380 = vrhaddq_u8(*(uint8x16_t *)(v234 + 16), *(uint8x16_t *)(v234 + 17));
  v235 = v234 + (int)a2;
  v381 = vrhaddq_u8(*(uint8x16_t *)v235, *(uint8x16_t *)(v235 + 1));
  v382 = vrhaddq_u8(*(uint8x16_t *)(v235 + 16), *(uint8x16_t *)(v235 + 17));
  v236 = v235 + (int)a2;
  v383 = vrhaddq_u8(*(uint8x16_t *)v236, *(uint8x16_t *)(v236 + 1));
  v384 = vrhaddq_u8(*(uint8x16_t *)(v236 + 16), *(uint8x16_t *)(v236 + 17));
  v237 = v236 + (int)a2;
  v385 = vrhaddq_u8(*(uint8x16_t *)v237, *(uint8x16_t *)(v237 + 1));
  v386 = vrhaddq_u8(*(uint8x16_t *)(v237 + 16), *(uint8x16_t *)(v237 + 17));
  v238 = v237 + (int)a2;
  v387 = vrhaddq_u8(*(uint8x16_t *)v238, *(uint8x16_t *)(v238 + 1));
  v388 = vrhaddq_u8(*(uint8x16_t *)(v238 + 16), *(uint8x16_t *)(v238 + 17));
  v239 = v238 + (int)a2;
  v389 = vrhaddq_u8(*(uint8x16_t *)v239, *(uint8x16_t *)(v239 + 1));
  v390 = vrhaddq_u8(*(uint8x16_t *)(v239 + 16), *(uint8x16_t *)(v239 + 17));
  v240 = v239 + (int)a2;
  v391 = vrhaddq_u8(*(uint8x16_t *)v240, *(uint8x16_t *)(v240 + 1));
  v392 = vrhaddq_u8(*(uint8x16_t *)(v240 + 16), *(uint8x16_t *)(v240 + 17));
  v241 = v240 + (int)a2;
  v393 = vrhaddq_u8(*(uint8x16_t *)v241, *(uint8x16_t *)(v241 + 1));
  v394 = vrhaddq_u8(*(uint8x16_t *)(v241 + 16), *(uint8x16_t *)(v241 + 17));
  v242 = v241 + (int)a2;
  v395 = vrhaddq_u8(*(uint8x16_t *)v242, *(uint8x16_t *)(v242 + 1));
  v396 = vrhaddq_u8(*(uint8x16_t *)(v242 + 16), *(uint8x16_t *)(v242 + 17));
  v243 = v242 + (int)a2;
  v397 = vrhaddq_u8(*(uint8x16_t *)v243, *(uint8x16_t *)(v243 + 1));
  v398 = vrhaddq_u8(*(uint8x16_t *)(v243 + 16), *(uint8x16_t *)(v243 + 17));
  v244 = v243 + (int)a2;
  v399 = vrhaddq_u8(*(uint8x16_t *)v244, *(uint8x16_t *)(v244 + 1));
  v400 = vrhaddq_u8(*(uint8x16_t *)(v244 + 16), *(uint8x16_t *)(v244 + 17));
  v245 = v244 + (int)a2;
  v401 = vrhaddq_u8(*(uint8x16_t *)v245, *(uint8x16_t *)(v245 + 1));
  v402 = vrhaddq_u8(*(uint8x16_t *)(v245 + 16), *(uint8x16_t *)(v245 + 17));
  v246 = v245 + (int)a2;
  v403 = vrhaddq_u8(*(uint8x16_t *)v246, *(uint8x16_t *)(v246 + 1));
  v404 = vrhaddq_u8(*(uint8x16_t *)(v246 + 16), *(uint8x16_t *)(v246 + 17));
  v247 = v246 + (int)a2;
  v405 = vrhaddq_u8(*(uint8x16_t *)v247, *(uint8x16_t *)(v247 + 1));
  v406 = vrhaddq_u8(*(uint8x16_t *)(v247 + 16), *(uint8x16_t *)(v247 + 17));
  v248 = v247 + (int)a2;
  v407 = vrhaddq_u8(*(uint8x16_t *)v248, *(uint8x16_t *)(v248 + 1));
  v249 = *(uint8x16_t *)(v248 + 17);
  v250 = vrhaddq_u8(*(uint8x16_t *)(v248 + 16), v249);
  v408 = v250;
  v250.i32[0] = 8 - a4;
  v249.i32[0] = a4;
  v251 = &v343;
  v252 = &v279;
  v253 = 32;
  v254 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v250.i8, 0);
  v255 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v249.i8, 0);
  do
  {
    v256 = 0;
    v257 = 1;
    do
    {
      v258 = v257;
      v252[v256] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v251[v256 + 2].i8, *(uint8x8_t *)v255.i8), *(uint8x8_t *)v251[v256].i8, *(uint8x8_t *)v254.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v251[v256 + 2], v255), v251[v256], v254), 3uLL);
      v256 = 1;
      v257 = 0;
    }
    while ((v258 & 1) != 0);
    v251 += 2;
    v252 += 2;
    --v253;
  }
  while (v253);
  return vpx_variance32x32(&v279, 32, a5, a6, a7);
}

uint64_t vpx_sub_pixel_variance32x64_neon()
{
  uint8x16_t *v0;
  int v1;
  __int32 v2;
  __int32 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  int8x8_t v8;
  uint64_t v10;
  uint8x16_t *v11;
  _OWORD *v12;
  uint8x16_t v13;
  uint8x16_t *v14;
  uint8x16_t v15;
  uint8x16_t v16;
  _OWORD *v17;
  _BYTE *v18;
  int v19;
  uint8x16_t v20;
  uint8x16_t v21;
  uint64_t v22;
  char v23;
  char v24;
  _OWORD *v25;
  int v26;
  uint8x16_t v27;
  uint8x16_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint8x16_t v33;
  _OWORD *v34;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x16_t v37;
  _OWORD *v38;
  int v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint8x16_t *v46;
  _OWORD *v47;
  uint8x16_t v48;
  uint64_t v49;
  uint8x16_t v50;
  uint8x16_t *v51;
  uint8x16_t v52;
  uint8x16_t v53;
  int v54;
  uint8x16_t v55;
  uint8x16_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint8x16_t v61;
  uint8x16_t *v62;
  uint8x16_t v63;
  uint8x16_t v64;
  int v65;
  uint8x16_t v66;
  uint8x16_t v67;
  uint64_t v68;
  char v69;
  char v70;
  _OWORD *v71;
  _BYTE *v72;
  int v73;
  uint8x16_t v74;
  uint8x16_t v75;
  uint64_t v76;
  char v77;
  char v78;
  _BYTE v79[2080];
  _OWORD v80[130];
  uint64_t v81;

  v0 = (uint8x16_t *)MEMORY[0x24BDAC7A8]();
  v81 = *MEMORY[0x24BDAC8D0];
  if (v2 == 4)
  {
    if (v3 == 4)
    {
      v45 = 0;
      v46 = (uint8x16_t *)((char *)v0 + 17);
      do
      {
        v47 = &v80[v45];
        v48 = vrhaddq_u8(*(uint8x16_t *)((char *)v46 - 1), *v46);
        *v47 = vrhaddq_u8(*(uint8x16_t *)((char *)v46 - 17), v46[-1]);
        v47[1] = v48;
        v45 += 2;
        v46 = (uint8x16_t *)((char *)v46 + v1);
      }
      while ((_DWORD)(v45 * 16) != 2080);
      v49 = 0;
      v50 = (uint8x16_t)v80[0];
      do
      {
        v51 = (uint8x16_t *)&v79[v49 * 16];
        v52 = (uint8x16_t)v80[v49 + 2];
        v53 = vrhaddq_u8((uint8x16_t)v80[v49 + 1], (uint8x16_t)v80[v49 + 3]);
        *v51 = vrhaddq_u8(v50, v52);
        v51[1] = v53;
        v49 += 2;
        v50 = v52;
      }
      while ((_DWORD)(v49 * 16) != 2048);
    }
    else
    {
      v10 = 0;
      v11 = (uint8x16_t *)((char *)v0 + 17);
      if (!v3)
      {
        do
        {
          v12 = &v80[v10];
          v13 = vrhaddq_u8(*(uint8x16_t *)((char *)v11 - 1), *v11);
          *v12 = vrhaddq_u8(*(uint8x16_t *)((char *)v11 - 17), v11[-1]);
          v12[1] = v13;
          v10 += 2;
          v11 = (uint8x16_t *)((char *)v11 + v1);
        }
        while ((_DWORD)(v10 * 16) != 2048);
        return ((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance32x64)(v80, 32, v4, v5, v6);
      }
      do
      {
        v14 = (uint8x16_t *)&v80[v10];
        v15 = vrhaddq_u8(*(uint8x16_t *)((char *)v11 - 17), v11[-1]);
        v16 = vrhaddq_u8(*(uint8x16_t *)((char *)v11 - 1), *v11);
        *v14 = v15;
        v14[1] = v16;
        v10 += 2;
        v11 = (uint8x16_t *)((char *)v11 + v1);
      }
      while ((_DWORD)(v10 * 16) != 2080);
      v15.i32[0] = 8 - v3;
      v16.i32[0] = v3;
      v17 = v80;
      v18 = v79;
      v19 = 64;
      v20 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v15.i8, 0);
      v21 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v16.i8, 0);
      do
      {
        v22 = 0;
        v23 = 1;
        do
        {
          v24 = v23;
          *(int8x16_t *)&v18[v22 * 16] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v17[v22 + 2], *(uint8x8_t *)v21.i8), *(uint8x8_t *)&v17[v22], *(uint8x8_t *)v20.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v17[v22 + 2], v21), (uint8x16_t)v17[v22], v20), 3uLL);
          v22 = 1;
          v23 = 0;
        }
        while ((v24 & 1) != 0);
        v17 += 2;
        v18 += 32;
        --v19;
      }
      while (v19);
    }
  }
  else
  {
    if (!v2)
    {
      if (v3 == 4)
      {
        v32 = 0;
        v33 = *v0;
        do
        {
          v34 = &v80[v32];
          v35 = v0[1];
          v0 = (uint8x16_t *)((char *)v0 + v1);
          v36 = *v0;
          v37 = vrhaddq_u8(v35, v0[1]);
          *v34 = vrhaddq_u8(v33, *v0);
          v34[1] = v37;
          v32 += 2;
          v33 = v36;
        }
        while ((_DWORD)(v32 * 16) != 2048);
      }
      else
      {
        if (!v3)
          return vpx_variance32x64(v0);
        v7.i32[0] = 8 - v3;
        v8.i32[0] = v3;
        v38 = v80;
        v39 = 64;
        v40 = (uint8x16_t)vdupq_lane_s8(v7, 0);
        v41 = (uint8x16_t)vdupq_lane_s8(v8, 0);
        do
        {
          v42 = 0;
          v43 = 1;
          do
          {
            v44 = v43;
            v38[v42] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v0[v42].i8[v1], *(uint8x8_t *)v41.i8), *(uint8x8_t *)v0[v42].i8, *(uint8x8_t *)v40.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v42] + v1), v41), v0[v42], v40), 3uLL);
            v42 = 1;
            v43 = 0;
          }
          while ((v44 & 1) != 0);
          v0 = (uint8x16_t *)((char *)v0 + v1);
          v38 += 2;
          --v39;
        }
        while (v39);
      }
      return ((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance32x64)(v80, 32, v4, v5, v6);
    }
    v7.i32[0] = 8 - v2;
    v8.i32[0] = v2;
    v25 = v80;
    if (v3 == 4)
    {
      v54 = 65;
      v55 = (uint8x16_t)vdupq_lane_s8(v7, 0);
      v56 = (uint8x16_t)vdupq_lane_s8(v8, 0);
      do
      {
        v57 = 0;
        v58 = 1;
        do
        {
          v59 = v58;
          v25[v57] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v0[v57].i8[1], *(uint8x8_t *)v56.i8), *(uint8x8_t *)v0[v57].i8, *(uint8x8_t *)v55.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v57] + 1), v56), v0[v57], v55), 3uLL);
          v57 = 1;
          v58 = 0;
        }
        while ((v59 & 1) != 0);
        v0 = (uint8x16_t *)((char *)v0 + v1);
        v25 += 2;
        --v54;
      }
      while (v54);
      v60 = 0;
      v61 = (uint8x16_t)v80[0];
      do
      {
        v62 = (uint8x16_t *)&v79[v60 * 16];
        v63 = (uint8x16_t)v80[v60 + 2];
        v64 = vrhaddq_u8((uint8x16_t)v80[v60 + 1], (uint8x16_t)v80[v60 + 3]);
        *v62 = vrhaddq_u8(v61, v63);
        v62[1] = v64;
        v60 += 2;
        v61 = v63;
      }
      while ((_DWORD)(v60 * 16) != 2048);
    }
    else
    {
      if (!v3)
      {
        v26 = 64;
        v27 = (uint8x16_t)vdupq_lane_s8(v7, 0);
        v28 = (uint8x16_t)vdupq_lane_s8(v8, 0);
        do
        {
          v29 = 0;
          v30 = 1;
          do
          {
            v31 = v30;
            v25[v29] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v0[v29].i8[1], *(uint8x8_t *)v28.i8), *(uint8x8_t *)v0[v29].i8, *(uint8x8_t *)v27.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v29] + 1), v28), v0[v29], v27), 3uLL);
            v29 = 1;
            v30 = 0;
          }
          while ((v31 & 1) != 0);
          v0 = (uint8x16_t *)((char *)v0 + v1);
          v25 += 2;
          --v26;
        }
        while (v26);
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance32x64)(v80, 32, v4, v5, v6);
      }
      v65 = 65;
      v66 = (uint8x16_t)vdupq_lane_s8(v7, 0);
      v67 = (uint8x16_t)vdupq_lane_s8(v8, 0);
      do
      {
        v68 = 0;
        v69 = 1;
        do
        {
          v70 = v69;
          v25[v68] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v0[v68].i8[1], *(uint8x8_t *)v67.i8), *(uint8x8_t *)v0[v68].i8, *(uint8x8_t *)v66.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v68] + 1), v67), v0[v68], v66), 3uLL);
          v68 = 1;
          v69 = 0;
        }
        while ((v70 & 1) != 0);
        v0 = (uint8x16_t *)((char *)v0 + v1);
        v25 += 2;
        --v65;
      }
      while (v65);
      v66.i32[0] = 8 - v3;
      v67.i32[0] = v3;
      v71 = v80;
      v72 = v79;
      v73 = 64;
      v74 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v66.i8, 0);
      v75 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v67.i8, 0);
      do
      {
        v76 = 0;
        v77 = 1;
        do
        {
          v78 = v77;
          *(int8x16_t *)&v72[v76 * 16] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v71[v76 + 2], *(uint8x8_t *)v75.i8), *(uint8x8_t *)&v71[v76], *(uint8x8_t *)v74.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v71[v76 + 2], v75), (uint8x16_t)v71[v76], v74), 3uLL);
          v76 = 1;
          v77 = 0;
        }
        while ((v78 & 1) != 0);
        v71 += 2;
        v72 += 32;
        --v73;
      }
      while (v73);
    }
  }
  return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance32x64)(v79, 32, v4, v5, v6);
}

uint64_t vpx_sub_pixel_variance64x32_neon()
{
  _OWORD *v0;
  int v1;
  __int32 v2;
  __int32 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  int8x8_t v8;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint8x16_t v13;
  uint8x16_t v14;
  _OWORD *v15;
  uint8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  _OWORD *v19;
  _BYTE *v20;
  int v21;
  uint8x16_t v22;
  uint8x16_t v23;
  unint64_t v24;
  BOOL v25;
  _OWORD *v26;
  int v27;
  uint8x16_t v28;
  uint8x16_t v29;
  unint64_t v30;
  uint64_t v31;
  uint8x16_t *v32;
  uint8x16_t v33;
  uint8x16_t v34;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  uint8x16_t v39;
  _OWORD *v40;
  uint8x16_t v41;
  char *v42;
  _OWORD *v43;
  int v44;
  uint8x16_t v45;
  uint8x16_t v46;
  unint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint64_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  uint8x16_t v56;
  uint8x16_t v57;
  uint8x16_t *v58;
  uint8x16_t v59;
  int v60;
  uint8x16_t v61;
  uint8x16_t v62;
  unint64_t v63;
  uint64_t v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  uint8x16_t v68;
  uint8x16_t *v69;
  uint8x16_t v70;
  int v71;
  uint8x16_t v72;
  uint8x16_t v73;
  unint64_t v74;
  _OWORD *v75;
  _BYTE *v76;
  int v77;
  uint8x16_t v78;
  uint8x16_t v79;
  unint64_t v80;
  _BYTE v81[2112];
  _OWORD v82[132];
  uint64_t v83;

  v0 = (_OWORD *)MEMORY[0x24BDAC7A8]();
  v83 = *MEMORY[0x24BDAC8D0];
  if (v2 == 4)
  {
    if (v3 == 4)
    {
      v48 = 0;
      v49 = v0 + 2;
      do
      {
        v50 = &v82[v48];
        v51 = vrhaddq_u8(*((uint8x16_t *)v49 - 1), *(uint8x16_t *)((char *)v49 - 15));
        *v50 = vrhaddq_u8(*((uint8x16_t *)v49 - 2), *(uint8x16_t *)((char *)v49 - 31));
        v50[1] = v51;
        v52 = vrhaddq_u8(*((uint8x16_t *)v49 + 1), *(uint8x16_t *)((char *)v49 + 17));
        v50[2] = vrhaddq_u8(*(uint8x16_t *)v49, *(uint8x16_t *)((char *)v49 + 1));
        v50[3] = v52;
        v48 += 4;
        v49 = (_OWORD *)((char *)v49 + v1);
      }
      while ((_DWORD)(v48 * 16) != 2112);
      v53 = 0;
      v54 = (uint8x16_t)v82[0];
      do
      {
        v55 = (uint8x16_t)v82[v53 + 4];
        v56 = (uint8x16_t)v82[v53 + 2];
        v57 = vrhaddq_u8((uint8x16_t)v82[v53 + 1], (uint8x16_t)v82[v53 + 5]);
        v58 = (uint8x16_t *)&v81[v53 * 16];
        *v58 = vrhaddq_u8(v54, v55);
        v58[1] = v57;
        v59 = vrhaddq_u8((uint8x16_t)v82[v53 + 3], (uint8x16_t)v82[v53 + 7]);
        v58[2] = vrhaddq_u8(v56, (uint8x16_t)v82[v53 + 6]);
        v58[3] = v59;
        v53 += 4;
        v54 = v55;
      }
      while ((_DWORD)(v53 * 16) != 2048);
    }
    else
    {
      v10 = 0;
      v11 = v0 + 2;
      if (!v3)
      {
        do
        {
          v12 = &v82[v10];
          v13 = vrhaddq_u8(*((uint8x16_t *)v11 - 1), *(uint8x16_t *)((char *)v11 - 15));
          *v12 = vrhaddq_u8(*((uint8x16_t *)v11 - 2), *(uint8x16_t *)((char *)v11 - 31));
          v12[1] = v13;
          v14 = vrhaddq_u8(*((uint8x16_t *)v11 + 1), *(uint8x16_t *)((char *)v11 + 17));
          v12[2] = vrhaddq_u8(*(uint8x16_t *)v11, *(uint8x16_t *)((char *)v11 + 1));
          v12[3] = v14;
          v10 += 4;
          v11 = (_OWORD *)((char *)v11 + v1);
        }
        while ((_DWORD)(v10 * 16) != 2048);
        return ((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance64x32)(v82, 64, v4, v5, v6);
      }
      do
      {
        v15 = &v82[v10];
        v16 = vrhaddq_u8(*((uint8x16_t *)v11 - 1), *(uint8x16_t *)((char *)v11 - 15));
        *v15 = vrhaddq_u8(*((uint8x16_t *)v11 - 2), *(uint8x16_t *)((char *)v11 - 31));
        v15[1] = v16;
        v17 = vrhaddq_u8(*(uint8x16_t *)v11, *(uint8x16_t *)((char *)v11 + 1));
        v18 = vrhaddq_u8(*((uint8x16_t *)v11 + 1), *(uint8x16_t *)((char *)v11 + 17));
        v15[2] = v17;
        v15[3] = v18;
        v10 += 4;
        v11 = (_OWORD *)((char *)v11 + v1);
      }
      while ((_DWORD)(v10 * 16) != 2112);
      v17.i32[0] = 8 - v3;
      v18.i32[0] = v3;
      v19 = v82;
      v20 = v81;
      v21 = 32;
      v22 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v17.i8, 0);
      v23 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v18.i8, 0);
      do
      {
        v24 = 0;
        do
        {
          *(int8x16_t *)&v20[v24 * 16] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v19[v24 + 4], *(uint8x8_t *)v23.i8), *(uint8x8_t *)&v19[v24], *(uint8x8_t *)v22.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v19[v24 + 4], v23), (uint8x16_t)v19[v24], v22), 3uLL);
          v25 = v24++ >= 3;
        }
        while (!v25);
        v19 += 4;
        v20 += 64;
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    if (!v2)
    {
      if (v3 == 4)
      {
        v31 = 0;
        v33 = *(uint8x16_t *)v0;
        v32 = (uint8x16_t *)(v0 + 2);
        v34 = v33;
        do
        {
          v35 = v32[-1];
          v36 = *v32;
          v37 = v32[1];
          v32 = (uint8x16_t *)((char *)v32 + v1);
          v38 = v32[-2];
          v39 = v32[-1];
          v40 = &v82[v31];
          *v40 = vrhaddq_u8(v34, v38);
          v40[1] = vrhaddq_u8(v35, v39);
          v41 = vrhaddq_u8(v37, v32[1]);
          v40[2] = vrhaddq_u8(v36, *v32);
          v40[3] = v41;
          v31 += 4;
          v34 = v38;
        }
        while ((_DWORD)(v31 * 16) != 2048);
      }
      else
      {
        if (!v3)
          return vpx_variance64x32(v0);
        v7.i32[0] = 8 - v3;
        v8.i32[0] = v3;
        v42 = (char *)v0 + v1;
        v43 = v82;
        v44 = 32;
        v45 = (uint8x16_t)vdupq_lane_s8(v7, 0);
        v46 = (uint8x16_t)vdupq_lane_s8(v8, 0);
        do
        {
          v47 = 0;
          do
          {
            v43[v47] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v42[v47 * 16], *(uint8x8_t *)v46.i8), *(uint8x8_t *)&v0[v47], *(uint8x8_t *)v45.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)&v42[v47 * 16], v46), (uint8x16_t)v0[v47], v45), 3uLL);
            v25 = v47++ >= 3;
          }
          while (!v25);
          v0 = (_OWORD *)((char *)v0 + v1);
          v43 += 4;
          v42 += v1;
          --v44;
        }
        while (v44);
      }
      return ((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance64x32)(v82, 64, v4, v5, v6);
    }
    v7.i32[0] = 8 - v2;
    v8.i32[0] = v2;
    v26 = v82;
    if (v3 == 4)
    {
      v60 = 33;
      v61 = (uint8x16_t)vdupq_lane_s8(v7, 0);
      v62 = (uint8x16_t)vdupq_lane_s8(v8, 0);
      do
      {
        v63 = 0;
        do
        {
          v26[v63] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)&v0[v63] + 1), *(uint8x8_t *)v62.i8), *(uint8x8_t *)&v0[v63], *(uint8x8_t *)v61.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v63] + 1), v62), (uint8x16_t)v0[v63], v61), 3uLL);
          v25 = v63++ >= 3;
        }
        while (!v25);
        v0 = (_OWORD *)((char *)v0 + v1);
        v26 += 4;
        --v60;
      }
      while (v60);
      v64 = 0;
      v65 = (uint8x16_t)v82[0];
      do
      {
        v66 = (uint8x16_t)v82[v64 + 4];
        v67 = (uint8x16_t)v82[v64 + 2];
        v68 = vrhaddq_u8((uint8x16_t)v82[v64 + 1], (uint8x16_t)v82[v64 + 5]);
        v69 = (uint8x16_t *)&v81[v64 * 16];
        *v69 = vrhaddq_u8(v65, v66);
        v69[1] = v68;
        v70 = vrhaddq_u8((uint8x16_t)v82[v64 + 3], (uint8x16_t)v82[v64 + 7]);
        v69[2] = vrhaddq_u8(v67, (uint8x16_t)v82[v64 + 6]);
        v69[3] = v70;
        v64 += 4;
        v65 = v66;
      }
      while ((_DWORD)(v64 * 16) != 2048);
    }
    else
    {
      if (!v3)
      {
        v27 = 32;
        v28 = (uint8x16_t)vdupq_lane_s8(v7, 0);
        v29 = (uint8x16_t)vdupq_lane_s8(v8, 0);
        do
        {
          v30 = 0;
          do
          {
            v26[v30] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)&v0[v30] + 1), *(uint8x8_t *)v29.i8), *(uint8x8_t *)&v0[v30], *(uint8x8_t *)v28.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v30] + 1), v29), (uint8x16_t)v0[v30], v28), 3uLL);
            v25 = v30++ >= 3;
          }
          while (!v25);
          v0 = (_OWORD *)((char *)v0 + v1);
          v26 += 4;
          --v27;
        }
        while (v27);
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance64x32)(v82, 64, v4, v5, v6);
      }
      v71 = 33;
      v72 = (uint8x16_t)vdupq_lane_s8(v7, 0);
      v73 = (uint8x16_t)vdupq_lane_s8(v8, 0);
      do
      {
        v74 = 0;
        do
        {
          v26[v74] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)&v0[v74] + 1), *(uint8x8_t *)v73.i8), *(uint8x8_t *)&v0[v74], *(uint8x8_t *)v72.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v74] + 1), v73), (uint8x16_t)v0[v74], v72), 3uLL);
          v25 = v74++ >= 3;
        }
        while (!v25);
        v0 = (_OWORD *)((char *)v0 + v1);
        v26 += 4;
        --v71;
      }
      while (v71);
      v72.i32[0] = 8 - v3;
      v73.i32[0] = v3;
      v75 = v82;
      v76 = v81;
      v77 = 32;
      v78 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v72.i8, 0);
      v79 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v73.i8, 0);
      do
      {
        v80 = 0;
        do
        {
          *(int8x16_t *)&v76[v80 * 16] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v75[v80 + 4], *(uint8x8_t *)v79.i8), *(uint8x8_t *)&v75[v80], *(uint8x8_t *)v78.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v75[v80 + 4], v79), (uint8x16_t)v75[v80], v78), 3uLL);
          v25 = v80++ >= 3;
        }
        while (!v25);
        v75 += 4;
        v76 += 64;
        --v77;
      }
      while (v77);
    }
  }
  return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance64x32)(v81, 64, v4, v5, v6);
}

uint64_t vpx_sub_pixel_variance64x64_neon()
{
  _OWORD *v0;
  int v1;
  __int32 v2;
  __int32 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x8_t v7;
  int8x8_t v8;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint8x16_t v13;
  uint8x16_t v14;
  _OWORD *v15;
  int v16;
  uint8x16_t v17;
  uint8x16_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint8x16_t *v22;
  uint8x16_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  _OWORD *v30;
  uint8x16_t v31;
  char *v32;
  _OWORD *v33;
  int v34;
  uint8x16_t v35;
  uint8x16_t v36;
  unint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  int v40;
  uint8x16_t v41;
  uint8x16_t v42;
  uint64_t v43;
  uint8x16_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint8x16_t *v48;
  uint8x16_t v49;
  _OWORD *v50;
  _OWORD *v51;
  int v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  _OWORD *v56;
  char *v57;
  int v58;
  uint8x16_t v59;
  uint8x16_t v60;
  unint64_t v61;
  int v62;
  uint8x16_t v63;
  uint8x16_t v64;
  unint64_t v65;
  uint64_t v66;
  uint8x16_t v67;
  uint8x16_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t *v71;
  uint8x16_t v72;
  int v73;
  uint8x16_t v74;
  uint8x16_t v75;
  unint64_t v76;
  _OWORD *v77;
  char *v78;
  int v79;
  uint8x16_t v80;
  uint8x16_t v81;
  unint64_t v82;
  char v83;
  _OWORD v84[260];
  uint64_t v85;

  v0 = (_OWORD *)MEMORY[0x24BDAC7A8]();
  v85 = *MEMORY[0x24BDAC8D0];
  if (v2 == 4)
  {
    if (v3 == 4)
    {
      v38 = v0 + 2;
      v39 = v84;
      v40 = -65;
      do
      {
        v41 = vrhaddq_u8(*((uint8x16_t *)v38 - 1), *(uint8x16_t *)((char *)v38 - 15));
        *v39 = vrhaddq_u8(*((uint8x16_t *)v38 - 2), *(uint8x16_t *)((char *)v38 - 31));
        v39[1] = v41;
        v42 = vrhaddq_u8(*((uint8x16_t *)v38 + 1), *(uint8x16_t *)((char *)v38 + 17));
        v39[2] = vrhaddq_u8(*(uint8x16_t *)v38, *(uint8x16_t *)((char *)v38 + 1));
        v39[3] = v42;
        v39 += 4;
        v38 = (_OWORD *)((char *)v38 + v1);
        v20 = __CFADD__(v40++, 1);
      }
      while (!v20);
      v43 = 0;
      v44 = (uint8x16_t)v84[0];
      do
      {
        v45 = (uint8x16_t)v84[v43 + 4];
        v46 = (uint8x16_t)v84[v43 + 2];
        v47 = vrhaddq_u8((uint8x16_t)v84[v43 + 1], (uint8x16_t)v84[v43 + 5]);
        v48 = (uint8x16_t *)(&v83 + v43 * 16);
        *v48 = vrhaddq_u8(v44, v45);
        v48[1] = v47;
        v49 = vrhaddq_u8((uint8x16_t)v84[v43 + 3], (uint8x16_t)v84[v43 + 7]);
        v48[2] = vrhaddq_u8(v46, (uint8x16_t)v84[v43 + 6]);
        v48[3] = v49;
        v43 += 4;
        v44 = v45;
      }
      while ((_DWORD)(v43 * 16) != 4096);
    }
    else
    {
      if (!v3)
      {
        v10 = 0;
        v11 = v0 + 2;
        do
        {
          v12 = &v84[v10];
          v13 = vrhaddq_u8(*((uint8x16_t *)v11 - 1), *(uint8x16_t *)((char *)v11 - 15));
          *v12 = vrhaddq_u8(*((uint8x16_t *)v11 - 2), *(uint8x16_t *)((char *)v11 - 31));
          v12[1] = v13;
          v14 = vrhaddq_u8(*((uint8x16_t *)v11 + 1), *(uint8x16_t *)((char *)v11 + 17));
          v12[2] = vrhaddq_u8(*(uint8x16_t *)v11, *(uint8x16_t *)((char *)v11 + 1));
          v12[3] = v14;
          v10 += 4;
          v11 = (_OWORD *)((char *)v11 + v1);
        }
        while ((_DWORD)(v10 * 16) != 4096);
        return ((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance64x64)(v84, 64, v4, v5, v6);
      }
      v50 = v0 + 2;
      v51 = v84;
      v52 = -65;
      do
      {
        v53 = vrhaddq_u8(*((uint8x16_t *)v50 - 1), *(uint8x16_t *)((char *)v50 - 15));
        *v51 = vrhaddq_u8(*((uint8x16_t *)v50 - 2), *(uint8x16_t *)((char *)v50 - 31));
        v51[1] = v53;
        v54 = vrhaddq_u8(*(uint8x16_t *)v50, *(uint8x16_t *)((char *)v50 + 1));
        v55 = vrhaddq_u8(*((uint8x16_t *)v50 + 1), *(uint8x16_t *)((char *)v50 + 17));
        v51[2] = v54;
        v51[3] = v55;
        v51 += 4;
        v50 = (_OWORD *)((char *)v50 + v1);
        v20 = __CFADD__(v52++, 1);
      }
      while (!v20);
      v54.i32[0] = 8 - v3;
      v55.i32[0] = v3;
      v56 = v84;
      v57 = &v83;
      v58 = 64;
      v59 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v54.i8, 0);
      v60 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v55.i8, 0);
      do
      {
        v61 = 0;
        do
        {
          *(int8x16_t *)&v57[v61 * 16] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v56[v61 + 4], *(uint8x8_t *)v60.i8), *(uint8x8_t *)&v56[v61], *(uint8x8_t *)v59.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v56[v61 + 4], v60), (uint8x16_t)v56[v61], v59), 3uLL);
          v20 = v61++ >= 3;
        }
        while (!v20);
        v56 += 4;
        v57 += 64;
        --v58;
      }
      while (v58);
    }
  }
  else
  {
    if (!v2)
    {
      if (v3 == 4)
      {
        v21 = 0;
        v23 = *(uint8x16_t *)v0;
        v22 = (uint8x16_t *)(v0 + 2);
        v24 = v23;
        do
        {
          v25 = v22[-1];
          v26 = *v22;
          v27 = v22[1];
          v22 = (uint8x16_t *)((char *)v22 + v1);
          v28 = v22[-2];
          v29 = v22[-1];
          v30 = &v84[v21];
          *v30 = vrhaddq_u8(v24, v28);
          v30[1] = vrhaddq_u8(v25, v29);
          v31 = vrhaddq_u8(v27, v22[1]);
          v30[2] = vrhaddq_u8(v26, *v22);
          v30[3] = v31;
          v21 += 4;
          v24 = v28;
        }
        while ((_DWORD)(v21 * 16) != 4096);
      }
      else
      {
        if (!v3)
          return vpx_variance64x64(v0);
        v7.i32[0] = 8 - v3;
        v8.i32[0] = v3;
        v32 = (char *)v0 + v1;
        v33 = v84;
        v34 = 64;
        v35 = (uint8x16_t)vdupq_lane_s8(v7, 0);
        v36 = (uint8x16_t)vdupq_lane_s8(v8, 0);
        do
        {
          v37 = 0;
          do
          {
            v33[v37] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v32[v37 * 16], *(uint8x8_t *)v36.i8), *(uint8x8_t *)&v0[v37], *(uint8x8_t *)v35.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)&v32[v37 * 16], v36), (uint8x16_t)v0[v37], v35), 3uLL);
            v20 = v37++ >= 3;
          }
          while (!v20);
          v0 = (_OWORD *)((char *)v0 + v1);
          v33 += 4;
          v32 += v1;
          --v34;
        }
        while (v34);
      }
      return ((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance64x64)(v84, 64, v4, v5, v6);
    }
    v7.i32[0] = 8 - v2;
    v8.i32[0] = v2;
    v15 = v84;
    if (v3 == 4)
    {
      v62 = 65;
      v63 = (uint8x16_t)vdupq_lane_s8(v7, 0);
      v64 = (uint8x16_t)vdupq_lane_s8(v8, 0);
      do
      {
        v65 = 0;
        do
        {
          v15[v65] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)&v0[v65] + 1), *(uint8x8_t *)v64.i8), *(uint8x8_t *)&v0[v65], *(uint8x8_t *)v63.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v65] + 1), v64), (uint8x16_t)v0[v65], v63), 3uLL);
          v20 = v65++ >= 3;
        }
        while (!v20);
        v0 = (_OWORD *)((char *)v0 + v1);
        v15 += 4;
        --v62;
      }
      while (v62);
      v66 = 0;
      v67 = (uint8x16_t)v84[0];
      do
      {
        v68 = (uint8x16_t)v84[v66 + 4];
        v69 = (uint8x16_t)v84[v66 + 2];
        v70 = vrhaddq_u8((uint8x16_t)v84[v66 + 1], (uint8x16_t)v84[v66 + 5]);
        v71 = (uint8x16_t *)(&v83 + v66 * 16);
        *v71 = vrhaddq_u8(v67, v68);
        v71[1] = v70;
        v72 = vrhaddq_u8((uint8x16_t)v84[v66 + 3], (uint8x16_t)v84[v66 + 7]);
        v71[2] = vrhaddq_u8(v69, (uint8x16_t)v84[v66 + 6]);
        v71[3] = v72;
        v66 += 4;
        v67 = v68;
      }
      while ((_DWORD)(v66 * 16) != 4096);
    }
    else
    {
      if (!v3)
      {
        v16 = 64;
        v17 = (uint8x16_t)vdupq_lane_s8(v7, 0);
        v18 = (uint8x16_t)vdupq_lane_s8(v8, 0);
        do
        {
          v19 = 0;
          do
          {
            v15[v19] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)&v0[v19] + 1), *(uint8x8_t *)v18.i8), *(uint8x8_t *)&v0[v19], *(uint8x8_t *)v17.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v19] + 1), v18), (uint8x16_t)v0[v19], v17), 3uLL);
            v20 = v19++ >= 3;
          }
          while (!v20);
          v0 = (_OWORD *)((char *)v0 + v1);
          v15 += 4;
          --v16;
        }
        while (v16);
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance64x64)(v84, 64, v4, v5, v6);
      }
      v73 = 65;
      v74 = (uint8x16_t)vdupq_lane_s8(v7, 0);
      v75 = (uint8x16_t)vdupq_lane_s8(v8, 0);
      do
      {
        v76 = 0;
        do
        {
          v15[v76] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)&v0[v76] + 1), *(uint8x8_t *)v75.i8), *(uint8x8_t *)&v0[v76], *(uint8x8_t *)v74.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v76] + 1), v75), (uint8x16_t)v0[v76], v74), 3uLL);
          v20 = v76++ >= 3;
        }
        while (!v20);
        v0 = (_OWORD *)((char *)v0 + v1);
        v15 += 4;
        --v73;
      }
      while (v73);
      v74.i32[0] = 8 - v3;
      v75.i32[0] = v3;
      v77 = v84;
      v78 = &v83;
      v79 = 64;
      v80 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v74.i8, 0);
      v81 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v75.i8, 0);
      do
      {
        v82 = 0;
        do
        {
          *(int8x16_t *)&v78[v82 * 16] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v77[v82 + 4], *(uint8x8_t *)v81.i8), *(uint8x8_t *)&v77[v82], *(uint8x8_t *)v80.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v77[v82 + 4], v81), (uint8x16_t)v77[v82], v80), 3uLL);
          v20 = v82++ >= 3;
        }
        while (!v20);
        v77 += 4;
        v78 += 64;
        --v79;
      }
      while (v79);
    }
  }
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance64x64)(&v83, 64, v4, v5, v6);
}

uint64_t vpx_sub_pixel_avg_variance4x4_neon(__int32 *a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint8x8_t *a8)
{
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  char *v12;
  uint8x8_t v13;
  int8x8_t v14;
  __int32 *v15;
  uint8x8_t v16;
  int16x8_t v17;
  uint8x8_t v18;
  int16x8_t v19;
  uint8x8_t v20;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  _QWORD v25[3];

  v8 = (uint8x8_t)vdup_n_s8(8 - a3);
  v9 = (uint8x8_t)vdup_n_s8(a3);
  v25[2] = *MEMORY[0x24BDAC8D0];
  v10.i32[0] = *a1;
  v10.i32[1] = *(__int32 *)((char *)a1 + a2);
  v11 = 2 * a2;
  v12 = (char *)a1 + v11;
  v13.i32[0] = *(__int32 *)((char *)a1 + 1);
  v13.i32[1] = *(__int32 *)((char *)a1 + a2 + 1);
  v14 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v13, v9), v10, v8), 3uLL);
  v13.i32[0] = *(__int32 *)((char *)a1 + v11);
  v13.i32[1] = *(__int32 *)((char *)a1 + v11 + a2);
  v15 = (__int32 *)((char *)a1 + v11 + v11);
  v16.i32[0] = *(_DWORD *)(v12 + 1);
  v16.i32[1] = *(_DWORD *)&v12[a2 + 1];
  v17 = (int16x8_t)vmlal_u8(vmull_u8(v16, v9), v13, v8);
  v13.i32[0] = *v15;
  v13.i32[1] = *(__int32 *)((char *)v15 + a2);
  *(int8x8_t *)v17.i8 = vrshrn_n_s16(v17, 3uLL);
  v18.i32[0] = *(__int32 *)((char *)v15 + 1);
  v18.i32[1] = *(__int32 *)((char *)v15 + a2 + 1);
  v19 = (int16x8_t)vmlal_u8(vmull_u8(v18, v9), v13, v8);
  v20 = (uint8x8_t)vdup_n_s8(8 - a4);
  v21 = (uint8x8_t)vdup_n_s8(a4);
  v22 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v14, *(int8x8_t *)v17.i8, 4uLL), v21), (uint8x8_t)v14, v20), 3uLL), *a8);
  v23 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v17.i8, vrshrn_n_s16(v19, 3uLL), 4uLL), v21), *(uint8x8_t *)v17.i8, v20), 3uLL), a8[1]);
  v25[0] = v22;
  v25[1] = v23;
  return vpx_variance4x4(v25, 4, a5, a6, a7);
}

uint64_t vpx_sub_pixel_avg_variance4x8_neon(__int32 *a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint8x8_t *a8)
{
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint8x8_t v12;
  int8x8_t v13;
  __int32 *v14;
  uint8x8_t v15;
  int8x8_t v16;
  char *v17;
  uint8x8_t v18;
  int16x8_t v19;
  __int32 *v20;
  uint8x8_t v21;
  int16x8_t v22;
  uint8x8_t v23;
  uint16x8_t v24;
  uint8x8_t v25;
  int16x8_t v26;
  uint8x8_t v27;
  uint8x8_t v28;
  int16x8_t v29;
  int8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  _QWORD v34[5];

  v8 = (uint8x8_t)vdup_n_s8(8 - a3);
  v9 = (uint8x8_t)vdup_n_s8(a3);
  v34[4] = *MEMORY[0x24BDAC8D0];
  v10.i32[0] = *a1;
  v10.i32[1] = *(__int32 *)((char *)a1 + a2);
  v11 = 2 * a2;
  v12.i32[0] = *(__int32 *)((char *)a1 + 1);
  v12.i32[1] = *(__int32 *)((char *)a1 + a2 + 1);
  v13 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v12, v9), v10, v8), 3uLL);
  v12.i32[0] = *(__int32 *)((char *)a1 + v11);
  v12.i32[1] = *(__int32 *)((char *)a1 + v11 + a2);
  v14 = (__int32 *)((char *)a1 + v11 + v11);
  v15.i32[0] = *(__int32 *)((char *)a1 + v11 + 1);
  v15.i32[1] = *(__int32 *)((char *)a1 + v11 + a2 + 1);
  v16 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v15, v9), v12, v8), 3uLL);
  v15.i32[0] = *v14;
  v15.i32[1] = *(__int32 *)((char *)v14 + a2);
  v17 = (char *)v14 + v11;
  v18.i32[0] = *(__int32 *)((char *)v14 + 1);
  v18.i32[1] = *(__int32 *)((char *)v14 + a2 + 1);
  v19 = (int16x8_t)vmlal_u8(vmull_u8(v18, v9), v15, v8);
  v15.i32[0] = *(__int32 *)((char *)v14 + v11);
  v15.i32[1] = *(__int32 *)((char *)v14 + v11 + a2);
  *(int8x8_t *)v19.i8 = vrshrn_n_s16(v19, 3uLL);
  v20 = (__int32 *)((char *)v14 + v11 + v11);
  v21.i32[0] = *(_DWORD *)(v17 + 1);
  v21.i32[1] = *(_DWORD *)&v17[a2 + 1];
  v22 = (int16x8_t)vmlal_u8(vmull_u8(v21, v9), v15, v8);
  v15.i32[0] = *v20;
  v15.i32[1] = *(__int32 *)((char *)v20 + a2);
  v23.i32[0] = *(__int32 *)((char *)v20 + 1);
  v23.i32[1] = *(__int32 *)((char *)v20 + a2 + 1);
  v24 = vmull_u8(v23, v9);
  v25 = (uint8x8_t)vdup_n_s8(8 - a4);
  v26 = (int16x8_t)vmlal_u8(v24, v15, v8);
  v27 = (uint8x8_t)vdup_n_s8(a4);
  v28 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v13, v16, 4uLL), v27), (uint8x8_t)v13, v25), 3uLL), *a8);
  v29 = (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v16, *(int8x8_t *)v19.i8, 4uLL), v27), (uint8x8_t)v16, v25);
  v30 = vrshrn_n_s16(v22, 3uLL);
  *(uint8x8_t *)v29.i8 = vrhadd_u8((uint8x8_t)vrshrn_n_s16(v29, 3uLL), a8[1]);
  v34[0] = v28;
  v34[1] = v29.i64[0];
  v31 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(*(int8x8_t *)v19.i8, v30, 4uLL), v27), *(uint8x8_t *)v19.i8, v25), 3uLL);
  v32 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vext_s8(v30, vrshrn_n_s16(v26, 3uLL), 4uLL), v27), (uint8x8_t)v30, v25), 3uLL), a8[3]);
  v34[2] = vrhadd_u8(v31, a8[2]);
  v34[3] = v32;
  return vpx_variance4x8(v34, 4, a5, a6, a7);
}

uint64_t vpx_sub_pixel_avg_variance8x4_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint8x8_t *a8)
{
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint8x8_t v14;
  uint64_t v15;
  int16x8_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  int16x8_t v19;
  uint8x8_t v20;
  int16x8_t v21;
  uint8x8_t v22;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x24BDAC8D0];
  v8 = (uint8x8_t)vdup_n_s8(8 - a3);
  v9 = (uint8x8_t)vdup_n_s8(a3);
  v10 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + 1), v9), *(uint8x8_t *)a1, v8), 3uLL);
  v11 = a1 + a2;
  v12 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v11 + 1), v9), *(uint8x8_t *)v11, v8), 3uLL);
  v13 = v11 + a2;
  v14 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v13 + 1), v9), *(uint8x8_t *)v13, v8), 3uLL);
  v15 = v13 + a2;
  v16 = (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v15 + 1), v9), *(uint8x8_t *)v15, v8);
  v17 = (uint8x8_t)vdup_n_s8(8 - a4);
  v18 = (uint8x8_t)vdup_n_s8(a4);
  v19 = (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v15 + a2 + 1), v9), *(uint8x8_t *)(v15 + a2), v8);
  v20 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v12, v18), v10, v17), 3uLL), *a8);
  v21 = (int16x8_t)vmlal_u8(vmull_u8(v14, v18), v12, v17);
  v22 = (uint8x8_t)vrshrn_n_s16(v16, 3uLL);
  *(uint8x8_t *)v21.i8 = vrhadd_u8((uint8x8_t)vrshrn_n_s16(v21, 3uLL), a8[1]);
  v24[0] = v20;
  v24[1] = v21.i64[0];
  *(uint8x8_t *)v19.i8 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16(v19, 3uLL), v18), v22, v17), 3uLL), a8[3]);
  v24[2] = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v22, v18), v14, v17), 3uLL), a8[2]);
  v24[3] = v19.i64[0];
  return vpx_variance8x4(v24, 8, a5, a6, a7);
}

uint64_t vpx_sub_pixel_avg_variance8x8_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint8x8_t *a8)
{
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint8x8_t v14;
  uint64_t v15;
  int16x8_t v16;
  uint64_t v17;
  int16x8_t v18;
  uint64_t v19;
  int16x8_t v20;
  uint64_t v21;
  int16x8_t v22;
  uint64_t v23;
  int16x8_t v24;
  uint8x8_t v25;
  int16x8_t v26;
  uint8x8_t v27;
  uint8x8_t v28;
  int16x8_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  uint8x8_t v33;
  uint8x8_t v34;
  uint8x8_t v35;
  _QWORD v37[9];

  v37[8] = *MEMORY[0x24BDAC8D0];
  v8 = (uint8x8_t)vdup_n_s8(8 - a3);
  v9 = (uint8x8_t)vdup_n_s8(a3);
  v10 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + 1), v9), *(uint8x8_t *)a1, v8), 3uLL);
  v11 = a1 + a2;
  v12 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v11 + 1), v9), *(uint8x8_t *)v11, v8), 3uLL);
  v13 = v11 + a2;
  v14 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v13 + 1), v9), *(uint8x8_t *)v13, v8), 3uLL);
  v15 = v13 + a2;
  v16 = (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v15 + 1), v9), *(uint8x8_t *)v15, v8);
  v17 = v15 + a2;
  v18 = (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v17 + 1), v9), *(uint8x8_t *)v17, v8);
  v19 = v17 + a2;
  v20 = (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v19 + 1), v9), *(uint8x8_t *)v19, v8);
  v21 = v19 + a2;
  v22 = (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v21 + 1), v9), *(uint8x8_t *)v21, v8);
  v23 = v21 + a2;
  v24 = (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v23 + 1), v9), *(uint8x8_t *)v23, v8);
  v25 = (uint8x8_t)vdup_n_s8(8 - a4);
  v26 = (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v23 + a2 + 1), v9), *(uint8x8_t *)(v23 + a2), v8);
  v27 = (uint8x8_t)vdup_n_s8(a4);
  v28 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v12, v27), v10, v25), 3uLL), *a8);
  v29 = (int16x8_t)vmlal_u8(vmull_u8(v14, v27), v12, v25);
  v30 = (uint8x8_t)vrshrn_n_s16(v16, 3uLL);
  *(int8x8_t *)v16.i8 = vrshrn_n_s16(v18, 3uLL);
  *(int8x8_t *)v18.i8 = vrshrn_n_s16(v20, 3uLL);
  *(int8x8_t *)v20.i8 = vrshrn_n_s16(v22, 3uLL);
  *(int8x8_t *)v22.i8 = vrshrn_n_s16(v24, 3uLL);
  *(uint8x8_t *)v29.i8 = vrhadd_u8((uint8x8_t)vrshrn_n_s16(v29, 3uLL), a8[1]);
  v37[0] = v28;
  v37[1] = v29.i64[0];
  v31 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v30, v27), v14, v25), 3uLL), a8[2]);
  v32 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v16.i8, v27), v30, v25), 3uLL), a8[3]);
  v37[2] = v31;
  v37[3] = v32;
  v33 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v20.i8, v27), *(uint8x8_t *)v18.i8, v25), 3uLL), a8[5]);
  v37[4] = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v18.i8, v27), *(uint8x8_t *)v16.i8, v25), 3uLL), a8[4]);
  v37[5] = v33;
  v34 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v22.i8, v27), *(uint8x8_t *)v20.i8, v25), 3uLL), a8[6]);
  v35 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16(v26, 3uLL), v27), *(uint8x8_t *)v22.i8, v25), 3uLL), a8[7]);
  v37[6] = v34;
  v37[7] = v35;
  return vpx_variance8x8(v37, 8, a5, a6, a7);
}

uint64_t vpx_sub_pixel_avg_variance8x16_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint8x8_t *a8)
{
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint8x8_t v14;
  uint64_t v15;
  uint8x8_t v16;
  uint64_t v17;
  uint8x8_t v18;
  uint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  uint8x8_t v40;
  int16x8_t v41;
  uint8x8_t v42;
  uint8x8_t v43;
  uint8x8_t v44;
  uint8x8_t v45;
  uint8x8_t v46;
  uint8x8_t v47;
  uint8x8_t v48;
  uint8x8_t v49;
  uint8x8_t v50;
  uint8x8_t v51;
  uint8x8_t v52;
  uint8x8_t v53;
  uint8x8_t v54;
  _QWORD v56[17];

  v56[16] = *MEMORY[0x24BDAC8D0];
  v8 = (uint8x8_t)vdup_n_s8(8 - a3);
  v9 = (uint8x8_t)vdup_n_s8(a3);
  v10 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + 1), v9), *(uint8x8_t *)a1, v8), 3uLL);
  v11 = a1 + a2;
  v12 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v11 + 1), v9), *(uint8x8_t *)v11, v8), 3uLL);
  v13 = v11 + a2;
  v14 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v13 + 1), v9), *(uint8x8_t *)v13, v8), 3uLL);
  v15 = v13 + a2;
  v16 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v15 + 1), v9), *(uint8x8_t *)v15, v8), 3uLL);
  v17 = v15 + a2;
  v18 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v17 + 1), v9), *(uint8x8_t *)v17, v8), 3uLL);
  v19 = v17 + a2;
  v20 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v19 + 1), v9), *(uint8x8_t *)v19, v8), 3uLL);
  v21 = v19 + a2;
  v22 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v21 + 1), v9), *(uint8x8_t *)v21, v8), 3uLL);
  v23 = v21 + a2;
  v24 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v23 + 1), v9), *(uint8x8_t *)v23, v8), 3uLL);
  v25 = v23 + a2;
  v26 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v25 + 1), v9), *(uint8x8_t *)v25, v8), 3uLL);
  v27 = v25 + a2;
  v28 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v27 + 1), v9), *(uint8x8_t *)v27, v8), 3uLL);
  v29 = v27 + a2;
  v30 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v29 + 1), v9), *(uint8x8_t *)v29, v8), 3uLL);
  v31 = v29 + a2;
  v32 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v31 + 1), v9), *(uint8x8_t *)v31, v8), 3uLL);
  v33 = v31 + a2;
  v34 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v33 + 1), v9), *(uint8x8_t *)v33, v8), 3uLL);
  v35 = v33 + a2;
  v36 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v35 + 1), v9), *(uint8x8_t *)v35, v8), 3uLL);
  v37 = v35 + a2;
  v38 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v37 + 1), v9), *(uint8x8_t *)v37, v8), 3uLL);
  v39 = v37 + a2;
  v40 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v39 + 1), v9), *(uint8x8_t *)v39, v8), 3uLL);
  v41 = (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(v39 + a2 + 1), v9), *(uint8x8_t *)(v39 + a2), v8);
  v42 = (uint8x8_t)vdup_n_s8(8 - a4);
  v43 = (uint8x8_t)vdup_n_s8(a4);
  v44 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v12, v43), v10, v42), 3uLL), *a8);
  v45 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v14, v43), v12, v42), 3uLL), a8[1]);
  v46 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v16, v43), v14, v42), 3uLL), a8[2]);
  v47 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v18, v43), v16, v42), 3uLL), a8[3]);
  v48 = a8[5];
  v49 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v20, v43), v18, v42), 3uLL), a8[4]);
  v56[0] = v44;
  v56[1] = v45;
  v56[2] = v46;
  v56[3] = v47;
  v56[4] = v49;
  v56[5] = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v22, v43), v20, v42), 3uLL), v48);
  v50 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v26, v43), v24, v42), 3uLL), a8[7]);
  v56[6] = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v24, v43), v22, v42), 3uLL), a8[6]);
  v56[7] = v50;
  v51 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v30, v43), v28, v42), 3uLL), a8[9]);
  v56[8] = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v28, v43), v26, v42), 3uLL), a8[8]);
  v56[9] = v51;
  v52 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v34, v43), v32, v42), 3uLL), a8[11]);
  v56[10] = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v32, v43), v30, v42), 3uLL), a8[10]);
  v56[11] = v52;
  v53 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v38, v43), v36, v42), 3uLL), a8[13]);
  v56[12] = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v36, v43), v34, v42), 3uLL), a8[12]);
  v56[13] = v53;
  v54 = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16(v41, 3uLL), v43), v40, v42), 3uLL), a8[15]);
  v56[14] = vrhadd_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v40, v43), v38, v42), 3uLL), a8[14]);
  v56[15] = v54;
  return vpx_variance8x16(v56, 8, a5, a6, a7);
}

uint64_t vpx_sub_pixel_avg_variance16x8_neon(uint64_t a1, int a2, __int32 a3, __int32 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint8x16_t *a8, int8x8_t a9, int8x8_t a10)
{
  uint8x16_t *v10;
  uint8x16_t v11;
  uint8x16_t *v12;
  uint8x16_t v13;
  uint8x16_t *v14;
  uint8x16_t v15;
  uint8x16_t *v16;
  uint8x16_t v17;
  uint8x16_t *v18;
  uint8x16_t v19;
  uint8x16_t *v20;
  uint8x16_t v21;
  uint64_t v22;
  uint8x16_t v23;
  uint64_t v24;
  uint8x16_t v25;
  uint64_t v26;
  uint8x16_t v27;
  uint64_t v28;
  uint8x16_t v29;
  uint64_t v30;
  uint8x16_t v31;
  uint64_t v32;
  uint8x16_t v33;
  unint64_t v34;
  uint8x8_t *v35;
  uint8x16_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  unint64_t v44;
  uint8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint8x16_t v48;
  uint8x16_t *v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint8x16_t *v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t *v55;
  uint8x16_t v56;
  uint8x16_t v57;
  uint8x16_t *v58;
  uint8x16_t v59;
  uint8x16_t v60;
  uint8x16_t *v61;
  uint8x16_t v62;
  uint8x16_t v63;
  uint8x16_t *v64;
  uint8x16_t v65;
  uint8x16_t v66;
  uint8x16_t *v67;
  uint8x16_t v68;
  uint64_t v69;
  uint8x16_t v70;
  uint8x8_t *v71;
  uint8x16_t v72;
  uint8x16_t v73;
  uint8x16_t v74;
  uint64_t v76;
  uint8x16_t v77;
  uint64_t v78;
  uint8x16_t v79;
  uint64_t v80;
  uint8x16_t v81;
  uint64_t v82;
  uint8x16_t v83;
  uint64_t v84;
  uint8x16_t v85;
  uint64_t v86;
  uint8x16_t v87;
  uint64_t v88;
  uint8x16_t v89;
  uint8x16_t v90;
  uint8x16_t v91;
  uint8x16_t v92;
  uint8x16_t v93;
  uint8x16_t v94;
  unint64_t v95;
  uint8x16_t v96;
  uint64_t v97;
  uint8x16_t v98;
  uint64_t v99;
  uint8x16_t v100;
  uint64_t v101;
  uint8x16_t v102;
  uint64_t v103;
  uint8x16_t v104;
  uint64_t v105;
  uint8x16_t v106;
  uint64_t v107;
  uint8x16_t v108;
  uint64_t v109;
  uint8x16_t v110;
  uint8x16_t v111;
  uint8x16_t v112;
  uint8x16_t v113;
  uint8x16_t v114;
  uint8x16_t v115;
  uint8x16_t v116;
  uint8x16_t v117;
  uint8x16_t v118;
  uint8x16_t v119;
  uint8x16_t v120;
  uint8x16_t v121;
  uint8x16_t v122;
  uint8x16_t v123;
  uint8x16_t v124;
  uint8x16_t v125;
  uint8x16_t v126;
  uint8x16_t v127;
  uint8x16_t v128;
  uint8x16_t v129;
  uint8x16_t v130;
  uint8x16_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  if (a3 != 4)
  {
    if (!a3)
    {
      if (a4 == 4)
      {
        v49 = (uint8x16_t *)(a1 + a2);
        v50 = *v49;
        v51 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)a1, *v49), *a8);
        v52 = (uint8x16_t *)((char *)v49 + a2);
        v53 = *v52;
        v54 = vrhaddq_u8(vrhaddq_u8(v50, *v52), a8[1]);
        v123 = v51;
        v124 = v54;
        v55 = (uint8x16_t *)((char *)v52 + a2);
        v56 = *v55;
        v57 = vrhaddq_u8(vrhaddq_u8(v53, *v55), a8[2]);
        v58 = (uint8x16_t *)((char *)v55 + a2);
        v59 = *v58;
        v60 = vrhaddq_u8(vrhaddq_u8(v56, *v58), a8[3]);
        v125 = v57;
        v126 = v60;
        v61 = (uint8x16_t *)((char *)v58 + a2);
        v62 = *v61;
        v63 = vrhaddq_u8(vrhaddq_u8(v59, *v61), a8[4]);
        v64 = (uint8x16_t *)((char *)v61 + a2);
        v65 = *v64;
        v66 = vrhaddq_u8(vrhaddq_u8(v62, *v64), a8[5]);
        v127 = v63;
        v128 = v66;
        v67 = (uint8x16_t *)((char *)v64 + a2);
        v68 = *v67;
        v129 = vrhaddq_u8(vrhaddq_u8(v65, *v67), a8[6]);
        v21 = vrhaddq_u8(v68, *(uint8x16_t *)((char *)v67 + a2));
      }
      else
      {
        if (a4)
        {
          v69 = 0;
          a9.i32[0] = 8 - a4;
          a10.i32[0] = a4;
          v70 = *(uint8x16_t *)a1;
          v71 = (uint8x8_t *)(a1 + a2);
          v72 = (uint8x16_t)vdupq_lane_s8(a9, 0);
          v73 = (uint8x16_t)vdupq_lane_s8(a10, 0);
          do
          {
            v74 = *(uint8x16_t *)v71->i8;
            *(uint8x16_t *)((char *)&v123 + v69 * 16) = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v71, *(uint8x8_t *)v73.i8), *(uint8x8_t *)v70.i8, *(uint8x8_t *)v72.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v71->i8, v73), v70, v72), 3uLL), a8[v69]);
            ++v69;
            v71 = (uint8x8_t *)((char *)v71 + a2);
            v70 = v74;
          }
          while ((_DWORD)(v69 * 16) != 128);
          return vpx_variance16x8(&v123, 16, a5, a6, a7);
        }
        v10 = (uint8x16_t *)(a1 + a2);
        v11 = vrhaddq_u8(*v10, a8[1]);
        v123 = vrhaddq_u8(*(uint8x16_t *)a1, *a8);
        v124 = v11;
        v12 = (uint8x16_t *)((char *)v10 + a2);
        v13 = vrhaddq_u8(*v12, a8[2]);
        v14 = (uint8x16_t *)((char *)v12 + a2);
        v15 = vrhaddq_u8(*v14, a8[3]);
        v125 = v13;
        v126 = v15;
        v16 = (uint8x16_t *)((char *)v14 + a2);
        v17 = vrhaddq_u8(*v16, a8[4]);
        v18 = (uint8x16_t *)((char *)v16 + a2);
        v19 = vrhaddq_u8(*v18, a8[5]);
        v127 = v17;
        v128 = v19;
        v20 = (uint8x16_t *)((char *)v18 + a2);
        v129 = vrhaddq_u8(*v20, a8[6]);
        v21 = *(uint8x16_t *)((char *)v20 + a2);
      }
      v130 = vrhaddq_u8(v21, a8[7]);
      return vpx_variance16x8(&v123, 16, a5, a6, a7);
    }
    v34 = 0;
    a9.i32[0] = 8 - a3;
    a10.i32[0] = a3;
    v35 = (uint8x8_t *)(a1 + 1);
    v36 = (uint8x16_t)vdupq_lane_s8(a9, 0);
    v37 = (uint8x16_t)vdupq_lane_s8(a10, 0);
    if (a4 != 4)
    {
      if (!a4)
      {
        do
        {
          *(uint8x16_t *)((char *)&v123 + v34) = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v35, *(uint8x8_t *)v37.i8), *(uint8x8_t *)((char *)v35 - 1), *(uint8x8_t *)v36.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v35->i8, v37), *(uint8x16_t *)((char *)&v35[-1].u32[1] + 3), v36), 3uLL), a8[v34 / 0x10]);
          v34 += 16;
          v35 = (uint8x8_t *)((char *)v35 + a2);
        }
        while ((_DWORD)v34 != 128);
        return vpx_variance16x8(&v123, 16, a5, a6, a7);
      }
      do
      {
        *(int8x16_t *)((char *)&v123 + v34) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v35, *(uint8x8_t *)v37.i8), *(uint8x8_t *)((char *)v35 - 1), *(uint8x8_t *)v36.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v35->i8, v37), *(uint8x16_t *)((char *)&v35[-1].u32[1] + 3), v36), 3uLL);
        v34 += 16;
        v35 = (uint8x8_t *)((char *)v35 + a2);
      }
      while ((_DWORD)v34 != 144);
      v44 = 0;
      v36.i32[0] = 8 - a4;
      v37.i32[0] = a4;
      v45 = v123;
      v46 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v36.i8, 0);
      v47 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v37.i8, 0);
      do
      {
        v48 = *(uint8x16_t *)((char *)&v124 + v44);
        *(uint8x16_t *)((char *)&v115 + v44) = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v48.i8, *(uint8x8_t *)v47.i8), *(uint8x8_t *)v45.i8, *(uint8x8_t *)v46.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v48, v47), v45, v46), 3uLL), a8[v44 / 0x10]);
        v44 += 16;
        v45 = v48;
      }
      while ((_DWORD)v44 != 128);
      return vpx_variance16x8(&v115, 16, a5, a6, a7);
    }
    do
    {
      *(int8x16_t *)((char *)&v123 + v34) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v35, *(uint8x8_t *)v37.i8), *(uint8x8_t *)((char *)v35 - 1), *(uint8x8_t *)v36.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v35->i8, v37), *(uint8x16_t *)((char *)&v35[-1].u32[1] + 3), v36), 3uLL);
      v34 += 16;
      v35 = (uint8x8_t *)((char *)v35 + a2);
    }
    while ((_DWORD)v34 != 144);
    v38 = vrhaddq_u8(vrhaddq_u8(v124, v125), a8[1]);
    v115 = vrhaddq_u8(vrhaddq_u8(v123, v124), *a8);
    v116 = v38;
    v39 = vrhaddq_u8(vrhaddq_u8(v126, v127), a8[3]);
    v117 = vrhaddq_u8(vrhaddq_u8(v125, v126), a8[2]);
    v118 = v39;
    v40 = vrhaddq_u8(vrhaddq_u8(v128, v129), a8[5]);
    v119 = vrhaddq_u8(vrhaddq_u8(v127, v128), a8[4]);
    v120 = v40;
    v41 = a8[7];
    v42 = vrhaddq_u8(vrhaddq_u8(v129, v130), a8[6]);
    v43 = vrhaddq_u8(v130, v131);
LABEL_25:
    v121 = v42;
    v122 = vrhaddq_u8(v43, v41);
    return vpx_variance16x8(&v115, 16, a5, a6, a7);
  }
  if (a4 == 4)
  {
    v76 = a1 + a2;
    v77 = vrhaddq_u8(*(uint8x16_t *)v76, *(uint8x16_t *)(v76 + 1));
    v78 = v76 + a2;
    v79 = vrhaddq_u8(*(uint8x16_t *)v78, *(uint8x16_t *)(v78 + 1));
    v80 = v78 + a2;
    v81 = vrhaddq_u8(*(uint8x16_t *)v80, *(uint8x16_t *)(v80 + 1));
    v82 = v80 + a2;
    v83 = vrhaddq_u8(*(uint8x16_t *)v82, *(uint8x16_t *)(v82 + 1));
    v84 = v82 + a2;
    v85 = vrhaddq_u8(*(uint8x16_t *)v84, *(uint8x16_t *)(v84 + 1));
    v86 = v84 + a2;
    v87 = vrhaddq_u8(*(uint8x16_t *)v86, *(uint8x16_t *)(v86 + 1));
    v88 = v86 + a2;
    v89 = vrhaddq_u8(*(uint8x16_t *)v88, *(uint8x16_t *)(v88 + 1));
    v90 = vrhaddq_u8(*(uint8x16_t *)(v88 + a2), *(uint8x16_t *)(v88 + a2 + 1));
    v91 = vrhaddq_u8(vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1)), v77), *a8);
    v92 = vrhaddq_u8(vrhaddq_u8(v77, v79), a8[1]);
    v115 = v91;
    v116 = v92;
    v93 = vrhaddq_u8(vrhaddq_u8(v81, v83), a8[3]);
    v117 = vrhaddq_u8(vrhaddq_u8(v79, v81), a8[2]);
    v118 = v93;
    v94 = vrhaddq_u8(vrhaddq_u8(v85, v87), a8[5]);
    v119 = vrhaddq_u8(vrhaddq_u8(v83, v85), a8[4]);
    v120 = v94;
    v41 = a8[7];
    v42 = vrhaddq_u8(vrhaddq_u8(v87, v89), a8[6]);
    v43 = vrhaddq_u8(v89, v90);
    goto LABEL_25;
  }
  if (!a4)
  {
    v22 = a1 + a2;
    v23 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v22, *(uint8x16_t *)(v22 + 1)), a8[1]);
    v123 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1)), *a8);
    v124 = v23;
    v24 = v22 + a2;
    v25 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v24, *(uint8x16_t *)(v24 + 1)), a8[2]);
    v26 = v24 + a2;
    v27 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v26, *(uint8x16_t *)(v26 + 1)), a8[3]);
    v125 = v25;
    v126 = v27;
    v28 = v26 + a2;
    v29 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v28, *(uint8x16_t *)(v28 + 1)), a8[4]);
    v30 = v28 + a2;
    v31 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v30, *(uint8x16_t *)(v30 + 1)), a8[5]);
    v127 = v29;
    v128 = v31;
    v32 = v30 + a2;
    v33 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v32 + a2), *(uint8x16_t *)(v32 + a2 + 1)), a8[7]);
    v129 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v32, *(uint8x16_t *)(v32 + 1)), a8[6]);
    v130 = v33;
    return vpx_variance16x8(&v123, 16, a5, a6, a7);
  }
  v95 = 0;
  v96 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
  v97 = a1 + a2;
  v98 = vrhaddq_u8(*(uint8x16_t *)v97, *(uint8x16_t *)(v97 + 1));
  v99 = v97 + a2;
  v100 = vrhaddq_u8(*(uint8x16_t *)v99, *(uint8x16_t *)(v99 + 1));
  v124 = v98;
  v125 = v100;
  v101 = v99 + a2;
  v102 = vrhaddq_u8(*(uint8x16_t *)v101, *(uint8x16_t *)(v101 + 1));
  v103 = v101 + a2;
  v104 = vrhaddq_u8(*(uint8x16_t *)v103, *(uint8x16_t *)(v103 + 1));
  v126 = v102;
  v127 = v104;
  v105 = v103 + a2;
  v106 = vrhaddq_u8(*(uint8x16_t *)v105, *(uint8x16_t *)(v105 + 1));
  v107 = v105 + a2;
  v108 = vrhaddq_u8(*(uint8x16_t *)v107, *(uint8x16_t *)(v107 + 1));
  v128 = v106;
  v129 = v108;
  v109 = v107 + a2;
  v110 = vrhaddq_u8(*(uint8x16_t *)v109, *(uint8x16_t *)(v109 + 1));
  v111 = vrhaddq_u8(*(uint8x16_t *)(v109 + a2), *(uint8x16_t *)(v109 + a2 + 1));
  v130 = v110;
  v131 = v111;
  v110.i32[0] = 8 - a4;
  v111.i32[0] = a4;
  v112 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v110.i8, 0);
  v113 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v111.i8, 0);
  do
  {
    v114 = *(uint8x16_t *)((char *)&v124 + v95);
    *(uint8x16_t *)((char *)&v115 + v95) = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v114.i8, *(uint8x8_t *)v113.i8), *(uint8x8_t *)v96.i8, *(uint8x8_t *)v112.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v114, v113), v96, v112), 3uLL), a8[v95 / 0x10]);
    v95 += 16;
    v96 = v114;
  }
  while ((_DWORD)v95 != 128);
  return vpx_variance16x8(&v115, 16, a5, a6, a7);
}

uint64_t vpx_sub_pixel_avg_variance16x16_neon(uint64_t a1, int a2, __int32 a3, __int32 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint8x16_t *a8, int8x8_t a9, int8x8_t a10)
{
  uint8x16_t *v10;
  uint8x16_t v11;
  uint8x16_t *v12;
  uint8x16_t v13;
  uint8x16_t *v14;
  uint8x16_t v15;
  uint8x16_t *v16;
  uint8x16_t v17;
  uint8x16_t *v18;
  uint8x16_t v19;
  uint8x16_t *v20;
  uint8x16_t v21;
  uint8x16_t *v22;
  uint8x16_t v23;
  uint8x16_t *v24;
  uint8x16_t v25;
  uint8x16_t *v26;
  uint8x16_t v27;
  uint8x16_t *v28;
  uint8x16_t v29;
  uint8x16_t *v30;
  uint8x16_t v31;
  uint8x16_t *v32;
  uint8x16_t v33;
  uint8x16_t *v34;
  uint8x16_t *v35;
  uint8x16_t v36;
  uint64_t v37;
  uint8x16_t v38;
  uint64_t v39;
  uint8x16_t v40;
  uint64_t v41;
  uint8x16_t v42;
  uint64_t v43;
  uint8x16_t v44;
  uint64_t v45;
  uint8x16_t v46;
  uint64_t v47;
  uint8x16_t v48;
  uint64_t v49;
  uint8x16_t v50;
  uint64_t v51;
  uint8x16_t v52;
  uint64_t v53;
  uint8x16_t v54;
  uint64_t v55;
  uint8x16_t v56;
  uint64_t v57;
  uint8x16_t v58;
  uint64_t v59;
  uint8x16_t v60;
  uint64_t v61;
  uint64_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  unint64_t v65;
  uint8x8_t *v66;
  uint8x16_t v67;
  uint8x16_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  uint8x16_t v72;
  uint8x16_t v73;
  uint8x16_t v74;
  uint8x16_t v75;
  uint8x16_t v76;
  uint8x16_t v77;
  uint8x16_t v78;
  unint64_t v79;
  uint8x16_t v80;
  uint8x16_t v81;
  uint8x16_t v82;
  uint8x16_t v83;
  uint8x16_t *v84;
  uint8x16_t v85;
  uint8x16_t v86;
  uint8x16_t *v87;
  uint8x16_t v88;
  uint8x16_t v89;
  uint8x16_t *v90;
  uint8x16_t v91;
  uint8x16_t v92;
  uint8x16_t *v93;
  uint8x16_t v94;
  uint8x16_t v95;
  uint8x16_t *v96;
  uint8x16_t v97;
  uint8x16_t v98;
  uint8x16_t *v99;
  uint8x16_t v100;
  uint8x16_t v101;
  uint8x16_t *v102;
  uint8x16_t v103;
  uint8x16_t v104;
  uint8x16_t *v105;
  uint8x16_t v106;
  uint8x16_t v107;
  uint8x16_t *v108;
  uint8x16_t v109;
  uint8x16_t v110;
  uint8x16_t *v111;
  uint8x16_t v112;
  uint8x16_t v113;
  uint8x16_t *v114;
  uint8x16_t v115;
  uint8x16_t v116;
  uint8x16_t *v117;
  uint8x16_t v118;
  uint8x16_t v119;
  uint8x16_t *v120;
  uint8x16_t v121;
  uint8x16_t v122;
  uint8x16_t *v123;
  uint8x16_t v124;
  uint8x16_t *v125;
  uint8x16_t v126;
  uint64_t v127;
  uint8x16_t v128;
  uint8x8_t *v129;
  uint8x16_t v130;
  uint8x16_t v131;
  uint8x16_t v132;
  uint64_t v134;
  uint8x16_t v135;
  uint64_t v136;
  uint8x16_t v137;
  uint64_t v138;
  uint8x16_t v139;
  uint64_t v140;
  uint8x16_t v141;
  uint64_t v142;
  uint8x16_t v143;
  uint64_t v144;
  uint8x16_t v145;
  uint64_t v146;
  uint8x16_t v147;
  uint64_t v148;
  uint8x16_t v149;
  uint64_t v150;
  uint8x16_t v151;
  uint64_t v152;
  uint8x16_t v153;
  uint64_t v154;
  uint8x16_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint8x16_t v160;
  uint8x16_t v161;
  uint8x16_t v162;
  uint8x16_t v163;
  uint8x16_t v164;
  uint8x16_t v165;
  uint8x16_t v166;
  uint8x16_t v167;
  unint64_t v168;
  uint8x16_t v169;
  uint64_t v170;
  uint8x16_t v171;
  uint64_t v172;
  uint8x16_t v173;
  uint64_t v174;
  uint8x16_t v175;
  uint64_t v176;
  uint8x16_t v177;
  uint64_t v178;
  uint8x16_t v179;
  uint64_t v180;
  uint8x16_t v181;
  uint64_t v182;
  uint8x16_t v183;
  uint64_t v184;
  uint8x16_t v185;
  uint64_t v186;
  uint8x16_t v187;
  uint64_t v188;
  uint8x16_t v189;
  uint64_t v190;
  uint8x16_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _OWORD *v195;
  uint8x16_t v196;
  uint8x16_t v197;
  char *v198;
  uint8x16_t v199;
  uint8x16_t v200;
  uint8x16_t v201;
  uint8x16_t v202;
  uint8x16_t v203;
  uint8x16_t v204;
  uint8x16_t v205;
  uint8x16_t v206;
  uint8x16_t v207;
  uint8x16_t v208;
  uint8x16_t v209;
  uint8x16_t v210;
  uint8x16_t v211;
  uint8x16_t v212;
  uint8x16_t v213;
  uint8x16_t v214;
  uint8x16_t v215;
  uint8x16_t v216;
  uint8x16_t v217;
  uint8x16_t v218;
  uint8x16_t v219;
  uint8x16_t v220;
  uint8x16_t v221;
  uint8x16_t v222;
  uint8x16_t v223;
  uint8x16_t v224;
  uint8x16_t v225;
  uint8x16_t v226;
  uint8x16_t v227;
  uint8x16_t v228;
  uint8x16_t v229;
  uint8x16_t v230;
  uint8x16_t v231;
  uint8x16_t v232;
  uint8x16_t v233;
  uint8x16_t v234;
  uint8x16_t v235;
  uint8x16_t v236;
  uint64_t v237;

  v237 = *MEMORY[0x24BDAC8D0];
  if (a3 != 4)
  {
    if (!a3)
    {
      if (a4 == 4)
      {
        v84 = (uint8x16_t *)(a1 + a2);
        v85 = *v84;
        v86 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)a1, *v84), *a8);
        v87 = (uint8x16_t *)((char *)v84 + a2);
        v88 = *v87;
        v89 = vrhaddq_u8(vrhaddq_u8(v85, *v87), a8[1]);
        v220 = v86;
        v221 = v89;
        v90 = (uint8x16_t *)((char *)v87 + a2);
        v91 = *v90;
        v92 = vrhaddq_u8(vrhaddq_u8(v88, *v90), a8[2]);
        v93 = (uint8x16_t *)((char *)v90 + a2);
        v94 = *v93;
        v95 = vrhaddq_u8(vrhaddq_u8(v91, *v93), a8[3]);
        v222 = v92;
        v223 = v95;
        v96 = (uint8x16_t *)((char *)v93 + a2);
        v97 = *v96;
        v98 = vrhaddq_u8(vrhaddq_u8(v94, *v96), a8[4]);
        v99 = (uint8x16_t *)((char *)v96 + a2);
        v100 = *v99;
        v101 = vrhaddq_u8(vrhaddq_u8(v97, *v99), a8[5]);
        v224 = v98;
        v225 = v101;
        v102 = (uint8x16_t *)((char *)v99 + a2);
        v103 = *v102;
        v104 = vrhaddq_u8(vrhaddq_u8(v100, *v102), a8[6]);
        v105 = (uint8x16_t *)((char *)v102 + a2);
        v106 = *v105;
        v107 = vrhaddq_u8(vrhaddq_u8(v103, *v105), a8[7]);
        v226 = v104;
        v227 = v107;
        v108 = (uint8x16_t *)((char *)v105 + a2);
        v109 = *v108;
        v110 = vrhaddq_u8(vrhaddq_u8(v106, *v108), a8[8]);
        v111 = (uint8x16_t *)((char *)v108 + a2);
        v112 = *v111;
        v113 = vrhaddq_u8(vrhaddq_u8(v109, *v111), a8[9]);
        v228 = v110;
        v229 = v113;
        v114 = (uint8x16_t *)((char *)v111 + a2);
        v115 = *v114;
        v116 = vrhaddq_u8(vrhaddq_u8(v112, *v114), a8[10]);
        v117 = (uint8x16_t *)((char *)v114 + a2);
        v118 = *v117;
        v119 = vrhaddq_u8(vrhaddq_u8(v115, *v117), a8[11]);
        v230 = v116;
        v231 = v119;
        v120 = (uint8x16_t *)((char *)v117 + a2);
        v121 = *v120;
        v122 = a8[13];
        v232 = vrhaddq_u8(vrhaddq_u8(v118, *v120), a8[12]);
        v123 = (uint8x16_t *)((char *)v120 + a2);
        v124 = *v123;
        v233 = vrhaddq_u8(vrhaddq_u8(v121, *v123), v122);
        v125 = (uint8x16_t *)((char *)v123 + a2);
        v126 = *v125;
        v234 = vrhaddq_u8(vrhaddq_u8(v124, *v125), a8[14]);
        v36 = vrhaddq_u8(v126, *(uint8x16_t *)((char *)v125 + a2));
      }
      else
      {
        if (a4)
        {
          v127 = 0;
          a9.i32[0] = 8 - a4;
          a10.i32[0] = a4;
          v128 = *(uint8x16_t *)a1;
          v129 = (uint8x8_t *)(a1 + a2);
          v130 = (uint8x16_t)vdupq_lane_s8(a9, 0);
          v131 = (uint8x16_t)vdupq_lane_s8(a10, 0);
          do
          {
            v132 = *(uint8x16_t *)v129->i8;
            *(uint8x16_t *)((char *)&v220 + v127 * 16) = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v129, *(uint8x8_t *)v131.i8), *(uint8x8_t *)v128.i8, *(uint8x8_t *)v130.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v129->i8, v131), v128, v130), 3uLL), a8[v127]);
            ++v127;
            v129 = (uint8x8_t *)((char *)v129 + a2);
            v128 = v132;
          }
          while ((_DWORD)(v127 * 16) != 256);
          return vpx_variance16x16(&v220, 16, a5, a6, a7);
        }
        v10 = (uint8x16_t *)(a1 + a2);
        v11 = vrhaddq_u8(*v10, a8[1]);
        v220 = vrhaddq_u8(*(uint8x16_t *)a1, *a8);
        v221 = v11;
        v12 = (uint8x16_t *)((char *)v10 + a2);
        v13 = vrhaddq_u8(*v12, a8[2]);
        v14 = (uint8x16_t *)((char *)v12 + a2);
        v15 = vrhaddq_u8(*v14, a8[3]);
        v222 = v13;
        v223 = v15;
        v16 = (uint8x16_t *)((char *)v14 + a2);
        v17 = vrhaddq_u8(*v16, a8[4]);
        v18 = (uint8x16_t *)((char *)v16 + a2);
        v19 = vrhaddq_u8(*v18, a8[5]);
        v224 = v17;
        v225 = v19;
        v20 = (uint8x16_t *)((char *)v18 + a2);
        v21 = vrhaddq_u8(*v20, a8[6]);
        v22 = (uint8x16_t *)((char *)v20 + a2);
        v23 = vrhaddq_u8(*v22, a8[7]);
        v226 = v21;
        v227 = v23;
        v24 = (uint8x16_t *)((char *)v22 + a2);
        v25 = vrhaddq_u8(*v24, a8[8]);
        v26 = (uint8x16_t *)((char *)v24 + a2);
        v27 = vrhaddq_u8(*v26, a8[9]);
        v228 = v25;
        v229 = v27;
        v28 = (uint8x16_t *)((char *)v26 + a2);
        v29 = vrhaddq_u8(*v28, a8[10]);
        v30 = (uint8x16_t *)((char *)v28 + a2);
        v31 = vrhaddq_u8(*v30, a8[11]);
        v230 = v29;
        v231 = v31;
        v32 = (uint8x16_t *)((char *)v30 + a2);
        v33 = a8[13];
        v232 = vrhaddq_u8(*v32, a8[12]);
        v34 = (uint8x16_t *)((char *)v32 + a2);
        v233 = vrhaddq_u8(*v34, v33);
        v35 = (uint8x16_t *)((char *)v34 + a2);
        v234 = vrhaddq_u8(*v35, a8[14]);
        v36 = *(uint8x16_t *)((char *)v35 + a2);
      }
      v64 = vrhaddq_u8(v36, a8[15]);
LABEL_21:
      v235 = v64;
      return vpx_variance16x16(&v220, 16, a5, a6, a7);
    }
    v65 = 0;
    a9.i32[0] = 8 - a3;
    a10.i32[0] = a3;
    v66 = (uint8x8_t *)(a1 + 1);
    v67 = (uint8x16_t)vdupq_lane_s8(a9, 0);
    v68 = (uint8x16_t)vdupq_lane_s8(a10, 0);
    if (a4 != 4)
    {
      if (!a4)
      {
        do
        {
          *(uint8x16_t *)((char *)&v220 + v65) = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v66, *(uint8x8_t *)v68.i8), *(uint8x8_t *)((char *)v66 - 1), *(uint8x8_t *)v67.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v66->i8, v68), *(uint8x16_t *)((char *)&v66[-1].u32[1] + 3), v67), 3uLL), a8[v65 / 0x10]);
          v65 += 16;
          v66 = (uint8x8_t *)((char *)v66 + a2);
        }
        while ((_DWORD)v65 != 256);
        return vpx_variance16x16(&v220, 16, a5, a6, a7);
      }
      do
      {
        *(int8x16_t *)((char *)&v220 + v65) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v66, *(uint8x8_t *)v68.i8), *(uint8x8_t *)((char *)v66 - 1), *(uint8x8_t *)v67.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v66->i8, v68), *(uint8x16_t *)((char *)&v66[-1].u32[1] + 3), v67), 3uLL);
        v65 += 16;
        v66 = (uint8x8_t *)((char *)v66 + a2);
      }
      while ((_DWORD)v65 != 272);
      v79 = 0;
      v67.i32[0] = 8 - a4;
      v68.i32[0] = a4;
      v80 = v220;
      v81 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v67.i8, 0);
      v82 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v68.i8, 0);
      do
      {
        v83 = *(uint8x16_t *)((char *)&v221 + v79);
        *(uint8x16_t *)((char *)&v204 + v79) = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v83.i8, *(uint8x8_t *)v82.i8), *(uint8x8_t *)v80.i8, *(uint8x8_t *)v81.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v83, v82), v80, v81), 3uLL), a8[v79 / 0x10]);
        v79 += 16;
        v80 = v83;
      }
      while ((_DWORD)v79 != 256);
      return vpx_variance16x16(&v204, 16, a5, a6, a7);
    }
    do
    {
      *(int8x16_t *)((char *)&v220 + v65) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v66, *(uint8x8_t *)v68.i8), *(uint8x8_t *)((char *)v66 - 1), *(uint8x8_t *)v67.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v66->i8, v68), *(uint8x16_t *)((char *)&v66[-1].u32[1] + 3), v67), 3uLL);
      v65 += 16;
      v66 = (uint8x8_t *)((char *)v66 + a2);
    }
    while ((_DWORD)v65 != 272);
    v69 = vrhaddq_u8(vrhaddq_u8(v221, v222), a8[1]);
    v204 = vrhaddq_u8(vrhaddq_u8(v220, v221), *a8);
    v205 = v69;
    v70 = vrhaddq_u8(vrhaddq_u8(v223, v224), a8[3]);
    v206 = vrhaddq_u8(vrhaddq_u8(v222, v223), a8[2]);
    v207 = v70;
    v71 = vrhaddq_u8(vrhaddq_u8(v225, v226), a8[5]);
    v208 = vrhaddq_u8(vrhaddq_u8(v224, v225), a8[4]);
    v209 = v71;
    v72 = vrhaddq_u8(vrhaddq_u8(v227, v228), a8[7]);
    v210 = vrhaddq_u8(vrhaddq_u8(v226, v227), a8[6]);
    v211 = v72;
    v73 = vrhaddq_u8(vrhaddq_u8(v229, v230), a8[9]);
    v212 = vrhaddq_u8(vrhaddq_u8(v228, v229), a8[8]);
    v213 = v73;
    v74 = vrhaddq_u8(vrhaddq_u8(v231, v232), a8[11]);
    v214 = vrhaddq_u8(vrhaddq_u8(v230, v231), a8[10]);
    v215 = v74;
    v75 = vrhaddq_u8(vrhaddq_u8(v233, v234), a8[13]);
    v216 = vrhaddq_u8(vrhaddq_u8(v232, v233), a8[12]);
    v217 = v75;
    v76 = a8[15];
    v77 = vrhaddq_u8(vrhaddq_u8(v234, v235), a8[14]);
    v78 = vrhaddq_u8(v235, v236);
LABEL_26:
    v218 = v77;
    v219 = vrhaddq_u8(v78, v76);
    return vpx_variance16x16(&v204, 16, a5, a6, a7);
  }
  if (a4 == 4)
  {
    v134 = a1 + a2;
    v135 = vrhaddq_u8(*(uint8x16_t *)v134, *(uint8x16_t *)(v134 + 1));
    v220 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
    v221 = v135;
    v136 = v134 + a2;
    v137 = vrhaddq_u8(*(uint8x16_t *)v136, *(uint8x16_t *)(v136 + 1));
    v138 = v136 + a2;
    v139 = vrhaddq_u8(*(uint8x16_t *)v138, *(uint8x16_t *)(v138 + 1));
    v222 = v137;
    v223 = v139;
    v140 = v138 + a2;
    v141 = vrhaddq_u8(*(uint8x16_t *)v140, *(uint8x16_t *)(v140 + 1));
    v142 = v140 + a2;
    v143 = vrhaddq_u8(*(uint8x16_t *)v142, *(uint8x16_t *)(v142 + 1));
    v224 = v141;
    v225 = v143;
    v144 = v142 + a2;
    v145 = vrhaddq_u8(*(uint8x16_t *)v144, *(uint8x16_t *)(v144 + 1));
    v146 = v144 + a2;
    v147 = vrhaddq_u8(*(uint8x16_t *)v146, *(uint8x16_t *)(v146 + 1));
    v226 = v145;
    v227 = v147;
    v148 = v146 + a2;
    v149 = vrhaddq_u8(*(uint8x16_t *)v148, *(uint8x16_t *)(v148 + 1));
    v150 = v148 + a2;
    v151 = vrhaddq_u8(*(uint8x16_t *)v150, *(uint8x16_t *)(v150 + 1));
    v228 = v149;
    v229 = v151;
    v152 = v150 + a2;
    v153 = vrhaddq_u8(*(uint8x16_t *)v152, *(uint8x16_t *)(v152 + 1));
    v154 = v152 + a2;
    v155 = vrhaddq_u8(*(uint8x16_t *)v154, *(uint8x16_t *)(v154 + 1));
    v230 = v153;
    v231 = v155;
    v156 = v154 + a2;
    v232 = vrhaddq_u8(*(uint8x16_t *)v156, *(uint8x16_t *)(v156 + 1));
    v157 = v156 + a2;
    v233 = vrhaddq_u8(*(uint8x16_t *)v157, *(uint8x16_t *)(v157 + 1));
    v158 = v157 + a2;
    v234 = vrhaddq_u8(*(uint8x16_t *)v158, *(uint8x16_t *)(v158 + 1));
    v159 = v158 + a2;
    v235 = vrhaddq_u8(*(uint8x16_t *)v159, *(uint8x16_t *)(v159 + 1));
    v160 = a8[1];
    v161 = vrhaddq_u8(vrhaddq_u8(v220, v135), *a8);
    v236 = vrhaddq_u8(*(uint8x16_t *)(v159 + a2), *(uint8x16_t *)(v159 + a2 + 1));
    v204 = v161;
    v205 = vrhaddq_u8(vrhaddq_u8(v135, v137), v160);
    v162 = vrhaddq_u8(vrhaddq_u8(v139, v141), a8[3]);
    v206 = vrhaddq_u8(vrhaddq_u8(v137, v139), a8[2]);
    v207 = v162;
    v163 = vrhaddq_u8(vrhaddq_u8(v143, v145), a8[5]);
    v208 = vrhaddq_u8(vrhaddq_u8(v141, v143), a8[4]);
    v209 = v163;
    v164 = vrhaddq_u8(vrhaddq_u8(v147, v149), a8[7]);
    v210 = vrhaddq_u8(vrhaddq_u8(v145, v147), a8[6]);
    v211 = v164;
    v165 = vrhaddq_u8(vrhaddq_u8(v151, v153), a8[9]);
    v212 = vrhaddq_u8(vrhaddq_u8(v149, v151), a8[8]);
    v213 = v165;
    v166 = vrhaddq_u8(vrhaddq_u8(v155, v232), a8[11]);
    v214 = vrhaddq_u8(vrhaddq_u8(v153, v155), a8[10]);
    v215 = v166;
    v167 = vrhaddq_u8(vrhaddq_u8(v233, v234), a8[13]);
    v216 = vrhaddq_u8(vrhaddq_u8(v232, v233), a8[12]);
    v217 = v167;
    v76 = a8[15];
    v77 = vrhaddq_u8(vrhaddq_u8(v234, v235), a8[14]);
    v78 = vrhaddq_u8(v235, v236);
    goto LABEL_26;
  }
  if (!a4)
  {
    v37 = a1 + a2;
    v38 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v37, *(uint8x16_t *)(v37 + 1)), a8[1]);
    v220 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1)), *a8);
    v221 = v38;
    v39 = v37 + a2;
    v40 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v39, *(uint8x16_t *)(v39 + 1)), a8[2]);
    v41 = v39 + a2;
    v42 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v41, *(uint8x16_t *)(v41 + 1)), a8[3]);
    v222 = v40;
    v223 = v42;
    v43 = v41 + a2;
    v44 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v43, *(uint8x16_t *)(v43 + 1)), a8[4]);
    v45 = v43 + a2;
    v46 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v45, *(uint8x16_t *)(v45 + 1)), a8[5]);
    v224 = v44;
    v225 = v46;
    v47 = v45 + a2;
    v48 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v47, *(uint8x16_t *)(v47 + 1)), a8[6]);
    v49 = v47 + a2;
    v50 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v49, *(uint8x16_t *)(v49 + 1)), a8[7]);
    v226 = v48;
    v227 = v50;
    v51 = v49 + a2;
    v52 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v51, *(uint8x16_t *)(v51 + 1)), a8[8]);
    v53 = v51 + a2;
    v54 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v53, *(uint8x16_t *)(v53 + 1)), a8[9]);
    v228 = v52;
    v229 = v54;
    v55 = v53 + a2;
    v56 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v55, *(uint8x16_t *)(v55 + 1)), a8[10]);
    v57 = v55 + a2;
    v58 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v57, *(uint8x16_t *)(v57 + 1)), a8[11]);
    v230 = v56;
    v231 = v58;
    v59 = v57 + a2;
    v60 = a8[13];
    v232 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v59, *(uint8x16_t *)(v59 + 1)), a8[12]);
    v61 = v59 + a2;
    v233 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v61, *(uint8x16_t *)(v61 + 1)), v60);
    v62 = v61 + a2;
    v63 = a8[15];
    v234 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v62, *(uint8x16_t *)(v62 + 1)), a8[14]);
    v64 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v62 + a2), *(uint8x16_t *)(v62 + a2 + 1)), v63);
    goto LABEL_21;
  }
  v168 = 0;
  v169 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
  v170 = a1 + a2;
  v171 = vrhaddq_u8(*(uint8x16_t *)v170, *(uint8x16_t *)(v170 + 1));
  v220 = v169;
  v221 = v171;
  v172 = v170 + a2;
  v173 = vrhaddq_u8(*(uint8x16_t *)v172, *(uint8x16_t *)(v172 + 1));
  v174 = v172 + a2;
  v175 = vrhaddq_u8(*(uint8x16_t *)v174, *(uint8x16_t *)(v174 + 1));
  v222 = v173;
  v223 = v175;
  v176 = v174 + a2;
  v177 = vrhaddq_u8(*(uint8x16_t *)v176, *(uint8x16_t *)(v176 + 1));
  v178 = v176 + a2;
  v179 = vrhaddq_u8(*(uint8x16_t *)v178, *(uint8x16_t *)(v178 + 1));
  v224 = v177;
  v225 = v179;
  v180 = v178 + a2;
  v181 = vrhaddq_u8(*(uint8x16_t *)v180, *(uint8x16_t *)(v180 + 1));
  v182 = v180 + a2;
  v183 = vrhaddq_u8(*(uint8x16_t *)v182, *(uint8x16_t *)(v182 + 1));
  v226 = v181;
  v227 = v183;
  v184 = v182 + a2;
  v185 = vrhaddq_u8(*(uint8x16_t *)v184, *(uint8x16_t *)(v184 + 1));
  v186 = v184 + a2;
  v187 = vrhaddq_u8(*(uint8x16_t *)v186, *(uint8x16_t *)(v186 + 1));
  v228 = v185;
  v229 = v187;
  v188 = v186 + a2;
  v189 = vrhaddq_u8(*(uint8x16_t *)v188, *(uint8x16_t *)(v188 + 1));
  v190 = v188 + a2;
  v191 = vrhaddq_u8(*(uint8x16_t *)v190, *(uint8x16_t *)(v190 + 1));
  v230 = v189;
  v231 = v191;
  v192 = v190 + a2;
  v232 = vrhaddq_u8(*(uint8x16_t *)v192, *(uint8x16_t *)(v192 + 1));
  v193 = v192 + a2;
  v233 = vrhaddq_u8(*(uint8x16_t *)v193, *(uint8x16_t *)(v193 + 1));
  v194 = v193 + a2;
  v234 = vrhaddq_u8(*(uint8x16_t *)v194, *(uint8x16_t *)(v194 + 1));
  v195 = (_OWORD *)(v194 + a2);
  v196 = *(uint8x16_t *)v195;
  v197 = *(uint8x16_t *)((char *)v195 + 1);
  v198 = (char *)v195 + a2;
  v235 = vrhaddq_u8(v196, v197);
  v199 = *(uint8x16_t *)(v198 + 1);
  v200 = vrhaddq_u8(*(uint8x16_t *)v198, v199);
  v236 = v200;
  v200.i32[0] = 8 - a4;
  v199.i32[0] = a4;
  v201 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v200.i8, 0);
  v202 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v199.i8, 0);
  do
  {
    v203 = *(uint8x16_t *)((char *)&v221 + v168);
    *(uint8x16_t *)((char *)&v204 + v168) = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v203.i8, *(uint8x8_t *)v202.i8), *(uint8x8_t *)v169.i8, *(uint8x8_t *)v201.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v203, v202), v169, v201), 3uLL), a8[v168 / 0x10]);
    v168 += 16;
    v169 = v203;
  }
  while ((_DWORD)v168 != 256);
  return vpx_variance16x16(&v204, 16, a5, a6, a7);
}

uint64_t vpx_sub_pixel_avg_variance16x32_neon(uint64_t a1, int a2, __int32 a3, __int32 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint8x16_t *a8, int8x8_t a9, int8x8_t a10)
{
  uint8x16_t *v10;
  uint8x16_t v11;
  uint8x16_t *v12;
  uint8x16_t v13;
  uint8x16_t *v14;
  uint8x16_t v15;
  uint8x16_t *v16;
  uint8x16_t v17;
  uint8x16_t *v18;
  uint8x16_t v19;
  uint8x16_t *v20;
  uint8x16_t v21;
  uint8x16_t *v22;
  uint8x16_t v23;
  uint8x16_t *v24;
  uint8x16_t v25;
  uint8x16_t *v26;
  uint8x16_t v27;
  uint8x16_t *v28;
  uint8x16_t v29;
  uint8x16_t *v30;
  uint8x16_t v31;
  uint8x16_t *v32;
  uint8x16_t v33;
  uint8x16_t *v34;
  uint8x16_t *v35;
  uint8x16_t v36;
  uint8x16_t *v37;
  uint8x16_t *v38;
  uint8x16_t v39;
  uint8x16_t *v40;
  uint8x16_t *v41;
  uint8x16_t v42;
  uint8x16_t *v43;
  uint8x16_t *v44;
  uint8x16_t v45;
  uint8x16_t *v46;
  uint8x16_t *v47;
  uint8x16_t v48;
  uint8x16_t *v49;
  uint8x16_t *v50;
  uint8x16_t v51;
  uint8x16_t *v52;
  uint8x16_t *v53;
  uint8x16_t v54;
  uint8x16_t *v55;
  uint8x16_t *v56;
  uint8x16_t v57;
  uint8x16_t *v58;
  uint8x16_t *v59;
  uint8x16_t v60;
  uint64_t v61;
  uint8x16_t v62;
  uint64_t v63;
  uint8x16_t v64;
  uint64_t v65;
  uint8x16_t v66;
  uint64_t v67;
  uint8x16_t v68;
  uint64_t v69;
  uint8x16_t v70;
  uint64_t v71;
  uint8x16_t v72;
  uint64_t v73;
  uint8x16_t v74;
  uint64_t v75;
  uint8x16_t v76;
  uint64_t v77;
  uint8x16_t v78;
  uint64_t v79;
  uint8x16_t v80;
  uint64_t v81;
  uint8x16_t v82;
  uint64_t v83;
  uint8x16_t v84;
  uint64_t v85;
  uint64_t v86;
  uint8x16_t v87;
  uint64_t v88;
  uint64_t v89;
  uint8x16_t v90;
  uint64_t v91;
  uint64_t v92;
  uint8x16_t v93;
  uint64_t v94;
  uint64_t v95;
  uint8x16_t v96;
  uint64_t v97;
  uint64_t v98;
  uint8x16_t v99;
  uint64_t v100;
  uint64_t v101;
  uint8x16_t v102;
  uint64_t v103;
  uint64_t v104;
  uint8x16_t v105;
  uint64_t v106;
  uint64_t v107;
  uint8x16_t v108;
  uint64_t v109;
  uint64_t v110;
  uint8x16_t v111;
  uint8x16_t v112;
  unint64_t v113;
  uint8x8_t *v114;
  uint8x16_t v115;
  uint8x16_t v116;
  uint8x16_t v117;
  uint8x16_t v118;
  uint8x16_t v119;
  uint8x16_t v120;
  uint8x16_t v121;
  uint8x16_t v122;
  uint8x16_t v123;
  uint8x16_t v124;
  uint8x16_t v125;
  uint8x16_t v126;
  uint8x16_t v127;
  uint8x16_t v128;
  uint8x16_t v129;
  uint8x16_t v130;
  uint8x16_t v131;
  uint8x16_t v132;
  uint8x16_t v133;
  uint8x16_t v134;
  unint64_t v135;
  uint8x16_t v136;
  uint8x16_t v137;
  uint8x16_t v138;
  uint8x16_t v139;
  uint8x16_t *v140;
  uint8x16_t v141;
  uint8x16_t v142;
  uint8x16_t *v143;
  uint8x16_t v144;
  uint8x16_t v145;
  uint8x16_t *v146;
  uint8x16_t v147;
  uint8x16_t v148;
  uint8x16_t *v149;
  uint8x16_t v150;
  uint8x16_t v151;
  uint8x16_t *v152;
  uint8x16_t v153;
  uint8x16_t v154;
  uint8x16_t *v155;
  uint8x16_t v156;
  uint8x16_t v157;
  uint8x16_t *v158;
  uint8x16_t v159;
  uint8x16_t v160;
  uint8x16_t *v161;
  uint8x16_t v162;
  uint8x16_t v163;
  uint8x16_t *v164;
  uint8x16_t v165;
  uint8x16_t v166;
  uint8x16_t *v167;
  uint8x16_t v168;
  uint8x16_t v169;
  uint8x16_t *v170;
  uint8x16_t v171;
  uint8x16_t v172;
  uint8x16_t *v173;
  uint8x16_t v174;
  uint8x16_t v175;
  uint8x16_t *v176;
  uint8x16_t v177;
  uint8x16_t v178;
  uint8x16_t *v179;
  uint8x16_t v180;
  uint8x16_t *v181;
  uint8x16_t v182;
  uint8x16_t v183;
  uint8x16_t *v184;
  uint8x16_t v185;
  uint8x16_t *v186;
  uint8x16_t v187;
  uint8x16_t v188;
  uint8x16_t *v189;
  uint8x16_t v190;
  uint8x16_t *v191;
  uint8x16_t v192;
  uint8x16_t v193;
  uint8x16_t *v194;
  uint8x16_t v195;
  uint8x16_t *v196;
  uint8x16_t v197;
  uint8x16_t v198;
  uint8x16_t *v199;
  uint8x16_t v200;
  uint8x16_t *v201;
  uint8x16_t v202;
  uint8x16_t v203;
  uint8x16_t *v204;
  uint8x16_t v205;
  uint8x16_t *v206;
  uint8x16_t v207;
  uint8x16_t v208;
  uint8x16_t *v209;
  uint8x16_t v210;
  uint8x16_t *v211;
  uint8x16_t v212;
  uint8x16_t v213;
  uint8x16_t *v214;
  uint8x16_t v215;
  uint8x16_t *v216;
  uint8x16_t v217;
  uint8x16_t v218;
  uint8x16_t *v219;
  uint8x16_t v220;
  uint8x16_t *v221;
  uint8x16_t v222;
  uint64_t v223;
  uint8x16_t v224;
  uint8x8_t *v225;
  uint8x16_t v226;
  uint8x16_t v227;
  uint8x16_t v228;
  uint64_t v230;
  uint64_t v231;
  uint8x16_t v232;
  uint64_t v233;
  uint64_t v234;
  uint8x16_t v235;
  uint64_t v236;
  uint8x16_t v237;
  uint64_t v238;
  uint8x16_t v239;
  uint64_t v240;
  uint8x16_t v241;
  uint64_t v242;
  uint8x16_t v243;
  uint64_t v244;
  uint8x16_t v245;
  uint64_t v246;
  uint8x16_t v247;
  uint64_t v248;
  uint8x16_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint8x16_t v270;
  uint8x16_t v271;
  uint8x16_t v272;
  uint8x16_t v273;
  uint8x16_t v274;
  uint8x16_t v275;
  uint8x16_t v276;
  uint8x16_t v277;
  uint8x16_t v278;
  uint8x16_t v279;
  uint8x16_t v280;
  uint8x16_t v281;
  uint8x16_t v282;
  uint8x16_t v283;
  uint8x16_t v284;
  unint64_t v285;
  uint8x16_t v286;
  uint64_t v287;
  uint8x16_t v288;
  uint64_t v289;
  uint8x16_t v290;
  uint64_t v291;
  uint8x16_t v292;
  uint64_t v293;
  uint8x16_t v294;
  uint64_t v295;
  uint8x16_t v296;
  uint64_t v297;
  uint8x16_t v298;
  uint64_t v299;
  uint8x16_t v300;
  uint64_t v301;
  uint8x16_t v302;
  uint64_t v303;
  uint8x16_t v304;
  uint64_t v305;
  uint8x16_t v306;
  uint64_t v307;
  uint8x16_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _OWORD *v328;
  uint8x16_t v329;
  uint8x16_t v330;
  char *v331;
  uint8x16_t v332;
  uint8x16_t v333;
  uint8x16_t v334;
  uint8x16_t v335;
  uint8x16_t v336;
  uint8x16_t v337;
  uint8x16_t v338;
  uint8x16_t v339;
  uint8x16_t v340;
  uint8x16_t v341;
  uint8x16_t v342;
  uint8x16_t v343;
  uint8x16_t v344;
  uint8x16_t v345;
  uint8x16_t v346;
  uint8x16_t v347;
  uint8x16_t v348;
  uint8x16_t v349;
  uint8x16_t v350;
  uint8x16_t v351;
  uint8x16_t v352;
  uint8x16_t v353;
  uint8x16_t v354;
  uint8x16_t v355;
  uint8x16_t v356;
  uint8x16_t v357;
  uint8x16_t v358;
  uint8x16_t v359;
  uint8x16_t v360;
  uint8x16_t v361;
  uint8x16_t v362;
  uint8x16_t v363;
  uint8x16_t v364;
  uint8x16_t v365;
  uint8x16_t v366;
  uint8x16_t v367;
  uint8x16_t v368;
  uint8x16_t v369;
  uint8x16_t v370;
  uint8x16_t v371;
  uint8x16_t v372;
  uint8x16_t v373;
  uint8x16_t v374;
  uint8x16_t v375;
  uint8x16_t v376;
  uint8x16_t v377;
  uint8x16_t v378;
  uint8x16_t v379;
  uint8x16_t v380;
  uint8x16_t v381;
  uint8x16_t v382;
  uint8x16_t v383;
  uint8x16_t v384;
  uint8x16_t v385;
  uint8x16_t v386;
  uint8x16_t v387;
  uint8x16_t v388;
  uint8x16_t v389;
  uint8x16_t v390;
  uint8x16_t v391;
  uint8x16_t v392;
  uint8x16_t v393;
  uint8x16_t v394;
  uint8x16_t v395;
  uint8x16_t v396;
  uint8x16_t v397;
  uint8x16_t v398;
  uint8x16_t v399;
  uint8x16_t v400;
  uint8x16_t v401;
  uint8x16_t v402;
  uint8x16_t v403;
  uint8x16_t v404;
  uint64_t v405;

  v405 = *MEMORY[0x24BDAC8D0];
  if (a3 != 4)
  {
    if (!a3)
    {
      if (a4 == 4)
      {
        v140 = (uint8x16_t *)(a1 + a2);
        v141 = *v140;
        v142 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)a1, *v140), *a8);
        v143 = (uint8x16_t *)((char *)v140 + a2);
        v144 = *v143;
        v145 = vrhaddq_u8(vrhaddq_u8(v141, *v143), a8[1]);
        v372 = v142;
        v373 = v145;
        v146 = (uint8x16_t *)((char *)v143 + a2);
        v147 = *v146;
        v148 = vrhaddq_u8(vrhaddq_u8(v144, *v146), a8[2]);
        v149 = (uint8x16_t *)((char *)v146 + a2);
        v150 = *v149;
        v151 = vrhaddq_u8(vrhaddq_u8(v147, *v149), a8[3]);
        v374 = v148;
        v375 = v151;
        v152 = (uint8x16_t *)((char *)v149 + a2);
        v153 = *v152;
        v154 = vrhaddq_u8(vrhaddq_u8(v150, *v152), a8[4]);
        v155 = (uint8x16_t *)((char *)v152 + a2);
        v156 = *v155;
        v157 = vrhaddq_u8(vrhaddq_u8(v153, *v155), a8[5]);
        v376 = v154;
        v377 = v157;
        v158 = (uint8x16_t *)((char *)v155 + a2);
        v159 = *v158;
        v160 = vrhaddq_u8(vrhaddq_u8(v156, *v158), a8[6]);
        v161 = (uint8x16_t *)((char *)v158 + a2);
        v162 = *v161;
        v163 = vrhaddq_u8(vrhaddq_u8(v159, *v161), a8[7]);
        v378 = v160;
        v379 = v163;
        v164 = (uint8x16_t *)((char *)v161 + a2);
        v165 = *v164;
        v166 = vrhaddq_u8(vrhaddq_u8(v162, *v164), a8[8]);
        v167 = (uint8x16_t *)((char *)v164 + a2);
        v168 = *v167;
        v169 = vrhaddq_u8(vrhaddq_u8(v165, *v167), a8[9]);
        v380 = v166;
        v381 = v169;
        v170 = (uint8x16_t *)((char *)v167 + a2);
        v171 = *v170;
        v172 = vrhaddq_u8(vrhaddq_u8(v168, *v170), a8[10]);
        v173 = (uint8x16_t *)((char *)v170 + a2);
        v174 = *v173;
        v175 = vrhaddq_u8(vrhaddq_u8(v171, *v173), a8[11]);
        v382 = v172;
        v383 = v175;
        v176 = (uint8x16_t *)((char *)v173 + a2);
        v177 = *v176;
        v178 = a8[13];
        v384 = vrhaddq_u8(vrhaddq_u8(v174, *v176), a8[12]);
        v179 = (uint8x16_t *)((char *)v176 + a2);
        v180 = *v179;
        v385 = vrhaddq_u8(vrhaddq_u8(v177, *v179), v178);
        v181 = (uint8x16_t *)((char *)v179 + a2);
        v182 = *v181;
        v183 = a8[15];
        v386 = vrhaddq_u8(vrhaddq_u8(v180, *v181), a8[14]);
        v184 = (uint8x16_t *)((char *)v181 + a2);
        v185 = *v184;
        v387 = vrhaddq_u8(vrhaddq_u8(v182, *v184), v183);
        v186 = (uint8x16_t *)((char *)v184 + a2);
        v187 = *v186;
        v188 = a8[17];
        v388 = vrhaddq_u8(vrhaddq_u8(v185, *v186), a8[16]);
        v189 = (uint8x16_t *)((char *)v186 + a2);
        v190 = *v189;
        v389 = vrhaddq_u8(vrhaddq_u8(v187, *v189), v188);
        v191 = (uint8x16_t *)((char *)v189 + a2);
        v192 = *v191;
        v193 = a8[19];
        v390 = vrhaddq_u8(vrhaddq_u8(v190, *v191), a8[18]);
        v194 = (uint8x16_t *)((char *)v191 + a2);
        v195 = *v194;
        v391 = vrhaddq_u8(vrhaddq_u8(v192, *v194), v193);
        v196 = (uint8x16_t *)((char *)v194 + a2);
        v197 = *v196;
        v198 = a8[21];
        v392 = vrhaddq_u8(vrhaddq_u8(v195, *v196), a8[20]);
        v199 = (uint8x16_t *)((char *)v196 + a2);
        v200 = *v199;
        v393 = vrhaddq_u8(vrhaddq_u8(v197, *v199), v198);
        v201 = (uint8x16_t *)((char *)v199 + a2);
        v202 = *v201;
        v203 = a8[23];
        v394 = vrhaddq_u8(vrhaddq_u8(v200, *v201), a8[22]);
        v204 = (uint8x16_t *)((char *)v201 + a2);
        v205 = *v204;
        v395 = vrhaddq_u8(vrhaddq_u8(v202, *v204), v203);
        v206 = (uint8x16_t *)((char *)v204 + a2);
        v207 = *v206;
        v208 = a8[25];
        v396 = vrhaddq_u8(vrhaddq_u8(v205, *v206), a8[24]);
        v209 = (uint8x16_t *)((char *)v206 + a2);
        v210 = *v209;
        v397 = vrhaddq_u8(vrhaddq_u8(v207, *v209), v208);
        v211 = (uint8x16_t *)((char *)v209 + a2);
        v212 = *v211;
        v213 = a8[27];
        v398 = vrhaddq_u8(vrhaddq_u8(v210, *v211), a8[26]);
        v214 = (uint8x16_t *)((char *)v211 + a2);
        v215 = *v214;
        v399 = vrhaddq_u8(vrhaddq_u8(v212, *v214), v213);
        v216 = (uint8x16_t *)((char *)v214 + a2);
        v217 = *v216;
        v218 = a8[29];
        v400 = vrhaddq_u8(vrhaddq_u8(v215, *v216), a8[28]);
        v219 = (uint8x16_t *)((char *)v216 + a2);
        v220 = *v219;
        v401 = vrhaddq_u8(vrhaddq_u8(v217, *v219), v218);
        v221 = (uint8x16_t *)((char *)v219 + a2);
        v222 = *v221;
        v402 = vrhaddq_u8(vrhaddq_u8(v220, *v221), a8[30]);
        v60 = vrhaddq_u8(v222, *(uint8x16_t *)((char *)v221 + a2));
      }
      else
      {
        if (a4)
        {
          v223 = 0;
          a9.i32[0] = 8 - a4;
          a10.i32[0] = a4;
          v224 = *(uint8x16_t *)a1;
          v225 = (uint8x8_t *)(a1 + a2);
          v226 = (uint8x16_t)vdupq_lane_s8(a9, 0);
          v227 = (uint8x16_t)vdupq_lane_s8(a10, 0);
          do
          {
            v228 = *(uint8x16_t *)v225->i8;
            *(uint8x16_t *)((char *)&v372 + v223 * 16) = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v225, *(uint8x8_t *)v227.i8), *(uint8x8_t *)v224.i8, *(uint8x8_t *)v226.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v225->i8, v227), v224, v226), 3uLL), a8[v223]);
            ++v223;
            v225 = (uint8x8_t *)((char *)v225 + a2);
            v224 = v228;
          }
          while ((_DWORD)(v223 * 16) != 512);
          return vpx_variance16x32(&v372, 16, a5, a6, a7);
        }
        v10 = (uint8x16_t *)(a1 + a2);
        v11 = vrhaddq_u8(*v10, a8[1]);
        v372 = vrhaddq_u8(*(uint8x16_t *)a1, *a8);
        v373 = v11;
        v12 = (uint8x16_t *)((char *)v10 + a2);
        v13 = vrhaddq_u8(*v12, a8[2]);
        v14 = (uint8x16_t *)((char *)v12 + a2);
        v15 = vrhaddq_u8(*v14, a8[3]);
        v374 = v13;
        v375 = v15;
        v16 = (uint8x16_t *)((char *)v14 + a2);
        v17 = vrhaddq_u8(*v16, a8[4]);
        v18 = (uint8x16_t *)((char *)v16 + a2);
        v19 = vrhaddq_u8(*v18, a8[5]);
        v376 = v17;
        v377 = v19;
        v20 = (uint8x16_t *)((char *)v18 + a2);
        v21 = vrhaddq_u8(*v20, a8[6]);
        v22 = (uint8x16_t *)((char *)v20 + a2);
        v23 = vrhaddq_u8(*v22, a8[7]);
        v378 = v21;
        v379 = v23;
        v24 = (uint8x16_t *)((char *)v22 + a2);
        v25 = vrhaddq_u8(*v24, a8[8]);
        v26 = (uint8x16_t *)((char *)v24 + a2);
        v27 = vrhaddq_u8(*v26, a8[9]);
        v380 = v25;
        v381 = v27;
        v28 = (uint8x16_t *)((char *)v26 + a2);
        v29 = vrhaddq_u8(*v28, a8[10]);
        v30 = (uint8x16_t *)((char *)v28 + a2);
        v31 = vrhaddq_u8(*v30, a8[11]);
        v382 = v29;
        v383 = v31;
        v32 = (uint8x16_t *)((char *)v30 + a2);
        v33 = a8[13];
        v384 = vrhaddq_u8(*v32, a8[12]);
        v34 = (uint8x16_t *)((char *)v32 + a2);
        v385 = vrhaddq_u8(*v34, v33);
        v35 = (uint8x16_t *)((char *)v34 + a2);
        v36 = a8[15];
        v386 = vrhaddq_u8(*v35, a8[14]);
        v37 = (uint8x16_t *)((char *)v35 + a2);
        v387 = vrhaddq_u8(*v37, v36);
        v38 = (uint8x16_t *)((char *)v37 + a2);
        v39 = a8[17];
        v388 = vrhaddq_u8(*v38, a8[16]);
        v40 = (uint8x16_t *)((char *)v38 + a2);
        v389 = vrhaddq_u8(*v40, v39);
        v41 = (uint8x16_t *)((char *)v40 + a2);
        v42 = a8[19];
        v390 = vrhaddq_u8(*v41, a8[18]);
        v43 = (uint8x16_t *)((char *)v41 + a2);
        v391 = vrhaddq_u8(*v43, v42);
        v44 = (uint8x16_t *)((char *)v43 + a2);
        v45 = a8[21];
        v392 = vrhaddq_u8(*v44, a8[20]);
        v46 = (uint8x16_t *)((char *)v44 + a2);
        v393 = vrhaddq_u8(*v46, v45);
        v47 = (uint8x16_t *)((char *)v46 + a2);
        v48 = a8[23];
        v394 = vrhaddq_u8(*v47, a8[22]);
        v49 = (uint8x16_t *)((char *)v47 + a2);
        v395 = vrhaddq_u8(*v49, v48);
        v50 = (uint8x16_t *)((char *)v49 + a2);
        v51 = a8[25];
        v396 = vrhaddq_u8(*v50, a8[24]);
        v52 = (uint8x16_t *)((char *)v50 + a2);
        v397 = vrhaddq_u8(*v52, v51);
        v53 = (uint8x16_t *)((char *)v52 + a2);
        v54 = a8[27];
        v398 = vrhaddq_u8(*v53, a8[26]);
        v55 = (uint8x16_t *)((char *)v53 + a2);
        v399 = vrhaddq_u8(*v55, v54);
        v56 = (uint8x16_t *)((char *)v55 + a2);
        v57 = a8[29];
        v400 = vrhaddq_u8(*v56, a8[28]);
        v58 = (uint8x16_t *)((char *)v56 + a2);
        v401 = vrhaddq_u8(*v58, v57);
        v59 = (uint8x16_t *)((char *)v58 + a2);
        v402 = vrhaddq_u8(*v59, a8[30]);
        v60 = *(uint8x16_t *)((char *)v59 + a2);
      }
      v112 = vrhaddq_u8(v60, a8[31]);
LABEL_21:
      v403 = v112;
      return vpx_variance16x32(&v372, 16, a5, a6, a7);
    }
    v113 = 0;
    a9.i32[0] = 8 - a3;
    a10.i32[0] = a3;
    v114 = (uint8x8_t *)(a1 + 1);
    v115 = (uint8x16_t)vdupq_lane_s8(a9, 0);
    v116 = (uint8x16_t)vdupq_lane_s8(a10, 0);
    if (a4 != 4)
    {
      if (!a4)
      {
        do
        {
          *(uint8x16_t *)((char *)&v372 + v113) = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v114, *(uint8x8_t *)v116.i8), *(uint8x8_t *)((char *)v114 - 1), *(uint8x8_t *)v115.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v114->i8, v116), *(uint8x16_t *)((char *)&v114[-1].u32[1]+ 3), v115), 3uLL), a8[v113 / 0x10]);
          v113 += 16;
          v114 = (uint8x8_t *)((char *)v114 + a2);
        }
        while ((_DWORD)v113 != 512);
        return vpx_variance16x32(&v372, 16, a5, a6, a7);
      }
      do
      {
        *(int8x16_t *)((char *)&v372 + v113) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v114, *(uint8x8_t *)v116.i8), *(uint8x8_t *)((char *)v114 - 1), *(uint8x8_t *)v115.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v114->i8, v116), *(uint8x16_t *)((char *)&v114[-1].u32[1] + 3), v115), 3uLL);
        v113 += 16;
        v114 = (uint8x8_t *)((char *)v114 + a2);
      }
      while ((_DWORD)v113 != 528);
      v135 = 0;
      v115.i32[0] = 8 - a4;
      v116.i32[0] = a4;
      v136 = v372;
      v137 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v115.i8, 0);
      v138 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v116.i8, 0);
      do
      {
        v139 = *(uint8x16_t *)((char *)&v373 + v135);
        *(uint8x16_t *)((char *)&v340 + v135) = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v139.i8, *(uint8x8_t *)v138.i8), *(uint8x8_t *)v136.i8, *(uint8x8_t *)v137.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v139, v138), v136, v137), 3uLL), a8[v135 / 0x10]);
        v135 += 16;
        v136 = v139;
      }
      while ((_DWORD)v135 != 512);
      return vpx_variance16x32(&v340, 16, a5, a6, a7);
    }
    do
    {
      *(int8x16_t *)((char *)&v372 + v113) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*v114, *(uint8x8_t *)v116.i8), *(uint8x8_t *)((char *)v114 - 1), *(uint8x8_t *)v115.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)v114->i8, v116), *(uint8x16_t *)((char *)&v114[-1].u32[1] + 3), v115), 3uLL);
      v113 += 16;
      v114 = (uint8x8_t *)((char *)v114 + a2);
    }
    while ((_DWORD)v113 != 528);
    v117 = vrhaddq_u8(vrhaddq_u8(v373, v374), a8[1]);
    v340 = vrhaddq_u8(vrhaddq_u8(v372, v373), *a8);
    v341 = v117;
    v118 = vrhaddq_u8(vrhaddq_u8(v375, v376), a8[3]);
    v342 = vrhaddq_u8(vrhaddq_u8(v374, v375), a8[2]);
    v343 = v118;
    v119 = vrhaddq_u8(vrhaddq_u8(v377, v378), a8[5]);
    v344 = vrhaddq_u8(vrhaddq_u8(v376, v377), a8[4]);
    v345 = v119;
    v120 = vrhaddq_u8(vrhaddq_u8(v379, v380), a8[7]);
    v346 = vrhaddq_u8(vrhaddq_u8(v378, v379), a8[6]);
    v347 = v120;
    v121 = vrhaddq_u8(vrhaddq_u8(v381, v382), a8[9]);
    v348 = vrhaddq_u8(vrhaddq_u8(v380, v381), a8[8]);
    v349 = v121;
    v122 = vrhaddq_u8(vrhaddq_u8(v383, v384), a8[11]);
    v350 = vrhaddq_u8(vrhaddq_u8(v382, v383), a8[10]);
    v351 = v122;
    v123 = vrhaddq_u8(vrhaddq_u8(v385, v386), a8[13]);
    v352 = vrhaddq_u8(vrhaddq_u8(v384, v385), a8[12]);
    v353 = v123;
    v124 = vrhaddq_u8(vrhaddq_u8(v387, v388), a8[15]);
    v354 = vrhaddq_u8(vrhaddq_u8(v386, v387), a8[14]);
    v355 = v124;
    v125 = vrhaddq_u8(vrhaddq_u8(v389, v390), a8[17]);
    v356 = vrhaddq_u8(vrhaddq_u8(v388, v389), a8[16]);
    v357 = v125;
    v126 = vrhaddq_u8(vrhaddq_u8(v391, v392), a8[19]);
    v358 = vrhaddq_u8(vrhaddq_u8(v390, v391), a8[18]);
    v359 = v126;
    v127 = vrhaddq_u8(vrhaddq_u8(v393, v394), a8[21]);
    v360 = vrhaddq_u8(vrhaddq_u8(v392, v393), a8[20]);
    v361 = v127;
    v128 = vrhaddq_u8(vrhaddq_u8(v395, v396), a8[23]);
    v362 = vrhaddq_u8(vrhaddq_u8(v394, v395), a8[22]);
    v363 = v128;
    v129 = vrhaddq_u8(vrhaddq_u8(v397, v398), a8[25]);
    v364 = vrhaddq_u8(vrhaddq_u8(v396, v397), a8[24]);
    v365 = v129;
    v130 = vrhaddq_u8(vrhaddq_u8(v399, v400), a8[27]);
    v366 = vrhaddq_u8(vrhaddq_u8(v398, v399), a8[26]);
    v367 = v130;
    v131 = vrhaddq_u8(vrhaddq_u8(v401, v402), a8[29]);
    v368 = vrhaddq_u8(vrhaddq_u8(v400, v401), a8[28]);
    v369 = v131;
    v132 = a8[31];
    v133 = vrhaddq_u8(vrhaddq_u8(v402, v403), a8[30]);
    v134 = vrhaddq_u8(v403, v404);
LABEL_26:
    v370 = v133;
    v371 = vrhaddq_u8(v134, v132);
    return vpx_variance16x32(&v340, 16, a5, a6, a7);
  }
  if (a4 == 4)
  {
    v230 = a1 + a2;
    v339 = vrhaddq_u8(*(uint8x16_t *)v230, *(uint8x16_t *)(v230 + 1));
    v372 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
    v373 = v339;
    v231 = v230 + a2;
    v232 = vrhaddq_u8(*(uint8x16_t *)v231, *(uint8x16_t *)(v231 + 1));
    v233 = v231 + a2;
    v338 = vrhaddq_u8(*(uint8x16_t *)v233, *(uint8x16_t *)(v233 + 1));
    v374 = v232;
    v375 = v338;
    v234 = v233 + a2;
    v235 = vrhaddq_u8(*(uint8x16_t *)v234, *(uint8x16_t *)(v234 + 1));
    v236 = v234 + a2;
    v237 = vrhaddq_u8(*(uint8x16_t *)v236, *(uint8x16_t *)(v236 + 1));
    v376 = v235;
    v377 = v237;
    v238 = v236 + a2;
    v239 = vrhaddq_u8(*(uint8x16_t *)v238, *(uint8x16_t *)(v238 + 1));
    v240 = v238 + a2;
    v241 = vrhaddq_u8(*(uint8x16_t *)v240, *(uint8x16_t *)(v240 + 1));
    v378 = v239;
    v379 = v241;
    v242 = v240 + a2;
    v243 = vrhaddq_u8(*(uint8x16_t *)v242, *(uint8x16_t *)(v242 + 1));
    v244 = v242 + a2;
    v245 = vrhaddq_u8(*(uint8x16_t *)v244, *(uint8x16_t *)(v244 + 1));
    v380 = v243;
    v381 = v245;
    v246 = v244 + a2;
    v247 = vrhaddq_u8(*(uint8x16_t *)v246, *(uint8x16_t *)(v246 + 1));
    v248 = v246 + a2;
    v249 = vrhaddq_u8(*(uint8x16_t *)v248, *(uint8x16_t *)(v248 + 1));
    v382 = v247;
    v383 = v249;
    v250 = v248 + a2;
    v384 = vrhaddq_u8(*(uint8x16_t *)v250, *(uint8x16_t *)(v250 + 1));
    v251 = v250 + a2;
    v385 = vrhaddq_u8(*(uint8x16_t *)v251, *(uint8x16_t *)(v251 + 1));
    v252 = v251 + a2;
    v386 = vrhaddq_u8(*(uint8x16_t *)v252, *(uint8x16_t *)(v252 + 1));
    v253 = v252 + a2;
    v387 = vrhaddq_u8(*(uint8x16_t *)v253, *(uint8x16_t *)(v253 + 1));
    v254 = v253 + a2;
    v388 = vrhaddq_u8(*(uint8x16_t *)v254, *(uint8x16_t *)(v254 + 1));
    v255 = v254 + a2;
    v389 = vrhaddq_u8(*(uint8x16_t *)v255, *(uint8x16_t *)(v255 + 1));
    v256 = v255 + a2;
    v390 = vrhaddq_u8(*(uint8x16_t *)v256, *(uint8x16_t *)(v256 + 1));
    v257 = v256 + a2;
    v391 = vrhaddq_u8(*(uint8x16_t *)v257, *(uint8x16_t *)(v257 + 1));
    v258 = v257 + a2;
    v392 = vrhaddq_u8(*(uint8x16_t *)v258, *(uint8x16_t *)(v258 + 1));
    v259 = v258 + a2;
    v393 = vrhaddq_u8(*(uint8x16_t *)v259, *(uint8x16_t *)(v259 + 1));
    v260 = v259 + a2;
    v394 = vrhaddq_u8(*(uint8x16_t *)v260, *(uint8x16_t *)(v260 + 1));
    v261 = v260 + a2;
    v395 = vrhaddq_u8(*(uint8x16_t *)v261, *(uint8x16_t *)(v261 + 1));
    v262 = v261 + a2;
    v396 = vrhaddq_u8(*(uint8x16_t *)v262, *(uint8x16_t *)(v262 + 1));
    v263 = v262 + a2;
    v397 = vrhaddq_u8(*(uint8x16_t *)v263, *(uint8x16_t *)(v263 + 1));
    v264 = v263 + a2;
    v398 = vrhaddq_u8(*(uint8x16_t *)v264, *(uint8x16_t *)(v264 + 1));
    v265 = v264 + a2;
    v399 = vrhaddq_u8(*(uint8x16_t *)v265, *(uint8x16_t *)(v265 + 1));
    v266 = v265 + a2;
    v400 = vrhaddq_u8(*(uint8x16_t *)v266, *(uint8x16_t *)(v266 + 1));
    v267 = v266 + a2;
    v401 = vrhaddq_u8(*(uint8x16_t *)v267, *(uint8x16_t *)(v267 + 1));
    v268 = v267 + a2;
    v402 = vrhaddq_u8(*(uint8x16_t *)v268, *(uint8x16_t *)(v268 + 1));
    v269 = v268 + a2;
    v403 = vrhaddq_u8(*(uint8x16_t *)v269, *(uint8x16_t *)(v269 + 1));
    v337 = vrhaddq_u8(*(uint8x16_t *)(v269 + a2), *(uint8x16_t *)(v269 + a2 + 1));
    v270 = vrhaddq_u8(vrhaddq_u8(v339, v232), a8[1]);
    v340 = vrhaddq_u8(vrhaddq_u8(v372, v339), *a8);
    v341 = v270;
    v271 = vrhaddq_u8(vrhaddq_u8(v338, v235), a8[3]);
    v342 = vrhaddq_u8(vrhaddq_u8(v232, v338), a8[2]);
    v343 = v271;
    v272 = vrhaddq_u8(vrhaddq_u8(v237, v239), a8[5]);
    v344 = vrhaddq_u8(vrhaddq_u8(v235, v237), a8[4]);
    v345 = v272;
    v273 = vrhaddq_u8(vrhaddq_u8(v241, v243), a8[7]);
    v346 = vrhaddq_u8(vrhaddq_u8(v239, v241), a8[6]);
    v347 = v273;
    v274 = vrhaddq_u8(vrhaddq_u8(v245, v247), a8[9]);
    v348 = vrhaddq_u8(vrhaddq_u8(v243, v245), a8[8]);
    v349 = v274;
    v275 = vrhaddq_u8(vrhaddq_u8(v249, v384), a8[11]);
    v350 = vrhaddq_u8(vrhaddq_u8(v247, v249), a8[10]);
    v351 = v275;
    v276 = vrhaddq_u8(vrhaddq_u8(v385, v386), a8[13]);
    v352 = vrhaddq_u8(vrhaddq_u8(v384, v385), a8[12]);
    v353 = v276;
    v277 = vrhaddq_u8(vrhaddq_u8(v387, v388), a8[15]);
    v354 = vrhaddq_u8(vrhaddq_u8(v386, v387), a8[14]);
    v355 = v277;
    v278 = vrhaddq_u8(vrhaddq_u8(v389, v390), a8[17]);
    v356 = vrhaddq_u8(vrhaddq_u8(v388, v389), a8[16]);
    v357 = v278;
    v279 = vrhaddq_u8(vrhaddq_u8(v391, v392), a8[19]);
    v358 = vrhaddq_u8(vrhaddq_u8(v390, v391), a8[18]);
    v359 = v279;
    v280 = vrhaddq_u8(vrhaddq_u8(v393, v394), a8[21]);
    v360 = vrhaddq_u8(vrhaddq_u8(v392, v393), a8[20]);
    v361 = v280;
    v281 = vrhaddq_u8(vrhaddq_u8(v395, v396), a8[23]);
    v362 = vrhaddq_u8(vrhaddq_u8(v394, v395), a8[22]);
    v363 = v281;
    v282 = vrhaddq_u8(vrhaddq_u8(v397, v398), a8[25]);
    v364 = vrhaddq_u8(vrhaddq_u8(v396, v397), a8[24]);
    v365 = v282;
    v283 = vrhaddq_u8(vrhaddq_u8(v399, v400), a8[27]);
    v366 = vrhaddq_u8(vrhaddq_u8(v398, v399), a8[26]);
    v367 = v283;
    v284 = vrhaddq_u8(vrhaddq_u8(v401, v402), a8[29]);
    v368 = vrhaddq_u8(vrhaddq_u8(v400, v401), a8[28]);
    v369 = v284;
    v132 = a8[31];
    v133 = vrhaddq_u8(vrhaddq_u8(v402, v403), a8[30]);
    v404 = v337;
    v134 = vrhaddq_u8(v403, v337);
    goto LABEL_26;
  }
  if (!a4)
  {
    v61 = a1 + a2;
    v62 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v61, *(uint8x16_t *)(v61 + 1)), a8[1]);
    v372 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1)), *a8);
    v373 = v62;
    v63 = v61 + a2;
    v64 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v63, *(uint8x16_t *)(v63 + 1)), a8[2]);
    v65 = v63 + a2;
    v66 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v65, *(uint8x16_t *)(v65 + 1)), a8[3]);
    v374 = v64;
    v375 = v66;
    v67 = v65 + a2;
    v68 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v67, *(uint8x16_t *)(v67 + 1)), a8[4]);
    v69 = v67 + a2;
    v70 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v69, *(uint8x16_t *)(v69 + 1)), a8[5]);
    v376 = v68;
    v377 = v70;
    v71 = v69 + a2;
    v72 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v71, *(uint8x16_t *)(v71 + 1)), a8[6]);
    v73 = v71 + a2;
    v74 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v73, *(uint8x16_t *)(v73 + 1)), a8[7]);
    v378 = v72;
    v379 = v74;
    v75 = v73 + a2;
    v76 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v75, *(uint8x16_t *)(v75 + 1)), a8[8]);
    v77 = v75 + a2;
    v78 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v77, *(uint8x16_t *)(v77 + 1)), a8[9]);
    v380 = v76;
    v381 = v78;
    v79 = v77 + a2;
    v80 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v79, *(uint8x16_t *)(v79 + 1)), a8[10]);
    v81 = v79 + a2;
    v82 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v81, *(uint8x16_t *)(v81 + 1)), a8[11]);
    v382 = v80;
    v383 = v82;
    v83 = v81 + a2;
    v84 = a8[13];
    v384 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v83, *(uint8x16_t *)(v83 + 1)), a8[12]);
    v85 = v83 + a2;
    v385 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v85, *(uint8x16_t *)(v85 + 1)), v84);
    v86 = v85 + a2;
    v87 = a8[15];
    v386 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v86, *(uint8x16_t *)(v86 + 1)), a8[14]);
    v88 = v86 + a2;
    v387 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v88, *(uint8x16_t *)(v88 + 1)), v87);
    v89 = v88 + a2;
    v90 = a8[17];
    v388 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v89, *(uint8x16_t *)(v89 + 1)), a8[16]);
    v91 = v89 + a2;
    v389 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v91, *(uint8x16_t *)(v91 + 1)), v90);
    v92 = v91 + a2;
    v93 = a8[19];
    v390 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v92, *(uint8x16_t *)(v92 + 1)), a8[18]);
    v94 = v92 + a2;
    v391 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v94, *(uint8x16_t *)(v94 + 1)), v93);
    v95 = v94 + a2;
    v96 = a8[21];
    v392 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v95, *(uint8x16_t *)(v95 + 1)), a8[20]);
    v97 = v95 + a2;
    v393 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v97, *(uint8x16_t *)(v97 + 1)), v96);
    v98 = v97 + a2;
    v99 = a8[23];
    v394 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v98, *(uint8x16_t *)(v98 + 1)), a8[22]);
    v100 = v98 + a2;
    v395 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v100, *(uint8x16_t *)(v100 + 1)), v99);
    v101 = v100 + a2;
    v102 = a8[25];
    v396 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v101, *(uint8x16_t *)(v101 + 1)), a8[24]);
    v103 = v101 + a2;
    v397 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v103, *(uint8x16_t *)(v103 + 1)), v102);
    v104 = v103 + a2;
    v105 = a8[27];
    v398 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v104, *(uint8x16_t *)(v104 + 1)), a8[26]);
    v106 = v104 + a2;
    v399 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v106, *(uint8x16_t *)(v106 + 1)), v105);
    v107 = v106 + a2;
    v108 = a8[29];
    v400 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v107, *(uint8x16_t *)(v107 + 1)), a8[28]);
    v109 = v107 + a2;
    v401 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v109, *(uint8x16_t *)(v109 + 1)), v108);
    v110 = v109 + a2;
    v111 = a8[31];
    v402 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v110, *(uint8x16_t *)(v110 + 1)), a8[30]);
    v112 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v110 + a2), *(uint8x16_t *)(v110 + a2 + 1)), v111);
    goto LABEL_21;
  }
  v285 = 0;
  v286 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
  v287 = a1 + a2;
  v288 = vrhaddq_u8(*(uint8x16_t *)v287, *(uint8x16_t *)(v287 + 1));
  v372 = v286;
  v373 = v288;
  v289 = v287 + a2;
  v290 = vrhaddq_u8(*(uint8x16_t *)v289, *(uint8x16_t *)(v289 + 1));
  v291 = v289 + a2;
  v292 = vrhaddq_u8(*(uint8x16_t *)v291, *(uint8x16_t *)(v291 + 1));
  v374 = v290;
  v375 = v292;
  v293 = v291 + a2;
  v294 = vrhaddq_u8(*(uint8x16_t *)v293, *(uint8x16_t *)(v293 + 1));
  v295 = v293 + a2;
  v296 = vrhaddq_u8(*(uint8x16_t *)v295, *(uint8x16_t *)(v295 + 1));
  v376 = v294;
  v377 = v296;
  v297 = v295 + a2;
  v298 = vrhaddq_u8(*(uint8x16_t *)v297, *(uint8x16_t *)(v297 + 1));
  v299 = v297 + a2;
  v300 = vrhaddq_u8(*(uint8x16_t *)v299, *(uint8x16_t *)(v299 + 1));
  v378 = v298;
  v379 = v300;
  v301 = v299 + a2;
  v302 = vrhaddq_u8(*(uint8x16_t *)v301, *(uint8x16_t *)(v301 + 1));
  v303 = v301 + a2;
  v304 = vrhaddq_u8(*(uint8x16_t *)v303, *(uint8x16_t *)(v303 + 1));
  v380 = v302;
  v381 = v304;
  v305 = v303 + a2;
  v306 = vrhaddq_u8(*(uint8x16_t *)v305, *(uint8x16_t *)(v305 + 1));
  v307 = v305 + a2;
  v308 = vrhaddq_u8(*(uint8x16_t *)v307, *(uint8x16_t *)(v307 + 1));
  v382 = v306;
  v383 = v308;
  v309 = v307 + a2;
  v384 = vrhaddq_u8(*(uint8x16_t *)v309, *(uint8x16_t *)(v309 + 1));
  v310 = v309 + a2;
  v385 = vrhaddq_u8(*(uint8x16_t *)v310, *(uint8x16_t *)(v310 + 1));
  v311 = v310 + a2;
  v386 = vrhaddq_u8(*(uint8x16_t *)v311, *(uint8x16_t *)(v311 + 1));
  v312 = v311 + a2;
  v387 = vrhaddq_u8(*(uint8x16_t *)v312, *(uint8x16_t *)(v312 + 1));
  v313 = v312 + a2;
  v388 = vrhaddq_u8(*(uint8x16_t *)v313, *(uint8x16_t *)(v313 + 1));
  v314 = v313 + a2;
  v389 = vrhaddq_u8(*(uint8x16_t *)v314, *(uint8x16_t *)(v314 + 1));
  v315 = v314 + a2;
  v390 = vrhaddq_u8(*(uint8x16_t *)v315, *(uint8x16_t *)(v315 + 1));
  v316 = v315 + a2;
  v391 = vrhaddq_u8(*(uint8x16_t *)v316, *(uint8x16_t *)(v316 + 1));
  v317 = v316 + a2;
  v392 = vrhaddq_u8(*(uint8x16_t *)v317, *(uint8x16_t *)(v317 + 1));
  v318 = v317 + a2;
  v393 = vrhaddq_u8(*(uint8x16_t *)v318, *(uint8x16_t *)(v318 + 1));
  v319 = v318 + a2;
  v394 = vrhaddq_u8(*(uint8x16_t *)v319, *(uint8x16_t *)(v319 + 1));
  v320 = v319 + a2;
  v395 = vrhaddq_u8(*(uint8x16_t *)v320, *(uint8x16_t *)(v320 + 1));
  v321 = v320 + a2;
  v396 = vrhaddq_u8(*(uint8x16_t *)v321, *(uint8x16_t *)(v321 + 1));
  v322 = v321 + a2;
  v397 = vrhaddq_u8(*(uint8x16_t *)v322, *(uint8x16_t *)(v322 + 1));
  v323 = v322 + a2;
  v398 = vrhaddq_u8(*(uint8x16_t *)v323, *(uint8x16_t *)(v323 + 1));
  v324 = v323 + a2;
  v399 = vrhaddq_u8(*(uint8x16_t *)v324, *(uint8x16_t *)(v324 + 1));
  v325 = v324 + a2;
  v400 = vrhaddq_u8(*(uint8x16_t *)v325, *(uint8x16_t *)(v325 + 1));
  v326 = v325 + a2;
  v401 = vrhaddq_u8(*(uint8x16_t *)v326, *(uint8x16_t *)(v326 + 1));
  v327 = v326 + a2;
  v402 = vrhaddq_u8(*(uint8x16_t *)v327, *(uint8x16_t *)(v327 + 1));
  v328 = (_OWORD *)(v327 + a2);
  v329 = *(uint8x16_t *)v328;
  v330 = *(uint8x16_t *)((char *)v328 + 1);
  v331 = (char *)v328 + a2;
  v403 = vrhaddq_u8(v329, v330);
  v332 = *(uint8x16_t *)(v331 + 1);
  v333 = vrhaddq_u8(*(uint8x16_t *)v331, v332);
  v404 = v333;
  v333.i32[0] = 8 - a4;
  v332.i32[0] = a4;
  v334 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v333.i8, 0);
  v335 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v332.i8, 0);
  do
  {
    v336 = *(uint8x16_t *)((char *)&v373 + v285);
    *(uint8x16_t *)((char *)&v340 + v285) = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v336.i8, *(uint8x8_t *)v335.i8), *(uint8x8_t *)v286.i8, *(uint8x8_t *)v334.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v336, v335), v286, v334), 3uLL), a8[v285 / 0x10]);
    v285 += 16;
    v286 = v336;
  }
  while ((_DWORD)v285 != 512);
  return vpx_variance16x32(&v340, 16, a5, a6, a7);
}

uint64_t vpx_sub_pixel_avg_variance32x16_neon(uint64_t a1, int a2, __int32 a3, __int32 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint8x16_t *a8, int8x8_t a9, int8x8_t a10)
{
  uint8x16_t v10;
  uint8x16_t *v11;
  uint8x16_t v12;
  uint8x16_t *v13;
  uint8x16_t v14;
  uint8x16_t *v15;
  uint8x16_t v16;
  uint8x16_t *v17;
  uint8x16_t v18;
  uint8x16_t *v19;
  uint8x16_t v20;
  uint8x16_t *v21;
  uint8x16_t v22;
  uint8x16_t *v23;
  uint8x16_t v24;
  uint8x16_t *v25;
  uint8x16_t v26;
  uint8x16_t *v27;
  uint8x16_t v28;
  uint8x16_t *v29;
  uint8x16_t v30;
  uint8x16_t *v31;
  uint8x16_t v32;
  uint8x16_t *v33;
  uint8x16_t v34;
  uint8x16_t *v35;
  uint8x16_t v36;
  uint8x16_t *v37;
  uint8x16_t v38;
  uint8x16_t *v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  uint64_t v43;
  uint8x16_t v44;
  uint64_t v45;
  uint8x16_t v46;
  uint64_t v47;
  uint8x16_t v48;
  uint64_t v49;
  uint8x16_t v50;
  uint64_t v51;
  uint8x16_t v52;
  uint64_t v53;
  uint8x16_t v54;
  uint64_t v55;
  uint8x16_t v56;
  uint64_t v57;
  uint8x16_t v58;
  uint64_t v59;
  uint8x16_t v60;
  uint64_t v61;
  uint8x16_t v62;
  uint64_t v63;
  uint8x16_t v64;
  uint64_t v65;
  uint8x16_t v66;
  uint64_t v67;
  uint8x16_t v68;
  uint64_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  uint8x16_t *v72;
  int v73;
  uint8x16_t v74;
  uint8x16_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint8x16_t v79;
  uint8x16_t *v80;
  uint8x16_t v81;
  uint8x16_t v82;
  uint8x16_t v83;
  uint8x16_t *v84;
  uint8x16_t v85;
  uint8x16_t v86;
  uint8x16_t v87;
  uint8x16_t *v88;
  uint8x16_t v89;
  uint8x16_t v90;
  uint8x16_t v91;
  uint8x16_t *v92;
  uint8x16_t v93;
  uint8x16_t v94;
  uint8x16_t v95;
  uint8x16_t *v96;
  uint8x16_t v97;
  uint8x16_t v98;
  uint8x16_t v99;
  uint8x16_t *v100;
  uint8x16_t v101;
  uint8x16_t v102;
  uint8x16_t v103;
  uint8x16_t *v104;
  uint8x16_t v105;
  uint8x16_t v106;
  uint8x16_t v107;
  uint8x16_t *v108;
  uint8x16_t v109;
  uint8x16_t v110;
  uint8x16_t v111;
  uint8x16_t *v112;
  uint8x16_t v113;
  uint8x16_t v114;
  uint8x16_t v115;
  uint8x16_t *v116;
  uint8x16_t v117;
  uint8x16_t v118;
  uint8x16_t v119;
  uint8x16_t *v120;
  uint8x16_t v121;
  uint8x16_t v122;
  uint8x16_t v123;
  uint8x16_t *v124;
  uint8x16_t v125;
  uint8x16_t v126;
  uint8x16_t v127;
  uint8x16_t *v128;
  uint8x16_t v129;
  uint8x16_t v130;
  uint8x16_t v131;
  uint8x16_t *v132;
  uint8x16_t v133;
  uint8x16_t v134;
  uint8x16_t v135;
  uint8x16_t *v136;
  uint8x16_t v137;
  uint8x16_t v138;
  uint8x16_t v139;
  uint8x16_t *v140;
  uint8x16_t *v141;
  int v142;
  uint8x16_t v143;
  uint8x16_t v144;
  uint64_t v145;
  char v146;
  char v147;
  uint8x16_t v148;
  uint64_t v150;
  uint64_t v151;
  uint8x16_t v152;
  uint64_t v153;
  uint8x16_t v154;
  uint64_t v155;
  uint8x16_t v156;
  uint64_t v157;
  uint8x16_t v158;
  uint64_t v159;
  uint8x16_t v160;
  uint64_t v161;
  uint8x16_t v162;
  uint64_t v163;
  uint8x16_t v164;
  uint64_t v165;
  uint8x16_t v166;
  uint64_t v167;
  uint8x16_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint8x16_t v174;
  uint8x16_t v175;
  uint8x16_t v176;
  uint8x16_t v177;
  uint8x16_t v178;
  uint8x16_t v179;
  uint8x16_t v180;
  uint8x16_t v181;
  uint8x16_t v182;
  uint8x16_t v183;
  uint8x16_t v184;
  uint8x16_t v185;
  uint8x16_t v186;
  uint8x16_t v187;
  uint8x16_t v188;
  uint8x16_t v189;
  uint8x16_t v190;
  uint8x16_t v191;
  uint8x16_t v192;
  uint8x16_t v193;
  uint64_t v194;
  uint8x16_t v195;
  uint64_t v196;
  uint8x16_t v197;
  uint64_t v198;
  uint8x16_t v199;
  uint64_t v200;
  uint8x16_t v201;
  uint64_t v202;
  uint8x16_t v203;
  uint64_t v204;
  uint8x16_t v205;
  uint64_t v206;
  uint8x16_t v207;
  uint64_t v208;
  uint8x16_t v209;
  uint64_t v210;
  uint8x16_t v211;
  uint64_t v212;
  uint8x16_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint8x16_t v219;
  uint8x16_t v220;
  uint8x16_t *v221;
  uint8x16_t *v222;
  int v223;
  uint8x16_t v224;
  uint8x16_t v225;
  uint64_t v226;
  char v227;
  char v228;
  uint8x16_t v229;
  int v230;
  uint8x16_t v231;
  uint8x16_t v232;
  uint64_t v233;
  char v234;
  char v235;
  uint8x16_t v236;
  uint8x16_t v237;
  uint8x16_t v238;
  uint8x16_t v239;
  uint8x16_t v240;
  uint8x16_t v241;
  uint8x16_t v242;
  uint8x16_t v243;
  uint8x16_t v244;
  uint8x16_t v245;
  uint8x16_t v246;
  uint8x16_t v247;
  uint8x16_t v248;
  uint8x16_t v249;
  uint8x16_t v250;
  int v251;
  uint8x16_t v252;
  uint8x16_t v253;
  uint64_t v254;
  char v255;
  char v256;
  uint8x16_t *v257;
  uint8x16_t *v258;
  int v259;
  uint8x16_t v260;
  uint8x16_t v261;
  uint64_t v262;
  char v263;
  char v264;
  uint8x16_t v265;
  uint8x16_t v266;
  uint8x16_t v267;
  uint8x16_t v268;
  uint8x16_t v269;
  uint8x16_t v270;
  uint8x16_t v271;
  uint8x16_t v272;
  uint8x16_t v273;
  uint8x16_t v274;
  uint8x16_t v275;
  uint8x16_t v276;
  uint8x16_t v277;
  uint8x16_t v278;
  uint8x16_t v279;
  uint8x16_t v280;
  uint8x16_t v281;
  uint8x16_t v282;
  uint8x16_t v283;
  uint8x16_t v284;
  uint8x16_t v285;
  uint8x16_t v286;
  uint8x16_t v287;
  uint8x16_t v288;
  uint8x16_t v289;
  uint8x16_t v290;
  uint8x16_t v291;
  uint8x16_t v292;
  uint8x16_t v293;
  uint8x16_t v294;
  uint8x16_t v295;
  uint8x16_t v296;
  uint8x16_t v297;
  uint8x16_t v298;
  uint8x16_t v299;
  uint8x16_t v300;
  uint8x16_t v301;
  uint8x16_t v302;
  uint8x16_t v303;
  uint8x16_t v304;
  uint8x16_t v305;
  uint8x16_t v306;
  uint8x16_t v307;
  uint8x16_t v308;
  uint8x16_t v309;
  uint8x16_t v310;
  uint8x16_t v311;
  uint8x16_t v312;
  uint8x16_t v313;
  uint8x16_t v314;
  uint8x16_t v315;
  uint8x16_t v316;
  uint8x16_t v317;
  uint8x16_t v318;
  uint8x16_t v319;
  uint8x16_t v320;
  uint8x16_t v321;
  uint8x16_t v322;
  uint8x16_t v323;
  uint8x16_t v324;
  uint8x16_t v325;
  uint8x16_t v326;
  uint8x16_t v327;
  uint8x16_t v328;
  uint8x16_t v329;
  uint8x16_t v330;
  uint8x16_t v331;
  uint8x16_t v332;
  uint8x16_t v333;
  uint8x16_t v334;
  uint8x16_t v335;
  uint64_t v336;

  v336 = *MEMORY[0x24BDAC8D0];
  if (a3 != 4)
  {
    if (!a3)
    {
      if (a4 == 4)
      {
        v80 = (uint8x16_t *)(a1 + a2);
        v81 = *v80;
        v82 = *(uint8x16_t *)(a1 + 16 + a2);
        v83 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(a1 + 16), v82), a8[1]);
        v302 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)a1, *v80), *a8);
        v303 = v83;
        v84 = (uint8x16_t *)((char *)v80 + a2);
        v85 = *v84;
        v86 = v84[1];
        v87 = vrhaddq_u8(vrhaddq_u8(v82, v86), a8[3]);
        v304 = vrhaddq_u8(vrhaddq_u8(v81, *v84), a8[2]);
        v305 = v87;
        v88 = (uint8x16_t *)((char *)v84 + a2);
        v89 = *v88;
        v90 = v88[1];
        v91 = vrhaddq_u8(vrhaddq_u8(v86, v90), a8[5]);
        v306 = vrhaddq_u8(vrhaddq_u8(v85, *v88), a8[4]);
        v307 = v91;
        v92 = (uint8x16_t *)((char *)v88 + a2);
        v93 = *v92;
        v94 = v92[1];
        v95 = vrhaddq_u8(vrhaddq_u8(v90, v94), a8[7]);
        v308 = vrhaddq_u8(vrhaddq_u8(v89, *v92), a8[6]);
        v309 = v95;
        v96 = (uint8x16_t *)((char *)v92 + a2);
        v97 = *v96;
        v98 = v96[1];
        v99 = vrhaddq_u8(vrhaddq_u8(v94, v98), a8[9]);
        v310 = vrhaddq_u8(vrhaddq_u8(v93, *v96), a8[8]);
        v311 = v99;
        v100 = (uint8x16_t *)((char *)v96 + a2);
        v101 = *v100;
        v102 = v100[1];
        v103 = vrhaddq_u8(vrhaddq_u8(v98, v102), a8[11]);
        v312 = vrhaddq_u8(vrhaddq_u8(v97, *v100), a8[10]);
        v313 = v103;
        v104 = (uint8x16_t *)((char *)v100 + a2);
        v105 = *v104;
        v106 = v104[1];
        v107 = vrhaddq_u8(vrhaddq_u8(v102, v106), a8[13]);
        v314 = vrhaddq_u8(vrhaddq_u8(v101, *v104), a8[12]);
        v315 = v107;
        v108 = (uint8x16_t *)((char *)v104 + a2);
        v109 = *v108;
        v110 = v108[1];
        v111 = vrhaddq_u8(vrhaddq_u8(v106, v110), a8[15]);
        v316 = vrhaddq_u8(vrhaddq_u8(v105, *v108), a8[14]);
        v317 = v111;
        v112 = (uint8x16_t *)((char *)v108 + a2);
        v113 = *v112;
        v114 = v112[1];
        v115 = vrhaddq_u8(vrhaddq_u8(v110, v114), a8[17]);
        v318 = vrhaddq_u8(vrhaddq_u8(v109, *v112), a8[16]);
        v319 = v115;
        v116 = (uint8x16_t *)((char *)v112 + a2);
        v117 = *v116;
        v118 = v116[1];
        v119 = vrhaddq_u8(vrhaddq_u8(v114, v118), a8[19]);
        v320 = vrhaddq_u8(vrhaddq_u8(v113, *v116), a8[18]);
        v321 = v119;
        v120 = (uint8x16_t *)((char *)v116 + a2);
        v121 = *v120;
        v122 = v120[1];
        v123 = a8[21];
        v322 = vrhaddq_u8(vrhaddq_u8(v117, *v120), a8[20]);
        v323 = vrhaddq_u8(vrhaddq_u8(v118, v122), v123);
        v124 = (uint8x16_t *)((char *)v120 + a2);
        v125 = *v124;
        v126 = a8[23];
        v324 = vrhaddq_u8(vrhaddq_u8(v121, *v124), a8[22]);
        v127 = v124[1];
        v325 = vrhaddq_u8(vrhaddq_u8(v122, v127), v126);
        v128 = (uint8x16_t *)((char *)v124 + a2);
        v129 = *v128;
        v130 = a8[25];
        v326 = vrhaddq_u8(vrhaddq_u8(v125, *v128), a8[24]);
        v131 = v128[1];
        v327 = vrhaddq_u8(vrhaddq_u8(v127, v131), v130);
        v132 = (uint8x16_t *)((char *)v128 + a2);
        v133 = *v132;
        v134 = a8[27];
        v328 = vrhaddq_u8(vrhaddq_u8(v129, *v132), a8[26]);
        v135 = v132[1];
        v329 = vrhaddq_u8(vrhaddq_u8(v131, v135), v134);
        v136 = (uint8x16_t *)((char *)v132 + a2);
        v137 = *v136;
        v138 = a8[29];
        v330 = vrhaddq_u8(vrhaddq_u8(v133, *v136), a8[28]);
        v139 = v136[1];
        v331 = vrhaddq_u8(vrhaddq_u8(v135, v139), v138);
        v140 = (uint8x16_t *)((char *)v136 + a2);
        v332 = vrhaddq_u8(vrhaddq_u8(v137, *v140), a8[30]);
        v40 = vrhaddq_u8(v139, v140[1]);
      }
      else
      {
        if (a4)
        {
          a9.i32[0] = 8 - a4;
          a10.i32[0] = a4;
          v141 = &v302;
          v142 = 16;
          v143 = (uint8x16_t)vdupq_lane_s8(a9, 0);
          v144 = (uint8x16_t)vdupq_lane_s8(a10, 0);
          do
          {
            v145 = 0;
            v146 = 1;
            do
            {
              v147 = v146;
              v148 = *a8++;
              v141[(unint64_t)v145 / 0x10] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v145 + a2), *(uint8x8_t *)v144.i8), *(uint8x8_t *)(a1 + v145), *(uint8x8_t *)v143.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v145 + a2), v144), *(uint8x16_t *)(a1 + v145), v143), 3uLL), v148);
              v145 = 16;
              v146 = 0;
            }
            while ((v147 & 1) != 0);
            a1 += a2;
            v141 += 2;
            --v142;
          }
          while (v142);
          return vpx_variance32x16(&v302, 32, a5, a6, a7);
        }
        v10 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), a8[1]);
        v302 = vrhaddq_u8(*(uint8x16_t *)a1, *a8);
        v303 = v10;
        v11 = (uint8x16_t *)(a1 + a2);
        v12 = vrhaddq_u8(v11[1], a8[3]);
        v304 = vrhaddq_u8(*v11, a8[2]);
        v305 = v12;
        v13 = (uint8x16_t *)((char *)v11 + a2);
        v14 = vrhaddq_u8(v13[1], a8[5]);
        v306 = vrhaddq_u8(*v13, a8[4]);
        v307 = v14;
        v15 = (uint8x16_t *)((char *)v13 + a2);
        v16 = vrhaddq_u8(v15[1], a8[7]);
        v308 = vrhaddq_u8(*v15, a8[6]);
        v309 = v16;
        v17 = (uint8x16_t *)((char *)v15 + a2);
        v18 = vrhaddq_u8(v17[1], a8[9]);
        v310 = vrhaddq_u8(*v17, a8[8]);
        v311 = v18;
        v19 = (uint8x16_t *)((char *)v17 + a2);
        v20 = vrhaddq_u8(v19[1], a8[11]);
        v312 = vrhaddq_u8(*v19, a8[10]);
        v313 = v20;
        v21 = (uint8x16_t *)((char *)v19 + a2);
        v22 = vrhaddq_u8(v21[1], a8[13]);
        v314 = vrhaddq_u8(*v21, a8[12]);
        v315 = v22;
        v23 = (uint8x16_t *)((char *)v21 + a2);
        v24 = vrhaddq_u8(v23[1], a8[15]);
        v316 = vrhaddq_u8(*v23, a8[14]);
        v317 = v24;
        v25 = (uint8x16_t *)((char *)v23 + a2);
        v26 = vrhaddq_u8(v25[1], a8[17]);
        v318 = vrhaddq_u8(*v25, a8[16]);
        v319 = v26;
        v27 = (uint8x16_t *)((char *)v25 + a2);
        v28 = vrhaddq_u8(v27[1], a8[19]);
        v320 = vrhaddq_u8(*v27, a8[18]);
        v321 = v28;
        v29 = (uint8x16_t *)((char *)v27 + a2);
        v30 = vrhaddq_u8(v29[1], a8[21]);
        v322 = vrhaddq_u8(*v29, a8[20]);
        v323 = v30;
        v31 = (uint8x16_t *)((char *)v29 + a2);
        v32 = vrhaddq_u8(v31[1], a8[23]);
        v324 = vrhaddq_u8(*v31, a8[22]);
        v325 = v32;
        v33 = (uint8x16_t *)((char *)v31 + a2);
        v34 = a8[25];
        v326 = vrhaddq_u8(*v33, a8[24]);
        v327 = vrhaddq_u8(v33[1], v34);
        v35 = (uint8x16_t *)((char *)v33 + a2);
        v36 = a8[27];
        v328 = vrhaddq_u8(*v35, a8[26]);
        v329 = vrhaddq_u8(v35[1], v36);
        v37 = (uint8x16_t *)((char *)v35 + a2);
        v38 = a8[29];
        v330 = vrhaddq_u8(*v37, a8[28]);
        v331 = vrhaddq_u8(v37[1], v38);
        v39 = (uint8x16_t *)((char *)v37 + a2);
        v332 = vrhaddq_u8(*v39, a8[30]);
        v40 = v39[1];
      }
      v71 = vrhaddq_u8(v40, a8[31]);
LABEL_18:
      v333 = v71;
      return vpx_variance32x16(&v302, 32, a5, a6, a7);
    }
    a9.i32[0] = 8 - a3;
    a10.i32[0] = a3;
    v72 = &v302;
    if (a4 != 4)
    {
      if (!a4)
      {
        v73 = 16;
        v74 = (uint8x16_t)vdupq_lane_s8(a9, 0);
        v75 = (uint8x16_t)vdupq_lane_s8(a10, 0);
        do
        {
          v76 = 0;
          v77 = 1;
          do
          {
            v78 = v77;
            v79 = *a8++;
            v72[(unint64_t)v76 / 0x10] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v76 + 1), *(uint8x8_t *)v75.i8), *(uint8x8_t *)(a1 + v76), *(uint8x8_t *)v74.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v76 + 1), v75), *(uint8x16_t *)(a1 + v76), v74), 3uLL), v79);
            v76 = 16;
            v77 = 0;
          }
          while ((v78 & 1) != 0);
          a1 += a2;
          v72 += 2;
          --v73;
        }
        while (v73);
        return vpx_variance32x16(&v302, 32, a5, a6, a7);
      }
      v251 = 17;
      v252 = (uint8x16_t)vdupq_lane_s8(a9, 0);
      v253 = (uint8x16_t)vdupq_lane_s8(a10, 0);
      do
      {
        v254 = 0;
        v255 = 1;
        do
        {
          v256 = v255;
          v72[(unint64_t)v254 / 0x10] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v254 + 1), *(uint8x8_t *)v253.i8), *(uint8x8_t *)(a1 + v254), *(uint8x8_t *)v252.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v254 + 1), v253), *(uint8x16_t *)(a1 + v254), v252), 3uLL);
          v254 = 16;
          v255 = 0;
        }
        while ((v256 & 1) != 0);
        a1 += a2;
        v72 += 2;
        --v251;
      }
      while (v251);
      v252.i32[0] = 8 - a4;
      v253.i32[0] = a4;
      v257 = &v302;
      v258 = &v270;
      v259 = 16;
      v260 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v252.i8, 0);
      v261 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v253.i8, 0);
      do
      {
        v262 = 0;
        v263 = 1;
        do
        {
          v264 = v263;
          v265 = *a8++;
          v258[v262] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v257[v262 + 2].i8, *(uint8x8_t *)v261.i8), *(uint8x8_t *)v257[v262].i8, *(uint8x8_t *)v260.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v257[v262 + 2], v261), v257[v262], v260), 3uLL), v265);
          v262 = 1;
          v263 = 0;
        }
        while ((v264 & 1) != 0);
        v257 += 2;
        v258 += 2;
        --v259;
      }
      while (v259);
      return vpx_variance32x16(&v270, 32, a5, a6, a7);
    }
    v230 = 17;
    v231 = (uint8x16_t)vdupq_lane_s8(a9, 0);
    v232 = (uint8x16_t)vdupq_lane_s8(a10, 0);
    do
    {
      v233 = 0;
      v234 = 1;
      do
      {
        v235 = v234;
        v72[(unint64_t)v233 / 0x10] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v233 + 1), *(uint8x8_t *)v232.i8), *(uint8x8_t *)(a1 + v233), *(uint8x8_t *)v231.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v233 + 1), v232), *(uint8x16_t *)(a1 + v233), v231), 3uLL);
        v233 = 16;
        v234 = 0;
      }
      while ((v235 & 1) != 0);
      a1 += a2;
      v72 += 2;
      --v230;
    }
    while (v230);
    v236 = vrhaddq_u8(vrhaddq_u8(v303, v305), a8[1]);
    v270 = vrhaddq_u8(vrhaddq_u8(v302, v304), *a8);
    v271 = v236;
    v237 = vrhaddq_u8(vrhaddq_u8(v305, v307), a8[3]);
    v272 = vrhaddq_u8(vrhaddq_u8(v304, v306), a8[2]);
    v273 = v237;
    v238 = vrhaddq_u8(vrhaddq_u8(v307, v309), a8[5]);
    v274 = vrhaddq_u8(vrhaddq_u8(v306, v308), a8[4]);
    v275 = v238;
    v239 = vrhaddq_u8(vrhaddq_u8(v309, v311), a8[7]);
    v276 = vrhaddq_u8(vrhaddq_u8(v308, v310), a8[6]);
    v277 = v239;
    v240 = vrhaddq_u8(vrhaddq_u8(v311, v313), a8[9]);
    v278 = vrhaddq_u8(vrhaddq_u8(v310, v312), a8[8]);
    v279 = v240;
    v241 = vrhaddq_u8(vrhaddq_u8(v313, v315), a8[11]);
    v280 = vrhaddq_u8(vrhaddq_u8(v312, v314), a8[10]);
    v281 = v241;
    v242 = vrhaddq_u8(vrhaddq_u8(v315, v317), a8[13]);
    v282 = vrhaddq_u8(vrhaddq_u8(v314, v316), a8[12]);
    v283 = v242;
    v243 = vrhaddq_u8(vrhaddq_u8(v317, v319), a8[15]);
    v284 = vrhaddq_u8(vrhaddq_u8(v316, v318), a8[14]);
    v285 = v243;
    v244 = vrhaddq_u8(vrhaddq_u8(v319, v321), a8[17]);
    v286 = vrhaddq_u8(vrhaddq_u8(v318, v320), a8[16]);
    v287 = v244;
    v245 = vrhaddq_u8(vrhaddq_u8(v321, v323), a8[19]);
    v288 = vrhaddq_u8(vrhaddq_u8(v320, v322), a8[18]);
    v289 = v245;
    v246 = vrhaddq_u8(vrhaddq_u8(v323, v325), a8[21]);
    v290 = vrhaddq_u8(vrhaddq_u8(v322, v324), a8[20]);
    v291 = v246;
    v247 = vrhaddq_u8(vrhaddq_u8(v325, v327), a8[23]);
    v292 = vrhaddq_u8(vrhaddq_u8(v324, v326), a8[22]);
    v293 = v247;
    v248 = vrhaddq_u8(vrhaddq_u8(v327, v329), a8[25]);
    v294 = vrhaddq_u8(vrhaddq_u8(v326, v328), a8[24]);
    v295 = v248;
    v249 = vrhaddq_u8(vrhaddq_u8(v329, v331), a8[27]);
    v296 = vrhaddq_u8(vrhaddq_u8(v328, v330), a8[26]);
    v297 = v249;
    v250 = a8[29];
    v298 = vrhaddq_u8(vrhaddq_u8(v330, v332), a8[28]);
    v299 = vrhaddq_u8(vrhaddq_u8(v331, v333), v250);
    v190 = vrhaddq_u8(vrhaddq_u8(v332, v334), a8[30]);
    v191 = vrhaddq_u8(vrhaddq_u8(v333, v335), a8[31]);
LABEL_35:
    v300 = v190;
    v301 = v191;
    return vpx_variance32x16(&v270, 32, a5, a6, a7);
  }
  if (a4 == 4)
  {
    v269 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), *(uint8x16_t *)(a1 + 17));
    v302 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
    v303 = v269;
    v268 = vrhaddq_u8(*(uint8x16_t *)(a1 + a2 + 16), *(uint8x16_t *)(a1 + a2 + 17));
    v304 = vrhaddq_u8(*(uint8x16_t *)(a1 + a2), *(uint8x16_t *)(a1 + a2 + 1));
    v305 = v268;
    v150 = a1 + a2 + a2;
    v267 = vrhaddq_u8(*(uint8x16_t *)(v150 + 16), *(uint8x16_t *)(v150 + 17));
    v306 = vrhaddq_u8(*(uint8x16_t *)v150, *(uint8x16_t *)(v150 + 1));
    v307 = v267;
    v151 = v150 + a2;
    v152 = vrhaddq_u8(*(uint8x16_t *)(v151 + 16), *(uint8x16_t *)(v151 + 17));
    v308 = vrhaddq_u8(*(uint8x16_t *)v151, *(uint8x16_t *)(v151 + 1));
    v309 = v152;
    v153 = v151 + a2;
    v154 = vrhaddq_u8(*(uint8x16_t *)(v153 + 16), *(uint8x16_t *)(v153 + 17));
    v310 = vrhaddq_u8(*(uint8x16_t *)v153, *(uint8x16_t *)(v153 + 1));
    v311 = v154;
    v155 = v153 + a2;
    v156 = vrhaddq_u8(*(uint8x16_t *)(v155 + 16), *(uint8x16_t *)(v155 + 17));
    v312 = vrhaddq_u8(*(uint8x16_t *)v155, *(uint8x16_t *)(v155 + 1));
    v313 = v156;
    v157 = v155 + a2;
    v158 = vrhaddq_u8(*(uint8x16_t *)(v157 + 16), *(uint8x16_t *)(v157 + 17));
    v314 = vrhaddq_u8(*(uint8x16_t *)v157, *(uint8x16_t *)(v157 + 1));
    v315 = v158;
    v159 = v157 + a2;
    v160 = vrhaddq_u8(*(uint8x16_t *)(v159 + 16), *(uint8x16_t *)(v159 + 17));
    v316 = vrhaddq_u8(*(uint8x16_t *)v159, *(uint8x16_t *)(v159 + 1));
    v317 = v160;
    v161 = v159 + a2;
    v162 = vrhaddq_u8(*(uint8x16_t *)(v161 + 16), *(uint8x16_t *)(v161 + 17));
    v318 = vrhaddq_u8(*(uint8x16_t *)v161, *(uint8x16_t *)(v161 + 1));
    v319 = v162;
    v163 = v161 + a2;
    v164 = vrhaddq_u8(*(uint8x16_t *)(v163 + 16), *(uint8x16_t *)(v163 + 17));
    v320 = vrhaddq_u8(*(uint8x16_t *)v163, *(uint8x16_t *)(v163 + 1));
    v321 = v164;
    v165 = v163 + a2;
    v166 = vrhaddq_u8(*(uint8x16_t *)(v165 + 16), *(uint8x16_t *)(v165 + 17));
    v322 = vrhaddq_u8(*(uint8x16_t *)v165, *(uint8x16_t *)(v165 + 1));
    v323 = v166;
    v167 = v165 + a2;
    v168 = vrhaddq_u8(*(uint8x16_t *)(v167 + 16), *(uint8x16_t *)(v167 + 17));
    v324 = vrhaddq_u8(*(uint8x16_t *)v167, *(uint8x16_t *)(v167 + 1));
    v325 = v168;
    v169 = v167 + a2;
    v326 = vrhaddq_u8(*(uint8x16_t *)v169, *(uint8x16_t *)(v169 + 1));
    v327 = vrhaddq_u8(*(uint8x16_t *)(v169 + 16), *(uint8x16_t *)(v169 + 17));
    v170 = v169 + a2;
    v328 = vrhaddq_u8(*(uint8x16_t *)v170, *(uint8x16_t *)(v170 + 1));
    v329 = vrhaddq_u8(*(uint8x16_t *)(v170 + 16), *(uint8x16_t *)(v170 + 17));
    v171 = v170 + a2;
    v330 = vrhaddq_u8(*(uint8x16_t *)v171, *(uint8x16_t *)(v171 + 1));
    v331 = vrhaddq_u8(*(uint8x16_t *)(v171 + 16), *(uint8x16_t *)(v171 + 17));
    v172 = v171 + a2;
    v332 = vrhaddq_u8(*(uint8x16_t *)v172, *(uint8x16_t *)(v172 + 1));
    v333 = vrhaddq_u8(*(uint8x16_t *)(v172 + 16), *(uint8x16_t *)(v172 + 17));
    v173 = v172 + a2;
    v334 = vrhaddq_u8(*(uint8x16_t *)v173, *(uint8x16_t *)(v173 + 1));
    v266 = vrhaddq_u8(*(uint8x16_t *)(v173 + 16), *(uint8x16_t *)(v173 + 17));
    v174 = vrhaddq_u8(vrhaddq_u8(v269, v268), a8[1]);
    v270 = vrhaddq_u8(vrhaddq_u8(v302, v304), *a8);
    v271 = v174;
    v175 = vrhaddq_u8(vrhaddq_u8(v268, v267), a8[3]);
    v272 = vrhaddq_u8(vrhaddq_u8(v304, v306), a8[2]);
    v273 = v175;
    v176 = vrhaddq_u8(vrhaddq_u8(v267, v152), a8[5]);
    v274 = vrhaddq_u8(vrhaddq_u8(v306, v308), a8[4]);
    v275 = v176;
    v177 = vrhaddq_u8(vrhaddq_u8(v152, v154), a8[7]);
    v276 = vrhaddq_u8(vrhaddq_u8(v308, v310), a8[6]);
    v277 = v177;
    v178 = vrhaddq_u8(vrhaddq_u8(v154, v156), a8[9]);
    v278 = vrhaddq_u8(vrhaddq_u8(v310, v312), a8[8]);
    v279 = v178;
    v179 = vrhaddq_u8(vrhaddq_u8(v156, v158), a8[11]);
    v280 = vrhaddq_u8(vrhaddq_u8(v312, v314), a8[10]);
    v281 = v179;
    v180 = vrhaddq_u8(vrhaddq_u8(v158, v160), a8[13]);
    v282 = vrhaddq_u8(vrhaddq_u8(v314, v316), a8[12]);
    v283 = v180;
    v181 = vrhaddq_u8(vrhaddq_u8(v160, v162), a8[15]);
    v284 = vrhaddq_u8(vrhaddq_u8(v316, v318), a8[14]);
    v285 = v181;
    v182 = vrhaddq_u8(vrhaddq_u8(v162, v164), a8[17]);
    v286 = vrhaddq_u8(vrhaddq_u8(v318, v320), a8[16]);
    v287 = v182;
    v183 = vrhaddq_u8(vrhaddq_u8(v164, v166), a8[19]);
    v288 = vrhaddq_u8(vrhaddq_u8(v320, v322), a8[18]);
    v289 = v183;
    v184 = vrhaddq_u8(vrhaddq_u8(v166, v168), a8[21]);
    v290 = vrhaddq_u8(vrhaddq_u8(v322, v324), a8[20]);
    v291 = v184;
    v185 = vrhaddq_u8(vrhaddq_u8(v168, v327), a8[23]);
    v292 = vrhaddq_u8(vrhaddq_u8(v324, v326), a8[22]);
    v293 = v185;
    v186 = vrhaddq_u8(vrhaddq_u8(v327, v329), a8[25]);
    v294 = vrhaddq_u8(vrhaddq_u8(v326, v328), a8[24]);
    v295 = v186;
    v187 = vrhaddq_u8(vrhaddq_u8(v329, v331), a8[27]);
    v296 = vrhaddq_u8(vrhaddq_u8(v328, v330), a8[26]);
    v297 = v187;
    v188 = vrhaddq_u8(vrhaddq_u8(v331, v333), a8[29]);
    v298 = vrhaddq_u8(vrhaddq_u8(v330, v332), a8[28]);
    v299 = v188;
    v189 = a8[31];
    v190 = vrhaddq_u8(vrhaddq_u8(v332, v334), a8[30]);
    v335 = v266;
    v191 = vrhaddq_u8(vrhaddq_u8(v333, v266), v189);
    goto LABEL_35;
  }
  if (!a4)
  {
    v41 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(a1 + 16), *(uint8x16_t *)(a1 + 17)), a8[1]);
    v302 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1)), *a8);
    v303 = v41;
    v42 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(a1 + a2 + 16), *(uint8x16_t *)(a1 + a2 + 17)), a8[3]);
    v304 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(a1 + a2), *(uint8x16_t *)(a1 + a2 + 1)), a8[2]);
    v305 = v42;
    v43 = a1 + a2 + a2;
    v44 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v43 + 16), *(uint8x16_t *)(v43 + 17)), a8[5]);
    v306 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v43, *(uint8x16_t *)(v43 + 1)), a8[4]);
    v307 = v44;
    v45 = v43 + a2;
    v46 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v45 + 16), *(uint8x16_t *)(v45 + 17)), a8[7]);
    v308 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v45, *(uint8x16_t *)(v45 + 1)), a8[6]);
    v309 = v46;
    v47 = v45 + a2;
    v48 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v47 + 16), *(uint8x16_t *)(v47 + 17)), a8[9]);
    v310 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v47, *(uint8x16_t *)(v47 + 1)), a8[8]);
    v311 = v48;
    v49 = v47 + a2;
    v50 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v49 + 16), *(uint8x16_t *)(v49 + 17)), a8[11]);
    v312 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v49, *(uint8x16_t *)(v49 + 1)), a8[10]);
    v313 = v50;
    v51 = v49 + a2;
    v52 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v51 + 16), *(uint8x16_t *)(v51 + 17)), a8[13]);
    v314 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v51, *(uint8x16_t *)(v51 + 1)), a8[12]);
    v315 = v52;
    v53 = v51 + a2;
    v54 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v53 + 16), *(uint8x16_t *)(v53 + 17)), a8[15]);
    v316 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v53, *(uint8x16_t *)(v53 + 1)), a8[14]);
    v317 = v54;
    v55 = v53 + a2;
    v56 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v55 + 16), *(uint8x16_t *)(v55 + 17)), a8[17]);
    v318 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v55, *(uint8x16_t *)(v55 + 1)), a8[16]);
    v319 = v56;
    v57 = v55 + a2;
    v58 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v57 + 16), *(uint8x16_t *)(v57 + 17)), a8[19]);
    v320 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v57, *(uint8x16_t *)(v57 + 1)), a8[18]);
    v321 = v58;
    v59 = v57 + a2;
    v60 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v59 + 16), *(uint8x16_t *)(v59 + 17)), a8[21]);
    v322 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v59, *(uint8x16_t *)(v59 + 1)), a8[20]);
    v323 = v60;
    v61 = v59 + a2;
    v62 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v61 + 16), *(uint8x16_t *)(v61 + 17)), a8[23]);
    v324 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v61, *(uint8x16_t *)(v61 + 1)), a8[22]);
    v325 = v62;
    v63 = v61 + a2;
    v64 = a8[25];
    v326 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v63, *(uint8x16_t *)(v63 + 1)), a8[24]);
    v327 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v63 + 16), *(uint8x16_t *)(v63 + 17)), v64);
    v65 = v63 + a2;
    v66 = a8[27];
    v328 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v65, *(uint8x16_t *)(v65 + 1)), a8[26]);
    v329 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v65 + 16), *(uint8x16_t *)(v65 + 17)), v66);
    v67 = v65 + a2;
    v68 = a8[29];
    v330 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v67, *(uint8x16_t *)(v67 + 1)), a8[28]);
    v331 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v67 + 16), *(uint8x16_t *)(v67 + 17)), v68);
    v69 = v67 + a2;
    v70 = a8[31];
    v332 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v69, *(uint8x16_t *)(v69 + 1)), a8[30]);
    v71 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)(v69 + 16), *(uint8x16_t *)(v69 + 17)), v70);
    goto LABEL_18;
  }
  v192 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), *(uint8x16_t *)(a1 + 17));
  v302 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
  v303 = v192;
  v193 = vrhaddq_u8(*(uint8x16_t *)(a1 + a2 + 16), *(uint8x16_t *)(a1 + a2 + 17));
  v304 = vrhaddq_u8(*(uint8x16_t *)(a1 + a2), *(uint8x16_t *)(a1 + a2 + 1));
  v305 = v193;
  v194 = a1 + a2 + a2;
  v195 = vrhaddq_u8(*(uint8x16_t *)(v194 + 16), *(uint8x16_t *)(v194 + 17));
  v306 = vrhaddq_u8(*(uint8x16_t *)v194, *(uint8x16_t *)(v194 + 1));
  v307 = v195;
  v196 = v194 + a2;
  v197 = vrhaddq_u8(*(uint8x16_t *)(v196 + 16), *(uint8x16_t *)(v196 + 17));
  v308 = vrhaddq_u8(*(uint8x16_t *)v196, *(uint8x16_t *)(v196 + 1));
  v309 = v197;
  v198 = v196 + a2;
  v199 = vrhaddq_u8(*(uint8x16_t *)(v198 + 16), *(uint8x16_t *)(v198 + 17));
  v310 = vrhaddq_u8(*(uint8x16_t *)v198, *(uint8x16_t *)(v198 + 1));
  v311 = v199;
  v200 = v198 + a2;
  v201 = vrhaddq_u8(*(uint8x16_t *)(v200 + 16), *(uint8x16_t *)(v200 + 17));
  v312 = vrhaddq_u8(*(uint8x16_t *)v200, *(uint8x16_t *)(v200 + 1));
  v313 = v201;
  v202 = v200 + a2;
  v203 = vrhaddq_u8(*(uint8x16_t *)(v202 + 16), *(uint8x16_t *)(v202 + 17));
  v314 = vrhaddq_u8(*(uint8x16_t *)v202, *(uint8x16_t *)(v202 + 1));
  v315 = v203;
  v204 = v202 + a2;
  v205 = vrhaddq_u8(*(uint8x16_t *)(v204 + 16), *(uint8x16_t *)(v204 + 17));
  v316 = vrhaddq_u8(*(uint8x16_t *)v204, *(uint8x16_t *)(v204 + 1));
  v317 = v205;
  v206 = v204 + a2;
  v207 = vrhaddq_u8(*(uint8x16_t *)(v206 + 16), *(uint8x16_t *)(v206 + 17));
  v318 = vrhaddq_u8(*(uint8x16_t *)v206, *(uint8x16_t *)(v206 + 1));
  v319 = v207;
  v208 = v206 + a2;
  v209 = vrhaddq_u8(*(uint8x16_t *)(v208 + 16), *(uint8x16_t *)(v208 + 17));
  v320 = vrhaddq_u8(*(uint8x16_t *)v208, *(uint8x16_t *)(v208 + 1));
  v321 = v209;
  v210 = v208 + a2;
  v211 = vrhaddq_u8(*(uint8x16_t *)(v210 + 16), *(uint8x16_t *)(v210 + 17));
  v322 = vrhaddq_u8(*(uint8x16_t *)v210, *(uint8x16_t *)(v210 + 1));
  v323 = v211;
  v212 = v210 + a2;
  v213 = vrhaddq_u8(*(uint8x16_t *)(v212 + 16), *(uint8x16_t *)(v212 + 17));
  v324 = vrhaddq_u8(*(uint8x16_t *)v212, *(uint8x16_t *)(v212 + 1));
  v325 = v213;
  v214 = v212 + a2;
  v326 = vrhaddq_u8(*(uint8x16_t *)v214, *(uint8x16_t *)(v214 + 1));
  v327 = vrhaddq_u8(*(uint8x16_t *)(v214 + 16), *(uint8x16_t *)(v214 + 17));
  v215 = v214 + a2;
  v328 = vrhaddq_u8(*(uint8x16_t *)v215, *(uint8x16_t *)(v215 + 1));
  v329 = vrhaddq_u8(*(uint8x16_t *)(v215 + 16), *(uint8x16_t *)(v215 + 17));
  v216 = v215 + a2;
  v330 = vrhaddq_u8(*(uint8x16_t *)v216, *(uint8x16_t *)(v216 + 1));
  v331 = vrhaddq_u8(*(uint8x16_t *)(v216 + 16), *(uint8x16_t *)(v216 + 17));
  v217 = v216 + a2;
  v332 = vrhaddq_u8(*(uint8x16_t *)v217, *(uint8x16_t *)(v217 + 1));
  v333 = vrhaddq_u8(*(uint8x16_t *)(v217 + 16), *(uint8x16_t *)(v217 + 17));
  v218 = v217 + a2;
  v334 = vrhaddq_u8(*(uint8x16_t *)v218, *(uint8x16_t *)(v218 + 1));
  v219 = *(uint8x16_t *)(v218 + 17);
  v220 = vrhaddq_u8(*(uint8x16_t *)(v218 + 16), v219);
  v335 = v220;
  v220.i32[0] = 8 - a4;
  v219.i32[0] = a4;
  v221 = &v302;
  v222 = &v270;
  v223 = 16;
  v224 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v220.i8, 0);
  v225 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v219.i8, 0);
  do
  {
    v226 = 0;
    v227 = 1;
    do
    {
      v228 = v227;
      v229 = *a8++;
      v222[v226] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v221[v226 + 2].i8, *(uint8x8_t *)v225.i8), *(uint8x8_t *)v221[v226].i8, *(uint8x8_t *)v224.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v221[v226 + 2], v225), v221[v226], v224), 3uLL), v229);
      v226 = 1;
      v227 = 0;
    }
    while ((v228 & 1) != 0);
    v221 += 2;
    v222 += 2;
    --v223;
  }
  while (v223);
  return vpx_variance32x16(&v270, 32, a5, a6, a7);
}

uint64_t vpx_sub_pixel_avg_variance32x32_neon(uint64_t a1, int a2, __int32 a3, __int32 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint8x16_t *a8, int8x8_t a9, int8x8_t a10)
{
  uint8x16_t v10;
  uint8x16_t *v11;
  uint8x16_t v12;
  uint8x16_t *v13;
  uint8x16_t v14;
  uint8x16_t *v15;
  uint8x16_t v16;
  uint8x16_t *v17;
  uint8x16_t v18;
  uint8x16_t *v19;
  uint8x16_t v20;
  uint8x16_t *v21;
  uint8x16_t v22;
  uint8x16_t *v23;
  uint8x16_t v24;
  uint8x16_t *v25;
  uint8x16_t v26;
  uint8x16_t *v27;
  uint8x16_t v28;
  uint8x16_t *v29;
  uint8x16_t v30;
  uint8x16_t *v31;
  uint8x16_t v32;
  uint8x16_t *v33;
  uint8x16_t v34;
  uint8x16_t *v35;
  uint8x16_t v36;
  uint8x16_t *v37;
  uint8x16_t v38;
  uint8x16_t *v39;
  uint8x16_t v40;
  uint8x16_t *v41;
  uint8x16_t v42;
  uint8x16_t *v43;
  uint8x16_t v44;
  uint8x16_t *v45;
  uint8x16_t v46;
  uint8x16_t *v47;
  uint8x16_t v48;
  uint8x16_t *v49;
  uint8x16_t v50;
  uint8x16_t *v51;
  uint8x16_t v52;
  uint8x16_t *v53;
  uint8x16_t v54;
  uint8x16_t *v55;
  uint8x16_t v56;
  uint8x16_t *v57;
  uint8x16_t v58;
  uint8x16_t *v59;
  uint8x16_t v60;
  uint8x16_t *v61;
  uint8x16_t v62;
  uint8x16_t *v63;
  uint8x16_t v64;
  uint8x16_t *v65;
  uint8x16_t v66;
  uint8x16_t *v67;
  uint8x16_t v68;
  uint8x16_t *v69;
  uint8x16_t v70;
  uint8x16_t *v71;
  uint8x16_t v72;
  uint64_t v73;
  uint8x16_t *v74;
  uint8x16_t v75;
  uint8x16_t *v76;
  uint8x16_t *v77;
  int v78;
  uint8x16_t v79;
  uint8x16_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint8x16_t v84;
  uint64_t v85;
  uint8x16_t v86;
  uint8x16_t v87;
  uint8x16_t v88;
  uint8x16_t v89;
  uint8x16_t *v90;
  uint8x16_t *v91;
  int v92;
  uint8x16_t v93;
  uint8x16_t v94;
  uint64_t v95;
  char v96;
  char v97;
  uint8x16_t v98;
  unint64_t v100;
  uint8x16_t v101;
  uint64_t v102;
  uint8x16_t v103;
  uint64_t v104;
  uint8x16_t v105;
  uint64_t v106;
  uint8x16_t v107;
  uint64_t v108;
  uint8x16_t v109;
  uint64_t v110;
  uint8x16_t v111;
  uint64_t v112;
  uint8x16_t v113;
  uint64_t v114;
  uint8x16_t v115;
  uint64_t v116;
  uint8x16_t v117;
  uint64_t v118;
  uint8x16_t v119;
  uint64_t v120;
  uint8x16_t v121;
  uint64_t v122;
  uint8x16_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint8x16_t v145;
  uint8x16_t v146;
  uint8x16_t v147;
  uint8x16_t *v148;
  uint8x16_t v149;
  uint64_t v150;
  uint8x16_t v151;
  uint64_t v152;
  uint8x16_t v153;
  uint64_t v154;
  uint8x16_t v155;
  uint64_t v156;
  uint8x16_t v157;
  uint64_t v158;
  uint8x16_t v159;
  uint64_t v160;
  uint8x16_t v161;
  uint64_t v162;
  uint8x16_t v163;
  uint64_t v164;
  uint8x16_t v165;
  uint64_t v166;
  uint8x16_t v167;
  uint64_t v168;
  uint8x16_t v169;
  uint64_t v170;
  uint8x16_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint8x16_t v193;
  uint8x16_t v194;
  uint8x16_t *v195;
  _BYTE *v196;
  int v197;
  uint8x16_t v198;
  uint8x16_t v199;
  uint64_t v200;
  char v201;
  char v202;
  uint8x16_t v203;
  int v204;
  uint8x16_t v205;
  uint8x16_t v206;
  uint64_t v207;
  char v208;
  char v209;
  unint64_t v210;
  uint8x16_t v211;
  uint8x16_t v212;
  uint8x16_t v213;
  uint8x16_t *v214;
  int v215;
  uint8x16_t v216;
  uint8x16_t v217;
  uint64_t v218;
  char v219;
  char v220;
  uint8x16_t *v221;
  _BYTE *v222;
  int v223;
  uint8x16_t v224;
  uint8x16_t v225;
  uint64_t v226;
  char v227;
  char v228;
  uint8x16_t v229;
  _BYTE v230[1056];
  uint8x16_t v231;
  uint8x16_t v232;
  uint8x16_t v233;
  uint8x16_t v234;
  uint8x16_t v235;
  uint8x16_t v236;
  uint8x16_t v237;
  uint8x16_t v238;
  uint8x16_t v239;
  uint8x16_t v240;
  uint8x16_t v241;
  uint8x16_t v242;
  uint8x16_t v243;
  uint8x16_t v244;
  uint8x16_t v245;
  uint8x16_t v246;
  uint8x16_t v247;
  uint8x16_t v248;
  uint8x16_t v249;
  uint8x16_t v250;
  uint8x16_t v251;
  uint8x16_t v252;
  uint8x16_t v253;
  uint8x16_t v254;
  uint8x16_t v255;
  uint8x16_t v256;
  uint8x16_t v257;
  uint8x16_t v258;
  uint8x16_t v259;
  uint8x16_t v260;
  uint8x16_t v261;
  uint8x16_t v262;
  uint8x16_t v263;
  uint8x16_t v264;
  uint8x16_t v265;
  uint8x16_t v266;
  uint8x16_t v267;
  uint8x16_t v268;
  uint8x16_t v269;
  uint8x16_t v270;
  uint8x16_t v271;
  uint8x16_t v272;
  uint8x16_t v273;
  uint8x16_t v274;
  uint8x16_t v275;
  uint8x16_t v276;
  uint8x16_t v277;
  uint8x16_t v278;
  uint8x16_t v279;
  uint8x16_t v280;
  uint8x16_t v281;
  uint8x16_t v282;
  uint8x16_t v283;
  uint8x16_t v284;
  uint8x16_t v285;
  uint8x16_t v286;
  uint8x16_t v287;
  uint8x16_t v288;
  uint8x16_t v289;
  uint8x16_t v290;
  uint8x16_t v291;
  uint8x16_t v292;
  uint8x16_t v293;
  uint8x16_t v294;
  uint8x16_t v295;
  uint8x16_t v296;
  uint64_t v297;

  v297 = *MEMORY[0x24BDAC8D0];
  if (a3 == 4)
  {
    if (a4 == 4)
    {
      v100 = 0;
      v101 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), *(uint8x16_t *)(a1 + 17));
      v231 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
      v232 = v101;
      v102 = a1 + a2;
      v103 = vrhaddq_u8(*(uint8x16_t *)(v102 + 16), *(uint8x16_t *)(v102 + 17));
      v233 = vrhaddq_u8(*(uint8x16_t *)v102, *(uint8x16_t *)(v102 + 1));
      v234 = v103;
      v104 = v102 + a2;
      v105 = vrhaddq_u8(*(uint8x16_t *)(v104 + 16), *(uint8x16_t *)(v104 + 17));
      v235 = vrhaddq_u8(*(uint8x16_t *)v104, *(uint8x16_t *)(v104 + 1));
      v236 = v105;
      v106 = v104 + a2;
      v107 = vrhaddq_u8(*(uint8x16_t *)(v106 + 16), *(uint8x16_t *)(v106 + 17));
      v237 = vrhaddq_u8(*(uint8x16_t *)v106, *(uint8x16_t *)(v106 + 1));
      v238 = v107;
      v108 = v106 + a2;
      v109 = vrhaddq_u8(*(uint8x16_t *)(v108 + 16), *(uint8x16_t *)(v108 + 17));
      v239 = vrhaddq_u8(*(uint8x16_t *)v108, *(uint8x16_t *)(v108 + 1));
      v240 = v109;
      v110 = v108 + a2;
      v111 = vrhaddq_u8(*(uint8x16_t *)(v110 + 16), *(uint8x16_t *)(v110 + 17));
      v241 = vrhaddq_u8(*(uint8x16_t *)v110, *(uint8x16_t *)(v110 + 1));
      v242 = v111;
      v112 = v110 + a2;
      v113 = vrhaddq_u8(*(uint8x16_t *)(v112 + 16), *(uint8x16_t *)(v112 + 17));
      v243 = vrhaddq_u8(*(uint8x16_t *)v112, *(uint8x16_t *)(v112 + 1));
      v244 = v113;
      v114 = v112 + a2;
      v115 = vrhaddq_u8(*(uint8x16_t *)(v114 + 16), *(uint8x16_t *)(v114 + 17));
      v245 = vrhaddq_u8(*(uint8x16_t *)v114, *(uint8x16_t *)(v114 + 1));
      v246 = v115;
      v116 = v114 + a2;
      v117 = vrhaddq_u8(*(uint8x16_t *)(v116 + 16), *(uint8x16_t *)(v116 + 17));
      v247 = vrhaddq_u8(*(uint8x16_t *)v116, *(uint8x16_t *)(v116 + 1));
      v248 = v117;
      v118 = v116 + a2;
      v119 = vrhaddq_u8(*(uint8x16_t *)(v118 + 16), *(uint8x16_t *)(v118 + 17));
      v249 = vrhaddq_u8(*(uint8x16_t *)v118, *(uint8x16_t *)(v118 + 1));
      v250 = v119;
      v120 = v118 + a2;
      v121 = vrhaddq_u8(*(uint8x16_t *)(v120 + 16), *(uint8x16_t *)(v120 + 17));
      v251 = vrhaddq_u8(*(uint8x16_t *)v120, *(uint8x16_t *)(v120 + 1));
      v252 = v121;
      v122 = v120 + a2;
      v123 = vrhaddq_u8(*(uint8x16_t *)(v122 + 16), *(uint8x16_t *)(v122 + 17));
      v253 = vrhaddq_u8(*(uint8x16_t *)v122, *(uint8x16_t *)(v122 + 1));
      v254 = v123;
      v124 = v122 + a2;
      v255 = vrhaddq_u8(*(uint8x16_t *)v124, *(uint8x16_t *)(v124 + 1));
      v256 = vrhaddq_u8(*(uint8x16_t *)(v124 + 16), *(uint8x16_t *)(v124 + 17));
      v125 = v124 + a2;
      v257 = vrhaddq_u8(*(uint8x16_t *)v125, *(uint8x16_t *)(v125 + 1));
      v258 = vrhaddq_u8(*(uint8x16_t *)(v125 + 16), *(uint8x16_t *)(v125 + 17));
      v126 = v125 + a2;
      v259 = vrhaddq_u8(*(uint8x16_t *)v126, *(uint8x16_t *)(v126 + 1));
      v260 = vrhaddq_u8(*(uint8x16_t *)(v126 + 16), *(uint8x16_t *)(v126 + 17));
      v127 = v126 + a2;
      v261 = vrhaddq_u8(*(uint8x16_t *)v127, *(uint8x16_t *)(v127 + 1));
      v262 = vrhaddq_u8(*(uint8x16_t *)(v127 + 16), *(uint8x16_t *)(v127 + 17));
      v128 = v127 + a2;
      v263 = vrhaddq_u8(*(uint8x16_t *)v128, *(uint8x16_t *)(v128 + 1));
      v264 = vrhaddq_u8(*(uint8x16_t *)(v128 + 16), *(uint8x16_t *)(v128 + 17));
      v129 = v128 + a2;
      v265 = vrhaddq_u8(*(uint8x16_t *)v129, *(uint8x16_t *)(v129 + 1));
      v266 = vrhaddq_u8(*(uint8x16_t *)(v129 + 16), *(uint8x16_t *)(v129 + 17));
      v130 = v129 + a2;
      v267 = vrhaddq_u8(*(uint8x16_t *)v130, *(uint8x16_t *)(v130 + 1));
      v268 = vrhaddq_u8(*(uint8x16_t *)(v130 + 16), *(uint8x16_t *)(v130 + 17));
      v131 = v130 + a2;
      v269 = vrhaddq_u8(*(uint8x16_t *)v131, *(uint8x16_t *)(v131 + 1));
      v270 = vrhaddq_u8(*(uint8x16_t *)(v131 + 16), *(uint8x16_t *)(v131 + 17));
      v132 = v131 + a2;
      v271 = vrhaddq_u8(*(uint8x16_t *)v132, *(uint8x16_t *)(v132 + 1));
      v272 = vrhaddq_u8(*(uint8x16_t *)(v132 + 16), *(uint8x16_t *)(v132 + 17));
      v133 = v132 + a2;
      v273 = vrhaddq_u8(*(uint8x16_t *)v133, *(uint8x16_t *)(v133 + 1));
      v274 = vrhaddq_u8(*(uint8x16_t *)(v133 + 16), *(uint8x16_t *)(v133 + 17));
      v134 = v133 + a2;
      v275 = vrhaddq_u8(*(uint8x16_t *)v134, *(uint8x16_t *)(v134 + 1));
      v276 = vrhaddq_u8(*(uint8x16_t *)(v134 + 16), *(uint8x16_t *)(v134 + 17));
      v135 = v134 + a2;
      v277 = vrhaddq_u8(*(uint8x16_t *)v135, *(uint8x16_t *)(v135 + 1));
      v278 = vrhaddq_u8(*(uint8x16_t *)(v135 + 16), *(uint8x16_t *)(v135 + 17));
      v136 = v135 + a2;
      v279 = vrhaddq_u8(*(uint8x16_t *)v136, *(uint8x16_t *)(v136 + 1));
      v280 = vrhaddq_u8(*(uint8x16_t *)(v136 + 16), *(uint8x16_t *)(v136 + 17));
      v137 = v136 + a2;
      v281 = vrhaddq_u8(*(uint8x16_t *)v137, *(uint8x16_t *)(v137 + 1));
      v282 = vrhaddq_u8(*(uint8x16_t *)(v137 + 16), *(uint8x16_t *)(v137 + 17));
      v138 = v137 + a2;
      v283 = vrhaddq_u8(*(uint8x16_t *)v138, *(uint8x16_t *)(v138 + 1));
      v284 = vrhaddq_u8(*(uint8x16_t *)(v138 + 16), *(uint8x16_t *)(v138 + 17));
      v139 = v138 + a2;
      v285 = vrhaddq_u8(*(uint8x16_t *)v139, *(uint8x16_t *)(v139 + 1));
      v286 = vrhaddq_u8(*(uint8x16_t *)(v139 + 16), *(uint8x16_t *)(v139 + 17));
      v140 = v139 + a2;
      v287 = vrhaddq_u8(*(uint8x16_t *)v140, *(uint8x16_t *)(v140 + 1));
      v288 = vrhaddq_u8(*(uint8x16_t *)(v140 + 16), *(uint8x16_t *)(v140 + 17));
      v141 = v140 + a2;
      v289 = vrhaddq_u8(*(uint8x16_t *)v141, *(uint8x16_t *)(v141 + 1));
      v290 = vrhaddq_u8(*(uint8x16_t *)(v141 + 16), *(uint8x16_t *)(v141 + 17));
      v142 = v141 + a2;
      v291 = vrhaddq_u8(*(uint8x16_t *)v142, *(uint8x16_t *)(v142 + 1));
      v292 = vrhaddq_u8(*(uint8x16_t *)(v142 + 16), *(uint8x16_t *)(v142 + 17));
      v143 = v142 + a2;
      v293 = vrhaddq_u8(*(uint8x16_t *)v143, *(uint8x16_t *)(v143 + 1));
      v294 = vrhaddq_u8(*(uint8x16_t *)(v143 + 16), *(uint8x16_t *)(v143 + 17));
      v144 = v143 + a2;
      v295 = vrhaddq_u8(*(uint8x16_t *)v144, *(uint8x16_t *)(v144 + 1));
      v296 = vrhaddq_u8(*(uint8x16_t *)(v144 + 16), *(uint8x16_t *)(v144 + 17));
      v145 = v231;
      do
      {
        v146 = *(uint8x16_t *)((char *)&v233 + v100);
        v147 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)((char *)&v231 + v100 + 16), *(uint8x16_t *)((char *)&v234 + v100)), a8[v100 / 0x10 + 1]);
        v148 = (uint8x16_t *)&v230[v100];
        *v148 = vrhaddq_u8(vrhaddq_u8(v145, v146), a8[v100 / 0x10]);
        v148[1] = v147;
        v100 += 32;
        v145 = v146;
      }
      while ((_DWORD)v100 != 1024);
    }
    else
    {
      if (!a4)
      {
        v73 = 0;
        v74 = (uint8x16_t *)(a1 + 17);
        do
        {
          v75 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)((char *)v74 - 1), *v74), a8[v73 + 1]);
          v76 = (uint8x16_t *)((char *)&v231 + v73 * 16);
          *v76 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)((char *)v74 - 17), v74[-1]), a8[v73]);
          v76[1] = v75;
          v73 += 2;
          v74 = (uint8x16_t *)((char *)v74 + a2);
        }
        while ((_DWORD)(v73 * 16) != 1024);
        return vpx_variance32x32(&v231, 32, a5, a6, a7);
      }
      v149 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), *(uint8x16_t *)(a1 + 17));
      v231 = vrhaddq_u8(*(uint8x16_t *)a1, *(uint8x16_t *)(a1 + 1));
      v232 = v149;
      v150 = a1 + a2;
      v151 = vrhaddq_u8(*(uint8x16_t *)(v150 + 16), *(uint8x16_t *)(v150 + 17));
      v233 = vrhaddq_u8(*(uint8x16_t *)v150, *(uint8x16_t *)(v150 + 1));
      v234 = v151;
      v152 = v150 + a2;
      v153 = vrhaddq_u8(*(uint8x16_t *)(v152 + 16), *(uint8x16_t *)(v152 + 17));
      v235 = vrhaddq_u8(*(uint8x16_t *)v152, *(uint8x16_t *)(v152 + 1));
      v236 = v153;
      v154 = v152 + a2;
      v155 = vrhaddq_u8(*(uint8x16_t *)(v154 + 16), *(uint8x16_t *)(v154 + 17));
      v237 = vrhaddq_u8(*(uint8x16_t *)v154, *(uint8x16_t *)(v154 + 1));
      v238 = v155;
      v156 = v154 + a2;
      v157 = vrhaddq_u8(*(uint8x16_t *)(v156 + 16), *(uint8x16_t *)(v156 + 17));
      v239 = vrhaddq_u8(*(uint8x16_t *)v156, *(uint8x16_t *)(v156 + 1));
      v240 = v157;
      v158 = v156 + a2;
      v159 = vrhaddq_u8(*(uint8x16_t *)(v158 + 16), *(uint8x16_t *)(v158 + 17));
      v241 = vrhaddq_u8(*(uint8x16_t *)v158, *(uint8x16_t *)(v158 + 1));
      v242 = v159;
      v160 = v158 + a2;
      v161 = vrhaddq_u8(*(uint8x16_t *)(v160 + 16), *(uint8x16_t *)(v160 + 17));
      v243 = vrhaddq_u8(*(uint8x16_t *)v160, *(uint8x16_t *)(v160 + 1));
      v244 = v161;
      v162 = v160 + a2;
      v163 = vrhaddq_u8(*(uint8x16_t *)(v162 + 16), *(uint8x16_t *)(v162 + 17));
      v245 = vrhaddq_u8(*(uint8x16_t *)v162, *(uint8x16_t *)(v162 + 1));
      v246 = v163;
      v164 = v162 + a2;
      v165 = vrhaddq_u8(*(uint8x16_t *)(v164 + 16), *(uint8x16_t *)(v164 + 17));
      v247 = vrhaddq_u8(*(uint8x16_t *)v164, *(uint8x16_t *)(v164 + 1));
      v248 = v165;
      v166 = v164 + a2;
      v167 = vrhaddq_u8(*(uint8x16_t *)(v166 + 16), *(uint8x16_t *)(v166 + 17));
      v249 = vrhaddq_u8(*(uint8x16_t *)v166, *(uint8x16_t *)(v166 + 1));
      v250 = v167;
      v168 = v166 + a2;
      v169 = vrhaddq_u8(*(uint8x16_t *)(v168 + 16), *(uint8x16_t *)(v168 + 17));
      v251 = vrhaddq_u8(*(uint8x16_t *)v168, *(uint8x16_t *)(v168 + 1));
      v252 = v169;
      v170 = v168 + a2;
      v171 = vrhaddq_u8(*(uint8x16_t *)(v170 + 16), *(uint8x16_t *)(v170 + 17));
      v253 = vrhaddq_u8(*(uint8x16_t *)v170, *(uint8x16_t *)(v170 + 1));
      v254 = v171;
      v172 = v170 + a2;
      v255 = vrhaddq_u8(*(uint8x16_t *)v172, *(uint8x16_t *)(v172 + 1));
      v256 = vrhaddq_u8(*(uint8x16_t *)(v172 + 16), *(uint8x16_t *)(v172 + 17));
      v173 = v172 + a2;
      v257 = vrhaddq_u8(*(uint8x16_t *)v173, *(uint8x16_t *)(v173 + 1));
      v258 = vrhaddq_u8(*(uint8x16_t *)(v173 + 16), *(uint8x16_t *)(v173 + 17));
      v174 = v173 + a2;
      v259 = vrhaddq_u8(*(uint8x16_t *)v174, *(uint8x16_t *)(v174 + 1));
      v260 = vrhaddq_u8(*(uint8x16_t *)(v174 + 16), *(uint8x16_t *)(v174 + 17));
      v175 = v174 + a2;
      v261 = vrhaddq_u8(*(uint8x16_t *)v175, *(uint8x16_t *)(v175 + 1));
      v262 = vrhaddq_u8(*(uint8x16_t *)(v175 + 16), *(uint8x16_t *)(v175 + 17));
      v176 = v175 + a2;
      v263 = vrhaddq_u8(*(uint8x16_t *)v176, *(uint8x16_t *)(v176 + 1));
      v264 = vrhaddq_u8(*(uint8x16_t *)(v176 + 16), *(uint8x16_t *)(v176 + 17));
      v177 = v176 + a2;
      v265 = vrhaddq_u8(*(uint8x16_t *)v177, *(uint8x16_t *)(v177 + 1));
      v266 = vrhaddq_u8(*(uint8x16_t *)(v177 + 16), *(uint8x16_t *)(v177 + 17));
      v178 = v177 + a2;
      v267 = vrhaddq_u8(*(uint8x16_t *)v178, *(uint8x16_t *)(v178 + 1));
      v268 = vrhaddq_u8(*(uint8x16_t *)(v178 + 16), *(uint8x16_t *)(v178 + 17));
      v179 = v178 + a2;
      v269 = vrhaddq_u8(*(uint8x16_t *)v179, *(uint8x16_t *)(v179 + 1));
      v270 = vrhaddq_u8(*(uint8x16_t *)(v179 + 16), *(uint8x16_t *)(v179 + 17));
      v180 = v179 + a2;
      v271 = vrhaddq_u8(*(uint8x16_t *)v180, *(uint8x16_t *)(v180 + 1));
      v272 = vrhaddq_u8(*(uint8x16_t *)(v180 + 16), *(uint8x16_t *)(v180 + 17));
      v181 = v180 + a2;
      v273 = vrhaddq_u8(*(uint8x16_t *)v181, *(uint8x16_t *)(v181 + 1));
      v274 = vrhaddq_u8(*(uint8x16_t *)(v181 + 16), *(uint8x16_t *)(v181 + 17));
      v182 = v181 + a2;
      v275 = vrhaddq_u8(*(uint8x16_t *)v182, *(uint8x16_t *)(v182 + 1));
      v276 = vrhaddq_u8(*(uint8x16_t *)(v182 + 16), *(uint8x16_t *)(v182 + 17));
      v183 = v182 + a2;
      v277 = vrhaddq_u8(*(uint8x16_t *)v183, *(uint8x16_t *)(v183 + 1));
      v278 = vrhaddq_u8(*(uint8x16_t *)(v183 + 16), *(uint8x16_t *)(v183 + 17));
      v184 = v183 + a2;
      v279 = vrhaddq_u8(*(uint8x16_t *)v184, *(uint8x16_t *)(v184 + 1));
      v280 = vrhaddq_u8(*(uint8x16_t *)(v184 + 16), *(uint8x16_t *)(v184 + 17));
      v185 = v184 + a2;
      v281 = vrhaddq_u8(*(uint8x16_t *)v185, *(uint8x16_t *)(v185 + 1));
      v282 = vrhaddq_u8(*(uint8x16_t *)(v185 + 16), *(uint8x16_t *)(v185 + 17));
      v186 = v185 + a2;
      v283 = vrhaddq_u8(*(uint8x16_t *)v186, *(uint8x16_t *)(v186 + 1));
      v284 = vrhaddq_u8(*(uint8x16_t *)(v186 + 16), *(uint8x16_t *)(v186 + 17));
      v187 = v186 + a2;
      v285 = vrhaddq_u8(*(uint8x16_t *)v187, *(uint8x16_t *)(v187 + 1));
      v286 = vrhaddq_u8(*(uint8x16_t *)(v187 + 16), *(uint8x16_t *)(v187 + 17));
      v188 = v187 + a2;
      v287 = vrhaddq_u8(*(uint8x16_t *)v188, *(uint8x16_t *)(v188 + 1));
      v288 = vrhaddq_u8(*(uint8x16_t *)(v188 + 16), *(uint8x16_t *)(v188 + 17));
      v189 = v188 + a2;
      v289 = vrhaddq_u8(*(uint8x16_t *)v189, *(uint8x16_t *)(v189 + 1));
      v290 = vrhaddq_u8(*(uint8x16_t *)(v189 + 16), *(uint8x16_t *)(v189 + 17));
      v190 = v189 + a2;
      v291 = vrhaddq_u8(*(uint8x16_t *)v190, *(uint8x16_t *)(v190 + 1));
      v292 = vrhaddq_u8(*(uint8x16_t *)(v190 + 16), *(uint8x16_t *)(v190 + 17));
      v191 = v190 + a2;
      v293 = vrhaddq_u8(*(uint8x16_t *)v191, *(uint8x16_t *)(v191 + 1));
      v294 = vrhaddq_u8(*(uint8x16_t *)(v191 + 16), *(uint8x16_t *)(v191 + 17));
      v192 = v191 + a2;
      v295 = vrhaddq_u8(*(uint8x16_t *)v192, *(uint8x16_t *)(v192 + 1));
      v193 = *(uint8x16_t *)(v192 + 17);
      v194 = vrhaddq_u8(*(uint8x16_t *)(v192 + 16), v193);
      v296 = v194;
      v194.i32[0] = 8 - a4;
      v193.i32[0] = a4;
      v195 = &v231;
      v196 = v230;
      v197 = 32;
      v198 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v194.i8, 0);
      v199 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v193.i8, 0);
      do
      {
        v200 = 0;
        v201 = 1;
        do
        {
          v202 = v201;
          v203 = *a8++;
          *(uint8x16_t *)&v196[v200 * 16] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v195[v200 + 2].i8, *(uint8x8_t *)v199.i8), *(uint8x8_t *)v195[v200].i8, *(uint8x8_t *)v198.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v195[v200 + 2], v199), v195[v200], v198), 3uLL), v203);
          v200 = 1;
          v201 = 0;
        }
        while ((v202 & 1) != 0);
        v195 += 2;
        v196 += 32;
        --v197;
      }
      while (v197);
    }
  }
  else
  {
    if (!a3)
    {
      if (a4 == 4)
      {
        v85 = 0;
        v86 = *(uint8x16_t *)a1;
        do
        {
          v87 = *(uint8x16_t *)(a1 + 16);
          a1 += a2;
          v88 = *(uint8x16_t *)a1;
          v89 = vrhaddq_u8(vrhaddq_u8(v87, *(uint8x16_t *)(a1 + 16)), a8[v85 + 1]);
          v90 = (uint8x16_t *)((char *)&v231 + v85 * 16);
          *v90 = vrhaddq_u8(vrhaddq_u8(v86, *(uint8x16_t *)a1), a8[v85]);
          v90[1] = v89;
          v85 += 2;
          v86 = v88;
        }
        while ((_DWORD)(v85 * 16) != 1024);
      }
      else if (a4)
      {
        a9.i32[0] = 8 - a4;
        a10.i32[0] = a4;
        v91 = &v231;
        v92 = 32;
        v93 = (uint8x16_t)vdupq_lane_s8(a9, 0);
        v94 = (uint8x16_t)vdupq_lane_s8(a10, 0);
        do
        {
          v95 = 0;
          v96 = 1;
          do
          {
            v97 = v96;
            v98 = *a8++;
            v91[(unint64_t)v95 / 0x10] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v95 + a2), *(uint8x8_t *)v94.i8), *(uint8x8_t *)(a1 + v95), *(uint8x8_t *)v93.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v95 + a2), v94), *(uint8x16_t *)(a1 + v95), v93), 3uLL), v98);
            v95 = 16;
            v96 = 0;
          }
          while ((v97 & 1) != 0);
          a1 += a2;
          v91 += 2;
          --v92;
        }
        while (v92);
      }
      else
      {
        v10 = vrhaddq_u8(*(uint8x16_t *)(a1 + 16), a8[1]);
        v231 = vrhaddq_u8(*(uint8x16_t *)a1, *a8);
        v232 = v10;
        v11 = (uint8x16_t *)(a1 + a2);
        v12 = vrhaddq_u8(v11[1], a8[3]);
        v233 = vrhaddq_u8(*v11, a8[2]);
        v234 = v12;
        v13 = (uint8x16_t *)((char *)v11 + a2);
        v14 = vrhaddq_u8(v13[1], a8[5]);
        v235 = vrhaddq_u8(*v13, a8[4]);
        v236 = v14;
        v15 = (uint8x16_t *)((char *)v13 + a2);
        v16 = vrhaddq_u8(v15[1], a8[7]);
        v237 = vrhaddq_u8(*v15, a8[6]);
        v238 = v16;
        v17 = (uint8x16_t *)((char *)v15 + a2);
        v18 = vrhaddq_u8(v17[1], a8[9]);
        v239 = vrhaddq_u8(*v17, a8[8]);
        v240 = v18;
        v19 = (uint8x16_t *)((char *)v17 + a2);
        v20 = vrhaddq_u8(v19[1], a8[11]);
        v241 = vrhaddq_u8(*v19, a8[10]);
        v242 = v20;
        v21 = (uint8x16_t *)((char *)v19 + a2);
        v22 = vrhaddq_u8(v21[1], a8[13]);
        v243 = vrhaddq_u8(*v21, a8[12]);
        v244 = v22;
        v23 = (uint8x16_t *)((char *)v21 + a2);
        v24 = vrhaddq_u8(v23[1], a8[15]);
        v245 = vrhaddq_u8(*v23, a8[14]);
        v246 = v24;
        v25 = (uint8x16_t *)((char *)v23 + a2);
        v26 = vrhaddq_u8(v25[1], a8[17]);
        v247 = vrhaddq_u8(*v25, a8[16]);
        v248 = v26;
        v27 = (uint8x16_t *)((char *)v25 + a2);
        v28 = vrhaddq_u8(v27[1], a8[19]);
        v249 = vrhaddq_u8(*v27, a8[18]);
        v250 = v28;
        v29 = (uint8x16_t *)((char *)v27 + a2);
        v30 = vrhaddq_u8(v29[1], a8[21]);
        v251 = vrhaddq_u8(*v29, a8[20]);
        v252 = v30;
        v31 = (uint8x16_t *)((char *)v29 + a2);
        v32 = vrhaddq_u8(v31[1], a8[23]);
        v253 = vrhaddq_u8(*v31, a8[22]);
        v254 = v32;
        v33 = (uint8x16_t *)((char *)v31 + a2);
        v34 = a8[25];
        v255 = vrhaddq_u8(*v33, a8[24]);
        v256 = vrhaddq_u8(v33[1], v34);
        v35 = (uint8x16_t *)((char *)v33 + a2);
        v36 = a8[27];
        v257 = vrhaddq_u8(*v35, a8[26]);
        v258 = vrhaddq_u8(v35[1], v36);
        v37 = (uint8x16_t *)((char *)v35 + a2);
        v38 = a8[29];
        v259 = vrhaddq_u8(*v37, a8[28]);
        v260 = vrhaddq_u8(v37[1], v38);
        v39 = (uint8x16_t *)((char *)v37 + a2);
        v40 = a8[31];
        v261 = vrhaddq_u8(*v39, a8[30]);
        v262 = vrhaddq_u8(v39[1], v40);
        v41 = (uint8x16_t *)((char *)v39 + a2);
        v42 = a8[33];
        v263 = vrhaddq_u8(*v41, a8[32]);
        v264 = vrhaddq_u8(v41[1], v42);
        v43 = (uint8x16_t *)((char *)v41 + a2);
        v44 = a8[35];
        v265 = vrhaddq_u8(*v43, a8[34]);
        v266 = vrhaddq_u8(v43[1], v44);
        v45 = (uint8x16_t *)((char *)v43 + a2);
        v46 = a8[37];
        v267 = vrhaddq_u8(*v45, a8[36]);
        v268 = vrhaddq_u8(v45[1], v46);
        v47 = (uint8x16_t *)((char *)v45 + a2);
        v48 = a8[39];
        v269 = vrhaddq_u8(*v47, a8[38]);
        v270 = vrhaddq_u8(v47[1], v48);
        v49 = (uint8x16_t *)((char *)v47 + a2);
        v50 = a8[41];
        v271 = vrhaddq_u8(*v49, a8[40]);
        v272 = vrhaddq_u8(v49[1], v50);
        v51 = (uint8x16_t *)((char *)v49 + a2);
        v52 = a8[43];
        v273 = vrhaddq_u8(*v51, a8[42]);
        v274 = vrhaddq_u8(v51[1], v52);
        v53 = (uint8x16_t *)((char *)v51 + a2);
        v54 = a8[45];
        v275 = vrhaddq_u8(*v53, a8[44]);
        v276 = vrhaddq_u8(v53[1], v54);
        v55 = (uint8x16_t *)((char *)v53 + a2);
        v56 = a8[47];
        v277 = vrhaddq_u8(*v55, a8[46]);
        v278 = vrhaddq_u8(v55[1], v56);
        v57 = (uint8x16_t *)((char *)v55 + a2);
        v58 = a8[49];
        v279 = vrhaddq_u8(*v57, a8[48]);
        v280 = vrhaddq_u8(v57[1], v58);
        v59 = (uint8x16_t *)((char *)v57 + a2);
        v60 = a8[51];
        v281 = vrhaddq_u8(*v59, a8[50]);
        v282 = vrhaddq_u8(v59[1], v60);
        v61 = (uint8x16_t *)((char *)v59 + a2);
        v62 = a8[53];
        v283 = vrhaddq_u8(*v61, a8[52]);
        v284 = vrhaddq_u8(v61[1], v62);
        v63 = (uint8x16_t *)((char *)v61 + a2);
        v64 = a8[55];
        v285 = vrhaddq_u8(*v63, a8[54]);
        v286 = vrhaddq_u8(v63[1], v64);
        v65 = (uint8x16_t *)((char *)v63 + a2);
        v66 = a8[57];
        v287 = vrhaddq_u8(*v65, a8[56]);
        v288 = vrhaddq_u8(v65[1], v66);
        v67 = (uint8x16_t *)((char *)v65 + a2);
        v68 = a8[59];
        v289 = vrhaddq_u8(*v67, a8[58]);
        v290 = vrhaddq_u8(v67[1], v68);
        v69 = (uint8x16_t *)((char *)v67 + a2);
        v70 = a8[61];
        v291 = vrhaddq_u8(*v69, a8[60]);
        v292 = vrhaddq_u8(v69[1], v70);
        v71 = (uint8x16_t *)((char *)v69 + a2);
        v72 = a8[63];
        v293 = vrhaddq_u8(*v71, a8[62]);
        v294 = vrhaddq_u8(v71[1], v72);
      }
      return vpx_variance32x32(&v231, 32, a5, a6, a7);
    }
    a9.i32[0] = 8 - a3;
    a10.i32[0] = a3;
    v77 = &v231;
    if (a4 == 4)
    {
      v204 = 33;
      v205 = (uint8x16_t)vdupq_lane_s8(a9, 0);
      v206 = (uint8x16_t)vdupq_lane_s8(a10, 0);
      do
      {
        v207 = 0;
        v208 = 1;
        do
        {
          v209 = v208;
          v77[(unint64_t)v207 / 0x10] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v207 + 1), *(uint8x8_t *)v206.i8), *(uint8x8_t *)(a1 + v207), *(uint8x8_t *)v205.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v207 + 1), v206), *(uint8x16_t *)(a1 + v207), v205), 3uLL);
          v207 = 16;
          v208 = 0;
        }
        while ((v209 & 1) != 0);
        a1 += a2;
        v77 += 2;
        --v204;
      }
      while (v204);
      v210 = 0;
      v211 = v231;
      do
      {
        v212 = *(uint8x16_t *)((char *)&v233 + v210);
        v213 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)((char *)&v231 + v210 + 16), *(uint8x16_t *)((char *)&v234 + v210)), a8[v210 / 0x10 + 1]);
        v214 = (uint8x16_t *)&v230[v210];
        *v214 = vrhaddq_u8(vrhaddq_u8(v211, v212), a8[v210 / 0x10]);
        v214[1] = v213;
        v210 += 32;
        v211 = v212;
      }
      while ((_DWORD)v210 != 1024);
    }
    else
    {
      if (!a4)
      {
        v78 = 32;
        v79 = (uint8x16_t)vdupq_lane_s8(a9, 0);
        v80 = (uint8x16_t)vdupq_lane_s8(a10, 0);
        do
        {
          v81 = 0;
          v82 = 1;
          do
          {
            v83 = v82;
            v84 = *a8++;
            v77[(unint64_t)v81 / 0x10] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v81 + 1), *(uint8x8_t *)v80.i8), *(uint8x8_t *)(a1 + v81), *(uint8x8_t *)v79.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v81 + 1), v80), *(uint8x16_t *)(a1 + v81), v79), 3uLL), v84);
            v81 = 16;
            v82 = 0;
          }
          while ((v83 & 1) != 0);
          a1 += a2;
          v77 += 2;
          --v78;
        }
        while (v78);
        return vpx_variance32x32(&v231, 32, a5, a6, a7);
      }
      v215 = 33;
      v216 = (uint8x16_t)vdupq_lane_s8(a9, 0);
      v217 = (uint8x16_t)vdupq_lane_s8(a10, 0);
      do
      {
        v218 = 0;
        v219 = 1;
        do
        {
          v220 = v219;
          v77[(unint64_t)v218 / 0x10] = (uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)(a1 + v218 + 1), *(uint8x8_t *)v217.i8), *(uint8x8_t *)(a1 + v218), *(uint8x8_t *)v216.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)(a1 + v218 + 1), v217), *(uint8x16_t *)(a1 + v218), v216), 3uLL);
          v218 = 16;
          v219 = 0;
        }
        while ((v220 & 1) != 0);
        a1 += a2;
        v77 += 2;
        --v215;
      }
      while (v215);
      v216.i32[0] = 8 - a4;
      v217.i32[0] = a4;
      v221 = &v231;
      v222 = v230;
      v223 = 32;
      v224 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v216.i8, 0);
      v225 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v217.i8, 0);
      do
      {
        v226 = 0;
        v227 = 1;
        do
        {
          v228 = v227;
          v229 = *a8++;
          *(uint8x16_t *)&v222[v226 * 16] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v221[v226 + 2].i8, *(uint8x8_t *)v225.i8), *(uint8x8_t *)v221[v226].i8, *(uint8x8_t *)v224.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v221[v226 + 2], v225), v221[v226], v224), 3uLL), v229);
          v226 = 1;
          v227 = 0;
        }
        while ((v228 & 1) != 0);
        v221 += 2;
        v222 += 32;
        --v223;
      }
      while (v223);
    }
  }
  return vpx_variance32x32(v230, 32, a5, a6, a7);
}

uint64_t vpx_sub_pixel_avg_variance32x64_neon()
{
  uint8x16_t *v0;
  int v1;
  __int32 v2;
  __int32 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8x16_t *v7;
  int8x8_t v8;
  int8x8_t v9;
  uint64_t v10;
  uint8x16_t *v11;
  _OWORD *v12;
  uint8x16_t v13;
  uint64_t v14;
  uint8x16_t *v15;
  uint8x16_t v16;
  _OWORD *v17;
  uint8x16_t *v18;
  uint8x16_t v19;
  uint8x16_t v20;
  _OWORD *v21;
  _BYTE *v22;
  int v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint8x16_t v29;
  _OWORD *v30;
  int v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint8x16_t v37;
  uint64_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  _OWORD *v43;
  _OWORD *v44;
  int v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint8x16_t v51;
  uint64_t v53;
  uint8x16_t *v54;
  _OWORD *v55;
  uint8x16_t v56;
  uint64_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  uint8x16_t *v61;
  int v62;
  uint8x16_t v63;
  uint8x16_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  uint8x16_t *v72;
  int v73;
  uint8x16_t v74;
  uint8x16_t v75;
  uint64_t v76;
  char v77;
  char v78;
  _OWORD *v79;
  _BYTE *v80;
  int v81;
  uint8x16_t v82;
  uint8x16_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint8x16_t v87;
  _BYTE v88[2080];
  _OWORD v89[130];
  uint64_t v90;

  v0 = (uint8x16_t *)MEMORY[0x24BDAC7A8]();
  v90 = *MEMORY[0x24BDAC8D0];
  if (v2 == 4)
  {
    if (v3 == 4)
    {
      v53 = 0;
      v54 = (uint8x16_t *)((char *)v0 + 17);
      do
      {
        v55 = &v89[v53];
        v56 = vrhaddq_u8(*(uint8x16_t *)((char *)v54 - 1), *v54);
        *v55 = vrhaddq_u8(*(uint8x16_t *)((char *)v54 - 17), v54[-1]);
        v55[1] = v56;
        v53 += 2;
        v54 = (uint8x16_t *)((char *)v54 + v1);
      }
      while ((_DWORD)(v53 * 16) != 2080);
      v57 = 0;
      v58 = (uint8x16_t)v89[0];
      do
      {
        v59 = (uint8x16_t)v89[v57 + 2];
        v60 = vrhaddq_u8(vrhaddq_u8((uint8x16_t)v89[v57 + 1], (uint8x16_t)v89[v57 + 3]), v7[v57 + 1]);
        v61 = (uint8x16_t *)&v88[v57 * 16];
        *v61 = vrhaddq_u8(vrhaddq_u8(v58, v59), v7[v57]);
        v61[1] = v60;
        v57 += 2;
        v58 = v59;
      }
      while ((_DWORD)(v57 * 16) != 2048);
    }
    else
    {
      v14 = 0;
      v15 = (uint8x16_t *)((char *)v0 + 17);
      if (!v3)
      {
        do
        {
          v16 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)((char *)v15 - 1), *v15), v7[v14 + 1]);
          v17 = &v89[v14];
          *v17 = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)((char *)v15 - 17), v15[-1]), v7[v14]);
          v17[1] = v16;
          v14 += 2;
          v15 = (uint8x16_t *)((char *)v15 + v1);
        }
        while ((_DWORD)(v14 * 16) != 2048);
        return ((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance32x64)(v89, 32, v4, v5, v6);
      }
      do
      {
        v18 = (uint8x16_t *)&v89[v14];
        v19 = vrhaddq_u8(*(uint8x16_t *)((char *)v15 - 17), v15[-1]);
        v20 = vrhaddq_u8(*(uint8x16_t *)((char *)v15 - 1), *v15);
        *v18 = v19;
        v18[1] = v20;
        v14 += 2;
        v15 = (uint8x16_t *)((char *)v15 + v1);
      }
      while ((_DWORD)(v14 * 16) != 2080);
      v19.i32[0] = 8 - v3;
      v20.i32[0] = v3;
      v21 = v89;
      v22 = v88;
      v23 = 64;
      v24 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v19.i8, 0);
      v25 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v20.i8, 0);
      do
      {
        v26 = 0;
        v27 = 1;
        do
        {
          v28 = v27;
          v29 = *v7++;
          *(uint8x16_t *)&v22[v26 * 16] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v21[v26 + 2], *(uint8x8_t *)v25.i8), *(uint8x8_t *)&v21[v26], *(uint8x8_t *)v24.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v21[v26 + 2], v25), (uint8x16_t)v21[v26], v24), 3uLL), v29);
          v26 = 1;
          v27 = 0;
        }
        while ((v28 & 1) != 0);
        v21 += 2;
        v22 += 32;
        --v23;
      }
      while (v23);
    }
  }
  else
  {
    if (!v2)
    {
      if (v3 == 4)
      {
        v38 = 0;
        v39 = *v0;
        do
        {
          v40 = v0[1];
          v0 = (uint8x16_t *)((char *)v0 + v1);
          v41 = *v0;
          v42 = vrhaddq_u8(vrhaddq_u8(v40, v0[1]), v7[v38 + 1]);
          v43 = &v89[v38];
          *v43 = vrhaddq_u8(vrhaddq_u8(v39, *v0), v7[v38]);
          v43[1] = v42;
          v38 += 2;
          v39 = v41;
        }
        while ((_DWORD)(v38 * 16) != 2048);
      }
      else if (v3)
      {
        v8.i32[0] = 8 - v3;
        v9.i32[0] = v3;
        v44 = v89;
        v45 = 64;
        v46 = (uint8x16_t)vdupq_lane_s8(v8, 0);
        v47 = (uint8x16_t)vdupq_lane_s8(v9, 0);
        do
        {
          v48 = 0;
          v49 = 1;
          do
          {
            v50 = v49;
            v51 = *v7++;
            v44[v48] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v0[v48].i8[v1], *(uint8x8_t *)v47.i8), *(uint8x8_t *)v0[v48].i8, *(uint8x8_t *)v46.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v48] + v1), v47), v0[v48], v46), 3uLL), v51);
            v48 = 1;
            v49 = 0;
          }
          while ((v50 & 1) != 0);
          v0 = (uint8x16_t *)((char *)v0 + v1);
          v44 += 2;
          --v45;
        }
        while (v45);
      }
      else
      {
        v10 = 0;
        v11 = v0 + 1;
        do
        {
          v12 = &v89[v10];
          v13 = vrhaddq_u8(*v11, v7[v10 + 1]);
          *v12 = vrhaddq_u8(v11[-1], v7[v10]);
          v12[1] = v13;
          v10 += 2;
          v11 = (uint8x16_t *)((char *)v11 + v1);
        }
        while ((_DWORD)(v10 * 16) != 2048);
      }
      return ((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance32x64)(v89, 32, v4, v5, v6);
    }
    v8.i32[0] = 8 - v2;
    v9.i32[0] = v2;
    v30 = v89;
    if (v3 == 4)
    {
      v62 = 65;
      v63 = (uint8x16_t)vdupq_lane_s8(v8, 0);
      v64 = (uint8x16_t)vdupq_lane_s8(v9, 0);
      do
      {
        v65 = 0;
        v66 = 1;
        do
        {
          v67 = v66;
          v30[v65] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v0[v65].i8[1], *(uint8x8_t *)v64.i8), *(uint8x8_t *)v0[v65].i8, *(uint8x8_t *)v63.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v65] + 1), v64), v0[v65], v63), 3uLL);
          v65 = 1;
          v66 = 0;
        }
        while ((v67 & 1) != 0);
        v0 = (uint8x16_t *)((char *)v0 + v1);
        v30 += 2;
        --v62;
      }
      while (v62);
      v68 = 0;
      v69 = (uint8x16_t)v89[0];
      do
      {
        v70 = (uint8x16_t)v89[v68 + 2];
        v71 = vrhaddq_u8(vrhaddq_u8((uint8x16_t)v89[v68 + 1], (uint8x16_t)v89[v68 + 3]), v7[v68 + 1]);
        v72 = (uint8x16_t *)&v88[v68 * 16];
        *v72 = vrhaddq_u8(vrhaddq_u8(v69, v70), v7[v68]);
        v72[1] = v71;
        v68 += 2;
        v69 = v70;
      }
      while ((_DWORD)(v68 * 16) != 2048);
    }
    else
    {
      if (!v3)
      {
        v31 = 64;
        v32 = (uint8x16_t)vdupq_lane_s8(v8, 0);
        v33 = (uint8x16_t)vdupq_lane_s8(v9, 0);
        do
        {
          v34 = 0;
          v35 = 1;
          do
          {
            v36 = v35;
            v37 = *v7++;
            v30[v34] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v0[v34].i8[1], *(uint8x8_t *)v33.i8), *(uint8x8_t *)v0[v34].i8, *(uint8x8_t *)v32.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v34] + 1), v33), v0[v34], v32), 3uLL), v37);
            v34 = 1;
            v35 = 0;
          }
          while ((v36 & 1) != 0);
          v0 = (uint8x16_t *)((char *)v0 + v1);
          v30 += 2;
          --v31;
        }
        while (v31);
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance32x64)(v89, 32, v4, v5, v6);
      }
      v73 = 65;
      v74 = (uint8x16_t)vdupq_lane_s8(v8, 0);
      v75 = (uint8x16_t)vdupq_lane_s8(v9, 0);
      do
      {
        v76 = 0;
        v77 = 1;
        do
        {
          v78 = v77;
          v30[v76] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v0[v76].i8[1], *(uint8x8_t *)v75.i8), *(uint8x8_t *)v0[v76].i8, *(uint8x8_t *)v74.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v76] + 1), v75), v0[v76], v74), 3uLL);
          v76 = 1;
          v77 = 0;
        }
        while ((v78 & 1) != 0);
        v0 = (uint8x16_t *)((char *)v0 + v1);
        v30 += 2;
        --v73;
      }
      while (v73);
      v74.i32[0] = 8 - v3;
      v75.i32[0] = v3;
      v79 = v89;
      v80 = v88;
      v81 = 64;
      v82 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v74.i8, 0);
      v83 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v75.i8, 0);
      do
      {
        v84 = 0;
        v85 = 1;
        do
        {
          v86 = v85;
          v87 = *v7++;
          *(uint8x16_t *)&v80[v84 * 16] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v79[v84 + 2], *(uint8x8_t *)v83.i8), *(uint8x8_t *)&v79[v84], *(uint8x8_t *)v82.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v79[v84 + 2], v83), (uint8x16_t)v79[v84], v82), 3uLL), v87);
          v84 = 1;
          v85 = 0;
        }
        while ((v86 & 1) != 0);
        v79 += 2;
        v80 += 32;
        --v81;
      }
      while (v81);
    }
  }
  return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance32x64)(v88, 32, v4, v5, v6);
}

uint64_t vpx_sub_pixel_avg_variance64x32_neon()
{
  _OWORD *v0;
  int v1;
  __int32 v2;
  __int32 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x8_t v8;
  int8x8_t v9;
  unint64_t v10;
  uint8x16_t *v11;
  _OWORD *v12;
  uint8x16_t v13;
  uint8x16_t v14;
  unint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint8x16_t v18;
  uint8x16_t v19;
  _OWORD *v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  _OWORD *v24;
  _BYTE *v25;
  int v26;
  uint8x16_t v27;
  uint8x16_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  _OWORD *v32;
  int v33;
  uint8x16_t v34;
  uint8x16_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint8x16_t *v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  uint8x16_t v45;
  _OWORD *v46;
  uint8x16_t v47;
  uint8x16_t v48;
  char *v49;
  _OWORD *v50;
  int v51;
  uint8x16_t v52;
  uint8x16_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  uint8x16_t v60;
  uint8x16_t v61;
  uint64_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  uint8x16_t v65;
  uint8x16_t *v66;
  uint8x16_t v67;
  uint8x16_t v68;
  int v69;
  uint8x16_t v70;
  uint8x16_t v71;
  unint64_t v72;
  uint64_t v73;
  uint8x16_t v74;
  uint8x16_t v75;
  uint8x16_t v76;
  uint8x16_t *v77;
  uint8x16_t v78;
  uint8x16_t v79;
  int v80;
  uint8x16_t v81;
  uint8x16_t v82;
  unint64_t v83;
  _OWORD *v84;
  _BYTE *v85;
  int v86;
  uint8x16_t v87;
  uint8x16_t v88;
  unint64_t v89;
  unint64_t v90;
  _BYTE v91[2112];
  _OWORD v92[132];
  uint64_t v93;

  v0 = (_OWORD *)MEMORY[0x24BDAC7A8]();
  v93 = *MEMORY[0x24BDAC8D0];
  if (v2 == 4)
  {
    if (v3 == 4)
    {
      v57 = 0;
      v58 = v0 + 2;
      do
      {
        v59 = &v92[v57];
        v60 = vrhaddq_u8(*((uint8x16_t *)v58 - 1), *(uint8x16_t *)((char *)v58 - 15));
        *v59 = vrhaddq_u8(*((uint8x16_t *)v58 - 2), *(uint8x16_t *)((char *)v58 - 31));
        v59[1] = v60;
        v61 = vrhaddq_u8(*((uint8x16_t *)v58 + 1), *(uint8x16_t *)((char *)v58 + 17));
        v59[2] = vrhaddq_u8(*(uint8x16_t *)v58, *(uint8x16_t *)((char *)v58 + 1));
        v59[3] = v61;
        v57 += 4;
        v58 = (_OWORD *)((char *)v58 + v1);
      }
      while ((_DWORD)(v57 * 16) != 2112);
      v62 = 0;
      v63 = (uint8x16_t)v92[0];
      do
      {
        v64 = (uint8x16_t)v92[v62 + 4];
        v65 = (uint8x16_t)v92[v62 + 2];
        v66 = (uint8x16_t *)&v91[v62 * 16];
        v67 = vrhaddq_u8(vrhaddq_u8((uint8x16_t)v92[v62 + 1], (uint8x16_t)v92[v62 + 5]), *(uint8x16_t *)(v7 + v62 * 16 + 16));
        *v66 = vrhaddq_u8(vrhaddq_u8(v63, v64), *(uint8x16_t *)(v7 + v62 * 16));
        v66[1] = v67;
        v68 = vrhaddq_u8(vrhaddq_u8((uint8x16_t)v92[v62 + 3], (uint8x16_t)v92[v62 + 7]), *(uint8x16_t *)(v7 + v62 * 16 + 48));
        v66[2] = vrhaddq_u8(vrhaddq_u8(v65, (uint8x16_t)v92[v62 + 6]), *(uint8x16_t *)(v7 + v62 * 16 + 32));
        v66[3] = v68;
        v62 += 4;
        v63 = v64;
      }
      while ((_DWORD)(v62 * 16) != 2048);
    }
    else
    {
      v15 = 0;
      v16 = v0 + 2;
      if (!v3)
      {
        do
        {
          v17 = &v92[v15 / 0x10];
          v18 = vrhaddq_u8(vrhaddq_u8(*((uint8x16_t *)v16 - 1), *(uint8x16_t *)((char *)v16 - 15)), *(uint8x16_t *)(v7 + v15 + 16));
          *v17 = vrhaddq_u8(vrhaddq_u8(*((uint8x16_t *)v16 - 2), *(uint8x16_t *)((char *)v16 - 31)), *(uint8x16_t *)(v7 + v15));
          v17[1] = v18;
          v19 = vrhaddq_u8(vrhaddq_u8(*((uint8x16_t *)v16 + 1), *(uint8x16_t *)((char *)v16 + 17)), *(uint8x16_t *)(v7 + v15 + 48));
          v17[2] = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v16, *(uint8x16_t *)((char *)v16 + 1)), *(uint8x16_t *)(v7 + v15 + 32));
          v17[3] = v19;
          v15 += 64;
          v16 = (_OWORD *)((char *)v16 + v1);
        }
        while ((_DWORD)v15 != 2048);
        return ((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance64x32)(v92, 64, v4, v5, v6);
      }
      do
      {
        v20 = &v92[v15 / 0x10];
        v21 = vrhaddq_u8(*((uint8x16_t *)v16 - 1), *(uint8x16_t *)((char *)v16 - 15));
        *v20 = vrhaddq_u8(*((uint8x16_t *)v16 - 2), *(uint8x16_t *)((char *)v16 - 31));
        v20[1] = v21;
        v22 = vrhaddq_u8(*(uint8x16_t *)v16, *(uint8x16_t *)((char *)v16 + 1));
        v23 = vrhaddq_u8(*((uint8x16_t *)v16 + 1), *(uint8x16_t *)((char *)v16 + 17));
        v20[2] = v22;
        v20[3] = v23;
        v15 += 64;
        v16 = (_OWORD *)((char *)v16 + v1);
      }
      while ((_DWORD)v15 != 2112);
      v22.i32[0] = 8 - v3;
      v23.i32[0] = v3;
      v24 = v92;
      v25 = v91;
      v26 = 32;
      v27 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v22.i8, 0);
      v28 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v23.i8, 0);
      do
      {
        v29 = 0;
        do
        {
          *(uint8x16_t *)&v25[v29 * 16] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v24[v29 + 4], *(uint8x8_t *)v28.i8), *(uint8x8_t *)&v24[v29], *(uint8x8_t *)v27.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v24[v29 + 4], v28), (uint8x16_t)v24[v29], v27), 3uLL), *(uint8x16_t *)(v7 + v29 * 16));
          v30 = v29 * 16 + 16;
          v31 = v29++ >= 3;
        }
        while (!v31);
        v24 += 4;
        v25 += 64;
        v7 += v30;
        --v26;
      }
      while (v26);
    }
  }
  else
  {
    if (!v2)
    {
      if (v3 == 4)
      {
        v38 = 0;
        v40 = *(uint8x16_t *)v0;
        v39 = (uint8x16_t *)(v0 + 2);
        v41 = v40;
        do
        {
          v42 = v39[-1];
          v43 = *v39;
          v44 = v39[1];
          v39 = (uint8x16_t *)((char *)v39 + v1);
          v45 = v39[-2];
          v46 = &v92[v38 / 0x10];
          v47 = vrhaddq_u8(vrhaddq_u8(v42, v39[-1]), *(uint8x16_t *)(v7 + v38 + 16));
          *v46 = vrhaddq_u8(vrhaddq_u8(v41, v45), *(uint8x16_t *)(v7 + v38));
          v46[1] = v47;
          v48 = vrhaddq_u8(vrhaddq_u8(v44, v39[1]), *(uint8x16_t *)(v7 + v38 + 48));
          v46[2] = vrhaddq_u8(vrhaddq_u8(v43, *v39), *(uint8x16_t *)(v7 + v38 + 32));
          v46[3] = v48;
          v38 += 64;
          v41 = v45;
        }
        while ((_DWORD)v38 != 2048);
      }
      else if (v3)
      {
        v8.i32[0] = 8 - v3;
        v9.i32[0] = v3;
        v49 = (char *)v0 + v1;
        v50 = v92;
        v51 = 32;
        v52 = (uint8x16_t)vdupq_lane_s8(v8, 0);
        v53 = (uint8x16_t)vdupq_lane_s8(v9, 0);
        do
        {
          v54 = 0;
          do
          {
            v50[v54] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v49[v54 * 16], *(uint8x8_t *)v53.i8), *(uint8x8_t *)&v0[v54], *(uint8x8_t *)v52.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)&v49[v54 * 16], v53), (uint8x16_t)v0[v54], v52), 3uLL), *(uint8x16_t *)(v7 + v54 * 16));
            v55 = v54 * 16 + 16;
            v31 = v54++ >= 3;
          }
          while (!v31);
          v0 = (_OWORD *)((char *)v0 + v1);
          v50 += 4;
          v49 += v1;
          v7 += v55;
          --v51;
        }
        while (v51);
      }
      else
      {
        v10 = 0;
        v11 = (uint8x16_t *)(v0 + 2);
        do
        {
          v12 = &v92[v10 / 0x10];
          v13 = vrhaddq_u8(v11[-1], *(uint8x16_t *)(v7 + v10 + 16));
          *v12 = vrhaddq_u8(v11[-2], *(uint8x16_t *)(v7 + v10));
          v12[1] = v13;
          v14 = vrhaddq_u8(v11[1], *(uint8x16_t *)(v7 + v10 + 48));
          v12[2] = vrhaddq_u8(*v11, *(uint8x16_t *)(v7 + v10 + 32));
          v12[3] = v14;
          v10 += 64;
          v11 = (uint8x16_t *)((char *)v11 + v1);
        }
        while ((_DWORD)v10 != 2048);
      }
      return ((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance64x32)(v92, 64, v4, v5, v6);
    }
    v8.i32[0] = 8 - v2;
    v9.i32[0] = v2;
    v32 = v92;
    if (v3 == 4)
    {
      v69 = 33;
      v70 = (uint8x16_t)vdupq_lane_s8(v8, 0);
      v71 = (uint8x16_t)vdupq_lane_s8(v9, 0);
      do
      {
        v72 = 0;
        do
        {
          v32[v72] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)&v0[v72] + 1), *(uint8x8_t *)v71.i8), *(uint8x8_t *)&v0[v72], *(uint8x8_t *)v70.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v72] + 1), v71), (uint8x16_t)v0[v72], v70), 3uLL);
          v31 = v72++ >= 3;
        }
        while (!v31);
        v0 = (_OWORD *)((char *)v0 + v1);
        v32 += 4;
        --v69;
      }
      while (v69);
      v73 = 0;
      v74 = (uint8x16_t)v92[0];
      do
      {
        v75 = (uint8x16_t)v92[v73 + 4];
        v76 = (uint8x16_t)v92[v73 + 2];
        v77 = (uint8x16_t *)&v91[v73 * 16];
        v78 = vrhaddq_u8(vrhaddq_u8((uint8x16_t)v92[v73 + 1], (uint8x16_t)v92[v73 + 5]), *(uint8x16_t *)(v7 + v73 * 16 + 16));
        *v77 = vrhaddq_u8(vrhaddq_u8(v74, v75), *(uint8x16_t *)(v7 + v73 * 16));
        v77[1] = v78;
        v79 = vrhaddq_u8(vrhaddq_u8((uint8x16_t)v92[v73 + 3], (uint8x16_t)v92[v73 + 7]), *(uint8x16_t *)(v7 + v73 * 16 + 48));
        v77[2] = vrhaddq_u8(vrhaddq_u8(v76, (uint8x16_t)v92[v73 + 6]), *(uint8x16_t *)(v7 + v73 * 16 + 32));
        v77[3] = v79;
        v73 += 4;
        v74 = v75;
      }
      while ((_DWORD)(v73 * 16) != 2048);
    }
    else
    {
      if (!v3)
      {
        v33 = 32;
        v34 = (uint8x16_t)vdupq_lane_s8(v8, 0);
        v35 = (uint8x16_t)vdupq_lane_s8(v9, 0);
        do
        {
          v36 = 0;
          do
          {
            v32[v36] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)&v0[v36] + 1), *(uint8x8_t *)v35.i8), *(uint8x8_t *)&v0[v36], *(uint8x8_t *)v34.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v36] + 1), v35), (uint8x16_t)v0[v36], v34), 3uLL), *(uint8x16_t *)(v7 + v36 * 16));
            v37 = v36 * 16 + 16;
            v31 = v36++ >= 3;
          }
          while (!v31);
          v0 = (_OWORD *)((char *)v0 + v1);
          v32 += 4;
          v7 += v37;
          --v33;
        }
        while (v33);
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance64x32)(v92, 64, v4, v5, v6);
      }
      v80 = 33;
      v81 = (uint8x16_t)vdupq_lane_s8(v8, 0);
      v82 = (uint8x16_t)vdupq_lane_s8(v9, 0);
      do
      {
        v83 = 0;
        do
        {
          v32[v83] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)&v0[v83] + 1), *(uint8x8_t *)v82.i8), *(uint8x8_t *)&v0[v83], *(uint8x8_t *)v81.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v83] + 1), v82), (uint8x16_t)v0[v83], v81), 3uLL);
          v31 = v83++ >= 3;
        }
        while (!v31);
        v0 = (_OWORD *)((char *)v0 + v1);
        v32 += 4;
        --v80;
      }
      while (v80);
      v81.i32[0] = 8 - v3;
      v82.i32[0] = v3;
      v84 = v92;
      v85 = v91;
      v86 = 32;
      v87 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v81.i8, 0);
      v88 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v82.i8, 0);
      do
      {
        v89 = 0;
        do
        {
          *(uint8x16_t *)&v85[v89 * 16] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v84[v89 + 4], *(uint8x8_t *)v88.i8), *(uint8x8_t *)&v84[v89], *(uint8x8_t *)v87.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v84[v89 + 4], v88), (uint8x16_t)v84[v89], v87), 3uLL), *(uint8x16_t *)(v7 + v89 * 16));
          v90 = v89 * 16 + 16;
          v31 = v89++ >= 3;
        }
        while (!v31);
        v84 += 4;
        v85 += 64;
        v7 += v90;
        --v86;
      }
      while (v86);
    }
  }
  return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance64x32)(v91, 64, v4, v5, v6);
}

uint64_t vpx_sub_pixel_avg_variance64x64_neon()
{
  _OWORD *v0;
  int v1;
  __int32 v2;
  __int32 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int8x8_t v8;
  int8x8_t v9;
  unint64_t v10;
  uint8x16_t *v11;
  _OWORD *v12;
  uint8x16_t v13;
  uint8x16_t v14;
  unint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint8x16_t v18;
  uint8x16_t v19;
  _OWORD *v20;
  int v21;
  uint8x16_t v22;
  uint8x16_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint8x16_t *v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  uint8x16_t v32;
  uint8x16_t v33;
  uint8x16_t v34;
  _OWORD *v35;
  uint8x16_t v36;
  uint8x16_t v37;
  char *v38;
  _OWORD *v39;
  int v40;
  uint8x16_t v41;
  uint8x16_t v42;
  unint64_t v43;
  unint64_t v44;
  _OWORD *v46;
  _OWORD *v47;
  int v48;
  uint8x16_t v49;
  uint8x16_t v50;
  uint64_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t *v55;
  uint8x16_t v56;
  uint8x16_t v57;
  _OWORD *v58;
  _OWORD *v59;
  int v60;
  uint8x16_t v61;
  uint8x16_t v62;
  uint8x16_t v63;
  _OWORD *v64;
  char *v65;
  int v66;
  uint8x16_t v67;
  uint8x16_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  uint8x16_t v72;
  uint8x16_t v73;
  unint64_t v74;
  uint64_t v75;
  uint8x16_t v76;
  uint8x16_t v77;
  uint8x16_t v78;
  uint8x16_t *v79;
  uint8x16_t v80;
  uint8x16_t v81;
  int v82;
  uint8x16_t v83;
  uint8x16_t v84;
  unint64_t v85;
  _OWORD *v86;
  char *v87;
  int v88;
  uint8x16_t v89;
  uint8x16_t v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  _OWORD v94[260];
  uint64_t v95;

  v0 = (_OWORD *)MEMORY[0x24BDAC7A8]();
  v95 = *MEMORY[0x24BDAC8D0];
  if (v2 == 4)
  {
    if (v3 == 4)
    {
      v46 = v0 + 2;
      v47 = v94;
      v48 = -65;
      do
      {
        v49 = vrhaddq_u8(*((uint8x16_t *)v46 - 1), *(uint8x16_t *)((char *)v46 - 15));
        *v47 = vrhaddq_u8(*((uint8x16_t *)v46 - 2), *(uint8x16_t *)((char *)v46 - 31));
        v47[1] = v49;
        v50 = vrhaddq_u8(*((uint8x16_t *)v46 + 1), *(uint8x16_t *)((char *)v46 + 17));
        v47[2] = vrhaddq_u8(*(uint8x16_t *)v46, *(uint8x16_t *)((char *)v46 + 1));
        v47[3] = v50;
        v47 += 4;
        v46 = (_OWORD *)((char *)v46 + v1);
        v26 = __CFADD__(v48++, 1);
      }
      while (!v26);
      v51 = 0;
      v52 = (uint8x16_t)v94[0];
      do
      {
        v53 = (uint8x16_t)v94[v51 + 4];
        v54 = (uint8x16_t)v94[v51 + 2];
        v55 = (uint8x16_t *)(&v93 + v51 * 16);
        v56 = vrhaddq_u8(vrhaddq_u8((uint8x16_t)v94[v51 + 1], (uint8x16_t)v94[v51 + 5]), *(uint8x16_t *)(v7 + v51 * 16 + 16));
        *v55 = vrhaddq_u8(vrhaddq_u8(v52, v53), *(uint8x16_t *)(v7 + v51 * 16));
        v55[1] = v56;
        v57 = vrhaddq_u8(vrhaddq_u8((uint8x16_t)v94[v51 + 3], (uint8x16_t)v94[v51 + 7]), *(uint8x16_t *)(v7 + v51 * 16 + 48));
        v55[2] = vrhaddq_u8(vrhaddq_u8(v54, (uint8x16_t)v94[v51 + 6]), *(uint8x16_t *)(v7 + v51 * 16 + 32));
        v55[3] = v57;
        v51 += 4;
        v52 = v53;
      }
      while ((_DWORD)(v51 * 16) != 4096);
    }
    else
    {
      if (!v3)
      {
        v15 = 0;
        v16 = v0 + 2;
        do
        {
          v17 = &v94[v15 / 0x10];
          v18 = vrhaddq_u8(vrhaddq_u8(*((uint8x16_t *)v16 - 1), *(uint8x16_t *)((char *)v16 - 15)), *(uint8x16_t *)(v7 + v15 + 16));
          *v17 = vrhaddq_u8(vrhaddq_u8(*((uint8x16_t *)v16 - 2), *(uint8x16_t *)((char *)v16 - 31)), *(uint8x16_t *)(v7 + v15));
          v17[1] = v18;
          v19 = vrhaddq_u8(vrhaddq_u8(*((uint8x16_t *)v16 + 1), *(uint8x16_t *)((char *)v16 + 17)), *(uint8x16_t *)(v7 + v15 + 48));
          v17[2] = vrhaddq_u8(vrhaddq_u8(*(uint8x16_t *)v16, *(uint8x16_t *)((char *)v16 + 1)), *(uint8x16_t *)(v7 + v15 + 32));
          v17[3] = v19;
          v15 += 64;
          v16 = (_OWORD *)((char *)v16 + v1);
        }
        while ((_DWORD)v15 != 4096);
        return ((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance64x64)(v94, 64, v4, v5, v6);
      }
      v58 = v0 + 2;
      v59 = v94;
      v60 = -65;
      do
      {
        v61 = vrhaddq_u8(*((uint8x16_t *)v58 - 1), *(uint8x16_t *)((char *)v58 - 15));
        *v59 = vrhaddq_u8(*((uint8x16_t *)v58 - 2), *(uint8x16_t *)((char *)v58 - 31));
        v59[1] = v61;
        v62 = vrhaddq_u8(*(uint8x16_t *)v58, *(uint8x16_t *)((char *)v58 + 1));
        v63 = vrhaddq_u8(*((uint8x16_t *)v58 + 1), *(uint8x16_t *)((char *)v58 + 17));
        v59[2] = v62;
        v59[3] = v63;
        v59 += 4;
        v58 = (_OWORD *)((char *)v58 + v1);
        v26 = __CFADD__(v60++, 1);
      }
      while (!v26);
      v62.i32[0] = 8 - v3;
      v63.i32[0] = v3;
      v64 = v94;
      v65 = &v93;
      v66 = 64;
      v67 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v62.i8, 0);
      v68 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v63.i8, 0);
      do
      {
        v69 = 0;
        do
        {
          *(uint8x16_t *)&v65[v69 * 16] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v64[v69 + 4], *(uint8x8_t *)v68.i8), *(uint8x8_t *)&v64[v69], *(uint8x8_t *)v67.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v64[v69 + 4], v68), (uint8x16_t)v64[v69], v67), 3uLL), *(uint8x16_t *)(v7 + v69 * 16));
          v70 = v69 * 16 + 16;
          v26 = v69++ >= 3;
        }
        while (!v26);
        v64 += 4;
        v65 += 64;
        v7 += v70;
        --v66;
      }
      while (v66);
    }
  }
  else
  {
    if (!v2)
    {
      if (v3 == 4)
      {
        v27 = 0;
        v29 = *(uint8x16_t *)v0;
        v28 = (uint8x16_t *)(v0 + 2);
        v30 = v29;
        do
        {
          v31 = v28[-1];
          v32 = *v28;
          v33 = v28[1];
          v28 = (uint8x16_t *)((char *)v28 + v1);
          v34 = v28[-2];
          v35 = &v94[v27 / 0x10];
          v36 = vrhaddq_u8(vrhaddq_u8(v31, v28[-1]), *(uint8x16_t *)(v7 + v27 + 16));
          *v35 = vrhaddq_u8(vrhaddq_u8(v30, v34), *(uint8x16_t *)(v7 + v27));
          v35[1] = v36;
          v37 = vrhaddq_u8(vrhaddq_u8(v33, v28[1]), *(uint8x16_t *)(v7 + v27 + 48));
          v35[2] = vrhaddq_u8(vrhaddq_u8(v32, *v28), *(uint8x16_t *)(v7 + v27 + 32));
          v35[3] = v37;
          v27 += 64;
          v30 = v34;
        }
        while ((_DWORD)v27 != 4096);
      }
      else if (v3)
      {
        v8.i32[0] = 8 - v3;
        v9.i32[0] = v3;
        v38 = (char *)v0 + v1;
        v39 = v94;
        v40 = 64;
        v41 = (uint8x16_t)vdupq_lane_s8(v8, 0);
        v42 = (uint8x16_t)vdupq_lane_s8(v9, 0);
        do
        {
          v43 = 0;
          do
          {
            v39[v43] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v38[v43 * 16], *(uint8x8_t *)v42.i8), *(uint8x8_t *)&v0[v43], *(uint8x8_t *)v41.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)&v38[v43 * 16], v42), (uint8x16_t)v0[v43], v41), 3uLL), *(uint8x16_t *)(v7 + v43 * 16));
            v44 = v43 * 16 + 16;
            v26 = v43++ >= 3;
          }
          while (!v26);
          v0 = (_OWORD *)((char *)v0 + v1);
          v39 += 4;
          v38 += v1;
          v7 += v44;
          --v40;
        }
        while (v40);
      }
      else
      {
        v10 = 0;
        v11 = (uint8x16_t *)(v0 + 2);
        do
        {
          v12 = &v94[v10 / 0x10];
          v13 = vrhaddq_u8(v11[-1], *(uint8x16_t *)(v7 + v10 + 16));
          *v12 = vrhaddq_u8(v11[-2], *(uint8x16_t *)(v7 + v10));
          v12[1] = v13;
          v14 = vrhaddq_u8(v11[1], *(uint8x16_t *)(v7 + v10 + 48));
          v12[2] = vrhaddq_u8(*v11, *(uint8x16_t *)(v7 + v10 + 32));
          v12[3] = v14;
          v10 += 64;
          v11 = (uint8x16_t *)((char *)v11 + v1);
        }
        while ((_DWORD)v10 != 4096);
      }
      return ((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance64x64)(v94, 64, v4, v5, v6);
    }
    v8.i32[0] = 8 - v2;
    v9.i32[0] = v2;
    v20 = v94;
    if (v3 == 4)
    {
      v71 = 65;
      v72 = (uint8x16_t)vdupq_lane_s8(v8, 0);
      v73 = (uint8x16_t)vdupq_lane_s8(v9, 0);
      do
      {
        v74 = 0;
        do
        {
          v20[v74] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)&v0[v74] + 1), *(uint8x8_t *)v73.i8), *(uint8x8_t *)&v0[v74], *(uint8x8_t *)v72.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v74] + 1), v73), (uint8x16_t)v0[v74], v72), 3uLL);
          v26 = v74++ >= 3;
        }
        while (!v26);
        v0 = (_OWORD *)((char *)v0 + v1);
        v20 += 4;
        --v71;
      }
      while (v71);
      v75 = 0;
      v76 = (uint8x16_t)v94[0];
      do
      {
        v77 = (uint8x16_t)v94[v75 + 4];
        v78 = (uint8x16_t)v94[v75 + 2];
        v79 = (uint8x16_t *)(&v93 + v75 * 16);
        v80 = vrhaddq_u8(vrhaddq_u8((uint8x16_t)v94[v75 + 1], (uint8x16_t)v94[v75 + 5]), *(uint8x16_t *)(v7 + v75 * 16 + 16));
        *v79 = vrhaddq_u8(vrhaddq_u8(v76, v77), *(uint8x16_t *)(v7 + v75 * 16));
        v79[1] = v80;
        v81 = vrhaddq_u8(vrhaddq_u8((uint8x16_t)v94[v75 + 3], (uint8x16_t)v94[v75 + 7]), *(uint8x16_t *)(v7 + v75 * 16 + 48));
        v79[2] = vrhaddq_u8(vrhaddq_u8(v78, (uint8x16_t)v94[v75 + 6]), *(uint8x16_t *)(v7 + v75 * 16 + 32));
        v79[3] = v81;
        v75 += 4;
        v76 = v77;
      }
      while ((_DWORD)(v75 * 16) != 4096);
    }
    else
    {
      if (!v3)
      {
        v21 = 64;
        v22 = (uint8x16_t)vdupq_lane_s8(v8, 0);
        v23 = (uint8x16_t)vdupq_lane_s8(v9, 0);
        do
        {
          v24 = 0;
          do
          {
            v20[v24] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)&v0[v24] + 1), *(uint8x8_t *)v23.i8), *(uint8x8_t *)&v0[v24], *(uint8x8_t *)v22.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v24] + 1), v23), (uint8x16_t)v0[v24], v22), 3uLL), *(uint8x16_t *)(v7 + v24 * 16));
            v25 = v24 * 16 + 16;
            v26 = v24++ >= 3;
          }
          while (!v26);
          v0 = (_OWORD *)((char *)v0 + v1);
          v20 += 4;
          v7 += v25;
          --v21;
        }
        while (v21);
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance64x64)(v94, 64, v4, v5, v6);
      }
      v82 = 65;
      v83 = (uint8x16_t)vdupq_lane_s8(v8, 0);
      v84 = (uint8x16_t)vdupq_lane_s8(v9, 0);
      do
      {
        v85 = 0;
        do
        {
          v20[v85] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)&v0[v85] + 1), *(uint8x8_t *)v84.i8), *(uint8x8_t *)&v0[v85], *(uint8x8_t *)v83.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)((char *)&v0[v85] + 1), v84), (uint8x16_t)v0[v85], v83), 3uLL);
          v26 = v85++ >= 3;
        }
        while (!v26);
        v0 = (_OWORD *)((char *)v0 + v1);
        v20 += 4;
        --v82;
      }
      while (v82);
      v83.i32[0] = 8 - v3;
      v84.i32[0] = v3;
      v86 = v94;
      v87 = &v93;
      v88 = 64;
      v89 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v83.i8, 0);
      v90 = (uint8x16_t)vdupq_lane_s8(*(int8x8_t *)v84.i8, 0);
      do
      {
        v91 = 0;
        do
        {
          *(uint8x16_t *)&v87[v91 * 16] = vrhaddq_u8((uint8x16_t)vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v86[v91 + 4], *(uint8x8_t *)v90.i8), *(uint8x8_t *)&v86[v91], *(uint8x8_t *)v89.i8), 3uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v86[v91 + 4], v90), (uint8x16_t)v86[v91], v89), 3uLL), *(uint8x16_t *)(v7 + v91 * 16));
          v92 = v91 * 16 + 16;
          v26 = v91++ >= 3;
        }
        while (!v26);
        v86 += 4;
        v87 += 64;
        v7 += v92;
        --v88;
      }
      while (v88);
    }
  }
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))vpx_variance64x64)(&v93, 64, v4, v5, v6);
}

uint64_t vpx_subtract_block_neon(uint64_t result, int a2, uint16x8_t *a3, uint64_t a4, uint8x8_t *a5, uint64_t a6, uint8x8_t *a7, uint64_t a8)
{
  uint16x8_t *v8;
  uint16x8_t *v9;
  uint64_t v10;
  uint8x16_t v11;
  uint8x16_t v12;
  uint8x16_t v13;
  uint8x16_t v14;
  unint64_t v15;
  uint16x8_t *v16;
  uint16x8_t v17;
  uint8x8_t v18;
  uint8x8_t v19;
  int8x16_t v20;

  if (a2 < 17)
  {
    if (a2 < 9)
    {
      if (a2 < 5)
      {
        do
        {
          v18.i32[0] = a5->i32[0];
          v18.i32[1] = *(__int32 *)((char *)a5->i32 + (int)a6);
          v19.i32[0] = a7->i32[0];
          v19.i32[1] = *(__int32 *)((char *)a7->i32 + (int)a8);
          v20 = (int8x16_t)vsubl_u8(v18, v19);
          a3->i64[0] = v20.i64[0];
          *(uint64_t *)((char *)a3->i64 + 2 * a4) = vextq_s8(v20, v20, 8uLL).u64[0];
          a7 = (uint8x8_t *)((char *)a7 + 2 * a8);
          a5 = (uint8x8_t *)((char *)a5 + 2 * a6);
          a3 = (uint16x8_t *)((char *)a3 + 4 * a4);
          result = (result - 2);
        }
        while ((_DWORD)result);
      }
      else
      {
        do
        {
          *a3 = vsubl_u8(*a5, *a7);
          a7 = (uint8x8_t *)((char *)a7 + a8);
          a5 = (uint8x8_t *)((char *)a5 + a6);
          a3 = (uint16x8_t *)((char *)a3 + 2 * a4);
          result = (result - 1);
        }
        while ((_DWORD)result);
      }
    }
    else
    {
      v16 = a3 + 1;
      do
      {
        v17 = vsubl_high_u8(*(uint8x16_t *)a5->i8, *(uint8x16_t *)a7->i8);
        v16[-1] = vsubl_u8(*a5, *a7);
        *v16 = v17;
        a7 = (uint8x8_t *)((char *)a7 + a8);
        a5 = (uint8x8_t *)((char *)a5 + a6);
        v16 = (uint16x8_t *)((char *)v16 + 2 * a4);
        result = (result - 1);
      }
      while ((_DWORD)result);
    }
  }
  else
  {
    v8 = a3 + 2;
    do
    {
      v9 = v8;
      v10 = 2;
      do
      {
        v11 = *(uint8x16_t *)a5[v10 - 2].i8;
        v12 = *(uint8x16_t *)a5[v10].i8;
        v13 = *(uint8x16_t *)a7[v10 - 2].i8;
        v14 = *(uint8x16_t *)a7[v10].i8;
        v9[-2] = vsubl_u8(*(uint8x8_t *)v11.i8, *(uint8x8_t *)v13.i8);
        v9[-1] = vsubl_high_u8(v11, v13);
        *v9 = vsubl_u8(*(uint8x8_t *)v12.i8, *(uint8x8_t *)v14.i8);
        v9[1] = vsubl_high_u8(v12, v14);
        v9 += 4;
        v15 = v10 * 8 + 16;
        v10 += 4;
      }
      while (v15 < a2);
      a7 = (uint8x8_t *)((char *)a7 + a8);
      a5 = (uint8x8_t *)((char *)a5 + a6);
      v8 = (uint16x8_t *)((char *)v8 + 2 * a4);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

uint64_t vpx_sum_squares_2d_i16_neon(int16x4_t *a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64x2_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int32x4_t v15;
  int32x4_t v16;
  int16x4_t *v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;

  if (a3 == 4)
    return vaddlvq_u32((uint32x4_t)vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)((char *)a1 + 2 * a2), *(int16x4_t *)((char *)a1 + 2 * a2)), *a1, *a1), *(int16x4_t *)((char *)a1 + 4 * a2), *(int16x4_t *)((char *)a1 + 4 * a2)), *(int16x4_t *)((char *)a1 + 6 * a2), *(int16x4_t *)((char *)a1 + 6 * a2)));
  v4 = 8 * a2;
  v5 = 14 * a2;
  v6 = 12 * a2;
  v7 = 10 * a2;
  v8 = a2;
  v9 = 6 * a2;
  v10 = 4 * a2;
  v11 = 0uLL;
  v12 = a3;
  v13 = 2 * a2;
  do
  {
    v14 = a3;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = a1;
    do
    {
      v18 = *(int16x8_t *)v17->i8;
      v19 = *(int16x8_t *)&v17->i8[v13];
      v20 = *(int16x8_t *)&v17->i8[v10];
      v21 = *(int16x8_t *)&v17->i8[v9];
      v22 = *(int16x8_t *)v17[v8].i8;
      v23 = *(int16x8_t *)&v17->i8[v7];
      v24 = *(int16x8_t *)&v17->i8[v6];
      v25 = *(int16x8_t *)&v17->i8[v5];
      v15 = vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(v15, *(int16x4_t *)v18.i8, *(int16x4_t *)v18.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v19.i8), *(int16x4_t *)v20.i8, *(int16x4_t *)v20.i8), *(int16x4_t *)v21.i8, *(int16x4_t *)v21.i8), *(int16x4_t *)v22.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v23.i8, *(int16x4_t *)v23.i8), *(int16x4_t *)v24.i8, *(int16x4_t *)v24.i8),
              *(int16x4_t *)v25.i8,
              *(int16x4_t *)v25.i8);
      v16 = vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(v16, v18, v18), v19, v19), v20, v20), v21, v21), v22, v22), v23, v23), v24, v24), v25, v25);
      v17 += 2;
      v14 -= 8;
    }
    while (v14);
    v11 = (int64x2_t)vpadalq_u32(vpadalq_u32((uint64x2_t)v11, (uint32x4_t)v15), (uint32x4_t)v16);
    a1 = (int16x4_t *)((char *)a1 + 2 * v4);
    v12 -= 8;
  }
  while (v12);
  return vaddvq_s64(v11);
}

uint64_t vp8_decoder_create_threads(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  size_t v5;
  void *v6;
  unint64_t v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  _QWORD *v11;
  size_t v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  void **v16;
  size_t v17;
  void *v18;
  unint64_t v19;
  task_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int *__attribute__((__org_typedef(jmp_buf))) v28;

  *(_DWORD *)(result + 10832) = 0;
  *(_DWORD *)(result + 10848) = 0;
  v1 = *(_DWORD *)(result + 10836);
  if (v1 >= *(_DWORD *)(result + 10216))
    v1 = *(_DWORD *)(result + 10216);
  if (v1 >= 8)
    v1 = 8;
  if (v1 < 2)
    return result;
  v2 = result;
  v3 = result + 4384;
  *(_DWORD *)(result + 10832) = 1;
  v4 = v1 - 1;
  *(_DWORD *)(result + 10844) = v4;
  v5 = 8 * v4;
  v6 = malloc_type_malloc(v5 + 23, 0x74AD08B5uLL);
  if (v6 && (v7 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v7 - 8) = v6, v7))
  {
    bzero((void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0), v5);
    *(_QWORD *)(v2 + 10944) = v7;
  }
  else
  {
    *(_QWORD *)(v2 + 10944) = 0;
    vpx_internal_error(v3, 2, "Failed to allocate (pbi->h_decoding_thread)");
  }
  v8 = 4 * *(unsigned int *)(v2 + 10844);
  v9 = malloc_type_malloc(v8 + 23, 0x74AD08B5uLL);
  if (v9 && (v10 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v10 - 8) = v9, v10))
  {
    bzero((void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0), v8);
    v11 = (_QWORD *)(v2 + 10952);
    *(_QWORD *)(v2 + 10952) = v10;
  }
  else
  {
    v11 = (_QWORD *)(v2 + 10952);
    *(_QWORD *)(v2 + 10952) = 0;
    vpx_internal_error(v3, 2, "Failed to allocate (pbi->h_event_start_decoding)");
  }
  v12 = (4352 * *(unsigned int *)(v2 + 10844)) | 0x27;
  if (v12 > 0x10000000000 || (v13 = malloc_type_malloc(v12, 0x74AD08B5uLL)) == 0)
  {
    v16 = (void **)(v2 + 10928);
    *(_QWORD *)(v2 + 10928) = 0;
    goto LABEL_19;
  }
  v14 = v13;
  v15 = (_QWORD *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFE0);
  *(v15 - 1) = v14;
  *(_QWORD *)(v2 + 10928) = v15;
  if (!v15)
  {
    v16 = (void **)(v2 + 10928);
LABEL_19:
    vpx_internal_error(v3, 2, "Failed to allocate (pbi->mb_row_di)");
    v15 = *v16;
  }
  bzero(v15, 4352 * *(unsigned int *)(v2 + 10844));
  v17 = 24 * *(unsigned int *)(v2 + 10844);
  v18 = malloc_type_malloc(v17 + 23, 0x74AD08B5uLL);
  if (v18 && (v19 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v19 - 8) = v18, v19))
  {
    bzero((void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF0), v17);
    *(_QWORD *)(v2 + 10936) = v19;
  }
  else
  {
    *(_QWORD *)(v2 + 10936) = 0;
    vpx_internal_error(v3, 2, "Failed to allocate (pbi->de_thread_data)");
  }
  v20 = (task_t *)MEMORY[0x24BDAEC58];
  result = semaphore_create(*MEMORY[0x24BDAEC58], (semaphore_t *)(v2 + 10960), 0, 0);
  if ((_DWORD)result)
    result = vpx_internal_error(v3, 2, "Failed to initialize semaphore");
  if (*(_DWORD *)(v2 + 10844))
  {
    v28 = (int *)v3;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      result = semaphore_create(*v20, (semaphore_t *)(*v11 + v24), 0, 0);
      if ((_DWORD)result)
      {
LABEL_31:
        *(_DWORD *)(v2 + 10848) = v25;
        if ((_DWORD)v25 == *(_DWORD *)(v2 + 10844))
          return result;
        goto LABEL_36;
      }
      vp8_setup_block_dptrs((_QWORD *)(*(_QWORD *)(v2 + 10928) + v21));
      v26 = (_QWORD *)(*(_QWORD *)(v2 + 10936) + v22);
      *(_DWORD *)v26 = v25;
      v27 = *(_QWORD *)(v2 + 10928) + v21;
      v26[1] = v2;
      v26[2] = v27;
      result = pthread_create((pthread_t *)(*(_QWORD *)(v2 + 10944) + v23), 0, (void *(__cdecl *)(void *))thread_decoding_proc, v26);
      if ((_DWORD)result)
        break;
      ++v25;
      v24 += 4;
      v23 += 8;
      v22 += 24;
      v21 += 4352;
      if (v25 >= *(unsigned int *)(v2 + 10844))
        goto LABEL_31;
    }
    result = semaphore_destroy(*v20, *(_DWORD *)(*v11 + v24));
    *(_DWORD *)(v2 + 10848) = v25;
    if ((_DWORD)v25 == *(_DWORD *)(v2 + 10844))
      return result;
LABEL_36:
    if (!(_DWORD)v25)
      semaphore_destroy(*v20, *(_DWORD *)(v2 + 10960));
    return vpx_internal_error((uint64_t)v28, 2, "Failed to create threads");
  }
  else
  {
    *(_DWORD *)(v2 + 10848) = 0;
  }
  return result;
}

uint64_t thread_decoding_proc(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int *v6;
  uint64_t v10;
  char v11;

  v1 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 2);
  v11 = 0;
  v10 = 0;
  if (atomic_load((unsigned int *)(v3 + 10832)))
  {
    v5 = v2;
    v6 = (int *)(v2 + 4160);
    do
    {
      if (!MEMORY[0x20BD0B6EC](*(unsigned int *)(*(_QWORD *)(v3 + 10952) + 4 * v1)))
      {
        if (!atomic_load((unsigned int *)(v3 + 10832)))
          return 0;
        *(_QWORD *)(v5 + 3960) = &v10;
        if (setjmp(v6))
        {
          *(_DWORD *)(v5 + 4156) = 0;
          MEMORY[0x20BD0B6E0](*(unsigned int *)(v3 + 10960));
        }
        else
        {
          *(_DWORD *)(v5 + 4156) = 1;
          mt_decode_mb_rows(v3, v5, v1 + 1);
          *(_DWORD *)(v5 + 4156) = 0;
        }
      }
    }
    while (atomic_load((unsigned int *)(v3 + 10832)));
  }
  return 0;
}

void vp8mt_de_alloc_temp_buffers(_QWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a1[1359];
  if (v4)
    free(*(void **)(v4 - 8));
  a1[1359] = 0;
  v5 = a1[1360];
  if (v5)
  {
    if (a2 < 1)
      goto LABEL_10;
    v6 = 0;
    do
    {
      v7 = a1[1360];
      v8 = *(_QWORD *)(v7 + v6);
      if (v8)
      {
        free(*(void **)(v8 - 8));
        v7 = a1[1360];
      }
      *(_QWORD *)(v7 + v6) = 0;
      v6 += 8;
    }
    while (8 * a2 != v6);
    v5 = a1[1360];
    if (v5)
LABEL_10:
      free(*(void **)(v5 - 8));
    a1[1360] = 0;
  }
  v9 = a1[1361];
  if (v9)
  {
    if (a2 < 1)
      goto LABEL_19;
    v10 = 0;
    do
    {
      v11 = a1[1361];
      v12 = *(_QWORD *)(v11 + v10);
      if (v12)
      {
        free(*(void **)(v12 - 8));
        v11 = a1[1361];
      }
      *(_QWORD *)(v11 + v10) = 0;
      v10 += 8;
    }
    while (8 * a2 != v10);
    v9 = a1[1361];
    if (v9)
LABEL_19:
      free(*(void **)(v9 - 8));
    a1[1361] = 0;
  }
  v13 = a1[1362];
  if (v13)
  {
    if (a2 < 1)
      goto LABEL_28;
    v14 = 0;
    do
    {
      v15 = a1[1362];
      v16 = *(_QWORD *)(v15 + v14);
      if (v16)
      {
        free(*(void **)(v16 - 8));
        v15 = a1[1362];
      }
      *(_QWORD *)(v15 + v14) = 0;
      v14 += 8;
    }
    while (8 * a2 != v14);
    v13 = a1[1362];
    if (v13)
LABEL_28:
      free(*(void **)(v13 - 8));
    a1[1362] = 0;
  }
  v17 = a1[1363];
  if (v17)
  {
    if (a2 < 1)
      goto LABEL_37;
    v18 = 0;
    do
    {
      v19 = a1[1363];
      v20 = *(_QWORD *)(v19 + v18);
      if (v20)
      {
        free(*(void **)(v20 - 8));
        v19 = a1[1363];
      }
      *(_QWORD *)(v19 + v18) = 0;
      v18 += 8;
    }
    while (8 * a2 != v18);
    v17 = a1[1363];
    if (v17)
LABEL_37:
      free(*(void **)(v17 - 8));
    a1[1363] = 0;
  }
  v21 = a1[1364];
  if (v21)
  {
    if (a2 < 1)
      goto LABEL_46;
    v22 = 0;
    do
    {
      v23 = a1[1364];
      v24 = *(_QWORD *)(v23 + v22);
      if (v24)
      {
        free(*(void **)(v24 - 8));
        v23 = a1[1364];
      }
      *(_QWORD *)(v23 + v22) = 0;
      v22 += 8;
    }
    while (8 * a2 != v22);
    v21 = a1[1364];
    if (v21)
LABEL_46:
      free(*(void **)(v21 - 8));
    a1[1364] = 0;
  }
  v25 = a1[1365];
  if (v25)
  {
    if (a2 < 1)
      goto LABEL_55;
    v26 = 0;
    v27 = 8 * a2;
    do
    {
      v28 = a1[1365];
      v29 = *(_QWORD *)(v28 + v26);
      if (v29)
      {
        free(*(void **)(v29 - 8));
        v28 = a1[1365];
      }
      *(_QWORD *)(v28 + v26) = 0;
      v26 += 8;
    }
    while (v27 != v26);
    v25 = a1[1365];
    if (v25)
LABEL_55:
      free(*(void **)(v25 - 8));
    a1[1365] = 0;
  }
}

void vp8mt_alloc_temp_buffers(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  signed int v7;
  int v8;
  size_t v9;
  void *v10;
  _DWORD **v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  unint64_t v18;
  _QWORD *v19;
  int64_t v20;
  int64_t v21;
  size_t v22;
  size_t v23;
  void *v24;
  void *v25;
  unint64_t v26;
  size_t v27;
  void *v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  int64_t v32;
  int64_t v33;
  size_t v34;
  size_t v35;
  void *v36;
  void *v37;
  unint64_t v38;
  size_t v39;
  void *v40;
  unint64_t v41;
  _QWORD *v42;
  int64_t v43;
  int64_t v44;
  size_t v45;
  size_t v46;
  void *v47;
  void *v48;
  unint64_t v49;
  size_t v50;
  void *v51;
  unint64_t v52;
  _QWORD *v53;
  int64_t v54;
  int64_t v55;
  void *v56;
  _QWORD *v57;
  size_t v58;
  void *v59;
  unint64_t v60;
  _QWORD *v61;
  int64_t v62;
  int64_t v63;
  void *v64;
  _QWORD *v65;
  size_t v66;
  void *v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  void *v71;
  _QWORD *v72;

  if (atomic_load((unsigned int *)(a1 + 10832)))
  {
    v6 = a1 + 4384;
    vp8mt_de_alloc_temp_buffers((_QWORD *)a1, a3);
    v7 = (a2 + 15) & 0xFFFFFFF0;
    if (v7 > 639)
    {
      if (v7 > 0x500)
      {
        if (v7 > 0xA00)
          v8 = 32;
        else
          v8 = 16;
      }
      else
      {
        v8 = 8;
      }
    }
    else
    {
      v8 = 1;
    }
    *(_DWORD *)(a1 + 10868) = v8;
    v9 = 4 * *(int *)(a1 + 7428) + 23;
    if (v9 <= 0x10000000000 && (v10 = malloc_type_malloc(v9, 0x74AD08B5uLL)) != 0)
    {
      v11 = (_DWORD **)(a1 + 10872);
      v12 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v12 - 8) = v10;
      *(_QWORD *)(a1 + 10872) = v12;
      if (v12)
      {
        v13 = *(unsigned int *)(a1 + 7428);
        if ((int)v13 < 1)
        {
LABEL_18:
          if ((v13 & 0x80000000) == 0
            && (v16 = 8 * v13, (v17 = malloc_type_malloc(8 * v13 + 23, 0x74AD08B5uLL)) != 0)
            && (v18 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v18 - 8) = v17, v18))
          {
            bzero((void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF0), v16);
            v19 = (_QWORD *)(a1 + 10880);
            *(_QWORD *)(a1 + 10880) = v18;
            v20 = *(int *)(a1 + 7428);
            if ((int)v20 <= 0)
            {
LABEL_31:
              if ((unint64_t)v20 <= 0x2000000000
                && (v27 = 8 * v20, (v28 = malloc_type_malloc(8 * v20 + 23, 0x74AD08B5uLL)) != 0)
                && (v29 = ((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v29 - 8) = v28, v29))
              {
                bzero((void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF0), v27);
                v30 = (_QWORD *)(a1 + 10888);
                *(_QWORD *)(a1 + 10888) = v29;
                v31 = v7 >> 1;
                v32 = *(int *)(a1 + 7428);
                if ((int)v32 <= 0)
                {
LABEL_44:
                  if ((unint64_t)v32 <= 0x2000000000
                    && (v39 = 8 * v32, (v40 = malloc_type_malloc(8 * v32 + 23, 0x74AD08B5uLL)) != 0)
                    && (v41 = ((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v41 - 8) = v40, v41))
                  {
                    bzero((void *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF0), v39);
                    v42 = (_QWORD *)(a1 + 10896);
                    *(_QWORD *)(a1 + 10896) = v41;
                    v43 = *(int *)(a1 + 7428);
                    if ((int)v43 <= 0)
                    {
LABEL_57:
                      if ((unint64_t)v43 <= 0x2000000000
                        && (v50 = 8 * v43, (v51 = malloc_type_malloc(8 * v43 + 23, 0x74AD08B5uLL)) != 0)
                        && (v52 = ((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v52 - 8) = v51, v52))
                      {
                        bzero((void *)(((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFFFF0), v50);
                        v53 = (_QWORD *)(a1 + 10904);
                        *(_QWORD *)(a1 + 10904) = v52;
                        v54 = *(int *)(a1 + 7428);
                        if ((int)v54 < 1)
                        {
LABEL_71:
                          if ((unint64_t)v54 <= 0x2000000000
                            && (v58 = 8 * v54, (v59 = malloc_type_malloc(8 * v54 + 23, 0x74AD08B5uLL)) != 0)
                            && (v60 = ((unint64_t)v59 + 23) & 0xFFFFFFFFFFFFFFF0,
                                *(_QWORD *)(v60 - 8) = v59,
                                v60))
                          {
                            bzero((void *)(((unint64_t)v59 + 23) & 0xFFFFFFFFFFFFFFF0), v58);
                            v61 = (_QWORD *)(a1 + 10912);
                            *(_QWORD *)(a1 + 10912) = v60;
                            v62 = *(int *)(a1 + 7428);
                            if ((int)v62 < 1)
                            {
LABEL_85:
                              if ((unint64_t)v62 <= 0x2000000000
                                && (v66 = 8 * v62, (v67 = malloc_type_malloc(8 * v62 + 23, 0x74AD08B5uLL)) != 0)
                                && (v68 = ((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF0,
                                    *(_QWORD *)(v68 - 8) = v67,
                                    v68))
                              {
                                bzero((void *)(((unint64_t)v67 + 23) & 0xFFFFFFFFFFFFFFF0), v66);
                                v69 = (_QWORD *)(a1 + 10920);
                                *(_QWORD *)(a1 + 10920) = v68;
                                if (*(int *)(a1 + 7428) < 1)
                                  return;
                              }
                              else
                              {
                                v69 = (_QWORD *)(a1 + 10920);
                                *(_QWORD *)(a1 + 10920) = 0;
                                vpx_internal_error(v6, 2, "Failed to allocate (pbi->mt_vleft_col)");
                                if (*(int *)(a1 + 7428) < 1)
                                  return;
                              }
                              v70 = 0;
                              while (1)
                              {
                                v71 = malloc_type_malloc(0x1FuLL, 0x74AD08B5uLL);
                                if (v71)
                                {
                                  v72 = (_QWORD *)(((unint64_t)v71 + 23) & 0xFFFFFFFFFFFFFFF0);
                                  *(v72 - 1) = v71;
                                  if (v72)
                                    *v72 = 0;
                                  *(_QWORD *)(*v69 + 8 * v70) = v72;
                                  if (!*(_QWORD *)(*v69 + 8 * v70))
                                    goto LABEL_98;
LABEL_93:
                                  if (++v70 >= *(int *)(a1 + 7428))
                                    return;
                                }
                                else
                                {
                                  *(_QWORD *)(*v69 + 8 * v70) = 0;
                                  if (*(_QWORD *)(*v69 + 8 * v70))
                                    goto LABEL_93;
LABEL_98:
                                  vpx_internal_error(v6, 2, "Failed to allocate pbi->mt_vleft_col[i]");
                                  if (++v70 >= *(int *)(a1 + 7428))
                                    return;
                                }
                              }
                            }
                          }
                          else
                          {
                            v61 = (_QWORD *)(a1 + 10912);
                            *(_QWORD *)(a1 + 10912) = 0;
                            vpx_internal_error(v6, 2, "Failed to allocate (pbi->mt_uleft_col)");
                            v62 = *(int *)(a1 + 7428);
                            if ((int)v62 < 1)
                              goto LABEL_85;
                          }
                          v63 = 0;
                          while (1)
                          {
                            v64 = malloc_type_malloc(0x1FuLL, 0x74AD08B5uLL);
                            if (v64)
                            {
                              v65 = (_QWORD *)(((unint64_t)v64 + 23) & 0xFFFFFFFFFFFFFFF0);
                              *(v65 - 1) = v64;
                              if (v65)
                                *v65 = 0;
                              *(_QWORD *)(*v61 + 8 * v63) = v65;
                              if (!*(_QWORD *)(*v61 + 8 * v63))
                                goto LABEL_84;
LABEL_79:
                              ++v63;
                              v62 = *(int *)(a1 + 7428);
                              if (v63 >= v62)
                                goto LABEL_85;
                            }
                            else
                            {
                              *(_QWORD *)(*v61 + 8 * v63) = 0;
                              if (*(_QWORD *)(*v61 + 8 * v63))
                                goto LABEL_79;
LABEL_84:
                              vpx_internal_error(v6, 2, "Failed to allocate pbi->mt_uleft_col[i]");
                              ++v63;
                              v62 = *(int *)(a1 + 7428);
                              if (v63 >= v62)
                                goto LABEL_85;
                            }
                          }
                        }
                      }
                      else
                      {
                        v53 = (_QWORD *)(a1 + 10904);
                        *(_QWORD *)(a1 + 10904) = 0;
                        vpx_internal_error(v6, 2, "Failed to allocate (pbi->mt_yleft_col)");
                        v54 = *(int *)(a1 + 7428);
                        if ((int)v54 < 1)
                          goto LABEL_71;
                      }
                      v55 = 0;
                      while (1)
                      {
                        v56 = malloc_type_malloc(0x27uLL, 0x74AD08B5uLL);
                        if (v56)
                        {
                          v57 = (_QWORD *)(((unint64_t)v56 + 23) & 0xFFFFFFFFFFFFFFF0);
                          *(v57 - 1) = v56;
                          if (v57)
                          {
                            *v57 = 0;
                            *(_QWORD *)((((unint64_t)v56 + 23) & 0xFFFFFFFFFFFFFFF0) + 8) = 0;
                          }
                          *(_QWORD *)(*v53 + 8 * v55) = v57;
                          if (!*(_QWORD *)(*v53 + 8 * v55))
                            goto LABEL_70;
LABEL_65:
                          ++v55;
                          v54 = *(int *)(a1 + 7428);
                          if (v55 >= v54)
                            goto LABEL_71;
                        }
                        else
                        {
                          *(_QWORD *)(*v53 + 8 * v55) = 0;
                          if (*(_QWORD *)(*v53 + 8 * v55))
                            goto LABEL_65;
LABEL_70:
                          vpx_internal_error(v6, 2, "Failed to allocate pbi->mt_yleft_col[i]");
                          ++v55;
                          v54 = *(int *)(a1 + 7428);
                          if (v55 >= v54)
                            goto LABEL_71;
                        }
                      }
                    }
                  }
                  else
                  {
                    v42 = (_QWORD *)(a1 + 10896);
                    *(_QWORD *)(a1 + 10896) = 0;
                    vpx_internal_error(v6, 2, "Failed to allocate (pbi->mt_vabove_row)");
                    v43 = *(int *)(a1 + 7428);
                    if ((int)v43 <= 0)
                      goto LABEL_57;
                  }
                  v44 = 0;
                  v45 = v31 + 32;
                  v46 = v45 + 23;
                  while (1)
                  {
                    if (v46 <= 0x10000000000 && (v48 = malloc_type_malloc(v46, 0x74AD08B5uLL)) != 0)
                    {
                      v49 = ((unint64_t)v48 + 23) & 0xFFFFFFFFFFFFFFF0;
                      *(_QWORD *)(v49 - 8) = v48;
                      *(_QWORD *)(*v42 + 8 * v44) = v49;
                      v47 = *(void **)(*v42 + 8 * v44);
                      if (!v47)
                        goto LABEL_56;
LABEL_52:
                      bzero(v47, v45);
                      ++v44;
                      v43 = *(int *)(a1 + 7428);
                      if (v44 >= v43)
                        goto LABEL_57;
                    }
                    else
                    {
                      *(_QWORD *)(*v42 + 8 * v44) = 0;
                      v47 = *(void **)(*v42 + 8 * v44);
                      if (v47)
                        goto LABEL_52;
LABEL_56:
                      vpx_internal_error(v6, 2, "Failed to allocate pbi->mt_vabove_row[i]");
                      bzero(*(void **)(*v42 + 8 * v44++), v45);
                      v43 = *(int *)(a1 + 7428);
                      if (v44 >= v43)
                        goto LABEL_57;
                    }
                  }
                }
              }
              else
              {
                v30 = (_QWORD *)(a1 + 10888);
                *(_QWORD *)(a1 + 10888) = 0;
                vpx_internal_error(v6, 2, "Failed to allocate (pbi->mt_uabove_row)");
                v31 = v7 >> 1;
                v32 = *(int *)(a1 + 7428);
                if ((int)v32 <= 0)
                  goto LABEL_44;
              }
              v33 = 0;
              v34 = v31 + 32;
              v35 = v34 + 23;
              while (1)
              {
                if (v35 <= 0x10000000000 && (v37 = malloc_type_malloc(v35, 0x74AD08B5uLL)) != 0)
                {
                  v38 = ((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF0;
                  *(_QWORD *)(v38 - 8) = v37;
                  *(_QWORD *)(*v30 + 8 * v33) = v38;
                  v36 = *(void **)(*v30 + 8 * v33);
                  if (!v36)
                    goto LABEL_43;
LABEL_39:
                  bzero(v36, v34);
                  ++v33;
                  v32 = *(int *)(a1 + 7428);
                  if (v33 >= v32)
                    goto LABEL_44;
                }
                else
                {
                  *(_QWORD *)(*v30 + 8 * v33) = 0;
                  v36 = *(void **)(*v30 + 8 * v33);
                  if (v36)
                    goto LABEL_39;
LABEL_43:
                  vpx_internal_error(v6, 2, "Failed to allocate pbi->mt_uabove_row[i]");
                  bzero(*(void **)(*v30 + 8 * v33++), v34);
                  v32 = *(int *)(a1 + 7428);
                  if (v33 >= v32)
                    goto LABEL_44;
                }
              }
            }
          }
          else
          {
            v19 = (_QWORD *)(a1 + 10880);
            *(_QWORD *)(a1 + 10880) = 0;
            vpx_internal_error(v6, 2, "Failed to allocate (pbi->mt_yabove_row)");
            v20 = *(int *)(a1 + 7428);
            if ((int)v20 <= 0)
              goto LABEL_31;
          }
          v21 = 0;
          v22 = v7 + 64;
          v23 = v22 + 23;
          while (1)
          {
            if (v23 <= 0x10000000000 && (v25 = malloc_type_malloc(v23, 0x74AD08B5uLL)) != 0)
            {
              v26 = ((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0;
              *(_QWORD *)(v26 - 8) = v25;
              *(_QWORD *)(*v19 + 8 * v21) = v26;
              v24 = *(void **)(*v19 + 8 * v21);
              if (!v24)
                goto LABEL_30;
LABEL_26:
              bzero(v24, v22);
              ++v21;
              v20 = *(int *)(a1 + 7428);
              if (v21 >= v20)
                goto LABEL_31;
            }
            else
            {
              *(_QWORD *)(*v19 + 8 * v21) = 0;
              v24 = *(void **)(*v19 + 8 * v21);
              if (v24)
                goto LABEL_26;
LABEL_30:
              vpx_internal_error(v6, 2, "Failed to allocate pbi->mt_yabove_row[i]");
              bzero(*(void **)(*v19 + 8 * v21++), v22);
              v20 = *(int *)(a1 + 7428);
              if (v21 >= v20)
                goto LABEL_31;
            }
          }
        }
LABEL_16:
        v14 = *v11;
        v15 = v13;
        do
        {
          *v14++ = 0;
          --v15;
        }
        while (v15);
        goto LABEL_18;
      }
    }
    else
    {
      v11 = (_DWORD **)(a1 + 10872);
      *(_QWORD *)(a1 + 10872) = 0;
    }
    vpx_internal_error(v6, 2, "Failed to allocate pbi->mt_current_mb_col");
    v13 = *(unsigned int *)(a1 + 7428);
    if ((int)v13 < 1)
      goto LABEL_18;
    goto LABEL_16;
  }
}

void vp8_decoder_remove_threads(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  task_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (atomic_load((unsigned int *)(a1 + 10832)))
  {
    atomic_store(0, (unsigned int *)(a1 + 10832));
    LODWORD(v3) = *(_DWORD *)(a1 + 10848);
    if ((int)v3 >= 1)
    {
      v4 = 0;
      do
      {
        MEMORY[0x20BD0B6E0](*(unsigned int *)(*(_QWORD *)(a1 + 10952) + 4 * v4));
        pthread_join(*(pthread_t *)(*(_QWORD *)(a1 + 10944) + 8 * v4++), 0);
        v3 = *(int *)(a1 + 10848);
      }
      while (v4 < v3);
      if ((int)v3 >= 1)
      {
        v5 = 0;
        v6 = (task_t *)MEMORY[0x24BDAEC58];
        do
        {
          semaphore_destroy(*v6, *(_DWORD *)(*(_QWORD *)(a1 + 10952) + 4 * v5++));
          v3 = *(int *)(a1 + 10848);
        }
        while (v5 < v3);
      }
    }
    if ((_DWORD)v3)
      semaphore_destroy(*MEMORY[0x24BDAEC58], *(_DWORD *)(a1 + 10960));
    v7 = *(_QWORD *)(a1 + 10944);
    if (v7)
      free(*(void **)(v7 - 8));
    *(_QWORD *)(a1 + 10944) = 0;
    v8 = *(_QWORD *)(a1 + 10952);
    if (v8)
      free(*(void **)(v8 - 8));
    *(_QWORD *)(a1 + 10952) = 0;
    v9 = *(_QWORD *)(a1 + 10928);
    if (v9)
      free(*(void **)(v9 - 8));
    *(_QWORD *)(a1 + 10928) = 0;
    v10 = *(_QWORD *)(a1 + 10936);
    if (v10)
      free(*(void **)(v10 - 8));
    *(_QWORD *)(a1 + 10936) = 0;
    vp8mt_de_alloc_temp_buffers((_QWORD *)a1, *(_DWORD *)(a1 + 7428));
  }
}

uint64_t vp8mt_decode_mb_rows(uint64_t a1, uint64_t a2)
{
  int v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v40;
  int v41;

  v4 = *(_DWORD *)(a1 + 7908);
  v5 = *(int **)(a1 + 4352);
  if (!v4)
  {
    memset((void *)(~(uint64_t)v5[4] + *((_QWORD *)v5 + 7)), 127, *v5 + 5);
    memset((void *)(~(uint64_t)v5[9] + *((_QWORD *)v5 + 8)), 127, v5[5] + 5);
    memset((void *)(~(uint64_t)v5[9] + *((_QWORD *)v5 + 9)), 127, v5[5] + 5);
    v10 = *(unsigned int *)(a1 + 10844);
    if ((int)v10 < 1)
      goto LABEL_17;
    goto LABEL_12;
  }
  memset((void *)(**(_QWORD **)(a1 + 10880) + 31), 127, *v5 + 5);
  memset((void *)(**(_QWORD **)(a1 + 10888) + 15), 127, (*v5 >> 1) + 5);
  memset((void *)(**(_QWORD **)(a1 + 10896) + 15), 127, (*v5 >> 1) + 5);
  v6 = *(_DWORD *)(a1 + 7428);
  if (v6 > 1)
  {
    v7 = 1;
    do
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10880) + 8 * v7) + 31) = -127;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10888) + 8 * v7) + 15) = -127;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10896) + 8 * v7++) + 15) = -127;
    }
    while (v7 < *(int *)(a1 + 7428));
    v6 = *(_DWORD *)(a1 + 7428);
  }
  if (v6 >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD **)(*(_QWORD *)(a1 + 10904) + 8 * v8);
      *v9 = 0x8181818181818181;
      v9[1] = 0x8181818181818181;
      **(_QWORD **)(*(_QWORD *)(a1 + 10912) + 8 * v8) = 0x8181818181818181;
      **(_QWORD **)(*(_QWORD *)(a1 + 10920) + 8 * v8++) = 0x8181818181818181;
    }
    while (v8 < *(int *)(a1 + 7428));
  }
  vp8_loop_filter_frame_init(a1 + 4384, (_BYTE *)a1, v4);
  v10 = *(unsigned int *)(a1 + 10844);
  if ((int)v10 >= 1)
  {
LABEL_12:
    v11 = *(_QWORD *)(a1 + 10928);
    v12 = 4352 * v10;
    v13 = 0;
    do
    {
      v14 = v11 + v13;
      *(_QWORD *)(v14 + 4024) = *(_QWORD *)(a2 + 4024);
      *(_OWORD *)(v14 + 4032) = *(_OWORD *)(a2 + 4032);
      *(_QWORD *)(v14 + 4048) = *(_QWORD *)(a2 + 4048);
      *(_DWORD *)(v14 + 3884) = *(_DWORD *)(a1 + 7412);
      v15 = *(_OWORD *)(a2 + 3584);
      v16 = *(_OWORD *)(a2 + 3600);
      v17 = *(_OWORD *)(a2 + 3616);
      *(_OWORD *)(v14 + 3632) = *(_OWORD *)(a2 + 3632);
      *(_OWORD *)(v14 + 3616) = v17;
      *(_OWORD *)(v14 + 3600) = v16;
      *(_OWORD *)(v14 + 3584) = v15;
      v18 = *(_OWORD *)(a2 + 3552);
      *(_OWORD *)(v14 + 3568) = *(_OWORD *)(a2 + 3568);
      *(_OWORD *)(v14 + 3552) = v18;
      v19 = *(_OWORD *)(a2 + 3648);
      v20 = *(_OWORD *)(a2 + 3664);
      v21 = *(_OWORD *)(a2 + 3680);
      *(_OWORD *)(v14 + 3696) = *(_OWORD *)(a2 + 3696);
      *(_OWORD *)(v14 + 3680) = v21;
      *(_OWORD *)(v14 + 3664) = v20;
      *(_OWORD *)(v14 + 3648) = v19;
      v22 = *(_OWORD *)(a2 + 3712);
      *(_OWORD *)(v14 + 3728) = *(_OWORD *)(a2 + 3728);
      *(_OWORD *)(v14 + 3712) = v22;
      v23 = *(_OWORD *)(a2 + 3744);
      v24 = *(_OWORD *)(a2 + 3760);
      v25 = *(_OWORD *)(a2 + 3776);
      *(_OWORD *)(v14 + 3792) = *(_OWORD *)(a2 + 3792);
      *(_OWORD *)(v14 + 3776) = v25;
      *(_OWORD *)(v14 + 3760) = v24;
      *(_OWORD *)(v14 + 3744) = v23;
      v26 = *(_OWORD *)(a2 + 3808);
      v27 = *(_OWORD *)(a2 + 3824);
      v28 = *(_OWORD *)(a2 + 3840);
      *(_OWORD *)(v14 + 3856) = *(_OWORD *)(a2 + 3856);
      *(_OWORD *)(v14 + 3840) = v28;
      *(_OWORD *)(v14 + 3824) = v27;
      *(_OWORD *)(v14 + 3808) = v26;
      *(_BYTE *)(v14 + 3968) = *(_BYTE *)(a2 + 3968);
      *(_BYTE *)(v14 + 3971) = *(_BYTE *)(a2 + 3971);
      *(_QWORD *)(v11 + v13 + 3975) = *(_QWORD *)(a2 + 3975);
      *(_DWORD *)(v11 + v13 + 3989) = *(_DWORD *)(a2 + 3989);
      *(_DWORD *)(v11 + v13 + 3997) = *(_DWORD *)(a2 + 3997);
      *(_WORD *)(v11 + v13 + 3983) = *(_WORD *)(a2 + 3983);
      *(_QWORD *)(v14 + 4056) = a1 + 10256;
      v29 = *(_OWORD *)(a2 + 2048);
      *(_OWORD *)(v14 + 2064) = *(_OWORD *)(a2 + 2064);
      *(_OWORD *)(v14 + 2048) = v29;
      v30 = *(_OWORD *)(a2 + 2016);
      *(_OWORD *)(v14 + 2032) = *(_OWORD *)(a2 + 2032);
      *(_OWORD *)(v14 + 2016) = v30;
      v31 = *(_OWORD *)(a2 + 2080);
      *(_OWORD *)(v14 + 2096) = *(_OWORD *)(a2 + 2096);
      *(_OWORD *)(v14 + 2080) = v31;
      v32 = *(_OWORD *)(a2 + 2112);
      *(_OWORD *)(v14 + 2128) = *(_OWORD *)(a2 + 2128);
      *(_OWORD *)(v14 + 2112) = v32;
      if (*(_DWORD *)(a1 + 7452))
        v33 = -8;
      else
        v33 = -1;
      *(_DWORD *)(v14 + 3544) = v33;
      v13 += 4352;
    }
    while (v12 != v13);
  }
LABEL_17:
  if (*(int *)(a1 + 7428) >= 1)
  {
    v34 = 0;
    do
      atomic_store(0xFFFFFFFF, (unsigned int *)(*(_QWORD *)(a1 + 10872) + 4 * v34++));
    while (v34 < *(int *)(a1 + 7428));
  }
  if (*(_DWORD *)(a1 + 10844))
  {
    v35 = 0;
    do
    {
      v36 = v35;
      MEMORY[0x20BD0B6E0](*(unsigned int *)(*(_QWORD *)(a1 + 10952) + 4 * v35));
      v35 = v36 + 1;
    }
    while (v36 + 1 < (unint64_t)*(unsigned int *)(a1 + 10844));
  }
  if (setjmp((int *)(a2 + 4160)))
  {
    *(_DWORD *)(a2 + 4156) = 0;
    *(_DWORD *)(a2 + 4064) = 1;
    if (*(_DWORD *)(a1 + 10844))
    {
      v37 = 0;
      do
      {
        v38 = v37;
        MEMORY[0x20BD0B6EC](*(unsigned int *)(a1 + 10960));
        v37 = v38 + 1;
      }
      while ((v38 + 1) < *(_DWORD *)(a1 + 10844));
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    *(_DWORD *)(a2 + 4156) = 1;
    mt_decode_mb_rows(a1, a2, 0);
    *(_DWORD *)(a2 + 4156) = 0;
    if (*(_DWORD *)(a1 + 10844) != -1)
    {
      v40 = 0;
      do
      {
        v41 = v40;
        MEMORY[0x20BD0B6EC](*(unsigned int *)(a1 + 10960));
        v40 = v41 + 1;
      }
      while (v41 + 1 < (*(_DWORD *)(a1 + 10844) + 1));
    }
    return 0;
  }
}

void mt_decode_mb_rows(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  signed int v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, char *);
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint16x8_t v66;
  uint8x8_t v67;
  __int32 *v68;
  uint8x8_t v69;
  uint64_t v70;
  __int32 *v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  int v75;
  _QWORD *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  int16x8_t *v80;
  int16x8_t *v81;
  const __int16 *v82;
  const __int16 *v83;
  __int16 *v84;
  uint64_t v85;
  int16x4_t v86;
  _OWORD *v87;
  __int16 v88;
  unsigned int v89;
  BOOL v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int8x16_t *v96;
  const char *v97;
  uint8x16_t v98;
  int8x16_t v99;
  int8x16_t *v100;
  int8x16_t v101;
  uint8x16_t *v102;
  int8x16_t v103;
  uint8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  unsigned __int8 *v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int *v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  int v163;
  const __int16 *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int16x8_t *v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  BOOL v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint8x8_t *v202;
  uint64_t v203;
  uint64_t v204;
  _WORD *v205;
  int16x8_t *v206;
  int16x8_t *v207;
  _QWORD *v208;
  unsigned __int8 *v209;
  uint64_t v210;
  int *__attribute__((__org_typedef(jmp_buf))) v211;
  int v212;
  unsigned int *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int *v219;
  int v220;
  unsigned __int8 *v221;
  uint64_t v222;
  uint64_t v223;
  int64x2_t *v224;
  int16x8_t *v225;
  uint64_t v226;
  int v227;
  _DWORD v228[10];
  __int128 v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  char v235;
  char v236;
  char v237;
  char v238;
  char v239;
  char v240;
  char v241;
  char v242;
  _BYTE v243[3];
  char v244;
  _QWORD v245[3];
  int16x8x2_t v246;
  int16x8x2_t v247;
  int16x8x2_t v248;

  v245[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(int *)(a1 + 10868);
  v227 = *(_DWORD *)(a1 + 7432) + v4;
  v5 = *(_DWORD *)(a1 + 10212);
  v6 = *(_QWORD *)(a1 + 4352);
  v7 = *(int **)(a1 + 4360);
  v8 = *(int *)(v6 + 16);
  v9 = *(int *)(v6 + 36);
  v229 = *(_OWORD *)(v7 + 14);
  v230 = *((_QWORD *)v7 + 9);
  v157 = v7;
  v158 = v6;
  v10 = v7[37];
  v228[0] = 0;
  v228[1] = v10;
  v11 = *(_QWORD *)(a1 + 4368);
  v231 = *(_OWORD *)(v11 + 56);
  v232 = *(_QWORD *)(v11 + 72);
  LODWORD(v11) = *(_DWORD *)(v11 + 148);
  v12 = *(_QWORD *)(a1 + 4376);
  v233 = *(_OWORD *)(v12 + 56);
  v234 = *(_QWORD *)(v12 + 72);
  LODWORD(v12) = *(_DWORD *)(v12 + 148);
  v228[2] = v11;
  v228[3] = v12;
  v217 = *(_QWORD *)(v6 + 64);
  v218 = *(_QWORD *)(v6 + 56);
  v216 = *(_QWORD *)(v6 + 72);
  *(_DWORD *)(a2 + 3888) = a3 != 0;
  LODWORD(v12) = *(_DWORD *)(a1 + 7436);
  *(_QWORD *)(a2 + 3872) = *(_QWORD *)(a1 + 7488) + 76 * (int)v12 * a3;
  *(_DWORD *)(a2 + 3880) = v12;
  v13 = *(_DWORD *)(a1 + 7428);
  if (v13 <= a3)
  {
    if (*(_DWORD *)(a1 + 10844) + a3 + 1 >= v13)
      goto LABEL_108;
    return;
  }
  v163 = 1 << v5;
  v210 = a1 + 7508;
  v161 = 8 * v9;
  v162 = 16 * v8;
  v188 = 6 * (int)v8 + 15;
  v187 = 7 * v8 + 15;
  v186 = 10 * (int)v8 + 15;
  v185 = 11 * (int)v8 + 15;
  v184 = 12 * (int)v8 + 15;
  v183 = 13 * (int)v8 + 15;
  v182 = 14 * (int)v8 + 15;
  v179 = 6 * (int)v9 + 7;
  v198 = -v8;
  v199 = -2 * (int)v8;
  v166 = 12 * (int)v8;
  v159 = 4 * (int)v9;
  v212 = v4 - 1;
  v211 = (int *)(a2 + 4068);
  v208 = (_QWORD *)(a2 + 3608);
  v224 = (int64x2_t *)(a2 + 3896);
  v225 = (int16x8_t *)(a2 + 2016);
  v226 = a2 + 1984;
  v202 = (uint8x8_t *)(a2 + 384);
  v191 = (int16x8_t *)(a2 + 2048);
  v207 = (int16x8_t *)(a2 + 896);
  v206 = (int16x8_t *)(a2 + 2112);
  v204 = 15 * v8;
  v205 = (_WORD *)(a2 + 2000);
  v178 = v8 + 15;
  v189 = 2 * v8 + 15;
  v177 = v189 + v8;
  v164 = (const __int16 *)(a2 + 2080);
  v165 = 4 * v8;
  v176 = 4 * v8 + 15;
  v175 = v176 + v8;
  v174 = 8 * v8 + 15;
  v173 = v174 + v8;
  v171 = v9 + 7;
  v172 = 15 * v8 + 15;
  v180 = 4 * v9 + 7;
  v181 = 2 * v9 + 7;
  v170 = v181 + v9;
  v169 = v180 + v9;
  v203 = 7 * v9;
  v167 = 8 * v8;
  v168 = 7 * v9 + 7;
  v200 = a2 + 2144;
  v201 = v9;
  v214 = v8;
  v215 = v4;
  do
  {
    v28 = a3;
    *(_QWORD *)(a2 + 4056) = a1 + 48 * (a3 % v163) + 10256;
    v29 = *(_QWORD *)(a1 + 10872);
    if (a3 <= 0)
      v30 = (unsigned int *)&v227;
    else
      v30 = (unsigned int *)(v29 + 4 * (a3 - 1));
    v31 = a3 * v162;
    v32 = a3 * v161;
    *(_QWORD *)(a2 + 3952) = *(_QWORD *)(a1 + 7960);
    v33 = *(_QWORD *)(a2 + 3960);
    *(_BYTE *)(v33 + 8) = 0;
    *(_QWORD *)v33 = 0;
    *(_DWORD *)(a2 + 3892) = 0;
    *(_DWORD *)(a2 + 4012) = -128 * a3;
    *(_DWORD *)(a2 + 4016) = (*(_DWORD *)(a1 + 7428) + ~a3) << 7;
    if (!*(_DWORD *)(a1 + 7908))
    {
      v133 = v218 + v31;
      v134 = v133 - 1;
      *(_QWORD *)(a2 + 3920) = v133 - 1;
      v135 = v217 + v32;
      v136 = v135 - 1;
      *(_QWORD *)(a2 + 3928) = v135 - 1;
      v137 = v216 + v32;
      v138 = v137 - 1;
      *(_QWORD *)(a2 + 3936) = v137 - 1;
      v139 = *(int *)(a2 + 3728);
      *(_QWORD *)(a2 + 3896) = v133 - v139;
      v140 = *(int *)(a2 + 3748);
      *(_QWORD *)(a2 + 3904) = v135 - v140;
      *(_QWORD *)(a2 + 3912) = v137 - v140;
      *(_DWORD *)(a2 + 3944) = v139;
      *(_DWORD *)(a2 + 3948) = v140;
      *(_BYTE *)(v133 - 1) = -127;
      *(_BYTE *)(v134 + v139) = -127;
      *(_BYTE *)(v134 + 2 * v139) = -127;
      *(_BYTE *)(v134 + 3 * v139) = -127;
      *(_BYTE *)(v134 + 4 * v139) = -127;
      *(_BYTE *)(v134 + 5 * v139) = -127;
      *(_BYTE *)(v134 + 6 * (int)v139) = -127;
      *(_BYTE *)(v134 + 7 * v139) = -127;
      v141 = 2 * v140;
      *(_BYTE *)(v134 + 8 * v139) = -127;
      *(_BYTE *)(v134 + 9 * v139) = -127;
      *(_BYTE *)(v134 + 10 * (int)v139) = -127;
      *(_BYTE *)(v134 + 11 * (int)v139) = -127;
      *(_BYTE *)(v134 + 12 * (int)v139) = -127;
      *(_BYTE *)(v134 + 13 * (int)v139) = -127;
      *(_BYTE *)(v134 + 14 * (int)v139) = -127;
      *(_BYTE *)(v134 - v139 + 16 * v139) = -127;
      v142 = 3 * v140;
      v143 = 4 * v140;
      v144 = 6 * v140;
      *(_BYTE *)(v135 - 1) = -127;
      *(_BYTE *)(v136 + v140) = -127;
      *(_BYTE *)(v136 + v141) = -127;
      *(_BYTE *)(v136 + v142) = -127;
      *(_BYTE *)(v136 + v143) = -127;
      v145 = 5 * v140;
      *(_BYTE *)(v136 + v145) = -127;
      *(_BYTE *)(v136 + v144) = -127;
      v146 = 7 * v140;
      *(_BYTE *)(v136 + v146) = -127;
      *(_BYTE *)(v137 - 1) = -127;
      *(_BYTE *)(v138 + v140) = -127;
      *(_BYTE *)(v138 + v141) = -127;
      *(_BYTE *)(v138 + v142) = -127;
      *(_BYTE *)(v138 + v143) = -127;
      *(_BYTE *)(v138 + v145) = -127;
      *(_BYTE *)(v138 + v144) = -127;
      *(_BYTE *)(v138 + v146) = -127;
      v213 = (unsigned int *)(v29 + 4 * v28);
      v160 = v28;
      if (*(int *)(a1 + 7432) < 1)
        goto LABEL_101;
LABEL_10:
      v35 = 0;
      v36 = v32;
      v37 = v31;
      v219 = v30;
      while (1)
      {
        if (!(((int)v35 - 1) % (int)v4))
          atomic_store(v35 - 1, v213);
        if (v28 && (v212 & v35) == 0)
        {
          do
            v38 = atomic_load(v30);
          while (v35 > v38 - v4);
        }
        *(_DWORD *)(a2 + 4004) = -128 * v35;
        *(_DWORD *)(a2 + 4008) = (*(_DWORD *)(a1 + 7432) + ~(_DWORD)v35) << 7;
        *(_QWORD *)(a2 + 3768) = v218 + v37;
        *(_QWORD *)(a2 + 3776) = v217 + v36;
        *(_QWORD *)(a2 + 3784) = v216 + v36;
        v39 = *(unsigned __int8 **)(a2 + 3872);
        v40 = v39[2];
        v41 = *(_DWORD *)(a2 + 4064) | v228[v39[2]];
        *(_DWORD *)(a2 + 4064) = v41;
        if (v41)
        {
          if (v28 < *(_DWORD *)(a1 + 7428))
          {
            do
            {
              v42 = v28;
              v43 = *(_QWORD *)(a1 + 10872);
              atomic_store(*(_DWORD *)(a1 + 7432) + v4, (unsigned int *)(v43 + 4 * v28));
              v28 += *(_DWORD *)(a1 + 10844) + 1;
            }
            while (v28 < *(_DWORD *)(a1 + 7428));
            v213 = (unsigned int *)(v43 + 4 * v42);
          }
          vpx_internal_error((uint64_t)v211, 7, "Corrupted reference frame", v157);
          v39 = *(unsigned __int8 **)(a2 + 3872);
          v40 = v39[2];
        }
        if (v40)
        {
          v44 = &v228[6 * v40 + 4];
          v45 = v44[1];
          *(_QWORD *)(a2 + 3608) = *v44 + v37;
          *(_QWORD *)(a2 + 3616) = v45 + v36;
          *(_QWORD *)(a2 + 3624) = v44[2] + v36;
          if (v39[9])
            goto LABEL_25;
        }
        else
        {
          *v208 = 0;
          v208[1] = 0;
          *(_QWORD *)(a2 + 3624) = 0;
          if (v39[9])
          {
LABEL_25:
            v46 = *(_QWORD *)(a2 + 3952);
            v47 = *(_QWORD *)(a2 + 3960);
            *(_QWORD *)v46 = 0;
            *(_QWORD *)v47 = 0;
            v39 = *(unsigned __int8 **)(a2 + 3872);
            if (!v39[3])
            {
              *(_BYTE *)(v47 + 8) = 0;
              *(_BYTE *)(v46 + 8) = 0;
              v39 = *(unsigned __int8 **)(a2 + 3872);
            }
            goto LABEL_30;
          }
        }
        if ((*(_DWORD *)(*(_QWORD *)(a2 + 4056) + 24) - 0x40000000) <= 0xC0000040)
        {
          v48 = vp8_decode_mb_tokens(a1, (_QWORD *)a2) == 0;
          v39 = *(unsigned __int8 **)(a2 + 3872);
          v39[9] = v48;
        }
LABEL_30:
        v49 = *v39;
        if (*(_BYTE *)(a2 + 3968))
        {
          vp8_mb_init_dequantizer(a1, a2);
          v39 = *(unsigned __int8 **)(a2 + 3872);
        }
        v222 = v37;
        v223 = v36;
        v220 = v49;
        if (v39[2])
        {
          vp8_build_inter_predictors_mb(a2);
          goto LABEL_59;
        }
        v50 = *(_QWORD *)(a2 + 3904);
        v51 = *(_QWORD *)(a2 + 3912);
        v52 = *(_BYTE **)(a2 + 3928);
        v53 = *(char **)(a2 + 3936);
        v54 = *(int *)(a2 + 3948);
        v55 = *(_QWORD *)(a2 + 3776);
        v56 = v39[1];
        v243[0] = *v52;
        v235 = *v53;
        v243[1] = v52[v54];
        v236 = v53[v54];
        v57 = *(_QWORD *)(a2 + 3784);
        v243[2] = v52[2 * v54];
        v237 = v53[2 * v54];
        v244 = v52[3 * v54];
        v238 = v53[3 * v54];
        LOBYTE(v245[0]) = v52[4 * v54];
        v58 = *(int *)(a2 + 3748);
        v239 = v53[4 * v54];
        BYTE1(v245[0]) = v52[5 * v54];
        v240 = v53[5 * v54];
        BYTE2(v245[0]) = v52[6 * v54];
        v241 = v53[6 * v54];
        v54 *= 7;
        BYTE3(v245[0]) = v52[v54];
        v242 = v53[v54];
        if (v56)
          v59 = (uint64_t *)((char *)&pred + 16 * v56);
        else
          v59 = &dc_pred[4 * *(int *)(a2 + 3892) + 2 * *(int *)(a2 + 3888)];
        v60 = (void (*)(uint64_t, uint64_t, uint64_t, char *))v59[1];
        v60(v55, v58, v50, v243);
        v60(v57, v58, v51, &v235);
        if (v49 == 4)
        {
          if (*(_BYTE *)(*(_QWORD *)(a2 + 3872) + 9))
          {
            *(_QWORD *)v226 = 0;
            *(_QWORD *)(v226 + 8) = 0;
            *(_BYTE *)(v226 + 24) = 0;
            *(_QWORD *)(v226 + 16) = 0;
          }
          v61 = 0;
          v62 = *(_DWORD *)(a2 + 3728);
          v63 = *(_QWORD *)(a2 + 3896);
          v64 = *(_QWORD *)(a2 + 3768) - v62 + 16;
          *(_DWORD *)(v64 + 4 * v62) = *(_DWORD *)(v63 + 16);
          *(_DWORD *)(v64 + 8 * v62) = *(_DWORD *)(v63 + 16);
          *(_DWORD *)(v64 + 12 * v62) = *(_DWORD *)(v63 + 16);
          v65 = v200;
          while (1)
          {
            v70 = *(int *)(v65 + 32);
            v71 = (__int32 *)(*(_QWORD *)(a2 + 3768) + v70);
            v72 = *(unsigned int *)(*(_QWORD *)(a2 + 3872) + 4 * v61 + 12);
            if (v61 <= 3 && *(_DWORD *)(a1 + 7908))
            {
              v73 = (_QWORD *)(v224->i64[0] + v70);
              if ((v61 & 3) != 0)
                goto LABEL_51;
            }
            else
            {
              v73 = (_QWORD *)((char *)v71 - v62);
              if ((v61 & 3) != 0)
                goto LABEL_51;
            }
            if (*(_DWORD *)(a1 + 7908))
            {
              v74 = (char *)(*(_QWORD *)(a2 + 3920) + v61);
              v75 = 1;
              if (v61 == 8)
                goto LABEL_53;
              goto LABEL_52;
            }
LABEL_51:
            v74 = (char *)v71 - 1;
            v75 = v62;
            if (v61 == 8)
              goto LABEL_53;
LABEL_52:
            v76 = v73;
            if ((v61 & 0x7FFFFFF7) == 4)
            {
LABEL_53:
              v76 = v73;
              if (*(_DWORD *)(a1 + 7908))
                v76 = (_QWORD *)(*(_QWORD *)(a2 + 3920) + v61);
            }
            v77 = *((_BYTE *)v76 - 1);
            v235 = *v74;
            v78 = v75;
            v236 = v74[v75];
            v79 = 2 * v75;
            v237 = v74[v79];
            v238 = v74[v79 + v78];
            v245[0] = *v73;
            v244 = v77;
            (*(&pred_0 + v72))(v71, v62, v245, &v235);
            if (*(_BYTE *)(v226 + v61))
            {
              v80 = *(int16x8_t **)v65;
              if (*(char *)(v226 + v61) < 2)
              {
                v66 = (uint16x8_t)vdupq_n_s16(((__int16)(v225->i16[0] * v80->i16[0]) + 4) >> 3);
                v67.i32[0] = *v71;
                v67.i32[1] = *(__int32 *)((char *)v71 + v62);
                v68 = (__int32 *)((char *)v71 + v62 + v62);
                v69 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v66, v67));
                *v71 = v69.i32[0];
                *(__int32 *)((char *)v71 + v62) = v69.i32[1];
                v69.i32[0] = *v68;
                v69.i32[1] = *(__int32 *)((char *)v68 + v62);
                *(int8x8_t *)v66.i8 = vqmovun_s16((int16x8_t)vaddw_u8(v66, v69));
                *v68 = v66.i32[0];
                *(__int32 *)((char *)v68 + v62) = v66.i32[1];
                **(_DWORD **)v65 = 0;
              }
              else
              {
                vp8_dequant_idct_add_neon(v80, v225, v71, v62);
              }
            }
            v65 += 56;
            if (++v61 == 16)
              goto LABEL_59;
          }
        }
        vp8_build_intra_predictors_mby_s(a2, *(_QWORD *)(a2 + 3896), *(_BYTE **)(a2 + 3920), *(_DWORD *)(a2 + 3944), *(_QWORD *)(a2 + 3768), *(_DWORD *)(a2 + 3728));
LABEL_59:
        if (!*(_BYTE *)(*(_QWORD *)(a2 + 3872) + 9))
        {
          if (v220 != 4)
          {
            v81 = v225;
            if (v220 != 9)
            {
              v82 = *(const __int16 **)(a2 + 3488);
              if (*(char *)(a2 + 2008) < 2)
              {
                v88 = *(_WORD *)(a2 + 2080) * *v82;
                **(_WORD **)(a2 + 3496) = v88;
                v89 = (v88 + 3) >> 3;
                *(_WORD *)(a2 + 384) = v89;
                *(_WORD *)(a2 + 416) = v89;
                *(_WORD *)(a2 + 448) = v89;
                *(_WORD *)(a2 + 480) = v89;
                *(_WORD *)(a2 + 512) = v89;
                *(_WORD *)(a2 + 544) = v89;
                *(_WORD *)(a2 + 576) = v89;
                *(_WORD *)(a2 + 608) = v89;
                *(_WORD *)(a2 + 640) = v89;
                *(_WORD *)(a2 + 672) = v89;
                *(_WORD *)(a2 + 704) = v89;
                *(_WORD *)(a2 + 736) = v89;
                *(_WORD *)(a2 + 768) = v89;
                *(_WORD *)(a2 + 800) = v89;
                *(_WORD *)(a2 + 832) = v89;
                *(_WORD *)(a2 + 864) = v89;
                *(_DWORD *)v82 = 0;
              }
              else
              {
                v246 = vld2q_s16(v82);
                v83 = v164;
                v247 = vld2q_s16(v83);
                v248.val[0] = vmulq_s16(v247.val[0], v246.val[0]);
                v248.val[1] = vmulq_s16(v247.val[1], v246.val[1]);
                v84 = *(__int16 **)(a2 + 3496);
                vst2q_s16(v84, v248);
                v85 = *(_QWORD *)(a2 + 3496);
                v246.val[1] = *(int16x8_t *)(v85 + 16);
                v247.val[0].i64[0] = vextq_s8((int8x16_t)v246.val[1], (int8x16_t)v246.val[1], 8uLL).u64[0];
                *(int16x4_t *)v247.val[1].i8 = vadd_s16(*(int16x4_t *)v247.val[0].i8, *(int16x4_t *)v85);
                v248.val[0].i64[0] = vextq_s8(*(int8x16_t *)v85, *(int8x16_t *)v85, 8uLL).u64[0];
                *(int16x4_t *)v248.val[1].i8 = vadd_s16(*(int16x4_t *)v246.val[1].i8, *(int16x4_t *)v248.val[0].i8);
                *(int16x4_t *)v246.val[0].i8 = vsub_s16(*(int16x4_t *)v85, *(int16x4_t *)v247.val[0].i8);
                *(int16x4_t *)v246.val[1].i8 = vsub_s16(*(int16x4_t *)v248.val[0].i8, *(int16x4_t *)v246.val[1].i8);
                *(int16x4_t *)v247.val[0].i8 = vadd_s16(*(int16x4_t *)v247.val[1].i8, *(int16x4_t *)v248.val[1].i8);
                *(int16x4_t *)v247.val[1].i8 = vsub_s16(*(int16x4_t *)v247.val[1].i8, *(int16x4_t *)v248.val[1].i8);
                *(int16x4_t *)v248.val[0].i8 = vadd_s16(*(int16x4_t *)v246.val[0].i8, *(int16x4_t *)v246.val[1].i8);
                *(int16x4_t *)v246.val[0].i8 = vsub_s16(*(int16x4_t *)v246.val[0].i8, *(int16x4_t *)v246.val[1].i8);
                *(int32x2_t *)v246.val[1].i8 = vzip1_s32(*(int32x2_t *)v247.val[0].i8, *(int32x2_t *)v247.val[1].i8);
                *(int32x2_t *)v248.val[1].i8 = vzip1_s32(*(int32x2_t *)v248.val[0].i8, *(int32x2_t *)v246.val[0].i8);
                v86 = vtrn1_s16(*(int16x4_t *)v246.val[1].i8, *(int16x4_t *)v248.val[1].i8);
                *(int16x4_t *)v246.val[1].i8 = vtrn2_s16(*(int16x4_t *)v246.val[1].i8, *(int16x4_t *)v248.val[1].i8);
                *(int32x2_t *)v247.val[0].i8 = vzip2_s32(*(int32x2_t *)v247.val[0].i8, *(int32x2_t *)v247.val[1].i8);
                *(int32x2_t *)v246.val[0].i8 = vzip2_s32(*(int32x2_t *)v248.val[0].i8, *(int32x2_t *)v246.val[0].i8);
                *(int16x4_t *)v247.val[1].i8 = vtrn1_s16(*(int16x4_t *)v247.val[0].i8, *(int16x4_t *)v246.val[0].i8);
                *(int16x4_t *)v246.val[0].i8 = vtrn2_s16(*(int16x4_t *)v247.val[0].i8, *(int16x4_t *)v246.val[0].i8);
                *(int16x4_t *)v247.val[0].i8 = vadd_s16(v86, *(int16x4_t *)v246.val[0].i8);
                *(int16x4_t *)v248.val[0].i8 = vadd_s16(*(int16x4_t *)v246.val[1].i8, *(int16x4_t *)v247.val[1].i8);
                v247.val[0].u64[1] = (unint64_t)vsub_s16(v86, *(int16x4_t *)v246.val[0].i8);
                v248.val[0].u64[1] = (unint64_t)vsub_s16(*(int16x4_t *)v246.val[1].i8, *(int16x4_t *)v247.val[1].i8);
                v247.val[1].i64[0] = 0x3000300030003;
                v247.val[1].i64[1] = 0x3000300030003;
                v246.val[0] = vshrq_n_s16(vaddq_s16(vaddq_s16(v248.val[0], v247.val[0]), v247.val[1]), 3uLL);
                *(_WORD *)(a2 + 416) = v246.val[0].i16[4];
                *(_WORD *)(a2 + 384) = v246.val[0].i16[0];
                v246.val[1] = vshrq_n_s16(vaddq_s16(vsubq_s16(v247.val[0], v248.val[0]), v247.val[1]), 3uLL);
                *(_WORD *)(a2 + 448) = v246.val[1].i16[0];
                *(_WORD *)(a2 + 480) = v246.val[1].i16[4];
                *(_WORD *)(a2 + 512) = v246.val[0].i16[1];
                *(_WORD *)(a2 + 544) = v246.val[0].i16[5];
                *(_WORD *)(a2 + 576) = v246.val[1].i16[1];
                *(_WORD *)(a2 + 608) = v246.val[1].i16[5];
                *(_WORD *)(a2 + 640) = v246.val[0].i16[2];
                *(_WORD *)(a2 + 672) = v246.val[0].i16[6];
                *(_WORD *)(a2 + 704) = v246.val[1].i16[2];
                *(_WORD *)(a2 + 736) = v246.val[1].i16[6];
                *(_WORD *)(a2 + 768) = v246.val[0].i16[3];
                *(_WORD *)(a2 + 800) = v246.val[0].i16[7];
                *(_WORD *)(a2 + 832) = v246.val[1].i16[3];
                *(_WORD *)(a2 + 864) = v246.val[1].i16[7];
                v87 = *(_OWORD **)(a2 + 3488);
                *v87 = 0u;
                v87[1] = 0u;
              }
              v81 = v191;
            }
            vp8_dequant_idct_add_y_block_neon(v202, v81, *(uint8x8_t **)(a2 + 3768), *(_DWORD *)(a2 + 3728), v226);
          }
          vp8_dequant_idct_add_uv_block_neon(v207, v206, *(uint8x8_t **)(a2 + 3776), *(uint8x8_t **)(a2 + 3784), *(_DWORD *)(a2 + 3748), v205);
        }
        *(_DWORD *)(a2 + 3892) = 1;
        *(_DWORD *)(a2 + 4064) |= (*(_DWORD *)(*(_QWORD *)(a2 + 4056) + 24) - 65) < 0x3FFFFFBF;
        *v224 = vaddq_s64(*v224, (int64x2_t)xmmword_208F3C2C0);
        *(_QWORD *)(a2 + 3912) += 8;
        if (*(_DWORD *)(a1 + 7908))
        {
          v90 = 0;
          v91 = *(unsigned __int8 **)(a2 + 3872);
          v92 = *v91;
          if ((_DWORD)v92 != 4 && (_DWORD)v92 != 9)
            v90 = v91[9] != 0;
          v93 = *(unsigned __int8 *)(a1
                                   + 7508
                                   + 16 * v91[11]
                                   + 4 * v91[2]
                                   + *(unsigned __int8 *)(a1 + 7508 + v92 + 388)
                                   + 196);
          if (v28 != *(_DWORD *)(a1 + 7428) - 1)
          {
            v94 = 8 * v28 + 8;
            *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 10880) + v94) + ((16 * v35) & 0xFFFFFFF0) + 32) = *(_OWORD *)(*(_QWORD *)(a2 + 3768) + v204);
            v95 = (8 * v35);
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 10888) + v94) + v95 + 16) = *(_QWORD *)(*(_QWORD *)(a2 + 3776)
                                                                                           + v203);
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 10896) + v94) + v95 + 16) = *(_QWORD *)(*(_QWORD *)(a2 + 3784)
                                                                                           + v203);
          }
          if (v35 == *(_DWORD *)(a1 + 7432) - 1 || *(_BYTE *)(*(_QWORD *)(a2 + 3872) + 78))
          {
            if ((_DWORD)v93)
              goto LABEL_77;
          }
          else
          {
            v132 = 8 * v28;
            **(_BYTE **)(*(_QWORD *)(a1 + 10904) + v132) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + 15);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 1) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v178);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 2) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v189);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 3) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v177);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 4) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v176);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 5) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v175);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 6) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v188);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 7) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v187);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 8) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v174);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 9) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v173);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 10) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v186);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 11) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v185);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 12) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v184);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 13) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v183);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 14) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v182);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10904) + v132) + 15) = *(_BYTE *)(*(_QWORD *)(a2 + 3768) + v172);
            **(_BYTE **)(*(_QWORD *)(a1 + 10912) + v132) = *(_BYTE *)(*(_QWORD *)(a2 + 3776) + 7);
            **(_BYTE **)(*(_QWORD *)(a1 + 10920) + v132) = *(_BYTE *)(*(_QWORD *)(a2 + 3784) + 7);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10912) + v132) + 1) = *(_BYTE *)(*(_QWORD *)(a2 + 3776) + v171);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10920) + v132) + 1) = *(_BYTE *)(*(_QWORD *)(a2 + 3784) + v171);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10912) + v132) + 2) = *(_BYTE *)(*(_QWORD *)(a2 + 3776) + v181);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10920) + v132) + 2) = *(_BYTE *)(*(_QWORD *)(a2 + 3784) + v181);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10912) + v132) + 3) = *(_BYTE *)(*(_QWORD *)(a2 + 3776) + v170);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10920) + v132) + 3) = *(_BYTE *)(*(_QWORD *)(a2 + 3784) + v170);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10912) + v132) + 4) = *(_BYTE *)(*(_QWORD *)(a2 + 3776) + v180);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10920) + v132) + 4) = *(_BYTE *)(*(_QWORD *)(a2 + 3784) + v180);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10912) + v132) + 5) = *(_BYTE *)(*(_QWORD *)(a2 + 3776) + v169);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10920) + v132) + 5) = *(_BYTE *)(*(_QWORD *)(a2 + 3784) + v169);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10912) + v132) + 6) = *(_BYTE *)(*(_QWORD *)(a2 + 3776) + v179);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10920) + v132) + 6) = *(_BYTE *)(*(_QWORD *)(a2 + 3784) + v179);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10912) + v132) + 7) = *(_BYTE *)(*(_QWORD *)(a2 + 3776) + v168);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10920) + v132) + 7) = *(_BYTE *)(*(_QWORD *)(a2 + 3784) + v168);
            if ((_DWORD)v93)
            {
LABEL_77:
              if (*(_DWORD *)(a1 + 7504))
              {
                if (v35)
                  vp8_loop_filter_mbvs_neon(*(__int8 **)(a2 + 3768), v214, (const char *)(v210 + v93));
                if (!v90)
                  vp8_loop_filter_bvs_neon(*(_BYTE **)(a2 + 3768), v214, (const char *)(a1 + v93 + 7572));
                if (v28 >= 1)
                {
                  v96 = *(int8x16_t **)(a2 + 3768);
                  v97 = (const char *)(v210 + v93);
                  v98 = (uint8x16_t)vld1q_dup_s8(v97);
                  v99 = *(int8x16_t *)((char *)v96 + v199);
                  v100 = (int8x16_t *)((char *)v96 + v199 + v214);
                  v101 = *v100;
                  v102 = (uint8x16_t *)&v100->i8[v214];
                  v103 = *(int8x16_t *)((char *)v102 + v214);
                  v104 = vabdq_u8((uint8x16_t)v101, *v102);
                  v105.i64[0] = 0x8080808080808080;
                  v105.i64[1] = 0x8080808080808080;
                  v106 = veorq_s8(v101, v105);
                  v107 = veorq_s8(*(int8x16_t *)v102, v105);
                  v108 = (int8x16_t)vcgtq_u8(vqaddq_u8(vqaddq_u8(v104, v104), vshrq_n_u8(vabdq_u8((uint8x16_t)v99, (uint8x16_t)v103), 1uLL)), v98);
                  v109 = vqsubq_s8(veorq_s8(v99, v105), veorq_s8(v103, v105));
                  v110.i64[0] = 0x303030303030303;
                  v110.i64[1] = 0x303030303030303;
                  v111 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v107.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v106.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v109.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v107, v110), v106, v110), v109)), v108);
                  v103.i64[0] = 0x404040404040404;
                  v103.i64[1] = 0x404040404040404;
                  *v96 = veorq_s8(vqsubq_s8(v107, vshrq_n_s8(vqaddq_s8(v111, v103), 3uLL)), v105);
                  *(int8x16_t *)((char *)v96 + v198) = veorq_s8(vqaddq_s8(v106, vshrq_n_s8(vqaddq_s8(v111, v110), 3uLL)), v105);
                }
                if (!v90)
                  vp8_loop_filter_bhs_neon(*(_QWORD *)(a2 + 3768), v214, (const char *)(a1 + v93 + 7572));
              }
              else
              {
                v112 = a1 + 7508 + v93;
                v221 = (unsigned __int8 *)(v112 + 128);
                v209 = (unsigned __int8 *)(a1
                                         + 7508
                                         + *(unsigned __int8 *)(v112
                                                              + ((unint64_t)*(unsigned int *)(a1 + 7412) << 6)
                                                              + 260)
                                         + 192);
                if (v35)
                {
                  v113 = *(_QWORD *)(a2 + 3776);
                  v194 = *(_QWORD *)(a2 + 3784);
                  v114 = *(unsigned __int8 *)(v210 + v93);
                  v115 = *v209;
                  v193 = *v221;
                  vp8_mbloop_filter_vertical_edge_y_neon(*(_QWORD *)(a2 + 3768), v214, v114, v193, v115);
                  if (v113)
                    vp8_mbloop_filter_vertical_edge_uv_neon(v113, v201, v114, v193, v115, v194);
                }
                v116 = (unsigned __int8 *)(v112 + 64);
                if (!v90)
                {
                  v195 = v90;
                  v117 = *(_QWORD *)(a2 + 3768);
                  v192 = *(_QWORD *)(a2 + 3776);
                  v190 = *(_QWORD *)(a2 + 3784);
                  v118 = *v116;
                  v119 = *v221;
                  v120 = *v209;
                  vp8_loop_filter_vertical_edge_y_neon(v117 + 4, v214, v118, v119, v120);
                  vp8_loop_filter_vertical_edge_y_neon(v117 + 8, v214, v118, v119, v120);
                  v121 = v117 + 12;
                  v90 = v195;
                  vp8_loop_filter_vertical_edge_y_neon(v121, v214, v118, v119, v120);
                  if (v192)
                    vp8_loop_filter_vertical_edge_uv_neon(v192 + 4, v201, v118, v119, v120, v190 + 4);
                }
                if (v28 >= 1)
                {
                  v122 = *(_QWORD *)(a2 + 3776);
                  v196 = *(_QWORD *)(a2 + 3784);
                  v123 = *(unsigned __int8 *)(v210 + v93);
                  v124 = *v221;
                  v125 = *v209;
                  vp8_mbloop_filter_horizontal_edge_y_neon(*(_QWORD *)(a2 + 3768), v214, v123, v124, v125);
                  if (v122)
                    vp8_mbloop_filter_horizontal_edge_uv_neon(v122, v201, v123, v124, v125, v196);
                }
                if (!v90)
                {
                  v126 = *(_QWORD *)(a2 + 3768);
                  v127 = v116;
                  v128 = *(_QWORD *)(a2 + 3776);
                  v197 = *(_QWORD *)(a2 + 3784);
                  v129 = *v127;
                  v130 = *v221;
                  v131 = *v209;
                  vp8_loop_filter_horizontal_edge_y_neon(v126 + v165, v214, v129, v130, v131);
                  vp8_loop_filter_horizontal_edge_y_neon(v126 + v167, v214, v129, v130, v131);
                  vp8_loop_filter_horizontal_edge_y_neon(v126 + v166, v214, v129, v130, v131);
                  if (v128)
                    vp8_loop_filter_horizontal_edge_uv_neon(v128 + v159, v201, v129, v130, v131, v197 + v159);
                }
              }
            }
          }
        }
        else
        {
          *(int64x2_t *)(a2 + 3920) = vaddq_s64(*(int64x2_t *)(a2 + 3920), (int64x2_t)xmmword_208F3C2C0);
          *(_QWORD *)(a2 + 3936) += 8;
        }
        v37 = v222 + 16;
        v36 = v223 + 8;
        *(_QWORD *)(a2 + 3872) += 76;
        *(_QWORD *)(a2 + 3952) += 9;
        ++v35;
        v4 = v215;
        v30 = v219;
        if (v35 >= *(int *)(a1 + 7432))
          goto LABEL_102;
      }
    }
    v34 = 8 * a3;
    *(_QWORD *)(a2 + 3896) = *(_QWORD *)(*(_QWORD *)(a1 + 10880) + v34) + 32;
    *(_QWORD *)(a2 + 3904) = *(_QWORD *)(*(_QWORD *)(a1 + 10888) + v34) + 16;
    *(_QWORD *)(a2 + 3912) = *(_QWORD *)(*(_QWORD *)(a1 + 10896) + v34) + 16;
    *(_QWORD *)(a2 + 3920) = *(_QWORD *)(*(_QWORD *)(a1 + 10904) + v34);
    *(_QWORD *)(a2 + 3928) = *(_QWORD *)(*(_QWORD *)(a1 + 10912) + v34);
    *(_QWORD *)(a2 + 3936) = *(_QWORD *)(*(_QWORD *)(a1 + 10920) + v34);
    *(_QWORD *)(a2 + 3944) = 0x100000001;
    v213 = (unsigned int *)(v29 + 4 * a3);
    v160 = a3;
    if (*(int *)(a1 + 7432) >= 1)
      goto LABEL_10;
LABEL_101:
    LODWORD(v35) = 0;
LABEL_102:
    if (*(_DWORD *)(a1 + 7908))
    {
      if (v28 != *(_DWORD *)(a1 + 7428) - 1)
      {
        v147 = *v157;
        v148 = v147 + 32;
        v149 = v147 + 31;
        v150 = (uint64_t)(int)v147 >> 1;
        v151 = 8 * (v28 + 1);
        v152 = v150 + 16;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10880) + v151) + v148) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10880)
                                                                                              + v151)
                                                                                  + v149);
        v153 = v150 + 15;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10888) + v151) + v152) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10888)
                                                                                              + v151)
                                                                                  + v150
                                                                                  + 15);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10896) + v151) + v152) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10896)
                                                                                              + v151)
                                                                                  + v150
                                                                                  + 15);
        *(_BYTE *)(v148 + *(_QWORD *)(*(_QWORD *)(a1 + 10880) + v151) + 1) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10880)
                                                                                                  + v151)
                                                                                      + v149);
        v154 = v150 + 17;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10888) + v151) + v154) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10888)
                                                                                              + v151)
                                                                                  + v150
                                                                                  + 15);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10896) + v151) + v154) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10896)
                                                                                              + v151)
                                                                                  + v150
                                                                                  + 15);
        *(_BYTE *)(v148 + *(_QWORD *)(*(_QWORD *)(a1 + 10880) + v151) + 2) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10880)
                                                                                                  + v151)
                                                                                      + v149);
        v155 = v150 + 18;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10888) + v151) + v155) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10888)
                                                                                              + v151)
                                                                                  + v150
                                                                                  + 15);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10896) + v151) + v155) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10896)
                                                                                              + v151)
                                                                                  + v150
                                                                                  + 15);
        *(_BYTE *)(v148 + *(_QWORD *)(*(_QWORD *)(a1 + 10880) + v151) + 3) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10880)
                                                                                                  + v151)
                                                                                      + v149);
        v156 = *(_QWORD *)(*(_QWORD *)(a1 + 10888) + v151);
        LOBYTE(v149) = *(_BYTE *)(v156 + v150 + 15);
        v150 += 19;
        *(_BYTE *)(v156 + v150) = v149;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10896) + v151) + v150) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 10896)
                                                                                              + v151)
                                                                                  + v153);
      }
    }
    else
    {
      v15 = (_BYTE *)(*(_QWORD *)(a2 + 3768) + 14 * *(int *)(v158 + 16));
      v16 = 6 * *(int *)(v158 + 36);
      v17 = (_BYTE *)(*(_QWORD *)(a2 + 3776) + v16);
      v18 = (_BYTE *)(*(_QWORD *)(a2 + 3784) + v16);
      v15[16] = v15[15];
      v17[8] = v17[7];
      v19 = v17 + 8;
      v18[8] = v18[7];
      v20 = v18 + 8;
      v15[17] = v15[15];
      v17[9] = v17[7];
      v18[9] = v18[7];
      v15[18] = v15[15];
      v17[10] = v17[7];
      v18[10] = v18[7];
      v15[19] = v15[15];
      v17[11] = v17[7];
      v18[11] = v18[7];
      v21 = &v15[*(int *)(v158 + 16) + 16];
      v22 = *(int *)(v158 + 36);
      v23 = &v19[v22];
      v24 = &v20[v22];
      *v21 = *(v21 - 1);
      *v23 = *(v23 - 1);
      *v24 = *(v24 - 1);
      v21[1] = *(v21 - 1);
      v23[1] = *(v23 - 1);
      v24[1] = *(v24 - 1);
      v21[2] = *(v21 - 1);
      v23[2] = *(v23 - 1);
      v24[2] = *(v24 - 1);
      v21[3] = *(v21 - 1);
      v23[3] = *(v23 - 1);
      v24[3] = *(v24 - 1);
    }
    atomic_store(v35 + v4, v213);
    v25 = *(_DWORD *)(a1 + 10844);
    v26 = *(_QWORD *)(a2 + 3872) + 76 * (v25 * *(_DWORD *)(a2 + 3880));
    *(_DWORD *)(a2 + 3888) = 1;
    *(_QWORD *)(a2 + 3872) = v26 + 76;
    a3 = v28 + v25 + 1;
    v27 = *(_DWORD *)(a1 + 7428);
  }
  while (a3 < v27);
  if (v25 + v160 + 1 >= v27)
LABEL_108:
    MEMORY[0x20BD0B6E0](*(unsigned int *)(a1 + 10960));
}

uint64_t vp8_tokenize_mb(uint64_t result, int8x16_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  _BOOL4 v6;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint16x8_t v15;
  int8x16_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  __int16 *v31;
  __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t i64;

  v3 = result;
  v4 = (unsigned __int8 *)a2[506].i64[0];
  v5 = *v4;
  v6 = 1;
  if (v5 == 4 || v5 == 9)
  {
    v9 = 0;
    v10 = 24;
  }
  else
  {
    v8.i64[0] = 0x101010101010101;
    v8.i64[1] = 0x101010101010101;
    v6 = (vmaxvq_u8((uint8x16_t)vcgtq_s8(a2[388], v8)) & 1) == 0;
    v9 = 16;
    v10 = 25;
  }
  v11 = v9 + v10 - (v9 | v10 & 1);
  v12.i64[0] = -1;
  v12.i64[1] = -1;
  v13.i64[1] = -1;
  v13.i64[0] = v6 | 0xFFFFFFFF00000000;
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  do
  {
    v15 = vmovl_u8((uint8x8_t)vceqz_s8(*(int8x8_t *)&a2[388].i8[v9]));
    v12 = vandq_s8((int8x16_t)vmovl_high_u16(v15), vandq_s8(v12, v14));
    v13 = vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v15.i8), vandq_s8(v13, v14));
    v9 += 8;
  }
  while (v11 != v9);
  v16 = vandq_s8(v13, v12);
  *(int8x8_t *)v16.i8 = vand_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
  v17 = v16.i8[0] & v16.i8[4];
  if ((v10 & 1) != 0)
  {
    v18 = v10 - v11;
    v19 = &a2[388].u8[v11];
    do
    {
      v20 = *v19++;
      v17 &= v20 == 0;
      --v18;
    }
    while (v18);
  }
  v4[9] = v17;
  if (!v17)
  {
    if (v5 == 9 || v5 == 4)
    {
      v22 = (uint64_t)a2;
      v23 = a3;
      v24 = 3;
      return tokenize1st_order_b(v22, v23, v24, v3);
    }
    v26 = *a3;
    v27 = a2[511].i64[0];
    v28 = a2[511].i64[1];
    v29 = a2[389].i8[8];
    v30 = *(char *)(v28 + 8) + *(char *)(v27 + 8);
    if (!a2[389].i8[8])
    {
      *(_WORD *)(v26 + 10) = 11;
      *(_QWORD *)v26 = result + 11 * v30 + 113021;
      ++a2[3 * v30 + 627].i32[2];
      v45 = (_QWORD *)(v26 + 16);
LABEL_34:
      *a3 = (uint64_t)v45;
      *(_BYTE *)(v28 + 8) = v29;
      *(_BYTE *)(v27 + 8) = v29;
      v22 = (uint64_t)a2;
      v23 = a3;
      v24 = 0;
      return tokenize1st_order_b(v22, v23, v24, v3);
    }
    v31 = (__int16 *)a2[482].i64[0];
    v32 = &dct_value_tokens[2 * *v31 + 4096];
    *(_WORD *)(v26 + 8) = dct_value_tokens[2 * *v31 + 4097];
    v33 = *v32;
    *(_BYTE *)(v26 + 10) = v33;
    *(_QWORD *)v26 = result + 11 * v30 + 113021;
    v34 = (uint64_t)a2[3 * v30].i64 + 4 * v33;
    ++*(_DWORD *)(v34 + 9996);
    *(_BYTE *)(v26 + 11) = 0;
    v35 = vp8_prev_token_class[v33];
    if (v29 < 2)
    {
      v45 = (_QWORD *)(v26 + 16);
      v29 = 1u;
    }
    else
    {
      v36 = 0;
      v37 = &byte_208F3C9D1;
      v38 = &dword_208F3C9F4;
      do
      {
        v39 = v26 + v36;
        v41 = *v38++;
        v40 = v41;
        LODWORD(v41) = *v37++;
        v42 = &dct_value_tokens[2 * v31[v40] + 4096];
        *(_WORD *)(v39 + 24) = v42[1];
        v43 = *v42;
        *(_BYTE *)(v39 + 26) = v43;
        *(_QWORD *)(v39 + 16) = v3 + 33 * v41 + 11 * v35 + 113021;
        *(_BYTE *)(v39 + 27) = v35 == 0;
        v44 = (uint64_t)a2[9 * v41 + 3 * v35].i64 + 4 * v43;
        ++*(_DWORD *)(v44 + 9996);
        v35 = vp8_prev_token_class[v43];
        v36 += 16;
      }
      while (16 * v29 - 16 != v36);
      v26 += v36;
      v45 = (_QWORD *)(v26 + 16);
      if (v29 > 0xF)
        goto LABEL_33;
    }
    v46 = vp8_coef_bands[v29];
    *(_WORD *)(v26 + 26) = 11;
    *v45 = v3 + 33 * v46 + 11 * v35 + 113021;
    i64 = (uint64_t)a2[9 * v46 + 3 * v35].i64;
    ++*(_DWORD *)(i64 + 10040);
    v45 = (_QWORD *)(v26 + 32);
LABEL_33:
    LOBYTE(v29) = 1;
    goto LABEL_34;
  }
  if (!*(_DWORD *)(result + 111088))
    return vp8_stuff_mb(result, (uint64_t)a2, a3);
  if (v5 == 4 || v5 == 9)
  {
    *(_QWORD *)a2[511].i64[0] = 0;
    v21 = a2[511].i64[1];
  }
  else
  {
    v25 = a2[511].i64[0];
    *(_BYTE *)(v25 + 8) = 0;
    *(_QWORD *)v25 = 0;
    v21 = a2[511].i64[1];
    *(_BYTE *)(v21 + 8) = 0;
  }
  *(_QWORD *)v21 = 0;
  ++a2[552].i32[2];
  return result;
}

uint64_t vp8_stuff_mb(uint64_t result, uint64_t a2, uint64_t *a3)
{
  char *v3;
  char *v4;
  int v5;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;

  v3 = *(char **)(a2 + 8176);
  v4 = *(char **)(a2 + 8184);
  v5 = **(unsigned __int8 **)(a2 + 8096);
  if (v5 == 4 || v5 == 9)
  {
    v10 = 0;
    v7 = 3;
  }
  else
  {
    v7 = 0;
    v8 = *a3;
    v9 = v4[8] + v3[8];
    *(_WORD *)(v8 + 10) = 11;
    ++*(_DWORD *)(a2 + 48 * v9 + 10040);
    *(_QWORD *)v8 = result + 11 * v9 + 113021;
    *a3 = v8 + 16;
    v4[8] = 0;
    v3[8] = 0;
    v10 = 1;
  }
  v11 = 0;
  v12 = result + 264 * v7 + (v10 | (32 * v10));
  v13 = a2 + 1152 * v7;
  do
  {
    v14 = vp8_block2above[v11];
    v15 = vp8_block2left[v11];
    v16 = *a3;
    v17 = v4[v15] + v3[v14];
    *(_WORD *)(v16 + 10) = 11;
    *(_QWORD *)v16 = v12 + 11 * v17 + 112757;
    v18 = v13 + 144 * v10 + 48 * v17;
    ++*(_DWORD *)(v18 + 8888);
    *a3 = v16 + 16;
    v4[v15] = 0;
    v3[v14] = 0;
    ++v11;
  }
  while (v11 != 16);
  v19 = *a3;
  v20 = v4[4] + v3[4];
  *(_WORD *)(v19 + 10) = 11;
  *(_QWORD *)v19 = result + 113285 + 11 * v20;
  ++*(_DWORD *)(a2 + 11148 + 48 * v20 + 44);
  *a3 = v19 + 16;
  v4[4] = 0;
  v3[4] = 0;
  v21 = *a3;
  v22 = v4[4] + v3[5];
  *(_WORD *)(v21 + 10) = 11;
  *(_QWORD *)v21 = result + 113285 + 11 * v22;
  ++*(_DWORD *)(a2 + 11148 + 48 * v22 + 44);
  *a3 = v21 + 16;
  v4[4] = 0;
  v3[5] = 0;
  v23 = *a3;
  v24 = v4[5] + v3[4];
  *(_WORD *)(v23 + 10) = 11;
  *(_QWORD *)v23 = result + 113285 + 11 * v24;
  ++*(_DWORD *)(a2 + 11148 + 48 * v24 + 44);
  *a3 = v23 + 16;
  v4[5] = 0;
  v3[4] = 0;
  v25 = *a3;
  v26 = v4[5] + v3[5];
  *(_WORD *)(v25 + 10) = 11;
  *(_QWORD *)v25 = result + 113285 + 11 * v26;
  ++*(_DWORD *)(a2 + 11148 + 48 * v26 + 44);
  *a3 = v25 + 16;
  v4[5] = 0;
  v3[5] = 0;
  v27 = *a3;
  v28 = v4[6] + v3[6];
  *(_WORD *)(v27 + 10) = 11;
  *(_QWORD *)v27 = result + 113285 + 11 * v28;
  ++*(_DWORD *)(a2 + 11148 + 48 * v28 + 44);
  *a3 = v27 + 16;
  v4[6] = 0;
  v3[6] = 0;
  v29 = *a3;
  v30 = v4[6] + v3[7];
  *(_WORD *)(v29 + 10) = 11;
  *(_QWORD *)v29 = result + 113285 + 11 * v30;
  ++*(_DWORD *)(a2 + 11148 + 48 * v30 + 44);
  *a3 = v29 + 16;
  v4[6] = 0;
  v3[7] = 0;
  v31 = *a3;
  v32 = v4[7] + v3[6];
  *(_WORD *)(v31 + 10) = 11;
  *(_QWORD *)v31 = result + 113285 + 11 * v32;
  ++*(_DWORD *)(a2 + 11148 + 48 * v32 + 44);
  *a3 = v31 + 16;
  v4[7] = 0;
  v3[6] = 0;
  v33 = *a3;
  v34 = v4[7] + v3[7];
  *(_WORD *)(v33 + 10) = 11;
  *(_QWORD *)v33 = result + 113285 + 11 * v34;
  ++*(_DWORD *)(a2 + 11148 + 48 * v34 + 44);
  *a3 = v33 + 16;
  v4[7] = 0;
  v3[7] = 0;
  return result;
}

uint64_t tokenize1st_order_b(uint64_t result, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  __int16 **v6;
  _BOOL8 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __int16 *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  int *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;

  v4 = 0;
  v5 = (_QWORD *)*a2;
  v6 = (__int16 **)(result + 6368);
  v7 = a3 == 0;
  if (a3)
    v8 = 1;
  else
    v8 = 2;
  v62 = -v8;
  v61 = &vp8_coef_bands[v8];
  v60 = &vp8_default_zig_zag1d[v8];
  v63 = v8;
  v64 = a2;
  do
  {
    v11 = *(char *)v6[5];
    v12 = vp8_block2above[v4];
    v13 = vp8_block2left[v4];
    v14 = *(_QWORD *)(result + 8176);
    v15 = *(_QWORD *)(result + 8184);
    v16 = *(char *)(v15 + v13) + *(char *)(v14 + v12);
    if (v7 >= (int)v11)
    {
      v9 = 0;
      *((_WORD *)v5 + 5) = 11;
      *v5 = a4 + 264 * a3 + (v7 || 32 * v7) + 11 * v16 + 112757;
      v5 += 2;
      v10 = result + 1152 * a3 + 144 * v7 + 48 * v16;
      ++*(_DWORD *)(v10 + 8888);
      goto LABEL_6;
    }
    v17 = (uint64_t)*v6;
    v18 = &dct_value_tokens[2 * (*v6)[v7] + 4096];
    *((_WORD *)v5 + 4) = dct_value_tokens[2 * (*v6)[v7] + 4097];
    v19 = *v18;
    *((_BYTE *)v5 + 10) = v19;
    *v5 = a4 + 264 * a3 + (v7 || 32 * v7) + 11 * v16 + 112757;
    *((_BYTE *)v5 + 11) = 0;
    v20 = result + 1152 * a3 + 144 * v7 + 48 * v16 + 4 * v19;
    ++*(_DWORD *)(v20 + 8844);
    v21 = vp8_prev_token_class[v19];
    if ((int)v8 >= (int)v11)
    {
      v31 = v5 + 2;
      v11 = v8;
    }
    else
    {
      v22 = v62 + v11;
      v23 = v60;
      v24 = v61;
      do
      {
        v26 = *v23++;
        v25 = v26;
        LODWORD(v26) = *v24++;
        v27 = &dct_value_tokens[2 * *(__int16 *)(v17 + 2 * v25) + 4096];
        v28 = v27[1];
        v5[2] = a4 + 264 * a3 + 33 * v26 + 11 * v21 + 112757;
        v5 += 2;
        *((_WORD *)v5 + 4) = v28;
        v29 = *v27;
        *((_BYTE *)v5 + 10) = v29;
        *((_BYTE *)v5 + 11) = v21 == 0;
        v30 = result + 1152 * a3 + 144 * v26 + 48 * v21 + 4 * v29;
        ++*(_DWORD *)(v30 + 8844);
        v21 = vp8_prev_token_class[v29];
        --v22;
      }
      while (v22);
      v31 = v5 + 2;
      if (v11 > 0xF)
      {
        v9 = 1;
        v5 += 2;
        a2 = v64;
        v7 = a3 == 0;
        goto LABEL_16;
      }
      a2 = v64;
      v7 = a3 == 0;
    }
    v32 = vp8_coef_bands[v11];
    *((_WORD *)v5 + 13) = 11;
    *v31 = a4 + 264 * a3 + 33 * v32 + 11 * v21 + 112757;
    v33 = result + 1152 * a3 + 144 * v32 + 48 * v21;
    ++*(_DWORD *)(v33 + 8888);
    v5 += 4;
    v9 = 1;
LABEL_16:
    v8 = v63;
LABEL_6:
    *a2 = v5;
    *(_BYTE *)(v15 + v13) = v9;
    *(_BYTE *)(v14 + v12) = v9;
    ++v4;
    v6 += 7;
  }
  while (v4 != 16);
  v34 = a4 + 113285;
  v35 = result + 11148;
  v36 = 0x10u;
  do
  {
    v39 = *(char *)v6[5];
    v40 = vp8_block2above[v36];
    v41 = vp8_block2left[v36];
    v42 = *(_QWORD *)(result + 8176);
    v43 = *(_QWORD *)(result + 8184);
    v44 = *(char *)(v43 + v41) + *(char *)(v42 + v40);
    if (!*(_BYTE *)v6[5])
    {
      v37 = 0;
      *((_WORD *)v5 + 5) = 11;
      *v5 = v34 + 11 * v44;
      ++*(_DWORD *)(v35 + 48 * v44 + 44);
      v38 = v5 + 2;
      goto LABEL_19;
    }
    v45 = (uint64_t)*v6;
    v46 = &dct_value_tokens[2 * **v6 + 4096];
    *((_WORD *)v5 + 4) = dct_value_tokens[2 * **v6 + 4097];
    v47 = *v46;
    *((_BYTE *)v5 + 10) = v47;
    *v5 = v34 + 11 * v44;
    *((_BYTE *)v5 + 11) = 0;
    ++*(_DWORD *)(v35 + 48 * v44 + 4 * v47);
    v48 = vp8_prev_token_class[v47];
    if (v39 < 2)
    {
      v38 = v5 + 2;
      v39 = 1u;
      goto LABEL_27;
    }
    v49 = 0;
    v50 = &byte_208F3C9D1;
    v51 = &dword_208F3C9F4;
    do
    {
      v52 = &v5[v49 / 8];
      v54 = *v51++;
      v53 = v54;
      LODWORD(v54) = *v50++;
      v55 = &dct_value_tokens[2 * *(__int16 *)(v45 + 2 * v53) + 4096];
      *((_WORD *)v52 + 12) = v55[1];
      v56 = *v55;
      *((_BYTE *)v52 + 26) = v56;
      v52[2] = a4 + 33 * v54 + 11 * v48 + 113285;
      *((_BYTE *)v52 + 27) = v48 == 0;
      v57 = result + 144 * v54 + 48 * v48 + 4 * v56;
      ++*(_DWORD *)(v57 + 11148);
      v48 = vp8_prev_token_class[v56];
      v49 += 16;
    }
    while (16 * v39 - 16 != v49);
    v5 = (_QWORD *)((char *)v5 + v49);
    v38 = v5 + 2;
    if (v39 <= 0xF)
    {
      a2 = v64;
LABEL_27:
      v58 = vp8_coef_bands[v39];
      *((_WORD *)v5 + 13) = 11;
      *v38 = a4 + 33 * v58 + 11 * v48 + 113285;
      v59 = result + 144 * v58 + 48 * v48;
      ++*(_DWORD *)(v59 + 11192);
      v38 = v5 + 4;
      v37 = 1;
      goto LABEL_19;
    }
    v37 = 1;
    a2 = v64;
LABEL_19:
    *a2 = v38;
    *(_BYTE *)(v43 + v41) = v37;
    *(_BYTE *)(v42 + v40) = v37;
    ++v36;
    v6 += 7;
    v5 = v38;
  }
  while (v36 != 24);
  return result;
}

uint64_t cost(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;

  while (1)
  {
    v5 = a5;
    v6 = a3;
    v7 = a2;
    v8 = result;
    v9 = *(unsigned __int8 *)(a3 + (a4 >> 1));
    v10 = a4;
    v11 = *(char *)(a2 + a4);
    v12 = (v10 & 1) != 0 ? v9 ^ 0xFF : v9;
    v13 = vp8_prob_cost[v12] + a5;
    if (v11 <= 0)
    {
      *(_DWORD *)(result + 4 * -v11) = v13;
      v14 = v10 + 1;
      if ((((_DWORD)v10 + 1) & 1) == 0)
        return result;
    }
    else
    {
      result = cost(result, a2, a3);
      v14 = v10 + 1;
      if ((((_DWORD)v10 + 1) & 1) == 0)
        return result;
    }
    a4 = *(char *)(v7 + v14);
    v15 = (v14 & 1) != 0 ? v9 ^ 0xFF : v9;
    a5 = vp8_prob_cost[v15] + v5;
    if (a4 < 1)
      break;
    result = v8;
    a2 = v7;
    a3 = v6;
  }
  *(_DWORD *)(v8 + 4 * -a4) = a5;
  return result;
}

float vpx_get8x8var_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4, float *a5, _DWORD *a6)
{
  int16x8_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int v9;
  int16x8_t v10;
  float result;

  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = -8;
  do
  {
    v10 = (int16x8_t)vsubl_u8(*a1, *a3);
    v6 = vaddq_s16(v10, v6);
    v7 = vmlal_s16(v7, *(int16x4_t *)v10.i8, *(int16x4_t *)v10.i8);
    v8 = vmlal_high_s16(v8, v10, v10);
    a1 = (uint8x8_t *)((char *)a1 + a2);
    a3 = (uint8x8_t *)((char *)a3 + a4);
  }
  while (!__CFADD__(v9++, 1));
  *a6 = vaddlvq_s16(v6);
  result = COERCE_FLOAT(vaddvq_s32(vaddq_s32(v8, v7)));
  *a5 = result;
  return result;
}

float vpx_get16x16var_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4, float *a5, _DWORD *a6)
{
  int16x8_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int16x8_t v9;
  int v10;
  int16x8_t v11;
  int16x8_t v12;
  float result;

  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -16;
  do
  {
    v11 = (int16x8_t)vsubl_u8(*a1, *a3);
    v12 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)a1->i8, *(uint8x16_t *)a3->i8);
    v6 = vaddq_s16(v11, v6);
    v9 = vaddq_s16(v12, v9);
    v7 = vmlal_s16(vmlal_s16(v7, *(int16x4_t *)v11.i8, *(int16x4_t *)v11.i8), *(int16x4_t *)v12.i8, *(int16x4_t *)v12.i8);
    v8 = vmlal_high_s16(vmlal_high_s16(v8, v11, v11), v12, v12);
    a1 = (uint8x8_t *)((char *)a1 + a2);
    a3 = (uint8x8_t *)((char *)a3 + a4);
  }
  while (!__CFADD__(v10++, 1));
  *a6 = vaddlvq_s16(vaddq_s16(v6, v9));
  result = COERCE_FLOAT(vaddvq_s32(vaddq_s32(v8, v7)));
  *a5 = result;
  return result;
}

uint64_t vpx_variance4x4_neon(__int32 *a1, int a2, __int32 *a3, int a4, _DWORD *a5)
{
  uint8x8_t v5;
  uint8x8_t v6;
  int16x8_t v7;
  __int32 *v8;
  uint8x8_t v9;
  __int32 *v10;
  uint8x8_t v11;
  int16x8_t v12;

  v5.i32[0] = *a1;
  v5.i32[1] = *(__int32 *)((char *)a1 + a2);
  v6.i32[0] = *a3;
  v6.i32[1] = *(__int32 *)((char *)a3 + a4);
  v7 = (int16x8_t)vsubl_u8(v5, v6);
  v8 = (__int32 *)((char *)a1 + 2 * a2);
  v9.i32[0] = *v8;
  v9.i32[1] = *(__int32 *)((char *)v8 + a2);
  v10 = (__int32 *)((char *)a3 + 2 * a4);
  v11.i32[0] = *v10;
  v11.i32[1] = *(__int32 *)((char *)v10 + a4);
  v12 = (int16x8_t)vsubl_u8(v9, v11);
  LODWORD(v10) = vaddlvq_s16(vaddq_s16(v12, v7));
  v7.i32[0] = vaddvq_s32(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v7.i8), v7, v7), *(int16x4_t *)v12.i8, *(int16x4_t *)v12.i8), v12, v12));
  *a5 = v7.i32[0];
  return v7.i32[0] - ((unint64_t)((int)v10 * (uint64_t)(int)v10) >> 4);
}

uint64_t vpx_variance4x8_neon(__int32 *a1, int a2, __int32 *a3, int a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint8x8_t v7;
  uint8x8_t v8;
  int16x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  __int32 *v16;
  __int32 *v17;
  int16x8_t v18;
  int16x8_t v19;
  int32x4_t v20;
  __int32 *v21;
  __int32 *v22;
  int16x8_t v23;

  v5 = 2 * a2;
  v6 = 2 * a4;
  v7.i32[0] = *a1;
  v7.i32[1] = *(__int32 *)((char *)a1 + a2);
  v8.i32[0] = *a3;
  v8.i32[1] = *(__int32 *)((char *)a3 + a4);
  v9 = (int16x8_t)vsubl_u8(v7, v8);
  v10.i32[0] = *(__int32 *)((char *)a1 + v5);
  v10.i32[1] = *(__int32 *)((char *)a1 + v5 + a2);
  v11.i32[0] = *(__int32 *)((char *)a3 + v6);
  v11.i32[1] = *(__int32 *)((char *)a3 + v6 + a4);
  v12 = vmlal_high_s16(vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v9.i8), v9, v9);
  v13 = (int16x8_t)vsubl_u8(v10, v11);
  v14 = vaddq_s16(v13, v9);
  v15 = vmlal_high_s16(vmlal_s16(v12, *(int16x4_t *)v13.i8, *(int16x4_t *)v13.i8), v13, v13);
  v16 = (__int32 *)((char *)a1 + v5 + v5);
  v17 = (__int32 *)((char *)a3 + v6 + v6);
  v13.i32[0] = *v16;
  v13.i32[1] = *(__int32 *)((char *)v16 + a2);
  v11.i32[0] = *v17;
  v11.i32[1] = *(__int32 *)((char *)v17 + a4);
  v18 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v13.i8, v11);
  v19 = vaddq_s16(v14, v18);
  v20 = vmlal_high_s16(vmlal_s16(v15, *(int16x4_t *)v18.i8, *(int16x4_t *)v18.i8), v18, v18);
  v21 = (__int32 *)((char *)v16 + v5);
  v18.i32[0] = *v21;
  v18.i32[1] = *(__int32 *)((char *)v21 + a2);
  v22 = (__int32 *)((char *)v17 + v6);
  v11.i32[0] = *v22;
  v11.i32[1] = *(__int32 *)((char *)v22 + a4);
  v23 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v18.i8, v11);
  v19.i32[0] = vaddlvq_s16(vaddq_s16(v19, v23));
  v20.i32[0] = vaddvq_s32(vmlal_high_s16(vmlal_s16(v20, *(int16x4_t *)v23.i8, *(int16x4_t *)v23.i8), v23, v23));
  *a5 = v20.i32[0];
  return v20.i32[0] - ((unint64_t)(v19.i32[0] * (uint64_t)v19.i32[0]) >> 5);
}

uint64_t vpx_variance8x4_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4, _DWORD *a5)
{
  int16x8_t v5;
  uint8x8_t *v6;
  uint8x8_t *v7;
  int16x8_t v8;
  uint8x8_t *v9;
  uint8x8_t *v10;
  int16x8_t v11;
  int16x8_t v12;
  int v13;

  v5 = (int16x8_t)vsubl_u8(*a1, *a3);
  v6 = (uint8x8_t *)((char *)a1 + a2);
  v7 = (uint8x8_t *)((char *)a3 + a4);
  v8 = (int16x8_t)vsubl_u8(*v6, *v7);
  v9 = (uint8x8_t *)((char *)v6 + a2);
  v10 = (uint8x8_t *)((char *)v7 + a4);
  v11 = (int16x8_t)vsubl_u8(*v9, *v10);
  v12 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v9 + a2), *(uint8x8_t *)((char *)v10 + a4));
  v13 = vaddlvq_s16(vaddq_s16(vaddq_s16(v8, v5), vaddq_s16(v11, v12)));
  v5.i32[0] = vaddvq_s32(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmlal_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v5.i8), v5, v5), *(int16x4_t *)v8.i8, *(int16x4_t *)v8.i8), v8, v8), *(int16x4_t *)v11.i8, *(int16x4_t *)v11.i8), v11, v11), *(int16x4_t *)v12.i8, *(int16x4_t *)v12.i8), v12, v12));
  *a5 = v5.i32[0];
  return v5.i32[0] - ((unint64_t)(v13 * (uint64_t)v13) >> 5);
}

uint64_t vpx_variance8x8_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4, int *a5)
{
  int16x8_t v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int16x8_t v9;
  int v11;
  int v12;

  v5 = 0uLL;
  v6 = 0uLL;
  v7 = -8;
  v8 = 0uLL;
  do
  {
    v9 = (int16x8_t)vsubl_u8(*a1, *a3);
    v5 = vaddq_s16(v9, v5);
    v6 = vmlal_s16(v6, *(int16x4_t *)v9.i8, *(int16x4_t *)v9.i8);
    v8 = vmlal_high_s16(v8, v9, v9);
    a1 = (uint8x8_t *)((char *)a1 + a2);
    a3 = (uint8x8_t *)((char *)a3 + a4);
  }
  while (!__CFADD__(v7++, 1));
  v11 = vaddlvq_s16(v5);
  v12 = vaddvq_s32(vaddq_s32(v8, v6));
  *a5 = v12;
  return v12 - ((unint64_t)(v11 * (uint64_t)v11) >> 6);
}

uint64_t vpx_variance8x16_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4, int *a5)
{
  int16x8_t v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int16x8_t v9;
  int v11;
  int v12;

  v5 = 0uLL;
  v6 = 0uLL;
  v7 = -16;
  v8 = 0uLL;
  do
  {
    v9 = (int16x8_t)vsubl_u8(*a1, *a3);
    v5 = vaddq_s16(v9, v5);
    v6 = vmlal_s16(v6, *(int16x4_t *)v9.i8, *(int16x4_t *)v9.i8);
    v8 = vmlal_high_s16(v8, v9, v9);
    a1 = (uint8x8_t *)((char *)a1 + a2);
    a3 = (uint8x8_t *)((char *)a3 + a4);
  }
  while (!__CFADD__(v7++, 1));
  v11 = vaddlvq_s16(v5);
  v12 = vaddvq_s32(vaddq_s32(v8, v6));
  *a5 = v12;
  return v12 - ((unint64_t)(v11 * (uint64_t)v11) >> 7);
}

uint64_t vpx_variance16x8_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4, int *a5)
{
  int16x8_t v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int v13;
  int v14;

  v5 = 0uLL;
  v6 = 0uLL;
  v7 = -8;
  v8 = 0uLL;
  v9 = 0uLL;
  do
  {
    v10 = (int16x8_t)vsubl_u8(*a1, *a3);
    v11 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)a1->i8, *(uint8x16_t *)a3->i8);
    v5 = vaddq_s16(v10, v5);
    v9 = vaddq_s16(v11, v9);
    v6 = vmlal_s16(vmlal_s16(v6, *(int16x4_t *)v10.i8, *(int16x4_t *)v10.i8), *(int16x4_t *)v11.i8, *(int16x4_t *)v11.i8);
    v8 = vmlal_high_s16(vmlal_high_s16(v8, v10, v10), v11, v11);
    a1 = (uint8x8_t *)((char *)a1 + a2);
    a3 = (uint8x8_t *)((char *)a3 + a4);
  }
  while (!__CFADD__(v7++, 1));
  v13 = vaddlvq_s16(vaddq_s16(v5, v9));
  v14 = vaddvq_s32(vaddq_s32(v8, v6));
  *a5 = v14;
  return v14 - ((unint64_t)(v13 * (uint64_t)v13) >> 7);
}

uint64_t vpx_variance16x16_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4, int *a5)
{
  int16x8_t v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int v13;
  int v14;

  v5 = 0uLL;
  v6 = 0uLL;
  v7 = -16;
  v8 = 0uLL;
  v9 = 0uLL;
  do
  {
    v10 = (int16x8_t)vsubl_u8(*a1, *a3);
    v11 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)a1->i8, *(uint8x16_t *)a3->i8);
    v5 = vaddq_s16(v10, v5);
    v9 = vaddq_s16(v11, v9);
    v6 = vmlal_s16(vmlal_s16(v6, *(int16x4_t *)v10.i8, *(int16x4_t *)v10.i8), *(int16x4_t *)v11.i8, *(int16x4_t *)v11.i8);
    v8 = vmlal_high_s16(vmlal_high_s16(v8, v10, v10), v11, v11);
    a1 = (uint8x8_t *)((char *)a1 + a2);
    a3 = (uint8x8_t *)((char *)a3 + a4);
  }
  while (!__CFADD__(v7++, 1));
  v13 = vaddlvq_s16(vaddq_s16(v5, v9));
  v14 = vaddvq_s32(vaddq_s32(v8, v6));
  *a5 = v14;
  return v14 - ((unint64_t)(v13 * (uint64_t)v13) >> 8);
}

uint64_t vpx_variance16x32_neon(uint8x8_t *a1, int a2, uint8x8_t *a3, int a4, int *a5)
{
  int16x8_t v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int v13;
  int v14;

  v5 = 0uLL;
  v6 = 0uLL;
  v7 = -32;
  v8 = 0uLL;
  v9 = 0uLL;
  do
  {
    v10 = (int16x8_t)vsubl_u8(*a1, *a3);
    v11 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)a1->i8, *(uint8x16_t *)a3->i8);
    v5 = vaddq_s16(v10, v5);
    v9 = vaddq_s16(v11, v9);
    v6 = vmlal_s16(vmlal_s16(v6, *(int16x4_t *)v10.i8, *(int16x4_t *)v10.i8), *(int16x4_t *)v11.i8, *(int16x4_t *)v11.i8);
    v8 = vmlal_high_s16(vmlal_high_s16(v8, v10, v10), v11, v11);
    a1 = (uint8x8_t *)((char *)a1 + a2);
    a3 = (uint8x8_t *)((char *)a3 + a4);
  }
  while (!__CFADD__(v7++, 1));
  v13 = vaddlvq_s16(vaddq_s16(v5, v9));
  v14 = vaddvq_s32(vaddq_s32(v8, v6));
  *a5 = v14;
  return v14 - ((unint64_t)(v13 * (uint64_t)v13) >> 9);
}

uint64_t vpx_variance32x16_neon(uint64_t a1, int a2, uint64_t a3, int a4, int *a5)
{
  int v5;
  int32x4_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint8x16_t v13;
  uint8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int v17;
  int v18;

  v5 = 0;
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  do
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = v11;
      v13 = *(uint8x16_t *)(a1 + v10);
      v14 = *(uint8x16_t *)(a3 + v10);
      v15 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v13.i8, *(uint8x8_t *)v14.i8);
      v16 = (int16x8_t)vsubl_high_u8(v13, v14);
      v7 = vaddq_s16(v15, v7);
      v8 = vaddq_s16(v16, v8);
      v6 = vmlal_s16(vmlal_s16(v6, *(int16x4_t *)v15.i8, *(int16x4_t *)v15.i8), *(int16x4_t *)v16.i8, *(int16x4_t *)v16.i8);
      v9 = vmlal_high_s16(vmlal_high_s16(v9, v15, v15), v16, v16);
      v10 = 16;
      v11 = 0;
    }
    while ((v12 & 1) != 0);
    a1 += a2;
    a3 += a4;
    ++v5;
  }
  while (v5 != 16);
  v17 = vaddvq_s32(vpadalq_s16(vpaddlq_s16(v8), v7));
  v18 = vaddvq_s32(vaddq_s32(v9, v6));
  *a5 = v18;
  return v18 - ((unint64_t)(v17 * (uint64_t)v17) >> 9);
}

uint64_t vpx_variance32x32_neon(uint64_t a1, int a2, uint64_t a3, int a4, int *a5)
{
  int v5;
  int32x4_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint8x16_t v13;
  uint8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int v17;
  int v18;

  v5 = 0;
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  do
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = v11;
      v13 = *(uint8x16_t *)(a1 + v10);
      v14 = *(uint8x16_t *)(a3 + v10);
      v15 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v13.i8, *(uint8x8_t *)v14.i8);
      v16 = (int16x8_t)vsubl_high_u8(v13, v14);
      v7 = vaddq_s16(v15, v7);
      v8 = vaddq_s16(v16, v8);
      v6 = vmlal_s16(vmlal_s16(v6, *(int16x4_t *)v15.i8, *(int16x4_t *)v15.i8), *(int16x4_t *)v16.i8, *(int16x4_t *)v16.i8);
      v9 = vmlal_high_s16(vmlal_high_s16(v9, v15, v15), v16, v16);
      v10 = 16;
      v11 = 0;
    }
    while ((v12 & 1) != 0);
    a1 += a2;
    a3 += a4;
    ++v5;
  }
  while (v5 != 32);
  v17 = vaddvq_s32(vpadalq_s16(vpaddlq_s16(v8), v7));
  v18 = vaddvq_s32(vaddq_s32(v9, v6));
  *a5 = v18;
  return v18 - ((unint64_t)(v17 * (uint64_t)v17) >> 10);
}

uint64_t vpx_variance32x64_neon(uint64_t a1, int a2, uint64_t a3, int a4, int *a5)
{
  int v5;
  int32x4_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint8x16_t v13;
  uint8x16_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int v17;
  int v18;

  v5 = 0;
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  do
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = v11;
      v13 = *(uint8x16_t *)(a1 + v10);
      v14 = *(uint8x16_t *)(a3 + v10);
      v15 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v13.i8, *(uint8x8_t *)v14.i8);
      v16 = (int16x8_t)vsubl_high_u8(v13, v14);
      v7 = vaddq_s16(v15, v7);
      v8 = vaddq_s16(v16, v8);
      v6 = vmlal_s16(vmlal_s16(v6, *(int16x4_t *)v15.i8, *(int16x4_t *)v15.i8), *(int16x4_t *)v16.i8, *(int16x4_t *)v16.i8);
      v9 = vmlal_high_s16(vmlal_high_s16(v9, v15, v15), v16, v16);
      v10 = 16;
      v11 = 0;
    }
    while ((v12 & 1) != 0);
    a1 += a2;
    a3 += a4;
    ++v5;
  }
  while (v5 != 64);
  v17 = vaddvq_s32(vpadalq_s16(vpaddlq_s16(v8), v7));
  v18 = vaddvq_s32(vaddq_s32(v9, v6));
  *a5 = v18;
  return v18 - ((unint64_t)(v17 * (uint64_t)v17) >> 11);
}

uint64_t vpx_variance64x32_neon(uint64_t a1, int a2, uint64_t a3, int a4, int *a5)
{
  int v5;
  int32x4_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  unint64_t v10;
  uint8x16_t v11;
  uint8x16_t v12;
  int16x8_t v13;
  int16x8_t v14;
  BOOL v15;
  int v16;
  int v17;

  v5 = 0;
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  do
  {
    v10 = 0;
    do
    {
      v11 = *(uint8x16_t *)(a1 + v10);
      v12 = *(uint8x16_t *)(a3 + v10);
      v13 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v11.i8, *(uint8x8_t *)v12.i8);
      v14 = (int16x8_t)vsubl_high_u8(v11, v12);
      v7 = vaddq_s16(v13, v7);
      v8 = vaddq_s16(v14, v8);
      v6 = vmlal_s16(vmlal_s16(v6, *(int16x4_t *)v13.i8, *(int16x4_t *)v13.i8), *(int16x4_t *)v14.i8, *(int16x4_t *)v14.i8);
      v9 = vmlal_high_s16(vmlal_high_s16(v9, v13, v13), v14, v14);
      v15 = v10 >= 0x30;
      v10 += 16;
    }
    while (!v15);
    a1 += a2;
    a3 += a4;
    ++v5;
  }
  while (v5 != 32);
  v16 = vaddvq_s32(vpadalq_s16(vpaddlq_s16(v8), v7));
  v17 = vaddvq_s32(vaddq_s32(v9, v6));
  *a5 = v17;
  return v17 - ((unint64_t)(v16 * (uint64_t)v16) >> 11);
}

uint64_t vpx_variance64x64_neon(uint64_t a1, int a2, uint64_t a3, int a4, int *a5)
{
  unsigned int v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int v9;
  int16x8_t v10;
  int16x8_t v11;
  unsigned int v12;
  unint64_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  int16x8_t v16;
  int16x8_t v17;
  BOOL v18;
  int v19;
  int v20;

  v5 = 0;
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 32;
  do
  {
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = v5;
    do
    {
      v13 = 0;
      do
      {
        v14 = *(uint8x16_t *)(a1 + v13);
        v15 = *(uint8x16_t *)(a3 + v13);
        v16 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v14.i8, *(uint8x8_t *)v15.i8);
        v17 = (int16x8_t)vsubl_high_u8(v14, v15);
        v10 = vaddq_s16(v16, v10);
        v11 = vaddq_s16(v17, v11);
        v6 = vmlal_s16(vmlal_s16(v6, *(int16x4_t *)v16.i8, *(int16x4_t *)v16.i8), *(int16x4_t *)v17.i8, *(int16x4_t *)v17.i8);
        v7 = vmlal_high_s16(vmlal_high_s16(v7, v16, v16), v17, v17);
        v18 = v13 >= 0x30;
        v13 += 16;
      }
      while (!v18);
      a1 += a2;
      a3 += a4;
      ++v12;
    }
    while (v12 < v9);
    if (v9 <= (int)(v5 + 1))
      ++v5;
    else
      v5 = v9;
    v8 = vpadalq_s16(vpadalq_s16(v8, v10), v11);
    v9 += 32;
  }
  while (v5 < 0x40);
  v19 = vaddvq_s32(v8);
  v20 = vaddvq_s32(vaddq_s32(v7, v6));
  *a5 = v20;
  return v20 - ((unint64_t)(v19 * (uint64_t)v19) >> 12);
}

uint64_t vpx_get4x4sse_cs_neon(__int32 *a1, int a2, __int32 *a3, int a4)
{
  uint8x8_t v4;
  uint8x8_t v5;
  __int32 *v6;
  __int32 *v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;

  v4.i32[0] = *a1;
  v4.i32[1] = *(__int32 *)((char *)a1 + a2);
  v5.i32[0] = *a3;
  v5.i32[1] = *(__int32 *)((char *)a3 + a4);
  v6 = (__int32 *)((char *)a1 + 2 * a2);
  v7 = (__int32 *)((char *)a3 + 2 * a4);
  v8.i32[0] = *v6;
  v8.i32[1] = *(__int32 *)((char *)v6 + a2);
  v9.i32[0] = *v7;
  v9.i32[1] = *(__int32 *)((char *)v7 + a4);
  v10 = vabdl_u8(v4, v5);
  v11 = vabdl_u8(v8, v9);
  return vaddvq_s32((int32x4_t)vmlal_high_u16(vmlal_u16(vmlal_high_u16(vmull_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)v10.i8), v10, v10), *(uint16x4_t *)v11.i8, *(uint16x4_t *)v11.i8), v11, v11));
}

float vpx_mse16x16_neon(uint8x16_t *a1, int a2, uint8x16_t *a3, int a4, float *a5)
{
  int32x4_t v5;
  int v6;
  int32x4_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  float result;

  v5 = 0uLL;
  v6 = -16;
  v7 = 0uLL;
  do
  {
    v8 = *a1;
    a1 = (uint8x16_t *)((char *)a1 + a2);
    v9 = *a3;
    a3 = (uint8x16_t *)((char *)a3 + a4);
    v10 = vabdq_u8(v8, v9);
    v5 = (int32x4_t)vpadalq_u16((uint32x4_t)v5, vmull_u8(*(uint8x8_t *)v10.i8, *(uint8x8_t *)v10.i8));
    v7 = (int32x4_t)vpadalq_u16((uint32x4_t)v7, vmull_high_u8(v10, v10));
  }
  while (!__CFADD__(v6++, 1));
  result = COERCE_FLOAT(vaddvq_s32(vaddq_s32(v7, v5)));
  *a5 = result;
  return result;
}

uint64_t vp8e_init(_QWORD *a1, int *a2)
{
  uint64_t result;
  void *v5;
  unint64_t v6;
  const void *v7;
  unsigned int v8;
  size_t v9;
  void *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *compressor;
  _OWORD v19[4];
  _BYTE __dst[504];

  pthread_once(&once_lock_2, (void (*)(void))setup_rtcd_internal);
  pthread_once(&once_lock_7, (void (*)(void))setup_rtcd_internal_1);
  pthread_once(&once_lock_8, (void (*)(void))setup_rtcd_internal_2);
  if (a1[6])
    return 0;
  v5 = malloc_type_malloc(0x2877uLL, 0x74AD08B5uLL);
  if (!v5)
    return 2;
  v6 = ((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 - 8) = v5;
  if (!v6)
    return 2;
  bzero((void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF0), 0x2860uLL);
  a1[6] = v6;
  *(_QWORD *)(v6 + 8) = a1[4];
  v7 = (const void *)a1[5];
  if (v7)
  {
    memcpy((void *)(v6 + 216), v7, 0x1F8uLL);
    a1[5] = v6 + 216;
  }
  *(_OWORD *)(v6 + 720) = default_extracfg;
  *(_OWORD *)(v6 + 736) = *(_OWORD *)algn_208F45B10;
  *(_OWORD *)(v6 + 752) = xmmword_208F45B20;
  *(_OWORD *)(v6 + 768) = unk_208F45B30;
  *(_QWORD *)(v6 + 720) = v6 + 1472;
  v8 = (3 * *(_DWORD *)(v6 + 228) * *(_DWORD *)(v6 + 232)) & 0xFFFFFFFE;
  if (v8 <= 0x8000)
    v9 = 0x8000;
  else
    v9 = v8;
  *(_DWORD *)(v6 + 1312) = v9;
  v10 = malloc_type_malloc(v9, 0xAE73DF6AuLL);
  *(_QWORD *)(v6 + 1304) = v10;
  if (!v10)
  {
    *(_DWORD *)(v6 + 1312) = 0;
    return 2;
  }
  if (a2)
    v11 = *a2;
  else
    v11 = 1;
  *(_DWORD *)(a1[6] + 208) = v11;
  pthread_once(&once_lock, (void (*)(void))initialize_enc);
  result = validate_config(v6, (_DWORD *)(v6 + 216), (_DWORD *)(v6 + 720), 0);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(v6 + 808) = 0;
    v12 = *(_DWORD *)(v6 + 248);
    if (v12)
    {
      v13 = *(_DWORD *)(v6 + 248);
      v14 = 10000000 * *(int *)(v6 + 244);
      do
      {
        v15 = v13;
        v13 = v14 % v13;
        v14 = v15;
      }
      while (v13);
    }
    else
    {
      LODWORD(v15) = 10000000 * *(_DWORD *)(v6 + 244);
    }
    *(_QWORD *)(v6 + 784) = 10000000 * *(int *)(v6 + 244) / (int)v15;
    *(_DWORD *)(v6 + 792) = v12 / (int)v15;
    memcpy(__dst, (const void *)(v6 + 216), sizeof(__dst));
    v16 = *(_OWORD *)(v6 + 736);
    v19[0] = *(_OWORD *)(v6 + 720);
    v19[1] = v16;
    v17 = *(_OWORD *)(v6 + 768);
    v19[2] = *(_OWORD *)(v6 + 752);
    v19[3] = v17;
    set_vp8e_config(v6 + 816, (uint64_t)__dst, (uint64_t)v19, (uint64_t)a2);
    compressor = vp8_create_compressor((_DWORD *)(v6 + 816));
    *(_QWORD *)(v6 + 1296) = compressor;
    return 2 * (compressor == 0);
  }
  return result;
}

uint64_t vp8e_destroy(uint64_t a1)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 1268);
  if (v2 && *(_DWORD *)(a1 + 1272) == v2 - 1)
  {
    free(*(void **)(*(_QWORD *)(a1 + 1288) + 56));
    free(*(void **)(a1 + 1288));
  }
  free(*(void **)(a1 + 1304));
  vp8_remove_compressor((uint64_t *)(a1 + 1296));
  free(*(void **)(a1 - 8));
  return 0;
}

uint64_t vp8e_encode(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  uint64_t result;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  _DWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  _DWORD *v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int *v38;
  uint64_t v39;
  _DWORD *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int32x4_t v50;
  int32x4_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  unsigned int v86;
  _DWORD *v87;
  _OWORD v88[6];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;

  v99 = 0;
  v98 = a5;
  v97 = a3;
  if (*(_DWORD *)(a1 + 328))
  {
    if (!a2)
    {
LABEL_19:
      if (v99 || (v99 = validate_config(a1, (_DWORD *)(a1 + 216), (_DWORD *)(a1 + 720), 1)) != 0)
      {
        *(_QWORD *)(a1 + 1472) = 0x4000000000;
        if (!v98)
          goto LABEL_34;
        goto LABEL_21;
      }
      if (a6 == 1)
      {
        v19 = 0;
        if (!*(_DWORD *)(a1 + 864))
          goto LABEL_33;
      }
      else
      {
        v20 = *(_DWORD *)(a1 + 256);
        if (v20 == 1)
          v19 = 3;
        else
          v19 = 4 * (v20 == 2);
        if (*(_DWORD *)(a1 + 864) == v19)
        {
LABEL_33:
          v99 = 0;
          *(_QWORD *)(a1 + 1472) = 0x4000000000;
          if (!v98)
          {
LABEL_34:
            v98 = *(_QWORD *)(a1 + 10328);
            *(_QWORD *)(a1 + 10328) = 0;
            if (!v99)
              goto LABEL_35;
            goto LABEL_22;
          }
LABEL_21:
          *(_QWORD *)(a1 + 10328) = 0;
          if (!v99)
          {
LABEL_35:
            v21 = v98;
            if ((~(_DWORD)v98 & 0x480000) != 0 && (v22 = v98, (~(_DWORD)v98 & 0x1800000) != 0))
            {
              if ((v98 & 0x230000) != 0)
              {
                if ((v98 & 0x10000) != 0)
                  v33 = 6;
                else
                  v33 = 7;
                if ((v98 & 0x20000) != 0)
                  v33 &= 5u;
                if ((v98 & 0x200000) != 0)
                  v33 &= 3u;
                *(_DWORD *)(*(_QWORD *)(a1 + 1296) + 142876) = v33;
              }
              if ((v21 & 0x1CC0000) != 0)
              {
                if ((*(_QWORD *)&v21 & 0x40000) != 0)
                  v34 = 6;
                else
                  v34 = 7;
                if ((*(_QWORD *)&v21 & 0x400000) != 0)
                  v34 &= 5u;
                if ((*(_QWORD *)&v21 & 0x800000) != 0)
                  v35 = v34 & 3;
                else
                  v35 = v34;
                v36 = *(_QWORD *)(a1 + 1296);
                v37 = (_DWORD *)(v36 + 180176);
                v38 = (unsigned int *)(v36 + 111568);
                v38[1] = 0;
                v38[2] = 0;
                *v38 = v35 & 1;
                if ((v35 & 2) != 0)
                  v38[1] = 1;
                if (v35 >= 4)
                  v38[2] = 1;
                *v37 = 1;
              }
              if ((v22 & 0x100000) != 0)
              {
                v23 = 0;
                *(_DWORD *)(*(_QWORD *)(a1 + 1296) + 111588) = 0;
              }
              else
              {
                v23 = 0;
              }
            }
            else
            {
              *(_QWORD *)a1 = "Conflicting flags.";
              v23 = 8;
            }
            v99 = v23;
            if (*(_DWORD *)(a1 + 376) != 1)
            {
LABEL_42:
              if (v99)
                return v99;
              v26 = *(_QWORD *)(a1 + 1296);
              if (!v26)
                return v99;
              v94 = 0;
              v95 = 0;
              v93 = 0;
              v27 = setjmp((int *)(v26 + 108124));
              v28 = *(_DWORD **)(a1 + 1296);
              v29 = v28 + 27008;
              if (v27)
              {
                v28[27030] = 0;
                v30 = *v29;
                if (*v29)
                {
                  v31 = v28[27009];
                  v32 = v28 + 27010;
                  if (!v31)
                    v32 = 0;
                  *(_QWORD *)a1 = v32;
                }
                return v30;
              }
              v28[27030] = 1;
              v39 = *(_QWORD *)(a1 + 8);
              if ((v39 & 0x10000) != 0)
              {
                v28[37040] = 1;
                if ((v39 & 0x20000) == 0)
                {
LABEL_78:
                  v40 = (_DWORD *)(a1 + 1472);
                  v41 = v98;
                  if (!a2)
                    goto LABEL_102;
LABEL_84:
                  v91 = 0u;
                  v92 = 0u;
                  v89 = 0u;
                  v90 = 0u;
                  memset(v88, 0, sizeof(v88));
                  if (*(_BYTE *)(a1 + 808))
                  {
                    v42 = *(_QWORD *)(a1 + 800);
                  }
                  else
                  {
                    v42 = v97;
                    *(_QWORD *)(a1 + 800) = v97;
                    *(_BYTE *)(a1 + 808) = 1;
                  }
                  if (v97 < v42)
                  {
                    vpx_internal_error((uint64_t)(v28 + 27008), 8, "pts is smaller than initial pts");
                    v42 = *(_QWORD *)(a1 + 800);
                  }
                  v97 -= v42;
                  v43 = *(_QWORD *)(a1 + 784);
                  if (v97 > 0x7FFFFFFFFFFFFFFFLL / v43)
                  {
                    vpx_internal_error(*(_QWORD *)(a1 + 1296) + 108032, 8, "conversion of relative pts to ticks would overflow");
                    v44 = v97 * *(_QWORD *)(a1 + 784) / *(int *)(a1 + 792);
                    v95 = v44;
                    if ((a4 & 0x8000000000000000) == 0)
                    {
LABEL_91:
                      if (v97 <= (a4 ^ 0x7FFFFFFFFFFFFFFFLL))
                      {
LABEL_93:
                        v45 = v97 + a4;
                        v46 = *(_QWORD *)(a1 + 784);
                        if (v45 > 0x7FFFFFFFFFFFFFFFLL / v46)
                        {
                          vpx_internal_error(*(_QWORD *)(a1 + 1296) + 108032, 8, "conversion of relative pts + duration to ticks would overflow");
                          v46 = *(_QWORD *)(a1 + 784);
                        }
                        v47 = v46 * v45 / *(int *)(a1 + 792);
                        *((_QWORD *)&v88[4] + 1) = *((_QWORD *)a2 + 8);
                        v48 = a2[21];
                        LODWORD(v88[1]) = a2[20];
                        DWORD1(v88[2]) = v48;
                        v49 = LODWORD(v88[1]) - a2[3];
                        v94 = v47;
                        *(_OWORD *)((char *)&v88[3] + 8) = *((_OWORD *)a2 + 3);
                        v50.i64[0] = *((_QWORD *)a2 + 3);
                        v51.i64[0] = 0x100000001;
                        v51.i64[1] = 0x100000001;
                        v50.i64[1] = v50.i64[0];
                        v88[0] = v50;
                        *(uint32x4_t *)((char *)&v88[1] + 4) = vshrq_n_u32((uint32x4_t)vaddq_s32(v50, v51), 1uLL);
                        DWORD2(v89) = v49 >> 1;
                        v99 = 0;
                        if (vp8_receive_raw_frame(*(_QWORD *)(a1 + 1296), *(_DWORD *)(a1 + 1456) | v41 & 1u, (int *)v88, v44, v47))
                        {
                          v52 = *(_QWORD *)(a1 + 1296);
                          v53 = *(_DWORD *)(v52 + 108032);
                          if (v53)
                          {
                            v54 = *(_DWORD *)(v52 + 108036);
                            v55 = v52 + 108040;
                            if (!v54)
                              v55 = 0;
                            *(_QWORD *)a1 = v55;
                          }
                          v99 = v53;
                        }
                        *(_DWORD *)(a1 + 1456) = 0;
LABEL_102:
                        v56 = a2 == 0;
                        v57 = *(_QWORD *)(a1 + 1304);
                        v58 = *(unsigned int *)(a1 + 1312);
                        v59 = v57 + v58;
                        v96 = 0;
                        while (1)
                        {
                          result = vp8_get_compressed_data(*(_QWORD *)(a1 + 1296), &v96, &v93, v57, v59, &v95, &v94, v56);
                          if ((_DWORD)result == -1)
                          {
LABEL_127:
                            *(_DWORD *)(*(_QWORD *)(a1 + 1296) + 108120) = 0;
                            return v99;
                          }
                          if ((_DWORD)result == 7)
                            break;
                          v60 = v93;
                          if (v93)
                          {
                            v61 = *(_QWORD *)(a1 + 1296);
                            v62 = *(_QWORD *)(a1 + 784);
                            if (v62 >= 0)
                              v63 = *(_QWORD *)(a1 + 784);
                            else
                              v63 = v62 + 1;
                            v64 = (v63 >> 1) - (v62 > 1);
                            v65 = *(int *)(a1 + 792);
                            v66 = *(_QWORD *)(a1 + 800);
                            v67 = v96 & 1 | (v96 << 16);
                            if (*(_DWORD *)(v61 + 111064))
                            {
                              v68 = v66 + (v64 + v95 * v65) / v62;
                              v69 = (v64 + (v94 - v95) * v65) / v62;
                              v70 = v68;
                            }
                            else
                            {
                              v67 |= 4u;
                              v70 = v66 + (v64 + *(_QWORD *)(v61 + 132040) * v65) / v62 + 1;
                              v69 = 0;
                            }
                            v72 = *(_DWORD *)(v61 + 109856);
                            v71 = *(_DWORD *)(v61 + 109860);
                            if (*(_DWORD *)(v61 + 148220))
                              v73 = v67 | 2;
                            else
                              v73 = v67;
                            if (*(_DWORD *)(v61 + 148188))
                            {
                              v74 = *(_DWORD *)(v61 + 113860);
                              if (v74 != 31)
                              {
                                v75 = v73 | 8;
                                v76 = 1 << v74;
                                v77 = *(unsigned int *)(a1 + 1476);
                                v78 = *(unsigned int *)(a1 + 1472);
                                v79 = v61 + 143280;
                                v80 = 0;
                                v81 = v57;
                                v82 = v58;
                                do
                                {
                                  v83 = v78;
                                  v84 = *(unsigned int *)(v79 + 4 * v80);
                                  if (v76 == v80)
                                    v75 &= ~8u;
                                  if (v83 < v77)
                                  {
                                    *v40 = v83 + 1;
                                    v85 = &v40[34 * v83];
                                    *((_QWORD *)v85 + 1) = 0;
                                    *((_QWORD *)v85 + 2) = v81;
                                    *((_QWORD *)v85 + 3) = v84;
                                    *((_QWORD *)v85 + 4) = v70;
                                    *((_QWORD *)v85 + 5) = v69;
                                    v85[12] = v75;
                                    v85[13] = v80;
                                    v85[14] = v72;
                                    *(_QWORD *)(v85 + 17) = 0;
                                    *(_QWORD *)(v85 + 15) = 0;
                                    v85[19] = v71;
                                    *((_QWORD *)v85 + 10) = 0;
                                    *((_QWORD *)v85 + 11) = 0;
                                    *((_BYTE *)v85 + 96) = 1;
                                    *(_OWORD *)((char *)v85 + 97) = 0uLL;
                                    *(_OWORD *)((char *)v85 + 113) = 0uLL;
                                    ++v83;
                                    *((_OWORD *)v85 + 8) = 0uLL;
                                  }
                                  v81 += v84;
                                  v82 -= v84;
                                  ++v80;
                                  v78 = v83;
                                  v57 = v81;
                                  v58 = v82;
                                }
                                while (v76 + 1 != v80);
                              }
                            }
                            else
                            {
                              v86 = *(_DWORD *)(a1 + 1472);
                              if (v86 < *(_DWORD *)(a1 + 1476))
                              {
                                *v40 = v86 + 1;
                                v87 = &v40[34 * v86];
                                *((_QWORD *)v87 + 1) = 0;
                                *((_QWORD *)v87 + 2) = v57;
                                *((_QWORD *)v87 + 3) = v60;
                                *((_QWORD *)v87 + 4) = v70;
                                *((_QWORD *)v87 + 5) = v69;
                                v87[12] = v73;
                                v87[13] = -1;
                                v87[14] = v72;
                                *(_QWORD *)(v87 + 17) = 0;
                                *(_QWORD *)(v87 + 15) = 0;
                                v87[19] = v71;
                                *((_QWORD *)v87 + 10) = 0;
                                *((_QWORD *)v87 + 11) = 0;
                                *((_BYTE *)v87 + 96) = 1;
                                *(_OWORD *)((char *)v87 + 97) = 0uLL;
                                *(_OWORD *)((char *)v87 + 113) = 0uLL;
                                *((_OWORD *)v87 + 8) = 0uLL;
                              }
                              v57 += v60;
                              v58 -= v60;
                            }
                          }
                          if (v58 < (unint64_t)*(unsigned int *)(a1 + 1312) >> 1)
                            goto LABEL_127;
                        }
                        *(_DWORD *)(*(_QWORD *)(a1 + 1296) + 108120) = 0;
                        return result;
                      }
LABEL_92:
                      vpx_internal_error(*(_QWORD *)(a1 + 1296) + 108032, 8, "relative pts + duration is too big");
                      goto LABEL_93;
                    }
                  }
                  else
                  {
                    v44 = v97 * v43 / *(int *)(a1 + 792);
                    v95 = v44;
                    if ((a4 & 0x8000000000000000) == 0)
                      goto LABEL_91;
                  }
                  vpx_internal_error(*(_QWORD *)(a1 + 1296) + 108032, 8, "duration is too big");
                  if (v97 <= (a4 ^ 0x7FFFFFFFFFFFFFFFLL))
                    goto LABEL_93;
                  goto LABEL_92;
                }
              }
              else if ((v39 & 0x20000) == 0)
              {
                goto LABEL_78;
              }
              v28[37047] = 1;
              v40 = (_DWORD *)(a1 + 1472);
              v41 = v98;
              if (!a2)
                goto LABEL_102;
              goto LABEL_84;
            }
LABEL_39:
            v24 = *(_DWORD *)(a1 + 380);
            if (v24 == *(_DWORD *)(a1 + 384))
            {
              v25 = *(_DWORD *)(a1 + 10320) + 1;
              *(_DWORD *)(a1 + 10320) = v25;
              if (v25 > v24)
              {
                v98 |= 1uLL;
                *(_DWORD *)(a1 + 10320) = 1;
              }
            }
            goto LABEL_42;
          }
LABEL_22:
          if (*(_DWORD *)(a1 + 376) != 1)
            goto LABEL_42;
          goto LABEL_39;
        }
      }
      *(_DWORD *)(a1 + 864) = v19;
      vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
      goto LABEL_33;
    }
    v10 = *a2;
    if (*a2 == 258 || v10 == 769 || v10 == 265)
    {
      if (a2[6] == *(_DWORD *)(a1 + 228) && a2[7] == *(_DWORD *)(a1 + 232))
      {
        v11 = 0;
LABEL_18:
        v99 = v11;
        goto LABEL_19;
      }
      v17 = "Image size must match encoder init configuration size";
    }
    else
    {
      v17 = "Invalid image format. Only YV12, I420 and NV12 images are supported";
    }
    *(_QWORD *)a1 = v17;
    v11 = 8;
    goto LABEL_18;
  }
  v12 = *(_QWORD *)(a1 + 1296);
  if (!v12)
    return 1;
  v13 = v12 + 114688;
  v15 = *(_DWORD *)(v13 + 28);
  v14 = v13 + 28;
  if (v15 < 2)
    return v99;
  v16 = *(_QWORD *)(v14 + 20);
  if (v16)
  {
    *(_DWORD *)(v16 + 44) = 1;
    if (!*(_DWORD *)(v14 + 4))
      *(_DWORD *)(v16 + 48) = 1;
    return v99;
  }
  return 1;
}

uint64_t vp8e_get_cxdata(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = a1 + 1480;
    *a2 = a1 + 1480;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((result - (a1 + 1472) - 8) >> 3) >= *(unsigned int *)(a1 + 1472))
    return 0;
  *a2 = result + 136;
  return result;
}

uint64_t vp8e_set_config(uint64_t a1, _DWORD *a2)
{
  int v4;
  unsigned int v5;
  const char *v6;
  uint64_t v7;
  int v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  int v15;
  BOOL v16;
  int v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];
  _BYTE __dst[504];

  v4 = a2[3];
  if (v4 == *(_DWORD *)(a1 + 228) && a2[4] == *(_DWORD *)(a1 + 232))
  {
    v5 = a2[11];
  }
  else
  {
    v5 = a2[11];
    if (v5 > 1 || a2[10])
    {
      v6 = "Cannot change width or height after initialization";
      goto LABEL_9;
    }
    v15 = *(_DWORD *)(*(_QWORD *)(a1 + 1296) + 148224);
    if (v15)
      v16 = v4 <= v15;
    else
      v16 = 1;
    if (!v16 || (v17 = *(_DWORD *)(*(_QWORD *)(a1 + 1296) + 148228)) != 0 && a2[4] > v17)
    {
      v6 = "Cannot increase width or height larger than their initial values";
      goto LABEL_9;
    }
  }
  if (v5 > *(_DWORD *)(a1 + 260))
  {
    v6 = "Cannot increase lag_in_frames";
LABEL_9:
    *(_QWORD *)a1 = v6;
    return 8;
  }
  v7 = validate_config(a1, a2, (_DWORD *)(a1 + 720), 0);
  if (!(_DWORD)v7)
  {
    v9 = setjmp((int *)(*(_QWORD *)(a1 + 1296) + 108124));
    v10 = *(unsigned int **)(a1 + 1296);
    v11 = v10 + 27008;
    if (v9)
    {
      v12 = *v11;
      if ((_DWORD)v12)
      {
        v13 = v10[27009];
        v14 = v10 + 27010;
        if (!v13)
          v14 = 0;
        *(_QWORD *)a1 = v14;
      }
      v11[22] = 0;
      return v12;
    }
    else
    {
      v10[27030] = 1;
      memcpy((void *)(a1 + 216), a2, 0x1F8uLL);
      memcpy(__dst, a2, sizeof(__dst));
      v18 = *(_OWORD *)(a1 + 736);
      v20[0] = *(_OWORD *)(a1 + 720);
      v20[1] = v18;
      v19 = *(_OWORD *)(a1 + 768);
      v20[2] = *(_OWORD *)(a1 + 752);
      v20[3] = v19;
      set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v20, 0);
      vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
      v7 = vp8cx_create_encoder_threads(*(_DWORD **)(a1 + 1296)) != 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 1296) + 108120) = 0;
    }
  }
  return v7;
}

double vp8e_get_preview(uint64_t a1, double a2, double a3, double a4, double a5, double a6, int8x16_t a7, int32x4_t a8, int8x16_t a9)
{
  __int128 v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[7];

  v16 = 0uLL;
  v18 = 0;
  v17 = 0;
  if (*(_DWORD *)(a1 + 1460))
  {
    LODWORD(v16) = *(_DWORD *)(a1 + 1460);
    *(_QWORD *)((char *)&v16 + 4) = *(_QWORD *)(a1 + 1464);
  }
  v10 = 0uLL;
  v21 = 0u;
  memset(v22, 0, sizeof(v22));
  v19 = 0u;
  v20 = 0u;
  v11 = *(_QWORD *)(a1 + 1296);
  if (!*(_DWORD *)(v11 + 111576))
  {
    *(_QWORD *)(v11 + 111144) = *(_QWORD *)(v11 + 111136);
    if (!vp8_post_proc_frame(v11 + 108032, (uint64_t)&v19, (int *)&v16, (int32x4_t)0, a3, a4, a5, a6, a7, a8, a9))
    {
      *(_DWORD *)(a1 + 1416) = 12;
      *(_OWORD *)(a1 + 1368) = *(_OWORD *)((char *)v22 + 8);
      *(_QWORD *)(a1 + 1384) = *((_QWORD *)&v22[1] + 1);
      *(_DWORD *)(a1 + 1320) = 258;
      *(_QWORD *)&v10 = 0x100000001;
      *(_QWORD *)(a1 + 1360) = 0x100000001;
      v12 = DWORD1(v21);
      *(_DWORD *)(a1 + 1400) = v20;
      v13 = v19;
      v14 = DWORD1(v19);
      *(_DWORD *)(a1 + 1344) = v19;
      *(_DWORD *)(a1 + 1348) = v14;
      *(_DWORD *)(a1 + 1404) = v12;
      *(_DWORD *)(a1 + 1408) = v12;
      *(_DWORD *)(a1 + 1332) = v13;
      *(_DWORD *)(a1 + 1336) = v14;
    }
  }
  return *(double *)&v10;
}

uint64_t vp8e_mr_alloc_mem(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = malloc_type_calloc(1uLL, 0x40uLL, 0x10200403F151E2AuLL);
  if (!v5)
    return 2;
  v6 = v5;
  v7 = malloc_type_calloc(((v4 + 15) >> 4) * ((v3 + 15) >> 4), 0x10uLL, 0x1000040451B5BE8uLL);
  v6[7] = v7;
  if (v7)
  {
    result = 0;
    *a2 = v6;
  }
  else
  {
    free(v6);
    return 2;
  }
  return result;
}

uint64_t validate_config(uint64_t a1, _DWORD *a2, _DWORD *a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  const char *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  if ((a2[3] - 1) > 0x3FFE)
  {
    v7 = "g_w out of range [1..16383]";
    goto LABEL_10;
  }
  if ((a2[4] - 1) > 0x3FFE)
  {
    *(_QWORD *)a1 = "g_h out of range [1..16383]";
    return 8;
  }
  if ((a2[8] - 1) >= 0x3B9ACA00)
  {
    *(_QWORD *)a1 = "g_timebase.den out of range [1..1000000000]";
    return 8;
  }
  if ((a2[7] - 1) >= 0x3B9ACA00)
  {
    *(_QWORD *)a1 = "g_timebase.num out of range [1..1000000000]";
    return 8;
  }
  if (a2[2] > 3u)
  {
    *(_QWORD *)a1 = "g_profile out of range [..3]";
    return 8;
  }
  v4 = a2[30];
  if (v4 > 0x3F)
  {
    *(_QWORD *)a1 = "rc_max_quantizer out of range [..63]";
    return 8;
  }
  v5 = a2[29];
  if (v5 > v4)
  {
    *(_QWORD *)a1 = "rc_min_quantizer out of range [..cfg->rc_max_quantizer]";
    return 8;
  }
  if (a2[1] > 0x40u)
  {
    *(_QWORD *)a1 = "g_threads out of range [..64]";
    return 8;
  }
  if (a2[11])
  {
    *(_QWORD *)a1 = "g_lag_in_frames out of range [..0]";
    return 8;
  }
  v8 = a2[18];
  if (v8 > 3)
  {
    *(_QWORD *)a1 = "rc_end_usage out of range [VPX_VBR..VPX_Q]";
    return 8;
  }
  if (a2[31] > 0x64u)
  {
    *(_QWORD *)a1 = "rc_undershoot_pct out of range [..100]";
    return 8;
  }
  if (a2[32] > 0x64u)
  {
    *(_QWORD *)a1 = "rc_overshoot_pct out of range [..100]";
    return 8;
  }
  if (a2[36] > 0x64u)
  {
    *(_QWORD *)a1 = "rc_2pass_vbr_bias_pct out of range [..100]";
    return 8;
  }
  v9 = a2[40];
  if (v9 > 1)
  {
    *(_QWORD *)a1 = "kf_mode out of range [VPX_KF_DISABLED..VPX_KF_AUTO]";
    return 8;
  }
  if (*(_DWORD *)(a1 + 208) >= 2u && a2[13])
  {
    *(_QWORD *)a1 = "rc_resize_allowed out of range [..0]";
    return 8;
  }
  if (a2[12] > 0x64u)
  {
    *(_QWORD *)a1 = "rc_dropframe_thresh out of range [..100]";
    return 8;
  }
  if (a2[16] > 0x64u)
  {
    *(_QWORD *)a1 = "rc_resize_up_thresh out of range [..100]";
    return 8;
  }
  if (a2[17] > 0x64u)
  {
    *(_QWORD *)a1 = "rc_resize_down_thresh out of range [..100]";
    return 8;
  }
  if (a2[10])
  {
    *(_QWORD *)a1 = "g_pass out of range [VPX_RC_ONE_PASS..VPX_RC_ONE_PASS]";
    return 8;
  }
  if (v9)
  {
    v10 = a2[41];
    if (v10)
    {
      if (v10 != a2[42])
      {
        *(_QWORD *)a1 = "kf_min_dist not supported in auto mode, use 0 or kf_max_dist instead.";
        return 8;
      }
    }
  }
  if (a3[3] != (a3[3] != 0))
  {
    *(_QWORD *)a1 = "enable_auto_alt_ref expected BOOLean";
    return 8;
  }
  if ((a3[2] + 16) > 0x20)
  {
    *(_QWORD *)a1 = "cpu_used out of range [-16..16]";
    return 8;
  }
  if (a3[4] > 6u)
  {
    *(_QWORD *)a1 = "noise_sensitivity out of range [..6]";
    return 8;
  }
  if (a3[7] > 3u)
  {
    *(_QWORD *)a1 = "token_partitions out of range [VP8_ONE_TOKENPARTITION..VP8_EIGHT_TOKENPARTITION]";
    return 8;
  }
  if (a3[5] > 7u)
  {
    *(_QWORD *)a1 = "Sharpness out of range [..7]";
    return 8;
  }
  if (a3[8] > 0xFu)
  {
    *(_QWORD *)a1 = "arnr_max_frames out of range [0..15]";
    return 8;
  }
  if (a3[9] > 6u)
  {
    *(_QWORD *)a1 = "arnr_strength out of range [..6]";
    return 8;
  }
  if ((a3[10] - 1) > 2)
  {
    *(_QWORD *)a1 = "arnr_type out of range [1..3]";
    return 8;
  }
  v11 = a3[12];
  if (v11 > 0x3F)
  {
    *(_QWORD *)a1 = "cq_level out of range [0..63]";
    return 8;
  }
  if (a3[15] > 2u)
  {
    *(_QWORD *)a1 = "screen_content_mode out of range [..2]";
    return 8;
  }
  if (a4)
  {
    if ((v8 & 0xFFFFFFFE) == 2)
    {
      v7 = "cq_level out of range [cfg->rc_min_quantizer..cfg->rc_max_quantizer]";
      if (v11 < v5 || v11 > v4)
      {
LABEL_10:
        *(_QWORD *)a1 = v7;
        return 8;
      }
    }
  }
  v12 = a2[54];
  v13 = v12 - 1;
  if (v12 - 1 > 4)
  {
    *(_QWORD *)a1 = "ts_number_layers out of range [1..5]";
    return 8;
  }
  if (v12 < 2)
    goto LABEL_97;
  if (a2[65] > 0x10u)
  {
    *(_QWORD *)a1 = "ts_periodicity out of range [..16]";
    return 8;
  }
  v14 = a2[56];
  if (v14 <= a2[55] && a2[28])
  {
    *(_QWORD *)a1 = "ts_target_bitrate entries are not strictly increasing";
    return 8;
  }
  if (v12 != 2)
  {
    v15 = a2[57];
    if (v15 <= v14 && a2[28])
    {
      *(_QWORD *)a1 = "ts_target_bitrate entries are not strictly increasing";
      return 8;
    }
    if (v12 != 3)
    {
      v16 = a2[58];
      if (v16 <= v15 && a2[28])
      {
        *(_QWORD *)a1 = "ts_target_bitrate entries are not strictly increasing";
        return 8;
      }
      if (v12 != 4 && a2[59] <= v16 && a2[28])
      {
        *(_QWORD *)a1 = "ts_target_bitrate entries are not strictly increasing";
        return 8;
      }
    }
  }
  if (a2[v13 + 60] != 1)
  {
    *(_QWORD *)a1 = "ts_rate_decimator[cfg->ts_number_layers - 1] out of range [1..1]";
    return 8;
  }
  v17 = v12 - 3;
  v7 = "ts_rate_decimator factors are not powers of 2";
  while (1)
  {
    v18 = v17 + 1;
    if (v17 == -1)
      break;
    v19 = a2[v17-- + 60];
    if (v19 != 2 * a2[v18 + 60])
      goto LABEL_10;
  }
  if (a2[66] <= v13)
  {
LABEL_97:
    if (a2[95] > 1u)
    {
      *(_QWORD *)a1 = "use_vizier_rc_params out of range [0..1]";
      return 8;
    }
    else if ((a2[97] - 1) > 0x3E7)
    {
      *(_QWORD *)a1 = "active_wq_factor.den out of range [1..1000]";
      return 8;
    }
    else if ((a2[99] - 1) > 0x3E7)
    {
      *(_QWORD *)a1 = "err_per_mb_factor.den out of range [1..1000]";
      return 8;
    }
    else if ((a2[101] - 1) > 0x3E7)
    {
      *(_QWORD *)a1 = "sr_default_decay_limit.den out of range [1..1000]";
      return 8;
    }
    else if ((a2[103] - 1) > 0x3E7)
    {
      *(_QWORD *)a1 = "sr_diff_factor.den out of range [1..1000]";
      return 8;
    }
    else if ((a2[105] - 1) > 0x3E7)
    {
      *(_QWORD *)a1 = "kf_err_per_mb_factor.den out of range [1..1000]";
      return 8;
    }
    else if ((a2[107] - 1) > 0x3E7)
    {
      *(_QWORD *)a1 = "kf_frame_min_boost_factor.den out of range [1..1000]";
      return 8;
    }
    else if ((a2[111] - 1) > 0x3E7)
    {
      *(_QWORD *)a1 = "kf_frame_max_boost_subs_factor.den out of range [1..1000]";
      return 8;
    }
    else if ((a2[113] - 1) > 0x3E7)
    {
      *(_QWORD *)a1 = "kf_max_total_boost_factor.den out of range [1..1000]";
      return 8;
    }
    else if ((a2[115] - 1) > 0x3E7)
    {
      *(_QWORD *)a1 = "gf_max_total_boost_factor.den out of range [1..1000]";
      return 8;
    }
    else if ((a2[117] - 1) > 0x3E7)
    {
      *(_QWORD *)a1 = "gf_frame_max_boost_factor.den out of range [1..1000]";
      return 8;
    }
    else if ((a2[119] - 1) > 0x3E7)
    {
      *(_QWORD *)a1 = "zm_factor.den out of range [1..1000]";
      return 8;
    }
    else if ((a2[121] - 1) > 0x3E7)
    {
      *(_QWORD *)a1 = "rd_mult_inter_qp_fac.den out of range [1..1000]";
      return 8;
    }
    else if ((a2[123] - 1) > 0x3E7)
    {
      *(_QWORD *)a1 = "rd_mult_arf_qp_fac.den out of range [1..1000]";
      return 8;
    }
    else if ((a2[125] - 1) >= 0x3E8)
    {
      *(_QWORD *)a1 = "rd_mult_key_qp_fac.den out of range [1..1000]";
      return 8;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *(_QWORD *)a1 = "ts_layer_id[i] out of range [..cfg->ts_number_layers - 1]";
    return 8;
  }
}

double set_vp8e_config(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  _BOOL4 v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  double result;
  int v25;

  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)a1 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 28);
  v4 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 36);
  switch(v4)
  {
    case 0:
      v5 = 2;
      goto LABEL_6;
    case 2:
      *(_DWORD *)(a1 + 48) = 5;
      break;
    case 1:
      v5 = 3;
LABEL_6:
      v6 = 0;
      v7 = 0;
      *(_DWORD *)(a1 + 48) = v5;
      goto LABEL_9;
  }
  v7 = *(_DWORD *)(a2 + 44);
  v6 = v7 != 0;
LABEL_9:
  *(_DWORD *)(a1 + 60) = v6;
  *(_DWORD *)(a1 + 64) = v7;
  v8 = *(_DWORD *)(a2 + 48);
  v9 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 156) = v8 != 0;
  *(_DWORD *)(a1 + 160) = v8;
  *(_DWORD *)(a1 + 144) = v9;
  *(int32x2_t *)(a1 + 148) = vrev64_s32(*(int32x2_t *)(a2 + 64));
  v10 = *(_DWORD *)(a2 + 72);
  if (v10 <= 3)
    *(_DWORD *)(a1 + 68) = v10;
  v11 = *(_DWORD *)(a2 + 112);
  if (v11 >= 0xF4240)
    v11 = 1000000;
  *(_DWORD *)(a1 + 20) = v11;
  *(_QWORD *)(a1 + 36) = *(_QWORD *)(a3 + 52);
  *(int32x2_t *)(a1 + 132) = vrev64_s32(*(int32x2_t *)(a2 + 116));
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a3 + 48);
  *(_DWORD *)(a1 + 128) = -1;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 124);
  v12 = *(unsigned int *)(a2 + 132);
  v13 = *(unsigned int *)(a2 + 136);
  v14 = *(unsigned int *)(a2 + 140);
  *(_QWORD *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 120) = v12;
  *(_QWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 152);
  if (*(_DWORD *)(a2 + 160) == 1)
  {
    v15 = *(_DWORD *)(a2 + 168);
    v16 = *(_DWORD *)(a2 + 164) != v15;
  }
  else
  {
    v16 = 0;
    v15 = *(_DWORD *)(a2 + 168);
  }
  *(_DWORD *)(a1 + 52) = v16;
  *(_DWORD *)(a1 + 56) = v15;
  v17 = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 252) = v17;
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 260);
  if (v17 >= 2)
  {
    v18 = *(_OWORD *)(a2 + 220);
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 236);
    *(_OWORD *)(a1 + 256) = v18;
    v19 = *(_OWORD *)(a2 + 240);
    *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 320) = v19;
    v20 = *(_OWORD *)(a2 + 264);
    v21 = *(_OWORD *)(a2 + 280);
    v22 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 420) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 436) = v22;
    *(_OWORD *)(a1 + 388) = v20;
    *(_OWORD *)(a1 + 404) = v21;
  }
  if (a4)
  {
    *(_OWORD *)(a1 + 452) = *(_OWORD *)a4;
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a4 + 16);
  }
  v23 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a1 + 32) = v23;
  if (*(_DWORD *)(a2 + 40) == 1)
  {
    if (v23 <= 4)
      v23 = 4;
    *(_DWORD *)(a1 + 32) = v23;
  }
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a3 + 12);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a3 + 16);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a3 + 28);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)a3;
  result = *(double *)(a3 + 32);
  *(double *)(a1 + 212) = result;
  v25 = *(_DWORD *)(a3 + 44);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a1 + 248) = v25;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a3 + 60);
  return result;
}

uint64_t vp8e_set_reference(uint64_t a1, _QWORD *a2)
{
  int *v2;
  int32x4_t v3;
  int32x4_t v4;
  int v5;
  int *v6;
  int *v7;
  int v8;
  int32x4_t v10;
  _BYTE v11[32];
  _BYTE v12[32];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;

  v18 = a2 + 1;
  v2 = (int *)*a2;
  if (!*a2)
    return 8;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)&v12[16] = 0u;
  v13 = 0u;
  *(_OWORD *)&v11[16] = 0u;
  *(_OWORD *)v12 = 0u;
  v10 = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)&v12[8] = *(_OWORD *)(v2 + 14);
  *(_QWORD *)&v12[24] = *((_QWORD *)v2 + 9);
  v3.i64[0] = *((_QWORD *)v2 + 4);
  v3.i64[1] = v3.i64[0];
  v4.i64[0] = 0x100000001;
  v4.i64[1] = 0x100000001;
  v10 = v3;
  *(uint32x4_t *)&v11[4] = vshrq_n_u32((uint32x4_t)vaddq_s32(v3, v4), 1uLL);
  v5 = v2[23];
  *(_DWORD *)v11 = v2[22];
  *(_DWORD *)&v11[20] = v5;
  DWORD2(v14) = (*(_DWORD *)v11 - v2[5]) >> 1;
  v6 = *(int **)(a1 + 1296);
  v7 = v6 + 27637;
  v8 = *v2;
  switch(v8)
  {
    case 4:
      v7 = v6 + 27639;
      break;
    case 2:
      v7 = v6 + 27638;
      break;
    case 1:
      break;
    default:
      return 0;
  }
  vp8_yv12_copy_frame_c(v10.i32, (uint64_t)&v6[40 * *v7 + 27472]);
  return 0;
}

uint64_t vp8e_get_reference(uint64_t a1, _QWORD *a2)
{
  int *v2;
  int32x4_t v3;
  int32x4_t v4;
  int v5;
  int *v6;
  int *v7;
  int v8;
  int32x4_t v10;
  _BYTE v11[32];
  _BYTE v12[32];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;

  v18 = a2 + 1;
  v2 = (int *)*a2;
  if (!*a2)
    return 8;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)&v12[16] = 0u;
  v13 = 0u;
  *(_OWORD *)&v11[16] = 0u;
  *(_OWORD *)v12 = 0u;
  v10 = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)&v12[8] = *(_OWORD *)(v2 + 14);
  *(_QWORD *)&v12[24] = *((_QWORD *)v2 + 9);
  v3.i64[0] = *((_QWORD *)v2 + 4);
  v3.i64[1] = v3.i64[0];
  v4.i64[0] = 0x100000001;
  v4.i64[1] = 0x100000001;
  v10 = v3;
  *(uint32x4_t *)&v11[4] = vshrq_n_u32((uint32x4_t)vaddq_s32(v3, v4), 1uLL);
  v5 = v2[23];
  *(_DWORD *)v11 = v2[22];
  *(_DWORD *)&v11[20] = v5;
  DWORD2(v14) = (*(_DWORD *)v11 - v2[5]) >> 1;
  v6 = *(int **)(a1 + 1296);
  v7 = v6 + 27637;
  v8 = *v2;
  switch(v8)
  {
    case 4:
      v7 = v6 + 27639;
      break;
    case 2:
      v7 = v6 + 27638;
      break;
    case 1:
      break;
    default:
      return 0;
  }
  vp8_yv12_copy_frame_c(&v6[40 * *v7 + 27472], (uint64_t)&v10);
  return 0;
}

uint64_t vp8e_set_previewpp(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;

  v2 = *a2;
  if (!*a2)
    return 8;
  result = 0;
  v5 = *v2;
  *(_DWORD *)(a1 + 1468) = *((_DWORD *)v2 + 2);
  *(_QWORD *)(a1 + 1460) = v5;
  return result;
}

uint64_t vp8e_set_frame_flags(_QWORD *a1, int *a2)
{
  uint64_t v2;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int *v10;

  v2 = *a2;
  a1[1291] = v2;
  if ((~(_DWORD)v2 & 0x480000) == 0 || (~(_DWORD)v2 & 0x1800000) == 0)
  {
    *a1 = "Conflicting flags.";
    return 8;
  }
  else
  {
    if ((v2 & 0x230000) != 0)
    {
      if ((v2 & 0x10000) != 0)
        v5 = 6;
      else
        v5 = 7;
      if ((v2 & 0x20000) != 0)
        v5 &= 5u;
      if ((v2 & 0x200000) != 0)
        v5 &= 3u;
      *(_DWORD *)(a1[162] + 142876) = v5;
    }
    if ((v2 & 0x1CC0000) != 0)
    {
      if ((v2 & 0x40000) != 0)
        v6 = 6;
      else
        v6 = 7;
      if ((v2 & 0x400000) != 0)
        v6 &= 5u;
      if ((v2 & 0x800000) != 0)
        v7 = v6 & 3;
      else
        v7 = v6;
      v8 = a1[162];
      v9 = (_DWORD *)(v8 + 180176);
      v10 = (unsigned int *)(v8 + 111568);
      v10[1] = 0;
      v10[2] = 0;
      *v10 = v7 & 1;
      if ((v7 & 2) != 0)
        v10[1] = 1;
      if (v7 >= 4)
        v10[2] = 1;
      *v9 = 1;
    }
    if ((v2 & 0x100000) != 0)
      *(_DWORD *)(a1[162] + 111588) = 0;
    return 0;
  }
}

uint64_t vp8e_set_temporal_layer_id(uint64_t a1, int *a2)
{
  int v2;
  uint64_t result;

  v2 = *a2;
  if (*a2 < 0 || v2 >= *(_DWORD *)(a1 + 432))
    return 8;
  result = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 1296) + 143132) = v2;
  return result;
}

uint64_t vp8e_set_roi_map(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  if (!*a2)
    return 8;
  v2 = *a2;
  return 8
       * (vp8_set_roimap(*(_QWORD *)(a1 + 1296), *(const void **)(v2 + 8), *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), (unsigned int *)(v2 + 24), (int32x4_t *)(v2 + 56), (_DWORD *)(v2 + 152)) != 0);
}

uint64_t vp8e_set_activemap(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 1296);
  v4 = *(_DWORD *)(v2 + 8);
  if (*(_DWORD *)(v3 + 111076) != v4)
    return 8;
  v5 = *(_DWORD *)(v2 + 12);
  if (*(_DWORD *)(v3 + 111080) != v5)
    return 8;
  v6 = v3 + 139264;
  v7 = v6 + 3808;
  if (*(_QWORD *)v2)
  {
    memcpy(*(void **)v7, *(const void **)v2, (v5 * v4));
    result = 0;
    *(_DWORD *)(v7 + 8) = 1;
  }
  else
  {
    result = 0;
    *(_DWORD *)(v6 + 3816) = 0;
  }
  return result;
}

uint64_t vp8e_set_scalemode(uint64_t a1, int **a2)
{
  int *v2;
  int v3;
  unsigned int v4;
  _DWORD *v5;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *v2;
  if (*v2 > 3)
    return 8;
  v4 = v2[1];
  v5 = (_DWORD *)(*(_QWORD *)(a1 + 1296) + 109864);
  *v5 = v3;
  if (v4 > 3)
    return 8;
  v5[1] = v4;
  *(_DWORD *)(a1 + 1456) |= 1u;
  return 0;
}

uint64_t set_cpu_used(uint64_t a1, int *a2)
{
  __int128 v3;
  __int128 v4;
  int v5;
  const void *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v11 = *(_OWORD *)(a1 + 720);
  v12 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v13 = *(_OWORD *)(a1 + 752);
  v14 = v4;
  __dst[0] = a2 + 2;
  v5 = *a2;
  if (*a2 >= 16)
    v5 = 16;
  if (v5 <= -16)
    v5 = -16;
  DWORD2(v11) = v5;
  v6 = (const void *)(a1 + 216);
  v7 = validate_config(a1, (_DWORD *)(a1 + 216), &v11, 0);
  if (!(_DWORD)v7)
  {
    v8 = v12;
    *(_OWORD *)(a1 + 720) = v11;
    *(_OWORD *)(a1 + 736) = v8;
    v9 = v14;
    *(_OWORD *)(a1 + 752) = v13;
    *(_OWORD *)(a1 + 768) = v9;
    memcpy(__dst, v6, sizeof(__dst));
    v15[0] = v11;
    v15[1] = v12;
    v15[2] = v13;
    v15[3] = v14;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v15, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v7;
}

uint64_t set_noise_sensitivity(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v10 = *(_OWORD *)(a1 + 720);
  v11 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v12 = *(_OWORD *)(a1 + 752);
  v13 = v4;
  __dst[0] = a2 + 2;
  LODWORD(v11) = *a2;
  v5 = (const void *)(a1 + 216);
  v6 = validate_config(a1, (_DWORD *)(a1 + 216), &v10, 0);
  if (!(_DWORD)v6)
  {
    v7 = v11;
    *(_OWORD *)(a1 + 720) = v10;
    *(_OWORD *)(a1 + 736) = v7;
    v8 = v13;
    *(_OWORD *)(a1 + 752) = v12;
    *(_OWORD *)(a1 + 768) = v8;
    memcpy(__dst, v5, sizeof(__dst));
    v14[0] = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v14, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v6;
}

uint64_t set_enable_auto_alt_ref(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v10 = *(_OWORD *)(a1 + 720);
  v11 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v12 = *(_OWORD *)(a1 + 752);
  v13 = v4;
  __dst[0] = a2 + 2;
  HIDWORD(v10) = *a2;
  v5 = (const void *)(a1 + 216);
  v6 = validate_config(a1, (_DWORD *)(a1 + 216), &v10, 0);
  if (!(_DWORD)v6)
  {
    v7 = v11;
    *(_OWORD *)(a1 + 720) = v10;
    *(_OWORD *)(a1 + 736) = v7;
    v8 = v13;
    *(_OWORD *)(a1 + 752) = v12;
    *(_OWORD *)(a1 + 768) = v8;
    memcpy(__dst, v5, sizeof(__dst));
    v14[0] = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v14, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v6;
}

uint64_t set_sharpness(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v10 = *(_OWORD *)(a1 + 720);
  v11 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v12 = *(_OWORD *)(a1 + 752);
  v13 = v4;
  __dst[0] = a2 + 2;
  DWORD1(v11) = *a2;
  v5 = (const void *)(a1 + 216);
  v6 = validate_config(a1, (_DWORD *)(a1 + 216), &v10, 0);
  if (!(_DWORD)v6)
  {
    v7 = v11;
    *(_OWORD *)(a1 + 720) = v10;
    *(_OWORD *)(a1 + 736) = v7;
    v8 = v13;
    *(_OWORD *)(a1 + 752) = v12;
    *(_OWORD *)(a1 + 768) = v8;
    memcpy(__dst, v5, sizeof(__dst));
    v14[0] = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v14, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v6;
}

uint64_t set_static_thresh(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v10 = *(_OWORD *)(a1 + 720);
  v11 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v12 = *(_OWORD *)(a1 + 752);
  v13 = v4;
  __dst[0] = a2 + 2;
  DWORD2(v11) = *a2;
  v5 = (const void *)(a1 + 216);
  v6 = validate_config(a1, (_DWORD *)(a1 + 216), &v10, 0);
  if (!(_DWORD)v6)
  {
    v7 = v11;
    *(_OWORD *)(a1 + 720) = v10;
    *(_OWORD *)(a1 + 736) = v7;
    v8 = v13;
    *(_OWORD *)(a1 + 752) = v12;
    *(_OWORD *)(a1 + 768) = v8;
    memcpy(__dst, v5, sizeof(__dst));
    v14[0] = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v14, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v6;
}

uint64_t set_token_partitions(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v10 = *(_OWORD *)(a1 + 720);
  v11 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v12 = *(_OWORD *)(a1 + 752);
  v13 = v4;
  __dst[0] = a2 + 2;
  HIDWORD(v11) = *a2;
  v5 = (const void *)(a1 + 216);
  v6 = validate_config(a1, (_DWORD *)(a1 + 216), &v10, 0);
  if (!(_DWORD)v6)
  {
    v7 = v11;
    *(_OWORD *)(a1 + 720) = v10;
    *(_OWORD *)(a1 + 736) = v7;
    v8 = v13;
    *(_OWORD *)(a1 + 752) = v12;
    *(_OWORD *)(a1 + 768) = v8;
    memcpy(__dst, v5, sizeof(__dst));
    v14[0] = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v14, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v6;
}

uint64_t get_quantizer(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!*a2)
    return 8;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(*(_QWORD *)(a1 + 1296) + 111104);
  return result;
}

uint64_t get_quantizer64(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = 0;
  do
  {
    v3 = v2 + 1;
    if (q_trans[v2] >= *(_DWORD *)(*(_QWORD *)(a1 + 1296) + 111104))
      break;
  }
  while (v2++ != 63);
  result = 0;
  *(_DWORD *)*a2 = v3 - 1;
  return result;
}

uint64_t set_arnr_max_frames(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v10 = *(_OWORD *)(a1 + 720);
  v11 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v12 = *(_OWORD *)(a1 + 752);
  v13 = v4;
  __dst[0] = a2 + 2;
  LODWORD(v12) = *a2;
  v5 = (const void *)(a1 + 216);
  v6 = validate_config(a1, (_DWORD *)(a1 + 216), &v10, 0);
  if (!(_DWORD)v6)
  {
    v7 = v11;
    *(_OWORD *)(a1 + 720) = v10;
    *(_OWORD *)(a1 + 736) = v7;
    v8 = v13;
    *(_OWORD *)(a1 + 752) = v12;
    *(_OWORD *)(a1 + 768) = v8;
    memcpy(__dst, v5, sizeof(__dst));
    v14[0] = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v14, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v6;
}

uint64_t set_arnr_strength(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v10 = *(_OWORD *)(a1 + 720);
  v11 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v12 = *(_OWORD *)(a1 + 752);
  v13 = v4;
  __dst[0] = a2 + 2;
  DWORD1(v12) = *a2;
  v5 = (const void *)(a1 + 216);
  v6 = validate_config(a1, (_DWORD *)(a1 + 216), &v10, 0);
  if (!(_DWORD)v6)
  {
    v7 = v11;
    *(_OWORD *)(a1 + 720) = v10;
    *(_OWORD *)(a1 + 736) = v7;
    v8 = v13;
    *(_OWORD *)(a1 + 752) = v12;
    *(_OWORD *)(a1 + 768) = v8;
    memcpy(__dst, v5, sizeof(__dst));
    v14[0] = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v14, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v6;
}

uint64_t set_arnr_type(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v10 = *(_OWORD *)(a1 + 720);
  v11 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v12 = *(_OWORD *)(a1 + 752);
  v13 = v4;
  __dst[0] = a2 + 2;
  DWORD2(v12) = *a2;
  v5 = (const void *)(a1 + 216);
  v6 = validate_config(a1, (_DWORD *)(a1 + 216), &v10, 0);
  if (!(_DWORD)v6)
  {
    v7 = v11;
    *(_OWORD *)(a1 + 720) = v10;
    *(_OWORD *)(a1 + 736) = v7;
    v8 = v13;
    *(_OWORD *)(a1 + 752) = v12;
    *(_OWORD *)(a1 + 768) = v8;
    memcpy(__dst, v5, sizeof(__dst));
    v14[0] = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v14, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v6;
}

uint64_t set_tuning(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v10 = *(_OWORD *)(a1 + 720);
  v11 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v12 = *(_OWORD *)(a1 + 752);
  v13 = v4;
  __dst[0] = a2 + 2;
  HIDWORD(v12) = *a2;
  v5 = (const void *)(a1 + 216);
  v6 = validate_config(a1, (_DWORD *)(a1 + 216), &v10, 0);
  if (!(_DWORD)v6)
  {
    v7 = v11;
    *(_OWORD *)(a1 + 720) = v10;
    *(_OWORD *)(a1 + 736) = v7;
    v8 = v13;
    *(_OWORD *)(a1 + 752) = v12;
    *(_OWORD *)(a1 + 768) = v8;
    memcpy(__dst, v5, sizeof(__dst));
    v14[0] = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v14, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v6;
}

uint64_t set_cq_level(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v10 = *(_OWORD *)(a1 + 720);
  v11 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v12 = *(_OWORD *)(a1 + 752);
  v13 = v4;
  __dst[0] = a2 + 2;
  LODWORD(v13) = *a2;
  v5 = (const void *)(a1 + 216);
  v6 = validate_config(a1, (_DWORD *)(a1 + 216), &v10, 0);
  if (!(_DWORD)v6)
  {
    v7 = v11;
    *(_OWORD *)(a1 + 720) = v10;
    *(_OWORD *)(a1 + 736) = v7;
    v8 = v13;
    *(_OWORD *)(a1 + 752) = v12;
    *(_OWORD *)(a1 + 768) = v8;
    memcpy(__dst, v5, sizeof(__dst));
    v14[0] = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v14, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v6;
}

uint64_t set_rc_max_intra_bitrate_pct(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v10 = *(_OWORD *)(a1 + 720);
  v11 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v12 = *(_OWORD *)(a1 + 752);
  v13 = v4;
  __dst[0] = a2 + 2;
  DWORD1(v13) = *a2;
  v5 = (const void *)(a1 + 216);
  v6 = validate_config(a1, (_DWORD *)(a1 + 216), &v10, 0);
  if (!(_DWORD)v6)
  {
    v7 = v11;
    *(_OWORD *)(a1 + 720) = v10;
    *(_OWORD *)(a1 + 736) = v7;
    v8 = v13;
    *(_OWORD *)(a1 + 752) = v12;
    *(_OWORD *)(a1 + 768) = v8;
    memcpy(__dst, v5, sizeof(__dst));
    v14[0] = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v14, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v6;
}

uint64_t set_screen_content_mode(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v10 = *(_OWORD *)(a1 + 720);
  v11 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v12 = *(_OWORD *)(a1 + 752);
  v13 = v4;
  __dst[0] = a2 + 2;
  HIDWORD(v13) = *a2;
  v5 = (const void *)(a1 + 216);
  v6 = validate_config(a1, (_DWORD *)(a1 + 216), &v10, 0);
  if (!(_DWORD)v6)
  {
    v7 = v11;
    *(_OWORD *)(a1 + 720) = v10;
    *(_OWORD *)(a1 + 736) = v7;
    v8 = v13;
    *(_OWORD *)(a1 + 752) = v12;
    *(_OWORD *)(a1 + 768) = v8;
    memcpy(__dst, v5, sizeof(__dst));
    v14[0] = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v14, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v6;
}

uint64_t ctrl_set_rc_gf_cbr_boost_pct(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  const void *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _QWORD __dst[63];

  v3 = *(_OWORD *)(a1 + 736);
  v10 = *(_OWORD *)(a1 + 720);
  v11 = v3;
  v4 = *(_OWORD *)(a1 + 768);
  v12 = *(_OWORD *)(a1 + 752);
  v13 = v4;
  __dst[0] = a2 + 2;
  DWORD2(v13) = *a2;
  v5 = (const void *)(a1 + 216);
  v6 = validate_config(a1, (_DWORD *)(a1 + 216), &v10, 0);
  if (!(_DWORD)v6)
  {
    v7 = v11;
    *(_OWORD *)(a1 + 720) = v10;
    *(_OWORD *)(a1 + 736) = v7;
    v8 = v13;
    *(_OWORD *)(a1 + 752) = v12;
    *(_OWORD *)(a1 + 768) = v8;
    memcpy(__dst, v5, sizeof(__dst));
    v14[0] = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    set_vp8e_config(a1 + 816, (uint64_t)__dst, (uint64_t)v14, 0);
    vp8_change_config(*(_QWORD *)(a1 + 1296), (int *)(a1 + 816));
  }
  return v6;
}

uint64_t ctrl_set_rtc_external_ratectrl(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 1296);
  if (*a2)
  {
    *(_DWORD *)(v2 + 143084) = 0;
    *(_QWORD *)(v2 + 180180) = 1;
  }
  return 0;
}

uint64_t vp8_init(_QWORD *a1)
{
  uint64_t result;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  _DWORD *v8;

  pthread_once(&once_lock_2, (void (*)(void))setup_rtcd_internal);
  pthread_once(&once_lock_7, (void (*)(void))setup_rtcd_internal_1);
  pthread_once(&once_lock_8, (void (*)(void))setup_rtcd_internal_2);
  if (a1[6])
    return 0;
  v3 = malloc_type_malloc(0x347uLL, 0x74AD08B5uLL);
  if (!v3)
    return 2;
  v4 = ((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 - 8) = v3;
  if (!v4)
    return 2;
  bzero((void *)(((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0), 0x330uLL);
  a1[6] = v4;
  *(_QWORD *)(v4 + 8) = a1[4];
  *(_DWORD *)(v4 + 228) = 16;
  *(_QWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 280) = 0;
  v5 = a1[5];
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 8);
    *(_QWORD *)(v4 + 216) = *(_QWORD *)v5;
    v7 = v4 + 216;
    *(_DWORD *)(v7 + 8) = v6;
    a1[5] = v7;
  }
  result = 0;
  v8 = (_DWORD *)a1[6];
  v8[175] = 0;
  v8[174] = v8[2] & 0x40000;
  return result;
}

uint64_t vp8_destroy(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 432);
  if (v2)
  {
    vp8_decoder_remove_threads(*(_QWORD *)(a1 + 432));
    vp8_de_alloc_frame_buffers(v2 + 4384);
    free(*(void **)(v2 - 8));
    *(_QWORD *)(a1 + 432) = 0;
  }
  free(*(void **)(a1 - 8));
  return 0;
}

uint64_t vp8_peek_si(_BYTE *a1, unsigned int a2, _DWORD *a3)
{
  int v3;
  int v4;

  if (!a2)
    return 8;
  a3[3] = 0;
  if (a2 < 0xA)
    return 5;
  if ((*a1 & 1) != 0)
    return 5;
  a3[3] = 1;
  if (a1[3] != 157 || a1[4] != 1 || a1[5] != 42)
    return 5;
  v3 = a1[6] | ((a1[7] & 0x3F) << 8);
  a3[1] = v3;
  v4 = a1[8] | ((a1[9] & 0x3F) << 8);
  a3[2] = v4;
  if (v4 && v3)
    return 0;
  a3[1] = 0;
  a3[2] = 0;
  return 7;
}

uint64_t vp8_get_si(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(a1 + 228);
  *(_DWORD *)a2 = 16;
  return 0;
}

uint64_t vp8_decode(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  char v10;
  BOOL v11;
  unsigned int v12;
  void (*v13)(_QWORD, _QWORD, _QWORD *, uint64_t);
  uint64_t v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  unsigned int *v24;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _DWORD *v53;
  int v54;
  int v55;
  int v56;
  uint64_t v58;
  int v59;
  BOOL v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v73;
  int v74;
  unsigned int decoder_instances;
  _QWORD v76[2];
  int v77;
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v74 = 0;
  v6 = *(_DWORD *)(a1 + 696);
  if (a2 || (result = 0, v6 | a3))
  {
    decoder_instances = 0;
    v8 = *(unsigned int *)(a1 + 700);
    if ((_DWORD)v8)
    {
      if (a2)
        v9 = 0;
      else
        v9 = a3 == 0;
      v10 = v9;
      if (v6)
        goto LABEL_11;
    }
    else
    {
      *(_QWORD *)(a1 + 768) = 0;
      *(_OWORD *)(a1 + 736) = 0u;
      *(_OWORD *)(a1 + 752) = 0u;
      *(_OWORD *)(a1 + 704) = 0u;
      *(_OWORD *)(a1 + 720) = 0u;
      *(_DWORD *)(a1 + 808) = 0;
      *(_OWORD *)(a1 + 776) = 0u;
      *(_OWORD *)(a1 + 792) = 0u;
      if (a2)
        v11 = 0;
      else
        v11 = a3 == 0;
      v10 = v11;
      if (v6)
      {
LABEL_11:
        if ((v10 & 1) == 0)
        {
          if (v8 < 9)
          {
            *(_QWORD *)(a1 + 696 + 8 * v8 + 8) = a2;
            *(_DWORD *)(a1 + 696 + 4 * v8 + 80) = a3;
            *(_DWORD *)(a1 + 700) = v8 + 1;
          }
          else
          {
            *(_DWORD *)(a1 + 700) = 0;
            return 8;
          }
          return decoder_instances;
        }
        goto LABEL_23;
      }
    }
    if ((v10 & 1) != 0)
      return decoder_instances;
    *(_QWORD *)(a1 + 704) = a2;
    *(_DWORD *)(a1 + 776) = a3;
    *(_DWORD *)(a1 + 700) = 1;
LABEL_23:
    HIDWORD(v73) = *(_DWORD *)(a1 + 232);
    LODWORD(v73) = *(_DWORD *)(a1 + 236);
    v12 = *(_DWORD *)(a1 + 776);
    if (!v12)
    {
      decoder_instances = 8;
      goto LABEL_42;
    }
    v13 = *(void (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(a1 + 272);
    if (v13)
    {
      if (v12 >= 0xA)
        v14 = 10;
      else
        v14 = v12;
      v13(*(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 704), v76, v14);
      v15 = v76;
      *(_DWORD *)(a1 + 240) = 0;
      if (v12 < 0xA)
        goto LABEL_40;
    }
    else
    {
      v15 = *(_BYTE **)(a1 + 704);
      *(_DWORD *)(a1 + 240) = 0;
      if (v12 < 0xA)
        goto LABEL_40;
    }
    if ((*v15 & 1) == 0)
    {
      *(_DWORD *)(a1 + 240) = 1;
      if (v15[3] == 157 && v15[4] == 1 && v15[5] == 42)
      {
        v16 = v15[6] | ((v15[7] & 0x3F) << 8);
        *(_DWORD *)(a1 + 232) = v16;
        v17 = v15[8] | ((v15[9] & 0x3F) << 8);
        *(_DWORD *)(a1 + 236) = v17;
        if (v17 && v16)
        {
          decoder_instances = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 232) = 0;
          decoder_instances = 7;
        }
        goto LABEL_42;
      }
    }
LABEL_40:
    decoder_instances = 5;
    if (!*(_DWORD *)(a1 + 240))
      decoder_instances = 0;
LABEL_42:
    if (*(_DWORD *)(a1 + 244))
    {
      if (!decoder_instances && !v73 && !*(_DWORD *)(a1 + 236) && !*(_DWORD *)(a1 + 232))
      {
        decoder_instances = 7;
        vpx_internal_error(*(_QWORD *)(a1 + 432) + 4384, 7, "Keyframe / intra-only frame required to reset decoder state");
      }
    }
    else if (!*(_DWORD *)(a1 + 240))
    {
      decoder_instances = 5;
    }
    if (*(_QWORD *)(a1 + 232) != __PAIR64__(v73, HIDWORD(v73)))
      v74 = 1;
    if (!decoder_instances && *(_DWORD *)(a1 + 248))
    {
      v19 = *(_DWORD **)(a1 + 432);
      if (setjmp(v19 + 1119))
      {
        v19[1118] = 0;
        vp8_decoder_remove_threads((uint64_t)v19);
        return 1;
      }
      v19[1118] = 1;
      v19[2709] = *(_DWORD *)(a1 + 216);
      vp8_decoder_create_threads((uint64_t)v19);
      if (atomic_load(v19 + 2708))
        vp8mt_alloc_temp_buffers((uint64_t)v19, v19[1552], v19[1857]);
      *(_DWORD *)(a1 + 248) = 0;
      v19[1118] = 0;
    }
    v18 = *(_DWORD *)(a1 + 244);
    if (decoder_instances)
    {
      if (!v18)
        goto LABEL_55;
    }
    else if (!v18)
    {
      v76[0] = *(_QWORD *)(a1 + 232);
      v76[1] = 9;
      v20 = *(_QWORD *)(a1 + 8);
      v77 = *(_DWORD *)(a1 + 216);
      v78 = v20 & 0x20000;
      if (!*(_DWORD *)(a1 + 252) && (v20 & 0x10000) != 0)
      {
        *(_QWORD *)(a1 + 256) = 0x40000000BLL;
        *(_DWORD *)(a1 + 264) = 0;
      }
      decoder_instances = vp8_create_decoder_instances((_OWORD *)(a1 + 432), (uint64_t)v76);
      if (decoder_instances)
      {
        *(_QWORD *)(a1 + 232) = 0;
        v21 = *(_DWORD *)(a1 + 244);
      }
      else
      {
        *(_DWORD *)(a1 + 244) = 1;
        v21 = 1;
      }
      if (!v21)
      {
LABEL_55:
        if (!decoder_instances)
        {
LABEL_72:
          v23 = *(_QWORD *)(a1 + 432);
          v24 = (unsigned int *)(v23 + 4384);
          if (!v74)
          {
LABEL_87:
            if (setjmp((int *)(v23 + 4476)))
            {
              *(_DWORD *)(v23 + 4384 + 160 * *(int *)(v23 + 6900) + 2004) = 1;
              v58 = v23 + 4384 + 4 * *(int *)(v23 + 6896);
              v59 = *(_DWORD *)(v58 + 2496);
              v60 = __OFSUB__(v59, 1);
              v61 = v59 - 1;
              if (v61 < 0 == v60)
                *(_DWORD *)(v58 + 2496) = v61;
              *(_DWORD *)(v23 + 4472) = 0;
              if (*(_DWORD *)(v23 + 11008))
              {
                *(_QWORD *)(a1 + 232) = 0;
                *(_DWORD *)(a1 + 248) = 1;
              }
              v62 = *v24;
              if (*v24)
              {
                v63 = 0;
                if (*(_DWORD *)(v23 + 4388))
                  v63 = v23 + 4392;
                *(_QWORD *)a1 = v63;
              }
              return v62;
            }
            else
            {
              *(_DWORD *)(v23 + 4472) = 1;
              v64 = *(_OWORD *)(a1 + 696);
              v65 = *(_OWORD *)(a1 + 712);
              v66 = *(_OWORD *)(a1 + 744);
              *(_OWORD *)(v23 + 10744) = *(_OWORD *)(a1 + 728);
              *(_OWORD *)(v23 + 10760) = v66;
              *(_OWORD *)(v23 + 10712) = v64;
              *(_OWORD *)(v23 + 10728) = v65;
              v67 = *(_OWORD *)(a1 + 760);
              v68 = *(_OWORD *)(a1 + 776);
              v69 = *(_OWORD *)(a1 + 792);
              *(_QWORD *)(v23 + 10824) = *(_QWORD *)(a1 + 808);
              *(_OWORD *)(v23 + 10792) = v68;
              *(_OWORD *)(v23 + 10808) = v69;
              *(_OWORD *)(v23 + 10776) = v67;
              *(_DWORD *)(v23 + 11008) = 0;
              *(_QWORD *)(a1 + 688) = a4;
              if (vp8dx_receive_compressed_data(v23))
              {
                v70 = *v24;
                if (*v24)
                {
                  v71 = 0;
                  if (*(_DWORD *)(v23 + 4388))
                    v71 = v23 + 4392;
                  *(_QWORD *)a1 = v71;
                }
                decoder_instances = v70;
              }
              *(_DWORD *)(a1 + 700) = 0;
              *(_DWORD *)(v23 + 4472) = 0;
            }
            return decoder_instances;
          }
          *(_QWORD *)(v23 + 6208) = *(_QWORD *)(a1 + 232);
          if (setjmp((int *)(v23 + 4476)))
          {
            *(_DWORD *)(v23 + 4472) = 0;
            *(_QWORD *)(a1 + 232) = 0;
            return 0xFFFFFFFFLL;
          }
          *(_DWORD *)(v23 + 4472) = 1;
          if (*(int *)(v23 + 6208) <= 0)
          {
            *(_DWORD *)(v23 + 6208) = HIDWORD(v73);
            vpx_internal_error(v23 + 4384, 7, "Invalid frame width");
            if (*(int *)(v23 + 6212) > 0)
            {
LABEL_77:
              if (!atomic_load((unsigned int *)(v23 + 10832)))
              {
LABEL_79:
                if (vp8_alloc_frame_buffers(v23 + 4384, *(_DWORD *)(v23 + 6208), *(_DWORD *)(v23 + 6212)))
                  vpx_internal_error(v23 + 4384, 2, "Failed to allocate frame buffers");
                v26 = (__int128 *)(v23 + 6240 + 160 * *(int *)(v23 + 6900));
                v27 = *v26;
                *(_OWORD *)(v23 + 3568) = v26[1];
                *(_OWORD *)(v23 + 3552) = v27;
                v28 = v26[4];
                *(_OWORD *)(v23 + 3632) = v26[5];
                *(_OWORD *)(v23 + 3616) = v28;
                v29 = v26[2];
                *(_OWORD *)(v23 + 3600) = v26[3];
                *(_OWORD *)(v23 + 3584) = v29;
                v31 = v26[8];
                v30 = v26[9];
                v32 = v26[6];
                *(_OWORD *)(v23 + 3664) = v26[7];
                *(_OWORD *)(v23 + 3648) = v32;
                *(_OWORD *)(v23 + 3680) = v31;
                *(_OWORD *)(v23 + 3696) = v30;
                v33 = (_OWORD *)(v23 + 6240 + 160 * *(int *)(v23 + 6896));
                v34 = v33[1];
                *(_OWORD *)(v23 + 3712) = *v33;
                *(_OWORD *)(v23 + 3728) = v34;
                v36 = v33[4];
                v35 = v33[5];
                v37 = v33[3];
                *(_OWORD *)(v23 + 3744) = v33[2];
                *(_OWORD *)(v23 + 3760) = v37;
                v39 = v33[8];
                v38 = v33[9];
                v40 = v33[7];
                *(_OWORD *)(v23 + 3808) = v33[6];
                *(_OWORD *)(v23 + 3824) = v40;
                *(_OWORD *)(v23 + 3840) = v39;
                *(_OWORD *)(v23 + 3856) = v38;
                *(_OWORD *)(v23 + 3776) = v36;
                *(_OWORD *)(v23 + 3792) = v35;
                if (*(int *)(v23 + 10848) >= 1)
                {
                  v41 = *(_QWORD *)(v23 + 10928);
                  v42 = 0;
                  v43 = 0;
                  do
                  {
                    v44 = (_OWORD *)(v41 + v43);
                    v45 = (_OWORD *)(v23 + 160 * *(int *)(v23 + 6896));
                    v46 = v45[390];
                    v44[233] = v45[391];
                    v44[232] = v46;
                    v47 = v45[392];
                    v48 = v45[393];
                    v49 = v45[394];
                    v44[237] = v45[395];
                    v44[236] = v49;
                    v44[235] = v48;
                    v44[234] = v47;
                    v50 = v45[396];
                    v51 = v45[397];
                    v52 = v45[398];
                    v44[241] = v45[399];
                    v44[240] = v52;
                    v44[239] = v51;
                    v44[238] = v50;
                    v41 = *(_QWORD *)(v23 + 10928);
                    v53 = (_DWORD *)(v41 + v43);
                    v54 = *(_DWORD *)(v41 + v43 + 3728);
                    v53[544] = 0;
                    v53[558] = 4;
                    v53[572] = 8;
                    v53[586] = 12;
                    v53[600] = 4 * v54;
                    v53[614] = 4 * v54 + 4;
                    v53[628] = 4 * v54 + 8;
                    v53[642] = 4 * v54 + 12;
                    v53[656] = 8 * v54;
                    v53[670] = (8 * v54) | 4;
                    v53[684] = 8 * v54 + 8;
                    v53[698] = 8 * v54 + 12;
                    v54 *= 12;
                    v53[712] = v54;
                    v53[726] = v54 + 4;
                    v53[740] = v54 + 8;
                    v53[754] = v54 + 12;
                    v55 = *(_DWORD *)(v41 + v43 + 3748);
                    v53[768] = 0;
                    v53[824] = 0;
                    v53[782] = 4;
                    v53[838] = 4;
                    v53[796] = 4 * v55;
                    v53[852] = 4 * v55;
                    v56 = 4 * v55 + 4;
                    v53[810] = v56;
                    v53[866] = v56;
                    ++v42;
                    v43 += 4352;
                  }
                  while (v42 < *(int *)(v23 + 10848));
                }
                vp8_build_block_doffsets((_DWORD *)v23);
                if (atomic_load((unsigned int *)(v23 + 10832)))
                  vp8mt_alloc_temp_buffers(v23, *(_DWORD *)(v23 + 6208), 0);
                *(_DWORD *)(v23 + 4472) = 0;
                *(_DWORD *)(v23 + 6880) = 0;
                goto LABEL_87;
              }
LABEL_78:
              vp8mt_de_alloc_temp_buffers((_QWORD *)v23, *(_DWORD *)(v23 + 7428));
              goto LABEL_79;
            }
          }
          else if (*(int *)(v23 + 6212) > 0)
          {
            goto LABEL_77;
          }
          *(_DWORD *)(v23 + 6212) = v73;
          vpx_internal_error(v23 + 4384, 7, "Invalid frame height", v73);
          if (!atomic_load((unsigned int *)(v23 + 10832)))
            goto LABEL_79;
          goto LABEL_78;
        }
        return decoder_instances;
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 432) + 10992) = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(*(_QWORD *)(a1 + 432) + 11000) = *(_QWORD *)(a1 + 280);
    if (!decoder_instances)
      goto LABEL_72;
    return decoder_instances;
  }
  return result;
}

double vp8_get_frame(uint64_t a1, _QWORD *a2, int32x4_t a3, double a4, double a5, double a6, double a7, int8x16_t a8, int32x4_t a9, int8x16_t a10)
{
  uint64_t v11;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (!*a2)
  {
    v11 = *(_QWORD *)(a1 + 432);
    if (v11)
    {
      a3 = 0uLL;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v28 = 0u;
      v26 = 0u;
      memset(v27, 0, sizeof(v27));
      v24 = 0u;
      v25 = 0u;
      v20 = 0;
      v21 = 0;
      v23 = 0;
      v22 = 0;
      if ((*(_BYTE *)(a1 + 10) & 1) != 0)
      {
        a3.i64[0] = *(_QWORD *)(a1 + 256);
        v20 = a3.i64[0];
        LODWORD(v21) = *(_DWORD *)(a1 + 264);
      }
      if (*(_DWORD *)(v11 + 10964) != 1)
      {
        if (*(_DWORD *)(v11 + 7416))
        {
          *(_DWORD *)(v11 + 10964) = 1;
          if (!vp8_post_proc_frame(v11 + 4384, (uint64_t)&v24, (int *)&v20, a3, a4, a5, a6, a7, a8, a9, a10))
          {
            v13 = *(_QWORD *)(a1 + 688);
            *(_DWORD *)(a1 + 288) = 258;
            v15 = v24;
            v14 = DWORD1(v24);
            *(_DWORD *)(a1 + 304) = (DWORD1(v24) + 79) & 0xFFFFFFF0;
            v16 = v25;
            v17 = DWORD1(v26);
            *(_DWORD *)(a1 + 300) = v25;
            *(_DWORD *)(a1 + 320) = v15;
            *(_DWORD *)(a1 + 312) = v15;
            *(_DWORD *)(a1 + 324) = v14;
            *(_DWORD *)(a1 + 316) = v14;
            *(_QWORD *)(a1 + 328) = 0x100000001;
            a3.i64[0] = *((_QWORD *)&v27[0] + 1);
            *(_OWORD *)(a1 + 336) = *(_OWORD *)((char *)v27 + 8);
            v18 = *((_QWORD *)&v28 + 1);
            *(_QWORD *)(a1 + 352) = *((_QWORD *)&v27[1] + 1);
            *(_QWORD *)(a1 + 360) = 0;
            *(_DWORD *)(a1 + 368) = v16;
            *(_DWORD *)(a1 + 372) = v17;
            *(_DWORD *)(a1 + 376) = v17;
            *(_DWORD *)(a1 + 380) = v16;
            *(_DWORD *)(a1 + 308) = 8;
            *(_DWORD *)(a1 + 384) = 12;
            *(_QWORD *)(a1 + 392) = v13;
            *(_QWORD *)(a1 + 400) = v18;
            *(_QWORD *)(a1 + 408) = 0;
            *a2 = a1 + 288;
          }
        }
      }
    }
  }
  return *(double *)a3.i64;
}

uint64_t vp8_set_reference(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int32x4_t v3;
  int v4;
  int32x4_t v5;
  int32x4_t v7;
  _BYTE v8[32];
  _BYTE v9[32];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;

  v15 = a2 + 1;
  v2 = *a2;
  if (!*a2)
    return 8;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  *(_OWORD *)&v9[16] = 0u;
  v10 = 0u;
  *(_OWORD *)&v8[16] = 0u;
  *(_OWORD *)v9 = 0u;
  v7 = 0u;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)&v9[8] = *(_OWORD *)(v2 + 56);
  *(_QWORD *)&v9[24] = *(_QWORD *)(v2 + 72);
  v3.i64[0] = *(_QWORD *)(v2 + 32);
  v4 = *(_DWORD *)(v2 + 92);
  *(_DWORD *)v8 = *(_DWORD *)(v2 + 88);
  v5.i64[0] = 0x100000001;
  v5.i64[1] = 0x100000001;
  v3.i64[1] = v3.i64[0];
  v7 = v3;
  *(uint32x4_t *)&v8[4] = vshrq_n_u32((uint32x4_t)vaddq_s32(v3, v5), 1uLL);
  *(_DWORD *)&v8[20] = v4;
  DWORD2(v11) = (*(_DWORD *)v8 - v3.i32[0]) >> 1;
  return vp8dx_set_reference(*(_DWORD **)(a1 + 432), *(_DWORD *)v2, v7.i32);
}

uint64_t vp8_get_reference(uint64_t a1, _QWORD *a2)
{
  int *v2;
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  _OWORD v14[3];
  _BYTE v15[32];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;

  v21 = a2 + 1;
  v2 = (int *)*a2;
  if (!*a2)
    return 8;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  *(_OWORD *)&v15[16] = 0u;
  v16 = 0u;
  *(_OWORD *)v15 = 0u;
  memset(v14, 0, sizeof(v14));
  v3 = v2[8];
  v4 = v2[9];
  *(_OWORD *)&v15[8] = *(_OWORD *)(v2 + 14);
  *(_QWORD *)&v15[24] = *((_QWORD *)v2 + 9);
  LODWORD(v14[0]) = v3;
  HIDWORD(v14[1]) = (v3 + 1) >> 1;
  LODWORD(v14[2]) = (v4 + 1) >> 1;
  *(_QWORD *)((char *)&v14[1] + 4) = *(_QWORD *)((char *)&v14[1] + 12);
  *(_QWORD *)&v5 = __PAIR64__(v3, v4);
  DWORD2(v5) = v4;
  v6 = v2[23];
  HIDWORD(v5) = v2[22];
  *(_OWORD *)((char *)v14 + 4) = v5;
  DWORD1(v14[2]) = v6;
  DWORD2(v17) = (HIDWORD(v5) - v3) >> 1;
  v7 = *(_QWORD *)(a1 + 432);
  v8 = *v2;
  v9 = (unsigned int *)(v7 + 4384);
  switch(v8)
  {
    case 4:
      v10 = 6908;
      break;
    case 2:
      v10 = 6904;
      break;
    case 1:
      v10 = 6900;
      break;
    default:
      vpx_internal_error(v7 + 4384, 1, "Invalid reference frame", v14[0], v14[1], v14[2], *(_OWORD *)v15, *(_OWORD *)&v15[16], v16, v17, v18, v19, v20);
      return *v9;
  }
  v12 = *(_DWORD *)(v7 + v10);
  v13 = v7 + 160 * v12;
  if (*(_DWORD *)(v13 + 6244) == v4
    && *(_DWORD *)(v13 + 6240) == v3
    && *(_DWORD *)(v7 + 160 * v12 + 6264) == (v4 + 1) >> 1
    && *(_DWORD *)(v7 + 160 * v12 + 6260) == (v3 + 1) >> 1)
  {
    vp8_yv12_copy_frame_c((int *)(v13 + 6240), (uint64_t)v14);
    return *v9;
  }
  vpx_internal_error(v7 + 4384, 1, "Incorrect buffer dimensions", v14[0], v14[1], v14[2], *(_OWORD *)v15, *(_OWORD *)&v15[16], v16, v17, v18, v19, v20);
  return *v9;
}

uint64_t vp8_set_postproc(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;

  v2 = *a2;
  if (!*a2)
    return 8;
  result = 0;
  *(_DWORD *)(a1 + 252) = 1;
  v5 = *v2;
  *(_DWORD *)(a1 + 264) = *((_DWORD *)v2 + 2);
  *(_QWORD *)(a1 + 256) = v5;
  return result;
}

uint64_t vp8_get_last_ref_updates(uint64_t a1, _QWORD *a2)
{
  _DWORD *v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_DWORD **)(a1 + 432);
  if (!v2)
    return 7;
  result = 0;
  *(_DWORD *)*a2 = 2 * v2[1981] + 4 * v2[1982] + v2[1980];
  return result;
}

uint64_t vp8_get_frame_corrupted(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 432);
  if (*a2)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
    return 8;
  v5 = *(_QWORD *)(v2 + 6232);
  if (!v5)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(v5 + 148);
  return result;
}

uint64_t vp8_get_last_ref_frame(uint64_t a1, int **a2)
{
  int *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 432);
  if (!v3)
    return 7;
  v4 = *(_DWORD *)(v3 + 7428);
  if (v4 < 1 || (v5 = *(_DWORD *)(v3 + 7432), v5 < 1))
  {
    v13 = 0;
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(v3 + 7488);
    v8 = 76 * (v5 - 1);
    while (2)
    {
      v9 = 2;
      v10 = *(_DWORD *)(v3 + 7432);
      do
      {
        if (*(_BYTE *)(v7 + v9) == 3)
        {
          v11 = 4;
          goto LABEL_16;
        }
        v9 += 76;
        --v10;
      }
      while (v10);
      v7 += v8 + 152;
      if (++v6 != v4)
        continue;
      break;
    }
    v11 = 0;
LABEL_16:
    v14 = 0;
    v15 = *(_QWORD *)(v3 + 7488);
    while (2)
    {
      v16 = 2;
      v17 = *(_DWORD *)(v3 + 7432);
      do
      {
        if (*(_BYTE *)(v15 + v16) == 2)
        {
          v18 = 2;
          goto LABEL_23;
        }
        v16 += 76;
        --v17;
      }
      while (v17);
      v15 += v8 + 152;
      if (++v14 != v4)
        continue;
      break;
    }
    v18 = 0;
LABEL_23:
    v19 = 0;
    v13 = v18 | v11;
    v20 = *(_QWORD *)(v3 + 7488);
    while (2)
    {
      v21 = 2;
      v22 = v5;
      do
      {
        if (*(_BYTE *)(v20 + v21) == 1)
        {
          result = 0;
          *v2 = v13 | 1;
          return result;
        }
        v21 += 76;
        --v22;
      }
      while (v22);
      v20 += v8 + 152;
      if (++v19 != v4)
        continue;
      break;
    }
  }
  result = 0;
  *v2 = v13;
  return result;
}

uint64_t vp8_get_quantizer(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 432);
  if (!v2)
    return 7;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(v2 + 7456);
  return result;
}

uint64_t vp8_set_decryptor(uint64_t a1, _OWORD **a2)
{
  if (*a2)
    *(_OWORD *)(a1 + 272) = **a2;
  else
    *(_OWORD *)(a1 + 272) = 0u;
  return 0;
}

uint64_t vp8_loop_filter_update_sharpness(uint64_t result, int a2)
{
  char v2;
  char v3;
  int v4;
  uint64_t v5;
  signed int v6;
  _BYTE *v7;
  char v8;
  signed int v9;
  _BYTE *v10;
  char v11;

  v2 = a2 > 4;
  v3 = a2 > 0;
  v4 = 0;
  v5 = 0;
  if (a2 <= 0)
  {
    do
    {
      v9 = v5 >> v3 >> v2;
      if (v9 <= 1)
        LOBYTE(v9) = 1;
      v10 = (_BYTE *)(result + v5);
      v10[128] = v9;
      v11 = v9 + v4;
      v10[64] = v11;
      *v10 = v11 + 4;
      ++v5;
      v4 += 2;
    }
    while (v5 != 64);
  }
  else
  {
    do
    {
      v6 = v5 >> v3 >> v2;
      if (v6 >= 9 - a2)
        v6 = 9 - a2;
      if (v6 <= 1)
        LOBYTE(v6) = 1;
      v7 = (_BYTE *)(result + v5);
      v7[128] = v6;
      v8 = v6 + v4;
      v7[64] = v8;
      *v7 = v8 + 4;
      ++v5;
      v4 += 2;
    }
    while (v5 != 64);
  }
  return result;
}

double vp8_loop_filter_init(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  double result;

  vp8_loop_filter_update_sharpness(a1 + 3124, *(_DWORD *)(a1 + 3532));
  v2 = 0;
  *(_DWORD *)(a1 + 3528) = *(_DWORD *)(a1 + 3532);
  do
  {
    v3 = a1 + v2;
    if (v2 >= 0x28)
    {
      *(_BYTE *)(v3 + 3384) = 2;
      *(_BYTE *)(v3 + 3448) = 3;
    }
    else if (v2 < 0x14)
    {
      if (v2 < 0xF)
      {
        *(_BYTE *)(v3 + 3384) = 0;
        *(_BYTE *)(v3 + 3448) = 0;
      }
      else
      {
        *(_BYTE *)(v3 + 3384) = 1;
        *(_BYTE *)(v3 + 3448) = 1;
      }
    }
    else
    {
      *(_BYTE *)(v3 + 3384) = 1;
      *(_BYTE *)(v3 + 3448) = 2;
    }
    ++v2;
  }
  while (v2 != 64);
  *(_DWORD *)(a1 + 3512) = 16843009;
  *(_DWORD *)(a1 + 3516) = 16908800;
  *(_WORD *)(a1 + 3520) = 770;
  *(_QWORD *)&result = 50462976;
  *(_DWORD *)(a1 + 3316) = 50462976;
  return result;
}

uint64_t vp8_loop_filter_frame_init(uint64_t result, _BYTE *a2, int a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  v5 = result;
  v6 = *(_DWORD *)(result + 3532);
  if (*(_DWORD *)(result + 3528) != v6)
  {
    result = vp8_loop_filter_update_sharpness(result + 3124, v6);
    *(_DWORD *)(v5 + 3528) = *(_DWORD *)(v5 + 3532);
  }
  v7 = 0;
  v8 = v5 + 3320;
  do
  {
    while (1)
    {
      v23 = a3;
      if (a2[3968])
      {
        if (a2[3971] == 1)
          v24 = 0;
        else
          v24 = a3;
        v25 = v24 + (char)a2[v7 + 3979];
        if (v25 >= 63)
          v25 = 63;
        v23 = v25 & ~(v25 >> 31);
      }
      if (a2[3983])
        break;
      v26 = 0x101010101010101 * v23;
      *(_QWORD *)v8 = v26;
      *(_QWORD *)(v8 + 8) = v26;
      v8 += 16;
      if (++v7 == 4)
        return result;
    }
    v9.i32[0] = v23 + (char)a2[3989] + (char)a2[3997];
    v9.i32[1] = v23 + (char)a2[3989];
    v10 = vmax_s32(vmin_s32(v9, (int32x2_t)0x3F0000003FLL), 0);
    *(_BYTE *)(v8 + 1) = v10.i8[4];
    *(_BYTE *)v8 = v10.i8[0];
    v11 = v23 + (char)a2[3990];
    v12 = v11 + (char)a2[3998];
    if (v12 >= 63)
      v12 = 63;
    *(_BYTE *)(v8 + 5) = v12 & ~(v12 >> 31);
    v13 = v11 + (char)a2[3999];
    if (v13 >= 63)
      v13 = 63;
    *(_BYTE *)(v8 + 6) = v13 & ~(v13 >> 31);
    v14 = v11 + (char)a2[4000];
    if (v14 >= 63)
      v14 = 63;
    *(_BYTE *)(v8 + 7) = v14 & ~(v14 >> 31);
    v15 = v23 + (char)a2[3991];
    v16 = v15 + (char)a2[3998];
    if (v16 >= 63)
      v16 = 63;
    *(_BYTE *)(v8 + 9) = v16 & ~(v16 >> 31);
    v17 = v15 + (char)a2[3999];
    if (v17 >= 63)
      v17 = 63;
    *(_BYTE *)(v8 + 10) = v17 & ~(v17 >> 31);
    v18 = v15 + (char)a2[4000];
    if (v18 >= 63)
      v18 = 63;
    *(_BYTE *)(v8 + 11) = v18 & ~(v18 >> 31);
    v19 = v23 + (char)a2[3992];
    v20 = v19 + (char)a2[3998];
    if (v20 >= 63)
      v20 = 63;
    *(_BYTE *)(v8 + 13) = v20 & ~(v20 >> 31);
    v21 = v19 + (char)a2[3999];
    if (v21 >= 63)
      v21 = 63;
    *(_BYTE *)(v8 + 14) = v21 & ~(v21 >> 31);
    v22 = v19 + (char)a2[4000];
    if (v22 >= 63)
      v22 = 63;
    *(_BYTE *)(v8 + 15) = v22 & ~(v22 >> 31);
    ++v7;
    v8 += 16;
  }
  while (v7 != 4);
  return result;
}

void vp8_loop_filter_row_normal(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v57;
  uint64_t v58;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unsigned __int8 *v65;
  BOOL v66;

  if (*(int *)(a1 + 3048) >= 1)
  {
    v8 = a8;
    v54 = *(unsigned int *)(a1 + 3028);
    v12 = *a2;
    v14 = (_DWORD)v12 != 4 && (_DWORD)v12 != 9 && a2[9] != 0;
    v58 = a1 + 3124;
    v15 = a1 + 3124;
    v16 = a1 + 3124 + 16 * a2[11] + 4 * a2[2] + *(unsigned __int8 *)(a1 + 3124 + v12 + 388);
    v17 = *(unsigned __int8 *)(v16 + 196);
    if (*(_BYTE *)(v16 + 196))
    {
      v61 = (unsigned __int8 *)(v15 + v17 + 64);
      v18 = (unsigned __int8 *)(v15 + v17 + 128);
      v65 = (unsigned __int8 *)(v15 + *(unsigned __int8 *)(v15 + v17 + (v54 << 6) + 260) + 192);
      if (!v14)
      {
        v19 = *v61;
        v20 = *v18;
        v21 = *v65;
        vp8_loop_filter_vertical_edge_y_neon(a6 + 4, a4, v19, v20, v21);
        vp8_loop_filter_vertical_edge_y_neon(a6 + 8, a4, v19, v20, v21);
        v8 = a8;
        vp8_loop_filter_vertical_edge_y_neon(a6 + 12, a4, v19, v20, v21);
        if (a7)
          vp8_loop_filter_vertical_edge_uv_neon(a7 + 4, a5, v19, v20, v21, a8 + 4);
      }
      if (a3 >= 1)
      {
        v22 = *(unsigned __int8 *)(v58 + v17);
        v23 = *v18;
        v24 = *v65;
        vp8_mbloop_filter_horizontal_edge_y_neon(a6, a4, v22, v23, v24);
        if (a7)
          vp8_mbloop_filter_horizontal_edge_uv_neon(a7, a5, v22, v23, v24, v8);
      }
      if (!v14)
      {
        v25 = *v61;
        v26 = *v18;
        v27 = a4;
        v28 = *v65;
        vp8_loop_filter_horizontal_edge_y_neon(a6 + 4 * a4, a4, v25, v26, v28);
        vp8_loop_filter_horizontal_edge_y_neon(a6 + 8 * v27, v27, v25, v26, v28);
        vp8_loop_filter_horizontal_edge_y_neon(a6 + 12 * v27, v27, v25, v26, v28);
        if (a7)
          vp8_loop_filter_horizontal_edge_uv_neon(a7 + 4 * a5, a5, v25, v26, v28, v8 + 4 * a5);
      }
    }
    v29 = a1;
    if (*(int *)(a1 + 3048) >= 2)
    {
      v30 = a2 + 87;
      v31 = a6 + 28;
      v32 = a7 + 8;
      v33 = v8 + 8;
      v34 = 1;
      do
      {
        v35 = *(v30 - 11);
        v66 = (_DWORD)v35 != 4 && (_DWORD)v35 != 9 && *(v30 - 2) != 0;
        v37 = v29 + 3124;
        v38 = v29 + 3124 + 16 * *v30 + 4 * *(v30 - 9) + *(unsigned __int8 *)(v29 + 3124 + v35 + 388);
        v39 = *(unsigned __int8 *)(v38 + 196);
        if (*(_BYTE *)(v38 + 196))
        {
          v40 = v37 + v39 + 64;
          v41 = (unsigned __int8 *)(v37 + v39 + 128);
          v42 = *v41;
          v43 = v37 + *(unsigned __int8 *)(v37 + v39 + (v54 << 6) + 260);
          v44 = *(unsigned __int8 *)(v43 + 192);
          v60 = (unsigned __int8 *)v40;
          v62 = (unsigned __int8 *)(v43 + 192);
          v45 = *(unsigned __int8 *)(v58 + v39);
          vp8_mbloop_filter_vertical_edge_y_neon(v31 - 12, a4, v45, v42, v44);
          vp8_mbloop_filter_vertical_edge_uv_neon(v32, a5, v45, v42, v44, v33);
          if (!v66)
          {
            v46 = *v60;
            v57 = *v41;
            v47 = *v62;
            vp8_loop_filter_vertical_edge_y_neon(v31 - 8, a4, v46, v57, v47);
            vp8_loop_filter_vertical_edge_y_neon(v31 - 4, a4, v46, v57, v47);
            vp8_loop_filter_vertical_edge_y_neon(v31, a4, v46, v57, v47);
            vp8_loop_filter_vertical_edge_uv_neon(v32 + 4, a5, v46, v57, v47, v33 + 4);
          }
          if (a3 >= 1)
          {
            v48 = *(unsigned __int8 *)(v58 + v39);
            v49 = *v41;
            v50 = *v62;
            vp8_mbloop_filter_horizontal_edge_y_neon(v31 - 12, a4, v48, v49, v50);
            vp8_mbloop_filter_horizontal_edge_uv_neon(v32, a5, v48, v49, v50, v33);
          }
          v29 = a1;
          if (!v66)
          {
            v51 = *v60;
            v52 = *v41;
            v53 = *v62;
            vp8_loop_filter_horizontal_edge_y_neon(v31 + 4 * a4 - 12, a4, v51, v52, v53);
            vp8_loop_filter_horizontal_edge_y_neon(v31 + 8 * a4 - 12, a4, v51, v52, v53);
            vp8_loop_filter_horizontal_edge_y_neon(v31 + 12 * a4 - 12, a4, v51, v52, v53);
            vp8_loop_filter_horizontal_edge_uv_neon(v32 + 4 * a5, a5, v51, v52, v53, v33 + 4 * a5);
          }
        }
        v30 += 76;
        ++v34;
        v31 += 16;
        v32 += 8;
        v33 += 8;
      }
      while (v34 < *(_DWORD *)(v29 + 3048));
    }
  }
}

void vp8_loop_filter_row_simple(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int8x16_t *a5)
{
  int v5;
  uint64_t v10;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8x16_t v17;
  int8x16_t *v18;
  int8x16_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  uint8x16_t *v22;
  int8x16_t v23;
  uint8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  const char *v32;
  uint8x16_t v33;
  int8x16_t *v34;
  int8x16_t v35;
  int8x16_t *v36;
  int8x16_t v37;
  uint8x16_t *v38;
  int8x16_t v39;
  uint8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  uint64_t v48;
  __int8 *i8;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  uint64_t v67;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  uint8x16_t v78;
  uint8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  BOOL v86;
  uint64_t v87;
  const char *v88;
  unsigned __int8 *v89;
  __int8 *v90;
  int v91;
  uint64_t v92;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v5 = *(_DWORD *)(a1 + 3048);
  if (v5 < 1)
    return;
  v99 = a1 + 3124;
  v10 = *a2;
  if (a3 > 0)
  {
    v13 = (_DWORD)v10 != 4 && (_DWORD)v10 != 9 && a2[9] != 0;
    v14 = a1 + 3124 + 16 * a2[11] + 4 * a2[2] + *(unsigned __int8 *)(a1 + 3124 + v10 + 388);
    v15 = *(unsigned __int8 *)(v14 + 196);
    if (*(_BYTE *)(v14 + 196))
    {
      if (!v13)
      {
        vp8_loop_filter_bvs_neon(a5, a4, (const char *)(a1 + v15 + 3188));
        v32 = (const char *)(v99 + v15);
        v33 = (uint8x16_t)vld1q_dup_s8(v32);
        v34 = (int8x16_t *)((char *)a5 - 2 * a4);
        v35 = *v34;
        v36 = (int8x16_t *)((char *)v34 + a4);
        v37 = *v36;
        v38 = (uint8x16_t *)&v36->i8[a4];
        v39 = *(int8x16_t *)((char *)v38 + a4);
        v40 = vabdq_u8((uint8x16_t)v37, *v38);
        v41.i64[0] = 0x8080808080808080;
        v41.i64[1] = 0x8080808080808080;
        v42 = veorq_s8(v37, v41);
        v43 = veorq_s8(*(int8x16_t *)v38, v41);
        v44 = (int8x16_t)vcgtq_u8(vqaddq_u8(vqaddq_u8(v40, v40), vshrq_n_u8(vabdq_u8((uint8x16_t)v35, (uint8x16_t)v39), 1uLL)), v33);
        v45 = vqsubq_s8(veorq_s8(v35, v41), veorq_s8(v39, v41));
        v39.i64[0] = 0x303030303030303;
        v39.i64[1] = 0x303030303030303;
        v46 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v43.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v42.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v45.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v43, v39), v42, v39), v45)), v44);
        v47 = vqaddq_s8(v46, v39);
        v39.i64[0] = 0x404040404040404;
        v39.i64[1] = 0x404040404040404;
        *a5 = veorq_s8(vqsubq_s8(v43, vshrq_n_s8(vqaddq_s8(v46, v39), 3uLL)), v41);
        *(int8x16_t *)((char *)a5 - a4) = veorq_s8(vqaddq_s8(v42, vshrq_n_s8(v47, 3uLL)), v41);
        vp8_loop_filter_bhs_neon((uint64_t)a5, a4, (const char *)(a1 + v15 + 3188));
        if (*(int *)(a1 + 3048) < 2)
          return;
LABEL_21:
        v48 = 2 * a4;
        v98 = -2 * a4;
        i8 = a5[1].i8;
        v50 = a2 + 87;
        v97 = 3 * a4 - v48;
        v51 = 2 * a4 - v48;
        v52 = a4 - v48;
        v53 = 1;
        do
        {
          v67 = *(v50 - 11);
          v69 = (_DWORD)v67 != 4 && (_DWORD)v67 != 9 && *(v50 - 2) != 0;
          v70 = a1 + 3124 + 16 * *v50 + 4 * *(v50 - 9) + *(unsigned __int8 *)(a1 + 3124 + v67 + 388);
          v71 = *(unsigned __int8 *)(v70 + 196);
          if (*(_BYTE *)(v70 + 196))
          {
            v72 = (const char *)(v99 + v71);
            vp8_loop_filter_mbvs_neon(i8, a4, (const char *)(v99 + v71));
            if (v69)
            {
              v54 = (uint8x16_t)vld1q_dup_s8(v72);
              v55 = *(int8x16_t *)&i8[v98];
              v56 = *(int8x16_t *)&i8[v52];
              v57 = *(int8x16_t *)&i8[v51];
              v58 = *(int8x16_t *)&i8[v97];
              v59 = vabdq_u8((uint8x16_t)v56, (uint8x16_t)v57);
              v60 = vqaddq_u8(vqaddq_u8(v59, v59), vshrq_n_u8(vabdq_u8((uint8x16_t)v55, (uint8x16_t)v58), 1uLL));
              v61.i64[0] = 0x8080808080808080;
              v61.i64[1] = 0x8080808080808080;
              v62 = veorq_s8(v56, v61);
              v63 = veorq_s8(v57, v61);
              v64 = vqsubq_s8(veorq_s8(v55, v61), veorq_s8(v58, v61));
              v65.i64[0] = 0x303030303030303;
              v65.i64[1] = 0x303030303030303;
              v66 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v63.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v62.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v64.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v63, v65), v62, v65), v64)), (int8x16_t)vcgtq_u8(v60, v54));
              v58.i64[0] = 0x404040404040404;
              v58.i64[1] = 0x404040404040404;
              *(int8x16_t *)i8 = veorq_s8(vqsubq_s8(v63, vshrq_n_s8(vqaddq_s8(v66, v58), 3uLL)), v61);
              *(int8x16_t *)&i8[-a4] = veorq_s8(vqaddq_s8(v62, vshrq_n_s8(vqaddq_s8(v66, v65), 3uLL)), v61);
            }
            else
            {
              vp8_loop_filter_bvs_neon(i8, a4, (const char *)(a1 + v71 + 3188));
              v73 = (uint8x16_t)vld1q_dup_s8(v72);
              v74 = *(int8x16_t *)&i8[v98];
              v75 = *(int8x16_t *)&i8[v52];
              v76 = *(int8x16_t *)&i8[v51];
              v77 = *(int8x16_t *)&i8[v97];
              v78 = vabdq_u8((uint8x16_t)v75, (uint8x16_t)v76);
              v79 = vqaddq_u8(vqaddq_u8(v78, v78), vshrq_n_u8(vabdq_u8((uint8x16_t)v74, (uint8x16_t)v77), 1uLL));
              v80.i64[0] = 0x8080808080808080;
              v80.i64[1] = 0x8080808080808080;
              v81 = veorq_s8(v75, v80);
              v82 = veorq_s8(v76, v80);
              v83 = vqsubq_s8(veorq_s8(v74, v80), veorq_s8(v77, v80));
              v84.i64[0] = 0x303030303030303;
              v84.i64[1] = 0x303030303030303;
              v85 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v82.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v81.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v83.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v82, v84), v81, v84), v83)), (int8x16_t)vcgtq_u8(v79, v73));
              v77.i64[0] = 0x404040404040404;
              v77.i64[1] = 0x404040404040404;
              *(int8x16_t *)i8 = veorq_s8(vqsubq_s8(v82, vshrq_n_s8(vqaddq_s8(v85, v77), 3uLL)), v80);
              *(int8x16_t *)&i8[-a4] = veorq_s8(vqaddq_s8(v81, vshrq_n_s8(vqaddq_s8(v85, v84), 3uLL)), v80);
              vp8_loop_filter_bhs_neon((uint64_t)i8, a4, (const char *)(a1 + v71 + 3188));
            }
          }
          v50 += 76;
          ++v53;
          i8 += 16;
        }
        while (v53 < *(_DWORD *)(a1 + 3048));
        return;
      }
      v16 = (const char *)(v99 + v15);
      v17 = (uint8x16_t)vld1q_dup_s8(v16);
      v18 = (int8x16_t *)((char *)a5 - 2 * a4);
      v19 = *v18;
      v20 = (int8x16_t *)((char *)v18 + a4);
      v21 = *v20;
      v22 = (uint8x16_t *)&v20->i8[a4];
      v23 = *(int8x16_t *)((char *)v22 + a4);
      v24 = vabdq_u8((uint8x16_t)v21, *v22);
      v25.i64[0] = 0x8080808080808080;
      v25.i64[1] = 0x8080808080808080;
      v26 = veorq_s8(v21, v25);
      v27 = veorq_s8(*(int8x16_t *)v22, v25);
      v28 = (int8x16_t)vcgtq_u8(vqaddq_u8(vqaddq_u8(v24, v24), vshrq_n_u8(vabdq_u8((uint8x16_t)v19, (uint8x16_t)v23), 1uLL)), v17);
      v29 = vqsubq_s8(veorq_s8(v19, v25), veorq_s8(v23, v25));
      v23.i64[0] = 0x303030303030303;
      v23.i64[1] = 0x303030303030303;
      v30 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v27.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v26.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v29.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v27, v23), v26, v23), v29)), v28);
      v31 = vqaddq_s8(v30, v23);
      v23.i64[0] = 0x404040404040404;
      v23.i64[1] = 0x404040404040404;
      *a5 = veorq_s8(vqsubq_s8(v27, vshrq_n_s8(vqaddq_s8(v30, v23), 3uLL)), v25);
      *(int8x16_t *)((char *)a5 - a4) = veorq_s8(vqaddq_s8(v26, vshrq_n_s8(v31, 3uLL)), v25);
    }
    if (*(int *)(a1 + 3048) < 2)
      return;
    goto LABEL_21;
  }
  v86 = (_DWORD)v10 != 4 && (_DWORD)v10 != 9 && a2[9] != 0;
  v87 = *(unsigned __int8 *)(a1 + 3124 + 16 * a2[11] + 4 * a2[2] + *(unsigned __int8 *)(a1 + 3124 + v10 + 388) + 196);
  if (v87 && !v86)
  {
    v88 = (const char *)(a1 + v87 + 3188);
    vp8_loop_filter_bvs_neon(a5, a4, v88);
    vp8_loop_filter_bhs_neon((uint64_t)a5, a4, v88);
    v5 = *(_DWORD *)(a1 + 3048);
  }
  if (v5 >= 2)
  {
    v89 = a2 + 87;
    v90 = a5[1].i8;
    v91 = 1;
    do
    {
      v92 = *(v89 - 11);
      v94 = (_DWORD)v92 != 4 && (_DWORD)v92 != 9 && *(v89 - 2) != 0;
      v95 = a1 + 3124 + 16 * *v89 + 4 * *(v89 - 9) + *(unsigned __int8 *)(a1 + 3124 + v92 + 388);
      v96 = *(unsigned __int8 *)(v95 + 196);
      if (*(_BYTE *)(v95 + 196))
      {
        vp8_loop_filter_mbvs_neon(v90, a4, (const char *)(v99 + v96));
        if (!v94)
        {
          vp8_loop_filter_bvs_neon(v90, a4, (const char *)(a1 + v96 + 3188));
          vp8_loop_filter_bhs_neon((uint64_t)v90, a4, (const char *)(a1 + v96 + 3188));
        }
      }
      ++v91;
      v89 += 76;
      v90 += 16;
    }
    while (v91 < *(_DWORD *)(a1 + 3048));
  }
}

void vp8_loop_filter_frame(uint64_t a1, _BYTE *a2, int a3)
{
  int *v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  __int8 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8x16_t v20;
  int8x16_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  uint8x16_t *v24;
  int8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int v34;
  unsigned __int8 *v35;
  const char *v36;
  uint8x16_t v37;
  int8x16_t v38;
  int8x16_t *v39;
  int8x16_t v40;
  uint8x16_t *v41;
  int8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  uint8x16_t v56;
  uint8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  __int8 *v64;
  uint64_t v65;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  uint8x16_t v76;
  uint8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  BOOL v84;
  uint64_t v85;
  const char *v86;
  int v87;
  uint64_t v88;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned __int8 *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 *v132;
  unsigned int v133;
  unsigned int v134;
  unsigned __int8 *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned __int8 *v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  unsigned __int8 *v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;

  v5 = *(int **)(a1 + 1848);
  v170 = a1 + 3124;
  v6 = *(_DWORD *)(a1 + 3044);
  v152 = *(_DWORD *)(a1 + 3048);
  v7 = *(unsigned __int8 **)(a1 + 3104);
  v8 = v5[4];
  v9 = v5[9];
  vp8_loop_filter_frame_init(a1, a2, *(_DWORD *)(a1 + 3524));
  v151 = v5;
  v10 = (__int8 *)*((_QWORD *)v5 + 7);
  v174 = a1;
  v150 = v6;
  v173 = v8;
  if (*(_DWORD *)(a1 + 3120))
  {
    if (v6 >= 1 && v152 >= 1)
    {
      v11 = 0;
      v12 = 2 * (int)v8;
      v159 = -2 * (int)v8;
      v161 = 16 * v8;
      v158 = -v8;
      v171 = 16 - v12;
      v168 = 16 - v8;
      v164 = 2 * v8 - v12 + 16;
      v166 = 3 * v8 - v12 + 16;
      v13 = v8 - v12 + 16;
      while (1)
      {
        v14 = *v7;
        v15 = (_DWORD)v14 == 4 || (_DWORD)v14 == 9;
        if (!v11)
        {
          v84 = !v15 && v7[9] != 0;
          v85 = *(unsigned __int8 *)(v174
                                   + 3124
                                   + 16 * v7[11]
                                   + 4 * v7[2]
                                   + *(unsigned __int8 *)(v174 + 3124 + v14 + 388)
                                   + 196);
          if (v85 && !v84)
          {
            v86 = (const char *)(v174 + v85 + 3188);
            vp8_loop_filter_bvs_neon(v10, v8, v86);
            vp8_loop_filter_bhs_neon((uint64_t)v10, v8, v86);
          }
          v35 = v7;
          v87 = v152 - 1;
          if (v152 != 1)
          {
            do
            {
              v35 = v7 + 76;
              v88 = v7[76];
              v90 = (_DWORD)v88 != 4 && (_DWORD)v88 != 9 && v7[85] != 0;
              v10 += 16;
              v91 = v174 + 3124 + 16 * v7[87] + 4 * v7[78] + *(unsigned __int8 *)(v174 + 3124 + v88 + 388);
              v92 = *(unsigned __int8 *)(v91 + 196);
              if (*(_BYTE *)(v91 + 196))
              {
                vp8_loop_filter_mbvs_neon(v10, v173, (const char *)(v170 + v92));
                if (!v90)
                {
                  v93 = (const char *)(v174 + v92 + 3188);
                  vp8_loop_filter_bvs_neon(v10, v173, v93);
                  vp8_loop_filter_bhs_neon((uint64_t)v10, v173, v93);
                }
              }
              v7 = v35;
              --v87;
            }
            while (v87);
          }
          goto LABEL_5;
        }
        v16 = !v15 && v7[9] != 0;
        v17 = v174 + 3124 + 16 * v7[11] + 4 * v7[2] + *(unsigned __int8 *)(v174 + 3124 + v14 + 388);
        v18 = *(unsigned __int8 *)(v17 + 196);
        if (!*(_BYTE *)(v17 + 196))
          goto LABEL_19;
        if (v16)
          break;
        vp8_loop_filter_bvs_neon(v10, v8, (const char *)(v174 + v18 + 3188));
        v36 = (const char *)(v170 + v18);
        v37 = (uint8x16_t)vld1q_dup_s8(v36);
        v38 = *(int8x16_t *)&v10[v159];
        v39 = (int8x16_t *)&v10[v159 + v8];
        v40 = *v39;
        v41 = (uint8x16_t *)&v39->i8[v8];
        v42 = *(int8x16_t *)((char *)v41 + v8);
        v43 = vabdq_u8((uint8x16_t)v40, *v41);
        v44 = vqaddq_u8(vqaddq_u8(v43, v43), vshrq_n_u8(vabdq_u8((uint8x16_t)v38, (uint8x16_t)v42), 1uLL));
        v45.i64[0] = 0x8080808080808080;
        v45.i64[1] = 0x8080808080808080;
        v46 = veorq_s8(v40, v45);
        v47 = veorq_s8(*(int8x16_t *)v41, v45);
        v48 = vqsubq_s8(veorq_s8(v38, v45), veorq_s8(v42, v45));
        v49.i64[0] = 0x303030303030303;
        v49.i64[1] = 0x303030303030303;
        v50 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v47.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v46.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v48.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v47, v49), v46, v49), v48)), (int8x16_t)vcgtq_u8(v44, v37));
        v42.i64[0] = 0x404040404040404;
        v42.i64[1] = 0x404040404040404;
        *(int8x16_t *)v10 = veorq_s8(vqsubq_s8(v47, vshrq_n_s8(vqaddq_s8(v50, v42), 3uLL)), v45);
        *(int8x16_t *)&v10[v158] = veorq_s8(vqaddq_s8(v46, vshrq_n_s8(vqaddq_s8(v50, v49), 3uLL)), v45);
        vp8_loop_filter_bhs_neon((uint64_t)v10, v8, (const char *)(v174 + v18 + 3188));
        v34 = v152 - 1;
        v35 = v7;
        if (v152 != 1)
        {
          do
          {
LABEL_25:
            v64 = v10;
            v35 = v7 + 76;
            v65 = v7[76];
            v67 = (_DWORD)v65 != 4 && (_DWORD)v65 != 9 && v7[85] != 0;
            v10 += 16;
            v68 = v174 + 3124 + 16 * v7[87] + 4 * v7[78] + *(unsigned __int8 *)(v174 + 3124 + v65 + 388);
            v69 = *(unsigned __int8 *)(v68 + 196);
            if (*(_BYTE *)(v68 + 196))
            {
              v70 = (const char *)(v170 + v69);
              vp8_loop_filter_mbvs_neon(v64 + 16, v173, (const char *)(v170 + v69));
              if (v67)
              {
                v51 = (uint8x16_t)vld1q_dup_s8(v70);
                v52 = *(int8x16_t *)&v64[v171];
                v53 = *(int8x16_t *)&v64[v13];
                v54 = *(int8x16_t *)&v64[v164];
                v55 = *(int8x16_t *)&v64[v166];
                v56 = vabdq_u8((uint8x16_t)v53, (uint8x16_t)v54);
                v57 = vqaddq_u8(vqaddq_u8(v56, v56), vshrq_n_u8(vabdq_u8((uint8x16_t)v52, (uint8x16_t)v55), 1uLL));
                v58.i64[0] = 0x8080808080808080;
                v58.i64[1] = 0x8080808080808080;
                v59 = veorq_s8(v53, v58);
                v60 = veorq_s8(v54, v58);
                v61 = vqsubq_s8(veorq_s8(v52, v58), veorq_s8(v55, v58));
                v62.i64[0] = 0x303030303030303;
                v62.i64[1] = 0x303030303030303;
                v63 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v60.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v59.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v61.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v60, v62), v59, v62), v61)), (int8x16_t)vcgtq_u8(v57, v51));
                v55.i64[0] = 0x404040404040404;
                v55.i64[1] = 0x404040404040404;
                *((int8x16_t *)v64 + 1) = veorq_s8(vqsubq_s8(v60, vshrq_n_s8(vqaddq_s8(v63, v55), 3uLL)), v58);
                *(int8x16_t *)&v64[v168] = veorq_s8(vqaddq_s8(v59, vshrq_n_s8(vqaddq_s8(v63, v62), 3uLL)), v58);
              }
              else
              {
                vp8_loop_filter_bvs_neon(v64 + 16, v173, (const char *)(v174 + v69 + 3188));
                v71 = (uint8x16_t)vld1q_dup_s8(v70);
                v72 = *(int8x16_t *)&v64[v171];
                v73 = *(int8x16_t *)&v64[v13];
                v74 = *(int8x16_t *)&v64[v164];
                v75 = *(int8x16_t *)&v64[v166];
                v76 = vabdq_u8((uint8x16_t)v73, (uint8x16_t)v74);
                v77 = vqaddq_u8(vqaddq_u8(v76, v76), vshrq_n_u8(vabdq_u8((uint8x16_t)v72, (uint8x16_t)v75), 1uLL));
                v78.i64[0] = 0x8080808080808080;
                v78.i64[1] = 0x8080808080808080;
                v79 = veorq_s8(v73, v78);
                v80 = veorq_s8(v74, v78);
                v81 = vqsubq_s8(veorq_s8(v72, v78), veorq_s8(v75, v78));
                v82.i64[0] = 0x303030303030303;
                v82.i64[1] = 0x303030303030303;
                v83 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v80.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v79.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v81.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v80, v82), v79, v82), v81)), (int8x16_t)vcgtq_u8(v77, v71));
                v75.i64[0] = 0x404040404040404;
                v75.i64[1] = 0x404040404040404;
                *((int8x16_t *)v64 + 1) = veorq_s8(vqsubq_s8(v80, vshrq_n_s8(vqaddq_s8(v83, v75), 3uLL)), v78);
                *(int8x16_t *)&v64[v168] = veorq_s8(vqaddq_s8(v79, vshrq_n_s8(vqaddq_s8(v83, v82), 3uLL)), v78);
                vp8_loop_filter_bhs_neon((uint64_t)(v64 + 16), v173, (const char *)(v174 + v69 + 3188));
              }
            }
            v7 = v35;
            --v34;
          }
          while (v34);
        }
LABEL_5:
        v10 += v161 - *v151 + 16;
        v7 = v35 + 152;
        ++v11;
        v8 = v173;
        if (v11 == v6)
          return;
      }
      v19 = (const char *)(v170 + v18);
      v20 = (uint8x16_t)vld1q_dup_s8(v19);
      v21 = *(int8x16_t *)&v10[v159];
      v22 = (int8x16_t *)&v10[v159 + v8];
      v23 = *v22;
      v24 = (uint8x16_t *)&v22->i8[v8];
      v25 = *(int8x16_t *)((char *)v24 + v8);
      v26 = vabdq_u8((uint8x16_t)v23, *v24);
      v27 = vqaddq_u8(vqaddq_u8(v26, v26), vshrq_n_u8(vabdq_u8((uint8x16_t)v21, (uint8x16_t)v25), 1uLL));
      v28.i64[0] = 0x8080808080808080;
      v28.i64[1] = 0x8080808080808080;
      v29 = veorq_s8(v23, v28);
      v30 = veorq_s8(*(int8x16_t *)v24, v28);
      v31 = vqsubq_s8(veorq_s8(v21, v28), veorq_s8(v25, v28));
      v32.i64[0] = 0x303030303030303;
      v32.i64[1] = 0x303030303030303;
      v33 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v30.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v29.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v31.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v30, v32), v29, v32), v31)), (int8x16_t)vcgtq_u8(v27, v20));
      v25.i64[0] = 0x404040404040404;
      v25.i64[1] = 0x404040404040404;
      *(int8x16_t *)v10 = veorq_s8(vqsubq_s8(v30, vshrq_n_s8(vqaddq_s8(v33, v25), 3uLL)), v28);
      *(int8x16_t *)&v10[v158] = veorq_s8(vqaddq_s8(v29, vshrq_n_s8(vqaddq_s8(v33, v32), 3uLL)), v28);
LABEL_19:
      v34 = v152 - 1;
      v35 = v7;
      if (v152 != 1)
        goto LABEL_25;
      goto LABEL_5;
    }
  }
  else
  {
    v169 = v9;
    if (v6 >= 1 && v152 >= 1)
    {
      v157 = 0;
      v156 = a3;
      v94 = *((_QWORD *)v5 + 8);
      v95 = *((_QWORD *)v5 + 9);
      v149 = 16 * v8;
      v148 = 8 * v9;
      v154 = 8 * v8;
      v155 = 4 * v8;
      v146 = 4 * v9;
      v147 = 4 * v9 + 8;
      v153 = 12 * v8;
      do
      {
        v160 = v95;
        v162 = v94;
        v100 = *v7;
        v102 = (_DWORD)v100 != 4 && (_DWORD)v100 != 9 && v7[9] != 0;
        v103 = v169;
        v104 = v174 + 3124;
        v167 = v7;
        v105 = v174 + 3124 + 16 * v7[11] + 4 * v7[2] + *(unsigned __int8 *)(v174 + 3124 + v100 + 388);
        v106 = *(unsigned __int8 *)(v105 + 196);
        if (*(_BYTE *)(v105 + 196))
        {
          v107 = (unsigned __int8 *)(v104 + v106 + 64);
          v108 = (unsigned __int8 *)(v104 + v106 + 128);
          v109 = (unsigned __int8 *)(v104 + *(unsigned __int8 *)(v104 + v106 + (v156 << 6) + 260) + 192);
          if (!v102)
          {
            v110 = *v107;
            v111 = *v108;
            v112 = *v109;
            vp8_loop_filter_vertical_edge_y_neon((uint64_t)(v10 + 4), v173, v110, v111, v112);
            vp8_loop_filter_vertical_edge_y_neon((uint64_t)(v10 + 8), v173, v110, v111, v112);
            v103 = v169;
            vp8_loop_filter_vertical_edge_y_neon((uint64_t)(v10 + 12), v173, v110, v111, v112);
            if (v162)
              vp8_loop_filter_vertical_edge_uv_neon(v162 + 4, v169, v110, v111, v112, v160 + 4);
          }
          if (v157)
          {
            v113 = *(unsigned __int8 *)(v170 + v106);
            v114 = *v108;
            v115 = *v109;
            vp8_mbloop_filter_horizontal_edge_y_neon((uint64_t)v10, v173, v113, v114, v115);
            if (v162)
              vp8_mbloop_filter_horizontal_edge_uv_neon(v162, v103, v113, v114, v115, v160);
          }
          if (!v102)
          {
            v116 = *v107;
            v117 = *v108;
            v118 = *v109;
            vp8_loop_filter_horizontal_edge_y_neon((uint64_t)&v10[v155], v173, v116, v117, v118);
            vp8_loop_filter_horizontal_edge_y_neon((uint64_t)&v10[v154], v173, v116, v117, v118);
            vp8_loop_filter_horizontal_edge_y_neon((uint64_t)&v10[v153], v173, v116, v117, v118);
            if (v162)
              vp8_loop_filter_horizontal_edge_uv_neon(v162 + v146, v103, v116, v117, v118, v160 + v146);
          }
        }
        if (v152 == 1)
        {
          v98 = v150;
          v119 = v167;
          v96 = v160;
          v97 = v162;
        }
        else
        {
          v120 = 0;
          v121 = (uint64_t)(v10 + 28);
          v122 = v162;
          v123 = v152 - 1;
          v119 = v167;
          do
          {
            v124 = v119;
            v126 = v119[76];
            v119 += 76;
            v125 = v126;
            v172 = v126 != 4 && (_DWORD)v125 != 9 && v124[85] != 0;
            v128 = v174 + 3124;
            v129 = v174 + 3124 + 16 * v124[87] + 4 * v124[78] + *(unsigned __int8 *)(v174 + 3124 + v125 + 388);
            v130 = *(unsigned __int8 *)(v129 + 196);
            if (*(_BYTE *)(v129 + 196))
            {
              v165 = v123;
              v131 = v122 + v120 + 8;
              v163 = (unsigned __int8 *)(v128 + v130 + 64);
              v132 = (unsigned __int8 *)(v128 + v130 + 128);
              v133 = *v132;
              v135 = (unsigned __int8 *)(v128 + *(unsigned __int8 *)(v128 + v130 + (v156 << 6) + 260) + 192);
              v134 = *v135;
              v136 = *(unsigned __int8 *)(v170 + v130);
              vp8_mbloop_filter_vertical_edge_y_neon(v121 - 12, v173, v136, v133, v134);
              vp8_mbloop_filter_vertical_edge_uv_neon(v131, v169, v136, v133, v134, v160 + v120 + 8);
              if (!v172)
              {
                v137 = *v163;
                v138 = *v132;
                v139 = *v135;
                vp8_loop_filter_vertical_edge_y_neon(v121 - 8, v173, v137, v138, v139);
                vp8_loop_filter_vertical_edge_y_neon(v121 - 4, v173, v137, v138, v139);
                vp8_loop_filter_vertical_edge_y_neon(v121, v173, v137, v138, v139);
                vp8_loop_filter_vertical_edge_uv_neon(v162 + v120 + 12, v169, v137, v138, v139, v160 + v120 + 12);
              }
              if (v157)
              {
                v140 = *(unsigned __int8 *)(v170 + v130);
                v141 = *v132;
                v142 = *v135;
                vp8_mbloop_filter_horizontal_edge_y_neon(v121 - 12, v173, v140, v141, v142);
                vp8_mbloop_filter_horizontal_edge_uv_neon(v131, v169, v140, v141, v142, v160 + v120 + 8);
              }
              v122 = v162;
              v123 = v165;
              if (!v172)
              {
                v143 = *v163;
                v144 = *v132;
                v145 = *v135;
                vp8_loop_filter_horizontal_edge_y_neon(v121 + v155 - 12, v173, v143, v144, v145);
                vp8_loop_filter_horizontal_edge_y_neon(v121 + v154 - 12, v173, v143, v144, v145);
                vp8_loop_filter_horizontal_edge_y_neon(v121 + v153 - 12, v173, v143, v144, v145);
                vp8_loop_filter_horizontal_edge_uv_neon(v162 + v147 + v120, v169, v143, v144, v145, v160 + v147 + v120);
              }
            }
            v121 += 16;
            v120 += 8;
            --v123;
          }
          while (v123);
          v96 = v160 + v120;
          v97 = v122 + v120;
          v10 = (__int8 *)(v121 - 28);
          v98 = v150;
        }
        v99 = v148 - v151[5];
        v10 += v149 - *v151 + 16;
        v94 = v97 + v99 + 8;
        v95 = v96 + v99 + 8;
        v7 = v119 + 152;
        ++v157;
      }
      while (v157 != v98);
    }
  }
}

void vp8_loop_filter_frame_yonly(uint64_t a1, _BYTE *a2, int a3)
{
  const char *v3;
  int *v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  __int8 *v8;
  uint64_t v9;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8x16_t v16;
  int8x16_t *v17;
  int8x16_t v18;
  int8x16_t *v19;
  int8x16_t v20;
  uint8x16_t *v21;
  int8x16_t v22;
  uint8x16_t v23;
  uint8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  const char *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  const char *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int i;
  uint64_t v49;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint8x16_t v56;
  uint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint8x16_t v62;
  uint8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  const char *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned __int8 *v73;
  unsigned int v74;
  const char *v75;
  unsigned __int8 *v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  int *v90;
  const char *v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  const char *v95;
  int v96;

  v3 = (const char *)a1;
  v4 = *(int **)(a1 + 1848);
  v92 = *(unsigned int *)(a1 + 3028);
  v5 = *(unsigned __int8 **)(a1 + 3104);
  vp8_loop_filter_frame_init(a1, a2, a3);
  v6 = *((_DWORD *)v3 + 761);
  if (v6 >= 1)
  {
    v7 = *((_DWORD *)v3 + 762);
    if (v7 >= 1)
    {
      v96 = 0;
      v95 = v3 + 3124;
      v8 = (__int8 *)*((_QWORD *)v4 + 7);
      v90 = v4;
      v91 = v3;
      do
      {
        if (v7 >= 1)
        {
          v9 = *v5;
          v11 = (_DWORD)v9 != 4 && (_DWORD)v9 != 9 && v5[9] != 0;
          v12 = (uint64_t)&v3[16 * v5[11] + 3124 + 4 * v5[2] + v3[v9 + 3512]];
          v13 = *(unsigned __int8 *)(v12 + 196);
          if (*(_BYTE *)(v12 + 196))
          {
            if (*((_DWORD *)v3 + 780))
            {
              if (!v11)
                vp8_loop_filter_bvs_neon(v8, v4[4], &v3[v13 + 3188]);
              if (v96)
              {
                v14 = v4[4];
                v15 = &v95[v13];
                v16 = (uint8x16_t)vld1q_dup_s8(v15);
                v17 = (int8x16_t *)&v8[-2 * (int)v14];
                v18 = *v17;
                v19 = (int8x16_t *)((char *)v17 + v14);
                v20 = *v19;
                v21 = (uint8x16_t *)&v19->i8[v14];
                v22 = *(int8x16_t *)((char *)v21 + v14);
                v23 = vabdq_u8((uint8x16_t)v20, *v21);
                v24 = vqaddq_u8(vqaddq_u8(v23, v23), vshrq_n_u8(vabdq_u8((uint8x16_t)v18, (uint8x16_t)v22), 1uLL));
                v25.i64[0] = 0x8080808080808080;
                v25.i64[1] = 0x8080808080808080;
                v26 = veorq_s8(v20, v25);
                v27 = veorq_s8(*(int8x16_t *)v21, v25);
                v28 = vqsubq_s8(veorq_s8(v18, v25), veorq_s8(v22, v25));
                v29.i64[0] = 0x303030303030303;
                v29.i64[1] = 0x303030303030303;
                v30 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v27.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v26.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v28.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v27, v29), v26, v29), v28)), (int8x16_t)vcgtq_u8(v24, v16));
                v22.i64[0] = 0x404040404040404;
                v22.i64[1] = 0x404040404040404;
                *(int8x16_t *)v8 = veorq_s8(vqsubq_s8(v27, vshrq_n_s8(vqaddq_s8(v30, v22), 3uLL)), v25);
                *(int8x16_t *)&v8[-v14] = veorq_s8(vqaddq_s8(v26, vshrq_n_s8(vqaddq_s8(v30, v29), 3uLL)), v25);
              }
              if (!v11)
                vp8_loop_filter_bhs_neon((uint64_t)v8, v4[4], &v3[v13 + 3188]);
            }
            else
            {
              v31 = &v3[v13 + 3124];
              v32 = (unsigned __int8 *)(v31 + 64);
              v33 = (unsigned __int8 *)(v31 + 128);
              v34 = &v3[v31[64 * v92 + 260] + 3316];
              if (!v11)
              {
                v35 = v4[4];
                v93 = (unsigned __int8 *)(v31 + 64);
                v36 = *v32;
                v37 = *v33;
                v38 = *(unsigned __int8 *)v34;
                vp8_loop_filter_vertical_edge_y_neon((uint64_t)(v8 + 4), v35, v36, v37, v38);
                vp8_loop_filter_vertical_edge_y_neon((uint64_t)(v8 + 8), v35, v36, v37, v38);
                v39 = v36;
                v32 = v93;
                v40 = v37;
                v41 = v38;
                v4 = v90;
                v3 = v91;
                vp8_loop_filter_vertical_edge_y_neon((uint64_t)(v8 + 12), v35, v39, v40, v41);
              }
              if (v96)
                vp8_mbloop_filter_horizontal_edge_y_neon((uint64_t)v8, v4[4], v95[v13], *v33, *(unsigned __int8 *)v34);
              if (!v11)
              {
                v42 = v4[4];
                v43 = *v32;
                v44 = *v33;
                v45 = *(unsigned __int8 *)v34;
                vp8_loop_filter_horizontal_edge_y_neon((uint64_t)&v8[4 * v42], v42, v43, v44, v45);
                vp8_loop_filter_horizontal_edge_y_neon((uint64_t)&v8[8 * v42], v42, v43, v44, v45);
                v46 = v44;
                v47 = v45;
                v4 = v90;
                v3 = v91;
                vp8_loop_filter_horizontal_edge_y_neon((uint64_t)&v8[12 * (int)v42], v42, v43, v46, v47);
              }
            }
          }
          v8 += 16;
          v5 += 76;
          v7 = *((_DWORD *)v3 + 762);
          if (v7 >= 2)
          {
            for (i = 1; i < v7; ++i)
            {
              v49 = *v5;
              v51 = (_DWORD)v49 != 4 && (_DWORD)v49 != 9 && v5[9] != 0;
              v52 = (uint64_t)&v3[16 * v5[11] + 3124 + 4 * v5[2] + v3[v49 + 3512]];
              v53 = *(unsigned __int8 *)(v52 + 196);
              if (*(_BYTE *)(v52 + 196))
              {
                if (*((_DWORD *)v3 + 780))
                {
                  vp8_loop_filter_mbvs_neon(v8, v4[4], &v95[v53]);
                  if (!v51)
                    vp8_loop_filter_bvs_neon(v8, v4[4], &v3[v53 + 3188]);
                  if (v96)
                  {
                    v55 = v4[4];
                    v54 = &v95[v53];
                    v56 = (uint8x16_t)vld1q_dup_s8(v54);
                    v57 = 2 * (int)v55;
                    v58 = *(int8x16_t *)&v8[v55 - v57];
                    v59 = *(int8x16_t *)&v8[2 * v55 - v57];
                    v60 = *(int8x16_t *)&v8[-v57];
                    v61 = *(int8x16_t *)&v8[3 * v55 - v57];
                    v62 = vabdq_u8((uint8x16_t)v58, (uint8x16_t)v59);
                    v63 = vqaddq_u8(vqaddq_u8(v62, v62), vshrq_n_u8(vabdq_u8((uint8x16_t)v60, (uint8x16_t)v61), 1uLL));
                    v64.i64[0] = 0x8080808080808080;
                    v64.i64[1] = 0x8080808080808080;
                    v65 = veorq_s8(v58, v64);
                    v66 = veorq_s8(v59, v64);
                    v67 = vqsubq_s8(veorq_s8(v60, v64), veorq_s8(v61, v64));
                    v68.i64[0] = 0x303030303030303;
                    v68.i64[1] = 0x303030303030303;
                    v69 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v66.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v65.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v67.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v66, v68), v65, v68), v67)), (int8x16_t)vcgtq_u8(v63, v56));
                    v61.i64[0] = 0x404040404040404;
                    v61.i64[1] = 0x404040404040404;
                    *(int8x16_t *)v8 = veorq_s8(vqsubq_s8(v66, vshrq_n_s8(vqaddq_s8(v69, v61), 3uLL)), v64);
                    *(int8x16_t *)&v8[-v55] = veorq_s8(vqaddq_s8(v65, vshrq_n_s8(vqaddq_s8(v69, v68), 3uLL)), v64);
                  }
                  if (!v51)
                    vp8_loop_filter_bhs_neon((uint64_t)v8, v4[4], &v3[v53 + 3188]);
                }
                else
                {
                  v70 = &v3[v53 + 3124];
                  v71 = v70[64 * v92 + 260];
                  v94 = (unsigned __int8 *)(v70 + 64);
                  v74 = *((unsigned __int8 *)v70 + 128);
                  v73 = (unsigned __int8 *)(v70 + 128);
                  v72 = v74;
                  v75 = &v3[v71 + 3124];
                  v77 = *((unsigned __int8 *)v75 + 192);
                  v76 = (unsigned __int8 *)(v75 + 192);
                  vp8_mbloop_filter_vertical_edge_y_neon((uint64_t)v8, v4[4], v95[v53], v72, v77);
                  if (!v51)
                  {
                    v78 = v4[4];
                    v79 = *v94;
                    v89 = *v73;
                    v80 = *v76;
                    vp8_loop_filter_vertical_edge_y_neon((uint64_t)(v8 + 4), v78, v79, v89, v80);
                    vp8_loop_filter_vertical_edge_y_neon((uint64_t)(v8 + 8), v78, v79, v89, v80);
                    v81 = v78;
                    v82 = v80;
                    v4 = v90;
                    v3 = v91;
                    vp8_loop_filter_vertical_edge_y_neon((uint64_t)(v8 + 12), v81, v79, v89, v82);
                  }
                  if (v96)
                    vp8_mbloop_filter_horizontal_edge_y_neon((uint64_t)v8, v4[4], v95[v53], *v73, *v76);
                  if (!v51)
                  {
                    v83 = v4[4];
                    v84 = *v94;
                    v85 = *v73;
                    v86 = *v76;
                    vp8_loop_filter_horizontal_edge_y_neon((uint64_t)&v8[4 * v83], v83, v84, v85, v86);
                    vp8_loop_filter_horizontal_edge_y_neon((uint64_t)&v8[8 * v83], v83, v84, v85, v86);
                    v87 = v85;
                    v88 = v86;
                    v4 = v90;
                    v3 = v91;
                    vp8_loop_filter_horizontal_edge_y_neon((uint64_t)&v8[12 * (int)v83], v83, v84, v87, v88);
                  }
                }
              }
              v8 += 16;
              v5 += 76;
              v7 = *((_DWORD *)v3 + 762);
            }
          }
          v6 = *((_DWORD *)v3 + 761);
        }
        v8 = &v8[16 * v4[4] - *v4];
        v5 += 76;
        ++v96;
      }
      while (v96 < v6);
    }
  }
}

void vp8_loop_filter_partial_frame(uint64_t a1, _BYTE *a2, int a3)
{
  int *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int8x16_t *v16;
  uint64_t v17;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8x16_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  int8x16_t *v26;
  int8x16_t v27;
  uint8x16_t *v28;
  int8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint8x16_t v42;
  uint64_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  uint8x16_t v48;
  uint8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint8x16_t v65;
  uint64_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  uint8x16_t v71;
  uint8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned __int8 *v82;
  unsigned int v83;
  int *v84;
  uint64_t v85;
  unsigned __int8 *v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  const char *v100;
  uint8x16_t v101;
  uint64_t v102;
  int8x16_t *v103;
  int8x16_t v104;
  int8x16_t *v105;
  int8x16_t v106;
  uint8x16_t *v107;
  int8x16_t v108;
  uint8x16_t v109;
  uint8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  int v127;
  unsigned int v128;
  int v129;
  int v130;
  int *v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  uint64_t v135;

  v3 = *(int **)(a1 + 1848);
  v4 = *v3;
  v5 = v3[1] >> 4;
  v132 = *(unsigned int *)(a1 + 3028);
  vp8_loop_filter_frame_init(a1, a2, a3);
  if (v5 >= 0)
    v6 = v5;
  else
    v6 = v5 + 7;
  v7 = v6 >> 3;
  if ((v5 + 7) < 0xF)
    v8 = 1;
  else
    v8 = v7;
  v127 = v8;
  v128 = v4;
  if (v8 >= 1 && v4 >= 16)
  {
    v10 = 0;
    v11 = v4 >> 4;
    v12 = a1 + 3124;
    v13 = v3[1] >> 5;
    v14 = (unsigned __int8 *)(*(_QWORD *)(a1 + 3104) + 76 * (v13 + v13 * (v4 >> 4)));
    LODWORD(v15) = v3[4];
    v16 = (int8x16_t *)(*((_QWORD *)v3 + 7) + 16 * v13 * (int)v15);
    if ((int)v128 >> 4 <= 1)
      v11 = 1;
    v126 = v11 - 1;
    v135 = a1 + 3124;
    v131 = v3;
    while (1)
    {
      v17 = *v14;
      v19 = (_DWORD)v17 != 4 && (_DWORD)v17 != 9 && v14[9] != 0;
      v133 = v14;
      v20 = a1 + 3124 + 16 * v14[11] + 4 * v14[2] + *(unsigned __int8 *)(a1 + 3124 + v17 + 388);
      v21 = *(unsigned __int8 *)(v20 + 196);
      if (!*(_BYTE *)(v20 + 196))
        goto LABEL_50;
      if (*(_DWORD *)(a1 + 3120))
        break;
      v97 = a1 + 3124 + v21;
      v98 = (unsigned __int8 *)(v97 + 128);
      v99 = (unsigned __int8 *)(a1 + 3124 + *(unsigned __int8 *)(v97 + (v132 << 6) + 260) + 192);
      if (v19)
      {
        vp8_mbloop_filter_horizontal_edge_y_neon((uint64_t)v16, v15, *(unsigned __int8 *)(v12 + v21), *v98, *v99);
        if (v128 >= 0x20)
          goto LABEL_28;
      }
      else
      {
        v117 = *(unsigned __int8 *)(a1 + v21 + 3188);
        v118 = *v98;
        v130 = v10;
        v119 = *v99;
        vp8_loop_filter_vertical_edge_y_neon((uint64_t)v16->i64 + 4, v15, v117, v118, v119);
        vp8_loop_filter_vertical_edge_y_neon((uint64_t)&v16->i64[1], v15, v117, v118, v119);
        vp8_loop_filter_vertical_edge_y_neon((uint64_t)&v16->i64[1] + 4, v15, v117, v118, v119);
        vp8_mbloop_filter_horizontal_edge_y_neon((uint64_t)v16, v3[4], *(unsigned __int8 *)(v135 + v21), *v98, *v99);
        v120 = v3[4];
        v121 = *(unsigned __int8 *)(a1 + v21 + 3188);
        v122 = *v98;
        v123 = *v99;
        vp8_loop_filter_horizontal_edge_y_neon((uint64_t)v16->i64 + 4 * v120, v3[4], v121, v122, v123);
        vp8_loop_filter_horizontal_edge_y_neon((uint64_t)&v16->i64[v120], v120, v121, v122, v123);
        v124 = v122;
        v12 = a1 + 3124;
        v125 = v123;
        v10 = v130;
        vp8_loop_filter_horizontal_edge_y_neon((uint64_t)v16->i64 + 12 * (int)v120, v120, v121, v124, v125);
        if (v128 >= 0x20)
        {
LABEL_28:
          v129 = v10;
          v38 = (uint64_t)&v16[1].i64[1] + 4;
          v39 = v126;
          v40 = v133;
          do
          {
            v56 = v40;
            v58 = v40[76];
            v40 += 76;
            v57 = v58;
            v60 = v58 != 4 && (_DWORD)v57 != 9 && v56[85] != 0;
            v61 = a1 + 3124 + 16 * v56[87] + 4 * v56[78] + *(unsigned __int8 *)(a1 + 3124 + v57 + 388);
            v62 = *(unsigned __int8 *)(v61 + 196);
            if (*(_BYTE *)(v61 + 196))
            {
              if (*(_DWORD *)(a1 + 3120))
              {
                v63 = (const char *)(v12 + v62);
                vp8_loop_filter_mbvs_neon((__int8 *)(v38 - 12), v3[4], v63);
                v64 = v3[4];
                if (v60)
                {
                  v65 = (uint8x16_t)vld1q_dup_s8(v63);
                  v66 = 2 * (int)v64;
                  v67 = *(int8x16_t *)(v38 - v66 - 12);
                  v68 = *(int8x16_t *)(v38 + v64 - v66 - 12);
                  v69 = *(int8x16_t *)(v38 - v66 + 2 * v64 - 12);
                  v70 = *(int8x16_t *)(v38 + 3 * v64 - v66 - 12);
                  v71 = vabdq_u8((uint8x16_t)v68, (uint8x16_t)v69);
                  v72 = vqaddq_u8(vqaddq_u8(v71, v71), vshrq_n_u8(vabdq_u8((uint8x16_t)v67, (uint8x16_t)v70), 1uLL));
                  v73.i64[0] = 0x8080808080808080;
                  v73.i64[1] = 0x8080808080808080;
                  v74 = veorq_s8(v68, v73);
                  v75 = veorq_s8(v69, v73);
                  v76 = vqsubq_s8(veorq_s8(v67, v73), veorq_s8(v70, v73));
                  v77.i64[0] = 0x303030303030303;
                  v77.i64[1] = 0x303030303030303;
                  v78 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v75.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v74.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v76.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v75, v77), v74, v77), v76)), (int8x16_t)vcgtq_u8(v72, v65));
                  v70.i64[0] = 0x404040404040404;
                  v70.i64[1] = 0x404040404040404;
                  *(int8x16_t *)(v38 - 12) = veorq_s8(vqsubq_s8(v75, vshrq_n_s8(vqaddq_s8(v78, v70), 3uLL)), v73);
                  *(int8x16_t *)(v38 - v64 - 12) = veorq_s8(vqaddq_s8(v74, vshrq_n_s8(vqaddq_s8(v78, v77), 3uLL)), v73);
                }
                else
                {
                  vp8_loop_filter_bvs_neon((_BYTE *)(v38 - 12), v64, (const char *)(a1 + v62 + 3188));
                  v41 = v3[4];
                  v42 = (uint8x16_t)vld1q_dup_s8(v63);
                  v43 = 2 * (int)v41;
                  v44 = *(int8x16_t *)(v38 - v43 - 12);
                  v45 = *(int8x16_t *)(v38 + v41 - v43 - 12);
                  v46 = *(int8x16_t *)(v38 - v43 + 2 * v41 - 12);
                  v47 = *(int8x16_t *)(v38 + 3 * v41 - v43 - 12);
                  v48 = vabdq_u8((uint8x16_t)v45, (uint8x16_t)v46);
                  v49 = vqaddq_u8(vqaddq_u8(v48, v48), vshrq_n_u8(vabdq_u8((uint8x16_t)v44, (uint8x16_t)v47), 1uLL));
                  v50.i64[0] = 0x8080808080808080;
                  v50.i64[1] = 0x8080808080808080;
                  v51 = veorq_s8(v45, v50);
                  v52 = veorq_s8(v46, v50);
                  v53 = vqsubq_s8(veorq_s8(v44, v50), veorq_s8(v47, v50));
                  v54.i64[0] = 0x303030303030303;
                  v54.i64[1] = 0x303030303030303;
                  v55 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v52.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v51.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v53.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v52, v54), v51, v54), v53)), (int8x16_t)vcgtq_u8(v49, v42));
                  v47.i64[0] = 0x404040404040404;
                  v47.i64[1] = 0x404040404040404;
                  *(int8x16_t *)(v38 - 12) = veorq_s8(vqsubq_s8(v52, vshrq_n_s8(vqaddq_s8(v55, v47), 3uLL)), v50);
                  *(int8x16_t *)(v38 - v41 - 12) = veorq_s8(vqaddq_s8(v51, vshrq_n_s8(vqaddq_s8(v55, v54), 3uLL)), v50);
                  vp8_loop_filter_bhs_neon(v38 - 12, v3[4], (const char *)(a1 + v62 + 3188));
                }
                v12 = a1 + 3124;
              }
              else
              {
                v134 = v40;
                v79 = a1 + 3124 + v62;
                v80 = *(unsigned __int8 *)(v79 + (v132 << 6) + 260);
                v83 = *(unsigned __int8 *)(v79 + 128);
                v82 = (unsigned __int8 *)(v79 + 128);
                v81 = v83;
                v84 = v3;
                v85 = a1 + 3124 + v80;
                v87 = *(unsigned __int8 *)(v85 + 192);
                v86 = (unsigned __int8 *)(v85 + 192);
                vp8_mbloop_filter_vertical_edge_y_neon(v38 - 12, v84[4], *(unsigned __int8 *)(v12 + v62), v81, v87);
                v88 = v84[4];
                if (v60)
                {
                  vp8_mbloop_filter_horizontal_edge_y_neon(v38 - 12, v88, *(unsigned __int8 *)(v12 + v62), *v82, *v86);
                }
                else
                {
                  v89 = *(unsigned __int8 *)(a1 + v62 + 3188);
                  v90 = *v82;
                  v91 = *v86;
                  vp8_loop_filter_vertical_edge_y_neon(v38 - 8, v88, v89, v90, v91);
                  vp8_loop_filter_vertical_edge_y_neon(v38 - 4, v88, v89, v90, v91);
                  vp8_loop_filter_vertical_edge_y_neon(v38, v88, v89, v90, v91);
                  vp8_mbloop_filter_horizontal_edge_y_neon(v38 - 12, v131[4], *(unsigned __int8 *)(v135 + v62), *v82, *v86);
                  v92 = v131[4];
                  v93 = *(unsigned __int8 *)(a1 + v62 + 3188);
                  v94 = *v82;
                  v95 = *v86;
                  vp8_loop_filter_horizontal_edge_y_neon(v38 + 4 * v92 - 12, v131[4], v93, v94, v95);
                  vp8_loop_filter_horizontal_edge_y_neon(v38 + 8 * v92 - 12, v92, v93, v94, v95);
                  v96 = v94;
                  v12 = a1 + 3124;
                  vp8_loop_filter_horizontal_edge_y_neon(v38 + 12 * (int)v92 - 12, v92, v93, v96, v95);
                }
                v3 = v131;
                v40 = v134;
              }
            }
            v38 += 16;
            --v39;
          }
          while (v39);
          v16 = (int8x16_t *)(v38 - 28);
          v10 = v129;
          goto LABEL_17;
        }
      }
LABEL_51:
      v40 = v133;
LABEL_17:
      v15 = v3[4];
      v16 = (int8x16_t *)((char *)&v16[v15 + 1] - *v3);
      v14 = v40 + 152;
      if (++v10 == v127)
        return;
    }
    if (v19)
    {
      v22 = (const char *)(v12 + v21);
      v23 = (uint8x16_t)vld1q_dup_s8(v22);
      v24 = (int8x16_t *)((char *)v16 - 2 * (int)v15);
      v25 = *v24;
      v26 = (int8x16_t *)((char *)v24 + (int)v15);
      v27 = *v26;
      v28 = (uint8x16_t *)&v26->i8[(int)v15];
      v29 = *(int8x16_t *)((char *)v28 + (int)v15);
      v30 = vabdq_u8((uint8x16_t)v27, *v28);
      v31 = vqaddq_u8(vqaddq_u8(v30, v30), vshrq_n_u8(vabdq_u8((uint8x16_t)v25, (uint8x16_t)v29), 1uLL));
      v32.i64[0] = 0x8080808080808080;
      v32.i64[1] = 0x8080808080808080;
      v33 = veorq_s8(v27, v32);
      v34 = veorq_s8(*(int8x16_t *)v28, v32);
      v35 = vqsubq_s8(veorq_s8(v25, v32), veorq_s8(v29, v32));
      v36.i64[0] = 0x303030303030303;
      v36.i64[1] = 0x303030303030303;
      v37 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v34.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v33.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v35.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v34, v36), v33, v36), v35)), (int8x16_t)vcgtq_u8(v31, v23));
      v29.i64[0] = 0x404040404040404;
      v29.i64[1] = 0x404040404040404;
      *v16 = veorq_s8(vqsubq_s8(v34, vshrq_n_s8(vqaddq_s8(v37, v29), 3uLL)), v32);
      *(int8x16_t *)((char *)v16 - (int)v15) = veorq_s8(vqaddq_s8(v33, vshrq_n_s8(vqaddq_s8(v37, v36), 3uLL)), v32);
      if (v128 >= 0x20)
        goto LABEL_28;
      goto LABEL_51;
    }
    vp8_loop_filter_bvs_neon(v16, v15, (const char *)(a1 + v21 + 3188));
    v100 = (const char *)(v12 + v21);
    v101 = (uint8x16_t)vld1q_dup_s8(v100);
    v102 = v3[4];
    v103 = (int8x16_t *)((char *)v16 - 2 * (int)v102);
    v104 = *v103;
    v105 = (int8x16_t *)((char *)v103 + v102);
    v106 = *v105;
    v107 = (uint8x16_t *)&v105->i8[v102];
    v108 = *(int8x16_t *)((char *)v107 + v102);
    v109 = vabdq_u8((uint8x16_t)v106, *v107);
    v110 = vqaddq_u8(vqaddq_u8(v109, v109), vshrq_n_u8(vabdq_u8((uint8x16_t)v104, (uint8x16_t)v108), 1uLL));
    v111.i64[0] = 0x8080808080808080;
    v111.i64[1] = 0x8080808080808080;
    v112 = veorq_s8(v106, v111);
    v113 = veorq_s8(*(int8x16_t *)v107, v111);
    v114 = vqsubq_s8(veorq_s8(v104, v111), veorq_s8(v108, v111));
    v115.i64[0] = 0x303030303030303;
    v115.i64[1] = 0x303030303030303;
    v116 = vbicq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v113.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v112.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v114.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v113, v115), v112, v115), v114)), (int8x16_t)vcgtq_u8(v110, v101));
    v108.i64[0] = 0x404040404040404;
    v108.i64[1] = 0x404040404040404;
    *v16 = veorq_s8(vqsubq_s8(v113, vshrq_n_s8(vqaddq_s8(v116, v108), 3uLL)), v111);
    *(int8x16_t *)((char *)v16 - v102) = veorq_s8(vqaddq_s8(v112, vshrq_n_s8(vqaddq_s8(v116, v115), 3uLL)), v111);
    vp8_loop_filter_bhs_neon((uint64_t)v16, v3[4], (const char *)(a1 + v21 + 3188));
LABEL_50:
    if (v128 >= 0x20)
      goto LABEL_28;
    goto LABEL_51;
  }
}

int8x16_t vp8_loop_filter_horizontal_edge_y_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint8x16_t *v5;
  uint8x16_t v6;
  uint8x16_t *v7;
  uint8x16_t v8;
  int8x16_t *v9;
  int8x16_t v10;
  int8x16_t *v11;
  int8x16_t v12;
  int8x16_t *v13;
  int8x16_t v14;
  int8x16_t *v15;
  int8x16_t v16;
  uint8x16_t *v17;
  uint8x16_t v18;
  uint8x16_t *v19;
  uint8x16_t v20;
  uint8x16_t v21;
  int8x16_t v22;
  uint8x16_t v23;
  int8x16_t v24;
  uint8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t result;
  int8x16_t *v41;
  int8x16_t *v42;
  int8x16_t *v43;

  v5 = (uint8x16_t *)(a1 - 4 * a2);
  v6 = *v5;
  v7 = (uint8x16_t *)((char *)v5 + a2);
  v8 = *v7;
  v9 = (int8x16_t *)&v7->i8[a2];
  v10 = *v9;
  v11 = (int8x16_t *)((char *)v9 + a2);
  v12 = *v11;
  v13 = (int8x16_t *)((char *)v11 + a2);
  v14 = *v13;
  v15 = (int8x16_t *)((char *)v13 + a2);
  v16 = *v15;
  v17 = (uint8x16_t *)&v15->i8[a2];
  v18 = *v17;
  v19 = (uint8x16_t *)((char *)v17 + a2);
  v20 = vmaxq_u8(vabdq_u8(v6, v8), vabdq_u8(v8, (uint8x16_t)v10));
  v21 = vmaxq_u8(vabdq_u8(v18, (uint8x16_t)v16), vabdq_u8(*v19, v18));
  v22 = (int8x16_t)vmaxq_u8(vabdq_u8((uint8x16_t)v16, (uint8x16_t)v14), vabdq_u8((uint8x16_t)v10, (uint8x16_t)v12));
  v23 = vabdq_u8((uint8x16_t)v12, (uint8x16_t)v14);
  v24 = (int8x16_t)vmaxq_u8(vmaxq_u8(v20, (uint8x16_t)v22), v21);
  v25 = vabdq_u8((uint8x16_t)v10, (uint8x16_t)v16);
  v26 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), (uint8x16_t)v24);
  v24.i64[0] = 0x8080808080808080;
  v24.i64[1] = 0x8080808080808080;
  v27 = veorq_s8(v16, v24);
  v28 = veorq_s8(v14, v24);
  v29 = veorq_s8(v12, v24);
  v30 = veorq_s8(v10, v24);
  v31 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a3), vqaddq_u8(vqaddq_u8(v23, v23), vshrq_n_u8(v25, 1uLL)));
  v32 = (int8x16_t)vcgtq_u8((uint8x16_t)v22, (uint8x16_t)vdupq_n_s8(a5));
  v22.i64[0] = 0x303030303030303;
  v22.i64[1] = 0x303030303030303;
  v33 = vandq_s8(vqsubq_s8(v30, v27), v32);
  v34 = vandq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v28.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v29.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v33.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v28, v22), v29, v22), v33)), vandq_s8(v31, v26));
  v35 = vqaddq_s8(v34, v22);
  v33.i64[0] = 0x404040404040404;
  v33.i64[1] = 0x404040404040404;
  v36 = vshrq_n_s8(vqaddq_s8(v34, v33), 3uLL);
  v37 = vqsubq_s8(v28, v36);
  v38 = vbicq_s8(vrshrq_n_s8(v36, 1uLL), v32);
  v39 = vqaddq_s8(v30, v38);
  result = veorq_s8(vqsubq_s8(v27, v38), v24);
  v41 = (int8x16_t *)((char *)v19 - 5 * a2);
  *v41 = veorq_s8(v39, v24);
  v42 = (int8x16_t *)((char *)v41 + a2);
  *v42 = veorq_s8(vqaddq_s8(v29, vshrq_n_s8(v35, 3uLL)), v24);
  v43 = (int8x16_t *)((char *)v42 + a2);
  *v43 = veorq_s8(v37, v24);
  *(int8x16_t *)((char *)v43 + a2) = result;
  return result;
}

double vp8_loop_filter_horizontal_edge_uv_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  uint8x16_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint8x16_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint8x16_t v14;
  int8x8_t *v15;
  uint64_t v16;
  int8x8_t *v17;
  int8x8_t v18;
  uint64_t *v19;
  int8x8_t v20;
  int8x8_t *v21;
  uint8x16_t v22;
  uint64_t *v23;
  int8x8_t v24;
  uint64_t *v25;
  uint8x16_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint8x16_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint8x16_t v33;
  uint8x16_t v34;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  int8x16_t v39;
  uint8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int16x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  double result;

  v6 = 4 * a2;
  v7.i64[0] = *(_QWORD *)(a1 - v6);
  v8 = (uint64_t *)(a1 - v6 + a2);
  v9 = (uint64_t *)(a6 - v6 + a2);
  v10.i64[0] = *v8;
  v11 = (uint64_t *)((char *)v8 + a2);
  v12 = *v9;
  v13 = (uint64_t *)((char *)v9 + a2);
  v14.i64[0] = *v11;
  v15 = (int8x8_t *)((char *)v11 + a2);
  v16 = *v13;
  v17 = (int8x8_t *)((char *)v13 + a2);
  v18 = *v15;
  v19 = (uint64_t *)((char *)v15 + a2);
  v20 = *v17;
  v21 = (int8x8_t *)((char *)v17 + a2);
  v22.i64[0] = *v19;
  v23 = (uint64_t *)((char *)v19 + a2);
  v24 = *v21;
  v25 = (uint64_t *)((char *)v21 + a2);
  v26.i64[0] = *v23;
  v27 = (uint64_t *)((char *)v23 + a2);
  v28 = *v25;
  v29 = (uint64_t *)((char *)v25 + a2);
  v30.i64[0] = *v27;
  v31 = (uint64_t *)((char *)v27 + a2);
  v32 = (uint64_t *)((char *)v29 + a2);
  v7.i64[1] = *(_QWORD *)(a6 - v6);
  v10.i64[1] = v12;
  v33.i64[0] = *v31;
  v14.i64[1] = v16;
  *(int8x8_t *)v34.i8 = v18;
  v34.u64[1] = (unint64_t)v20;
  v22.u64[1] = (unint64_t)v24;
  v26.i64[1] = v28;
  v30.i64[1] = *v29;
  v33.i64[1] = *v32;
  v35 = vmaxq_u8(vabdq_u8(v7, v10), vabdq_u8(v10, v14));
  v36 = vmaxq_u8(vabdq_u8(v30, v26), vabdq_u8(v33, v30));
  v37 = vmaxq_u8(vabdq_u8(v26, v22), vabdq_u8(v14, v34));
  v38 = vabdq_u8(v34, v22);
  v39 = (int8x16_t)vmaxq_u8(vmaxq_u8(v35, v37), v36);
  v40 = vabdq_u8(v14, v26);
  v41 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), (uint8x16_t)v39);
  v39.i64[0] = 0x8080808080808080;
  v39.i64[1] = 0x8080808080808080;
  v42 = veorq_s8((int8x16_t)v26, v39);
  v43 = veorq_s8((int8x16_t)v14, v39);
  v44 = (int8x16_t)vcgtq_u8(v37, (uint8x16_t)vdupq_n_s8(a5));
  v45 = vmlsl_s8(vmull_s8(veor_s8(v24, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), veor_s8(v20, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303);
  v46 = vandq_s8(vqsubq_s8(v43, v42), v44);
  v47 = vandq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(veor_s8(*(int8x8_t *)v22.i8, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), veor_s8(v18, (int8x8_t)0x8080808080808080), (int8x8_t)0x303030303030303), *(int8x8_t *)v46.i8)), vaddw_high_s8(v45, v46)), vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a3), vqaddq_u8(vqaddq_u8(v38, v38), vshrq_n_u8(v40, 1uLL))), v41));
  v41.i64[0] = 0x303030303030303;
  v41.i64[1] = 0x303030303030303;
  v48 = vqaddq_s8(v47, v41);
  v46.i64[0] = 0x404040404040404;
  v46.i64[1] = 0x404040404040404;
  v49 = vshrq_n_s8(vqaddq_s8(v47, v46), 3uLL);
  v50 = vqsubq_s8(veorq_s8((int8x16_t)v22, v39), v49);
  v51 = vbicq_s8(vrshrq_n_s8(v49, 1uLL), v44);
  v52 = vqaddq_s8(v43, v51);
  v53 = veorq_s8(vqsubq_s8(v42, v51), v39);
  v54 = veorq_s8(v50, v39);
  v55 = veorq_s8(vqaddq_s8(veorq_s8((int8x16_t)v34, v39), vshrq_n_s8(v48, 3uLL)), v39);
  v56 = veorq_s8(v52, v39);
  v57 = 5 * a2;
  v58 = (uint64_t *)((char *)v31 - v57);
  *v58 = v56.i64[0];
  v59 = (_QWORD *)((char *)v58 + a2);
  *v59 = v55.i64[0];
  v60 = (_QWORD *)((char *)v59 + a2);
  *v60 = v54.i64[0];
  *(_QWORD *)((char *)v60 + a2) = v53.i64[0];
  v61 = (uint64_t *)((char *)v32 - v57);
  *v61 = vextq_s8(v56, v56, 8uLL).u64[0];
  v62 = (_QWORD *)((char *)v61 + a2);
  *v62 = vextq_s8(v55, v55, 8uLL).u64[0];
  v63 = (_QWORD *)((char *)v62 + a2);
  *v63 = vextq_s8(v54, v54, 8uLL).u64[0];
  *(_QWORD *)&result = vextq_s8(v53, v53, 8uLL).u64[0];
  *(double *)((char *)v63 + a2) = result;
  return result;
}

double vp8_loop_filter_vertical_edge_y_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  _BYTE *v5;
  uint64_t v6;
  int32x4_t v7;
  uint64_t *v8;
  int32x4_t v9;
  uint64_t *v10;
  int32x4_t v11;
  uint64_t *v12;
  int32x4_t v13;
  uint64_t *v14;
  int32x4_t v15;
  uint64_t *v16;
  int32x4_t v17;
  uint64_t *v18;
  int32x4_t v19;
  uint64_t *v20;
  int32x4_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint8x16_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  int8x16_t v61;
  uint8x16_t v62;
  int8x16_t v63;
  uint8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  double result;
  _BYTE *v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;
  _BYTE *v98;

  v6 = *(_QWORD *)(a1 - 4);
  v5 = (_BYTE *)(a1 - 4);
  v7.i64[0] = v6;
  v8 = (uint64_t *)&v5[a2];
  v9.i64[0] = *v8;
  v10 = (uint64_t *)((char *)v8 + a2);
  v11.i64[0] = *v10;
  v12 = (uint64_t *)((char *)v10 + a2);
  v13.i64[0] = *v12;
  v14 = (uint64_t *)((char *)v12 + a2);
  v15.i64[0] = *v14;
  v16 = (uint64_t *)((char *)v14 + a2);
  v17.i64[0] = *v16;
  v18 = (uint64_t *)((char *)v16 + a2);
  v19.i64[0] = *v18;
  v20 = (uint64_t *)((char *)v18 + a2);
  v21.i64[0] = *v20;
  v22 = (uint64_t *)((char *)v20 + a2);
  v23 = *v22;
  v24 = (uint64_t *)((char *)v22 + a2);
  v25 = *v24;
  v26 = (uint64_t *)((char *)v24 + a2);
  v27 = *v26;
  v28 = (uint64_t *)((char *)v26 + a2);
  v29 = *v28;
  v30 = (uint64_t *)((char *)v28 + a2);
  v31 = *v30;
  v32 = (uint64_t *)((char *)v30 + a2);
  v33 = *v32;
  v34 = (uint64_t *)((char *)v32 + a2);
  v7.i64[1] = v23;
  v9.i64[1] = v25;
  v11.i64[1] = v27;
  v13.i64[1] = v29;
  v15.i64[1] = v31;
  v17.i64[1] = v33;
  v19.i64[1] = *v34;
  v21.i64[1] = *(uint64_t *)((char *)v34 + a2);
  v35 = (int16x8_t)vtrn1q_s32(v7, v15);
  v36 = (int16x8_t)vtrn2q_s32(v7, v15);
  v37 = (int16x8_t)vtrn1q_s32(v9, v17);
  v38 = (int16x8_t)vtrn2q_s32(v9, v17);
  v39 = (int16x8_t)vtrn1q_s32(v11, v19);
  v40 = (int16x8_t)vtrn2q_s32(v11, v19);
  v41 = (int16x8_t)vtrn1q_s32(v13, v21);
  v42 = (int16x8_t)vtrn2q_s32(v13, v21);
  v43 = (int8x16_t)vtrn1q_s16(v35, v39);
  v44 = (int8x16_t)vtrn2q_s16(v35, v39);
  v45 = (int8x16_t)vtrn1q_s16(v37, v41);
  v46 = (int8x16_t)vtrn2q_s16(v37, v41);
  v47 = (int8x16_t)vtrn1q_s16(v36, v40);
  v48 = (int8x16_t)vtrn2q_s16(v36, v40);
  v49 = (int8x16_t)vtrn1q_s16(v38, v42);
  v50 = (int8x16_t)vtrn2q_s16(v38, v42);
  v51 = (uint8x16_t)vtrn1q_s8(v43, v45);
  v52 = (uint8x16_t)vtrn2q_s8(v43, v45);
  v53 = vtrn1q_s8(v44, v46);
  v54 = vtrn2q_s8(v44, v46);
  v55 = vtrn1q_s8(v47, v49);
  v56 = vtrn2q_s8(v47, v49);
  v57 = (uint8x16_t)vtrn1q_s8(v48, v50);
  v58 = (uint8x16_t)vtrn2q_s8(v48, v50);
  v59 = vmaxq_u8(vabdq_u8(v51, v52), vabdq_u8(v52, (uint8x16_t)v53));
  v60 = vmaxq_u8(vabdq_u8(v57, (uint8x16_t)v56), vabdq_u8(v58, v57));
  v61 = (int8x16_t)vmaxq_u8(vabdq_u8((uint8x16_t)v56, (uint8x16_t)v55), vabdq_u8((uint8x16_t)v53, (uint8x16_t)v54));
  v62 = vabdq_u8((uint8x16_t)v54, (uint8x16_t)v55);
  v63 = (int8x16_t)vmaxq_u8(vmaxq_u8(v59, (uint8x16_t)v61), v60);
  v64 = vabdq_u8((uint8x16_t)v53, (uint8x16_t)v56);
  v65 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), (uint8x16_t)v63);
  v63.i64[0] = 0x8080808080808080;
  v63.i64[1] = 0x8080808080808080;
  v66 = veorq_s8(v56, v63);
  v67 = veorq_s8(v55, v63);
  v68 = veorq_s8(v54, v63);
  v69 = veorq_s8(v53, v63);
  v70 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a3), vqaddq_u8(vqaddq_u8(v62, v62), vshrq_n_u8(v64, 1uLL)));
  v71 = (int8x16_t)vcgtq_u8((uint8x16_t)v61, (uint8x16_t)vdupq_n_s8(a5));
  v61.i64[0] = 0x303030303030303;
  v61.i64[1] = 0x303030303030303;
  v72 = vandq_s8(vqsubq_s8(v69, v66), v71);
  v73 = vandq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v67.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v68.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v72.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v67, v61), v68, v61), v72)), vandq_s8(v70, v65));
  v74 = vqaddq_s8(v73, v61);
  v72.i64[0] = 0x404040404040404;
  v72.i64[1] = 0x404040404040404;
  v75 = vshrq_n_s8(vqaddq_s8(v73, v72), 3uLL);
  v76 = vqsubq_s8(v67, v75);
  v77 = vbicq_s8(vrshrq_n_s8(v75, 1uLL), v71);
  v78 = vqaddq_s8(v69, v77);
  v79 = veorq_s8(vqsubq_s8(v66, v77), v63);
  v80 = veorq_s8(v76, v63);
  v81 = veorq_s8(vqaddq_s8(v68, vshrq_n_s8(v74, 3uLL)), v63);
  v82 = veorq_s8(v78, v63);
  v83 = &v5[a2 + 2];
  v5[2] = v82.i8[0];
  v5[3] = v81.i8[0];
  v5[4] = v80.i8[0];
  v5[5] = v79.i8[0];
  v84 = &v5[8 * a2 + 2];
  *v83 = v82.i8[1];
  v83[1] = v81.i8[1];
  v83[2] = v80.i8[1];
  v83[3] = v79.i8[1];
  v85 = &v83[a2];
  *v85 = v82.i8[2];
  v85[1] = v81.i8[2];
  v85[2] = v80.i8[2];
  v85[3] = v79.i8[2];
  v86 = &v85[a2];
  *v86 = v82.i8[3];
  v86[1] = v81.i8[3];
  v86[2] = v80.i8[3];
  v86[3] = v79.i8[3];
  v87 = &v86[a2];
  *v87 = v82.i8[4];
  v87[1] = v81.i8[4];
  v87[2] = v80.i8[4];
  v87[3] = v79.i8[4];
  v88 = &v87[a2];
  *v88 = v82.i8[5];
  v88[1] = v81.i8[5];
  v88[2] = v80.i8[5];
  v88[3] = v79.i8[5];
  v89 = &v88[a2];
  *v89 = v82.i8[6];
  v89[1] = v81.i8[6];
  v89[2] = v80.i8[6];
  v89[3] = v79.i8[6];
  v90 = &v89[a2];
  *(_QWORD *)&result = vextq_s8(v82, v82, 8uLL).u64[0];
  v78.i64[0] = vextq_s8(v81, v81, 8uLL).u64[0];
  *v90 = v82.i8[7];
  v90[1] = v81.i8[7];
  v90[2] = v80.i8[7];
  v90[3] = v79.i8[7];
  v74.i64[0] = vextq_s8(v80, v80, 8uLL).u64[0];
  v63.i64[0] = vextq_s8(v79, v79, 8uLL).u64[0];
  *v84 = LOBYTE(result);
  v84[1] = v78.i8[0];
  v84[2] = v74.i8[0];
  v84[3] = v63.i8[0];
  v92 = &v84[a2];
  *v92 = BYTE1(result);
  v92[1] = v78.i8[1];
  v92[2] = v74.i8[1];
  v92[3] = v63.i8[1];
  v93 = &v92[a2];
  *v93 = BYTE2(result);
  v93[1] = v78.i8[2];
  v93[2] = v74.i8[2];
  v93[3] = v63.i8[2];
  v94 = &v93[a2];
  *v94 = BYTE3(result);
  v94[1] = v78.i8[3];
  v94[2] = v74.i8[3];
  v94[3] = v63.i8[3];
  v95 = &v94[a2];
  *v95 = BYTE4(result);
  v95[1] = v78.i8[4];
  v95[2] = v74.i8[4];
  v95[3] = v63.i8[4];
  v96 = &v95[a2];
  *v96 = BYTE5(result);
  v96[1] = v78.i8[5];
  v96[2] = v74.i8[5];
  v96[3] = v63.i8[5];
  v97 = &v96[a2];
  *v97 = BYTE6(result);
  v97[1] = v78.i8[6];
  v97[2] = v74.i8[6];
  v97[3] = v63.i8[6];
  v98 = &v97[a2];
  *v98 = HIBYTE(result);
  v98[1] = v78.i8[7];
  v98[2] = v74.i8[7];
  v98[3] = v63.i8[7];
  return result;
}

double vp8_loop_filter_vertical_edge_uv_neon(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  _BYTE *v6;
  uint64_t v7;
  int32x4_t v8;
  uint64_t *v9;
  int32x4_t v10;
  uint64_t *v11;
  int32x4_t v12;
  uint64_t *v13;
  int32x4_t v14;
  uint64_t *v15;
  int32x4_t v16;
  uint64_t *v17;
  int32x4_t v18;
  uint64_t *v19;
  int32x4_t v20;
  int32x4_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint8x16_t v51;
  uint8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint8x16_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  uint8x16_t v60;
  int8x16_t v61;
  uint8x16_t v62;
  int8x16_t v63;
  uint8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  double result;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;

  v7 = *(_QWORD *)(a1 - 4);
  v6 = (_BYTE *)(a1 - 4);
  v8.i64[0] = v7;
  v9 = (uint64_t *)&v6[a2];
  v10.i64[0] = *v9;
  v11 = (uint64_t *)((char *)v9 + a2);
  v12.i64[0] = *v11;
  v13 = (uint64_t *)((char *)v11 + a2);
  v14.i64[0] = *v13;
  v15 = (uint64_t *)((char *)v13 + a2);
  v16.i64[0] = *v15;
  v17 = (uint64_t *)((char *)v15 + a2);
  v18.i64[0] = *v17;
  v19 = (uint64_t *)((char *)v17 + a2);
  v20.i64[0] = *v19;
  v21.i64[0] = *(uint64_t *)((char *)v19 + a2);
  v23 = *(_QWORD *)(a6 - 4);
  v22 = (_BYTE *)(a6 - 4);
  v24 = (uint64_t *)&v22[a2];
  v25 = *v24;
  v26 = (uint64_t *)((char *)v24 + a2);
  v27 = *v26;
  v28 = (uint64_t *)((char *)v26 + a2);
  v29 = *v28;
  v30 = (uint64_t *)((char *)v28 + a2);
  v31 = *v30;
  v32 = (uint64_t *)((char *)v30 + a2);
  v33 = *v32;
  v34 = (uint64_t *)((char *)v32 + a2);
  v8.i64[1] = v23;
  v10.i64[1] = v25;
  v12.i64[1] = v27;
  v14.i64[1] = v29;
  v16.i64[1] = v31;
  v18.i64[1] = v33;
  v20.i64[1] = *v34;
  v21.i64[1] = *(uint64_t *)((char *)v34 + a2);
  v35 = (int16x8_t)vtrn1q_s32(v8, v16);
  v36 = (int16x8_t)vtrn2q_s32(v8, v16);
  v37 = (int16x8_t)vtrn1q_s32(v10, v18);
  v38 = (int16x8_t)vtrn2q_s32(v10, v18);
  v39 = (int16x8_t)vtrn1q_s32(v12, v20);
  v40 = (int16x8_t)vtrn2q_s32(v12, v20);
  v41 = (int16x8_t)vtrn1q_s32(v14, v21);
  v42 = (int16x8_t)vtrn2q_s32(v14, v21);
  v43 = (int8x16_t)vtrn1q_s16(v35, v39);
  v44 = (int8x16_t)vtrn2q_s16(v35, v39);
  v45 = (int8x16_t)vtrn1q_s16(v37, v41);
  v46 = (int8x16_t)vtrn2q_s16(v37, v41);
  v47 = (int8x16_t)vtrn1q_s16(v36, v40);
  v48 = (int8x16_t)vtrn2q_s16(v36, v40);
  v49 = (int8x16_t)vtrn1q_s16(v38, v42);
  v50 = (int8x16_t)vtrn2q_s16(v38, v42);
  v51 = (uint8x16_t)vtrn1q_s8(v43, v45);
  v52 = (uint8x16_t)vtrn2q_s8(v43, v45);
  v53 = vtrn1q_s8(v44, v46);
  v54 = vtrn2q_s8(v44, v46);
  v55 = vtrn1q_s8(v47, v49);
  v56 = vtrn2q_s8(v47, v49);
  v57 = (uint8x16_t)vtrn1q_s8(v48, v50);
  v58 = (uint8x16_t)vtrn2q_s8(v48, v50);
  v59 = vmaxq_u8(vabdq_u8(v51, v52), vabdq_u8(v52, (uint8x16_t)v53));
  v60 = vmaxq_u8(vabdq_u8(v57, (uint8x16_t)v56), vabdq_u8(v58, v57));
  v61 = (int8x16_t)vmaxq_u8(vabdq_u8((uint8x16_t)v56, (uint8x16_t)v55), vabdq_u8((uint8x16_t)v53, (uint8x16_t)v54));
  v62 = vabdq_u8((uint8x16_t)v54, (uint8x16_t)v55);
  v63 = (int8x16_t)vmaxq_u8(vmaxq_u8(v59, (uint8x16_t)v61), v60);
  v64 = vabdq_u8((uint8x16_t)v53, (uint8x16_t)v56);
  v65 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), (uint8x16_t)v63);
  v63.i64[0] = 0x8080808080808080;
  v63.i64[1] = 0x8080808080808080;
  v66 = veorq_s8(v56, v63);
  v67 = veorq_s8(v55, v63);
  v68 = veorq_s8(v54, v63);
  v69 = veorq_s8(v53, v63);
  v70 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a3), vqaddq_u8(vqaddq_u8(v62, v62), vshrq_n_u8(v64, 1uLL)));
  v71 = (int8x16_t)vcgtq_u8((uint8x16_t)v61, (uint8x16_t)vdupq_n_s8(a5));
  v61.i64[0] = 0x303030303030303;
  v61.i64[1] = 0x303030303030303;
  v72 = vandq_s8(vqsubq_s8(v69, v66), v71);
  v73 = vandq_s8(vqmovn_high_s16(vqmovn_s16(vaddw_s8(vmlsl_s8(vmull_s8(*(int8x8_t *)v67.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v68.i8, (int8x8_t)0x303030303030303), *(int8x8_t *)v72.i8)), vaddw_high_s8(vmlsl_high_s8(vmull_high_s8(v67, v61), v68, v61), v72)), vandq_s8(v70, v65));
  v74 = vqaddq_s8(v73, v61);
  v72.i64[0] = 0x404040404040404;
  v72.i64[1] = 0x404040404040404;
  v75 = vshrq_n_s8(vqaddq_s8(v73, v72), 3uLL);
  v76 = vqsubq_s8(v67, v75);
  v77 = vbicq_s8(vrshrq_n_s8(v75, 1uLL), v71);
  v78 = vqaddq_s8(v69, v77);
  v79 = veorq_s8(vqsubq_s8(v66, v77), v63);
  v80 = veorq_s8(v76, v63);
  v81 = veorq_s8(vqaddq_s8(v68, vshrq_n_s8(v74, 3uLL)), v63);
  v82 = veorq_s8(v78, v63);
  v6[2] = v82.i8[0];
  v6[3] = v81.i8[0];
  v6[4] = v80.i8[0];
  v6[5] = v79.i8[0];
  v83 = &v6[a2 + 2];
  *v83 = v82.i8[1];
  v83[1] = v81.i8[1];
  v83[2] = v80.i8[1];
  v83[3] = v79.i8[1];
  v84 = &v83[a2];
  *v84 = v82.i8[2];
  v84[1] = v81.i8[2];
  v84[2] = v80.i8[2];
  v84[3] = v79.i8[2];
  v85 = &v84[a2];
  *v85 = v82.i8[3];
  v85[1] = v81.i8[3];
  v85[2] = v80.i8[3];
  v85[3] = v79.i8[3];
  v86 = &v85[a2];
  *v86 = v82.i8[4];
  v86[1] = v81.i8[4];
  v86[2] = v80.i8[4];
  v86[3] = v79.i8[4];
  v87 = &v86[a2];
  *v87 = v82.i8[5];
  v87[1] = v81.i8[5];
  v87[2] = v80.i8[5];
  v87[3] = v79.i8[5];
  v88 = &v87[a2];
  *v88 = v82.i8[6];
  v88[1] = v81.i8[6];
  v88[2] = v80.i8[6];
  v88[3] = v79.i8[6];
  v89 = &v88[a2];
  *v89 = v82.i8[7];
  v89[1] = v81.i8[7];
  v89[2] = v80.i8[7];
  v89[3] = v79.i8[7];
  *(_QWORD *)&result = vextq_s8(v82, v82, 8uLL).u64[0];
  v78.i64[0] = vextq_s8(v81, v81, 8uLL).u64[0];
  v74.i64[0] = vextq_s8(v80, v80, 8uLL).u64[0];
  v63.i64[0] = vextq_s8(v79, v79, 8uLL).u64[0];
  v22[2] = LOBYTE(result);
  v22[3] = v78.i8[0];
  v22[4] = v74.i8[0];
  v22[5] = v63.i8[0];
  v91 = &v22[a2 + 2];
  *v91 = BYTE1(result);
  v91[1] = v78.i8[1];
  v91[2] = v74.i8[1];
  v91[3] = v63.i8[1];
  v92 = &v91[a2];
  *v92 = BYTE2(result);
  v92[1] = v78.i8[2];
  v92[2] = v74.i8[2];
  v92[3] = v63.i8[2];
  v93 = &v92[a2];
  *v93 = BYTE3(result);
  v93[1] = v78.i8[3];
  v93[2] = v74.i8[3];
  v93[3] = v63.i8[3];
  v94 = &v93[a2];
  *v94 = BYTE4(result);
  v94[1] = v78.i8[4];
  v94[2] = v74.i8[4];
  v94[3] = v63.i8[4];
  v95 = &v94[a2];
  *v95 = BYTE5(result);
  v95[1] = v78.i8[5];
  v95[2] = v74.i8[5];
  v95[3] = v63.i8[5];
  v96 = &v95[a2];
  *v96 = BYTE6(result);
  v96[1] = v78.i8[6];
  v96[2] = v74.i8[6];
  v96[3] = v63.i8[6];
  v97 = &v96[a2];
  *v97 = HIBYTE(result);
  v97[1] = v78.i8[7];
  v97[2] = v74.i8[7];
  v97[3] = v63.i8[7];
  return result;
}

uint64_t vp8_regular_quantize_b_c(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;

  v2 = 0;
  v3 = *(__int16 **)(result + 48);
  v4 = *(_QWORD *)(result + 56);
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v8 = *(_QWORD *)(result + 32);
  v7 = *(_QWORD *)(result + 40);
  v9 = *(_OWORD **)a2;
  v10 = *(_OWORD **)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(__int16 *)(result + 64);
  *v9 = 0u;
  v9[1] = 0u;
  *v10 = 0u;
  v10[1] = 0u;
  v13 = -1;
  do
  {
    v14 = 2 * vp8_default_zig_zag1d[v2];
    v15 = *(__int16 *)(v5 + v14);
    v16 = *v3++;
    v17 = *(__int16 *)(v7 + v14) + v12 + v16;
    if (v15 >= 0)
      v18 = *(__int16 *)(v5 + 2 * vp8_default_zig_zag1d[v2]);
    else
      v18 = -v15;
    if (v18 >= v17)
    {
      v19 = (v18 + *(__int16 *)(v4 + v14) + (((v18 + *(__int16 *)(v4 + v14)) * *(__int16 *)(v6 + v14)) >> 16))
          * *(__int16 *)(v8 + v14);
      v20 = ((v15 >> 31) ^ HIWORD(v19)) - (v15 >> 31);
      *((_WORD *)v9 + vp8_default_zig_zag1d[v2]) = v20;
      *(_WORD *)((char *)v10 + v14) = *(_WORD *)(v11 + v14) * v20;
      if (v19 >= 0x10000)
      {
        v3 = *(__int16 **)(result + 48);
        v13 = v2;
      }
    }
    ++v2;
  }
  while (v2 != 16);
  **(_BYTE **)(a2 + 40) = v13 + 1;
  return result;
}

uint64_t vp8_quantize_mby(uint64_t a1)
{
  int v2;
  void (**v3)(uint64_t, uint64_t);
  uint64_t result;

  v2 = **(unsigned __int8 **)(a1 + 8096);
  v3 = (void (**)(uint64_t, uint64_t))(a1 + 34280);
  (*(void (**)(uint64_t, uint64_t))(a1 + 34280))(a1 + 1864, a1 + 6368);
  (*v3)(a1 + 1952, a1 + 6424);
  (*v3)(a1 + 2040, a1 + 6480);
  (*v3)(a1 + 2128, a1 + 6536);
  (*v3)(a1 + 2216, a1 + 6592);
  (*v3)(a1 + 2304, a1 + 6648);
  (*v3)(a1 + 2392, a1 + 6704);
  (*v3)(a1 + 2480, a1 + 6760);
  (*v3)(a1 + 2568, a1 + 6816);
  (*v3)(a1 + 2656, a1 + 6872);
  (*v3)(a1 + 2744, a1 + 6928);
  (*v3)(a1 + 2832, a1 + 6984);
  (*v3)(a1 + 2920, a1 + 7040);
  (*v3)(a1 + 3008, a1 + 7096);
  (*v3)(a1 + 3096, a1 + 7152);
  result = ((uint64_t (*)(uint64_t, uint64_t))*v3)(a1 + 3184, a1 + 7208);
  if (v2 != 4 && v2 != 9)
    return ((uint64_t (*)(uint64_t, uint64_t))*v3)(a1 + 3976, a1 + 7712);
  return result;
}

_DWORD *vp8cx_init_quantizer(_DWORD *result)
{
  uint64_t v1;
  int v2;
  _DWORD *v3;
  int v4;
  int v5;
  _WORD *v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  _WORD *v11;
  int v12;
  int v13;
  int v14;
  signed int v15;
  char v16;
  int v17;
  int v18;
  _WORD *v19;
  int v20;
  _WORD *v21;
  _WORD *v22;
  int v23;
  int v24;
  char v25;
  int v26;
  int v27;
  _WORD *v28;
  _WORD *v29;
  _WORD *v30;
  int v31;
  int v32;
  _WORD *v33;
  char v34;
  int v35;
  int v36;
  _WORD *v37;
  _WORD *v38;
  _WORD *v39;
  _DWORD *v40;
  __int16 *v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  int v47;
  _WORD *v48;
  _WORD *v49;
  __int16 *v50;
  int v51;
  int v52;
  _WORD *v53;
  char v54;
  int v55;
  int v56;
  uint64_t v57;
  _WORD *v58;
  unsigned int v59;
  _WORD *v60;
  _WORD *v61;
  __int16 *v62;
  _WORD *v63;
  _WORD *v64;
  _WORD *v65;
  _WORD *v66;
  _WORD *v67;
  _WORD *v68;
  int *v69;
  _WORD *v70;
  _WORD *v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  _DWORD *v80;
  _WORD *v81;
  uint64_t v82;

  v1 = 0;
  v2 = result[35722];
  v77 = result[27778];
  v78 = result[27777];
  v75 = result[27779];
  v76 = result[27780];
  v3 = result;
  v79 = v2;
  v80 = result;
  v74 = result[27781];
  do
  {
    v4 = (v78 + v1) & ~((v78 + (int)v1) >> 31);
    if (v4 >= 127)
      v4 = 127;
    v5 = dc_qlookup[v4];
    v6 = &result[8 * v1];
    v6[30720] = 0x10000 / v5;
    if (v2)
    {
      v7 = __clz((__int16)v5) ^ 0x1F;
      v8 = (0x10000 << v7) / (__int16)v5 + 1;
      v9 = 1 << (16 - v7);
    }
    else
    {
      LOWORD(v9) = 0;
      v8 = 0x10000 / (__int16)v5;
    }
    *v6 = v8;
    v10 = qzbin_factors_y2[v1];
    v11 = &result[8 * v1];
    v11[4096] = (v10 * v5 + 64) >> 7;
    v11[6144] = (3 * v5) >> 3;
    v6[2048] = v9;
    LOWORD(result[v1 + 27080]) = v5;
    v11[24576] = 0;
    v12 = (v77 + v1) & ~((v77 + (int)v1) >> 31);
    if (v12 >= 127)
      v12 = 127;
    v13 = dc_qlookup[v12];
    v14 = 2 * v13;
    v11[0x8000] = 0x10000 / (2 * v13);
    v15 = (__int16)(2 * v13);
    if (v2)
    {
      v16 = __clz(v15) ^ 0x1F;
      v17 = (0x10000 << v16) / v15 + 1;
      v18 = 1 << (16 - v16);
    }
    else
    {
      LOWORD(v18) = 0;
      v17 = 0x10000 / v15;
    }
    v19 = v11 + 0x2000;
    v11[0x2000] = v17;
    v20 = qzbin_factors_y2[v1];
    v21 = &result[8 * v1];
    v21[12288] = (v20 * v14 + 64) >> 7;
    v22 = v11 + 10240;
    v21[14336] = (3 * v13) >> 2;
    v11[10240] = v18;
    LOWORD(result[v1 + 27208]) = v14;
    v21[26624] = 0;
    v23 = (v76 + v1) & ~((v76 + (int)v1) >> 31);
    if (v23 >= 127)
      v23 = 127;
    v24 = dc_qlookup[v23];
    if (v24 >= 132)
      v24 = 132;
    v21[34816] = 0x10000 / v24;
    if (v2)
    {
      v25 = __clz((__int16)v24) ^ 0x1F;
      v26 = (0x10000 << v25) / (__int16)v24 + 1;
      v27 = 1 << (16 - v25);
    }
    else
    {
      LOWORD(v27) = 0;
      v26 = 0x10000 / (__int16)v24;
    }
    v28 = v21 + 0x4000;
    v29 = v21 + 18432;
    v21[0x4000] = v26;
    v21[18432] = v27;
    v30 = &result[8 * v1];
    v30[20480] = (v24 * v10 + 64) >> 7;
    v30[22528] = (3 * v24) >> 3;
    LOWORD(result[v1 + 27336]) = v24;
    v30[28672] = 0;
    v31 = v1 & ~((int)v1 >> 31);
    if (v31 >= 127)
      v31 = 127;
    v32 = ac_qlookup[v31];
    v33 = v30 + 30721;
    v30[30721] = 0x10000 / v32;
    if (v2)
    {
      v34 = __clz((__int16)v32) ^ 0x1F;
      v35 = (0x10000 << v34) / (__int16)v32 + 1;
      v36 = 1 << (16 - v34);
    }
    else
    {
      LOWORD(v36) = 0;
      v35 = 0x10000 / (__int16)v32;
    }
    v6[1] = v35;
    v6[2049] = v36;
    v37 = &result[8 * v1];
    v38 = v37 + 4097;
    v37[4097] = (v32 * v10 + 64) >> 7;
    v39 = v37 + 6145;
    v37[6145] = (3 * v32) >> 3;
    v40 = &result[v1];
    v41 = (__int16 *)v40 + 54161;
    *((_WORD *)v40 + 54161) = v32;
    v37[24577] = 0;
    v42 = (v75 + v1) & ~((v75 + (int)v1) >> 31);
    if (v42 >= 127)
      v42 = 127;
    v43 = (101581 * ac_qlookup[v42]) >> 16;
    if (v43 <= 8)
      v44 = 8;
    else
      v44 = v43;
    v45 = 0x10000 / v44;
    v37[32769] = 0x10000 / v44;
    v81 = v37 + 32769;
    if (v2)
    {
      v46 = __clz(v44) ^ 0x1F;
      v45 = (0x10000 << v46) / (int)v44 + 1;
      v47 = 1 << (16 - v46);
    }
    else
    {
      LOWORD(v47) = 0;
    }
    v19[1] = v45;
    v22[1] = v47;
    v48 = v37 + 12289;
    v37[12289] = (v44 * v20 + 64) >> 7;
    v49 = v37 + 14337;
    v37[14337] = (3 * v44) >> 3;
    v50 = (__int16 *)v40 + 54417;
    *((_WORD *)v40 + 54417) = v44;
    v37[26625] = 0;
    v51 = (v74 + v1) & ~((v74 + (int)v1) >> 31);
    if (v51 >= 127)
      v51 = 127;
    v52 = ac_qlookup[v51];
    v53 = v37 + 34817;
    v37[34817] = 0x10000 / v52;
    if (v2)
    {
      v54 = __clz((__int16)v52) ^ 0x1F;
      v55 = (0x10000 << v54) / (__int16)v52 + 1;
      v56 = 1 << (16 - v54);
    }
    else
    {
      LOWORD(v56) = 0;
      v55 = 0x10000 / (__int16)v52;
    }
    v57 = 0;
    v58 = &result[8 * v1];
    v59 = (v52 * v10 + 64) >> 7;
    v28[1] = v55;
    v29[1] = v56;
    v60 = v58 + 20481;
    v58[20481] = v59;
    v61 = v58 + 22529;
    v82 = v1;
    v62 = (__int16 *)&result[v1 + 27336] + 1;
    v58[22529] = (3 * v52) >> 3;
    *v62 = v52;
    v58[28673] = 0;
    v63 = v58 + 1;
    v64 = v58 + 2049;
    v65 = v58 + 8193;
    v66 = v58 + 10241;
    v67 = v58 + 16385;
    v68 = v58 + 18433;
    v69 = &dword_208F45B68;
    v70 = v39;
    do
    {
      v71 = (_WORD *)((char *)v3 + v57 + 4100);
      v71[28672] = *v33;
      v72 = (uint64_t)v3 + v57;
      *(_WORD *)(v72 + 4) = *v63;
      *(_WORD *)(v72 + 4100) = *v64;
      v71[2048] = *v38;
      v71[4096] = *v70;
      v73 = *v69++;
      v71[22528] = (v73 * *v41) >> 7;
      v71[30720] = *v81;
      v71[6144] = *v65;
      v71[0x2000] = *v66;
      v71[10240] = *v48;
      v71[12288] = *v49;
      v71[24576] = (v73 * *v50) >> 7;
      v71[0x8000] = *v53;
      v71[14336] = *v67;
      v71[0x4000] = *v68;
      v71[18432] = *v60;
      v71[20480] = *v61;
      v71[26624] = (v73 * *v62) >> 7;
      v57 += 2;
    }
    while (v57 != 28);
    ++v1;
    v3 += 8;
    result = v80;
    v2 = v79;
  }
  while (v82 != 127);
  return result;
}

uint64_t vp8cx_mb_init_quantizer(uint64_t result, uint64_t a2, int a3)
{
  int *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  __int16 *v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;

  v3 = (int *)(a2 + 30144);
  if (*(_BYTE *)(a2 + 0x2000))
  {
    if (*(_BYTE *)(a2 + 8195) == 1)
    {
      v4 = *(char *)(a2 + *(unsigned __int8 *)(*(_QWORD *)(a2 + 8096) + 11) + 8199);
      if (!a3)
        goto LABEL_15;
    }
    else
    {
      v5 = *(_DWORD *)(result + 111104) + *(char *)(a2 + *(unsigned __int8 *)(*(_QWORD *)(a2 + 8096) + 11) + 8199);
      if (v5 >= 127)
        v5 = 127;
      v4 = v5 & ~(v5 >> 31);
      if (!a3)
        goto LABEL_15;
    }
  }
  else
  {
    v4 = *(_DWORD *)(result + 111104);
    if (!a3)
      goto LABEL_15;
  }
  if (v4 != *(_DWORD *)(a2 + 8804))
  {
LABEL_15:
    *(_WORD *)(a2 + 6272) = 1;
    v8 = result + 4 * v4 + 108032;
    *(_WORD *)(a2 + 6240) = *(_WORD *)(result + 4 * v4 + 108320);
    *(_WORD *)(a2 + 6304) = *(_WORD *)(result + 4 * v4 + 108832);
    *(_WORD *)(a2 + 6336) = *(_WORD *)(result + 4 * v4 + 109344);
    v9 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6242) = v9;
    *(_WORD *)(a2 + 6274) = v9;
    *(_WORD *)(a2 + 6306) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6338) = *(_WORD *)(result + 4 * v4 + 109346);
    v10 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6244) = v10;
    *(_WORD *)(a2 + 6276) = v10;
    *(_WORD *)(a2 + 6308) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6340) = *(_WORD *)(result + 4 * v4 + 109346);
    v11 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6246) = v11;
    *(_WORD *)(a2 + 6278) = v11;
    *(_WORD *)(a2 + 6310) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6342) = *(_WORD *)(result + 4 * v4 + 109346);
    v12 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6248) = v12;
    *(_WORD *)(a2 + 6280) = v12;
    *(_WORD *)(a2 + 6312) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6344) = *(_WORD *)(result + 4 * v4 + 109346);
    v13 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6250) = v13;
    *(_WORD *)(a2 + 6282) = v13;
    *(_WORD *)(a2 + 6314) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6346) = *(_WORD *)(result + 4 * v4 + 109346);
    v14 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6252) = v14;
    *(_WORD *)(a2 + 6284) = v14;
    *(_WORD *)(a2 + 6316) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6348) = *(_WORD *)(result + 4 * v4 + 109346);
    v15 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6254) = v15;
    *(_WORD *)(a2 + 6286) = v15;
    *(_WORD *)(a2 + 6318) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6350) = *(_WORD *)(result + 4 * v4 + 109346);
    v16 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6256) = v16;
    *(_WORD *)(a2 + 6288) = v16;
    *(_WORD *)(a2 + 6320) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6352) = *(_WORD *)(result + 4 * v4 + 109346);
    v17 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6258) = v17;
    *(_WORD *)(a2 + 6290) = v17;
    *(_WORD *)(a2 + 6322) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6354) = *(_WORD *)(result + 4 * v4 + 109346);
    v18 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6260) = v18;
    *(_WORD *)(a2 + 6292) = v18;
    *(_WORD *)(a2 + 6324) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6356) = *(_WORD *)(result + 4 * v4 + 109346);
    v19 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6262) = v19;
    *(_WORD *)(a2 + 6294) = v19;
    *(_WORD *)(a2 + 6326) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6358) = *(_WORD *)(result + 4 * v4 + 109346);
    v20 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6264) = v20;
    *(_WORD *)(a2 + 6296) = v20;
    *(_WORD *)(a2 + 6328) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6360) = *(_WORD *)(result + 4 * v4 + 109346);
    v21 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6266) = v21;
    *(_WORD *)(a2 + 6298) = v21;
    *(_WORD *)(a2 + 6330) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6362) = *(_WORD *)(result + 4 * v4 + 109346);
    v22 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6268) = v22;
    *(_WORD *)(a2 + 6300) = v22;
    *(_WORD *)(a2 + 6332) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6364) = *(_WORD *)(result + 4 * v4 + 109346);
    v23 = *(_WORD *)(result + 4 * v4 + 108322);
    *(_WORD *)(a2 + 6270) = v23;
    *(_WORD *)(a2 + 6302) = v23;
    *(_WORD *)(a2 + 6334) = *(_WORD *)(result + 4 * v4 + 108834);
    *(_WORD *)(a2 + 6366) = *(_WORD *)(result + 4 * v4 + 109346);
    *(_QWORD *)(a2 + 6392) = a2 + 6240;
    *(_QWORD *)(a2 + 6448) = a2 + 6240;
    *(_QWORD *)(a2 + 6504) = a2 + 6240;
    *(_QWORD *)(a2 + 6560) = a2 + 6240;
    *(_QWORD *)(a2 + 6616) = a2 + 6240;
    *(_QWORD *)(a2 + 6672) = a2 + 6240;
    *(_QWORD *)(a2 + 6728) = a2 + 6240;
    *(_QWORD *)(a2 + 6784) = a2 + 6240;
    *(_QWORD *)(a2 + 6840) = a2 + 6240;
    *(_QWORD *)(a2 + 6896) = a2 + 6240;
    *(_QWORD *)(a2 + 6952) = a2 + 6240;
    *(_QWORD *)(a2 + 7008) = a2 + 6240;
    *(_QWORD *)(a2 + 7064) = a2 + 6240;
    *(_QWORD *)(a2 + 7120) = a2 + 6240;
    *(_QWORD *)(a2 + 7176) = a2 + 6240;
    *(_QWORD *)(a2 + 7232) = a2 + 6240;
    *(_QWORD *)(a2 + 7288) = a2 + 6336;
    *(_QWORD *)(a2 + 7344) = a2 + 6336;
    *(_QWORD *)(a2 + 7400) = a2 + 6336;
    *(_QWORD *)(a2 + 7456) = a2 + 6336;
    *(_QWORD *)(a2 + 7512) = a2 + 6336;
    *(_QWORD *)(a2 + 7568) = a2 + 6336;
    *(_QWORD *)(a2 + 7624) = a2 + 6336;
    *(_QWORD *)(a2 + 7680) = a2 + 6336;
    *(_QWORD *)(a2 + 7736) = a2 + 6304;
    v24 = *(_DWORD *)(a2 + 30156);
    v25 = *v3;
    v26 = *(_DWORD *)(a2 + 8672);
    v27 = v26 + *v3;
    v28 = ((v27 + v24) * *(__int16 *)(result + 4 * v4 + 108322)) >> 7;
    v29 = result + 32 * v4;
    *(_QWORD *)(a2 + 1880) = v29;
    *(_QWORD *)(a2 + 1888) = v29 + 61440;
    *(_QWORD *)(a2 + 1896) = v29 + 4096;
    *(_QWORD *)(a2 + 1904) = v29 + 0x2000;
    *(_QWORD *)(a2 + 1920) = v29 + 12288;
    *(_QWORD *)(a2 + 1912) = v29 + 49152;
    *(_WORD *)(a2 + 1928) = v28;
    *(_QWORD *)(a2 + 1968) = v29;
    *(_QWORD *)(a2 + 1976) = v29 + 61440;
    *(_QWORD *)(a2 + 1984) = v29 + 4096;
    *(_QWORD *)(a2 + 1992) = v29 + 0x2000;
    *(_QWORD *)(a2 + 2008) = v29 + 12288;
    *(_QWORD *)(a2 + 2000) = v29 + 49152;
    *(_WORD *)(a2 + 2016) = v28;
    *(_QWORD *)(a2 + 2056) = v29;
    *(_QWORD *)(a2 + 2064) = v29 + 61440;
    *(_QWORD *)(a2 + 2072) = v29 + 4096;
    *(_QWORD *)(a2 + 2080) = v29 + 0x2000;
    *(_QWORD *)(a2 + 2096) = v29 + 12288;
    *(_QWORD *)(a2 + 2088) = v29 + 49152;
    *(_WORD *)(a2 + 2104) = v28;
    *(_QWORD *)(a2 + 2144) = v29;
    *(_QWORD *)(a2 + 2152) = v29 + 61440;
    *(_QWORD *)(a2 + 2160) = v29 + 4096;
    *(_QWORD *)(a2 + 2168) = v29 + 0x2000;
    *(_QWORD *)(a2 + 2184) = v29 + 12288;
    *(_QWORD *)(a2 + 2176) = v29 + 49152;
    *(_WORD *)(a2 + 2192) = v28;
    *(_QWORD *)(a2 + 2232) = v29;
    *(_QWORD *)(a2 + 2240) = v29 + 61440;
    *(_QWORD *)(a2 + 2248) = v29 + 4096;
    *(_QWORD *)(a2 + 2256) = v29 + 0x2000;
    *(_QWORD *)(a2 + 2272) = v29 + 12288;
    *(_QWORD *)(a2 + 2264) = v29 + 49152;
    *(_WORD *)(a2 + 2280) = v28;
    *(_QWORD *)(a2 + 2320) = v29;
    *(_QWORD *)(a2 + 2328) = v29 + 61440;
    *(_QWORD *)(a2 + 2336) = v29 + 4096;
    *(_QWORD *)(a2 + 2344) = v29 + 0x2000;
    *(_QWORD *)(a2 + 2360) = v29 + 12288;
    *(_QWORD *)(a2 + 2352) = v29 + 49152;
    *(_WORD *)(a2 + 2368) = v28;
    *(_QWORD *)(a2 + 2408) = v29;
    *(_QWORD *)(a2 + 2416) = v29 + 61440;
    *(_QWORD *)(a2 + 2424) = v29 + 4096;
    *(_QWORD *)(a2 + 2432) = v29 + 0x2000;
    *(_QWORD *)(a2 + 2448) = v29 + 12288;
    *(_QWORD *)(a2 + 2440) = v29 + 49152;
    *(_WORD *)(a2 + 2456) = v28;
    *(_QWORD *)(a2 + 2496) = v29;
    *(_QWORD *)(a2 + 2504) = v29 + 61440;
    *(_QWORD *)(a2 + 2512) = v29 + 4096;
    *(_QWORD *)(a2 + 2520) = v29 + 0x2000;
    *(_QWORD *)(a2 + 2536) = v29 + 12288;
    *(_QWORD *)(a2 + 2528) = v29 + 49152;
    *(_WORD *)(a2 + 2544) = v28;
    *(_QWORD *)(a2 + 2584) = v29;
    *(_QWORD *)(a2 + 2592) = v29 + 61440;
    *(_QWORD *)(a2 + 2600) = v29 + 4096;
    *(_QWORD *)(a2 + 2608) = v29 + 0x2000;
    *(_QWORD *)(a2 + 2624) = v29 + 12288;
    *(_QWORD *)(a2 + 2616) = v29 + 49152;
    *(_WORD *)(a2 + 2632) = v28;
    *(_QWORD *)(a2 + 2672) = v29;
    *(_QWORD *)(a2 + 2680) = v29 + 61440;
    *(_QWORD *)(a2 + 2688) = v29 + 4096;
    *(_QWORD *)(a2 + 2696) = v29 + 0x2000;
    *(_QWORD *)(a2 + 2712) = v29 + 12288;
    *(_QWORD *)(a2 + 2704) = v29 + 49152;
    *(_WORD *)(a2 + 2720) = v28;
    *(_QWORD *)(a2 + 2760) = v29;
    *(_QWORD *)(a2 + 2768) = v29 + 61440;
    *(_QWORD *)(a2 + 2776) = v29 + 4096;
    *(_QWORD *)(a2 + 2784) = v29 + 0x2000;
    *(_QWORD *)(a2 + 2800) = v29 + 12288;
    *(_QWORD *)(a2 + 2792) = v29 + 49152;
    *(_WORD *)(a2 + 2808) = v28;
    *(_QWORD *)(a2 + 2848) = v29;
    *(_QWORD *)(a2 + 2856) = v29 + 61440;
    *(_QWORD *)(a2 + 2864) = v29 + 4096;
    *(_QWORD *)(a2 + 2872) = v29 + 0x2000;
    *(_QWORD *)(a2 + 2888) = v29 + 12288;
    *(_QWORD *)(a2 + 2880) = v29 + 49152;
    *(_WORD *)(a2 + 2896) = v28;
    *(_QWORD *)(a2 + 2936) = v29;
    *(_QWORD *)(a2 + 2944) = v29 + 61440;
    *(_QWORD *)(a2 + 2952) = v29 + 4096;
    *(_QWORD *)(a2 + 2960) = v29 + 0x2000;
    *(_QWORD *)(a2 + 2976) = v29 + 12288;
    *(_QWORD *)(a2 + 2968) = v29 + 49152;
    *(_WORD *)(a2 + 2984) = v28;
    *(_QWORD *)(a2 + 3024) = v29;
    *(_QWORD *)(a2 + 3032) = v29 + 61440;
    *(_QWORD *)(a2 + 3040) = v29 + 4096;
    *(_QWORD *)(a2 + 3048) = v29 + 0x2000;
    *(_QWORD *)(a2 + 3064) = v29 + 12288;
    *(_QWORD *)(a2 + 3056) = v29 + 49152;
    *(_WORD *)(a2 + 3072) = v28;
    *(_QWORD *)(a2 + 3112) = v29;
    *(_QWORD *)(a2 + 3120) = v29 + 61440;
    *(_QWORD *)(a2 + 3128) = v29 + 4096;
    *(_QWORD *)(a2 + 3136) = v29 + 0x2000;
    *(_QWORD *)(a2 + 3152) = v29 + 12288;
    *(_QWORD *)(a2 + 3144) = v29 + 49152;
    *(_WORD *)(a2 + 3160) = v28;
    *(_QWORD *)(a2 + 3200) = v29;
    *(_QWORD *)(a2 + 3208) = v29 + 61440;
    *(_QWORD *)(a2 + 3216) = v29 + 4096;
    *(_QWORD *)(a2 + 3224) = v29 + 0x2000;
    *(_QWORD *)(a2 + 3240) = v29 + 12288;
    *(_QWORD *)(a2 + 3232) = v29 + 49152;
    *(_WORD *)(a2 + 3248) = v28;
    v30 = ((v27 + v24) * *(__int16 *)(result + 4 * v4 + 109346)) >> 7;
    result = v29 + 69632;
    *(_QWORD *)(a2 + 3288) = v29 + 0x8000;
    *(_QWORD *)(a2 + 3296) = v29 + 69632;
    *(_QWORD *)(a2 + 3304) = v29 + 36864;
    *(_QWORD *)(a2 + 3312) = v29 + 40960;
    *(_QWORD *)(a2 + 3328) = v29 + 45056;
    *(_QWORD *)(a2 + 3320) = v29 + 57344;
    *(_WORD *)(a2 + 3336) = v30;
    *(_QWORD *)(a2 + 3376) = v29 + 0x8000;
    *(_QWORD *)(a2 + 3384) = v29 + 69632;
    *(_QWORD *)(a2 + 3392) = v29 + 36864;
    *(_QWORD *)(a2 + 3400) = v29 + 40960;
    *(_QWORD *)(a2 + 3416) = v29 + 45056;
    *(_QWORD *)(a2 + 3408) = v29 + 57344;
    *(_WORD *)(a2 + 3424) = v30;
    *(_QWORD *)(a2 + 3464) = v29 + 0x8000;
    *(_QWORD *)(a2 + 3472) = v29 + 69632;
    *(_QWORD *)(a2 + 3480) = v29 + 36864;
    *(_QWORD *)(a2 + 3488) = v29 + 40960;
    *(_QWORD *)(a2 + 3504) = v29 + 45056;
    *(_QWORD *)(a2 + 3496) = v29 + 57344;
    *(_WORD *)(a2 + 3512) = v30;
    *(_QWORD *)(a2 + 3552) = v29 + 0x8000;
    *(_QWORD *)(a2 + 3560) = v29 + 69632;
    *(_QWORD *)(a2 + 3568) = v29 + 36864;
    *(_QWORD *)(a2 + 3576) = v29 + 40960;
    *(_QWORD *)(a2 + 3592) = v29 + 45056;
    *(_QWORD *)(a2 + 3584) = v29 + 57344;
    *(_WORD *)(a2 + 3600) = v30;
    *(_QWORD *)(a2 + 3640) = v29 + 0x8000;
    *(_QWORD *)(a2 + 3648) = v29 + 69632;
    *(_QWORD *)(a2 + 3656) = v29 + 36864;
    *(_QWORD *)(a2 + 3664) = v29 + 40960;
    *(_QWORD *)(a2 + 3680) = v29 + 45056;
    *(_QWORD *)(a2 + 3672) = v29 + 57344;
    *(_WORD *)(a2 + 3688) = v30;
    *(_QWORD *)(a2 + 3728) = v29 + 0x8000;
    *(_QWORD *)(a2 + 3736) = v29 + 69632;
    *(_QWORD *)(a2 + 3744) = v29 + 36864;
    *(_QWORD *)(a2 + 3752) = v29 + 40960;
    *(_QWORD *)(a2 + 3768) = v29 + 45056;
    *(_QWORD *)(a2 + 3760) = v29 + 57344;
    *(_WORD *)(a2 + 3776) = v30;
    *(_QWORD *)(a2 + 3816) = v29 + 0x8000;
    *(_QWORD *)(a2 + 3824) = v29 + 69632;
    *(_QWORD *)(a2 + 3832) = v29 + 36864;
    *(_QWORD *)(a2 + 3840) = v29 + 40960;
    *(_QWORD *)(a2 + 3856) = v29 + 45056;
    *(_QWORD *)(a2 + 3848) = v29 + 57344;
    *(_WORD *)(a2 + 3864) = v30;
    *(_QWORD *)(a2 + 3904) = v29 + 0x8000;
    *(_QWORD *)(a2 + 3912) = v29 + 69632;
    *(_QWORD *)(a2 + 3920) = v29 + 36864;
    *(_QWORD *)(a2 + 3928) = v29 + 40960;
    *(_QWORD *)(a2 + 3944) = v29 + 45056;
    *(_QWORD *)(a2 + 3936) = v29 + 57344;
    *(_WORD *)(a2 + 3952) = v30;
    v31 = *(__int16 *)(v8 + 802);
    if (v24 >= 0)
      v32 = v24;
    else
      v32 = v24 + 1;
    *(_QWORD *)(a2 + 4000) = v29 + 0x10000;
    *(_QWORD *)(a2 + 3992) = v29 + 0x4000;
    *(_QWORD *)(a2 + 4008) = v29 + 20480;
    *(_QWORD *)(a2 + 4016) = v29 + 24576;
    *(_QWORD *)(a2 + 4032) = v29 + 28672;
    *(_QWORD *)(a2 + 4024) = v29 + 53248;
    *(_WORD *)(a2 + 4040) = ((v27 + (v32 >> 1)) * v31) >> 7;
    *(_DWORD *)(a2 + 8804) = v4;
    *(_DWORD *)(a2 + 30148) = v25;
    *(_DWORD *)(a2 + 30152) = v24;
    *(_DWORD *)(a2 + 8676) = v26;
    return result;
  }
  v6 = *(_DWORD *)(a2 + 30156);
  if (*(_DWORD *)(a2 + 30152) == v6)
  {
    v7 = *v3;
    if (*(_DWORD *)(a2 + 30148) == *v3)
    {
      v7 = *(_DWORD *)(a2 + 30148);
      if (*(_DWORD *)(a2 + 8676) == *(_DWORD *)(a2 + 8672))
        return result;
    }
  }
  else
  {
    v7 = *v3;
  }
  v33 = (__int16 *)(result + 4 * v4 + 108032);
  v34 = *(_DWORD *)(a2 + 8672);
  v35 = v34 + v7 + v6;
  v36 = (v35 * v33[145]) >> 7;
  *(_WORD *)(a2 + 1928) = v36;
  *(_WORD *)(a2 + 2016) = v36;
  *(_WORD *)(a2 + 2104) = v36;
  *(_WORD *)(a2 + 2192) = v36;
  *(_WORD *)(a2 + 2280) = v36;
  *(_WORD *)(a2 + 2368) = v36;
  *(_WORD *)(a2 + 2456) = v36;
  *(_WORD *)(a2 + 2544) = v36;
  *(_WORD *)(a2 + 2632) = v36;
  *(_WORD *)(a2 + 2720) = v36;
  *(_WORD *)(a2 + 2808) = v36;
  *(_WORD *)(a2 + 2896) = v36;
  *(_WORD *)(a2 + 2984) = v36;
  *(_WORD *)(a2 + 3072) = v36;
  *(_WORD *)(a2 + 3160) = v36;
  *(_WORD *)(a2 + 3248) = v36;
  v37 = (v35 * v33[657]) >> 7;
  *(_WORD *)(a2 + 3336) = v37;
  *(_WORD *)(a2 + 3424) = v37;
  *(_WORD *)(a2 + 3512) = v37;
  *(_WORD *)(a2 + 3600) = v37;
  *(_WORD *)(a2 + 3688) = v37;
  *(_WORD *)(a2 + 3776) = v37;
  *(_WORD *)(a2 + 3864) = v37;
  *(_WORD *)(a2 + 3952) = v37;
  v38 = v33[401];
  if (v6 >= 0)
    v39 = v6;
  else
    v39 = v6 + 1;
  *(_WORD *)(a2 + 4040) = ((v34 + v7 + (v39 >> 1)) * v38) >> 7;
  *(_DWORD *)(a2 + 30148) = v7;
  *(_DWORD *)(a2 + 30152) = v6;
  *(_DWORD *)(a2 + 8676) = v34;
  return result;
}

_DWORD *vp8_set_quantizer(_DWORD *result, int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;

  v2 = 0;
  result[27776] = a2;
  result[27777] = 0;
  v3 = 4 - a2;
  v4 = result[27778];
  if (a2 >= 4)
    v3 = 0;
  result[27778] = v3;
  result[27779] = 0;
  if (a2 >= 41 && result[28577])
  {
    v5 = (int)((double)a2 * 0.15);
    if (-v5 < -15 || v5 == 15)
      v2 = -15;
    else
      v2 = -v5;
  }
  v6 = result[27780];
  result[27780] = v2;
  result[27781] = v2;
  *(_DWORD *)((char *)result + 81927) = result[35762];
  if (v4 != v3 || v6 != v2)
    return vp8cx_init_quantizer(result);
  return result;
}

int16x8_t vp8_short_walsh4x4_neon(int32x2_t *a1, int16x8_t *a2, int a3)
{
  int32x2_t v3;
  int v4;
  uint64_t v5;
  int32x2_t v6;
  int32x2_t *v7;
  int32x2_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  int16x8_t result;

  v3 = *a1;
  if (a3 >= 0)
    v4 = a3;
  else
    v4 = a3 + 1;
  v5 = 2 * (v4 >> 1);
  v6 = *(int32x2_t *)((char *)a1 + v5);
  v7 = (int32x2_t *)((char *)a1 + v5 + v5);
  v8 = *(int32x2_t *)((char *)v7 + v5);
  v9 = (int16x4_t)vzip1_s32(v3, *v7);
  v10 = (int16x4_t)vzip2_s32(v3, *v7);
  v11 = (int16x4_t)vzip1_s32(v6, v8);
  v12 = (int16x4_t)vzip2_s32(v6, v8);
  v13 = vtrn1_s16(v9, v11);
  v14 = vtrn2_s16(v9, v11);
  v15 = vtrn1_s16(v10, v12);
  v16 = vtrn2_s16(v10, v12);
  v17 = vadd_s16(v14, v16);
  v18 = vsub_s16(v14, v16);
  v19 = vshl_n_s16(vadd_s16(v13, v15), 2uLL);
  v20 = vshl_n_s16(v17, 2uLL);
  v21 = vshl_n_s16(v18, 2uLL);
  v22 = vshl_n_s16(vsub_s16(v13, v15), 2uLL);
  v23 = vtst_s16(v19, v19);
  v24 = vadd_s16(v19, v20);
  v25 = (int32x2_t)vsub_s16(v19, v20);
  v26 = (int32x2_t)vadd_s16(v22, v21);
  v27 = (int32x2_t)vsub_s16(v22, v21);
  v28 = (int32x2_t)vsub_s16(v24, v23);
  v29 = (int16x4_t)vzip2_s32(v28, v27);
  v30 = (int16x4_t)vzip2_s32(v26, v25);
  v31 = vtrn1_s16(v29, v30);
  v32 = vtrn2_s16(v29, v30);
  v33 = (int16x4_t)vzip1_s32(v28, v27);
  v34 = (int16x4_t)vzip1_s32(v26, v25);
  v35 = vtrn1_s16(v33, v34);
  v36 = vtrn2_s16(v33, v34);
  v37 = vaddl_s16(v35, v31);
  v38 = vaddl_s16(v36, v32);
  v39 = vsubl_s16(v36, v32);
  v40 = vsubl_s16(v35, v31);
  v41 = (uint32x4_t)vaddq_s32(v37, v38);
  v42 = (uint32x4_t)vaddq_s32(v40, v39);
  v43 = (uint32x4_t)vsubq_s32(v40, v39);
  v44 = (uint32x4_t)vsubq_s32(v37, v38);
  v40.i64[0] = 0x300000003;
  v40.i64[1] = 0x300000003;
  result = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32((int32x4_t)vsraq_n_u32(v43, v43, 0x1FuLL), v40), 3uLL), vaddq_s32((int32x4_t)vsraq_n_u32(v44, v44, 0x1FuLL), v40), 3uLL);
  *a2 = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32((int32x4_t)vsraq_n_u32(v41, v41, 0x1FuLL), v40), 3uLL), vaddq_s32((int32x4_t)vsraq_n_u32(v42, v42, 0x1FuLL), v40), 3uLL);
  a2[1] = result;
  return result;
}

BOOL vp8_compute_skin_block(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  _BOOL4 v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  int v32;

  if (a7 >= 61 && !a8)
    return 0;
  v15 = a7 < 26 || a8 != 0;
  if (a6 == 1)
  {
    v16 = a1 - a4 + 8 * a4;
    v17 = (*(unsigned __int8 *)(v16 + 7)
         + *(unsigned __int8 *)(v16 + 8)
         + *(unsigned __int8 *)(v16 + 7 + a4)
         + *(unsigned __int8 *)(v16 + 7 + a4 + 1)
         + 2) >> 2;
    v18 = 3 * a5;
    return vpx_skin_pixel(v17, (*(unsigned __int8 *)(a2 + v18 + 3)+ *(unsigned __int8 *)(a2 + v18 + 4)+ *(unsigned __int8 *)(a2 + v18 + 3 + a5)+ *(unsigned __int8 *)(a2 + v18 + 3 + a5 + 1)+ 2) >> 2, (*(unsigned __int8 *)(a3 + v18 + 3)+ *(unsigned __int8 *)(a3 + v18 + 4)+ *(unsigned __int8 *)(a3 + v18 + 3 + a5)+ *(unsigned __int8 *)(a3 + v18 + 3 + a5 + 1)+ 2) >> 2, v15);
  }
  else
  {
    v31 = 3 * a4;
    v19 = a1 + v31;
    v20 = a5;
    v21 = (unsigned __int8 *)(a2 + a5);
    v22 = (unsigned __int8 *)(a3 + a5);
    v32 = v15;
    v23 = vpx_skin_pixel((*(unsigned __int8 *)(a1 + v31 + 3)+ *(unsigned __int8 *)(a1 + v31 + 4)+ *(unsigned __int8 *)(a1 + v31 + 3 + a4)+ *(unsigned __int8 *)(a1 + v31 + 3 + a4 + 1)+ 2) >> 2, (v21[1] + v21[2] + v21[a5 + 1] + v21[a5 + 2] + 2) >> 2, (v22[1] + v22[2] + v22[a5 + 1] + v22[a5 + 2] + 2) >> 2, v15);
    if (v23 < 2)
    {
      v24 = vpx_skin_pixel((*(unsigned __int8 *)(v19 + 11)+ *(unsigned __int8 *)(v19 + 12)+ *(unsigned __int8 *)(v19 + 11 + a4)+ *(unsigned __int8 *)(v19 + 11 + a4 + 1)+ 2) >> 2, (v21[5] + v21[6] + v21[a5 + 5] + v21[a5 + 6] + 2) >> 2, (v22[5] + v22[6] + v22[a5 + 5] + v22[a5 + 6] + 2) >> 2, v32)+ v23;
      if (v24 <= 1)
      {
        v25 = 4 * a5 - 8;
        v27 = a1 + 8 * a4 - 16 + 16 + v31;
        v28 = (unsigned __int8 *)(a2 + v25 + 8 + a5);
        v29 = (unsigned __int8 *)(a3 + v25 + 8 + a5);
        v30 = vpx_skin_pixel((*(unsigned __int8 *)(v27 + 3)+ *(unsigned __int8 *)(v27 + 4)+ *(unsigned __int8 *)(v27 + 3 + a4)+ *(unsigned __int8 *)(v27 + 3 + a4 + 1)+ 2) >> 2, (v28[1] + v28[2] + v28[a5 + 1] + v28[a5 + 2] + 2) >> 2, (v29[1] + v29[2] + v29[a5 + 1] + v29[a5 + 2] + 2) >> 2, v32)+ v24;
        if (v30 <= 1)
        {
          v26 = a1 + 8 * a4 - 16 + 16 + v31;
          if (vpx_skin_pixel((*(unsigned __int8 *)(v26 + 11)+ *(unsigned __int8 *)(v26 + 12)+ *(unsigned __int8 *)(v26 + 11 + a4)+ *(unsigned __int8 *)(v26 + 11 + a4 + 1)+ 2) >> 2, (v28[5] + v28[6] + v28[v20 + 5] + v28[v20 + 6] + 2) >> 2, (v29[5] + v29[6] + v29[v20 + 5] + v29[v20 + 6] + 2) >> 2, v32)+ v30 < 2)return 0;
        }
      }
    }
    return 1;
  }
}

__n128 vp9_free_ref_frame_buffers(uint64_t a1)
{
  uint64_t i;
  __n128 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1)
  {
    for (i = 0; i != 2688; i += 224)
    {
      v4 = a1 + i;
      if (!*(_BYTE *)(a1 + i + 48) && *(_QWORD *)(v4 + 64))
      {
        (*(void (**)(_QWORD, uint64_t))(a1 + 16))(*(_QWORD *)a1, v4 + 64);
        *(_DWORD *)(v4 + 24) = 0;
        *(_BYTE *)(v4 + 48) = 1;
      }
      v5 = *(_QWORD *)(v4 + 32);
      if (v5)
        free(*(void **)(v5 - 8));
      *(_QWORD *)(v4 + 32) = 0;
      v6 = a1 + i;
      if (*(_QWORD *)(a1 + i + 184))
      {
        v7 = *(_QWORD *)(v6 + 176);
        if (v7)
          free(*(void **)(v7 - 8));
      }
      result = 0uLL;
      *(_OWORD *)(v6 + 216) = 0u;
      *(_OWORD *)(v6 + 232) = 0u;
      *(_OWORD *)(v6 + 184) = 0u;
      *(_OWORD *)(v6 + 200) = 0u;
      *(_OWORD *)(v6 + 152) = 0u;
      *(_OWORD *)(v6 + 168) = 0u;
      *(_OWORD *)(v6 + 120) = 0u;
      *(_OWORD *)(v6 + 136) = 0u;
      *(_OWORD *)(v6 + 88) = 0u;
      *(_OWORD *)(v6 + 104) = 0u;
    }
  }
  return result;
}

void vp9_free_postproc_buffers(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_OWORD *)(a1 + 952);
  if (*(_QWORD *)(a1 + 1048))
  {
    v3 = *(_QWORD *)(a1 + 1040);
    if (v3)
      free(*(void **)(v3 - 8));
  }
  v4 = 0uLL;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  if (*(_QWORD *)(a1 + 1208))
  {
    v5 = *(_QWORD *)(a1 + 1200);
    if (v5)
    {
      free(*(void **)(v5 - 8));
      v4 = 0uLL;
    }
  }
  *(_OWORD *)(a1 + 1240) = v4;
  *(_OWORD *)(a1 + 1256) = v4;
  *(_OWORD *)(a1 + 1208) = v4;
  *(_OWORD *)(a1 + 1224) = v4;
  *(_OWORD *)(a1 + 1176) = v4;
  *(_OWORD *)(a1 + 1192) = v4;
  *(_OWORD *)(a1 + 1144) = v4;
  *(_OWORD *)(a1 + 1160) = v4;
  *(_OWORD *)(a1 + 1112) = v4;
  *(_OWORD *)(a1 + 1128) = v4;
  v6 = *(_QWORD *)(a1 + 18208);
  if (v6)
    free(*(void **)(v6 - 8));
  *(_QWORD *)(a1 + 18208) = 0;
  v7 = *(_QWORD *)(a1 + 18216);
  if (v7)
    free(*(void **)(v7 - 8));
  *(_QWORD *)(a1 + 18216) = 0;
}

void vp9_free_context_buffers(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(void (**)(uint64_t))(a1 + 1456);
  if (v2)
    v2(a1);
  v3 = *(_QWORD *)(a1 + 1520);
  if (v3)
    free(*(void **)(v3 - 8));
  *(_QWORD *)(a1 + 1520) = 0;
  v4 = *(_QWORD *)(a1 + 1528);
  if (v4)
    free(*(void **)(v4 - 8));
  *(_QWORD *)(a1 + 1528) = 0;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_DWORD *)(a1 + 1552) = 0;
  *(_QWORD *)(a1 + 1544) = 0;
  v5 = *(_QWORD *)(a1 + 18264);
  if (v5)
    free(*(void **)(v5 - 8));
  *(_QWORD *)(a1 + 18264) = 0;
  v6 = *(_QWORD *)(a1 + 18256);
  if (v6)
    free(*(void **)(v6 - 8));
  *(_QWORD *)(a1 + 18256) = 0;
  *(_DWORD *)(a1 + 18272) = 0;
  v7 = *(_QWORD *)(a1 + 4760);
  if (v7)
    free(*(void **)(v7 - 8));
  *(_QWORD *)(a1 + 4760) = 0;
}

uint64_t vp9_alloc_context_buffers(uint64_t a1, int a2, int a3)
{
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  size_t v24;
  void *v25;
  unint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  size_t v32;
  void *v33;
  unint64_t v34;
  uint64_t result;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = (int *)(a1 + 18272);
  v5 = (a2 + 7) >> 3;
  *(_DWORD *)(a1 + 1320) = v5;
  v6 = (a3 + 7) >> 3;
  *(_DWORD *)(a1 + 1312) = v6;
  *(_DWORD *)(a1 + 1324) = v5 + 8;
  v7 = (v5 + 1) >> 1;
  *(_DWORD *)(a1 + 1316) = v7;
  v8 = (v6 + 1) >> 1;
  *(_DWORD *)(a1 + 1308) = v8;
  *(_DWORD *)(a1 + 1304) = v8 * v7;
  v9 = ((v6 + 8) * (v5 + 8));
  if (*(_DWORD *)(a1 + 1412) < (int)v9)
  {
    (*(void (**)(uint64_t))(a1 + 1456))(a1);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(a1 + 1448))(a1, v9))
      goto LABEL_50;
    v5 = *(_DWORD *)(a1 + 1320);
  }
  if (*v4 < v5)
  {
    v10 = *(_QWORD *)(a1 + 18264);
    if (v10)
    {
      free(*(void **)(v10 - 8));
      v5 = *(_DWORD *)(a1 + 1320);
    }
    v11 = (v5 + 7) & 0xFFFFFFF8;
    v12 = (int)(6 * v11);
    if (v11)
    {
      if ((v11 & 0x80000000) != 0)
        goto LABEL_20;
      if (v12 + 23 > 0x10000000000)
        goto LABEL_20;
      v13 = malloc_type_malloc(v12 + 23, 0x74AD08B5uLL);
      if (!v13)
        goto LABEL_20;
    }
    else
    {
      v13 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
      if (!v13)
        goto LABEL_20;
    }
    v14 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v14 - 8) = v13;
    if (v14)
    {
      bzero((void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF0), v12);
      *(_QWORD *)(a1 + 18264) = v14;
      v15 = *(_QWORD *)(a1 + 18256);
      if (v15)
        free(*(void **)(v15 - 8));
      v16 = *(int *)(a1 + 1320) + 7;
      v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      if ((v16 & 0xFFFFFFF8) != 0)
      {
        if ((v16 & 0x80000000) != 0)
          goto LABEL_48;
        v18 = v17 + 23;
        if (v17 + 23 > 0x10000000000)
          goto LABEL_48;
      }
      else
      {
        v18 = 23;
      }
      v19 = malloc_type_malloc(v18, 0x74AD08B5uLL);
      if (!v19 || (v20 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v20 - 8) = v19, !v20))
      {
LABEL_48:
        *(_QWORD *)(a1 + 18256) = 0;
        goto LABEL_50;
      }
      bzero((void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF0), v17);
      *(_QWORD *)(a1 + 18256) = v20;
      v5 = *(_DWORD *)(a1 + 1320);
      *v4 = v5;
      goto LABEL_25;
    }
LABEL_20:
    *(_QWORD *)(a1 + 18264) = 0;
    goto LABEL_50;
  }
LABEL_25:
  if (*(_DWORD *)(a1 + 1552) < *(_DWORD *)(a1 + 1312) * v5)
  {
    v21 = *(_QWORD *)(a1 + 1520);
    if (v21)
      free(*(void **)(v21 - 8));
    *(_QWORD *)(a1 + 1520) = 0;
    v22 = (_QWORD *)(a1 + 1528);
    v23 = *(_QWORD *)(a1 + 1528);
    if (v23)
      free(*(void **)(v23 - 8));
    *v22 = 0;
    *(_QWORD *)(a1 + 1536) = 0;
    *(_DWORD *)(a1 + 1552) = 0;
    *(_QWORD *)(a1 + 1544) = 0;
    v24 = *(int *)(a1 + 1320) * (uint64_t)*(int *)(a1 + 1312);
    if ((_DWORD)v24)
    {
      if ((v24 & 0x80000000) != 0)
        goto LABEL_47;
      if (v24 + 23 > 0x10000000000)
        goto LABEL_47;
      v25 = malloc_type_malloc(v24 + 23, 0x74AD08B5uLL);
      if (!v25)
        goto LABEL_47;
    }
    else
    {
      v25 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
      if (!v25)
        goto LABEL_47;
    }
    v26 = ((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v26 - 8) = v25;
    if (v26)
    {
      bzero((void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0), v24);
      *(_QWORD *)(a1 + 1520) = v26;
      v27 = malloc_type_malloc(v24 + 23, 0x74AD08B5uLL);
      if (!v27 || (v28 = ((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v28 - 8) = v27, !v28))
      {
        *v22 = 0;
        goto LABEL_50;
      }
      bzero((void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF0), v24);
      *(_QWORD *)(a1 + 1528) = v28;
      *(_DWORD *)(a1 + 1552) = v24;
      *(_QWORD *)(a1 + 1508) = 0x100000000;
      *(_QWORD *)(a1 + 1544) = *(_QWORD *)(a1 + 1520);
      *(_QWORD *)(a1 + 1536) = v28;
      goto LABEL_40;
    }
LABEL_47:
    *(_QWORD *)(a1 + 1520) = 0;
    goto LABEL_50;
  }
LABEL_40:
  v29 = *(_QWORD *)(a1 + 4760);
  if (v29)
    free(*(void **)(v29 - 8));
  v30 = (*(_DWORD *)(a1 + 1320) + 7) >> 3;
  *(_DWORD *)(a1 + 4768) = v30;
  v31 = ((*(_DWORD *)(a1 + 1312) + 7) >> 3) * v30;
  if ((v31 & 0x80000000) == 0)
  {
    v32 = 160 * v31;
    v33 = malloc_type_malloc(v32 | 0x17, 0x74AD08B5uLL);
    if (v33)
    {
      v34 = ((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v34 - 8) = v33;
      if (v34)
      {
        bzero((void *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF0), v32);
        result = 0;
        *(_QWORD *)(a1 + 4760) = v34;
        return result;
      }
    }
  }
  *(_QWORD *)(a1 + 4760) = 0;
LABEL_50:
  *(_QWORD *)(a1 + 1320) = 0x800000000;
  *(_QWORD *)(a1 + 1304) = 0;
  *(_QWORD *)(a1 + 1312) = 0;
  v36 = *(void (**)(uint64_t))(a1 + 1456);
  if (v36)
    v36(a1);
  v37 = *(_QWORD *)(a1 + 1520);
  if (v37)
    free(*(void **)(v37 - 8));
  *(_QWORD *)(a1 + 1520) = 0;
  v38 = *(_QWORD *)(a1 + 1528);
  if (v38)
    free(*(void **)(v38 - 8));
  *(_QWORD *)(a1 + 1528) = 0;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_DWORD *)(a1 + 1552) = 0;
  *(_QWORD *)(a1 + 1544) = 0;
  v39 = *(_QWORD *)(a1 + 18264);
  if (v39)
    free(*(void **)(v39 - 8));
  *(_QWORD *)(a1 + 18264) = 0;
  v40 = *(_QWORD *)(a1 + 18256);
  if (v40)
    free(*(void **)(v40 - 8));
  *(_QWORD *)(a1 + 18256) = 0;
  *v4 = 0;
  v41 = *(_QWORD *)(a1 + 4760);
  if (v41)
    free(*(void **)(v41 - 8));
  *(_QWORD *)(a1 + 4760) = 0;
  return 1;
}

void vp9_remove_common(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (_OWORD *)(a1 + 952);
  if (*(_QWORD *)(a1 + 1048))
  {
    v3 = *(_QWORD *)(a1 + 1040);
    if (v3)
      free(*(void **)(v3 - 8));
  }
  v4 = 0uLL;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  *v2 = 0u;
  v2[1] = 0u;
  if (*(_QWORD *)(a1 + 1208))
  {
    v5 = *(_QWORD *)(a1 + 1200);
    if (v5)
    {
      free(*(void **)(v5 - 8));
      v4 = 0uLL;
    }
  }
  *(_OWORD *)(a1 + 1240) = v4;
  *(_OWORD *)(a1 + 1256) = v4;
  *(_OWORD *)(a1 + 1208) = v4;
  *(_OWORD *)(a1 + 1224) = v4;
  *(_OWORD *)(a1 + 1176) = v4;
  *(_OWORD *)(a1 + 1192) = v4;
  *(_OWORD *)(a1 + 1144) = v4;
  *(_OWORD *)(a1 + 1160) = v4;
  *(_OWORD *)(a1 + 1112) = v4;
  *(_OWORD *)(a1 + 1128) = v4;
  v6 = *(_QWORD *)(a1 + 18208);
  if (v6)
    free(*(void **)(v6 - 8));
  *(_QWORD *)(a1 + 18208) = 0;
  v7 = *(_QWORD *)(a1 + 18216);
  if (v7)
    free(*(void **)(v7 - 8));
  *(_QWORD *)(a1 + 18216) = 0;
  v8 = *(void (**)(uint64_t))(a1 + 1456);
  if (v8)
    v8(a1);
  v9 = *(_QWORD *)(a1 + 1520);
  if (v9)
    free(*(void **)(v9 - 8));
  *(_QWORD *)(a1 + 1520) = 0;
  v10 = *(_QWORD *)(a1 + 1528);
  if (v10)
    free(*(void **)(v10 - 8));
  *(_QWORD *)(a1 + 1528) = 0;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_DWORD *)(a1 + 1552) = 0;
  *(_QWORD *)(a1 + 1544) = 0;
  v11 = *(_QWORD *)(a1 + 18264);
  if (v11)
    free(*(void **)(v11 - 8));
  *(_QWORD *)(a1 + 18264) = 0;
  v12 = *(_QWORD *)(a1 + 18256);
  if (v12)
    free(*(void **)(v12 - 8));
  *(_QWORD *)(a1 + 18256) = 0;
  *(_DWORD *)(a1 + 18272) = 0;
  v13 = *(_QWORD *)(a1 + 4760);
  if (v13)
    free(*(void **)(v13 - 8));
  *(_QWORD *)(a1 + 4760) = 0;
  v14 = *(_QWORD *)(a1 + 4904);
  if (v14)
    free(*(void **)(v14 - 8));
  *(_QWORD *)(a1 + 4904) = 0;
  v15 = *(_QWORD *)(a1 + 4912);
  if (v15)
    free(*(void **)(v15 - 8));
  *(_QWORD *)(a1 + 4912) = 0;
}

unint64_t vp9_cyclic_refresh_alloc(int a1, int a2)
{
  void *v4;
  unint64_t v5;
  int v6;
  size_t v7;
  void *v8;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v4 = malloc_type_malloc(0x9FuLL, 0x74AD08B5uLL);
  if (!v4)
    return 0;
  v5 = ((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 - 8) = v4;
  if (!v5)
    return v5;
  *(_QWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x80) = 0;
  *(_OWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x60) = 0u;
  *(_OWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x70) = 0u;
  *(_OWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x40) = 0u;
  *(_OWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x50) = 0u;
  *(_OWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x20) = 0u;
  *(_OWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x30) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0u;
  v6 = a2 * a1;
  v7 = a2 * a1;
  if (v6)
  {
    if ((v7 & 0x80000000) != 0
      || v7 + 23 > 0x10000000000
      || (v8 = malloc_type_malloc(v6 + 23, 0x74AD08B5uLL)) == 0)
    {
LABEL_15:
      *(_QWORD *)(v5 + 32) = 0;
      v13 = *(_QWORD *)(v5 + 40);
      if (v13)
      {
        v14 = *(void **)(v13 - 8);
LABEL_17:
        free(v14);
        goto LABEL_18;
      }
      goto LABEL_18;
    }
  }
  else
  {
    v8 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
    if (!v8)
      goto LABEL_15;
  }
  v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v10 - 8) = v8;
  if (!v10)
    goto LABEL_15;
  bzero((void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0), v7);
  *(_QWORD *)(v5 + 32) = v10;
  v11 = malloc_type_malloc(v7 + 23, 0x74AD08B5uLL);
  if (v11)
  {
    v12 = v11;
    v11 = (_QWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF0);
    *(v11 - 1) = v12;
    *(_QWORD *)(v5 + 40) = v11;
    if (v11)
    {
      memset(v11, 255, v7);
      *(_DWORD *)(v5 + 124) = 0;
      *(_DWORD *)(v5 + 132) = 1;
      return v5;
    }
  }
  else
  {
    *(_QWORD *)(v5 + 40) = 0;
  }
  v15 = *(_QWORD *)(v5 + 32);
  if (v15)
  {
    free(*(void **)(v15 - 8));
    v11 = *(_QWORD **)(v5 + 40);
  }
  if (v11)
  {
    v14 = (void *)*(v11 - 1);
    goto LABEL_17;
  }
LABEL_18:
  free(*(void **)(v5 - 8));
  return 0;
}

uint64_t vp9_cyclic_refresh_estimate_bits_at_q(uint64_t a1, double a2, double a3, double a4, double a5)
{
  _DWORD *v5;
  int v6;
  int v7;
  _WORD *v8;
  int v9;
  int v10;
  _WORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _WORD *v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  double v23;
  unint64_t v24;
  double v25;
  double v26;
  unint64_t v27;
  double v28;
  unint64_t v29;

  v5 = *(_DWORD **)(a1 + 740264);
  v6 = *(_DWORD *)(a1 + 173028);
  v7 = *(_DWORD *)(a1 + 189856);
  if (v7 == 8)
  {
    v8 = &ac_qlookup_0;
  }
  else if (v7 == 12)
  {
    v8 = &ac_qlookup_12;
  }
  else
  {
    a3 = -1.0;
    if (v7 != 10)
      goto LABEL_11;
    v8 = &ac_qlookup_10;
  }
  if (v6 >= 255)
    v9 = 255;
  else
    v9 = *(_DWORD *)(a1 + 173028);
  LOWORD(a3) = v8[v9 & ~(v9 >> 31)];
  a3 = (double)vmovl_s16(*(int16x4_t *)&a3).i32[0];
LABEL_11:
  v10 = *(_DWORD *)(a1 + 173000);
  if (v7 == 8)
  {
    v11 = &ac_qlookup_0;
  }
  else if (v7 == 12)
  {
    v11 = &ac_qlookup_12;
  }
  else
  {
    a4 = -1.0;
    if (v7 != 10)
      goto LABEL_20;
    v11 = &ac_qlookup_10;
  }
  v12 = v5[25] + v6;
  if (v12 >= 255)
    v12 = 255;
  LOWORD(a4) = v11[v12 & ~(v12 >> 31)];
  a4 = (double)vmovl_s16(*(int16x4_t *)&a4).i32[0];
LABEL_20:
  v14 = v5[5];
  v13 = v5[6];
  v15 = v5[26];
  if (v7 == 8)
  {
    v16 = &ac_qlookup_0;
  }
  else if (v7 == 12)
  {
    v16 = &ac_qlookup_12;
  }
  else
  {
    a5 = -1.0;
    if (v7 != 10)
      goto LABEL_29;
    v16 = &ac_qlookup_10;
  }
  v17 = v15 + v6;
  if (v17 >= 255)
    v17 = 255;
  LOWORD(a5) = v16[v17 & ~(v17 >> 31)];
  a5 = (double)vmovl_s16(*(int16x4_t *)&a5).i32[0];
LABEL_29:
  v18 = (double)(4 * v10);
  v19 = (double)v14 / v18;
  v20 = 0.015625;
  if (v7 == 10)
    v20 = 0.0625;
  if (v7 == 8)
    v20 = 0.25;
  v21 = v20 * a3;
  if (*(_DWORD *)(a1 + 172972))
    v22 = 1800000;
  else
    v22 = 2700000;
  v23 = (double)v22;
  v24 = (unint64_t)(v10 * (uint64_t)(int)((double)(v22 + ((int)(v21 * (double)v22) >> 12)) * a2 / v21)) >> 9;
  if ((int)v24 <= 200)
    LODWORD(v24) = 200;
  v25 = (double)(int)v24;
  v26 = (double)v13 / v18;
  v27 = (unint64_t)(v10 * (uint64_t)(int)((double)(v22 + ((int)(v20 * a4 * v23) >> 12)) * a2 / (v20 * a4))) >> 9;
  if ((int)v27 <= 200)
    LODWORD(v27) = 200;
  v28 = v19 * (double)(int)v27 + (1.0 - v19 - v26) * v25;
  v29 = (unint64_t)(v10 * (uint64_t)(int)((double)(v22 + ((int)(v20 * a5 * v23) >> 12)) * a2 / (v20 * a5))) >> 9;
  if ((int)v29 <= 200)
    LODWORD(v29) = 200;
  return (int)(v28 + v26 * (double)(int)v29);
}

uint64_t vp9_cyclic_refresh_rc_bits_per_mb(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  double v12;
  uint64_t v13;
  int v14;
  _WORD *v15;
  int v16;
  int v17;
  int v18;
  _WORD *v19;
  int v20;
  __int16 v21;
  int v22;
  double v23;
  _WORD *v24;
  int v25;
  double v26;
  _WORD *v27;
  int v28;
  double v29;
  double v30;
  int v31;

  v6 = (int *)(a1 + 189856);
  v7 = (int *)(a1 + 172972);
  v8 = *(_QWORD *)(a1 + 740264);
  if (*(int *)(a1 + 190056) > 7)
  {
    v13 = -1374389535 * *(_DWORD *)(v8 + 4) * a2;
    v14 = (v13 >> 38) + ((unint64_t)v13 >> 63);
    v9 = *v7;
    v10 = *v6;
    goto LABEL_36;
  }
  v9 = *v7;
  v10 = *v6;
  v11 = *(_DWORD *)(a1 + 738728);
  a4 = 0.015625;
  if (v10 == 10)
    a4 = 0.0625;
  v12 = 0.25;
  if (v10 == 8)
  {
    a4 = 0.25;
    v15 = &ac_qlookup_0;
  }
  else if (v10 == 12)
  {
    v15 = &ac_qlookup_12;
  }
  else
  {
    v12 = -1.0;
    if (v10 != 10)
      goto LABEL_15;
    v15 = &ac_qlookup_10;
  }
  if (a2 >= 255)
    v16 = 255;
  else
    v16 = a2;
  LOWORD(v12) = v15[v16 & ~(v16 >> 31)];
  v12 = (double)vmovl_s16(*(int16x4_t *)&v12).i32[0];
LABEL_15:
  if (v9)
    v17 = 1800000;
  else
    v17 = 2700000;
  v18 = *(_DWORD *)(a1 + 738732);
  if (v18 >= v11)
    goto LABEL_34;
  while (1)
  {
    switch(v10)
    {
      case 8:
        v19 = &ac_qlookup_0;
        break;
      case 12:
        v19 = &ac_qlookup_12;
        break;
      case 10:
        v19 = &ac_qlookup_10;
        break;
      default:
        v21 = -1;
        goto LABEL_30;
    }
    v20 = v18 >= 255 ? 255 : v18;
    v21 = v19[v20 & ~(v20 >> 31)];
LABEL_30:
    a6 = (double)(v17 + ((int)(a4 * (double)v21 * (double)v17) >> 12)) / (a4 * (double)v21);
    if ((int)a6 <= (int)(*(double *)(v8 + 72)
                        * (double)(int)((double)(v17 + ((int)(a4 * v12 * (double)v17) >> 12)) / (a4 * v12))))
      break;
    if (v11 == ++v18)
      goto LABEL_34;
  }
  v11 = v18;
LABEL_34:
  v14 = v11 - a2;
  v22 = *(_DWORD *)(v8 + 4) * a2;
  if (v22 / 100 < -v14)
    v14 = -v22 / 100;
LABEL_36:
  if (v10 == 8)
  {
    v24 = &ac_qlookup_0;
LABEL_42:
    if (a2 >= 255)
      v25 = 255;
    else
      v25 = a2;
    LOWORD(a4) = v24[v25 & ~(v25 >> 31)];
    v23 = (double)vmovl_s16(*(int16x4_t *)&a4).i32[0];
    goto LABEL_46;
  }
  if (v10 == 12)
  {
    v24 = &ac_qlookup_12;
    goto LABEL_42;
  }
  v23 = -1.0;
  if (v10 == 10)
  {
    v24 = &ac_qlookup_10;
    goto LABEL_42;
  }
LABEL_46:
  v26 = *(double *)(v8 + 112);
  if (v10 == 8)
  {
    v27 = &ac_qlookup_0;
LABEL_52:
    v28 = v14 + a2;
    if (v28 >= 255)
      v28 = 255;
    LOWORD(a6) = v27[v28 & ~(v28 >> 31)];
    a6 = (double)vmovl_s16(*(int16x4_t *)&a6).i32[0];
    goto LABEL_55;
  }
  if (v10 == 12)
  {
    v27 = &ac_qlookup_12;
    goto LABEL_52;
  }
  a6 = -1.0;
  if (v10 == 10)
  {
    v27 = &ac_qlookup_10;
    goto LABEL_52;
  }
LABEL_55:
  v29 = 0.015625;
  if (v10 == 10)
    v29 = 0.0625;
  if (v10 == 8)
    v29 = 0.25;
  v30 = v29 * v23;
  if (v9)
    v31 = 1800000;
  else
    v31 = 2700000;
  return (int)(v26
                           * (double)(int)((double)(v31 + ((int)(v29 * a6 * (double)v31) >> 12)) * a3 / (v29 * a6))
                           + (1.0 - v26) * (double)(int)((double)(v31 + ((int)(v30 * (double)v31) >> 12)) * a3 / v30));
}

uint64_t vp9_cyclic_refresh_update_segment(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  _QWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  BOOL v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int i;
  int v37;
  int v38;
  uint64_t v39;
  char v40;
  _DWORD *v41;
  _DWORD *v42;

  v10 = (_QWORD *)(result + 740216);
  v11 = (_DWORD *)(result + 739932);
  v12 = (_DWORD *)(result + 190092);
  v13 = (_DWORD *)(result + 173008);
  v14 = *(_QWORD *)(result + 740264);
  v15 = *(_DWORD *)(result + 173016);
  if (v15 - a4 >= num_8x8_blocks_wide_lookup[a5])
    v16 = num_8x8_blocks_wide_lookup[a5];
  else
    v16 = v15 - a4;
  if (*v13 - a3 >= num_8x8_blocks_high_lookup[a5])
    v17 = num_8x8_blocks_high_lookup[a5];
  else
    v17 = *v13 - a3;
  v18 = a4 + v15 * a3;
  if (*(_QWORD *)(v14 + 56) < a7
    && ((v19 = *(__int16 *)(a2 + 12), v20 = *(__int16 *)(v14 + 64), v19 > v20)
     || ((v21 = *(__int16 *)(a2 + 14), v19 >= -v20) ? (v22 = v21 <= v20) : (v22 = 0),
         v22 ? (v23 = v21 < -v20) : (v23 = 1),
         v23 || *(char *)(a2 + 8) < 1)))
  {
    v25 = (_QWORD *)(v14 + 32);
    v26 = v18;
    v27 = *(_BYTE *)(*(_QWORD *)(v14 + 32) + v18);
    if (a5 <= 6 && *(_DWORD *)(result + 842120))
    {
      v40 = *(_BYTE *)(*(_QWORD *)(v14 + 32) + v18);
      v41 = (_DWORD *)(result + 190092);
      v42 = (_DWORD *)(result + 739932);
      v31 = 4 << b_width_log2_lookup[a5];
      v32 = 4 << b_height_log2_lookup[a5];
      v33 = *(unsigned __int8 *)(*(_QWORD *)(a9 + 8216) + (v32 >> 1) * *(_DWORD *)(a9 + 8224) + (v31 >> 1));
      v34 = (v32 >> 2) * *(_DWORD *)(a9 + 16528) + (v31 >> 2);
      v35 = a8;
      result = vpx_skin_pixel(v33, *(unsigned __int8 *)(*(_QWORD *)(a9 + 16520) + v34), *(unsigned __int8 *)(*(_QWORD *)(a9 + 24824) + v34), 1);
      v27 = v40;
      v11 = v42;
      a8 = v35;
      v24 = result != 0;
      if (*v41)
        goto LABEL_27;
    }
    else
    {
      v24 = 0;
      if (*v12)
        goto LABEL_27;
    }
  }
  else
  {
    if (a5 < 6
      || *(_QWORD *)(v14 + 48) <= a6
      || *(char *)(a2 + 8) < 1
      || *(_DWORD *)(a2 + 12)
      || *(int *)(v14 + 80) <= 10)
    {
      v24 = 1;
    }
    else
    {
      v24 = 2;
    }
    v25 = (_QWORD *)(v14 + 32);
    v26 = v18;
    v27 = *(_BYTE *)(*(_QWORD *)(v14 + 32) + v18);
    if (*v12)
      goto LABEL_27;
  }
  if (*(_BYTE *)(a2 + 8) == 2)
    v24 = 0;
LABEL_27:
  v28 = *(char *)(a2 + 4) - 3;
  if (*v11 && v28 >= 0xFFFFFFFE)
  {
    if (a8)
      v29 = 0;
    else
      v29 = v24;
    *(_BYTE *)(a2 + 4) = v29;
    v28 = v29 - 3;
  }
  if (v28 >= 0xFFFFFFFE)
  {
    v30 = -*(unsigned __int8 *)(v14 + 12);
    if (v17 < 1)
      return result;
  }
  else if (v24)
  {
    if (*(_BYTE *)(*v25 + v26) == 1)
      LOBYTE(v30) = 0;
    else
      LOBYTE(v30) = v27;
    if (v17 < 1)
      return result;
  }
  else
  {
    LOBYTE(v30) = 1;
    if (v17 < 1)
      return result;
  }
  if (v16 >= 1)
  {
    for (i = 0; i != v17; ++i)
    {
      v37 = v18;
      v38 = v16;
      do
      {
        v39 = v37 + i * v13[2];
        *(_BYTE *)(*v25 + v39) = v30;
        *(_BYTE *)(*v10 + v39) = *(_BYTE *)(a2 + 4);
        ++v37;
        --v38;
      }
      while (v38);
    }
  }
  return result;
}

uint64_t vp9_cyclic_refresh_postencode(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  int v12;
  int v13;
  int v14;
  uint64_t v17;
  int v18;
  int v19;
  signed int v20;
  double v21;
  double v22;

  v1 = *(_QWORD *)(result + 173176);
  v2 = *(_QWORD *)(result + 740264);
  v3 = *(_QWORD *)(result + 740216);
  *(_DWORD *)(v2 + 20) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  v4 = *(unsigned int *)(result + 173008);
  v5 = 0.0;
  if ((int)v4 >= 1)
  {
    v6 = *(unsigned int *)(result + 173016);
    if ((int)v6 >= 1)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          v17 = *(_QWORD *)(v1 + 8 * i);
          LOWORD(v13) = *(_WORD *)(v17 + 12);
          LOWORD(v14) = *(_WORD *)(v17 + 14);
          v18 = *(unsigned __int8 *)(v3 + i);
          if (v18 == 1)
          {
            *(_DWORD *)(v2 + 20) = ++v7;
          }
          else if (v18 == 2)
          {
            *(_DWORD *)(v2 + 24) = ++v8;
          }
          v12 = *(char *)(v17 + 8);
          if ((v13 & 0x8000u) != 0)
            v13 = -(__int16)v13;
          if ((v14 & 0x8000u) != 0)
            v14 = -(__int16)v14;
          if (v12 > 0 && (unsigned __int16)v13 < 0x10u && (unsigned __int16)v14 < 0x10u)
            ++v10;
        }
        v1 += 8 * (v6 - 1) + 72;
        ++v9;
        v3 += v6;
      }
      while (v9 != v4);
      v5 = (double)v10;
    }
  }
  if (!*(_DWORD *)(result + 747508) && !*(_DWORD *)(result + 194568) && !*(_DWORD *)(result + 190068))
  {
    v19 = *(_DWORD *)(result + 842088);
    if (v19)
    {
      v20 = 4 * (0x64u / *(_DWORD *)v2);
      if (*(int *)v2 < 11)
        v20 = 40;
      if (!*(_DWORD *)(result + 190092))
        v20 = 20;
      *(_DWORD *)(result + 738556) = v20;
      if (*(int *)(result + 739072) <= 49 && *(int *)(result + 738568) >= 41 && *(_DWORD *)(v2 + 132))
      {
        v20 = 10;
        *(_DWORD *)(result + 738556) = 10;
      }
      if (v20 >= *(_DWORD *)(result + 738564))
        v20 = *(_DWORD *)(result + 738564);
      *(_DWORD *)(result + 738540) = v20;
      *(_DWORD *)(result + 194560) = 1;
    }
    v21 = v5 / (double)(*(_DWORD *)(result + 173016) * (int)v4);
    v22 = (v21 + *(double *)(v2 + 88) * 3.0) * 0.25;
    *(double *)(v2 + 88) = v22;
    if (!v19 && *(_DWORD *)(result + 194560) == 1 && *(_DWORD *)(result + 738568) > *(_DWORD *)(result + 738536) + 1)
    {
      if (v21 < 0.65 || v22 < 0.6)
        *(_DWORD *)(result + 194560) = 0;
      *(double *)(v2 + 88) = v21;
    }
  }
  return result;
}

uint64_t vp9_cyclic_refresh_update_parameters(uint64_t result)
{
  int *v1;
  _DWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  double v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  double v15;
  int v16;
  double v17;
  double v18;

  v1 = (int *)(result + 738568);
  v2 = (_DWORD *)(result + 190092);
  v3 = *(_QWORD *)(result + 740264);
  v4 = *(_DWORD *)(result + 173000);
  if (*(_DWORD *)(result + 190380) == 1)
    v5 = 35;
  else
    v5 = 20;
  if (v5 >= 2 * *(_DWORD *)(result + 738732))
    v5 = 2 * *(_DWORD *)(result + 738732);
  *(_DWORD *)(v3 + 120) = 1;
  if (!*(_DWORD *)(result + 172972))
    goto LABEL_14;
  if (*(_BYTE *)(result + 172988))
    goto LABEL_14;
  v6 = *(_DWORD *)(result + 747516);
  if (v6 > 0 || !*(_DWORD *)(result + 190140) && !*(_DWORD *)(result + 190136))
    goto LABEL_14;
  v7 = *(_DWORD *)(result + 738620);
  if (v7 < v5)
    goto LABEL_14;
  if (*(_DWORD *)(result + 747508))
  {
    if (*(_DWORD *)(result + 6880 * v6 + 758668))
    {
LABEL_14:
      *(_DWORD *)(v3 + 120) = 0;
      return result;
    }
  }
  else if (*(_DWORD *)(v3 + 132) && *(int *)(result + 739072) <= 19 && *v1 > 40 || v7 >= 234 && *v1 > 20)
  {
    goto LABEL_14;
  }
  if (*(_BYTE *)(result + 850440) && *(_DWORD *)(result + 850540) && *v1 >= 21)
    goto LABEL_14;
  if (*(_DWORD *)(v3 + 108))
    v8 = 5;
  else
    v8 = 10;
  *(_DWORD *)v3 = v8;
  *(_DWORD *)(v3 + 4) = 60;
  *(_DWORD *)(v3 + 12) = 0;
  *(_WORD *)(v3 + 64) = 32;
  *(_DWORD *)(v3 + 80) = 15;
  if (*v1 >= (int)(4 * *(_DWORD *)(result + 747524) * (0x64 / v8)))
  {
    *(_QWORD *)(v3 + 72) = 0x4000000000000000;
    v9 = 2.0;
    if (*(_DWORD *)(v3 + 132) && *(_DWORD *)(result + 842128) && *(_DWORD *)(result + 842132) >= 2u)
    {
      *(_QWORD *)(v3 + 72) = 0x3FFB333333333333;
      *(_DWORD *)(v3 + 80) = 13;
      v9 = 1.7;
    }
  }
  else
  {
    *(_QWORD *)(v3 + 72) = 0x4008000000000000;
    v9 = 3.0;
  }
  v10 = *(_DWORD *)(result + 190380);
  if (v10 != 1)
  {
    if (*(_DWORD *)(result + 171992) * *(_DWORD *)(result + 171988) > 101376)
      goto LABEL_34;
LABEL_50:
    if (*(int *)(result + 738592) > 2999)
    {
      *(_DWORD *)(v3 + 4) = 70;
      *(double *)(v3 + 72) = fmax(v9, 2.5);
      v11 = 4 * v4;
      if (!*v2)
        goto LABEL_35;
    }
    else
    {
      *(_WORD *)(v3 + 64) = 64;
      *(_DWORD *)(v3 + 80) = 13;
      v11 = 4 * v4;
      if (!*v2)
        goto LABEL_35;
    }
    goto LABEL_54;
  }
  if (*(_DWORD *)(result + 747512) == *(_DWORD *)(result + 747520) - 1)
  {
    *(_DWORD *)(v3 + 128) = 1;
    v8 = 5;
    v12 = 10;
  }
  else
  {
    if (*(_DWORD *)(v3 + 128))
      v8 = 5;
    else
      v8 = 10;
    if (*(_DWORD *)(v3 + 128))
      v12 = 10;
    else
      v12 = 15;
  }
  *(_DWORD *)v3 = v8;
  if (*(_DWORD *)(v3 + 132) && *(int *)(v3 + 124) <= 29)
  {
    *(_DWORD *)v3 = v12;
    v8 = v12;
  }
  *(_QWORD *)(v3 + 72) = 0x4000000000000000;
  *(_DWORD *)(v3 + 80) = 10;
  v9 = 2.0;
  if (*(_DWORD *)(result + 171992) * *(_DWORD *)(result + 171988) <= 101376)
    goto LABEL_50;
LABEL_34:
  v11 = 4 * v4;
  if (!*v2)
  {
LABEL_35:
    v8 = 10;
    *(_DWORD *)v3 = 10;
    *(_QWORD *)(v3 + 72) = 0x3FF8000000000000;
    *(_DWORD *)(v3 + 80) = 10;
    if (*(_DWORD *)(result + 194560) == 1 && !*(_DWORD *)(result + 747508))
    {
      v8 = 0;
      *(_DWORD *)v3 = 0;
      *(_QWORD *)(v3 + 72) = 0x3FF0000000000000;
    }
  }
LABEL_54:
  v13 = 1374389535 * (int)(*(_DWORD *)(result + 173008) * v8 * *(_DWORD *)(result + 173016));
  v14 = (v13 >> 37) + ((unint64_t)v13 >> 63);
  v15 = (double)v14 / (double)v11;
  v16 = *(_DWORD *)(v3 + 24) + *(_DWORD *)(v3 + 20);
  v17 = (double)((v16 + v14) >> 1) / (double)v11;
  if (v15 < v17 * 7.0 * 0.125)
    v17 = (double)v14 / (double)v11;
  v18 = (double)v16 / (double)v11;
  if (v10 != 1)
    v18 = v17;
  *(double *)(v3 + 112) = v18;
  if (!*(_DWORD *)(v3 + 132))
  {
    *(_DWORD *)(v3 + 20) = v14;
    *(_DWORD *)(v3 + 24) = 0;
    *(double *)(v3 + 112) = v15;
  }
  return result;
}

void vp9_cyclic_refresh_setup(uint64_t a1, double a2, int16x4_t a3)
{
  _BYTE *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  double v18;
  int v19;
  double v20;
  int v21;
  double v22;
  double v23;
  _WORD *v24;
  int v25;
  int v26;
  int v27;
  _WORD *v28;
  int v29;
  __int16 v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  double v45;
  uint64_t v46;
  int v47;
  int v48;
  double v49;
  double v50;
  _WORD *v51;
  int v52;
  int v53;
  int v54;
  _WORD *v55;
  int v56;
  __int16 v57;
  int v58;
  int v59;
  _BYTE *v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  BOOL v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  _DWORD *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  _BOOL4 v89;
  _DWORD *v90;
  _DWORD *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  BOOL v99;
  int v100;
  int v101;
  BOOL v102;
  _BOOL4 v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  _DWORD *v125;
  int v126;
  uint64_t v127;
  _BOOL4 v128;

  v4 = (_BYTE *)(a1 + 747304);
  v5 = a1 + 740216;
  v6 = (int *)(a1 + 738460);
  v7 = a1 + 176472;
  v8 = *(_QWORD *)(a1 + 740264);
  if (*(_DWORD *)(a1 + 739056))
  {
    v9 = 1;
    v10 = (_DWORD *)(a1 + 172020);
    if (*(_DWORD *)(a1 + 189844))
      goto LABEL_7;
    goto LABEL_6;
  }
  if (*(_DWORD *)(a1 + 747508))
  {
    v9 = *(_DWORD *)(a1 + 835152) != 0;
    v10 = (_DWORD *)(a1 + 172020);
    if (*(_DWORD *)(a1 + 189844))
      goto LABEL_7;
    goto LABEL_6;
  }
  v9 = 0;
  v10 = (_DWORD *)(a1 + 172020);
  if (!*(_DWORD *)(a1 + 189844))
LABEL_6:
    *(_QWORD *)(v8 + 88) = 0;
LABEL_7:
  v127 = a1 + 176472;
  if (*(_DWORD *)(a1 + 842088))
  {
    bzero(*(void **)(v8 + 32), (int)v10[249] * (uint64_t)(int)v10[247]);
    memset(*(void **)(v8 + 40), 255, (int)v10[249] * (uint64_t)(int)v10[247]);
    v7 = v127;
    *(_DWORD *)(v8 + 8) = 0;
    *(_QWORD *)(a1 + 194560) = 0x100000001;
    *(_DWORD *)(v8 + 124) = 0;
  }
  if (!*(_DWORD *)(v8 + 120) || (*v4 ? (v11 = 1) : (v11 = v9), v11 == 1))
  {
    v12 = v7;
    bzero(*(void **)v5, (int)v10[249] * (uint64_t)(int)v10[247]);
    *(_WORD *)v12 = 0;
    *(_BYTE *)(v12 + 2) = 0;
    if (v10[238])
      v13 = v9;
    else
      v13 = 1;
    if (v13 == 1)
    {
      memset(*(void **)(v8 + 40), 255, (int)v10[249] * (uint64_t)(int)v10[247]);
      *(_DWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 108) = 0;
      *(_DWORD *)(v8 + 124) = 0;
    }
    return;
  }
  v14 = v10[252];
  v15 = *(_DWORD *)(v7 + 13384);
  if (v15 == 8)
  {
    v16 = ac_qlookup_0;
    v18 = 0.25;
  }
  else
  {
    if (v15 == 12)
    {
      v16 = ac_qlookup_12;
      v17 = 0x3F90000000000000;
    }
    else
    {
      if (v15 != 10)
      {
        v20 = -0.015625;
        goto LABEL_33;
      }
      v16 = ac_qlookup_10;
      v17 = 0x3FB0000000000000;
    }
    v18 = *(double *)&v17;
  }
  if (v14 >= 255)
    v19 = 255;
  else
    v19 = v10[252];
  a3.i16[0] = v16[v19 & ~(v19 >> 31)];
  v20 = v18 * (double)vmovl_s16(a3).i32[0];
LABEL_33:
  ++*(_DWORD *)(v8 + 124);
  *(_QWORD *)(v8 + 48) = (uint64_t)*v6 << 10;
  *(_QWORD *)(v8 + 56) = 4 * (uint64_t)(v20 * v20);
  *(_OWORD *)(a1 + 176488) = 0u;
  *(_OWORD *)(a1 + 176504) = 0u;
  *(_OWORD *)(a1 + 176520) = 0u;
  *(_OWORD *)(a1 + 176536) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_DWORD *)(v7 + 112) = 0;
  *(_DWORD *)v7 = 65793;
  *(_DWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 84) |= 0x100000001uLL;
  v21 = v6[67];
  v22 = 0.015625;
  if (v15 == 10)
    v22 = 0.0625;
  v23 = 0.25;
  if (v15 == 8)
  {
    v22 = 0.25;
    v24 = ac_qlookup_0;
  }
  else if (v15 == 12)
  {
    v24 = ac_qlookup_12;
  }
  else
  {
    v23 = -1.0;
    if (v15 != 10)
      goto LABEL_45;
    v24 = ac_qlookup_10;
  }
  if (v14 >= 255)
    v25 = 255;
  else
    v25 = v14;
  LOWORD(v23) = v24[v25 & ~(v25 >> 31)];
  v23 = (double)vmovl_s16(*(int16x4_t *)&v23).i32[0];
LABEL_45:
  if (v10[238])
    v26 = 1800000;
  else
    v26 = 2700000;
  v27 = v6[68];
  if (v27 < v21)
  {
    do
    {
      switch(v15)
      {
        case 8:
          v28 = ac_qlookup_0;
          break;
        case 12:
          v28 = ac_qlookup_12;
          break;
        case 10:
          v28 = ac_qlookup_10;
          break;
        default:
          v30 = -1;
          goto LABEL_60;
      }
      if (v27 >= 255)
        v29 = 255;
      else
        v29 = v27;
      v30 = v28[v29 & ~(v29 >> 31)];
LABEL_60:
      if ((int)((double)(v26 + ((int)(v22 * (double)v30 * (double)v26) >> 12)) / (v22 * (double)v30)) <= (int)(*(double *)(v8 + 72) * (double)(int)((double)(v26 + ((int)(v22 * v23 * (double)v26) >> 12)) / (v22 * v23))))
      {
        v21 = v27;
        break;
      }
      ++v27;
    }
    while (v21 != v27);
  }
  v125 = (_DWORD *)(a1 + 842128);
  v31 = v21 - v14;
  v32 = v14 - v21;
  v33 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4) * v14;
  if (v33 / 100 < v32)
    v31 = -v33 / 100;
  *(_DWORD *)(v8 + 100) = v31;
  v34 = v10[252] + v31 + v10[253];
  if (v34 >= 255)
    v34 = 255;
  v35 = vp9_compute_rd_mult_based_on_qindex(a1, v34 & ~(v34 >> 31));
  if (*(_DWORD *)(a1 + 850616) && (*(_BYTE *)(a1 + 850632) & 4) != 0 && *(_DWORD *)(a1 + 850620) != -1)
  {
    v36 = v10[238];
    v35 = *(_DWORD *)(a1 + 850620);
    v37 = v127;
  }
  else
  {
    v37 = v127;
    v36 = v10[238];
    if (*(_DWORD *)(v127 + 13604) == 2 && v36)
    {
      v38 = a1 + 4 * *(unsigned __int8 *)(a1 + 742180);
      v39 = *(unsigned int *)(v38 + 743192);
      v40 = (int *)(v38 + 745964);
      if (!*(_DWORD *)(a1 + 850432))
        v40 = v6 + 5;
      v41 = *v40;
      v99 = v41 <= 1599;
      v42 = v41 / 100;
      if (!v99)
        v42 = 15;
      v43 = (rd_frame_type_factor[v39] * (uint64_t)v35) >> 7;
      v35 = ((unint64_t)(v43 * rd_boost_factor[v42]) >> 7) + v43;
      v36 = 1;
    }
  }
  *(_DWORD *)(v8 + 28) = v35;
  *(_WORD *)(v37 + 24) = v31;
  v44 = v10[252];
  v45 = 4.0;
  if (*(double *)(v8 + 72) * ((double)*(int *)(v8 + 80) * 0.1) <= 4.0)
    v45 = *(double *)(v8 + 72) * ((double)*(int *)(v8 + 80) * 0.1);
  v46 = *(_QWORD *)(v5 + 48);
  v47 = *(_DWORD *)(v37 + 13384);
  v48 = v6[67];
  v49 = 0.015625;
  if (v47 == 10)
    v49 = 0.0625;
  v50 = 0.25;
  if (v47 == 8)
  {
    v49 = 0.25;
    v51 = ac_qlookup_0;
LABEL_89:
    if (v44 >= 255)
      v52 = 255;
    else
      v52 = v10[252];
    LOWORD(v50) = v51[v52 & ~(v52 >> 31)];
    v50 = (double)vmovl_s16(*(int16x4_t *)&v50).i32[0];
    goto LABEL_93;
  }
  if (v47 == 12)
  {
    v51 = ac_qlookup_12;
    goto LABEL_89;
  }
  v50 = -1.0;
  if (v47 == 10)
  {
    v51 = ac_qlookup_10;
    goto LABEL_89;
  }
LABEL_93:
  if (v36)
    v53 = 1800000;
  else
    v53 = 2700000;
  v54 = v6[68];
  if (v54 < v48)
  {
    do
    {
      switch(v47)
      {
        case 8:
          v55 = ac_qlookup_0;
          break;
        case 12:
          v55 = ac_qlookup_12;
          break;
        case 10:
          v55 = ac_qlookup_10;
          break;
        default:
          v57 = -1;
          goto LABEL_108;
      }
      if (v54 >= 255)
        v56 = 255;
      else
        v56 = v54;
      v57 = v55[v56 & ~(v56 >> 31)];
LABEL_108:
      if ((int)((double)(v53 + ((int)(v49 * (double)v57 * (double)v53) >> 12)) / (v49 * (double)v57)) <= (int)(v45 * (double)(int)((double)(v53 + ((int)(v49 * v50 * (double)v53) >> 12)) / (v49 * v50))))
      {
        v48 = v54;
        break;
      }
      ++v54;
    }
    while (v48 != v54);
  }
  v58 = v48 - v44;
  v59 = *(_DWORD *)(v46 + 4) * v44;
  if (v59 / 100 < -v58)
    v58 = -v59 / 100;
  *(_DWORD *)(v8 + 104) = v58;
  *(_WORD *)(v37 + 32) = v58;
  v60 = *(_BYTE **)v5;
  bzero(*(void **)v5, (int)v10[249] * (uint64_t)(int)v10[247]);
  v61 = v127;
  v62 = v10[249];
  if (v62 >= -7)
    v63 = v62 + 7;
  else
    v63 = v62 + 14;
  v64 = v10[247];
  if (v64 >= -7)
    v65 = v64 + 7;
  else
    v65 = v64 + 14;
  v66 = 1374389535 * v64 * v62 * *(_DWORD *)v46;
  v67 = HIDWORD(v66);
  v68 = v66 >> 63;
  v69 = *(_DWORD *)(v46 + 8);
  *(_DWORD *)(v46 + 16) = 0;
  v70 = *(_DWORD *)(v127 + 13908);
  if (v70 == 1)
    v71 = 0;
  else
    v71 = 100;
  v72 = v10[252];
  v73 = v72;
  if (*(_BYTE *)v127)
  {
    v74 = v70 == 1;
    v75 = 1;
    if (v74)
      v75 = 2;
    v73 = v10[252];
    if ((*(_DWORD *)(a1 + 4 * v75 + 176552) & 1) != 0)
    {
      v76 = *(__int16 *)(a1 + 8 * v75 + 176488);
      if (*(_BYTE *)(v127 + 3) == 1)
        v77 = 0;
      else
        v77 = v10[252];
      v78 = v77 + v76;
      if (v78 >= 255)
        v78 = 255;
      v73 = v78 & ~(v78 >> 31);
    }
  }
  v124 = a1 + 741232;
  v79 = v63 >> 3;
  v80 = v65 >> 3;
  v81 = (_DWORD *)(a1 + 842128);
  if (*v125 && *(_DWORD *)(a1 + 842132) >= 2u)
  {
    v82 = *(_DWORD *)(v46 + 132);
    if (v82)
    {
      v71 = 60;
      v73 = v10[252];
    }
    if (*(_BYTE *)v127 && v82)
    {
      if ((*(_BYTE *)(v127 + 84) & 1) != 0)
      {
        if (*(_BYTE *)(v127 + 3) == 1)
          v83 = 0;
        else
          v83 = v10[252];
        v84 = v83 + *(__int16 *)(v127 + 24);
        if (v84 >= 255)
          v84 = 255;
        if (v84 > v72)
          v72 = v84;
        v73 = v72 & ~(v72 >> 31);
        v71 = 60;
      }
      else
      {
        v71 = 60;
        v73 = v10[252];
      }
    }
  }
  v85 = 0;
  v86 = 0;
  v87 = v80 * v79;
  v88 = v68 + ((int)v67 >> 5);
  v119 = v79;
  v120 = v71;
  v117 = v88;
  v118 = v80 * v79;
  while (1)
  {
    v89 = *v10 == 0;
    if (!*(_DWORD *)(v46 + 132)
      || (v90 = *(_DWORD **)(v61 + 13976)) == 0
      || (v91 = *(_DWORD **)(v61 + 13968), *v90 != *v91)
      || v90[1] != v91[1])
    {
      v89 = 0;
    }
    v92 = 8 * (v69 / v79);
    v93 = 8 * (v69 % v79);
    v94 = v10[249];
    if (v94 - v93 >= 8)
      v95 = 8;
    else
      v95 = v94 - v93;
    v96 = v10[247] - v92;
    if (v96 >= 8)
      v97 = 8;
    else
      v97 = v10[247] - v92;
    v98 = v71;
    if (*v81)
    {
      v99 = v97 < 3 || v95 < 3;
      if (v99)
        v100 = 4;
      else
        v100 = v71;
      if (v81[1] >= 2u)
        v98 = v100;
      else
        v98 = v71;
    }
    v101 = v93 + v94 * v92;
    v102 = v96 <= 0 || v94 - v93 <= 0;
    v103 = !v102;
    v128 = v103;
    if (v103)
    {
      v104 = 0;
      v105 = 0;
      do
      {
        v106 = v101;
        v107 = v95;
        do
        {
          v108 = *(_QWORD *)(v46 + 32);
          v109 = v106 + v105 * v10[249];
          v110 = *(char *)(v108 + v109);
          if (*(_BYTE *)(v108 + v109))
          {
            if (v110 < 0)
              *(_BYTE *)(v108 + v109) = v110 + 1;
          }
          else
          {
            ++v86;
            if (!*(_DWORD *)(v46 + 132)
              || v73 < *(unsigned __int8 *)(*(_QWORD *)(v46 + 40) + v109)
              || v98 > *(unsigned __int8 *)(*((_QWORD *)v81 + 5) + v109))
            {
              ++v104;
              ++v85;
            }
          }
          ++v106;
          --v107;
        }
        while (v107);
        ++v105;
      }
      while (v105 != v97);
    }
    else
    {
      v104 = 0;
    }
    v111 = v97 * v95;
    v112 = v97 * v95 >= 0 ? v97 * v95 : v111 + 1;
    if (v104 >= v112 >> 1)
      break;
LABEL_206:
    if (v69 + 1 == v87)
      v69 = 0;
    else
      ++v69;
    if (*(_DWORD *)(v46 + 16) >= v88)
      goto LABEL_216;
LABEL_210:
    if (v69 == *(_DWORD *)(v46 + 8))
      goto LABEL_216;
  }
  if (!v89 || !*(_DWORD *)(v46 + 128))
  {
LABEL_200:
    if (v128)
    {
      v114 = 0;
      do
      {
        v115 = v101;
        v116 = v95;
        do
        {
          v60[v115 + v114 * v10[249]] = 1;
          ++v115;
          --v116;
        }
        while (v116);
        ++v114;
      }
      while (v114 != v97);
    }
    *(_DWORD *)(v46 + 16) += v111;
    goto LABEL_206;
  }
  v126 = v69;
  v113 = *(_QWORD *)(v61 + 13968);
  v121 = (*(_DWORD *)(v113 + 16) * (v69 / v79) + v69 % v79) << 6;
  v122 = *(_QWORD *)(v113 + 56) + v121;
  v123 = *(_DWORD *)(v113 + 16);
  if ((*(unsigned int (**)(void))(v124 + 24))()
    || (*(unsigned int (**)(uint64_t, _QWORD, uint64_t, _QWORD))v124)(v122, v123, *(_QWORD *)(*(_QWORD *)(v127 + 13976) + 56) + v121, *(unsigned int *)(*(_QWORD *)(v127 + 13976) + 16)))
  {
    v61 = v127;
    v81 = v125;
    v111 = v97 * v95;
    v69 = v126;
    v79 = v119;
    v71 = v120;
    v88 = v117;
    v87 = v118;
    goto LABEL_200;
  }
  v61 = v127;
  v81 = v125;
  v79 = v119;
  v71 = v120;
  v88 = v117;
  v87 = v118;
  if (v126 + 1 == v118)
    v69 = 0;
  else
    v69 = v126 + 1;
  if (*(_DWORD *)(v46 + 16) < v117)
    goto LABEL_210;
LABEL_216:
  *(_DWORD *)(v46 + 8) = v69;
  *(_DWORD *)(v46 + 108) = 0;
  if (*(_DWORD *)(v61 + 13908) != 1 && v85 < (3 * v86) >> 2)
    *(_DWORD *)(v46 + 108) = 1;
}

uint64_t vp9_get_refresh_mask(_DWORD *a1)
{
  int *v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = a1 + 48628;
  v2 = a1[48640];
  if (v2 && a1[184647] && !a1[186877])
    return (v2 << a1[48630]) | (a1[48639] << *v1);
  v3 = a1[48630];
  if (a1[212608])
  {
    v4 = *v1;
    if (!v3)
      goto LABEL_29;
    if (v4 && a1[48629])
    {
      v5 = a1[186796];
      if ((int)v5 < 1)
      {
        LODWORD(v6) = 0;
      }
      else
      {
        v6 = 0;
        while (a1[v6 + 186745])
        {
          if (v5 == ++v6)
            goto LABEL_17;
        }
      }
      if ((_DWORD)v6 == (_DWORD)v5)
      {
LABEL_17:
        v7 = 0;
        goto LABEL_96;
      }
    }
    if (v3 != 1)
    {
LABEL_29:
      if (v4 != 1 && a1[48629] != 1)
      {
        v9 = a1[186796];
        if ((int)v9 < 1)
        {
          LODWORD(v10) = 0;
        }
        else
        {
          v10 = 0;
          while (a1[v10 + 186745] != 1)
          {
            ++v10;
            v7 = 1;
            if (v9 == v10)
              goto LABEL_96;
          }
        }
        if ((_DWORD)v10 == (_DWORD)v9)
        {
          v7 = 1;
          goto LABEL_96;
        }
      }
      if (v3 == 2)
        goto LABEL_51;
    }
    if (v4 != 2 && a1[48629] != 2)
    {
      v11 = a1[186796];
      if ((int)v11 < 1)
      {
        LODWORD(v12) = 0;
      }
      else
      {
        v12 = 0;
        while (a1[v12 + 186745] != 2)
        {
          ++v12;
          v7 = 2;
          if (v11 == v12)
            goto LABEL_96;
        }
      }
      if ((_DWORD)v12 == (_DWORD)v11)
      {
        v7 = 2;
        goto LABEL_96;
      }
    }
    if (v3 != 3)
    {
LABEL_51:
      if (v4 != 3 && a1[48629] != 3)
      {
        v13 = a1[186796];
        if ((int)v13 < 1)
        {
          LODWORD(v14) = 0;
        }
        else
        {
          v14 = 0;
          while (a1[v14 + 186745] != 3)
          {
            ++v14;
            v7 = 3;
            if (v13 == v14)
              goto LABEL_96;
          }
        }
        if ((_DWORD)v14 == (_DWORD)v13)
        {
          v7 = 3;
          goto LABEL_96;
        }
      }
      if (v3 == 4)
        goto LABEL_73;
    }
    if (v4 != 4 && a1[48629] != 4)
    {
      v15 = a1[186796];
      if ((int)v15 < 1)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        v16 = 0;
        while (a1[v16 + 186745] != 4)
        {
          ++v16;
          v7 = 4;
          if (v15 == v16)
            goto LABEL_96;
        }
      }
      if ((_DWORD)v16 == (_DWORD)v15)
      {
        v7 = 4;
        goto LABEL_96;
      }
    }
    if (v3 != 5)
    {
LABEL_73:
      if (v4 != 5 && a1[48629] != 5)
      {
        v17 = a1[186796];
        if ((int)v17 < 1)
        {
          LODWORD(v18) = 0;
        }
        else
        {
          v18 = 0;
          while (a1[v18 + 186745] != 5)
          {
            ++v18;
            v7 = 5;
            if (v17 == v18)
              goto LABEL_96;
          }
        }
        if ((_DWORD)v18 == (_DWORD)v17)
        {
          v7 = 5;
          goto LABEL_96;
        }
      }
      if (v3 == 6)
        goto LABEL_93;
    }
    if (v4 != 6 && a1[48629] != 6)
    {
      v19 = a1[186796];
      if ((int)v19 < 1)
      {
        LODWORD(v20) = 0;
      }
      else
      {
        v20 = 0;
        while (a1[v20 + 186745] != 6)
        {
          ++v20;
          v7 = 6;
          if (v19 == v20)
            goto LABEL_96;
        }
      }
      if ((_DWORD)v20 == (_DWORD)v19)
      {
        v7 = 6;
        goto LABEL_96;
      }
    }
    if (v3 != 7)
    {
LABEL_93:
      if (v4 != 7 && a1[48629] != 7)
      {
        v21 = a1[186796];
        if ((int)v21 < 1)
        {
          LODWORD(v22) = 0;
        }
        else
        {
          v22 = 0;
          while (a1[v22 + 186745] != 7)
          {
            ++v22;
            v7 = 7;
            if (v21 == v22)
              goto LABEL_96;
          }
        }
        if ((_DWORD)v22 == (_DWORD)v21)
        {
          v7 = 7;
          goto LABEL_96;
        }
      }
    }
    v7 = 8;
    goto LABEL_96;
  }
  v7 = a1[48630];
LABEL_96:
  a1[186795] = v7;
  if (a1[186877] && a1[208825] && a1[208616] == 1)
    return a1[a1[186878] + 208790];
  else
    return (v2 << a1[48629]) | (a1[48639] << *v1) | (a1[48641] << v7);
}

void vp9_pack_bitstream(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _BYTE *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  int32x2_t **v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  int v19;
  _DWORD *v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  _BYTE *v27;
  char v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  char v39;
  _DWORD *v40;
  int v41;
  char v42;
  int v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  _BYTE *v53;
  int v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  int v63;
  _BYTE *v64;
  char v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  int v72;
  int32x2_t v73;
  double v74;
  int32x2_t v75;
  double v76;
  int32x4_t v77;
  unsigned int *v78;
  unsigned int *v79;
  _DWORD *v80;
  int *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int refresh_mask;
  unint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  int v112;
  _BYTE *v113;
  char v114;
  int v115;
  unint64_t v116;
  int v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  int v126;
  int v127;
  unint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  unint64_t v133;
  int v134;
  _BYTE *v135;
  char v136;
  int *__attribute__((__org_typedef(jmp_buf))) v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  int v141;
  unint64_t v142;
  int v143;
  int v144;
  int v145;
  unint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  int v152;
  _BYTE *v153;
  char v154;
  unint64_t v155;
  int v156;
  unint64_t v157;
  int v158;
  int v159;
  unint64_t v160;
  int v161;
  unint64_t v162;
  unsigned int v163;
  int v164;
  int v165;
  _BYTE *v166;
  char v167;
  unint64_t v168;
  int v169;
  unint64_t v170;
  int v171;
  int v172;
  int v173;
  _BYTE *v174;
  char v175;
  unint64_t v176;
  uint64_t v177;
  int v178;
  unint64_t v179;
  int v180;
  int v181;
  int v182;
  _BYTE *v183;
  char v184;
  unint64_t v185;
  uint64_t v186;
  int v187;
  unint64_t v188;
  int v189;
  int v190;
  int v191;
  _BYTE *v192;
  char v193;
  int v194;
  unsigned int v195;
  int v196;
  int v197;
  unint64_t v198;
  int v199;
  unint64_t v200;
  unsigned int v201;
  int v202;
  _BYTE *v203;
  int v204;
  int v205;
  int v206;
  unint64_t v207;
  int v208;
  int v209;
  int v210;
  unint64_t v211;
  int v212;
  int v213;
  unint64_t v214;
  uint64_t v215;
  int v216;
  unint64_t v217;
  int v218;
  _BYTE *v219;
  char v220;
  uint64_t v221;
  int v222;
  unint64_t v223;
  unsigned int v224;
  int v225;
  _BYTE *v226;
  char v227;
  uint64_t v228;
  int v229;
  unint64_t v230;
  int v231;
  _BYTE *v232;
  char v233;
  uint64_t v234;
  int v235;
  unint64_t v236;
  int v237;
  _BYTE *v238;
  char v239;
  uint64_t v240;
  int v241;
  unint64_t v242;
  int v243;
  _BYTE *v244;
  char v245;
  unsigned int v246;
  int v247;
  int v248;
  unint64_t v249;
  int v250;
  unint64_t v251;
  unsigned int v252;
  int v253;
  _BYTE *v254;
  int v255;
  int v256;
  int v257;
  unint64_t v258;
  int v259;
  int v260;
  unint64_t v261;
  uint64_t v262;
  int v263;
  unint64_t v264;
  int v265;
  _BYTE *v266;
  char v267;
  uint64_t v268;
  int v269;
  unint64_t v270;
  int v271;
  _BYTE *v272;
  char v273;
  uint64_t v274;
  int v275;
  unint64_t v276;
  int v277;
  _BYTE *v278;
  char v279;
  unsigned int v280;
  int v281;
  int v282;
  unint64_t v283;
  int v284;
  unint64_t v285;
  unsigned int v286;
  int v287;
  _BYTE *v288;
  int v289;
  int v290;
  int v291;
  unint64_t v292;
  int v293;
  int v294;
  unint64_t v295;
  uint64_t v296;
  int v297;
  unint64_t v298;
  int v299;
  _BYTE *v300;
  char v301;
  uint64_t v302;
  int v303;
  unint64_t v304;
  int v305;
  _BYTE *v306;
  char v307;
  uint64_t v308;
  int v309;
  unint64_t v310;
  int v311;
  _BYTE *v312;
  char v313;
  unsigned int v314;
  int v315;
  int v316;
  unint64_t v317;
  int v318;
  unint64_t v319;
  unsigned int v320;
  int v321;
  _BYTE *v322;
  int v323;
  int v324;
  int v325;
  unint64_t v326;
  int v327;
  int v328;
  unint64_t v329;
  uint64_t v330;
  int v331;
  unint64_t v332;
  int v333;
  _BYTE *v334;
  char v335;
  uint64_t v336;
  int v337;
  unint64_t v338;
  int v339;
  _BYTE *v340;
  char v341;
  uint64_t v342;
  int v343;
  unint64_t v344;
  int v345;
  _BYTE *v346;
  char v347;
  unsigned int v348;
  int v349;
  int v350;
  unint64_t v351;
  int v352;
  unint64_t v353;
  unsigned int v354;
  int v355;
  _BYTE *v356;
  int v357;
  int v358;
  int v359;
  unint64_t v360;
  int v361;
  int v362;
  unint64_t v363;
  uint64_t v364;
  int v365;
  unint64_t v366;
  int v367;
  _BYTE *v368;
  char v369;
  uint64_t v370;
  int v371;
  unint64_t v372;
  int v373;
  _BYTE *v374;
  char v375;
  uint64_t v376;
  int v377;
  unint64_t v378;
  int v379;
  _BYTE *v380;
  char v381;
  unsigned int v382;
  int v383;
  int v384;
  unint64_t v385;
  int v386;
  unint64_t v387;
  unsigned int v388;
  int v389;
  _BYTE *v390;
  int v391;
  int v392;
  int v393;
  unint64_t v394;
  int v395;
  int v396;
  unint64_t v397;
  int v398;
  unint64_t v399;
  unsigned int v400;
  int v401;
  int v402;
  _BYTE *v403;
  char v404;
  unint64_t v405;
  uint64_t v406;
  int v407;
  unint64_t v408;
  int v409;
  _BYTE *v410;
  char v411;
  unint64_t v412;
  uint64_t v413;
  int v414;
  unint64_t v415;
  int v416;
  _BYTE *v417;
  char v418;
  uint64_t v419;
  int v420;
  unint64_t v421;
  int v422;
  _BYTE *v423;
  char v424;
  uint64_t v425;
  int v426;
  unint64_t v427;
  int v428;
  _BYTE *v429;
  char v430;
  uint64_t v431;
  int v432;
  unint64_t v433;
  int v434;
  _BYTE *v435;
  char v436;
  uint64_t v437;
  int v438;
  unint64_t v439;
  int v440;
  _BYTE *v441;
  char v442;
  uint64_t v443;
  int v444;
  unint64_t v445;
  int v446;
  _BYTE *v447;
  char v448;
  int v449;
  unint64_t v450;
  int v451;
  unint64_t v452;
  int v453;
  unint64_t v454;
  uint64_t v455;
  unsigned int v456;
  int v457;
  unint64_t v458;
  int v459;
  _BYTE *v460;
  char v461;
  uint64_t v462;
  int v463;
  unint64_t v464;
  int v465;
  _BYTE *v466;
  char v467;
  uint64_t v468;
  int v469;
  unint64_t v470;
  int v471;
  _BYTE *v472;
  char v473;
  uint64_t v474;
  int v475;
  unint64_t v476;
  int v477;
  _BYTE *v478;
  char v479;
  uint64_t v480;
  int v481;
  unint64_t v482;
  int v483;
  int v484;
  int v485;
  _BYTE *v486;
  char v487;
  int v488;
  unint64_t v489;
  int v490;
  unint64_t v491;
  int v492;
  int v493;
  int v494;
  unint64_t v495;
  int v496;
  int v497;
  _BYTE *v498;
  char v499;
  unint64_t v500;
  uint64_t v501;
  unsigned int v502;
  int v503;
  unint64_t v504;
  int v505;
  _BYTE *v506;
  char v507;
  uint64_t v508;
  int v509;
  unint64_t v510;
  int v511;
  _BYTE *v512;
  char v513;
  uint64_t v514;
  int v515;
  unint64_t v516;
  int v517;
  _BYTE *v518;
  char v519;
  uint64_t v520;
  int v521;
  unint64_t v522;
  int v523;
  int v524;
  int v525;
  _BYTE *v526;
  char v527;
  int v528;
  unint64_t v529;
  int v530;
  unint64_t v531;
  int v532;
  int v533;
  int v534;
  unint64_t v535;
  int v536;
  int v537;
  _BYTE *v538;
  char v539;
  unint64_t v540;
  uint64_t v541;
  unsigned int v542;
  int v543;
  unint64_t v544;
  int v545;
  _BYTE *v546;
  char v547;
  uint64_t v548;
  int v549;
  unint64_t v550;
  int v551;
  _BYTE *v552;
  char v553;
  uint64_t v554;
  int v555;
  unint64_t v556;
  int v557;
  _BYTE *v558;
  char v559;
  uint64_t v560;
  int v561;
  unint64_t v562;
  int v563;
  int v564;
  int v565;
  _BYTE *v566;
  char v567;
  unint64_t v568;
  int v569;
  unint64_t v570;
  int v571;
  int v572;
  _BYTE *v573;
  char v574;
  _BYTE *v575;
  int v576;
  int v577;
  unsigned int v578;
  int v579;
  unint64_t v580;
  int v581;
  unint64_t v582;
  int v583;
  _BYTE *v584;
  int v585;
  int v586;
  int v587;
  unint64_t v588;
  int v589;
  int v590;
  int v591;
  unint64_t v592;
  int v593;
  int v594;
  unint64_t v595;
  uint64_t v596;
  int v597;
  unint64_t v598;
  int v599;
  unsigned int v600;
  int v601;
  unint64_t v602;
  int v603;
  unint64_t v604;
  int v605;
  int v606;
  unint64_t v607;
  uint64_t v608;
  int v609;
  unint64_t v610;
  int v611;
  _BYTE *v612;
  char v613;
  unint64_t v614;
  uint64_t v615;
  int v616;
  int v617;
  unint64_t v618;
  int v619;
  _BYTE *v620;
  int v621;
  uint64_t v622;
  int v623;
  unint64_t v624;
  int v625;
  _BYTE *v626;
  char v627;
  uint64_t v628;
  int v629;
  unint64_t v630;
  int v631;
  _BYTE *v632;
  char v633;
  uint64_t v634;
  int v635;
  unint64_t v636;
  int v637;
  _BYTE *v638;
  char v639;
  unsigned __int8 *v640;
  int v641;
  unsigned int v642;
  int v643;
  int v644;
  int v645;
  unint64_t v646;
  int v647;
  int v648;
  unint64_t v649;
  int v650;
  unint64_t v651;
  int v652;
  _BYTE *v653;
  int v654;
  unint64_t v655;
  uint64_t v656;
  int v657;
  unint64_t v658;
  int v659;
  _BYTE *v660;
  char v661;
  uint64_t v662;
  int v663;
  unint64_t v664;
  int v665;
  _BYTE *v666;
  char v667;
  uint64_t v668;
  int v669;
  unint64_t v670;
  int v671;
  _BYTE *v672;
  char v673;
  uint64_t v674;
  int v675;
  unint64_t v676;
  int v677;
  _BYTE *v678;
  char v679;
  int v680;
  unint64_t v681;
  int v682;
  int v683;
  uint64_t v684;
  int v685;
  unint64_t v686;
  int v687;
  _BYTE *v688;
  char v689;
  unint64_t v690;
  unint64_t v691;
  unint64_t v692;
  unint64_t v693;
  unint64_t v694;
  unint64_t v695;
  unint64_t v696;
  unint64_t v697;
  unint64_t v698;
  unint64_t v699;
  unint64_t v700;
  int v701;
  unint64_t v702;
  int v703;
  int v704;
  unint64_t v705;
  int v706;
  int v707;
  uint64_t v708;
  int v709;
  unint64_t v710;
  int v711;
  _BYTE *v712;
  char v713;
  uint64_t v714;
  int v715;
  unint64_t v716;
  int v717;
  _BYTE *v718;
  char v719;
  uint64_t v720;
  int v721;
  unint64_t v722;
  int v723;
  _BYTE *v724;
  char v725;
  uint64_t v726;
  int v727;
  unint64_t v728;
  int v729;
  _BYTE *v730;
  char v731;
  uint64_t v732;
  int v733;
  unint64_t v734;
  int v735;
  _BYTE *v736;
  char v737;
  uint64_t v738;
  int v739;
  unint64_t v740;
  int v741;
  _BYTE *v742;
  char v743;
  uint64_t v744;
  int v745;
  unint64_t v746;
  int v747;
  _BYTE *v748;
  char v749;
  unint64_t v750;
  uint64_t v751;
  int v752;
  unint64_t v753;
  int v754;
  _BYTE *v755;
  char v756;
  uint64_t v757;
  int v758;
  unint64_t v759;
  int v760;
  _BYTE *v761;
  char v762;
  int v763;
  unint64_t v764;
  unsigned int v765;
  int v766;
  int v767;
  uint64_t v768;
  int v769;
  unint64_t v770;
  int v771;
  _BYTE *v772;
  char v773;
  uint64_t v774;
  int v775;
  unint64_t v776;
  int v777;
  _BYTE *v778;
  char v779;
  unint64_t v780;
  unint64_t v781;
  unint64_t v782;
  unint64_t v783;
  unint64_t v784;
  unint64_t v785;
  int v786;
  unint64_t v787;
  int v788;
  int v789;
  uint64_t v790;
  int v791;
  unint64_t v792;
  int v793;
  _BYTE *v794;
  char v795;
  uint64_t v796;
  int v797;
  unint64_t v798;
  int v799;
  int v800;
  int v801;
  _BYTE *v802;
  char v803;
  uint64_t v804;
  int v805;
  unint64_t v806;
  int v807;
  int v808;
  int v809;
  _BYTE *v810;
  char v811;
  uint64_t v812;
  int v813;
  unint64_t v814;
  int v815;
  int v816;
  int v817;
  _BYTE *v818;
  char v819;
  uint64_t v820;
  int v821;
  unint64_t v822;
  int v823;
  int v824;
  int v825;
  _BYTE *v826;
  char v827;
  uint64_t v828;
  int v829;
  unint64_t v830;
  int v831;
  int v832;
  int v833;
  _BYTE *v834;
  char v835;
  uint64_t v836;
  int v837;
  unint64_t v838;
  int v839;
  int v840;
  int v841;
  _BYTE *v842;
  char v843;
  uint64_t v844;
  int v845;
  unint64_t v846;
  int v847;
  _BYTE *v848;
  char v849;
  uint64_t v850;
  int v851;
  unint64_t v852;
  int v853;
  _BYTE *v854;
  char v855;
  uint64_t v856;
  int v857;
  unint64_t v858;
  int v859;
  _BYTE *v860;
  char v861;
  int v862;
  unint64_t v863;
  int v864;
  int v865;
  int v866;
  int v867;
  int v868;
  unint64_t v869;
  int v870;
  int v871;
  int v872;
  unint64_t v873;
  uint64_t v874;
  int v875;
  uint64_t v876;
  int v877;
  int v878;
  int v879;
  unint64_t v880;
  int v881;
  int v882;
  int v883;
  unint64_t v884;
  uint64_t v885;
  int v886;
  uint64_t v887;
  int v888;
  int v889;
  int v890;
  unint64_t v891;
  int v892;
  unsigned int v893;
  unsigned int i;
  int v895;
  int v896;
  int v897;
  _BYTE *v898;
  char v899;
  int v900;
  int v901;
  unint64_t v902;
  unsigned int v903;
  int v904;
  int v905;
  int v906;
  unint64_t v907;
  int v908;
  int v909;
  int v910;
  _BYTE *v911;
  char v912;
  BOOL v913;
  int v914;
  int v915;
  int v916;
  int v917;
  unint64_t v918;
  int v919;
  int v920;
  int v921;
  int v922;
  unint64_t v923;
  int v924;
  int v925;
  int v926;
  unint64_t v927;
  int v928;
  int v929;
  int v930;
  _BYTE *v931;
  char v932;
  int v933;
  unsigned int v934;
  unsigned int v935;
  int v936;
  int v937;
  int v938;
  _BYTE *v939;
  char v940;
  int v941;
  int v942;
  unint64_t v943;
  unsigned int v944;
  int v945;
  int v946;
  int v947;
  unint64_t v948;
  int v949;
  int v950;
  int v951;
  _BYTE *v952;
  char v953;
  unsigned int v954;
  int32x2_t v955;
  int v956;
  int v957;
  unint64_t v958;
  int v959;
  unint64_t v960;
  int v961;
  int v962;
  int v963;
  unint64_t v964;
  int v965;
  unint64_t v966;
  uint64_t v967;
  int v968;
  unint64_t v969;
  unsigned int v970;
  int v971;
  _BYTE *v972;
  char v973;
  uint64_t v974;
  int v975;
  unint64_t v976;
  int v977;
  int v978;
  int v979;
  _BYTE *v980;
  char v981;
  uint64_t v982;
  int v983;
  unint64_t v984;
  int v985;
  _BYTE *v986;
  char v987;
  uint64_t v988;
  int v989;
  unint64_t v990;
  int v991;
  _BYTE *v992;
  char v993;
  int v994;
  unint64_t v995;
  int v996;
  int v997;
  uint64_t v998;
  int v999;
  unint64_t v1000;
  int v1001;
  _BYTE *v1002;
  char v1003;
  uint64_t v1004;
  int v1005;
  unint64_t v1006;
  int v1007;
  uint64_t v1008;
  int v1009;
  unint64_t v1010;
  int v1011;
  uint64_t v1012;
  int v1013;
  unint64_t v1014;
  int v1015;
  uint64_t v1016;
  int v1017;
  unint64_t v1018;
  int v1019;
  uint64_t v1020;
  int v1021;
  unint64_t v1022;
  int v1023;
  uint64_t v1024;
  int v1025;
  unint64_t v1026;
  int v1027;
  int v1028;
  unint64_t v1029;
  unsigned int v1030;
  int v1031;
  int v1032;
  uint64_t v1033;
  int v1034;
  unint64_t v1035;
  int v1036;
  int v1037;
  int v1038;
  _BYTE *v1039;
  char v1040;
  uint64_t v1041;
  int v1042;
  unint64_t v1043;
  int v1044;
  _BYTE *v1045;
  char v1046;
  uint64_t v1047;
  int v1048;
  unint64_t v1049;
  int v1050;
  int v1051;
  int v1052;
  _BYTE *v1053;
  char v1054;
  unint64_t v1055;
  int v1056;
  unint64_t v1057;
  int v1058;
  int v1059;
  unint64_t v1060;
  int v1061;
  int v1062;
  uint64_t v1063;
  int v1064;
  unint64_t v1065;
  int v1066;
  _BYTE *v1067;
  char v1068;
  uint64_t v1069;
  int v1070;
  unint64_t v1071;
  int v1072;
  int v1073;
  int v1074;
  _BYTE *v1075;
  char v1076;
  unint64_t v1077;
  unint64_t v1078;
  unint64_t v1079;
  int v1080;
  unint64_t v1081;
  int v1082;
  int v1083;
  unint64_t v1084;
  int v1085;
  int v1086;
  uint64_t v1087;
  int v1088;
  unint64_t v1089;
  int v1090;
  int v1091;
  int v1092;
  _BYTE *v1093;
  char v1094;
  unint64_t v1095;
  uint64_t v1096;
  int v1097;
  unint64_t v1098;
  int v1099;
  int v1100;
  int v1101;
  _BYTE *v1102;
  char v1103;
  uint64_t v1104;
  int v1105;
  unint64_t v1106;
  unsigned int v1107;
  int v1108;
  _BYTE *v1109;
  char v1110;
  int v1111;
  unint64_t v1112;
  int v1113;
  int v1114;
  unint64_t v1115;
  unint64_t v1116;
  uint64_t v1117;
  int v1118;
  unint64_t v1119;
  int v1120;
  _BYTE *v1121;
  char v1122;
  unint64_t v1123;
  unint64_t v1124;
  unint64_t v1125;
  unint64_t v1126;
  unint64_t v1127;
  unint64_t v1128;
  unint64_t v1129;
  unint64_t v1130;
  unint64_t v1131;
  int v1132;
  unint64_t v1133;
  int v1134;
  int v1135;
  unint64_t v1136;
  unsigned int v1137;
  int v1138;
  int v1139;
  int v1140;
  unint64_t v1141;
  int v1142;
  int v1143;
  unsigned int v1144;
  unsigned int v1145;
  unsigned __int8 *v1146;
  unint64_t v1147;
  int v1148;
  unint64_t v1149;
  int v1150;
  int v1151;
  unint64_t v1152;
  uint64_t v1153;
  int v1154;
  int v1155;
  unint64_t v1156;
  int v1157;
  _BYTE *v1158;
  int v1159;
  uint64_t v1160;
  int v1161;
  unint64_t v1162;
  int v1163;
  _BYTE *v1164;
  char v1165;
  uint64_t v1166;
  int v1167;
  unint64_t v1168;
  int v1169;
  _BYTE *v1170;
  char v1171;
  uint64_t v1172;
  int v1173;
  unint64_t v1174;
  int v1175;
  _BYTE *v1176;
  char v1177;
  uint64_t v1178;
  int v1179;
  unint64_t v1180;
  int v1181;
  _BYTE *v1182;
  char v1183;
  uint64_t v1184;
  int v1185;
  unint64_t v1186;
  int v1187;
  _BYTE *v1188;
  char v1189;
  uint64_t v1190;
  int v1191;
  unint64_t v1192;
  int v1193;
  _BYTE *v1194;
  char v1195;
  uint64_t v1196;
  int v1197;
  unint64_t v1198;
  int v1199;
  _BYTE *v1200;
  char v1201;
  unint64_t v1202;
  unint64_t v1203;
  unint64_t v1204;
  unint64_t v1205;
  unint64_t v1206;
  unsigned int v1207;
  uint64_t v1208;
  int v1209;
  uint64_t v1210;
  int v1211;
  unint64_t v1212;
  int v1213;
  int v1214;
  int v1215;
  _BYTE *v1216;
  char v1217;
  int v1218;
  unint64_t v1219;
  int v1220;
  int v1221;
  uint64_t v1222;
  int v1223;
  unint64_t v1224;
  int v1225;
  int v1226;
  int v1227;
  _BYTE *v1228;
  char v1229;
  int v1230;
  unint64_t v1231;
  int v1232;
  int v1233;
  uint64_t v1234;
  int v1235;
  unint64_t v1236;
  int v1237;
  int v1238;
  int v1239;
  _BYTE *v1240;
  char v1241;
  unsigned int v1242;
  int v1243;
  unint64_t v1244;
  int v1245;
  int v1246;
  uint64_t v1247;
  uint64_t v1248;
  int v1249;
  int v1250;
  unint64_t v1251;
  int v1252;
  _BYTE *v1253;
  int v1254;
  uint64_t v1255;
  int v1256;
  unint64_t v1257;
  int v1258;
  _BYTE *v1259;
  char v1260;
  uint64_t v1261;
  int v1262;
  unint64_t v1263;
  int v1264;
  _BYTE *v1265;
  char v1266;
  uint64_t v1267;
  int v1268;
  unint64_t v1269;
  int v1270;
  _BYTE *v1271;
  char v1272;
  uint64_t v1273;
  int v1274;
  unint64_t v1275;
  int v1276;
  _BYTE *v1277;
  char v1278;
  uint64_t v1279;
  int v1280;
  unint64_t v1281;
  int v1282;
  _BYTE *v1283;
  char v1284;
  uint64_t v1285;
  int v1286;
  unint64_t v1287;
  int v1288;
  _BYTE *v1289;
  char v1290;
  unint64_t v1291;
  unint64_t v1292;
  int v1293;
  unint64_t v1294;
  int v1295;
  int v1296;
  uint64_t v1297;
  uint64_t v1298;
  int v1299;
  unint64_t v1300;
  int v1301;
  _BYTE *v1302;
  int v1303;
  uint64_t v1304;
  int v1305;
  unint64_t v1306;
  int v1307;
  _BYTE *v1308;
  char v1309;
  uint64_t v1310;
  int v1311;
  unint64_t v1312;
  int v1313;
  _BYTE *v1314;
  char v1315;
  uint64_t v1316;
  int v1317;
  unint64_t v1318;
  int v1319;
  _BYTE *v1320;
  char v1321;
  uint64_t v1322;
  int v1323;
  unint64_t v1324;
  int v1325;
  _BYTE *v1326;
  char v1327;
  uint64_t v1328;
  int v1329;
  unint64_t v1330;
  int v1331;
  _BYTE *v1332;
  char v1333;
  uint64_t v1334;
  int v1335;
  unint64_t v1336;
  int v1337;
  _BYTE *v1338;
  char v1339;
  uint64_t v1340;
  int v1341;
  unint64_t v1342;
  int v1343;
  int v1344;
  int v1345;
  _BYTE *v1346;
  char v1347;
  uint64_t v1348;
  int v1349;
  int v1350;
  unint64_t v1351;
  int v1352;
  unint64_t v1353;
  unint64_t v1354;
  unint64_t v1355;
  uint64_t v1356;
  int v1357;
  unint64_t v1358;
  int v1359;
  int v1360;
  int v1361;
  _BYTE *v1362;
  char v1363;
  unsigned int v1364;
  int v1365;
  unint64_t v1366;
  int v1367;
  int v1368;
  uint64_t v1369;
  uint64_t v1370;
  int v1371;
  int v1372;
  unint64_t v1373;
  int v1374;
  _BYTE *v1375;
  int v1376;
  uint64_t v1377;
  int v1378;
  unint64_t v1379;
  int v1380;
  _BYTE *v1381;
  char v1382;
  uint64_t v1383;
  int v1384;
  unint64_t v1385;
  int v1386;
  _BYTE *v1387;
  char v1388;
  uint64_t v1389;
  int v1390;
  unint64_t v1391;
  int v1392;
  _BYTE *v1393;
  char v1394;
  uint64_t v1395;
  int v1396;
  unint64_t v1397;
  int v1398;
  _BYTE *v1399;
  char v1400;
  uint64_t v1401;
  int v1402;
  unint64_t v1403;
  int v1404;
  _BYTE *v1405;
  char v1406;
  uint64_t v1407;
  int v1408;
  unint64_t v1409;
  int v1410;
  _BYTE *v1411;
  char v1412;
  int v1413;
  int v1414;
  int v1415;
  unint64_t v1416;
  int v1417;
  int v1418;
  int v1419;
  unint64_t v1420;
  int v1421;
  int v1422;
  uint64_t v1423;
  _DWORD *v1424;
  unsigned __int16 *v1425;
  int v1426;
  int v1427;
  unsigned int v1428;
  unint64_t v1429;
  int v1430;
  unint64_t v1431;
  int v1432;
  int v1433;
  _BYTE *v1434;
  char v1435;
  int v1436;
  int v1437;
  unint64_t v1438;
  int v1439;
  int v1440;
  int v1441;
  unint64_t v1442;
  unint64_t v1443;
  uint64_t v1444;
  int v1445;
  unint64_t v1446;
  int v1447;
  uint64_t v1448;
  int v1449;
  unint64_t v1450;
  int v1451;
  _BYTE *v1452;
  char v1453;
  uint64_t v1454;
  int v1455;
  unint64_t v1456;
  int v1457;
  _BYTE *v1458;
  char v1459;
  uint64_t v1460;
  int v1461;
  unint64_t v1462;
  int v1463;
  _BYTE *v1464;
  char v1465;
  uint64_t v1466;
  int v1467;
  unint64_t v1468;
  int v1469;
  _BYTE *v1470;
  char v1471;
  int v1472;
  int v1473;
  unsigned int v1474;
  unint64_t v1475;
  int v1476;
  unint64_t v1477;
  int v1478;
  int v1479;
  _BYTE *v1480;
  char v1481;
  int v1482;
  int v1483;
  unint64_t v1484;
  int v1485;
  int v1486;
  unint64_t v1487;
  int v1488;
  unint64_t v1489;
  uint64_t v1490;
  int v1491;
  unint64_t v1492;
  int v1493;
  _BYTE *v1494;
  char v1495;
  uint64_t v1496;
  int v1497;
  unint64_t v1498;
  int v1499;
  _BYTE *v1500;
  char v1501;
  uint64_t v1502;
  int v1503;
  unint64_t v1504;
  int v1505;
  _BYTE *v1506;
  char v1507;
  uint64_t v1508;
  int v1509;
  unint64_t v1510;
  int v1511;
  _BYTE *v1512;
  char v1513;
  uint64_t v1514;
  int v1515;
  unint64_t v1516;
  int v1517;
  int v1518;
  int v1519;
  _BYTE *v1520;
  char v1521;
  int v1522;
  unint64_t v1523;
  int v1524;
  unint64_t v1525;
  unsigned int v1526;
  int v1527;
  int v1528;
  _BYTE *v1529;
  char v1530;
  int v1531;
  int v1532;
  unint64_t v1533;
  int v1534;
  int v1535;
  unint64_t v1536;
  int v1537;
  unint64_t v1538;
  uint64_t v1539;
  int v1540;
  int v1541;
  unint64_t v1542;
  int v1543;
  char v1544;
  int v1545;
  unint64_t v1546;
  int v1547;
  int v1548;
  int v1549;
  _BYTE *v1550;
  char v1551;
  int v1552;
  unint64_t v1553;
  uint64_t v1554;
  int v1555;
  unint64_t v1556;
  int v1557;
  _BYTE *v1558;
  char v1559;
  uint64_t v1560;
  int v1561;
  unint64_t v1562;
  int v1563;
  _BYTE *v1564;
  int v1565;
  uint64_t v1566;
  int v1567;
  unint64_t v1568;
  int v1569;
  int v1570;
  int v1571;
  _BYTE *v1572;
  char v1573;
  uint64_t v1574;
  int v1575;
  unint64_t v1576;
  int v1577;
  _BYTE *v1578;
  int v1579;
  int v1580;
  int v1581;
  int v1582;
  int v1583;
  int v1584;
  int v1585;
  int v1586;
  int v1587;
  int v1588;
  unint64_t v1589;
  int v1590;
  int v1591;
  int v1592;
  int v1593;
  unint64_t v1594;
  int v1595;
  int v1596;
  int v1597;
  unint64_t v1598;
  int v1599;
  int v1600;
  int *v1601;
  int v1602;
  int v1603;
  unint64_t v1604;
  int v1605;
  int v1606;
  int v1607;
  unint64_t v1608;
  unint64_t v1609;
  int v1610;
  unsigned int v1611;
  int v1612;
  unint64_t v1613;
  int v1614;
  unint64_t v1615;
  _BYTE *v1616;
  unint64_t v1617;
  int v1618;
  unsigned int v1619;
  unsigned int v1620;
  int v1621;
  unsigned int v1622;
  int v1623;
  unsigned int v1624;
  int v1625;
  int v1626;
  unsigned int v1627;
  unsigned int v1628;
  int v1629;
  unsigned int v1630;
  unsigned int v1631;
  unsigned __int8 v1632;
  unsigned int v1633;
  unsigned int v1634;
  int v1635;
  char v1636;
  char v1637;
  uint64_t v1638;
  int v1639;
  int v1640;
  uint64_t v1641;
  int v1642;
  uint64_t v1643;
  uint64_t v1644;
  uint64_t v1645;
  char v1646;
  uint64_t v1647;
  __int128 *v1648;
  uint64_t v1649;
  unsigned int *v1650;
  char *v1651;
  uint64_t v1652;
  _BYTE *v1653;
  unsigned int *v1654;
  uint64_t v1655;
  uint64_t v1656;
  unint64_t v1657;
  unint64_t v1658;
  unint64_t v1659;
  unsigned int v1660;
  uint64_t v1661;
  uint64_t v1662;
  unint64_t v1663;
  unint64_t v1664;
  uint64_t v1665;
  unsigned int *v1666;
  uint64_t v1667;
  unsigned int *v1668;
  _BYTE *v1669;
  uint64_t v1670;
  _BYTE *v1671;
  unsigned int *v1672;
  uint64_t v1673;
  uint64_t v1674;
  unint64_t v1675;
  unint64_t v1676;
  unint64_t v1677;
  unsigned int v1678;
  uint64_t v1679;
  uint64_t v1680;
  unint64_t v1681;
  unint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  int v1685;
  int v1686;
  char v1687;
  uint64_t v1688;
  char v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  int v1696;
  unsigned int v1697;
  char v1698;
  unsigned int v1699;
  int v1700;
  int v1701;
  uint64_t v1702;
  unsigned int v1703;
  unsigned int v1704;
  unsigned int v1705;
  unsigned int v1706;
  unsigned int v1707;
  unsigned int v1708;
  int v1709;
  int v1710;
  uint64_t v1711;
  int v1712;
  uint64_t v1713;
  int v1714;
  int v1715;
  uint64_t v1716;
  int v1717;
  int v1718;
  uint64_t v1719;
  int v1720;
  uint64_t v1721;
  uint64_t v1722;
  unsigned __int8 *v1723;
  unsigned int *v1724;
  char *v1725;
  uint64_t v1726;
  unsigned int v1727;
  int64_t updated;
  unsigned int v1729;
  unsigned __int8 v1730;
  uint64_t v1731;
  int64_t v1732;
  int64_t v1733;
  unsigned int v1734;
  unsigned int v1735;
  char v1736;
  uint64_t v1737;
  int64_t v1738;
  int64_t v1739;
  uint64_t v1740;
  int64_t v1741;
  uint64_t v1742;
  unsigned __int8 *v1743;
  _BYTE *v1744;
  unsigned int *v1745;
  uint64_t v1746;
  unsigned int v1747;
  int64_t v1748;
  unsigned int v1749;
  unsigned __int8 v1750;
  uint64_t v1751;
  int64_t v1752;
  int64_t v1753;
  unsigned int v1754;
  unsigned int v1755;
  unsigned __int8 v1756;
  uint64_t v1757;
  int64_t v1758;
  int64_t v1759;
  uint64_t v1760;
  int64_t v1761;
  uint64_t v1762;
  unsigned __int8 *v1763;
  _BYTE *v1764;
  unsigned int *v1765;
  uint64_t v1766;
  unsigned int v1767;
  int64_t v1768;
  unsigned int v1769;
  unsigned __int8 v1770;
  uint64_t v1771;
  int64_t v1772;
  int64_t v1773;
  unsigned int v1774;
  unsigned int v1775;
  unsigned __int8 v1776;
  uint64_t v1777;
  int64_t v1778;
  int64_t v1779;
  uint64_t v1780;
  int64_t v1781;
  uint64_t v1782;
  unsigned __int8 *v1783;
  unsigned int *v1784;
  __int16 *v1785;
  uint64_t v1786;
  unsigned int v1787;
  int64_t v1788;
  unsigned int v1789;
  unsigned __int8 v1790;
  uint64_t v1791;
  int64_t v1792;
  int64_t v1793;
  unsigned int v1794;
  unsigned int v1795;
  unsigned __int8 v1796;
  uint64_t v1797;
  int64_t v1798;
  int64_t v1799;
  uint64_t v1800;
  int64_t v1801;
  char v1802;
  unsigned int v1803;
  uint64_t v1804;
  int v1805;
  unsigned int v1806;
  int v1807;
  int v1808;
  uint64_t v1809;
  int v1810;
  int v1811;
  uint64_t v1812;
  int v1813;
  int v1814;
  uint64_t v1815;
  int v1816;
  uint64_t v1817;
  int v1818;
  uint64_t v1819;
  char v1820;
  uint64_t v1821;
  char v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  unsigned int v1828;
  int v1829;
  char v1830;
  uint64_t v1831;
  int v1832;
  int v1833;
  uint64_t v1834;
  int v1835;
  int v1836;
  char v1837;
  unsigned int v1838;
  int v1839;
  unsigned int v1840;
  unsigned int v1841;
  int v1842;
  int v1843;
  uint64_t v1844;
  int v1845;
  uint64_t v1846;
  int v1847;
  uint64_t v1848;
  int v1849;
  unsigned __int8 *v1850;
  unsigned __int8 *v1851;
  unsigned __int8 *v1852;
  unsigned __int8 *v1853;
  unsigned __int8 *v1854;
  unsigned __int8 *v1855;
  unsigned __int8 *v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  int v1861;
  char v1862;
  unsigned int v1863;
  int v1864;
  unsigned int v1865;
  unsigned int v1866;
  int v1867;
  int v1868;
  int v1869;
  uint64_t v1870;
  int v1871;
  int v1872;
  uint64_t v1873;
  int v1874;
  unsigned int v1875;
  unsigned int v1876;
  unsigned int v1877;
  unsigned int v1878;
  unsigned int v1879;
  int v1880;
  int v1881;
  uint64_t v1882;
  int v1883;
  int v1884;
  unsigned __int8 *v1885;
  unsigned __int8 *v1886;
  unsigned __int8 *v1887;
  unsigned __int8 *v1888;
  uint64_t v1889;
  unsigned __int8 *v1890;
  int v1891;
  uint64_t v1892;
  int v1893;
  int v1894;
  int v1895;
  int v1896;
  uint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  int v1901;
  uint64_t v1902;
  uint64_t v1903;
  unint64_t v1904;
  uint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  _BOOL4 v1909;
  unint64_t v1910;
  int v1911;
  uint64_t v1912;
  void *v1913;
  int *v1914;
  int k;
  uint64_t v1916;
  unint64_t v1917;
  uint64_t v1918;
  int v1919;
  unsigned __int8 **v1920;
  uint64_t v1921;
  unint64_t v1922;
  int v1923;
  unsigned int j;
  int v1925;
  unint64_t v1926;
  unsigned int v1927;
  unsigned int v1928;
  uint64_t v1929;
  size_t v1930;
  void *v1931;
  void *v1932;
  _QWORD *v1933;
  _DWORD *v1934;
  uint64_t v1935;
  uint64_t v1936;
  uint64_t v1937;
  int *v1938;
  void *v1939;
  unint64_t v1940;
  int v1941;
  uint64_t v1942;
  int v1943;
  _DWORD *v1944;
  uint64_t v1945;
  uint64_t v1946;
  unint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  uint64_t v1950;
  int v1951;
  uint64_t v1952;
  _DWORD *v1953;
  uint64_t v1954;
  uint64_t (**v1955)();
  int v1956;
  unsigned int *v1957;
  int v1958;
  int v1959;
  uint64_t v1960;
  unsigned int v1961;
  int v1962;
  int v1963;
  uint64_t v1964;
  unint64_t v1965;
  uint64_t v1966;
  unint64_t v1967;
  uint64_t v1968;
  int v1969;
  size_t v1970;
  unsigned int v1971;
  int v1972;
  int v1973;
  uint64_t v1974;
  int v1975;
  unint64_t v1976;
  int v1977;
  int v1978;
  int v1979;
  _BYTE *v1980;
  char v1981;
  unsigned int v1982;
  int v1983;
  unint64_t v1984;
  int v1985;
  int v1986;
  uint64_t v1987;
  uint64_t v1988;
  int v1989;
  int v1990;
  unint64_t v1991;
  int v1992;
  _BYTE *v1993;
  int v1994;
  uint64_t v1995;
  int v1996;
  unint64_t v1997;
  int v1998;
  _BYTE *v1999;
  char v2000;
  uint64_t v2001;
  int v2002;
  unint64_t v2003;
  int v2004;
  _BYTE *v2005;
  char v2006;
  uint64_t v2007;
  int v2008;
  unint64_t v2009;
  int v2010;
  _BYTE *v2011;
  char v2012;
  uint64_t v2013;
  int v2014;
  unint64_t v2015;
  int v2016;
  _BYTE *v2017;
  char v2018;
  uint64_t v2019;
  int v2020;
  unint64_t v2021;
  int v2022;
  _BYTE *v2023;
  char v2024;
  uint64_t v2025;
  int v2026;
  unint64_t v2027;
  int v2028;
  _BYTE *v2029;
  char v2030;
  uint64_t v2031;
  int v2032;
  unint64_t v2033;
  int v2034;
  int v2035;
  int v2036;
  _BYTE *v2037;
  char v2038;
  unsigned int v2039;
  int v2040;
  unint64_t v2041;
  int v2042;
  int v2043;
  uint64_t v2044;
  uint64_t v2045;
  int v2046;
  int v2047;
  unint64_t v2048;
  int v2049;
  _BYTE *v2050;
  int v2051;
  uint64_t v2052;
  int v2053;
  unint64_t v2054;
  int v2055;
  _BYTE *v2056;
  char v2057;
  uint64_t v2058;
  int v2059;
  unint64_t v2060;
  int v2061;
  _BYTE *v2062;
  char v2063;
  uint64_t v2064;
  int v2065;
  unint64_t v2066;
  int v2067;
  _BYTE *v2068;
  char v2069;
  uint64_t v2070;
  int v2071;
  unint64_t v2072;
  int v2073;
  _BYTE *v2074;
  char v2075;
  uint64_t v2076;
  int v2077;
  unint64_t v2078;
  int v2079;
  _BYTE *v2080;
  char v2081;
  uint64_t v2082;
  int v2083;
  unint64_t v2084;
  int v2085;
  _BYTE *v2086;
  char v2087;
  uint64_t v2088;
  int v2089;
  unint64_t v2090;
  int v2091;
  int v2092;
  int v2093;
  _BYTE *v2094;
  char v2095;
  unsigned int v2096;
  int v2097;
  unint64_t v2098;
  int v2099;
  int v2100;
  uint64_t v2101;
  uint64_t v2102;
  int v2103;
  int v2104;
  unint64_t v2105;
  int v2106;
  _BYTE *v2107;
  int v2108;
  uint64_t v2109;
  int v2110;
  unint64_t v2111;
  int v2112;
  _BYTE *v2113;
  char v2114;
  uint64_t v2115;
  int v2116;
  unint64_t v2117;
  int v2118;
  _BYTE *v2119;
  char v2120;
  uint64_t v2121;
  int v2122;
  unint64_t v2123;
  int v2124;
  _BYTE *v2125;
  char v2126;
  uint64_t v2127;
  int v2128;
  unint64_t v2129;
  int v2130;
  _BYTE *v2131;
  char v2132;
  uint64_t v2133;
  int v2134;
  unint64_t v2135;
  int v2136;
  _BYTE *v2137;
  char v2138;
  uint64_t v2139;
  int v2140;
  unint64_t v2141;
  int v2142;
  _BYTE *v2143;
  char v2144;
  uint64_t v2145;
  int v2146;
  unint64_t v2147;
  int v2148;
  int v2149;
  int v2150;
  _BYTE *v2151;
  char v2152;
  int v2153;
  unint64_t v2154;
  int v2155;
  unsigned __int8 *v2156;
  _BYTE *v2157;
  unint64_t v2158;
  int v2159;
  int v2160;
  _BYTE *v2161;
  uint64_t v2162;
  unint64_t v2163;
  unint64_t *v2164;
  _BYTE *v2165;
  unsigned int v2166;
  uint64_t v2167;
  unsigned int v2168;
  int *v2169;
  unsigned __int8 *v2170;
  _DWORD *v2171;
  uint64_t v2172;
  int32x2_t **v2173;
  _DWORD *v2174;
  int *__attribute__((__org_typedef(jmp_buf))) v2175;
  int v2176;
  uint64_t v2177;
  uint64_t v2178;
  uint64_t v2179;
  uint64_t v2180;
  uint64_t v2181;
  uint64_t v2182;
  uint64_t v2183;
  char v2184;
  uint64_t v2185;
  unint64_t v2186;
  void *__src;
  _DWORD *v2188;
  int v2189;
  uint64_t v2190;
  char v2191;
  char *v2192;
  unsigned int *v2193;
  unsigned int *v2194;
  unsigned int *v2195;
  unint64_t v2196;
  int v2197;
  uint64_t v2198;
  uint64_t v2199;
  unsigned int *v2200;
  _BYTE *v2201;
  _BYTE *v2202;
  __int16 *v2203;
  char v2204;
  uint64_t v2205;
  uint64_t v2206;
  uint64_t v2207;
  uint64_t v2208;
  _BYTE *v2209;
  uint64_t v2210;
  _DWORD *v2211;
  unsigned __int8 *v2212;
  unsigned __int8 *v2213;
  unsigned __int8 *v2214;
  unsigned __int8 *v2215;
  char v2216;
  _BOOL4 v2217;
  uint64_t v2218;
  char v2219;
  uint64_t v2220;
  uint64_t v2221;
  uint64_t v2222;
  uint64_t v2223;
  uint64_t v2224;
  uint64_t v2225;
  unint64_t v2226;
  unint64_t v2227;
  __int128 *v2228;
  unsigned int *v2229;
  int v2230;
  uint64_t v2231;
  int v2232;
  uint64_t v2233;
  unint64_t v2234;
  unint64_t v2235;
  _BYTE *v2236;
  unint64_t v2237;
  uint64_t v2238;
  unsigned int v2239;
  unsigned int v2240;
  _BYTE *v2241;
  unsigned __int8 v2242;
  unint64_t v2243;
  unsigned int v2244;
  int v2245;
  _BYTE v2246[108];
  _BYTE v2247[6];
  __int16 v2248;
  __int128 v2249;
  __int128 v2250;
  unsigned int v2251;
  unsigned int v2252;
  unsigned int v2253;
  unsigned int v2254;
  unsigned int v2255[776];
  _BYTE v2256[3168];
  uint64_t v2257;
  uint64_t v2258;
  _QWORD v2259[4];

  v2 = (_DWORD *)MEMORY[0x24BDAC7A8](a1, a2);
  v6 = v4;
  v2259[1] = *MEMORY[0x24BDAC8D0];
  v7 = v2 + 48628;
  v8 = v2 + 44106;
  v2170 = (unsigned __int8 *)(v2 + 43247);
  v2171 = v2 + 184794;
  v2233 = 0;
  v2234 = 0;
  v9 = (int32x2_t **)(v2 + 40862);
  v2235 = v4;
  v2236 = v3;
  v2165 = v3;
  if (v4)
  {
    v10 = 0;
    *v3 = 0x80;
    v11 = 2;
    v2234 = 2;
  }
  else
  {
    v11 = 0;
    v10 = 1;
    LODWORD(v2233) = 1;
  }
  v2174 = v2 + 44106;
  v2175 = v2 + 42924;
  __src = v2 + 18528;
  v2188 = v2;
  v12 = v2[47463];
  v2173 = (int32x2_t **)(v2 + 40862);
  v2164 = v5;
  switch(v12)
  {
    case 2:
      if (!v4)
        goto LABEL_17;
      v13 = v11 | 1;
      v14 = v3;
      v16 = *v3;
      v15 = v16 | (1 << ((v11 | 1) ^ 7));
      *v3 = v16 | (1 << ((v11 | 1) ^ 7));
      break;
    case 1:
      if (!v4)
        goto LABEL_17;
      if ((_DWORD)v11)
      {
        v14 = v3;
        v15 = *v3 | (1 << (v11 ^ 7));
      }
      else
      {
        v15 = 128;
        v14 = v3;
      }
      *v14 = v15;
      v13 = v11 | 1;
      break;
    case 0:
      if (v4)
      {
        v13 = v11 | 1;
        v14 = v3;
        v15 = *v3;
        break;
      }
LABEL_17:
      v18 = v2 + 43246;
      if (v2[43246])
      {
        v19 = 1;
LABEL_2456:
        vpx_internal_error((uint64_t)v2175, 1, "vp9_pack_bitstream: output buffer full");
        goto LABEL_2457;
      }
      v20 = v2 + 47480;
      if (!v2[43243])
        goto LABEL_235;
      goto LABEL_20;
    default:
      if (!v4)
        goto LABEL_17;
      if ((_DWORD)v11)
      {
        v14 = v3;
        v17 = *v3 | (1 << (v11 ^ 7));
      }
      else
      {
        v17 = 128;
        v14 = v3;
      }
      v15 = v17 | (1 << (v11 ^ 6));
      *v14 = v17 | (1 << (v11 ^ 6));
      v13 = v11 + 2;
      break;
  }
  v18 = v2 + 43246;
  v29 = v2[43246] << (6 - v13);
  v30 = v15 | v29;
  *v14 = v15 | v29;
  v31 = v13 + 2;
  if (!v2[43246])
  {
    v40 = v2 + 43243;
    v41 = v2[43243];
    v42 = (_BYTE)v41 << 7;
    v43 = v30 | (v41 << (7 - v31));
    if ((_DWORD)v31)
      v44 = v43;
    else
      v44 = v42;
    *v14 = v44;
    v45 = v31 << 32;
    *v14 = v44 | (v2[43244] << (7 - ((unint64_t)((v31 << 32) + 0x100000000) >> 32)));
    v11 = (unint64_t)((v31 << 32) + 0x200000000) >> 32;
    v2234 = v11;
    v20 = v2 + 47480;
    v46 = v11 > 7;
    v47 = v11 - 8;
    if (v11 < 8)
      v47 = v11;
    if (v46 < v4)
    {
      v48 = v2[47480];
      if (v47)
      {
        v3[v46] |= v48 << (7 - v47);
        v49 = v45 + 0x300000000;
        v11 = (unint64_t)(v45 + 0x300000000) >> 32;
        v2234 = v11;
        if (*v40)
          goto LABEL_53;
      }
      else
      {
        v3[v46] = (_BYTE)v48 << 7;
        v49 = v45 + 0x300000000;
        v11 = (unint64_t)(v45 + 0x300000000) >> 32;
        v2234 = v11;
        if (*v40)
        {
LABEL_53:
          if (!v2[43244])
          {
            v50 = v11 > 7;
            v51 = v11 - 8;
            if (v11 < 8)
              v51 = v11;
            if (v50 >= v4)
              goto LABEL_99;
            v52 = *v2170;
            if (v51)
            {
              v53 = v3;
              v54 = v3[v50] | (v52 << (7 - v51));
            }
            else
            {
              LOBYTE(v54) = (_BYTE)v52 << 7;
              v53 = v3;
            }
            v53[v50] = v54;
            v11 = (unint64_t)(v45 + 0x400000000) >> 32;
            v2234 = v11;
          }
          if (*v20)
          {
            if (*v2170)
            {
LABEL_85:
              v66 = v11 > 7;
              if (v66 >= v4)
                goto LABEL_204;
              if ((v11 & 7) == 0)
                v3[v66] = 0;
              v67 = v11 + 1;
              v2234 = v11 + 1;
              v68 = (v11 + 1) > 7;
              if ((v11 + 1) >= 8)
                v67 = v11 - 7;
              if (v68 >= v4)
                goto LABEL_204;
              if (v67)
                v3[v68] |= 1 << (7 - v67);
              else
                v3[v68] = 0x80;
              v2234 = v11 + 2;
              v97 = (v11 + 2) > 7;
              if (v97 >= v4)
                goto LABEL_204;
              if ((((_BYTE)v11 + 2) & 7) == 0)
                v3[v97] = 0;
              v2234 = v11 + 3;
              v98 = (v11 + 3) > 7;
              if (v98 >= v4)
                goto LABEL_204;
              if ((((_BYTE)v11 + 3) & 7) == 0)
                v3[v98] = 0;
              v2234 = v11 + 4;
              v99 = (v11 + 4) >> 3;
              if (v99 >= v4)
                goto LABEL_204;
              if ((((_BYTE)v11 + 4) & 7) != 0)
                v3[v99] |= 1 << ((v11 + 4) & 7 ^ 7);
              else
                v3[v99] = 0x80;
              v2234 = v11 + 5;
              v138 = (v11 + 5) >> 3;
              if (v138 >= v4)
                goto LABEL_204;
              if ((((_BYTE)v11 + 5) & 7) == 0)
                v3[v138] = 0;
              v2234 = v11 + 6;
              v139 = (v11 + 6) >> 3;
              if (v139 >= v4)
                goto LABEL_204;
              if ((((_BYTE)v11 + 6) & 7) == 0)
                v3[v139] = 0;
              v2234 = v11 + 7;
              v140 = (v11 + 7) >> 3;
              if (v140 >= v4)
              {
LABEL_204:
                v10 = 1;
                LODWORD(v2233) = 1;
              }
              else
              {
                if ((((_BYTE)v11 + 7) & 7) != 0)
                  v3[v140] |= 1 << ((v11 + 7) & 7 ^ 7);
                else
                  v3[v140] = 0x80;
                v2234 = v11 + 8;
                v750 = (v11 + 8) >> 3;
                if (v750 >= v4)
                  goto LABEL_2041;
                if ((v11 & 7) != 0)
                  v3[v750] |= 1 << (v11 & 7 ^ 7);
                else
                  v3[v750] = 0x80;
                v2234 = v11 + 9;
                v780 = (v11 + 9) >> 3;
                if (v780 >= v4)
                  goto LABEL_2041;
                if ((((_BYTE)v11 + 9) & 7) == 0)
                  v3[v780] = 0;
                v2234 = v11 + 10;
                v781 = (v11 + 10) >> 3;
                if (v781 >= v4)
                  goto LABEL_2041;
                if ((((_BYTE)v11 + 10) & 7) == 0)
                  v3[v781] = 0;
                v2234 = v11 + 11;
                v782 = (v11 + 11) >> 3;
                if (v782 >= v4)
                  goto LABEL_2041;
                if ((((_BYTE)v11 + 11) & 7) == 0)
                  v3[v782] = 0;
                v2234 = v11 + 12;
                v783 = (v11 + 12) >> 3;
                if (v783 >= v4)
                  goto LABEL_2041;
                if ((((_BYTE)v11 + 12) & 7) == 0)
                  v3[v783] = 0;
                v2234 = v11 + 13;
                v784 = (v11 + 13) >> 3;
                if (v784 >= v4)
                  goto LABEL_2041;
                if ((((_BYTE)v11 + 13) & 7) == 0)
                  v3[v784] = 0;
                v2234 = v11 + 14;
                v785 = (v11 + 14) >> 3;
                if (v785 >= v4)
                  goto LABEL_2041;
                if ((((_BYTE)v11 + 14) & 7) != 0)
                  v3[v785] |= 1 << ((v11 + 14) & 7 ^ 7);
                else
                  v3[v785] = 0x80;
                v2234 = v11 + 15;
                v1095 = (v11 + 15) >> 3;
                if (v1095 >= v4)
                  goto LABEL_2041;
                if ((((_BYTE)v11 + 15) & 7) != 0)
                  v3[v1095] |= 1 << ((v11 + 15) & 7 ^ 7);
                else
                  v3[v1095] = 0x80;
                v2234 = v11 + 16;
                v1115 = (v11 + 16) >> 3;
                if (v1115 >= v4)
                  goto LABEL_2041;
                if ((v11 & 7) == 0)
                  v3[v1115] = 0;
                v2234 = v11 + 17;
                v1116 = (v11 + 17) >> 3;
                if (v1116 >= v4)
                  goto LABEL_2041;
                if ((((_BYTE)v11 + 17) & 7) != 0)
                  v3[v1116] |= 1 << ((v11 + 17) & 7 ^ 7);
                else
                  v3[v1116] = 0x80;
                v2234 = v11 + 18;
                v1202 = (v11 + 18) >> 3;
                if (v1202 >= v4)
                  goto LABEL_2041;
                if ((((_BYTE)v11 + 18) & 7) == 0)
                  v3[v1202] = 0;
                v2234 = v11 + 19;
                v1203 = (v11 + 19) >> 3;
                if (v1203 >= v4)
                  goto LABEL_2041;
                if ((((_BYTE)v11 + 19) & 7) == 0)
                  v3[v1203] = 0;
                v2234 = v11 + 20;
                v1204 = (v11 + 20) >> 3;
                if (v1204 >= v4)
                  goto LABEL_2041;
                if ((((_BYTE)v11 + 20) & 7) == 0)
                  v3[v1204] = 0;
                v2234 = v11 + 21;
                v1205 = (v11 + 21) >> 3;
                if (v1205 >= v4)
                  goto LABEL_2041;
                if ((((_BYTE)v11 + 21) & 7) == 0)
                  v3[v1205] = 0;
                v1206 = v11 + 22;
                v2234 = v11 + 22;
                v1207 = (v11 + 22) >> 3;
                v1208 = v1207;
                if (v1207 >= v4
                  || ((v1209 = v1206 - 8 * v1207) == 0 ? (v3[v1208] = 0x80) : (v3[v1208] |= 1 << (7 - v1209)),
                      v1353 = v1206 << 32,
                      v1354 = (v1353 + 0x100000000) >> 32,
                      v2234 = v1354,
                      v1355 = (v1353 + 0x100000000) >> 35,
                      v1355 >= v4))
                {
LABEL_2041:
                  v10 = 1;
                  LODWORD(v2233) = 1;
                }
                else
                {
                  if ((v1354 & 7) == 0)
                    v3[v1355] = 0;
                  v10 = 0;
                  v2234 = (v1353 + 0x200000000) >> 32;
                }
                v8 = v2 + 44106;
              }
              goto LABEL_21;
            }
LABEL_138:
            refresh_mask = vp9_get_refresh_mask(v2);
            v101 = v11 >> 3;
            if (v101 < v6)
            {
              v102 = v11 - 8 * (v11 >> 3);
              if (v102)
                v103 = v2165[v101] | (((refresh_mask >> 7) & 1) << (7 - v102));
              else
                LOBYTE(v103) = ((refresh_mask & 0x80) != 0) << 7;
              v2165[v101] = v103;
              v104 = v11 << 32;
              v11 = ((v11 << 32) + 0x100000000) >> 32;
              v2234 = v11;
              if (!v6)
                goto LABEL_101;
              if ((v11 & 0x80000000) == 0)
                v105 = v11;
              else
                v105 = v11 + 7;
              v106 = (uint64_t)v105 >> 3;
              if (v106 < v6)
              {
                v107 = v11 - (v105 & 0xFFFFFFF8);
                if (v107)
                  v108 = v2165[v106] | (((refresh_mask >> 6) & 1) << (7 - v107));
                else
                  LOBYTE(v108) = ((refresh_mask & 0x40) != 0) << 7;
                v2165[v106] = v108;
                v11 = (v104 + 0x200000000) >> 32;
                v2234 = v11;
                v115 = (v11 & 0x80000000) == 0 ? (v104 + 0x200000000) >> 32 : (int)v11 + 7;
                v116 = (uint64_t)v115 >> 3;
                if (v116 < v6)
                {
                  v117 = v11 - (v115 & 0xFFFFFFF8);
                  if (v117)
                    v118 = v2165[v116] | (((refresh_mask >> 5) & 1) << (7 - v117));
                  else
                    LOBYTE(v118) = ((refresh_mask & 0x20) != 0) << 7;
                  v2165[v116] = v118;
                  v11 = (v104 + 0x300000000) >> 32;
                  v2234 = v11;
                  v127 = (v11 & 0x80000000) == 0 ? (v104 + 0x300000000) >> 32 : (int)v11 + 7;
                  v128 = (uint64_t)v127 >> 3;
                  if (v128 < v6)
                  {
                    v129 = v11 - (v127 & 0xFFFFFFF8);
                    if (v129)
                      v130 = v2165[v128] | (((refresh_mask >> 4) & 1) << (7 - v129));
                    else
                      LOBYTE(v130) = ((refresh_mask & 0x10) != 0) << 7;
                    v2165[v128] = v130;
                    v11 = (v104 + 0x400000000) >> 32;
                    v2234 = v11;
                    v141 = (v11 & 0x80000000) == 0 ? (v104 + 0x400000000) >> 32 : (int)v11 + 7;
                    v142 = (uint64_t)v141 >> 3;
                    if (v142 < v6)
                    {
                      v143 = v11 - (v141 & 0xFFFFFFF8);
                      if (v143)
                        v144 = v2165[v142] | (((refresh_mask >> 3) & 1) << (7 - v143));
                      else
                        LOBYTE(v144) = ((refresh_mask & 8) != 0) << 7;
                      v2165[v142] = v144;
                      v11 = (v104 + 0x500000000) >> 32;
                      v2234 = v11;
                      v145 = (v11 & 0x80000000) == 0 ? (v104 + 0x500000000) >> 32 : (int)v11 + 7;
                      v146 = (uint64_t)v145 >> 3;
                      if (v146 < v6)
                      {
                        v147 = v11 - (v145 & 0xFFFFFFF8);
                        if (v147)
                          v148 = v2165[v146] | (((refresh_mask >> 2) & 1) << (7 - v147));
                        else
                          LOBYTE(v148) = ((refresh_mask & 4) != 0) << 7;
                        v2165[v146] = v148;
                        v11 = (v104 + 0x600000000) >> 32;
                        v2234 = v11;
                        v680 = (v11 & 0x80000000) == 0 ? (v104 + 0x600000000) >> 32 : (int)v11 + 7;
                        v681 = (uint64_t)v680 >> 3;
                        if (v681 < v6)
                        {
                          v682 = v11 - (v680 & 0xFFFFFFF8);
                          if (v682)
                            v683 = v2165[v681] | (((refresh_mask >> 1) & 1) << (7 - v682));
                          else
                            LOBYTE(v683) = ((refresh_mask & 2) != 0) << 7;
                          v2165[v681] = v683;
                          v11 = (v104 + 0x700000000) >> 32;
                          v2234 = v11;
                          if ((v11 & 0x80000000) == 0)
                            v704 = (v104 + 0x700000000) >> 32;
                          else
                            v704 = v11 + 7;
                          v705 = (uint64_t)v704 >> 3;
                          if (v705 < v6)
                          {
                            v706 = refresh_mask & 1;
                            v707 = v11 - (v704 & 0xFFFFFFF8);
                            if (v707)
                              v706 = v2165[v705] | (v706 << (7 - v707));
                            else
                              LOBYTE(v706) = (_BYTE)v706 << 7;
                            v2165[v705] = v706;
                            v11 = (v104 + 0x800000000) >> 32;
                            v2234 = v11;
                            if ((v11 & 0x80000000) == 0)
                              v763 = (v104 + 0x800000000) >> 32;
                            else
                              v763 = v11 + 7;
                            v764 = (uint64_t)v763 >> 3;
                            if (v764 >= v6)
                              goto LABEL_1238;
                            v765 = *v7;
                            v766 = v11 - (v763 & 0xFFFFFFF8);
                            if (v766)
                              v767 = v2165[v764] | (((*v7 >> 2) & 1) << (7 - v766));
                            else
                              LOBYTE(v767) = ((*v7 & 4) != 0) << 7;
                            v2165[v764] = v767;
                            v11 = (v104 + 0x900000000) >> 32;
                            v2234 = v11;
                            v786 = (v11 & 0x80000000) == 0 ? (v104 + 0x900000000) >> 32 : (int)v11 + 7;
                            v787 = (uint64_t)v786 >> 3;
                            if (v787 >= v6
                              || ((v788 = v11 - (v786 & 0xFFFFFFF8)) == 0
                                ? (LOBYTE(v789) = ((v765 & 2) != 0) << 7)
                                : (v789 = v2165[v787] | (((v765 >> 1) & 1) << (7 - v788))),
                                  (v2165[v787] = v789,
                                   v11 = (v104 + 0xA00000000) >> 32,
                                   v2234 = v11,
                                   (v11 & 0x80000000) == 0)
                                ? (v862 = (v104 + 0xA00000000) >> 32)
                                : (v862 = v11 + 7),
                                  v863 = (uint64_t)v862 >> 3,
                                  v863 >= v6))
                            {
LABEL_1238:
                              LODWORD(v2233) = 1;
                              v78 = v7 + 1;
                              v79 = v7 + 2;
                            }
                            else
                            {
                              v864 = v765 & 1;
                              v865 = v11 - (v862 & 0xFFFFFFF8);
                              if (v865)
                                v864 = v2165[v863] | (v864 << (7 - v865));
                              else
                                LOBYTE(v864) = (_BYTE)v864 << 7;
                              v2165[v863] = v864;
                              v11 = (v104 + 0xB00000000) >> 32;
                              v2234 = v11;
                              v78 = v7 + 1;
                              v79 = v7 + 2;
                              if ((v11 & 0x80000000) == 0)
                                v994 = (v104 + 0xB00000000) >> 32;
                              else
                                v994 = v11 + 7;
                              v995 = (uint64_t)v994 >> 3;
                              if (v995 >= v6)
                                goto LABEL_1859;
                              v996 = *((_DWORD *)v2170 + 855);
                              v997 = v11 - (v994 & 0xFFFFFFF8);
                              if (v997)
                                v996 = v2165[v995] | (v996 << (7 - v997));
                              else
                                LOBYTE(v996) = (_BYTE)v996 << 7;
                              v2165[v995] = v996;
                              v11 = (v104 + 0xC00000000) >> 32;
                              v2234 = v11;
                              v1028 = (v11 & 0x80000000) == 0 ? (v104 + 0xC00000000) >> 32 : (int)v11 + 7;
                              v1029 = (uint64_t)v1028 >> 3;
                              if (v1029 >= v6)
                                goto LABEL_1859;
                              v1030 = *v78;
                              v1031 = v11 - (v1028 & 0xFFFFFFF8);
                              if (v1031)
                                v1032 = v2165[v1029] | (((*v78 >> 2) & 1) << (7 - v1031));
                              else
                                LOBYTE(v1032) = ((*v78 & 4) != 0) << 7;
                              v2165[v1029] = v1032;
                              v11 = (v104 + 0xD00000000) >> 32;
                              v2234 = v11;
                              v1059 = (v11 & 0x80000000) == 0 ? (v104 + 0xD00000000) >> 32 : (int)v11 + 7;
                              v1060 = (uint64_t)v1059 >> 3;
                              if (v1060 >= v6)
                                goto LABEL_1859;
                              v1061 = v11 - (v1059 & 0xFFFFFFF8);
                              if (v1061)
                                v1062 = v2165[v1060] | (((v1030 >> 1) & 1) << (7 - v1061));
                              else
                                LOBYTE(v1062) = ((v1030 & 2) != 0) << 7;
                              v2165[v1060] = v1062;
                              v11 = (v104 + 0xE00000000) >> 32;
                              v2234 = v11;
                              v1083 = (v11 & 0x80000000) == 0 ? (v104 + 0xE00000000) >> 32 : (int)v11 + 7;
                              v1084 = (uint64_t)v1083 >> 3;
                              if (v1084 >= v6)
                                goto LABEL_1859;
                              v1085 = v1030 & 1;
                              v1086 = v11 - (v1083 & 0xFFFFFFF8);
                              if (v1086)
                                v1085 = v2165[v1084] | (v1085 << (7 - v1086));
                              else
                                LOBYTE(v1085) = (_BYTE)v1085 << 7;
                              v2165[v1084] = v1085;
                              v11 = (v104 + 0xF00000000) >> 32;
                              v2234 = v11;
                              v1111 = (v11 & 0x80000000) == 0 ? (v104 + 0xF00000000) >> 32 : (int)v11 + 7;
                              v1112 = (uint64_t)v1111 >> 3;
                              if (v1112 >= v6)
                                goto LABEL_1859;
                              v1113 = *((_DWORD *)v2170 + 856);
                              v1114 = v11 - (v1111 & 0xFFFFFFF8);
                              if (v1114)
                                v1113 = v2165[v1112] | (v1113 << (7 - v1114));
                              else
                                LOBYTE(v1113) = (_BYTE)v1113 << 7;
                              v2165[v1112] = v1113;
                              v11 = (v104 + 0x1000000000) >> 32;
                              v2234 = v11;
                              v1135 = (v11 & 0x80000000) == 0 ? (v104 + 0x1000000000) >> 32 : (int)v11 + 7;
                              v1136 = (uint64_t)v1135 >> 3;
                              if (v1136 >= v6)
                                goto LABEL_1859;
                              v1137 = *v79;
                              v1138 = v11 - (v1135 & 0xFFFFFFF8);
                              if (v1138)
                                v1139 = v2165[v1136] | (((*v79 >> 2) & 1) << (7 - v1138));
                              else
                                LOBYTE(v1139) = ((*v79 & 4) != 0) << 7;
                              v2165[v1136] = v1139;
                              v11 = (v104 + 0x1100000000) >> 32;
                              v2234 = v11;
                              v1140 = (v11 & 0x80000000) == 0 ? (v104 + 0x1100000000) >> 32 : (int)v11 + 7;
                              v1141 = (uint64_t)v1140 >> 3;
                              if (v1141 >= v6)
                                goto LABEL_1859;
                              v1142 = v11 - (v1140 & 0xFFFFFFF8);
                              if (v1142)
                                v1143 = v2165[v1141] | (((v1137 >> 1) & 1) << (7 - v1142));
                              else
                                LOBYTE(v1143) = ((v1137 & 2) != 0) << 7;
                              v2165[v1141] = v1143;
                              v11 = (v104 + 0x1200000000) >> 32;
                              v2234 = v11;
                              v1218 = (v11 & 0x80000000) == 0 ? (v104 + 0x1200000000) >> 32 : (int)v11 + 7;
                              v1219 = (uint64_t)v1218 >> 3;
                              if (v1219 >= v6)
                                goto LABEL_1859;
                              v1220 = v1137 & 1;
                              v1221 = v11 - (v1218 & 0xFFFFFFF8);
                              if (v1221)
                                v1220 = v2165[v1219] | (v1220 << (7 - v1221));
                              else
                                LOBYTE(v1220) = (_BYTE)v1220 << 7;
                              v2165[v1219] = v1220;
                              v11 = (v104 + 0x1300000000) >> 32;
                              v2234 = v11;
                              v1230 = (v11 & 0x80000000) == 0 ? (v104 + 0x1300000000) >> 32 : (int)v11 + 7;
                              v1231 = (uint64_t)v1230 >> 3;
                              if (v1231 >= v6)
                              {
LABEL_1859:
                                LODWORD(v2233) = 1;
                              }
                              else
                              {
                                v1232 = *((_DWORD *)v2170 + 857);
                                v1233 = v11 - (v1230 & 0xFFFFFFF8);
                                if (v1233)
                                  v1232 = v2165[v1231] | (v1232 << (7 - v1233));
                                else
                                  LOBYTE(v1232) = (_BYTE)v1232 << 7;
                                v2165[v1231] = v1232;
                                v11 = (v104 + 0x1400000000) >> 32;
                                v2234 = v11;
                              }
                            }
                            v8 = v2174;
                            v80 = v2188;
                            v81 = v2188 + 186878;
                            v82 = (int)*v7;
                            if ((_DWORD)v82 == -1)
                              goto LABEL_1240;
                            goto LABEL_102;
                          }
                          LODWORD(v2233) = 1;
                          v8 = v2174;
LABEL_101:
                          v78 = v7 + 1;
                          v79 = v7 + 2;
                          v80 = v2188;
                          v81 = v2188 + 186878;
                          v82 = (int)*v7;
                          if ((_DWORD)v82 == -1)
                            goto LABEL_1240;
LABEL_102:
                          v83 = v80[v82 + 43012];
                          if (v83 != -1)
                          {
                            v84 = *((_QWORD *)v8 + 1690) + 224 * v83 + 88;
                            if (v2171[2083])
                              goto LABEL_1241;
                            goto LABEL_1245;
                          }
LABEL_1240:
                          v84 = 0;
                          if (v2171[2083])
                          {
LABEL_1241:
                            if (v81[3] >= 2 && v8[3417] == 1 || v81[2] >= 2 && v2188[1720 * *v81 + 189667])
                              goto LABEL_1254;
                          }
LABEL_1245:
                          if (v84 && *((_DWORD *)v2173 + 2135) == *(_DWORD *)(v84 + 8))
                          {
                            v866 = *((_DWORD *)v2173 + 2136);
                            v867 = *(_DWORD *)(v84 + 12);
                            if (!(_DWORD)v2233)
                            {
                              if ((v11 & 0x80000000) == 0)
                                v868 = v11;
                              else
                                v868 = v11 + 7;
                              v869 = (uint64_t)v868 >> 3;
                              if (v2235 <= v869)
                              {
                                LODWORD(v2233) = 1;
                              }
                              else
                              {
                                v870 = v11 - (v868 & 0xFFFFFFF8);
                                if (v870)
                                {
                                  v871 = v2236[v869] | ((v866 == v867) << (7 - v870));
                                }
                                else if (v866 == v867)
                                {
                                  LOBYTE(v871) = 0x80;
                                }
                                else
                                {
                                  LOBYTE(v871) = 0;
                                }
                                v2236[v869] = v871;
                                LODWORD(v11) = v11 + 1;
                                v2234 = (int)v11;
                              }
                            }
                            if (v866 == v867)
                              goto LABEL_1349;
LABEL_1268:
                            v874 = (int)*v78;
                            if ((_DWORD)v874 == -1 || (v875 = v2188[v874 + 43012], v875 == -1))
                            {
                              v876 = 0;
                              if (!v2171[2083])
                              {
LABEL_1277:
                                if (v876 && *((_DWORD *)v2173 + 2135) == *(_DWORD *)(v876 + 8))
                                {
                                  v877 = *((_DWORD *)v2173 + 2136);
                                  v878 = *(_DWORD *)(v876 + 12);
                                  if (!(_DWORD)v2233)
                                  {
                                    if ((v11 & 0x80000000) == 0)
                                      v879 = v11;
                                    else
                                      v879 = v11 + 7;
                                    v880 = (uint64_t)v879 >> 3;
                                    if (v2235 <= v880)
                                    {
                                      LODWORD(v2233) = 1;
                                    }
                                    else
                                    {
                                      v881 = v11 - (v879 & 0xFFFFFFF8);
                                      if (v881)
                                      {
                                        v882 = v2236[v880] | ((v877 == v878) << (7 - v881));
                                      }
                                      else if (v877 == v878)
                                      {
                                        LOBYTE(v882) = 0x80;
                                      }
                                      else
                                      {
                                        LOBYTE(v882) = 0;
                                      }
                                      v2236[v880] = v882;
                                      LODWORD(v11) = v11 + 1;
                                      v2234 = (int)v11;
                                    }
                                  }
                                  if (v877 == v878)
                                    goto LABEL_1349;
LABEL_1300:
                                  v885 = (int)*v79;
                                  if ((_DWORD)v885 == -1 || (v886 = v2188[v885 + 43012], v886 == -1))
                                  {
                                    v887 = 0;
                                    if (!v2171[2083])
                                    {
LABEL_1309:
                                      if (v887 && *((_DWORD *)v2173 + 2135) == *(_DWORD *)(v887 + 8))
                                      {
                                        v888 = *((_DWORD *)v2173 + 2136);
                                        v889 = *(_DWORD *)(v887 + 12);
                                        vpx_wb_write_bit((uint64_t)&v2233, v888 == v889);
                                        if (v888 == v889)
                                          goto LABEL_1349;
                                        goto LABEL_1320;
                                      }
LABEL_1313:
                                      if ((_DWORD)v2233)
                                        goto LABEL_1349;
                                      v890 = v11 + 7;
                                      if ((v11 & 0x80000000) == 0)
                                        v890 = v11;
                                      v891 = (uint64_t)v890 >> 3;
                                      if (v2235 <= v891)
                                      {
                                        LODWORD(v2233) = 1;
                                        goto LABEL_1349;
                                      }
                                      if ((v11 & 7) == 0)
                                        v2236[v891] = 0;
                                      v2234 = (int)v11 + 1;
LABEL_1320:
                                      if ((_DWORD)v2233)
                                        goto LABEL_1349;
                                      v892 = 0;
                                      v893 = *((_DWORD *)v2173 + 2135) - 1;
                                      for (i = 16; ; --i)
                                      {
                                        if (v892)
                                          goto LABEL_1325;
                                        v900 = v2234;
                                        v901 = (v2234 & 0x80000000) == 0 ? v2234 : (int)v2234 + 7;
                                        v902 = (uint64_t)v901 >> 3;
                                        if (v2235 > v902)
                                          break;
                                        v892 = 1;
                                        LODWORD(v2233) = 1;
                                        if (i <= 1)
                                          goto LABEL_1349;
LABEL_1326:
                                        ;
                                      }
                                      v895 = (v893 >> (i - 1)) & 1;
                                      v896 = v2234 - (v901 & 0xFFFFFFF8);
                                      if (v896)
                                      {
                                        v897 = v895 << (7 - v896);
                                        v898 = v2236;
                                        v899 = v2236[v902] | v897;
                                      }
                                      else
                                      {
                                        v899 = (_BYTE)v895 << 7;
                                        v898 = v2236;
                                      }
                                      v898[v902] = v899;
                                      v2234 = v900 + 1;
                                      v892 = v2233;
LABEL_1325:
                                      if (i >= 2)
                                        goto LABEL_1326;
                                      if (!v892)
                                      {
                                        v903 = *((_DWORD *)v2173 + 2136) - 1;
                                        v904 = 16;
LABEL_1339:
                                        v905 = v2234;
                                        if ((v2234 & 0x80000000) == 0)
                                          v906 = v2234;
                                        else
                                          v906 = v2234 + 7;
                                        v907 = (uint64_t)v906 >> 3;
                                        if (v2235 <= v907)
                                        {
                                          LODWORD(v2233) = 1;
                                        }
                                        else
                                        {
                                          v908 = (v903 >> (v904 - 1)) & 1;
                                          v909 = v2234 - (v906 & 0xFFFFFFF8);
                                          if (v909)
                                          {
                                            v910 = v908 << (7 - v909);
                                            v911 = v2236;
                                            v912 = v2236[v907] | v910;
                                          }
                                          else
                                          {
                                            v912 = (_BYTE)v908 << 7;
                                            v911 = v2236;
                                          }
                                          v911[v907] = v912;
                                          v2234 = v905 + 1;
                                        }
                                        while (1)
                                        {
                                          v913 = v904-- != 0;
                                          if (v904 == 0 || !v913)
                                            break;
                                          if (!(_DWORD)v2233)
                                            goto LABEL_1339;
                                        }
                                      }
LABEL_1349:
                                      if (*((_DWORD *)v2173 + 2135) == *((_DWORD *)v2173 + 2137))
                                      {
                                        v914 = *((_DWORD *)v2173 + 2136);
                                        v915 = *((_DWORD *)v2173 + 2138);
                                        if (!(_DWORD)v2233)
                                        {
                                          v916 = v2234;
                                          if ((v2234 & 0x80000000) == 0)
                                            v917 = v2234;
                                          else
                                            v917 = v2234 + 7;
                                          v918 = (uint64_t)v917 >> 3;
                                          if (v2235 <= v918)
                                          {
                                            LODWORD(v2233) = 1;
                                          }
                                          else
                                          {
                                            v919 = v2234 - (v917 & 0xFFFFFFF8);
                                            if (v919)
                                            {
                                              v920 = v2236[v918] | ((v914 != v915) << (7 - v919));
                                            }
                                            else if (v914 == v915)
                                            {
                                              LOBYTE(v920) = 0;
                                            }
                                            else
                                            {
                                              LOBYTE(v920) = 0x80;
                                            }
                                            v2236[v918] = v920;
                                            v2234 = v916 + 1;
                                          }
                                        }
                                        if (v914 == v915)
                                          goto LABEL_1370;
                                      }
                                      else
                                      {
                                        if ((_DWORD)v2233)
                                          goto LABEL_1411;
                                        v921 = v2234;
                                        if ((v2234 & 0x80000000) == 0)
                                          v922 = v2234;
                                        else
                                          v922 = v2234 + 7;
                                        v923 = (uint64_t)v922 >> 3;
                                        if (v2235 <= v923)
                                          goto LABEL_1377;
                                        v924 = v2234 - (v922 & 0xFFFFFFF8);
                                        if (v924)
                                          v2236[v923] |= 1 << (7 - v924);
                                        else
                                          v2236[v923] = 0x80;
                                        v2234 = v921 + 1;
                                      }
                                      if ((_DWORD)v2233)
                                        goto LABEL_1411;
                                      v933 = 0;
                                      v934 = *((_DWORD *)v2173 + 2137) - 1;
                                      v935 = 16;
                                      while (2)
                                      {
                                        if (!v933)
                                        {
                                          v941 = v2234;
                                          if ((v2234 & 0x80000000) == 0)
                                            v942 = v2234;
                                          else
                                            v942 = v2234 + 7;
                                          v943 = (uint64_t)v942 >> 3;
                                          if (v2235 <= v943)
                                          {
                                            v933 = 1;
                                            LODWORD(v2233) = 1;
                                            if (v935 <= 1)
                                              goto LABEL_1411;
                                            goto LABEL_1386;
                                          }
                                          v936 = (v934 >> (v935 - 1)) & 1;
                                          v937 = v2234 - (v942 & 0xFFFFFFF8);
                                          if (v937)
                                          {
                                            v938 = v936 << (7 - v937);
                                            v939 = v2236;
                                            v940 = v2236[v943] | v938;
                                          }
                                          else
                                          {
                                            v940 = (_BYTE)v936 << 7;
                                            v939 = v2236;
                                          }
                                          v939[v943] = v940;
                                          v2234 = v941 + 1;
                                          v933 = v2233;
                                        }
                                        if (v935 >= 2)
                                        {
LABEL_1386:
                                          --v935;
                                          continue;
                                        }
                                        break;
                                      }
                                      if (!v933)
                                      {
                                        v944 = *((_DWORD *)v2173 + 2138) - 1;
                                        v945 = 16;
LABEL_1398:
                                        v946 = v2234;
                                        v947 = (v2234 & 0x80000000) == 0 ? v2234 : (int)v2234 + 7;
                                        v948 = (uint64_t)v947 >> 3;
                                        if (v2235 <= v948)
                                        {
                                          LODWORD(v2233) = 1;
                                        }
                                        else
                                        {
                                          v949 = (v944 >> (v945 - 1)) & 1;
                                          v950 = v2234 - (v947 & 0xFFFFFFF8);
                                          if (v950)
                                          {
                                            v951 = v949 << (7 - v950);
                                            v952 = v2236;
                                            v953 = v2236[v948] | v951;
                                          }
                                          else
                                          {
                                            v953 = (_BYTE)v949 << 7;
                                            v952 = v2236;
                                          }
                                          v952[v948] = v953;
                                          v2234 = v946 + 1;
                                        }
                                        while (1)
                                        {
                                          v913 = v945-- != 0;
                                          if (v945 == 0 || !v913)
                                            break;
                                          if (!(_DWORD)v2233)
                                            goto LABEL_1398;
                                        }
LABEL_1370:
                                        if (!(_DWORD)v2233)
                                        {
                                          v925 = v2234;
                                          if ((v2234 & 0x80000000) == 0)
                                            v926 = v2234;
                                          else
                                            v926 = v2234 + 7;
                                          v927 = (uint64_t)v926 >> 3;
                                          if (v2235 > v927)
                                          {
                                            v928 = *((_DWORD *)v2170 + 1);
                                            v929 = v2234 - (v926 & 0xFFFFFFF8);
                                            if (v929)
                                            {
                                              v930 = v928 << (7 - v929);
                                              v931 = v2236;
                                              v932 = v2236[v927] | v930;
                                            }
                                            else
                                            {
                                              v932 = (_BYTE)v928 << 7;
                                              v931 = v2236;
                                            }
                                            v931[v927] = v932;
                                            v2234 = v925 + 1;
                                            goto LABEL_1411;
                                          }
LABEL_1377:
                                          LODWORD(v2233) = 1;
                                        }
                                      }
LABEL_1411:
                                      v954 = v2170[264];
                                      if (v954 != 4)
                                        goto LABEL_1422;
                                      v73 = vadd_s32(vadd_s32(*(int32x2_t *)((char *)*v2173 + 12348), *(int32x2_t *)((char *)*v2173 + 12372)), vadd_s32((*v2173)[1542], (*v2173)[1545]));
                                      v955 = vcgtz_s32(v73);
                                      v75 = vdup_lane_s32((int32x2_t)vand_s8((int8x8_t)v955, (int8x8_t)0x100000001), 1);
                                      v74 = COERCE_DOUBLE(vsub_s32(v75, v955));
                                      v956 = LODWORD(v74);
                                      v957 = (*v2173)[1544].i32[1]
                                           + (*v2173)[1543].i32[0]
                                           + (*v2173)[1546].i32[0]
                                           + (*v2173)[1547].i32[1];
                                      if (v957 > 0)
                                        v956 = LODWORD(v74) + 1;
                                      if (v956 != 1)
                                        goto LABEL_1428;
                                      if (v73.i32[0])
                                      {
                                        v954 = 0;
                                        goto LABEL_1421;
                                      }
                                      if (v73.i32[1])
                                      {
                                        v954 = 1;
                                        goto LABEL_1421;
                                      }
                                      if (v957)
                                      {
                                        v954 = 2;
LABEL_1421:
                                        v2170[264] = v954;
LABEL_1422:
                                        v159 = v2233;
                                        if ((_DWORD)v2233)
                                          goto LABEL_238;
                                        v958 = v2234;
                                        v959 = v2234 + 7;
                                        if ((v2234 & 0x80000000) == 0)
                                          v959 = v2234;
                                        v960 = (uint64_t)v959 >> 3;
                                        if (v2235 <= v960)
                                          goto LABEL_1453;
                                        if ((v2234 & 7) != 0)
                                        {
                                          v961 = 0;
                                        }
                                        else
                                        {
                                          v2236[v960] = 0;
                                          v961 = v2233;
                                        }
                                        v966 = v958 << 32;
                                        v967 = (uint64_t)((v958 << 32) + 0x100000000) >> 32;
                                        v2234 = v967;
                                        if (!v961)
                                        {
                                          if ((int)v967 >= 0)
                                            v968 = v967;
                                          else
                                            v968 = v967 + 7;
                                          v969 = (uint64_t)v968 >> 3;
                                          if (v2235 <= v969)
                                            goto LABEL_1453;
                                          v970 = dword_208F45E00[v954];
                                          v971 = v967 - (v968 & 0xFFFFFFF8);
                                          if (v971)
                                          {
                                            v972 = v2236;
                                            v973 = v2236[v969] | (((v970 >> 1) & 1) << (7 - v971));
                                          }
                                          else
                                          {
                                            v973 = ((v970 & 2) != 0) << 7;
                                            v972 = v2236;
                                          }
                                          v972[v969] = v973;
                                          v974 = (uint64_t)(v966 + 0x200000000) >> 32;
                                          v2234 = v974;
                                          v159 = v2233;
                                          if (!(_DWORD)v2233)
                                          {
                                            if ((int)v974 >= 0)
                                              v975 = v974;
                                            else
                                              v975 = v974 + 7;
                                            v976 = (uint64_t)v975 >> 3;
                                            if (v2235 > v976)
                                            {
                                              v977 = v970 & 1;
                                              v978 = v974 - (v975 & 0xFFFFFFF8);
                                              if (v978)
                                              {
                                                v979 = v977 << (7 - v978);
                                                v980 = v2236;
                                                v981 = v2236[v976] | v979;
                                              }
                                              else
                                              {
                                                v981 = (_BYTE)v977 << 7;
                                                v980 = v2236;
                                              }
                                              v980[v976] = v981;
                                              v2234 = (uint64_t)(v966 + 0x300000000) >> 32;
                                              goto LABEL_237;
                                            }
LABEL_1453:
                                            v159 = 1;
                                            LODWORD(v2233) = 1;
                                          }
LABEL_238:
                                          if (*v20)
                                          {
                                            if (!v159)
                                              goto LABEL_240;
LABEL_270:
                                            if (!*((_BYTE *)v8 + 16))
                                              goto LABEL_577;
LABEL_271:
                                            v194 = *((unsigned __int8 *)v8 + 17);
                                            if (v159)
                                            {
                                              if (*((_BYTE *)v8 + 17))
                                                goto LABEL_273;
LABEL_577:
                                              if (v159)
                                                goto LABEL_641;
                                              v397 = v2234;
                                              if ((v2234 & 0x80000000) == 0)
                                                v398 = v2234;
                                              else
                                                v398 = v2234 + 7;
                                              v399 = (uint64_t)v398 >> 3;
                                              if (v2235 > v399)
                                              {
                                                v400 = *((_DWORD *)v2170 + 10);
                                                v401 = v2234 - (v398 & 0xFFFFFFF8);
                                                if (v401)
                                                {
                                                  v402 = ((v400 >> 7) & 1) << (7 - v401);
                                                  v403 = v2236;
                                                  v404 = v2236[v399] | v402;
                                                }
                                                else
                                                {
                                                  v404 = ((*((_DWORD *)v2170 + 10) & 0x80) != 0) << 7;
                                                  v403 = v2236;
                                                }
                                                v403[v399] = v404;
                                                v405 = v397 << 32;
                                                v406 = (uint64_t)((v397 << 32) + 0x100000000) >> 32;
                                                v2234 = v406;
                                                v159 = v2233;
                                                if ((_DWORD)v2233)
                                                  goto LABEL_641;
                                                v407 = (int)v406 >= 0 ? v406 : (int)v406 + 7;
                                                v408 = (uint64_t)v407 >> 3;
                                                if (v2235 > v408)
                                                {
                                                  v409 = v406 - (v407 & 0xFFFFFFF8);
                                                  if (v409)
                                                  {
                                                    v410 = v2236;
                                                    v411 = v2236[v408] | (((v400 >> 6) & 1) << (7 - v409));
                                                  }
                                                  else
                                                  {
                                                    v411 = ((v400 & 0x40) != 0) << 7;
                                                    v410 = v2236;
                                                  }
                                                  v410[v408] = v411;
                                                  v419 = (uint64_t)(v405 + 0x200000000) >> 32;
                                                  v2234 = v419;
                                                  v159 = v2233;
                                                  if ((_DWORD)v2233)
                                                    goto LABEL_641;
                                                  v420 = (int)v419 >= 0 ? v419 : (int)v419 + 7;
                                                  v421 = (uint64_t)v420 >> 3;
                                                  if (v2235 > v421)
                                                  {
                                                    v422 = v419 - (v420 & 0xFFFFFFF8);
                                                    if (v422)
                                                    {
                                                      v423 = v2236;
                                                      v424 = v2236[v421] | (((v400 >> 5) & 1) << (7 - v422));
                                                    }
                                                    else
                                                    {
                                                      v424 = ((v400 & 0x20) != 0) << 7;
                                                      v423 = v2236;
                                                    }
                                                    v423[v421] = v424;
                                                    v431 = (uint64_t)(v405 + 0x300000000) >> 32;
                                                    v2234 = v431;
                                                    v159 = v2233;
                                                    if ((_DWORD)v2233)
                                                      goto LABEL_641;
                                                    v432 = (int)v431 >= 0 ? v431 : (int)v431 + 7;
                                                    v433 = (uint64_t)v432 >> 3;
                                                    if (v2235 > v433)
                                                    {
                                                      v434 = v431 - (v432 & 0xFFFFFFF8);
                                                      if (v434)
                                                      {
                                                        v435 = v2236;
                                                        v436 = v2236[v433] | (((v400 >> 4) & 1) << (7 - v434));
                                                      }
                                                      else
                                                      {
                                                        v436 = ((v400 & 0x10) != 0) << 7;
                                                        v435 = v2236;
                                                      }
                                                      v435[v433] = v436;
                                                      v443 = (uint64_t)(v405 + 0x400000000) >> 32;
                                                      v2234 = v443;
                                                      v159 = v2233;
                                                      if ((_DWORD)v2233)
                                                        goto LABEL_641;
                                                      v444 = (int)v443 >= 0 ? v443 : (int)v443 + 7;
                                                      v445 = (uint64_t)v444 >> 3;
                                                      if (v2235 > v445)
                                                      {
                                                        v446 = v443 - (v444 & 0xFFFFFFF8);
                                                        if (v446)
                                                        {
                                                          v447 = v2236;
                                                          v448 = v2236[v445] | (((v400 >> 3) & 1) << (7 - v446));
                                                        }
                                                        else
                                                        {
                                                          v448 = ((v400 & 8) != 0) << 7;
                                                          v447 = v2236;
                                                        }
                                                        v447[v445] = v448;
                                                        v744 = (uint64_t)(v405 + 0x500000000) >> 32;
                                                        v2234 = v744;
                                                        v159 = v2233;
                                                        v8 = v2174;
                                                        if (!(_DWORD)v2233)
                                                        {
                                                          if ((int)v744 >= 0)
                                                            v745 = v744;
                                                          else
                                                            v745 = v744 + 7;
                                                          v746 = (uint64_t)v745 >> 3;
                                                          if (v2235 <= v746)
                                                            goto LABEL_1560;
                                                          v747 = v744 - (v745 & 0xFFFFFFF8);
                                                          if (v747)
                                                          {
                                                            v748 = v2236;
                                                            v749 = v2236[v746] | (((v400 >> 2) & 1) << (7 - v747));
                                                          }
                                                          else
                                                          {
                                                            v749 = ((v400 & 4) != 0) << 7;
                                                            v748 = v2236;
                                                          }
                                                          v748[v746] = v749;
                                                          v844 = (uint64_t)(v405 + 0x600000000) >> 32;
                                                          v2234 = v844;
                                                          v159 = v2233;
                                                          v8 = v2174;
                                                          if (!(_DWORD)v2233)
                                                          {
                                                            if ((int)v844 >= 0)
                                                              v845 = v844;
                                                            else
                                                              v845 = v844 + 7;
                                                            v846 = (uint64_t)v845 >> 3;
                                                            if (v2235 <= v846)
                                                              goto LABEL_1560;
                                                            v847 = v844 - (v845 & 0xFFFFFFF8);
                                                            if (v847)
                                                            {
                                                              v848 = v2236;
                                                              v849 = v2236[v846] | (((v400 >> 1) & 1) << (7 - v847));
                                                            }
                                                            else
                                                            {
                                                              v849 = ((v400 & 2) != 0) << 7;
                                                              v848 = v2236;
                                                            }
                                                            v848[v846] = v849;
                                                            v1033 = (uint64_t)(v405 + 0x700000000) >> 32;
                                                            v2234 = v1033;
                                                            v159 = v2233;
                                                            v8 = v2174;
                                                            if (!(_DWORD)v2233)
                                                            {
                                                              if ((int)v1033 >= 0)
                                                                v1034 = v1033;
                                                              else
                                                                v1034 = v1033 + 7;
                                                              v1035 = (uint64_t)v1034 >> 3;
                                                              if (v2235 > v1035)
                                                              {
                                                                v1036 = v400 & 1;
                                                                v1037 = v1033 - (v1034 & 0xFFFFFFF8);
                                                                if (v1037)
                                                                {
                                                                  v1038 = v1036 << (7 - v1037);
                                                                  v1039 = v2236;
                                                                  v1040 = v2236[v1035] | v1038;
                                                                }
                                                                else
                                                                {
                                                                  v1040 = (_BYTE)v1036 << 7;
                                                                  v1039 = v2236;
                                                                }
                                                                v1039[v1035] = v1040;
                                                                v2234 = (uint64_t)(v405 + 0x800000000) >> 32;
                                                                v159 = v2233;
                                                                v8 = v2174;
                                                                goto LABEL_641;
                                                              }
LABEL_1560:
                                                              v159 = 1;
                                                              LODWORD(v2233) = 1;
                                                              v8 = v2174;
                                                            }
                                                          }
                                                        }
LABEL_641:
                                                        v449 = *((_DWORD *)v2170 + 11);
                                                        if (v449)
                                                        {
                                                          if (v159)
                                                            goto LABEL_695;
                                                          v450 = v2234;
                                                          if ((v2234 & 0x80000000) == 0)
                                                            v451 = v2234;
                                                          else
                                                            v451 = v2234 + 7;
                                                          v452 = (uint64_t)v451 >> 3;
                                                          if (v2235 <= v452)
                                                            goto LABEL_694;
                                                          v453 = v2234 - (v451 & 0xFFFFFFF8);
                                                          if (v453)
                                                            v2236[v452] |= 1 << (7 - v453);
                                                          else
                                                            v2236[v452] = 0x80;
                                                          v454 = v450 << 32;
                                                          v455 = (uint64_t)((v450 << 32) + 0x100000000) >> 32;
                                                          v2234 = v455;
                                                          v159 = v2233;
                                                          if (v449 >= 0)
                                                            v456 = v449;
                                                          else
                                                            v456 = -v449;
                                                          if (!(_DWORD)v2233)
                                                          {
                                                            if ((int)v455 >= 0)
                                                              v457 = v455;
                                                            else
                                                              v457 = v455 + 7;
                                                            v458 = (uint64_t)v457 >> 3;
                                                            if (v2235 <= v458)
                                                              goto LABEL_694;
                                                            v459 = v455 - (v457 & 0xFFFFFFF8);
                                                            if (v459)
                                                            {
                                                              v460 = v2236;
                                                              v461 = v2236[v458] | (((v456 >> 3) & 1) << (7 - v459));
                                                            }
                                                            else
                                                            {
                                                              v461 = ((v456 & 8) != 0) << 7;
                                                              v460 = v2236;
                                                            }
                                                            v460[v458] = v461;
                                                            v462 = (uint64_t)(v454 + 0x200000000) >> 32;
                                                            v2234 = v462;
                                                            v159 = v2233;
                                                            if (!(_DWORD)v2233)
                                                            {
                                                              if ((int)v462 >= 0)
                                                                v463 = v462;
                                                              else
                                                                v463 = v462 + 7;
                                                              v464 = (uint64_t)v463 >> 3;
                                                              if (v2235 <= v464)
                                                                goto LABEL_694;
                                                              v465 = v462 - (v463 & 0xFFFFFFF8);
                                                              if (v465)
                                                              {
                                                                v466 = v2236;
                                                                v467 = v2236[v464] | (((v456 >> 2) & 1) << (7 - v465));
                                                              }
                                                              else
                                                              {
                                                                v467 = ((v456 & 4) != 0) << 7;
                                                                v466 = v2236;
                                                              }
                                                              v466[v464] = v467;
                                                              v468 = (uint64_t)(v454 + 0x300000000) >> 32;
                                                              v2234 = v468;
                                                              v159 = v2233;
                                                              if (!(_DWORD)v2233)
                                                              {
                                                                if ((int)v468 >= 0)
                                                                  v469 = v468;
                                                                else
                                                                  v469 = v468 + 7;
                                                                v470 = (uint64_t)v469 >> 3;
                                                                if (v2235 <= v470)
                                                                  goto LABEL_694;
                                                                v471 = v468 - (v469 & 0xFFFFFFF8);
                                                                if (v471)
                                                                {
                                                                  v472 = v2236;
                                                                  v473 = v2236[v470] | (((v456 >> 1) & 1) << (7 - v471));
                                                                }
                                                                else
                                                                {
                                                                  v473 = ((v456 & 2) != 0) << 7;
                                                                  v472 = v2236;
                                                                }
                                                                v472[v470] = v473;
                                                                v480 = (uint64_t)(v454 + 0x400000000) >> 32;
                                                                v2234 = v480;
                                                                v159 = v2233;
                                                                if (!(_DWORD)v2233)
                                                                {
                                                                  if ((int)v480 >= 0)
                                                                    v481 = v480;
                                                                  else
                                                                    v481 = v480 + 7;
                                                                  v482 = (uint64_t)v481 >> 3;
                                                                  if (v2235 > v482)
                                                                  {
                                                                    v483 = v456 & 1;
                                                                    v484 = v480 - (v481 & 0xFFFFFFF8);
                                                                    if (v484)
                                                                    {
                                                                      v485 = v483 << (7 - v484);
                                                                      v486 = v2236;
                                                                      v487 = v2236[v482] | v485;
                                                                    }
                                                                    else
                                                                    {
                                                                      v487 = (_BYTE)v483 << 7;
                                                                      v486 = v2236;
                                                                    }
                                                                    v486[v482] = v487;
                                                                    v2234 = (uint64_t)(v454 + 0x500000000) >> 32;
                                                                    v159 = v2233;
                                                                    v8 = v2174;
                                                                    goto LABEL_695;
                                                                  }
LABEL_694:
                                                                  v159 = 1;
                                                                  LODWORD(v2233) = 1;
                                                                }
                                                              }
                                                            }
                                                          }
LABEL_695:
                                                          v449 = v449 >> 31;
                                                        }
                                                        if (v159)
                                                        {
                                                          v488 = *((_DWORD *)v2170 + 12);
                                                          if (v488)
                                                            goto LABEL_698;
LABEL_753:
                                                          if (v159)
                                                          {
LABEL_754:
                                                            v528 = *((_DWORD *)v2170 + 13);
                                                            if (v528)
                                                              goto LABEL_755;
LABEL_810:
                                                            if (!v159)
                                                            {
                                                              v568 = v2234;
                                                              if ((v2234 & 0x80000000) == 0)
                                                                v569 = v2234;
                                                              else
                                                                v569 = v2234 + 7;
                                                              v570 = (uint64_t)v569 >> 3;
                                                              if (v2235 > v570)
                                                              {
                                                                v571 = v2234 - (v569 & 0xFFFFFFF8);
                                                                if (v571)
                                                                {
                                                                  v572 = v528 << (7 - v571);
                                                                  v573 = v2236;
                                                                  v574 = v2236[v570] | v572;
                                                                }
                                                                else
                                                                {
                                                                  v574 = (_BYTE)v528 << 7;
                                                                  v573 = v2236;
                                                                }
                                                                v573[v570] = v574;
                                                                v595 = v568 << 32;
                                                                v596 = (uint64_t)(v595 + 0x100000000) >> 32;
                                                                v2234 = v596;
                                                                v575 = v8 + 12;
                                                                v576 = *((unsigned __int8 *)v8 + 48);
                                                                if (!(_DWORD)v2233)
                                                                {
                                                                  if ((int)v596 >= 0)
                                                                    v597 = v596;
                                                                  else
                                                                    v597 = v596 + 7;
                                                                  v598 = (uint64_t)v597 >> 3;
                                                                  if (v2235 <= v598)
                                                                  {
                                                                    LODWORD(v2233) = 1;
                                                                  }
                                                                  else
                                                                  {
                                                                    v599 = v596 - (v597 & 0xFFFFFFF8);
                                                                    if (v599)
                                                                      v576 = v2236[v598] | (v576 << (7 - v599));
                                                                    else
                                                                      LOBYTE(v576) = (_BYTE)v576 << 7;
                                                                    v2236[v598] = v576;
                                                                    v2234 = (uint64_t)(v595 + 0x200000000) >> 32;
                                                                  }
LABEL_819:
                                                                  v576 = *v575;
                                                                }
                                                                if (!v576)
                                                                  goto LABEL_2397;
                                                                v577 = *((unsigned __int8 *)v8 + 49);
                                                                if ((_DWORD)v2233)
                                                                {
                                                                  if (*((_BYTE *)v8 + 49))
                                                                    goto LABEL_823;
LABEL_2130:
                                                                  v1146 = (unsigned __int8 *)v8 + 50;
                                                                  v1413 = *((unsigned __int8 *)v8 + 50);
                                                                  if (!(_DWORD)v2233)
                                                                  {
                                                                    v1414 = v2234;
                                                                    if ((v2234 & 0x80000000) == 0)
                                                                      v1415 = v2234;
                                                                    else
                                                                      v1415 = v2234 + 7;
                                                                    v1416 = (uint64_t)v1415 >> 3;
                                                                    if (v2235 <= v1416)
                                                                    {
                                                                      LODWORD(v2233) = 1;
                                                                    }
                                                                    else
                                                                    {
                                                                      v1417 = v2234 - (v1415 & 0xFFFFFFF8);
                                                                      if (v1417)
                                                                        v1413 = v2236[v1416] | (v1413 << (7 - v1417));
                                                                      else
                                                                        LOBYTE(v1413) = (_BYTE)v1413 << 7;
                                                                      v2236[v1416] = v1413;
                                                                      v2234 = v1414 + 1;
                                                                    }
LABEL_2140:
                                                                    v1413 = *v1146;
                                                                  }
                                                                  if (v1413)
                                                                  {
                                                                    if (!(_DWORD)v2233)
                                                                    {
                                                                      v1418 = v2234;
                                                                      if ((v2234 & 0x80000000) == 0)
                                                                        v1419 = v2234;
                                                                      else
                                                                        v1419 = v2234 + 7;
                                                                      v1420 = (uint64_t)v1419 >> 3;
                                                                      if (v2235 <= v1420)
                                                                      {
                                                                        LODWORD(v2233) = 1;
                                                                      }
                                                                      else
                                                                      {
                                                                        v1421 = *((unsigned __int8 *)v8 + 51);
                                                                        v1422 = v2234 - (v1419 & 0xFFFFFFF8);
                                                                        if (v1422)
                                                                          v1421 = v2236[v1420] | (v1421 << (7 - v1422));
                                                                        else
                                                                          LOBYTE(v1421) = (_BYTE)v1421 << 7;
                                                                        v2236[v1420] = v1421;
                                                                        v2234 = v1418 + 1;
                                                                      }
                                                                    }
                                                                    v1423 = 0;
                                                                    v1424 = v2188 + 44138;
                                                                    v1425 = (unsigned __int16 *)(v8 + 17);
                                                                    do
                                                                    {
                                                                      if (*v575)
                                                                      {
                                                                        v1426 = v1424[v1423] & 1;
                                                                        if ((_DWORD)v2233)
                                                                        {
                                                                          if (!v1426)
                                                                            goto LABEL_2226;
                                                                        }
                                                                        else
                                                                        {
                                                                          v1436 = v2234;
                                                                          if ((v2234 & 0x80000000) == 0)
                                                                            v1437 = v2234;
                                                                          else
                                                                            v1437 = v2234 + 7;
                                                                          v1438 = (uint64_t)v1437 >> 3;
                                                                          if (v2235 <= v1438)
                                                                          {
                                                                            LODWORD(v2233) = 1;
                                                                            if (!v1426)
                                                                              goto LABEL_2226;
                                                                          }
                                                                          else
                                                                          {
                                                                            v1439 = v2234 - (v1437 & 0xFFFFFFF8);
                                                                            if (v1439)
                                                                            {
                                                                              v2236[v1438] |= (_BYTE)v1426 << (7 - v1439);
                                                                              v2234 = v1436 + 1;
                                                                              if (!v1426)
                                                                                goto LABEL_2226;
                                                                            }
                                                                            else
                                                                            {
                                                                              v2236[v1438] = (_BYTE)v1426 << 7;
                                                                              v2234 = v1436 + 1;
                                                                              if (!v1426)
                                                                                goto LABEL_2226;
                                                                            }
                                                                          }
                                                                        }
                                                                        v1427 = (__int16)*(v1425 - 2);
                                                                        if (v1427 >= 0)
                                                                          v1428 = (__int16)*(v1425 - 2);
                                                                        else
                                                                          v1428 = -v1427;
                                                                        if (!(_DWORD)v2233)
                                                                        {
                                                                          v1429 = v2234;
                                                                          if ((v2234 & 0x80000000) == 0)
                                                                            v1430 = v2234;
                                                                          else
                                                                            v1430 = v2234 + 7;
                                                                          v1431 = (uint64_t)v1430 >> 3;
                                                                          if (v2235 <= v1431)
                                                                            goto LABEL_2225;
                                                                          v1432 = v2234 - (v1430 & 0xFFFFFFF8);
                                                                          if (v1432)
                                                                          {
                                                                            v1433 = ((v1428 >> 7) & 1) << (7 - v1432);
                                                                            v1434 = v2236;
                                                                            v1435 = v2236[v1431] | v1433;
                                                                          }
                                                                          else
                                                                          {
                                                                            v1435 = ((v1428 & 0x80) != 0) << 7;
                                                                            v1434 = v2236;
                                                                          }
                                                                          v1434[v1431] = v1435;
                                                                          v1443 = v1429 << 32;
                                                                          v1444 = (uint64_t)(v1443 + 0x100000000) >> 32;
                                                                          v2234 = v1444;
                                                                          if (!(_DWORD)v2233)
                                                                          {
                                                                            if ((int)v1444 >= 0)
                                                                              v1445 = v1444;
                                                                            else
                                                                              v1445 = v1444 + 7;
                                                                            v1446 = (uint64_t)v1445 >> 3;
                                                                            if (v2235 <= v1446)
                                                                              goto LABEL_2225;
                                                                            v1447 = v1444 - (v1445 & 0xFFFFFFF8);
                                                                            if (v1447)
                                                                            {
                                                                              v2236[v1446] |= ((v1428 >> 6) & 1) << (7 - v1447);
                                                                              v1448 = (uint64_t)(v1443 + 0x200000000) >> 32;
                                                                              v2234 = v1448;
                                                                              if ((_DWORD)v2233)
                                                                                goto LABEL_2226;
                                                                            }
                                                                            else
                                                                            {
                                                                              v2236[v1446] = ((v1428 & 0x40) != 0) << 7;
                                                                              v1448 = (uint64_t)(v1443 + 0x200000000) >> 32;
                                                                              v2234 = v1448;
                                                                              if ((_DWORD)v2233)
                                                                                goto LABEL_2226;
                                                                            }
                                                                            v1449 = (int)v1448 >= 0
                                                                                  ? v1448
                                                                                  : (int)v1448 + 7;
                                                                            v1450 = (uint64_t)v1449 >> 3;
                                                                            if (v2235 <= v1450)
                                                                            {
LABEL_2225:
                                                                              LODWORD(v2233) = 1;
                                                                              goto LABEL_2226;
                                                                            }
                                                                            v1451 = v1448 - (v1449 & 0xFFFFFFF8);
                                                                            if (v1451)
                                                                            {
                                                                              v1452 = v2236;
                                                                              v1453 = v2236[v1450] | (((v1428 >> 5) & 1) << (7 - v1451));
                                                                            }
                                                                            else
                                                                            {
                                                                              v1453 = ((v1428 & 0x20) != 0) << 7;
                                                                              v1452 = v2236;
                                                                            }
                                                                            v1452[v1450] = v1453;
                                                                            v1454 = (uint64_t)(v1443 + 0x300000000) >> 32;
                                                                            v2234 = v1454;
                                                                            if (!(_DWORD)v2233)
                                                                            {
                                                                              if ((int)v1454 >= 0)
                                                                                v1455 = v1454;
                                                                              else
                                                                                v1455 = v1454 + 7;
                                                                              v1456 = (uint64_t)v1455 >> 3;
                                                                              if (v2235 <= v1456)
                                                                                goto LABEL_2225;
                                                                              v1457 = v1454 - (v1455 & 0xFFFFFFF8);
                                                                              if (v1457)
                                                                              {
                                                                                v1458 = v2236;
                                                                                v1459 = v2236[v1456] | (((v1428 >> 4) & 1) << (7 - v1457));
                                                                              }
                                                                              else
                                                                              {
                                                                                v1459 = ((v1428 & 0x10) != 0) << 7;
                                                                                v1458 = v2236;
                                                                              }
                                                                              v1458[v1456] = v1459;
                                                                              v1460 = (uint64_t)(v1443 + 0x400000000) >> 32;
                                                                              v2234 = v1460;
                                                                              if (!(_DWORD)v2233)
                                                                              {
                                                                                if ((int)v1460 >= 0)
                                                                                  v1461 = v1460;
                                                                                else
                                                                                  v1461 = v1460 + 7;
                                                                                v1462 = (uint64_t)v1461 >> 3;
                                                                                if (v2235 <= v1462)
                                                                                  goto LABEL_2225;
                                                                                v1463 = v1460 - (v1461 & 0xFFFFFFF8);
                                                                                if (v1463)
                                                                                {
                                                                                  v1464 = v2236;
                                                                                  v1465 = v2236[v1462] | (((v1428 >> 3) & 1) << (7 - v1463));
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1465 = ((v1428 & 8) != 0) << 7;
                                                                                  v1464 = v2236;
                                                                                }
                                                                                v1464[v1462] = v1465;
                                                                                v1466 = (uint64_t)(v1443 + 0x500000000) >> 32;
                                                                                v2234 = v1466;
                                                                                if (!(_DWORD)v2233)
                                                                                {
                                                                                  if ((int)v1466 >= 0)
                                                                                    v1467 = v1466;
                                                                                  else
                                                                                    v1467 = v1466 + 7;
                                                                                  v1468 = (uint64_t)v1467 >> 3;
                                                                                  if (v2235 <= v1468)
                                                                                    goto LABEL_2225;
                                                                                  v1469 = v1466 - (v1467 & 0xFFFFFFF8);
                                                                                  if (v1469)
                                                                                  {
                                                                                    v1470 = v2236;
                                                                                    v1471 = v2236[v1468] | (((v1428 >> 2) & 1) << (7 - v1469));
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v1471 = ((v1428 & 4) != 0) << 7;
                                                                                    v1470 = v2236;
                                                                                  }
                                                                                  v1470[v1468] = v1471;
                                                                                  v1554 = (uint64_t)(v1443 + 0x600000000) >> 32;
                                                                                  v2234 = v1554;
                                                                                  v8 = v2174;
                                                                                  if (!(_DWORD)v2233)
                                                                                  {
                                                                                    if ((int)v1554 >= 0)
                                                                                      v1555 = v1554;
                                                                                    else
                                                                                      v1555 = v1554 + 7;
                                                                                    v1556 = (uint64_t)v1555 >> 3;
                                                                                    if (v2235 <= v1556)
                                                                                      goto LABEL_2393;
                                                                                    v1557 = v1554 - (v1555 & 0xFFFFFFF8);
                                                                                    if (v1557)
                                                                                    {
                                                                                      v1558 = v2236;
                                                                                      v1559 = v2236[v1556] | (((v1428 >> 1) & 1) << (7 - v1557));
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      v1559 = ((v1428 & 2) != 0) << 7;
                                                                                      v1558 = v2236;
                                                                                    }
                                                                                    v1558[v1556] = v1559;
                                                                                    v1566 = (uint64_t)(v1443 + 0x700000000) >> 32;
                                                                                    v2234 = v1566;
                                                                                    v8 = v2174;
                                                                                    if (!(_DWORD)v2233)
                                                                                    {
                                                                                      if ((int)v1566 >= 0)
                                                                                        v1567 = v1566;
                                                                                      else
                                                                                        v1567 = v1566 + 7;
                                                                                      v1568 = (uint64_t)v1567 >> 3;
                                                                                      if (v2235 <= v1568)
                                                                                        goto LABEL_2393;
                                                                                      v1569 = v1428 & 1;
                                                                                      v1570 = v1566
                                                                                            - (v1567 & 0xFFFFFFF8);
                                                                                      if (v1570)
                                                                                      {
                                                                                        v1571 = v1569 << (7 - v1570);
                                                                                        v1572 = v2236;
                                                                                        v1573 = v2236[v1568] | v1571;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1573 = (_BYTE)v1569 << 7;
                                                                                        v1572 = v2236;
                                                                                      }
                                                                                      v1572[v1568] = v1573;
                                                                                      v1574 = (uint64_t)(v1443 + 0x800000000) >> 32;
                                                                                      v2234 = v1574;
                                                                                      v8 = v2174;
                                                                                      if (!(_DWORD)v2233)
                                                                                      {
                                                                                        if ((int)v1574 >= 0)
                                                                                          v1575 = v1574;
                                                                                        else
                                                                                          v1575 = v1574 + 7;
                                                                                        v1576 = (uint64_t)v1575 >> 3;
                                                                                        if (v2235 <= v1576)
                                                                                        {
LABEL_2393:
                                                                                          LODWORD(v2233) = 1;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v1577 = v1574
                                                                                                - (v1575 & 0xFFFFFFF8);
                                                                                          if (v1577)
                                                                                          {
                                                                                            v1579 = v1427 >> 31 << (7 - v1577);
                                                                                            v1578 = v2236;
                                                                                            LOBYTE(v1579) = v2236[v1576] | v1579;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v1579 = HIBYTE(v1427) & 0x80;
                                                                                            v1578 = v2236;
                                                                                          }
                                                                                          v1578[v1576] = v1579;
                                                                                          v2234 = (uint64_t)(v1443 + 0x900000000) >> 32;
                                                                                        }
                                                                                        v8 = v2174;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        if ((_DWORD)v2233)
                                                                          goto LABEL_2154;
                                                                        v1440 = v2234;
                                                                        v1441 = v2234 + 7;
                                                                        if ((v2234 & 0x80000000) == 0)
                                                                          v1441 = v2234;
                                                                        v1442 = (uint64_t)v1441 >> 3;
                                                                        if (v2235 <= v1442)
                                                                          goto LABEL_2225;
                                                                        if ((v2234 & 7) == 0)
                                                                          v2236[v1442] = 0;
                                                                        v2234 = v1440 + 1;
                                                                      }
LABEL_2226:
                                                                      if (*v575)
                                                                      {
                                                                        v1472 = (v1424[v1423] >> 1) & 1;
                                                                        if ((_DWORD)v2233)
                                                                        {
                                                                          if (!v1472)
                                                                            goto LABEL_2298;
                                                                        }
                                                                        else
                                                                        {
                                                                          v1485 = v2234;
                                                                          if ((v2234 & 0x80000000) == 0)
                                                                            v1486 = v2234;
                                                                          else
                                                                            v1486 = v2234 + 7;
                                                                          v1487 = (uint64_t)v1486 >> 3;
                                                                          if (v2235 <= v1487)
                                                                          {
                                                                            LODWORD(v2233) = 1;
                                                                            if (!v1472)
                                                                              goto LABEL_2298;
                                                                          }
                                                                          else
                                                                          {
                                                                            v1488 = v2234 - (v1486 & 0xFFFFFFF8);
                                                                            if (v1488)
                                                                            {
                                                                              v2236[v1487] |= ((v1424[v1423] & 2) != 0) << (7 - v1488);
                                                                              v2234 = v1485 + 1;
                                                                              if (!v1472)
                                                                                goto LABEL_2298;
                                                                            }
                                                                            else
                                                                            {
                                                                              v2236[v1487] = ((v1424[v1423] & 2) != 0) << 7;
                                                                              v2234 = v1485 + 1;
                                                                              if (!v1472)
                                                                                goto LABEL_2298;
                                                                            }
                                                                          }
                                                                        }
                                                                        v1473 = (__int16)*(v1425 - 1);
                                                                        if (v1473 >= 0)
                                                                          v1474 = (__int16)*(v1425 - 1);
                                                                        else
                                                                          v1474 = -v1473;
                                                                        if (!(_DWORD)v2233)
                                                                        {
                                                                          v1475 = v2234;
                                                                          if ((v2234 & 0x80000000) == 0)
                                                                            v1476 = v2234;
                                                                          else
                                                                            v1476 = v2234 + 7;
                                                                          v1477 = (uint64_t)v1476 >> 3;
                                                                          if (v2235 <= v1477)
                                                                            goto LABEL_2297;
                                                                          v1478 = v2234 - (v1476 & 0xFFFFFFF8);
                                                                          if (v1478)
                                                                          {
                                                                            v1479 = ((v1474 >> 5) & 1) << (7 - v1478);
                                                                            v1480 = v2236;
                                                                            v1481 = v2236[v1477] | v1479;
                                                                          }
                                                                          else
                                                                          {
                                                                            v1481 = ((v1474 & 0x20) != 0) << 7;
                                                                            v1480 = v2236;
                                                                          }
                                                                          v1480[v1477] = v1481;
                                                                          v1489 = v1475 << 32;
                                                                          v1490 = (uint64_t)(v1489 + 0x100000000) >> 32;
                                                                          v2234 = v1490;
                                                                          if (!(_DWORD)v2233)
                                                                          {
                                                                            if ((int)v1490 >= 0)
                                                                              v1491 = v1490;
                                                                            else
                                                                              v1491 = v1490 + 7;
                                                                            v1492 = (uint64_t)v1491 >> 3;
                                                                            if (v2235 <= v1492)
                                                                              goto LABEL_2297;
                                                                            v1493 = v1490 - (v1491 & 0xFFFFFFF8);
                                                                            if (v1493)
                                                                            {
                                                                              v1494 = v2236;
                                                                              v1495 = v2236[v1492] | (((v1474 >> 4) & 1) << (7 - v1493));
                                                                            }
                                                                            else
                                                                            {
                                                                              v1495 = ((v1474 & 0x10) != 0) << 7;
                                                                              v1494 = v2236;
                                                                            }
                                                                            v1494[v1492] = v1495;
                                                                            v1496 = (uint64_t)(v1489 + 0x200000000) >> 32;
                                                                            v2234 = v1496;
                                                                            if (!(_DWORD)v2233)
                                                                            {
                                                                              if ((int)v1496 >= 0)
                                                                                v1497 = v1496;
                                                                              else
                                                                                v1497 = v1496 + 7;
                                                                              v1498 = (uint64_t)v1497 >> 3;
                                                                              if (v2235 <= v1498)
                                                                                goto LABEL_2297;
                                                                              v1499 = v1496 - (v1497 & 0xFFFFFFF8);
                                                                              if (v1499)
                                                                              {
                                                                                v1500 = v2236;
                                                                                v1501 = v2236[v1498] | (((v1474 >> 3) & 1) << (7 - v1499));
                                                                              }
                                                                              else
                                                                              {
                                                                                v1501 = ((v1474 & 8) != 0) << 7;
                                                                                v1500 = v2236;
                                                                              }
                                                                              v1500[v1498] = v1501;
                                                                              v1502 = (uint64_t)(v1489 + 0x300000000) >> 32;
                                                                              v2234 = v1502;
                                                                              if (!(_DWORD)v2233)
                                                                              {
                                                                                if ((int)v1502 >= 0)
                                                                                  v1503 = v1502;
                                                                                else
                                                                                  v1503 = v1502 + 7;
                                                                                v1504 = (uint64_t)v1503 >> 3;
                                                                                if (v2235 <= v1504)
                                                                                  goto LABEL_2297;
                                                                                v1505 = v1502 - (v1503 & 0xFFFFFFF8);
                                                                                if (v1505)
                                                                                {
                                                                                  v1506 = v2236;
                                                                                  v1507 = v2236[v1504] | (((v1474 >> 2) & 1) << (7 - v1505));
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1507 = ((v1474 & 4) != 0) << 7;
                                                                                  v1506 = v2236;
                                                                                }
                                                                                v1506[v1504] = v1507;
                                                                                v1508 = (uint64_t)(v1489 + 0x400000000) >> 32;
                                                                                v2234 = v1508;
                                                                                if (!(_DWORD)v2233)
                                                                                {
                                                                                  if ((int)v1508 >= 0)
                                                                                    v1509 = v1508;
                                                                                  else
                                                                                    v1509 = v1508 + 7;
                                                                                  v1510 = (uint64_t)v1509 >> 3;
                                                                                  if (v2235 <= v1510)
                                                                                    goto LABEL_2297;
                                                                                  v1511 = v1508 - (v1509 & 0xFFFFFFF8);
                                                                                  if (v1511)
                                                                                  {
                                                                                    v1512 = v2236;
                                                                                    v1513 = v2236[v1510] | (((v1474 >> 1) & 1) << (7 - v1511));
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    v1513 = ((v1474 & 2) != 0) << 7;
                                                                                    v1512 = v2236;
                                                                                  }
                                                                                  v1512[v1510] = v1513;
                                                                                  v1514 = (uint64_t)(v1489 + 0x500000000) >> 32;
                                                                                  v2234 = v1514;
                                                                                  if (!(_DWORD)v2233)
                                                                                  {
                                                                                    if ((int)v1514 >= 0)
                                                                                      v1515 = v1514;
                                                                                    else
                                                                                      v1515 = v1514 + 7;
                                                                                    v1516 = (uint64_t)v1515 >> 3;
                                                                                    if (v2235 <= v1516)
                                                                                      goto LABEL_2297;
                                                                                    v1517 = v1474 & 1;
                                                                                    v1518 = v1514 - (v1515 & 0xFFFFFFF8);
                                                                                    if (v1518)
                                                                                    {
                                                                                      v1519 = v1517 << (7 - v1518);
                                                                                      v1520 = v2236;
                                                                                      v1521 = v2236[v1516] | v1519;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      v1521 = (_BYTE)v1517 << 7;
                                                                                      v1520 = v2236;
                                                                                    }
                                                                                    v1520[v1516] = v1521;
                                                                                    v1560 = (uint64_t)(v1489 + 0x600000000) >> 32;
                                                                                    v2234 = v1560;
                                                                                    v8 = v2174;
                                                                                    if (!(_DWORD)v2233)
                                                                                    {
                                                                                      if ((int)v1560 >= 0)
                                                                                        v1561 = v1560;
                                                                                      else
                                                                                        v1561 = v1560 + 7;
                                                                                      v1562 = (uint64_t)v1561 >> 3;
                                                                                      if (v2235 <= v1562)
                                                                                      {
                                                                                        LODWORD(v2233) = 1;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        v1563 = v1560
                                                                                              - (v1561 & 0xFFFFFFF8);
                                                                                        if (v1563)
                                                                                        {
                                                                                          v1565 = v1473 >> 31 << (7 - v1563);
                                                                                          v1564 = v2236;
                                                                                          LOBYTE(v1565) = v2236[v1562] | v1565;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v1565 = HIBYTE(v1473) & 0x80;
                                                                                          v1564 = v2236;
                                                                                        }
                                                                                        v1564[v1562] = v1565;
                                                                                        v2234 = (uint64_t)(v1489 + 0x700000000) >> 32;
                                                                                      }
                                                                                      v8 = v2174;
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        if ((_DWORD)v2233)
                                                                          goto LABEL_2154;
                                                                        v1482 = v2234;
                                                                        v1483 = v2234 + 7;
                                                                        if ((v2234 & 0x80000000) == 0)
                                                                          v1483 = v2234;
                                                                        v1484 = (uint64_t)v1483 >> 3;
                                                                        if (v2235 <= v1484)
                                                                        {
LABEL_2297:
                                                                          LODWORD(v2233) = 1;
                                                                          goto LABEL_2298;
                                                                        }
                                                                        if ((v2234 & 7) == 0)
                                                                          v2236[v1484] = 0;
                                                                        v2234 = v1482 + 1;
                                                                      }
LABEL_2298:
                                                                      if (*v575)
                                                                      {
                                                                        v1522 = (v1424[v1423] >> 2) & 1;
                                                                        if ((_DWORD)v2233)
                                                                        {
                                                                          if (!v1522)
                                                                            goto LABEL_2329;
                                                                        }
                                                                        else
                                                                        {
                                                                          v1534 = v2234;
                                                                          if ((v2234 & 0x80000000) == 0)
                                                                            v1535 = v2234;
                                                                          else
                                                                            v1535 = v2234 + 7;
                                                                          v1536 = (uint64_t)v1535 >> 3;
                                                                          if (v2235 <= v1536)
                                                                          {
                                                                            LODWORD(v2233) = 1;
                                                                            if (!v1522)
                                                                              goto LABEL_2329;
                                                                          }
                                                                          else
                                                                          {
                                                                            v1537 = v2234 - (v1535 & 0xFFFFFFF8);
                                                                            if (v1537)
                                                                            {
                                                                              v2236[v1536] |= ((v1424[v1423] & 4) != 0) << (7 - v1537);
                                                                              v2234 = v1534 + 1;
                                                                              if (!v1522)
                                                                                goto LABEL_2329;
                                                                            }
                                                                            else
                                                                            {
                                                                              v2236[v1536] = ((v1424[v1423] & 4) != 0) << 7;
                                                                              v2234 = v1534 + 1;
                                                                              if (!v1522)
                                                                                goto LABEL_2329;
                                                                            }
                                                                          }
                                                                        }
                                                                        if ((_DWORD)v2233)
                                                                          goto LABEL_2329;
                                                                        v1523 = v2234;
                                                                        if ((v2234 & 0x80000000) == 0)
                                                                          v1524 = v2234;
                                                                        else
                                                                          v1524 = v2234 + 7;
                                                                        v1525 = (uint64_t)v1524 >> 3;
                                                                        if (v2235 <= v1525)
                                                                          goto LABEL_2345;
                                                                        v1526 = *v1425;
                                                                        v1527 = v2234 - (v1524 & 0xFFFFFFF8);
                                                                        if (v1527)
                                                                        {
                                                                          v1528 = ((v1526 >> 1) & 1) << (7 - v1527);
                                                                          v1529 = v2236;
                                                                          v1530 = v2236[v1525] | v1528;
                                                                        }
                                                                        else
                                                                        {
                                                                          v1530 = ((v1526 & 2) != 0) << 7;
                                                                          v1529 = v2236;
                                                                        }
                                                                        v1529[v1525] = v1530;
                                                                        v1538 = v1523 << 32;
                                                                        v1539 = (uint64_t)(v1538 + 0x100000000) >> 32;
                                                                        v2234 = v1539;
                                                                        if ((_DWORD)v2233)
                                                                        {
LABEL_2329:
                                                                          if (*v575)
                                                                            goto LABEL_2330;
                                                                          goto LABEL_2346;
                                                                        }
                                                                        v1545 = (int)v1539 >= 0 ? v1539 : (int)v1539 + 7;
                                                                        v1546 = (uint64_t)v1545 >> 3;
                                                                        if (v2235 <= v1546)
                                                                        {
LABEL_2345:
                                                                          LODWORD(v2233) = 1;
                                                                          if (*v575)
                                                                            goto LABEL_2330;
                                                                          goto LABEL_2346;
                                                                        }
                                                                        v1547 = v1526 & 1;
                                                                        v1548 = v1539 - (v1545 & 0xFFFFFFF8);
                                                                        if (v1548)
                                                                        {
                                                                          v1549 = v1547 << (7 - v1548);
                                                                          v1550 = v2236;
                                                                          v1551 = v2236[v1546] | v1549;
                                                                        }
                                                                        else
                                                                        {
                                                                          v1551 = (_BYTE)v1547 << 7;
                                                                          v1550 = v2236;
                                                                        }
                                                                        v1550[v1546] = v1551;
                                                                        v2234 = (uint64_t)(v1538 + 0x200000000) >> 32;
                                                                        if (*v575)
                                                                          goto LABEL_2330;
                                                                      }
                                                                      else
                                                                      {
                                                                        if ((_DWORD)v2233)
                                                                          goto LABEL_2154;
                                                                        v1531 = v2234;
                                                                        v1532 = v2234 + 7;
                                                                        if ((v2234 & 0x80000000) == 0)
                                                                          v1532 = v2234;
                                                                        v1533 = (uint64_t)v1532 >> 3;
                                                                        if (v2235 <= v1533)
                                                                          goto LABEL_2345;
                                                                        if ((v2234 & 7) == 0)
                                                                          v2236[v1533] = 0;
                                                                        v2234 = v1531 + 1;
                                                                        if (*v575)
                                                                        {
LABEL_2330:
                                                                          if (!(_DWORD)v2233)
                                                                          {
                                                                            v1540 = v2234;
                                                                            if ((v2234 & 0x80000000) == 0)
                                                                              v1541 = v2234;
                                                                            else
                                                                              v1541 = v2234 + 7;
                                                                            v1542 = (uint64_t)v1541 >> 3;
                                                                            if (v2235 <= v1542)
                                                                              goto LABEL_2353;
                                                                            v1543 = v2234 - (v1541 & 0xFFFFFFF8);
                                                                            if (v1543)
                                                                              v1544 = v2236[v1542] | (((v1424[v1423] >> 3) & 1) << (7 - v1543));
                                                                            else
                                                                              v1544 = ((v1424[v1423] & 8) != 0) << 7;
                                                                            v2236[v1542] = v1544;
LABEL_2352:
                                                                            v2234 = v1540 + 1;
                                                                            goto LABEL_2154;
                                                                          }
                                                                          goto LABEL_2154;
                                                                        }
                                                                      }
LABEL_2346:
                                                                      if (!(_DWORD)v2233)
                                                                      {
                                                                        v1540 = v2234;
                                                                        v1552 = v2234 + 7;
                                                                        if ((v2234 & 0x80000000) == 0)
                                                                          v1552 = v2234;
                                                                        v1553 = (uint64_t)v1552 >> 3;
                                                                        if (v2235 <= v1553)
                                                                        {
LABEL_2353:
                                                                          LODWORD(v2233) = 1;
                                                                          goto LABEL_2154;
                                                                        }
                                                                        if ((v2234 & 7) == 0)
                                                                          v2236[v1553] = 0;
                                                                        goto LABEL_2352;
                                                                      }
LABEL_2154:
                                                                      ++v1423;
                                                                      v1425 += 4;
                                                                    }
                                                                    while (v1423 != 8);
                                                                  }
LABEL_2397:
                                                                  v1580 = (*((_DWORD *)v2170 + 7) + 7) >> 3;
                                                                  v1581 = -1;
                                                                  do
                                                                    ++v1581;
                                                                  while (64 << v1581 < v1580);
                                                                  v1582 = v1581 + 1;
                                                                  v1583 = -1;
                                                                  v9 = v2173;
                                                                  do
                                                                    v1584 = v1580 >> (v1583++ + 2);
                                                                  while (v1584 > 3);
                                                                  v1585 = v8[3376];
                                                                  if (v1585 != v1581)
                                                                  {
                                                                    v1586 = v1585 + 1;
                                                                    do
                                                                    {
                                                                      if (!(_DWORD)v2233)
                                                                      {
                                                                        v1587 = v2234;
                                                                        if ((v2234 & 0x80000000) == 0)
                                                                          v1588 = v2234;
                                                                        else
                                                                          v1588 = v2234 + 7;
                                                                        v1589 = (uint64_t)v1588 >> 3;
                                                                        if (v2235 <= v1589)
                                                                        {
                                                                          LODWORD(v2233) = 1;
                                                                        }
                                                                        else
                                                                        {
                                                                          v1590 = v2234 - (v1588 & 0xFFFFFFF8);
                                                                          if (v1590)
                                                                            v2236[v1589] |= 1 << (7 - v1590);
                                                                          else
                                                                            v2236[v1589] = 0x80;
                                                                          v2234 = v1587 + 1;
                                                                        }
                                                                      }
                                                                      --v1586;
                                                                    }
                                                                    while (v1582 != v1586);
                                                                    v1585 = v8[3376];
                                                                  }
                                                                  v1591 = v2233;
                                                                  if (v1585 < v1583)
                                                                  {
                                                                    if (!(_DWORD)v2233)
                                                                    {
                                                                      v1592 = v2234;
                                                                      v1593 = v2234 + 7;
                                                                      if ((v2234 & 0x80000000) == 0)
                                                                        v1593 = v2234;
                                                                      v1594 = (uint64_t)v1593 >> 3;
                                                                      if (v2235 > v1594)
                                                                      {
                                                                        if ((v2234 & 7) != 0)
                                                                        {
                                                                          v1591 = 0;
                                                                        }
                                                                        else
                                                                        {
                                                                          v2236[v1594] = 0;
                                                                          v1591 = v2233;
                                                                        }
                                                                        v2234 = v1592 + 1;
                                                                        goto LABEL_2427;
                                                                      }
                                                                      v1591 = 1;
                                                                      LODWORD(v2233) = 1;
                                                                    }
                                                                    v1595 = v8[3377];
                                                                    if (v1595)
                                                                    {
LABEL_2429:
                                                                      if (!v1591)
                                                                      {
                                                                        v1596 = v2234;
                                                                        if ((v2234 & 0x80000000) == 0)
                                                                          v1597 = v2234;
                                                                        else
                                                                          v1597 = v2234 + 7;
                                                                        v1598 = (uint64_t)v1597 >> 3;
                                                                        if (v2235 <= v1598)
                                                                        {
LABEL_2436:
                                                                          v19 = 1;
                                                                          LODWORD(v2233) = 1;
                                                                          goto LABEL_2456;
                                                                        }
                                                                        v1599 = v2234 - (v1597 & 0xFFFFFFF8);
                                                                        if (v1599)
                                                                          v1600 = v2236[v1598] | ((v1595 != 1) << (7 - v1599));
                                                                        else
                                                                          LOBYTE(v1600) = v1595 == 1 ? 0 : 0x80;
                                                                        v2236[v1598] = v1600;
                                                                        v2234 = v1596 + 1;
                                                                        v1591 = v2233;
                                                                        if (!(_DWORD)v2233)
                                                                        {
LABEL_2449:
                                                                          v19 = 0;
                                                                          goto LABEL_2457;
                                                                        }
                                                                      }
LABEL_2455:
                                                                      v19 = v1591;
                                                                      goto LABEL_2456;
                                                                    }
LABEL_2454:
                                                                    if (!v1591)
                                                                      goto LABEL_2449;
                                                                    goto LABEL_2455;
                                                                  }
LABEL_2427:
                                                                  v1595 = v8[3377];
                                                                  if (v1591)
                                                                  {
                                                                    if (v1595)
                                                                      goto LABEL_2429;
                                                                  }
                                                                  else
                                                                  {
                                                                    v1601 = v8 + 3377;
                                                                    v1602 = v2234;
                                                                    if ((v2234 & 0x80000000) == 0)
                                                                      v1603 = v2234;
                                                                    else
                                                                      v1603 = v2234 + 7;
                                                                    v1604 = (uint64_t)v1603 >> 3;
                                                                    if (v2235 <= v1604)
                                                                    {
                                                                      v1591 = 1;
                                                                      LODWORD(v2233) = 1;
                                                                      v1595 = *v1601;
                                                                      if (*v1601)
                                                                        goto LABEL_2429;
                                                                    }
                                                                    else
                                                                    {
                                                                      v1605 = v2234 - (v1603 & 0xFFFFFFF8);
                                                                      if (v1605)
                                                                      {
                                                                        v1606 = v2236[v1604] | ((v1595 != 0) << (7 - v1605));
                                                                      }
                                                                      else if (v1595)
                                                                      {
                                                                        LOBYTE(v1606) = 0x80;
                                                                      }
                                                                      else
                                                                      {
                                                                        LOBYTE(v1606) = 0;
                                                                      }
                                                                      v2236[v1604] = v1606;
                                                                      v2234 = v1602 + 1;
                                                                      v1591 = v2233;
                                                                      v1595 = *v1601;
                                                                      if (*v1601)
                                                                        goto LABEL_2429;
                                                                    }
                                                                  }
                                                                  goto LABEL_2454;
                                                                }
                                                                v586 = v2234;
                                                                if ((v2234 & 0x80000000) == 0)
                                                                  v587 = v2234;
                                                                else
                                                                  v587 = v2234 + 7;
                                                                v588 = (uint64_t)v587 >> 3;
                                                                if (v2235 <= v588)
                                                                {
                                                                  LODWORD(v2233) = 1;
                                                                  if (!v577)
                                                                    goto LABEL_2130;
                                                                }
                                                                else
                                                                {
                                                                  v589 = v2234 - (v587 & 0xFFFFFFF8);
                                                                  if (v589)
                                                                    v577 = v2236[v588] | (v577 << (7 - v589));
                                                                  else
                                                                    LOBYTE(v577) = (_BYTE)v577 << 7;
                                                                  v2236[v588] = v577;
                                                                  v2234 = v586 + 1;
                                                                  if (!*((_BYTE *)v8 + 49))
                                                                    goto LABEL_2130;
                                                                }
LABEL_823:
                                                                vp9_choose_segmap_coding_method((uint64_t)v2175, (uint64_t)__src, *(double *)&v73, v74, *(double *)&v75, v76, v77);
                                                                v578 = *((unsigned __int8 *)v8 + 53);
                                                                v579 = v2233;
                                                                if ((_DWORD)v2233)
                                                                {
                                                                  if (v578 != 255)
                                                                  {
LABEL_825:
                                                                    if (v579)
                                                                      goto LABEL_917;
                                                                    v580 = v2234;
                                                                    if ((v2234 & 0x80000000) == 0)
                                                                      v581 = v2234;
                                                                    else
                                                                      v581 = v2234 + 7;
                                                                    v582 = (uint64_t)v581 >> 3;
                                                                    if (v2235 <= v582)
                                                                      goto LABEL_916;
                                                                    v583 = v2234 - (v581 & 0xFFFFFFF8);
                                                                    if (v583)
                                                                    {
                                                                      v584 = v2236;
                                                                      v585 = v2236[v582] | (v578 >> 7 << (7 - v583));
                                                                    }
                                                                    else
                                                                    {
                                                                      LOBYTE(v585) = v578 & 0x80;
                                                                      v584 = v2236;
                                                                    }
                                                                    v584[v582] = v585;
                                                                    v607 = v580 << 32;
                                                                    v608 = (uint64_t)(v607 + 0x100000000) >> 32;
                                                                    v2234 = v608;
                                                                    if ((_DWORD)v2233)
                                                                      goto LABEL_917;
                                                                    v609 = (int)v608 >= 0 ? v608 : (int)v608 + 7;
                                                                    v610 = (uint64_t)v609 >> 3;
                                                                    if (v2235 <= v610)
                                                                      goto LABEL_916;
                                                                    v611 = v608 - (v609 & 0xFFFFFFF8);
                                                                    if (v611)
                                                                    {
                                                                      v612 = v2236;
                                                                      v613 = v2236[v610] | (((v578 >> 6) & 1) << (7 - v611));
                                                                    }
                                                                    else
                                                                    {
                                                                      v613 = ((v578 & 0x40) != 0) << 7;
                                                                      v612 = v2236;
                                                                    }
                                                                    v612[v610] = v613;
                                                                    v622 = (uint64_t)(v607 + 0x200000000) >> 32;
                                                                    v2234 = v622;
                                                                    if ((_DWORD)v2233)
                                                                      goto LABEL_917;
                                                                    v623 = (int)v622 >= 0 ? v622 : (int)v622 + 7;
                                                                    v624 = (uint64_t)v623 >> 3;
                                                                    if (v2235 <= v624)
                                                                      goto LABEL_916;
                                                                    v625 = v622 - (v623 & 0xFFFFFFF8);
                                                                    if (v625)
                                                                    {
                                                                      v626 = v2236;
                                                                      v627 = v2236[v624] | (((v578 >> 5) & 1) << (7 - v625));
                                                                    }
                                                                    else
                                                                    {
                                                                      v627 = ((v578 & 0x20) != 0) << 7;
                                                                      v626 = v2236;
                                                                    }
                                                                    v626[v624] = v627;
                                                                    v634 = (uint64_t)(v607 + 0x300000000) >> 32;
                                                                    v2234 = v634;
                                                                    if ((_DWORD)v2233)
                                                                      goto LABEL_917;
                                                                    v635 = (int)v634 >= 0 ? v634 : (int)v634 + 7;
                                                                    v636 = (uint64_t)v635 >> 3;
                                                                    if (v2235 <= v636)
                                                                    {
LABEL_916:
                                                                      LODWORD(v2233) = 1;
                                                                      goto LABEL_917;
                                                                    }
                                                                    v637 = v634 - (v635 & 0xFFFFFFF8);
                                                                    if (v637)
                                                                    {
                                                                      v638 = v2236;
                                                                      v639 = v2236[v636] | (((v578 >> 4) & 1) << (7 - v637));
                                                                    }
                                                                    else
                                                                    {
                                                                      v639 = ((v578 & 0x10) != 0) << 7;
                                                                      v638 = v2236;
                                                                    }
                                                                    v638[v636] = v639;
                                                                    v684 = (uint64_t)(v607 + 0x400000000) >> 32;
                                                                    v2234 = v684;
                                                                    v8 = v2174;
                                                                    if ((_DWORD)v2233)
                                                                      goto LABEL_917;
                                                                    if ((int)v684 >= 0)
                                                                      v685 = v684;
                                                                    else
                                                                      v685 = v684 + 7;
                                                                    v686 = (uint64_t)v685 >> 3;
                                                                    if (v2235 <= v686)
                                                                      goto LABEL_1635;
                                                                    v687 = v684 - (v685 & 0xFFFFFFF8);
                                                                    if (v687)
                                                                    {
                                                                      v688 = v2236;
                                                                      v689 = v2236[v686] | (((v578 >> 3) & 1) << (7 - v687));
                                                                    }
                                                                    else
                                                                    {
                                                                      v689 = ((v578 & 8) != 0) << 7;
                                                                      v688 = v2236;
                                                                    }
                                                                    v688[v686] = v689;
                                                                    v790 = (uint64_t)(v607 + 0x500000000) >> 32;
                                                                    v2234 = v790;
                                                                    v8 = v2174;
                                                                    if ((_DWORD)v2233)
                                                                      goto LABEL_917;
                                                                    v791 = (int)v790 >= 0 ? v790 : (int)v790 + 7;
                                                                    v792 = (uint64_t)v791 >> 3;
                                                                    if (v2235 <= v792)
                                                                      goto LABEL_1635;
                                                                    v793 = v790 - (v791 & 0xFFFFFFF8);
                                                                    if (v793)
                                                                    {
                                                                      v794 = v2236;
                                                                      v795 = v2236[v792] | (((v578 >> 2) & 1) << (7 - v793));
                                                                    }
                                                                    else
                                                                    {
                                                                      v795 = ((v578 & 4) != 0) << 7;
                                                                      v794 = v2236;
                                                                    }
                                                                    v794[v792] = v795;
                                                                    v998 = (uint64_t)(v607 + 0x600000000) >> 32;
                                                                    v2234 = v998;
                                                                    v8 = v2174;
                                                                    if ((_DWORD)v2233)
                                                                      goto LABEL_917;
                                                                    v999 = (int)v998 >= 0 ? v998 : (int)v998 + 7;
                                                                    v1000 = (uint64_t)v999 >> 3;
                                                                    if (v2235 <= v1000)
                                                                      goto LABEL_1635;
                                                                    v1001 = v998 - (v999 & 0xFFFFFFF8);
                                                                    if (v1001)
                                                                    {
                                                                      v1002 = v2236;
                                                                      v1003 = v2236[v1000] | (((v578 >> 1) & 1) << (7 - v1001));
                                                                    }
                                                                    else
                                                                    {
                                                                      v1003 = ((v578 & 2) != 0) << 7;
                                                                      v1002 = v2236;
                                                                    }
                                                                    v1002[v1000] = v1003;
                                                                    v1087 = (uint64_t)(v607 + 0x700000000) >> 32;
                                                                    v2234 = v1087;
                                                                    v8 = v2174;
                                                                    if ((_DWORD)v2233)
                                                                      goto LABEL_917;
                                                                    v1088 = (int)v1087 >= 0 ? v1087 : (int)v1087 + 7;
                                                                    v1089 = (uint64_t)v1088 >> 3;
                                                                    if (v2235 <= v1089)
                                                                    {
LABEL_1635:
                                                                      LODWORD(v2233) = 1;
                                                                      v8 = v2174;
                                                                      goto LABEL_917;
                                                                    }
                                                                    v1090 = v578 & 1;
                                                                    v1091 = v1087 - (v1088 & 0xFFFFFFF8);
                                                                    if (v1091)
                                                                    {
                                                                      v1092 = v1090 << (7 - v1091);
                                                                      v1093 = v2236;
                                                                      v1094 = v2236[v1089] | v1092;
                                                                    }
                                                                    else
                                                                    {
                                                                      v1094 = (_BYTE)v1090 << 7;
                                                                      v1093 = v2236;
                                                                    }
                                                                    v1093[v1089] = v1094;
                                                                    v2234 = (uint64_t)(v607 + 0x800000000) >> 32;
                                                                    v8 = v2174;
                                                                    v600 = *((unsigned __int8 *)v2174 + 54);
                                                                    v601 = v600 != 255;
                                                                    if ((_DWORD)v2233)
                                                                      goto LABEL_917;
LABEL_864:
                                                                    v602 = v2234;
                                                                    if ((v2234 & 0x80000000) == 0)
                                                                      v603 = v2234;
                                                                    else
                                                                      v603 = v2234 + 7;
                                                                    v604 = (uint64_t)v603 >> 3;
                                                                    if (v2235 > v604)
                                                                    {
                                                                      v605 = v2234 - (v603 & 0xFFFFFFF8);
                                                                      if (v605)
                                                                      {
                                                                        v606 = v2236[v604] | (v601 << (7 - v605));
                                                                      }
                                                                      else if (v600 == 255)
                                                                      {
                                                                        LOBYTE(v606) = 0;
                                                                      }
                                                                      else
                                                                      {
                                                                        LOBYTE(v606) = 0x80;
                                                                      }
                                                                      v2236[v604] = v606;
                                                                      v614 = v602 << 32;
                                                                      v615 = (uint64_t)(v614 + 0x100000000) >> 32;
                                                                      v2234 = v615;
                                                                      v616 = v2233;
                                                                      if (v600 == 255)
                                                                        goto LABEL_1875;
                                                                      if ((_DWORD)v2233)
                                                                        goto LABEL_917;
                                                                      if ((int)v615 >= 0)
                                                                        v617 = v615;
                                                                      else
                                                                        v617 = v615 + 7;
                                                                      v618 = (uint64_t)v617 >> 3;
                                                                      if (v2235 > v618)
                                                                      {
                                                                        v619 = v615 - (v617 & 0xFFFFFFF8);
                                                                        if (v619)
                                                                        {
                                                                          v620 = v2236;
                                                                          v621 = v2236[v618] | (v600 >> 7 << (7 - v619));
                                                                        }
                                                                        else
                                                                        {
                                                                          LOBYTE(v621) = v600 & 0x80;
                                                                          v620 = v2236;
                                                                        }
                                                                        v620[v618] = v621;
                                                                        v628 = (uint64_t)(v614 + 0x200000000) >> 32;
                                                                        v2234 = v628;
                                                                        if ((_DWORD)v2233)
                                                                          goto LABEL_917;
                                                                        v629 = (int)v628 >= 0 ? v628 : (int)v628 + 7;
                                                                        v630 = (uint64_t)v629 >> 3;
                                                                        if (v2235 > v630)
                                                                        {
                                                                          v631 = v628 - (v629 & 0xFFFFFFF8);
                                                                          if (v631)
                                                                          {
                                                                            v632 = v2236;
                                                                            v633 = v2236[v630] | (((v600 >> 6) & 1) << (7 - v631));
                                                                          }
                                                                          else
                                                                          {
                                                                            v633 = ((v600 & 0x40) != 0) << 7;
                                                                            v632 = v2236;
                                                                          }
                                                                          v632[v630] = v633;
                                                                          v674 = (uint64_t)(v614 + 0x300000000) >> 32;
                                                                          v2234 = v674;
                                                                          if ((_DWORD)v2233)
                                                                            goto LABEL_917;
                                                                          if ((int)v674 >= 0)
                                                                            v675 = v674;
                                                                          else
                                                                            v675 = v674 + 7;
                                                                          v676 = (uint64_t)v675 >> 3;
                                                                          if (v2235 <= v676)
                                                                            goto LABEL_1835;
                                                                          v677 = v674 - (v675 & 0xFFFFFFF8);
                                                                          if (v677)
                                                                          {
                                                                            v678 = v2236;
                                                                            v679 = v2236[v676] | (((v600 >> 5) & 1) << (7 - v677));
                                                                          }
                                                                          else
                                                                          {
                                                                            v679 = ((v600 & 0x20) != 0) << 7;
                                                                            v678 = v2236;
                                                                          }
                                                                          v678[v676] = v679;
                                                                          v768 = (uint64_t)(v614 + 0x400000000) >> 32;
                                                                          v2234 = v768;
                                                                          v8 = v2174;
                                                                          if ((_DWORD)v2233)
                                                                            goto LABEL_917;
                                                                          v769 = (int)v768 >= 0 ? v768 : (int)v768 + 7;
                                                                          v770 = (uint64_t)v769 >> 3;
                                                                          if (v2235 <= v770)
                                                                            goto LABEL_1835;
                                                                          v771 = v768 - (v769 & 0xFFFFFFF8);
                                                                          if (v771)
                                                                          {
                                                                            v772 = v2236;
                                                                            v773 = v2236[v770] | (((v600 >> 4) & 1) << (7 - v771));
                                                                          }
                                                                          else
                                                                          {
                                                                            v773 = ((v600 & 0x10) != 0) << 7;
                                                                            v772 = v2236;
                                                                          }
                                                                          v772[v770] = v773;
                                                                          v982 = (uint64_t)(v614 + 0x500000000) >> 32;
                                                                          v2234 = v982;
                                                                          v8 = v2174;
                                                                          if ((_DWORD)v2233)
                                                                            goto LABEL_917;
                                                                          v983 = (int)v982 >= 0 ? v982 : (int)v982 + 7;
                                                                          v984 = (uint64_t)v983 >> 3;
                                                                          if (v2235 <= v984)
                                                                            goto LABEL_1835;
                                                                          v985 = v982 - (v983 & 0xFFFFFFF8);
                                                                          if (v985)
                                                                          {
                                                                            v986 = v2236;
                                                                            v987 = v2236[v984] | (((v600 >> 3) & 1) << (7 - v985));
                                                                          }
                                                                          else
                                                                          {
                                                                            v987 = ((v600 & 8) != 0) << 7;
                                                                            v986 = v2236;
                                                                          }
                                                                          v986[v984] = v987;
                                                                          v1063 = (uint64_t)(v614 + 0x600000000) >> 32;
                                                                          v2234 = v1063;
                                                                          v8 = v2174;
                                                                          if ((_DWORD)v2233)
                                                                            goto LABEL_917;
                                                                          v1064 = (int)v1063 >= 0
                                                                                ? v1063
                                                                                : (int)v1063 + 7;
                                                                          v1065 = (uint64_t)v1064 >> 3;
                                                                          if (v2235 <= v1065)
                                                                            goto LABEL_1835;
                                                                          v1066 = v1063 - (v1064 & 0xFFFFFFF8);
                                                                          if (v1066)
                                                                          {
                                                                            v1067 = v2236;
                                                                            v1068 = v2236[v1065] | (((v600 >> 2) & 1) << (7 - v1066));
                                                                          }
                                                                          else
                                                                          {
                                                                            v1068 = ((v600 & 4) != 0) << 7;
                                                                            v1067 = v2236;
                                                                          }
                                                                          v1067[v1065] = v1068;
                                                                          v1117 = (uint64_t)(v614 + 0x700000000) >> 32;
                                                                          v2234 = v1117;
                                                                          v8 = v2174;
                                                                          if ((_DWORD)v2233)
                                                                            goto LABEL_917;
                                                                          v1118 = (int)v1117 >= 0
                                                                                ? v1117
                                                                                : (int)v1117 + 7;
                                                                          v1119 = (uint64_t)v1118 >> 3;
                                                                          if (v2235 <= v1119)
                                                                            goto LABEL_1835;
                                                                          v1120 = v1117 - (v1118 & 0xFFFFFFF8);
                                                                          if (v1120)
                                                                          {
                                                                            v1121 = v2236;
                                                                            v1122 = v2236[v1119] | (((v600 >> 1) & 1) << (7 - v1120));
                                                                          }
                                                                          else
                                                                          {
                                                                            v1122 = ((v600 & 2) != 0) << 7;
                                                                            v1121 = v2236;
                                                                          }
                                                                          v1121[v1119] = v1122;
                                                                          v1210 = (uint64_t)(v614 + 0x800000000) >> 32;
                                                                          v2234 = v1210;
                                                                          v8 = v2174;
                                                                          if ((_DWORD)v2233)
                                                                            goto LABEL_917;
                                                                          v1211 = (int)v1210 >= 0
                                                                                ? v1210
                                                                                : (int)v1210 + 7;
                                                                          v1212 = (uint64_t)v1211 >> 3;
                                                                          if (v2235 <= v1212)
                                                                          {
LABEL_1835:
                                                                            LODWORD(v2233) = 1;
                                                                            v8 = v2174;
                                                                            goto LABEL_917;
                                                                          }
                                                                          v1213 = v600 & 1;
                                                                          v1214 = v1210 - (v1211 & 0xFFFFFFF8);
                                                                          if (v1214)
                                                                          {
                                                                            v1215 = v1213 << (7 - v1214);
                                                                            v1216 = v2236;
                                                                            v1217 = v2236[v1212] | v1215;
                                                                          }
                                                                          else
                                                                          {
                                                                            v1217 = (_BYTE)v1213 << 7;
                                                                            v1216 = v2236;
                                                                          }
                                                                          v1216[v1212] = v1217;
                                                                          v615 = (uint64_t)(v614 + 0x900000000) >> 32;
                                                                          v2234 = v615;
                                                                          v616 = v2233;
                                                                          v8 = v2174;
LABEL_1875:
                                                                          v1242 = *((unsigned __int8 *)v8 + 55);
                                                                          if (v616)
                                                                            goto LABEL_917;
                                                                          if ((int)v615 >= 0)
                                                                            v1243 = v615;
                                                                          else
                                                                            v1243 = v615 + 7;
                                                                          v1244 = (uint64_t)v1243 >> 3;
                                                                          if (v2235 > v1244)
                                                                          {
                                                                            v1245 = v615 - (v1243 & 0xFFFFFFF8);
                                                                            if (v1245)
                                                                            {
                                                                              v1246 = v2236[v1244] | ((v1242 != 255) << (7 - v1245));
                                                                            }
                                                                            else if (v1242 == 255)
                                                                            {
                                                                              LOBYTE(v1246) = 0;
                                                                            }
                                                                            else
                                                                            {
                                                                              LOBYTE(v1246) = 0x80;
                                                                            }
                                                                            v2236[v1244] = v1246;
                                                                            v1247 = v615 << 32;
                                                                            v1248 = ((v615 << 32) + 0x100000000) >> 32;
                                                                            v2234 = v1248;
                                                                            v1249 = v2233;
                                                                            if (v1242 == 255)
                                                                            {
LABEL_2056:
                                                                              v1364 = *((unsigned __int8 *)v8 + 56);
                                                                              if (!v1249)
                                                                              {
                                                                                if ((int)v1248 >= 0)
                                                                                  v1365 = v1248;
                                                                                else
                                                                                  v1365 = v1248 + 7;
                                                                                v1366 = (uint64_t)v1365 >> 3;
                                                                                if (v2235 <= v1366)
                                                                                {
                                                                                  LODWORD(v2233) = 1;
                                                                                }
                                                                                else
                                                                                {
                                                                                  v1367 = v1248 - (v1365 & 0xFFFFFFF8);
                                                                                  if (v1367)
                                                                                  {
                                                                                    v1368 = v2236[v1366] | ((v1364 != 255) << (7 - v1367));
                                                                                  }
                                                                                  else if (v1364 == 255)
                                                                                  {
                                                                                    LOBYTE(v1368) = 0;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    LOBYTE(v1368) = 0x80;
                                                                                  }
                                                                                  v2236[v1366] = v1368;
                                                                                  v1369 = v1248 << 32;
                                                                                  v1370 = ((v1248 << 32) + 0x100000000) >> 32;
                                                                                  v2234 = v1370;
                                                                                  v1371 = v2233;
                                                                                  if (v1364 == 255)
                                                                                  {
LABEL_2949:
                                                                                    v1982 = *((unsigned __int8 *)v2174
                                                                                            + 57);
                                                                                    if (v1371)
                                                                                    {
                                                                                      v8 = v2174;
                                                                                      goto LABEL_917;
                                                                                    }
                                                                                    if ((int)v1370 >= 0)
                                                                                      v1983 = v1370;
                                                                                    else
                                                                                      v1983 = v1370 + 7;
                                                                                    v1984 = (uint64_t)v1983 >> 3;
                                                                                    if (v2235 <= v1984)
                                                                                    {
                                                                                      LODWORD(v2233) = 1;
                                                                                      v8 = v2174;
                                                                                      goto LABEL_917;
                                                                                    }
                                                                                    v1985 = v1370 - (v1983 & 0xFFFFFFF8);
                                                                                    if (v1985)
                                                                                    {
                                                                                      v1986 = v2236[v1984] | ((v1982 != 255) << (7 - v1985));
                                                                                    }
                                                                                    else if (v1982 == 255)
                                                                                    {
                                                                                      LOBYTE(v1986) = 0;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      LOBYTE(v1986) = 0x80;
                                                                                    }
                                                                                    v2236[v1984] = v1986;
                                                                                    v1987 = v1370 << 32;
                                                                                    v1988 = ((v1370 << 32)
                                                                                           + 0x100000000) >> 32;
                                                                                    v2234 = v1988;
                                                                                    v1989 = v2233;
                                                                                    if (v1982 == 255)
                                                                                    {
LABEL_3029:
                                                                                      v2039 = *((unsigned __int8 *)v2174
                                                                                              + 58);
                                                                                      if (v1989)
                                                                                      {
                                                                                        v8 = v2174;
                                                                                        goto LABEL_917;
                                                                                      }
                                                                                      if ((int)v1988 >= 0)
                                                                                        v2040 = v1988;
                                                                                      else
                                                                                        v2040 = v1988 + 7;
                                                                                      v2041 = (uint64_t)v2040 >> 3;
                                                                                      if (v2235 <= v2041)
                                                                                      {
                                                                                        LODWORD(v2233) = 1;
                                                                                        v8 = v2174;
                                                                                        goto LABEL_917;
                                                                                      }
                                                                                      v2042 = v1988
                                                                                            - (v2040 & 0xFFFFFFF8);
                                                                                      if (v2042)
                                                                                      {
                                                                                        v2043 = v2236[v2041] | ((v2039 != 255) << (7 - v2042));
                                                                                      }
                                                                                      else if (v2039 == 255)
                                                                                      {
                                                                                        LOBYTE(v2043) = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        LOBYTE(v2043) = 0x80;
                                                                                      }
                                                                                      v2236[v2041] = v2043;
                                                                                      v2044 = v1988 << 32;
                                                                                      v2045 = ((v1988 << 32)
                                                                                             + 0x100000000) >> 32;
                                                                                      v2234 = v2045;
                                                                                      v2046 = v2233;
                                                                                      if (v2039 == 255)
                                                                                      {
LABEL_3109:
                                                                                        v2096 = *((unsigned __int8 *)v2174
                                                                                                + 59);
                                                                                        if (!v2046)
                                                                                        {
                                                                                          if ((int)v2045 >= 0)
                                                                                            v2097 = v2045;
                                                                                          else
                                                                                            v2097 = v2045 + 7;
                                                                                          v2098 = (uint64_t)v2097 >> 3;
                                                                                          if (v2235 > v2098)
                                                                                          {
                                                                                            v2099 = v2045 - (v2097 & 0xFFFFFFF8);
                                                                                            if (v2099)
                                                                                            {
                                                                                              v2100 = v2236[v2098] | ((v2096 != 255) << (7 - v2099));
                                                                                            }
                                                                                            else if (v2096 == 255)
                                                                                            {
                                                                                              LOBYTE(v2100) = 0;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              LOBYTE(v2100) = 0x80;
                                                                                            }
                                                                                            v2236[v2098] = v2100;
                                                                                            v2101 = v2045 << 32;
                                                                                            v2102 = ((v2045 << 32) + 0x100000000) >> 32;
                                                                                            v2234 = v2102;
                                                                                            v2103 = v2233;
                                                                                            if (v2096 == 255)
                                                                                              goto LABEL_3187;
                                                                                            v8 = v2174;
                                                                                            if ((_DWORD)v2233)
                                                                                              goto LABEL_917;
                                                                                            v2104 = (int)v2102 >= 0 ? v2102 : (int)v2102 + 7;
                                                                                            v2105 = (uint64_t)v2104 >> 3;
                                                                                            if (v2235 > v2105)
                                                                                            {
                                                                                              v2106 = v2102 - (v2104 & 0xFFFFFFF8);
                                                                                              if (v2106)
                                                                                              {
                                                                                                v2107 = v2236;
                                                                                                v2108 = v2236[v2105] | (v2096 >> 7 << (7 - v2106));
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                LOBYTE(v2108) = v2096 & 0x80;
                                                                                                v2107 = v2236;
                                                                                              }
                                                                                              v2107[v2105] = v2108;
                                                                                              v2109 = (v2101 + 0x200000000) >> 32;
                                                                                              v2234 = v2109;
                                                                                              if ((_DWORD)v2233)
                                                                                                goto LABEL_3184;
                                                                                              v2110 = (int)v2109 >= 0 ? v2109 : (int)v2109 + 7;
                                                                                              v2111 = (uint64_t)v2110 >> 3;
                                                                                              if (v2235 > v2111)
                                                                                              {
                                                                                                v2112 = v2109 - (v2110 & 0xFFFFFFF8);
                                                                                                if (v2112)
                                                                                                {
                                                                                                  v2113 = v2236;
                                                                                                  v2114 = v2236[v2111] | (((v2096 >> 6) & 1) << (7 - v2112));
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v2114 = ((v2096 & 0x40) != 0) << 7;
                                                                                                  v2113 = v2236;
                                                                                                }
                                                                                                v2113[v2111] = v2114;
                                                                                                v2115 = (v2101 + 0x300000000) >> 32;
                                                                                                v2234 = v2115;
                                                                                                if ((_DWORD)v2233)
                                                                                                  goto LABEL_3184;
                                                                                                v2116 = (int)v2115 >= 0 ? v2115 : (int)v2115 + 7;
                                                                                                v2117 = (uint64_t)v2116 >> 3;
                                                                                                if (v2235 > v2117)
                                                                                                {
                                                                                                  v2118 = v2115 - (v2116 & 0xFFFFFFF8);
                                                                                                  if (v2118)
                                                                                                  {
                                                                                                    v2119 = v2236;
                                                                                                    v2120 = v2236[v2117] | (((v2096 >> 5) & 1) << (7 - v2118));
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    v2120 = ((v2096 & 0x20) != 0) << 7;
                                                                                                    v2119 = v2236;
                                                                                                  }
                                                                                                  v2119[v2117] = v2120;
                                                                                                  v2121 = (v2101 + 0x400000000) >> 32;
                                                                                                  v2234 = v2121;
                                                                                                  if ((_DWORD)v2233)
                                                                                                    goto LABEL_3184;
                                                                                                  v2122 = (int)v2121 >= 0 ? v2121 : (int)v2121 + 7;
                                                                                                  v2123 = (uint64_t)v2122 >> 3;
                                                                                                  if (v2235 > v2123)
                                                                                                  {
                                                                                                    v2124 = v2121 - (v2122 & 0xFFFFFFF8);
                                                                                                    if (v2124)
                                                                                                    {
                                                                                                      v2125 = v2236;
                                                                                                      v2126 = v2236[v2123] | (((v2096 >> 4) & 1) << (7 - v2124));
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v2126 = ((v2096 & 0x10) != 0) << 7;
                                                                                                      v2125 = v2236;
                                                                                                    }
                                                                                                    v2125[v2123] = v2126;
                                                                                                    v2127 = (v2101 + 0x500000000) >> 32;
                                                                                                    v2234 = v2127;
                                                                                                    if ((_DWORD)v2233)
                                                                                                      goto LABEL_3184;
                                                                                                    v2128 = (int)v2127 >= 0 ? v2127 : (int)v2127 + 7;
                                                                                                    v2129 = (uint64_t)v2128 >> 3;
                                                                                                    if (v2235 > v2129)
                                                                                                    {
                                                                                                      v2130 = v2127 - (v2128 & 0xFFFFFFF8);
                                                                                                      if (v2130)
                                                                                                      {
                                                                                                        v2131 = v2236;
                                                                                                        v2132 = v2236[v2129] | (((v2096 >> 3) & 1) << (7 - v2130));
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        v2132 = ((v2096 & 8) != 0) << 7;
                                                                                                        v2131 = v2236;
                                                                                                      }
                                                                                                      v2131[v2129] = v2132;
                                                                                                      v2133 = (v2101 + 0x600000000) >> 32;
                                                                                                      v2234 = v2133;
                                                                                                      if ((_DWORD)v2233)
                                                                                                        goto LABEL_3184;
                                                                                                      v2134 = (int)v2133 >= 0 ? v2133 : (int)v2133 + 7;
                                                                                                      v2135 = (uint64_t)v2134 >> 3;
                                                                                                      if (v2235 > v2135)
                                                                                                      {
                                                                                                        v2136 = v2133 - (v2134 & 0xFFFFFFF8);
                                                                                                        if (v2136)
                                                                                                        {
                                                                                                          v2137 = v2236;
                                                                                                          v2138 = v2236[v2135] | (((v2096 >> 2) & 1) << (7 - v2136));
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          v2138 = ((v2096 & 4) != 0) << 7;
                                                                                                          v2137 = v2236;
                                                                                                        }
                                                                                                        v2137[v2135] = v2138;
                                                                                                        v2139 = (v2101 + 0x700000000) >> 32;
                                                                                                        v2234 = v2139;
                                                                                                        if ((_DWORD)v2233)
                                                                                                          goto LABEL_3184;
                                                                                                        v2140 = (int)v2139 >= 0 ? v2139 : (int)v2139 + 7;
                                                                                                        v2141 = (uint64_t)v2140 >> 3;
                                                                                                        if (v2235 > v2141)
                                                                                                        {
                                                                                                          v2142 = v2139 - (v2140 & 0xFFFFFFF8);
                                                                                                          if (v2142)
                                                                                                          {
                                                                                                            v2143 = v2236;
                                                                                                            v2144 = v2236[v2141] | (((v2096 >> 1) & 1) << (7 - v2142));
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            v2144 = ((v2096 & 2) != 0) << 7;
                                                                                                            v2143 = v2236;
                                                                                                          }
                                                                                                          v2143[v2141] = v2144;
                                                                                                          v2145 = (v2101 + 0x800000000) >> 32;
                                                                                                          v2234 = v2145;
                                                                                                          if ((_DWORD)v2233)
                                                                                                            goto LABEL_3184;
                                                                                                          if ((int)v2145 >= 0)
                                                                                                            v2146 = v2145;
                                                                                                          else
                                                                                                            v2146 = v2145 + 7;
                                                                                                          v2147 = (uint64_t)v2146 >> 3;
                                                                                                          if (v2235 > v2147)
                                                                                                          {
                                                                                                            v2148 = v2096 & 1;
                                                                                                            v2149 = v2145 - (v2146 & 0xFFFFFFF8);
                                                                                                            if (v2149)
                                                                                                            {
                                                                                                              v2150 = v2148 << (7 - v2149);
                                                                                                              v2151 = v2236;
                                                                                                              v2152 = v2236[v2147] | v2150;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              v2152 = (_BYTE)v2148 << 7;
                                                                                                              v2151 = v2236;
                                                                                                            }
                                                                                                            v2151[v2147] = v2152;
                                                                                                            v2102 = (v2101 + 0x900000000) >> 32;
                                                                                                            v2234 = v2102;
                                                                                                            v2103 = v2233;
LABEL_3187:
                                                                                                            v8 = v2174;
                                                                                                            v640 = (unsigned __int8 *)(v2174 + 13);
                                                                                                            v641 = *((unsigned __int8 *)v2174 + 52);
                                                                                                            if (v2103)
                                                                                                            {
LABEL_919:
                                                                                                              if (!v641)
                                                                                                                goto LABEL_2130;
                                                                                                              v642 = *((unsigned __int8 *)v8 + 60);
                                                                                                              v643 = v2233;
                                                                                                              if (!(_DWORD)v2233)
                                                                                                              {
                                                                                                                v644 = v2234;
                                                                                                                if ((v2234 & 0x80000000) == 0)
                                                                                                                  v645 = v2234;
                                                                                                                else
                                                                                                                  v645 = v2234 + 7;
                                                                                                                v646 = (uint64_t)v645 >> 3;
                                                                                                                if (v2235 <= v646)
                                                                                                                {
                                                                                                                  LODWORD(v2233) = 1;
                                                                                                                  goto LABEL_1734;
                                                                                                                }
                                                                                                                v647 = v2234 - (v645 & 0xFFFFFFF8);
                                                                                                                if (v647)
                                                                                                                {
                                                                                                                  v648 = v2236[v646] | ((v642 != 255) << (7 - v647));
                                                                                                                }
                                                                                                                else if (v642 == 255)
                                                                                                                {
                                                                                                                  LOBYTE(v648) = 0;
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  LOBYTE(v648) = 0x80;
                                                                                                                }
                                                                                                                v2236[v646] = v648;
                                                                                                                v2234 = v644 + 1;
                                                                                                                v643 = v2233;
                                                                                                              }
                                                                                                              if (v642 == 255)
                                                                                                                goto LABEL_1733;
                                                                                                              if (v643)
                                                                                                                goto LABEL_1734;
                                                                                                              v649 = v2234;
                                                                                                              if ((v2234 & 0x80000000) == 0)
                                                                                                                v650 = v2234;
                                                                                                              else
                                                                                                                v650 = v2234 + 7;
                                                                                                              v651 = (uint64_t)v650 >> 3;
                                                                                                              if (v2235 <= v651)
                                                                                                                goto LABEL_964;
                                                                                                              v652 = v2234 - (v650 & 0xFFFFFFF8);
                                                                                                              if (v652)
                                                                                                              {
                                                                                                                v653 = v2236;
                                                                                                                v654 = v2236[v651] | (v642 >> 7 << (7 - v652));
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                LOBYTE(v654) = v642 & 0x80;
                                                                                                                v653 = v2236;
                                                                                                              }
                                                                                                              v653[v651] = v654;
                                                                                                              v655 = v649 << 32;
                                                                                                              v656 = (uint64_t)(v655 + 0x100000000) >> 32;
                                                                                                              v2234 = v656;
                                                                                                              if ((_DWORD)v2233)
                                                                                                                goto LABEL_1734;
                                                                                                              v657 = (int)v656 >= 0 ? v656 : (int)v656 + 7;
                                                                                                              v658 = (uint64_t)v657 >> 3;
                                                                                                              if (v2235 <= v658)
                                                                                                                goto LABEL_964;
                                                                                                              v659 = v656 - (v657 & 0xFFFFFFF8);
                                                                                                              if (v659)
                                                                                                              {
                                                                                                                v660 = v2236;
                                                                                                                v661 = v2236[v658] | (((v642 >> 6) & 1) << (7 - v659));
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                v661 = ((v642 & 0x40) != 0) << 7;
                                                                                                                v660 = v2236;
                                                                                                              }
                                                                                                              v660[v658] = v661;
                                                                                                              v662 = (uint64_t)(v655 + 0x200000000) >> 32;
                                                                                                              v2234 = v662;
                                                                                                              if ((_DWORD)v2233)
                                                                                                                goto LABEL_1734;
                                                                                                              v663 = (int)v662 >= 0 ? v662 : (int)v662 + 7;
                                                                                                              v664 = (uint64_t)v663 >> 3;
                                                                                                              if (v2235 <= v664)
                                                                                                                goto LABEL_964;
                                                                                                              v665 = v662 - (v663 & 0xFFFFFFF8);
                                                                                                              if (v665)
                                                                                                              {
                                                                                                                v666 = v2236;
                                                                                                                v667 = v2236[v664] | (((v642 >> 5) & 1) << (7 - v665));
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                v667 = ((v642 & 0x20) != 0) << 7;
                                                                                                                v666 = v2236;
                                                                                                              }
                                                                                                              v666[v664] = v667;
                                                                                                              v668 = (uint64_t)(v655 + 0x300000000) >> 32;
                                                                                                              v2234 = v668;
                                                                                                              if ((_DWORD)v2233)
                                                                                                                goto LABEL_1734;
                                                                                                              v669 = (int)v668 >= 0 ? v668 : (int)v668 + 7;
                                                                                                              v670 = (uint64_t)v669 >> 3;
                                                                                                              if (v2235 <= v670)
                                                                                                              {
LABEL_964:
                                                                                                                LODWORD(v2233) = 1;
                                                                                                                goto LABEL_1734;
                                                                                                              }
                                                                                                              v671 = v668 - (v669 & 0xFFFFFFF8);
                                                                                                              if (v671)
                                                                                                              {
                                                                                                                v672 = v2236;
                                                                                                                v673 = v2236[v670] | (((v642 >> 4) & 1) << (7 - v671));
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                v673 = ((v642 & 0x10) != 0) << 7;
                                                                                                                v672 = v2236;
                                                                                                              }
                                                                                                              v672[v670] = v673;
                                                                                                              v751 = (uint64_t)(v655 + 0x400000000) >> 32;
                                                                                                              v2234 = v751;
                                                                                                              v8 = v2174;
                                                                                                              if ((_DWORD)v2233)
                                                                                                                goto LABEL_1734;
                                                                                                              if ((int)v751 >= 0)
                                                                                                                v752 = v751;
                                                                                                              else
                                                                                                                v752 = v751 + 7;
                                                                                                              v753 = (uint64_t)v752 >> 3;
                                                                                                              if (v2235 > v753)
                                                                                                              {
                                                                                                                v754 = v751 - (v752 & 0xFFFFFFF8);
                                                                                                                if (v754)
                                                                                                                {
                                                                                                                  v755 = v2236;
                                                                                                                  v756 = v2236[v753] | (((v642 >> 3) & 1) << (7 - v754));
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                  v756 = ((v642 & 8) != 0) << 7;
                                                                                                                  v755 = v2236;
                                                                                                                }
                                                                                                                v755[v753] = v756;
                                                                                                                v850 = (uint64_t)(v655 + 0x500000000) >> 32;
                                                                                                                v2234 = v850;
                                                                                                                v8 = v2174;
                                                                                                                if ((_DWORD)v2233)
                                                                                                                  goto LABEL_1734;
                                                                                                                v851 = (int)v850 >= 0 ? v850 : (int)v850 + 7;
                                                                                                                v852 = (uint64_t)v851 >> 3;
                                                                                                                if (v2235 > v852)
                                                                                                                {
                                                                                                                  v853 = v850 - (v851 & 0xFFFFFFF8);
                                                                                                                  if (v853)
                                                                                                                  {
                                                                                                                    v854 = v2236;
                                                                                                                    v855 = v2236[v852] | (((v642 >> 2) & 1) << (7 - v853));
                                                                                                                  }
                                                                                                                  else
                                                                                                                  {
                                                                                                                    v855 = ((v642 & 4) != 0) << 7;
                                                                                                                    v854 = v2236;
                                                                                                                  }
                                                                                                                  v854[v852] = v855;
                                                                                                                  v1041 = (uint64_t)(v655 + 0x600000000) >> 32;
                                                                                                                  v2234 = v1041;
                                                                                                                  v8 = v2174;
                                                                                                                  if ((_DWORD)v2233)
                                                                                                                    goto LABEL_1734;
                                                                                                                  v1042 = (int)v1041 >= 0 ? v1041 : (int)v1041 + 7;
                                                                                                                  v1043 = (uint64_t)v1042 >> 3;
                                                                                                                  if (v2235 > v1043)
                                                                                                                  {
                                                                                                                    v1044 = v1041 - (v1042 & 0xFFFFFFF8);
                                                                                                                    if (v1044)
                                                                                                                    {
                                                                                                                      v1045 = v2236;
                                                                                                                      v1046 = v2236[v1043] | (((v642 >> 1) & 1) << (7 - v1044));
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      v1046 = ((v642 & 2) != 0) << 7;
                                                                                                                      v1045 = v2236;
                                                                                                                    }
                                                                                                                    v1045[v1043] = v1046;
                                                                                                                    v1096 = (uint64_t)(v655 + 0x700000000) >> 32;
                                                                                                                    v2234 = v1096;
                                                                                                                    v8 = v2174;
                                                                                                                    if ((_DWORD)v2233)
                                                                                                                      goto LABEL_1734;
                                                                                                                    v1097 = (int)v1096 >= 0 ? v1096 : (int)v1096 + 7;
                                                                                                                    v1098 = (uint64_t)v1097 >> 3;
                                                                                                                    if (v2235 > v1098)
                                                                                                                    {
                                                                                                                      v1099 = v642 & 1;
                                                                                                                      v1100 = v1096 - (v1097 & 0xFFFFFFF8);
                                                                                                                      if (v1100)
                                                                                                                      {
                                                                                                                        v1101 = v1099 << (7 - v1100);
                                                                                                                        v1102 = v2236;
                                                                                                                        v1103 = v2236[v1098] | v1101;
                                                                                                                      }
                                                                                                                      else
                                                                                                                      {
                                                                                                                        v1103 = (_BYTE)v1099 << 7;
                                                                                                                        v1102 = v2236;
                                                                                                                      }
                                                                                                                      v1102[v1098] = v1103;
                                                                                                                      v2234 = (uint64_t)(v655 + 0x800000000) >> 32;
                                                                                                                      v643 = v2233;
                                                                                                                      v8 = v2174;
LABEL_1733:
                                                                                                                      v1144 = *((unsigned __int8 *)v8 + 61);
                                                                                                                      if (v643)
                                                                                                                        goto LABEL_1734;
                                                                                                                      v1147 = v2234;
                                                                                                                      if ((v2234 & 0x80000000) == 0)
                                                                                                                        v1148 = v2234;
                                                                                                                      else
                                                                                                                        v1148 = v2234 + 7;
                                                                                                                      v1149 = (uint64_t)v1148 >> 3;
                                                                                                                      if (v2235 > v1149)
                                                                                                                      {
                                                                                                                        v1150 = v2234 - (v1148 & 0xFFFFFFF8);
                                                                                                                        if (v1150)
                                                                                                                        {
                                                                                                                          v1151 = v2236[v1149] | ((v1144 != 255) << (7 - v1150));
                                                                                                                        }
                                                                                                                        else if (v1144 == 255)
                                                                                                                        {
                                                                                                                          LOBYTE(v1151) = 0;
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                          LOBYTE(v1151) = 0x80;
                                                                                                                        }
                                                                                                                        v2236[v1149] = v1151;
                                                                                                                        v1152 = v1147 << 32;
                                                                                                                        v1153 = (uint64_t)(v1152 + 0x100000000) >> 32;
                                                                                                                        v2234 = v1153;
                                                                                                                        v1154 = v2233;
                                                                                                                        if (v1144 == 255)
                                                                                                                          goto LABEL_1950;
                                                                                                                        if ((_DWORD)v2233)
                                                                                                                          goto LABEL_1734;
                                                                                                                        if ((int)v1153 >= 0)
                                                                                                                          v1155 = v1153;
                                                                                                                        else
                                                                                                                          v1155 = v1153 + 7;
                                                                                                                        v1156 = (uint64_t)v1155 >> 3;
                                                                                                                        if (v2235 > v1156)
                                                                                                                        {
                                                                                                                          v1157 = v1153 - (v1155 & 0xFFFFFFF8);
                                                                                                                          if (v1157)
                                                                                                                          {
                                                                                                                            v1158 = v2236;
                                                                                                                            v1159 = v2236[v1156] | (v1144 >> 7 << (7 - v1157));
                                                                                                                          }
                                                                                                                          else
                                                                                                                          {
                                                                                                                            LOBYTE(v1159) = v1144 & 0x80;
                                                                                                                            v1158 = v2236;
                                                                                                                          }
                                                                                                                          v1158[v1156] = v1159;
                                                                                                                          v1160 = (uint64_t)(v1152 + 0x200000000) >> 32;
                                                                                                                          v2234 = v1160;
                                                                                                                          if ((_DWORD)v2233)
                                                                                                                            goto LABEL_1734;
                                                                                                                          v1161 = (int)v1160 >= 0 ? v1160 : (int)v1160 + 7;
                                                                                                                          v1162 = (uint64_t)v1161 >> 3;
                                                                                                                          if (v2235 > v1162)
                                                                                                                          {
                                                                                                                            v1163 = v1160 - (v1161 & 0xFFFFFFF8);
                                                                                                                            if (v1163)
                                                                                                                            {
                                                                                                                              v1164 = v2236;
                                                                                                                              v1165 = v2236[v1162] | (((v1144 >> 6) & 1) << (7 - v1163));
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              v1165 = ((v1144 & 0x40) != 0) << 7;
                                                                                                                              v1164 = v2236;
                                                                                                                            }
                                                                                                                            v1164[v1162] = v1165;
                                                                                                                            v1166 = (uint64_t)(v1152 + 0x300000000) >> 32;
                                                                                                                            v2234 = v1166;
                                                                                                                            v8 = v2174;
                                                                                                                            if ((_DWORD)v2233)
                                                                                                                              goto LABEL_1734;
                                                                                                                            if ((int)v1166 >= 0)
                                                                                                                              v1167 = v1166;
                                                                                                                            else
                                                                                                                              v1167 = v1166 + 7;
                                                                                                                            v1168 = (uint64_t)v1167 >> 3;
                                                                                                                            if (v2235 <= v1168)
                                                                                                                              goto LABEL_1851;
                                                                                                                            v1169 = v1166 - (v1167 & 0xFFFFFFF8);
                                                                                                                            if (v1169)
                                                                                                                            {
                                                                                                                              v1170 = v2236;
                                                                                                                              v1171 = v2236[v1168] | (((v1144 >> 5) & 1) << (7 - v1169));
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              v1171 = ((v1144 & 0x20) != 0) << 7;
                                                                                                                              v1170 = v2236;
                                                                                                                            }
                                                                                                                            v1170[v1168] = v1171;
                                                                                                                            v1172 = (uint64_t)(v1152 + 0x400000000) >> 32;
                                                                                                                            v2234 = v1172;
                                                                                                                            v8 = v2174;
                                                                                                                            if ((_DWORD)v2233)
                                                                                                                              goto LABEL_1734;
                                                                                                                            v1173 = (int)v1172 >= 0 ? v1172 : (int)v1172 + 7;
                                                                                                                            v1174 = (uint64_t)v1173 >> 3;
                                                                                                                            if (v2235 <= v1174)
                                                                                                                              goto LABEL_1851;
                                                                                                                            v1175 = v1172 - (v1173 & 0xFFFFFFF8);
                                                                                                                            if (v1175)
                                                                                                                            {
                                                                                                                              v1176 = v2236;
                                                                                                                              v1177 = v2236[v1174] | (((v1144 >> 4) & 1) << (7 - v1175));
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              v1177 = ((v1144 & 0x10) != 0) << 7;
                                                                                                                              v1176 = v2236;
                                                                                                                            }
                                                                                                                            v1176[v1174] = v1177;
                                                                                                                            v1178 = (uint64_t)(v1152 + 0x500000000) >> 32;
                                                                                                                            v2234 = v1178;
                                                                                                                            v8 = v2174;
                                                                                                                            if ((_DWORD)v2233)
                                                                                                                              goto LABEL_1734;
                                                                                                                            v1179 = (int)v1178 >= 0 ? v1178 : (int)v1178 + 7;
                                                                                                                            v1180 = (uint64_t)v1179 >> 3;
                                                                                                                            if (v2235 <= v1180)
                                                                                                                              goto LABEL_1851;
                                                                                                                            v1181 = v1178 - (v1179 & 0xFFFFFFF8);
                                                                                                                            if (v1181)
                                                                                                                            {
                                                                                                                              v1182 = v2236;
                                                                                                                              v1183 = v2236[v1180] | (((v1144 >> 3) & 1) << (7 - v1181));
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              v1183 = ((v1144 & 8) != 0) << 7;
                                                                                                                              v1182 = v2236;
                                                                                                                            }
                                                                                                                            v1182[v1180] = v1183;
                                                                                                                            v1184 = (uint64_t)(v1152 + 0x600000000) >> 32;
                                                                                                                            v2234 = v1184;
                                                                                                                            v8 = v2174;
                                                                                                                            if ((_DWORD)v2233)
                                                                                                                              goto LABEL_1734;
                                                                                                                            v1185 = (int)v1184 >= 0 ? v1184 : (int)v1184 + 7;
                                                                                                                            v1186 = (uint64_t)v1185 >> 3;
                                                                                                                            if (v2235 <= v1186)
                                                                                                                              goto LABEL_1851;
                                                                                                                            v1187 = v1184 - (v1185 & 0xFFFFFFF8);
                                                                                                                            if (v1187)
                                                                                                                            {
                                                                                                                              v1188 = v2236;
                                                                                                                              v1189 = v2236[v1186] | (((v1144 >> 2) & 1) << (7 - v1187));
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              v1189 = ((v1144 & 4) != 0) << 7;
                                                                                                                              v1188 = v2236;
                                                                                                                            }
                                                                                                                            v1188[v1186] = v1189;
                                                                                                                            v1190 = (uint64_t)(v1152 + 0x700000000) >> 32;
                                                                                                                            v2234 = v1190;
                                                                                                                            v8 = v2174;
                                                                                                                            if ((_DWORD)v2233)
                                                                                                                              goto LABEL_1734;
                                                                                                                            v1191 = (int)v1190 >= 0 ? v1190 : (int)v1190 + 7;
                                                                                                                            v1192 = (uint64_t)v1191 >> 3;
                                                                                                                            if (v2235 <= v1192)
                                                                                                                              goto LABEL_1851;
                                                                                                                            v1193 = v1190 - (v1191 & 0xFFFFFFF8);
                                                                                                                            if (v1193)
                                                                                                                            {
                                                                                                                              v1194 = v2236;
                                                                                                                              v1195 = v2236[v1192] | (((v1144 >> 1) & 1) << (7 - v1193));
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              v1195 = ((v1144 & 2) != 0) << 7;
                                                                                                                              v1194 = v2236;
                                                                                                                            }
                                                                                                                            v1194[v1192] = v1195;
                                                                                                                            v1222 = (uint64_t)(v1152 + 0x800000000) >> 32;
                                                                                                                            v2234 = v1222;
                                                                                                                            v8 = v2174;
                                                                                                                            if ((_DWORD)v2233)
                                                                                                                              goto LABEL_1734;
                                                                                                                            v1223 = (int)v1222 >= 0 ? v1222 : (int)v1222 + 7;
                                                                                                                            v1224 = (uint64_t)v1223 >> 3;
                                                                                                                            if (v2235 <= v1224)
                                                                                                                            {
LABEL_1851:
                                                                                                                              LODWORD(v2233) = 1;
                                                                                                                              v8 = v2174;
                                                                                                                              goto LABEL_1734;
                                                                                                                            }
                                                                                                                            v1225 = v1144 & 1;
                                                                                                                            v1226 = v1222 - (v1223 & 0xFFFFFFF8);
                                                                                                                            if (v1226)
                                                                                                                            {
                                                                                                                              v1227 = v1225 << (7 - v1226);
                                                                                                                              v1228 = v2236;
                                                                                                                              v1229 = v2236[v1224] | v1227;
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              v1229 = (_BYTE)v1225 << 7;
                                                                                                                              v1228 = v2236;
                                                                                                                            }
                                                                                                                            v1228[v1224] = v1229;
                                                                                                                            v1153 = (uint64_t)(v1152 + 0x900000000) >> 32;
                                                                                                                            v2234 = v1153;
                                                                                                                            v1154 = v2233;
                                                                                                                            v8 = v2174;
LABEL_1950:
                                                                                                                            v1145 = *((unsigned __int8 *)v8 + 62);
                                                                                                                            if (v1154)
                                                                                                                            {
LABEL_1735:
                                                                                                                              if (v1145 == 255)
                                                                                                                                goto LABEL_2130;
                                                                                                                              goto LABEL_1736;
                                                                                                                            }
                                                                                                                            if ((int)v1153 >= 0)
                                                                                                                              v1293 = v1153;
                                                                                                                            else
                                                                                                                              v1293 = v1153 + 7;
                                                                                                                            v1294 = (uint64_t)v1293 >> 3;
                                                                                                                            if (v2235 <= v1294)
                                                                                                                            {
                                                                                                                              LODWORD(v2233) = 1;
                                                                                                                              v1146 = (unsigned __int8 *)v8 + 50;
                                                                                                                              goto LABEL_2140;
                                                                                                                            }
                                                                                                                            v1295 = v1153 - (v1293 & 0xFFFFFFF8);
                                                                                                                            if (v1295)
                                                                                                                            {
                                                                                                                              v1296 = v2236[v1294] | ((v1145 != 255) << (7 - v1295));
                                                                                                                            }
                                                                                                                            else if (v1145 == 255)
                                                                                                                            {
                                                                                                                              LOBYTE(v1296) = 0;
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                              LOBYTE(v1296) = 0x80;
                                                                                                                            }
                                                                                                                            v2236[v1294] = v1296;
                                                                                                                            v1297 = v1153 << 32;
                                                                                                                            v1298 = ((v1153 << 32) + 0x100000000) >> 32;
                                                                                                                            v2234 = v1298;
                                                                                                                            if (v1145 == 255)
                                                                                                                              goto LABEL_2130;
                                                                                                                            if ((_DWORD)v2233)
                                                                                                                            {
LABEL_1736:
                                                                                                                              v1146 = (unsigned __int8 *)v8 + 50;
                                                                                                                              goto LABEL_2140;
                                                                                                                            }
                                                                                                                            if ((int)v1298 >= 0)
                                                                                                                              v1299 = v1298;
                                                                                                                            else
                                                                                                                              v1299 = v1298 + 7;
                                                                                                                            v1300 = (uint64_t)v1299 >> 3;
                                                                                                                            if (v2235 > v1300)
                                                                                                                            {
                                                                                                                              v1301 = v1298 - (v1299 & 0xFFFFFFF8);
                                                                                                                              if (v1301)
                                                                                                                              {
                                                                                                                                v1302 = v2236;
                                                                                                                                v1303 = v2236[v1300] | (v1145 >> 7 << (7 - v1301));
                                                                                                                              }
                                                                                                                              else
                                                                                                                              {
                                                                                                                                LOBYTE(v1303) = v1145 & 0x80;
                                                                                                                                v1302 = v2236;
                                                                                                                              }
                                                                                                                              v1302[v1300] = v1303;
                                                                                                                              v1304 = (v1297 + 0x200000000) >> 32;
                                                                                                                              v2234 = v1304;
                                                                                                                              if ((_DWORD)v2233)
                                                                                                                                goto LABEL_2052;
                                                                                                                              v1305 = (int)v1304 >= 0 ? v1304 : (int)v1304 + 7;
                                                                                                                              v1306 = (uint64_t)v1305 >> 3;
                                                                                                                              if (v2235 > v1306)
                                                                                                                              {
                                                                                                                                v1307 = v1304 - (v1305 & 0xFFFFFFF8);
                                                                                                                                if (v1307)
                                                                                                                                {
                                                                                                                                  v1308 = v2236;
                                                                                                                                  v1309 = v2236[v1306] | (((v1145 >> 6) & 1) << (7 - v1307));
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                  v1309 = ((v1145 & 0x40) != 0) << 7;
                                                                                                                                  v1308 = v2236;
                                                                                                                                }
                                                                                                                                v1308[v1306] = v1309;
                                                                                                                                v1310 = (v1297 + 0x300000000) >> 32;
                                                                                                                                v2234 = v1310;
                                                                                                                                if ((_DWORD)v2233)
                                                                                                                                  goto LABEL_2052;
                                                                                                                                v1311 = (int)v1310 >= 0 ? v1310 : (int)v1310 + 7;
                                                                                                                                v1312 = (uint64_t)v1311 >> 3;
                                                                                                                                if (v2235 > v1312)
                                                                                                                                {
                                                                                                                                  v1313 = v1310 - (v1311 & 0xFFFFFFF8);
                                                                                                                                  if (v1313)
                                                                                                                                  {
                                                                                                                                    v1314 = v2236;
                                                                                                                                    v1315 = v2236[v1312] | (((v1145 >> 5) & 1) << (7 - v1313));
                                                                                                                                  }
                                                                                                                                  else
                                                                                                                                  {
                                                                                                                                    v1315 = ((v1145 & 0x20) != 0) << 7;
                                                                                                                                    v1314 = v2236;
                                                                                                                                  }
                                                                                                                                  v1314[v1312] = v1315;
                                                                                                                                  v1316 = (v1297 + 0x400000000) >> 32;
                                                                                                                                  v2234 = v1316;
                                                                                                                                  if ((_DWORD)v2233)
                                                                                                                                    goto LABEL_2052;
                                                                                                                                  v1317 = (int)v1316 >= 0 ? v1316 : (int)v1316 + 7;
                                                                                                                                  v1318 = (uint64_t)v1317 >> 3;
                                                                                                                                  if (v2235 > v1318)
                                                                                                                                  {
                                                                                                                                    v1319 = v1316 - (v1317 & 0xFFFFFFF8);
                                                                                                                                    if (v1319)
                                                                                                                                    {
                                                                                                                                      v1320 = v2236;
                                                                                                                                      v1321 = v2236[v1318] | (((v1145 >> 4) & 1) << (7 - v1319));
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                      v1321 = ((v1145 & 0x10) != 0) << 7;
                                                                                                                                      v1320 = v2236;
                                                                                                                                    }
                                                                                                                                    v1320[v1318] = v1321;
                                                                                                                                    v1322 = (v1297 + 0x500000000) >> 32;
                                                                                                                                    v2234 = v1322;
                                                                                                                                    if ((_DWORD)v2233)
                                                                                                                                      goto LABEL_2052;
                                                                                                                                    v1323 = (int)v1322 >= 0 ? v1322 : (int)v1322 + 7;
                                                                                                                                    v1324 = (uint64_t)v1323 >> 3;
                                                                                                                                    if (v2235 > v1324)
                                                                                                                                    {
                                                                                                                                      v1325 = v1322 - (v1323 & 0xFFFFFFF8);
                                                                                                                                      if (v1325)
                                                                                                                                      {
                                                                                                                                        v1326 = v2236;
                                                                                                                                        v1327 = v2236[v1324] | (((v1145 >> 3) & 1) << (7 - v1325));
                                                                                                                                      }
                                                                                                                                      else
                                                                                                                                      {
                                                                                                                                        v1327 = ((v1145 & 8) != 0) << 7;
                                                                                                                                        v1326 = v2236;
                                                                                                                                      }
                                                                                                                                      v1326[v1324] = v1327;
                                                                                                                                      v1328 = (v1297 + 0x600000000) >> 32;
                                                                                                                                      v2234 = v1328;
                                                                                                                                      if ((_DWORD)v2233)
                                                                                                                                        goto LABEL_2052;
                                                                                                                                      v1329 = (int)v1328 >= 0 ? v1328 : (int)v1328 + 7;
                                                                                                                                      v1330 = (uint64_t)v1329 >> 3;
                                                                                                                                      if (v2235 > v1330)
                                                                                                                                      {
                                                                                                                                        v1331 = v1328 - (v1329 & 0xFFFFFFF8);
                                                                                                                                        if (v1331)
                                                                                                                                        {
                                                                                                                                          v1332 = v2236;
                                                                                                                                          v1333 = v2236[v1330] | (((v1145 >> 2) & 1) << (7 - v1331));
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                          v1333 = ((v1145 & 4) != 0) << 7;
                                                                                                                                          v1332 = v2236;
                                                                                                                                        }
                                                                                                                                        v1332[v1330] = v1333;
                                                                                                                                        v1334 = (v1297 + 0x700000000) >> 32;
                                                                                                                                        v2234 = v1334;
                                                                                                                                        if ((_DWORD)v2233)
                                                                                                                                          goto LABEL_2052;
                                                                                                                                        v1335 = (int)v1334 >= 0 ? v1334 : (int)v1334 + 7;
                                                                                                                                        v1336 = (uint64_t)v1335 >> 3;
                                                                                                                                        if (v2235 > v1336)
                                                                                                                                        {
                                                                                                                                          v1337 = v1334 - (v1335 & 0xFFFFFFF8);
                                                                                                                                          if (v1337)
                                                                                                                                          {
                                                                                                                                            v1338 = v2236;
                                                                                                                                            v1339 = v2236[v1336] | (((v1145 >> 1) & 1) << (7 - v1337));
                                                                                                                                          }
                                                                                                                                          else
                                                                                                                                          {
                                                                                                                                            v1339 = ((v1145 & 2) != 0) << 7;
                                                                                                                                            v1338 = v2236;
                                                                                                                                          }
                                                                                                                                          v1338[v1336] = v1339;
                                                                                                                                          v1356 = (v1297 + 0x800000000) >> 32;
                                                                                                                                          v2234 = v1356;
                                                                                                                                          if ((_DWORD)v2233)
                                                                                                                                            goto LABEL_2052;
                                                                                                                                          if ((int)v1356 >= 0)
                                                                                                                                            v1357 = v1356;
                                                                                                                                          else
                                                                                                                                            v1357 = v1356 + 7;
                                                                                                                                          v1358 = (uint64_t)v1357 >> 3;
                                                                                                                                          if (v2235 > v1358)
                                                                                                                                          {
                                                                                                                                            v1359 = v1145 & 1;
                                                                                                                                            v1360 = v1356 - (v1357 & 0xFFFFFFF8);
                                                                                                                                            if (v1360)
                                                                                                                                            {
                                                                                                                                              v1361 = v1359 << (7 - v1360);
                                                                                                                                              v1362 = v2236;
                                                                                                                                              v1363 = v2236[v1358] | v1361;
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                              v1363 = (_BYTE)v1359 << 7;
                                                                                                                                              v1362 = v2236;
                                                                                                                                            }
                                                                                                                                            v1362[v1358] = v1363;
                                                                                                                                            v2234 = (v1297 + 0x900000000) >> 32;
                                                                                                                                            v8 = v2174;
                                                                                                                                            goto LABEL_2130;
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                            LODWORD(v2233) = 1;
LABEL_2052:
                                                                                                                            v8 = v2174;
                                                                                                                            v1146 = (unsigned __int8 *)v2174 + 50;
                                                                                                                            goto LABEL_2140;
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                      LODWORD(v2233) = 1;
                                                                                                                      goto LABEL_1734;
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                              LODWORD(v2233) = 1;
                                                                                                              v8 = v2174;
LABEL_1734:
                                                                                                              v1145 = *((unsigned __int8 *)v8 + 62);
                                                                                                              goto LABEL_1735;
                                                                                                            }
                                                                                                            if ((int)v2102 >= 0)
                                                                                                              v2153 = v2102;
                                                                                                            else
                                                                                                              v2153 = v2102 + 7;
                                                                                                            v2154 = (uint64_t)v2153 >> 3;
                                                                                                            if (v2235 <= v2154)
                                                                                                            {
                                                                                                              LODWORD(v2233) = 1;
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                              v2155 = v2102 - (v2153 & 0xFFFFFFF8);
                                                                                                              if (v2155)
                                                                                                                v641 = v2236[v2154] | (v641 << (7 - v2155));
                                                                                                              else
                                                                                                                LOBYTE(v641) = (_BYTE)v641 << 7;
                                                                                                              v2236[v2154] = v641;
                                                                                                              v2234 = (int)v2102 + 1;
                                                                                                            }
                                                                                                            v8 = v2174;
LABEL_918:
                                                                                                            v641 = *v640;
                                                                                                            goto LABEL_919;
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                          LODWORD(v2233) = 1;
                                                                                        }
LABEL_3184:
                                                                                        v8 = v2174;
                                                                                        goto LABEL_917;
                                                                                      }
                                                                                      v8 = v2174;
                                                                                      if ((_DWORD)v2233)
                                                                                        goto LABEL_917;
                                                                                      if ((int)v2045 >= 0)
                                                                                        v2047 = v2045;
                                                                                      else
                                                                                        v2047 = v2045 + 7;
                                                                                      v2048 = (uint64_t)v2047 >> 3;
                                                                                      if (v2235 > v2048)
                                                                                      {
                                                                                        v2049 = v2045
                                                                                              - (v2047 & 0xFFFFFFF8);
                                                                                        if (v2049)
                                                                                        {
                                                                                          v2050 = v2236;
                                                                                          v2051 = v2236[v2048] | (v2039 >> 7 << (7 - v2049));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          LOBYTE(v2051) = v2039 & 0x80;
                                                                                          v2050 = v2236;
                                                                                        }
                                                                                        v2050[v2048] = v2051;
                                                                                        v2052 = (v2044 + 0x200000000) >> 32;
                                                                                        v2234 = v2052;
                                                                                        if ((_DWORD)v2233)
                                                                                          goto LABEL_3106;
                                                                                        v2053 = (int)v2052 >= 0
                                                                                              ? v2052
                                                                                              : (int)v2052 + 7;
                                                                                        v2054 = (uint64_t)v2053 >> 3;
                                                                                        if (v2235 > v2054)
                                                                                        {
                                                                                          v2055 = v2052
                                                                                                - (v2053 & 0xFFFFFFF8);
                                                                                          if (v2055)
                                                                                          {
                                                                                            v2056 = v2236;
                                                                                            v2057 = v2236[v2054] | (((v2039 >> 6) & 1) << (7 - v2055));
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v2057 = ((v2039 & 0x40) != 0) << 7;
                                                                                            v2056 = v2236;
                                                                                          }
                                                                                          v2056[v2054] = v2057;
                                                                                          v2058 = (v2044 + 0x300000000) >> 32;
                                                                                          v2234 = v2058;
                                                                                          if ((_DWORD)v2233)
                                                                                            goto LABEL_3106;
                                                                                          v2059 = (int)v2058 >= 0
                                                                                                ? v2058
                                                                                                : (int)v2058 + 7;
                                                                                          v2060 = (uint64_t)v2059 >> 3;
                                                                                          if (v2235 > v2060)
                                                                                          {
                                                                                            v2061 = v2058 - (v2059 & 0xFFFFFFF8);
                                                                                            if (v2061)
                                                                                            {
                                                                                              v2062 = v2236;
                                                                                              v2063 = v2236[v2060] | (((v2039 >> 5) & 1) << (7 - v2061));
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v2063 = ((v2039 & 0x20) != 0) << 7;
                                                                                              v2062 = v2236;
                                                                                            }
                                                                                            v2062[v2060] = v2063;
                                                                                            v2064 = (v2044 + 0x400000000) >> 32;
                                                                                            v2234 = v2064;
                                                                                            if ((_DWORD)v2233)
                                                                                              goto LABEL_3106;
                                                                                            v2065 = (int)v2064 >= 0 ? v2064 : (int)v2064 + 7;
                                                                                            v2066 = (uint64_t)v2065 >> 3;
                                                                                            if (v2235 > v2066)
                                                                                            {
                                                                                              v2067 = v2064 - (v2065 & 0xFFFFFFF8);
                                                                                              if (v2067)
                                                                                              {
                                                                                                v2068 = v2236;
                                                                                                v2069 = v2236[v2066] | (((v2039 >> 4) & 1) << (7 - v2067));
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                v2069 = ((v2039 & 0x10) != 0) << 7;
                                                                                                v2068 = v2236;
                                                                                              }
                                                                                              v2068[v2066] = v2069;
                                                                                              v2070 = (v2044 + 0x500000000) >> 32;
                                                                                              v2234 = v2070;
                                                                                              if ((_DWORD)v2233)
                                                                                                goto LABEL_3106;
                                                                                              v2071 = (int)v2070 >= 0 ? v2070 : (int)v2070 + 7;
                                                                                              v2072 = (uint64_t)v2071 >> 3;
                                                                                              if (v2235 > v2072)
                                                                                              {
                                                                                                v2073 = v2070 - (v2071 & 0xFFFFFFF8);
                                                                                                if (v2073)
                                                                                                {
                                                                                                  v2074 = v2236;
                                                                                                  v2075 = v2236[v2072] | (((v2039 >> 3) & 1) << (7 - v2073));
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v2075 = ((v2039 & 8) != 0) << 7;
                                                                                                  v2074 = v2236;
                                                                                                }
                                                                                                v2074[v2072] = v2075;
                                                                                                v2076 = (v2044 + 0x600000000) >> 32;
                                                                                                v2234 = v2076;
                                                                                                if ((_DWORD)v2233)
                                                                                                  goto LABEL_3106;
                                                                                                v2077 = (int)v2076 >= 0 ? v2076 : (int)v2076 + 7;
                                                                                                v2078 = (uint64_t)v2077 >> 3;
                                                                                                if (v2235 > v2078)
                                                                                                {
                                                                                                  v2079 = v2076 - (v2077 & 0xFFFFFFF8);
                                                                                                  if (v2079)
                                                                                                  {
                                                                                                    v2080 = v2236;
                                                                                                    v2081 = v2236[v2078] | (((v2039 >> 2) & 1) << (7 - v2079));
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    v2081 = ((v2039 & 4) != 0) << 7;
                                                                                                    v2080 = v2236;
                                                                                                  }
                                                                                                  v2080[v2078] = v2081;
                                                                                                  v2082 = (v2044 + 0x700000000) >> 32;
                                                                                                  v2234 = v2082;
                                                                                                  if ((_DWORD)v2233)
                                                                                                    goto LABEL_3106;
                                                                                                  v2083 = (int)v2082 >= 0 ? v2082 : (int)v2082 + 7;
                                                                                                  v2084 = (uint64_t)v2083 >> 3;
                                                                                                  if (v2235 > v2084)
                                                                                                  {
                                                                                                    v2085 = v2082 - (v2083 & 0xFFFFFFF8);
                                                                                                    if (v2085)
                                                                                                    {
                                                                                                      v2086 = v2236;
                                                                                                      v2087 = v2236[v2084] | (((v2039 >> 1) & 1) << (7 - v2085));
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v2087 = ((v2039 & 2) != 0) << 7;
                                                                                                      v2086 = v2236;
                                                                                                    }
                                                                                                    v2086[v2084] = v2087;
                                                                                                    v2088 = (v2044 + 0x800000000) >> 32;
                                                                                                    v2234 = v2088;
                                                                                                    if ((_DWORD)v2233)
                                                                                                      goto LABEL_3106;
                                                                                                    if ((int)v2088 >= 0)
                                                                                                      v2089 = v2088;
                                                                                                    else
                                                                                                      v2089 = v2088 + 7;
                                                                                                    v2090 = (uint64_t)v2089 >> 3;
                                                                                                    if (v2235 > v2090)
                                                                                                    {
                                                                                                      v2091 = v2039 & 1;
                                                                                                      v2092 = v2088 - (v2089 & 0xFFFFFFF8);
                                                                                                      if (v2092)
                                                                                                      {
                                                                                                        v2093 = v2091 << (7 - v2092);
                                                                                                        v2094 = v2236;
                                                                                                        v2095 = v2236[v2090] | v2093;
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        v2095 = (_BYTE)v2091 << 7;
                                                                                                        v2094 = v2236;
                                                                                                      }
                                                                                                      v2094[v2090] = v2095;
                                                                                                      v2045 = (v2044 + 0x900000000) >> 32;
                                                                                                      v2234 = v2045;
                                                                                                      v2046 = v2233;
                                                                                                      goto LABEL_3109;
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      LODWORD(v2233) = 1;
LABEL_3106:
                                                                                      v8 = v2174;
                                                                                      goto LABEL_917;
                                                                                    }
                                                                                    v8 = v2174;
                                                                                    if ((_DWORD)v2233)
                                                                                      goto LABEL_917;
                                                                                    if ((int)v1988 >= 0)
                                                                                      v1990 = v1988;
                                                                                    else
                                                                                      v1990 = v1988 + 7;
                                                                                    v1991 = (uint64_t)v1990 >> 3;
                                                                                    if (v2235 > v1991)
                                                                                    {
                                                                                      v1992 = v1988
                                                                                            - (v1990 & 0xFFFFFFF8);
                                                                                      if (v1992)
                                                                                      {
                                                                                        v1993 = v2236;
                                                                                        v1994 = v2236[v1991] | (v1982 >> 7 << (7 - v1992));
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        LOBYTE(v1994) = v1982 & 0x80;
                                                                                        v1993 = v2236;
                                                                                      }
                                                                                      v1993[v1991] = v1994;
                                                                                      v1995 = (v1987 + 0x200000000) >> 32;
                                                                                      v2234 = v1995;
                                                                                      if ((_DWORD)v2233)
                                                                                        goto LABEL_3026;
                                                                                      v1996 = (int)v1995 >= 0
                                                                                            ? v1995
                                                                                            : (int)v1995 + 7;
                                                                                      v1997 = (uint64_t)v1996 >> 3;
                                                                                      if (v2235 > v1997)
                                                                                      {
                                                                                        v1998 = v1995
                                                                                              - (v1996 & 0xFFFFFFF8);
                                                                                        if (v1998)
                                                                                        {
                                                                                          v1999 = v2236;
                                                                                          v2000 = v2236[v1997] | (((v1982 >> 6) & 1) << (7 - v1998));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v2000 = ((v1982 & 0x40) != 0) << 7;
                                                                                          v1999 = v2236;
                                                                                        }
                                                                                        v1999[v1997] = v2000;
                                                                                        v2001 = (v1987 + 0x300000000) >> 32;
                                                                                        v2234 = v2001;
                                                                                        if ((_DWORD)v2233)
                                                                                          goto LABEL_3026;
                                                                                        v2002 = (int)v2001 >= 0
                                                                                              ? v2001
                                                                                              : (int)v2001 + 7;
                                                                                        v2003 = (uint64_t)v2002 >> 3;
                                                                                        if (v2235 > v2003)
                                                                                        {
                                                                                          v2004 = v2001
                                                                                                - (v2002 & 0xFFFFFFF8);
                                                                                          if (v2004)
                                                                                          {
                                                                                            v2005 = v2236;
                                                                                            v2006 = v2236[v2003] | (((v1982 >> 5) & 1) << (7 - v2004));
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v2006 = ((v1982 & 0x20) != 0) << 7;
                                                                                            v2005 = v2236;
                                                                                          }
                                                                                          v2005[v2003] = v2006;
                                                                                          v2007 = (v1987 + 0x400000000) >> 32;
                                                                                          v2234 = v2007;
                                                                                          if ((_DWORD)v2233)
                                                                                            goto LABEL_3026;
                                                                                          v2008 = (int)v2007 >= 0
                                                                                                ? v2007
                                                                                                : (int)v2007 + 7;
                                                                                          v2009 = (uint64_t)v2008 >> 3;
                                                                                          if (v2235 > v2009)
                                                                                          {
                                                                                            v2010 = v2007 - (v2008 & 0xFFFFFFF8);
                                                                                            if (v2010)
                                                                                            {
                                                                                              v2011 = v2236;
                                                                                              v2012 = v2236[v2009] | (((v1982 >> 4) & 1) << (7 - v2010));
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              v2012 = ((v1982 & 0x10) != 0) << 7;
                                                                                              v2011 = v2236;
                                                                                            }
                                                                                            v2011[v2009] = v2012;
                                                                                            v2013 = (v1987 + 0x500000000) >> 32;
                                                                                            v2234 = v2013;
                                                                                            if ((_DWORD)v2233)
                                                                                              goto LABEL_3026;
                                                                                            v2014 = (int)v2013 >= 0 ? v2013 : (int)v2013 + 7;
                                                                                            v2015 = (uint64_t)v2014 >> 3;
                                                                                            if (v2235 > v2015)
                                                                                            {
                                                                                              v2016 = v2013 - (v2014 & 0xFFFFFFF8);
                                                                                              if (v2016)
                                                                                              {
                                                                                                v2017 = v2236;
                                                                                                v2018 = v2236[v2015] | (((v1982 >> 3) & 1) << (7 - v2016));
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                v2018 = ((v1982 & 8) != 0) << 7;
                                                                                                v2017 = v2236;
                                                                                              }
                                                                                              v2017[v2015] = v2018;
                                                                                              v2019 = (v1987 + 0x600000000) >> 32;
                                                                                              v2234 = v2019;
                                                                                              if ((_DWORD)v2233)
                                                                                                goto LABEL_3026;
                                                                                              v2020 = (int)v2019 >= 0 ? v2019 : (int)v2019 + 7;
                                                                                              v2021 = (uint64_t)v2020 >> 3;
                                                                                              if (v2235 > v2021)
                                                                                              {
                                                                                                v2022 = v2019 - (v2020 & 0xFFFFFFF8);
                                                                                                if (v2022)
                                                                                                {
                                                                                                  v2023 = v2236;
                                                                                                  v2024 = v2236[v2021] | (((v1982 >> 2) & 1) << (7 - v2022));
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  v2024 = ((v1982 & 4) != 0) << 7;
                                                                                                  v2023 = v2236;
                                                                                                }
                                                                                                v2023[v2021] = v2024;
                                                                                                v2025 = (v1987 + 0x700000000) >> 32;
                                                                                                v2234 = v2025;
                                                                                                if ((_DWORD)v2233)
                                                                                                  goto LABEL_3026;
                                                                                                v2026 = (int)v2025 >= 0 ? v2025 : (int)v2025 + 7;
                                                                                                v2027 = (uint64_t)v2026 >> 3;
                                                                                                if (v2235 > v2027)
                                                                                                {
                                                                                                  v2028 = v2025 - (v2026 & 0xFFFFFFF8);
                                                                                                  if (v2028)
                                                                                                  {
                                                                                                    v2029 = v2236;
                                                                                                    v2030 = v2236[v2027] | (((v1982 >> 1) & 1) << (7 - v2028));
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    v2030 = ((v1982 & 2) != 0) << 7;
                                                                                                    v2029 = v2236;
                                                                                                  }
                                                                                                  v2029[v2027] = v2030;
                                                                                                  v2031 = (v1987 + 0x800000000) >> 32;
                                                                                                  v2234 = v2031;
                                                                                                  if ((_DWORD)v2233)
                                                                                                    goto LABEL_3026;
                                                                                                  if ((int)v2031 >= 0)
                                                                                                    v2032 = v2031;
                                                                                                  else
                                                                                                    v2032 = v2031 + 7;
                                                                                                  v2033 = (uint64_t)v2032 >> 3;
                                                                                                  if (v2235 > v2033)
                                                                                                  {
                                                                                                    v2034 = v1982 & 1;
                                                                                                    v2035 = v2031 - (v2032 & 0xFFFFFFF8);
                                                                                                    if (v2035)
                                                                                                    {
                                                                                                      v2036 = v2034 << (7 - v2035);
                                                                                                      v2037 = v2236;
                                                                                                      v2038 = v2236[v2033] | v2036;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      v2038 = (_BYTE)v2034 << 7;
                                                                                                      v2037 = v2236;
                                                                                                    }
                                                                                                    v2037[v2033] = v2038;
                                                                                                    v1988 = (v1987 + 0x900000000) >> 32;
                                                                                                    v2234 = v1988;
                                                                                                    v1989 = v2233;
                                                                                                    goto LABEL_3029;
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                    LODWORD(v2233) = 1;
LABEL_3026:
                                                                                    v8 = v2174;
                                                                                    goto LABEL_917;
                                                                                  }
                                                                                  v8 = v2174;
                                                                                  if (!(_DWORD)v2233)
                                                                                  {
                                                                                    if ((int)v1370 >= 0)
                                                                                      v1372 = v1370;
                                                                                    else
                                                                                      v1372 = v1370 + 7;
                                                                                    v1373 = (uint64_t)v1372 >> 3;
                                                                                    if (v2235 > v1373)
                                                                                    {
                                                                                      v1374 = v1370
                                                                                            - (v1372 & 0xFFFFFFF8);
                                                                                      if (v1374)
                                                                                      {
                                                                                        v1375 = v2236;
                                                                                        v1376 = v2236[v1373] | (v1364 >> 7 << (7 - v1374));
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        LOBYTE(v1376) = v1364 & 0x80;
                                                                                        v1375 = v2236;
                                                                                      }
                                                                                      v1375[v1373] = v1376;
                                                                                      v1377 = (v1369 + 0x200000000) >> 32;
                                                                                      v2234 = v1377;
                                                                                      if ((_DWORD)v2233)
                                                                                        goto LABEL_2077;
                                                                                      v1378 = (int)v1377 >= 0
                                                                                            ? v1377
                                                                                            : (int)v1377 + 7;
                                                                                      v1379 = (uint64_t)v1378 >> 3;
                                                                                      if (v2235 > v1379)
                                                                                      {
                                                                                        v1380 = v1377
                                                                                              - (v1378 & 0xFFFFFFF8);
                                                                                        if (v1380)
                                                                                        {
                                                                                          v1381 = v2236;
                                                                                          v1382 = v2236[v1379] | (((v1364 >> 6) & 1) << (7 - v1380));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v1382 = ((v1364 & 0x40) != 0) << 7;
                                                                                          v1381 = v2236;
                                                                                        }
                                                                                        v1381[v1379] = v1382;
                                                                                        v1383 = (v1369 + 0x300000000) >> 32;
                                                                                        v2234 = v1383;
                                                                                        if ((_DWORD)v2233)
                                                                                          goto LABEL_2077;
                                                                                        if ((int)v1383 >= 0)
                                                                                          v1384 = v1383;
                                                                                        else
                                                                                          v1384 = v1383 + 7;
                                                                                        v1385 = (uint64_t)v1384 >> 3;
                                                                                        if (v2235 <= v1385)
                                                                                          goto LABEL_2946;
                                                                                        v1386 = v1383
                                                                                              - (v1384 & 0xFFFFFFF8);
                                                                                        if (v1386)
                                                                                        {
                                                                                          v1387 = v2236;
                                                                                          v1388 = v2236[v1385] | (((v1364 >> 5) & 1) << (7 - v1386));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v1388 = ((v1364 & 0x20) != 0) << 7;
                                                                                          v1387 = v2236;
                                                                                        }
                                                                                        v1387[v1385] = v1388;
                                                                                        v1389 = (v1369 + 0x400000000) >> 32;
                                                                                        v2234 = v1389;
                                                                                        if ((_DWORD)v2233)
                                                                                          goto LABEL_2077;
                                                                                        if ((int)v1389 >= 0)
                                                                                          v1390 = v1389;
                                                                                        else
                                                                                          v1390 = v1389 + 7;
                                                                                        v1391 = (uint64_t)v1390 >> 3;
                                                                                        if (v2235 <= v1391)
                                                                                          goto LABEL_2946;
                                                                                        v1392 = v1389
                                                                                              - (v1390 & 0xFFFFFFF8);
                                                                                        if (v1392)
                                                                                        {
                                                                                          v1393 = v2236;
                                                                                          v1394 = v2236[v1391] | (((v1364 >> 4) & 1) << (7 - v1392));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v1394 = ((v1364 & 0x10) != 0) << 7;
                                                                                          v1393 = v2236;
                                                                                        }
                                                                                        v1393[v1391] = v1394;
                                                                                        v1395 = (v1369 + 0x500000000) >> 32;
                                                                                        v2234 = v1395;
                                                                                        if ((_DWORD)v2233)
                                                                                          goto LABEL_2077;
                                                                                        if ((int)v1395 >= 0)
                                                                                          v1396 = v1395;
                                                                                        else
                                                                                          v1396 = v1395 + 7;
                                                                                        v1397 = (uint64_t)v1396 >> 3;
                                                                                        if (v2235 <= v1397)
                                                                                          goto LABEL_2946;
                                                                                        v1398 = v1395
                                                                                              - (v1396 & 0xFFFFFFF8);
                                                                                        if (v1398)
                                                                                        {
                                                                                          v1399 = v2236;
                                                                                          v1400 = v2236[v1397] | (((v1364 >> 3) & 1) << (7 - v1398));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v1400 = ((v1364 & 8) != 0) << 7;
                                                                                          v1399 = v2236;
                                                                                        }
                                                                                        v1399[v1397] = v1400;
                                                                                        v1401 = (v1369 + 0x600000000) >> 32;
                                                                                        v2234 = v1401;
                                                                                        if ((_DWORD)v2233)
                                                                                          goto LABEL_2077;
                                                                                        if ((int)v1401 >= 0)
                                                                                          v1402 = v1401;
                                                                                        else
                                                                                          v1402 = v1401 + 7;
                                                                                        v1403 = (uint64_t)v1402 >> 3;
                                                                                        if (v2235 <= v1403)
                                                                                          goto LABEL_2946;
                                                                                        v1404 = v1401
                                                                                              - (v1402 & 0xFFFFFFF8);
                                                                                        if (v1404)
                                                                                        {
                                                                                          v1405 = v2236;
                                                                                          v1406 = v2236[v1403] | (((v1364 >> 2) & 1) << (7 - v1404));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v1406 = ((v1364 & 4) != 0) << 7;
                                                                                          v1405 = v2236;
                                                                                        }
                                                                                        v1405[v1403] = v1406;
                                                                                        v1407 = (v1369 + 0x700000000) >> 32;
                                                                                        v2234 = v1407;
                                                                                        if ((_DWORD)v2233)
                                                                                          goto LABEL_2077;
                                                                                        if ((int)v1407 >= 0)
                                                                                          v1408 = v1407;
                                                                                        else
                                                                                          v1408 = v1407 + 7;
                                                                                        v1409 = (uint64_t)v1408 >> 3;
                                                                                        if (v2235 <= v1409)
                                                                                          goto LABEL_2946;
                                                                                        v1410 = v1407
                                                                                              - (v1408 & 0xFFFFFFF8);
                                                                                        if (v1410)
                                                                                        {
                                                                                          v1411 = v2236;
                                                                                          v1412 = v2236[v1409] | (((v1364 >> 1) & 1) << (7 - v1410));
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          v1412 = ((v1364 & 2) != 0) << 7;
                                                                                          v1411 = v2236;
                                                                                        }
                                                                                        v1411[v1409] = v1412;
                                                                                        v1974 = (v1369 + 0x800000000) >> 32;
                                                                                        v2234 = v1974;
                                                                                        if ((_DWORD)v2233)
                                                                                        {
LABEL_2077:
                                                                                          v8 = v2174;
                                                                                          goto LABEL_917;
                                                                                        }
                                                                                        if ((int)v1974 >= 0)
                                                                                          v1975 = v1974;
                                                                                        else
                                                                                          v1975 = v1974 + 7;
                                                                                        v1976 = (uint64_t)v1975 >> 3;
                                                                                        if (v2235 > v1976)
                                                                                        {
                                                                                          v1977 = v1364 & 1;
                                                                                          v1978 = v1974
                                                                                                - (v1975 & 0xFFFFFFF8);
                                                                                          if (v1978)
                                                                                          {
                                                                                            v1979 = v1977 << (7 - v1978);
                                                                                            v1980 = v2236;
                                                                                            v1981 = v2236[v1976] | v1979;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            v1981 = (_BYTE)v1977 << 7;
                                                                                            v1980 = v2236;
                                                                                          }
                                                                                          v1980[v1976] = v1981;
                                                                                          v1370 = (v1369 + 0x900000000) >> 32;
                                                                                          v2234 = v1370;
                                                                                          v1371 = v2233;
                                                                                          goto LABEL_2949;
                                                                                        }
                                                                                      }
                                                                                    }
LABEL_2946:
                                                                                    LODWORD(v2233) = 1;
                                                                                    v8 = v2174;
                                                                                  }
                                                                                }
                                                                              }
LABEL_917:
                                                                              v640 = (unsigned __int8 *)(v8 + 13);
                                                                              goto LABEL_918;
                                                                            }
                                                                            if ((_DWORD)v2233)
                                                                              goto LABEL_917;
                                                                            if ((int)v1248 >= 0)
                                                                              v1250 = v1248;
                                                                            else
                                                                              v1250 = v1248 + 7;
                                                                            v1251 = (uint64_t)v1250 >> 3;
                                                                            if (v2235 > v1251)
                                                                            {
                                                                              v1252 = v1248 - (v1250 & 0xFFFFFFF8);
                                                                              if (v1252)
                                                                              {
                                                                                v1253 = v2236;
                                                                                v1254 = v2236[v1251] | (v1242 >> 7 << (7 - v1252));
                                                                              }
                                                                              else
                                                                              {
                                                                                LOBYTE(v1254) = v1242 & 0x80;
                                                                                v1253 = v2236;
                                                                              }
                                                                              v1253[v1251] = v1254;
                                                                              v1255 = (v1247 + 0x200000000) >> 32;
                                                                              v2234 = v1255;
                                                                              v8 = v2174;
                                                                              if ((_DWORD)v2233)
                                                                                goto LABEL_917;
                                                                              if ((int)v1255 >= 0)
                                                                                v1256 = v1255;
                                                                              else
                                                                                v1256 = v1255 + 7;
                                                                              v1257 = (uint64_t)v1256 >> 3;
                                                                              if (v2235 <= v1257)
                                                                                goto LABEL_2025;
                                                                              v1258 = v1255 - (v1256 & 0xFFFFFFF8);
                                                                              if (v1258)
                                                                              {
                                                                                v1259 = v2236;
                                                                                v1260 = v2236[v1257] | (((v1242 >> 6) & 1) << (7 - v1258));
                                                                              }
                                                                              else
                                                                              {
                                                                                v1260 = ((v1242 & 0x40) != 0) << 7;
                                                                                v1259 = v2236;
                                                                              }
                                                                              v1259[v1257] = v1260;
                                                                              v1261 = (v1247 + 0x300000000) >> 32;
                                                                              v2234 = v1261;
                                                                              v8 = v2174;
                                                                              if ((_DWORD)v2233)
                                                                                goto LABEL_917;
                                                                              v1262 = (int)v1261 >= 0
                                                                                    ? v1261
                                                                                    : (int)v1261 + 7;
                                                                              v1263 = (uint64_t)v1262 >> 3;
                                                                              if (v2235 <= v1263)
                                                                                goto LABEL_2025;
                                                                              v1264 = v1261 - (v1262 & 0xFFFFFFF8);
                                                                              if (v1264)
                                                                              {
                                                                                v1265 = v2236;
                                                                                v1266 = v2236[v1263] | (((v1242 >> 5) & 1) << (7 - v1264));
                                                                              }
                                                                              else
                                                                              {
                                                                                v1266 = ((v1242 & 0x20) != 0) << 7;
                                                                                v1265 = v2236;
                                                                              }
                                                                              v1265[v1263] = v1266;
                                                                              v1267 = (v1247 + 0x400000000) >> 32;
                                                                              v2234 = v1267;
                                                                              v8 = v2174;
                                                                              if ((_DWORD)v2233)
                                                                                goto LABEL_917;
                                                                              v1268 = (int)v1267 >= 0
                                                                                    ? v1267
                                                                                    : (int)v1267 + 7;
                                                                              v1269 = (uint64_t)v1268 >> 3;
                                                                              if (v2235 <= v1269)
                                                                                goto LABEL_2025;
                                                                              v1270 = v1267 - (v1268 & 0xFFFFFFF8);
                                                                              if (v1270)
                                                                              {
                                                                                v1271 = v2236;
                                                                                v1272 = v2236[v1269] | (((v1242 >> 4) & 1) << (7 - v1270));
                                                                              }
                                                                              else
                                                                              {
                                                                                v1272 = ((v1242 & 0x10) != 0) << 7;
                                                                                v1271 = v2236;
                                                                              }
                                                                              v1271[v1269] = v1272;
                                                                              v1273 = (v1247 + 0x500000000) >> 32;
                                                                              v2234 = v1273;
                                                                              v8 = v2174;
                                                                              if ((_DWORD)v2233)
                                                                                goto LABEL_917;
                                                                              v1274 = (int)v1273 >= 0
                                                                                    ? v1273
                                                                                    : (int)v1273 + 7;
                                                                              v1275 = (uint64_t)v1274 >> 3;
                                                                              if (v2235 <= v1275)
                                                                                goto LABEL_2025;
                                                                              v1276 = v1273 - (v1274 & 0xFFFFFFF8);
                                                                              if (v1276)
                                                                              {
                                                                                v1277 = v2236;
                                                                                v1278 = v2236[v1275] | (((v1242 >> 3) & 1) << (7 - v1276));
                                                                              }
                                                                              else
                                                                              {
                                                                                v1278 = ((v1242 & 8) != 0) << 7;
                                                                                v1277 = v2236;
                                                                              }
                                                                              v1277[v1275] = v1278;
                                                                              v1279 = (v1247 + 0x600000000) >> 32;
                                                                              v2234 = v1279;
                                                                              v8 = v2174;
                                                                              if ((_DWORD)v2233)
                                                                                goto LABEL_917;
                                                                              v1280 = (int)v1279 >= 0
                                                                                    ? v1279
                                                                                    : (int)v1279 + 7;
                                                                              v1281 = (uint64_t)v1280 >> 3;
                                                                              if (v2235 <= v1281)
                                                                                goto LABEL_2025;
                                                                              v1282 = v1279 - (v1280 & 0xFFFFFFF8);
                                                                              if (v1282)
                                                                              {
                                                                                v1283 = v2236;
                                                                                v1284 = v2236[v1281] | (((v1242 >> 2) & 1) << (7 - v1282));
                                                                              }
                                                                              else
                                                                              {
                                                                                v1284 = ((v1242 & 4) != 0) << 7;
                                                                                v1283 = v2236;
                                                                              }
                                                                              v1283[v1281] = v1284;
                                                                              v1285 = (v1247 + 0x700000000) >> 32;
                                                                              v2234 = v1285;
                                                                              v8 = v2174;
                                                                              if ((_DWORD)v2233)
                                                                                goto LABEL_917;
                                                                              v1286 = (int)v1285 >= 0
                                                                                    ? v1285
                                                                                    : (int)v1285 + 7;
                                                                              v1287 = (uint64_t)v1286 >> 3;
                                                                              if (v2235 <= v1287)
                                                                                goto LABEL_2025;
                                                                              v1288 = v1285 - (v1286 & 0xFFFFFFF8);
                                                                              if (v1288)
                                                                              {
                                                                                v1289 = v2236;
                                                                                v1290 = v2236[v1287] | (((v1242 >> 1) & 1) << (7 - v1288));
                                                                              }
                                                                              else
                                                                              {
                                                                                v1290 = ((v1242 & 2) != 0) << 7;
                                                                                v1289 = v2236;
                                                                              }
                                                                              v1289[v1287] = v1290;
                                                                              v1340 = (v1247 + 0x800000000) >> 32;
                                                                              v2234 = v1340;
                                                                              v8 = v2174;
                                                                              if ((_DWORD)v2233)
                                                                                goto LABEL_917;
                                                                              v1341 = (int)v1340 >= 0
                                                                                    ? v1340
                                                                                    : (int)v1340 + 7;
                                                                              v1342 = (uint64_t)v1341 >> 3;
                                                                              if (v2235 <= v1342)
                                                                              {
LABEL_2025:
                                                                                LODWORD(v2233) = 1;
                                                                                v8 = v2174;
                                                                                goto LABEL_917;
                                                                              }
                                                                              v1343 = v1242 & 1;
                                                                              v1344 = v1340 - (v1341 & 0xFFFFFFF8);
                                                                              if (v1344)
                                                                              {
                                                                                v1345 = v1343 << (7 - v1344);
                                                                                v1346 = v2236;
                                                                                v1347 = v2236[v1342] | v1345;
                                                                              }
                                                                              else
                                                                              {
                                                                                v1347 = (_BYTE)v1343 << 7;
                                                                                v1346 = v2236;
                                                                              }
                                                                              v1346[v1342] = v1347;
                                                                              v1248 = (v1247 + 0x900000000) >> 32;
                                                                              v2234 = v1248;
                                                                              v1249 = v2233;
                                                                              v8 = v2174;
                                                                              goto LABEL_2056;
                                                                            }
                                                                          }
                                                                          LODWORD(v2233) = 1;
                                                                          goto LABEL_917;
                                                                        }
                                                                      }
                                                                    }
                                                                    LODWORD(v2233) = 1;
                                                                    goto LABEL_917;
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  v590 = v2234;
                                                                  if ((v2234 & 0x80000000) == 0)
                                                                    v591 = v2234;
                                                                  else
                                                                    v591 = v2234 + 7;
                                                                  v592 = (uint64_t)v591 >> 3;
                                                                  if (v2235 <= v592)
                                                                  {
                                                                    LODWORD(v2233) = 1;
                                                                    goto LABEL_917;
                                                                  }
                                                                  v593 = v2234 - (v591 & 0xFFFFFFF8);
                                                                  if (v593)
                                                                  {
                                                                    v594 = v2236[v592] | ((v578 != 255) << (7 - v593));
                                                                  }
                                                                  else if (v578 == 255)
                                                                  {
                                                                    LOBYTE(v594) = 0;
                                                                  }
                                                                  else
                                                                  {
                                                                    LOBYTE(v594) = 0x80;
                                                                  }
                                                                  v2236[v592] = v594;
                                                                  v2234 = v590 + 1;
                                                                  v579 = v2233;
                                                                  if (v578 != 255)
                                                                    goto LABEL_825;
                                                                }
                                                                v600 = *((unsigned __int8 *)v8 + 54);
                                                                v601 = v600 != 255;
                                                                if (v579)
                                                                  goto LABEL_917;
                                                                goto LABEL_864;
                                                              }
                                                              LODWORD(v2233) = 1;
                                                            }
                                                            v575 = v8 + 12;
                                                            goto LABEL_819;
                                                          }
                                                          v533 = v2234;
                                                          if ((v2234 & 0x80000000) == 0)
                                                            v534 = v2234;
                                                          else
                                                            v534 = v2234 + 7;
                                                          v535 = (uint64_t)v534 >> 3;
                                                          if (v2235 <= v535)
                                                          {
                                                            v159 = 1;
                                                            LODWORD(v2233) = 1;
                                                            v528 = *((_DWORD *)v2170 + 13);
                                                            if (!v528)
                                                              goto LABEL_810;
                                                          }
                                                          else
                                                          {
                                                            v536 = v2234 - (v534 & 0xFFFFFFF8);
                                                            if (v536)
                                                            {
                                                              v537 = v488 << (7 - v536);
                                                              v538 = v2236;
                                                              v539 = v2236[v535] | v537;
                                                            }
                                                            else
                                                            {
                                                              v539 = (_BYTE)v488 << 7;
                                                              v538 = v2236;
                                                            }
                                                            v538[v535] = v539;
                                                            v2234 = v533 + 1;
                                                            v159 = v2233;
                                                            v528 = *((_DWORD *)v2170 + 13);
                                                            if (!v528)
                                                              goto LABEL_810;
                                                          }
LABEL_755:
                                                          if (!v159)
                                                          {
                                                            v529 = v2234;
                                                            if ((v2234 & 0x80000000) == 0)
                                                              v530 = v2234;
                                                            else
                                                              v530 = v2234 + 7;
                                                            v531 = (uint64_t)v530 >> 3;
                                                            if (v2235 <= v531)
                                                              goto LABEL_808;
                                                            v532 = v2234 - (v530 & 0xFFFFFFF8);
                                                            if (v532)
                                                              v2236[v531] |= 1 << (7 - v532);
                                                            else
                                                              v2236[v531] = 0x80;
                                                            v540 = v529 << 32;
                                                            v541 = (uint64_t)((v529 << 32) + 0x100000000) >> 32;
                                                            v2234 = v541;
                                                            v159 = v2233;
                                                            if (v528 >= 0)
                                                              v542 = v528;
                                                            else
                                                              v542 = -v528;
                                                            if ((_DWORD)v2233)
                                                              goto LABEL_809;
                                                            v543 = (int)v541 >= 0 ? v541 : (int)v541 + 7;
                                                            v544 = (uint64_t)v543 >> 3;
                                                            if (v2235 <= v544)
                                                              goto LABEL_808;
                                                            v545 = v541 - (v543 & 0xFFFFFFF8);
                                                            if (v545)
                                                            {
                                                              v546 = v2236;
                                                              v547 = v2236[v544] | (((v542 >> 3) & 1) << (7 - v545));
                                                            }
                                                            else
                                                            {
                                                              v547 = ((v542 & 8) != 0) << 7;
                                                              v546 = v2236;
                                                            }
                                                            v546[v544] = v547;
                                                            v548 = (uint64_t)(v540 + 0x200000000) >> 32;
                                                            v2234 = v548;
                                                            v159 = v2233;
                                                            if ((_DWORD)v2233)
                                                              goto LABEL_809;
                                                            v549 = (int)v548 >= 0 ? v548 : (int)v548 + 7;
                                                            v550 = (uint64_t)v549 >> 3;
                                                            if (v2235 <= v550)
                                                              goto LABEL_808;
                                                            v551 = v548 - (v549 & 0xFFFFFFF8);
                                                            if (v551)
                                                            {
                                                              v552 = v2236;
                                                              v553 = v2236[v550] | (((v542 >> 2) & 1) << (7 - v551));
                                                            }
                                                            else
                                                            {
                                                              v553 = ((v542 & 4) != 0) << 7;
                                                              v552 = v2236;
                                                            }
                                                            v552[v550] = v553;
                                                            v554 = (uint64_t)(v540 + 0x300000000) >> 32;
                                                            v2234 = v554;
                                                            v159 = v2233;
                                                            if ((_DWORD)v2233)
                                                              goto LABEL_809;
                                                            v555 = (int)v554 >= 0 ? v554 : (int)v554 + 7;
                                                            v556 = (uint64_t)v555 >> 3;
                                                            if (v2235 <= v556)
                                                              goto LABEL_808;
                                                            v557 = v554 - (v555 & 0xFFFFFFF8);
                                                            if (v557)
                                                            {
                                                              v558 = v2236;
                                                              v559 = v2236[v556] | (((v542 >> 1) & 1) << (7 - v557));
                                                            }
                                                            else
                                                            {
                                                              v559 = ((v542 & 2) != 0) << 7;
                                                              v558 = v2236;
                                                            }
                                                            v558[v556] = v559;
                                                            v560 = (uint64_t)(v540 + 0x400000000) >> 32;
                                                            v2234 = v560;
                                                            v159 = v2233;
                                                            if ((_DWORD)v2233)
                                                              goto LABEL_809;
                                                            v561 = (int)v560 >= 0 ? v560 : (int)v560 + 7;
                                                            v562 = (uint64_t)v561 >> 3;
                                                            if (v2235 <= v562)
                                                            {
LABEL_808:
                                                              v159 = 1;
                                                              LODWORD(v2233) = 1;
                                                            }
                                                            else
                                                            {
                                                              v563 = v542 & 1;
                                                              v564 = v560 - (v561 & 0xFFFFFFF8);
                                                              if (v564)
                                                              {
                                                                v565 = v563 << (7 - v564);
                                                                v566 = v2236;
                                                                v567 = v2236[v562] | v565;
                                                              }
                                                              else
                                                              {
                                                                v567 = (_BYTE)v563 << 7;
                                                                v566 = v2236;
                                                              }
                                                              v566[v562] = v567;
                                                              v2234 = (uint64_t)(v540 + 0x500000000) >> 32;
                                                              v159 = v2233;
                                                              v8 = v2174;
                                                            }
                                                          }
LABEL_809:
                                                          v528 = v528 >> 31;
                                                          goto LABEL_810;
                                                        }
                                                        v493 = v2234;
                                                        if ((v2234 & 0x80000000) == 0)
                                                          v494 = v2234;
                                                        else
                                                          v494 = v2234 + 7;
                                                        v495 = (uint64_t)v494 >> 3;
                                                        if (v2235 <= v495)
                                                        {
                                                          v159 = 1;
                                                          LODWORD(v2233) = 1;
                                                          v488 = *((_DWORD *)v2170 + 12);
                                                          if (!v488)
                                                            goto LABEL_754;
                                                        }
                                                        else
                                                        {
                                                          v496 = v2234 - (v494 & 0xFFFFFFF8);
                                                          if (v496)
                                                          {
                                                            v497 = v449 << (7 - v496);
                                                            v498 = v2236;
                                                            v499 = v2236[v495] | v497;
                                                          }
                                                          else
                                                          {
                                                            v499 = (_BYTE)v449 << 7;
                                                            v498 = v2236;
                                                          }
                                                          v498[v495] = v499;
                                                          v2234 = v493 + 1;
                                                          v159 = v2233;
                                                          v488 = *((_DWORD *)v2170 + 12);
                                                          if (!v488)
                                                            goto LABEL_753;
LABEL_698:
                                                          if (!v159)
                                                          {
                                                            v489 = v2234;
                                                            if ((v2234 & 0x80000000) == 0)
                                                              v490 = v2234;
                                                            else
                                                              v490 = v2234 + 7;
                                                            v491 = (uint64_t)v490 >> 3;
                                                            if (v2235 <= v491)
                                                              goto LABEL_751;
                                                            v492 = v2234 - (v490 & 0xFFFFFFF8);
                                                            if (v492)
                                                              v2236[v491] |= 1 << (7 - v492);
                                                            else
                                                              v2236[v491] = 0x80;
                                                            v500 = v489 << 32;
                                                            v501 = (uint64_t)((v489 << 32) + 0x100000000) >> 32;
                                                            v2234 = v501;
                                                            v159 = v2233;
                                                            if (v488 >= 0)
                                                              v502 = v488;
                                                            else
                                                              v502 = -v488;
                                                            if ((_DWORD)v2233)
                                                              goto LABEL_752;
                                                            v503 = (int)v501 >= 0 ? v501 : (int)v501 + 7;
                                                            v504 = (uint64_t)v503 >> 3;
                                                            if (v2235 <= v504)
                                                              goto LABEL_751;
                                                            v505 = v501 - (v503 & 0xFFFFFFF8);
                                                            if (v505)
                                                            {
                                                              v506 = v2236;
                                                              v507 = v2236[v504] | (((v502 >> 3) & 1) << (7 - v505));
                                                            }
                                                            else
                                                            {
                                                              v507 = ((v502 & 8) != 0) << 7;
                                                              v506 = v2236;
                                                            }
                                                            v506[v504] = v507;
                                                            v508 = (uint64_t)(v500 + 0x200000000) >> 32;
                                                            v2234 = v508;
                                                            v159 = v2233;
                                                            if ((_DWORD)v2233)
                                                              goto LABEL_752;
                                                            v509 = (int)v508 >= 0 ? v508 : (int)v508 + 7;
                                                            v510 = (uint64_t)v509 >> 3;
                                                            if (v2235 <= v510)
                                                              goto LABEL_751;
                                                            v511 = v508 - (v509 & 0xFFFFFFF8);
                                                            if (v511)
                                                            {
                                                              v512 = v2236;
                                                              v513 = v2236[v510] | (((v502 >> 2) & 1) << (7 - v511));
                                                            }
                                                            else
                                                            {
                                                              v513 = ((v502 & 4) != 0) << 7;
                                                              v512 = v2236;
                                                            }
                                                            v512[v510] = v513;
                                                            v514 = (uint64_t)(v500 + 0x300000000) >> 32;
                                                            v2234 = v514;
                                                            v159 = v2233;
                                                            if ((_DWORD)v2233)
                                                              goto LABEL_752;
                                                            v515 = (int)v514 >= 0 ? v514 : (int)v514 + 7;
                                                            v516 = (uint64_t)v515 >> 3;
                                                            if (v2235 <= v516)
                                                              goto LABEL_751;
                                                            v517 = v514 - (v515 & 0xFFFFFFF8);
                                                            if (v517)
                                                            {
                                                              v518 = v2236;
                                                              v519 = v2236[v516] | (((v502 >> 1) & 1) << (7 - v517));
                                                            }
                                                            else
                                                            {
                                                              v519 = ((v502 & 2) != 0) << 7;
                                                              v518 = v2236;
                                                            }
                                                            v518[v516] = v519;
                                                            v520 = (uint64_t)(v500 + 0x400000000) >> 32;
                                                            v2234 = v520;
                                                            v159 = v2233;
                                                            if ((_DWORD)v2233)
                                                              goto LABEL_752;
                                                            v521 = (int)v520 >= 0 ? v520 : (int)v520 + 7;
                                                            v522 = (uint64_t)v521 >> 3;
                                                            if (v2235 <= v522)
                                                            {
LABEL_751:
                                                              v159 = 1;
                                                              LODWORD(v2233) = 1;
                                                            }
                                                            else
                                                            {
                                                              v523 = v502 & 1;
                                                              v524 = v520 - (v521 & 0xFFFFFFF8);
                                                              if (v524)
                                                              {
                                                                v525 = v523 << (7 - v524);
                                                                v526 = v2236;
                                                                v527 = v2236[v522] | v525;
                                                              }
                                                              else
                                                              {
                                                                v527 = (_BYTE)v523 << 7;
                                                                v526 = v2236;
                                                              }
                                                              v526[v522] = v527;
                                                              v2234 = (uint64_t)(v500 + 0x500000000) >> 32;
                                                              v159 = v2233;
                                                              v8 = v2174;
                                                            }
                                                          }
                                                        }
LABEL_752:
                                                        v488 = v488 >> 31;
                                                        goto LABEL_753;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
LABEL_640:
                                              v159 = 1;
                                              LODWORD(v2233) = 1;
                                              goto LABEL_641;
                                            }
                                            v205 = v2234;
                                            if ((v2234 & 0x80000000) == 0)
                                              v206 = v2234;
                                            else
                                              v206 = v2234 + 7;
                                            v207 = (uint64_t)v206 >> 3;
                                            if (v2235 <= v207)
                                            {
                                              v159 = 1;
                                              LODWORD(v2233) = 1;
                                              if (!v194)
                                                goto LABEL_577;
                                            }
                                            else
                                            {
                                              v208 = v2234 - (v206 & 0xFFFFFFF8);
                                              if (v208)
                                                v194 = v2236[v207] | (v194 << (7 - v208));
                                              else
                                                LOBYTE(v194) = (_BYTE)v194 << 7;
                                              v2236[v207] = v194;
                                              v2234 = v205 + 1;
                                              v159 = v2233;
                                              if (!*((_BYTE *)v8 + 17))
                                                goto LABEL_577;
                                            }
LABEL_273:
                                            v195 = *((unsigned __int8 *)v8 + 18);
                                            v196 = *((unsigned __int8 *)v8 + 22);
                                            if (v159)
                                            {
                                              if (v195 == v196)
                                                goto LABEL_353;
                                            }
                                            else
                                            {
                                              v209 = v2234;
                                              if ((v2234 & 0x80000000) == 0)
                                                v210 = v2234;
                                              else
                                                v210 = v2234 + 7;
                                              v211 = (uint64_t)v210 >> 3;
                                              if (v2235 <= v211)
                                              {
                                                v159 = 1;
                                                LODWORD(v2233) = 1;
                                                if (v195 != v196)
                                                  *((_BYTE *)v8 + 22) = v195;
                                                goto LABEL_353;
                                              }
                                              v212 = v2234 - (v210 & 0xFFFFFFF8);
                                              if (v212)
                                              {
                                                v213 = v2236[v211] | ((v195 != v196) << (7 - v212));
                                              }
                                              else if (v195 == v196)
                                              {
                                                LOBYTE(v213) = 0;
                                              }
                                              else
                                              {
                                                LOBYTE(v213) = 0x80;
                                              }
                                              v2236[v211] = v213;
                                              v2234 = v209 + 1;
                                              v159 = v2233;
                                              if (v195 == v196)
                                                goto LABEL_353;
                                            }
                                            *((_BYTE *)v8 + 22) = v195;
                                            if ((v195 & 0x80u) == 0)
                                              LOBYTE(v197) = v195;
                                            else
                                              v197 = -(char)v195;
                                            if (!v159)
                                            {
                                              v198 = v2234;
                                              if ((v2234 & 0x80000000) == 0)
                                                v199 = v2234;
                                              else
                                                v199 = v2234 + 7;
                                              v200 = (uint64_t)v199 >> 3;
                                              if (v2235 <= v200)
                                                goto LABEL_352;
                                              v201 = v197 & 0x3F;
                                              v202 = v2234 - (v199 & 0xFFFFFFF8);
                                              if (v202)
                                              {
                                                v203 = v2236;
                                                v204 = v2236[v200] | (v201 >> 5 << (7 - v202));
                                              }
                                              else
                                              {
                                                LOBYTE(v204) = (4 * v201) & 0x80;
                                                v203 = v2236;
                                              }
                                              v203[v200] = v204;
                                              v214 = v198 << 32;
                                              v215 = (uint64_t)((v198 << 32) + 0x100000000) >> 32;
                                              v2234 = v215;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_353;
                                              v216 = (int)v215 >= 0 ? v215 : (int)v215 + 7;
                                              v217 = (uint64_t)v216 >> 3;
                                              if (v2235 <= v217)
                                                goto LABEL_352;
                                              v218 = v215 - (v216 & 0xFFFFFFF8);
                                              if (v218)
                                              {
                                                v219 = v2236;
                                                v220 = v2236[v217] | (((v201 >> 4) & 1) << (7 - v218));
                                              }
                                              else
                                              {
                                                v220 = ((v201 & 0x10) != 0) << 7;
                                                v219 = v2236;
                                              }
                                              v219[v217] = v220;
                                              v228 = (uint64_t)(v214 + 0x200000000) >> 32;
                                              v2234 = v228;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_353;
                                              v229 = (int)v228 >= 0 ? v228 : (int)v228 + 7;
                                              v230 = (uint64_t)v229 >> 3;
                                              if (v2235 <= v230)
                                                goto LABEL_352;
                                              v231 = v228 - (v229 & 0xFFFFFFF8);
                                              if (v231)
                                              {
                                                v232 = v2236;
                                                v233 = v2236[v230] | (((v201 >> 3) & 1) << (7 - v231));
                                              }
                                              else
                                              {
                                                v233 = ((v201 & 8) != 0) << 7;
                                                v232 = v2236;
                                              }
                                              v232[v230] = v233;
                                              v240 = (uint64_t)(v214 + 0x300000000) >> 32;
                                              v2234 = v240;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_353;
                                              v241 = (int)v240 >= 0 ? v240 : (int)v240 + 7;
                                              v242 = (uint64_t)v241 >> 3;
                                              if (v2235 <= v242)
                                              {
LABEL_352:
                                                v159 = 1;
                                                LODWORD(v2233) = 1;
                                                goto LABEL_353;
                                              }
                                              v243 = v240 - (v241 & 0xFFFFFFF8);
                                              if (v243)
                                              {
                                                v244 = v2236;
                                                v245 = v2236[v242] | (((v201 >> 2) & 1) << (7 - v243));
                                              }
                                              else
                                              {
                                                v245 = ((v201 & 4) != 0) << 7;
                                                v244 = v2236;
                                              }
                                              v244[v242] = v245;
                                              v708 = (uint64_t)(v214 + 0x400000000) >> 32;
                                              v2234 = v708;
                                              v159 = v2233;
                                              v8 = v2174;
                                              if (!(_DWORD)v2233)
                                              {
                                                if ((int)v708 >= 0)
                                                  v709 = v708;
                                                else
                                                  v709 = v708 + 7;
                                                v710 = (uint64_t)v709 >> 3;
                                                if (v2235 <= v710)
                                                  goto LABEL_1495;
                                                v711 = v708 - (v709 & 0xFFFFFFF8);
                                                if (v711)
                                                {
                                                  v712 = v2236;
                                                  v713 = v2236[v710] | (((v201 >> 1) & 1) << (7 - v711));
                                                }
                                                else
                                                {
                                                  v713 = ((v201 & 2) != 0) << 7;
                                                  v712 = v2236;
                                                }
                                                v712[v710] = v713;
                                                v796 = (uint64_t)(v214 + 0x500000000) >> 32;
                                                v2234 = v796;
                                                v159 = v2233;
                                                v8 = v2174;
                                                if (!(_DWORD)v2233)
                                                {
                                                  if ((int)v796 >= 0)
                                                    v797 = v796;
                                                  else
                                                    v797 = v796 + 7;
                                                  v798 = (uint64_t)v797 >> 3;
                                                  if (v2235 <= v798)
                                                    goto LABEL_1495;
                                                  v799 = v201 & 1;
                                                  v800 = v796 - (v797 & 0xFFFFFFF8);
                                                  if (v800)
                                                  {
                                                    v801 = v799 << (7 - v800);
                                                    v802 = v2236;
                                                    v803 = v2236[v798] | v801;
                                                  }
                                                  else
                                                  {
                                                    v803 = (_BYTE)v799 << 7;
                                                    v802 = v2236;
                                                  }
                                                  v802[v798] = v803;
                                                  v1004 = (uint64_t)(v214 + 0x600000000) >> 32;
                                                  v2234 = v1004;
                                                  v159 = v2233;
                                                  v8 = v2174;
                                                  if (!(_DWORD)v2233)
                                                  {
                                                    if ((int)v1004 >= 0)
                                                      v1005 = v1004;
                                                    else
                                                      v1005 = v1004 + 7;
                                                    v1006 = (uint64_t)v1005 >> 3;
                                                    if (v2235 > v1006)
                                                    {
                                                      v1007 = v1004 - (v1005 & 0xFFFFFFF8);
                                                      if (v1007)
                                                        v195 = v2236[v1006] | (v195 >> 7 << (7 - v1007));
                                                      else
                                                        LOBYTE(v195) = v195 & 0x80;
                                                      v2236[v1006] = v195;
                                                      v2234 = (uint64_t)(v214 + 0x700000000) >> 32;
                                                      v159 = v2233;
                                                      goto LABEL_1496;
                                                    }
LABEL_1495:
                                                    v159 = 1;
                                                    LODWORD(v2233) = 1;
LABEL_1496:
                                                    v8 = v2174;
                                                  }
                                                }
                                              }
                                            }
LABEL_353:
                                            v246 = *((unsigned __int8 *)v8 + 19);
                                            v247 = *((unsigned __int8 *)v8 + 23);
                                            if (v159)
                                            {
                                              if (v246 == v247)
                                                goto LABEL_403;
                                            }
                                            else
                                            {
                                              v256 = v2234;
                                              if ((v2234 & 0x80000000) == 0)
                                                v257 = v2234;
                                              else
                                                v257 = v2234 + 7;
                                              v258 = (uint64_t)v257 >> 3;
                                              if (v2235 <= v258)
                                              {
                                                v159 = 1;
                                                LODWORD(v2233) = 1;
                                                if (v246 != v247)
                                                  *((_BYTE *)v8 + 23) = v246;
                                                goto LABEL_403;
                                              }
                                              v259 = v2234 - (v257 & 0xFFFFFFF8);
                                              if (v259)
                                              {
                                                v260 = v2236[v258] | ((v246 != v247) << (7 - v259));
                                              }
                                              else if (v246 == v247)
                                              {
                                                LOBYTE(v260) = 0;
                                              }
                                              else
                                              {
                                                LOBYTE(v260) = 0x80;
                                              }
                                              v2236[v258] = v260;
                                              v2234 = v256 + 1;
                                              v159 = v2233;
                                              if (v246 == v247)
                                                goto LABEL_403;
                                            }
                                            *((_BYTE *)v8 + 23) = v246;
                                            if ((v246 & 0x80u) == 0)
                                              LOBYTE(v248) = v246;
                                            else
                                              v248 = -(char)v246;
                                            if (!v159)
                                            {
                                              v249 = v2234;
                                              if ((v2234 & 0x80000000) == 0)
                                                v250 = v2234;
                                              else
                                                v250 = v2234 + 7;
                                              v251 = (uint64_t)v250 >> 3;
                                              if (v2235 <= v251)
                                                goto LABEL_402;
                                              v252 = v248 & 0x3F;
                                              v253 = v2234 - (v250 & 0xFFFFFFF8);
                                              if (v253)
                                              {
                                                v254 = v2236;
                                                v255 = v2236[v251] | (v252 >> 5 << (7 - v253));
                                              }
                                              else
                                              {
                                                LOBYTE(v255) = (4 * v252) & 0x80;
                                                v254 = v2236;
                                              }
                                              v254[v251] = v255;
                                              v261 = v249 << 32;
                                              v262 = (uint64_t)((v249 << 32) + 0x100000000) >> 32;
                                              v2234 = v262;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_403;
                                              v263 = (int)v262 >= 0 ? v262 : (int)v262 + 7;
                                              v264 = (uint64_t)v263 >> 3;
                                              if (v2235 <= v264)
                                                goto LABEL_402;
                                              v265 = v262 - (v263 & 0xFFFFFFF8);
                                              if (v265)
                                              {
                                                v266 = v2236;
                                                v267 = v2236[v264] | (((v252 >> 4) & 1) << (7 - v265));
                                              }
                                              else
                                              {
                                                v267 = ((v252 & 0x10) != 0) << 7;
                                                v266 = v2236;
                                              }
                                              v266[v264] = v267;
                                              v268 = (uint64_t)(v261 + 0x200000000) >> 32;
                                              v2234 = v268;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_403;
                                              v269 = (int)v268 >= 0 ? v268 : (int)v268 + 7;
                                              v270 = (uint64_t)v269 >> 3;
                                              if (v2235 <= v270)
                                                goto LABEL_402;
                                              v271 = v268 - (v269 & 0xFFFFFFF8);
                                              if (v271)
                                              {
                                                v272 = v2236;
                                                v273 = v2236[v270] | (((v252 >> 3) & 1) << (7 - v271));
                                              }
                                              else
                                              {
                                                v273 = ((v252 & 8) != 0) << 7;
                                                v272 = v2236;
                                              }
                                              v272[v270] = v273;
                                              v274 = (uint64_t)(v261 + 0x300000000) >> 32;
                                              v2234 = v274;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_403;
                                              v275 = (int)v274 >= 0 ? v274 : (int)v274 + 7;
                                              v276 = (uint64_t)v275 >> 3;
                                              if (v2235 <= v276)
                                              {
LABEL_402:
                                                v159 = 1;
                                                LODWORD(v2233) = 1;
                                                goto LABEL_403;
                                              }
                                              v277 = v274 - (v275 & 0xFFFFFFF8);
                                              if (v277)
                                              {
                                                v278 = v2236;
                                                v279 = v2236[v276] | (((v252 >> 2) & 1) << (7 - v277));
                                              }
                                              else
                                              {
                                                v279 = ((v252 & 4) != 0) << 7;
                                                v278 = v2236;
                                              }
                                              v278[v276] = v279;
                                              v714 = (uint64_t)(v261 + 0x400000000) >> 32;
                                              v2234 = v714;
                                              v159 = v2233;
                                              v8 = v2174;
                                              if (!(_DWORD)v2233)
                                              {
                                                if ((int)v714 >= 0)
                                                  v715 = v714;
                                                else
                                                  v715 = v714 + 7;
                                                v716 = (uint64_t)v715 >> 3;
                                                if (v2235 <= v716)
                                                  goto LABEL_1505;
                                                v717 = v714 - (v715 & 0xFFFFFFF8);
                                                if (v717)
                                                {
                                                  v718 = v2236;
                                                  v719 = v2236[v716] | (((v252 >> 1) & 1) << (7 - v717));
                                                }
                                                else
                                                {
                                                  v719 = ((v252 & 2) != 0) << 7;
                                                  v718 = v2236;
                                                }
                                                v718[v716] = v719;
                                                v804 = (uint64_t)(v261 + 0x500000000) >> 32;
                                                v2234 = v804;
                                                v159 = v2233;
                                                v8 = v2174;
                                                if (!(_DWORD)v2233)
                                                {
                                                  if ((int)v804 >= 0)
                                                    v805 = v804;
                                                  else
                                                    v805 = v804 + 7;
                                                  v806 = (uint64_t)v805 >> 3;
                                                  if (v2235 <= v806)
                                                    goto LABEL_1505;
                                                  v807 = v252 & 1;
                                                  v808 = v804 - (v805 & 0xFFFFFFF8);
                                                  if (v808)
                                                  {
                                                    v809 = v807 << (7 - v808);
                                                    v810 = v2236;
                                                    v811 = v2236[v806] | v809;
                                                  }
                                                  else
                                                  {
                                                    v811 = (_BYTE)v807 << 7;
                                                    v810 = v2236;
                                                  }
                                                  v810[v806] = v811;
                                                  v1008 = (uint64_t)(v261 + 0x600000000) >> 32;
                                                  v2234 = v1008;
                                                  v159 = v2233;
                                                  v8 = v2174;
                                                  if (!(_DWORD)v2233)
                                                  {
                                                    if ((int)v1008 >= 0)
                                                      v1009 = v1008;
                                                    else
                                                      v1009 = v1008 + 7;
                                                    v1010 = (uint64_t)v1009 >> 3;
                                                    if (v2235 > v1010)
                                                    {
                                                      v1011 = v1008 - (v1009 & 0xFFFFFFF8);
                                                      if (v1011)
                                                        v246 = v2236[v1010] | (v246 >> 7 << (7 - v1011));
                                                      else
                                                        LOBYTE(v246) = v246 & 0x80;
                                                      v2236[v1010] = v246;
                                                      v2234 = (uint64_t)(v261 + 0x700000000) >> 32;
                                                      v159 = v2233;
                                                      goto LABEL_1506;
                                                    }
LABEL_1505:
                                                    v159 = 1;
                                                    LODWORD(v2233) = 1;
LABEL_1506:
                                                    v8 = v2174;
                                                  }
                                                }
                                              }
                                            }
LABEL_403:
                                            v280 = *((unsigned __int8 *)v8 + 20);
                                            v281 = *((unsigned __int8 *)v8 + 24);
                                            if (v159)
                                            {
                                              if (v280 == v281)
                                                goto LABEL_453;
                                            }
                                            else
                                            {
                                              v290 = v2234;
                                              if ((v2234 & 0x80000000) == 0)
                                                v291 = v2234;
                                              else
                                                v291 = v2234 + 7;
                                              v292 = (uint64_t)v291 >> 3;
                                              if (v2235 <= v292)
                                              {
                                                v159 = 1;
                                                LODWORD(v2233) = 1;
                                                if (v280 != v281)
                                                  *((_BYTE *)v8 + 24) = v280;
                                                goto LABEL_453;
                                              }
                                              v293 = v2234 - (v291 & 0xFFFFFFF8);
                                              if (v293)
                                              {
                                                v294 = v2236[v292] | ((v280 != v281) << (7 - v293));
                                              }
                                              else if (v280 == v281)
                                              {
                                                LOBYTE(v294) = 0;
                                              }
                                              else
                                              {
                                                LOBYTE(v294) = 0x80;
                                              }
                                              v2236[v292] = v294;
                                              v2234 = v290 + 1;
                                              v159 = v2233;
                                              if (v280 == v281)
                                                goto LABEL_453;
                                            }
                                            *((_BYTE *)v8 + 24) = v280;
                                            if ((v280 & 0x80u) == 0)
                                              LOBYTE(v282) = v280;
                                            else
                                              v282 = -(char)v280;
                                            if (!v159)
                                            {
                                              v283 = v2234;
                                              if ((v2234 & 0x80000000) == 0)
                                                v284 = v2234;
                                              else
                                                v284 = v2234 + 7;
                                              v285 = (uint64_t)v284 >> 3;
                                              if (v2235 <= v285)
                                                goto LABEL_452;
                                              v286 = v282 & 0x3F;
                                              v287 = v2234 - (v284 & 0xFFFFFFF8);
                                              if (v287)
                                              {
                                                v288 = v2236;
                                                v289 = v2236[v285] | (v286 >> 5 << (7 - v287));
                                              }
                                              else
                                              {
                                                LOBYTE(v289) = (4 * v286) & 0x80;
                                                v288 = v2236;
                                              }
                                              v288[v285] = v289;
                                              v295 = v283 << 32;
                                              v296 = (uint64_t)((v283 << 32) + 0x100000000) >> 32;
                                              v2234 = v296;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_453;
                                              v297 = (int)v296 >= 0 ? v296 : (int)v296 + 7;
                                              v298 = (uint64_t)v297 >> 3;
                                              if (v2235 <= v298)
                                                goto LABEL_452;
                                              v299 = v296 - (v297 & 0xFFFFFFF8);
                                              if (v299)
                                              {
                                                v300 = v2236;
                                                v301 = v2236[v298] | (((v286 >> 4) & 1) << (7 - v299));
                                              }
                                              else
                                              {
                                                v301 = ((v286 & 0x10) != 0) << 7;
                                                v300 = v2236;
                                              }
                                              v300[v298] = v301;
                                              v302 = (uint64_t)(v295 + 0x200000000) >> 32;
                                              v2234 = v302;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_453;
                                              v303 = (int)v302 >= 0 ? v302 : (int)v302 + 7;
                                              v304 = (uint64_t)v303 >> 3;
                                              if (v2235 <= v304)
                                                goto LABEL_452;
                                              v305 = v302 - (v303 & 0xFFFFFFF8);
                                              if (v305)
                                              {
                                                v306 = v2236;
                                                v307 = v2236[v304] | (((v286 >> 3) & 1) << (7 - v305));
                                              }
                                              else
                                              {
                                                v307 = ((v286 & 8) != 0) << 7;
                                                v306 = v2236;
                                              }
                                              v306[v304] = v307;
                                              v308 = (uint64_t)(v295 + 0x300000000) >> 32;
                                              v2234 = v308;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_453;
                                              v309 = (int)v308 >= 0 ? v308 : (int)v308 + 7;
                                              v310 = (uint64_t)v309 >> 3;
                                              if (v2235 <= v310)
                                              {
LABEL_452:
                                                v159 = 1;
                                                LODWORD(v2233) = 1;
                                                goto LABEL_453;
                                              }
                                              v311 = v308 - (v309 & 0xFFFFFFF8);
                                              if (v311)
                                              {
                                                v312 = v2236;
                                                v313 = v2236[v310] | (((v286 >> 2) & 1) << (7 - v311));
                                              }
                                              else
                                              {
                                                v313 = ((v286 & 4) != 0) << 7;
                                                v312 = v2236;
                                              }
                                              v312[v310] = v313;
                                              v720 = (uint64_t)(v295 + 0x400000000) >> 32;
                                              v2234 = v720;
                                              v159 = v2233;
                                              v8 = v2174;
                                              if (!(_DWORD)v2233)
                                              {
                                                if ((int)v720 >= 0)
                                                  v721 = v720;
                                                else
                                                  v721 = v720 + 7;
                                                v722 = (uint64_t)v721 >> 3;
                                                if (v2235 <= v722)
                                                  goto LABEL_1515;
                                                v723 = v720 - (v721 & 0xFFFFFFF8);
                                                if (v723)
                                                {
                                                  v724 = v2236;
                                                  v725 = v2236[v722] | (((v286 >> 1) & 1) << (7 - v723));
                                                }
                                                else
                                                {
                                                  v725 = ((v286 & 2) != 0) << 7;
                                                  v724 = v2236;
                                                }
                                                v724[v722] = v725;
                                                v812 = (uint64_t)(v295 + 0x500000000) >> 32;
                                                v2234 = v812;
                                                v159 = v2233;
                                                v8 = v2174;
                                                if (!(_DWORD)v2233)
                                                {
                                                  if ((int)v812 >= 0)
                                                    v813 = v812;
                                                  else
                                                    v813 = v812 + 7;
                                                  v814 = (uint64_t)v813 >> 3;
                                                  if (v2235 <= v814)
                                                    goto LABEL_1515;
                                                  v815 = v286 & 1;
                                                  v816 = v812 - (v813 & 0xFFFFFFF8);
                                                  if (v816)
                                                  {
                                                    v817 = v815 << (7 - v816);
                                                    v818 = v2236;
                                                    v819 = v2236[v814] | v817;
                                                  }
                                                  else
                                                  {
                                                    v819 = (_BYTE)v815 << 7;
                                                    v818 = v2236;
                                                  }
                                                  v818[v814] = v819;
                                                  v1012 = (uint64_t)(v295 + 0x600000000) >> 32;
                                                  v2234 = v1012;
                                                  v159 = v2233;
                                                  v8 = v2174;
                                                  if (!(_DWORD)v2233)
                                                  {
                                                    if ((int)v1012 >= 0)
                                                      v1013 = v1012;
                                                    else
                                                      v1013 = v1012 + 7;
                                                    v1014 = (uint64_t)v1013 >> 3;
                                                    if (v2235 > v1014)
                                                    {
                                                      v1015 = v1012 - (v1013 & 0xFFFFFFF8);
                                                      if (v1015)
                                                        v280 = v2236[v1014] | (v280 >> 7 << (7 - v1015));
                                                      else
                                                        LOBYTE(v280) = v280 & 0x80;
                                                      v2236[v1014] = v280;
                                                      v2234 = (uint64_t)(v295 + 0x700000000) >> 32;
                                                      v159 = v2233;
                                                      goto LABEL_1516;
                                                    }
LABEL_1515:
                                                    v159 = 1;
                                                    LODWORD(v2233) = 1;
LABEL_1516:
                                                    v8 = v2174;
                                                  }
                                                }
                                              }
                                            }
LABEL_453:
                                            v314 = *((unsigned __int8 *)v8 + 21);
                                            v315 = *((unsigned __int8 *)v8 + 25);
                                            if (v159)
                                            {
                                              if (v314 == v315)
                                                goto LABEL_503;
                                            }
                                            else
                                            {
                                              v324 = v2234;
                                              if ((v2234 & 0x80000000) == 0)
                                                v325 = v2234;
                                              else
                                                v325 = v2234 + 7;
                                              v326 = (uint64_t)v325 >> 3;
                                              if (v2235 <= v326)
                                              {
                                                v159 = 1;
                                                LODWORD(v2233) = 1;
                                                if (v314 != v315)
                                                  *((_BYTE *)v8 + 25) = v314;
                                                goto LABEL_503;
                                              }
                                              v327 = v2234 - (v325 & 0xFFFFFFF8);
                                              if (v327)
                                              {
                                                v328 = v2236[v326] | ((v314 != v315) << (7 - v327));
                                              }
                                              else if (v314 == v315)
                                              {
                                                LOBYTE(v328) = 0;
                                              }
                                              else
                                              {
                                                LOBYTE(v328) = 0x80;
                                              }
                                              v2236[v326] = v328;
                                              v2234 = v324 + 1;
                                              v159 = v2233;
                                              if (v314 == v315)
                                                goto LABEL_503;
                                            }
                                            *((_BYTE *)v8 + 25) = v314;
                                            if ((v314 & 0x80u) == 0)
                                              LOBYTE(v316) = v314;
                                            else
                                              v316 = -(char)v314;
                                            if (!v159)
                                            {
                                              v317 = v2234;
                                              if ((v2234 & 0x80000000) == 0)
                                                v318 = v2234;
                                              else
                                                v318 = v2234 + 7;
                                              v319 = (uint64_t)v318 >> 3;
                                              if (v2235 <= v319)
                                                goto LABEL_502;
                                              v320 = v316 & 0x3F;
                                              v321 = v2234 - (v318 & 0xFFFFFFF8);
                                              if (v321)
                                              {
                                                v322 = v2236;
                                                v323 = v2236[v319] | (v320 >> 5 << (7 - v321));
                                              }
                                              else
                                              {
                                                LOBYTE(v323) = (4 * v320) & 0x80;
                                                v322 = v2236;
                                              }
                                              v322[v319] = v323;
                                              v329 = v317 << 32;
                                              v330 = (uint64_t)((v317 << 32) + 0x100000000) >> 32;
                                              v2234 = v330;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_503;
                                              v331 = (int)v330 >= 0 ? v330 : (int)v330 + 7;
                                              v332 = (uint64_t)v331 >> 3;
                                              if (v2235 <= v332)
                                                goto LABEL_502;
                                              v333 = v330 - (v331 & 0xFFFFFFF8);
                                              if (v333)
                                              {
                                                v334 = v2236;
                                                v335 = v2236[v332] | (((v320 >> 4) & 1) << (7 - v333));
                                              }
                                              else
                                              {
                                                v335 = ((v320 & 0x10) != 0) << 7;
                                                v334 = v2236;
                                              }
                                              v334[v332] = v335;
                                              v336 = (uint64_t)(v329 + 0x200000000) >> 32;
                                              v2234 = v336;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_503;
                                              v337 = (int)v336 >= 0 ? v336 : (int)v336 + 7;
                                              v338 = (uint64_t)v337 >> 3;
                                              if (v2235 <= v338)
                                                goto LABEL_502;
                                              v339 = v336 - (v337 & 0xFFFFFFF8);
                                              if (v339)
                                              {
                                                v340 = v2236;
                                                v341 = v2236[v338] | (((v320 >> 3) & 1) << (7 - v339));
                                              }
                                              else
                                              {
                                                v341 = ((v320 & 8) != 0) << 7;
                                                v340 = v2236;
                                              }
                                              v340[v338] = v341;
                                              v342 = (uint64_t)(v329 + 0x300000000) >> 32;
                                              v2234 = v342;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_503;
                                              v343 = (int)v342 >= 0 ? v342 : (int)v342 + 7;
                                              v344 = (uint64_t)v343 >> 3;
                                              if (v2235 <= v344)
                                              {
LABEL_502:
                                                v159 = 1;
                                                LODWORD(v2233) = 1;
                                                goto LABEL_503;
                                              }
                                              v345 = v342 - (v343 & 0xFFFFFFF8);
                                              if (v345)
                                              {
                                                v346 = v2236;
                                                v347 = v2236[v344] | (((v320 >> 2) & 1) << (7 - v345));
                                              }
                                              else
                                              {
                                                v347 = ((v320 & 4) != 0) << 7;
                                                v346 = v2236;
                                              }
                                              v346[v344] = v347;
                                              v726 = (uint64_t)(v329 + 0x400000000) >> 32;
                                              v2234 = v726;
                                              v159 = v2233;
                                              v8 = v2174;
                                              if (!(_DWORD)v2233)
                                              {
                                                if ((int)v726 >= 0)
                                                  v727 = v726;
                                                else
                                                  v727 = v726 + 7;
                                                v728 = (uint64_t)v727 >> 3;
                                                if (v2235 <= v728)
                                                  goto LABEL_1525;
                                                v729 = v726 - (v727 & 0xFFFFFFF8);
                                                if (v729)
                                                {
                                                  v730 = v2236;
                                                  v731 = v2236[v728] | (((v320 >> 1) & 1) << (7 - v729));
                                                }
                                                else
                                                {
                                                  v731 = ((v320 & 2) != 0) << 7;
                                                  v730 = v2236;
                                                }
                                                v730[v728] = v731;
                                                v820 = (uint64_t)(v329 + 0x500000000) >> 32;
                                                v2234 = v820;
                                                v159 = v2233;
                                                v8 = v2174;
                                                if (!(_DWORD)v2233)
                                                {
                                                  if ((int)v820 >= 0)
                                                    v821 = v820;
                                                  else
                                                    v821 = v820 + 7;
                                                  v822 = (uint64_t)v821 >> 3;
                                                  if (v2235 <= v822)
                                                    goto LABEL_1525;
                                                  v823 = v320 & 1;
                                                  v824 = v820 - (v821 & 0xFFFFFFF8);
                                                  if (v824)
                                                  {
                                                    v825 = v823 << (7 - v824);
                                                    v826 = v2236;
                                                    v827 = v2236[v822] | v825;
                                                  }
                                                  else
                                                  {
                                                    v827 = (_BYTE)v823 << 7;
                                                    v826 = v2236;
                                                  }
                                                  v826[v822] = v827;
                                                  v1016 = (uint64_t)(v329 + 0x600000000) >> 32;
                                                  v2234 = v1016;
                                                  v159 = v2233;
                                                  v8 = v2174;
                                                  if (!(_DWORD)v2233)
                                                  {
                                                    if ((int)v1016 >= 0)
                                                      v1017 = v1016;
                                                    else
                                                      v1017 = v1016 + 7;
                                                    v1018 = (uint64_t)v1017 >> 3;
                                                    if (v2235 > v1018)
                                                    {
                                                      v1019 = v1016 - (v1017 & 0xFFFFFFF8);
                                                      if (v1019)
                                                        v314 = v2236[v1018] | (v314 >> 7 << (7 - v1019));
                                                      else
                                                        LOBYTE(v314) = v314 & 0x80;
                                                      v2236[v1018] = v314;
                                                      v2234 = (uint64_t)(v329 + 0x700000000) >> 32;
                                                      v159 = v2233;
                                                      goto LABEL_1526;
                                                    }
LABEL_1525:
                                                    v159 = 1;
                                                    LODWORD(v2233) = 1;
LABEL_1526:
                                                    v8 = v2174;
                                                  }
                                                }
                                              }
                                            }
LABEL_503:
                                            v348 = *((unsigned __int8 *)v8 + 26);
                                            v349 = *((unsigned __int8 *)v8 + 28);
                                            if (v159)
                                            {
                                              if (v348 == v349)
                                                goto LABEL_553;
                                            }
                                            else
                                            {
                                              v358 = v2234;
                                              if ((v2234 & 0x80000000) == 0)
                                                v359 = v2234;
                                              else
                                                v359 = v2234 + 7;
                                              v360 = (uint64_t)v359 >> 3;
                                              if (v2235 <= v360)
                                              {
                                                v159 = 1;
                                                LODWORD(v2233) = 1;
                                                if (v348 != v349)
                                                  *((_BYTE *)v8 + 28) = v348;
                                                goto LABEL_553;
                                              }
                                              v361 = v2234 - (v359 & 0xFFFFFFF8);
                                              if (v361)
                                              {
                                                v362 = v2236[v360] | ((v348 != v349) << (7 - v361));
                                              }
                                              else if (v348 == v349)
                                              {
                                                LOBYTE(v362) = 0;
                                              }
                                              else
                                              {
                                                LOBYTE(v362) = 0x80;
                                              }
                                              v2236[v360] = v362;
                                              v2234 = v358 + 1;
                                              v159 = v2233;
                                              if (v348 == v349)
                                                goto LABEL_553;
                                            }
                                            *((_BYTE *)v8 + 28) = v348;
                                            if ((v348 & 0x80u) == 0)
                                              LOBYTE(v350) = v348;
                                            else
                                              v350 = -(char)v348;
                                            if (!v159)
                                            {
                                              v351 = v2234;
                                              if ((v2234 & 0x80000000) == 0)
                                                v352 = v2234;
                                              else
                                                v352 = v2234 + 7;
                                              v353 = (uint64_t)v352 >> 3;
                                              if (v2235 <= v353)
                                                goto LABEL_552;
                                              v354 = v350 & 0x3F;
                                              v355 = v2234 - (v352 & 0xFFFFFFF8);
                                              if (v355)
                                              {
                                                v356 = v2236;
                                                v357 = v2236[v353] | (v354 >> 5 << (7 - v355));
                                              }
                                              else
                                              {
                                                LOBYTE(v357) = (4 * v354) & 0x80;
                                                v356 = v2236;
                                              }
                                              v356[v353] = v357;
                                              v363 = v351 << 32;
                                              v364 = (uint64_t)((v351 << 32) + 0x100000000) >> 32;
                                              v2234 = v364;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_553;
                                              v365 = (int)v364 >= 0 ? v364 : (int)v364 + 7;
                                              v366 = (uint64_t)v365 >> 3;
                                              if (v2235 <= v366)
                                                goto LABEL_552;
                                              v367 = v364 - (v365 & 0xFFFFFFF8);
                                              if (v367)
                                              {
                                                v368 = v2236;
                                                v369 = v2236[v366] | (((v354 >> 4) & 1) << (7 - v367));
                                              }
                                              else
                                              {
                                                v369 = ((v354 & 0x10) != 0) << 7;
                                                v368 = v2236;
                                              }
                                              v368[v366] = v369;
                                              v370 = (uint64_t)(v363 + 0x200000000) >> 32;
                                              v2234 = v370;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_553;
                                              v371 = (int)v370 >= 0 ? v370 : (int)v370 + 7;
                                              v372 = (uint64_t)v371 >> 3;
                                              if (v2235 <= v372)
                                                goto LABEL_552;
                                              v373 = v370 - (v371 & 0xFFFFFFF8);
                                              if (v373)
                                              {
                                                v374 = v2236;
                                                v375 = v2236[v372] | (((v354 >> 3) & 1) << (7 - v373));
                                              }
                                              else
                                              {
                                                v375 = ((v354 & 8) != 0) << 7;
                                                v374 = v2236;
                                              }
                                              v374[v372] = v375;
                                              v376 = (uint64_t)(v363 + 0x300000000) >> 32;
                                              v2234 = v376;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_553;
                                              v377 = (int)v376 >= 0 ? v376 : (int)v376 + 7;
                                              v378 = (uint64_t)v377 >> 3;
                                              if (v2235 <= v378)
                                              {
LABEL_552:
                                                v159 = 1;
                                                LODWORD(v2233) = 1;
                                                goto LABEL_553;
                                              }
                                              v379 = v376 - (v377 & 0xFFFFFFF8);
                                              if (v379)
                                              {
                                                v380 = v2236;
                                                v381 = v2236[v378] | (((v354 >> 2) & 1) << (7 - v379));
                                              }
                                              else
                                              {
                                                v381 = ((v354 & 4) != 0) << 7;
                                                v380 = v2236;
                                              }
                                              v380[v378] = v381;
                                              v732 = (uint64_t)(v363 + 0x400000000) >> 32;
                                              v2234 = v732;
                                              v159 = v2233;
                                              v8 = v2174;
                                              if (!(_DWORD)v2233)
                                              {
                                                if ((int)v732 >= 0)
                                                  v733 = v732;
                                                else
                                                  v733 = v732 + 7;
                                                v734 = (uint64_t)v733 >> 3;
                                                if (v2235 <= v734)
                                                  goto LABEL_1535;
                                                v735 = v732 - (v733 & 0xFFFFFFF8);
                                                if (v735)
                                                {
                                                  v736 = v2236;
                                                  v737 = v2236[v734] | (((v354 >> 1) & 1) << (7 - v735));
                                                }
                                                else
                                                {
                                                  v737 = ((v354 & 2) != 0) << 7;
                                                  v736 = v2236;
                                                }
                                                v736[v734] = v737;
                                                v828 = (uint64_t)(v363 + 0x500000000) >> 32;
                                                v2234 = v828;
                                                v159 = v2233;
                                                v8 = v2174;
                                                if (!(_DWORD)v2233)
                                                {
                                                  if ((int)v828 >= 0)
                                                    v829 = v828;
                                                  else
                                                    v829 = v828 + 7;
                                                  v830 = (uint64_t)v829 >> 3;
                                                  if (v2235 <= v830)
                                                    goto LABEL_1535;
                                                  v831 = v354 & 1;
                                                  v832 = v828 - (v829 & 0xFFFFFFF8);
                                                  if (v832)
                                                  {
                                                    v833 = v831 << (7 - v832);
                                                    v834 = v2236;
                                                    v835 = v2236[v830] | v833;
                                                  }
                                                  else
                                                  {
                                                    v835 = (_BYTE)v831 << 7;
                                                    v834 = v2236;
                                                  }
                                                  v834[v830] = v835;
                                                  v1020 = (uint64_t)(v363 + 0x600000000) >> 32;
                                                  v2234 = v1020;
                                                  v159 = v2233;
                                                  v8 = v2174;
                                                  if (!(_DWORD)v2233)
                                                  {
                                                    if ((int)v1020 >= 0)
                                                      v1021 = v1020;
                                                    else
                                                      v1021 = v1020 + 7;
                                                    v1022 = (uint64_t)v1021 >> 3;
                                                    if (v2235 > v1022)
                                                    {
                                                      v1023 = v1020 - (v1021 & 0xFFFFFFF8);
                                                      if (v1023)
                                                        v348 = v2236[v1022] | (v348 >> 7 << (7 - v1023));
                                                      else
                                                        LOBYTE(v348) = v348 & 0x80;
                                                      v2236[v1022] = v348;
                                                      v2234 = (uint64_t)(v363 + 0x700000000) >> 32;
                                                      v159 = v2233;
                                                      goto LABEL_1536;
                                                    }
LABEL_1535:
                                                    v159 = 1;
                                                    LODWORD(v2233) = 1;
LABEL_1536:
                                                    v8 = v2174;
                                                  }
                                                }
                                              }
                                            }
LABEL_553:
                                            v382 = *((unsigned __int8 *)v8 + 27);
                                            v383 = *((unsigned __int8 *)v8 + 29);
                                            if (v159)
                                            {
                                              if (v382 == v383)
                                                goto LABEL_577;
                                            }
                                            else
                                            {
                                              v392 = v2234;
                                              if ((v2234 & 0x80000000) == 0)
                                                v393 = v2234;
                                              else
                                                v393 = v2234 + 7;
                                              v394 = (uint64_t)v393 >> 3;
                                              if (v2235 <= v394)
                                              {
                                                v159 = 1;
                                                LODWORD(v2233) = 1;
                                                if (v382 != v383)
                                                  *((_BYTE *)v8 + 29) = v382;
                                                goto LABEL_641;
                                              }
                                              v395 = v2234 - (v393 & 0xFFFFFFF8);
                                              if (v395)
                                              {
                                                v396 = v2236[v394] | ((v382 != v383) << (7 - v395));
                                              }
                                              else if (v382 == v383)
                                              {
                                                LOBYTE(v396) = 0;
                                              }
                                              else
                                              {
                                                LOBYTE(v396) = 0x80;
                                              }
                                              v2236[v394] = v396;
                                              v2234 = v392 + 1;
                                              v159 = v2233;
                                              if (v382 == v383)
                                                goto LABEL_577;
                                            }
                                            *((_BYTE *)v8 + 29) = v382;
                                            if ((v382 & 0x80u) == 0)
                                              LOBYTE(v384) = v382;
                                            else
                                              v384 = -(char)v382;
                                            if (v159)
                                              goto LABEL_641;
                                            v385 = v2234;
                                            if ((v2234 & 0x80000000) == 0)
                                              v386 = v2234;
                                            else
                                              v386 = v2234 + 7;
                                            v387 = (uint64_t)v386 >> 3;
                                            if (v2235 > v387)
                                            {
                                              v388 = v384 & 0x3F;
                                              v389 = v2234 - (v386 & 0xFFFFFFF8);
                                              if (v389)
                                              {
                                                v390 = v2236;
                                                v391 = v2236[v387] | (v388 >> 5 << (7 - v389));
                                              }
                                              else
                                              {
                                                LOBYTE(v391) = (4 * v388) & 0x80;
                                                v390 = v2236;
                                              }
                                              v390[v387] = v391;
                                              v412 = v385 << 32;
                                              v413 = (uint64_t)((v385 << 32) + 0x100000000) >> 32;
                                              v2234 = v413;
                                              v159 = v2233;
                                              if ((_DWORD)v2233)
                                                goto LABEL_641;
                                              v414 = (int)v413 >= 0 ? v413 : (int)v413 + 7;
                                              v415 = (uint64_t)v414 >> 3;
                                              if (v2235 > v415)
                                              {
                                                v416 = v413 - (v414 & 0xFFFFFFF8);
                                                if (v416)
                                                {
                                                  v417 = v2236;
                                                  v418 = v2236[v415] | (((v388 >> 4) & 1) << (7 - v416));
                                                }
                                                else
                                                {
                                                  v418 = ((v388 & 0x10) != 0) << 7;
                                                  v417 = v2236;
                                                }
                                                v417[v415] = v418;
                                                v425 = (uint64_t)(v412 + 0x200000000) >> 32;
                                                v2234 = v425;
                                                v159 = v2233;
                                                if ((_DWORD)v2233)
                                                  goto LABEL_641;
                                                v426 = (int)v425 >= 0 ? v425 : (int)v425 + 7;
                                                v427 = (uint64_t)v426 >> 3;
                                                if (v2235 > v427)
                                                {
                                                  v428 = v425 - (v426 & 0xFFFFFFF8);
                                                  if (v428)
                                                  {
                                                    v429 = v2236;
                                                    v430 = v2236[v427] | (((v388 >> 3) & 1) << (7 - v428));
                                                  }
                                                  else
                                                  {
                                                    v430 = ((v388 & 8) != 0) << 7;
                                                    v429 = v2236;
                                                  }
                                                  v429[v427] = v430;
                                                  v437 = (uint64_t)(v412 + 0x300000000) >> 32;
                                                  v2234 = v437;
                                                  v159 = v2233;
                                                  if ((_DWORD)v2233)
                                                    goto LABEL_641;
                                                  v438 = (int)v437 >= 0 ? v437 : (int)v437 + 7;
                                                  v439 = (uint64_t)v438 >> 3;
                                                  if (v2235 > v439)
                                                  {
                                                    v440 = v437 - (v438 & 0xFFFFFFF8);
                                                    if (v440)
                                                    {
                                                      v441 = v2236;
                                                      v442 = v2236[v439] | (((v388 >> 2) & 1) << (7 - v440));
                                                    }
                                                    else
                                                    {
                                                      v442 = ((v388 & 4) != 0) << 7;
                                                      v441 = v2236;
                                                    }
                                                    v441[v439] = v442;
                                                    v738 = (uint64_t)(v412 + 0x400000000) >> 32;
                                                    v2234 = v738;
                                                    v159 = v2233;
                                                    v8 = v2174;
                                                    if (!(_DWORD)v2233)
                                                    {
                                                      if ((int)v738 >= 0)
                                                        v739 = v738;
                                                      else
                                                        v739 = v738 + 7;
                                                      v740 = (uint64_t)v739 >> 3;
                                                      if (v2235 <= v740)
                                                        goto LABEL_1560;
                                                      v741 = v738 - (v739 & 0xFFFFFFF8);
                                                      if (v741)
                                                      {
                                                        v742 = v2236;
                                                        v743 = v2236[v740] | (((v388 >> 1) & 1) << (7 - v741));
                                                      }
                                                      else
                                                      {
                                                        v743 = ((v388 & 2) != 0) << 7;
                                                        v742 = v2236;
                                                      }
                                                      v742[v740] = v743;
                                                      v836 = (uint64_t)(v412 + 0x500000000) >> 32;
                                                      v2234 = v836;
                                                      v159 = v2233;
                                                      v8 = v2174;
                                                      if (!(_DWORD)v2233)
                                                      {
                                                        if ((int)v836 >= 0)
                                                          v837 = v836;
                                                        else
                                                          v837 = v836 + 7;
                                                        v838 = (uint64_t)v837 >> 3;
                                                        if (v2235 <= v838)
                                                          goto LABEL_1560;
                                                        v839 = v388 & 1;
                                                        v840 = v836 - (v837 & 0xFFFFFFF8);
                                                        if (v840)
                                                        {
                                                          v841 = v839 << (7 - v840);
                                                          v842 = v2236;
                                                          v843 = v2236[v838] | v841;
                                                        }
                                                        else
                                                        {
                                                          v843 = (_BYTE)v839 << 7;
                                                          v842 = v2236;
                                                        }
                                                        v842[v838] = v843;
                                                        v1024 = (uint64_t)(v412 + 0x600000000) >> 32;
                                                        v2234 = v1024;
                                                        v159 = v2233;
                                                        v8 = v2174;
                                                        if (!(_DWORD)v2233)
                                                        {
                                                          if ((int)v1024 >= 0)
                                                            v1025 = v1024;
                                                          else
                                                            v1025 = v1024 + 7;
                                                          v1026 = (uint64_t)v1025 >> 3;
                                                          if (v2235 > v1026)
                                                          {
                                                            v1027 = v1024 - (v1025 & 0xFFFFFFF8);
                                                            if (v1027)
                                                              v382 = v2236[v1026] | (v382 >> 7 << (7 - v1027));
                                                            else
                                                              LOBYTE(v382) = v382 & 0x80;
                                                            v2236[v1026] = v382;
                                                            v2234 = (uint64_t)(v412 + 0x700000000) >> 32;
                                                            v159 = v2233;
                                                            v8 = v2174;
                                                            goto LABEL_577;
                                                          }
                                                          goto LABEL_1560;
                                                        }
                                                      }
                                                    }
                                                    goto LABEL_641;
                                                  }
                                                }
                                              }
                                            }
                                            goto LABEL_640;
                                          }
                                          if (v159)
                                            goto LABEL_270;
                                          v168 = v2234;
                                          if ((v2234 & 0x80000000) == 0)
                                            v169 = v2234;
                                          else
                                            v169 = v2234 + 7;
                                          v170 = (uint64_t)v169 >> 3;
                                          if (v2235 <= v170)
                                            goto LABEL_269;
                                          v171 = *((_DWORD *)v2170 + 853);
                                          v172 = v2234 - (v169 & 0xFFFFFFF8);
                                          if (v172)
                                          {
                                            v173 = v171 << (7 - v172);
                                            v174 = v2236;
                                            v175 = v2236[v170] | v173;
                                          }
                                          else
                                          {
                                            v175 = (_BYTE)v171 << 7;
                                            v174 = v2236;
                                          }
                                          v174[v170] = v175;
                                          v185 = v168 << 32;
                                          v186 = (uint64_t)((v168 << 32) + 0x100000000) >> 32;
                                          v2234 = v186;
                                          v159 = v2233;
                                          if ((_DWORD)v2233)
                                            goto LABEL_270;
                                          v187 = (int)v186 >= 0 ? v186 : (int)v186 + 7;
                                          v188 = (uint64_t)v187 >> 3;
                                          if (v2235 <= v188)
                                            goto LABEL_269;
                                          v189 = v8[3375];
                                          v190 = v186 - (v187 & 0xFFFFFFF8);
                                          if (v190)
                                          {
                                            v191 = v189 << (7 - v190);
                                            v192 = v2236;
                                            v193 = v2236[v188] | v191;
                                          }
                                          else
                                          {
                                            v193 = (_BYTE)v189 << 7;
                                            v192 = v2236;
                                          }
                                          v192[v188] = v193;
                                          v2234 = (uint64_t)(v185 + 0x200000000) >> 32;
                                          v159 = v2233;
                                          if ((_DWORD)v2233)
                                            goto LABEL_270;
LABEL_240:
                                          v160 = v2234;
                                          v161 = (v2234 & 0x80000000) == 0 ? v2234 : (int)v2234 + 7;
                                          v162 = (uint64_t)v161 >> 3;
                                          if (v2235 <= v162)
                                            goto LABEL_269;
                                          v163 = v8[48];
                                          v164 = v2234 - (v161 & 0xFFFFFFF8);
                                          if (v164)
                                          {
                                            v165 = ((v163 >> 1) & 1) << (7 - v164);
                                            v166 = v2236;
                                            v167 = v2236[v162] | v165;
                                          }
                                          else
                                          {
                                            v167 = ((v8[48] & 2) != 0) << 7;
                                            v166 = v2236;
                                          }
                                          v166[v162] = v167;
                                          v176 = v160 << 32;
                                          v177 = (uint64_t)((v160 << 32) + 0x100000000) >> 32;
                                          v2234 = v177;
                                          v159 = v2233;
                                          if ((_DWORD)v2233)
                                            goto LABEL_270;
                                          v178 = (int)v177 >= 0 ? v177 : (int)v177 + 7;
                                          v179 = (uint64_t)v178 >> 3;
                                          if (v2235 <= v179)
                                          {
LABEL_269:
                                            v159 = 1;
                                            LODWORD(v2233) = 1;
                                            goto LABEL_270;
                                          }
                                          v180 = v163 & 1;
                                          v181 = v177 - (v178 & 0xFFFFFFF8);
                                          if (v181)
                                          {
                                            v182 = v180 << (7 - v181);
                                            v183 = v2236;
                                            v184 = v2236[v179] | v182;
                                          }
                                          else
                                          {
                                            v184 = (_BYTE)v180 << 7;
                                            v183 = v2236;
                                          }
                                          v183[v179] = v184;
                                          v221 = (uint64_t)(v176 + 0x200000000) >> 32;
                                          v2234 = v221;
                                          v159 = v2233;
                                          if ((_DWORD)v2233)
                                            goto LABEL_270;
                                          if ((int)v221 >= 0)
                                            v222 = v221;
                                          else
                                            v222 = v221 + 7;
                                          v223 = (uint64_t)v222 >> 3;
                                          if (v2235 <= v223)
                                            goto LABEL_684;
                                          v224 = *v8;
                                          v225 = v221 - (v222 & 0xFFFFFFF8);
                                          if (v225)
                                          {
                                            v226 = v2236;
                                            v227 = v2236[v223] | (((*v8 >> 5) & 1) << (7 - v225));
                                          }
                                          else
                                          {
                                            v227 = ((*v8 & 0x20) != 0) << 7;
                                            v226 = v2236;
                                          }
                                          v226[v223] = v227;
                                          v234 = (uint64_t)(v176 + 0x300000000) >> 32;
                                          v2234 = v234;
                                          v159 = v2233;
                                          if ((_DWORD)v2233)
                                            goto LABEL_270;
                                          v235 = (int)v234 >= 0 ? v234 : (int)v234 + 7;
                                          v236 = (uint64_t)v235 >> 3;
                                          if (v2235 <= v236)
                                            goto LABEL_684;
                                          v237 = v234 - (v235 & 0xFFFFFFF8);
                                          if (v237)
                                          {
                                            v238 = v2236;
                                            v239 = v2236[v236] | (((v224 >> 4) & 1) << (7 - v237));
                                          }
                                          else
                                          {
                                            v239 = ((v224 & 0x10) != 0) << 7;
                                            v238 = v2236;
                                          }
                                          v238[v236] = v239;
                                          v474 = (uint64_t)(v176 + 0x400000000) >> 32;
                                          v2234 = v474;
                                          v159 = v2233;
                                          if ((_DWORD)v2233)
                                            goto LABEL_270;
                                          v475 = (int)v474 >= 0 ? v474 : (int)v474 + 7;
                                          v476 = (uint64_t)v475 >> 3;
                                          if (v2235 <= v476)
                                          {
LABEL_684:
                                            v159 = 1;
                                            LODWORD(v2233) = 1;
                                            if (*((_BYTE *)v8 + 16))
                                              goto LABEL_271;
                                            goto LABEL_577;
                                          }
                                          v477 = v474 - (v475 & 0xFFFFFFF8);
                                          if (v477)
                                          {
                                            v478 = v2236;
                                            v479 = v2236[v476] | (((v224 >> 3) & 1) << (7 - v477));
                                          }
                                          else
                                          {
                                            v479 = ((v224 & 8) != 0) << 7;
                                            v478 = v2236;
                                          }
                                          v478[v476] = v479;
                                          v757 = (uint64_t)(v176 + 0x500000000) >> 32;
                                          v2234 = v757;
                                          v159 = v2233;
                                          v8 = v2174;
                                          if ((_DWORD)v2233)
                                            goto LABEL_270;
                                          if ((int)v757 >= 0)
                                            v758 = v757;
                                          else
                                            v758 = v757 + 7;
                                          v759 = (uint64_t)v758 >> 3;
                                          if (v2235 <= v759)
                                            goto LABEL_1577;
                                          v760 = v757 - (v758 & 0xFFFFFFF8);
                                          if (v760)
                                          {
                                            v761 = v2236;
                                            v762 = v2236[v759] | (((v224 >> 2) & 1) << (7 - v760));
                                          }
                                          else
                                          {
                                            v762 = ((v224 & 4) != 0) << 7;
                                            v761 = v2236;
                                          }
                                          v761[v759] = v762;
                                          v856 = (uint64_t)(v176 + 0x600000000) >> 32;
                                          v2234 = v856;
                                          v159 = v2233;
                                          v8 = v2174;
                                          if ((_DWORD)v2233)
                                            goto LABEL_270;
                                          v857 = (int)v856 >= 0 ? v856 : (int)v856 + 7;
                                          v858 = (uint64_t)v857 >> 3;
                                          if (v2235 <= v858)
                                            goto LABEL_1577;
                                          v859 = v856 - (v857 & 0xFFFFFFF8);
                                          if (v859)
                                          {
                                            v860 = v2236;
                                            v861 = v2236[v858] | (((v224 >> 1) & 1) << (7 - v859));
                                          }
                                          else
                                          {
                                            v861 = ((v224 & 2) != 0) << 7;
                                            v860 = v2236;
                                          }
                                          v860[v858] = v861;
                                          v1047 = (uint64_t)(v176 + 0x700000000) >> 32;
                                          v2234 = v1047;
                                          v159 = v2233;
                                          v8 = v2174;
                                          if ((_DWORD)v2233)
                                            goto LABEL_270;
                                          v1048 = (int)v1047 >= 0 ? v1047 : (int)v1047 + 7;
                                          v1049 = (uint64_t)v1048 >> 3;
                                          if (v2235 <= v1049)
                                          {
LABEL_1577:
                                            v159 = 1;
                                            LODWORD(v2233) = 1;
                                            v8 = v2174;
                                            if (*((_BYTE *)v2174 + 16))
                                              goto LABEL_271;
                                            goto LABEL_577;
                                          }
                                          v1050 = v224 & 1;
                                          v1051 = v1047 - (v1048 & 0xFFFFFFF8);
                                          if (v1051)
                                          {
                                            v1052 = v1050 << (7 - v1051);
                                            v1053 = v2236;
                                            v1054 = v2236[v1049] | v1052;
                                          }
                                          else
                                          {
                                            v1054 = (_BYTE)v1050 << 7;
                                            v1053 = v2236;
                                          }
                                          v1053[v1049] = v1054;
                                          v1104 = (uint64_t)(v176 + 0x800000000) >> 32;
                                          v2234 = v1104;
                                          v159 = v2233;
                                          v8 = v2174;
                                          if ((_DWORD)v2233)
                                            goto LABEL_270;
                                          if ((int)v1104 >= 0)
                                            v1105 = v1104;
                                          else
                                            v1105 = v1104 + 7;
                                          v1106 = (uint64_t)v1105 >> 3;
                                          if (v2235 <= v1106)
                                            goto LABEL_1868;
                                          v1107 = v2174[2];
                                          v1108 = v1104 - (v1105 & 0xFFFFFFF8);
                                          if (v1108)
                                          {
                                            v1109 = v2236;
                                            v1110 = v2236[v1106] | (((v1107 >> 2) & 1) << (7 - v1108));
                                          }
                                          else
                                          {
                                            v1110 = ((v2174[2] & 4) != 0) << 7;
                                            v1109 = v2236;
                                          }
                                          v1109[v1106] = v1110;
                                          v1196 = (uint64_t)(v176 + 0x900000000) >> 32;
                                          v2234 = v1196;
                                          v159 = v2233;
                                          if (!(_DWORD)v2233)
                                          {
                                            if ((int)v1196 >= 0)
                                              v1197 = v1196;
                                            else
                                              v1197 = v1196 + 7;
                                            v1198 = (uint64_t)v1197 >> 3;
                                            if (v2235 <= v1198)
                                            {
LABEL_1868:
                                              v159 = 1;
                                              LODWORD(v2233) = 1;
                                              goto LABEL_1869;
                                            }
                                            v1199 = v1196 - (v1197 & 0xFFFFFFF8);
                                            if (v1199)
                                            {
                                              v1200 = v2236;
                                              v1201 = v2236[v1198] | (((v1107 >> 1) & 1) << (7 - v1199));
                                            }
                                            else
                                            {
                                              v1201 = ((v1107 & 2) != 0) << 7;
                                              v1200 = v2236;
                                            }
                                            v1200[v1198] = v1201;
                                            v1234 = (uint64_t)(v176 + 0xA00000000) >> 32;
                                            v2234 = v1234;
                                            v159 = v2233;
                                            if (!(_DWORD)v2233)
                                            {
                                              if ((int)v1234 >= 0)
                                                v1235 = v1234;
                                              else
                                                v1235 = v1234 + 7;
                                              v1236 = (uint64_t)v1235 >> 3;
                                              if (v2235 > v1236)
                                              {
                                                v1237 = v1107 & 1;
                                                v1238 = v1234 - (v1235 & 0xFFFFFFF8);
                                                if (v1238)
                                                {
                                                  v1239 = v1237 << (7 - v1238);
                                                  v1240 = v2236;
                                                  v1241 = v2236[v1236] | v1239;
                                                }
                                                else
                                                {
                                                  v1241 = (_BYTE)v1237 << 7;
                                                  v1240 = v2236;
                                                }
                                                v1240[v1236] = v1241;
                                                v1348 = (uint64_t)(v176 + 0xB00000000) >> 32;
                                                v2234 = v1348;
                                                v159 = v2233;
                                                v1349 = *((unsigned __int8 *)v2174 + 16);
                                                if ((_DWORD)v2233)
                                                {
                                                  v8 = v2174;
                                                  if (*((_BYTE *)v2174 + 16))
                                                    goto LABEL_271;
                                                }
                                                else
                                                {
                                                  if ((int)v1348 >= 0)
                                                    v1350 = v1348;
                                                  else
                                                    v1350 = v1348 + 7;
                                                  v1351 = (uint64_t)v1350 >> 3;
                                                  if (v2235 <= v1351)
                                                  {
                                                    v159 = 1;
                                                    LODWORD(v2233) = 1;
                                                  }
                                                  else
                                                  {
                                                    v1352 = v1348 - (v1350 & 0xFFFFFFF8);
                                                    if (v1352)
                                                      v1349 = v2236[v1351] | (v1349 << (7 - v1352));
                                                    else
                                                      LOBYTE(v1349) = (_BYTE)v1349 << 7;
                                                    v2236[v1351] = v1349;
                                                    v2234 = (uint64_t)(v176 + 0xC00000000) >> 32;
                                                    v159 = v2233;
                                                  }
                                                  v8 = v2174;
                                                  if (*((_BYTE *)v2174 + 16))
                                                    goto LABEL_271;
                                                }
                                                goto LABEL_577;
                                              }
                                              goto LABEL_1868;
                                            }
                                          }
LABEL_1869:
                                          v8 = v2174;
                                          if (*((_BYTE *)v2174 + 16))
                                            goto LABEL_271;
                                          goto LABEL_577;
                                        }
                                      }
                                      else
                                      {
LABEL_1428:
                                        v159 = v2233;
                                        if ((_DWORD)v2233)
                                          goto LABEL_238;
                                        v962 = v2234;
                                        if ((v2234 & 0x80000000) == 0)
                                          v963 = v2234;
                                        else
                                          v963 = v2234 + 7;
                                        v964 = (uint64_t)v963 >> 3;
                                        if (v2235 <= v964)
                                          goto LABEL_1453;
                                        v965 = v2234 - (v963 & 0xFFFFFFF8);
                                        if (v965)
                                          v2236[v964] |= 1 << (7 - v965);
                                        else
                                          v2236[v964] = 0x80;
                                        v2234 = v962 + 1;
                                      }
LABEL_237:
                                      v159 = v2233;
                                      goto LABEL_238;
                                    }
                                  }
                                  else
                                  {
                                    v887 = *((_QWORD *)v8 + 1690) + 224 * v886 + 88;
                                    if (!v2171[2083])
                                      goto LABEL_1309;
                                  }
                                  if (v81[3] >= 2 && v8[3417] == 1 || v81[2] >= 2 && v2188[1720 * *v81 + 189667])
                                    goto LABEL_1313;
                                  goto LABEL_1309;
                                }
LABEL_1286:
                                if (!(_DWORD)v2233)
                                {
                                  v883 = v11 + 7;
                                  if ((v11 & 0x80000000) == 0)
                                    v883 = v11;
                                  v884 = (uint64_t)v883 >> 3;
                                  if (v2235 <= v884)
                                  {
                                    LODWORD(v2233) = 1;
                                  }
                                  else
                                  {
                                    if ((v11 & 7) == 0)
                                      v2236[v884] = 0;
                                    LODWORD(v11) = v11 + 1;
                                    v2234 = (int)v11;
                                  }
                                }
                                goto LABEL_1300;
                              }
                            }
                            else
                            {
                              v876 = *((_QWORD *)v8 + 1690) + 224 * v875 + 88;
                              if (!v2171[2083])
                                goto LABEL_1277;
                            }
                            if (v81[3] >= 2 && v8[3417] == 1 || v81[2] >= 2 && v2188[1720 * *v81 + 189667])
                              goto LABEL_1286;
                            goto LABEL_1277;
                          }
LABEL_1254:
                          if (!(_DWORD)v2233)
                          {
                            v872 = v11 + 7;
                            if ((v11 & 0x80000000) == 0)
                              v872 = v11;
                            v873 = (uint64_t)v872 >> 3;
                            if (v2235 <= v873)
                            {
                              LODWORD(v2233) = 1;
                            }
                            else
                            {
                              if ((v11 & 7) == 0)
                                v2236[v873] = 0;
                              LODWORD(v11) = v11 + 1;
                              v2234 = (int)v11;
                            }
                          }
                          goto LABEL_1268;
                        }
                      }
                    }
                  }
                }
              }
            }
            LODWORD(v2233) = 1;
            goto LABEL_101;
          }
          v69 = v11 > 7;
          if (v11 >= 8)
            v70 = v11 - 8;
          else
            v70 = v11;
          if (v69 < v4)
          {
            v71 = v2[43249];
            if (v70)
              v72 = v3[v69] | (((v71 >> 1) & 1) << (7 - v70));
            else
              v72 = (((v2[43249] & 2) != 0) << 7);
            v3[v69] = v72;
            v2234 = v11 + 1;
            v85 = (v11 + 1) > 7;
            v86 = v11 - 7;
            if ((v11 + 1) < 8)
              v86 = v11 + 1;
            if (v85 < v4)
            {
              v87 = v71 & 1;
              if (v86)
                v88 = v3[v85] | (v87 << (7 - v86));
              else
                v88 = (_BYTE)v87 << 7;
              v3[v85] = v88;
              v11 += 2;
              v2234 = v11;
              if (*v2170)
                goto LABEL_85;
              goto LABEL_138;
            }
            v10 = 1;
            LODWORD(v2233) = 1;
            LODWORD(v11) = v11 + 1;
            if (!*v2170)
            {
LABEL_100:
              vp9_get_refresh_mask(v2);
              goto LABEL_101;
            }
LABEL_21:
            if (v8[3357])
            {
              write_bitdepth_colorspace_sampling(v2175, (uint64_t)&v2233);
              v2 = v2188;
              v10 = v2233;
            }
            v21 = vp9_get_refresh_mask(v2);
            if (v10)
              goto LABEL_193;
            v22 = v2234;
            if ((v2234 & 0x80000000) == 0)
              v23 = v2234;
            else
              v23 = v2234 + 7;
            v24 = (uint64_t)v23 >> 3;
            if (v2235 <= v24)
              goto LABEL_192;
            v25 = v2234 - (v23 & 0xFFFFFFF8);
            if (v25)
            {
              v26 = ((v21 >> 7) & 1) << (7 - v25);
              v27 = v2236;
              v28 = v2236[v24] | v26;
            }
            else
            {
              v28 = ((v21 & 0x80) != 0) << 7;
              v27 = v2236;
            }
            v27[v24] = v28;
            v59 = v22 << 32;
            v60 = (uint64_t)(v59 + 0x100000000) >> 32;
            v2234 = v60;
            if ((_DWORD)v2233)
              goto LABEL_193;
            v61 = (int)v60 >= 0 ? v60 : (int)v60 + 7;
            v62 = (uint64_t)v61 >> 3;
            if (v2235 <= v62)
              goto LABEL_192;
            v63 = v60 - (v61 & 0xFFFFFFF8);
            if (v63)
            {
              v64 = v2236;
              v65 = v2236[v62] | (((v21 >> 6) & 1) << (7 - v63));
            }
            else
            {
              v65 = ((v21 & 0x40) != 0) << 7;
              v64 = v2236;
            }
            v64[v62] = v65;
            v109 = (uint64_t)(v59 + 0x200000000) >> 32;
            v2234 = v109;
            if ((_DWORD)v2233)
              goto LABEL_193;
            v110 = (int)v109 >= 0 ? v109 : (int)v109 + 7;
            v111 = (uint64_t)v110 >> 3;
            if (v2235 <= v111)
              goto LABEL_192;
            v112 = v109 - (v110 & 0xFFFFFFF8);
            if (v112)
            {
              v113 = v2236;
              v114 = v2236[v111] | (((v21 >> 5) & 1) << (7 - v112));
            }
            else
            {
              v114 = ((v21 & 0x20) != 0) << 7;
              v113 = v2236;
            }
            v113[v111] = v114;
            v131 = (uint64_t)(v59 + 0x300000000) >> 32;
            v2234 = v131;
            if ((_DWORD)v2233)
              goto LABEL_193;
            v132 = (int)v131 >= 0 ? v131 : (int)v131 + 7;
            v133 = (uint64_t)v132 >> 3;
            if (v2235 <= v133)
            {
LABEL_192:
              LODWORD(v2233) = 1;
            }
            else
            {
              v134 = v131 - (v132 & 0xFFFFFFF8);
              if (v134)
              {
                v135 = v2236;
                v136 = v2236[v133] | (((v21 >> 4) & 1) << (7 - v134));
              }
              else
              {
                v136 = ((v21 & 0x10) != 0) << 7;
                v135 = v2236;
              }
              v135[v133] = v136;
              v149 = (uint64_t)(v59 + 0x400000000) >> 32;
              v2234 = v149;
              if ((_DWORD)v2233)
                goto LABEL_193;
              if ((int)v149 >= 0)
                v150 = v149;
              else
                v150 = v149 + 7;
              v151 = (uint64_t)v150 >> 3;
              if (v2235 <= v151)
                goto LABEL_1609;
              v152 = v149 - (v150 & 0xFFFFFFF8);
              if (v152)
              {
                v153 = v2236;
                v154 = v2236[v151] | (((v21 >> 3) & 1) << (7 - v152));
              }
              else
              {
                v154 = ((v21 & 8) != 0) << 7;
                v153 = v2236;
              }
              v153[v151] = v154;
              v774 = (uint64_t)(v59 + 0x500000000) >> 32;
              v2234 = v774;
              v8 = v2174;
              if ((_DWORD)v2233)
                goto LABEL_193;
              v775 = (int)v774 >= 0 ? v774 : (int)v774 + 7;
              v776 = (uint64_t)v775 >> 3;
              if (v2235 <= v776)
                goto LABEL_1609;
              v777 = v774 - (v775 & 0xFFFFFFF8);
              if (v777)
              {
                v778 = v2236;
                v779 = v2236[v776] | (((v21 >> 2) & 1) << (7 - v777));
              }
              else
              {
                v779 = ((v21 & 4) != 0) << 7;
                v778 = v2236;
              }
              v778[v776] = v779;
              v988 = (uint64_t)(v59 + 0x600000000) >> 32;
              v2234 = v988;
              v8 = v2174;
              if ((_DWORD)v2233)
                goto LABEL_193;
              v989 = (int)v988 >= 0 ? v988 : (int)v988 + 7;
              v990 = (uint64_t)v989 >> 3;
              if (v2235 <= v990)
                goto LABEL_1609;
              v991 = v988 - (v989 & 0xFFFFFFF8);
              if (v991)
              {
                v992 = v2236;
                v993 = v2236[v990] | (((v21 >> 1) & 1) << (7 - v991));
              }
              else
              {
                v993 = ((v21 & 2) != 0) << 7;
                v992 = v2236;
              }
              v992[v990] = v993;
              v1069 = (uint64_t)(v59 + 0x700000000) >> 32;
              v2234 = v1069;
              v8 = v2174;
              if ((_DWORD)v2233)
                goto LABEL_193;
              v1070 = (int)v1069 >= 0 ? v1069 : (int)v1069 + 7;
              v1071 = (uint64_t)v1070 >> 3;
              if (v2235 <= v1071)
              {
LABEL_1609:
                LODWORD(v2233) = 1;
                v8 = v2174;
              }
              else
              {
                v1072 = v21 & 1;
                v1073 = v1069 - (v1070 & 0xFFFFFFF8);
                if (v1073)
                {
                  v1074 = v1072 << (7 - v1073);
                  v1075 = v2236;
                  v1076 = v2236[v1071] | v1074;
                }
                else
                {
                  v1076 = (_BYTE)v1072 << 7;
                  v1075 = v2236;
                }
                v1075[v1071] = v1076;
                v2234 = (uint64_t)(v59 + 0x800000000) >> 32;
                v8 = v2174;
              }
            }
LABEL_193:
            v137 = v2175;
LABEL_236:
            write_frame_size(v137, (int *)&v2233);
            goto LABEL_237;
          }
LABEL_99:
          v10 = 1;
          LODWORD(v2233) = 1;
          if (!*v2170)
            goto LABEL_100;
          goto LABEL_21;
        }
      }
      if (v49 >> 35 >= v4)
        goto LABEL_234;
      if ((v11 & 7) == 0)
        v3[v49 >> 35] = 0;
      v55 = (unint64_t)(v45 + 0x400000000) >> 32;
      v2234 = v55;
      v56 = (v55 & 0x80000000) == 0 ? (unint64_t)(v45 + 0x400000000) >> 32 : (int)v55 + 7;
      v57 = (uint64_t)v56 >> 3;
      if (v57 >= v4)
        goto LABEL_234;
      v58 = v55 - (v56 & 0xFFFFFFF8);
      if (v58)
        v3[v57] |= 1 << (7 - v58);
      else
        v3[v57] = 0x80;
      v89 = (unint64_t)(v45 + 0x500000000) >> 32;
      v2234 = v89;
      v90 = (unint64_t)(v45 + 0x500000000) >> 35;
      if (v90 >= v4)
        goto LABEL_234;
      if ((v89 & 7) == 0)
        v3[v90] = 0;
      v91 = (unint64_t)(v45 + 0x600000000) >> 32;
      v2234 = v91;
      v92 = (unint64_t)(v45 + 0x600000000) >> 35;
      if (v92 >= v4)
        goto LABEL_234;
      if ((v91 & 7) == 0)
        v3[v92] = 0;
      v93 = (unint64_t)(v45 + 0x700000000) >> 32;
      v2234 = v93;
      v94 = (v93 & 0x80000000) == 0 ? (unint64_t)(v45 + 0x700000000) >> 32 : (int)v93 + 7;
      v95 = (uint64_t)v94 >> 3;
      if (v95 >= v4)
        goto LABEL_234;
      v96 = v93 - (v94 & 0xFFFFFFF8);
      if (v96)
        v3[v95] |= 1 << (7 - v96);
      else
        v3[v95] = 0x80;
      v119 = (unint64_t)(v45 + 0x800000000) >> 32;
      v2234 = v119;
      v120 = (unint64_t)(v45 + 0x800000000) >> 35;
      if (v120 >= v4)
        goto LABEL_234;
      if ((v119 & 7) == 0)
        v3[v120] = 0;
      v121 = (unint64_t)(v45 + 0x900000000) >> 32;
      v2234 = v121;
      v122 = (unint64_t)(v45 + 0x900000000) >> 35;
      if (v122 >= v4)
        goto LABEL_234;
      if ((v121 & 7) == 0)
        v3[v122] = 0;
      v123 = (unint64_t)(v45 + 0xA00000000) >> 32;
      v2234 = v123;
      v124 = (v123 & 0x80000000) == 0 ? (unint64_t)(v45 + 0xA00000000) >> 32 : (int)v123 + 7;
      v125 = (uint64_t)v124 >> 3;
      if (v125 >= v4
        || ((v126 = v123 - (v124 & 0xFFFFFFF8)) == 0 ? (v3[v125] = 0x80) : (v3[v125] |= 1 << (7 - v126)),
            (v155 = (unint64_t)(v45 + 0xB00000000) >> 32, v2234 = v155, (v155 & 0x80000000) == 0)
          ? (v156 = (unint64_t)(v45 + 0xB00000000) >> 32)
          : (v156 = v155 + 7),
            v157 = (uint64_t)v156 >> 3,
            v157 >= v4))
      {
LABEL_234:
        LODWORD(v2233) = 1;
      }
      else
      {
        v158 = v155 - (v156 & 0xFFFFFFF8);
        if (v158)
          v3[v157] |= 1 << (7 - v158);
        else
          v3[v157] = 0x80;
        v690 = (unint64_t)(v45 + 0xC00000000) >> 32;
        v2234 = v690;
        v691 = (unint64_t)(v45 + 0xC00000000) >> 35;
        if (v691 >= v4)
          goto LABEL_1947;
        if ((v690 & 7) == 0)
          v3[v691] = 0;
        v692 = (unint64_t)(v45 + 0xD00000000) >> 32;
        v2234 = v692;
        v693 = (unint64_t)(v45 + 0xD00000000) >> 35;
        if (v693 >= v4)
          goto LABEL_1947;
        if ((v692 & 7) == 0)
          v3[v693] = 0;
        v694 = (unint64_t)(v45 + 0xE00000000) >> 32;
        v2234 = v694;
        v695 = (unint64_t)(v45 + 0xE00000000) >> 35;
        if (v695 >= v4)
          goto LABEL_1947;
        if ((v694 & 7) == 0)
          v3[v695] = 0;
        v696 = (unint64_t)(v45 + 0xF00000000) >> 32;
        v2234 = v696;
        v697 = (unint64_t)(v45 + 0xF00000000) >> 35;
        if (v697 >= v4)
          goto LABEL_1947;
        if ((v696 & 7) == 0)
          v3[v697] = 0;
        v698 = (v45 | 0x1000000000uLL) >> 32;
        v2234 = v698;
        v699 = (v45 | 0x1000000000uLL) >> 35;
        if (v699 >= v4)
          goto LABEL_1947;
        if ((v698 & 7) == 0)
          v3[v699] = 0;
        v700 = (unint64_t)(v45 + 0x1100000000) >> 32;
        v2234 = v700;
        v701 = (v700 & 0x80000000) == 0 ? (unint64_t)(v45 + 0x1100000000) >> 32 : (int)v700 + 7;
        v702 = (uint64_t)v701 >> 3;
        if (v702 >= v4)
          goto LABEL_1947;
        v703 = v700 - (v701 & 0xFFFFFFF8);
        if (v703)
          v3[v702] |= 1 << (7 - v703);
        else
          v3[v702] = 0x80;
        v1055 = (unint64_t)(v45 + 0x1200000000) >> 32;
        v2234 = v1055;
        v1056 = (v1055 & 0x80000000) == 0 ? (unint64_t)(v45 + 0x1200000000) >> 32 : (int)v1055 + 7;
        v1057 = (uint64_t)v1056 >> 3;
        if (v1057 >= v4)
          goto LABEL_1947;
        v1058 = v1055 - (v1056 & 0xFFFFFFF8);
        if (v1058)
          v3[v1057] |= 1 << (7 - v1058);
        else
          v3[v1057] = 0x80;
        v1077 = (unint64_t)(v45 + 0x1300000000) >> 32;
        v2234 = v1077;
        v1078 = (unint64_t)(v45 + 0x1300000000) >> 35;
        if (v1078 >= v4)
          goto LABEL_1947;
        if ((v1077 & 7) == 0)
          v3[v1078] = 0;
        v1079 = (unint64_t)(v45 + 0x1400000000) >> 32;
        v2234 = v1079;
        v1080 = (v1079 & 0x80000000) == 0 ? (unint64_t)(v45 + 0x1400000000) >> 32 : (int)v1079 + 7;
        v1081 = (uint64_t)v1080 >> 3;
        if (v1081 >= v4)
          goto LABEL_1947;
        v1082 = v1079 - (v1080 & 0xFFFFFFF8);
        if (v1082)
          v3[v1081] |= 1 << (7 - v1082);
        else
          v3[v1081] = 0x80;
        v1123 = (unint64_t)(v45 + 0x1500000000) >> 32;
        v2234 = v1123;
        v1124 = (unint64_t)(v45 + 0x1500000000) >> 35;
        if (v1124 >= v4)
          goto LABEL_1947;
        if ((v1123 & 7) == 0)
          v3[v1124] = 0;
        v1125 = (unint64_t)(v45 + 0x1600000000) >> 32;
        v2234 = v1125;
        v1126 = (unint64_t)(v45 + 0x1600000000) >> 35;
        if (v1126 >= v4)
          goto LABEL_1947;
        if ((v1125 & 7) == 0)
          v3[v1126] = 0;
        v1127 = (unint64_t)(v45 + 0x1700000000) >> 32;
        v2234 = v1127;
        v1128 = (unint64_t)(v45 + 0x1700000000) >> 35;
        if (v1128 >= v4)
          goto LABEL_1947;
        if ((v1127 & 7) == 0)
          v3[v1128] = 0;
        v1129 = (unint64_t)(v45 + 0x1800000000) >> 32;
        v2234 = v1129;
        v1130 = (unint64_t)(v45 + 0x1800000000) >> 35;
        if (v1130 >= v4)
          goto LABEL_1947;
        if ((v1129 & 7) == 0)
          v3[v1130] = 0;
        v1131 = (unint64_t)(v45 + 0x1900000000) >> 32;
        v2234 = v1131;
        v1132 = (v1131 & 0x80000000) == 0 ? (unint64_t)(v45 + 0x1900000000) >> 32 : (int)v1131 + 7;
        v1133 = (uint64_t)v1132 >> 3;
        if (v1133 >= v4
          || ((v1134 = v1131 - (v1132 & 0xFFFFFFF8)) == 0 ? (v3[v1133] = 0x80) : (v3[v1133] |= 1 << (7 - v1134)),
              v1291 = (unint64_t)(v45 + 0x1A00000000) >> 32,
              v2234 = v1291,
              v1292 = (unint64_t)(v45 + 0x1A00000000) >> 35,
              v1292 >= v4))
        {
LABEL_1947:
          LODWORD(v2233) = 1;
          v8 = v2 + 44106;
        }
        else
        {
          if ((v1291 & 7) == 0)
            v3[v1292] = 0;
          v2234 = (unint64_t)(v45 + 0x1B00000000) >> 32;
          v8 = v2 + 44106;
        }
      }
LABEL_235:
      write_bitdepth_colorspace_sampling(v2175, (uint64_t)&v2233);
      v137 = v2175;
      goto LABEL_236;
    }
    v10 = 1;
    LODWORD(v2233) = 1;
    if (!*v40)
      goto LABEL_235;
LABEL_20:
    if (!*v2170)
      goto LABEL_100;
    goto LABEL_21;
  }
  v32 = v2[48630];
  v33 = v30 | (((v32 >> 2) & 1) << (5 - v13));
  if ((_DWORD)v13 == -2)
    v34 = v32 >> 2 << 7;
  else
    v34 = v33;
  v35 = v34 | (((v32 >> 1) & 1) << (4 - v13));
  if ((_DWORD)v13 == -3)
    LOBYTE(v35) = (v32 >> 1) << 7;
  *v14 = v35;
  v36 = v13 + 4;
  v2234 = v13 + 4;
  v37 = (v13 + 4) > 7;
  if ((v13 + 4) >= 8)
    v36 = v13 - 4;
  if (v37 >= v4)
    goto LABEL_2436;
  v38 = v32 & 1;
  if (v36)
    v39 = v3[v37] | (v38 << (7 - v36));
  else
    v39 = (_BYTE)v38 << 7;
  v3[v37] = v39;
  v19 = 0;
  v2234 = v13 + 5;
LABEL_2457:
  v1607 = *v18;
  v1608 = v2234;
  if (!v1607)
  {
    v2163 = v2235;
    v2160 = v2234;
    v2161 = v2236;
    v2159 = v19;
    if (v19)
      goto LABEL_2473;
    v1610 = 0;
    v1611 = 17;
    v1608 = v2234;
    do
    {
      if (!v1610)
      {
        v1612 = v1608 + 7;
        if ((v1608 & 0x80000000) == 0)
          v1612 = v1608;
        v1613 = (uint64_t)v1612 >> 3;
        if (v2235 <= v1613)
        {
          LODWORD(v2233) = 1;
        }
        else
        {
          if ((v1608 & 7) == 0)
            v2236[v1613] = 0;
          v1614 = v1608 + 1;
          v1608 = (int)v1608 + 1;
          v2234 = v1614;
        }
      }
      v1610 = v2233;
      --v1611;
    }
    while (v1611 > 1);
    if ((_DWORD)v2233)
LABEL_2473:
      vpx_internal_error((uint64_t)v2175, 1, "vp9_pack_bitstream: output buffer full");
    v2169 = v2188 + 210559;
    v1615 = v1608 >> 3;
    if ((v1608 & 7) != 0)
      ++v1615;
    v1616 = &v2165[v1615];
    v1617 = v6 - v1615;
    v2156 = (unsigned __int8 *)*((_QWORD *)v8 + 22);
    v2157 = &v2165[v1615];
    v2162 = (uint64_t)*v9;
    v1618 = 0x7FFFFFFF;
    v2158 = v1617;
    if (v1617 < 0x7FFFFFFF)
      v1618 = v1617;
    v2239 = 0;
    v2241 = v1616;
    v2240 = v1618;
    v2238 = 4294967272;
    v2237 = 0x8000000000;
    if (v2188[18685])
    {
      v1619 = 0;
      *((_DWORD *)v2170 + 9) = 0;
    }
    else
    {
      v1619 = *((_DWORD *)v2170 + 9);
      if (v1619 >= 3)
        v1620 = 3;
      else
        v1620 = *((_DWORD *)v2170 + 9);
      v1621 = ((v1620 & 1) << 7) | ((v1620 > 1) << 8);
      LODWORD(v2238) = -22;
      LODWORD(v2237) = v1621;
      if (v1619 >= 3)
      {
        LODWORD(v2238) = -21;
        LODWORD(v2237) = ((v1619 == 4) << 7) | (2 * v1621);
        if (v1619 == 4)
        {
          v2259[0] = *(_QWORD *)(v2162 + 12744);
          vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1965, (unsigned int *)v2259);
          v2259[0] = *(_QWORD *)(v2162 + 12752);
          vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1966), (unsigned int *)v2259);
          v1622 = *(_DWORD *)(v2162 + 12724);
          v1623 = *(_DWORD *)(v2162 + 12728);
          LODWORD(v2243) = *(_DWORD *)(v2162 + 12720);
          HIDWORD(v2243) = v1623 + v1622;
          v2244 = v1622;
          v2245 = v1623;
          vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1961), (unsigned int *)&v2243);
          vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1962), &v2244);
          v1624 = *(_DWORD *)(v2162 + 12736);
          v1625 = *(_DWORD *)(v2162 + 12740);
          LODWORD(v2243) = *(_DWORD *)(v2162 + 12732);
          HIDWORD(v2243) = v1625 + v1624;
          v2244 = v1624;
          v2245 = v1625;
          vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1963), (unsigned int *)&v2243);
          vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1964), &v2244);
          v1626 = *(_DWORD *)(v2162 + 12692);
          v1627 = *(_DWORD *)(v2162 + 12696);
          v1628 = *(_DWORD *)(v2162 + 12700);
          LODWORD(v2249) = *(_DWORD *)(v2162 + 12688);
          DWORD1(v2249) = v1628 + v1627 + v1626;
          DWORD2(v2249) = v1626;
          HIDWORD(v2249) = v1628 + v1627;
          *(_QWORD *)&v2250 = __PAIR64__(v1628, v1627);
          vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1955), (unsigned int *)&v2249);
          vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1956), (unsigned int *)&v2249 + 2);
          vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1957), (unsigned int *)&v2250);
          v1629 = *(_DWORD *)(v2162 + 12708);
          v1630 = *(_DWORD *)(v2162 + 12712);
          v1631 = *(_DWORD *)(v2162 + 12716);
          LODWORD(v2249) = *(_DWORD *)(v2162 + 12704);
          DWORD1(v2249) = v1631 + v1630 + v1629;
          DWORD2(v2249) = v1629;
          HIDWORD(v2249) = v1631 + v1630;
          *(_QWORD *)&v2250 = __PAIR64__(v1631, v1630);
          vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1958), (unsigned int *)&v2249);
          v9 = v2173;
          vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1959), (unsigned int *)&v2249 + 2);
          vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1960), (unsigned int *)&v2250);
          v1619 = *((_DWORD *)v2170 + 9);
        }
      }
    }
    v1632 = 0;
    v1633 = tx_mode_to_biggest_tx_size[v1619];
    v2166 = v1633;
LABEL_2491:
    v1636 = v1632;
    if ((*v9)[1595].i32[v1632] < 0x15u || v1632 >= 2u && v2171[123] == 2)
    {
      v1637 = v2238;
      v1634 = v2237;
      v1638 = (((HIDWORD(v2237) << 7) - 128) >> 8) + 1;
      v1639 = vpx_norm[v1638];
      v1640 = v2238 + v1639;
      if ((int)v2238 + v1639 >= 0)
      {
        if (!HIDWORD(v2238))
        {
          LODWORD(v1641) = v2239;
          if ((((_DWORD)v2237 << ~(_BYTE)v2238) & 0x80000000) == 0)
            goto LABEL_2692;
          v1642 = v2239 - 1;
          if ((int)v2239 >= 1)
          {
            do
            {
              v1641 = (v1641 - 1);
              if (v2241[v1641] != 255)
                goto LABEL_2690;
              v2241[v1641] = 0;
            }
            while ((int)v1641 > 0);
LABEL_2498:
            v1642 = -1;
          }
          goto LABEL_2691;
        }
LABEL_2488:
        v1634 = (v1634 << -v1637) & 0xFFFFFF;
        v1635 = v1640 - 8;
LABEL_2489:
        LODWORD(v2238) = v1635;
        LODWORD(v2237) = v1634 << v1640;
        HIDWORD(v2237) = (_DWORD)v1638 << v1639;
        goto LABEL_2490;
      }
LABEL_2611:
      v1635 = v1640;
      LOBYTE(v1640) = v1639;
      goto LABEL_2489;
    }
    v1643 = 0;
    v2167 = 432 * v1632;
    v2168 = v1632;
    v1644 = 1728 * v1632;
    v1645 = 144 * v1632;
    v2183 = (uint64_t)&v2188[v1644 + 33936];
    v2181 = (uint64_t)&v2188[v1645 + 46663];
    v2179 = (uint64_t)&v2188[v1644 + 34368];
    v2178 = (uint64_t)&v2188[v1645 + 46699];
    v1646 = 1;
LABEL_2503:
    v1647 = 0;
    v2219 = v1646;
    v2210 = 6336 * v1643;
    v1648 = &v2249 + 396 * v1643;
    v2207 = 3456 * v1643;
    v1649 = v2183 + 3456 * v1643;
    v1650 = (unsigned int *)(v2181 + 288 * v1643);
    v2190 = 216 * v1643;
    v2198 = 288 * v1643;
    v1651 = (char *)&v2243 + 216 * v1643 + 1;
LABEL_2505:
    if (v1647)
      v1652 = 6;
    else
      v1652 = 3;
    v1653 = v1651;
    v1654 = v1650;
    v1655 = v1649;
    v2228 = v1648;
    while (1)
    {
      convert_distribution(0, (uint64_t)&vp9_coef_tree, (uint64_t)v1648, v1655);
      v1660 = *v1654++;
      v1659 = v1660;
      v1661 = *(unsigned int *)v1648;
      *((_DWORD *)v1648 + 1) = v1660 - v1661;
      if (v1660)
      {
        *(v1653 - 1) = ((((v1661 << 8) + (v1659 >> 1)) / v1659) == 0) | ((255
                                                                                      - (((v1661 << 8) + (v1659 >> 1)) / v1659)) >> 23) | (((v1661 << 8) + (v1659 >> 1)) / v1659);
        v1662 = *((unsigned int *)v1648 + 2);
        v1663 = (*((_DWORD *)v1648 + 3) + v1662);
        if ((_DWORD)v1663)
          goto LABEL_2515;
      }
      else
      {
        *(v1653 - 1) = 0x80;
        v1662 = *((unsigned int *)v1648 + 2);
        v1663 = (*((_DWORD *)v1648 + 3) + v1662);
        if ((_DWORD)v1663)
        {
LABEL_2515:
          v1664 = ((unint64_t)(v1663 >> 1) + (v1662 << 8)) / v1663;
          *v1653 = ((_DWORD)v1664 == 0) | ((255 - v1664) >> 23) | v1664;
          v1656 = *((unsigned int *)v1648 + 4);
          v1657 = (*((_DWORD *)v1648 + 5) + v1656);
          if ((_DWORD)v1657)
            goto LABEL_2510;
          goto LABEL_2516;
        }
      }
      *v1653 = 0x80;
      v1656 = *((unsigned int *)v1648 + 4);
      v1657 = (*((_DWORD *)v1648 + 5) + v1656);
      if ((_DWORD)v1657)
      {
LABEL_2510:
        v1658 = ((unint64_t)(v1657 >> 1) + (v1656 << 8)) / v1657;
        v1653[1] = ((_DWORD)v1658 == 0) | ((255 - v1658) >> 23) | v1658;
        v1648 = (__int128 *)((char *)v1648 + 88);
        v1655 += 48;
        v1653 += 3;
        if (!--v1652)
          goto LABEL_2504;
      }
      else
      {
LABEL_2516:
        v1653[1] = 0x80;
        v1648 = (__int128 *)((char *)v1648 + 88);
        v1655 += 48;
        v1653 += 3;
        if (!--v1652)
        {
LABEL_2504:
          ++v1647;
          v1648 = v2228 + 33;
          v1649 += 288;
          v1650 += 6;
          v1651 += 18;
          if (v1647 != 6)
            goto LABEL_2505;
          v1665 = 0;
          v1666 = (unsigned int *)&v2256[v2210];
          v1667 = v2179 + v2207;
          v1668 = (unsigned int *)(v2178 + v2198);
          v1669 = &v2246[v2190];
          while (2)
          {
            if (v1665)
              v1670 = 6;
            else
              v1670 = 3;
            v1671 = v1669;
            v1672 = v1668;
            v1673 = v1667;
            v2229 = v1666;
            while (2)
            {
              while (1)
              {
                convert_distribution(0, (uint64_t)&vp9_coef_tree, (uint64_t)v1666, v1673);
                v1678 = *v1672++;
                v1677 = v1678;
                v1679 = *v1666;
                v1666[1] = v1678 - v1679;
                if (!v1678)
                  break;
                *(v1671 - 2) = ((((v1679 << 8) + (v1677 >> 1)) / v1677) == 0) | ((255
                                                                                              - (((v1679 << 8) + (v1677 >> 1)) / v1677)) >> 23) | (((v1679 << 8) + (v1677 >> 1)) / v1677);
                v1680 = v1666[2];
                v1681 = v1666[3] + v1680;
                if ((_DWORD)v1681)
                  goto LABEL_2530;
LABEL_2524:
                *(v1671 - 1) = 0x80;
                v1674 = v1666[4];
                v1675 = v1666[5] + v1674;
                if (!(_DWORD)v1675)
                  goto LABEL_2531;
LABEL_2525:
                v1676 = ((unint64_t)(v1675 >> 1) + (v1674 << 8)) / v1675;
                *v1671 = ((_DWORD)v1676 == 0) | ((255 - v1676) >> 23) | v1676;
                v1671 += 3;
                v1666 += 22;
                v1673 += 48;
                if (!--v1670)
                  goto LABEL_2519;
              }
              *(v1671 - 2) = 0x80;
              v1680 = v1666[2];
              v1681 = v1666[3] + v1680;
              if (!(_DWORD)v1681)
                goto LABEL_2524;
LABEL_2530:
              v1682 = ((unint64_t)(v1681 >> 1) + (v1680 << 8)) / v1681;
              *(v1671 - 1) = ((_DWORD)v1682 == 0) | ((255 - v1682) >> 23) | v1682;
              v1674 = v1666[4];
              v1675 = v1666[5] + v1674;
              if ((_DWORD)v1675)
                goto LABEL_2525;
LABEL_2531:
              *v1671 = 0x80;
              v1671 += 3;
              v1666 += 22;
              v1673 += 48;
              if (--v1670)
                continue;
              break;
            }
LABEL_2519:
            ++v1665;
            v1666 = v2229 + 132;
            v1667 += 288;
            v1668 += 6;
            v1669 += 18;
            if (v1665 != 6)
              continue;
            break;
          }
          v1646 = 0;
          v1643 = 1;
          if ((v2219 & 1) != 0)
            goto LABEL_2503;
          v1683 = *((_QWORD *)v2174 + 22);
          v2208 = v1683 + 432 * v2168 + 174;
          v2230 = v2171[110];
          if (v2171[188])
          {
            v1684 = 0;
            v1685 = 0;
            v1686 = 0;
            v1687 = 1;
LABEL_2536:
            v1688 = 0;
            v2184 = v1687;
            v1689 = 1;
LABEL_2538:
            v1690 = 0;
            v2191 = v1689;
LABEL_2540:
            v1691 = 0;
            v1692 = 6;
            if (!v1690)
              v1692 = 3;
            v2199 = v1692;
            while (2)
            {
              v1693 = 0;
              v1694 = 3 * v1691;
              v1695 = v2208 + 216 * v1684 + 108 * v1688 + 18 * v1690 + 3 * v1691;
              v2211 = (_DWORD *)&v2249 + 1584 * v1684 + 792 * v1688 + 132 * v1690 + 22 * v1691;
              v2220 = v1691;
LABEL_2547:
              LOBYTE(v2259[0]) = *((_BYTE *)&v2243 + 216 * v1684 + 108 * v1688 + 18 * v1690 + v1694 + v1693);
              if (v1693 == 2)
              {
                if (vp9_prob_diff_update_savings_search_model(v2211, *(unsigned __int8 *)(v1695 + 2), v2259, 0xFCu, v2230) < 1)
                {
LABEL_2552:
                  if (!v1686)
                  {
                    ++v1685;
                    goto LABEL_2546;
                  }
                  LOBYTE(v1696) = v2238;
                  v1697 = ((252 * HIDWORD(v2237) - 252) >> 8) + 1;
                  v1698 = 1;
                  v1699 = v2237;
                  v1700 = vpx_norm[v1697];
                  v1701 = v2238 + v1700;
                  if ((int)v2238 + v1700 >= 0)
                  {
LABEL_2554:
                    if (!HIDWORD(v2238))
                    {
                      LODWORD(v1702) = v2239;
                      if (((v1699 << ~(_BYTE)v1696) & 0x80000000) != 0)
                      {
                        v1712 = v2239 - 1;
                        if ((int)v2239 >= 1)
                        {
                          while (1)
                          {
                            v1702 = (v1702 - 1);
                            if (v2241[v1702] != 255)
                              break;
                            v2241[v1702] = 0;
                            if ((int)v1702 <= 0)
                            {
                              v1712 = -1;
                              goto LABEL_2573;
                            }
                          }
                          v1712 = v1702;
                        }
LABEL_2573:
                        ++v2241[v1712];
                        LODWORD(v1702) = v2239;
                        if (v2239 >= v2240)
                          goto LABEL_2574;
LABEL_2557:
                        v2239 = v1702 + 1;
                        v2241[v1702] = v1699 >> (v1696 + 24);
                      }
                      else
                      {
                        if (v2239 < v2240)
                          goto LABEL_2557;
LABEL_2574:
                        HIDWORD(v2238) = 1;
                      }
                    }
                    LODWORD(v2238) = v1701 - 8;
                    LODWORD(v2237) = ((v1699 << -(char)v1696) & 0xFFFFFF) << v1701;
                    HIDWORD(v2237) = v1697 << v1700;
                    if ((v1698 & 1) != 0)
                      goto LABEL_2546;
LABEL_2576:
                    vp9_write_prob_diff_update((uint64_t)&v2237, LOBYTE(v2259[0]), *(unsigned __int8 *)(v1695 + v1693));
                    *(_BYTE *)(v1695 + v1693) = v2259[0];
LABEL_2546:
                    if (++v1693 == 3)
                    {
                      v1691 = v2220 + 1;
                      if (v2220 + 1 != v2199)
                        continue;
                      if (++v1690 != 6)
                        goto LABEL_2540;
                      v1689 = 0;
                      v1688 = 1;
                      if ((v2191 & 1) != 0)
                        goto LABEL_2538;
                      v1687 = 0;
                      v1684 = 1;
                      if ((v2184 & 1) == 0)
                      {
                        v9 = v2173;
                        v8 = v2174;
                        v1633 = v2166;
                        v1636 = v2168;
                        if (v1686)
                          goto LABEL_2490;
                        v1637 = v2238;
                        v1634 = v2237;
                        v1638 = (((HIDWORD(v2237) << 7) - 128) >> 8) + 1;
                        v1639 = vpx_norm[v1638];
                        v1640 = v2238 + v1639;
                        if ((int)v2238 + v1639 >= 0)
                        {
                          if (!HIDWORD(v2238))
                          {
                            LODWORD(v1641) = v2239;
                            if ((((_DWORD)v2237 << ~(_BYTE)v2238) & 0x80000000) == 0)
                              goto LABEL_2692;
                            v1642 = v2239 - 1;
                            if ((int)v2239 >= 1)
                            {
                              while (1)
                              {
                                v1641 = (v1641 - 1);
                                if (v2241[v1641] != 255)
                                  break;
                                v2241[v1641] = 0;
                                if ((int)v1641 <= 0)
                                  goto LABEL_2498;
                              }
LABEL_2690:
                              v1642 = v1641;
                            }
LABEL_2691:
                            ++v2241[v1642];
                            LODWORD(v1641) = v2239;
LABEL_2692:
                            if (v1641 >= v2240)
                            {
                              HIDWORD(v2238) = 1;
                            }
                            else
                            {
                              v2239 = v1641 + 1;
                              v2241[v1641] = v1634 >> (v1637 + 24);
                            }
                            goto LABEL_2488;
                          }
                          goto LABEL_2488;
                        }
                        goto LABEL_2611;
                      }
                      goto LABEL_2536;
                    }
                    goto LABEL_2547;
                  }
LABEL_2560:
                  LODWORD(v2238) = v1701;
                  LODWORD(v2237) = v1699 << v1700;
                  HIDWORD(v2237) = v1697 << v1700;
                  if ((v1698 & 1) != 0)
                    goto LABEL_2546;
                  goto LABEL_2576;
                }
              }
              else if (vp9_prob_diff_update_savings_search((unsigned int *)&v2249 + 1584 * v1684 + 792 * v1688 + 132 * v1690 + 22 * v2220 + 2 * v1693, *(unsigned __int8 *)(v1695 + v1693), v2259, 0xFCu) < 1)
              {
                goto LABEL_2552;
              }
              break;
            }
            if (LOBYTE(v2259[0]) == *(unsigned __int8 *)(v1695 + v1693))
              goto LABEL_2552;
            v1696 = v2238;
            v1703 = HIDWORD(v2237);
            v1704 = v2237;
            if (v1686)
            {
LABEL_2559:
              v1698 = 0;
              ++v1686;
              v1705 = ((252 * v1703 - 252) >> 8) + 1;
              v1697 = v1703 - v1705;
              v1699 = v1705 + v1704;
              v1700 = vpx_norm[v1703 - v1705];
              v1701 = v1696 + v1700;
              if (v1696 + v1700 >= 0)
                goto LABEL_2554;
              goto LABEL_2560;
            }
            v1706 = (((HIDWORD(v2237) << 7) - 128) >> 8) + 1;
            v1707 = HIDWORD(v2237) - v1706;
            v1708 = v1706 + v2237;
            v1709 = vpx_norm[HIDWORD(v2237) - v1706];
            v1710 = v2238 + v1709;
            if ((int)v2238 + v1709 < 0)
            {
              v1696 = v2238 + v1709;
              LOBYTE(v1710) = vpx_norm[v1707];
            }
            else
            {
              if (!HIDWORD(v2238))
              {
                if (((v1708 << ~(_BYTE)v2238) & 0x80000000) != 0)
                {
                  LODWORD(v1713) = v2239;
                  v1714 = v2239 - 1;
                  if ((int)v2239 >= 1)
                  {
                    while (1)
                    {
                      v1713 = (v1713 - 1);
                      if (v2241[v1713] != 255)
                        break;
                      v2241[v1713] = 0;
                      if ((int)v1713 <= 0)
                      {
                        v1714 = -1;
                        goto LABEL_2582;
                      }
                    }
                    v1714 = v1713;
                  }
LABEL_2582:
                  ++v2241[v1714];
                  v1711 = v2239;
                  if (v2239 >= v2240)
                    goto LABEL_2583;
LABEL_2566:
                  v2239 = v1711 + 1;
                  v2241[v1711] = v1708 >> (v1696 + 24);
                }
                else
                {
                  v1711 = v2239;
                  if (v2239 < v2240)
                    goto LABEL_2566;
LABEL_2583:
                  HIDWORD(v2238) = 1;
                }
              }
              v1708 = (v1708 << -(char)v1696) & 0xFFFFFF;
              v1696 = v1710 - 8;
            }
            v1703 = v1707 << v1709;
            LODWORD(v2238) = v1696;
            v1704 = v1708 << v1710;
            v2237 = __PAIR64__(v1703, v1704);
            if (v1685 < 1)
              goto LABEL_2559;
            v1715 = 0;
            while (2)
            {
              v1716 = ((252 * v1703 - 252) >> 8) + 1;
              v1717 = vpx_norm[v1716];
              v1718 = v1696 + v1717;
              if (v1696 + v1717 < 0)
              {
                v1696 += v1717;
                LOBYTE(v1718) = vpx_norm[v1716];
              }
              else
              {
                if (!HIDWORD(v2238))
                {
                  LODWORD(v1719) = v2239;
                  if (((v1704 << ~(_BYTE)v1696) & 0x80000000) != 0)
                  {
                    v1720 = v2239 - 1;
                    if ((int)v2239 >= 1)
                    {
                      while (1)
                      {
                        v1719 = (v1719 - 1);
                        if (v2241[v1719] != 255)
                          break;
                        v2241[v1719] = 0;
                        if ((int)v1719 <= 0)
                        {
                          v1720 = -1;
                          goto LABEL_2601;
                        }
                      }
                      v1720 = v1719;
                    }
LABEL_2601:
                    ++v2241[v1720];
                    LODWORD(v1719) = v2239;
                    if (v2239 >= v2240)
                      goto LABEL_2587;
LABEL_2602:
                    v2239 = v1719 + 1;
                    v2241[v1719] = v1704 >> (v1696 + 24);
                  }
                  else
                  {
                    if (v2239 < v2240)
                      goto LABEL_2602;
LABEL_2587:
                    HIDWORD(v2238) = 1;
                  }
                }
                v1704 = (v1704 << -(char)v1696) & 0xFFFFFF;
                v1696 = v1718 - 8;
              }
              v1703 = (_DWORD)v1716 << v1717;
              v1704 <<= v1718;
              LODWORD(v2238) = v1696;
              v2237 = __PAIR64__(v1703, v1704);
              if (++v1715 == v1685)
                goto LABEL_2559;
              continue;
            }
          }
          v1721 = 0;
          v1722 = 0;
          v2259[0] = 0;
          v2185 = v1683;
          v1723 = (unsigned __int8 *)(v1683 + v2167 + 176);
          v1724 = (unsigned int *)&v2249;
          v1725 = (char *)&v2243 + 1;
          do
          {
            v2212 = v1723;
            v2221 = v1721;
            if (v1721)
              v1726 = 6;
            else
              v1726 = 3;
            v2192 = v1725;
            v2200 = v1724;
            do
            {
              v2242 = *(v1725 - 1);
              v1727 = *(v1723 - 2);
              updated = vp9_prob_diff_update_savings_search(v1724, v1727, &v2242, 0xFCu);
              v1729 = *(v1723 - 1);
              v1730 = *v1725;
              if (updated > 0 && v2242 != v1727)
                v1732 = updated;
              else
                v1732 = 0;
              v1731 = (updated > 0) & (v2242 != v1727);
              ++*(_DWORD *)((unint64_t)v2259 | (4 * v1731));
              v2242 = v1730;
              v1733 = vp9_prob_diff_update_savings_search(v1724 + 2, v1729, &v2242, 0xFCu);
              v1735 = *v1723;
              v1723 += 3;
              v1734 = v1735;
              v1736 = v1725[1];
              v1737 = (v1733 > 0) & (v2242 != v1729);
              if (v1733 > 0 && v2242 != v1729)
                v1738 = v1733;
              else
                v1738 = 0;
              ++*(_DWORD *)((unint64_t)v2259 | (4 * v1737));
              v2242 = v1736;
              v1739 = vp9_prob_diff_update_savings_search_model(v1724, v1734, &v2242, 0xFCu, v2230);
              if (v1739 > 0 && v2242 != v1734)
                v1741 = v1739;
              else
                v1741 = 0;
              v1722 = v1722 + v1732 + v1738 + v1741 - 36;
              v1740 = (v1739 > 0) & (v2242 != v1734);
              ++*(_DWORD *)((unint64_t)v2259 | (4 * v1740));
              v1724 += 22;
              v1725 += 3;
              --v1726;
            }
            while (v1726);
            v1721 = v2221 + 1;
            v1724 = v2200 + 132;
            v1723 = v2212 + 18;
            v1725 = v2192 + 18;
          }
          while (v2221 != 5);
          v1742 = 0;
          v1743 = (unsigned __int8 *)(v2185 + v2167 + 284);
          v1744 = v2246;
          v1745 = (unsigned int *)v2256;
          do
          {
            v2213 = v1743;
            v2222 = v1742;
            if (v1742)
              v1746 = 6;
            else
              v1746 = 3;
            v2193 = v1745;
            v2201 = v1744;
            do
            {
              v2242 = *(v1744 - 2);
              v1747 = *(v1743 - 2);
              v1748 = vp9_prob_diff_update_savings_search(v1745, v1747, &v2242, 0xFCu);
              v1749 = *(v1743 - 1);
              v1750 = *(v1744 - 1);
              if (v1748 > 0 && v2242 != v1747)
                v1752 = v1748;
              else
                v1752 = 0;
              v1751 = (v1748 > 0) & (v2242 != v1747);
              ++*(_DWORD *)((unint64_t)v2259 | (4 * v1751));
              v2242 = v1750;
              v1753 = vp9_prob_diff_update_savings_search(v1745 + 2, v1749, &v2242, 0xFCu);
              v1755 = *v1743;
              v1743 += 3;
              v1754 = v1755;
              LOBYTE(v1755) = *v1744;
              v1744 += 3;
              v1756 = v1755;
              v1757 = (v1753 > 0) & (v2242 != v1749);
              if (v1753 > 0 && v2242 != v1749)
                v1758 = v1753;
              else
                v1758 = 0;
              ++*(_DWORD *)((unint64_t)v2259 | (4 * v1757));
              v2242 = v1756;
              v1759 = vp9_prob_diff_update_savings_search_model(v1745, v1754, &v2242, 0xFCu, v2230);
              if (v1759 > 0 && v2242 != v1754)
                v1761 = v1759;
              else
                v1761 = 0;
              v1722 = v1722 + v1752 + v1758 + v1761 - 36;
              v1760 = (v1759 > 0) & (v2242 != v1754);
              ++*(_DWORD *)((unint64_t)v2259 | (4 * v1760));
              v1745 += 22;
              --v1746;
            }
            while (v1746);
            v1742 = v2222 + 1;
            v1745 = v2193 + 132;
            v1744 = v2201 + 18;
            v1743 = v2213 + 18;
          }
          while (v2222 != 5);
          v1762 = 0;
          v1763 = (unsigned __int8 *)(v2185 + v2167 + 392);
          v1764 = v2247;
          v1765 = (unsigned int *)&v2257;
          do
          {
            v2214 = v1763;
            v2223 = v1762;
            if (v1762)
              v1766 = 6;
            else
              v1766 = 3;
            v2194 = v1765;
            v2202 = v1764;
            do
            {
              v2242 = *(v1764 - 2);
              v1767 = *(v1763 - 2);
              v1768 = vp9_prob_diff_update_savings_search(v1765, v1767, &v2242, 0xFCu);
              v1769 = *(v1763 - 1);
              v1770 = *(v1764 - 1);
              if (v1768 > 0 && v2242 != v1767)
                v1772 = v1768;
              else
                v1772 = 0;
              v1771 = (v1768 > 0) & (v2242 != v1767);
              ++*(_DWORD *)((unint64_t)v2259 | (4 * v1771));
              v2242 = v1770;
              v1773 = vp9_prob_diff_update_savings_search(v1765 + 2, v1769, &v2242, 0xFCu);
              v1775 = *v1763;
              v1763 += 3;
              v1774 = v1775;
              LOBYTE(v1775) = *v1764;
              v1764 += 3;
              v1776 = v1775;
              v1777 = (v1773 > 0) & (v2242 != v1769);
              if (v1773 > 0 && v2242 != v1769)
                v1778 = v1773;
              else
                v1778 = 0;
              ++*(_DWORD *)((unint64_t)v2259 | (4 * v1777));
              v2242 = v1776;
              v1779 = vp9_prob_diff_update_savings_search_model(v1765, v1774, &v2242, 0xFCu, v2230);
              if (v1779 > 0 && v2242 != v1774)
                v1781 = v1779;
              else
                v1781 = 0;
              v1722 = v1722 + v1772 + v1778 + v1781 - 36;
              v1780 = (v1779 > 0) & (v2242 != v1774);
              ++*(_DWORD *)((unint64_t)v2259 | (4 * v1780));
              v1765 += 22;
              --v1766;
            }
            while (v1766);
            v1762 = v2223 + 1;
            v1765 = v2194 + 132;
            v1764 = v2202 + 18;
            v1763 = v2214 + 18;
          }
          while (v2223 != 5);
          v1782 = 0;
          v1783 = (unsigned __int8 *)(v2185 + v2167 + 500);
          v1785 = &v2248;
          v1784 = (unsigned int *)&v2258;
          do
          {
            v2215 = v1783;
            v2224 = v1782;
            if (v1782)
              v1786 = 6;
            else
              v1786 = 3;
            v2195 = v1784;
            v2203 = v1785;
            do
            {
              v2242 = *((_BYTE *)v1785 - 2);
              v1787 = *(v1783 - 2);
              v1788 = vp9_prob_diff_update_savings_search(v1784, v1787, &v2242, 0xFCu);
              v1789 = *(v1783 - 1);
              v1790 = *((_BYTE *)v1785 - 1);
              if (v1788 > 0 && v2242 != v1787)
                v1792 = v1788;
              else
                v1792 = 0;
              v1791 = (v1788 > 0) & (v2242 != v1787);
              ++*(_DWORD *)((unint64_t)v2259 | (4 * v1791));
              v2242 = v1790;
              v1793 = vp9_prob_diff_update_savings_search(v1784 + 2, v1789, &v2242, 0xFCu);
              v1795 = *v1783;
              v1783 += 3;
              v1794 = v1795;
              LOBYTE(v1795) = *(_BYTE *)v1785;
              v1785 = (__int16 *)((char *)v1785 + 3);
              v1796 = v1795;
              v1797 = (v1793 > 0) & (v2242 != v1789);
              if (v1793 > 0 && v2242 != v1789)
                v1798 = v1793;
              else
                v1798 = 0;
              ++*(_DWORD *)((unint64_t)v2259 | (4 * v1797));
              v2242 = v1796;
              v1799 = vp9_prob_diff_update_savings_search_model(v1784, v1794, &v2242, 0xFCu, v2230);
              if (v1799 > 0 && v2242 != v1794)
                v1801 = v1799;
              else
                v1801 = 0;
              v1722 = v1722 + v1792 + v1798 + v1801 - 36;
              v1800 = (v1799 > 0) & (v2242 != v1794);
              ++*(_DWORD *)((unint64_t)v2259 | (4 * v1800));
              v1784 += 22;
              --v1786;
            }
            while (v1786);
            v1782 = v2224 + 1;
            v1784 = v2195 + 132;
            v1785 = v2203 + 9;
            v1783 = v2215 + 18;
          }
          while (v2224 != 5);
          v1802 = v2238;
          v1803 = v2237;
          v1804 = (((HIDWORD(v2237) << 7) - 128) >> 8) + 1;
          if (HIDWORD(v2259[0]) && (v1722 & 0x8000000000000000) == 0)
          {
            v1805 = HIDWORD(v2237) - v1804;
            v1806 = v1804 + v2237;
            v1807 = vpx_norm[(HIDWORD(v2237) - v1804)];
            v1808 = v2238 + v1807;
            if ((int)v2238 + v1807 < 0)
            {
              v1814 = v2238 + v1807;
              LOBYTE(v1808) = vpx_norm[v1805];
            }
            else
            {
              if (!HIDWORD(v2238))
              {
                if (((v1806 << ~(_BYTE)v2238) & 0x80000000) != 0)
                {
                  LODWORD(v1817) = v2239;
                  v1818 = v2239 - 1;
                  if ((int)v2239 >= 1)
                  {
                    while (1)
                    {
                      v1817 = (v1817 - 1);
                      if (v2241[v1817] != 255)
                        break;
                      v2241[v1817] = 0;
                      if ((int)v1817 <= 0)
                      {
                        v1818 = -1;
                        goto LABEL_2709;
                      }
                    }
                    v1818 = v1817;
                  }
LABEL_2709:
                  ++v2241[v1818];
                  v1809 = v2239;
                  if (v2239 >= v2240)
                    goto LABEL_2710;
LABEL_2682:
                  v2239 = v1809 + 1;
                  v2241[v1809] = v1806 >> (v1802 + 24);
                }
                else
                {
                  v1809 = v2239;
                  if (v2239 < v2240)
                    goto LABEL_2682;
LABEL_2710:
                  HIDWORD(v2238) = 1;
                }
              }
              v1806 = (v1806 << -v1802) & 0xFFFFFF;
              v1814 = v1808 - 8;
            }
            v1819 = 0;
            LODWORD(v2238) = v1814;
            LODWORD(v2237) = v1806 << v1808;
            HIDWORD(v2237) = v1805 << v1807;
            v1820 = 1;
LABEL_2714:
            v1821 = 0;
            v2204 = v1820;
            v1822 = 1;
LABEL_2716:
            v1823 = 0;
            v2216 = v1822;
LABEL_2718:
            v1824 = 0;
            v1825 = 6;
            if (!v1823)
              v1825 = 3;
            v2225 = v1825;
LABEL_2722:
            v1826 = 0;
            v1827 = v2208 + 216 * v1819 + 108 * v1821 + 18 * v1823 + 3 * v1824;
            while (2)
            {
              v2242 = *((_BYTE *)&v2243 + 216 * v1819 + 108 * v1821 + 18 * v1823 + 3 * v1824 + v1826);
              if (v1826 == 2)
              {
                if (vp9_prob_diff_update_savings_search_model((_DWORD *)&v2249 + 1584 * v1819 + 792 * v1821 + 132 * v1823 + 22 * v1824, *(unsigned __int8 *)(v1827 + 2), &v2242, 0xFCu, v2230) < 1)goto LABEL_2729;
LABEL_2735:
                v1835 = v2242;
                v1836 = *(unsigned __int8 *)(v1827 + v1826);
                v1837 = v2238;
                v1838 = (252 * HIDWORD(v2237) - 252) >> 8;
                v1839 = HIDWORD(v2237) - (v1838 + 1);
                if (v2242 == v1836)
                {
                  v1839 = v1838 + 1;
                  v1840 = 0;
                }
                else
                {
                  v1840 = v1838 + 1;
                }
                v1841 = v1840 + v2237;
                v1842 = vpx_norm[v1839];
                v1843 = v2238 + v1842;
                if ((int)v2238 + v1842 < 0)
                {
                  v1845 = v2238 + v1842;
                  LOBYTE(v1843) = vpx_norm[v1839];
                }
                else
                {
                  if (!HIDWORD(v2238))
                  {
                    if (((v1841 << ~(_BYTE)v2238) & 0x80000000) != 0)
                    {
                      LODWORD(v1846) = v2239;
                      v1847 = v2239 - 1;
                      if ((int)v2239 >= 1)
                      {
                        while (1)
                        {
                          v1846 = (v1846 - 1);
                          if (v2241[v1846] != 255)
                            break;
                          v2241[v1846] = 0;
                          if ((int)v1846 <= 0)
                          {
                            v1847 = -1;
                            goto LABEL_2754;
                          }
                        }
                        v1847 = v1846;
                      }
LABEL_2754:
                      ++v2241[v1847];
                      v1844 = v2239;
                      if (v2239 >= v2240)
                        goto LABEL_2755;
LABEL_2742:
                      v2239 = v1844 + 1;
                      v2241[v1844] = v1841 >> (v1837 + 24);
                    }
                    else
                    {
                      v1844 = v2239;
                      if (v2239 < v2240)
                        goto LABEL_2742;
LABEL_2755:
                      HIDWORD(v2238) = 1;
                    }
                  }
                  v1841 = (v1841 << -v1837) & 0xFFFFFF;
                  v1845 = v1843 - 8;
                }
                LODWORD(v2238) = v1845;
                LODWORD(v2237) = v1841 << v1843;
                HIDWORD(v2237) = v1839 << v1842;
                if (v1835 != v1836)
                {
                  vp9_write_prob_diff_update((uint64_t)&v2237, v2242, *(unsigned __int8 *)(v1827 + v1826));
                  *(_BYTE *)(v1827 + v1826) = v2242;
                }
LABEL_2726:
                if (++v1826 != 3)
                  continue;
                if (++v1824 != v2225)
                  goto LABEL_2722;
                if (++v1823 != 6)
                  goto LABEL_2718;
                v1822 = 0;
                v1821 = 1;
                if ((v2216 & 1) != 0)
                  goto LABEL_2716;
                v1820 = 0;
                v1819 = 1;
                if ((v2204 & 1) != 0)
                  goto LABEL_2714;
LABEL_2707:
                v9 = v2173;
                v8 = v2174;
                v1633 = v2166;
                v1636 = v2168;
LABEL_2490:
                v1632 = v1636 + 1;
                if (v1633 >= (v1636 + 1))
                  goto LABEL_2491;
                vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1967), (unsigned int *)(v2162 + 12776));
                vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1968), (unsigned int *)(v2162 + 12784));
                vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(*((_QWORD *)v8 + 22) + 1969), (unsigned int *)(v2162 + 12792));
                if (*((_DWORD *)v9 + 2381) && !*v2170)
                {
                  v1850 = (unsigned __int8 *)*((_QWORD *)v8 + 22);
                  convert_distribution(0, (uint64_t)vp9_inter_mode_tree, (uint64_t)&v2249, v2162 + 12384);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1850 + 1910, (unsigned int *)&v2249);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1850 + 1911, (unsigned int *)&v2249 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1850 + 1912, (unsigned int *)&v2250);
                  v1851 = (unsigned __int8 *)*((_QWORD *)v8 + 22);
                  convert_distribution(0, (uint64_t)vp9_inter_mode_tree, (uint64_t)&v2249, v2162 + 12400);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1851 + 1913, (unsigned int *)&v2249);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1851 + 1914, (unsigned int *)&v2249 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1851 + 1915, (unsigned int *)&v2250);
                  v1852 = (unsigned __int8 *)*((_QWORD *)v8 + 22);
                  convert_distribution(0, (uint64_t)vp9_inter_mode_tree, (uint64_t)&v2249, v2162 + 12416);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1852 + 1916, (unsigned int *)&v2249);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1852 + 1917, (unsigned int *)&v2249 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1852 + 1918, (unsigned int *)&v2250);
                  v1853 = (unsigned __int8 *)*((_QWORD *)v8 + 22);
                  convert_distribution(0, (uint64_t)vp9_inter_mode_tree, (uint64_t)&v2249, v2162 + 12432);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1853 + 1919, (unsigned int *)&v2249);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1853 + 1920, (unsigned int *)&v2249 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1853 + 1921, (unsigned int *)&v2250);
                  v1854 = (unsigned __int8 *)*((_QWORD *)v8 + 22);
                  convert_distribution(0, (uint64_t)vp9_inter_mode_tree, (uint64_t)&v2249, v2162 + 12448);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1854 + 1922, (unsigned int *)&v2249);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1854 + 1923, (unsigned int *)&v2249 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1854 + 1924, (unsigned int *)&v2250);
                  v1855 = (unsigned __int8 *)*((_QWORD *)v8 + 22);
                  convert_distribution(0, (uint64_t)vp9_inter_mode_tree, (uint64_t)&v2249, v2162 + 12464);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1855 + 1925, (unsigned int *)&v2249);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1855 + 1926, (unsigned int *)&v2249 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1855 + 1927, (unsigned int *)&v2250);
                  v1856 = (unsigned __int8 *)*((_QWORD *)v8 + 22);
                  convert_distribution(0, (uint64_t)vp9_inter_mode_tree, (uint64_t)&v2249, v2162 + 12480);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1856 + 1928, (unsigned int *)&v2249);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1856 + 1929, (unsigned int *)&v2249 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1856 + 1930, (unsigned int *)&v2250);
                  if (v2170[264] == 4)
                  {
                    v1857 = *((_QWORD *)v8 + 22);
                    convert_distribution(0, (uint64_t)vp9_switchable_interp_tree, (uint64_t)&v2249, v2162 + 12336);
                    vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(v1857 + 1902), (unsigned int *)&v2249);
                    vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(v1857 + 1903), (unsigned int *)&v2249 + 2);
                    v1858 = *((_QWORD *)v8 + 22);
                    convert_distribution(0, (uint64_t)vp9_switchable_interp_tree, (uint64_t)&v2249, v2162 + 12348);
                    vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(v1858 + 1904), (unsigned int *)&v2249);
                    vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(v1858 + 1905), (unsigned int *)&v2249 + 2);
                    v1859 = *((_QWORD *)v8 + 22);
                    convert_distribution(0, (uint64_t)vp9_switchable_interp_tree, (uint64_t)&v2249, v2162 + 12360);
                    vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(v1859 + 1906), (unsigned int *)&v2249);
                    vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(v1859 + 1907), (unsigned int *)&v2249 + 2);
                    v1860 = *((_QWORD *)v8 + 22);
                    convert_distribution(0, (uint64_t)vp9_switchable_interp_tree, (uint64_t)&v2249, v2162 + 12372);
                    vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(v1860 + 1908), (unsigned int *)&v2249);
                    vp9_cond_prob_diff_update((uint64_t)&v2237, (unsigned __int8 *)(v1860 + 1909), (unsigned int *)&v2249 + 2);
                  }
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1931, (unsigned int *)(v2162 + 12496));
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1932, (unsigned int *)(v2162 + 12504));
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1933, (unsigned int *)(v2162 + 12512));
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1934, (unsigned int *)(v2162 + 12520));
                  if (v2171[256])
                  {
                    v1861 = v8[42];
                    v1862 = v2238;
                    v1863 = ((HIDWORD(v2237) << 7) - 128) >> 8;
                    v1864 = HIDWORD(v2237) - (v1863 + 1);
                    if (v1861)
                    {
                      v1865 = v1863 + 1;
                    }
                    else
                    {
                      v1864 = v1863 + 1;
                      v1865 = 0;
                    }
                    v1866 = v1865 + v2237;
                    v1867 = vpx_norm[v1864];
                    v1868 = v2238 + v1867;
                    if ((int)v2238 + v1867 < 0)
                    {
                      v1872 = v2238 + v1867;
                      LOBYTE(v1868) = vpx_norm[v1864];
                    }
                    else
                    {
                      v1869 = -(int)v2238;
                      if (!HIDWORD(v2238))
                      {
                        if (((v1866 << ~(_BYTE)v2238) & 0x80000000) != 0)
                        {
                          LODWORD(v1870) = v2239;
                          v1871 = v2239 - 1;
                          if ((int)v2239 >= 1)
                          {
                            while (1)
                            {
                              v1870 = (v1870 - 1);
                              if (v2241[v1870] != 255)
                                break;
                              v2241[v1870] = 0;
                              if ((int)v1870 <= 0)
                              {
                                v1871 = -1;
                                goto LABEL_2779;
                              }
                            }
                            v1871 = v1870;
                          }
LABEL_2779:
                          ++v2241[v1871];
                        }
                        v1873 = v2239;
                        if (v2239 >= v2240)
                        {
                          HIDWORD(v2238) = 1;
                        }
                        else
                        {
                          ++v2239;
                          v2241[v1873] = v1866 >> (v1862 + 24);
                        }
                      }
                      v1866 = (v1866 << v1869) & 0xFFFFFF;
                      v1872 = v1868 - 8;
                    }
                    v1874 = v1864 << v1867;
                    LODWORD(v2238) = v1872;
                    v1875 = v1866 << v1868;
                    v2237 = __PAIR64__(v1874, v1875);
                    if (v1861)
                    {
                      v1876 = ((v1874 << 7) - 128) >> 8;
                      v1877 = v1874 - (v1876 + 1);
                      if (v1861 == 2)
                      {
                        v1878 = v1876 + 1;
                      }
                      else
                      {
                        v1877 = v1876 + 1;
                        v1878 = 0;
                      }
                      v1879 = v1875 + v1878;
                      v1880 = vpx_norm[v1877];
                      v1881 = v1872 + v1880;
                      if (v1872 + v1880 < 0)
                      {
                        v1884 = v1872 + v1880;
                        LOBYTE(v1881) = vpx_norm[v1877];
                      }
                      else
                      {
                        if (!HIDWORD(v2238))
                        {
                          LODWORD(v1882) = v2239;
                          if (((v1879 << ~(_BYTE)v1872) & 0x80000000) != 0)
                          {
                            v1883 = v2239 - 1;
                            if ((int)v2239 >= 1)
                            {
                              while (1)
                              {
                                v1882 = (v1882 - 1);
                                if (v2241[v1882] != 255)
                                  break;
                                v2241[v1882] = 0;
                                if ((int)v1882 <= 0)
                                {
                                  v1883 = -1;
                                  goto LABEL_2797;
                                }
                              }
                              v1883 = v1882;
                            }
LABEL_2797:
                            ++v2241[v1883];
                            LODWORD(v1882) = v2239;
                          }
                          if (v1882 >= v2240)
                          {
                            HIDWORD(v2238) = 1;
                          }
                          else
                          {
                            v2239 = v1882 + 1;
                            v2241[v1882] = v1879 >> (v1872 + 24);
                          }
                        }
                        v1879 = (v1879 << -(char)v1872) & 0xFFFFFF;
                        v1884 = v1881 - 8;
                      }
                      LODWORD(v2238) = v1884;
                      LODWORD(v2237) = v1879 << v1881;
                      HIDWORD(v2237) = v1877 << v1880;
                      if (v1861 == 2)
                      {
                        vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1935, (unsigned int *)(v2162 + 12528));
                        vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1936, (unsigned int *)(v2162 + 12536));
                        vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1937, (unsigned int *)(v2162 + 12544));
                        vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1938, (unsigned int *)(v2162 + 12552));
                        vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1939, (unsigned int *)(v2162 + 12560));
                      }
                    }
                  }
                  if (v8[42] == 1)
                    goto LABEL_2806;
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1940, (unsigned int *)(v2162 + 12568));
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1941, (unsigned int *)(v2162 + 12576));
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1942, (unsigned int *)(v2162 + 12584));
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1943, (unsigned int *)(v2162 + 12592));
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1944, (unsigned int *)(v2162 + 12600));
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1945, (unsigned int *)(v2162 + 12608));
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1946, (unsigned int *)(v2162 + 12616));
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1947, (unsigned int *)(v2162 + 12624));
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1948, (unsigned int *)(v2162 + 12632));
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1949, (unsigned int *)(v2162 + 12640));
                  if (v8[42])
                  {
LABEL_2806:
                    vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1950, (unsigned int *)(v2162 + 12648));
                    vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1951, (unsigned int *)(v2162 + 12656));
                    vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1952, (unsigned int *)(v2162 + 12664));
                    vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1953, (unsigned int *)(v2162 + 12672));
                    vp9_cond_prob_diff_update((uint64_t)&v2237, v2156 + 1954, (unsigned int *)(v2162 + 12680));
                  }
                  v1885 = (unsigned __int8 *)*((_QWORD *)v8 + 22);
                  convert_distribution(0, (uint64_t)vp9_intra_mode_tree, (uint64_t)&v2249, v2162);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1885, (unsigned int *)&v2249);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1885 + 1, (unsigned int *)&v2249 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1885 + 2, (unsigned int *)&v2250);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1885 + 3, (unsigned int *)&v2250 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1885 + 4, &v2251);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1885 + 5, &v2252);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1885 + 6, &v2253);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1885 + 7, &v2254);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1885 + 8, v2255);
                  v1886 = (unsigned __int8 *)*((_QWORD *)v8 + 22);
                  convert_distribution(0, (uint64_t)vp9_intra_mode_tree, (uint64_t)&v2249, v2162 + 40);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1886 + 9, (unsigned int *)&v2249);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1886 + 10, (unsigned int *)&v2249 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1886 + 11, (unsigned int *)&v2250);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1886 + 12, (unsigned int *)&v2250 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1886 + 13, &v2251);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1886 + 14, &v2252);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1886 + 15, &v2253);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1886 + 16, &v2254);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1886 + 17, v2255);
                  v1887 = (unsigned __int8 *)*((_QWORD *)v8 + 22);
                  convert_distribution(0, (uint64_t)vp9_intra_mode_tree, (uint64_t)&v2249, v2162 + 80);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1887 + 18, (unsigned int *)&v2249);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1887 + 19, (unsigned int *)&v2249 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1887 + 20, (unsigned int *)&v2250);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1887 + 21, (unsigned int *)&v2250 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1887 + 22, &v2251);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1887 + 23, &v2252);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1887 + 24, &v2253);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1887 + 25, &v2254);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1887 + 26, v2255);
                  v1888 = (unsigned __int8 *)*((_QWORD *)v8 + 22);
                  convert_distribution(0, (uint64_t)vp9_intra_mode_tree, (uint64_t)&v2249, v2162 + 120);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1888 + 27, (unsigned int *)&v2249);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1888 + 28, (unsigned int *)&v2249 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1888 + 29, (unsigned int *)&v2250);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1888 + 30, (unsigned int *)&v2250 + 2);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1888 + 31, &v2251);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1888 + 32, &v2252);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1888 + 33, &v2253);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1888 + 34, &v2254);
                  vp9_cond_prob_diff_update((uint64_t)&v2237, v1888 + 35, v2255);
                  v1889 = 0;
                  v1890 = v2156 + 128;
                  do
                  {
                    convert_distribution(0, (uint64_t)vp9_partition_tree, (uint64_t)&v2249, v2162 + 560 + v1889);
                    vp9_cond_prob_diff_update((uint64_t)&v2237, v1890 - 2, (unsigned int *)&v2249);
                    vp9_cond_prob_diff_update((uint64_t)&v2237, v1890 - 1, (unsigned int *)&v2249 + 2);
                    vp9_cond_prob_diff_update((uint64_t)&v2237, v1890, (unsigned int *)&v2250);
                    v1889 += 16;
                    v1890 += 3;
                  }
                  while (v1889 != 256);
                  vp9_write_nmv_probs((uint64_t)v2175, *((_DWORD *)v2170 + 1), (uint64_t)&v2237, (unsigned int *)(v2162 + 12800));
                }
                v1891 = v2160;
                if (vpx_stop_encode((uint64_t)&v2237))
                  vpx_internal_error((uint64_t)v2175, 1, "write_compressed_header: output buffer full");
                v1892 = v2239;
                if (v2239 >= 0x10000)
                  vpx_internal_error((uint64_t)v2175, 1, "compressed_hdr_size > 16 bits");
                v2209 = &v2157[v1892];
                if (!v2159)
                {
                  v1923 = 0;
                  for (j = 17; j > 1; --j)
                  {
                    if (!v1923)
                    {
                      if (v1891 >= 0)
                        v1925 = v1891;
                      else
                        v1925 = v1891 + 7;
                      v1926 = (uint64_t)v1925 >> 3;
                      if (v2163 <= v1926)
                      {
                        v1923 = 1;
                      }
                      else
                      {
                        v1927 = (v1892 >> (j - 2)) & 1;
                        v1928 = v1891 - (v1925 & 0xFFFFFFF8);
                        if (v1928)
                          v2161[v1926] |= (_BYTE)v1927 << (7 - v1928);
                        else
                          v2161[v1926] = (_BYTE)v1927 << 7;
                        v1923 = 0;
                        ++v1891;
                      }
                    }
                  }
                }
                v2186 = v2158 - v1892;
                v2249 = 0u;
                v2250 = 0u;
                v2176 = v8[3376];
                v1893 = 1 << v2176;
                v1894 = v8[3377];
                bzero(*((void **)v8 + 1691), (*((int *)v2170 + 7) + 7) & 0xFFFFFFFFFFFFFFF8);
                if (v8[3412] != 2 || (v1895 = *v2169, *v2169 < 2) || v1894 || v1893 < 2)
                {
                  if (v1894 == 31 || v2176 == 31)
                    goto LABEL_2898;
                  v1903 = 0;
                  v1904 = 0;
                  LODWORD(v1905) = 1 << v1894;
                  if (v1893 <= 1)
                    v1906 = 1;
                  else
                    v1906 = v1893;
                  v2180 = v1906;
                  v2177 = (int)v1905 - 1;
                  if ((int)v1905 <= 1)
                    v1905 = 1;
                  else
                    v1905 = v1905;
                  v2172 = v1905;
                  do
                  {
                    v1907 = 0;
                    v2182 = (int)((_DWORD)v1903 << v2176);
                    v2205 = v1903;
                    do
                    {
                      v1909 = v1907 < v1893 - 1 || v1903 < v2177;
                      v2196 = v1904 + 4;
                      if (v1909)
                        v1910 = v1904 + 4;
                      else
                        v1910 = v1904;
                      if (v2186 < v1910)
                        vpx_internal_error((uint64_t)v2175, 1, "encode_tiles: output buffer full");
                      v1911 = 0x7FFFFFFF;
                      if (v2186 - v1910 < 0x7FFFFFFF)
                        v1911 = v2186 - v1910;
                      LODWORD(v2250) = 0;
                      DWORD1(v2250) = v1911;
                      *((_QWORD *)&v2250 + 1) = &v2209[v1910];
                      v2249 = xmmword_208F3BB00;
                      v1912 = *((_QWORD *)v8 + 2258);
                      v2243 = 0;
                      v2226 = v1904;
                      v2217 = v1909;
                      if (*((_DWORD *)v2173 + 2381))
                      {
                        v1913 = &vp9_kf_partition_probs;
                        if (!*v2170)
                          v1913 = (void *)(*((_QWORD *)v8 + 22) + 126);
                      }
                      else
                      {
                        v1913 = &vp9_kf_partition_probs;
                      }
                      v2231 = v1907;
                      v1914 = (int *)(v1912 + 3720 * (v1907 + v2182));
                      *((_QWORD *)v2188 + 9324) = v1913;
                      for (k = *v1914; k < v1914[1]; k += 8)
                      {
                        v1916 = *(_QWORD *)&v2188[128 * v2205 + 49208 + 2 * v1907] + 24 * ((k - *v1914 + 7) >> 3);
                        v1917 = *(_QWORD *)v1916;
                        v2243 = *(_QWORD *)v1916;
                        v1918 = *(unsigned int *)(v1916 + 16);
                        *((_QWORD *)v2188 + 9341) = 0;
                        v1919 = v1914[2];
                        if (v1919 < v1914[3])
                        {
                          v1920 = (unsigned __int8 **)(v1917 + 16 * v1918);
                          do
                          {
                            write_modes_sb(v2188, (uint64_t)__src, (uint64_t)v1914, (uint64_t)&v2249, &v2243, v1920, k, v1919, 0xCu, v2188 + 185048, (uint64_t)(v2188 + 184794));
                            v1919 += 8;
                          }
                          while (v1919 < v1914[3]);
                        }
                      }
                      if (vpx_stop_encode((uint64_t)&v2249))
                        vpx_internal_error((uint64_t)v2175, 1, "encode_tiles: output buffer full");
                      v1921 = v2250;
                      v1922 = v2226;
                      v1903 = v2205;
                      if (v2217)
                      {
                        *(_DWORD *)&v2209[v2226] = bswap32(v2250);
                        v1922 = v2196;
                      }
                      v8 = v2174;
                      v1904 = v1922 + v1921;
                      ++v1907;
                    }
                    while (v2231 + 1 != v2180);
                    v1903 = v2205 + 1;
                  }
                  while (v2205 + 1 != v2172);
LABEL_2899:
                  v1609 = &v2209[v1904] - v2165;
                  goto LABEL_2900;
                }
                v1896 = v8[3376];
                v1897 = (int)v8[3393]
                      * (uint64_t)(int)v8[3392]
                      * ((2 * (8u >> (*((_DWORD *)v2173 + 2142) + *((_DWORD *)v2173 + 2141))) + 8) << (v8[3358] > 8u))
                      / 8;
                v1898 = *((_QWORD *)v2188 + 105293);
                if (!v1898)
                {
                  v1901 = *v2169;
                  goto LABEL_2881;
                }
                if (*(_QWORD *)(v1898 + 744) != v1897)
                {
                  v1899 = 1;
                  v1900 = 736;
                  v1901 = *v2169;
                  do
                  {
                    v1902 = *(_QWORD *)(*((_QWORD *)v2188 + 105293) + v1900);
                    if (v1902)
                    {
                      free(*(void **)(v1902 - 8));
                      v1901 = *v2169;
                    }
                    ++v1899;
                    v1900 += 736;
                  }
                  while (v1899 < v1901);
                  v1929 = *((_QWORD *)v2188 + 105293);
                  if (v1929)
                  {
                    free(*(void **)(v1929 - 8));
                    v1901 = *v2169;
                  }
                  *((_QWORD *)v2188 + 105293) = 0;
LABEL_2881:
                  v1930 = 736 * v1901;
                  if ((v1930 | 0x17) > 0x10000000000
                    || (v1931 = malloc_type_malloc(v1930 | 0x17, 0x74AD08B5uLL)) == 0)
                  {
                    v1934 = v2188 + 210559;
                    *((_QWORD *)v2188 + 105293) = 0;
                    goto LABEL_2886;
                  }
                  v1932 = v1931;
                  v1933 = (_QWORD *)(((unint64_t)v1931 + 23) & 0xFFFFFFFFFFFFFFF0);
                  *(v1933 - 1) = v1932;
                  v1934 = v2188 + 210559;
                  *((_QWORD *)v2188 + 105293) = v1933;
                  if (!v1933)
                  {
LABEL_2886:
                    vpx_internal_error((uint64_t)v2175, 2, "Failed to allocate cpi->vp9_bitstream_worker_data");
                    v1933 = *(_QWORD **)(v1934 + 27);
                  }
                  bzero(v1933, v1930);
                  if ((int)*v1934 >= 2)
                  {
                    v1935 = 1;
                    v1936 = 736;
                    do
                    {
                      if ((unint64_t)(v1897 + 23) >= 0x10000000001)
                      {
                        v1937 = *((_QWORD *)v2188 + 105293);
                      }
                      else
                      {
                        v1939 = malloc_type_malloc(v1897 + 23, 0x74AD08B5uLL);
                        v1937 = *((_QWORD *)v2188 + 105293);
                        if (v1939)
                        {
                          v1940 = ((unint64_t)v1939 + 23) & 0xFFFFFFFFFFFFFFF0;
                          *(_QWORD *)(v1940 - 8) = v1939;
                          *(_QWORD *)(v1937 + v1936) = v1940;
                          v1938 = v2188 + 210559;
                          if (v1940)
                            goto LABEL_2892;
                          goto LABEL_2891;
                        }
                      }
                      *(_QWORD *)(v1937 + v1936) = 0;
                      v1938 = v2188 + 210559;
LABEL_2891:
                      vpx_internal_error((uint64_t)v2175, 2, "Failed to allocate cpi->vp9_bitstream_worker_data[i].dest");
                      v1937 = *(_QWORD *)(v1938 + 27);
LABEL_2892:
                      *(_QWORD *)(v1937 + v1936 + 8) = v1897;
                      ++v1935;
                      v1936 += 736;
                    }
                    while (v1935 < *v1938);
                  }
                }
                if (v1896 == 31)
                {
LABEL_2898:
                  v1904 = 0;
                  goto LABEL_2899;
                }
                v1941 = 0;
                v1904 = 0;
                v1942 = v1895;
                v2232 = 1 << v1896;
                v1943 = (1 << v1896) - 1;
                v2218 = v1942;
                v2206 = v1942 - 1;
                v1944 = v2188 + 210559;
                v2189 = v1943;
                while (2)
                {
                  v1945 = *(_QWORD *)(v1944 + 1);
                  v1946 = *(_QWORD *)(v1944 + 27);
                  memcpy((void *)(v1946 + 80), __src, 0x290uLL);
                  *(_DWORD *)(v1946 + 48) = v1941;
                  *(_DWORD *)(v1946 + 52) = v2171[254];
                  *(_QWORD *)(v1946 + 56) = 0;
                  *(_QWORD *)(v1946 + 64) = 0;
                  v1947 = v1904 + 4 * (v1941 != v1943);
                  if (v2186 < v1947)
                    vpx_internal_error((uint64_t)v2175, 1, "encode_tiles_mt: output buffer full");
                  *(_QWORD *)v1946 = &v2209[v1947];
                  *(_QWORD *)(v1946 + 8) = v2186 - v1947;
                  *(_QWORD *)(v1945 + 32) = v2188;
                  *(_QWORD *)(v1945 + 40) = v1946;
                  *(_QWORD *)(v1945 + 24) = encode_tile_worker;
                  *(_DWORD *)(v1945 + 48) = 0;
                  off_253EA52A8((_DWORD *)v1945);
                  if (v1941 + 1 < v2232)
                  {
                    v2227 = v1904;
                    v1948 = 0;
                    v1949 = 736;
                    v1950 = 104;
                    v2197 = v1941;
                    v1951 = v1941;
                    do
                    {
                      v1952 = v1948++;
                      v1953 = (_DWORD *)(*((_QWORD *)v2188 + 105280) + v1950);
                      v1954 = *((_QWORD *)v2188 + 105293) + v1949;
                      memcpy((void *)(v1954 + 80), __src, 0x290uLL);
                      *(_DWORD *)(v1954 + 48) = v1951 + v1952 + 1;
                      *(_DWORD *)(v1954 + 52) = v2171[254];
                      *(_QWORD *)(v1954 + 56) = 0;
                      *(_QWORD *)(v1954 + 64) = 0;
                      *((_QWORD *)v1953 - 2) = v2188;
                      *((_QWORD *)v1953 - 1) = v1954;
                      *((_QWORD *)v1953 - 3) = encode_tile_worker;
                      *v1953 = 0;
                      v1955 = off_253EA52B0;
                      if (v1948 < v2206)
                        v1955 = (uint64_t (**)())&off_253EA52A8;
                      ((void (*)(_DWORD *))*v1955)(v1953 - 12);
                      if (v1952 + 2 >= v2218)
                        break;
                      v1950 += 56;
                      v1949 += 736;
                    }
                    while (v1951 + (int)v1952 + 2 < v2232);
                    v1956 = v1948 + 1;
                    v1941 = v1948 + 1 + v2197;
                    if ((_DWORD)v1948 == -1)
                    {
                      v1944 = v2188 + 210559;
                      v1904 = v2227;
                      v1943 = v2189;
                    }
                    else
                    {
                      v1944 = v2188 + 210559;
                      v1904 = v2227;
                      v1943 = v2189;
                      v1957 = *(unsigned int **)(*((_QWORD *)v2188 + 105280) + 40);
                      off_253EA52A0();
                      if (!v1958)
LABEL_2916:
                        vpx_internal_error((uint64_t)v2175, 1, "encode_tiles_mt: worker had error");
LABEL_2917:
                      v1960 = v1957[8];
                      v1961 = v2171[254];
                      if (v1961 <= v1957[13])
                        v1961 = v1957[13];
                      v2171[254] = v1961;
                      v1962 = v2171[1];
                      *v2171 += v1957[14];
                      v2171[1] = v1962 + v1957[15];
                      v1963 = v2171[3];
                      v1964 = v1956;
                      v2171[2] += v1957[16];
                      v2171[3] = v1963 + v1957[17];
                      if (v1956 > 1 || v1941 != v2232)
                      {
                        if (v2186 - v1904 <= 3)
                          vpx_internal_error((uint64_t)v2175, 1, "encode_tiles_mt: output buffer full");
                        *(_DWORD *)&v2209[v1904] = bswap32(v1960);
                        v1904 += 4;
                      }
                      v1904 += v1960;
                      if (v1956 != 1)
                      {
                        v1965 = v1956 - 1;
                        v1966 = 96;
                        v1967 = 1;
                        do
                        {
                          v1968 = *(_QWORD *)(*(_QWORD *)(v1944 + 1) + v1966);
                          off_253EA52A0();
                          if (!v1969)
                            vpx_internal_error((uint64_t)v2175, 1, "encode_tiles_mt: worker had error");
                          v1970 = *(unsigned int *)(v1968 + 32);
                          v1971 = v2171[254];
                          if (v1971 <= *(_DWORD *)(v1968 + 52))
                            v1971 = *(_DWORD *)(v1968 + 52);
                          v2171[254] = v1971;
                          v1972 = v2171[1];
                          *v2171 += *(_DWORD *)(v1968 + 56);
                          v2171[1] = v1972 + *(_DWORD *)(v1968 + 60);
                          v1973 = v2171[3];
                          v2171[2] += *(_DWORD *)(v1968 + 64);
                          v2171[3] = v1973 + *(_DWORD *)(v1968 + 68);
                          if (v1941 != v2232 || v1967 < v1965)
                          {
                            if (v2186 - v1904 <= 3)
                              vpx_internal_error((uint64_t)v2175, 1, "encode_tiles_mt: output buffer full");
                            *(_DWORD *)&v2209[v1904] = bswap32(v1970);
                            v1904 += 4;
                          }
                          if (v2186 - v1904 < v1970)
                            vpx_internal_error((uint64_t)v2175, 1, "encode_tiles_mt: output buffer full");
                          memcpy(&v2209[v1904], *(const void **)v1968, v1970);
                          v1904 += v1970;
                          ++v1967;
                          v1966 += 56;
                        }
                        while (v1964 != v1967);
                      }
                    }
                    if (v1941 >= v2232)
                      goto LABEL_2899;
                    continue;
                  }
                  break;
                }
                v1956 = 1;
                ++v1941;
                v1957 = *(unsigned int **)(*(_QWORD *)(v1944 + 1) + 40);
                off_253EA52A0();
                if (!v1959)
                  goto LABEL_2916;
                goto LABEL_2917;
              }
              break;
            }
            if (vp9_prob_diff_update_savings_search((unsigned int *)&v2249 + 1584 * v1819 + 792 * v1821 + 132 * v1823 + 22 * v1824 + 2 * v1826, *(unsigned __int8 *)(v1827 + v1826), &v2242, 0xFCu) >= 1)goto LABEL_2735;
LABEL_2729:
            v1830 = v2238;
            v1828 = v2237;
            v1831 = ((252 * HIDWORD(v2237) - 252) >> 8) + 1;
            v1832 = vpx_norm[v1831];
            v1833 = v2238 + v1832;
            if ((int)v2238 + v1832 < 0)
            {
              v1829 = v2238 + v1832;
              LOBYTE(v1833) = vpx_norm[v1831];
            }
            else
            {
              if (!HIDWORD(v2238))
              {
                if ((((_DWORD)v2237 << ~(_BYTE)v2238) & 0x80000000) != 0)
                {
                  LODWORD(v1848) = v2239;
                  v1849 = v2239 - 1;
                  if ((int)v2239 >= 1)
                  {
                    while (1)
                    {
                      v1848 = (v1848 - 1);
                      if (v2241[v1848] != 255)
                        break;
                      v2241[v1848] = 0;
                      if ((int)v1848 <= 0)
                      {
                        v1849 = -1;
                        goto LABEL_2760;
                      }
                    }
                    v1849 = v1848;
                  }
LABEL_2760:
                  ++v2241[v1849];
                  v1834 = v2239;
                  if (v2239 >= v2240)
                    goto LABEL_2723;
LABEL_2761:
                  v2239 = v1834 + 1;
                  v2241[v1834] = v1828 >> (v1830 + 24);
                }
                else
                {
                  v1834 = v2239;
                  if (v2239 < v2240)
                    goto LABEL_2761;
LABEL_2723:
                  HIDWORD(v2238) = 1;
                }
              }
              v1828 = (v1828 << -v1830) & 0xFFFFFF;
              v1829 = v1833 - 8;
            }
            LODWORD(v2238) = v1829;
            LODWORD(v2237) = v1828 << v1833;
            HIDWORD(v2237) = (_DWORD)v1831 << v1832;
            goto LABEL_2726;
          }
          v1810 = vpx_norm[v1804];
          v1811 = v2238 + v1810;
          if ((int)v2238 + v1810 < 0)
          {
            v1813 = v2238 + v1810;
            LOBYTE(v1811) = vpx_norm[v1804];
          }
          else
          {
            if (!HIDWORD(v2238))
            {
              if ((((_DWORD)v2237 << ~(_BYTE)v2238) & 0x80000000) != 0)
              {
                LODWORD(v1815) = v2239;
                v1816 = v2239 - 1;
                if ((int)v2239 < 1)
                  goto LABEL_2703;
                while (1)
                {
                  v1815 = (v1815 - 1);
                  if (v2241[v1815] != 255)
                    break;
                  v2241[v1815] = 0;
                  if ((int)v1815 <= 0)
                  {
                    v1816 = -1;
                    goto LABEL_2703;
                  }
                }
                v1816 = v1815;
LABEL_2703:
                ++v2241[v1816];
                v1812 = v2239;
                if (v2239 >= v2240)
                  goto LABEL_2704;
LABEL_2687:
                v2239 = v1812 + 1;
                v2241[v1812] = v1803 >> (v1802 + 24);
              }
              else
              {
                v1812 = v2239;
                if (v2239 < v2240)
                  goto LABEL_2687;
LABEL_2704:
                HIDWORD(v2238) = 1;
              }
            }
            v1803 = (v1803 << -v1802) & 0xFFFFFF;
            v1813 = v1811 - 8;
          }
          LODWORD(v2238) = v1813;
          LODWORD(v2237) = v1803 << v1811;
          HIDWORD(v2237) = (_DWORD)v1804 << v1810;
          goto LABEL_2707;
        }
      }
    }
  }
  v1609 = v2234 >> 3;
  if ((v2234 & 7) != 0)
    ++v1609;
LABEL_2900:
  *v2164 = v1609;
}

